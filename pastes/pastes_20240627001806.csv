id,title,username,language,date,content
hh5KfAT0,2024-06-26_stats.json,rdp_snitch,JSON,Wednesday 26th of June 2024 07:16:11 PM CDT,"{
  ""ip"": {
    ""94.26.249.208"": 2,
    ""164.92.104.215"": 10,
    ""223.166.31.100"": 4,
    ""103.211.56.178"": 2,
    ""194.165.16.78"": 4,
    ""138.68.248.214"": 8,
    ""104.248.154.46"": 6,
    ""96.126.124.210"": 2,
    ""194.165.16.76"": 4,
    ""84.54.51.43"": 2,
    ""23.94.182.194"": 2,
    ""147.78.47.97"": 4,
    ""198.235.24.56"": 6,
    ""194.165.16.11"": 4,
    ""45.83.64.12"": 2,
    ""212.70.149.142"": 12,
    ""103.121.74.4"": 2,
    ""64.124.50.139"": 2,
    ""45.227.254.49"": 12,
    ""185.170.144.3"": 4,
    ""51.103.90.130"": 2,
    ""20.172.213.49"": 2,
    ""147.185.132.106"": 6,
    ""104.152.52.201"": 2,
    ""207.90.244.14"": 10,
    ""81.19.135.2"": 6,
    ""213.109.202.251"": 12,
    ""187.157.89.218"": 2,
    ""198.235.24.35"": 6,
    ""45.227.254.26"": 4,
    ""168.100.241.25"": 2,
    ""96.51.53.164"": 2,
    ""117.173.153.116"": 2,
    ""116.140.196.215"": 2,
    ""194.165.16.72"": 4,
    ""103.130.145.142"": 10,
    ""198.235.24.112"": 6
  },
  ""asn"": {
    ""AS49505"": 2,
    ""AS14061"": 24,
    ""AS17621"": 4,
    ""AS133676"": 2,
    ""AS48721"": 16,
    ""AS63949"": 2,
    ""AS51396"": 2,
    ""AS36352"": 2,
    ""AS209588"": 10,
    ""AS396982"": 24,
    ""AS208843"": 2,
    ""AS204428"": 12,
    ""AS134886"": 2,
    ""AS6461"": 2,
    ""AS267784"": 16,
    ""AS197414"": 4,
    ""AS8075"": 4,
    ""AS14987"": 2,
    ""AS174"": 10,
    ""AS208312"": 12,
    ""AS8151"": 2,
    ""AS398710"": 2,
    ""AS6327"": 2,
    ""AS9808"": 2,
    ""AS4837"": 2,
    ""AS34394"": 10
  },
  ""isp"": {
    ""OOO \""Network of data-centers \""Selectel\"""": 2,
    ""DigitalOcean, LLC"": 24,
    ""China Unicom Shanghai Province Network"": 4,
    ""Gstech Software Systems Pvt Ltd"": 2,
    ""Flyservers S.A."": 42,
    ""Akamai Technologies, Inc."": 2,
    ""Pfcloud UG"": 2,
    ""HostPapa"": 2,
    ""Google LLC"": 24,
    ""INTERNET-RESEARCH"": 2,
    ""SS-Net"": 12,
    ""Super Sonic Broadband Pvt. Ltd"": 2,
    ""Zayo Bandwidth"": 2,
    ""Xhost Internet Solutions LP"": 4,
    ""Microsoft"": 2,
    ""Microsoft Corporation"": 2,
    ""Rethem Hosting LLC"": 2,
    ""Cogent Communications"": 10,
    ""Red Byte LLC"": 12,
    ""Uninet S.A. de C.V."": 2,
    ""E SHELLS INC"": 2,
    ""Shaw Communications Inc."": 2,
    ""China Mobile communications corporation"": 2,
    ""China Unicom CHINA169 Network"": 2,
    ""Digi Turunc"": 10
  },
  ""org"": {
    ""Unknown"": 8,
    ""DigitalOcean, LLC"": 24,
    ""Gstech Software Systems Pvt Ltd"": 2,
    ""Flyservers S.A"": 20,
    ""Linode"": 2,
    ""Pfcloud UG"": 2,
    ""HostPapa"": 2,
    ""Palo Alto Networks, Inc"": 24,
    ""4Media Ltd"": 12,
    ""Super Sonic Broadband Pvt Ltd"": 2,
    ""Microsoft Corporation"": 2,
    ""UAB Host Baltic"": 16,
    ""Xhostis"": 4,
    ""Microsoft Azure Cloud (francecentral)"": 2,
    ""Microsoft Azure Cloud (eastus)"": 2,
    ""Rethem Hosting LLC"": 2,
    ""SHODAN, LLC"": 10,
    ""Alviva Holding Limited"": 6,
    ""Chang Way Technologies Co. Limited"": 12,
    ""Uninet S.A. de C.V."": 2,
    ""E SHELLS INC"": 2,
    ""Shaw Communications Inc"": 2,
    ""China Mobile"": 2,
    ""China United Network Communications Corporation Limited"": 2,
    ""Turunc Smart Bilgisayar Ve Teknoloji Ve Dis Tecaret Limited"": 10
  },
  ""regionName"": {
    ""Moscow"": 14,
    ""California"": 42,
    ""Shanghai"": 4,
    ""Uttar Pradesh"": 2,
    ""Kaunas"": 16,
    ""Central Singapore"": 6,
    ""Texas"": 12,
    ""Limburg"": 2,
    ""New York"": 2,
    ""North Holland"": 8,
    ""Land Berlin"": 2,
    ""Sofia-Capital"": 12,
    ""Maharashtra"": 2,
    ""Virginia"": 4,
    ""Vilnius"": 16,
    ""\u00cele-de-France"": 2,
    ""Illinois"": 4,
    ""Hesse"": 6,
    ""Mexico City"": 2,
    ""Alberta"": 2,
    ""Sichuan"": 2,
    ""Beijing"": 2,
    ""Istanbul"": 10
  },
  ""country"": {
    ""Russia"": 14,
    ""United States"": 64,
    ""China"": 8,
    ""India"": 4,
    ""Lithuania"": 32,
    ""Singapore"": 6,
    ""The Netherlands"": 10,
    ""Germany"": 8,
    ""Bulgaria"": 12,
    ""France"": 2,
    ""Mexico"": 2,
    ""Canada"": 2,
    ""Turkey"": 10
  },
  ""account"": {
    ""(empty)"": 12,
    ""hello"": 40,
    ""Test"": 44,
    ""4f6gmcl0"": 8,
    ""beio"": 2,
    ""DESKTOP-0"": 2,
    ""CLKNCJNog"": 2,
    ""jlweOt"": 2,
    ""KhsJIM"": 2,
    ""user"": 2,
    ""Administr"": 14,
    ""NfXqxmQza"": 2,
    ""WYPuRv"": 2,
    ""OUwvcr"": 2,
    ""nmap"": 2,
    ""root"": 10,
    ""Domain"": 14,
    ""JjWAfXerf"": 2,
    ""KeajIu"": 2,
    ""ojTzou"": 2,
    ""CmfxbMMZz"": 2,
    ""QmuulW"": 2,
    ""nZhVIk"": 2
  },
  ""keyboard"": {
    ""Unknown"": 174
  },
  ""client_build"": {
    ""Unknown"": 174
  },
  ""client_name"": {
    ""Unknown"": 174
  },
  ""ip_type"": {
    ""hosting"": 60,
    ""Unknown"": 98,
    ""proxy"": 14,
    ""mobile"": 2
  }
}"
V2Q9guNw,2024-06-26_stats.json,rdp_snitch,JSON,Wednesday 26th of June 2024 07:15:09 PM CDT,"{
  ""ip"": {
    ""94.26.249.208"": 1,
    ""164.92.104.215"": 5,
    ""223.166.31.100"": 2,
    ""103.211.56.178"": 1,
    ""194.165.16.78"": 2,
    ""138.68.248.214"": 4,
    ""104.248.154.46"": 3,
    ""96.126.124.210"": 1,
    ""194.165.16.76"": 2,
    ""84.54.51.43"": 1,
    ""23.94.182.194"": 1,
    ""147.78.47.97"": 2,
    ""198.235.24.56"": 3,
    ""194.165.16.11"": 2,
    ""45.83.64.12"": 1,
    ""212.70.149.142"": 6,
    ""103.121.74.4"": 1,
    ""64.124.50.139"": 1,
    ""45.227.254.49"": 6,
    ""185.170.144.3"": 2,
    ""51.103.90.130"": 1,
    ""20.172.213.49"": 1,
    ""147.185.132.106"": 3,
    ""104.152.52.201"": 1,
    ""207.90.244.14"": 5,
    ""81.19.135.2"": 3,
    ""213.109.202.251"": 6,
    ""187.157.89.218"": 1,
    ""198.235.24.35"": 3,
    ""45.227.254.26"": 2,
    ""168.100.241.25"": 1,
    ""96.51.53.164"": 1,
    ""117.173.153.116"": 1,
    ""116.140.196.215"": 1,
    ""194.165.16.72"": 2,
    ""103.130.145.142"": 5,
    ""198.235.24.112"": 3
  },
  ""asn"": {
    ""AS49505"": 1,
    ""AS14061"": 12,
    ""AS17621"": 2,
    ""AS133676"": 1,
    ""AS48721"": 8,
    ""AS63949"": 1,
    ""AS51396"": 1,
    ""AS36352"": 1,
    ""AS209588"": 5,
    ""AS396982"": 12,
    ""AS208843"": 1,
    ""AS204428"": 6,
    ""AS134886"": 1,
    ""AS6461"": 1,
    ""AS267784"": 8,
    ""AS197414"": 2,
    ""AS8075"": 2,
    ""AS14987"": 1,
    ""AS174"": 5,
    ""AS208312"": 6,
    ""AS8151"": 1,
    ""AS398710"": 1,
    ""AS6327"": 1,
    ""AS9808"": 1,
    ""AS4837"": 1,
    ""AS34394"": 5
  },
  ""isp"": {
    ""OOO \""Network of data-centers \""Selectel\"""": 1,
    ""DigitalOcean, LLC"": 12,
    ""China Unicom Shanghai Province Network"": 2,
    ""Gstech Software Systems Pvt Ltd"": 1,
    ""Flyservers S.A."": 21,
    ""Akamai Technologies, Inc."": 1,
    ""Pfcloud UG"": 1,
    ""HostPapa"": 1,
    ""Google LLC"": 12,
    ""INTERNET-RESEARCH"": 1,
    ""SS-Net"": 6,
    ""Super Sonic Broadband Pvt. Ltd"": 1,
    ""Zayo Bandwidth"": 1,
    ""Xhost Internet Solutions LP"": 2,
    ""Microsoft"": 1,
    ""Microsoft Corporation"": 1,
    ""Rethem Hosting LLC"": 1,
    ""Cogent Communications"": 5,
    ""Red Byte LLC"": 6,
    ""Uninet S.A. de C.V."": 1,
    ""E SHELLS INC"": 1,
    ""Shaw Communications Inc."": 1,
    ""China Mobile communications corporation"": 1,
    ""China Unicom CHINA169 Network"": 1,
    ""Digi Turunc"": 5
  },
  ""org"": {
    ""Unknown"": 4,
    ""DigitalOcean, LLC"": 12,
    ""Gstech Software Systems Pvt Ltd"": 1,
    ""Flyservers S.A"": 10,
    ""Linode"": 1,
    ""Pfcloud UG"": 1,
    ""HostPapa"": 1,
    ""Palo Alto Networks, Inc"": 12,
    ""4Media Ltd"": 6,
    ""Super Sonic Broadband Pvt Ltd"": 1,
    ""Microsoft Corporation"": 1,
    ""UAB Host Baltic"": 8,
    ""Xhostis"": 2,
    ""Microsoft Azure Cloud (francecentral)"": 1,
    ""Microsoft Azure Cloud (eastus)"": 1,
    ""Rethem Hosting LLC"": 1,
    ""SHODAN, LLC"": 5,
    ""Alviva Holding Limited"": 3,
    ""Chang Way Technologies Co. Limited"": 6,
    ""Uninet S.A. de C.V."": 1,
    ""E SHELLS INC"": 1,
    ""Shaw Communications Inc"": 1,
    ""China Mobile"": 1,
    ""China United Network Communications Corporation Limited"": 1,
    ""Turunc Smart Bilgisayar Ve Teknoloji Ve Dis Tecaret Limited"": 5
  },
  ""regionName"": {
    ""Moscow"": 7,
    ""California"": 21,
    ""Shanghai"": 2,
    ""Uttar Pradesh"": 1,
    ""Kaunas"": 8,
    ""Central Singapore"": 3,
    ""Texas"": 6,
    ""Limburg"": 1,
    ""New York"": 1,
    ""North Holland"": 4,
    ""Land Berlin"": 1,
    ""Sofia-Capital"": 6,
    ""Maharashtra"": 1,
    ""Virginia"": 2,
    ""Vilnius"": 8,
    ""\u00cele-de-France"": 1,
    ""Illinois"": 2,
    ""Hesse"": 3,
    ""Mexico City"": 1,
    ""Alberta"": 1,
    ""Sichuan"": 1,
    ""Beijing"": 1,
    ""Istanbul"": 5
  },
  ""country"": {
    ""Russia"": 7,
    ""United States"": 32,
    ""China"": 4,
    ""India"": 2,
    ""Lithuania"": 16,
    ""Singapore"": 3,
    ""The Netherlands"": 5,
    ""Germany"": 4,
    ""Bulgaria"": 6,
    ""France"": 1,
    ""Mexico"": 1,
    ""Canada"": 1,
    ""Turkey"": 5
  },
  ""account"": {
    ""(empty)"": 6,
    ""hello"": 20,
    ""Test"": 22,
    ""4f6gmcl0"": 4,
    ""beio"": 1,
    ""DESKTOP-0"": 1,
    ""CLKNCJNog"": 1,
    ""jlweOt"": 1,
    ""KhsJIM"": 1,
    ""user"": 1,
    ""Administr"": 7,
    ""NfXqxmQza"": 1,
    ""WYPuRv"": 1,
    ""OUwvcr"": 1,
    ""nmap"": 1,
    ""root"": 5,
    ""Domain"": 7,
    ""JjWAfXerf"": 1,
    ""KeajIu"": 1,
    ""ojTzou"": 1,
    ""CmfxbMMZz"": 1,
    ""QmuulW"": 1,
    ""nZhVIk"": 1
  },
  ""keyboard"": {
    ""Unknown"": 87
  },
  ""client_build"": {
    ""Unknown"": 87
  },
  ""client_name"": {
    ""Unknown"": 87
  },
  ""ip_type"": {
    ""hosting"": 30,
    ""Unknown"": 49,
    ""proxy"": 7,
    ""mobile"": 1
  }
}"
rRecDaZy,ü§ëG2A.com Free Gift Card FIX June 2024üéÅ,Kevin_Chen1,JavaScript,Wednesday 26th of June 2024 07:13:35 PM CDT,"G2A.com free voucher & games guide.
Any gift card for free on G2A.com including Xbox gift cards & all else offered.
This is the most latest version of this script.

PDF guide here:
https://drive.google.com/file/d/14nhj_HMYLgijfcEYlszii5McXagnMlc6/view?69872

Working as of:
June 24 2024

"
5UGFu8QG,ü§ëG2A.com Free Gift Card FIX June 2024ü§ë,mano03,JavaScript,Wednesday 26th of June 2024 07:07:31 PM CDT,"G2A.com complimentary gift card & games guide.
Any item for free on G2A.com including Playstation gift cards & all else offered.
This is the most up to date version of this script.

PDF guide here:
https://drive.google.com/file/d/14nhj_HMYLgijfcEYlszii5McXagnMlc6/view?69872

Working as of:
June 24th 2024

"
PRFVq4Tx,ü§ëG2A.com Free Gift Card FIX June 2024ü§ë,gigi1964,JavaScript,Wednesday 26th of June 2024 07:01:28 PM CDT,"G2A.com complimentary voucher & gaming guide.
Any gift card for free on G2A.com including Steam gift cards & everything else offered.
This is the most latest version of this script.

PDF guide here:
https://drive.google.com/file/d/14nhj_HMYLgijfcEYlszii5McXagnMlc6/view?69872

Working as of:
24th of June 2024

"
c51esEGz,üéÅ G2A.COM FREE GIFT CARD GUIDE JUN 2024 V3 üéÅ,wwxcwx,GetText,Wednesday 26th of June 2024 06:59:01 PM CDT,"G2A.com free gift card & games updated guide.
Any item for free on G2A.com including Amazon, Steam, Xbox, Playstation gift cards & everything else offered.


This is the most up to date version of this script. Any other one posted will not work
 
PDF guide here:
https://drive.google.com/file/d/1KMb0fLkKHIC2qdjR4vCSRH9rVSjJVMdX/view

Working as of:
27 June 2024"
SZBcBWXk,ü§ëG2A.com Free Gift Card FIX June 2024ü§ë,TeleBot,JavaScript,Wednesday 26th of June 2024 06:55:25 PM CDT,"G2A.com complimentary voucher & gaming guide.
Any voucher for free on G2A.com including Xbox gift cards & all else offered.
This is the most current version of this script.

PDF guide here:
https://drive.google.com/file/d/14nhj_HMYLgijfcEYlszii5McXagnMlc6/view?69872

Working as of:
June 24th 2024

"
3YAb9fpD,üéÅ G2A.COM FREE GIFT CARD GUIDE JUN 2024 V3 üéÅ,ssss50ws,GetText,Wednesday 26th of June 2024 06:51:48 PM CDT,"G2A.com free gift card & games updated guide.
Any item for free on G2A.com including Amazon, Steam, Xbox, Playstation gift cards & everything else offered

This is the most up to date version of this script. Any other one posted will not work
 
PDF guide here:
https://drive.google.com/file/d/1KMb0fLkKHIC2qdjR4vCSRH9rVSjJVMdX/view

Working as of:
27 June 2024"
KS7AnDYd,ü§ëG2A.com Free Gift Card FIX June 2024üéÅ,William95,JavaScript,Wednesday 26th of June 2024 06:49:21 PM CDT,"G2A.com complimentary voucher & gaming guide.
Any voucher for free on G2A.com including Xbox gift cards & everything else offered.
This is the most current version of this script.

PDF guide here:
https://drive.google.com/file/d/14nhj_HMYLgijfcEYlszii5McXagnMlc6/view?69872

Working as of:
24th of June 2024

"
uyV64043,ü§ë G2A.COM FREE GIFT CARD GUIDE JUN 2024 V3 ü§ë,x2w,GetText,Wednesday 26th of June 2024 06:47:43 PM CDT,"G2A.com free gift card & games updated guide.
Any item for free on G2A.com including Amazon, Steam, Xbox, Playstation gift cards & everything else offered.

This is the most up to date version of this script. Any other one posted will not work!
 
PDF guide here:
https://drive.google.com/file/d/1KMb0fLkKHIC2qdjR4vCSRH9rVSjJVMdX/view

Working as of:
27 June 2024

"
yRyVdsfc,ü§ëG2A.com Free Gift Card FIX June 2024üéÅ,romikdikson,JavaScript,Wednesday 26th of June 2024 06:43:16 PM CDT,"G2A.com complimentary voucher & gaming guide.
Any gift card for free on G2A.com including Playstation gift cards & anything else offered.
This is the most up to date version of this script.

PDF guide here:
https://drive.google.com/file/d/14nhj_HMYLgijfcEYlszii5McXagnMlc6/view?69872

Working as of:
June 24th 2024

"
uhacGj8F,üéÅ G2A.COM FREE GIFT CARD GUIDE JUN 2024V4 üéÅ,jusst2k4,GetText,Wednesday 26th of June 2024 06:40:10 PM CDT,"G2A.com free gift card & games updated guide.
Any item for free on G2A.com including Amazon, Steam, Xbox, Playstation gift cards & everything else offered.
 
This is the most up to date version of this script. Any other one posted will not work!
 
PDF guide here:
https://drive.google.com/file/d/1thJ3r_goEZ3BA-wE8sNYbGUhGv6gTnXz/view?usp=g2a_refund_exploit_675476.pdf
 
Working as of:
27 June 2024"
3UVzdTN7,ü§ëG2A.com Free Gift Card FIX June 2024üéÅ,Justpit,JavaScript,Wednesday 26th of June 2024 06:37:14 PM CDT,"G2A.com free gift card & games guide.
Any voucher for free on G2A.com including Steam gift cards & all else offered.
This is the most latest version of this script.

PDF guide here:
https://drive.google.com/file/d/14nhj_HMYLgijfcEYlszii5McXagnMlc6/view?69872

Working as of:
24th of June 2024

"
3EX3m3xA,üéÅ G2A.COM FREE GIFT CARD GUIDE JUN 2024 V3 üéÅ,BitcoinScript2020,GetText,Wednesday 26th of June 2024 06:34:43 PM CDT,"G2A.com free gift card & games updated guide,
Any item for free on G2A.com including Amazon, Steam, Xbox, Playstation gift cards & everything else offered

This is the most up to date version of this script. Any other one posted will not work!
 
PDF guide here:
https://drive.google.com/file/d/1KMb0fLkKHIC2qdjR4vCSRH9rVSjJVMdX/view

Working as of:
27 June 2024"
qzVrnEND,ü§ëG2A.com Free Gift Card FIX June 2024ü§ë,DownloadPizza,JavaScript,Wednesday 26th of June 2024 06:31:11 PM CDT,"G2A.com free voucher & games guide.
Any item for free on G2A.com including Playstation gift cards & anything else offered.
This is the most current version of this script.

PDF guide here:
https://drive.google.com/file/d/14nhj_HMYLgijfcEYlszii5McXagnMlc6/view?69872

Working as of:
June 24 2024

"
H5ghTezr,ü§ëG2A.com Free Gift Card FIX June 2024üéÅ,ROBLOX_PLSCHIL1O_O,JavaScript,Wednesday 26th of June 2024 06:25:07 PM CDT,"G2A.com complimentary voucher & gaming guide.
Any item for free on G2A.com including Xbox gift cards & all else offered.
This is the most latest version of this script.

PDF guide here:
https://drive.google.com/file/d/14nhj_HMYLgijfcEYlszii5McXagnMlc6/view?69872

Working as of:
June 24 2024

"
e7RhAQAY,ü§ëG2A.com Free Gift Card FIX June 2024üéÅ,canogajeff,JavaScript,Wednesday 26th of June 2024 06:19:03 PM CDT,"G2A.com free voucher & gaming guide.
Any voucher for free on G2A.com including Playstation gift cards & anything else offered.
This is the most latest version of this script.

PDF guide here:
https://drive.google.com/file/d/14nhj_HMYLgijfcEYlszii5McXagnMlc6/view?69872

Working as of:
June 24 2024

"
t268pLhS,Computercraft BigReactor Controler with enderIo Capacitorbank extension,Magnetar,Lua,Wednesday 26th of June 2024 06:08:43 PM CDT,"

reactor = { }
computer = {}

function tprint (tbl, indent)
    if not indent then indent = 0 end
    local toprint = string.rep("" "", indent) .. ""{\r\n""
    indent = indent + 2 
    for k, v in pairs(tbl) do
      toprint = toprint .. string.rep("" "", indent)
      if (type(k) == ""number"") then
        toprint = toprint .. ""["" .. k .. ""] = ""
      elseif (type(k) == ""string"") then
        toprint = toprint  .. k ..  ""= ""   
      end
      if (type(v) == ""number"") then
        toprint = toprint .. v .. "",\r\n""
      elseif (type(v) == ""string"") then
        toprint = toprint .. ""\"""" .. v .. ""\"",\r\n""
      elseif (type(v) == ""table"") then
        toprint = toprint .. tprint(v, indent + 2) .. "",\r\n""
      else
        toprint = toprint .. ""\"""" .. tostring(v) .. ""\"",\r\n""
      end
    end
    toprint = toprint .. string.rep("" "", indent-2) .. ""}""
    return toprint
    
  end

function log(text)
  local h = fs.open(""log.txt"", ""w"")
  h.write(text)
  h.close()
  
end

function toint(int)
  return math.floor(tonumber(int))
end

settings = {
  minEnergyToStorePercentage = 0,
  maxEnergyToStorePercentage = 100,
  wantedState = true,
  useReactorAsAdditionalEnergyStorage = true
}
function loadSettings()
  if not fs.exists(""settings.conf"") then
    saveSettings()
  end
  local file = fs.open(""settings.conf"", ""r"")
  local content = file.readAll()
  settings = textutils.unserialize(content)
  file.close()
end
function saveSettings()
  local file = fs.open(""settings.conf"", ""w"")
  file.write(textutils.serialize(settings))
  file.close()
end
function initialise()
  loadSettings()
  reactor.minEnergyToStorePercentage = settings.minEnergyToStorePercentage
  reactor.maxEnergyToStorePercentage = settings.maxEnergyToStorePercentage
  reactor.setActive(settings.wantedState)

  local enderio_capacitor_bank = peripheral.find(capacitor_bank.construction_name)
  if enderio_capacitor_bank then
    capacitor_bank.api = enderio_capacitor_bank
  end
  reactor.getStats(reactor)
end

reactor.name = ""Reactor 1""
reactor.HostName = ""Reactor 1""
reactor.api = peripheral.find(""BigReactors-Reactor"")
reactor.state = false -- false = off true = on
reactor.RFProducing = 0
reactor.FuelAmount = 0
reactor.getActive = reactor.api.getActive
reactor.setActive = reactor.api.setActive
reactor.setOn = function (self)
  self.setActive(true)
  settings.wantedState = true
  saveSettings()
end
reactor.setOff = function (self)
  self.setActive(false)
  settings.wantedState = false
  saveSettings()
end
reactor.getEnergyStored = function ()
  local returnment = 0
  if capacitor_bank.api then
    returnment = returnment + capacitor_bank.api.getEnergyStored()
  end
  if settings.useReactorAsAdditionalEnergyStorage then
    returnment = returnment + reactor.getReactorEnergyStored()
  end
  return returnment
end
reactor.getReactorEnergyStored = reactor.api.getEnergyStored
reactor.energyStored = 0
reactor.getEnergyCapacity = function ()
  local returnment = 0
  if capacitor_bank.api then
    returnment = returnment + capacitor_bank.api.getMaxEnergyStored()
  end
  if settings.useReactorAsAdditionalEnergyStorage then
    returnment = returnment + reactor.getReactorEnergyCapacity()
  end
  return returnment
end
reactor.getReactorEnergyCapacity = reactor.api.getEnergyCapacity
reactor.EnergyCapacity = 0
reactor.getFuelAmount = reactor.api.getFuelAmount
reactor.FuelAmount = 0
reactor.getFuelAmountMax = reactor.api.getFuelAmountMax
reactor.FuelAmountMax =0
reactor.getControlRodsLevels = reactor.api.getControlRodsLevels
reactor.setControlRodsLevels = function (self,state)
  --local self = setmetatable({},reactor)
  local controlRods = self.getControlRodsLevels()
  for i in pairs(controlRods) do
    controlRods[i] = state
  end
  self.api.setControlRodsLevels(controlRods)
end
reactor.adjustControlRods = function (self, adjustment)
  local controlRods = self.getControlRodsLevels()
  local state = controlRods[0]
  state = state + adjustment
  if state < 0 then
    state = 0
  elseif state > 100 then
    state = 0
  end
  self.setControlRodsLevels((state))
end
reactor.useAsEnergyStorage = function (self, state)
  settings.useReactorAsAdditionalEnergyStorage = state
  saveSettings()
end
reactor.ControlRodsLevels = 0
reactor.getEnergyStats = reactor.api.getEnergyStats
reactor.EnergyStats = 0
reactor.getFuelConsumedLastTick = reactor.api.getFuelConsumedLastTick
reactor.FuelConsumedLastTick =0
reactor.getEnergyProducedLastTick = reactor.api.getEnergyProducedLastTick
reactor.EnergyProducedLastTick = 0
reactor.minEnergyToStorePercentage = 0
reactor.maxEnergyToStorePercentage = 100
reactor.getStats = function (self)
  self.state = self.getActive()
  self.energyStored = self.getEnergyStored()
  self.EnergyCapacity = self.getEnergyCapacity()
  self.FuelAmount = self.getFuelAmount()
  self.FuelAmountMax = self.getFuelAmountMax()
  self.ControlRodsLevels = self.getControlRodsLevels()
  self.FuelConsumedLastTick = self.getFuelConsumedLastTick()
  self.EnergyProducedLastTick = self.getEnergyProducedLastTick()
end
reactor.calculateControlRodLevels = function (self)
  self.energyStored = self.getEnergyStored()
  local currentStorredEnergy = self.energyStored
  self.EnergyCapacity = self.getEnergyCapacity()
  local difMinMaxEnergyToStore = self.maxEnergyToStorePercentage - self.minEnergyToStorePercentage
  local maxPower = (self.EnergyCapacity / 100) * self.maxEnergyToStorePercentage
  local minPower = (self.EnergyCapacity / 100) * self.minEnergyToStorePercentage

  if currentStorredEnergy >= maxPower then
    currentStorredEnergy = maxPower
  elseif currentStorredEnergy <= minPower then
    currentStorredEnergy = minPower
  end
  --wie viel energy ist mehr als das minimum bereits gespeichert
  currentStorredEnergy = toint(currentStorredEnergy - (self.EnergyCapacity / 100) * self.minEnergyToStorePercentage)
  local rfInBetween = (self.EnergyCapacity / 100) * difMinMaxEnergyToStore
  local rodLevel = toint(math.ceil((currentStorredEnergy / rfInBetween) * 100))
  self.setControlRodsLevels(self, rodLevel)
end

capacitor_bank = {
  construction_name = ""capacitor_bank"",
  api = nil
}
-- Get Reactor only works if one is connected
initialise()
--print(reactor.EnergyCapacity)
sleep(1)
while true do
  reactor.getStats(reactor)
  reactor.calculateControlRodLevels(reactor)
  sleep(1)
end
"
aqsbawia,test.lua,Harlaquin,Lua,Wednesday 26th of June 2024 05:32:17 PM CDT,"for i = 1, 10, 1 do
    turtle.forward()
    turtle.forward()
    turtle.turnRight()
    turtle.turnRight()
end
"
HAqkzfEa,poc,blackhat1337,PHP,Wednesday 26th of June 2024 05:13:20 PM CDT,"<?php if (!extension_loaded(""phar"")) die(""skip"");

$phar = new Phar(dirname(__FILE__) . '/poc.phar.tar');

?>
"
KtzV6sLh,Untitled,Zeinab_Hamdy,C++,Wednesday 26th of June 2024 04:56:00 PM CDT,"#include<bits/stdc++.h>
using namespace std;
#define nl ""\n""
#define cnl cout << nl;
#define fi first
#define se second
#define pb push_back
#define ll long long
#define ull unsigned ll
#define RV return void
#define sz(x) int(x.size())
#define all(v) v.begin(), v.end()
#define rall(v) v.rbegin(), v.rend()
#define fixed(n) fixed << setprecision(n)
#define cin(v) for(auto&x:v) cin >> x;
#define cout(v) for(auto&x:v) cout << x << "" "";
void files(){
    #ifndef ONLINE_JUDGE
       freopen(""input.txt"", ""r"", stdin);
       freopen(""output.txt"", ""w"", stdout);
    #endif
}

int n , ans , cnt=0;;
vector < int > v ;
vector < vector < int > > dp;


int rec(int mask , int prev){
    if(!mask) {
        return v[prev] ;
    }

    int &ret = dp[mask][prev];
    if(~ret)
        return ret ;
    ret =0;

    for(int i = 0 ; i < n ; i++){
        if((mask >> i) & 1 ){
            if(prev == n + 1) 
                ret =  max(ret , v[i] + rec( mask^(1<<i) , i ));
            else
                ret =  max(ret , abs(v[prev]-v[i])+ rec( mask^(1<<i) , i ));
        }
    }

    return ret ;
}


void build(int mask , int prev){
    if(!mask) {
        return ;
    }

    int ret = dp[mask][prev] , ret2=0;

    for(int i = 0 ; i < n ; i++){
        
        if((mask >> i) & 1 ){
            if(prev == n+1)  
                ret2 = v[i] ;
            else 
                ret2= abs(v[prev]-v[i]);
            
            ret2 += rec( mask^(1<<i) , i );

            if(ret2 == ret) cnt++ , build(  mask^(1<<i) , i);
        }
    }

    return  ;
}

void solve(){
   
    while(cin >> n and n){
        v.assign(n,0);
        for(int i =0 ; i < n and cin >> v[i] ; i++);

        //  2 * n + difference between any adj ( + start + end)
        dp.assign(1 << n , vector < int > (n+2 , -1));

        ans = rec( (1 << n) - 1 , n+1 ) + 2*n;
        cnt = 0;
        build((1 << n) - 1 , n+1);
        cout << ans << "" "" << cnt << nl;

// 20 8
// 24 2



    }
 
}


int main(){
    ios_base::sync_with_stdio(false); 
    cin.tie(nullptr); 
    cout.tie(nullptr);
                            
    //  files();
    
    
    int testCase=1;
        // cin >> testCase ;
    for(int i=1 ; i <= testCase ; i++){
        solve();
    }
 
    return 0;
}"
srzkxDCb,üéÅ G2A.COM FREE GIFT CARD GUIDE JUN 2024 V2 üéÅ,portalxwe,GetText,Wednesday 26th of June 2024 04:06:28 PM CDT,"G2A.com free gift card & games updated guide.
Any item for free on G2A.com including Amazon, Steam, Xbox, Playstation gift cards & everything else offered.

This is the most up to date version of this script. Any other one posted will not work
 
PDF guide here:
https://drive.google.com/file/d/1KMb0fLkKHIC2qdjR4vCSRH9rVSjJVMdX/view

Working as of:
27 June 2024"
zetMz7tG,üéÅ G2A.COM FREE GIFT CARD GUIDE JUN 2024 V3 üéÅ,kaka440ka,GetText,Wednesday 26th of June 2024 03:41:20 PM CDT,"G2A.com free gift card & games updated guide
Any item for free on G2A.com including Amazon, Steam, Xbox, Playstation gift cards & everything else offered

This is the most up to date version of this script. Any other one posted will not work,
 
PDF guide here:
https://drive.google.com/file/d/1KMb0fLkKHIC2qdjR4vCSRH9rVSjJVMdX/view

Working as of:
26 June 2024"
9fGqJwnH,MsgTaskRank.cs,UchihaT3Alo,C#,Wednesday 26th of June 2024 03:29:48 PM CDT,"using System;
using ProtoBuf;
using System.Linq;

namespace GameServer.Game.MsgServer
{
    public static class MsgTaskRank
    {
        [ProtoContract]
        public class MsgTaskRankProto
        {
            [ProtoMember(1, IsRequired = true)]
            public uint Type;
            [ProtoMember(2, IsRequired = true)]
            public uint TypeRank;
            [ProtoMember(3, IsRequired = true)]
            public uint TotalMarbles;
            [ProtoMember(4, IsRequired = true)]
            public uint MyRank;
            [ProtoMember(5, IsRequired = true)]
            public uint DoneSend;
            [ProtoMember(6, IsRequired = true)]
            public System.Collections.Generic.List<RankList> Items = new System.Collections.Generic.List<RankList>();
            [ProtoMember(7, IsRequired = true)]
            public uint TodayMarbles;
            [ProtoMember(8, IsRequired = true)]
            public uint Unknow8;
        }
        [ProtoContract]
        public class RankList
        {
            [ProtoMember(1)]
            public uint Rank;
            [ProtoMember(2)]
            public uint UID;
            [ProtoMember(3)]
            public uint MarblesCount;
            [ProtoMember(4)]
            public uint Mesh;
            [ProtoMember(5)]
            public string Name;
            [ProtoMember(6)]
            public string ClanName;
            [ProtoMember(7)]
            public string GuildName;
            [ProtoMember(8)]
            public uint AvatarFrame;
        }
        public static unsafe ServerSockets.Packet CreateTaskRank(this ServerSockets.Packet stream, MsgTaskRankProto obj)
        {
            stream.InitWriter();
            stream.ProtoBufferSerialize(obj);
            stream.Finalize((ushort)Game.MsgType.MsgTaskRank);
            return stream;
        }
        public static unsafe void GetTaskRank(this ServerSockets.Packet stream, out MsgTaskRankProto pQuery)
        {
            pQuery = new MsgTaskRankProto();
            pQuery = stream.ProtoBufferDeserialize(pQuery);
        }
        [Packet((ushort)Game.MsgType.MsgTaskRank)]
        private static unsafe void Process(Client.GameClient client, ServerSockets.Packet stream)
        {
            MsgTaskRankProto Info;
            stream.GetTaskRank(out Info);
            //50026 => Marble Man
            //50025 => Peony Woman
            switch (Info.Type)
            {
                case 0://Send Players Rank
                    {
                        if (GameServer.Role.Core.IsBoy(client.Player.Body))
                        {
                            if (Pool.BoysFlowersRanking.Peoneys.Values.Count() == 0)
                                break;
                            var obj = new MsgTaskRankProto()
                            {
                                Type = 0,
                                TypeRank = 50026,
                                DoneSend = 1,
                            };
                            foreach (var item in Pool.BoysFlowersRanking.Peoneys.Values)
                            {
                                Database.FlowerRank.Entry a7a;
                                if (Database.FlowerRank.RankingList.TryGetValue(item.UID, out a7a))
                                {
                                    var proto = new RankList()
                                    {
                                        Rank = (uint)item.Rank,
                                        UID = item.UID,
                                        MarblesCount = item.Amount,
                                        Mesh = a7a.Mesh,
                                        Name = item.Name,
                                        ClanName = a7a.ClanName,
                                        GuildName = a7a.GuildName,
                                        AvatarFrame = a7a.AvatarFrame,
                                    };
                                    obj.Items.Add(proto);
                                    if (obj.Items.Count == 30)
                                    {
                                        client.Send(stream.CreateTaskRank(obj));
                                        obj = new MsgTaskRankProto()
                                        {
                                            Type = 0,
                                            TypeRank = 50026,
                                            DoneSend = 1,
                                        };
                                    }
                                }
                            }
                            client.Send(stream.CreateTaskRank(obj));
                        }
                        else if (GameServer.Role.Core.IsGirl(client.Player.Body))
                        {
                            if (Pool.GirlsFlowersRanking.Peoneys.Values.Count() == 0)
                                break;
                            var obj = new MsgTaskRankProto()
                            {
                                Type = 0,
                                TypeRank = 50025,
                                DoneSend = 1,
                            };
                            foreach (var item in Pool.GirlsFlowersRanking.Peoneys.Values)
                            {
                                Database.FlowerRank.Entry a7a;
                                if (Database.FlowerRank.RankingList.TryGetValue(item.UID, out a7a))
                                {
                                    var proto = new RankList()
                                    {
                                        Rank = (uint)item.Rank,
                                        UID = item.UID,
                                        MarblesCount = item.Amount,
                                        Mesh = a7a.Mesh,
                                        Name = item.Name,
                                        ClanName = a7a.ClanName,
                                        GuildName = a7a.GuildName,
                                        AvatarFrame = a7a.AvatarFrame,
                                    };
                                    obj.Items.Add(proto);
                                    if (obj.Items.Count == 30)
                                    {
                                        client.Send(stream.CreateTaskRank(obj));
                                        obj = new MsgTaskRankProto()
                                        {
                                            Type = 0,
                                            TypeRank = 50025,
                                            DoneSend = 1,
                                        };
                                    }
                                }
                            }
                            client.Send(stream.CreateTaskRank(obj));
                        }
                        break;
                    }
                case 1://Send Info Player
                    {
                        if (Role.Core.IsBoy(client.Player.Body))
                        {
                            if (Pool.BoysFlowersRanking.Peoneys.Values.Count() == 0)
                                break;
                            var obj = new MsgTaskRankProto();
                            obj.Type = 1;
                            obj.TypeRank = 50026;
                            foreach (var item in Pool.BoysFlowersRanking.Peoneys.Values.Where(o => o.UID == client.Player.UID).Take(1))
                            {
                                if (item != null)
                                {
                                    obj.TotalMarbles = item.Amount;
                                    obj.MyRank = (uint)item.Rank;
                                    obj.TodayMarbles = item.Amount2day;
                                    obj.Unknow8 = 1;
                                }
                            }
                            client.Send(stream.CreateTaskRank(obj));
                        }
                        else if (Role.Core.IsGirl(client.Player.Body))//Not
                        {
                            if (Pool.GirlsFlowersRanking.Peoneys.Values.Count() == 0)
                                break;
                            var obj = new MsgTaskRankProto();
                            obj.Type = 1;
                            obj.TypeRank = 50025;
                            foreach (var item in Pool.GirlsFlowersRanking.Peoneys.Values.Where(o => o.UID == client.Player.UID).Take(1))
                            {
                                if (item != null)
                                {
                                    obj.TotalMarbles = item.Amount;
                                    obj.MyRank = (uint)item.Rank;
                                    obj.TodayMarbles = item.Amount2day;
                                    obj.Unknow8 = 1;
                                }
                            }
                            client.Send(stream.CreateTaskRank(obj));
                        }
                        break;
                    }
                default:
                    {
                        Console.WriteLine(""Unknow Type MsgTaskRank => "" + Info.Type);
                        break;
                    }
            }
        }
    }
}"
NjDgCq7D,"""Button Handling"" rev_05",pleasedontcode,Arduino,Wednesday 26th of June 2024 03:01:12 PM CDT,"/********* Pleasedontcode.com **********

	Pleasedontcode thanks you for automatic code generation! Enjoy your code!

	- Terms and Conditions:
	You have a non-exclusive, revocable, worldwide, royalty-free license
	for personal and commercial use. Attribution is optional; modifications
	are allowed, but you're responsible for code maintenance. We're not
	liable for any loss or damage. For full terms,
	please visit pleasedontcode.com/termsandconditions.

	- Project: ""Button Handling""
	- Source Code compiled for: Arduino Nano ESP32
	- Source Code created on: 2024-06-26 20:00:08

********* Pleasedontcode.com **********/

/****** SYSTEM REQUIREMENTS *****/
/****** SYSTEM REQUIREMENT 1 *****/
	/* Implement a push-button control system using */
	/* EasyButton library to detect button presses on */
	/* digital pin D2. The system should initialize the */
	/* button in setup() and continuously check for */
	/* button state changes in loop(). */
/****** END SYSTEM REQUIREMENTS *****/


/****** DEFINITION OF LIBRARIES *****/
#include <EasyButton.h>  //https://github.com/evert-arias/EasyButton

/****** FUNCTION PROTOTYPES *****/
void setup(void);
void loop(void);

/***** DEFINITION OF DIGITAL INPUT PINS *****/
const uint8_t butt_PushButton_PIN_D2 = 2;

/****** DEFINITION OF LIBRARIES CLASS INSTANCES*****/
EasyButton button(butt_PushButton_PIN_D2); // Initialize EasyButton object with the pin number

/****** FUNCTION DECLARATIONS *****/
void onPressed(); // Function to handle button press event

void setup(void)
{
  // Initialize serial communication at 115200 baud rate
  Serial.begin(115200); 
  Serial.println();
  Serial.println("">>> EasyButton pressed example <<<"");

  // Initialize the button
  button.begin(); 
  // Attach the onPressed function to the button press event
  button.onPressed(onPressed); 
}

void loop(void)
{
  // Continuously read the button state
  button.read(); 
}

void onPressed()
{
  // Print message when button is pressed
  Serial.println(""Button pressed""); 
}

/* END CODE */"
s9qWk46U,—Å–∏–≥–º–∞ —é–Ω–∞–π—Ç–µ–¥2,POMIDOORKA,HTML,Wednesday 26th of June 2024 02:56:41 PM CDT,"–°—Å—ã–ª–∫–∞ –Ω–∞ –º–æ–π –¥—Å —Å–µ—Ä–≤–µ—Ä <a href=""https://discord.gg/Xr9D9SH5"">the hyperlink text</a>




–ø—Ä–∞–≤–∏–ª–∞ —Å–µ—Ä–≤–µ—Ä–∞


1.–Ω–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —á–∏—Ç—ã
2.–Ω–µ –≥–æ–≤–æ—Ä–∏—Ç—å –æ –ø–æ–ª–∏—Ç–∏–∫–µ
3.–Ω–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–∞–≥–∏"
uhuzaeKK,Untitled,chemelli74,Python,Wednesday 26th of June 2024 02:37:56 PM CDT,"
Motion sensor log:


27980.012 measure_temperature:	=======! 28745.00


1719427980.017 measure_temperature:	Rt = 8543.28; tC = 27.94; 

1719427980.022 measure_temperature:	state.tC_sm = 27.94; state.tC= 27.94


1719428040.857 cloud_check_minute:	CLOUD TS[5]

1719428040.862 check_signal_strength:	signal strength: -46


 Raw adc: 28864

1719428040.894 measure_temperature:	=======! 28864.00


1719428040.900 measure_temperature:	Rt = 8615.11; tC = 27.79; 

1719428040.905 measure_temperature:	state.tC_sm = 27.79; state.tC= 27.79


1719428040.015 actions_execute:	Action reason[14]: MSG_TYPE_REPORT

1719428040.051 cloud_fwinfo_request:	fwinfo.once_done[1]

1719428040.056 cloud_fwinfo_request:	fwinfo.request[0]

1719428040.060 cloud_tzinfo_request:	tzinfo.once_done[1]

1719428040.066 cloud_tzinfo_request:	tzinfo.request[0]

1719428040.071 cloud_send_msg:	Send to cloud: {""a"":""status"", ""msg"":{""wifi_sta"":{""connected"":true,""ssid"":""Vodafone-Chemellopoulos"",""ip"":""192.168.1.73"",""rssi"":-46},""cloud"":{""enabled"":true,""connected"":true},""mqtt"":{""connected"":false},""time"":""20:54"",""unixtime"":1719428040,""serial"":44,""has_update"":false,""mac"":""84FD2772A156"",""cfg_changed_cnt"":4,""actions_stats"":{""skipped"":0},""sleep_time"":0,""lux"":{""value"":284,""illumination"":""twilight"",""is_valid"":true},""tmp"":{""value"":27.8,""units"":""C"",""is_valid"":true},""sensor"":{""vibration"":false,""motion"":false,""timestamp"":1719427232,""active"":true,""is_valid"":true},""bat"":{""value"":36,""voltage"":3.439},""charger"":false,""update"":{""status"":""unknown"",""has_update"":false,""new_version"":""20240619-130804/v2.2.4@ee290818"",""old_version"":""20240619-130804/v2.2.4@ee290818"",""beta_version"":null},""ram_total"":97280,""ram_free"":22728,""fs_size"":65536,""fs_free"":59408,""uptime"":2071,""fw_info"":{""device"":""shellymotion2-84FD2772A156"",""fw"":""20240619-130804/v2.2.4@ee290818""},""ps_mode"":0,""dbg_flags"":0}}


1719428040.329 cloud_read_task:	Received 64 bytes

1719428040.334 cloud_count_json_brackets:	
PARSED: {""trid"":990,""set"":""status"",""info"":{""serial"":44}}

1719428040.345 cloud_parse_command:	CMD: status

1719428040.349 cloud_send_msg:	Send to cloud: {""a"":""ok"", ""msg"":{""trid"":990}}


1719428040.359 cloud_count_json_brackets:	Done

1719428100.943 cloud_check_minute:	CLOUD TS[0]

1719428100.948 check_signal_strength:	signal strength: -46


 Raw adc: 28962

1719428100.980 measure_temperature:	=======! 28962.00


1719428100.985 measure_temperature:	Rt = 8674.71; tC = 27.66; 

1719428100.991 measure_temperature:	state.tC_sm = 27.66; state.tC= 27.66


1719428160.826 cloud_check_minute:	CLOUD TS[1]

1719428160.831 check_signal_strength:	signal strength: -46


 Raw adc: 29064

1719428160.863 measure_temperature:	=======! 29064.00


1719428160.868 measure_temperature:	Rt = 8737.18; tC = 27.52; 

1719428160.874 measure_temperature:	state.tC_sm = 27.52; state.tC= 27.52


1719428220.876 cloud_check_minute:	CLOUD TS[2]

1719428220.881 check_signal_strength:	signal strength: -46


 Raw adc: 29156

1719428220.913 measure_temperature:	=======! 29156.00


1719428220.918 measure_temperature:	Rt = 8793.90; tC = 27.40; 

1719428220.924 measure_temperature:	state.tC_sm = 27.40; state.tC= 27.40


1719428232.162 vibration_service:	Vibration!!!

1719428232.167 actions_execute:	Action reason[9]: MSG_TYPE_VIBRATION_ON

1719428232.236 cloud_fwinfo_request:	fwinfo.once_done[1]

1719428232.241 cloud_fwinfo_request:	fwinfo.request[0]

1719428232.246 cloud_tzinfo_request:	tzinfo.once_done[1]

1719428232.251 cloud_tzinfo_request:	tzinfo.request[0]

1719428232.256 cloud_send_msg:	Send to cloud: {""a"":""status"", ""msg"":{""wifi_sta"":{""connected"":true,""ssid"":""Vodafone-Chemellopoulos"",""ip"":""192.168.1.73"",""rssi"":-46},""cloud"":{""enabled"":true,""connected"":true},""mqtt"":{""connected"":false},""time"":""20:57"",""unixtime"":1719428232,""serial"":45,""has_update"":false,""mac"":""84FD2772A156"",""cfg_changed_cnt"":4,""actions_stats"":{""skipped"":0},""sleep_time"":0,""lux"":{""value"":284,""illumination"":""twilight"",""is_valid"":true},""tmp"":{""value"":27.4,""units"":""C"",""is_valid"":true},""sensor"":{""vibration"":true,""motion"":false,""timestamp"":1719427232,""active"":true,""is_valid"":true},""bat"":{""value"":36,""voltage"":3.439},""cha

rger"":false,""update"":{""status"":""unknown"",""has_update"":false,""new_version"":""20240619-130804/v2.2.4@ee290818"",""old_version"":""20240619-130804/v2.2.4@ee290818"",""beta_version"":null},""ram_total"":97280,""ram_free"":22728,""fs_size"":65536,""fs_free"":59408,""uptime"":2263,""fw_info"":{""device"":""shellymotion2-84FD2772A156"",""fw"":""20240619-130804/v2.2.4@ee290818""},""ps_mode"":0,""dbg_flags"":0}}


1719428233.160 vibration_service:	Vibration!!!

1719428234.949 cloud_read_task:	Received 64 bytes

1719428234.953 cloud_count_json_brackets:	
PARSED: {""trid"":991,""set"":""status"",""info"":{""serial"":45}}

1719428234.964 cloud_parse_command:	CMD: status

1719428234.969 cloud_send_msg:	Send to cloud: {""a"":""ok"", ""msg"":{""trid"":991}}


1719428234.979 cloud_count_json_brackets:	Done

1719428239.771 actions_execute:	Action reason[10]: MSG_TYPE_VIBRATION_OFF

1719428239.936 cloud_fwinfo_request:	fwinfo.once_done[1]

1719428239.941 cloud_fwinfo_request:	fwinfo.request[0]

1719428239.945 cloud_tzinfo_request:	tzinfo.once_done[1]

1719428239.951 cloud_tzinfo_request:	tzinfo.request[0]

1719428239.956 cloud_send_msg:	Send to cloud: {""a"":""status"", ""msg"":{""wifi_sta"":{""connected"":true,""ssid"":""Vodafone-Chemellopoulos"",""ip"":""192.168.1.73"",""rssi"":-46},""cloud"":{""enabled"":true,""connected"":true},""mqtt"":{""connected"":false},""time"":""20:57"",""unixtime"":1719428239,""serial"":46,""has_update"":false,""mac"":""84FD2772A156"",""cfg_changed_cnt"":4,""actions_stats"":{""skipped"":0},""sleep_time"":0,""lux"":{""value"":284,""illumination"":""twilight"",""is_valid"":true},""tmp"":{""value"":27.4,""units"":""C"",""is_valid"":true},""sensor"":{""vibration"":false,""motion"":false,""timestamp"":1719427232,""active"":true,""is_valid"":true},""bat"":{""value"":36,""voltage"":3.439},""charger"":false,""update"":{""status"":""unknown"",""has_update"":false,""new_version"":""20240619-130804/v2.2.4@ee290818"",""old_version"":""20240619-130804/v2.2.4@ee290818"",""beta_version"":null},""ram_total"":97280,""ram_free"":22728,""fs_size"":65536,""fs_free"":59408,""uptime"":2270,""fw_info"":{""device"":""shellymotion2-84FD2772A156"",""fw"":""20240619-130804/v2.2.4@ee290818""},""ps_mode"":0,""dbg_flags"":0}}


1719428241.439 cloud_read_task:	Received 64 bytes

1719428241.443 cloud_count_json_brackets:	
PARSED: {""trid"":992,""set"":""status"",""info"":{""serial"":46}}

1719428241.454 cloud_parse_command:	CMD: status

1719428241.459 cloud_send_msg:	Send to cloud: {""a"":""ok"", ""msg"":{""trid"":992}}


1719428241.468 cloud_count_json_brackets:	Done

1719428280.808 cloud_check_minute:	CLOUD TS[0]

1719428280.813 check_signal_strength:	signal strength: -47


 Raw adc: 29241

1719428280.845 measure_temperature:	=======! 29241.00


1719428280.850 measure_temperature:	Rt = 8846.64; tC = 27.29; 

1719428280.856 measure_temperature:	state.tC_sm = 27.29; state.tC= 27.29


1719428322.328 Motion !!!
1719428322.331 actions_execute:	Action reason[5]: MSG_TYPE_MOTION_ON

1719428322.400 cloud_fwinfo_request:	fwinfo.once_done[1]

1719428322.405 cloud_fwinfo_request:	fwinfo.request[0]

1719428322.410 cloud_tzinfo_request:	tzinfo.once_done[1]

1719428322.416 cloud_tzinfo_request:	tzinfo.request[0]

1719428322.420 cloud_send_msg:	Send to cloud: {""a"":""status"", ""msg"":{""wifi_sta"":{""connected"":true,""ssid"":""Vodafone-Chemellopoulos"",""ip"":""192.168.1.73"",""rssi"":-47},""cloud"":{""enabled"":true,""connected"":true},""mqtt"":{""connected"":false},""time"":""20:58"",""unixtime"":1719428322,""serial"":47,""has_update"":false,""mac"":""84FD2772A156"",""cfg_changed_cnt"":4,""actions_stats"":{""skipped"":0},""sleep_time"":0,""lux"":{""value"":284,""illumination"":""twilight"",""is_valid"":true},""tmp"":{""value"":27.3,""units"":""C"",""is_valid"":true},""sensor"":{""vibration"":false,""motion"":true,""timestamp"":1719428322,""active"":true,""is_valid"":true},""bat"":{""value"":36,""voltage"":3.439},""charger"":false,""update"":{""status"":""unknown"",""has_update"":false,""new_version"":""20240619-130804/v2.2.4@ee290818"",""old_version"":""20240619-130804/v2.2.4@ee290818"",""beta_version"":null},""ram_total"":97280,""ram_free"":22728,""fs_size"":65536,""fs_free"":59408,""uptime"":2353,""fw_info"":{""device"":""shellymotion2-84FD2772A156"",""fw"":""20240619-130804/v2.2.4@ee290818""},""ps_mode"":0,""dbg_flags"":0}}


1719428323.609 cloud_read_task:	Received 64 byt

es

1719428323.614 cloud_count_json_brackets:	
PARSED: {""trid"":993,""set"":""status"",""info"":{""serial"":47}}

1719428323.624 cloud_parse_command:	CMD: status

1719428323.629 cloud_send_msg:	Send to cloud: {""a"":""ok"", ""msg"":{""trid"":993}}


1719428323.640 cloud_count_json_brackets:	Done

1719428324.033 vibration_service:	Vibration!!!

1719428324.038 actions_execute:	Action reason[9]: MSG_TYPE_VIBRATION_ON

1719428324.106 cloud_fwinfo_request:	fwinfo.once_done[1]

1719428324.111 cloud_fwinfo_request:	fwinfo.request[0]

1719428324.116 cloud_tzinfo_request:	tzinfo.once_done[1]

1719428324.121 cloud_tzinfo_request:	tzinfo.request[0]

1719428324.127 cloud_send_msg:	Send to cloud: {""a"":""status"", ""msg"":{""wifi_sta"":{""connected"":true,""ssid"":""Vodafone-Chemellopoulos"",""ip"":""192.168.1.73"",""rssi"":-47},""cloud"":{""enabled"":true,""connected"":true},""mqtt"":{""connected"":false},""time"":""20:58"",""unixtime"":1719428324,""serial"":48,""has_update"":false,""mac"":""84FD2772A156"",""cfg_changed_cnt"":4,""actions_stats"":{""skipped"":0},""sleep_time"":0,""lux"":{""value"":284,""illumination"":""twilight"",""is_valid"":true},""tmp"":{""value"":27.3,""units"":""C"",""is_valid"":true},""sensor"":{""vibration"":true,""motion"":true,""timestamp"":1719428322,""active"":true,""is_valid"":true},""bat"":{""value"":36,""voltage"":3.439},""charger"":false,""update"":{""status"":""unknown"",""has_update"":false,""new_version"":""20240619-130804/v2.2.4@ee290818"",""old_version"":""20240619-130804/v2.2.4@ee290818"",""beta_version"":null},""ram_total"":97280,""ram_free"":22728,""fs_size"":65536,""fs_free"":59408,""uptime"":2355,""fw_info"":{""device"":""shellymotion2-84FD2772A156"",""fw"":""20240619-130804/v2.2.4@ee290818""},""ps_mode"":0,""dbg_flags"":0}}


1719428324.326 cloud_read_task:	Received 64 bytes

1719428324.331 cloud_count_json_brackets:	
PARSED: {""trid"":994,""set"":""status"",""info"":{""serial"":48}}

1719428324.342 cloud_parse_command:	CMD: status

1719428324.346 cloud_send_msg:	Send to cloud: {""a"":""ok"", ""msg"":{""trid"":994}}


1719428324.356 cloud_count_json_brackets:	Done

1719428325.056 vibration_service:	Vibration!!!

1719428331.642 actions_execute:	Action reason[10]: MSG_TYPE_VIBRATION_OFF

1719428331.807 cloud_fwinfo_request:	fwinfo.once_done[1]

1719428331.812 cloud_fwinfo_request:	fwinfo.request[0]

1719428331.817 cloud_tzinfo_request:	tzinfo.once_done[1]

1719428331.822 cloud_tzinfo_request:	tzinfo.request[0]

1719428331.827 cloud_send_msg:	Send to cloud: {""a"":""status"", ""msg"":{""wifi_sta"":{""connected"":true,""ssid"":""Vodafone-Chemellopoulos"",""ip"":""192.168.1.73"",""rssi"":-47},""cloud"":{""enabled"":true,""connected"":true},""mqtt"":{""connected"":false},""time"":""20:58"",""unixtime"":1719428331,""serial"":49,""has_update"":false,""mac"":""84FD2772A156"",""cfg_changed_cnt"":4,""actions_stats"":{""skipped"":0},""sleep_time"":0,""lux"":{""value"":284,""illumination"":""twilight"",""is_valid"":true},""tmp"":{""value"":27.3,""units"":""C"",""is_valid"":true},""sensor"":{""vibration"":false,""motion"":true,""timestamp"":1719428322,""active"":true,""is_valid"":true},""bat"":{""value"":36,""voltage"":3.439},""charger"":false,""update"":{""status"":""unknown"",""has_update"":false,""new_version"":""20240619-130804/v2.2.4@ee290818"",""old_version"":""20240619-130804/v2.2.4@ee290818"",""beta_version"":null},""ram_total"":97280,""ram_free"":22728,""fs_size"":65536,""fs_free"":59408,""uptime"":2362,""fw_info"":{""device"":""shellymotion2-84FD2772A156"",""fw"":""20240619-130804/v2.2.4@ee290818""},""ps_mode"":0,""dbg_flags"":0}}


1719428331.036 cloud_read_task:	Received 64 bytes

1719428331.040 cloud_count_json_brackets:	
PARSED: {""trid"":995,""set"":""status"",""info"":{""serial"":49}}

1719428331.051 cloud_parse_command:	CMD: status

1719428331.055 cloud_send_msg:	Send to cloud: {""a"":""ok"", ""msg"":{""trid"":995}}


1719428331.066 cloud_count_json_brackets:	Done

1719428340.786 check_signal_strength:	signal strength: -44, current beacon skip is 20

1719428340.794 cloud_check_minute:	CLOUD TS[0]


 Raw adc: 29283

1719428340.824 measure_temperature:	=======! 29283.00


1719428340.829 measure_temperature:	Rt = 8872.81; tC = 27.23; 

1719428340.835 measure_temperature:	state.tC_sm = 27.23; state.tC= 27.23


1719428400.740 cloud_check_minute:	CLOUD TS[1]

1719428400.745 check_signal_strength:	signal s

trength: -44, current beacon skip is 20


 Raw adc: 29416

1719428400.780 measure_temperature:	=======! 29416.00


1719428400.786 measure_temperature:	Rt = 8956.19; tC = 27.06; 

1719428400.791 measure_temperature:	state.tC_sm = 27.06; state.tC= 27.06


1719428460.723 cloud_check_minute:	CLOUD TS[2]

1719428460.728 check_signal_strength:	signal strength: -43, current beacon skip is 20


 Raw adc: 29508

1719428460.763 measure_temperature:	=======! 29508.00


1719428460.768 measure_temperature:	Rt = 9014.33; tC = 26.93; 

1719428460.774 measure_temperature:	state.tC_sm = 26.93; state.tC= 26.93


1719428520.678 cloud_check_minute:	CLOUD TS[3]

1719428520.683 check_signal_strength:	signal strength: -43, current beacon skip is 20


 Raw adc: 29583

1719428520.718 measure_temperature:	=======! 29583.00


1719428520.723 measure_temperature:	Rt = 9062.01; tC = 26.84; 

1719428520.728 measure_temperature:	state.tC_sm = 26.84; state.tC= 26.84


1719428580.657 cloud_check_minute:	CLOUD TS[4]

1719428580.663 check_signal_strength:	signal strength: -42, current beacon skip is 20


 Raw adc: 29670

1719428580.698 measure_temperature:	=======! 29670.00


1719428580.703 measure_temperature:	Rt = 9117.63; tC = 26.72; 

1719428580.708 measure_temperature:	state.tC_sm = 26.72; state.tC= 26.72


1719428580.818 actions_execute:	Action reason[14]: MSG_TYPE_REPORT

1719428580.854 cloud_fwinfo_request:	fwinfo.once_done[1]

1719428580.859 cloud_fwinfo_request:	fwinfo.request[0]

1719428580.864 cloud_tzinfo_request:	tzinfo.once_done[1]

1719428580.869 cloud_tzinfo_request:	tzinfo.request[0]

1719428580.874 cloud_send_msg:	Send to cloud: {""a"":""status"", ""msg"":{""wifi_sta"":{""connected"":true,""ssid"":""Vodafone-Chemellopoulos"",""ip"":""192.168.1.73"",""rssi"":-42},""cloud"":{""enabled"":true,""connected"":true},""mqtt"":{""connected"":false},""time"":""21:03"",""unixtime"":1719428580,""serial"":50,""has_update"":false,""mac"":""84FD2772A156"",""cfg_changed_cnt"":4,""actions_stats"":{""skipped"":0},""sleep_time"":0,""lux"":{""value"":190,""illumination"":""twilight"",""is_valid"":true},""tmp"":{""value"":26.7,""units"":""C"",""is_valid"":true},""sensor"":{""vibration"":false,""motion"":true,""timestamp"":1719428322,""active"":true,""is_valid"":true},""bat"":{""value"":36,""voltage"":3.439},""charger"":false,""update"":{""status"":""unknown"",""has_update"":false,""new_version"":""20240619-130804/v2.2.4@ee290818"",""old_version"":""20240619-130804/v2.2.4@ee290818"",""beta_version"":null},""ram_total"":97280,""ram_free"":22728,""fs_size"":65536,""fs_free"":59408,""uptime"":2611,""fw_info"":{""device"":""shellymotion2-84FD2772A156"",""fw"":""20240619-130804/v2.2.4@ee290818""},""ps_mode"":0,""dbg_flags"":0}}


1719428580.046 cloud_read_task:	Received 64 bytes

1719428580.051 cloud_count_json_brackets:	
PARSED: {""trid"":996,""set"":""status"",""info"":{""serial"":50}}

1719428580.061 cloud_parse_command:	CMD: status

1719428580.066 cloud_send_msg:	Send to cloud: {""a"":""ok"", ""msg"":{""trid"":996}}


1719428580.077 cloud_count_json_brackets:	Done

1719428622.537 actions_execute:	Action reason[6]: MSG_TYPE_MOTION_OFF

1719428622.840 cloud_fwinfo_request:	fwinfo.once_done[1]

1719428622.845 cloud_fwinfo_request:	fwinfo.request[0]

1719428622.850 cloud_tzinfo_request:	tzinfo.once_done[1]

1719428622.855 cloud_tzinfo_request:	tzinfo.request[0]

1719428622.860 cloud_send_msg:	Send to cloud: {""a"":""status"", ""msg"":{""wifi_sta"":{""connected"":true,""ssid"":""Vodafone-Chemellopoulos"",""ip"":""192.168.1.73"",""rssi"":-42},""cloud"":{""enabled"":true,""connected"":true},""mqtt"":{""connected"":false},""time"":""21:03"",""unixtime"":1719428622,""serial"":51,""has_update"":false,""mac"":""84FD2772A156"",""cfg_changed_cnt"":4,""actions_stats"":{""skipped"":0},""sleep_time"":0,""lux"":{""value"":190,""illumination"":""twilight"",""is_valid"":true},""tmp"":{""value"":26.7,""units"":""C"",""is_valid"":true},""sensor"":{""vibration"":false,""motion"":false,""timestamp"":1719428322,""active"":true,""is_valid"":true},""bat"":{""value"":36,""voltage"":3.439},""charger"":false,""update"":{""status"":""unknown"",""has_update"":false,""new_version"":""20240619-130804/v2.2.4@ee290818"",""old_version"":""20240619-130804/v2.2.4@ee290818"",""beta_version"":null},""ram_total"":97280,""ram_free"":22728,""fs_size"":65536

,""fs_free"":59408,""uptime"":2653,""fw_info"":{""device"":""shellymotion2-84FD2772A156"",""fw"":""20240619-130804/v2.2.4@ee290818""},""ps√Ü_mode"":0,""dbg_flags"":0}}


1719428622.085 cloud_read_task:	Received 64 bytes

1719428622.090 cloud_count_json_brackets:	
PARSED: {""trid"":997,""set"":""status"",""info"":{""serial"":51}}

1719428622.100 cloud_parse_command:	CMD: status

1719428622.105 cloud_send_msg:	Send to cloud: {""a"":""ok"", ""msg"":{""trid"":997}}


1719428622.116 cloud_count_json_brackets:	Done

1719428640.616 cloud_check_minute:	CLOUD TS[0]

1719428640.621 check_signal_strength:	signal strength: -42, current beacon skip is 20


 Raw adc: 29730

1719428640.656 measure_temperature:	=======! 29730.00


1719428640.661 measure_temperature:	Rt = 9156.19; tC = 26.64; 

1719428640.667 measure_temperature:	state.tC_sm = 26.64; state.tC= 26.64


1719428700.553 cloud_check_minute:	CLOUD TS[1]

1719428700.558 check_signal_strength:	signal strength: -43, current beacon skip is 20


 Raw adc: 29804

1719428700.594 measure_temperature:	=======! 29804.00


1719428700.599 measure_temperature:	Rt = 9203.98; tC = 26.54; 

1719428700.604 measure_temperature:	state.tC_sm = 26.54; state.tC= 26.54


1719428760.502 cloud_check_minute:	CLOUD TS[2]

1719428760.507 check_signal_strength:	signal strength: -43, current beacon skip is 20


 Raw adc: 29873

1719428760.542 measure_temperature:	=======! 29873.00


1719428760.547 measure_temperature:	Rt = 9248.76; tC = 26.45; 

1719428760.553 measure_temperature:	state.tC_sm = 26.45; state.tC= 26.45


1719428820.476 cloud_check_minute:	CLOUD TS[3]

1719428820.481 check_signal_strength:	signal strength: -43, current beacon skip is 20


 Raw adc: 29930

1719428820.516 measure_temperature:	=======! 29930.00


1719428820.521 measure_temperature:	Rt = 9285.93; tC = 26.38; 

1719428820.527 measure_temperature:	state.tC_sm = 26.38; state.tC= 26.38


1719428880.426 cloud_check_minute:	CLOUD TS[4]

1719428880.431 check_signal_strength:	signal strength: -42, current beacon skip is 20


 Raw adc: 29991

1719428880.466 measure_temperature:	=======! 29991.00


1719428880.471 measure_temperature:	Rt = 9325.87; tC = 26.30; 

1719428880.477 measure_temperature:	state.tC_sm = 26.30; state.tC= 26.30


1719428940.471 cloud_check_minute:	CLOUD TS[5]

1719428940.476 check_signal_strength:	signal strength: -42, current beacon skip is 20


 Raw adc: 30059

1719428940.511 measure_temperature:	=======! 30059.00


1719428940.517 measure_temperature:	Rt = 9370.59; tC = 26.21; 

1719428940.522 measure_temperature:	state.tC_sm = 26.21; state.tC= 26.21


1719429000.347 cloud_check_minute:	CLOUD TS[6]

1719429000.352 check_signal_strength:	signal strength: -42, current beacon skip is 20


 Raw adc: 30116

1719429000.387 measure_temperature:	=======! 30116.00


1719429000.392 measure_temperature:	Rt = 9408.26; tC = 26.13; 

1719429000.398 measure_temperature:	state.tC_sm = 26.13; state.tC= 26.13


1719429060.393 cloud_check_minute:	CLOUD TS[7]

1719429060.398 check_signal_strength:	signal strength: -42, current beacon skip is 20


 Raw adc: 30166

1719429060.434 measure_temperature:	=======! 30166.00


1719429060.439 measure_temperature:	Rt = 9441.42; tC = 26.07; 

1719429060.444 measure_temperature:	state.tC_sm = 26.07; state.tC= 26.07


1719429120.367 cloud_check_minute:	CLOUD TS[8]

1719429120.372 check_signal_strength:	signal strength: -42, current beacon skip is 20


 Raw adc: 30225

1719429120.407 measure_temperature:	=======! 30225.00


1719429120.413 measure_temperature:	Rt = 9480.71; tC = 25.99; 

1719429120.418 measure_temperature:	state.tC_sm = 25.99; state.tC= 25.99


1719429180.314 cloud_check_minute:	CLOUD TS[9]

1719429180.319 check_signal_strength:	signal strength: -42, current beacon skip is 20


 Raw adc: 30270

1719429180.354 measure_temperature:	=======! 30270.00


1719429180.360 measure_temperature:	Rt = 9510.79; tC = 25.93; 

1719429180.365 measure_temperature:	state.tC_sm = 25.93; state.tC= 25.93


1719429240.284 cloud_check_minute:	CLOUD TS[10]

1719429240.290 check_signal_strength:	signal strength: -42, current 

beacon skip is 20


 Raw adc: 30310

1719429240.325 measure_temperature:	=======! 30310.00


1719429240.330 measure_temperature:	Rt = 9537.61; tC = 25.88; 

1719429240.335 measure_temperature:	state.tC_sm = 25.88; state.tC= 25.88


1719429300.230 cloud_check_minute:	CLOUD TS[11]

1719429300.236 check_signal_strength:	signal strength: -42, current beacon skip is 20


 Raw adc: 30377

1719429300.271 measure_temperature:	=======! 30377.00


1719429300.276 measure_temperature:	Rt = 9582.71; tC = 25.79; 

1719429300.281 measure_temperature:	state.tC_sm = 25.79; state.tC= 25.79


1719429360.205 cloud_check_minute:	CLOUD TS[12]

1719429360.211 check_signal_strength:	signal strength: -42, current beacon skip is 20


 Raw adc: 30419

1719429360.246 measure_temperature:	=======! 30419.00


1719429360.251 measure_temperature:	Rt = 9611.09; tC = 25.74; 

1719429360.256 measure_temperature:	state.tC_sm = 25.74; state.tC= 25.74


1719429420.153 cloud_check_minute:	CLOUD TS[13]

1719429420.158 check_signal_strength:	signal strength: -42, current beacon skip is 20


 Raw adc: 30453

1719429420.193 measure_temperature:	=======! 30453.00


1719429420.198 measure_temperature:	Rt = 9634.13; tC = 25.69; 

1719429420.204 measure_temperature:	state.tC_sm = 25.69; state.tC= 25.69


1719429420.314 actions_execute:	Action reason[14]: MSG_TYPE_REPORT

1719429420.349 cloud_fwinfo_request:	fwinfo.once_done[1]

1719429420.451 cloud_fwinfo_request:	fwinfo.request[0]

1719429420.457 cloud_tzinfo_request:	tzinfo.once_done[1]

1719429420.462 cloud_tzinfo_request:	tzinfo.request[0]

1719429420.467 cloud_send_msg:	Send to cloud: {""a"":""status"", ""msg"":{""wifi_sta"":{""connected"":true,""ssid"":""Vodafone-Chemellopoulos"",""ip"":""192.168.1.73"",""rssi"":-42},""cloud"":{""enabled"":true,""connected"":true},""mqtt"":{""connected"":false},""time"":""21:17"",""unixtime"":1719429420,""serial"":52,""has_update"":false,""mac"":""84FD2772A156"",""cfg_changed_cnt"":4,""actions_stats"":{""skipped"":0},""sleep_time"":0,""lux"":{""value"":190,""illumination"":""twilight"",""is_valid"":true},""tmp"":{""value"":25.7,""units"":""C"",""is_valid"":true},""sensor"":{""vibration"":false,""motion"":false,""timestamp"":1719428322,""active"":true,""is_valid"":true},""bat"":{""value"":36,""voltage"":3.439},""charger"":false,""update"":{""status"":""unknown"",""has_update"":false,""new_version"":""20240619-130804/v2.2.4@ee290818"",""old_version"":""20240619-130804/v2.2.4@ee290818"",""beta_version"":null},""ram_total"":97280,""ram_free"":22728,""fs_size"":65536,""fs_free"":59408,""uptime"":3451,""fw_info"":{""device"":""shellymotion2-84FD2772A156"",""fw"":""20240619-130804/v2.2.4@ee290818""},""ps_mode"":0,""dbg_flags"":0}}


1719429420.749 cloud_read_task:	Received 64 bytes

1719429420.754 cloud_count_json_brackets:	
PARSED: {""trid"":998,""set"":""status"",""info"":{""serial"":52}}

1719429420.765 cloud_parse_command:	CMD: status

1719429420.769 cloud_send_msg:	Send to cloud: {""a"":""ok"", ""msg"":{""trid"":998}}


1719429420.780 cloud_count_json_brackets:	Done

1719429480.077 cloud_check_minute:	CLOUD TS[0]

1719429480.082 check_signal_strength:	signal strength: -42, current beacon skip is 20


 Raw adc: 30492

1719429480.117 measure_temperature:	=======! 30492.00


1719429480.122 measure_temperature:	Rt = 9660.63; tC = 25.64; 

1719429480.128 measure_temperature:	state.tC_sm = 25.64; state.tC= 25.64


1719429540.123 cloud_check_minute:	CLOUD TS[1]

1719429540.128 check_signal_strength:	signal strength: -42, current beacon skip is 20


 Raw adc: 30542

1719429540.163 measure_temperature:	=======! 30542.00


1719429540.168 measure_temperature:	Rt = 9694.72; tC = 25.58; 

1719429540.173 measure_temperature:	state.tC_sm = 25.58; state.tC= 25.58


1719429600.060 cloud_check_minute:	CLOUD TS[2]

1719429600.065 check_signal_strength:	signal strength: -42, current beacon skip is 20


 Raw adc: 30577

1719429600.100 measure_temperature:	=======! 30577.00


1719429600.105 measure_temperature:	Rt = 9718.65; tC = 25.53; 

1719429600.111 measure_temperature:	state.tC_sm = 25.53; state.tC= 25.53


1719429600.120 actions_execute:	Action reason[0]: MSG_TYPE_STATUS

1719429601.069 cloud_fwinfo_request:	fwinfo.once_done[1]

1

719429601.074 cloud_fwinfo_request:	fwinfo.request[0]

1719429601.079 cloud_tzinfo_request:	tzinfo.once_done[1]

1719429601.084 cloud_tzinfo_request:	tzinfo.request[0]

1719429601.089 cloud_send_msg:	Send to cloud: {""a"":""status"", ""msg"":{""wifi_sta"":{""connected"":true,""ssid"":""Vodafone-Chemellopoulos"",""ip"":""192.168.1.73"",""rssi"":-42},""cloud"":{""enabled"":true,""connected"":true},""mqtt"":{""connected"":false},""time"":""21:20"",""unixtime"":1719429601,""serial"":53,""has_update"":false,""mac"":""84FD2772A156"",""cfg_changed_cnt"":4,""actions_stats"":{""skipped"":0},""sleep_time"":0,""lux"":{""value"":190,""illumination"":""twilight"",""is_valid"":true},""tmp"":{""value"":25.5,""units"":""C"",""is_valid"":true},""sensor"":{""vibration"":false,""motion"":false,""timestamp"":1719428322,""active"":true,""is_valid"":true},""bat"":{""value"":36,""voltage"":3.436},""charger"":false,""update"":{""status"":""unknown"",""has_update"":false,""new_version"":""20240619-130804/v2.2.4@ee290818"",""old_version"":""20240619-130804/v2.2.4@ee290818"",""beta_version"":null},""ram_total"":97280,""ram_free"":22728,""fs_size"":65536,""fs_free"":59408,""uptime"":3632,""fw_info"":{""device"":""shellymotion2-84FD2772A156"",""fw"":""20240619-130804/v2.2.4@ee290818""},""ps_mode"":0,""dbg_flags"":0}}


1719429601.356 cloud_read_task:	Received 64 bytes

1719429601.361 cloud_count_json_brackets:	
PARSED: {""trid"":999,""set"":""status"",""info"":{""serial"":53}}

1719429601.371 cloud_parse_command:	CMD: status

1719429601.376 cloud_send_msg:	Send to cloud: {""a"":""ok"", ""msg"":{""trid"":999}}


1719429601.386 cloud_count_json_brackets:	Done

1719429660.951 check_signal_strength:	signal strength: -42, current beacon skip is 20


 Raw adc: 30619

1719429660.986 measure_temperature:	=======! 30619.00


1719429660.991 measure_temperature:	Rt = 9747.45; tC = 25.47; 

1719429660.996 measure_temperature:	state.tC_sm = 25.47; state.tC= 25.47


1719429660.068 cloud_check_minute:	CLOUD TS[0]

tcp=>  192.168.1.51
1719429720.999 cloud_check_minute:	CLOUD TS[1]

1719429720.004 check_signal_strength:	signal strength: -41, current beacon skip is 20


 Raw adc: 30649

1719429720.039 measure_temperature:	=======! 30649.00


1719429720.044 measure_temperature:	Rt = 9768.08; tC = 25.44; 

1719429720.050 measure_temperature:	state.tC_sm = 25.44; state.tC= 25.44


1719429780.974 cloud_check_minute:	CLOUD TS[2]

1719429780.979 check_signal_strength:	signal strength: -41, current beacon skip is 20


 Raw adc: 30688

1719429780.014 measure_temperature:	=======! 30688.00


1719429780.019 measure_temperature:	Rt = 9794.96; tC = 25.38; 

1719429780.025 measure_temperature:	state.tC_sm = 25.38; state.tC= 25.38


1719429840.922 cloud_check_minute:	CLOUD TS[3]

1719429840.928 check_signal_strength:	signal strength: -42, current beacon skip is 20


 Raw adc: 30719

1719429840.963 measure_temperature:	=======! 30719.00


1719429840.968 measure_temperature:	Rt = 9816.39; tC = 25.34; 

1719429840.973 measure_temperature:	state.tC_sm = 25.34; state.tC= 25.34


1719429900.896 cloud_check_minute:	CLOUD TS[4]

1719429900.901 check_signal_strength:	signal strength: -42, current beacon skip is 20


 Raw adc: 30759

1719429900.936 measure_temperature:	=======! 30759.00


1719429900.941 measure_temperature:	Rt = 9844.10; tC = 25.29; 

1719429900.947 measure_temperature:	state.tC_sm = 25.29; state.tC= 25.29


1719429960.845 cloud_check_minute:	CLOUD TS[5]

1719429960.850 check_signal_strength:	signal strength: -43, current beacon skip is 20


 Raw adc: 30783

1719429960.885 measure_temperature:	=======! 30783.00


1719429960.890 measure_temperature:	Rt = 9860.77; tC = 25.26; 

1719429960.896 measure_temperature:	state.tC_sm = 25.26; state.tC= 25.26


1719430020.789 cloud_check_minute:	CLOUD TS[6]

1719430020.794 check_signal_strength:	signal strength: -43, current beacon skip is 20


 Raw adc: 30812

1719430020.829 measure_temperature:	=======! 30812.00


1719430020.834 measure_temperature:	Rt = 9880.95; tC = 25.22; 

1719430020.840 measure_temperature:	state.tC_sm = 25.22; state.tC= 25.22


1719430080.831 cloud_check_minute:	CLOUD TS[7]

1719430080.836 check_signal_strength:	signal strength: -43, current beac

on skip is 20


 Raw adc: 30839

1719430080.871 measure_temperature:	=======! 30839.00


1719430080.877 measure_temperature:	Rt = 9899.78; tC = 25.19; 

1719430080.882 measure_temperature:	state.tC_sm = 25.19; state.tC= 25.19


1719430140.704 cloud_check_minute:	CLOUD TS[8]

1719430140.709 check_signal_strength:	signal strength: -43, current beacon skip is 20


 Raw adc: 30866

1719430140.745 measure_temperature:	=======! 30866.00


1719430140.750 measure_temperature:	Rt = 9918.65; tC = 25.15; 

1719430140.755 measure_temperature:	state.tC_sm = 25.15; state.tC= 25.15


1719430200.738 cloud_check_minute:	CLOUD TS[9]

1719430200.743 check_signal_strength:	signal strength: -43, current beacon skip is 20


 Raw adc: 30902

1719430200.778 measure_temperature:	=======! 30902.00


1719430200.784 measure_temperature:	Rt = 9943.86; tC = 25.10; 

1719430200.789 measure_temperature:	state.tC_sm = 25.10; state.tC= 25.10


1719430260.700 cloud_check_minute:	CLOUD TS[10]

1719430260.706 check_signal_strength:	signal strength: -43, current beacon skip is 20


 Raw adc: 30928

1719430260.740 measure_temperature:	=======! 30928.00


1719430260.746 measure_temperature:	Rt = 9962.11; tC = 25.07; 

1719430260.751 measure_temperature:	state.tC_sm = 25.07; state.tC= 25.07


1719430320.635 cloud_check_minute:	CLOUD TS[11]

1719430320.641 check_signal_strength:	signal strength: -43, current beacon skip is 20


 Raw adc: 30942

1719430320.676 measure_temperature:	=======! 30942.00


1719430320.681 measure_temperature:	Rt = 9971.95; tC = 25.05; 

1719430320.686 measure_temperature:	state.tC_sm = 25.05; state.tC= 25.05


1719430380.670 cloud_check_minute:	CLOUD TS[12]

1719430380.675 check_signal_strength:	signal strength: -43, current beacon skip is 20


 Raw adc: 30967

1719430380.710 measure_temperature:	=======! 30967.00


1719430380.716 measure_temperature:	Rt = 9989.55; tC = 25.02; 

1719430380.721 measure_temperature:	state.tC_sm = 25.02; state.tC= 25.02


tcp=>  192.168.1.70
requested debug log: start=14168, end=14167

"
aSiRHYbQ,–î–ó –û—Ç—á–µ—Ç –æ –≤–æ–æ—Ä—É–∂–µ–Ω–∏–µ–µ,TeT91,C#,Wednesday 26th of June 2024 02:21:02 PM CDT,"using System;
using System.Collections.Generic;
using System.Linq;

namespace CSLight
{
    internal class Program
    {
        static void Main(string[] args)
        {
            PersonBase person = new PersonBase();
            person.ShowSoldiersInfo();
        }
    }

    class PersonBase
    {
        private List<Person> _soldiers;

        public PersonBase()
        {
            GenerateSoldiers();
        }

        public void ShowSoldiersInfo()
        {
            var filteredList = _soldiers.Select(soldier => new { Name = soldier.Name, Term = soldier.Term });

            foreach (var soldier in filteredList)
            {
                Console.WriteLine($""{soldier.Name} - {soldier.Term} "");
            }

            Console.ReadKey();
        }

        private void GenerateSoldiers()
        {
            PersonCreator creator = new PersonCreator();
            int dataBaseCapacity = 20;

            _soldiers = new List<Person>();

            for (int i = 0; i < dataBaseCapacity; i++)
            {
                _soldiers.Add(creator.CreatePerson());
            }
        }
    }


    class PersonCreator
    {
        private List<string> _names;
        private List<string> _surnames;
        private List<string> _weapons;
        private List<string> _ranks;

        public PersonCreator()
        {
            InitNames();
            InitSurnames();
            InitRanks();
            InitWeapons();
        }

        public Person CreatePerson()
        {
            int maxTerm = 50;

            string name = GetRandomValue(_names);
            string surname = GetRandomValue(_surnames);
            string weapon = GetRandomValue(_weapons);
            string rank = GetRandomValue(_ranks);
            int term = UserUtils.GenerateRandomValue(maxTerm);

            return new Person(name, surname, weapon, rank, term);
        }

        private void InitSurnames()
        {
            _surnames = new List<string>();
            _surnames.Add(""–°–º–∏—Ä–Ω–æ–≤"");
            _surnames.Add(""–ò–≤–∞–Ω–æ–≤"");
            _surnames.Add(""–ö—É–∑–Ω–µ—Ü–æ–≤"");
            _surnames.Add(""–ü–æ–ø–æ–≤"");
            _surnames.Add(""–°–æ–∫–æ–ª–æ–≤"");
            _surnames.Add(""–õ–µ–±–µ–¥–µ–≤"");
            _surnames.Add(""–ö–æ–∑–ª–æ–≤"");
            _surnames.Add(""–ù–æ–≤–∏–∫–æ–≤"");
            _surnames.Add(""–ú–æ—Ä–æ–∑–æ–≤"");
            _surnames.Add(""–ö–æ–∑–ª–æ–≤"");
            _surnames.Add(""–í–æ–ª–∫–æ–≤"");
        }

        private void InitRanks()
        {
            _ranks = new List<string>();
            _ranks.Add(""–ù–æ–≤–æ–±—Ä–∞–Ω–µ—Ü"");
            _ranks.Add(""–†—è–¥–æ–≤–æ–π"");
            _ranks.Add(""–°–µ—Ä–∂–∞–Ω—Ç"");
            _ranks.Add(""–ì–µ–Ω–µ—Ä–∞–ª"");

        }

        private void InitNames()
        {
            _names = new List<string>();
            _names.Add(""–ú–∞–∫—Å–∏–º"");
            _names.Add(""–ú–∏—Ö–∞–∏–ª"");
            _names.Add(""–ê–ª–µ–∫—Å–∞–Ω–¥—Ä"");
            _names.Add(""–î–º–∏—Ç—Ä–∏–π"");
            _names.Add(""–î–µ–Ω–∏—Å"");
            _names.Add(""–ò–ª—å—è"");
            _names.Add(""–ê–Ω–¥—Ä–µ–π"");
            _names.Add(""–ê—Ä—Ç–µ–º"");
            _names.Add(""–ò–≤–∞–Ω"");
            _names.Add(""–ê–ª–µ–∫—Å–µ–π"");
            _names.Add(""–ù–∏–∫–∏—Ç–∞"");
        }

        private void InitWeapons()
        {
            _weapons = new List<string>();
            _weapons.Add(""–ü–∏—Å—Ç–æ–ª–µ—Ç"");
            _weapons.Add(""–ê–≤—Ç–æ–º–∞—Ç"");
            _weapons.Add(""–ü—É–ª–µ–º–µ—Ç"");
            _weapons.Add(""–ì—Ä–∞–Ω–∞—Ç–æ–º–µ—Ç"");
        }

        private string GetRandomValue(List<string> values)
        {
            int randomId = UserUtils.GenerateRandomValue(values.Count);
            return values[randomId];
        }

        private bool SetStatus()
        {
            int chance = 50;
            int maxChance = 100;

            return UserUtils.GenerateRandomValue(maxChance) > chance;
        }
    }

    class Person
    {
        public Person(string name, string surname, string weapon, string rank, int term)
        {
            Name = name;
            Weapon = weapon;
            Rank = rank;
            Term = term;
        }

        public string Name { get; private set; }

        public string Surname { get; private set; }

        public string Weapon { get; private set; }

        public string Rank { get; private set; }

        public int Term { get; private set; }
    }

    static class UserUtils
    {
        private static Random s_random = new Random();

        public static int GenerateRandomValue(int maxValue)
        {
            return s_random.Next(maxValue);
        }

        public static int GenerateRandomValue(int minValue, int maxValue)
        {
            return s_random.Next(minValue, maxValue);
        }

        public static double GenerateRandomDouble()
        {
            return s_random.NextDouble();
        }
    }
}"
VDXuPsAL,seg,nop1984,PHP,Wednesday 26th of June 2024 02:18:22 PM CDT,"<?php 
namespace Drupal\transcom_seo\Plugin\Segment;

class Testing extends \Drupal\segments\Entity\RequestSegment {
  /**
   * {@inheritdoc}
   */
  public static function getEvent() {
	return 'testing';
  }

  /**
   * {@inheritdoc}
   */
  public function getSubject($event) {
	return 'testing';
  }

  /**
   * {@inheritdoc}
   */
  public function belongs($subject) {
	return 'testing';
  }
}"
FUbpQuB5,Untitled,chemelli74,Python,Wednesday 26th of June 2024 01:56:59 PM CDT,"root@MyHomeCenter:~# tcpdump -v -A host 192.168.1.73 and udp port 5683
tcpdump: listening on eth0, link-type EN10MB (Ethernet), snapshot length 262144 bytes
20:35:56.018401 IP (tos 0x0, ttl 255, id 875, offset 0, flags [none], proto UDP (17), length 198)
    192.168.1.73.5683 > 192.168.1.10.5683: UDP, length 170
E....k....4....I...
.3.3..q.P..
.cit.s...
SHMOS-02#84FD2772A156#2.C.!....{""G"":[[0,3101,44.4],[0,3102,112.0],[0,6107,1],[0,3119,1719426955],[0,3120,1],[0,6110,1],[0,3106,165],[0,3111,47],[0,9103,4]]}
20:35:59.930827 IP (tos 0x0, ttl 255, id 878, offset 0, flags [none], proto UDP (17), length 198)
    192.168.1.73.5683 > 192.168.1.10.5683: UDP, length 170
E....n....4....I...
.3.3..r|P..
.cit.s...
SHMOS-02#84FD2772A156#2.C.!....{""G"":[[0,3101,40.8],[0,3102,105.4],[0,6107,1],[0,3119,1719426955],[0,3120,1],[0,6110,1],[0,3106,165],[0,3111,47],[0,9103,4]]}
20:36:10.757679 IP (tos 0x0, ttl 255, id 881, offset 0, flags [none], proto UDP (17), length 198)
    192.168.1.73.5683 > 192.168.1.10.5683: UDP, length 170
E....q....4....I...
.3.3..uzP..
.cit.s...
SHMOS-02#84FD2772A156#2.C.!....{""G"":[[0,3101,40.8],[0,3102,105.4],[0,6107,1],[0,3119,1719426963],[0,3120,1],[0,6110,0],[0,3106,165],[0,3111,47],[0,9103,4]]}
20:36:15.949610 IP (tos 0x0, ttl 255, id 884, offset 0, flags [none], proto UDP (17), length 197)
    192.168.1.73.5683 > 192.168.1.10.5683: UDP, length 169
E....t....4....I...
.3.3...IP..
.cit.s...
SHMOS-02#84FD2772A156#2.C.!....{""G"":[[0,3101,40.8],[0,3102,105.4],[0,6107,1],[0,3119,1719426963],[0,3120,1],[0,6110,0],[0,3106,39],[0,3111,47],[0,9103,4]]}

20:36:50.058865 IP (tos 0x0, ttl 255, id 891, offset 0, flags [none], proto UDP (17), length 197)
    192.168.1.73.5683 > 192.168.1.10.5683: UDP, length 169
E....{....4     ...I...
.3.3...MP..
.cit.s...
SHMOS-02#84FD2772A156#2.C.!....{""G"":[[0,3101,40.8],[0,3102,105.4],[0,6107,1],[0,3119,1719427009],[0,3120,1],[0,6110,1],[0,3106,39],[0,3111,47],[0,9103,4]]}
20:36:59.962625 IP (tos 0x0, ttl 255, id 894, offset 0, flags [none], proto UDP (17), length 197)
    192.168.1.73.5683 > 192.168.1.10.5683: UDP, length 169
E....~....4....I...
.3.3...TP..
.cit.s...
SHMOS-02#84FD2772A156#2.C.!....{""G"":[[0,3101,38.3],[0,3102,101.0],[0,6107,1],[0,3119,1719427017],[0,3120,1],[0,6110,1],[0,3106,39],[0,3111,47],[0,9103,4]]}
20:37:01.760000 IP (tos 0x0, ttl 255, id 901, offset 0, flags [none], proto UDP (17), length 197)
    192.168.1.73.5683 > 192.168.1.10.5683: UDP, length 169
E.........3....I...
.3.3...SP..
.cit.s...
SHMOS-02#84FD2772A156#2.C.!....{""G"":[[0,3101,38.3],[0,3102,101.0],[0,6107,1],[0,3119,1719427017],[0,3120,1],[0,6110,0],[0,3106,39],[0,3111,47],[0,9103,4]]}
20:37:14.888217 IP (tos 0x0, ttl 255, id 904, offset 0, flags [none], proto UDP (17), length 198)
    192.168.1.73.5683 > 192.168.1.10.5683: UDP, length 170
E.........3....I...
.3.3..t.P..
.cit.s...
SHMOS-02#84FD2772A156#2.C.!....{""G"":[[0,3101,38.3],[0,3102,101.0],[0,6107,1],[0,3119,1719427017],[0,3120,1],[0,6110,0],[0,3106,190],[0,3111,47],[0,9103,4]]}
20:38:00.037861 IP (tos 0x0, ttl 255, id 911, offset 0, flags [none], proto UDP (17), length 197)
    192.168.1.73.5683 > 192.168.1.10.5683: UDP, length 169
E.........3....I...
.3.3..|.P..
.cit.s...
SHMOS-02#84FD2772A156#2.C.!.. .{""G"":[[0,3101,36.0],[0,3102,96.7],[0,6107,1],[0,3119,1719427017],[0,3120,1],[0,6110,0],[0,3106,190],[0,3111,47],[0,9103,4]]}
20:38:58.504470 IP (tos 0x0, ttl 255, id 922, offset 0, flags [none], proto UDP (17), length 197)
    192.168.1.73.5683 > 192.168.1.10.5683: UDP, length 169
E.........3....I...
.3.3..|.P..
.cit.s...
SHMOS-02#84FD2772A156#2.C.!..!.{""G"":[[0,3101,36.0],[0,3102,96.7],[0,6107,1],[0,3119,1719427017],[0,3120,1],[0,6110,1],[0,3106,190],[0,3111,47],[0,9103,4]]}
20:38:59.974344 IP (tos 0x0, ttl 255, id 929, offset 0, flags [none], proto UDP (17), length 197)
    192.168.1.73.5683 > 192.168.1.10.5683: UDP, length 169
E.........3....I...
.3.3..y.P..
.cit.s...
SHMOS-02#84FD2772A156#2.C.!.."".{""G"":[[0,3101,33.8],[0,3102,92.9],[0,6107,1],[0,3119,1719427017],[0,3120,1],[0,6110,1],[0,3106,190],[0,3111,47],[0,9103,4]]}
20:39:04.715561 IP (tos 0x0, ttl 255, id 934, offset 0, flags [none], proto UDP (17), length 197)
    192.168.1.73.5683 > 192.168.1.10.5683: UDP, length 169
E.........3....I...
.3.3..y.P..
.cit.s...
SHMOS-02#84FD2772A156#2.C.!..#.{""G"":[[0,3101,33.8],[0,3102,92.9],[0,6107,1],[0,3119,1719427017],[0,3120,1],[0,6110,0],[0,3106,190],[0,3111,47],[0,9103,4]]}
20:39:52.709762 IP (tos 0x0, ttl 255, id 945, offset 0, flags [none], proto UDP (17), length 197)
    192.168.1.73.5683 > 192.168.1.10.5683: UDP, length 169
E.........3....I...
.3.3..y.P..
.cit.s...
SHMOS-02#84FD2772A156#2.C.!..$.{""G"":[[0,3101,33.8],[0,3102,92.9],[0,6107,1],[0,3119,1719427017],[0,3120,1],[0,6110,1],[0,3106,190],[0,3111,47],[0,9103,4]]}
20:39:59.965497 IP (tos 0x0, ttl 255, id 949, offset 0, flags [none], proto UDP (17), length 197)
    192.168.1.73.5683 > 192.168.1.10.5683: UDP, length 169
E.........3....I...
.3.3....P..
.cit.s...
SHMOS-02#84FD2772A156#2.C.!..%.{""G"":[[0,3101,32.6],[0,3102,90.7],[0,6107,1],[0,3119,1719427017],[0,3120,1],[0,6110,1],[0,3106,190],[0,3111,47],[0,9103,4]]}
20:40:02.745967 IP (tos 0x0, ttl 255, id 956, offset 0, flags [none], proto UDP (17), length 197)
    192.168.1.73.5683 > 192.168.1.10.5683: UDP, length 169
E.........3....I...
.3.3....P..
.cit.s...
SHMOS-02#84FD2772A156#2.C.!..&.{""G"":[[0,3101,32.6],[0,3102,90.7],[0,6107,1],[0,3119,1719427017],[0,3120,1],[0,6110,0],[0,3106,190],[0,3111,47],[0,9103,4]]}
20:40:31.361158 IP (tos 0x0, ttl 255, id 959, offset 0, flags [none], proto UDP (17), length 197)
    192.168.1.73.5683 > 192.168.1.10.5683: UDP, length 169
E.........3....I...
.3.3..}.P..
.cit.s...
SHMOS-02#84FD2772A156#2.C.!..'.{""G"":[[0,3101,32.6],[0,3102,90.7],[0,6107,1],[0,3119,1719427228],[0,3120,1],[0,6110,1],[0,3106,182],[0,3111,47],[0,9103,4]]}
20:40:42.780301 IP (tos 0x0, ttl 255, id 968, offset 0, flags [none], proto UDP (17), length 197)
    192.168.1.73.5683 > 192.168.1.10.5683: UDP, length 169
E.........3....I...
.3.3..|.P..
.cit.s...
SHMOS-02#84FD2772A156#2.C.!..(.{""G"":[[0,3101,32.6],[0,3102,90.7],[0,6107,1],[0,3119,1719427232],[0,3120,1],[0,6110,0],[0,3106,182],[0,3111,47],[0,9103,4]]}




20:41:59.986301 IP (tos 0x0, ttl 255, id 983, offset 0, flags [none], proto UDP (17), length 197)
    192.168.1.73.5683 > 192.168.1.10.5683: UDP, length 169
E.........3....I...
.3.3..x.P..
.cit.s...
SHMOS-02#84FD2772A156#2.C.!..).{""G"":[[0,3101,31.0],[0,3102,87.8],[0,6107,1],[0,3119,1719427232],[0,3120,1],[0,6110,0],[0,3106,284],[0,3111,47],[0,9103,4]]}
20:43:59.954149 IP (tos 0x0, ttl 255, id 991, offset 0, flags [none], proto UDP (17), length 197)
    192.168.1.73.5683 > 192.168.1.10.5683: UDP, length 169
E.........3....I...
.3.3..z.P..
.cit.s...
SHMOS-02#84FD2772A156#2.C.!..*.{""G"":[[0,3101,30.0],[0,3102,85.9],[0,6107,1],[0,3119,1719427232],[0,3120,1],[0,6110,0],[0,3106,284],[0,3111,47],[0,9103,4]]}
20:45:31.710867 IP (tos 0x0, ttl 255, id 995, offset 0, flags [none], proto UDP (17), length 197)
    192.168.1.73.5683 > 192.168.1.10.5683: UDP, length 169
E.........3....I...
.3.3..q.P..
.cit.s...
SHMOS-02#84FD2772A156#2.C.!..+.{""G"":[[0,3101,29.6],[0,3102,85.3],[0,6107,0],[0,3119,1719427232],[0,3120,1],[0,6110,0],[0,3106,284],[0,3111,47],[0,9103,4]]}
20:48:00.019849 IP (tos 0x0, ttl 255, id 1004, offset 0, flags [none], proto UDP (17), length 197)
    192.168.1.73.5683 > 192.168.1.10.5683: UDP, length 169
E.........3....I...
.3.3..l.P..
.cit.s...
SHMOS-02#84FD2772A156#2.C.!..,.{""G"":[[0,3101,28.8],[0,3102,83.9],[0,6107,0],[0,3119,1719427232],[0,3120,1],[0,6110,0],[0,3106,284],[0,3111,47],[0,9103,4]]}
20:54:00.126601 IP (tos 0x0, ttl 255, id 1026, offset 0, flags [none], proto UDP (17), length 197)
    192.168.1.73.5683 > 192.168.1.10.5683: UDP, length 169
E.........3....I...
.3.3..x.P..
.cit.s...
SHMOS-02#84FD2772A156#2.C.!..-.{""G"":[[0,3101,27.8],[0,3102,82.0],[0,6107,0],[0,3119,1719427232],[0,3120,1],[0,6110,0],[0,3106,284],[0,3111,36],[0,9103,4]]}"
1KfpD7KZ,üéÅ G2A.COM FREE GIFT CARD GUIDE JUN 2024 V3 üéÅ,jusst2k4,GetText,Wednesday 26th of June 2024 01:51:03 PM CDT,"G2A.com free gift card & games updated guide.
Any item for free on G2A.com including Amazon, Steam, Xbox, Playstation gift cards & everything else offered.
 
This is the most up to date version of this script. Any other one posted will not work!
 
PDF guide here:
https://drive.google.com/file/d/1thJ3r_goEZ3BA-wE8sNYbGUhGv6gTnXz/view?usp=g2a_refund_exploit_867468.pdf
 
Working as of:
26 June 2024"
XGqdHyHA,Herecom with summary,roma2341,JSON,Wednesday 26th of June 2024 12:55:21 PM CDT,"{
    ""routes"": [
        {
            ""id"": ""ade1af2c-5d33-4bde-b7a3-6954670553b9"",
            ""sections"": [
                {
                    ""id"": ""7339d833-79f3-4177-b281-47bed00ff1b9"",
                    ""type"": ""vehicle"",
                    ""departure"": {
                        ""time"": ""2024-06-26T19:54:19+02:00"",
                        ""place"": {
                            ""type"": ""place"",
                            ""location"": {
                                ""lat"": 52.5309837,
                                ""lng"": 13.384567
                            },
                            ""originalLocation"": {
                                ""lat"": 52.5307999,
                                ""lng"": 13.3847
                            }
                        }
                    },
                    ""arrival"": {
                        ""time"": ""2024-06-26T19:54:57+02:00"",
                        ""place"": {
                            ""type"": ""place"",
                            ""location"": {
                                ""lat"": 52.5310698,
                                ""lng"": 13.3870416
                            },
                            ""originalLocation"": {
                                ""lat"": 52.5309999,
                                ""lng"": 13.3866999
                            },
                            ""waypoint"": 0
                        }
                    },
                    ""summary"": {
                        ""duration"": 38,
                        ""length"": 213,
                        ""baseDuration"": 32
                    },
                    ""polyline"": ""BGwynmkDu39wZkEmP8BoGsEoQwCsJsEkSoBoG8BsJsE0U8BgK8BoLoB4IoB0KjIkDvRwJ"",
                    ""transport"": {
                        ""mode"": ""car""
                    }
                },
                {
                    ""id"": ""9e78eae4-02d3-4762-ade9-edfbba9d8b0d"",
                    ""type"": ""vehicle"",
                    ""departure"": {
                        ""time"": ""2024-06-26T19:54:57+02:00"",
                        ""place"": {
                            ""type"": ""place"",
                            ""location"": {
                                ""lat"": 52.5310698,
                                ""lng"": 13.3870416
                            },
                            ""originalLocation"": {
                                ""lat"": 52.5309999,
                                ""lng"": 13.3866999
                            },
                            ""waypoint"": 0
                        }
                    },
                    ""arrival"": {
                        ""time"": ""2024-06-26T19:57:53+02:00"",
                        ""place"": {
                            ""type"": ""place"",
                            ""location"": {
                                ""lat"": 52.5323264,
                                ""lng"": 13.378874
                            },
                            ""originalLocation"": {
                                ""lat"": 52.5323,
                                ""lng"": 13.3789
                            }
                        }
                    },
                    ""summary"": {
                        ""duration"": 176,
                        ""length"": 907,
                        ""baseDuration"": 162
                    },
                    ""polyline"": ""BG83nmkDkyixZvM4GvbgP7BjIvC7G_Yj6B7B3DnV3wBzK_YjIrT8VvbsOvR0F7G4D_EgKvM0UzZsE_EoGzF0FnGoGvHsOvR8L3NkSvWoGvHsEzFgFvHkD3IwHrJwHrJgKjN4D_E0ezoBjInV3N_iBzJ_Z"",
                    ""transport"": {
                        ""mode"": ""car""
                    }
                }
            ]
        }
    ]
}"
3H4D6zsq,–î–ó –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø—Ä–æ—Å—Ä–æ—á–∫–∏,TeT91,C#,Wednesday 26th of June 2024 12:05:54 PM CDT,"using System;
using System.Collections.Generic;
using System.Linq;

namespace CSLight
{
    internal class Program
    {
        static void Main(string[] args)
        {
            Storage storage = new Storage();
            storage.ShowDamagedProducts();
        }
    }

    class Storage
    {
        private ProductCreator _productCreator;
        private List<Product> _products;

        public Storage()
        {
            _productCreator = new ProductCreator();
            _products = new List<Product>();

            GenerateProducts();
        }

        public void ShowDamagedProducts()
        {
            foreach (Product product in GetDamagedProducts())
            {
                Console.WriteLine($""{product.Name} - {product.ProductionDate}"");
            }

            Console.ReadKey();
        }

        private IEnumerable<Product> GetDamagedProducts()
        {
            int currentYear = 2024;

            var filteredList = _products.Where(product => currentYear - product.ProductionDate >= product.ExpirationDate);

            return filteredList;
        }

        private void GenerateProducts()
        {
            int productsCount = 20;
            _products = new List<Product>();

            for (int i = 0; i < productsCount; i++)
            {
                Product product = _productCreator.CreateProduct();
                _products.Add(product);
            }
        }
    }

    class ProductCreator
    {
        private string[] _names;

        public ProductCreator()
        {
            InitNames();
        }

        public Product CreateProduct()
        {
            int nameId = UserUtils.GenerateRandomValue(_names.Length);

            int minYear = 1990;
            int maxYear = 2024;

            string name = _names[nameId];
            int productionYear = UserUtils.GenerateRandomValue(minYear, maxYear);

            return new Product(name, productionYear);
        }

        private void InitNames()
        {
            int namesCount = 5;

            _names = new string[namesCount];

            for (int i = 0; i < namesCount; i++)
            {
                _names[i] = $""–¢—É—à–µ–Ω–∫–∞ {i}"";
            }
        }
    }

    class Product
    {
        public Product(string name, int productionDate)
        {
            Name = name;
            ProductionDate = productionDate;
            ExpirationDate = 5;
        }

        public string Name { get; private set; }

        public int ProductionDate { get; private set; }

        public int ExpirationDate { get; private set; }
    }

    static class UserUtils
    {
        private static Random s_random = new Random();

        public static int GenerateRandomValue(int minValue, int maxValue)
        {
            return s_random.Next(minValue, maxValue);
        }

        public static int GenerateRandomValue(int maxValue)
        {
            return s_random.Next(maxValue);
        }
    }
}"
zzkrPBPz,Untitled,dllbridge,C,Wednesday 26th of June 2024 11:55:34 AM CDT,"

#include <string.h>
#include  <stdio.h>

 
char szWord[99] = ""SONY12"", 
     sz_2  [99];
 
int _strlen(char *psz); 

void _strcpy(char*, char*); 
 
/////////////////////////////////
int main()                     //
{
        
    int n = _strlen(szWord);
     
    printf(""n = %d\n"", n);  
    
   _strcpy(sz_2, szWord);   
    
    printf(""sz_2 = %s\n"", sz_2);  
}




//////////////////////////////////////////////////
void _strcpy(char *psz1, char *psz2)           //    –°–∫–æ–ø–∏—Ä–æ–≤–∞–ª—Å—è –ª–∏ —Ç–µ—Ä–º–∏–Ω–∞–ª—å–Ω—ã–π –Ω–æ–ª—å?
{
    
    int i = 0;
    
    do
    {
    
       psz1[i] = psz2[i];
    
    }
    while( psz2[++i] != 0);

    
        
}



///////////////////////////////////
int _strlen(char *psz)           //    
{
    
    int i = 0;
    
    while( szWord[++i] != 0);

    
       
return i;        
}










/*

///////////////////////////////////
int _strlen(char *psz)           //    
{
    
    int i = 0;
    
    for(; szWord[i] != 0; i++)
    {
    
       // printf(""%2d\n"", szWord[i]);
        

    }  // printf(""%2d\n"", szWord[i]);  
    
       
return i;        
}


*/




















      //  if(szWord[i] == 0) { printf(""OGO!\n""); break; }


/*

#include <stdlib.h>
#include   <time.h>
#include  <stdio.h>

 
char szWord[99] = ""SONY_Pictures""; 

 
/////////////////////////////////
int main()                     //
{
        
    for(int i = 0; szWord[i] == 0; i++)
    {
    
        printf(""%c\n"", szWord[i]);
        
      //  if(szWord[i] == 0) { printf(""OGO!\n""); break; }
    }
        
}


*/























/*

#include <stdlib.h>
#include   <time.h>
#include  <stdio.h>
 
 
void monitor(int *p); 
 
/////////////////////////////////
int main()                     //
{
    
    srand(time(0));
 
    int array[20],
               nx,             //  min
               ng;             //  max
 
 
    for(int i = 0; i < 20; i++)
    {
        
       array[i] = rand()%200;   
    }
    
    monitor(array);
    
    ng = array[0];
    nx = array[0]; 
       
    int nIndex_Max = 0,
        nIndex_min = 0;
    
    
    for(int i = 0; i < sizeof(array)/4; i++ )
    {
        
      if(array[i] > ng) 
      {
          ng = array[i];         
          nIndex_Max = i;
      }
      
      if(array[i] < nx) 
      {
          nx = array[i];         
          nIndex_min = i;
      }      
    }
    printf(""Max element array: %d, his index = %d\n"", ng, nIndex_Max);
    printf(""min element array: %d, his index = %d\n"", nx, nIndex_min);
    
    
return 0;
}
 
 




/////////////////////////////////////////////////////
void monitor(int *p)                               // 
{
        
        
    for(int i = 0; i < 20; i++)
    {
        
       printf(""%d\n"", p[i]); 
    }        
        
}
*/



"
vRp2VQjy,ServerError: received 500 HTTP response,basedcount_bot,Python,Wednesday 26th of June 2024 11:44:52 AM CDT,"Traceback (most recent call last):
  File ""/root/Bots/basedcount_bot/basedcount_bot.py"", line 46, in wrapper
    await func(reddit_instance, mongo_client)
  File ""/root/Bots/basedcount_bot/basedcount_bot.py"", line 263, in read_comments
    async for comment in pcm_subreddit.stream.comments(skip_existing=True):  # Comment
  File ""/root/Bots/basedcount_bot/.venv/lib/python3.11/site-packages/asyncpraw/models/util.py"", line 160, in stream_generator
    [result async for result in function(limit=limit, **function_kwargs)]
  File ""/root/Bots/basedcount_bot/.venv/lib/python3.11/site-packages/asyncpraw/models/util.py"", line 160, in <listcomp>
    [result async for result in function(limit=limit, **function_kwargs)]
  File ""/root/Bots/basedcount_bot/.venv/lib/python3.11/site-packages/asyncpraw/models/listing/generator.py"", line 34, in __anext__
    await self._next_batch()
  File ""/root/Bots/basedcount_bot/.venv/lib/python3.11/site-packages/asyncpraw/models/listing/generator.py"", line 89, in _next_batch
    self._listing = await self._reddit.get(self.url, params=self.params)
                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File ""/root/Bots/basedcount_bot/.venv/lib/python3.11/site-packages/asyncpraw/util/deprecate_args.py"", line 51, in wrapped
    return await _wrapper(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File ""/root/Bots/basedcount_bot/.venv/lib/python3.11/site-packages/asyncpraw/reddit.py"", line 785, in get
    return await self._objectify_request(method=""GET"", params=params, path=path)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File ""/root/Bots/basedcount_bot/.venv/lib/python3.11/site-packages/asyncpraw/reddit.py"", line 567, in _objectify_request
    await self.request(
  File ""/root/Bots/basedcount_bot/.venv/lib/python3.11/site-packages/asyncpraw/util/deprecate_args.py"", line 51, in wrapped
    return await _wrapper(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File ""/root/Bots/basedcount_bot/.venv/lib/python3.11/site-packages/asyncpraw/reddit.py"", line 1032, in request
    return await self._core.request(
           ^^^^^^^^^^^^^^^^^^^^^^^^^
  File ""/root/Bots/basedcount_bot/.venv/lib/python3.11/site-packages/asyncprawcore/sessions.py"", line 383, in request
    return await self._request_with_retries(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File ""/root/Bots/basedcount_bot/.venv/lib/python3.11/site-packages/asyncprawcore/sessions.py"", line 305, in _request_with_retries
    return await self._do_retry(
           ^^^^^^^^^^^^^^^^^^^^^
  File ""/root/Bots/basedcount_bot/.venv/lib/python3.11/site-packages/asyncprawcore/sessions.py"", line 170, in _do_retry
    return await self._request_with_retries(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File ""/root/Bots/basedcount_bot/.venv/lib/python3.11/site-packages/asyncprawcore/sessions.py"", line 305, in _request_with_retries
    return await self._do_retry(
           ^^^^^^^^^^^^^^^^^^^^^
  File ""/root/Bots/basedcount_bot/.venv/lib/python3.11/site-packages/asyncprawcore/sessions.py"", line 170, in _do_retry
    return await self._request_with_retries(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File ""/root/Bots/basedcount_bot/.venv/lib/python3.11/site-packages/asyncprawcore/sessions.py"", line 322, in _request_with_retries
    raise self.STATUS_EXCEPTIONS[response.status](response)
asyncprawcore.exceptions.ServerError: received 500 HTTP response
"
pwhAauSp,Initial Town Manager,Thatguy5532,C,Wednesday 26th of June 2024 11:42:01 AM CDT,"class LIB_TownManagerComponentClass : ScriptComponentClass
{
};

class LIB_TownData : Managed
{
	EntityID markerID;
	string name;
	int population;
	int stability;
	int support;
	string faction;
	int size;
}

class LIB_TownManagerComponent : ScriptComponent
{
	protected static ref array<IEntity> m_ObjArr = {};
	protected static ref array<IEntity> m_objMarkerArr = {};

	//------------------------------------------------------------------------------------------------
	override void EOnInit(IEntity owner)
	{
		//Print(owner.GetName());
		if (GetGame().InPlayMode()) {
			SCR_MapDescriptorComponent MapD = SCR_MapDescriptorComponent.Cast(owner.FindComponent(SCR_MapDescriptorComponent));
			
			if (IsObj(owner, MapD))
			{
				m_ObjArr.Insert(owner);
				IEntity MarkerEnt = CreateObjMarker(owner);
				CreateObjArea(owner);
				m_objMarkerArr.Insert(MarkerEnt);
			}
		}
		
		
	}
	
	bool IsObj(IEntity owner, SCR_MapDescriptorComponent MapD)
	{
		switch(MapD.GetBaseType())
		{
			case EMapDescriptorType.MDT_PORT:
				return true;
				break;
			
			case EMapDescriptorType.MDT_BASE:
				return true;
				break;
			
			case EMapDescriptorType.MDT_FORTRESS:
				return true;
				break;
			
			case EMapDescriptorType.MDT_FUELSTATION:
				return true;
				break;
			
			case EMapDescriptorType.MDT_NAME_GENERIC:
				return true;
				break;
			
			case EMapDescriptorType.MDT_NAME_CITY:
				return true;
				break;
			
			case EMapDescriptorType.MDT_NAME_VILLAGE:
				return true;
				break;
			
			case EMapDescriptorType.MDT_NAME_TOWN:
				return true;
				break;
			
			case EMapDescriptorType.MDT_NAME_SETTLEMENT:
				return true;
				break;
		}
		return false;
	}

	//------------------------------------------------------------------------------------------------
	override void OnPostInit(IEntity owner)
	{
		// remove if unused
		SetEventMask(owner, EntityEvent.INIT);
	}

	//------------------------------------------------------------------------------------------------
	override void OnDelete(IEntity owner)
	{
		// remove if unused
		SCR_MapDescriptorComponent MapD = SCR_MapDescriptorComponent.Cast(owner.FindComponent(SCR_MapDescriptorComponent));
		if (m_ObjArr) {
			m_ObjArr.RemoveItem(owner)
		}
	}
	//------------------------------------------------------------------------------------------------
	static IEntity GetRandObj()
	{
		if (m_ObjArr.IsEmpty()) {
			return null;
		};
		
		return m_ObjArr.GetRandomElement();
	}
	
	static array<IEntity> GetObjArr()
	{
		if (m_ObjArr.IsEmpty()) {
			return null;
		};
		
		return m_ObjArr;
	}
	
	IEntity CreateObjMarker(IEntity owner)
	{
		Print(""Create Obj Marker"");
		
		IEntity slotMarker = GetGame().SpawnEntityPrefab(""{E537867C6E760514}Prefabs/ScenarioFramework/Components/Marker Entities/SlotMarker.et"", false);
		LIB_ScenarioFrameworkSlotMarker markerComp = LIB_ScenarioFrameworkSlotMarker.Cast(slotMarker.FindComponent(LIB_ScenarioFrameworkSlotMarker));
		SCR_MapDescriptorComponent MapD = SCR_MapDescriptorComponent.Cast(owner.FindComponent(SCR_MapDescriptorComponent));
		
		
		slotMarker.SetOrigin(owner.GetOrigin());
		//Print(slotMarker);
		//Print(markerComp);
		markerComp.SetScriptSpawned(true);
		Print(MapD.GetBaseType());
		switch(MapD.GetBaseType())
		{
			case EMapDescriptorType.MDT_PORT:
				markerComp.SetMapMarkerIcon(LIB_EScenarioFrameworkMarkerCustom.FUELSTATION);
				PrintFormat(""MDT_PORT: %1"", LIB_EScenarioFrameworkMarkerCustom.FUELSTATION);
				break;
			
			case EMapDescriptorType.MDT_BASE:
				markerComp.SetMapMarkerIcon(LIB_EScenarioFrameworkMarkerCustom.MILITARY);
				PrintFormat(""MDT_BASE: %1"", LIB_EScenarioFrameworkMarkerCustom.MILITARY);
				break;
			
			case EMapDescriptorType.MDT_FORTRESS:
				markerComp.SetMapMarkerIcon(LIB_EScenarioFrameworkMarkerCustom.MILITARY);
				PrintFormat(""MDT_FORTRESS: %1"", LIB_EScenarioFrameworkMarkerCustom.MILITARY);
				break;
			
			case EMapDescriptorType.MDT_FUELSTATION:
				markerComp.SetMapMarkerIcon(LIB_EScenarioFrameworkMarkerCustom.FUELSTATION);
				PrintFormat(""MDT_FUELSTATION: %1"", LIB_EScenarioFrameworkMarkerCustom.FUELSTATION);
				break;
			
			case EMapDescriptorType.MDT_NAME_GENERIC:
				markerComp.SetMapMarkerIcon(LIB_EScenarioFrameworkMarkerCustom.TOWN);
				PrintFormat(""MDT_NAME_GENERIC: %1"", LIB_EScenarioFrameworkMarkerCustom.TOWN);
				break;
			
			case EMapDescriptorType.MDT_NAME_CITY:
				markerComp.SetMapMarkerIcon(LIB_EScenarioFrameworkMarkerCustom.CAPITAL);
				PrintFormat(""MDT_NAME_CITY: %1"", LIB_EScenarioFrameworkMarkerCustom.CAPITAL);
				break;
			
			case EMapDescriptorType.MDT_NAME_VILLAGE:
				markerComp.SetMapMarkerIcon(LIB_EScenarioFrameworkMarkerCustom.TOWN);
				PrintFormat(""MDT_NAME_VILLAGE: %1"", LIB_EScenarioFrameworkMarkerCustom.TOWN);
				break;
			
			case EMapDescriptorType.MDT_NAME_TOWN:
				markerComp.SetMapMarkerIcon(LIB_EScenarioFrameworkMarkerCustom.TOWN);
				PrintFormat(""MDT_NAME_TOWN: %1"", LIB_EScenarioFrameworkMarkerCustom.TOWN);
				break;
			
			case EMapDescriptorType.MDT_NAME_SETTLEMENT:
				markerComp.SetMapMarkerIcon(LIB_EScenarioFrameworkMarkerCustom.TOWN);
				PrintFormat(""MDT_NAME_SETTLEMENT: %1"", LIB_EScenarioFrameworkMarkerCustom.TOWN);
				break;
		}
		
		markerComp.SetMapMarkerColor(LIB_EScenarioFrameworkMarkerCustomColor.BLUFOR);
		markerComp.SetMapMarkerText(owner.GetName());
		markerComp.CreateMapMarker();
		
		return slotMarker;
	}
	
	// {C72F956E4AC6A6E7}Prefabs/ScenarioFramework/Components/Area.et
	void CreateObjArea(IEntity owner)
	{
		//IEntity Area = GetGame().SpawnEntityPrefab(""{C72F956E4AC6A6E7}Prefabs/ScenarioFramework/Components/Area.et"", false);
		//SCR_ScenarioFrameworkArea AreaComp = SCR_ScenarioFrameworkArea.Cast(Area.FindComponent(SCR_ScenarioFrameworkArea));
		//Area.SetOrigin(owner.GetOrigin());
		
		
	}
};
"
bvpiR0iW,View CSV files in the Shell,metalx1000,Bash,Wednesday 26th of June 2024 11:10:56 AM CDT,"wget -qO- ""https://randomuser.me/api/?nat=us&results=100&format=csv""  > users.csv

cat users.csv

#no line wrap and searchable
less -S users.csv

#better spacing
column -t -s, users.csv   #looks messy because of line wrapping
column -t -s, users.csv|less -S

#if using delimiters other then comas
sed 's/,/|/g' users.csv > users2.csv
column -t -s\| users2.csv|less -S

#using vim/neovim
vim <(column -t -s, users.csv)

# might give you more options
sudo apt-get install csvtool
csvtool readable users.csv
csvtool readable users.csv|less -S
csvtool readable users.csv|view     #vi read only
vim <(csvtool readable users.csv)

#and of course visidata
sudo apt install visidata
visidata users.csv
"
Sp47hPKH,Prim,OnuSike,C++,Wednesday 26th of June 2024 10:54:09 AM CDT,"#include <iostream>
#include <fstream>
#define inf 2000000000

using namespace std;

ifstream fin(""prim.in"");
ofstream fout(""prim.out"");

int n,a[101][101],s,w[101];
bool v[101];

void prim(int x)
{
    int i,j,k,minn,iminn,jminn;
    v[x]=true;
    for (k=1; k<=n-1; k++)
    {
        minn=inf;
        for (i=1; i<=n; i++)
            if (v[i]==true)
                for (j=1; j<=n; j++)
                    if (v[j]==false && a[i][j]!=0 && a[i][j]<minn)
                    {
                        minn=a[i][j];
                        iminn=j;
                        jminn=i;
                    }
        s+=minn;
        v[iminn]=true;
        w[iminn]=jminn;
    }
    return;
}

int main()
{
    int m,i,j,c;
    fin >> n >> m;
    for (; m>=1; m--)
    {
        fin >> i >> j >> c;
        a[i][j]=a[j][i]=c;
    }
    prim(1);
    fout << s << ""\n"";
    for (i=1; i<=n; i++)
        fout << w[i] << ' ';
    return 0;
}
"
TjCNTzMm,Kruskal,OnuSike,C++,Wednesday 26th of June 2024 10:53:35 AM CDT,"#include <iostream>
#include <fstream>
using namespace std;
ifstream in(""kruskal.in"");
ofstream out(""kruskal.out"");
int n,m;

struct muchii{
int i,j,cost;
}v[4951],alese[101];

int kruskal ()
{
    int comcon[101],i,x,y,suma=0,k=0,j;
    for (i=1;i<=n;i++)
    comcon[i]=i;
    for (i=1;i<=m;i++)
        if (comcon[v[i].i]!=comcon[v[i].j])
    {
        x=comcon[v[i].i];
        y=comcon[v[i].j];
        for (j=1;j<=n;j++)
            if (comcon[j]==y)
            comcon[j]=x;
        suma=suma+v[i].cost;
        k++;
        alese[k]=v[i];
        if (k==n-1)
            return suma;
    }
    return -1;

}
int main()
{
  int x,i;
  in>>n>>m;
  for (i=1;i<=m;i++)
      in>>v[i].i>>v[i].j>>v[i].cost;
do{
    x=0;
    for (i=1;i<m;i++)
        if (v[i].cost>v[i+1].cost)
    {
        swap (v[i],v[i+1]);
        x=1;
    }

}while (x==1);
out<<kruskal();
out<<endl;
for (i=1;i<n;i++)
{
    out<<alese[i].i<<' '<<alese[i].j;
    out<<endl;
}
    return 0;
}"
sdZVS2wi,podivnost s interpolaci,max2201111,Python,Wednesday 26th of June 2024 10:37:42 AM CDT,"import numpy as np
import matplotlib.pyplot as plt
from skimage.transform import resize

# Matice A
A = np.array([
    [0, 255],
    [255,100],
])

# Funkce pro vytvo≈ôen√≠ obr√°zku z dat
def create_image(data, column_min_vals, column_max_vals):
    num_rows, num_columns = len(data), len(data[0])
    image = np.zeros((num_rows, num_columns + 1, 3), dtype=np.uint8)
    for i in range(num_rows):
        for j in range(num_columns):
            pixel_value = int(np.interp(data[i][j], [column_min_vals[j], column_max_vals[j]], [0, 255]))
            image[i, j] = np.array([pixel_value] * 3)
    return image

# Min a max hodnoty sloupc≈Ø
column_min_vals = np.min(A, axis=0)
column_max_vals = np.max(A, axis=0)

# Vytvo≈ôen√≠ obr√°zku
image = create_image(A, column_min_vals, column_max_vals)

# Roz≈°√≠≈ôen√≠ obr√°zku na pevnou velikost pro lep≈°√≠ vizualizaci
image_resized = resize(image, (100, 100, 3), anti_aliasing=True)

# Zobrazen√≠ obr√°zku
plt.imshow(image_resized)
plt.title(""Generated Image from Matrix A"")
plt.axis(""off"")
plt.show()
"
G97zaqq7,Set user,RaymondVDB,SQL,Wednesday 26th of June 2024 10:17:30 AM CDT,"UPDATE users
SET role = 'User'
WHERE email = 'email';"
S8cxnupD,Untitled,Mochinov,JSON,Wednesday 26th of June 2024 09:59:51 AM CDT,"{
  ""id"": ""evt_1PVwcnR8QWoDuPnP0eRk39Wn"", // Substituting data for top up
  ""object"": ""event"",
  ""account"": ""acct_1PNvJIR8QWoDuPnP"",
  ""api_version"": ""2024-04-10"",
  ""created"": 1719411304,
  ""data"": {
    ""object"": {
      ""id"": ""cs_test_a1uS9U7mL0zDhvwzkx6k7YhmITcD9dQUVp1gkQsMSE4hITV5tzQ7aR4Z9L"",
      ""object"": ""checkout.session"",
      ""after_expiration"": null,
      ""allow_promotion_codes"": false,
      ""amount_subtotal"": 10000,
      ""amount_total"": 10000,
      ""automatic_tax"": {
        ""enabled"": false,
        ""liability"": null,
        ""status"": null
      },
      ""billing_address_collection"": ""auto"",
      ""cancel_url"": ""https://stripe.com"",
      ""client_reference_id"": null,
      ""client_secret"": null,
      ""consent"": null,
      ""consent_collection"": null,
      ""created"": 1719411286,
      ""currency"": ""usd"",
      ""currency_conversion"": null,
      ""custom_fields"": [
      ],
      ""custom_text"": {
        ""after_submit"": null,
        ""shipping_address"": null,
        ""submit"": null,
        ""terms_of_service_acceptance"": null
      },
      ""customer"": null,
      ""customer_creation"": ""if_required"",
      ""customer_details"": {
        ""address"": {
          ""city"": null,
          ""country"": ""SM"",
          ""line1"": null,
          ""line2"": null,
          ""postal_code"": null,
          ""state"": null
        },
        ""email"": ""asdf@asdf.asdf"",
        ""name"": ""sdfgsdfg sdfgsdfg"",
        ""phone"": null,
        ""tax_exempt"": ""none"",
        ""tax_ids"": [
        ]
      },
      ""customer_email"": null,
      ""expires_at"": 1719497685,
      ""invoice"": null,
      ""invoice_creation"": {
        ""enabled"": false,
        ""invoice_data"": {
          ""account_tax_ids"": null,
          ""custom_fields"": null,
          ""description"": null,
          ""footer"": null,
          ""issuer"": null,
          ""metadata"": {
          },
          ""rendering_options"": null
        }
      },
      ""livemode"": false,
      ""locale"": ""auto"",
      ""metadata"": {
        ""x_forwarded_for"": ""93.191.78.242"",
        ""type_operation"": ""add money"", 
        ""payment_request_uuid"": ""4b36f226-8155-448c-837a-acc8de558254"", // Substituting data for top up
        ""company_id"": ""5ca4dc7a-ff1b-49b6-bfaf-5fa694a6b38f"", // Substituting data for top up
        ""currency"": ""USD"", // Substituting data for top up
        ""company_stripe_account"": ""acct_1PNvJIR8QWoDuPnP"", // Substituting data for top up
        ""environment_uuid"": ""4b36f226-8155-448c-837a-acc8de558254"", // Substituting data for top up
        ""wallet_uuid"": ""4cf8390f-e2f4-4976-9ba8-e98ca66cabfa"", // Substituting data for top up
        ""user_uuid"": ""37b475cb-15a9-40fa-b707-41ea4f375f6e"", // Substituting data for top up
        ""stripe_product_id"": ""prod_QEODzAVIfQngs7"", // Substituting data for top up
        ""x_test_mode_switch"": ""off"", // Substituting data for top up
        ""amount"": ""10000"", // Substituting data for top up
        ""interaction_method"": ""web""
      },
      ""mode"": ""payment"",
      ""payment_intent"": ""pi_3PVwclR8QWoDuPnP2nPzBhBY"",
      ""payment_link"": ""plink_1PVwcSR8QWoDuPnPVySPFpY5"",
      ""payment_method_collection"": ""if_required"",
      ""payment_method_configuration_details"": {
        ""id"": ""pmc_1PNvJKR8QWoDuPnP6JjN55u5"",
        ""parent"": ""pmc_1PETxMJM4u3ZwjCHUF05NADx""
      },
      ""payment_method_options"": {
        ""card"": {
          ""request_three_d_secure"": ""automatic""
        }
      },
      ""payment_method_types"": [
        ""card"",
        ""link""
      ],
      ""payment_status"": ""paid"",
      ""phone_number_collection"": {
        ""enabled"": false
      },
      ""recovered_from"": null,
      ""saved_payment_method_options"": null,
      ""setup_intent"": null,
      ""shipping_address_collection"": null,
      ""shipping_cost"": null,
      ""shipping_details"": null,
      ""shipping_options"": [
      ],
      ""status"": ""complete"",
      ""submit_type"": ""auto"",
      ""subscription"": null,
      ""success_url"": ""https://stripe.com"",
      ""total_details"": {
        ""amount_discount"": 0,
        ""amount_shipping"": 0,
        ""amount_tax"": 0
      },
      ""ui_mode"": ""hosted"",
      ""url"": null
    }
  },
  ""livemode"": false,
  ""pending_webhooks"": 2,
  ""request"": {
    ""id"": null,
    ""idempotency_key"": null
  },
  ""type"": ""checkout.session.completed""
}"
Tg9hQkM7,Friend List and Maintenance,mladrad,Python,Wednesday 26th of June 2024 09:54:32 AM CDT,"names_lst = input().split("", "")
black_counter = 0
losted_names = 0
while True:
    command = input().split()
    if command[0] == ""Report"":
        break
    elif command[0] == ""Blacklist"":
        name = command[1]
        for i in range(len(names_lst)):
            if names_lst[i] == name:
                print(f""{name} was blacklisted."")
                names_lst[i] = ""Blacklisted""
                black_counter += 1
        if black_counter == 0:
            print(f""{name} was not found."")

    elif command[0] == ""Error"":
        index = command[1]
        if int(index) in range(len(names_lst)):
            if names_lst[int(index)] != ""Blacklisted"" and names_lst[int(index)] != ""Lost"":
                print(f""{names_lst[int(index)]} was lost due to an error."")
                names_lst[int(index)] = ""Lost""
                losted_names += 1

    elif command[0] == ""Change"":
        index = command[1]
        new_name = command[2]
        if int(index) in range(len(names_lst)):
            name = names_lst[int(index)]
            names_lst[int(index)] = new_name
            print(f""{name} changed his username to {new_name}."")

print(f""Blacklisted names: {black_counter}"")
print(f""Lost names: {losted_names}"")
print(' '.join(names_lst))
"
2REpE9Xw,The Angry Cat,mladrad,Python,Wednesday 26th of June 2024 09:53:00 AM CDT,"items_list = list(map(int, input().split("", "")))
entry_point = int(input())
type_of_items = input()
left_list = []
right_list = []
result = 0
position = ''
if entry_point in range(len(items_list)):
    for left in range(0, entry_point):
        left_list.append(items_list[left])
    for right in range(entry_point + 1, len(items_list)):
        right_list.append(items_list[right])

    if type_of_items == ""cheap"":
        if min(left_list) <= min(right_list):
            res = [i for i in left_list if i < items_list[entry_point]]
            result = sum(res)
            # result = min(left_list)
            position = ""Left""
        else:
            res = [i for i in right_list if i < items_list[entry_point]]
            result = sum(res)
            # result = min(right_list)
            position = ""Right""
    elif type_of_items == ""expensive"":
        if max(left_list) > max(right_list):
            res = [i for i in left_list if i >= items_list[entry_point]]
            result = sum(res)
            # result = sum(left_list)
            position = ""Left""
        else:
            res = [i for i in right_list if i >= items_list[entry_point]]
            result = sum(res)
            position = ""Right""

print(f""{position} - {result}"")
"
CUHw5scP,Remote Control,Ewgeniy,Lua,Wednesday 26th of June 2024 09:43:50 AM CDT,"local component = require(""component"")
local internet = require(""internet"")
local robot = require(""robot"")
local serial = require(""serialization"")

-- –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–∞–Ω–Ω—ã–µ –¥–ª—è Telegram
print(""–í–≤–µ–¥–∏—Ç–µ —Ç–æ–∫–µ–Ω –≤–∞—à–µ–≥–æ Telegram –±–æ—Ç–∞:"")
local botToken = io.read()
print(""–í–≤–µ–¥–∏—Ç–µ Chat ID –≤–∞—à–µ–≥–æ Telegram —á–∞—Ç–∞:"")
local chatID = io.read()

-- –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è URL
local function urlencode(str)
    if (str) then
        str = string.gsub(str, ""\n"", ""\r\n"")
        str = string.gsub(str, ""([^%w ])"", function(c) return string.format(""%%%02X"", string.byte(c)) end)
        str = string.gsub(str, "" "", ""+"")
    end
    return str    
end

-- –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ Telegram
local function sendTelegramMessage(chatID, text)
    local url = ""https://api.telegram.org/bot"" .. botToken .. ""/sendMessage?chat_id="" .. chatID .. ""&text="" .. urlencode(text)
    
    local result, reason = internet.request(url)
    if result then
        local response = """"
        for chunk in result do
            response = response .. chunk
        end
        print(""–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram:"", text)
    else
        print(""–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram:"", reason)
    end
end

-- –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –æ—Ç Telegram
local function getTelegramUpdates(offset)
    local url = ""https://api.telegram.org/bot"" .. botToken .. ""/getUpdates?timeout=60""
    if offset then
        url = url .. ""&offset="" .. offset
    end
    local result, reason = internet.request(url)
    if result then
        local response = """"
        for chunk in result do
            response = response .. chunk
        end
        return serial.unserialize(response)
    else
        print(""–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –æ—Ç Telegram:"", reason)
        return nil
    end
end

-- –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥ –æ—Ç Telegram
local function processCommand(command)
    if command == ""/forward"" then
        robot.forward()
    elseif command == ""/back"" then
        robot.back()
    elseif command == ""/turnleft"" then
        robot.turnLeft()
    elseif command == ""/turnright"" then
        robot.turnRight()
    elseif command == ""/up"" then
        robot.up()
    elseif command == ""/down"" then
        robot.down()
    else
        sendTelegramMessage(chatID, ""–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: "" .. command)
    end
end

-- –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –ø—Ä–æ–≥—Ä–∞–º–º—ã –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥ –æ—Ç Telegram
local offset = nil
while true do
    local updates = getTelegramUpdates(offset)
    if updates and updates.result then
        for i, update in ipairs(updates.result) do
            if update.message and update.message.text and tostring(update.message.chat.id) == chatID then
                processCommand(update.message.text)
                offset = update.update_id + 1
            end
        end
    end
    os.sleep(1)
end
"
af4RFnBW,3d-editor.lua,crococrystal,Lua,Wednesday 26th of June 2024 09:43:26 AM CDT,"local component = require(""component"")
local fs = require(""filesystem"")
local shell = require(""shell"")
local term = require(""term"")
local serialization = require(""serialization"")

local function setTextColor(color)
    term.gpu().setForeground(color)
end

local function resetTextColor()
    term.gpu().setForeground(0xFFFFFF)
end

local function clearScreen()
    term.clear()
end

local function listModels()
    local models = {}
    for file in fs.list(""/home/3d/"") do
        if file:match(""%.3d$"") then
            local filePath = ""/home/3d/"" .. file
            local fileContent = io.open(filePath, ""r"")
            if fileContent then
                local content = fileContent:read(""*a"")
                fileContent:close()
                local model = serialization.unserialize(content)
                if model and model.label then
                    table.insert(models, {label = model.label, file = filePath})
                end
            end
        end
    end
    table.sort(models, function(a, b) return a.label < b.label end)
    return models
end

local function parseColorCodes(text)
    local colorCodes = {
        [""¬ß0""] = 0x000000, [""¬ß1""] = 0x0000AA, [""¬ß2""] = 0x00AA00, [""¬ß3""] = 0x00AAAA,
        [""¬ß4""] = 0xAA0000, [""¬ß5""] = 0xAA00AA, [""¬ß6""] = 0xFFAA00, [""¬ß7""] = 0xAAAAAA,
        [""¬ß8""] = 0x555555, [""¬ß9""] = 0x5555FF, [""¬ßa""] = 0x55FF55, [""¬ßb""] = 0x55FFFF,
        [""¬ßc""] = 0xFF5555, [""¬ßd""] = 0xFF55FF, [""¬ße""] = 0xFFFF55, [""¬ßf""] = 0xFFFFFF
    }

    local textWithoutCodes = text:gsub(""¬ß."", """")
    local coloredTextParts = {}
    local lastColor = 0xFFFFFF

    for code, subText in text:gmatch(""(¬ß.)([^¬ß]*)"") do
        if colorCodes[code] then
            lastColor = colorCodes[code]
        end
        table.insert(coloredTextParts, {color = lastColor, text = subText})
    end

    if #coloredTextParts == 0 then
        table.insert(coloredTextParts, {color = lastColor, text = textWithoutCodes})
    end

    return textWithoutCodes, coloredTextParts
end

local function selectModel(models)
    clearScreen()
    setTextColor(0xFF00FF)  -- –Ø—Ä–∫–æ —Ñ–∏–æ–ª–µ—Ç–æ–≤—ã–π —Ü–≤–µ—Ç
    print(""–î–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥–µ–ª–∏:"")
    resetTextColor()
    print()
    for i, model in ipairs(models) do
        setTextColor(0xFFFFFF)  -- –ë–µ–ª—ã–π —Ü–≤–µ—Ç –¥–ª—è –Ω–æ–º–µ—Ä–æ–≤
        io.write(i .. "". "")
        resetTextColor()
        local _, parts = parseColorCodes(model.label)
        for _, part in ipairs(parts) do
            setTextColor(part.color)
            io.write(part.text)
        end
        setTextColor(0xAAAAAA)  -- –°–µ—Ä—ã–π —Ü–≤–µ—Ç –¥–ª—è –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
        print("" - "" .. model.file:match(""/home/(.+)$""))
        resetTextColor()
    end
    print()
    print()
    setTextColor(0xAAAAAA)  -- –°–µ—Ä—ã–π —Ü–≤–µ—Ç
    print(""–í–≤–µ–¥–∏—Ç–µ Enter —á—Ç–æ–±—ã –≤—ã–π—Ç–∏ –∏–∑ –ø—Ä–æ–≥—Ä–∞–º–º—ã"")
    resetTextColor()
    print()
    setTextColor(0xFFFF00)  -- –ñ–µ–ª—Ç—ã–π —Ü–≤–µ—Ç
    print(""–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä –º–æ–¥–µ–ª–∏:"")
    resetTextColor()
    local choice = tonumber(term.read())
    if choice and choice >= 1 and choice <= #models then
        return models[choice]
    elseif choice == nil then
        return ""exit""
    else
        return nil
    end
end

local function displaySelectedModel(modelName)
    clearScreen()
    setTextColor(0xFF00FF)  -- –Ø—Ä–∫–æ —Ñ–∏–æ–ª–µ—Ç–æ–≤—ã–π —Ü–≤–µ—Ç
    print(""–í—ã–±—Ä–∞–Ω–Ω–∞—è –º–æ–¥–µ–ª—å: \"""" .. modelName .. ""\"""")
    resetTextColor()
    print()
    print(""0. –í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥—É—é –º–æ–¥–µ–ª—å"")
    print(""1. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–µ–∫—Å—Ç—É—Ä—É"")
    print(""2. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ü–≤–µ—Ç —Ç–µ–∫—Å—Ç—É—Ä—ã"")
    print(""3. –ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ"")
    print(""4. –ò–∑–º–µ–Ω–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ"")
    print(""5. –ü–æ–≤–µ—Ä–Ω—É—Ç—å –ø–æ –≤–µ—Ä—Ç–∏–∫–∞–ª–∏"")
    print(""6. –ü–æ–≤–µ—Ä–Ω—É—Ç—å –ø–æ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª–∏"")
    print(""7. –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö"")
    setTextColor(0xFFFF00)  -- –ñ–µ–ª—Ç—ã–π —Ü–≤–µ—Ç
    print(""8. –ù–∞—á–∞—Ç—å –ø–µ—á–∞—Ç—å –º–æ–¥–µ–ª–∏"")
    resetTextColor()
    print()
    setTextColor(0xAAAAAA)  -- –°–µ—Ä—ã–π —Ü–≤–µ—Ç
    print(""–í–≤–µ–¥–∏—Ç–µ Enter —á—Ç–æ–±—ã –≤—ã–π—Ç–∏ –∏–∑ –ø—Ä–æ–≥—Ä–∞–º–º—ã"")
    resetTextColor()
end

local function readTexture()
    setTextColor(0xFFFF00)
    print(""–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç—É—Ä—ã –ø–æ–ª—É—á–µ–Ω–Ω—É—é —Å –ø–æ–º–æ—â—å—é \""–ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞ —Ç–µ–∫—Å—Ç—É—Ä\"""")
    resetTextColor()
    local texture = term.read():gsub(""\n"", """")
    if texture == """" then
        return nil
    else
        return texture
    end
end

local function readColorMode()
    setTextColor(0xFFFF00)
    print(""–†–µ–∂–∏–º –≤—ã–±–æ—Ä–∞ —Ü–≤–µ—Ç–∞:"")
    setTextColor(0xFFFFFF)
    print(""1. –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ —Ü–≤–µ—Ç–∞ –∏–∑ —Ñ–∞–π–ª–∞ –º–æ–¥–µ–ª–∏"")
    print(""2. –û—á–∏—Å—Ç–∏—Ç—å —Ü–≤–µ—Ç–∞ –º–æ–¥–µ–ª–∏"")
    print(""3. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å HEX —Ü–≤–µ—Ç"")
    resetTextColor()
    local choice = tonumber(term.read())
    if choice and (choice == 1 or choice == 2 or choice == 3) then
        return choice
    else
        print(""–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä"")
        return nil
    end
end

local function readColor()
    setTextColor(0xFFFF00)
    print(""–í–≤–µ–¥–∏—Ç–µ —Ü–≤–µ—Ç —Ç–µ–∫—Å—Ç—É—Ä—ã:"")
    print()
    setTextColor(0xAAAAAA)  -- –°–µ—Ä—ã–π —Ü–≤–µ—Ç
    print(""–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ü–≤–µ—Ç–∞ –±–µ–∑ #. –ù–∞–ø—Ä–∏–º–µ—Ä \""E23737\"""")
    print(""–ù–∞–∂–º–∏—Ç–µ Enter —á—Ç–æ–±—ã –≤—ã–π—Ç–∏ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π"")
    resetTextColor()
    local color = term.read():gsub(""\n"", """")
    if color == """" then
        return nil
    else
        return tonumber(color, 16)
    end
end

local function readRotation(prompt)
    setTextColor(0xFFFF00)
    print(prompt)
    resetTextColor()
    local rotation = tonumber(term.read())
    if rotation == 0 or rotation == 90 or rotation == 180 or rotation == 270 or rotation == 360 then
        return rotation
    else
        print(""–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä"")
        return nil
    end
end

local function transformShape(shape, vertical, horizontal, texture, colorMode, color)
    local x1, y1, z1, x2, y2, z2 = shape[1], shape[2], shape[3], shape[4], shape[5], shape[6]

    -- Vertical rotation
    if vertical == 90 then
        y1, z1 = z1, 16 - y1
        y2, z2 = z2, 16 - y2
    elseif vertical == 180 then
        y1, z1 = 16 - y1, 16 - z1
        y2, z2 = 16 - y2, 16 - z2
    elseif vertical == 270 then
        y1, z1 = 16 - z1, y1
        y2, z2 = 16 - z2, y2
    elseif vertical == 360 then
        -- No change for 360 degrees as it is same as 0 degrees
    end

    -- Horizontal rotation
    if horizontal == 90 then
        x1, z1 = z1, 16 - x1
        x2, z2 = z2, 16 - x2
    elseif horizontal == 180 then
        x1, z1 = 16 - x1, 16 - z1
        x2, z2 = 16 - x2, 16 - z2
    elseif horizontal == 270 then
        x1, z1 = 16 - z1, x1
        x2, z2 = 16 - z2, x2
    elseif horizontal == 360 then
        -- No change for 360 degrees as it is same as 0 degrees
    end

    if texture then
        shape.texture = texture
    end

    if colorMode == 2 then
        shape.tint = nil
    elseif colorMode == 3 and color then
        shape.tint = color
    end

    return {x1, y1, z1, x2, y2, z2, texture = shape.texture, tint = shape.tint, state = shape.state}
end

local function modifyModel(model, texture, colorMode, color, vertical, horizontal)
    for i, shape in ipairs(model.shapes) do
        model.shapes[i] = transformShape(shape, vertical, horizontal, texture, colorMode, color)
    end
    return model
end

local function displayMenu(model, texture, colorMode, color, vertical, horizontal)
    clearScreen()
    local label = model.label or ""–ë–µ–∑ –∏–º–µ–Ω–∏""
    local _, parts = parseColorCodes(label)
    setTextColor(0xFFFFFF)
    io.write(""–í—ã–±—Ä–∞–Ω–Ω–∞—è –º–æ–¥–µ–ª—å: \"""")
    for _, part in ipairs(parts) do
        setTextColor(part.color)
        io.write(part.text)
    end
    setTextColor(0xFFFFFF)
    print(""\"""")
    resetTextColor()
    print()
    setTextColor(0xFFFFFF)
    print(""0. –í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥—É—é –º–æ–¥–µ–ª—å"")
    print(""1. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–µ–∫—Å—Ç—É—Ä—É"")
    print(""2. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ü–≤–µ—Ç —Ç–µ–∫—Å—Ç—É—Ä—ã"")
    print(""3. –ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ"")
    print(""4. –ò–∑–º–µ–Ω–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ"")
    print(""5. –ü–æ–≤–µ—Ä–Ω—É—Ç—å –ø–æ –≤–µ—Ä—Ç–∏–∫–∞–ª–∏"")
    print(""6. –ü–æ–≤–µ—Ä–Ω—É—Ç—å –ø–æ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª–∏"")
    print(""7. –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö"")
    setTextColor(0xFFFF00)  -- –ñ–µ–ª—Ç—ã–π —Ü–≤–µ—Ç
    print(""8. –ù–∞—á–∞—Ç—å –ø–µ—á–∞—Ç—å –º–æ–¥–µ–ª–∏"")
    resetTextColor()
    print()
    setTextColor(0xAAAAAA)  -- –°–µ—Ä—ã–π —Ü–≤–µ—Ç
    print(""–í–≤–µ–¥–∏—Ç–µ Enter —á—Ç–æ–±—ã –≤—ã–π—Ç–∏ –∏–∑ –ø—Ä–æ–≥—Ä–∞–º–º—ã"")
    resetTextColor()
end

local function changeLabel(model)
    while true do
        clearScreen()
        setTextColor(0xFFFF00)
        print(""–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏:"")
        resetTextColor()
        print()
        setTextColor(0xFFFFFF)
        print(""–ú–∞–∫—Å–∏–º—É–º 30 —Å–∏–º–≤–æ–ª–æ–≤ —Å —É—á–µ—Ç–æ–º —Ü–≤–µ—Ç–æ–≤—ã—Ö –∫–æ–¥–æ–≤"")
        print(""–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ü–≤–µ—Ç–æ–≤—ã–µ –∫–æ–¥—ã —Å –ø–æ–º–æ—â—å—é &"")
        resetTextColor()
        print()
        setTextColor(0xAAAAAA)
        print(""–ù–∞–∂–º–∏—Ç–µ Enter —á—Ç–æ–±—ã –≤—ã–π—Ç–∏ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π"")
        resetTextColor()
        print()

        local newLabel = term.read():gsub(""\n"", """")
        if newLabel == """" then
            return model.label
        else
            -- –ü–æ–¥—Å—á–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å–∏–º–≤–æ–ª–æ–≤ –±–µ–∑ —É—á–µ—Ç–∞ —Ü–≤–µ—Ç–æ–≤—ã—Ö –∫–æ–¥–æ–≤
            local textOnly = newLabel:gsub(""&."", """")  -- –£–¥–∞–ª–µ–Ω–∏–µ —Ü–≤–µ—Ç–æ–≤—ã—Ö –∫–æ–¥–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–ª–∏–Ω—ã
            if #textOnly > 30 then
                setTextColor(0xFF6363)  -- –ö—Ä–∞—Å–Ω—ã–π —Ü–≤–µ—Ç
                print(""–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∏–º–≤–æ–ª–æ–≤, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞"")
                resetTextColor()
                os.sleep(2)  -- –ó–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è
            else
                newLabel = newLabel:gsub(""&"", ""¬ß"")
                model.label = newLabel
                setTextColor(0x66FF63)  -- –ó–µ–ª–µ–Ω—ã–π —Ü–≤–µ—Ç
                print(""–ù–∞–∑–≤–∞–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ!"")
                resetTextColor()
                os.sleep(2)  -- –ó–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è
                return model.label
            end
        end
    end
end

local function changeTooltip(model)
    clearScreen()
    setTextColor(0xFFFF00)
    print(""–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏:"")
    resetTextColor()
    local newTooltip = term.read():gsub(""\n"", """")
    if newTooltip == """" then
        return model.tooltip
    else
        -- –ó–∞–º–µ–Ω—è–µ–º & –Ω–∞ ¬ß –¥–ª—è —Ü–≤–µ—Ç–æ–≤—ã—Ö –∫–æ–¥–æ–≤
        newTooltip = newTooltip:gsub(""&"", ""¬ß"")
        -- –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–µ—Ä–µ–Ω–æ—Å —Å—Ç—Ä–æ–∫–∏ —Å —É–∫–∞–∑–∞–Ω–∏–µ–º —Ü–≤–µ—Ç–∞
        newTooltip = newTooltip:gsub(""#¬ß"", ""\n¬ß"")
        -- –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø—Ä–æ—Å—Ç–æ –ø–µ—Ä–µ–Ω–æ—Å —Å—Ç—Ä–æ–∫–∏
        newTooltip = newTooltip:gsub(""#"", ""\n"")
        model.tooltip = newTooltip
    end
    return model.tooltip
end

local function displayInfo(model, texture, colorMode, color, vertical, horizontal)
    clearScreen()
    local label = model.label or ""–û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ""
    local tooltip = model.tooltip or ""–û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ""
    local _, labelParts = parseColorCodes(label)
    local tooltipLines = {}
    for line in tooltip:gmatch(""[^\n]+"") do
        table.insert(tooltipLines, line)
    end
    setTextColor(0xFFFFFF)
    io.write(""–ù–∞–∑–≤–∞–Ω–∏–µ: \"""")
    for _, part in ipairs(labelParts) do
        setTextColor(part.color)
        io.write(part.text)
    end
    setTextColor(0xFFFFFF)
    print(""\"""")
    print()
    print(""–û–ø–∏—Å–∞–Ω–∏–µ:"")
    for _, line in ipairs(tooltipLines) do
        local _, parts = parseColorCodes(line)
        for _, part in ipairs(parts) do
            setTextColor(part.color)
            io.write(part.text)
        end
        print()  -- –ü–µ—Ä–µ–Ω–æ—Å —Å—Ç—Ä–æ–∫–∏
    end
    print()
    setTextColor(0xFFFFFF)
    print(""–¢–µ–∫—Å—Ç—É—Ä–∞: "" .. (texture or ""–û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–∞—è""))
    if colorMode == 1 then
        print(""–¶–≤–µ—Ç: –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π"")
    elseif colorMode == 2 then
        print(""–¶–≤–µ—Ç: –¶–≤–µ—Ç–∞ —É–¥–∞–ª–µ–Ω—ã"")
    elseif colorMode == 3 then
        print(""–¶–≤–µ—Ç: "" .. string.format(""#%06X"", color))
    end
    print(""–ü–æ–≤–æ—Ä–æ—Ç –ø–æ –≤–µ—Ä—Ç–∏–∫–∞–ª–∏: "" .. vertical)
    print(""–ü–æ–≤–æ—Ä–æ—Ç –ø–æ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª–∏: "" .. horizontal)
    print()
    setTextColor(0xAAAAAA)  -- –°–µ—Ä—ã–π —Ü–≤–µ—Ç
    print(""–ù–∞–∂–º–∏—Ç–µ Enter —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"")
    resetTextColor()
    term.read()
end

local function main()
    local models = listModels()
    if #models == 0 then
        print(""–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π –≤ —Ñ–æ—Ä–º–∞—Ç–µ .3d"")
        return
    end

    local modelChoice = selectModel(models)
    if modelChoice == ""exit"" then
        return
    elseif not modelChoice then
        return
    end

    local modelName = modelChoice.label
    local modelPath = modelChoice.file
    local file = io.open(modelPath, ""r"")
    if not file then
        print(""–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å —Ñ–∞–π–ª –º–æ–¥–µ–ª–∏"")
        return
    end
    local modelData = file:read(""*a"")
    file:close()

    local model = serialization.unserialize(modelData)
    if model == nil then
        print(""–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–æ–¥–µ–ª–∏"")
        return
    end

    local texture = nil
    local colorMode = 1
    local color = nil
    local vertical = 0
    local horizontal = 0

    while true do
        displayMenu(model, texture, colorMode, color, vertical, horizontal)
        local choice = tonumber(term.read())
        if choice == nil then
            return
        elseif choice == 0 then
            modelChoice = selectModel(models)
            if modelChoice == ""exit"" then
                return
            elseif not modelChoice then
                return
            end
            modelName = modelChoice.label
            modelPath = modelChoice.file
            file = io.open(modelPath, ""r"")
            if not file then
                print(""–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å —Ñ–∞–π–ª –º–æ–¥–µ–ª–∏"")
                return
            end
            modelData = file:read(""*a"")
            file:close()
            model = serialization.unserialize(modelData)
            if model == nil then
                print(""–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–æ–¥–µ–ª–∏"")
                return
            end
            texture = nil
            colorMode = 1
            color = nil
            vertical = 0
            horizontal = 0
        elseif choice == 1 then
            texture = readTexture()
        elseif choice == 2 then
            colorMode = readColorMode()
            if colorMode == 3 then
                color = readColor()
            end
        elseif choice == 3 then
            model.label = changeLabel(model)
        elseif choice == 4 then
            model.tooltip = changeTooltip(model)
        elseif choice == 5 then
            vertical = readRotation(""–í–≤–µ–¥–∏—Ç–µ –≥—Ä–∞–¥—É—Å –ø–æ–≤–æ—Ä–æ—Ç–∞ –ø–æ –í–µ—Ä—Ç–∏–∫–∞–ª–∏ (0, 90, 180, 270, 360):"")
            if vertical == nil then
                vertical = 0
            end
        elseif choice == 6 then
            horizontal = readRotation(""–í–≤–µ–¥–∏—Ç–µ –≥—Ä–∞–¥—É—Å –ø–æ–≤–æ—Ä–æ—Ç–∞ –ø–æ –ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª–∏ (0, 90, 180, 270, 360):"")
            if horizontal == nil then
                horizontal = 0
            end
        elseif choice == 7 then
            displayInfo(model, texture, colorMode, color, vertical, horizontal)
        elseif choice == 8 then
            local newModel = modifyModel(model, texture, colorMode, color, vertical, horizontal)
            fs.makeDirectory(""/home/modified-3d"")
            local newModelPath = ""/home/modified-3d/modified_"" .. fs.name(modelPath)
            file = io.open(newModelPath, ""w"")
            if not file then
                print(""–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —Ñ–∞–π–ª –º–æ–¥–µ–ª–∏"")
                return
            end
            file:write(serialization.serialize(newModel))
            file:close()
            setTextColor(0x00FF00)
            print(""–ú–æ–¥–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –º–æ–¥–µ–ª—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –∫–∞–∫: "" .. newModelPath)
            resetTextColor()
            print(""–ó–∞–ø—É—Å–∫ –ø–µ—á–∞—Ç–∏..."")
            os.execute(""/home/3d/3d.lua "" .. newModelPath)
            break
        else
            print(""–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä"")
        end
    end
end

main()"
WEXgPH8c,Working_with_properties,SaNik74,C#,Wednesday 26th of June 2024 09:42:25 AM CDT,"namespace Working_with_properties
{
    internal class Program
    {
        static void Main(string[] args)
        {
            Player davide = new Player(3, 2);
            Drawer drawer = new Drawer();

            drawer.PutPlayerOnMap(davide);
        }
    }

    class Player
    {
        public Player(int positionX, int positionY, char playerSymbol = '@')
        {
            PositionX = positionX;
            PositionY = positionY;
            PlayerSymbol = playerSymbol;    
        }

        public int PositionX { get; private set; }
        public int PositionY { get; private set; }
        public char PlayerSymbol { get; private set; }
    }

    class Drawer
    {
        public void PutPlayerOnMap(Player playerName)
        {
            Console.SetCursorPosition(playerName.PositionX, playerName.PositionY);
            Console.Write(playerName.PlayerSymbol);
        }
    }
}
"
xcJbcm4B,schemaOne,Ninbo,JSON,Wednesday 26th of June 2024 09:19:11 AM CDT,"# A book has a title and an author
type Book {
  title: String
  author: Author
}

# An author has a name and a list of books
type Author {
  name: String
  books: [Book]
}

# A publisher has identification
type Publisher {
  name: String
  ISBN: String
}"
Xx81ZfdQ,display image fractal like range(5),max2201111,Python,Wednesday 26th of June 2024 09:15:51 AM CDT,"import numpy as np
import matplotlib.pyplot as plt
import tensorflow as tf
from tqdm.notebook import tqdm_notebook
from IPython.display import display, Javascript
from google.colab import files
import os
import shutil
import ast
from sklearn.metrics import confusion_matrix, accuracy_score, precision_score, recall_score, f1_score
import seaborn as sns
from skimage.transform import resize
import sys

display(Javascript('IPython.OutputArea.auto_scroll_threshold = 9999;'))

label_colors = {0: [0, 128, 0], 1: [255, 0, 0]}
label_colors_testing = {0: [0, 128, 0], 1: [255, 0, 0]}

%matplotlib inline

def create_image(data, predictions, label_colors, column_min_vals, column_max_vals):
    num_rows, num_columns = len(data), len(data[0])
    image = np.zeros((num_rows, num_columns + 1, 3), dtype=np.uint8)
    for i in range(num_rows):
        for j in range(num_columns):
            pixel_value = int(np.interp(data[i][j], [column_min_vals[j], column_max_vals[j]], [0, 255]))
            image[i, j] = np.array([pixel_value] * 3)
        image[i, -1] = label_colors[predictions[i]]
    return image

def create_imageN(data, predictions, label_colors, column_min_vals, column_max_vals):
    num_training_rows = len(data)
    num_columns = len(data[0])
    image_training = np.zeros((num_training_rows, num_columns + 1, 3), dtype=np.uint8)
    for i in range(num_training_rows):
        for j in range(num_columns):
            pixel_value = int(np.interp(data[i][j], [column_min_vals[j], column_max_vals[j]], [0, 255]))
            image_training[i, j] = np.array([pixel_value] * 3)
        image_training[i, -1] = label_colors[int(predictions[i])]
    return image_training

def create_cnn_model(input_shape):
    model = tf.keras.Sequential([
        tf.keras.layers.InputLayer(input_shape=input_shape),
        tf.keras.layers.Conv2D(filters=32, kernel_size=(3, 3), activation='relu'),
        tf.keras.layers.MaxPooling2D(pool_size=(2, 2)),
        tf.keras.layers.Dropout(0.25),
        tf.keras.layers.Flatten(),
        tf.keras.layers.Dense(64, activation='relu', kernel_regularizer=tf.keras.regularizers.l2(0.001)),
        tf.keras.layers.Dropout(0.5),
        tf.keras.layers.Dense(1, activation='sigmoid')
    ])
    model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])
    return model

new_persons_results = [
    [0.030391238492519845, 0.23021081913032299, 0.4743575198860915, 0.639395348276238],
    [0.19790381537769108, 0.37639843860181527, 0.5676528538456297, 0.716530820399044],
    [0.0035245462826666075, 0.23127629815305784, 0.4802171123709532, 0.6591272725083992],
    [0.059230621364548486, 0.24424510845680134, 0.442553808602372, 0.6891856336835676],
    [0.05536813173866345, 0.2538888869331579, 0.47861285542743165, 0.6200559751500355],
    [0.1300359168058454, 0.38443677757577344, 0.5957238735056223, 0.795823160451845],
    [0.1743368240338569, 0.3713129035302336, 0.5640350202165867, 0.7213527928848786],
    [0.09173335232875372, 0.2559096689549753, 0.49527436563146954, 0.6970388573439903],
    [0.015235204378572087, 0.2284904031445293, 0.46613902406934005, 0.6917336579549159],
    [0.0011416656054787145, 0.24567669307188245, 0.4388400949432476, 0.667323193441009],
    [0.11776711, 0.17521301, 0.5074825,  0.8509191 ],
    [0.12314088, 0.27565651, 0.52214202, 0.77386896],
]

uploaded = files.upload()
for filename in uploaded.keys():
    original_path = f""/content/{filename}""
    destination_path = os.path.join(""/content/"", ""/content/DATA2"")
    shutil.move(original_path, destination_path)
    print(f""Soubor {filename} byl p≈ôesunut do {destination_path}"")

file_path = '/content/DATA2'
with open(file_path, 'r') as file:
    code = file.read()

A_list = ast.literal_eval(code)
A = np.array(A_list)

labels = [results[-1] for results in A]
data = [results[:-1] for results in A]

num_training_rows = 50
num_testing_rows = 50
X_train, X_test, y_train, y_test = data[:num_training_rows], data[num_training_rows:num_training_rows+num_testing_rows], labels[:num_training_rows], labels[num_training_rows:num_training_rows+num_testing_rows]
X_train, X_test, y_train, y_test = data[:num_training_rows], data[:num_testing_rows], labels[:num_training_rows], labels[:num_testing_rows]

mean_values = np.mean(X_train, axis=0)
std_values = np.std(X_train, axis=0)
X_train_normalized = (X_train - mean_values) / std_values
X_test_normalized = (X_test - mean_values) / std_values

column_min_vals = np.min(X_train_normalized, axis=0)
column_max_vals = np.max(X_train_normalized, axis=0)

# Verify normalization
print(""Mean of X_train_normalized (should be close to 0):"", np.mean(X_train_normalized, axis=0))
print(""Std of X_train_normalized (should be close to 1):"", np.std(X_train_normalized, axis=0))

dnn_model = tf.keras.Sequential([
    tf.keras.layers.Dense(128, activation='relu', input_shape=(len(X_train[0]),)),
    tf.keras.layers.BatchNormalization(),
    tf.keras.layers.Dropout(0.2),  # Sn√≠≈æen√≠ dropout rate
    tf.keras.layers.Dense(64, activation='relu'),
    tf.keras.layers.BatchNormalization(),
    tf.keras.layers.Dropout(0.2),
    tf.keras.layers.Dense(32, activation='relu'),
    tf.keras.layers.BatchNormalization(),
    tf.keras.layers.Dropout(0.2),
    tf.keras.layers.Dense(16, activation='relu'),
    tf.keras.layers.BatchNormalization(),
    tf.keras.layers.Dropout(0.2),
    tf.keras.layers.Dense(1, activation='sigmoid')
])
dnn_model.compile(optimizer=tf.keras.optimizers.Adam(learning_rate=0.001), loss='binary_crossentropy', metrics=['accuracy'])

# Generov√°n√≠ dummy p≈ôedpovƒõd√≠ pro tr√©ninkov√° data
train_predictions = [0] * len(X_train_normalized)  # Dummy p≈ôedpovƒõdi pro tr√©ninkov√© obr√°zky

# Generov√°n√≠ skuteƒçn√Ωch p≈ôedpovƒõd√≠ pro testovac√≠ data
test_predictions = (dnn_model.predict(X_test_normalized) > 0.5).astype(int).flatten()

# Generov√°n√≠ obr√°zk≈Ø z normalizovan√Ωch dat
image_training = create_imageN(X_train_normalized, y_train, label_colors, column_min_vals, column_max_vals)
image_testing = create_image(X_test_normalized, test_predictions, label_colors_testing, column_min_vals, column_max_vals)

# Ovƒõ≈ôen√≠ poƒçtu vygenerovan√Ωch obr√°zk≈Ø
print(""Poƒçet tr√©ninkov√Ωch obr√°zk≈Ø:"", len(image_training))
print(""Poƒçet testovac√≠ch obr√°zk≈Ø:"", len(image_testing))
assert len(image_training) == 50, ""Poƒçet tr√©ninkov√Ωch obr√°zk≈Ø by mƒõl b√Ωt 50.""
assert len(image_testing) == len(X_test_normalized), ""Poƒçet testovac√≠ch obr√°zk≈Ø by mƒõl odpov√≠dat poƒçtu testovac√≠ch vzork≈Ø.""

# Zmƒõna velikosti obr√°zk≈Ø na pevnou velikost pro vstup do CNN
image_training_resized = [resize(img[:, :-1], (100, 100, 3)) for img in image_training]
image_testing_resized = [resize(img[:, :-1], (100, 100, 3)) for img in image_testing]

# Ovƒõ≈ôen√≠ zmƒõny velikosti obr√°zk≈Ø
print(""Tvar prvn√≠ho tr√©ninkov√©ho obr√°zku po zmƒõnƒõ velikosti:"", image_training_resized[0].shape)
print(""Tvar prvn√≠ho testovac√≠ho obr√°zku po zmƒõnƒõ velikosti:"", image_testing_resized[0].shape)

# P≈ôevod obr√°zk≈Ø do form√°tu numpy pole
X_train_cnn = np.array(image_training_resized)
X_test_cnn = np.array(image_testing_resized)

# Ovƒõ≈ôen√≠ tvaru pol√≠
print(""Tvar X_train_cnn:"", X_train_cnn.shape)
print(""Tvar X_test_cnn:"", X_test_cnn.shape)
assert X_train_cnn.shape == (50, 100, 100, 3), ""Tvar X_train_cnn by mƒõl b√Ωt (50, 100, 100, 3).""

# Funkce pro zobrazen√≠ obr√°zku
def display_image(image, title=""Image""):
    plt.imshow(image)
    plt.title(title)
    plt.axis('off')
    plt.show()

# Zobrazen√≠ nƒõkolika tr√©ninkov√Ωch obr√°zk≈Ø
for i in range(5):
    display_image(X_train_cnn[i], title=f""Tr√©ninkov√Ω obr√°zek {i+1}"")

# Tr√©nov√°n√≠ modelu DNN
dnn_accuracy_history = []
epochs = 500  # Reduced to 500 for quicker convergence

for epoch in tqdm_notebook(range(epochs)):
    history_dnn = dnn_model.fit(X_train_normalized, np.array(y_train), epochs=1, verbose=0, shuffle=False)
    dnn_accuracy_history.append(history_dnn.history['accuracy'][0])

    if epoch == 1:
        y_pred_after_2nd_epoch_dnn = dnn_model.predict(X_test_normalized)
        y_pred_binary_after_2nd_epoch_dnn = [1 if pred >= 0.5 else 0 for pred in y_pred_after_2nd_epoch_dnn]
        image_testing_before_2nd_epoch_dnn = create_image(X_test_normalized, y_pred_binary_after_2nd_epoch_dnn, label_colors_testing, column_min_vals, column_max_vals)

    if epoch >= epochs-1:
        print(f""HERE HERE Epoch: {epoch}, Epochs: {epochs}\n"")
        sys.stdout.flush()

        # Iterate through new persons
        for idx, personNEW_results in enumerate(new_persons_results, start=1):
            assert len(personNEW_results) == len(X_train[0]), ""Mismatch in the number of features.""
            personNEW_results_normalized = (np.array(personNEW_results) - mean_values) / std_values
            personNEW_prediction_dnn = dnn_model.predict(np.array([personNEW_results_normalized]))
            personNEW_label_dnn = 1 if personNEW_prediction_dnn >= 0.5 else 0
            y_pred_after_50_epochs_dnn = dnn_model.predict(X_test_normalized)
            y_pred_binary_after_50_epochs_dnn = [1 if pred >= 0.5 else 0 for pred in y_pred_after_50_epochs_dnn]
            image_testing_after_50_epochs_dnn = create_image(X_test_normalized, y_pred_binary_after_50_epochs_dnn, label_colors_testing, column_min_vals, column_max_vals)
            image_personNEW_dnn = create_imageN([personNEW_results_normalized], [personNEW_label_dnn], label_colors, column_min_vals, column_max_vals)
            plt.figure(figsize=(5, 5))
            plt.imshow(image_personNEW_dnn)
            plt.title(f""New Person {idx} - DNN\nLabel: {personNEW_label_dnn}, Prediction: {personNEW_prediction_dnn}"")
            plt.axis(""off"")
            plt.show()

# CNN Model
cnn_model = tf.keras.Sequential([
    tf.keras.layers.InputLayer(input_shape=(100, 100, 3)),
    tf.keras.layers.Conv2D(filters=32, kernel_size=(3, 3), activation='relu'),
    tf.keras.layers.MaxPooling2D(pool_size=(2, 2)),
    tf.keras.layers.Dropout(0.25),
    tf.keras.layers.Flatten(),
    tf.keras.layers.Dense(64, activation='relu', kernel_regularizer=tf.keras.regularizers.l2(0.001)),
    tf.keras.layers.Dropout(0.5),
    tf.keras.layers.Dense(1, activation='sigmoid')
])
cnn_model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])

# Training CNN Model
cnn_accuracy_history = []

for epoch in tqdm_notebook(range(epochs)):
    history_cnn = cnn_model.fit(X_train_cnn, np.array(y_train), epochs=1, verbose=0, shuffle=False)
    cnn_accuracy_history.append(history_cnn.history['accuracy'][0])

    if epoch == 1:
        y_pred_after_2nd_epoch_cnn = cnn_model.predict(X_test_cnn)
        y_pred_binary_after_2nd_epoch_cnn = [1 if pred >= 0.5 else 0 for pred in y_pred_after_2nd_epoch_cnn]
        image_testing_before_2nd_epoch_cnn = create_image(X_test_normalized, y_pred_binary_after_2nd_epoch_cnn, label_colors_testing, column_min_vals, column_max_vals)

    if epoch >= epochs-1:
        print(f""HERE HERE Epoch: {epoch}, Epochs: {epochs}\n"")
        sys.stdout.flush()

        # Iterate through new persons
        for idx, personNEW_results in enumerate(new_persons_results, start=1):
            assert len(personNEW_results) == len(X_train[0]), ""Mismatch in the number of features.""
            personNEW_results_normalized = (np.array(personNEW_results) - mean_values) / std_values
            image_personNEW = create_imageN([personNEW_results_normalized], [0], label_colors, column_min_vals, column_max_vals)
            image_personNEW_resized = resize(image_personNEW[:, :-1], (100, 100, 3))
            personNEW_prediction_cnn = cnn_model.predict(np.array([image_personNEW_resized]))
            personNEW_label_cnn = 1 if personNEW_prediction_cnn >= 0.5 else 0
            y_pred_after_50_epochs_cnn = cnn_model.predict(X_test_cnn)
            y_pred_binary_after_50_epochs_cnn = [1 if pred >= 0.5 else 0 for pred in y_pred_after_50_epochs_cnn]
            image_testing_after_50_epochs_cnn = create_image(X_test_normalized, y_pred_binary_after_50_epochs_cnn, label_colors_testing, column_min_vals, column_max_vals)
            image_personNEW_cnn = create_imageN([personNEW_results_normalized], [personNEW_label_cnn], label_colors, column_min_vals, column_max_vals)
            plt.figure(figsize=(5, 5))
            plt.imshow(image_personNEW_cnn)
            plt.title(f""New Person {idx} - CNN\nLabel: {personNEW_label_cnn}, Prediction: {personNEW_prediction_cnn}"")
            plt.axis(""off"")
            plt.show()

# Display the images
plt.figure(figsize=(25, 15))
plt.subplot(2, 2, 1)
plt.imshow(image_training)
plt.title(""Training Data"")
plt.axis(""off"")

plt.subplot(2, 2, 2)
plt.imshow(image_testing_before_2nd_epoch_dnn)
plt.title(""Testing Data (2nd Epoch) - DNN"")
plt.axis(""off"")

plt.subplot(2, 2, 3)
plt.imshow(image_testing_after_50_epochs_dnn)
plt.title(f""Testing Data ({epochs} Epochs) - DNN"")
plt.axis(""off"")

plt.subplot(2, 2, 4)
plt.imshow(image_personNEW_dnn)
plt.title(f""New Person - DNN\nLabel: {personNEW_label_dnn},[{personNEW_prediction_dnn}]"")
plt.axis(""off"")

plt.figure(figsize=(12, 5))
plt.plot(range(1, epochs + 1), dnn_accuracy_history, marker='o')
plt.title('DNN Accuracy Over Epochs')
plt.xlabel('Epochs')
plt.ylabel('Accuracy')
plt.grid()

plt.figure(figsize=(25, 15))
plt.subplot(2, 2, 1)
plt.imshow(image_training)
plt.title(""Training Data"")
plt.axis(""off"")

plt.subplot(2, 2, 2)
plt.imshow(image_testing_before_2nd_epoch_cnn)
plt.title(""Testing Data (2nd Epoch) - CNN"")
plt.axis(""off"")

plt.subplot(2, 2, 3)
plt.imshow(image_testing_after_50_epochs_cnn)
plt.title(f""Testing Data ({epochs} Epochs) - CNN"")
plt.axis(""off"")

plt.subplot(2, 2, 4)
plt.imshow(image_personNEW_cnn)
plt.title(f""New Person - CNN\nLabel: {personNEW_label_cnn},[{personNEW_prediction_cnn}]"")
plt.axis(""off"")

plt.figure(figsize=(12, 5))
plt.plot(range(1, epochs + 1), cnn_accuracy_history, marker='o')
plt.title('CNN Accuracy Over Epochs')
plt.xlabel('Epochs')
plt.ylabel('Accuracy')
plt.grid()

# Confusion Matrix and Performance Metrics for DNN
dnn_predictions = (dnn_model.predict(X_test_normalized) > 0.5).astype(int)
dnn_conf_matrix = confusion_matrix(y_test, dnn_predictions)
print(f""Confusion Matrix for DNN:\n{dnn_conf_matrix}"")
dnn_accuracy = accuracy_score(y_test, dnn_predictions)
dnn_precision = precision_score(y_test, dnn_predictions)
dnn_recall = recall_score(y_test, dnn_predictions)
dnn_f1 = f1_score(y_test, dnn_predictions)
print(f""DNN Accuracy: {dnn_accuracy:.4f}"")
print(f""DNN Precision: {dnn_precision:.4f}"")
print(f""DNN Recall: {dnn_recall:.4f}"")
print(f""DNN F1 Score: {dnn_f1:.4f}"")

# Confusion Matrix and Performance Metrics for CNN
cnn_predictions = (cnn_model.predict(X_test_cnn) > 0.5).astype(int)
print(""PP:"",X_test_cnn)
cnn_conf_matrix = confusion_matrix(y_test, cnn_predictions)
print(f""Confusion Matrix for CNN:\n{cnn_conf_matrix}"")
cnn_accuracy = accuracy_score(y_test, cnn_predictions)
cnn_precision = precision_score(y_test, cnn_predictions)
cnn_recall = recall_score(y_test, cnn_predictions)
cnn_f1 = f1_score(y_test, cnn_predictions)
print(f""CNN Accuracy: {cnn_accuracy:.4f}"")
print(f""CNN Precision: {cnn_precision:.4f}"")
print(f""CNN Recall: {cnn_recall:.4f}"")
print(f""CNN F1 Score: {cnn_f1:.4f}"")

# Display confusion matrices
plt.figure(figsize=(12, 5))

plt.subplot(1, 2, 1)
sns.heatmap(dnn_conf_matrix, annot=True, fmt='d', cmap='Blues')
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.title('DNN Confusion Matrix')

plt.subplot(1, 2, 2)
sns.heatmap(cnn_conf_matrix, annot=True, fmt='d', cmap='Blues')
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.title('CNN Confusion Matrix')

plt.show()

# Optimalizace nov√©ho vektoru pro predikci co nejbl√≠≈æe 0.52
target_prediction = 0.52
input_shape = 4
new_vector = np.random.randn(input_shape)
new_vector = tf.Variable(new_vector, dtype=tf.float32)

optimizer = tf.optimizers.Adam(learning_rate=0.1)

def loss_function():
    prediction = dnn_model(tf.reshape(new_vector, (1, -1)))
    return tf.abs(prediction - target_prediction)

# Gradientn√≠ sestup
for _ in range(1000):
    optimizer.minimize(loss_function, [new_vector])

# Denormalizace v√Ωsledn√©ho vektoru
result_vector = new_vector.numpy()
denormalized_vector = result_vector * std_values + mean_values
result_prediction = dnn_model.predict(result_vector.reshape(1, -1))

print(""V√Ωsledn√Ω vektor (normalizovan√Ω):"", result_vector)
print(""V√Ωsledn√Ω vektor (denormalizovan√Ω):"", denormalized_vector)
print(""Predikce v√Ωsledn√©ho vektoru:"", result_prediction)
"
JSiBqzy5,Untitled,dllbridge,C,Wednesday 26th of June 2024 09:06:33 AM CDT,"
#include  <stdio.h>


void foo(int*);   


int    n1,         //  ;lksda;lka';
       n2 =   7,   // iuoyoiuyoiuy
      *p  = &n2; 

////////////////////////////////////////////////////
int main()                                        // 
{
        
    int  n = 40; 

    int *pn = &n;

    foo(&n);
    
    printf("" *p = %d \n"", *p);
}







////////////////////////////////////////////////////
void foo(int *p)                                  // 
{
        
     *p = *p + 5;


}

"
