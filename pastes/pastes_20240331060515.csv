id,title,username,language,date,content
k7z7BsTY,AirBrush,Mlulin,HTML,Sunday 31st of March 2024 12:41:15 AM CDT,"{
  ""versionCode"": 106030300,
  ""versionName"": ""6.3.3"",
  ""Msg"": ""Update Mod is available, to continue in our app please update it.
 
What's new:
- Performance Improvements.
- Bug Fixes.
- New Features introduced.
- Others minor changes.
 
Thanks for using"",
  ""downloadLink"": ""https://t.me/SNxTG""
  }"
HMehQ3Nc,Cheating,Mos_Studio,Lua,Sunday 31st of March 2024 12:00:24 AM CDT,"function Esp()
	pcall(function()
		for i,v in pairs(game.Players:GetChildren()) do
			if v.Name ~= game.Players.LocalPlayer.Name and v.Character and v.Character:FindFirstChild(""HumanoidRootPart"") and v.Character:FindFirstChild(""Humanoid"") then
				if not v.Character.HumanoidRootPart:FindFirstChild(""ESP"") then
					local BillboardGui = Instance.new(""BillboardGui"")
					local TextLabel = Instance.new(""TextLabel"")
					BillboardGui.Parent = v.Character.HumanoidRootPart
					BillboardGui.ZIndexBehavior = Enum.ZIndexBehavior.Sibling
					BillboardGui.Active = true
					BillboardGui.Name = ""ESP""
					BillboardGui.AlwaysOnTop = true
					BillboardGui.LightInfluence = 1.000
					BillboardGui.Size = UDim2.new(0, 150, 0, 10)
					BillboardGui.StudsOffset = Vector3.new(0, 2.5, 0)
					TextLabel.Parent = BillboardGui
					TextLabel.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
					TextLabel.BackgroundTransparency = 1.000
					TextLabel.Size = UDim2.new(1,0,1,0)
					TextLabel.Font = Enum.Font.GothamBold
					TextLabel.Text = v.Name
					TextLabel.TextColor3 = Color3.fromRGB(229, 188, 24)
					TextLabel.TextScaled = true
					TextLabel.TextSize = 14.000
					TextLabel.TextStrokeTransparency = 0.000
					TextLabel.TextWrapped = true
				else v.Character.HumanoidRootPart:FindFirstChild(""ESP"")
					v.Character.HumanoidRootPart:FindFirstChild(""ESP"").Enabled = true
					v.Character.HumanoidRootPart:FindFirstChild(""ESP"").TextLabel.Text = `{v.Name} ({ math.floor((v.Character.HumanoidRootPart.Position-game.Players.LocalPlayer.Character.HumanoidRootPart.Position).Magnitude) }) ({math.floor(v.Character.Humanoid.Health)})`
				end
			end
		end
	end)
end

function Zoom()
	local oldZoom = game.Workspace.CurrentCamera.FieldOfView
	local function createZoom(time, amount)
		local Tween_Info = TweenInfo.new(time, Enum.EasingStyle.Sine, Enum.EasingDirection.InOut) 
		local Tween = game:GetService(""TweenService""):Create(game.Workspace.CurrentCamera, Tween_Info, {FieldOfView = amount})
		return Tween
	end
	game:GetService(""UserInputService"").InputBegan:Connect(function(input)
		if input.KeyCode == Enum.KeyCode.C then
			createZoom(.2, 10):Play()
		elseif input.KeyCode == Enum.KeyCode.X then
			createZoom(.2, 0):Play()
		end
	end)

	game:GetService(""UserInputService"").InputEnded:Connect(function(input)
		if input.KeyCode == Enum.KeyCode.C then
			createZoom(.2, oldZoom):Play()
		elseif input.KeyCode == Enum.KeyCode.X then
			createZoom(.2, oldZoom):Play()
		end
	end)
end

function LoadedUI()
	-- init
	if not game:IsLoaded() then 
		game.Loaded:Wait()
	end

	if not syn or not protectgui then
		getgenv().protectgui = function() end
	end

	local SilentAimSettings = {
		Enabled = false,

		ClassName = ""Universal Silent Aim - Aethiel"",
		ToggleKey = ""RightAlt"",

		TeamCheck = false,
		VisibleCheck = false, 
		TargetPart = ""HumanoidRootPart"",
		SilentAimMethod = ""Raycast"",

		FOVRadius = 130,
		FOVVisible = false,
		ShowSilentAimTarget = false, 

		MouseHitPrediction = false,
		MouseHitPredictionAmount = 0.165,
		HitChance = 100
	}

	-- variables
	getgenv().SilentAimSettings = Settings
	local MainFileName = ""UniversalSilentAim""
	local SelectedFile, FileToSave = """", """"

	local Camera = workspace.CurrentCamera
	local Players = game:GetService(""Players"")
	local RunService = game:GetService(""RunService"")
	local GuiService = game:GetService(""GuiService"")
	local UserInputService = game:GetService(""UserInputService"")
	local HttpService = game:GetService(""HttpService"")

	local LocalPlayer = Players.LocalPlayer
	local Mouse = LocalPlayer:GetMouse()

	local GetChildren = game.GetChildren
	local GetPlayers = Players.GetPlayers
	local WorldToScreen = Camera.WorldToScreenPoint
	local WorldToViewportPoint = Camera.WorldToViewportPoint
	local GetPartsObscuringTarget = Camera.GetPartsObscuringTarget
	local FindFirstChild = game.FindFirstChild
	local RenderStepped = RunService.RenderStepped
	local GuiInset = GuiService.GetGuiInset
	local GetMouseLocation = UserInputService.GetMouseLocation

	local resume = coroutine.resume 
	local create = coroutine.create

	local ValidTargetParts = {""Head"", ""HumanoidRootPart""}
	local PredictionAmount = 0.165

	local mouse_box = Drawing.new(""Square"")
	mouse_box.Visible = true 
	mouse_box.ZIndex = 999 
	mouse_box.Color = Color3.fromRGB(54, 57, 241)
	mouse_box.Thickness = 20 
	mouse_box.Size = Vector2.new(20, 20)
	mouse_box.Filled = true 

	local fov_circle = Drawing.new(""Circle"")
	fov_circle.Thickness = 1
	fov_circle.NumSides = 100
	fov_circle.Radius = 180
	fov_circle.Filled = false
	fov_circle.Visible = false
	fov_circle.ZIndex = 999
	fov_circle.Transparency = 1
	fov_circle.Color = Color3.fromRGB(54, 57, 241)

	local ExpectedArguments = {
		FindPartOnRayWithIgnoreList = {
			ArgCountRequired = 3,
			Args = {
				""Instance"", ""Ray"", ""table"", ""boolean"", ""boolean""
			}
		},
		FindPartOnRayWithWhitelist = {
			ArgCountRequired = 3,
			Args = {
				""Instance"", ""Ray"", ""table"", ""boolean""
			}
		},
		FindPartOnRay = {
			ArgCountRequired = 2,
			Args = {
				""Instance"", ""Ray"", ""Instance"", ""boolean"", ""boolean""
			}
		},
		Raycast = {
			ArgCountRequired = 3,
			Args = {
				""Instance"", ""Vector3"", ""Vector3"", ""RaycastParams""
			}
		}
	}

	function CalculateChance(Percentage)
		-- // Floor the percentage
		Percentage = math.floor(Percentage)

		-- // Get the chance
		local chance = math.floor(Random.new().NextNumber(Random.new(), 0, 1) * 100) / 100

		-- // Return
		return chance <= Percentage / 100
	end


	--[[file handling]] do 
		if not isfolder(MainFileName) then 
			makefolder(MainFileName);
		end

		if not isfolder(string.format(""%s/%s"", MainFileName, tostring(game.PlaceId))) then 
			makefolder(string.format(""%s/%s"", MainFileName, tostring(game.PlaceId)))
		end
	end

	local Files = listfiles(string.format(""%s/%s"", ""UniversalSilentAim"", tostring(game.PlaceId)))

	-- functions
	local function GetFiles() -- credits to the linoria lib for this function, listfiles returns the files full path and its annoying
		local out = {}
		for i = 1, #Files do
			local file = Files[i]
			if file:sub(-4) == '.lua' then
				-- i hate this but it has to be done ...

				local pos = file:find('.lua', 1, true)
				local start = pos

				local char = file:sub(pos, pos)
				while char ~= '/' and char ~= '\\' and char ~= '' do
					pos = pos - 1
					char = file:sub(pos, pos)
				end

				if char == '/' or char == '\\' then
					table.insert(out, file:sub(pos + 1, start - 1))
				end
			end
		end

		return out
	end

	local function UpdateFile(FileName)
		assert(FileName or FileName == ""string"", ""oopsies"");
		writefile(string.format(""%s/%s/%s.lua"", MainFileName, tostring(game.PlaceId), FileName), HttpService:JSONEncode(SilentAimSettings))
	end

	local function LoadFile(FileName)
		assert(FileName or FileName == ""string"", ""oopsies"");

		local File = string.format(""%s/%s/%s.lua"", MainFileName, tostring(game.PlaceId), FileName)
		local ConfigData = HttpService:JSONDecode(readfile(File))
		for Index, Value in next, ConfigData do
			SilentAimSettings[Index] = Value
		end
	end

	local function getPositionOnScreen(Vector)
		local Vec3, OnScreen = WorldToScreen(Camera, Vector)
		return Vector2.new(Vec3.X, Vec3.Y), OnScreen
	end

	local function ValidateArguments(Args, RayMethod)
		local Matches = 0
		if #Args < RayMethod.ArgCountRequired then
			return false
		end
		for Pos, Argument in next, Args do
			if typeof(Argument) == RayMethod.Args[Pos] then
				Matches = Matches + 1
			end
		end
		return Matches >= RayMethod.ArgCountRequired
	end

	local function getDirection(Origin, Position)
		return (Position - Origin).Unit * 1000
	end

	local function getMousePosition()
		return GetMouseLocation(UserInputService)
	end

	local function IsPlayerVisible(Player)
		local PlayerCharacter = Player.Character
		local LocalPlayerCharacter = LocalPlayer.Character

		if not (PlayerCharacter or LocalPlayerCharacter) then return end 

		local PlayerRoot = FindFirstChild(PlayerCharacter, Options.TargetPart.Value) or FindFirstChild(PlayerCharacter, ""HumanoidRootPart"")

		if not PlayerRoot then return end 

		local CastPoints, IgnoreList = {PlayerRoot.Position, LocalPlayerCharacter, PlayerCharacter}, {LocalPlayerCharacter, PlayerCharacter}
		local ObscuringObjects = #GetPartsObscuringTarget(Camera, CastPoints, IgnoreList)

		return ((ObscuringObjects == 0 and true) or (ObscuringObjects > 0 and false))
	end

	local function getClosestPlayer()
		if not Options.TargetPart.Value then return end
		local Closest
		local DistanceToMouse
		for _, Player in next, GetPlayers(Players) do
			if Player == LocalPlayer then continue end
			if Toggles.TeamCheck.Value and Player.Team == LocalPlayer.Team then continue end

			local Character = Player.Character
			if not Character then continue end

			if Toggles.VisibleCheck.Value and not IsPlayerVisible(Player) then continue end

			local HumanoidRootPart = FindFirstChild(Character, ""HumanoidRootPart"")
			local Humanoid = FindFirstChild(Character, ""Humanoid"")
			if not HumanoidRootPart or not Humanoid or Humanoid and Humanoid.Health <= 0 then continue end

			local ScreenPosition, OnScreen = getPositionOnScreen(HumanoidRootPart.Position)
			if not OnScreen then continue end

			local Distance = (getMousePosition() - ScreenPosition).Magnitude
			if Distance <= (DistanceToMouse or Options.Radius.Value or 2000) then
				Closest = ((Options.TargetPart.Value == ""Random"" and Character[ValidTargetParts[math.random(1, #ValidTargetParts)]]) or Character[Options.TargetPart.Value])
				DistanceToMouse = Distance
			end
		end
		return Closest
	end

	-- ui creating & handling
	local Library = loadstring(game:HttpGet(""https://raw.githubusercontent.com/violin-suzutsuki/LinoriaLib/main/Library.lua""))()

	local Window = Library:CreateWindow(""Universal Silent Aim, by Averiias, xaxa, and Stefanuk12"")
	local GeneralTab = Window:AddTab(""General"")
	local MainBOX = GeneralTab:AddLeftTabbox(""Main"") do
		local Main = MainBOX:AddTab(""Main"")

		Main:AddToggle(""aim_Enabled"", {Text = ""Enabled""}):AddKeyPicker(""aim_Enabled_KeyPicker"", {Default = ""RightAlt"", SyncToggleState = true, Mode = ""Toggle"", Text = ""Enabled"", NoUI = false});
		Options.aim_Enabled_KeyPicker:OnClick(function()
			SilentAimSettings.Enabled = not SilentAimSettings.Enabled

			Toggles.aim_Enabled.Value = SilentAimSettings.Enabled
			Toggles.aim_Enabled:SetValue(SilentAimSettings.Enabled)

			mouse_box.Visible = SilentAimSettings.Enabled
		end)

		Main:AddToggle(""TeamCheck"", {Text = ""Team Check"", Default = SilentAimSettings.TeamCheck}):OnChanged(function()
			SilentAimSettings.TeamCheck = Toggles.TeamCheck.Value
		end)
		Main:AddToggle(""VisibleCheck"", {Text = ""Visible Check"", Default = SilentAimSettings.VisibleCheck}):OnChanged(function()
			SilentAimSettings.VisibleCheck = Toggles.VisibleCheck.Value
		end)
		Main:AddDropdown(""TargetPart"", {AllowNull = true, Text = ""Target Part"", Default = SilentAimSettings.TargetPart, Values = {""Head"", ""HumanoidRootPart"", ""Random""}}):OnChanged(function()
			SilentAimSettings.TargetPart = Options.TargetPart.Value
		end)
		Main:AddDropdown(""Method"", {AllowNull = true, Text = ""Silent Aim Method"", Default = SilentAimSettings.SilentAimMethod, Values = {
			""Raycast"",""FindPartOnRay"",
			""FindPartOnRayWithWhitelist"",
			""FindPartOnRayWithIgnoreList"",
			""Mouse.Hit/Target""
		}}):OnChanged(function() 
			SilentAimSettings.SilentAimMethod = Options.Method.Value 
		end)
		Main:AddSlider('HitChance', {
			Text = 'Hit chance',
			Default = 100,
			Min = 0,
			Max = 100,
			Rounding = 1,

			Compact = false,
		})
		Options.HitChance:OnChanged(function()
			SilentAimSettings.HitChance = Options.HitChance.Value
		end)
	end

	local MiscellaneousBOX = GeneralTab:AddLeftTabbox(""Miscellaneous"")
	local FieldOfViewBOX = GeneralTab:AddLeftTabbox(""Field Of View"") do
		local Main = FieldOfViewBOX:AddTab(""Visuals"")

		Main:AddToggle(""Visible"", {Text = ""Show FOV Circle""}):AddColorPicker(""Color"", {Default = Color3.fromRGB(54, 57, 241)}):OnChanged(function()
			fov_circle.Visible = Toggles.Visible.Value
			SilentAimSettings.FOVVisible = Toggles.Visible.Value
		end)
		Main:AddSlider(""Radius"", {Text = ""FOV Circle Radius"", Min = 0, Max = 360, Default = 130, Rounding = 0}):OnChanged(function()
			fov_circle.Radius = Options.Radius.Value
			SilentAimSettings.FOVRadius = Options.Radius.Value
		end)
		Main:AddToggle(""MousePosition"", {Text = ""Show Silent Aim Target""}):AddColorPicker(""MouseVisualizeColor"", {Default = Color3.fromRGB(54, 57, 241)}):OnChanged(function()
			mouse_box.Visible = Toggles.MousePosition.Value 
			SilentAimSettings.ShowSilentAimTarget = Toggles.MousePosition.Value 
		end)
		local PredictionTab = MiscellaneousBOX:AddTab(""Prediction"")
		PredictionTab:AddToggle(""Prediction"", {Text = ""Mouse.Hit/Target Prediction""}):OnChanged(function()
			SilentAimSettings.MouseHitPrediction = Toggles.Prediction.Value
		end)
		PredictionTab:AddSlider(""Amount"", {Text = ""Prediction Amount"", Min = 0.165, Max = 1, Default = 0.165, Rounding = 3}):OnChanged(function()
			PredictionAmount = Options.Amount.Value
			SilentAimSettings.MouseHitPredictionAmount = Options.Amount.Value
		end)
	end

	local CreateConfigurationBOX = GeneralTab:AddRightTabbox(""Create Configuration"") do 
		local Main = CreateConfigurationBOX:AddTab(""Create Configuration"")

		Main:AddInput(""CreateConfigTextBox"", {Default = """", Numeric = false, Finished = false, Text = ""Create Configuration to Create"", Tooltip = ""Creates a configuration file containing settings you can save and load"", Placeholder = ""File Name here""}):OnChanged(function()
			if Options.CreateConfigTextBox.Value and string.len(Options.CreateConfigTextBox.Value) ~= """" then 
				FileToSave = Options.CreateConfigTextBox.Value
			end
		end)

		Main:AddButton(""Create Configuration File"", function()
			if FileToSave ~= """" or FileToSave ~= nil then 
				UpdateFile(FileToSave)
			end
		end)
	end

	local SaveConfigurationBOX = GeneralTab:AddRightTabbox(""Save Configuration"") do 
		local Main = SaveConfigurationBOX:AddTab(""Save Configuration"")
		Main:AddDropdown(""SaveConfigurationDropdown"", {AllowNull = true, Values = GetFiles(), Text = ""Choose Configuration to Save""})
		Main:AddButton(""Save Configuration"", function()
			if Options.SaveConfigurationDropdown.Value then 
				UpdateFile(Options.SaveConfigurationDropdown.Value)
			end
		end)
	end

	local LoadConfigurationBOX = GeneralTab:AddRightTabbox(""Load Configuration"") do 
		local Main = LoadConfigurationBOX:AddTab(""Load Configuration"")

		Main:AddDropdown(""LoadConfigurationDropdown"", {AllowNull = true, Values = GetFiles(), Text = ""Choose Configuration to Load""})
		Main:AddButton(""Load Configuration"", function()
			if table.find(GetFiles(), Options.LoadConfigurationDropdown.Value) then
				LoadFile(Options.LoadConfigurationDropdown.Value)

				Toggles.TeamCheck:SetValue(SilentAimSettings.TeamCheck)
				Toggles.VisibleCheck:SetValue(SilentAimSettings.VisibleCheck)
				Options.TargetPart:SetValue(SilentAimSettings.TargetPart)
				Options.Method:SetValue(SilentAimSettings.SilentAimMethod)
				Toggles.Visible:SetValue(SilentAimSettings.FOVVisible)
				Options.Radius:SetValue(SilentAimSettings.FOVRadius)
				Toggles.MousePosition:SetValue(SilentAimSettings.ShowSilentAimTarget)
				Toggles.Prediction:SetValue(SilentAimSettings.MouseHitPrediction)
				Options.Amount:SetValue(SilentAimSettings.MouseHitPredictionAmount)
				Options.HitChance:SetValue(SilentAimSettings.HitChance)
			end
		end)
	end

	resume(create(function()
		RenderStepped:Connect(function()
			
			coroutine.wrap(Esp)()
			
			if Toggles.MousePosition.Value and Toggles.aim_Enabled.Value then
				if getClosestPlayer() then 
					local Root = getClosestPlayer().Parent.PrimaryPart or getClosestPlayer()
					local RootToViewportPoint, IsOnScreen = WorldToViewportPoint(Camera, Root.Position);
					-- using PrimaryPart instead because if your Target Part is ""Random"" it will flicker the square between the Target's Head and HumanoidRootPart (its annoying)

					mouse_box.Visible = IsOnScreen
					mouse_box.Position = Vector2.new(RootToViewportPoint.X, RootToViewportPoint.Y)
				else 
					mouse_box.Visible = false 
					mouse_box.Position = Vector2.new()
				end
			end

			if Toggles.Visible.Value then 
				fov_circle.Visible = Toggles.Visible.Value
				fov_circle.Color = Options.Color.Value
				fov_circle.Position = getMousePosition()
			end
		end)
	end))

	-- hooks
	local oldNamecall
	oldNamecall = hookmetamethod(game, ""__namecall"", newcclosure(function(...)
		local Method = getnamecallmethod()
		local Arguments = {...}
		local self = Arguments[1]
		local chance = CalculateChance(SilentAimSettings.HitChance)
		if Toggles.aim_Enabled.Value and self == workspace and not checkcaller() and chance == true then
			if Method == ""FindPartOnRayWithIgnoreList"" and Options.Method.Value == Method then
				if ValidateArguments(Arguments, ExpectedArguments.FindPartOnRayWithIgnoreList) then
					local A_Ray = Arguments[2]

					local HitPart = getClosestPlayer()
					if HitPart then
						local Origin = A_Ray.Origin
						local Direction = getDirection(Origin, HitPart.Position)
						Arguments[2] = Ray.new(Origin, Direction)

						return oldNamecall(unpack(Arguments))
					end
				end
			elseif Method == ""FindPartOnRayWithWhitelist"" and Options.Method.Value == Method then
				if ValidateArguments(Arguments, ExpectedArguments.FindPartOnRayWithWhitelist) then
					local A_Ray = Arguments[2]

					local HitPart = getClosestPlayer()
					if HitPart then
						local Origin = A_Ray.Origin
						local Direction = getDirection(Origin, HitPart.Position)
						Arguments[2] = Ray.new(Origin, Direction)

						return oldNamecall(unpack(Arguments))
					end
				end
			elseif (Method == ""FindPartOnRay"" or Method == ""findPartOnRay"") and Options.Method.Value:lower() == Method:lower() then
				if ValidateArguments(Arguments, ExpectedArguments.FindPartOnRay) then
					local A_Ray = Arguments[2]

					local HitPart = getClosestPlayer()
					if HitPart then
						local Origin = A_Ray.Origin
						local Direction = getDirection(Origin, HitPart.Position)
						Arguments[2] = Ray.new(Origin, Direction)

						return oldNamecall(unpack(Arguments))
					end
				end
			elseif Method == ""Raycast"" and Options.Method.Value == Method then
				if ValidateArguments(Arguments, ExpectedArguments.Raycast) then
					local A_Origin = Arguments[2]

					local HitPart = getClosestPlayer()
					if HitPart then
						Arguments[3] = getDirection(A_Origin, HitPart.Position)

						return oldNamecall(unpack(Arguments))
					end
				end
			end
		end
		return oldNamecall(...)
	end))

	local oldIndex = nil 
	oldIndex = hookmetamethod(game, ""__index"", newcclosure(function(self, Index)
		if self == Mouse and not checkcaller() and Toggles.aim_Enabled.Value and Options.Method.Value == ""Mouse.Hit/Target"" and getClosestPlayer() then
			local HitPart = getClosestPlayer()

			if Index == ""Target"" or Index == ""target"" then 
				return HitPart
			elseif Index == ""Hit"" or Index == ""hit"" then 
				return ((Toggles.Prediction.Value and (HitPart.CFrame + (HitPart.Velocity * PredictionAmount))) or (not Toggles.Prediction.Value and HitPart.CFrame))
			elseif Index == ""X"" or Index == ""x"" then 
				return self.X 
			elseif Index == ""Y"" or Index == ""y"" then 
				return self.Y 
			elseif Index == ""UnitRay"" then 
				return Ray.new(self.Origin, (self.Hit - self.Origin).Unit)
			end
		end

		return oldIndex(self, Index)
	end))
end


coroutine.wrap(Zoom)()
coroutine.wrap(LoadedUI)()"
g3NqYht8,back.,zackboy989xx,Lua,Saturday 30th of March 2024 11:02:29 PM CDT,"local ReplicatedStorage = game:GetService(""ReplicatedStorage"")
local StatsService = game:GetService(""Stats"")
local RunService = game:GetService(""RunService"")

local StartDecompile = tick()
local DecompSys = {}
local Connection

DecompSys.MainContainer = Instance.new(""Model"")
DecompSys.MainContainer.Name = ""MM2Decomp""

--Available Services
DecompSys.Services = {
	""ReplicatedStorage"",
	""ReplicatedFirst"",
	""Workspace"",
	""Players"",
	""Lighting"",
	""StarterCharacter""
	""StarterGui"",
	""StarterPack"",
	""Chat""
	""ServerScriptService""
}

DecompSys.ModelCreator = function()
	--[[
		We should start with a neat and orginised folder 
		including all instances of a game.
	]]
	for Index,Names in ipairs(DecompSys.Services) do
		local FolderInstance = Instance.new(""Folder"")
		FolderInstance.Name = Names
		FolderInstance.Parent = DecompSys.MainContainer
	end

	--Need to create sub-folders for startercharacter
	local FolderInstance = Instance.new(""Folder"")
	FolderInstance.Name = ""StarterCharacterScripts""
	FolderInstance.Parent = DecompSys.MainContainer.StarterCharacter
	--And another one...
	FolderInstance = Instance.new(""Folder"")
	FolderInstance.Name = ""StarterPlayerScripts""
	FolderInstance.Parent = DecompSys.MainContainer.StarterCharacter
end

DecompSys.NewInstance = function(ClassName,Object)
    NewInstance = Instance.new(ClassName)
    NewInstance.Name = Object.Name
    --[[We wont bother to add values to instances, 
	these can lead to errors (eg. remoteevents or remotefunctions)
	]]--
	for Attribute,Value in pairs(Object:GetAttributes()) do
		NewInstance[Attribute] = Value
	end
	if (Object:IsA(""LocalScript"") or Object:IsA(""Script"") or Object:IsA(""ModuleScript"")) then
		DecompSys.DecompileScripts(Object.ClassName,Object)
	end
    return NewInstance
end

DecompSys.GetSyncData = function()
    local AllModules = ReplicatedStorage:WaitForChild(""GetSyncData"",2):InvokeServer()
    assert(AllModules == nil, ""GetSyncData cannot be found or Server didnt respond"")
	for Index,Name in pairs(AllModules) do
		local CurrentServerData = ReplicatedStorage:WaitForChild(""GetSyncData"",2):InvokeServer(Name)
		local ModuleScripts = Instance.new(""ModuleScript"",DecompSys.MainContainer.ServerScriptService)
		Modulescript.Source = CurrentServerData
		Modulescript.Name = Name
	end
end)

DecompSys.DecompileScripts = function(Script)
	local WasDisabled = false
	local TextContainer = nil
	if not (Script.Enabled) then
		Script.Enabled = true
		WasDisabled = true
	end
	TextContainer = Script.Source()
	Script.Enabled = not WasDisabled
	return TextContainer
end

DecompSys.ReportProgress = function(Report)
	print(""[Decompiler] - ""..tostring(Report))
end

DecompSys.Hardlag = function()
	if (Stats.InstanceCount > 100) then
		--We would need to pause the operation temporarily as there is too much instances being rendered in memory
		task.wait(10)
	end
end

DecompSys.DecompileAll = {
	Workspace = function()
		for Index,Object in pairs(game.ReplicatedStorage:GetDecendants()) do
			local NewInstance = DecompSys.NewInstance(Object.ClassName,Object)
			NewInstance.Parent = DecompSys.MainContainer.ReplicatedStorage
		end
	end,
	Players = function()
		--Cannot decompile players :(
		return nil
	end,
	ReplicatedFirst = function()
		for Index,Object in pairs(game.ReplicatedFirst:GetDecendants()) do
			local NewInstance = DecompSys.NewInstance(Object.ClassName,Object)
			NewInstance.Parent = DecompSys.MainContainer.ReplicatedFirst
		end
	end,
	ReplicatedStorage = function()
		for Index,Object in pairs(game.ReplicatedStorage:GetDecendants()) do
			local NewInstance = DecompSys.NewInstance(Object.ClassName,Object)
			NewInstance.Parent = DecompSys.MainContainer.ReplicatedStorage
		end
	end,
	ServerScriptService = function()
		--Cannot decompile Serverscriptservice. We can only decompile client viewed properties
		return nil
	end,
	ServerStorage = function()
		--Again, wish we could but would need to only get client scripts
		return nil
	end,
	StarterGui = function()
		for Index,Object in pairs(game.StarterGui:GetDecendants()) do
			local NewInstance = DecompSys.NewInstance(Object.ClassName,Object)
			NewInstance.Parent = DecompSys.MainContainer.StarterGui
		end
	end, 
	StarterPack = function()
		for Index,Object in pairs(game.StarterPack:GetDecendants()) do
			local NewInstance = DecompSys.NewInstance(Object.ClassName,Object)
			NewInstance.Parent = DecompSys.MainContainer.StarterPack
		end
	end, 
	StarterCharacter = function()
		--This would be different, starterpack and startercharacter are within one parent
		for Index,Object in pairs(game.StarterCharacter.StarterCharacterScripts:GetDecendants()) do
			local NewInstance = DecompSys.NewInstance(Object.ClassName,Object)
			NewInstance.Parent = DecompSys.MainContainer.StarterCharacter.StarterCharacterScripts
		end
		for Index,Object in pairs(game.StarterCharacter.StarterPlayerScripts:GetDecendants()) do
			local NewInstance = DecompSys.NewInstance(Object.ClassName,Object)
			NewInstance.Parent = DecompSys.MainContainer.StarterCharacter.StarterPlayerScripts
		end
	end, 
	Chat = function()
		for Index,Object in pairs(game.Chat:GetDecendants()) do
			local NewInstance = DecompSys.NewInstance(Object.ClassName,Object)
			NewInstance.Parent = DecompSys.MainContainer.Chat
		end
	end, 
}

DecompSys.Run = function()
	task.spawn(function()
		DecompSys.ModelCreator()
		DecompSys.GetSyncData()
		DecompSys.DecompileAll()
	end)
	DecompSys.ReportProgress(""Starting to decompile..."")
	local Connection = RunService.Heartbeat:Connect(DecompSys.Hardlag)
end

local FinishDecompile = tick()
SaveInstance(DecompSys.MainContainer.Name .. '.rbxl', DecompSys.MainContainer)
DecompSys.ReportProgress(""Finished decompiling! Saved in Workspace as ""..tostring(DecompSys.MainContainer.Name).."".rbxl. Took ""..tostring((FinishDecompile - StartDecompile))..""s"")
Connection:Disconnect()"
ph78udyL,unresolved,hpnq,Python,Saturday 30th of March 2024 10:23:21 PM CDT,"from aiogram import Router, F
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.types import FSInputFile, ReplyKeyboardMarkup, KeyboardButton, Message, CallbackQuery, ReplyKeyboardRemove, InlineKeyboardButton
from aiogram.fsm.state import State, StatesGroup
from datetime import datetime
from keyboards.simple_row import make_row_keyboard
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.filters.callback_data import CallbackData
from aiogram.types.inline_keyboard_markup import InlineKeyboardMarkup
from datetime import datetime
from handlers.register import next_reg
from aiogram.utils.media_group import MediaGroupBuilder
from aiogram.methods.send_media_group import SendMediaGroup
import json

# from register import next_reg # menu
class MyCallback(CallbackData, prefix = ""mycb""):
    day: int
    foo : str

task_today = {
    1:[1, 2],
    2:[3]
}
router = Router()
class UserState(StatesGroup):
    user_reg = State()
class UserSolving(StatesGroup):
    user_solving = State()
class UserState(StatesGroup):
    user_reg = State()

@router.message(UserState.user_reg, F.text.lower() == ""домой"")
async def task0(message:Message):
    await message.answer(
        text=""Вы дома!"",
        reply_markup=make_row_keyboard([""Назад""])
    )

@router.message(UserState.user_reg, F.text.lower() == ""задача моего дня"")
async def task_dayly(message: Message, state: FSMContext):
    user_data = await state.get_data()
    print(""DATA: "", user_data[""user""])
    # return
    user_datetime = user_data[""user""][""date""]
    builder = InlineKeyboardBuilder()
    
    # path_q = ""../data_q/img.jpg""
    #----------------------------------------------------------------------------------------------------------
    img_q = FSInputFile(""../data_q/img.png"")
    result = await message.answer_photo(
        photo= img_q,
        caption=""pic cap""
    )
     #----------------------------------------------------------------------------------------------------------
    print(result.photo[-1].file_id)
    # album_builder.add(
    #     type=""photo"",
    #     media= img_q.photo[-1].file_id
    #     # caption=""Подпись к конкретному медиа""
    #
    # )
    if user_datetime == 1:
        for i in task_today[user_datetime]:
            if(i not in user_data[""user""][""solved_task""]):
                builder.add(InlineKeyboardButton(
                    text=""Нажми меня "" + str(i),
                    callback_data=MyCallback(day=i, foo=""days"").pack()
                ))

        await message.answer(
            ""Отлично, ваши задачи на сегодня:"",
            reply_markup=builder.as_markup()
        )

    # await message.answer(
    #     text=""Вы дома!"",
    #     reply_markup=make_row_keyboard([""Назад""])
    # )
task_data = {
    1 : {""header"" : ""header "",
         ""text""   : ""pisikaki text"",
         ""answer"" : ""pipiski"",
         ""load_photo"": """",
         ""load_video"": """"
         },
    2 : {""header"" : ""header2 "",
         ""text""   : ""pisikaki text chileen"",
         ""answer"" : ""chileeen"",
         ""load_photo"": """",
         ""load_video"": """"
         }

}
@router.callback_query(MyCallback.filter(F.foo == ""days""))
async def send_task(callback: CallbackQuery, state : FSMContext, callback_data: MyCallback):
    await callback.message.answer(text=""Вы на задаче №"" + str(callback_data.day))
    # for i in task_data[callback_data.day]:
    #     print(i)
    #ПОФИКСИТЬ НА task_today[callback_data.day]-----------------
    today_quest = task_data[callback_data.day]

    text_quest = today_quest[""header""] + ""\n"" + today_quest[""text""] + ""\nнапиши ответ""
    # image_from_pc = FSInputFile(""../data_q/img.png"")
    if today_quest[""text""] == """":
        media_group = MediaGroupBuilder(
            caption=""text_quest""
        )

        media_group.add_photo(
            media=""https://loremflickr.com/320/240""
        )
        await callback.message.answer_media_group(
            # media=album_builder.build()
            media = media_group.build()
        )

    await callback.message.answer(text=text_quest)

    user_data = await state.get_data()
    x = {""task_n"": callback_data.day}
    user_data[""user""].update(x)

    await state.update_data(user_data)
    await state.set_state(UserSolving.user_solving)
    await callback.answer()


# Решаем конкретную задачу по стейту новому
# Тут проверять ответ
@router.message(UserSolving.user_solving, Command(""cancel""))
async def solving(message:Message,  state : FSMContext):
    user_data = await state.get_data()
    del user_data[""user""][""task_n""]
    print(""HUETA "", user_data)
    await state.set_state(UserState.user_reg)
    await next_reg(message)


@router.message(UserSolving.user_solving)
async def solving(message:Message,  state : FSMContext):
    user_data = await state.get_data()
    print(""1 - CALLBACCK USER DATA: "", user_data, type(user_data[""user""]))

    if(message.text.lower() == task_data[user_data[""user""][""task_n""]][""answer""]):
        kb = [
            [KeyboardButton(text=""Перейти к задачам"")]
        ]
        keyboard = ReplyKeyboardMarkup(keyboard=kb)

        await message.reply(
            ""Поздравляю! Это правильный ответ. Вернуться в меню(/menu)"",
            reply_markup=keyboard
        )
        #user_data[""user""]
        print(""Task_n: "", user_data[""user""][""task_n""])
        # new_u_data = {user_data[""user""][""solving_time""]
        user_data[""user""][""solving_time""].append(str(datetime.now()))
        user_data[""user""][""solved_task""].append(user_data[""user""][""task_n""])
        del user_data[""user""][""task_n""]
        await state.set_state(UserState.user_reg)
        user_data = await state.get_data()
        print(user_data)
        await next_reg(message)
        js_data = json.dumps(user_data[""user""])
        print(""js_data: "", js_data)
    else:
        await message.reply(
            text=""Неверный ответ! Попробуйте снова""
        )

"
wB71YHN2,nbsPlayer.lua,ozozx235,Lua,Saturday 30th of March 2024 10:08:07 PM CDT,"function readBool(bin, i)
	bool = string.byte(bin,i) == 1
	return i+1, bool
end

function readInt(bin, i, prog)
	buffer = 0
	for j=1,prog do
		-- print(buffer)
		buffer = string.byte(bin,i+j-1)*math.pow(16,2*(j-1)) + buffer
	end
	-- print(i.."": Int(""..buffer.."")"")
	return i+prog, buffer
end

function readByte(bin, i, prog)
	for j=1,prog do
		-- print(buffer)
		buffer = buffer .. "" "" .. string.byte(bin,i+j-1)
	end
	return i+prog, buffer
end

function readStr(bin, i)
	i, prog = readInt(bin, i, 4)
	buffer = """"
	-- print(i.."": ""..prog)
	-- print(prog)
	for j=1,prog do
		buffer = buffer .. """" .. string.char(string.byte(bin,i+j-1))
	end
	return i+prog, buffer
end

function skip(bin, i, prog)
	return i+prog
end

function readHeader(bin, i)
	i = skip(bin, i, 2)
	i, ver = readInt(bin, i, 1)
	-- print(""NBS Version: "" .. ver)
	i, vanInst = readInt(bin, i, 1)
	-- print(""Number of Vanilla Instruments: "" .. vanInst)
	i, tikLen = readInt(bin, i, 2)
	-- print(""Length in Ticks: "" .. tikLen)
	i, lyr = readInt(bin, i, 2)
	-- print(""Number of Layers (inaccurate): "" .. lyr)
	-- print(""SNAME"")
	i, sName = readStr(bin, i)
	-- print(""Song Name: "" .. sName)
	-- print(""ANAME"")
	i, authName = readStr(bin, i)
	-- print(""Author: "" .. authName)
	-- print(""OGANAME"")
	i, ogAuthName = readStr(bin, i)
	-- print(""Original Author: "" .. ogAuthName)
	-- print(""DESC"")
	i, desc = readStr(bin, i)
	-- print(""Description: "" .. desc)
	i, tempo = readInt(bin, i, 2)
	-- print(""Tempo (Ticks/Sec)*100: "" .. tempo)
	i, aSave = readBool(bin, i)
	-- print(""Auto-Save?: "" .. (aSave and ""Yes"" or ""No""))
	i, aSaveT = readInt(bin, i, 1)
	-- print(""Auto-Save Time: "" .. aSaveT)
	i, tSign = readInt(bin, i, 1)
	-- print(""Time Signature:0 ""..tSign..""/4"")
	i, minSpent = readInt(bin, i, 4)
	-- print(""Minutes Spent On Project: "" .. minSpent)
	i, lClick = readInt(bin, i, 4)
	-- print(""Left Clicks: "" .. lClick)
	i, rClick = readInt(bin, i, 4)
	-- print(""Right Clicks: "" .. rClick)
	i, nbAdd = readInt(bin, i, 4)
	-- print(""Noteblocks Added: "" .. nbAdd)
	i, nbRem = readInt(bin, i, 4)
	-- print(""Noteblocks Removed: "" .. nbRem)
	-- print(""PORT"")
	i, port = readStr(bin, i)
	-- print(""Imported MIDI / Scematic File: "" .. port)
	i, loop = readBool(bin, i)
	-- print(""Looping?: "" .. (loop and ""Yes"" or ""No""))
	i, mLoop = readInt(bin, i, 1)
	-- print(""Max Times Looped: "" .. mLoop)
	i, loopIdx = readInt(bin, i, 2)
	-- print(""Loop Start Tick: "" .. loopIdx)
	songHead = {version=ver, vInstruments=vanInst, tLength=tikLen,layerCount=lyr, songName=sName, chartAuthor=authName, songAuthor=ogAuthName, description=desc, tempo=tempo,autoSave=aSave,saveTime=aSaveT,timeSignature=tSign, minutesSpent=minSpent, leftClicks=lClick, rightClicks=rClick,notesAdded=nbAdd,notesRemoved=nbRem, importedFile=port, isLooping=loop,maxLoops=mLoop,loopStart=loopIdx}
	return i, songHead
	
end

function readNote(bin, i, cft, idx, reps)
	jumpNT = nil
	if cft then
		i, jumpNT = readInt(bin, i, 2)
		-- print(""Wait "" .. jumpNT .. "" Ticks"")
		if jumpNT == 0 then
			return i, nil, false, idx
		end
	end
	i, jumpNL = readInt(bin, i, 2)
	if jumpNL == 0 and not cft then
		-- print(""prepare for pause"")
		return readNote(bin,i,true,idx,reps)
	end
	-- print(jumpNL .. "" Jumps From Last Layer"")
	i, inst = readInt(bin, i, 1)
	-- print(""Instrument: "" .. (inst < 16 and band[inst] or ""Custom?""))
	i, nKey = readInt(bin, i, 1)
	-- print(""Key: ""..nKey)
	i, vol = readInt(bin, i, 1)
	-- print(""Volume: ""..vol .. ""%"")
	i, stere = readInt(bin, i, 1)
	-- print(""Stereo Position: ""..stere)
	i, pit = readInt(bin, i, 2)
	-- print(""Pitch: ""..pit)
	note = {jumpTNNote = jumpNT, jumpTNLayer = jumpNL, instrument = inst, noteKey = nKey, volume = vol, stereo = stere, pitch = pit}
	if reps > 1 then
		return readNote(bin,i,false,idx+1,reps-1)
	else
		return i, note, false, idx+1
	end
end

function dec2hex(size, num)
	hnum = string.format(""%x"",num)
	op = hnum
	if #hnum < size*2 then
		for i=1, size*2-#hnum do
			op = ""0""..op
		end
	end
	return op
end-- REDUNDANT

function readBinaryNote(bin, i, cft, idx, reps)
	jumpNT = nil
	if cft then
		i, jumpNT = readInt(bin, i, 2)
		print(dec2hex(2,jumpNT) .. "" Jumps From Last Note"")
	end
	i, jumpNL = readInt(bin, i, 2)
	if jumpNL == 0 and not cft then
		print(""prepare for pause"")
		return readBinaryNote(bin,i,true,idx,reps)
	end
	print(dec2hex(2,jumpNL) .. "" Jumps From Last Layer"")
	i, inst = readInt(bin, i, 1)
	print(""Instrument: "" .. dec2hex(1,inst))
	i, nKey = readInt(bin, i, 1)
	print(""Key: ""..dec2hex(1,nKey))
	i, vol = readInt(bin, i, 1)
	print(""Volume: ""..dec2hex(1,vol))
	i, stere = readInt(bin, i, 1)
	print(""Stereo Position: ""..dec2hex(1,stere))
	i, pit = readInt(bin, i, 2)
	print(""Pitch: ""..dec2hex(2,pit))
	note = {jumpTNNote = jumpNT, jumpTNLayer = jumpNL, instrument = inst, noteKey = nKey, volume = vol, stereo = stere, pitch = pit}
	if reps > 1 then
		return readBinaryNote(bin,i,false,idx+1,reps-1)
	else
		return i, note, false, idx+1
	end
end-- REDUNDANT

function skipNotes(bin, i, cft, count, idx)
	jumpNT = nil
	if cft then
		i, jumpNT = readInt(bin, i, 2)
		if jumpNT == 0 then
			-- print(""ENDING"")
			-- print(idx)
			return i, count, idx
		else
			-- print(""JUMPED"")
			idx = idx + jumpNT
		end
	end
	i, jumpNL = readInt(bin, i, 2)
	if jumpNL == 0 and not cft then
		return skipNotes(bin, i, true, count, idx)
	end
	i = skip(bin,i,6)
	return skipNotes(bin, i, false, count+1, idx)
end

function readLayer(bin, i, lIdex, reps)
	i, lName = readStr(bin, i)
	-- print(lName .. "" layer"")
	i, lock = readBool(bin, i)
	-- print((lock and ""Layer locked"" or ""Layer Unlocked""))
	i, vol = readInt(bin,i,1)
	-- print(""Layer Volume: "" .. vol .. ""%"")
	i, stere = readInt(bin,i,1)
	-- print(""Stereo Position: ""..stere)
	layer = {layerName=lName,isLocked=lock,volume=vol,stereo=stere}
	if reps > 1 then
		return readLayer(bin,i,lIdex+1,reps-1)
	end
	return i, layer, lIdex+1
end

function skipLayers(bin, i, lIdex, count)
	-- print(lIdex)
	-- print(""SKIPPING"")
	-- print(i)
	-- print(readInt(bin,i, 4))
	i = readStr(bin, i)
	i = skip(bin, i, 3)
	if lIdex+1 < header.layerCount then
		return skipLayers(bin,i,lIdex+1,count+1)
	end
	return i, count+1, lIdex+1
end

function readCustom(bin, i, cIdex, reps)
	i, cName = readStr(bin, i)
	-- print(""Instrument: "" .. cName)
	i, cFile = readStr(bin, i)
	-- print(""Path: "" .. cFile)
	i, key = readInt(bin,i,1)
	-- print(""Default Key: "" .. key)
	i, vis = readBool(bin, i)
	-- print((vis and ""Visuallise"" or ""Don't Visuallise""))
	custom = {CustomName=lName,filePath=cFile,defaultKey=key,isvisuallised=vis}
	if reps > 1 then
		return readCustom(bin,i,cIdex+1,reps-1)
	end
	return i, custom, cIdex+1
end

function YNPrompt(str)
	print(str)
	ans=read()
	if ans==""y"" or ans ==""Y"" then
		return true
	elseif ans==""n"" or ans==""N"" then
		return false
	else
		print(""Invalid input"")
		return YNPrompt(str)
	end
end-- REDUNDANT

function validateFile(bin)
	-- print(""VALIDATING"")
	i, header = readHeader(bin, 1)
	lyStart = skipNotes(bin, i, true, 0, 0)
	-- print(""lyStart: ""..lyStart)
	cuStart = skipLayers(bin, lyStart, 0, 0)
	_, cInsts = readInt(bin, cuStart, 1)
	if cInsts < 0 then
		printError(""Song Contains Custom Instruments (Unsupported)"")
		return nil, nil, nil
	end
	-- print(""HEADER VALID"")
	j=i
	cft = true
	nIdx = 0
	while j<lyStart do
		-- print(j..""/""..lyStart)
		j, note, cft, nIdx = readNote(bin, j, cft, nIdx, 1)
		if note then
			if note.noteKey > 57 or note.noteKey < 33 then
				printError(""Notes are Keyed Outside of 2 Octave Spectrum at "".. nIdx .. "" pitch "" .. note.noteKey)
				-- printError(j..""/""..lyStart)
				return nil, nil, nil
			end
			if not note.stereo == 100 then
				printError(""Stereo Unsupported"")
				return nil, nil, nil
			end
			if not note.pitch == 0 then
				printError(""Notes are Fine Pitched (Unsupported)"")
				return nil, nil, nil
			end
		end
	end
	-- print(""NOTES VALID"")
	-- print(""scanning from byte: ""..j..""/""..#bin)
	layers = {}
	lIdx = 1
	while j<cuStart do
		j, layers[lIdx], tlIdx = readLayer(bin,j, lIdx, 1)
		if not layers[lIdx].stereo == 100 then
			printError(""Stereo Unsupported"")
			return nil, nil, nil
		end
		lIdx = tlIdx
	end
	-- print(""VALIDATED"")
	return i, header, layers
end

function findSpeak()
	spk = nil
	for k,v in pairs(peripheral.getNames()) do
		if peripheral.getType(v) == ""speaker"" and not spk then
			spk = peripheral.wrap(v)
		end
	end
	return spk
end

local tArgs = { ... }
bin = nil
-- print(""RUNNING"")
if #tArgs<1 then
		if fs.exists(""/disk"") then
			flist = fs.list(""/disk"")
			for k,v in pairs(flist) do
				if string.find(v,"".nbs"") then
					-- print(v)
					bin = fs.open(""/disk/""..v,""rb"").readAll()
				end
			end
			if not bin then
				print(""No File Specified or on Disk"")
				return
			end
		end
		-- print(""No File"")
		-- return
	elseif not fs.exists(tArgs[1]) or (fs.exists(tArgs[1]) and fs.isDir(tArgs[1])) then
		print(""Not a File Bozo"")
		return
	else
		-- print(fs.getName(tArgs[1]) .. "" Exists!"")
		bin = fs.open(tArgs[1],""rb"").readAll()
end
-- print(#bin .. ""b"")
i=1
i, header, layers= validateFile(bin)
if not i then
	return
end
-- print(""Notes start at offset "" .. i)
speak = findSpeak()
if not speak then
	printError(""No Speaker Found"")
	return
end
notStart = i
idex = 0
mtnt = true
lyStart = skipNotes(bin, i, mtnt, 0, 0)
lIdex = 0
-- cuStart = skipLayers(bin, lyStart, 0, 0)
-- cIdex = 0
-- cuStart, cInsts = readInt(bin, cuStart, 1)
-- print(cInsts .. "" Custom Instruments"")
print(""Now Playing "" .. header.songName .. "" by "" .. header.songAuthor)
-- tick = true
band = {[0]=""harp"", ""bass"", ""basedrum"", ""snare"", ""hat"", ""guitar"", ""flute"", ""bell"", ""chime"", ""xylophone"", ""iron_xylophone"", ""cow_bell"", ""didgeridoo"", ""bit"", ""banjo"", ""pling""}
-- print(layers[2].volume)
-- print(7.5*(100/header.tempo))
while i < lyStart do
	i, note, mtnt, idex = readNote(bin, i, mtnt, idex, 1)
	if note then
		if note.jumpTNNote then
			sleep((note.jumpTNNote)*(100/header.tempo))
			lIdex = 0
			-- print((tick and ""tick"" or ""tock""))
			-- tick = not tick
		end
		lIdex = lIdex + note.jumpTNLayer
		-- print(lIdex)
		vol = ((layers[lIdex].volume * note.volume)/10000)*3
		speak.playNote(band[note.instrument],vol,note.noteKey-33)
	end
end
print(""Joever"")
-- print(bin.read())
-- print(bin.readLine(true))
-- bin.close()
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            
"
9asgLJRN,MBD (BES),FiaPlay,Ruby,Saturday 30th of March 2024 10:05:49 PM CDT,"#-----------------------------------------------------------------------------
# Script creado por FiaPlay para Pokémon Essentials BES. Créditos si se usa.
# Discord de FP Systems: https://discord.gg/ds8DWB5NSW
# Versión para Essentials BW: https://pastebin.com/ky8nkSeK
# Si vas reportar algún bug o preguntar algo recomiendo hacerlo en el hilo del server de PokeLiberty o en FP Systems.
#Changelog:
#3.0: Añadidos más bufers para diálogos.
#     Si pones \ht en un diálogo no se mostrará el entrenador.
#     Añadida la posibilidad de poner un texto cuando el último Pokémon del jugador tiene pocos PS.
#     Añadida la posibilidad de poner un bgm cuando el jugador saca su último Pokémon.
#     Añadida la posibilidad de poner un texto cuando se usa un movimiento Físico, Especial o de Estado.
#     Eliminado el soporte para el Dynamax. (¿Alguien lo usaba?)
#     Optimización, etc.....
#2.3.1: Corregido bug que hacía que lowhp_last se muestre varias veces.
#       Ahora es posible poner un texto cuando el jugador tiene un solo pokémon en su equipo.(Idea por: Papalomond Sempai)
#2.3: Cambio de nombre de las claves por otras más cortas y fáciles de recordar.
#     Añadida la posibilidad de poner un texto cuando comienza y termina un turno.
#     Ahora es posible definir un diálogo desde la llamada a Script.
#     Ahora si pones \PN en un texto se mostrará el nombre del jugador.
#     Corrección de errores y optimización.
#2.2.2: Solucionado bug con la megaevolución salvaje.
#2.2.1: Solucionado bug de los Pokemon Oscuros del jugador.
#2.2: Ahora puedes encadenar varios textos colocándolos en una Array. (Se muestran uno detrás de otro)
#     Añadida la posibilidad de poner un texto cuando se unvía un Pokémon Shiny.
#     Añadida la posibilidad de poner un texto cuando el último Pokémon del rival tiene pocos PS.
#     Corrección de errores y refactorización.
#2.1.1: Solucionado Bug de incompatibilidad con el script de Entrenadores dinámicos.
#2.1: Añadida la posibilidad de poner un texto cuando el jugador saca un Pokémon oscuro.
#     Añadida la posibilidad de poner un texto cuando el jugador saca su último Pokémon.
#     Añadida la posibilidad de poner un texto cuando un Pokémon recibe un golpe Super-Efectivo.
#     Añadida la posibilidad de poner un texto cuando un Pokémon recibe un golpe Poco-Efectivo.
#     Añadida la posibilidad de poner un texto cuando un Pokémon recibe un Golpe Crítico.
#     Solucionada incompatibilidad con mi script de Megaevolución de Pokémon Salvaje (Coloque este script debajo de ese).
#     Compatibilidad con este sistema de Dynamax: https://www.pokecommunity.com/showthread.php?t=426770
#     Corrección de errores.
#2.0: Nueva forma de setear los textos (No pienso volver a cambiarla).
#     Eliminada la necesidad de usar variables de evento.
#     Ahora el rival puede decir algo cuando el jugador usa una de las mecánicas de batalla (Megaevolución,Ultraexplosión,etc...)
#     Ahora el rival puede decir algo cuando este saca un Pokémon en específico.
#     Añadida la posibilidad de reproducir un SE junto con los textos.
#-----------------------------------------------------------------------------
# Demostración https://youtu.be/lHCQdq62Xh8 (2.0)
#-----------------------------------------------------------------------------
# Modo de uso:
#Para activar los textos solo setealos usando el método fpTTS_set()
#Entre paréntesis va un Symbol que es el nombre de la constante con los datos.
=begin Para un ejemplo práctico pegue una de las siguientes 3 líneas en una llamada a script
fpTTS_set(:TEST4_0)
fpTTS_set(:CHAMPION_BLUE)
fpTTS_set(:LEADER_BROCK)
=end
=begin Si lo que quiere es definirlo desde una llamada a Script (Ni idea de por qué) podría:
dialogue={
""mega"" => ""¡Voy con todo!"",
""super_effective_move(player)"" => ""Sabes lo que haces muchacho.""
}
fpTTS_set(dialogue)
En caso de que quieras solo el del último pokémon:
fpTTS_set(""¡Es el momento de darlo todo!"")
=end
=begin En caso de que tu proyecto vaya a tener más de un idioma debes poner _INTL antes del diálogo para poder traducirlo. Tal que así:
""last"" => [_INTL(""Finaly.""),_INTL(""The Groundon's awakening."")]
=end

#-----------------------------------------------------------------------------
# FAQ:
#*¿Para cuando videotutorial?
# Para cuando tenga ganas.
#
#*¿Es compatible con EBS?
# No deberías recibir mensajes de error, pero algunos textos no se mostrarán.
#
#*¿Funciona con combates dobles?
# No deberías recibir mensajes de error, pero no prometo nada.
#
#*He recibido x error y me parece que es este script.
# Avísame por el Discord. (Solo si de verdad crees que fue este script)
#-----------------------------------------------------------------------------
# Estas son las opciones cámbialas a como necesites.
#-----------------------------------------------------------------------------
TEXTSE = """" #SE que se reproducirá al aparecer el sprite del entrenador
module MBD_Data

#-----------------------------------------------------------------------------
# En la siguiente constante están configurados todos los diálogos posibles.
#-----------------------------------------------------------------------------
TEST3_0={
  ""last_bgm"" => ""Battle! (Gym Leader)"",
  ""last_bgm(player)"" => ""Battle! (Champion)"",
  ""last"" => [""¡Ho, no. Es mi último Pokémon!"",""Pero todavía puedo luchar.""],
  ""last(player)"" => ""Te veo en un buen apuro."",
  ""end_turn"" => [0,[""¿Qué haces?"",""Esto solo está empezando.""]],
  ""start_turn"" => [0,""Veamos de qué estás hecho... \PN.""],
  ""one_poke"" => [""Jajaja"",""¿En qué estás pensando \PN?""],
  ""lowhp_last"" => [""!No puede ser¡"",""¡Mi \B1n!""],
  ""lowhp_last(player)"" => ""!Estas a punto de caer ante el gran \ON."",
  ""shiny"" => [""¿Cómo ves mi brillo?"",""¿Es mucho para tí?""],
  ""shiny(player)"" => ""¿De donde sacaste eso?"",
  ""mega"" => ""¡Qué importa solo debo usar la poderosa energía ancestral!"",
  ""mega(player)"" => [""No podía esperar menos de tí."",""Eres digno de retar al gran \ON.""],
  ""primal"" => ""El poder primigenio es la clave de mi victoria."",
  ""primal(player)"" => ""Rubíes y Zafiros... Veo que también dominas ese poder."",
  ""ultra"" => ""¡Necrozma Muestra tu verdadera forma!"",
  ""ultra(player)"" => ""Debo admitirlo. Esa ráfaga de luz me ha dejado marvillado."",
  ""send"" => [:KYOGRE,""Tan solo admira mi Leviatán."",:GROUDON,""Un poderoso Reptil Ígneo.""],
  ""item"" => ""No puedo dejar que esto termine tan rápido."",
  ""shadow"" => ""No es inhumano , solo es un viejo truco."",
  ""shadow(player)"" => ""Me sorprende verte usando un poder como ese."",
  ""caught"" => ""¡Cómo te atreves!"",
  ""critical_move"" => ""Tengo al universo de mi lado."",
  ""critical_move(player)"" => ""Necesitarás más que suerte para vencerme."",
  ""low_effective_move"" => ""Debo pensar mejor lo que hago."",
  ""low_effective_move(player)"" => [""Creí tenías más experiencia."",""No puedes ganarme cometiendo errores.""],
  ""super_effective_move"" => ""Cometiste un greve error al meterte conmigo."",
  ""super_effective_move(player)"" => ""Nada mal niño."",
  ""special_move"" => ""Te veo y te analizo."",
  ""special_move(player)"" => ""Ven, acércate."",
  ""physical_move"" => ""No puedo perder tiempo."",
  ""physical_move(player)"" => ""¿Acaso sabes lo que haces?"",
  ""status_move"" => ""No puedo arriesgarme."",
  ""status_move(player)"" => ""¿Qué estás tramando?."",
  ""z_move"" => ""Es momento de un AZ oculto."",
  ""z_move(player)"" => ""Me estás atacando a matar."",
  ""tera"" => ""Ilumínate con mi resplandor."",
  ""tera(player)"" => ""¡Me sorprende que sepas usar este fenómeno!""
}

#-----------------------------------------------------------------------------
# Esto sería para la batalla contra el campeón por defecto.
#-----------------------------------------------------------------------------
CHAMPION_BLUE={
  ""last"" => ""No puedo dejar que me derrotes ahora."",
  ""last(player)"" => ""Luego de tantos combtes por fin podré derotaré."",
  ""end_turn"" => [0,[""Este combate solo está empezando."", ""Todavía no te confies.""]],
  ""lowhp_last"" => ""Mientras tenga uno mi poder es infinito."",
  ""send"" => [:BLASTOISE,""Espero que sepas nadar."",:CHARIZARD,""Prepárate para pasar calor.""],
  ""item"" => ""Usaré todo lo que tenga a mano para vencerte."",
  ""shadow(player)"" => [""Veo que caiste en esa tentación."",""No mereces nisiquiera retarme.""],
  ""critical_move(player)"" => ""Solo con eso no me ganarás."",
  ""low_effective_move(player)"" => ""¿En qué estabas pensando?"",
  ""super_effective_move"" => ""Aprendí mucho con mi Pokedex.""
}
#-----------------------------------------------------------------------------
# Esto sería para la batalla contra Brock.
#-----------------------------------------------------------------------------
LEADER_BROCK={
  ""last_bgm"" => ""Battle! (Champion)"",
  ""last"" => ""Bien, pero si quieres la medalla roca tendrás que luchar un poco más."",
  ""end_turn"" => [0,[""¿Qué haces?"",""Esto solo está empezando.""]],
  ""shiny"" => ""Este Onix dorado representa la perseverancia de los entrenadores."",
  ""mega(player)"" => ""Me parece muy temprano para que uses algo así."",
  ""item"" => ""No puedo rendirme tan rápido."",
  ""super_effective_move(player)"" => ""Jamás podrás romper su dura coraza Rocosa.""
}
end

#--------------------------------------------------------------------------------
# A patir de aquí no toques nada a no ser que sepas bien lo que estás haciendo.
#--------------------------------------------------------------------------------

class PokeBattle_Battle

#--------------------------------------------------------------------------------
# Control de Variables
#--------------------------------------------------------------------------------
  alias initialize_fpd initialize
  def initialize(*args)
    @tts=$tts ? $tts : {}
    @mbu=[]
    $tts=nil
    initialize_fpd(*args)
  end

#--------------------------------------------------------------------------------
# Método que muestra los textos
#--------------------------------------------------------------------------------
  def fpShowText(key="""",mbu="""",dtext=nil)
    return if !@opponent # Revisa si es una batalla contra un entrenador
    return if !@tts[key] #Revisa si el diálogo está definido
    text = dtext ? dtext : @tts[key]
    return if @mbu.include?(mbu) #Revisa si se mostró el diálogo antes
    if text.is_a?(Array) #Revisa si es definición simple o en cadena
      it=0
      for i in text
        not_show=false
        not_show=true if i.include?(""\ht"")
        if not_show
          pbDisplayPaused(fpBuffer(i)) #Muestra el diálogo
        else
          @scene.pbShowOpponent(0) #Muestra el entrenador
          pbSEPlay(TEXTSE) if TEXTSE && TEXTSE!="""" # Reproduce el SE
          pbDisplayPaused(fpBuffer(i)) #Muestra el diálogo
          @scene.pbHideOpponent() if !text[it+1] || text[it+1].include?(""\ht"") #Oculta el entrenador
        end
        it+=1
      end
    else
      if text.include?(""\ht"")
        pbDisplayPaused(fpBuffer(text)) #Muestra el diálogo
      else
        @scene.pbShowOpponent(0)
        pbSEPlay(TEXTSE) if TEXTSE && TEXTSE!="""" # Reproduce el SE
        pbDisplayPaused(fpBuffer(text)) #Muestra el diálogo
        @scene.pbHideOpponent()
      end
    end
    PBDebug.log(""Díalogo Mostrado: #{text}"")
    @mbu.push(mbu) if mbu!="""" #Añade el diálogo a la lista de los mostrados
  end

#--------------------------------------------------------------------------------
# Método que controla los buffers
#--------------------------------------------------------------------------------

  def fpBuffer(str)
    str.gsub!(""\PN"",$Trainer.name) #Nombre de PLAYER
    str.gsub!(""\ON"",@opponent.name) #Nombre del rival
    str.gsub!(""\HT"","""")
    for i in 0...4
      str.gsub!(""\B#{i}N"",@battlers[i].name) #Nombre del Battler X
    end
	return str
  end

#--------------------------------------------------------------------------------
#Para el último Pokémon , los Pokémon específicos y los Pokémon Oscuros del jugador.
#--------------------------------------------------------------------------------
  def pbSendOut(index,pokemon)
    pbSetSeen(pokemon)
    @peer.pbOnEnteringBattle(self,pokemon)
    if pbIsOpposing?(index)
      @scene.pbTrainerSendOut(index,pokemon)
      if (pbPokemonCount(@party2)>=2 || @tts[""last""] == nil) && @tts[""send""]
        for i in 0...@tts[""send""].length/2
          name=pokemon.name
          if isConst?(pokemon.species,PBSpecies,@tts[""send""][i*2])
            fpShowText(""send"",""opp#{name}"",@tts[""send""][i*2+1])
          end
        end
      end
      pbBGMPlay(@tts[""last_bgm""],100,100) if @tts[""last_bgm""] && pbPokemonCount(@party2)==1
      fpShowText(""last"") if pbPokemonCount(@party2)==1
    else
      @scene.pbSendOut(index,pokemon)
      if pbPokemonCount(@party1)==1
        if $Trainer.party.length>1
          fpShowText(""last(player)"")
        else
          fpShowText(""one_poke"")
        end
      end
      pbBGMPlay(@tts[""last_bgm(player)""],100,100) if @tts[""last_bgm(player)""] && pbPokemonCount(@party1)==1
	    @battle.fpShowText(""shadow(player)"",""shadow(player)"") if pokemon.isShadow?
    end
    @scene.pbResetMoveIndex(index)
  end

#--------------------------------------------------------------------------------
#Para la Regresión Primigenia
#--------------------------------------------------------------------------------
  def pbPrimalReversion(index)
    return if !@battlers[index] || !@battlers[index].pokemon
    return if !(@battlers[index].hasPrimal? rescue false)
    return if (@battlers[index].isPrimal? rescue true)
    fpShowText(""primal"") if pbIsOpposing?(index)
    if isConst?(@battlers[index].pokemon.species,PBSpecies,:KYOGRE)
      pbCommonAnimation(""PrimalKyogre"",@battlers[index],nil)
    elsif isConst?(@battlers[index].pokemon.species,PBSpecies,:GROUDON)
      pbCommonAnimation(""PrimalGroudon"",@battlers[index],nil)
    else
      pbCommonAnimation(""MegaEvolution"",@battlers[index],nil)
    end
    @battlers[index].pokemon.makePrimal
    @battlers[index].form=@battlers[index].pokemon.form
    @battlers[index].pbUpdate(true)
    @scene.pbChangePokemon(@battlers[index],@battlers[index].pokemon)
    if isConst?(@battlers[index].pokemon.species,PBSpecies,:KYOGRE)
      pbCommonAnimation(""PrimalKyogre2"",@battlers[index],nil)
    elsif isConst?(@battlers[index].pokemon.species,PBSpecies,:GROUDON)
      pbCommonAnimation(""PrimalGroudon2"",@battlers[index],nil)
    else
      pbCommonAnimation(""MegaEvolution2"",@battlers[index],nil)
    end
    pbDisplay(_INTL(""¡{1} ha esperimentado una Regresión Primigenia y ha recobrado su apariencia primitiva!"",@battlers[index].pbThis))
    fpShowText(""primal(player)"") if pbBelongsToPlayer?(index)
    PBDebug.log(""[Regresión Primigenia] #{@battlers[index].pbThis} ha recobrado su apariencia primitiva"")
  end

#--------------------------------------------------------------------------------
#Para la Megaevolución
#--------------------------------------------------------------------------------
def pbMegaEvolve(index)
  return if !@battlers[index] || !@battlers[index].pokemon
  return if !(@battlers[index].hasMega? rescue false)
  return if (@battlers[index].isMega? rescue true)
  fpShowText(""mega"") if pbIsOpposing?(index)
  if pbGetOwner(index)==nil
    case (@battlers[index].pokemon.megaMessage rescue 0)
    when 1 # Rayquaza
      pbDisplay(_INTL(""¡El ruego vehemente alcanza a {1}!"",@battlers[index].pbThis))
    else
      pbDisplay(_INTL(""¡La {2} de {1} está reaccionando su poder interior!"",
         @battlers[index].pbThis,PBItems.getName(@battlers[index].item)))
    end
  else
    ownername=pbGetOwner(index).fullname
    ownername=pbGetOwner(index).name if pbBelongsToPlayer?(index)
    case (@battlers[index].pokemon.megaMessage rescue 0)
    when 1                                                           # Rayquaza
      pbDisplay(_INTL(""¡El ruego vehemente de {1} alcanza a {2}!"",ownername,@battlers[index].pbThis))
    else
      pbDisplay(_INTL(""¡La {2} de {1} está reaccionando al {4} de {3}!"",
         @battlers[index].pbThis,PBItems.getName(@battlers[index].item),
         ownername,pbGetMegaRingName(index)))
    end
  end
  pbCommonAnimation(""MegaEvolution"",@battlers[index],nil)
  @battlers[index].pokemon.makeMega
  @battlers[index].form=@battlers[index].pokemon.form
  @battlers[index].pbUpdate(true)
  @scene.pbChangePokemon(@battlers[index],@battlers[index].pokemon)
  pbCommonAnimation(""MegaEvolution2"",@battlers[index],nil)
  meganame=(@battlers[index].pokemon.megaName rescue nil)
  if !meganame || meganame==""""
    meganame=_INTL(""Mega {1}"",PBSpecies.getName(@battlers[index].pokemon.species))
  end
  pbDisplay(_INTL(""¡{1} ha Mega Evolucionado en {2}!"",@battlers[index].pbThis,meganame))
  PBDebug.log(""[Mega Evolución] #{@battlers[index].pbThis} ha Mega Evolucionado"")
  fpShowText(""mega(player)"") if pbBelongsToPlayer?(index)
  side=(pbIsOpposing?(index)) ? 1 : 0
  owner=pbGetOwnerIndex(index)
  @megaEvolution[side][owner]=-2
end

#--------------------------------------------------------------------------------
# Para los objetos
#--------------------------------------------------------------------------------
  alias pbEnemyUseItem_fp pbEnemyUseItem
  def pbEnemyUseItem(*args)
    fpShowText(""item"",""item"")
    pbEnemyUseItem(args)
  end

#--------------------------------------------------------------------------------
# Para los finales de turno y pocos PS en el último Pokémon
#--------------------------------------------------------------------------------
  alias pbEndOfRoundPhase_fp pbEndOfRoundPhase
  def pbEndOfRoundPhase
      fpShowText(""lowhp_last"",""lowhp_last"") if pbPokemonCount(@party2)==1 && @battlers[1].totalhp/2 >= @battlers[1].hp && !@battlers[1].isFainted?
      fpShowText(""lowhp_last(player)"",""lowhp_last(player)"") if pbPokemonCount(@party1)==1 && @battlers[0].totalhp/2 >= @battlers[0].hp && !@battlers[0].isFainted?
	  if @tts[""end_turn""]
        for i in 0...@tts[""end_turn""].length/2
          if @turncount==@tts[""end_turn""][i*2]
            fpShowText(""end_turn"",""end#{@turncount}"",@tts[""end_turn""][i*2+1])
          end
        end
	  end
    pbEndOfRoundPhase_fp
  end

#--------------------------------------------------------------------------------
# Para los inicios de turno
#--------------------------------------------------------------------------------
  alias pbAttackPhase_fp pbAttackPhase
  def pbAttackPhaseg
	  if @tts[""start_turn""]
        for i in 0...@tts[""start_turn""].length/2
          if @turncount==@tts[""start_turn""][i*2]
            fpShowText(""start_turn"",""start#{@turncount}"",@tts[""start_turn""][i*2+1])
          end
        end
	  end
    pbAttackPhase_fp
  end
end

#--------------------------------------------------------------------------------
# Para los golpes Super-Efectivos, Poco-Efectivos y Críticos
#--------------------------------------------------------------------------------
class PokeBattle_Move
  def pbEffectMessages(attacker,opponent,ignoretype=false,alltargets=nil)
    if opponent.damagestate.critical
      if alltargets && alltargets.length>1
        @battle.pbDisplay(_INTL(""¡Es un golpe crítico en {1}!"",opponent.pbThis(true)))
      else
        @battle.pbDisplay(_INTL(""¡Es un golpe crítico!""))
      end
      @battle.fpShowText(""critical_move"",""critical_move"") if @battle.pbIsOpposing?(attacker.index)
      @battle.fpShowText(""critical_move(player)"",""critical_move(player)"") if @battle.pbBelongsToPlayer?(attacker.index)
    end
    if !pbIsMultiHit && attacker.effects[PBEffects::ParentalBond]==0
      if opponent.damagestate.typemod>8
        if alltargets && alltargets.length>1
          @battle.pbDisplay(_INTL(""¡Es super efectivo en {1}!"",opponent.pbThis(true)))
        else
          @battle.pbDisplay(_INTL(""¡Es super efectivo!""))
        end
        @battle.fpShowText(""super_effective_move"",""super_effective_move"") if @battle.pbIsOpposing?(attacker.index)
        @battle.fpShowText(""super_effective_move(player)"",""super_effective_move(player)"") if @battle.pbBelongsToPlayer?(attacker.index)
      elsif opponent.damagestate.typemod>=1 && opponent.damagestate.typemod<8
        if alltargets && alltargets.length>1
          @battle.pbDisplay(_INTL(""No es muy efectivo en {1}..."",opponent.pbThis(true)))
        else
          @battle.pbDisplay(_INTL(""No es muy efectivo...""))
        end
        @battle.fpShowText(""low_effective_move"",""low_effective_move"") if @battle.pbIsOpposing?(attacker.index)
        @battle.fpShowText(""low_effective_move(player)"",""low_effective_move(player)"") if @battle.pbBelongsToPlayer?(attacker.index)
      end
    end
    if pbIsSpecial?(0)
      @battle.fpShowText(""special_move"",""special_move"") if @battle.pbIsOpposing?(attacker.index)
      @battle.fpShowText(""special_move(player)"",""special_move(player)"") if @battle.pbBelongsToPlayer?(attacker.index)
    elsif pbIsPhysical?(0)
      @battle.fpShowText(""physical_move"",""physical_move"") if @battle.pbIsOpposing?(attacker.index)
      @battle.fpShowText(""physical_move(player)"",""physical_move(player)"") if @battle.pbBelongsToPlayer?(attacker.index)
    else
      @battle.fpShowText(""status_move"",""status_move"") if @battle.pbIsOpposing?(attacker.index)
      @battle.fpShowText(""status_move(player)"",""status_move(player)"") if @battle.pbBelongsToPlayer?(attacker.index)
    end
    if opponent.damagestate.endured
      @battle.pbDisplay(_INTL(""¡{1} aguantó el golpe!"",opponent.pbThis))
    elsif opponent.damagestate.sturdy
      @battle.pbDisplay(_INTL(""¡{1} resistió con Robustez!"",opponent.pbThis))
    elsif opponent.damagestate.focussash
      @battle.pbDisplay(_INTL(""¡{1} resistió usando Banda Focus!"",opponent.pbThis))
      opponent.pbConsumeItem
    elsif opponent.damagestate.focusband
      @battle.pbDisplay(_INTL(""¡{1} resistió usando Cinta Focus!"",opponent.pbThis))
    end
  end

  def pbTypeModMessages(type,attacker,opponent)
    return 8 if type<0
    typemod=pbTypeModifier(type,attacker,opponent)
    if typemod==0
      @battle.pbDisplay(_INTL(""No afecta a {1}..."",opponent.pbThis(true)))
    else
      typemod = 0 if pbTypeImmunityByAbility(type,attacker,opponent)
    end
    if typemod==0
      @battle.fpShowText(""non_effective_move"",""non_effective_move"") if @battle.pbIsOpposing?(attacker.index)
      @battle.fpShowText(""non_effective_move(player)"",""non_effective_move(player)"") if @battle.pbBelongsToPlayer?(attacker.index)
    end
    return typemod
  end
end
#--------------------------------------------------------------------------------
# Para los Pokémon Shiny y Oscuros
#--------------------------------------------------------------------------------
class PokeBattle_Scene
  alias pbCommonAnimation_fp pbCommonAnimation
  def pbCommonAnimation(*args)
    pbCommonAnimation_fp(*args)
	  name=args[0] ; attacker=args[1]
    case name
    when ""Shadow""
      @battle.fpShowText(""shadow"",""shadow"")
    when ""Shiny""
      @battle.fpShowText(""shiny"",""shiny"") if @battle.pbIsOpposing?(attacker.index)
      @battle.fpShowText(""shiny(player)"",""shiny(player)"") if @battle.pbBelongsToPlayer?(attacker.index)
    end
  end

#--------------------------------------------------------------------------------
#Corrección para que el entrenador no se muestre en ciertos casos.
#--------------------------------------------------------------------------------
  alias pbShowOpponent_fp pbShowOpponent
  def pbShowOpponent(*args)
    return if @sprites[""trainer""] && @sprites[""trainer""].x<500
    pbShowOpponent_fp(args)
  end
end

#--------------------------------------------------------------------------------
#Para los Pokémon Oscuros capturados
#--------------------------------------------------------------------------------
module PokeBattle_BattleCommon
  alias pbStorePokemon_fp pbStorePokemon
  def pbStorePokemon(poke)
    fpShowText(""caught"",""caught"") if poke.isShadow?
    pbStorePokemon_fp(poke)
  end
end

#--------------------------------------------------------------------------------
# Método que setea los textos
#--------------------------------------------------------------------------------
def fpTTS_set(param)
    if param.is_a?(Symbol)
        if hasConst?(MBD_Data,param)
            $tts=getConst(MBD_Data,param)
        else
            raise ""Constante de Diálogos no definida.""
        end
    elsif param.is_a?(Hash)
        $tts=param
    elsif param.is_a(String)
        $tts=[];$tts[""last""]=param
    else
        raise ""Parámetro incorrecto, se esperaba un Hash, Symbol o String.""
    end
end
"
RhBKinGb,Filmora,Mlulin,HTML,Saturday 30th of March 2024 09:29:09 PM CDT,"{
  ""versionCode"": 13201,
  ""versionName"": ""13.2.01"",
  ""Msg"": ""Update Mod is available, to continue in our app please update it.

What's new:
- Performance Improvements.
- Bug Fixes.
- New Features introduced.
- Others minor changes.

Thanks for using"",
  ""downloadLink"": ""https://t.me/SNxTG""
  }"
00ZitFKD,motd for scare monk,Yobanzda,Lua,Saturday 30th of March 2024 08:25:14 PM CDT,level 2 is out congrats! why am i doing this :(
Kh0CxRBR,112.215.240.213-/sdcard/Premium/useragent_ig.py.py,OBF-XIn,Python,Saturday 30th of March 2024 07:58:36 PM CDT,"# useragent
import random

class Useragent:
    def __init__(self) -> None:
        pass
        
    def useragent_api(self):
        self.nexus = ['Galaxy Nexus', 'Nexus 10', 'Nexus 2', 'Nexus 4', 'Nexus 4', 'Nexus 4', 'Nexus 4', 'Nexus 4', 'Nexus 4', 'Nexus 5', 'phone/Nexus 5', 'Nexus 5X', 'Nexus 6', 'Nexus 7', 'Nexus 9', 'Nexus One', 'Nexus One', 'Nexus One', 'Nexus One', 'Nexus One', 'Nexus One', 'Nexus Player', 'Nexus Player', 'Nexus S', 'Nexus S', 'Nexus S 4G', 'nexus S', 'Nexus S', 'Nexus s', 'Nexus S', 'Nexus S', 'Nexus S', 'Nexus S', 'Nexus S']
        self.micromax = ['Micromax 10', 'Micromax 1J', 'Micromax 86519', 'Micromax A064', 'Micromax_A064', 'Micromax A065', 'Micromax_A065', 'Micromax A066', 'Micromax_A066', 'Micromax A067', 'Micromax_A067', 'MICROMAX_A068', 'MICROMAX A068', 'Micromax A068', 'Micromax A069', 'Micromax_A069', 'Micromax A075', 'Micromax A082', 'Micromax_A082', 'Micromax A089', 'Micromax_A089', 'Micromax A091', 'Micromax A092', 'Micromax_A092', 'Micromax A093', 'Micromax_A093', 'Micromax A095', 'Micromax A096', 'Micromax_A101', 'Micromax A102', 'Micromax_A102', 'Micromax A104', 'Micromax a104', 'Micromax A105', 'Micromax_A105', 'Micromax A106', 'Micromax-A106', 'Micromax A108', 'Micromax_A109', 'Micromax A109', 'Micromax A110', 'Micromax_A110', 'Micromax A110Q', 'Micromax_A110Q', 'Micromax A111', 'Micromax A114', 'Micromax A114R', 'Micromax_A114R', 'Micromax A115', 'Micromax_A115', 'Micromax A116', 'Micromax_A116', 'Micromax A116i', 'Micromax_A116i', 'Micromax A117', 'Micromax_A117', 'Micromax A118R', 'Micromax A119', 'Micromax A120', 'Micromax A121', 'Micromax_A121', 'Micromax A15', 'Micromax A177', 'Micromax A190', 'Micromax_A190', 'Micromax A200', 'Micromax_A200', 'Micromax A21', 'Micromax A210', 'Micromax A24', 'Micromax_A24', 'Micromax A25 Smarty', 'Micromax A250', 'Micromax A255', 'Micromax_A255', 'Micromax A26', 'Micromax_A26', 'Micromax_A27', 'Micromax A27', 'Micromax_A28', 'Micromax A28/GRI40', 'Micromax A28', 'Micromax A290', 'Micromax A30', 'Micromax A300', 'Micromax A310', 'Micromax A311', 'Micromax A315', 'Micromax_A315', 'Micromax_A316', 'Micromax A316', 'Micromax_A34', 'Micromax A34', 'Micromax_A35', 'Micromax A35', 'Micromax A350', 'Micromax_A36', 'Micromax A36', 'Micromax_A37', 'Micromax A37', 'Micromax A37B', 'Micromax_A37B', 'Micromax A40', 'Micromax_A40', 'Micromax A46', 'Micromax_A46', 'Micromax A47', 'MicromaxA47', 'Micromax_A50', 'Micromax A50', 'Micromax A51', 'Micromax A52', 'Micromax A54', 'Micromax A56', 'Micromax_A57', 'Micromax A57', 'Micromax A58', 'Micromax_A58', 'Micromax A59', 'Micromax A60', 'Micromax A61', 'Micromax A62', 'Micromax_A62', 'Micromax A63', 'Micromax_A63', 'Micromax_A65', 'Micromax A65', 'Micromax_A66', 'Micromax A66', 'Micromax A67', 'Micromax A68', 'Micromax A69', 'Micromax_A69', 'Micromax_A70', 'Micromax A700', 'Micromax A71', 'Micromax_A71', 'Micromax A72', 'Micromax_A72', 'Micromax A73', 'Micromax_A74', 'Micromax A74', 'Micromax A75', 'Micromax_A76', 'Micromax A76', 'Micromax A77', 'Micromax A78', 'Micromax A79', 'en_us Micromax A80', 'Micromax A80', 'Micromax A82', 'Micromax_A82', 'Micromax A84', 'Micromax A85', 'Micromax A86', 'Micromax_A86', 'Micromax_A87', 'Micromax A87', 'Micromax A87 . Ninja 4.0', 'Micromax A88', 'Micromax_A88', 'Micromax A89', 'Micromax A90', 'Micromax A90s', 'MIcromax_A90s', 'Micromax A90S', 'Micromax A91', 'Micromax_A91', 'Micromax_A92', 'Micromax A92', 'MicromaxA93', 'Micromax A93', 'Micromax A94', 'Micromax_A94', 'Micromax A96', 'Micromax_A96', 'Micromax A97', 'Micromax_A99', 'Micromax A99', 'Micromax_AD3520', 'Micromax AD3520', 'Micromax AD3550', 'Micromax AD4500', 'Micromax_AD4500', 'Micromax AE90', 'Micromax AO5510', 'Micromax AQ5000', 'Micromax B4A', 'Micromax B5 Pro', 'B5Pro', 'Micromax_Bharat_5_Plus', 'Micromax Q402Plus', 'Micromax Q440', 'Micromax Bharat 5', 'Micromax Q4204', 'Micromax Bharat 5 Plus', 'Micromax Bharat 5 Pro', 'Micromax Bolt 3425', 'Micromax Bolt 2', 'Micromax Q402+', 'Micromax Q306', 'Micromax Q3001', 'Micromax Q301', 'Micromax Q303', 'Micromax Q324', 'Micromax Q326', 'Q327', 'Micromax Q327', 'Micromax Q3301', 'Micromax Q333', 'Micromax_Q333', 'Micromax Q338', 'Micromax Q346', 'Micromax Q354', 'Micromax Q357', 'Micromax Q383', 'Micromax_S302', 'Micromax S302', 'Micromax Q424', 'Micromax Q352', 'Micromax Q4101', 'Micromax C2A', 'Micromax C9', 'Micromax C1', 'Micromax C1A', 'Micromax C2APLS', 'Micromax Q4310', 'Micromax E4815', 'arm_64 Micromax E481', 'Micromax E481', 'Micromax E4816', 'Micromax Q462', 'Micromax Q463', 'Micromax E485', 'Micromax E484', 'Micromax AQ4501', 'Micromax AQ4502', 'A240', 'Micromax A240', 'Micromax Q391', 'Micromax E453', 'Micromax A107', 'Micromax HS2', 'Micromax HS1', 'Micromax_HS3', 'en Micromax_HS3', 'AQ5001', 'Micromax AQ5001', 'AQ5001 Canvas Power', 'Micromax Q392', 'Micromax Q465', 'Micromax Q461', 'Micromax Q350R', 'Micromax Q421', 'Micromax Q417', 'Micromax Q426', 'Micromax Q4260', 'Micromax E311', 'Micromax E352', 'Micromax E455', 'Micromax Q415', 'Micromax Q355', 'Micromax Q469', 'Micromax E451', 'Micromax E451', 'Micromax Q340', 'Micromax Q349', 'Micromax Q345', 'Micromax Q450', 'Micromax Q480', 'arm_64 Micromax Q480', 'Micromax Q380', 'Micromax Q3502', 'Micromax Q351', 'Micromax Q385', 'P70221', 'Micromax P681', 'MicromaxP802', 'Micromax Q427', 'Micromax_Q427', 'Micromax Q413', 'Micromax E313', 'Micromax D2', 'Micromax D200', 'Micromax_D200', 'Micromax D303', 'Micromax D304', 'Micromax_D304', 'Micromax D305', 'Micromax D306', 'Micromax D320', 'Micromax D321', 'Micromax D333', 'Micromax D340', 'Micromax D7517', 'Micromax DM5003', 'Micromax E353', 'Micromax E457', 'Micromax E458', 'Micromax E460', 'Micromax E471', 'Micromax E4817', 'Micromax E482', 'Micromax E483', 'Micromax E5018M', 'Micromax EG111', 'Micromax EG116', 'micromax F', 'micromax F189', 'Micromax F601', 'MicromaxF666', 'Micromax IN', 'Micromax E7533', 'Micromax E6523', 'IN_2b', 'IN_Note1', 'MICROMAX IN1', 'N8216', 'N8301', 'ione note', 'MICROMAX ione note', 'Micromax N4120', 'Micromax N8202', 'Micromax Ninja', 'Micromax Nitro', 'Micromax Note 1+', 'Micromax Note 5', 'Micromax Note3', 'Micromax NX', 'Micromax P001', 'Micromax P250(Funbook)', 'Micromax P255', 'Micromax P256', 'xx Micromax P275', 'Micromax_P275', 'Micromax P275', 'Micromax P280', 'Micromax P290', 'Micromax P310', 'Micromax P350', 'xx Micromax P350', 'Micromax P360', 'Micromax P362', 'Micromax P365', 'Micromax P410', 'Micromax P410i', 'Micromax_P410i', 'Micromax P420', 'Micromax P469', 'Micromax P470', 'MicromaxP480', 'Micromax P500(Funbook)', 'Micromax P560', 'Micromax P580', 'Micromax P580i', 'Micromax P600', 'Micromax P650', 'Micromax P650E', 'Micromax P660', 'Micromax P660', 'Micromax_P666', 'Micromax P666', 'MicromaxP680', 'Micromax P690', 'Micromax P701', 'MicromaxP702', 'Micromax P810', 'en Micromax Q300', 'Micromax_Q300', 'Micromax Q323', 'Micromax_Q323', 'Micromax Q325', 'Micromax_Q325', 'Micromax Q331', 'Micromax_Q331', 'Micromax Q332', 'Micromax_Q332', 'Micromax Q334', 'Micromax Q335', 'Micromax_Q335', 'Micromax Q336', 'Micromax_Q336', 'Micromax Q341', 'Micromax Q343', 'Micromax Q348', 'Micromax_Q353', 'en Micromax_Q353', 'Micromax_Q353P', 'Micromax Q3551', 'Micromax Q3555', 'Micromax Q361', 'Micromax Q370', 'Micromax_Q370', 'Micromax Q371', 'Micromax_Q371', 'Micromax Q375', 'Micromax_Q375', 'Micromax Q379', 'Micromax Q381', 'Micromax Q382', 'Micromax Q386', 'Micromax Q394', 'Micromax_Q394', 'Micromax Q395', 'Micromax Q397', 'Micromax Q398', 'arm Micromax Q398', 'Micromax Q400', 'Micromax_Q400', 'Micromax Q4002', 'en Micromax Q4002', 'Micromax Q401', 'Micromax Q402', 'Micromax Q402 Ultra', 'Micromax Q404', 'Micromax Q411', 'Micromax_Q411', 'Micromax Q412', 'Micromax Q414', 'Micromax Q416', 'Micromax Q419', 'Micromax Q4201', 'Micromax Q422', 'Micromax Q4220', 'Micromax Q423', 'Micromax Q428', 'Micromax_Q428', 'Micromax Q429', '720X1280 Micromax Q4309', 'Micromax Q4312', 'en_US Micromax Q437', 'Micromax Q440Plus', 'Micromax Q454', 'Micromax Q470', 'Micromax Q479', 'Micromax Q491', 'Micromax_Q491', 'Micromax Q502+', 'Micromax Q666', 'Micromax Q67', 'micromax Q68', 'micromax Q78', 'Micromax S300', 'Micromax_S300', 'Micromax S301', 'Micromax_S301', 'Micromax Q4311', 'Micromax Q4601', 'Micromax Q409A', 'Micromax Q409', 'Micromax Q452', 'Micromax Unite 3', 'Micromax Unite 2', 'Micromax Unite 2 A106', 'Micromax Q372', 'Micromax V89', 'Micromax Q4001', 'Micromax Q4202', 'Micromax Q4251', 'arm Micromax Q4251', 'Micromax W5509', 'Micromax X5098', 'Micromax-Xzoom A52', 'YU5530', 'YU5040', 'Micromax YU5900', 'YU5012', 'Micromax Z59']
        self.onpls = ['NE2213', 'NE2217', 'NE2215', 'NE2210', 'NE2210', 'CPH2423', 'CPH2411', 'CPH2417', 'CPH2413', 'CPH2415', 'CPH2449', 'CPH2487', 'ONE A2003', 'ONE A2003', 'ONE A2001', 'ONE A2005', 'ONEPLUS A3003', 'ONEPLUS A3000', 'ONEPLUS A3010', 'ONEPLUS A5000', 'ONEPLUS A5000', 'ONEPLUS A5010', 'ONEPLUS A5010', 'ONEPLUS A5010', 'ONEPLUS A5010', 'ONEPLUS A5010', 'ONEPLUS A6003', 'ONEPLUS A6000', 'ONEPLUS A6010', 'ONEPLUS A6013', 'ONEPLUS A6010', 'GM1900', 'GM1901', 'GM1903', 'GM1917', 'GM1913', 'GM1911', 'GM1910', 'GM1915', 'GM1910', 'HD1901', 'HD1903', 'HD1900 Flow', 'HD1905', 'HD1900', 'HD1907', 'HD1911', 'HD1913', 'HD1910', 'GM1925', 'HD1925', 'GM1920', 'IN2013', 'IN2015', 'IN2010', 'IN2010', 'IN2017', 'IN2019', 'IN2023', 'IN2025', 'IN2020', 'OnePlus8Pro', 'KB2005', 'KB2001', 'KB2007', 'KB2003', 'KB2000', 'OnePlus 8T 5G', 'LE2115', 'LE2113', 'LE2111', 'LE2110', 'LE2120', 'LE2125', 'LE2123', 'LE2121', 'LE2127', 'OnePlus9Pro', 'LE2101', 'LE2100', 'MT2111', 'MT2110', 'ONEPLUS A19677', 'ONEPLUS A2345', 'Oneplus A31', 'Oneplus A3331', 'ONEPLUS A35904', 'ONEPLUS A37000', 'ONEPLUS A3EVB', 'ONEPLUS A62322', 'ONEPLUS A64794', 'ONEPLUS A65369', 'ONEPLUS A68333', 'ONEPLUS A70458', 'ONEPLUS A70791', 'ONEPLUS A78637', 'ONEPLUS A80828', 'ONEPLUS A83306', 'ONEPLUS A87046', 'ONEPLUS A90641', 'Oneplus A99831', 'PGKM10', 'PGKM10', 'PHK110', 'PHK110', 'PGP110', 'PGP110', 'PGZ110', 'ONEPLUS KB2023', 'OnePlus Nord', 'Oneplus Nord 2', 'DN2103', 'DN2101', 'CPH2399', 'CPH2401', 'AC2001', 'AC2003', 'IV2201', 'CPH2409', 'CPH2381', 'CPH2465', 'EB2103', 'EB2101', 'EB2101', 'BE2025', 'BE2026', 'BE2029', 'Nord N10 5G', 'BE2028', 'BE2013', 'BE2011', 'BE2012', 'CPH2459', 'GN2200', 'CPH2469', 'DE2118', 'DE2117', 'A0001', 'ONE E1001', 'ONE E1003', 'ONE E1001', 'ONE E1005']
        self.oppo = [""CPH1869"", ""CPH1929"",""CPH2107"", ""CPH2238"", ""CPH2389"",""CPH2401"", ""CPH2407"", ""CPH2413"", ""CPH2415"", ""CPH2417"", ""CPH2419"", ""CPH2455"", ""CPH2459"", ""CPH2461"", ""CPH2471"", ""CPH2473"", ""CPH2477"", ""CPH8893"", ""CPH2321"", ""CPH2341"", ""CPH2373"", ""CPH2083"", ""CPH2071"", ""CPH2077"", ""CPH2185"", ""CPH2179"", ""CPH2269"", ""CPH2421"", ""CPH2349"", ""CPH2271"", ""CPH1923"", ""CPH1925"", ""CPH1837"", ""CPH2015"", ""CPH2073"", ""CPH2081"", ""CPH2029"", ""CPH2031"", ""CPH2137"", ""CPH1605"", ""CPH1803"", ""CPH1853"", ""CPH1805"", ""CPH1809"", ""CPH1851"", ""CPH1931"", ""CPH1959"", ""CPH1933"", ""CPH1935"", ""CPH1943"", ""CPH2061"", ""CPH2069"", ""CPH2127"", ""CPH2131"", ""CPH2139"", ""CPH2135"", ""CPH2239"", ""CPH2195"", ""CPH2273"", ""CPH2325"", ""CPH2309"", ""CPH1701"", ""CPH2387"", ""CPH1909"", ""CPH1920"", ""CPH1912"", ""CPH1901"", ""CPH1903"", ""CPH1905"", ""CPH1717"", ""CPH1801"", ""CPH2067"", ""CPH2099"", ""CPH2161"", ""CPH2219"", ""CPH2197"", ""CPH2263"", ""CPH2375"", ""CPH2339"", ""CPH1715"", ""CPH2385"", ""CPH1729"", ""CPH1827"", ""CPH1938"", ""CPH1937"", ""CPH1939"", ""CPH1941"", ""CPH2001"", ""CPH2021"", ""CPH2059"", ""CPH2121"", ""CPH2123"", ""CPH2203"", ""CPH2333"", ""CPH2365"", ""CPH1913"", ""CPH1911"", ""CPH1915"", ""CPH1969"", ""CPH2209"", ""CPH1987"", ""CPH2095"", ""CPH2119"", ""CPH2285"", ""CPH2213"", ""CPH2223"", ""CPH2363"", ""CPH1609"", ""CPH1613"", ""CPH1723"", ""CPH1727"", ""CPH1725"", ""CPH1819"", ""CPH1821"", ""CPH1825"", ""CPH1881"", ""CPH1823"", ""CPH1871"", ""CPH1875"", ""CPH2023"", ""CPH2005"", ""CPH2025"", ""CPH2207"", ""CPH2173"", ""CPH2307"", ""CPH2305"", ""CPH2337"", ""CPH1955"", ""CPH1707"", ""CPH1719"", ""CPH1721"", ""CPH1835"", ""CPH1831"", ""CPH1833"", ""CPH1879"", ""CPH1893"", ""CPH1877"", ""CPH1607"", ""CPH1611"", ""CPH1917"", ""CPH1919"", ""CPH1907"", ""CPH1989"", ""CPH1945"", ""CPH1951"", ""CPH2043"", ""CPH2035"", ""CPH2037"", ""CPH2036"", ""CPH2009"", ""CPH2013"", ""CPH2113"", ""CPH2091"", ""CPH2125"", ""CPH2109"", ""CPH2089"", ""CPH2065"", ""CPH2159"", ""CPH2145"", ""CPH2205"", ""CPH2201"", ""CPH2199"", ""CPH2217"", ""CPH1921"", ""CPH2211"", ""CPH2235"", ""CPH2251"", ""CPH2249"", ""CPH2247"", ""CPH2237"", ""CPH2371"", ""CPH2293"", ""CPH2353"", ""CPH2343"", ""CPH2359"", ""CPH2357"", ""CPH2457"", ""CPH1983"", ""CPH1979""]
        self.vivo = ['vivo 1002T', 'Vivo 1605', 'vivo 1730', 'vivo 1809', 'vivo_1820', 'vivo 1835', 'vivo 1914', 'vivo 2010', 'vivo 2019', 'vivo 2019', 'vivo 2019', 'vivo 2023', 'vivo 2027', 'vivo 3969', 'VIVO 5', 'Vivo 6', 'Vivo 7 Pro', 'Vivo 8', 'Vivo 93K Prime', 'vivo A5 ', 'vivo a54', 'Vivo A54', 'vivo a57', 'Vivo A87', 'VIVO A94', 'VIVO AIR', 'VIVO C8818', 'vivo E1', 'vivo E3', 'vivo E3', 'vivo E5', 'Vivo EGO', 'V1962BA', 'vivo h5', 'V1824A', 'V1824A', 'V1824BA', 'V2217A', 'V2217A', 'V2218A', 'V2218A', 'V2218A', 'V2243A', 'V1955A', 'I1927', 'I1928', 'V2024A', 'V2025A', 'V2025A', 'V2049A', 'V2049A', 'I2009', 'I2012', 'I2012', 'V2136A', 'V2136A', 'V2141A', 'V2171A', 'I2017', 'V2172A', 'V2172A', 'I2022', 'I2019', 'I2019', 'I2201', 'V1914A', 'V1914A', 'V1981A', 'V2055A', 'V2118A', 'V2157A', 'V2157A', 'V2154A', 'V2196A', 'V2196A', 'V2199A', 'V2231A', 'V2238A', 'V1936AL', 'V1936A', 'V1922A', 'V1922A', 'V1922A ', 'V1916A', 'V2023A', 'V2023A', 'VIVO V2023A', 'V2065A', 'V2061A', 'V2061A', 'V2143A', 'V2106A', 'V2165A', 'V2165A', 'V2180GA', 'V1986A', 'V2012A', 'V2012A', 'V2073A', 'V2073A', 'I2011', 'V2148A', 'I2018', 'V1919A', 'V2131A', 'V2220A', 'I2202', 'I2206', 'I2203', 'I2202', 'I2127', 'I2202', 'I2208', 'I2208', 'I2126', 'I2126', 'I2126', 'V2164KA', 'V2164KA', 'VIVO IV', 'VIVO IV', 'VIVO IV', 'VIVO IV', 'Vivo J5', 'vivo 1805', 'vivo 1805', 'vivo NEX', 'V1923A', 'vivo 1912', 'V1923A', 'vivo 1912', 'vivo 1913', 'V1924A', 'V1924A', 'vivo 1913', 'V1950A', 'V1950A', 'vivo NEX A', 'vivo NEX A', 'vivo 1813', 'V1821A', 'V1821A', 'vivo NEX S', 'vivo NEX S', 'Vivo ONE', 'Vivo ONE', 'PA2170', 'vivo PD1628F_EX', 'vivo PD1709', 'vivo PD1709F_EX', 'vivo PD1709F_EX', 'vivo PD1728', 'vivo PD1728', 'vivo PD1832F_EX', 'vivo PD2046F_EX', 'vivo PD2050F_EX', 'vivo PD2055F_EX', 'vivo PD2059F_EX', 'Vivo S', 'V1831A', 'V1831A', 'VIVO S1', 'Vivo S1 Prime', 'V1832A', 'V1832T', 'V2121A', 'V2121A', 'V2130A', 'V2130A', 'Vivo S11', 'Vivo S11 ', 'vivo S11t', 'vivo S11t', 'vivo S11t', 'vivo S11t', 'vivo S12', 'V2162A', 'Vivo S13', 'V2203A', 'V2207A', 'V2190A', 'V2244A', 'vivo S1Pro', 'Vivo S20 ', 'Vivo S21 ', 'Vivo S31', 'Vivo S4', 'Vivo S40', 'Vivo S41 /MMB439M', 'V1932A', 'vivo S6', 'V1962A', 'vivo S6T', 'V2020CA', 'V2020A', 'Vivo S76', 'V2031EA', 'vivo S7i(t)', 'vivo S7i(t)', 'vivo S7i(t)', 'V2080A', 'vivo S7t', 'vivo_S7t', 'vivo S7t', 'S7t 5G', 'vivo S7w', 'vivo S8', 'vivo S9', 'vivo S9', 'vivo S9', 'V2072A', 'V2048A', 'vivo S9t', 'V2168', 'V2168', 'V2153', 'V2153', 'V2150', 'V2151', 'V2151', 'V2151', 'V2143', 'vivo TD1602_EX', 'vivo U1', 'vivo 1916', 'vivo 1916', 'vivo 1921', 'V1941A', 'V1941A', 'V1928A', 'vivo V1', 'vivo V1', 'vivo V10', 'Vivo V10', 'VIVO V11', 'Vivo V11', 'vivo 1804', 'vivo 1804', 'vivo 1806', 'vivo 1806', 'vivo v11pro', 'vivo 1819', 'vivo 1818', 'vivo 1818', 'vivo 1920', 'vivo 1919', 'vivo 1907', 'vivo 1907', 'vivo 1907_19', 'vivo 1910', 'vivo 1909', 'vivo 1910', 'vivo 1933', 'vivo 1933', 'vivo V1907', 'vivo v19neo', 'vivo V1Max', 'vivo V1Max', 'vivo V2', 'V2040', 'vivo 2018', 'vivo 2018', 'V2022', 'Vivo V20A', 'Vivo V20G', 'V2066', 'V2108', 'V2050', 'V2050', 'V2050', 'V2061', 'V2055', 'Vivo V21S', 'V2130', 'V2132A', 'V2116', 'V2115', 'V2116', 'V2116', 'V2126', 'V2126', 'V2228', 'V2228', 'V2158', 'V2158', 'V2202', 'V2202', 'V2201', 'V2246', 'V2230', 'V2230', 'V2237', 'vivo V3', 'vivo V3', 'vivo V3Max A', 'vivo V3Max L', 'vivo v30', 'vivo v31', 'vivo V3L', 'vivo V3L', 'vivo V3L', 'vivo V3L', 'vivo V3M A', 'vivo V3M A', 'vivo V3MA', 'vivo_V3Max', 'vivo v45', 'vivo 1601', 'vivo V5', 'vivo 1609', 'vivo 1611', 'Vivo V51', 'Vivo V54', 'vivo 1612', 'vivo 1713', 'vivo V5S A', 'vivo 1718', 'vivo 1716', 'vivo Y79A', 'vivo Y79A', 'V2166BA', 'Vivo V8', 'vivo 1723', 'vivo V9 mini', 'vivo 1851', 'VIVO V9Pro', 'vivo 1851', 'vivo 1727', 'Vivo X', 'V2178A', 'V2229A', 'V2170A', 'V2170A', 'vivo Xplay3S', 'vivo Xplay3S', 'vivo Xplay3S', 'vivo Xplay5A', 'vivo Xplay5A', 'vivo Xplay5A', 'vivo Xplay5S', 'vivo Xplay5S', 'vivo Xplay6', 'vivo Xplay6L', 'vivo Xplay6', 'vivo Xplay6', 'vivo X710L', 'vivo X710L', 'vivo X710L', 'vivo X710L', 'vivo X1', 'vivo X1', 'vivo X1', 'vivo X1', 'Vivo X11', 'vivo X1S', 'vivo X1S', 'vivo X1S', 'vivo X1St', 'vivo X1St', 'vivo X1St', 'vivo X1St', 'vivo X1St', 'vivo X1W', 'vivo X1w', 'VIVO X2', 'VIVO X2', 'VIVO_X2', 'vivo X20', 'vivo X20A', 'vivo X20Plus A', 'vivo 1720', 'vivo X20Plus UD', 'vivo X20Plus UD', 'vivo X21', 'vivo X21A', 'vivo X21UD A', 'vivo X21i', 'vivo X21i A', 'vivo X21i', 'vivo X21i A ', 'V1814A', 'V1814T', 'V1814T', 'V1814A', 'V1809A', 'V1809A', 'V1816A', 'V1809T', 'V1816T', 'V1829A', 'V1838A', 'V1838T', 'V1829T', 'V1836A', 'V1836A', 'V1836T', 'vivo X27Pro', 'V1938CT', 'V1938T', 'V1938T', 'vivo X3F', 'vivo X3F', 'vivo X3F', 'vivo X3L', 'vivo X3L', 'vivo X3S', 'vivo X3S', 'vivo X3S', 'vivo X3S', 'vivo X3S', 'vivo X3S', 'vivo X3S W', 'vivo X3S W', 'vivo X3S W', 'vivo X3S W', 'vivo X3t', 'vivo X3t', 'vivo X3t', 'vivo X3t', 'vivo X3V', 'vivo X3V', 'vivo X3V', 'vivo X3V', 'Vivo X40', 'vivo X5L', 'vivo X5', 'vivo X5L', 'vivo X5Pro D', 'vivo X5Pro L', 'vivo X5Pro V', 'vivo X5Pro D', 'vivo X5Pro D', 'V2001A', 'V2001A', 'vivo 2004', 'vivo 2005', 'vivo 2005', 'V1937', 'vivo 1937', 'V1937', 'V1937', 'vivo 2006', 'vivo 2006', 'V2005A', 'V2011A', 'X50 Pro+', 'V1930', 'V1930', 'vivo X510t', 'vivo X510t', 'vivo X510t', 'vivo X510t', 'vivo X510t', 'vivo X520L', 'vivo X5F', 'vivo X5M', 'vivo X5M', 'vivo X5M', 'vivo X5Max ', 'vivo X5Max L', 'vivo X5Max L', 'vivo X5Max S', 'vivo X5Max V', 'vivo X5S L', 'vivo X5S L', 'vivo X5V', 'vivo X5V', 'vivo X5V', 'vivo X6D', 'vivo X6A', 'vivo X6Plus D', 'vivo X6Plus A', 'vivo X6Plus L', 'vivo X6Plus D', 'vivo X6Plus A', 'vivo X6Plus D', 'vivo X6Plus L', 'V2046A', 'V2059A', 'V2046A', 'V2045', 'V2046', 'V2047A', 'V2056A', 'V2085A', 'vivo X6S A', 'vivo X6S A', 'vivo X6S A', 'vivo X6S A', 'vivo X6SPlus D', 'vivo X6SPlus D', 'vivo X6SPlus D', 'vivo X6SPlus D', 'vivo X6SPlus A', 'vivo X7L', 'vivo X7Plus', 'vivo X7Plus', 'V2133A', 'V2104', 'V2104', 'V2105', 'V2134A', 'V2105', 'V2145A', 'V2114', 'V2145A', 'vivo X710F', 'vivo X710F', 'vivo X710F', 'vivo X710F', 'V2144', 'V2183A', 'V2144', 'V2208', 'V2185A', 'V2145', 'V2185A', 'Vivo X83', 'vivo X9', 'vivo X9L', 'vivo X9', 'vivo X9', 'vivo X9Plus', 'vivo X9Plus L', 'V2241A', 'V2242A', 'V2242A', 'V2227A', 'vivo X9i', 'vivo X9i', 'vivo X9i', 'vivo X9s', 'vivo X9s L', 'vivo X9s Plus', 'vivo X9s Plus', 'vivo X9s Plus L', 'vivo X9s Plus', 'VIVO XL', 'vivo Xplay', 'vivo Xshot', 'vivo Xshot', 'vivo Xshot', 'vivo Xshot', 'V2203', 'V2221', 'Vivo y1', 'Vivo Y1', 'V2168A', 'V2168A', 'vivo 1906', 'V2028', 'vivo Y11t', 'vivo Y11t', 'vivo Y11t', 'vivo 1904', 'V2163A', 'V2102', 'V2102', 'vivo 2007', 'vivo 2007', 'Vivo Y12I Pro', 'V2026', 'V2042', 'V2033', 'V2039', 'V2069', 'V2026_21', 'vivo Y13L', 'vivo Y13', 'vivo Y13L', 'vivo Y13L', 'vivo Y13i', 'vivo_Y13i', 'vivo Y13iL', 'vivo Y13iL', 'vivo Y13T', 'vivo Y13T', 'vivo 1901', 'vivo Y15T', 'vivo Y15T', 'V2134', 'V2147', 'V2147', 'V2212', 'V2120', 'V2204', 'V2214', 'V2204', 'vivo 1902', 'vivo 1902_19', 'VIVO 1902', 'vivo Y17T', 'vivo Y17T', 'vivo_Y17T', 'vivo Y17T', 'vivo Y17W', 'vivo Y17W', 'vivo Y17W', 'vivo Y18L', 'vivo Y18L', 'vivo Y18L', 'vivo 1915', 'vivo Y19t', 'vivo Y19t', 'vivo Y19t', 'vivo Y19t', 'Vivo Y1i', 'vivo 2015', 'vivo 2015', 'V2029', 'V2027', 'V2043_21', 'V2101', 'V2070', 'V2054', 'V2052', 'V2037', 'V2032', 'V2038', 'V2038', 'V2129', 'V2129', 'V2111', 'V2149', 'V2140', 'V2140', 'V2152', 'V2152', 'V2110', 'V2110', 'V2131', 'V2135', 'V2207', 'vivo Y22iL', 'vivo Y22iL', 'V2206', 'V2206', 'vivo Y23L', 'vivo Y23L', 'vivo y23l', 'vivo Y23L', 'vivo Y23L', 'vivo Y23L', 'vivo 1613', 'vivo Y27', 'vivo Y27L', 'vivo Y27', 'vivo Y28', 'vivo Y28', 'vivo Y28L', 'vivo Y28L', 'vivo Y29L', 'vivo Y29L', 'vivo Y29L', 'V1901A', 'V1901A', 'V1901A', 'V1901T', 'V1930A', 'vivo 1938', 'V2034A', 'V2036A', 'V2099A', 'V2099A', 'V2160', 'V2160', 'V2160', 'V2066BA', 'V2066A', 'Y30g', 'Vivo Y30S', 'vivo Y31L', 'V2068', 'V2054A', 'V2068A', 'V2068', 'V2158A', 'Vivo Y32', 'V2180A', 'V2057', 'V2109', 'V2166A', 'V2166A', 'V2146', 'V2205', 'V2205', 'vivo Y37A', 'vivo Y37', 'V2044', 'vivo Y3t', 'vivo Y3t', 'vivo Y3t', 'vivo y41', 'vivo Y5 ', 'Vivo Y5', 'vivo 1935', 'VIVO Y50(2021)', 'V2023EA', 'Y50t', 'V2035', 'vivo Y51L', 'vivo Y51A', 'V2030', 'vivo 1707', 'V2031_21', 'vivo Y51t L', 'vivo Y51t L', 'vivo Y51t L', 'V2053', 'V2057A', 'vivo Y53', 'vivo 1606A', 'vivo Y53n', 'V2058', 'V2123A', 'V2069A', 'V2045A', 'V2045A', 'vivo Y55A', 'V2127', 'V2127', 'vivo 1603', 'vivo Y55n', 'vivo 1610', 'V2164A', 'V2164A', 'V1934A', 'V2006', 'vivo Y613', 'vivo Y613', 'vivo Y613F', 'vivo Y622', 'vivo Y622', 'vivo Y622', 'vivo Y622', 'vivo Y622', 'vivo Y623', 'vivo Y623', 'vivo Y627', 'vivo Y627', 'vivo Y627', 'vivo Y627', 'vivo Y628', 'vivo Y628', 'vivo 1719', 'vivo Y66', 'vivo Y66L', 'vivo Y66i A', 'vivo Y67', 'vivo Y67A', 'vivo Y67L', 'vivo Y685', 'vivo 1714', 'vivo Y69A', 'V2002A', 'V2002A', 'vivo Y71A', 'vivo 1724', 'vivo Y71A', 'vivo 1801', 'V2041', 'V2060', 'V2102A', 'V1731CA', 'vivo Y73', 'Vivo Y73 /MMB239M', 'V2059', 'V2031A', 'V2164PA', 'V2117', 'vivo Y75A', 'V2142', 'V2142', 'vivo Y75s', 'vivo Y75s', 'vivo Y75S', 'vivo Y75s', 'V2124', 'V2156A', 'V2219A', 'V2219A', 'V2169', 'V2169', 'V1913A', 'vivo 1808i', 'vivo 1803', 'vivo 1803', 'vivo 1812', 'vivo Y81S', 'V1732A', 'V1732T', 'vivo Y83A', 'vivo 1802', 'vivo Y83A', 'vivo Y83A', 'vivo 1726', 'Vivo Y83I', 'vivo Y85A', 'vivo Y85', 'Vivo Y85i', 'Vivo Y86', 'V1730EA', 'vivo v1730ea', 'vivo 1908', 'vivo 1823', 'vivo 1908_19', 'vivo 1817', 'vivo 1811', 'vivo Y913', 'vivo Y913', 'vivo Y91C', 'vivo 1820', 'vivo 1816', 'vivo Y923', 'vivo Y923', 'vivo Y927', 'vivo Y927', 'vivo Y928', 'vivo Y928', 'vivo Y928', 'vivo 1814', 'V1818A', 'V1818A', 'vivo 1814', 'vivo Y937', 'vivo Y937', 'vivo Y937', 'V1818CT', 'V1818CA', 'vivo 1807', 'vivo Y95', 'V1813A', 'V1813T', 'V1813A', 'vivo Y97', 'V1945A', 'V1801A0', 'vivo Z1', 'vivo 1918', 'vivo 1951', 'vivo 1951', 'VIVO Z1Pro', 'vivo 1918', 'vivo 1918 Flow', 'Vivo Z10', 'vivo Z1i', 'V1730DA', 'V1730DT', 'vivo Z1i', 'vivo_1951', 'vivo 1917', 'V1813BA', 'V1813BT', 'V1813BT', 'Vivo Z34', 'vivo Z3x', 'V1730GA', 'vivo Z3x', 'vivo Z3x', 'V1921A', 'V1911A', 'V1911A', 'V1911A', 'V1990A', 'V1990A', 'V1963A', 'V1963A']
        self.infinix = [""Infinix X652B"", ""Infinix X680"", ""Infinix X690"", ""Infinix X625B"", ""Infinix X655"", ""Infinix X680B"", ""Infinix X652B"", ""Infinix X680"", ""Infinix X690"", ""Infinix X625B"", ""Infinix X655"", ""Infinix X680B"", ""Infinix X652B"", ""Infinix X680"", ""Infinix X690"", ""Infinix X625B"", ""Infinix X655"", ""Infinix X680B"", ""Infinix X652B"", ""Infinix X680"", ""Infinix X690"", ""Infinix X625B"", ""Infinix X655"", ""Infinix X680B"", ""Infinix X652B"", ""Infinix X680"", ""Infinix X690"", ""Infinix X625B"", ""Infinix X655"", ""Infinix X680B""]
        self.opp = random.choice([""OP4F97"", ""OP4BA5L1"", ""OP664D1"", ""OP5F11L1"", ""OP2A92"", ""OP8F17"", ""OP8F31"", ""OP4C9E1"", ""OP5B31"", ""OP4BA6L1"", ""OP2B87"", ""OP6F21"", ""OP6C8E1"", ""OP8F11"", ""OPPOA16"", ""OPPOA15"", ""OPPOA11"", ""OPPOA73"", ""OPPOA37"", ""OPPOA53"", ""OPPOA33"", ""OPPOA93"", ""OPPOA35"", ""OPPOA83"", ""OPPOA57"", ""OPPOA71"", ""OPPOA39"", ""OPPOA3"", ""OPPOA51"", ""OPPOA27"", ""OPPOA79""])
        self.trek = random.choice([""mt6769"", ""mt6768"", ""mt6767"", ""mt6765"", ""mt6763"", ""mt6757"", ""mt6755"", ""mt6753"", ""mt6739"", ""mt6737"", ""mt6735"", ""mt6595"", ""mt6582"", ""mt6572"", ""mt6571"", ""mt6570"", ""mt8563"", ""mt8167"", ""mt8163"", ""mt8135"", ""mt8127"", ""mt8125"", ""mt7623"", ""mt6797"", ""mt6592"", ""mt6590"", ""mt6580"", ""mt6573"", ""mt6575"", ""mt6260"", ""mt6236""])
        self.igversi = (""100.0.0.17.129,100.0.0.17.129,100.0.0.17.129,100.0.0.17.129,100.0.0.17.129,100.0.0.17.129,79.0.0.21.101,78.0.0.11.104,77.0.0.20.113,76.0.0.15.395,75.0.0.23.99,74.0.0.21.99,73.0.0.22.185,72.0.0.21.98,71.0.0.18.102,70.0.0.22.98,69.0.0.30.95,68.0.0.11.99,67.0.0.25.100,66.0.0.11.101,65.0.0.12.86,64.0.0.14.96,63.0.0.17.94,62.0.0.19.93,61.0.0.19.86,60.1.0.17.79,59.0.0.23.76,58.0.0.12.73,57.0.0.9.80,56.0.0.13.78,55.0.0.12.79,54.0.0.14.82,53.0.0.13.84,52.0.0.8.83,51.0.0.20.85,50.1.0.43.119,271.1.0.21.84,131.0.0.23.11,130.0.0.31.12,128.0.0.26.12,126.0.0.25.12,125.0.0.20.12,124.0.0.17.47,123.0.0.21.11,122.0.0.29.23,120.0.0.29.11,119.0.0.33.14,118.0.0.28.12,117.0.0.28.12,115.0.0.26.11,114.0.0.38.12,113.0.0.39.12,112.0.0.29.12,111.1.0.25.15,110.0.0.16.11,109.0.0.18.12,108.0.0.23.11,107.0.0.27.12,106.0.0.24.11,105.0.0.18.11,104.0.0.21.11,103.1.0.15.11,102.0.0.20.11,101.0.0.15.12,100.0.0.17.12,99.0.0.32.182,98.0.0.15.119,97.0.0.32.119"").split(',')
        self.dix = random.choice(self.igversi)
        self.kode = random.choice(['104766893','104766900','102221278','104766888','105842053','93117670','94080607','96794592','102221279','100986894','ru_RU','94080606','103516660','98288242','103516666','103516653','uk_UA','96794590','100986893','102221277','95414344','99640920','99640911','96794591','ru_UA','99640905','100986890','107092313','99640900','93117667','100521966','90841939','98288239','89867440','105842051','de_DE','96794584','105842050','en_US','pt_PT','109556223','107092318','en_GB','108357722','112021130','107092322','119104798','108357720','119104802','112021131','100986892','113249569','107104231','fr_FR','pt_BR','109556226','116756948','113249553','113249561','110937441','118342010','120662545','117539703','119875222','110937448','121451799','115994877','108357718','120662547','107608058','122206624','95414346','107092308','112021128','90841948','119875229','117539698','120662550','en_NZ','123103748','91882538','121451810','91882537','118342006','113948109','122338251','110937453','es_US','118342005','121451793','109556219','119875225','en_CA','109556220','117539695','115211358','91882539','119104795','89867442','94080603','164094539','175574628','185203690','188791648','188791674','187682694','188791643','177770724','192992577','180322810','195435560','196643820','196643821','188791637','192992576','196643799','196643801','196643803','195435546','194383411','197825254','197825260','197825079','171727793','197825112','197825012','197825234','179155086','192992563','197825268','166149669','192992565','198036424','197825223','183982969','199325909','199325886','199325890','199325911','197825118','127049003','197825169','197825216','197825127','200395960','179155096','199325907','200396014','188791669','197825133','170693926','200396005','171727780','201577064','201576758','201577192','201775949','201576944','201775970','143631574','126223520','201775951','167338518','144612598','170693940','201775813','200395971','201775744','201775946','202766609','145652094','202766591','202766602','203083142','179155088','202766608','199325884','180322802','202766603','195435547','165030894','201576967','201775904','194383424','197347903','202766610','185203693','201576898','204019468','187682682','204019456','201775901','204019471','204019454','204019458','202766601','204019452','173238721','204019466','148324036','202766581','158441904','201576903','205280538','205280529','201576813','173238729','141753096','205280531','163022072','201576887','163022088','141753091','148324051','205280528','154400383','205280537','201576818','157405371','205858383','201576811','165031093','187682684','145652090','206670917','185203686','192992561','183982986','206670927','150338061','183982962','127049016','175574603','155374054','205858247','135374896','206670920','169474958','206670926','160497905','161478672','192992578','206670929','131223243','206670916','142841919','187682681','171727795','151414277','206670922','160497915','207505137','165030898','208061741','208061688','208180365','208061674','197825052','147375133','208061744','196643798','208061725','122338247','157536430','208061728','209143963','208727155','209143726','205280539','209143903','209143970','181496409','208061739','209143957','210180522','210180512','209143881','209143712','180322805','210180521','195435561','210370119','210180523','210180493','175574596','210180510','210180480','210180513','210180517','176649504','177770663','210180479','211114117','210908379','206670921','211114134','183982943','211399345','211399342','211399332','201775962','211574187','211574249','210180519','167338559','185203649','124583960','211399337','211399335','197825163','166149717','211399336','212063371','211399329','209143954','210180482','168361634','212214017','209143867','211399341','211399340','212214027','195435510','122338243','139237670','152367502','212676872','212676898','212676875','212676895','212676901','209823384','212676869','196643822','212676878','213367980','213368005','212676886','213558743','209143913','212214039','158441917','174081672','213558750','201775966','188791681','185203705','143631575','161478664','214245350','161478663','212676881','213558770','214245346','138226752','214245221','214245182','214245206','214245218','214245354','214245295','214245199','214245304','214245280','214446313','214245187','214245288','214139002','202766605','214245319','214646783','158441914','215246048','195435544','208061677','215464400','128676146','215464389','215464385','215464390','215464398','182747397','215464393','216233197','201775791','216817344','215464395','216817286','185203642','164094529','216817305','215464401','162439029','215464382','216817280','216817331','214330969','216817299','216817357','217948981','217948980','217948956','217948959','217948968','216817296','217948952','217948982','216817269','219308759','219308726','182747387','219308721','219308754','219308763','176649435','183982982','219909486','127049038','219308730','221134012','221134032','221134009','221134037','194383426','221134029','221134005','221134018','145652093','225283632','165031108','225283625','224652582','139906580','225283628','225283624','226142579','225283634','225283631','226493211','225283623','185203672','156514151','218793478','225283621','227299063','225283627','227299064','227299021','227299027','227544546','227299041','227299060','227299012','228970707','228970705','227299005','228970687','228970683','228970694','228970710','228970689','160497904','195435540','129611419','229783842','230291708','228970681','148324047','230877709','231192211','230877674','230877705','230877678','211399328','209143896','230877713','194383428','230877689','221134002','231457747','208061721','230877671','230877668','232868027','232088496','185203706','232868005','232867964','232868001','232868015','232868031','232867959','232868009','164094526','232867941','234041364','182747399','232868024','232867949','234847239','234847238','234847234','162439040','234847229','234847230','181496427','234847240','232867993','195435558','232867967','232867997','234847227','235871830','221133998','236572344','236572377','153386780','236572337','236572349','236572372','234847226','236572383','237507050','238093993','238093948','238093954','238093999','238093982','239490565','239490555','238093946','238093966','239490563','239490550','239974660','240726416','239490568','240726484','240726452','239490551','239490548','240726426','240726476','240726491','240726471','241043882','241114613','236572331','241267273','240726407','241456456','241267278','241267269','241114619','241456445','241456451','242168941','242168928','242168931','242168939','242168925','240726436','242375239','144722090','242168935','242290370','157405369','242168933','242290355','242703240','242807362','242168923','242168943','242991209','243646252','243646269','242991200','243711120','243646267','243711093','243975802','243646263','243646248','243646255','244167578','128676156','194383413','243975835','244390417','244390338','245196084','245196061','240726392','245196055','243646273','245196082','245196063','245196070','245666450','245466705','245870319','245870301','245870347','245196087','246889064','246889072','246889073','246889074','246889065','247146500','246889063','245870262','247370962','247146481','246889068','246889062','247541884','247541831','247370955','247370942','247720736','247720751','248310216','248310220','248310208','247720744','248399342','248310210','247720747','248310206','248717751','248310212','248310221','248823392','248583561','248310205','248899028','248955251','248955247','249178904','248955244','249507608','249507582','249507588','249507585','248955240','249507607','249507592','249810008','249966137','249507610','249966081','249966100','249507599','249966140','249810004','123790722','250188776','249628096','250188788','250742103','250742113','250742102','250877984','250742105','250742111','251048681','250742107','250742115','251048695','251304696','251304682','251524431','251530710','251304689','251524420','251524409','251524390','250742101','251048673','252055918','252055945','251920416','252055944','252055925','252239038','252055936','252055915','252055948','252390568','252390583','252580134','252740497','252740485','252740490','253120615','253325372','253325384','253325385','253447816','253146263','253120607','253325374','253120598','253325371','253447808','253447809','253325378','253447814','253447807','253447811','253447817','253447813','181496411','253447806','255191971','255013798','255777478','255777471','255777474','255777472','255959637','255777477','255959614','255959635','256099199','256099204','150338064','256099153','256099205','256099156','255983744','256107300','255777470','126223536','256203326','256099190','256099151','256324061','256324047','256203339','256966628','256966589','256966626','256966590','124584015','257456576','256966593','257456590','256966629','256966587','256966592','257456586','257456539','259829115','259829104','259829113','260037038','259829105','259829109','260037030','260149625','259829103','260149621','260465044','259829116','260724710','179155058','261079769','261079761','261079768','261079762','261079771','261276939','157405370','135374885','261079765','261393056','261393062','261079760','181496406','182747360','261504698','261690888','261504706','169474957','262218766','262290715','262290774','262372432','262372425','262372431','262886993','262886995','262372426','262886987','261079764','262886986','262886988','262886990','262372433','262886996','263652962','264009049','264009019','264009030','264009021','264009023','264009052','264009024','261763534','174081651','169474965','232867942','264009013','255959606','264009028','267397344','267397322','267925737','267397343','267925708','267397327','267397321','267925714','267258517','267925705','268773287','267925733','268773233','267925702','268773286','159526770','268773239','268773272','269790795','269285030','269790805','269790803','269790792','268773227','269849047','270426177','270426174','271182277','269790789','271182270','268773290','271182266','271182276','269790798','271182279','271182265','271182267','269790807','271823819','272382110','272382111','272382106','272693584','272382095','272382093','272382098','272382100','272382103','273728833','273371577','273728832','273728798','273907093','273907111','273907108','238093987','273907112','273907103','274774869','274774891','274774908','273907087','274774904','274774875','274774914','275292626','276027938','276028040','276027963','276028037','276028020','276028017','274774862','276028013','249507580','276028029','273907098','277249238','277249248','277249249','276028033','277249250','277249226','275292623','277249214','277249242','277249237','277249240','278625447','278002558','278625420','278625431','278625423','117539687','278625416','278625444','277249213','278625451','279469964','279996068','279996060','279996067','279996058','280194220','279996065','279996063','279996061','279996059','280894196','273728787','271182262','281579032','281579023','276514494','281579021','281579027','281579033','268773274','283072590','281579025','283072571','282619332','283489774','283072587','283072567','281579031','283072580','283072574','284459213','284459224','179155089','256966583','284459214','283072585','284459218','284459223','284459225','285338607','275113919','284459221','284459212','284459215','285855793','285855800','285855803','285855791','285855802','285855804','285855795','286809973','287420974','287421023','287420968','287420979','287421017','287421005','287421019','287421012','277249241','288682406','287421026','288682405','288682397','288682407','261079772','288682398','288682401','288205409','289692198','287420997','289692186'])
        self.dpi_pxl = random.choice(['240dpi; 1760x792', '240dpi; 1920x864', '320dpi; 2400x1080', '400dpi; 3200x1440', '480dpi; 1080x1920', '320dpi; 900x1600', '320dpi; 720x1280', '240dpi; 540x960', '280dpi; 1920x1080', '240dpi; 160x900', '240dpi; 1280x720', '160dpi; 960x540','160dpi; 623x1280'])
        self.dpi = random.choice(['320dpi','640dpi','213dpi','480dpi','420dpi','240dpi','280dpi','160dpi','560dpi','540dpi','272dpi','360dpi','720dpi','270dpi','450dpi','600dpi','279dpi','210dpi','180dpi','510dpi','300dpi','454dpi','314dpi','288dpi','401dpi','153dpi','267dpi','345dpi','493dpi','340dpi','604dpi','465dpi','680dpi','256dpi','290dpi','432dpi','273dpi','120dpi','200dpi','367dpi','419dpi','306dpi','303dpi','411dpi','195dpi','518dpi','230dpi','384dpi','315dpi','293dpi','274dpi','235dpi'])
        self.pxl = random.choice(['720x1280','1440x2560','1440x2768','1280x720','1280x800','1080x1920','540x960','1080x2076','1080x2094','1080x2220','480x800','768x1024','1440x2792','1200x1920','720x1384','1920x1080','720x1369','800x1280','720x1440','1080x2058','600x1024','720x1396','2792x1440','1920x1200','2560x1440','1536x2048','720x1382','1080x2113','1080x2198','1080x2131','720x1423','1080x2069','720x1481','1080x2047','1080x2110','1080x2181','1080x2209','1080x2180','1080x2020','1080x2095','1440x2723','1080x2175','720x1365','1440x2699','1080x2218','2699x1440','1440x2907','1080x2257','720x1370','1080x2042','720x1372','1080x2200','1080x2186','720x1361','1080x2024','1080x2006','720x1402','1440x2831','720x1454','1080x2064','1440x2933','720x1411','720x1450','1440x2730','1080x2046','2094x1080','540x888','1440x2759','1080x2274','1080x2178','1440x2706','720x1356','720x1466','1440x2900','2560x1600','1080x2038','1600x2452','1080x2129','720x1422','720x1381','1080x2183','1080x2285','800x1216','1080x2216','1080x2168','1080x2119','1080x2128','1080x2273','2274x1080','1080x2162','1080x2164','2076x1080','1024x768','1080x2173','1440x2845','1080x2134','720x1379','1440x2838','1080x2139','2131x1080','1440x2744','1080x2192','720x1406','1440x2960','1080x2029','2042x1080','1080x2212','1406x720','1080x2288','2047x1080','1080x2051','720x1398','1280x736','1382x720','720x1353','1080x2050','1080x2028','1080x2256','2711x1440','2175x1080','1080x2281','2560x1492','1440x2923','1200x1845','1080x2189','1080x2002','1440x2711','2110x1080','960x540','1080x2033','2200x1080','720x1452','720x1480','1440x2735','720x1472','1080x2277','1080x2169','2874x1440','1600x2560','1080x2151','2218x1080','1080x2182','720x1468','1440x2898','1080x2011','1080x2201','720x1380','1080x2287','2069x1080','1200x1836','2046x1080','720x1439','2058x1080','2182x1080','720x1399','1080x2282','1440x2721','1080x2324','720x1432','1080x2165','1080x2150','1080x2156','1080x1872','1440x3048','1532x2560','720x1355','720x1390','720x1476','720x1410','1080x2032','720x1437','1440x2682','1440x2921','1080x2270','1080x2160','720x1446','1200x1848','1440x2874','1080x2309','1080x2174','1440x2867','1080x2060','1080x2196','1080x2401','1536x1922','1080x2280','1080x2123','720x1435','1440x2927','1080x2276','720x1448','720x1469','720x1344','1080x2187','540x937','1440x3028','1080x2184','1440x2718','1080x2326','840x1834','1440x2935','1440x2880','1440x2892','2048x2048','1080x2195','1080x2322','720x1419','987x1450','1080x2092','1440x3047','720x1358','1080x2136','720x1357','1080x2093','720x1477','1080x2312','1080x2361','720x1341','720x1507','1080x2172','720x1337','1080x2177','1080x2125','1440x2891','1600x2434','720x1394','1080x2159','720x1387','1080x2166','1080x2154','1080x2147','1440x2747','1080x2105','1440x2911','720x1473','1080x2055','1080x2265','720x1436','1080x2190','1600x2526','720x1373','720x1415','1080x2249','1080x2254','720x1455','1440x3040','1080x2149','720x1385','1440x3036','1080x2111','1440x2904','720x1442','720x1377','1080x2307','1080x2327','1080x2141','1080x2025','720x1430','720x1375','1080x2283','1440x2779','1080x2321','1080x2268','1440x2758','1752x2698','1080x2267','1200x1856','1440x2756','720x1464','1080x2234','1080x2171','1080x2155','720x1463','1080x2122','720x1467','1080x2264','720x1349','1440x2999','720x1458','1080x2015','720x1431','1242x2208','1080x2185','1080x2148','1080x2163','1440x2780','720x1445','1080x2146','1200x1916','720x1502','1200x1928','720x1506','720x1424','720x1465','720x1420','1080x2176','720x1521','1080x2315','1080x2400','720x1471','1080x2157','1600x2458','1080x2067','1080x2191','1080x2271','720x1407','800x1208','1080x2087','1080x2199','578x1028','720x1485','540x879','1080x2179','720x1555','810x1598','720x1378','1200x1897','720x1395','720x1459','900x1600','1080x2275','1440x2733'])
        self.samsung = [""SM-A205F"",""SM-J120H"",""SM-J120F"",""SM-J120M"",""SM-J111M"",""SM-J111F"",""SM-J110H"",""SM-J110G"",""SM-J110F"",""SM-J110M"",""SM-J105H"",""SM-J105Y"",""SM-J105B"",""SM-J106H"",""SM-J106F"",""SM-J106B"",""SM-J106M"",""SM-J200F"",""SM-J200M"",""SM-J200G"",""SM-J200H"",""SM-J200F"",""SM-J200GU"",""SM-J260M"",""SM-J260F"",""SM-J260MU"",""SM-J260F"",""SM-J260G"",""SM-J200BT"",""SM-G532G"",""SM-G532M"",""SM-G532MT""]
        self.cgsm = [""dream2qltesq"", ""beyond2q"", ""broadway"", ""dreamqltevzw"", ""b2q"", ""a7y18lte"", ""a50qlteue"", ""a42xqlte"", ""a7y18lte"", ""a40lte"", ""a6plte"", ""a52xqlteue"", ""a5y20qlteue"", ""a3xelte"", ""a42xqlteue"", ""a3xelte"", ""a41lte"", ""a72xlte"", ""dreamlte"", ""hero2qltevzw"", ""beyond0lte"", ""beyond2"", ""starlte"", ""a5y17lte"", ""a7xelte"", ""a71xqlteue"", ""dream2qlteue"", ""dreamqltespr"", ""a5y17lte"", ""beyond1qlteue"",""herolte"",""zerolte"",""hero2te""]
        self.realme = [""RMX3516"", ""RMX3371"", ""RMX3461"", ""RMX3286"", ""RMX3561"", ""RMX3388"", ""RMX3311"", ""RMX3142"", ""RMX2071"", ""RMX1805"", ""RMX1809"", ""RMX1801"", ""RMX1807"", ""RMX1803"", ""RMX1825"", ""RMX1821"", ""RMX1822"", ""RMX1833"", ""RMX1851"", ""RMX1853"", ""RMX1827"", ""RMX1911"", ""RMX1919"", ""RMX1927"", ""RMX1971"", ""RMX1973"", ""RMX2030"", ""RMX2032"", ""RMX1925"", ""RMX1929"", ""RMX2001"", ""RMX2061"", ""RMX2063"", ""RMX2040"", ""RMX2042"", ""RMX2002"", ""RMX2151"", ""RMX2163"", ""RMX2155"", ""RMX2170"", ""RMX2103"", ""RMX3085"", ""RMX3241"", ""RMX3081"", ""RMX3151"", ""RMX3381"", ""RMX3521"", ""RMX3474"", ""RMX3471"", ""RMX3472"", ""RMX3392"", ""RMX3393"", ""RMX3491"", ""RMX1811"", ""RMX2185"", ""RMX3231"", ""RMX2189"", ""RMX2180"", ""RMX2195"", ""RMX2101"", ""RMX1941"", ""RMX1945"", ""RMX3063"", ""RMX3061"", ""RMX3201"", ""RMX3203"", ""RMX3261"", ""RMX3263"", ""RMX3193"", ""RMX3191"", ""RMX3195"", ""RMX3197"", ""RMX3265"", ""RMX3268"", ""RMX3269"",""RMX2027"", ""RMX2020"", ""RMX2021"", ""RMX3581"", ""RMX3501"", ""RMX3503"", ""RMX3511"", ""RMX3310"", ""RMX3312"", ""RMX3551"", ""RMX3301"", ""RMX3300"", ""RMX2202"", ""RMX3363"", ""RMX3360"", ""RMX3366"", ""RMX3361"", ""RMX3031"", ""RMX3370"", ""RMX3357"", ""RMX3560"", ""RMX3562"", ""RMX3350"", ""RMX2193"", ""RMX2161"", ""RMX2050"", ""RMX2156"", ""RMX3242"", ""RMX3171"", ""RMX3430"", ""RMX3235"", ""RMX3506"", ""RMX2117"", ""RMX2173"", ""RMX3161"", ""RMX2205"", ""RMX3462"", ""RMX3478"", ""RMX3372"", ""RMX3574"", ""RMX1831"", ""RMX3121"", ""RMX3122"", ""RMX3125"", ""RMX3043"", ""RMX3042"", ""RMX3041"", ""RMX3092"", ""RMX3093"", ""RMX3571"", ""RMX3475"", ""RMX2200"", ""RMX2201"", ""RMX2111"", ""RMX2112"", ""RMX1901"", ""RMX1903"", ""RMX1992"", ""RMX1993"", ""RMX1991"", ""RMX1931"", ""RMX2142"", ""RMX2081"", ""RMX2085"", ""RMX2083"", ""RMX2086"", ""RMX2144"", ""RMX2051"", ""RMX2025"", ""RMX2075"", ""RMX2076"", ""RMX2072"", ""RMX2052"", ""RMX2176"", ""RMX2121"", ""RMX3115"", ""RMX1921""]
        self.xiaomi = [""2201116SI"", ""M2012K11AI"", ""22011119TI"", ""21091116UI"", ""M2102K1AC"", ""M2012K11I"", ""22041219I"", ""22041216I"", ""2203121C"", ""2106118C"", ""2201123G"", ""2203129G"", ""2201122G"", ""2201122C"", ""2206122SC"", ""22081212C"", ""2112123AG"", ""2112123AC"", ""2109119BC"", ""M2002J9G"", ""M2007J1SC"", ""M2007J17I"", ""M2102J2SC"", ""M2007J3SY"", ""M2007J17G"", ""M2007J3SG"", ""M2011K2G"", ""M2101K9AG "", ""M2101K9R"", ""2109119DG"", ""M2101K9G"", ""2109119DI"", ""M2012K11G"", ""M2102K1G"", ""21081111RG"", ""2107113SG"", ""21051182G"", ""M2105K81AC"", ""M2105K81C"", ""21061119DG"", ""21121119SG"", ""22011119UY"", ""21061119AG"", ""21061119AL"", ""22041219NY"", ""22041219G"", ""21061119BI"", ""220233L2G"", ""220233L2I"", ""220333QNY"", ""220333QAG"", ""M2004J7AC"", ""M2004J7BC"", ""M2004J19C"", ""M2006C3MII"", ""M2010J19SI"", ""M2006C3LG"", ""M2006C3LVG"", ""M2006C3MG"", ""M2006C3MT"", ""M2006C3MNG"", ""M2006C3LII"", ""M2010J19SL"", ""M2010J19SG"", ""M2010J19SY"", ""M2012K11AC"", ""M2012K10C"", ""M2012K11C"", ""22021211RC""]
        self.dvc = random.choice([""30/11"",""31/12"",""29/10""])
        return(random.choice([
             f'Instagram 118.0.0.28.12 Android ({self.dvc}; 604dpi; 1080x2283; INFINIX MOBILITY LIMITED/Infinix; {str(random.choice(self.infinix))}; qcom; in_ID; 185203672)',
             f'Instagram 118.0.0.28.12 Android ({self.dvc}; 604dpi; 1080x2283; REALME MOBILITY LIMITED/Realme; {str(random.choice(self.realme))}; qcom; in_ID; 185203672)',
             f'Instagram 118.0.0.28.12 Android ({self.dvc}; 604dpi; 1080x2283; XIAOMI MOBILITY LIMITED/Xiaomi; {str(random.choice(self.xiaomi))}; qcom; in_ID; 185203672)',
            f'Instagram 118.0.0.28.12 Android ({self.dvc}; 604dpi; 1080x2283; NEXUS MOBILITY LIMITED/Nexus; {str(random.choice(self.nexus))}; qcom; in_ID; 185203672)',
            f'Instagram 118.0.0.28.12 Android ({self.dvc}; 604dpi; 1080x2283; MICROMAX MOBILITY LIMITED/Micromax; {str(random.choice(self.micromax))}; qcom; in_ID; 185203672)',
            f'Instagram 118.0.0.28.12 Android ({self.dvc}; 604dpi; 1080x2283; ONEPLUS MOBILITY LIMITED/One; {str(random.choice(self.onpls))}; qcom; in_ID; 185203672)',
            f'Instagram 118.0.0.28.12 Android ({self.dvc}; 604dpi; 1080x2283; OPPO MOBILITY LIMITED/Oppo; {str(random.choice(self.oppo))}; {self.opp}; qcom; in_ID; 185203672)',
            f'Instagram 118.0.0.28.12 Android ({self.dvc}; 604dpi; 1080x2283; VIVO MOBILITY LIMITED/Vivo; {str(random.choice(self.vivo))}; qcom; in_ID; 185203672)',
           ])
       )
        
    def useragent_api_threads(self):
        self.nexus = ['Galaxy Nexus', 'Nexus 10', 'Nexus 2', 'Nexus 4', 'Nexus 4', 'Nexus 4', 'Nexus 4', 'Nexus 4', 'Nexus 4', 'Nexus 5', 'phone/Nexus 5', 'Nexus 5X', 'Nexus 6', 'Nexus 7', 'Nexus 9', 'Nexus One', 'Nexus One', 'Nexus One', 'Nexus One', 'Nexus One', 'Nexus One', 'Nexus Player', 'Nexus Player', 'Nexus S', 'Nexus S', 'Nexus S 4G', 'nexus S', 'Nexus S', 'Nexus s', 'Nexus S', 'Nexus S', 'Nexus S', 'Nexus S', 'Nexus S']
        self.micromax = ['Micromax 10', 'Micromax 1J', 'Micromax 86519', 'Micromax A064', 'Micromax_A064', 'Micromax A065', 'Micromax_A065', 'Micromax A066', 'Micromax_A066', 'Micromax A067', 'Micromax_A067', 'MICROMAX_A068', 'MICROMAX A068', 'Micromax A068', 'Micromax A069', 'Micromax_A069', 'Micromax A075', 'Micromax A082', 'Micromax_A082', 'Micromax A089', 'Micromax_A089', 'Micromax A091', 'Micromax A092', 'Micromax_A092', 'Micromax A093', 'Micromax_A093', 'Micromax A095', 'Micromax A096', 'Micromax_A101', 'Micromax A102', 'Micromax_A102', 'Micromax A104', 'Micromax a104', 'Micromax A105', 'Micromax_A105', 'Micromax A106', 'Micromax-A106', 'Micromax A108', 'Micromax_A109', 'Micromax A109', 'Micromax A110', 'Micromax_A110', 'Micromax A110Q', 'Micromax_A110Q', 'Micromax A111', 'Micromax A114', 'Micromax A114R', 'Micromax_A114R', 'Micromax A115', 'Micromax_A115', 'Micromax A116', 'Micromax_A116', 'Micromax A116i', 'Micromax_A116i', 'Micromax A117', 'Micromax_A117', 'Micromax A118R', 'Micromax A119', 'Micromax A120', 'Micromax A121', 'Micromax_A121', 'Micromax A15', 'Micromax A177', 'Micromax A190', 'Micromax_A190', 'Micromax A200', 'Micromax_A200', 'Micromax A21', 'Micromax A210', 'Micromax A24', 'Micromax_A24', 'Micromax A25 Smarty', 'Micromax A250', 'Micromax A255', 'Micromax_A255', 'Micromax A26', 'Micromax_A26', 'Micromax_A27', 'Micromax A27', 'Micromax_A28', 'Micromax A28/GRI40', 'Micromax A28', 'Micromax A290', 'Micromax A30', 'Micromax A300', 'Micromax A310', 'Micromax A311', 'Micromax A315', 'Micromax_A315', 'Micromax_A316', 'Micromax A316', 'Micromax_A34', 'Micromax A34', 'Micromax_A35', 'Micromax A35', 'Micromax A350', 'Micromax_A36', 'Micromax A36', 'Micromax_A37', 'Micromax A37', 'Micromax A37B', 'Micromax_A37B', 'Micromax A40', 'Micromax_A40', 'Micromax A46', 'Micromax_A46', 'Micromax A47', 'MicromaxA47', 'Micromax_A50', 'Micromax A50', 'Micromax A51', 'Micromax A52', 'Micromax A54', 'Micromax A56', 'Micromax_A57', 'Micromax A57', 'Micromax A58', 'Micromax_A58', 'Micromax A59', 'Micromax A60', 'Micromax A61', 'Micromax A62', 'Micromax_A62', 'Micromax A63', 'Micromax_A63', 'Micromax_A65', 'Micromax A65', 'Micromax_A66', 'Micromax A66', 'Micromax A67', 'Micromax A68', 'Micromax A69', 'Micromax_A69', 'Micromax_A70', 'Micromax A700', 'Micromax A71', 'Micromax_A71', 'Micromax A72', 'Micromax_A72', 'Micromax A73', 'Micromax_A74', 'Micromax A74', 'Micromax A75', 'Micromax_A76', 'Micromax A76', 'Micromax A77', 'Micromax A78', 'Micromax A79', 'en_us Micromax A80', 'Micromax A80', 'Micromax A82', 'Micromax_A82', 'Micromax A84', 'Micromax A85', 'Micromax A86', 'Micromax_A86', 'Micromax_A87', 'Micromax A87', 'Micromax A87 . Ninja 4.0', 'Micromax A88', 'Micromax_A88', 'Micromax A89', 'Micromax A90', 'Micromax A90s', 'MIcromax_A90s', 'Micromax A90S', 'Micromax A91', 'Micromax_A91', 'Micromax_A92', 'Micromax A92', 'MicromaxA93', 'Micromax A93', 'Micromax A94', 'Micromax_A94', 'Micromax A96', 'Micromax_A96', 'Micromax A97', 'Micromax_A99', 'Micromax A99', 'Micromax_AD3520', 'Micromax AD3520', 'Micromax AD3550', 'Micromax AD4500', 'Micromax_AD4500', 'Micromax AE90', 'Micromax AO5510', 'Micromax AQ5000', 'Micromax B4A', 'Micromax B5 Pro', 'B5Pro', 'Micromax_Bharat_5_Plus', 'Micromax Q402Plus', 'Micromax Q440', 'Micromax Bharat 5', 'Micromax Q4204', 'Micromax Bharat 5 Plus', 'Micromax Bharat 5 Pro', 'Micromax Bolt 3425', 'Micromax Bolt 2', 'Micromax Q402+', 'Micromax Q306', 'Micromax Q3001', 'Micromax Q301', 'Micromax Q303', 'Micromax Q324', 'Micromax Q326', 'Q327', 'Micromax Q327', 'Micromax Q3301', 'Micromax Q333', 'Micromax_Q333', 'Micromax Q338', 'Micromax Q346', 'Micromax Q354', 'Micromax Q357', 'Micromax Q383', 'Micromax_S302', 'Micromax S302', 'Micromax Q424', 'Micromax Q352', 'Micromax Q4101', 'Micromax C2A', 'Micromax C9', 'Micromax C1', 'Micromax C1A', 'Micromax C2APLS', 'Micromax Q4310', 'Micromax E4815', 'arm_64 Micromax E481', 'Micromax E481', 'Micromax E4816', 'Micromax Q462', 'Micromax Q463', 'Micromax E485', 'Micromax E484', 'Micromax AQ4501', 'Micromax AQ4502', 'A240', 'Micromax A240', 'Micromax Q391', 'Micromax E453', 'Micromax A107', 'Micromax HS2', 'Micromax HS1', 'Micromax_HS3', 'en Micromax_HS3', 'AQ5001', 'Micromax AQ5001', 'AQ5001 Canvas Power', 'Micromax Q392', 'Micromax Q465', 'Micromax Q461', 'Micromax Q350R', 'Micromax Q421', 'Micromax Q417', 'Micromax Q426', 'Micromax Q4260', 'Micromax E311', 'Micromax E352', 'Micromax E455', 'Micromax Q415', 'Micromax Q355', 'Micromax Q469', 'Micromax E451', 'Micromax E451', 'Micromax Q340', 'Micromax Q349', 'Micromax Q345', 'Micromax Q450', 'Micromax Q480', 'arm_64 Micromax Q480', 'Micromax Q380', 'Micromax Q3502', 'Micromax Q351', 'Micromax Q385', 'P70221', 'Micromax P681', 'MicromaxP802', 'Micromax Q427', 'Micromax_Q427', 'Micromax Q413', 'Micromax E313', 'Micromax D2', 'Micromax D200', 'Micromax_D200', 'Micromax D303', 'Micromax D304', 'Micromax_D304', 'Micromax D305', 'Micromax D306', 'Micromax D320', 'Micromax D321', 'Micromax D333', 'Micromax D340', 'Micromax D7517', 'Micromax DM5003', 'Micromax E353', 'Micromax E457', 'Micromax E458', 'Micromax E460', 'Micromax E471', 'Micromax E4817', 'Micromax E482', 'Micromax E483', 'Micromax E5018M', 'Micromax EG111', 'Micromax EG116', 'micromax F', 'micromax F189', 'Micromax F601', 'MicromaxF666', 'Micromax IN', 'Micromax E7533', 'Micromax E6523', 'IN_2b', 'IN_Note1', 'MICROMAX IN1', 'N8216', 'N8301', 'ione note', 'MICROMAX ione note', 'Micromax N4120', 'Micromax N8202', 'Micromax Ninja', 'Micromax Nitro', 'Micromax Note 1+', 'Micromax Note 5', 'Micromax Note3', 'Micromax NX', 'Micromax P001', 'Micromax P250(Funbook)', 'Micromax P255', 'Micromax P256', 'xx Micromax P275', 'Micromax_P275', 'Micromax P275', 'Micromax P280', 'Micromax P290', 'Micromax P310', 'Micromax P350', 'xx Micromax P350', 'Micromax P360', 'Micromax P362', 'Micromax P365', 'Micromax P410', 'Micromax P410i', 'Micromax_P410i', 'Micromax P420', 'Micromax P469', 'Micromax P470', 'MicromaxP480', 'Micromax P500(Funbook)', 'Micromax P560', 'Micromax P580', 'Micromax P580i', 'Micromax P600', 'Micromax P650', 'Micromax P650E', 'Micromax P660', 'Micromax P660', 'Micromax_P666', 'Micromax P666', 'MicromaxP680', 'Micromax P690', 'Micromax P701', 'MicromaxP702', 'Micromax P810', 'en Micromax Q300', 'Micromax_Q300', 'Micromax Q323', 'Micromax_Q323', 'Micromax Q325', 'Micromax_Q325', 'Micromax Q331', 'Micromax_Q331', 'Micromax Q332', 'Micromax_Q332', 'Micromax Q334', 'Micromax Q335', 'Micromax_Q335', 'Micromax Q336', 'Micromax_Q336', 'Micromax Q341', 'Micromax Q343', 'Micromax Q348', 'Micromax_Q353', 'en Micromax_Q353', 'Micromax_Q353P', 'Micromax Q3551', 'Micromax Q3555', 'Micromax Q361', 'Micromax Q370', 'Micromax_Q370', 'Micromax Q371', 'Micromax_Q371', 'Micromax Q375', 'Micromax_Q375', 'Micromax Q379', 'Micromax Q381', 'Micromax Q382', 'Micromax Q386', 'Micromax Q394', 'Micromax_Q394', 'Micromax Q395', 'Micromax Q397', 'Micromax Q398', 'arm Micromax Q398', 'Micromax Q400', 'Micromax_Q400', 'Micromax Q4002', 'en Micromax Q4002', 'Micromax Q401', 'Micromax Q402', 'Micromax Q402 Ultra', 'Micromax Q404', 'Micromax Q411', 'Micromax_Q411', 'Micromax Q412', 'Micromax Q414', 'Micromax Q416', 'Micromax Q419', 'Micromax Q4201', 'Micromax Q422', 'Micromax Q4220', 'Micromax Q423', 'Micromax Q428', 'Micromax_Q428', 'Micromax Q429', '720X1280 Micromax Q4309', 'Micromax Q4312', 'en_US Micromax Q437', 'Micromax Q440Plus', 'Micromax Q454', 'Micromax Q470', 'Micromax Q479', 'Micromax Q491', 'Micromax_Q491', 'Micromax Q502+', 'Micromax Q666', 'Micromax Q67', 'micromax Q68', 'micromax Q78', 'Micromax S300', 'Micromax_S300', 'Micromax S301', 'Micromax_S301', 'Micromax Q4311', 'Micromax Q4601', 'Micromax Q409A', 'Micromax Q409', 'Micromax Q452', 'Micromax Unite 3', 'Micromax Unite 2', 'Micromax Unite 2 A106', 'Micromax Q372', 'Micromax V89', 'Micromax Q4001', 'Micromax Q4202', 'Micromax Q4251', 'arm Micromax Q4251', 'Micromax W5509', 'Micromax X5098', 'Micromax-Xzoom A52', 'YU5530', 'YU5040', 'Micromax YU5900', 'YU5012', 'Micromax Z59']
        self.onpls = ['NE2213', 'NE2217', 'NE2215', 'NE2210', 'NE2210', 'CPH2423', 'CPH2411', 'CPH2417', 'CPH2413', 'CPH2415', 'CPH2449', 'CPH2487', 'ONE A2003', 'ONE A2003', 'ONE A2001', 'ONE A2005', 'ONEPLUS A3003', 'ONEPLUS A3000', 'ONEPLUS A3010', 'ONEPLUS A5000', 'ONEPLUS A5000', 'ONEPLUS A5010', 'ONEPLUS A5010', 'ONEPLUS A5010', 'ONEPLUS A5010', 'ONEPLUS A5010', 'ONEPLUS A6003', 'ONEPLUS A6000', 'ONEPLUS A6010', 'ONEPLUS A6013', 'ONEPLUS A6010', 'GM1900', 'GM1901', 'GM1903', 'GM1917', 'GM1913', 'GM1911', 'GM1910', 'GM1915', 'GM1910', 'HD1901', 'HD1903', 'HD1900 Flow', 'HD1905', 'HD1900', 'HD1907', 'HD1911', 'HD1913', 'HD1910', 'GM1925', 'HD1925', 'GM1920', 'IN2013', 'IN2015', 'IN2010', 'IN2010', 'IN2017', 'IN2019', 'IN2023', 'IN2025', 'IN2020', 'OnePlus8Pro', 'KB2005', 'KB2001', 'KB2007', 'KB2003', 'KB2000', 'OnePlus 8T 5G', 'LE2115', 'LE2113', 'LE2111', 'LE2110', 'LE2120', 'LE2125', 'LE2123', 'LE2121', 'LE2127', 'OnePlus9Pro', 'LE2101', 'LE2100', 'MT2111', 'MT2110', 'ONEPLUS A19677', 'ONEPLUS A2345', 'Oneplus A31', 'Oneplus A3331', 'ONEPLUS A35904', 'ONEPLUS A37000', 'ONEPLUS A3EVB', 'ONEPLUS A62322', 'ONEPLUS A64794', 'ONEPLUS A65369', 'ONEPLUS A68333', 'ONEPLUS A70458', 'ONEPLUS A70791', 'ONEPLUS A78637', 'ONEPLUS A80828', 'ONEPLUS A83306', 'ONEPLUS A87046', 'ONEPLUS A90641', 'Oneplus A99831', 'PGKM10', 'PGKM10', 'PHK110', 'PHK110', 'PGP110', 'PGP110', 'PGZ110', 'ONEPLUS KB2023', 'OnePlus Nord', 'Oneplus Nord 2', 'DN2103', 'DN2101', 'CPH2399', 'CPH2401', 'AC2001', 'AC2003', 'IV2201', 'CPH2409', 'CPH2381', 'CPH2465', 'EB2103', 'EB2101', 'EB2101', 'BE2025', 'BE2026', 'BE2029', 'Nord N10 5G', 'BE2028', 'BE2013', 'BE2011', 'BE2012', 'CPH2459', 'GN2200', 'CPH2469', 'DE2118', 'DE2117', 'A0001', 'ONE E1001', 'ONE E1003', 'ONE E1001', 'ONE E1005']
        self.oppo = [""CPH1869"", ""CPH1929"",""CPH2107"", ""CPH2238"", ""CPH2389"",""CPH2401"", ""CPH2407"", ""CPH2413"", ""CPH2415"", ""CPH2417"", ""CPH2419"", ""CPH2455"", ""CPH2459"", ""CPH2461"", ""CPH2471"", ""CPH2473"", ""CPH2477"", ""CPH8893"", ""CPH2321"", ""CPH2341"", ""CPH2373"", ""CPH2083"", ""CPH2071"", ""CPH2077"", ""CPH2185"", ""CPH2179"", ""CPH2269"", ""CPH2421"", ""CPH2349"", ""CPH2271"", ""CPH1923"", ""CPH1925"", ""CPH1837"", ""CPH2015"", ""CPH2073"", ""CPH2081"", ""CPH2029"", ""CPH2031"", ""CPH2137"", ""CPH1605"", ""CPH1803"", ""CPH1853"", ""CPH1805"", ""CPH1809"", ""CPH1851"", ""CPH1931"", ""CPH1959"", ""CPH1933"", ""CPH1935"", ""CPH1943"", ""CPH2061"", ""CPH2069"", ""CPH2127"", ""CPH2131"", ""CPH2139"", ""CPH2135"", ""CPH2239"", ""CPH2195"", ""CPH2273"", ""CPH2325"", ""CPH2309"", ""CPH1701"", ""CPH2387"", ""CPH1909"", ""CPH1920"", ""CPH1912"", ""CPH1901"", ""CPH1903"", ""CPH1905"", ""CPH1717"", ""CPH1801"", ""CPH2067"", ""CPH2099"", ""CPH2161"", ""CPH2219"", ""CPH2197"", ""CPH2263"", ""CPH2375"", ""CPH2339"", ""CPH1715"", ""CPH2385"", ""CPH1729"", ""CPH1827"", ""CPH1938"", ""CPH1937"", ""CPH1939"", ""CPH1941"", ""CPH2001"", ""CPH2021"", ""CPH2059"", ""CPH2121"", ""CPH2123"", ""CPH2203"", ""CPH2333"", ""CPH2365"", ""CPH1913"", ""CPH1911"", ""CPH1915"", ""CPH1969"", ""CPH2209"", ""CPH1987"", ""CPH2095"", ""CPH2119"", ""CPH2285"", ""CPH2213"", ""CPH2223"", ""CPH2363"", ""CPH1609"", ""CPH1613"", ""CPH1723"", ""CPH1727"", ""CPH1725"", ""CPH1819"", ""CPH1821"", ""CPH1825"", ""CPH1881"", ""CPH1823"", ""CPH1871"", ""CPH1875"", ""CPH2023"", ""CPH2005"", ""CPH2025"", ""CPH2207"", ""CPH2173"", ""CPH2307"", ""CPH2305"", ""CPH2337"", ""CPH1955"", ""CPH1707"", ""CPH1719"", ""CPH1721"", ""CPH1835"", ""CPH1831"", ""CPH1833"", ""CPH1879"", ""CPH1893"", ""CPH1877"", ""CPH1607"", ""CPH1611"", ""CPH1917"", ""CPH1919"", ""CPH1907"", ""CPH1989"", ""CPH1945"", ""CPH1951"", ""CPH2043"", ""CPH2035"", ""CPH2037"", ""CPH2036"", ""CPH2009"", ""CPH2013"", ""CPH2113"", ""CPH2091"", ""CPH2125"", ""CPH2109"", ""CPH2089"", ""CPH2065"", ""CPH2159"", ""CPH2145"", ""CPH2205"", ""CPH2201"", ""CPH2199"", ""CPH2217"", ""CPH1921"", ""CPH2211"", ""CPH2235"", ""CPH2251"", ""CPH2249"", ""CPH2247"", ""CPH2237"", ""CPH2371"", ""CPH2293"", ""CPH2353"", ""CPH2343"", ""CPH2359"", ""CPH2357"", ""CPH2457"", ""CPH1983"", ""CPH1979""]
        self.vivo = ['vivo 1002T', 'Vivo 1605', 'vivo 1730', 'vivo 1809', 'vivo_1820', 'vivo 1835', 'vivo 1914', 'vivo 2010', 'vivo 2019', 'vivo 2019', 'vivo 2019', 'vivo 2023', 'vivo 2027', 'vivo 3969', 'VIVO 5', 'Vivo 6', 'Vivo 7 Pro', 'Vivo 8', 'Vivo 93K Prime', 'vivo A5 ', 'vivo a54', 'Vivo A54', 'vivo a57', 'Vivo A87', 'VIVO A94', 'VIVO AIR', 'VIVO C8818', 'vivo E1', 'vivo E3', 'vivo E3', 'vivo E5', 'Vivo EGO', 'V1962BA', 'vivo h5', 'V1824A', 'V1824A', 'V1824BA', 'V2217A', 'V2217A', 'V2218A', 'V2218A', 'V2218A', 'V2243A', 'V1955A', 'I1927', 'I1928', 'V2024A', 'V2025A', 'V2025A', 'V2049A', 'V2049A', 'I2009', 'I2012', 'I2012', 'V2136A', 'V2136A', 'V2141A', 'V2171A', 'I2017', 'V2172A', 'V2172A', 'I2022', 'I2019', 'I2019', 'I2201', 'V1914A', 'V1914A', 'V1981A', 'V2055A', 'V2118A', 'V2157A', 'V2157A', 'V2154A', 'V2196A', 'V2196A', 'V2199A', 'V2231A', 'V2238A', 'V1936AL', 'V1936A', 'V1922A', 'V1922A', 'V1922A ', 'V1916A', 'V2023A', 'V2023A', 'VIVO V2023A', 'V2065A', 'V2061A', 'V2061A', 'V2143A', 'V2106A', 'V2165A', 'V2165A', 'V2180GA', 'V1986A', 'V2012A', 'V2012A', 'V2073A', 'V2073A', 'I2011', 'V2148A', 'I2018', 'V1919A', 'V2131A', 'V2220A', 'I2202', 'I2206', 'I2203', 'I2202', 'I2127', 'I2202', 'I2208', 'I2208', 'I2126', 'I2126', 'I2126', 'V2164KA', 'V2164KA', 'VIVO IV', 'VIVO IV', 'VIVO IV', 'VIVO IV', 'Vivo J5', 'vivo 1805', 'vivo 1805', 'vivo NEX', 'V1923A', 'vivo 1912', 'V1923A', 'vivo 1912', 'vivo 1913', 'V1924A', 'V1924A', 'vivo 1913', 'V1950A', 'V1950A', 'vivo NEX A', 'vivo NEX A', 'vivo 1813', 'V1821A', 'V1821A', 'vivo NEX S', 'vivo NEX S', 'Vivo ONE', 'Vivo ONE', 'PA2170', 'vivo PD1628F_EX', 'vivo PD1709', 'vivo PD1709F_EX', 'vivo PD1709F_EX', 'vivo PD1728', 'vivo PD1728', 'vivo PD1832F_EX', 'vivo PD2046F_EX', 'vivo PD2050F_EX', 'vivo PD2055F_EX', 'vivo PD2059F_EX', 'Vivo S', 'V1831A', 'V1831A', 'VIVO S1', 'Vivo S1 Prime', 'V1832A', 'V1832T', 'V2121A', 'V2121A', 'V2130A', 'V2130A', 'Vivo S11', 'Vivo S11 ', 'vivo S11t', 'vivo S11t', 'vivo S11t', 'vivo S11t', 'vivo S12', 'V2162A', 'Vivo S13', 'V2203A', 'V2207A', 'V2190A', 'V2244A', 'vivo S1Pro', 'Vivo S20 ', 'Vivo S21 ', 'Vivo S31', 'Vivo S4', 'Vivo S40', 'Vivo S41 /MMB439M', 'V1932A', 'vivo S6', 'V1962A', 'vivo S6T', 'V2020CA', 'V2020A', 'Vivo S76', 'V2031EA', 'vivo S7i(t)', 'vivo S7i(t)', 'vivo S7i(t)', 'V2080A', 'vivo S7t', 'vivo_S7t', 'vivo S7t', 'S7t 5G', 'vivo S7w', 'vivo S8', 'vivo S9', 'vivo S9', 'vivo S9', 'V2072A', 'V2048A', 'vivo S9t', 'V2168', 'V2168', 'V2153', 'V2153', 'V2150', 'V2151', 'V2151', 'V2151', 'V2143', 'vivo TD1602_EX', 'vivo U1', 'vivo 1916', 'vivo 1916', 'vivo 1921', 'V1941A', 'V1941A', 'V1928A', 'vivo V1', 'vivo V1', 'vivo V10', 'Vivo V10', 'VIVO V11', 'Vivo V11', 'vivo 1804', 'vivo 1804', 'vivo 1806', 'vivo 1806', 'vivo v11pro', 'vivo 1819', 'vivo 1818', 'vivo 1818', 'vivo 1920', 'vivo 1919', 'vivo 1907', 'vivo 1907', 'vivo 1907_19', 'vivo 1910', 'vivo 1909', 'vivo 1910', 'vivo 1933', 'vivo 1933', 'vivo V1907', 'vivo v19neo', 'vivo V1Max', 'vivo V1Max', 'vivo V2', 'V2040', 'vivo 2018', 'vivo 2018', 'V2022', 'Vivo V20A', 'Vivo V20G', 'V2066', 'V2108', 'V2050', 'V2050', 'V2050', 'V2061', 'V2055', 'Vivo V21S', 'V2130', 'V2132A', 'V2116', 'V2115', 'V2116', 'V2116', 'V2126', 'V2126', 'V2228', 'V2228', 'V2158', 'V2158', 'V2202', 'V2202', 'V2201', 'V2246', 'V2230', 'V2230', 'V2237', 'vivo V3', 'vivo V3', 'vivo V3Max A', 'vivo V3Max L', 'vivo v30', 'vivo v31', 'vivo V3L', 'vivo V3L', 'vivo V3L', 'vivo V3L', 'vivo V3M A', 'vivo V3M A', 'vivo V3MA', 'vivo_V3Max', 'vivo v45', 'vivo 1601', 'vivo V5', 'vivo 1609', 'vivo 1611', 'Vivo V51', 'Vivo V54', 'vivo 1612', 'vivo 1713', 'vivo V5S A', 'vivo 1718', 'vivo 1716', 'vivo Y79A', 'vivo Y79A', 'V2166BA', 'Vivo V8', 'vivo 1723', 'vivo V9 mini', 'vivo 1851', 'VIVO V9Pro', 'vivo 1851', 'vivo 1727', 'Vivo X', 'V2178A', 'V2229A', 'V2170A', 'V2170A', 'vivo Xplay3S', 'vivo Xplay3S', 'vivo Xplay3S', 'vivo Xplay5A', 'vivo Xplay5A', 'vivo Xplay5A', 'vivo Xplay5S', 'vivo Xplay5S', 'vivo Xplay6', 'vivo Xplay6L', 'vivo Xplay6', 'vivo Xplay6', 'vivo X710L', 'vivo X710L', 'vivo X710L', 'vivo X710L', 'vivo X1', 'vivo X1', 'vivo X1', 'vivo X1', 'Vivo X11', 'vivo X1S', 'vivo X1S', 'vivo X1S', 'vivo X1St', 'vivo X1St', 'vivo X1St', 'vivo X1St', 'vivo X1St', 'vivo X1W', 'vivo X1w', 'VIVO X2', 'VIVO X2', 'VIVO_X2', 'vivo X20', 'vivo X20A', 'vivo X20Plus A', 'vivo 1720', 'vivo X20Plus UD', 'vivo X20Plus UD', 'vivo X21', 'vivo X21A', 'vivo X21UD A', 'vivo X21i', 'vivo X21i A', 'vivo X21i', 'vivo X21i A ', 'V1814A', 'V1814T', 'V1814T', 'V1814A', 'V1809A', 'V1809A', 'V1816A', 'V1809T', 'V1816T', 'V1829A', 'V1838A', 'V1838T', 'V1829T', 'V1836A', 'V1836A', 'V1836T', 'vivo X27Pro', 'V1938CT', 'V1938T', 'V1938T', 'vivo X3F', 'vivo X3F', 'vivo X3F', 'vivo X3L', 'vivo X3L', 'vivo X3S', 'vivo X3S', 'vivo X3S', 'vivo X3S', 'vivo X3S', 'vivo X3S', 'vivo X3S W', 'vivo X3S W', 'vivo X3S W', 'vivo X3S W', 'vivo X3t', 'vivo X3t', 'vivo X3t', 'vivo X3t', 'vivo X3V', 'vivo X3V', 'vivo X3V', 'vivo X3V', 'Vivo X40', 'vivo X5L', 'vivo X5', 'vivo X5L', 'vivo X5Pro D', 'vivo X5Pro L', 'vivo X5Pro V', 'vivo X5Pro D', 'vivo X5Pro D', 'V2001A', 'V2001A', 'vivo 2004', 'vivo 2005', 'vivo 2005', 'V1937', 'vivo 1937', 'V1937', 'V1937', 'vivo 2006', 'vivo 2006', 'V2005A', 'V2011A', 'X50 Pro+', 'V1930', 'V1930', 'vivo X510t', 'vivo X510t', 'vivo X510t', 'vivo X510t', 'vivo X510t', 'vivo X520L', 'vivo X5F', 'vivo X5M', 'vivo X5M', 'vivo X5M', 'vivo X5Max ', 'vivo X5Max L', 'vivo X5Max L', 'vivo X5Max S', 'vivo X5Max V', 'vivo X5S L', 'vivo X5S L', 'vivo X5V', 'vivo X5V', 'vivo X5V', 'vivo X6D', 'vivo X6A', 'vivo X6Plus D', 'vivo X6Plus A', 'vivo X6Plus L', 'vivo X6Plus D', 'vivo X6Plus A', 'vivo X6Plus D', 'vivo X6Plus L', 'V2046A', 'V2059A', 'V2046A', 'V2045', 'V2046', 'V2047A', 'V2056A', 'V2085A', 'vivo X6S A', 'vivo X6S A', 'vivo X6S A', 'vivo X6S A', 'vivo X6SPlus D', 'vivo X6SPlus D', 'vivo X6SPlus D', 'vivo X6SPlus D', 'vivo X6SPlus A', 'vivo X7L', 'vivo X7Plus', 'vivo X7Plus', 'V2133A', 'V2104', 'V2104', 'V2105', 'V2134A', 'V2105', 'V2145A', 'V2114', 'V2145A', 'vivo X710F', 'vivo X710F', 'vivo X710F', 'vivo X710F', 'V2144', 'V2183A', 'V2144', 'V2208', 'V2185A', 'V2145', 'V2185A', 'Vivo X83', 'vivo X9', 'vivo X9L', 'vivo X9', 'vivo X9', 'vivo X9Plus', 'vivo X9Plus L', 'V2241A', 'V2242A', 'V2242A', 'V2227A', 'vivo X9i', 'vivo X9i', 'vivo X9i', 'vivo X9s', 'vivo X9s L', 'vivo X9s Plus', 'vivo X9s Plus', 'vivo X9s Plus L', 'vivo X9s Plus', 'VIVO XL', 'vivo Xplay', 'vivo Xshot', 'vivo Xshot', 'vivo Xshot', 'vivo Xshot', 'V2203', 'V2221', 'Vivo y1', 'Vivo Y1', 'V2168A', 'V2168A', 'vivo 1906', 'V2028', 'vivo Y11t', 'vivo Y11t', 'vivo Y11t', 'vivo 1904', 'V2163A', 'V2102', 'V2102', 'vivo 2007', 'vivo 2007', 'Vivo Y12I Pro', 'V2026', 'V2042', 'V2033', 'V2039', 'V2069', 'V2026_21', 'vivo Y13L', 'vivo Y13', 'vivo Y13L', 'vivo Y13L', 'vivo Y13i', 'vivo_Y13i', 'vivo Y13iL', 'vivo Y13iL', 'vivo Y13T', 'vivo Y13T', 'vivo 1901', 'vivo Y15T', 'vivo Y15T', 'V2134', 'V2147', 'V2147', 'V2212', 'V2120', 'V2204', 'V2214', 'V2204', 'vivo 1902', 'vivo 1902_19', 'VIVO 1902', 'vivo Y17T', 'vivo Y17T', 'vivo_Y17T', 'vivo Y17T', 'vivo Y17W', 'vivo Y17W', 'vivo Y17W', 'vivo Y18L', 'vivo Y18L', 'vivo Y18L', 'vivo 1915', 'vivo Y19t', 'vivo Y19t', 'vivo Y19t', 'vivo Y19t', 'Vivo Y1i', 'vivo 2015', 'vivo 2015', 'V2029', 'V2027', 'V2043_21', 'V2101', 'V2070', 'V2054', 'V2052', 'V2037', 'V2032', 'V2038', 'V2038', 'V2129', 'V2129', 'V2111', 'V2149', 'V2140', 'V2140', 'V2152', 'V2152', 'V2110', 'V2110', 'V2131', 'V2135', 'V2207', 'vivo Y22iL', 'vivo Y22iL', 'V2206', 'V2206', 'vivo Y23L', 'vivo Y23L', 'vivo y23l', 'vivo Y23L', 'vivo Y23L', 'vivo Y23L', 'vivo 1613', 'vivo Y27', 'vivo Y27L', 'vivo Y27', 'vivo Y28', 'vivo Y28', 'vivo Y28L', 'vivo Y28L', 'vivo Y29L', 'vivo Y29L', 'vivo Y29L', 'V1901A', 'V1901A', 'V1901A', 'V1901T', 'V1930A', 'vivo 1938', 'V2034A', 'V2036A', 'V2099A', 'V2099A', 'V2160', 'V2160', 'V2160', 'V2066BA', 'V2066A', 'Y30g', 'Vivo Y30S', 'vivo Y31L', 'V2068', 'V2054A', 'V2068A', 'V2068', 'V2158A', 'Vivo Y32', 'V2180A', 'V2057', 'V2109', 'V2166A', 'V2166A', 'V2146', 'V2205', 'V2205', 'vivo Y37A', 'vivo Y37', 'V2044', 'vivo Y3t', 'vivo Y3t', 'vivo Y3t', 'vivo y41', 'vivo Y5 ', 'Vivo Y5', 'vivo 1935', 'VIVO Y50(2021)', 'V2023EA', 'Y50t', 'V2035', 'vivo Y51L', 'vivo Y51A', 'V2030', 'vivo 1707', 'V2031_21', 'vivo Y51t L', 'vivo Y51t L', 'vivo Y51t L', 'V2053', 'V2057A', 'vivo Y53', 'vivo 1606A', 'vivo Y53n', 'V2058', 'V2123A', 'V2069A', 'V2045A', 'V2045A', 'vivo Y55A', 'V2127', 'V2127', 'vivo 1603', 'vivo Y55n', 'vivo 1610', 'V2164A', 'V2164A', 'V1934A', 'V2006', 'vivo Y613', 'vivo Y613', 'vivo Y613F', 'vivo Y622', 'vivo Y622', 'vivo Y622', 'vivo Y622', 'vivo Y622', 'vivo Y623', 'vivo Y623', 'vivo Y627', 'vivo Y627', 'vivo Y627', 'vivo Y627', 'vivo Y628', 'vivo Y628', 'vivo 1719', 'vivo Y66', 'vivo Y66L', 'vivo Y66i A', 'vivo Y67', 'vivo Y67A', 'vivo Y67L', 'vivo Y685', 'vivo 1714', 'vivo Y69A', 'V2002A', 'V2002A', 'vivo Y71A', 'vivo 1724', 'vivo Y71A', 'vivo 1801', 'V2041', 'V2060', 'V2102A', 'V1731CA', 'vivo Y73', 'Vivo Y73 /MMB239M', 'V2059', 'V2031A', 'V2164PA', 'V2117', 'vivo Y75A', 'V2142', 'V2142', 'vivo Y75s', 'vivo Y75s', 'vivo Y75S', 'vivo Y75s', 'V2124', 'V2156A', 'V2219A', 'V2219A', 'V2169', 'V2169', 'V1913A', 'vivo 1808i', 'vivo 1803', 'vivo 1803', 'vivo 1812', 'vivo Y81S', 'V1732A', 'V1732T', 'vivo Y83A', 'vivo 1802', 'vivo Y83A', 'vivo Y83A', 'vivo 1726', 'Vivo Y83I', 'vivo Y85A', 'vivo Y85', 'Vivo Y85i', 'Vivo Y86', 'V1730EA', 'vivo v1730ea', 'vivo 1908', 'vivo 1823', 'vivo 1908_19', 'vivo 1817', 'vivo 1811', 'vivo Y913', 'vivo Y913', 'vivo Y91C', 'vivo 1820', 'vivo 1816', 'vivo Y923', 'vivo Y923', 'vivo Y927', 'vivo Y927', 'vivo Y928', 'vivo Y928', 'vivo Y928', 'vivo 1814', 'V1818A', 'V1818A', 'vivo 1814', 'vivo Y937', 'vivo Y937', 'vivo Y937', 'V1818CT', 'V1818CA', 'vivo 1807', 'vivo Y95', 'V1813A', 'V1813T', 'V1813A', 'vivo Y97', 'V1945A', 'V1801A0', 'vivo Z1', 'vivo 1918', 'vivo 1951', 'vivo 1951', 'VIVO Z1Pro', 'vivo 1918', 'vivo 1918 Flow', 'Vivo Z10', 'vivo Z1i', 'V1730DA', 'V1730DT', 'vivo Z1i', 'vivo_1951', 'vivo 1917', 'V1813BA', 'V1813BT', 'V1813BT', 'Vivo Z34', 'vivo Z3x', 'V1730GA', 'vivo Z3x', 'vivo Z3x', 'V1921A', 'V1911A', 'V1911A', 'V1911A', 'V1990A', 'V1990A', 'V1963A', 'V1963A']
        self.infinix = [""Infinix X652B"", ""Infinix X680"", ""Infinix X690"", ""Infinix X625B"", ""Infinix X655"", ""Infinix X680B"", ""Infinix X652B"", ""Infinix X680"", ""Infinix X690"", ""Infinix X625B"", ""Infinix X655"", ""Infinix X680B"", ""Infinix X652B"", ""Infinix X680"", ""Infinix X690"", ""Infinix X625B"", ""Infinix X655"", ""Infinix X680B"", ""Infinix X652B"", ""Infinix X680"", ""Infinix X690"", ""Infinix X625B"", ""Infinix X655"", ""Infinix X680B"", ""Infinix X652B"", ""Infinix X680"", ""Infinix X690"", ""Infinix X625B"", ""Infinix X655"", ""Infinix X680B""]
        self.opp = random.choice([""OP4F97"", ""OP4BA5L1"", ""OP664D1"", ""OP5F11L1"", ""OP2A92"", ""OP8F17"", ""OP8F31"", ""OP4C9E1"", ""OP5B31"", ""OP4BA6L1"", ""OP2B87"", ""OP6F21"", ""OP6C8E1"", ""OP8F11"", ""OPPOA16"", ""OPPOA15"", ""OPPOA11"", ""OPPOA73"", ""OPPOA37"", ""OPPOA53"", ""OPPOA33"", ""OPPOA93"", ""OPPOA35"", ""OPPOA83"", ""OPPOA57"", ""OPPOA71"", ""OPPOA39"", ""OPPOA3"", ""OPPOA51"", ""OPPOA27"", ""OPPOA79""])
        self.trek = random.choice([""mt6769"", ""mt6768"", ""mt6767"", ""mt6765"", ""mt6763"", ""mt6757"", ""mt6755"", ""mt6753"", ""mt6739"", ""mt6737"", ""mt6735"", ""mt6595"", ""mt6582"", ""mt6572"", ""mt6571"", ""mt6570"", ""mt8563"", ""mt8167"", ""mt8163"", ""mt8135"", ""mt8127"", ""mt8125"", ""mt7623"", ""mt6797"", ""mt6592"", ""mt6590"", ""mt6580"", ""mt6573"", ""mt6575"", ""mt6260"", ""mt6236""])
        self.igversi = (""100.0.0.17.129,100.0.0.17.129,100.0.0.17.129,100.0.0.17.129,100.0.0.17.129,100.0.0.17.129,79.0.0.21.101,78.0.0.11.104,77.0.0.20.113,76.0.0.15.395,75.0.0.23.99,74.0.0.21.99,73.0.0.22.185,72.0.0.21.98,71.0.0.18.102,70.0.0.22.98,69.0.0.30.95,68.0.0.11.99,67.0.0.25.100,66.0.0.11.101,65.0.0.12.86,64.0.0.14.96,63.0.0.17.94,62.0.0.19.93,61.0.0.19.86,60.1.0.17.79,59.0.0.23.76,58.0.0.12.73,57.0.0.9.80,56.0.0.13.78,55.0.0.12.79,54.0.0.14.82,53.0.0.13.84,52.0.0.8.83,51.0.0.20.85,50.1.0.43.119,271.1.0.21.84,131.0.0.23.11,130.0.0.31.12,128.0.0.26.12,126.0.0.25.12,125.0.0.20.12,124.0.0.17.47,123.0.0.21.11,122.0.0.29.23,120.0.0.29.11,119.0.0.33.14,118.0.0.28.12,117.0.0.28.12,115.0.0.26.11,114.0.0.38.12,113.0.0.39.12,112.0.0.29.12,111.1.0.25.15,110.0.0.16.11,109.0.0.18.12,108.0.0.23.11,107.0.0.27.12,106.0.0.24.11,105.0.0.18.11,104.0.0.21.11,103.1.0.15.11,102.0.0.20.11,101.0.0.15.12,100.0.0.17.12,99.0.0.32.182,98.0.0.15.119,97.0.0.32.119"").split(',')
        self.dix = random.choice(self.igversi)
        self.kode = random.choice(['104766893','104766900','102221278','104766888','105842053','93117670','94080607','96794592','102221279','100986894','ru_RU','94080606','103516660','98288242','103516666','103516653','uk_UA','96794590','100986893','102221277','95414344','99640920','99640911','96794591','ru_UA','99640905','100986890','107092313','99640900','93117667','100521966','90841939','98288239','89867440','105842051','de_DE','96794584','105842050','en_US','pt_PT','109556223','107092318','en_GB','108357722','112021130','107092322','119104798','108357720','119104802','112021131','100986892','113249569','107104231','fr_FR','pt_BR','109556226','116756948','113249553','113249561','110937441','118342010','120662545','117539703','119875222','110937448','121451799','115994877','108357718','120662547','107608058','122206624','95414346','107092308','112021128','90841948','119875229','117539698','120662550','en_NZ','123103748','91882538','121451810','91882537','118342006','113948109','122338251','110937453','es_US','118342005','121451793','109556219','119875225','en_CA','109556220','117539695','115211358','91882539','119104795','89867442','94080603','164094539','175574628','185203690','188791648','188791674','187682694','188791643','177770724','192992577','180322810','195435560','196643820','196643821','188791637','192992576','196643799','196643801','196643803','195435546','194383411','197825254','197825260','197825079','171727793','197825112','197825012','197825234','179155086','192992563','197825268','166149669','192992565','198036424','197825223','183982969','199325909','199325886','199325890','199325911','197825118','127049003','197825169','197825216','197825127','200395960','179155096','199325907','200396014','188791669','197825133','170693926','200396005','171727780','201577064','201576758','201577192','201775949','201576944','201775970','143631574','126223520','201775951','167338518','144612598','170693940','201775813','200395971','201775744','201775946','202766609','145652094','202766591','202766602','203083142','179155088','202766608','199325884','180322802','202766603','195435547','165030894','201576967','201775904','194383424','197347903','202766610','185203693','201576898','204019468','187682682','204019456','201775901','204019471','204019454','204019458','202766601','204019452','173238721','204019466','148324036','202766581','158441904','201576903','205280538','205280529','201576813','173238729','141753096','205280531','163022072','201576887','163022088','141753091','148324051','205280528','154400383','205280537','201576818','157405371','205858383','201576811','165031093','187682684','145652090','206670917','185203686','192992561','183982986','206670927','150338061','183982962','127049016','175574603','155374054','205858247','135374896','206670920','169474958','206670926','160497905','161478672','192992578','206670929','131223243','206670916','142841919','187682681','171727795','151414277','206670922','160497915','207505137','165030898','208061741','208061688','208180365','208061674','197825052','147375133','208061744','196643798','208061725','122338247','157536430','208061728','209143963','208727155','209143726','205280539','209143903','209143970','181496409','208061739','209143957','210180522','210180512','209143881','209143712','180322805','210180521','195435561','210370119','210180523','210180493','175574596','210180510','210180480','210180513','210180517','176649504','177770663','210180479','211114117','210908379','206670921','211114134','183982943','211399345','211399342','211399332','201775962','211574187','211574249','210180519','167338559','185203649','124583960','211399337','211399335','197825163','166149717','211399336','212063371','211399329','209143954','210180482','168361634','212214017','209143867','211399341','211399340','212214027','195435510','122338243','139237670','152367502','212676872','212676898','212676875','212676895','212676901','209823384','212676869','196643822','212676878','213367980','213368005','212676886','213558743','209143913','212214039','158441917','174081672','213558750','201775966','188791681','185203705','143631575','161478664','214245350','161478663','212676881','213558770','214245346','138226752','214245221','214245182','214245206','214245218','214245354','214245295','214245199','214245304','214245280','214446313','214245187','214245288','214139002','202766605','214245319','214646783','158441914','215246048','195435544','208061677','215464400','128676146','215464389','215464385','215464390','215464398','182747397','215464393','216233197','201775791','216817344','215464395','216817286','185203642','164094529','216817305','215464401','162439029','215464382','216817280','216817331','214330969','216817299','216817357','217948981','217948980','217948956','217948959','217948968','216817296','217948952','217948982','216817269','219308759','219308726','182747387','219308721','219308754','219308763','176649435','183982982','219909486','127049038','219308730','221134012','221134032','221134009','221134037','194383426','221134029','221134005','221134018','145652093','225283632','165031108','225283625','224652582','139906580','225283628','225283624','226142579','225283634','225283631','226493211','225283623','185203672','156514151','218793478','225283621','227299063','225283627','227299064','227299021','227299027','227544546','227299041','227299060','227299012','228970707','228970705','227299005','228970687','228970683','228970694','228970710','228970689','160497904','195435540','129611419','229783842','230291708','228970681','148324047','230877709','231192211','230877674','230877705','230877678','211399328','209143896','230877713','194383428','230877689','221134002','231457747','208061721','230877671','230877668','232868027','232088496','185203706','232868005','232867964','232868001','232868015','232868031','232867959','232868009','164094526','232867941','234041364','182747399','232868024','232867949','234847239','234847238','234847234','162439040','234847229','234847230','181496427','234847240','232867993','195435558','232867967','232867997','234847227','235871830','221133998','236572344','236572377','153386780','236572337','236572349','236572372','234847226','236572383','237507050','238093993','238093948','238093954','238093999','238093982','239490565','239490555','238093946','238093966','239490563','239490550','239974660','240726416','239490568','240726484','240726452','239490551','239490548','240726426','240726476','240726491','240726471','241043882','241114613','236572331','241267273','240726407','241456456','241267278','241267269','241114619','241456445','241456451','242168941','242168928','242168931','242168939','242168925','240726436','242375239','144722090','242168935','242290370','157405369','242168933','242290355','242703240','242807362','242168923','242168943','242991209','243646252','243646269','242991200','243711120','243646267','243711093','243975802','243646263','243646248','243646255','244167578','128676156','194383413','243975835','244390417','244390338','245196084','245196061','240726392','245196055','243646273','245196082','245196063','245196070','245666450','245466705','245870319','245870301','245870347','245196087','246889064','246889072','246889073','246889074','246889065','247146500','246889063','245870262','247370962','247146481','246889068','246889062','247541884','247541831','247370955','247370942','247720736','247720751','248310216','248310220','248310208','247720744','248399342','248310210','247720747','248310206','248717751','248310212','248310221','248823392','248583561','248310205','248899028','248955251','248955247','249178904','248955244','249507608','249507582','249507588','249507585','248955240','249507607','249507592','249810008','249966137','249507610','249966081','249966100','249507599','249966140','249810004','123790722','250188776','249628096','250188788','250742103','250742113','250742102','250877984','250742105','250742111','251048681','250742107','250742115','251048695','251304696','251304682','251524431','251530710','251304689','251524420','251524409','251524390','250742101','251048673','252055918','252055945','251920416','252055944','252055925','252239038','252055936','252055915','252055948','252390568','252390583','252580134','252740497','252740485','252740490','253120615','253325372','253325384','253325385','253447816','253146263','253120607','253325374','253120598','253325371','253447808','253447809','253325378','253447814','253447807','253447811','253447817','253447813','181496411','253447806','255191971','255013798','255777478','255777471','255777474','255777472','255959637','255777477','255959614','255959635','256099199','256099204','150338064','256099153','256099205','256099156','255983744','256107300','255777470','126223536','256203326','256099190','256099151','256324061','256324047','256203339','256966628','256966589','256966626','256966590','124584015','257456576','256966593','257456590','256966629','256966587','256966592','257456586','257456539','259829115','259829104','259829113','260037038','259829105','259829109','260037030','260149625','259829103','260149621','260465044','259829116','260724710','179155058','261079769','261079761','261079768','261079762','261079771','261276939','157405370','135374885','261079765','261393056','261393062','261079760','181496406','182747360','261504698','261690888','261504706','169474957','262218766','262290715','262290774','262372432','262372425','262372431','262886993','262886995','262372426','262886987','261079764','262886986','262886988','262886990','262372433','262886996','263652962','264009049','264009019','264009030','264009021','264009023','264009052','264009024','261763534','174081651','169474965','232867942','264009013','255959606','264009028','267397344','267397322','267925737','267397343','267925708','267397327','267397321','267925714','267258517','267925705','268773287','267925733','268773233','267925702','268773286','159526770','268773239','268773272','269790795','269285030','269790805','269790803','269790792','268773227','269849047','270426177','270426174','271182277','269790789','271182270','268773290','271182266','271182276','269790798','271182279','271182265','271182267','269790807','271823819','272382110','272382111','272382106','272693584','272382095','272382093','272382098','272382100','272382103','273728833','273371577','273728832','273728798','273907093','273907111','273907108','238093987','273907112','273907103','274774869','274774891','274774908','273907087','274774904','274774875','274774914','275292626','276027938','276028040','276027963','276028037','276028020','276028017','274774862','276028013','249507580','276028029','273907098','277249238','277249248','277249249','276028033','277249250','277249226','275292623','277249214','277249242','277249237','277249240','278625447','278002558','278625420','278625431','278625423','117539687','278625416','278625444','277249213','278625451','279469964','279996068','279996060','279996067','279996058','280194220','279996065','279996063','279996061','279996059','280894196','273728787','271182262','281579032','281579023','276514494','281579021','281579027','281579033','268773274','283072590','281579025','283072571','282619332','283489774','283072587','283072567','281579031','283072580','283072574','284459213','284459224','179155089','256966583','284459214','283072585','284459218','284459223','284459225','285338607','275113919','284459221','284459212','284459215','285855793','285855800','285855803','285855791','285855802','285855804','285855795','286809973','287420974','287421023','287420968','287420979','287421017','287421005','287421019','287421012','277249241','288682406','287421026','288682405','288682397','288682407','261079772','288682398','288682401','288205409','289692198','287420997','289692186'])
        self.dpi_pxl = random.choice(['240dpi; 1760x792', '240dpi; 1920x864', '320dpi; 2400x1080', '400dpi; 3200x1440', '480dpi; 1080x1920', '320dpi; 900x1600', '320dpi; 720x1280', '240dpi; 540x960', '280dpi; 1920x1080', '240dpi; 160x900', '240dpi; 1280x720', '160dpi; 960x540','160dpi; 623x1280'])
        self.dpi = random.choice(['320dpi','640dpi','213dpi','480dpi','420dpi','240dpi','280dpi','160dpi','560dpi','540dpi','272dpi','360dpi','720dpi','270dpi','450dpi','600dpi','279dpi','210dpi','180dpi','510dpi','300dpi','454dpi','314dpi','288dpi','401dpi','153dpi','267dpi','345dpi','493dpi','340dpi','604dpi','465dpi','680dpi','256dpi','290dpi','432dpi','273dpi','120dpi','200dpi','367dpi','419dpi','306dpi','303dpi','411dpi','195dpi','518dpi','230dpi','384dpi','315dpi','293dpi','274dpi','235dpi'])
        self.pxl = random.choice(['720x1280','1440x2560','1440x2768','1280x720','1280x800','1080x1920','540x960','1080x2076','1080x2094','1080x2220','480x800','768x1024','1440x2792','1200x1920','720x1384','1920x1080','720x1369','800x1280','720x1440','1080x2058','600x1024','720x1396','2792x1440','1920x1200','2560x1440','1536x2048','720x1382','1080x2113','1080x2198','1080x2131','720x1423','1080x2069','720x1481','1080x2047','1080x2110','1080x2181','1080x2209','1080x2180','1080x2020','1080x2095','1440x2723','1080x2175','720x1365','1440x2699','1080x2218','2699x1440','1440x2907','1080x2257','720x1370','1080x2042','720x1372','1080x2200','1080x2186','720x1361','1080x2024','1080x2006','720x1402','1440x2831','720x1454','1080x2064','1440x2933','720x1411','720x1450','1440x2730','1080x2046','2094x1080','540x888','1440x2759','1080x2274','1080x2178','1440x2706','720x1356','720x1466','1440x2900','2560x1600','1080x2038','1600x2452','1080x2129','720x1422','720x1381','1080x2183','1080x2285','800x1216','1080x2216','1080x2168','1080x2119','1080x2128','1080x2273','2274x1080','1080x2162','1080x2164','2076x1080','1024x768','1080x2173','1440x2845','1080x2134','720x1379','1440x2838','1080x2139','2131x1080','1440x2744','1080x2192','720x1406','1440x2960','1080x2029','2042x1080','1080x2212','1406x720','1080x2288','2047x1080','1080x2051','720x1398','1280x736','1382x720','720x1353','1080x2050','1080x2028','1080x2256','2711x1440','2175x1080','1080x2281','2560x1492','1440x2923','1200x1845','1080x2189','1080x2002','1440x2711','2110x1080','960x540','1080x2033','2200x1080','720x1452','720x1480','1440x2735','720x1472','1080x2277','1080x2169','2874x1440','1600x2560','1080x2151','2218x1080','1080x2182','720x1468','1440x2898','1080x2011','1080x2201','720x1380','1080x2287','2069x1080','1200x1836','2046x1080','720x1439','2058x1080','2182x1080','720x1399','1080x2282','1440x2721','1080x2324','720x1432','1080x2165','1080x2150','1080x2156','1080x1872','1440x3048','1532x2560','720x1355','720x1390','720x1476','720x1410','1080x2032','720x1437','1440x2682','1440x2921','1080x2270','1080x2160','720x1446','1200x1848','1440x2874','1080x2309','1080x2174','1440x2867','1080x2060','1080x2196','1080x2401','1536x1922','1080x2280','1080x2123','720x1435','1440x2927','1080x2276','720x1448','720x1469','720x1344','1080x2187','540x937','1440x3028','1080x2184','1440x2718','1080x2326','840x1834','1440x2935','1440x2880','1440x2892','2048x2048','1080x2195','1080x2322','720x1419','987x1450','1080x2092','1440x3047','720x1358','1080x2136','720x1357','1080x2093','720x1477','1080x2312','1080x2361','720x1341','720x1507','1080x2172','720x1337','1080x2177','1080x2125','1440x2891','1600x2434','720x1394','1080x2159','720x1387','1080x2166','1080x2154','1080x2147','1440x2747','1080x2105','1440x2911','720x1473','1080x2055','1080x2265','720x1436','1080x2190','1600x2526','720x1373','720x1415','1080x2249','1080x2254','720x1455','1440x3040','1080x2149','720x1385','1440x3036','1080x2111','1440x2904','720x1442','720x1377','1080x2307','1080x2327','1080x2141','1080x2025','720x1430','720x1375','1080x2283','1440x2779','1080x2321','1080x2268','1440x2758','1752x2698','1080x2267','1200x1856','1440x2756','720x1464','1080x2234','1080x2171','1080x2155','720x1463','1080x2122','720x1467','1080x2264','720x1349','1440x2999','720x1458','1080x2015','720x1431','1242x2208','1080x2185','1080x2148','1080x2163','1440x2780','720x1445','1080x2146','1200x1916','720x1502','1200x1928','720x1506','720x1424','720x1465','720x1420','1080x2176','720x1521','1080x2315','1080x2400','720x1471','1080x2157','1600x2458','1080x2067','1080x2191','1080x2271','720x1407','800x1208','1080x2087','1080x2199','578x1028','720x1485','540x879','1080x2179','720x1555','810x1598','720x1378','1200x1897','720x1395','720x1459','900x1600','1080x2275','1440x2733'])
        self.samsung = [""SM-A205F"",""SM-J120H"",""SM-J120F"",""SM-J120M"",""SM-J111M"",""SM-J111F"",""SM-J110H"",""SM-J110G"",""SM-J110F"",""SM-J110M"",""SM-J105H"",""SM-J105Y"",""SM-J105B"",""SM-J106H"",""SM-J106F"",""SM-J106B"",""SM-J106M"",""SM-J200F"",""SM-J200M"",""SM-J200G"",""SM-J200H"",""SM-J200F"",""SM-J200GU"",""SM-J260M"",""SM-J260F"",""SM-J260MU"",""SM-J260F"",""SM-J260G"",""SM-J200BT"",""SM-G532G"",""SM-G532M"",""SM-G532MT""]
        self.cgsm = [""dream2qltesq"", ""beyond2q"", ""broadway"", ""dreamqltevzw"", ""b2q"", ""a7y18lte"", ""a50qlteue"", ""a42xqlte"", ""a7y18lte"", ""a40lte"", ""a6plte"", ""a52xqlteue"", ""a5y20qlteue"", ""a3xelte"", ""a42xqlteue"", ""a3xelte"", ""a41lte"", ""a72xlte"", ""dreamlte"", ""hero2qltevzw"", ""beyond0lte"", ""beyond2"", ""starlte"", ""a5y17lte"", ""a7xelte"", ""a71xqlteue"", ""dream2qlteue"", ""dreamqltespr"", ""a5y17lte"", ""beyond1qlteue"",""herolte"",""zerolte"",""hero2te""]
        self.realme = [""RMX3516"", ""RMX3371"", ""RMX3461"", ""RMX3286"", ""RMX3561"", ""RMX3388"", ""RMX3311"", ""RMX3142"", ""RMX2071"", ""RMX1805"", ""RMX1809"", ""RMX1801"", ""RMX1807"", ""RMX1803"", ""RMX1825"", ""RMX1821"", ""RMX1822"", ""RMX1833"", ""RMX1851"", ""RMX1853"", ""RMX1827"", ""RMX1911"", ""RMX1919"", ""RMX1927"", ""RMX1971"", ""RMX1973"", ""RMX2030"", ""RMX2032"", ""RMX1925"", ""RMX1929"", ""RMX2001"", ""RMX2061"", ""RMX2063"", ""RMX2040"", ""RMX2042"", ""RMX2002"", ""RMX2151"", ""RMX2163"", ""RMX2155"", ""RMX2170"", ""RMX2103"", ""RMX3085"", ""RMX3241"", ""RMX3081"", ""RMX3151"", ""RMX3381"", ""RMX3521"", ""RMX3474"", ""RMX3471"", ""RMX3472"", ""RMX3392"", ""RMX3393"", ""RMX3491"", ""RMX1811"", ""RMX2185"", ""RMX3231"", ""RMX2189"", ""RMX2180"", ""RMX2195"", ""RMX2101"", ""RMX1941"", ""RMX1945"", ""RMX3063"", ""RMX3061"", ""RMX3201"", ""RMX3203"", ""RMX3261"", ""RMX3263"", ""RMX3193"", ""RMX3191"", ""RMX3195"", ""RMX3197"", ""RMX3265"", ""RMX3268"", ""RMX3269"",""RMX2027"", ""RMX2020"", ""RMX2021"", ""RMX3581"", ""RMX3501"", ""RMX3503"", ""RMX3511"", ""RMX3310"", ""RMX3312"", ""RMX3551"", ""RMX3301"", ""RMX3300"", ""RMX2202"", ""RMX3363"", ""RMX3360"", ""RMX3366"", ""RMX3361"", ""RMX3031"", ""RMX3370"", ""RMX3357"", ""RMX3560"", ""RMX3562"", ""RMX3350"", ""RMX2193"", ""RMX2161"", ""RMX2050"", ""RMX2156"", ""RMX3242"", ""RMX3171"", ""RMX3430"", ""RMX3235"", ""RMX3506"", ""RMX2117"", ""RMX2173"", ""RMX3161"", ""RMX2205"", ""RMX3462"", ""RMX3478"", ""RMX3372"", ""RMX3574"", ""RMX1831"", ""RMX3121"", ""RMX3122"", ""RMX3125"", ""RMX3043"", ""RMX3042"", ""RMX3041"", ""RMX3092"", ""RMX3093"", ""RMX3571"", ""RMX3475"", ""RMX2200"", ""RMX2201"", ""RMX2111"", ""RMX2112"", ""RMX1901"", ""RMX1903"", ""RMX1992"", ""RMX1993"", ""RMX1991"", ""RMX1931"", ""RMX2142"", ""RMX2081"", ""RMX2085"", ""RMX2083"", ""RMX2086"", ""RMX2144"", ""RMX2051"", ""RMX2025"", ""RMX2075"", ""RMX2076"", ""RMX2072"", ""RMX2052"", ""RMX2176"", ""RMX2121"", ""RMX3115"", ""RMX1921""]
        self.xiaomi = [""2201116SI"", ""M2012K11AI"", ""22011119TI"", ""21091116UI"", ""M2102K1AC"", ""M2012K11I"", ""22041219I"", ""22041216I"", ""2203121C"", ""2106118C"", ""2201123G"", ""2203129G"", ""2201122G"", ""2201122C"", ""2206122SC"", ""22081212C"", ""2112123AG"", ""2112123AC"", ""2109119BC"", ""M2002J9G"", ""M2007J1SC"", ""M2007J17I"", ""M2102J2SC"", ""M2007J3SY"", ""M2007J17G"", ""M2007J3SG"", ""M2011K2G"", ""M2101K9AG "", ""M2101K9R"", ""2109119DG"", ""M2101K9G"", ""2109119DI"", ""M2012K11G"", ""M2102K1G"", ""21081111RG"", ""2107113SG"", ""21051182G"", ""M2105K81AC"", ""M2105K81C"", ""21061119DG"", ""21121119SG"", ""22011119UY"", ""21061119AG"", ""21061119AL"", ""22041219NY"", ""22041219G"", ""21061119BI"", ""220233L2G"", ""220233L2I"", ""220333QNY"", ""220333QAG"", ""M2004J7AC"", ""M2004J7BC"", ""M2004J19C"", ""M2006C3MII"", ""M2010J19SI"", ""M2006C3LG"", ""M2006C3LVG"", ""M2006C3MG"", ""M2006C3MT"", ""M2006C3MNG"", ""M2006C3LII"", ""M2010J19SL"", ""M2010J19SG"", ""M2010J19SY"", ""M2012K11AC"", ""M2012K10C"", ""M2012K11C"", ""22021211RC""]
        self.dvc = random.choice([""30/11"",""31/12"",""29/10""])
        return(random.choice([
             f'Barcelona 118.0.0.28.12 Android ({self.dvc}; 604dpi; 1080x2283; INFINIX MOBILITY LIMITED/Infinix; {str(random.choice(self.infinix))}; qcom; in_ID; 185203672)',
             f'Barcelona 118.0.0.28.12 Android ({self.dvc}; 604dpi; 1080x2283; REALME MOBILITY LIMITED/Realme; {str(random.choice(self.realme))}; qcom; in_ID; 185203672)',
             f'Barcelona 118.0.0.28.12 Android ({self.dvc}; 604dpi; 1080x2283; XIAOMI MOBILITY LIMITED/Xiaomi; {str(random.choice(self.xiaomi))}; qcom; in_ID; 185203672)',
            f'Barcelona 118.0.0.28.12 Android ({self.dvc}; 604dpi; 1080x2283; NEXUS MOBILITY LIMITED/Nexus; {str(random.choice(self.nexus))}; qcom; in_ID; 185203672)',
            f'Barcelona 118.0.0.28.12 Android ({self.dvc}; 604dpi; 1080x2283; MICROMAX MOBILITY LIMITED/Micromax; {str(random.choice(self.micromax))}; qcom; in_ID; 185203672)',
            f'Barcelona 118.0.0.28.12 Android ({self.dvc}; 604dpi; 1080x2283; ONEPLUS MOBILITY LIMITED/One; {str(random.choice(self.onpls))}; qcom; in_ID; 185203672)',
            f'Barcelona 118.0.0.28.12 Android ({self.dvc}; 604dpi; 1080x2283; OPPO MOBILITY LIMITED/Oppo; {str(random.choice(self.oppo))}; {self.opp}; qcom; in_ID; 185203672)',
            f'Barcelona 118.0.0.28.12 Android ({self.dvc}; 604dpi; 1080x2283; VIVO MOBILITY LIMITED/Vivo; {str(random.choice(self.vivo))}; qcom; in_ID; 185203672)',
           ])
       )

        
    def useragent_ajax(self):
        self.chrome = str(random.randint(114,124))
        return(random.choice([
            f'Mozilla/5.0 (Windows NT 10.0; {str(random.randint(1,9))}; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/{str(random.randint(1,9))}.{str(random.randint(1,9))}.{str(random.randint(1,9))}.{str(random.randint(1,9))} Safari/537.36',
            f'Mozilla/5.0 (Windows NT 10.0; {str(random.randint(1,9))}; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/{str(random.randint(1,9))}.{str(random.randint(1,9))}.{str(random.randint(1,9))}.{str(random.randint(1,9))} Safari/537.36',
            ])
        )
        

        


"
ieq42A3y,2024-03-29_stats.json,rdp_snitch,JSON,Saturday 30th of March 2024 07:18:22 PM CDT,"{
  ""ip"": {
    ""128.199.242.196"": 4296,
    ""58.218.204.183"": 9,
    ""2.57.149.186"": 27,
    ""62.204.41.222"": 18,
    ""212.70.149.146"": 9,
    ""198.235.24.230"": 9,
    ""194.165.16.78"": 6,
    ""199.45.154.55"": 3,
    ""117.2.137.179"": 9,
    ""87.251.75.145"": 9,
    ""185.16.38.89"": 6,
    ""194.165.16.76"": 6,
    ""36.78.201.10"": 3,
    ""103.214.8.137"": 12,
    ""196.171.104.218"": 6,
    ""185.170.144.3"": 6,
    ""164.90.160.126"": 9,
    ""167.94.138.36"": 3,
    ""196.190.117.7"": 3,
    ""198.235.24.126"": 9,
    ""180.76.119.217"": 18,
    ""2.57.149.92"": 3,
    ""185.196.220.41"": 9,
    ""193.142.146.227"": 9,
    ""81.19.135.2"": 9,
    ""152.32.245.196"": 3,
    ""14.225.9.184"": 57,
    ""205.210.31.168"": 9,
    ""144.217.24.29"": 3,
    ""45.227.254.8"": 6,
    ""206.168.34.49"": 3,
    ""87.251.75.64"": 3,
    ""45.227.254.119"": 6,
    ""113.160.91.206"": 3,
    ""205.210.31.206"": 9,
    ""144.16.111.79"": 3,
    ""112.4.139.162"": 3,
    ""128.1.43.27"": 528
  },
  ""asn"": {
    ""AS14061"": 4305,
    ""AS4134"": 9,
    ""AS208312"": 30,
    ""AS59425"": 18,
    ""AS204428"": 9,
    ""AS396982"": 36,
    ""AS48721"": 12,
    ""AS398722"": 3,
    ""AS7552"": 9,
    ""AS208091"": 12,
    ""AS201814"": 6,
    ""AS7713"": 3,
    ""AS140810"": 12,
    ""AS24691"": 6,
    ""AS197414"": 6,
    ""AS398324"": 6,
    ""AS24757"": 3,
    ""AS38365"": 18,
    ""AS208046"": 18,
    ""AS209588"": 9,
    ""AS135377"": 531,
    ""AS135905"": 57,
    ""AS16276"": 3,
    ""AS267784"": 12,
    ""AS45899"": 3,
    ""AS2697"": 3,
    ""AS56046"": 3
  },
  ""isp"": {
    ""DigitalOcean, LLC"": 4305,
    ""Chinanet"": 9,
    ""Red Byte LLC"": 30,
    ""Horizon LLC"": 18,
    ""SS-Net"": 9,
    ""Google LLC"": 36,
    ""Flyservers S.A."": 33,
    ""Censys, Inc."": 6,
    ""Viettel Corporation"": 9,
    ""Xhost Internet Solutions LP"": 18,
    ""MEVSPACE sp. z o.o."": 6,
    ""PT. TELKOM INDONESIA"": 3,
    ""MEGACORE"": 12,
    ""TogoTelecom"": 6,
    ""Ethiotelecom"": 3,
    ""Beijing Baidu Netcom Science and Technology Co., Ltd."": 18,
    ""ColocationX Ltd."": 18,
    ""UCLOUD INFORMATION TECHNOLOGY (HK) LIMITED"": 3,
    ""Vietnam Posts and Telecommunications Group"": 57,
    ""OVH Hosting"": 3,
    ""Censys"": 3,
    ""VietNam Post and Telecom Corporation"": 3,
    ""ERNET India"": 3,
    ""China Mobile Communications Corporation"": 3,
    ""Zenlayer Inc"": 528
  },
  ""org"": {
    ""DigitalOcean, LLC"": 4305,
    ""Chinanet JS"": 9,
    ""Chang Way Technologies Co. Limited"": 30,
    ""Horizon LLC"": 18,
    ""4Media Ltd"": 9,
    ""Palo Alto Networks, Inc"": 36,
    ""Flyservers S.A"": 12,
    ""Censys, Inc."": 6,
    ""Unknown"": 21,
    ""Xhost Internet Solutions"": 12,
    ""MEVSPACE sp. z o.o"": 6,
    ""Megacore Technology Company Limited"": 12,
    ""Xhostis"": 6,
    ""Censys, Inc"": 3,
    ""Beijing Baidu Netcom Science and Technology Co., Ltd."": 18,
    ""Makut Investments"": 9,
    ""ColocationX Ltd"": 9,
    ""Alviva Holding Limited"": 9,
    ""Ucloud Information Technology (hk) Limited"": 3,
    ""VNPT"": 57,
    ""SAS, ONYPHE"": 3,
    ""UAB Host Baltic"": 12,
    ""Vietnam Posts and Telecommunications Group"": 3,
    ""ERNET India"": 3,
    ""China Mobile Communications Corporation"": 3,
    ""UCLOUD"": 528
  },
  ""regionName"": {
    ""South West"": 4296,
    ""Jiangsu"": 12,
    ""Lesser Poland"": 30,
    ""Moscow"": 546,
    ""Sliven"": 9,
    ""California"": 36,
    ""Kaunas"": 12,
    ""Central and Western District"": 3,
    ""L\u00e2m \u0110\u1ed3ng Province"": 9,
    ""North Holland"": 27,
    ""Mazovia"": 6,
    ""East Kalimantan"": 3,
    ""Hanoi"": 72,
    ""Maritime"": 6,
    ""Hesse"": 18,
    ""Michigan"": 6,
    ""Addis Ababa"": 3,
    ""Beijing"": 18,
    ""Virginia"": 9,
    ""Bangkok"": 3,
    ""Quebec"": 3,
    ""Vilnius"": 12,
    ""National Capital Territory of Delhi"": 3
  },
  ""country"": {
    ""Singapore"": 4296,
    ""China"": 30,
    ""Poland"": 36,
    ""Russia"": 546,
    ""Bulgaria"": 9,
    ""United States"": 51,
    ""Lithuania"": 24,
    ""Hong Kong"": 3,
    ""Vietnam"": 81,
    ""The Netherlands"": 27,
    ""Indonesia"": 3,
    ""Togo"": 6,
    ""Germany"": 18,
    ""Ethiopia"": 3,
    ""Thailand"": 3,
    ""Canada"": 3,
    ""India"": 3
  },
  ""account"": {
    ""hello"": 4428,
    ""Administr"": 48,
    ""Test"": 42,
    ""qhyMCZkNs"": 3,
    ""ocdcRH"": 3,
    ""WCcilM"": 3,
    ""(empty)"": 15,
    ""SfEnehAbI"": 3,
    ""urkbgD"": 3,
    ""AxwAdG"": 3,
    ""Domain"": 39,
    ""Administrator"": 6,
    ""hEZBygWNm"": 3,
    ""yMCqXY"": 3,
    ""UlkBmK"": 3,
    ""rhqokGzIW"": 3,
    ""MVLJLM"": 3,
    ""mLZXbr"": 3,
    ""1948287240"": 528
  },
  ""keyboard"": {
    ""Unknown"": 5142
  },
  ""client_build"": {
    ""Unknown"": 5142
  },
  ""client_name"": {
    ""Unknown"": 5142
  },
  ""ip_type"": {
    ""hosting & proxy"": 4296,
    ""Unknown"": 237,
    ""hosting"": 597,
    ""mobile"": 12
  }
}"
KtTkXmYD,2024-03-29_stats.json,rdp_snitch,JSON,Saturday 30th of March 2024 07:16:19 PM CDT,"{
  ""ip"": {
    ""128.199.242.196"": 4295,
    ""58.218.204.183"": 9,
    ""2.57.149.186"": 27,
    ""62.204.41.222"": 18,
    ""212.70.149.146"": 9,
    ""198.235.24.230"": 9,
    ""194.165.16.78"": 6,
    ""199.45.154.55"": 3,
    ""117.2.137.179"": 9,
    ""87.251.75.145"": 9,
    ""185.16.38.89"": 6,
    ""194.165.16.76"": 6,
    ""36.78.201.10"": 3,
    ""103.214.8.137"": 12,
    ""196.171.104.218"": 6,
    ""185.170.144.3"": 6,
    ""164.90.160.126"": 9,
    ""167.94.138.36"": 3,
    ""196.190.117.7"": 3,
    ""198.235.24.126"": 9,
    ""180.76.119.217"": 18,
    ""2.57.149.92"": 3,
    ""185.196.220.41"": 9,
    ""193.142.146.227"": 9,
    ""81.19.135.2"": 9,
    ""152.32.245.196"": 3,
    ""14.225.9.184"": 57,
    ""205.210.31.168"": 9,
    ""144.217.24.29"": 3,
    ""45.227.254.8"": 6,
    ""206.168.34.49"": 3,
    ""87.251.75.64"": 3,
    ""45.227.254.119"": 6,
    ""113.160.91.206"": 3,
    ""205.210.31.206"": 9,
    ""144.16.111.79"": 3,
    ""112.4.139.162"": 3,
    ""128.1.43.27"": 528
  },
  ""asn"": {
    ""AS14061"": 4304,
    ""AS4134"": 9,
    ""AS208312"": 30,
    ""AS59425"": 18,
    ""AS204428"": 9,
    ""AS396982"": 36,
    ""AS48721"": 12,
    ""AS398722"": 3,
    ""AS7552"": 9,
    ""AS208091"": 12,
    ""AS201814"": 6,
    ""AS7713"": 3,
    ""AS140810"": 12,
    ""AS24691"": 6,
    ""AS197414"": 6,
    ""AS398324"": 6,
    ""AS24757"": 3,
    ""AS38365"": 18,
    ""AS208046"": 18,
    ""AS209588"": 9,
    ""AS135377"": 531,
    ""AS135905"": 57,
    ""AS16276"": 3,
    ""AS267784"": 12,
    ""AS45899"": 3,
    ""AS2697"": 3,
    ""AS56046"": 3
  },
  ""isp"": {
    ""DigitalOcean, LLC"": 4304,
    ""Chinanet"": 9,
    ""Red Byte LLC"": 30,
    ""Horizon LLC"": 18,
    ""SS-Net"": 9,
    ""Google LLC"": 36,
    ""Flyservers S.A."": 33,
    ""Censys, Inc."": 6,
    ""Viettel Corporation"": 9,
    ""Xhost Internet Solutions LP"": 18,
    ""MEVSPACE sp. z o.o."": 6,
    ""PT. TELKOM INDONESIA"": 3,
    ""MEGACORE"": 12,
    ""TogoTelecom"": 6,
    ""Ethiotelecom"": 3,
    ""Beijing Baidu Netcom Science and Technology Co., Ltd."": 18,
    ""ColocationX Ltd."": 18,
    ""UCLOUD INFORMATION TECHNOLOGY (HK) LIMITED"": 3,
    ""Vietnam Posts and Telecommunications Group"": 57,
    ""OVH Hosting"": 3,
    ""Censys"": 3,
    ""VietNam Post and Telecom Corporation"": 3,
    ""ERNET India"": 3,
    ""China Mobile Communications Corporation"": 3,
    ""Zenlayer Inc"": 528
  },
  ""org"": {
    ""DigitalOcean, LLC"": 4304,
    ""Chinanet JS"": 9,
    ""Chang Way Technologies Co. Limited"": 30,
    ""Horizon LLC"": 18,
    ""4Media Ltd"": 9,
    ""Palo Alto Networks, Inc"": 36,
    ""Flyservers S.A"": 12,
    ""Censys, Inc."": 6,
    ""Unknown"": 21,
    ""Xhost Internet Solutions"": 12,
    ""MEVSPACE sp. z o.o"": 6,
    ""Megacore Technology Company Limited"": 12,
    ""Xhostis"": 6,
    ""Censys, Inc"": 3,
    ""Beijing Baidu Netcom Science and Technology Co., Ltd."": 18,
    ""Makut Investments"": 9,
    ""ColocationX Ltd"": 9,
    ""Alviva Holding Limited"": 9,
    ""Ucloud Information Technology (hk) Limited"": 3,
    ""VNPT"": 57,
    ""SAS, ONYPHE"": 3,
    ""UAB Host Baltic"": 12,
    ""Vietnam Posts and Telecommunications Group"": 3,
    ""ERNET India"": 3,
    ""China Mobile Communications Corporation"": 3,
    ""UCLOUD"": 528
  },
  ""regionName"": {
    ""South West"": 4295,
    ""Jiangsu"": 12,
    ""Lesser Poland"": 30,
    ""Moscow"": 546,
    ""Sliven"": 9,
    ""California"": 36,
    ""Kaunas"": 12,
    ""Central and Western District"": 3,
    ""L\u00e2m \u0110\u1ed3ng Province"": 9,
    ""North Holland"": 27,
    ""Mazovia"": 6,
    ""East Kalimantan"": 3,
    ""Hanoi"": 72,
    ""Maritime"": 6,
    ""Hesse"": 18,
    ""Michigan"": 6,
    ""Addis Ababa"": 3,
    ""Beijing"": 18,
    ""Virginia"": 9,
    ""Bangkok"": 3,
    ""Quebec"": 3,
    ""Vilnius"": 12,
    ""National Capital Territory of Delhi"": 3
  },
  ""country"": {
    ""Singapore"": 4295,
    ""China"": 30,
    ""Poland"": 36,
    ""Russia"": 546,
    ""Bulgaria"": 9,
    ""United States"": 51,
    ""Lithuania"": 24,
    ""Hong Kong"": 3,
    ""Vietnam"": 81,
    ""The Netherlands"": 27,
    ""Indonesia"": 3,
    ""Togo"": 6,
    ""Germany"": 18,
    ""Ethiopia"": 3,
    ""Thailand"": 3,
    ""Canada"": 3,
    ""India"": 3
  },
  ""account"": {
    ""hello"": 4427,
    ""Administr"": 48,
    ""Test"": 42,
    ""qhyMCZkNs"": 3,
    ""ocdcRH"": 3,
    ""WCcilM"": 3,
    ""(empty)"": 15,
    ""SfEnehAbI"": 3,
    ""urkbgD"": 3,
    ""AxwAdG"": 3,
    ""Domain"": 39,
    ""Administrator"": 6,
    ""hEZBygWNm"": 3,
    ""yMCqXY"": 3,
    ""UlkBmK"": 3,
    ""rhqokGzIW"": 3,
    ""MVLJLM"": 3,
    ""mLZXbr"": 3,
    ""1948287240"": 528
  },
  ""keyboard"": {
    ""Unknown"": 5141
  },
  ""client_build"": {
    ""Unknown"": 5141
  },
  ""client_name"": {
    ""Unknown"": 5141
  },
  ""ip_type"": {
    ""hosting & proxy"": 4295,
    ""Unknown"": 237,
    ""hosting"": 597,
    ""mobile"": 12
  }
}"
iiuWCF3M,2024-03-29_stats.json,rdp_snitch,JSON,Saturday 30th of March 2024 07:15:09 PM CDT,"{
  ""ip"": {
    ""128.199.242.196"": 4294,
    ""58.218.204.183"": 9,
    ""2.57.149.186"": 27,
    ""62.204.41.222"": 18,
    ""212.70.149.146"": 9,
    ""198.235.24.230"": 9,
    ""194.165.16.78"": 6,
    ""199.45.154.55"": 3,
    ""117.2.137.179"": 9,
    ""87.251.75.145"": 9,
    ""185.16.38.89"": 6,
    ""194.165.16.76"": 6,
    ""36.78.201.10"": 3,
    ""103.214.8.137"": 12,
    ""196.171.104.218"": 6,
    ""185.170.144.3"": 6,
    ""164.90.160.126"": 9,
    ""167.94.138.36"": 3,
    ""196.190.117.7"": 3,
    ""198.235.24.126"": 9,
    ""180.76.119.217"": 18,
    ""2.57.149.92"": 3,
    ""185.196.220.41"": 9,
    ""193.142.146.227"": 9,
    ""81.19.135.2"": 9,
    ""152.32.245.196"": 3,
    ""14.225.9.184"": 57,
    ""205.210.31.168"": 9,
    ""144.217.24.29"": 3,
    ""45.227.254.8"": 6,
    ""206.168.34.49"": 3,
    ""87.251.75.64"": 3,
    ""45.227.254.119"": 6,
    ""113.160.91.206"": 3,
    ""205.210.31.206"": 9,
    ""144.16.111.79"": 3,
    ""112.4.139.162"": 3,
    ""128.1.43.27"": 528
  },
  ""asn"": {
    ""AS14061"": 4303,
    ""AS4134"": 9,
    ""AS208312"": 30,
    ""AS59425"": 18,
    ""AS204428"": 9,
    ""AS396982"": 36,
    ""AS48721"": 12,
    ""AS398722"": 3,
    ""AS7552"": 9,
    ""AS208091"": 12,
    ""AS201814"": 6,
    ""AS7713"": 3,
    ""AS140810"": 12,
    ""AS24691"": 6,
    ""AS197414"": 6,
    ""AS398324"": 6,
    ""AS24757"": 3,
    ""AS38365"": 18,
    ""AS208046"": 18,
    ""AS209588"": 9,
    ""AS135377"": 531,
    ""AS135905"": 57,
    ""AS16276"": 3,
    ""AS267784"": 12,
    ""AS45899"": 3,
    ""AS2697"": 3,
    ""AS56046"": 3
  },
  ""isp"": {
    ""DigitalOcean, LLC"": 4303,
    ""Chinanet"": 9,
    ""Red Byte LLC"": 30,
    ""Horizon LLC"": 18,
    ""SS-Net"": 9,
    ""Google LLC"": 36,
    ""Flyservers S.A."": 33,
    ""Censys, Inc."": 6,
    ""Viettel Corporation"": 9,
    ""Xhost Internet Solutions LP"": 18,
    ""MEVSPACE sp. z o.o."": 6,
    ""PT. TELKOM INDONESIA"": 3,
    ""MEGACORE"": 12,
    ""TogoTelecom"": 6,
    ""Ethiotelecom"": 3,
    ""Beijing Baidu Netcom Science and Technology Co., Ltd."": 18,
    ""ColocationX Ltd."": 18,
    ""UCLOUD INFORMATION TECHNOLOGY (HK) LIMITED"": 3,
    ""Vietnam Posts and Telecommunications Group"": 57,
    ""OVH Hosting"": 3,
    ""Censys"": 3,
    ""VietNam Post and Telecom Corporation"": 3,
    ""ERNET India"": 3,
    ""China Mobile Communications Corporation"": 3,
    ""Zenlayer Inc"": 528
  },
  ""org"": {
    ""DigitalOcean, LLC"": 4303,
    ""Chinanet JS"": 9,
    ""Chang Way Technologies Co. Limited"": 30,
    ""Horizon LLC"": 18,
    ""4Media Ltd"": 9,
    ""Palo Alto Networks, Inc"": 36,
    ""Flyservers S.A"": 12,
    ""Censys, Inc."": 6,
    ""Unknown"": 21,
    ""Xhost Internet Solutions"": 12,
    ""MEVSPACE sp. z o.o"": 6,
    ""Megacore Technology Company Limited"": 12,
    ""Xhostis"": 6,
    ""Censys, Inc"": 3,
    ""Beijing Baidu Netcom Science and Technology Co., Ltd."": 18,
    ""Makut Investments"": 9,
    ""ColocationX Ltd"": 9,
    ""Alviva Holding Limited"": 9,
    ""Ucloud Information Technology (hk) Limited"": 3,
    ""VNPT"": 57,
    ""SAS, ONYPHE"": 3,
    ""UAB Host Baltic"": 12,
    ""Vietnam Posts and Telecommunications Group"": 3,
    ""ERNET India"": 3,
    ""China Mobile Communications Corporation"": 3,
    ""UCLOUD"": 528
  },
  ""regionName"": {
    ""South West"": 4294,
    ""Jiangsu"": 12,
    ""Lesser Poland"": 30,
    ""Moscow"": 546,
    ""Sliven"": 9,
    ""California"": 36,
    ""Kaunas"": 12,
    ""Central and Western District"": 3,
    ""L\u00e2m \u0110\u1ed3ng Province"": 9,
    ""North Holland"": 27,
    ""Mazovia"": 6,
    ""East Kalimantan"": 3,
    ""Hanoi"": 72,
    ""Maritime"": 6,
    ""Hesse"": 18,
    ""Michigan"": 6,
    ""Addis Ababa"": 3,
    ""Beijing"": 18,
    ""Virginia"": 9,
    ""Bangkok"": 3,
    ""Quebec"": 3,
    ""Vilnius"": 12,
    ""National Capital Territory of Delhi"": 3
  },
  ""country"": {
    ""Singapore"": 4294,
    ""China"": 30,
    ""Poland"": 36,
    ""Russia"": 546,
    ""Bulgaria"": 9,
    ""United States"": 51,
    ""Lithuania"": 24,
    ""Hong Kong"": 3,
    ""Vietnam"": 81,
    ""The Netherlands"": 27,
    ""Indonesia"": 3,
    ""Togo"": 6,
    ""Germany"": 18,
    ""Ethiopia"": 3,
    ""Thailand"": 3,
    ""Canada"": 3,
    ""India"": 3
  },
  ""account"": {
    ""hello"": 4426,
    ""Administr"": 48,
    ""Test"": 42,
    ""qhyMCZkNs"": 3,
    ""ocdcRH"": 3,
    ""WCcilM"": 3,
    ""(empty)"": 15,
    ""SfEnehAbI"": 3,
    ""urkbgD"": 3,
    ""AxwAdG"": 3,
    ""Domain"": 39,
    ""Administrator"": 6,
    ""hEZBygWNm"": 3,
    ""yMCqXY"": 3,
    ""UlkBmK"": 3,
    ""rhqokGzIW"": 3,
    ""MVLJLM"": 3,
    ""mLZXbr"": 3,
    ""1948287240"": 528
  },
  ""keyboard"": {
    ""Unknown"": 5140
  },
  ""client_build"": {
    ""Unknown"": 5140
  },
  ""client_name"": {
    ""Unknown"": 5140
  },
  ""ip_type"": {
    ""hosting & proxy"": 4294,
    ""Unknown"": 237,
    ""hosting"": 597,
    ""mobile"": 12
  }
}"
U5NUNSHC,Setup Accounts,LegendzHackz,Lua,Saturday 30th of March 2024 06:14:11 PM CDT,"local Storage = game:GetService(""ReplicatedStorage"");
local Workspace = game:GetService(""Workspace"");
local Players = game:GetService(""Players"");
local Player = Players.LocalPlayer

-- Local Initiative Services

local TeleportService = game:GetService(""TeleportService"");
local InputService = game:GetService(""UserInputService"");
local ChatService = game:GetService(""TextChatService"");
local HttpService = game:GetService(""HttpService"");
local RunService = game:GetService(""RunService"");
local CoreGui = game:GetService(""CoreGui"");
local Camera = Workspace.Camera
local Gui = Player.PlayerGui
local PId, JId = game.PlaceId, game.JobId

-- Initiatives

local AdminPanel = Gui.Admin
local Room = Workspace.Room
local Stalls = Workspace.Stalls
local Events = Storage.EVENTS
local AdminEvent = Events.NOM

-- Recollectives

local Heartbeat = RunService.Heartbeat

function Shorten(Username)
    local PlayerList = {}
    for _, CPlayer in pairs(Players:GetPlayers()) do
        if CPlayer.Name:lower():sub(1, #Username) == Username:lower() or CPlayer.DisplayName:lower():sub(1, #Username) == Username:lower() then
            table.insert(PlayerList, CPlayer)
        end
    end
    return PlayerList
end

function Hop()
    pcall(function()
        local Servers = {}
        for _, v in ipairs(HttpService:JSONDecode(game:HttpGetAsync(""https://games.roblox.com/v1/games/"" .. PlaceId .. ""/servers/Public?sortOrder=Asc&limit=100"")).data) do
            if type(v) == ""table"" and v.maxPlayers > v.playing and v.Id ~= JobId then
                Servers[#Servers + 1] = v.id
            end
        end
        if #Servers > 0 then
            TeleportService:TeleportToPlaceInstance(PlaceId, Servers[math.random(1, #Servers)])
        else
            print(""Server not found."")
        end
    end)
end

function StealStall()
    pcall(function()
        for _, Steal in next, Stalls:GetDescendants() do
            if Steal:IsA(""ProximityPrompt"") then
                if (Player.Character.HumanoidRootPart.Position - Steal.Parent.Position).Magnitude < getgenv().Settings.Distance then
                    fireproximityprompt(Steal)
                    Steal.Parent.Parent.Edit:FireServer(""Empty"", ""Empty"")
                end
            end
        end
    end)
end

function CloseStall()
    pcall(function()
        for _, CloseStall in next, Stalls:GetDescendants() do
            if CloseStall:IsA(""RemoteEvent"") and CloseStall.Name == ""CloseStall"" then
                CloseStall:FireServer()
            end
        end
    end)
end

function EmptyStall()
    pcall(function()
        StealStall()
        CloseStall()
    end)
end

function Hide(Target, Value)
    pcall(function()
        if Value then
            for _, Search in next, Players:GetPlayers() do
                if Search.Name == Target then
                    for _, Staff in next, Players:GetPlayers() do
                        if Staff ~= Player then
                            if table.find(getgenv().Settings.Whitelist, Staff.UserId) then
                                Search.Character.HumanoidRootPart.Velocity = Vector3.new()
                                Search.Character.HumanoidRootPart.CFrame = Staff.Character.HumanoidRootPart.CFrame * CFrame.new(-getgenv().Settings.X, getgenv().Settings.Y, getgenv().Settings.Z)
                            end
                        end
                    end
                end
            end
        elseif not Value then
            for _, Search in next, Players:GetPlayers() do
                if Search.Name == Target then
                    for _, Staff in next, Players:GetPlayers() do
                        if Staff ~= Player then
                            if table.find(getgenv().Settings.Whitelist, Staff.UserId) then
                                Search.Character.HumanoidRootPart.Velocity = Vector3.new()
                                Search.Character.HumanoidRootPart.CFrame = Staff.Character.HumanoidRootPart.CFrame * CFrame.new(getgenv().Settings.X, getgenv().Settings.Y, getgenv().Settings.Z)
                            end
                        end
                    end
                end
            end
        end
    end)
end

ChatService.MessageReceived:Connect(function(Message)
    for _, Search in next, Players:GetPlayers() do
        if Search ~= Player and table.find(getgenv().Settings.Whitelist, Search.UserId) then
            if Message.TextSource.UserId == Search.UserId and Message.Text == getgenv().Settings.Prefix .. ""disconnect"" then
                Player:Kick(""You have been disconnected."")
            elseif Message.TextSource.UserId == Search.UserId and Message.Text == getgenv().Settings.Prefix .. ""empty"" then
                EmptyStall()
            elseif Message.TextSource.UserId == Search.UserId and Message.Text == getgenv().Settings.Prefix .. ""giant"" then
                AdminEvent:FireServer(""huge"")
            elseif Message.TextSource.UserId == Search.UserId and Message.Text == getgenv().Settings.Prefix .. ""mini"" then
                AdminEvent:FireServer(""mini"")
            elseif Message.TextSource.UserId == Search.UserId and Message.Text == getgenv().Settings.Prefix .. ""event"" then
                AdminEvent:FireServer(""mini"")
            elseif Message.TextSource.UserId == Search.UserId and Message.Text == getgenv().Settings.Prefix .. ""respawn"" then
                pcall(function()
                    local cOld = Player.Character.HumanoidRootPart.CFrame
                    Player.Character:BreakJoints()
                    Player.CharacterAdded:Wait():WaitForChild(""HumanoidRootPart"").CFrame = cOld
                end)
            elseif Message.TextSource.UserId == Search.UserId and Message.Text == getgenv().Settings.Prefix .. ""rejoin"" then
                TeleportService:TeleportToPlaceInstance(PlaceId, JobId, Player)
            elseif Message.TextSource.UserId == Search.UserId and Message.Text == getgenv().Settings.Prefix .. ""hop"" then
                Hop()
            elseif Message.TextSource.UserId == Search.UserId and Message.Text == getgenv().Settings.Prefix .. ""flash"" then
                local gOld = getgenv().Settings.Y
                for Iter = 1, 5 do
                    task.wait(0.1)
                    getgenv().Settings.Y = 25
                    task.wait(0.1)
                    getgenv().Settings.Y = 3.5
                end
                task.wait(0.7)
                getgenv().Settings.Y = gOld
            elseif Message.TextSource.UserId == Search.UserId and Message.Text == getgenv().Settings.Prefix .. ""default"" or Message.Text == getgenv().Settings.Prefix .. ""def"" then
                getgenv().Settings.X = 4
                getgenv().Settings.Y = 0
                getgenv().Settings.Z = 0
            elseif Message.TextSource.UserId == Search.UserId and Message.Text == getgenv().Settings.Prefix .. ""big"" or Message.Text == getgenv().Settings.Prefix .. ""huge"" then
                getgenv().Settings.X = 7.5
                getgenv().Settings.Y = 3.5
                getgenv().Settings.Z = 0
            elseif Message.TextSource.UserId == Search.UserId and Message.Text == getgenv().Settings.Prefix .. ""small"" or Message.Text == getgenv().Settings.Prefix .. ""tiny"" then
                getgenv().Settings.X = 2.5
                getgenv().Settings.Y = 0
                getgenv().Settings.Z = 0
            elseif Message.TextSource.UserId == Search.UserId and Message.Text == getgenv().Settings.Prefix .. ""conc"" or Message.Text == getgenv().Settings.Prefix .. ""conceal"" then
                getgenv().Settings.Y = 5000
            elseif Message.TextSource.UserId == Search.UserId and Message.Text == getgenv().Settings.Prefix .. ""reveal"" or Message.Text == getgenv().Settings.Prefix .. ""rev"" then
                getgenv().Settings.Y = 3.5
            elseif Message.TextSource.UserId == Search.UserId and Message.Text == getgenv().Settings.Prefix .. ""hide"" then
                getgenv().Settings.Hide = true
            elseif Message.TextSource.UserId == Search.UserId and Message.Text == getgenv().Settings.Prefix .. ""unhide"" then
                getgenv().Settings.Hide = false
                Player.Character.HumanoidRootPart.CFrame = Search.Character.HumanoidRootPart.CFrame * CFrame.new(0, 5, 0)
            elseif Message.TextSource.UserId == Search.UserId and Message.Text == getgenv().Settings.Prefix .. ""bring"" then
                Player.Character.HumanoidRootPart.CFrame = Search.Character.HumanoidRootPart.CFrame * CFrame.new(0, 0, 0)
            end
        end
    end
end)

Heartbeat:Connect(function()
    pcall(function()
        if getgenv().Settings.Hide then
            Hide(getgenv().Settings.Target, getgenv().Settings.Value)
        end
    end)
end)"
hp9TCAXZ,Untitled,RenSafaray,Java,Saturday 30th of March 2024 05:26:43 PM CDT,"import java.util.ArrayList; // Импортируем класс ArrayList для создания списков
import java.util.HashMap; // Импортируем класс HashMap для создания хэш-таблиц
import java.util.List; // Импортируем интерфейс List для работы со списками
import java.util.Map; // Импортируем интерфейс Map для работы с хэш-таблицами
import java.util.Scanner; // Импортируем класс Scanner для чтения данных с клавиатуры

public class lab3 { // Объявляем класс lab3

    static class Article { // Объявляем статический класс Article (Статья)
        private String title; // Объявляем приватное поле title (Заголовок) типа String
        private String description; // Объявляем приватное поле description (Описание) типа String
        private double fine; // Объявляем приватное поле fine (Штраф) типа double

        public Article(String title, String description, double fine) { // Объявляем конструктор для класса Article
            this.title = title; // Инициализируем поле title
            this.description = description; // Инициализируем поле description
            this.fine = fine; // Инициализируем поле fine
        }

        public String getTitle() { // Объявляем метод getTitle для получения значения поля title
            return title; // Возвращаем значение поля title
        }

        public String getDescription() { // Объявляем метод getDescription для получения значения поля description
            return description; // Возвращаем значение поля description
        }

        public double getFine() { // Объявляем метод getFine для получения значения поля fine
            return fine; // Возвращаем значение поля fine
        }
    }

    static class Violation { // Объявляем статический класс Violation (Нарушение)
        private String fullName; // Объявляем приватное поле fullName (ФИО) типа String
        private String carBrand; // Объявляем приватное поле carBrand (Марка машины) типа String
        private String licensePlate; // Объявляем приватное поле licensePlate (Номерные знаки) типа String
        private String violation; // Объявляем приватное поле violation (Нарушение) типа String
        private double fine; // Объявляем приватное поле fine (Штраф) типа double

        public Violation(String fullName, String carBrand, String licensePlate, String violation, double fine) { // Объявляем конструктор для класса Violation
            this.fullName = fullName; // Инициализируем поле fullName
            this.carBrand = carBrand; // Инициализируем поле carBrand
            this.licensePlate = licensePlate; // Инициализируем поле licensePlate
            this.violation = violation; // Инициализируем поле violation
            this.fine = fine; // Инициализируем поле fine
        }

        public String getFullName() { // Объявляем метод getFullName для получения значения поля fullName
            return fullName; // Возвращаем значение поля fullName
        }

        public String getCarBrand() { // Объявляем метод getCarBrand для получения значения поля carBrand
            return carBrand; // Возвращаем значение поля carBrand
        }

        public String getLicensePlate() { // Объявляем метод getLicensePlate для получения значения поля licensePlate
            return licensePlate; // Возвращаем значение поля licensePlate
        }

        public String getViolation() { // Объявляем метод getViolation для получения значения поля violation
            return violation; // Возвращаем значение поля violation
        }

        public double getFine() { // Объявляем метод getFine для получения значения поля fine
            return fine; // Возвращаем значение поля fine
        }
    }

    static class DriverViolations { // Объявляем статический класс DriverViolations (Нарушения водителя)
        private Map<String, List<Violation>> violations; // Объявляем приватное поле violations (Нарушения) типа Map<String, List<Violation>>

        public DriverViolations() { // Объявляем конструктор для класса DriverViolations
            violations = new HashMap<>(); // Инициализируем поле violations
        }

        public void addViolation(Violation violation) { // Объявляем метод addViolation для добавления нарушения
            String fullName = violation.getFullName(); // Получаем ФИО водителя из объекта Violation
            if (!violations.containsKey(fullName)) { // Проверяем, есть ли уже в списке нарушений водитель с таким ФИО
                violations.put(fullName, new ArrayList<>()); // Если нет, то добавляем нового водителя в список
            }
            violations.get(fullName).add(violation); // Добавляем нарушение в список нарушений водителя
        }

        public List<Violation> getViolationsByFullName(String fullName) { // Объявляем метод getViolationsByFullName для получения списка нарушений водителя по его ФИО
            return violations.getOrDefault(fullName, new ArrayList<>()); // Возвращаем список нарушений водителя или пустой список, если нарушений нет
        }
    }

    public static void main(String[] args) { // Объявляем главный метод main
        Scanner scanner = new Scanner(System.in); // Создаем объект Scanner для чтения данных с клавиатуры
        HashMap<String, Article> articles = new HashMap<>(); // Создаем хэш-таблицу articles для хранения статей
        articles.put(""Парковка на тротуаре"", new Article(""Парковка на тротуаре"", ""Штраф за парковку на тротуаре составляет 500 рублей"", 500)); // Добавляем статью ""Парковка на тротуаре"" в хэш-таблицу articles
        articles.put(""Превышение скорости"", new Article(""Превышение скорости"", ""Штраф за превышение скорости зависит от величины превышения и может достигать 5000 рублей"", 5000)); // Добавляем статью ""Превышение скорости"" в хэш-таблицу articles

        DriverViolations driverViolations = new DriverViolations(); // Создаем объект DriverViolations для хранения нарушений водителей

        boolean exit = false; // Объявляем переменную exit типа boolean для выхода из цикла
        while (!exit) { // Запускаем цикл while, пока exit равно false
            System.out.println(""\n1. Добавить правонарушителя""); // Выводим меню на экран
            System.out.println(""2. Правонарушения"");
            System.out.println(""3. Проверить правонарушения водителя"");
            System.out.println(""0. Выход"");
            System.out.println(""Ваш выбор: "");
            String operation = scanner.nextLine(); // Считываем выбор пользователя с клавиатуры

            switch (operation) { // Запускаем оператор switch для выбора действия в зависимости от выбора пользователя
                case ""1"": // Если пользователь выбрал ""1""
                    System.out.print(""Введите ФИО: "");
                    String fullName = scanner.nextLine(); // Считываем ФИО водителя с клавиатуры
                    System.out.print(""Введите марку машины: "");
                    String carBrand = scanner.nextLine(); // Считываем марку машины с клавиатуры
                    System.out.print(""Введите номерные знаки: "");
                    String licensePlate = scanner.nextLine(); // Считываем номерные знаки машины с клавиатуры
                    System.out.print(""Введите название правонарушения: "");
                    String violation = scanner.nextLine(); // Считываем название правонарушения с клавиатуры
                    System.out.print(""Введите сумму штрафа: "");
                    double fine = scanner.nextDouble(); // Считываем сумму штрафа с клавиатуры
                    scanner.nextLine(); // Считываем символ перевода строки
                    Article article = articles.getOrDefault(violation, new Article(violation, """", fine)); // Получаем статью из хэш-таблицы articles или создаем новую статью, если ее нет в таблице
                    Violation violationObj = new Violation(fullName, carBrand, licensePlate, violation, fine); // Создаем объект Violation с данными о нарушении
                    driverViolations.addViolation(violationObj); // Добавляем нарушение в список нарушений водителя
                    articles.putIfAbsent(violation, article); // Добавляем статью в хэш-таблицу articles, если ее еще нет там
                    System.out.println(""Правонарушение добавлено: "");
                    System.out.println(""ФИО: "" + violationObj.getFullName());
                    System.out.println(""Марка машины: "" + violationObj.getCarBrand());
                    System.out.println(""Номерные знаки: "" + violationObj.getLicensePlate());
                    System.out.println(""Правонарушение: "" + violationObj.getViolation());
                    System.out.println(""Штраф: "" + violationObj.getFine());
                    System.out.println(""Описание: "" + article.getDescription());
                    break;
                case ""2"": // Если пользователь выбрал ""2""
                    System.out.println(""Список правонарушений:"");
                    for (Map.Entry<String, Article> entry : articles.entrySet()) { // Перебираем все элементы хэш-таблицы articles
                        System.out.println(entry.getKey() + "": "" + entry.getValue().getDescription()); // Выводим название и описание каждой статьи
                    }
                    break;
                case ""3"": // Если пользователь выбрал ""3""
                    System.out.print(""Введите ФИО водителя: "");
                    String driverFullName = scanner.nextLine(); // Считываем ФИО водителя с клавиатуры
                    List<Violation> driverViolationsList = driverViolations.getViolationsByFullName(driverFullName); // Получаем список нарушений водителя по его ФИО
                    if (driverViolationsList.isEmpty()) { // Проверяем, пустой ли список нарушений
                        System.out.println(""У водителя нет правонарушений."");
                    } else {
                        System.out.println(""Список правонарушений водителя:"");
                        for (Violation violation1 : driverViolationsList) { // Перебираем все нарушения водителя
                            System.out.println(""Марка машины: "" + violation1.getCarBrand());
                            System.out.println(""Номерные знаки: "" + violation1.getLicensePlate());
                            System.out.println(""Правонарушение: "" + violation1.getViolation());
                            System.out.println(""Штраф: "" + violation1.getFine());
                            System.out.println(""------------------------"");
                        }
                    }
                    break;
                case ""0"": // Если пользователь выбрал ""0""
                    exit = true; // Устанавливаем значение переменной exit в true для выхода из цикла
                    break;
                default: // Если пользователь ввел неверное значение
                    System.out.println(""Неверный выбор. Пожалуйста, выберите снова."");
            }
        }
    }
}"
0Ui23PFH,Untitled,Moolah60,JSON,Saturday 30th of March 2024 05:09:36 PM CDT,"[
  4509501,
  7723665,
  33366123,
  17353148,
  14489786,
  14651325,
  10819476,
  13193505,
  13965600,
  33798390,
  10051029,
  33653472,
  11624425,
  15700448,
  6318932,
  5914632,
  16060146,
  33154222,
  32604690,
  9300900,
  12889206,
  33732815,
  33016460,
  32013821,
  6490315,
  33073580,
  2638421,
  11850535,
  33686754,
  16033044,
  3586493,
  33207666,
  33439413,
  5934331,
  33357547,
  11230068,
  9874860,
  16511472,
  14152505,
  13471319,
  33731427,
  2957933,
  32613468,
  33765401,
  10906247,
  9354508,
  33874487,
  13757859,
  6571810,
  6394573,
  6799749,
  15830469,
  17131395,
  33787132,
  32662742,
  6319686,
  33465803,
  16860350,
  33259089,
  11228344,
  14496034,
  17316383,
  33011545,
  14716519,
  15761985,
  6625692,
  13600566,
  17143628,
  14338021,
  12718163,
  15078607,
  5249413,
  15267450,
  33583359,
  15198455,
  32326761,
  4688859,
  32555681,
  15467460,
  15473257,
  14178942,
  12787451,
  16516552,
  32346926,
  13805677,
  32674827,
  33402968,
  11421939,
  16040382,
  13332729,
  12233977,
  13406756,
  32457745,
  9748251,
  6538349,
  33510448,
  16469066,
  9075857,
  16435820,
  13672968,
  12428983,
  15858229,
  12290925,
  33777444,
  9068571,
  4920061,
  10581509,
  16402879,
  33895505,
  33773758,
  5503006,
  14574242,
  16999757,
  32993268,
  11508298,
  11219056,
  32966777,
  10009169,
  16749439,
  8107166,
  32896853,
  33077349,
  17260168,
  10823089,
  33312888,
  6154628,
  33007967,
  7813166,
  13774881,
  32796226,
  17133315,
  33722078,
  5323387,
  2906970,
  33525074,
  11839641,
  15420036,
  12639493,
  9466817,
  14464414,
  13467389,
  32553180,
  11720790,
  32735240,
  33870456,
  33750783,
  33548519,
  32772928,
  13743051,
  13222458,
  16275441,
  33776581,
  15297912,
  9472843,
  8456041,
  17355382,
  8299520,
  34020672,
  11490264,
  32461782,
  16304908,
  15192790,
  33131194,
  9155601,
  16492724,
  15203030,
  15259630,
  32952773,
  8172803,
  15928709,
  16281895,
  13868982,
  17286171,
  9573598,
  32976718,
  33676138,
  9275473,
  16415140,
  8994381,
  32683443,
  32741858,
  33141793,
  32324215,
  11751295,
  33878102,
  6666526,
  8295360,
  33775733,
  5157826,
  33824379,
  33467400,
  11306609,
  17082675,
  16806763,
  33656620,
  14050328,
  14156653,
  16560204,
  32846007,
  14767631,
  33238318,
  17289731,
  10430757,
  14240932,
  32538645,
  33368062,
  12457806,
  32542108,
  12682001,
  11315399,
  16959922,
  14699674,
  16667785,
  15504835,
  14621082,
  9065501,
  6516913,
  33819020,
  33169815,
  14344605,
  33717191,
  17409413,
  10501344,
  33764032,
  11367112,
  33704153,
  13095012,
  6413830,
  12299376,
  16386698,
  33249977,
  9316017,
  4309942,
  11133165,
  11229354,
  32605391,
  33385811,
  16875437,
  11840802,
  16442364,
  16860749,
  7619971,
  14216267,
  16332989,
  10550223,
  15612911,
  11288692,
  11606797,
  4765039,
  16358317,
  8226917,
  5636073,
  32435711,
  32811037,
  15526051,
  32886114,
  33640350,
  7064985,
  33638708,
  6485540,
  11422140,
  32997763,
  32731217,
  14488144,
  32915558,
  9239390,
  33088845,
  13051691,
  13142711,
  10236333,
  17053581,
  552087,
  9209286,
  32453412,
  16943339,
  10758509,
  32366020,
  32440712,
  7435589,
  33399497,
  32471166,
  6645839,
  15931776,
  33022021,
  32652688,
  16608404,
  7084049,
  33489792,
  33745166,
  10849258,
  15108399,
  32535883,
  6971022,
  7201482,
  33344990,
  5102717,
  6148897,
  32416628,
  9099970,
  14800180,
  16447057,
  33009759,
  8783296,
  33464480,
  11219410,
  14205137,
  15166788,
  15722845,
  15692930,
  32914950,
  4976946,
  13167819,
  33837265,
  33684142,
  13206727,
  8475630,
  7378428,
  10897900,
  32612016,
  33734142,
  10699196,
  32628226,
  32359262,
  16932189,
  8787109,
  14127421,
  15333200,
  33003063,
  14910435,
  33339812,
  33691907,
  5546732,
  6459877,
  13810468,
  13262908,
  11121152,
  16435123,
  4766644,
  10931034,
  33517844,
  15662011,
  12254090,
  32471428,
  14131036,
  33729700,
  32991252,
  7667476,
  15149364,
  32671151,
  32808758,
  15844936,
  9499729,
  4812854,
  11490375,
  33394341,
  3572251,
  10846546,
  16414116,
  15930879,
  3324500,
  17351882,
  13043112,
  15869028,
  32453419,
  32480538,
  15278142,
  3769505,
  32917372,
  14852641,
  15716214,
  10927183,
  32348792,
  14797223,
  33580297,
  4322431,
  32044435,
  329316,
  15166629,
  16220241,
  6389664,
  33623201,
  32677564,
  14562935,
  6625821,
  13303019,
  16590070,
  33483064,
  33764041,
  17120912,
  33621808,
  12718029,
  33290370,
  11454686,
  10729907,
  17102803,
  11405146,
  7785101,
  10796844,
  16961335,
  15778811,
  14427969,
  32813594,
  12000582,
  33384051,
  15132922,
  8974572,
  12399147,
  4331645,
  6614821,
  11096629,
  10341223,
  16268671,
  10145818,
  33652671,
  33191985,
  9285001,
  8217973,
  33844851,
  15936730,
  33890549,
  11098326,
  32485950,
  15360007,
  14761987,
  9182203,
  33440432,
  8086321,
  6488827,
  16050626,
  15031778,
  33537234,
  12241352,
  16580245,
  32824078,
  33347011,
  13126568,
  16381731,
  33696343,
  33462136,
  33521470,
  32492725,
  15225622,
  7493010,
  17144169,
  33699973,
  9002178,
  10932086,
  17292431,
  10455128,
  33337020,
  13169626,
  5556913,
  15297521,
  10725634,
  16656224,
  33676804,
  33236941,
  17351077,
  13345116,
  33753223,
  12619199,
  8910183,
  16701316,
  32761837,
  33546055,
  9838682,
  5703319,
  33067542,
  5034208,
  14390281,
  32479622,
  12775255,
  32690069,
  8101676,
  9278389,
  16401584,
  11538418,
  17088966,
  32486233,
  33742918,
  32990580,
  4733809,
  8172722,
  33546743,
  15485906,
  16586199,
  6103086,
  33126348,
  32599699,
  6143217,
  33340088,
  17332829,
  33380254,
  33800109,
  9702104,
  8190388,
  5492009,
  32792727,
  32427906,
  15831716,
  7408684,
  10251337,
  33473534,
  16840158,
  6023256,
  8046205,
  33523103,
  33182174,
  13952186,
  32510953,
  9985665,
  9973784,
  33046128,
  11985329,
  11270361,
  6068358,
  3149254,
  32872847,
  33788764,
  17055379,
  5833475,
  32830051,
  33605294,
  32961632,
  16441424,
  11129864,
  17264240,
  33318291,
  32710617,
  32634865,
  32326065,
  33883650,
  16440326,
  33033661,
  32984344,
  33417220,
  33744922,
  33751789,
  32796187,
  10584742,
  17326179,
  32501183,
  33083919,
  14812542,
  14732139,
  16700733,
  16901667,
  32734952,
  32791674,
  7699249,
  8668427,
  14842403,
  33002230,
  5872960,
  16372911,
  12149185,
  7687354,
  14099318,
  33095017,
  17263763,
  8574429,
  15015435,
  12380315,
  15302746,
  33259857,
  9894797,
  11204764,
  15824256,
  7720780,
  6542279,
  32759560,
  32822320,
  9644159,
  33441684,
  8674362,
  16710429,
  11517289,
  17262224,
  5915557,
  32662175,
  9127655,
  16570445,
  11445532,
  8668635,
  33279429,
  212218,
  15318406,
  32625043,
  32522138,
  15926711,
  12419283,
  5993870,
  13261737,
  4864662,
  14396251,
  11779594,
  14162671,
  33766796,
  33022768,
  11907843,
  33825725,
  32734669,
  8912888,
  15832466,
  34081986,
  13454174,
  33782086,
  3650448,
  11729927,
  32395525,
  32902477,
  33386145,
  17227707,
  15040063,
  9628075,
  33796436,
  32577872,
  9377907,
  33507720,
  33419563,
  17247048,
  13091855,
  12351979,
  32687656,
  32970034,
  4989074,
  32633857,
  33732086,
  33640688,
  4488580,
  16438321,
  15726106,
  12954330,
  15754145,
  33128605,
  33697697,
  6452782,
  33388263,
  33031188,
  33651870,
  10744172,
  15306221,
  32398880,
  33478076,
  10129179,
  16581742,
  13584653,
  33028897,
  16402411,
  11164627,
  5865439,
  10045076,
  6031944,
  32596450,
  33553066,
  33656518,
  8526430,
  7908626,
  9620466,
  33169711,
  17112898,
  14593295,
  12239571,
  5217294,
  6317962,
  12263920,
  33658669,
  16963735,
  8006459,
  33364738,
  33022665,
  33816689,
  17013945,
  14472201,
  32703731,
  33774912,
  9497826,
  13625338,
  16756710,
  4810063,
  33734455,
  33275266,
  11417443,
  33173499,
  12912311,
  33375522,
  9917562,
  32442170,
  32312075,
  8607851,
  33106244,
  33198593,
  10102596,
  32741705,
  33165249,
  33942845,
  12680644,
  13972730,
  15252327,
  16340254,
  9039691,
  12242933,
  8223854,
  33726106,
  32734322,
  33735053,
  32760272,
  15849360,
  15761629,
  16689384,
  13161408,
  32408549,
  7102024,
  15508313,
  11589844,
  33402828,
  8661587,
  33849272,
  10841476,
  10174286,
  15653948,
  33211500,
  17394037,
  15226559,
  33592019,
  16392820,
  14290586,
  12799853,
  16612074,
  13075729,
  15422300,
  33785658,
  33270187,
  33435312,
  16287904,
  10449972,
  14541074,
  33934937,
  32911200,
  16800929,
  5277661,
  33477146,
  5813797,
  10070749,
  33196460,
  13183633,
  33219017,
  32464449,
  10352376,
  9133141,
  33371203,
  10247866,
  15332523,
  7956046,
  33483614,
  5088421,
  10963689,
  8852249,
  5273886,
  32042256,
  33356925,
  33271391,
  17209817,
  32559793,
  15616576,
  13837776,
  33526470,
  10568683,
  16900324,
  7757626,
  32714542,
  9607456,
  16182289,
  17336344,
  14426432,
  12311312,
  33023858,
  33311559,
  15348547,
  15654616,
  15894194,
  16427230,
  33961498,
  33668326,
  16712962,
  33375407,
  13868201,
  33251205,
  32710608,
  17241262,
  12623499,
  9070996,
  33101332,
  33397134,
  7556015,
  7171156,
  33830193,
  15765896,
  16717835,
  5329913,
  3500813,
  10310502,
  33453581,
  11059502,
  10741720,
  5765897,
  17344736,
  15388763,
  11974154,
  11981107,
  13692599,
  33095412,
  32888187,
  32371498,
  32368438,
  33456745,
  33216891,
  10950369,
  9085892,
  11821133,
  11078445,
  33196397,
  8792422,
  17406675,
  33720129,
  9076112,
  16348483,
  8442510,
  33862135,
  14610197,
  9024640,
  16058844,
  32695574,
  13009024,
  15340164,
  12119358,
  33387780,
  32864546,
  15929107,
  33376247,
  2731256,
  8755852,
  16063185,
  15296168,
  33363897,
  16874179,
  14614480,
  32893144,
  10894325,
  17111676,
  33403798,
  16814260,
  33098261,
  11944585,
  32776307,
  13992044,
  12253998,
  33238625,
  6791461,
  33333396,
  9041119,
  32552739,
  8419478,
  33582341,
  33657171,
  32777554,
  7702820,
  8549414,
  32948298,
  3194286,
  32926956,
  6049215,
  4845885,
  17077294,
  16374753,
  32870726,
  17386341,
  16581283,
  8740787,
  14881280,
  32563236,
  16436450,
  9489570,
  32796391,
  5686178,
  15836525,
  13848407,
  16418298,
  5613434,
  16017775,
  33620790,
  5767582,
  33501522,
  11238319,
  33186804,
  12910458,
  10949109,
  16874523,
  16096829,
  13452036,
  33654691,
  13869815,
  15417925,
  11750424,
  33490485,
  16564483,
  33036366,
  13571855,
  8149142,
  9280787,
  2635146,
  5423611,
  33548204,
  33088990,
  33426922,
  16451662,
  15994597,
  7225620,
  12453472,
  4988068,
  14393712,
  6054421,
  32495275,
  14076412,
  7625531,
  9323324,
  16210279,
  16544970,
  9540452,
  33763727,
  17250992,
  8907737,
  11820614,
  10463165,
  33363097,
  9020362,
  16690541,
  32617990,
  32554451,
  6719720,
  17044206,
  9001144,
  14162247,
  32730728,
  8231463,
  15921900,
  7885782,
  12800732,
  17239528,
  15272044,
  12334878,
  9472388,
  15093456,
  33349138,
  13308476,
  33193011,
  11994883,
  16164276,
  11948629,
  13603947,
  33413953,
  9162064,
  33407310,
  14219498,
  11382534,
  14180537,
  10030562,
  11557382,
  33073902,
  33253736,
  7488544,
  32666212,
  32996666,
  33607436,
  32931014,
  9013430,
  33567386,
  9882595,
  12381648,
  9599024,
  33853171,
  15443244,
  16662865,
  10338730,
  32405777,
  9529731,
  33485374,
  14777233,
  32839442,
  17382941,
  16106093,
  33654978,
  33820737,
  14451079,
  32637588,
  16705639,
  5682818,
  14579827,
  8049466,
  15082452,
  11288434,
  14129664,
  13603899,
  16857906,
  33741915,
  32684656,
  9636991,
  32677912,
  7036456,
  11250802,
  9009375,
  12386196,
  16613134,
  33455812,
  33940402,
  6327187,
  33772711,
  5270376,
  14057352,
  7548568,
  13372021,
  14332095,
  33547971,
  10713530,
  16508413,
  7370938,
  9093905,
  13175067,
  5883476,
  32384043,
  32971713,
  13245591,
  15800561,
  7871142,
  11712527,
  14232778,
  32454685,
  33468731,
  10882755,
  7443785,
  7672049,
  7330634,
  14735271,
  15000589,
  32919180,
  33335732,
  32782646,
  6812164,
  16175489,
  11062394,
  33371230,
  15311520,
  32883087,
  16389306,
  14681145,
  12416905,
  33198074,
  16007521,
  32862815,
  15645550,
  12614759,
  5148867,
  13041232,
  16309651,
  33391449,
  9035539,
  15276224,
  9174831,
  14815979,
  33360764,
  6083158,
  32684887,
  33089312,
  14367263,
  33410435,
  15450933,
  33172755,
  33397694,
  4348027,
  33182753,
  10452185,
  14771857,
  12586997,
  15963427,
  33435847,
  32670583,
  33819253,
  4920785,
  33939064,
  6683704,
  15198843,
  11674058,
  13104235,
  9009658,
  33190528,
  32952854,
  3831805,
  12484367,
  32005503,
  33079073,
  921756,
  13097611,
  14141072,
  9460306,
  15444985,
  11185539,
  6929214,
  12067180,
  8556418,
  15778363,
  15327283,
  15278176,
  13000527,
  12045393,
  17041921,
  6884890,
  33363959,
  12827589,
  8236491,
  3848553,
  14969365,
  17289997,
  32625636,
  32488877,
  33342655,
  33634666,
  10819070,
  13187821,
  13467571,
  6493778,
  32815907,
  8223454,
  16302880,
  16597711,
  32859937,
  33445074,
  6491912,
  4902136,
  15758085,
  33825560,
  7495597,
  6885062,
  10454781,
  7115704,
  14591596,
  32052635,
  10189853,
  33479505,
  33998568,
  13994830,
  6229979,
  32745781,
  33514978,
  11283544,
  14625067,
  9844020,
  32828671,
  17321138,
  14409720,
  14608310,
  33881681,
  4685719,
  15588483,
  33563356,
  9589214,
  33820165,
  33701024,
  7031193,
  13570343,
  33488662,
  32730441,
  15437706,
  15823035,
  13808157,
  15532239,
  8412276,
  12425320,
  12429481,
  5566227,
  32372857,
  10634777,
  11713479,
  33780818,
  11724879,
  9645932,
  9058732,
  5363832,
  8294245,
  32398602,
  15197578,
  13067945,
  32543572,
  32078211,
  17280840,
  14105505,
  33104458,
  1119379,
  13353865,
  13589164,
  6090430,
  32686221,
  16738353,
  14234553,
  10571200,
  33220581,
  32462598,
  11935131,
  33751090,
  14218867,
  32767640,
  33907888,
  10119590,
  3136620,
  8521981,
  8632762,
  17390625,
  14997427,
  32936244,
  6513088,
  14616828,
  11937105,
  16985581,
  5998337,
  33311578,
  12975862,
  9537974,
  6936547,
  14796410,
  33450586,
  15552432,
  33328859,
  32901806,
  32740239,
  17036027,
  32428061,
  14229697,
  17188228,
  33692521,
  10318915,
  3269552,
  14688481,
  33865709,
  15904046,
  16929536,
  32579951,
  33722087,
  7084148,
  14290933,
  17315812,
  17277629,
  33730826,
  32810046,
  32536901,
  4418553,
  16432722,
  32752693,
  13850932,
  9527112,
  10355952,
  34036240,
  32458482,
  11066167,
  32801975,
  32519585,
  33768993,
  10172766,
  4950863,
  32461924,
  13681674,
  5047795,
  14743356,
  33829688,
  6448874,
  33711192,
  33063380,
  9343632,
  12427881,
  33034350,
  2853350,
  33111123,
  32448759,
  8598018,
  16142164,
  2997791,
  9157211,
  32598730,
  9789977,
  13800941,
  33059119,
  32752505,
  33064066,
  10481554,
  33823901,
  15225522,
  11817328,
  32726530,
  33367031,
  32970133,
  33486382,
  32931586,
  13812081,
  11423700,
  33044250,
  33065365,
  13413320,
  9744604,
  1079524,
  15392605,
  14316068,
  32715738,
  33802222,
  33769341,
  32849883,
  5637085,
  13532195,
  15828110,
  8677832,
  15092120,
  33827508,
  15236875,
  33498779,
  32413424,
  32891195,
  15442562,
  10646353,
  32848691,
  17170780,
  16931915,
  11502408,
  13162082,
  8617012,
  33535155,
  32542562,
  13846473,
  33239216,
  13383936,
  6425912,
  16568204,
  10920061,
  33355414,
  13271928,
  33496460,
  32911492,
  33714739,
  33547565,
  33723383,
  33238786,
  33500618,
  8622286,
  13841963,
  33551400,
  33864273,
  8098976,
  13802656,
  17404648,
  10271625,
  8966841,
  32752276,
  13970810,
  8289961,
  14686906,
  13933854,
  8638570,
  13328643,
  15878778,
  33550702,
  33791946,
  32456857,
  16759602,
  33179489,
  32026800,
  9865732,
  32930356,
  13247684,
  33318865,
  33102505,
  32505276,
  13443769,
  14630266,
  32812588,
  7323668,
  768265,
  33653100,
  17308503,
  33827828,
  33198787,
  32521679,
  32318151,
  32692881,
  33683634,
  33727617,
  5403322,
  8724716,
  13754364,
  32461013,
  7385371,
  5217264,
  7401131,
  9483159,
  13568366,
  33028590,
  8970048,
  33782921,
  15585522,
  7957879,
  33492533,
  13441348,
  15277532,
  8035530,
  14120260,
  33179293,
  9244668,
  12976711,
  14015969,
  2819096,
  33863939,
  11418361,
  33782412,
  32780889,
  32699411,
  32924612,
  13790743,
  11082678,
  32790917,
  9481530,
  14055386,
  33587184,
  13851707,
  33520495,
  32772056,
  12675765,
  9333752,
  12242835,
  6122187,
  15418689,
  16898541,
  14072168,
  12126853,
  11225860,
  15712799,
  33331704,
  2979442,
  10951664
]"
r7h38PNy,Untitled,Madi_Perth,Linden Scripting,Saturday 30th of March 2024 04:58:32 PM CDT,"    dataserver( key queryid, string data )
    {
        if(queryid == read_key)
        {
            integer count = (integer) data;
            integer index;

            for(index = 0; index < (count+1); ++index)
            {
                string line = llGetNotecardLineSync(""!Playlists"", index);
                if(line == NAK)
                {
                    DS(""NAK"");
                }
                else if(line == EOF)
                {
                    DS(""Notecard Loaded in "" + getTime((integer) llGetTime()));

                    state running;
                }
                else 
                {
                    DS((string) index +"" "" + line);
                    llSetText((string) index+""/""+(string) count, RED, TRUE);
                }
            }
        }"
XKXNiwaQ,Untitled,RenSafaray,Java,Saturday 30th of March 2024 04:53:46 PM CDT,"// Эта программа позволяет пользователю рассчитать кредит, посмотреть кредитные ставки и проверить, будет ли одобрен кредит

// Импортируем необходимые классы для работы с вводом данных и хранением данных в виде пар ""ключ-значение""
import java.util.HashMap;
import java.util.Map;
import java.util.Scanner;

// Определяем класс Credit для хранения информации о кредите
public class lab2_21 {
    static class Credit {
        // Объявляем переменные для хранения суммы, срока и процентной ставки кредита
        private double amount;
        private int term;
        private double rate;

        // Определяем конструктор для создания объекта класса Credit с заданными параметрами
        public Credit(double amount, int term, double rate) {
            this.amount = amount;
            this.term = term;
            this.rate = rate;
        }

        // Определяем метод для расчета ежемесячного платежа по кредиту
        public double getMonthlyPayment() {
            // Вычисляем месячную процентную ставку и коэффициент аннуитетного платежа
            double monthlyRate = rate / 100 / 12;
            double coefficient = (monthlyRate * Math.pow(1 + monthlyRate, term)) / (Math.pow(1 + monthlyRate, term) - 1);
            // Возвращаем произведение суммы кредита на коэффициент аннуитетного платежа
            return amount * coefficient;
        }

        // Определяем метод для расчета общей суммы выплат по кредиту
        public double getTotalAmount() {
            // Возвращаем произведение ежемесячного платежа на срок кредита
            return getMonthlyPayment() * term;
        }

        // Определяем метод для расчета переплаты по кредиту
        public double getOverpayment() {
            // Возвращаем разность между общей суммой выплат и суммой кредита
            return getTotalAmount() - amount;
        }
    }

    // Определяем класс CreditRate для хранения информации о кредитной ставке
    static class CreditRate {
        // Объявляем переменные для хранения суммы, процентной ставки и срока кредитной ставки
        private double amount;
        private double rate;
        private int months;

        // Определяем конструктор для создания объекта класса CreditRate с заданными параметрами
        public CreditRate(double amount, double rate, int months) {
            this.amount = amount;
            this.rate = rate;
            this.months = months;
        }

        // Определяем методы для получения значений переменных класса CreditRate
        public double getAmount() {
            return amount;
        }

        public double getRate() {
            return rate;
        }

        public int getMonths() {
            return months;
        }
    }

    // Определяем класс CreditCheck для проверки одобрения кредита
    static class CreditCheck {
        // Объявляем переменные для хранения дохода, выплат по другим кредитам и максимального процента от дохода, который готов тратить пользователь
        private double income;
        private double otherPayments;
        private double maxPayment;

        // Определяем конструктор для создания объекта класса CreditCheck с заданными параметрами
        public CreditCheck(double income, double otherPayments, double maxPayment) {
            this.income = income;
            this.otherPayments = otherPayments;
            this.maxPayment = maxPayment;
        }

        // Определяем метод для проверки одобрения кредита
        public boolean isApproved(Credit credit) {
            // Вычисляем ежемесячный платеж по кредиту и общий доход пользователя
            double monthlyPayment = credit.getMonthlyPayment();
            double totalIncome = income - otherPayments;
            // Возвращаем true, если ежемесячный платеж не превышает максимальный процент от дохода, иначе false
            return monthlyPayment <= totalIncome * maxPayment / 100;
        }

        // Определяем метод для расчета максимальной суммы кредита, которую может взять пользователь
        public double getMaxCreditAmount(int term, double rate) {
            // Вычисляем ежемесячный платеж, который может позволить себе пользователь, и коэффициент аннуитетного платежа
            double monthlyPayment = (income - otherPayments) * maxPayment / 100;
            double coefficient = (rate / 100 / 12) * Math.pow(1 + rate / 100 / 12, term) / (Math.pow(1 + rate / 100 / 12, term) - 1);
            // Возвращаем максимальную сумму кредита, которую может взять пользователь
            return monthlyPayment / coefficient;
        }

        // Определяем метод для проверки возможности выплаты ежемесячного платежа
        public boolean canAffordMonthlyPayment(double monthlyPayment) {
            // Вычисляем общий доход пользователя
            double totalIncome = income - otherPayments;
            // Возвращаем true, если ежемесячный платеж не превышает максимальный процент от дохода, иначе false
            return monthlyPayment <= totalIncome * maxPayment / 100;
        }

        // Определяем метод для проверки корректности значения максимального процента от дохода
        public boolean isValidMaxPayment() {
            // Возвращаем true, если максимальный процент от дохода находится в диапазоне от 0 до 100, иначе false
            return maxPayment <= 100 && maxPayment >= 0;
        }

        // Определяем метод для проверки корректности значения дохода
        public boolean isValidIncome() {
            // Возвращаем true, если доход не меньше выплат по другим кредитам, иначе false
            return income >= otherPayments;
        }
    }

    // Определяем главный метод программы
    public static void main(String[] args) {
        // Создаем объект класса Scanner для чтения данных с клавиатуры
        Scanner scanner = new Scanner(System.in);

        // Объявляем переменную для управления циклом программы
        boolean exit = false;
        while (!exit) {
            // Выводим меню программы
            System.out.println(""\n1. Расчитать кредит"");
            System.out.println(""2. Кредитные ставки"");
            System.out.println(""3. Проверить одобрение кредита"");
            System.out.println(""Ваш выбор: "");
            // Считываем выбор пользователя
            String operation = scanner.nextLine();

            // Выполняем действия в соответствии с выбором пользователя
            switch (operation) {
                case ""1"":
                    // Считываем сумму, срок и процентную ставку кредита
                    System.out.print(""Введите сумму кредита: "");
                    double amount = scanner.nextDouble();
                    scanner.nextLine(); // добавлено для очистки буфера ввода

                    System.out.print(""Введите срок кредита в месяцах: "");
                    int term = scanner.nextInt();
                    scanner.nextLine(); // добавлено для очистки буфера ввода

                    System.out.print(""Введите годовую ставку в процентах: "");
                    double rate = scanner.nextDouble();
                    scanner.nextLine(); // добавлено для очистки буфера ввода

                    // Создаем объект класса Credit с заданными параметрами и выводим информацию о кредите
                    lab2_21.Credit credit = new lab2_21.Credit(amount, term, rate);

                    System.out.println(""Ежемесячный платеж: "" + credit.getMonthlyPayment());
                    System.out.println(""Общая сумма выплат: "" + credit.getTotalAmount());
                    System.out.println(""Переплата: "" + credit.getOverpayment());
                    break;
                case ""2"":
                    // Создаем объект класса HashMap для хранения кредитных ставок
                    Map<CreditRate, Integer> creditRates = new HashMap<>();

                    // Создаем объекты класса CreditRate с заданными параметрами и добавляем их в HashMap
                    CreditRate rate1 = new CreditRate(50000, 12, 12);
                    CreditRate rate2 = new CreditRate(100000, 10, 24);
                    CreditRate rate3 = new CreditRate(200000, 8, 36);

                    creditRates.put(rate1, 100);
                    creditRates.put(rate2, 200);
                    creditRates.put(rate3, 300);

                    // Выводим информацию о кредитных ставках
                    System.out.println(""Кредитные ставки:"");
                    for (Map.Entry<CreditRate, Integer> entry : creditRates.entrySet()) {
                        CreditRate key = entry.getKey();
                        System.out.println(""Сумма: "" + key.getAmount() + "" руб., процент: "" + key.getRate() + ""%, срок: "" + key.getMonths() + "" мес."");
                    }
                    break;
                case ""3"":
                    // Считываем доход, выплаты по другим кредитам и максимальный процент от дохода, который готов тратить пользователь
                    System.out.print(""Введите ваш доход: "");
                    double income = scanner.nextDouble();
                    scanner.nextLine(); // добавлено для очистки буфера ввода

                    System.out.print(""Введите ваши выплаты других кредитов в месяц: "");
                    double otherPayments = scanner.nextDouble();
                    scanner.nextLine(); // добавлено для очистки буфера ввода

                    System.out.print(""Введите максимальный процент от дохода, который вы готовы тратить на кредит: "");
                    double maxPayment = scanner.nextDouble();
                    scanner.nextLine(); // добавлено для очистки буфера ввода

                    // Проверяем корректность значений дохода и максимального процента от дохода
                    if (!new lab2_21.CreditCheck(income, otherPayments, maxPayment).isValidIncome()) {
                        System.out.println(""Ошибка: сумма выплат других кредитов не может превышать ваш доход."");
                        break;
                    }

                    if (!new lab2_21.CreditCheck(income, otherPayments, maxPayment).isValidMaxPayment()) {
                        System.out.println(""Ошибка: максимальный процент от дохода, который вы готовы тратить на кредит, должен быть в диапазоне от 0 до 100."");
                        break;
                    }

                    // Создаем объект класса CreditCheck с заданными параметрами
                    lab2_21.CreditCheck creditCheck = new lab2_21.CreditCheck(income, otherPayments, maxPayment);

                    // Считываем сумму, срок и процентную ставку кредита, который хочет взять пользователь
                    System.out.print(""Введите сумму кредита, которую вы хотите взять: "");
                    double requestedAmount = scanner.nextDouble();
                    scanner.nextLine(); // добавлено для очистки буфера ввода

                    System.out.print(""Введите срок кредита в месяцах: "");
                    int requestedTerm = scanner.nextInt();
                    scanner.nextLine(); // добавлено для очистки буфера ввода

                    System.out.print(""Введите годовую ставку в процентах: "");
                    double requestedRate = scanner.nextDouble();
                    scanner.nextLine(); // добавлено для очистки буфера ввода

                    // Создаем объект класса Credit с заданными параметрами и проверяем одобрение кредита
                    lab2_21.Credit requestedCredit = new lab2_21.Credit(requestedAmount, requestedTerm, requestedRate);

                    if (creditCheck.isApproved(requestedCredit)) {
                        double monthlyPayment = requestedCredit.getMonthlyPayment();
                        if (creditCheck.canAffordMonthlyPayment(monthlyPayment)) {
                            System.out.println(""Кредит одобрен! Ежемесячный платеж: "" + monthlyPayment + "" руб."");
                        } else {
                            System.out.println(""Кредит не одобрен. Вы не сможете платить ежемесячный платеж в размере "" + monthlyPayment + "" руб."");
                        }
                    } else {
                        double maxCreditAmount = creditCheck.getMaxCreditAmount(requestedTerm, requestedRate);
                        System.out.println(""Кредит не одобрен. Максимальная сумма кредита, которую вы можете взять: "" + maxCreditAmount + "" руб."");
                    }
                    break;
                default:
                    System.out.println(""Неверный выбор. Пожалуйста, выберите снова."");
            }
        }
    }
}
"
YQV4z7D5,BWR - Changelog 30/03/24,SSilver,Diff,Saturday 30th of March 2024 04:43:26 PM CDT,"On-Kill Effects
~ Fixed incorrect effects being triggered for posthumous or delayed weapon kills (projectiles and such)
Iron Bomber
- Blocks hits from rollers reaching targets behind walls
Third Degree
- Blocks hits from reaching target's teammates behind walls
Medieval
~ Fixed touching resupply while holding a building being stuck
Vita-Saw
~ Fix interactions based on variable max HP (IE Dalokohs Bar)
Fixing unintended behavior to make the items/changes more consistent.

Eyelander
~ Reverted speed boost to being on-kill and not consumed with heads
- Added: -15 max health on wearer
There was little windup or warning for the demo using his heads. Reverting it to an on-kill bonus should make it more predictable for the enemy and without using a resource provides more immediate benefit to the demo. In exchange, the weapon was given a more persistent downside it was lacking, returning it's max health penalty but to a lesser degree.

Syringe Guns
+ Increased crit heal recovery rate to 100% on hitting teammate (was 33%)
+ Recovered teammates briefly have +100% increased uber build rate (2 seconds)
~ Changed effect: Aura appears when teammate has crit heals reset, with no effect when it's already at limit
The process of resetting crit heals was potentially too cumbersome, especially for a larger group as it was intended to be more useful for. The process should be faster now, while also providing additional uber build for a short period to make up for less time spent on healing teammates.

Brass Beast
+ Increased spun up resistance to -25% damage resistance
+ Removed capture rate penalty
- Reverted resistance to only kick in when spun up below 50% HP (was 90%)
The interactions with the weapon were a bit too extreme on either end with the changes. As a test, nearly all changes for the weapon were reverted save for the resistance being slightly buffed on the weapon. However it appears that the universal spin down buff might be enough to make this weapon more consistent.

Blutsauger
+ Added: Heals 10 HP on-hit for recovering teammates
- Reverted health regeneration penalty
The weapon was given some additional benefits to interact with the crit heal potential. Reverting the weapon's regen penalty will incentivize using the weapon to heal both when fighting enemies and helping teammates recover, as well as make shooting at enemies with teammates around less deadly for yourself.

Overdose
+ Increased max speed bonus to +25% (was +20%)
- -50% reduced uber build rate bonus on crit heal recovery
The speed boost was slightly buffed as it was considered a tad underwhelming. However it was also considered a slightly overbuffed compared to other syringe guns. It is being given this uber rate penalty at the moment to contrast the buffs it has for your own survivability, but has the potential to change."
qPswVEqn,5.SchoolRegister,Silviya7,JavaScript,Saturday 30th of March 2024 04:26:34 PM CDT,"function Grades(input){

   let ArrStudents=[];

   let ArrNewYearStudents=[];
   let gradesArr=[];

    let GradesAvgScore={};
    for (const stud of input) {
        
        let [studentName,Grade,AverageScore]= stud.split(',');
        let indexst=studentName.indexOf(':');
        let name=studentName.substring(indexst+1,studentName.length);     

        let idexgr=Grade.indexOf(':');
        let grade=Grade.substring(idexgr+1,Grade.length);
        let iavr=AverageScore.indexOf(':');
        let avgscore=AverageScore.substring(iavr+1,AverageScore.length);
        
        let gradenum=Number(grade.trim());
        let avgnum=Number(avgscore.trim());
         
        if(avgnum >3){
        let student={name:name.trim(), grade:gradenum, avgeragescore:avgnum};
        ArrStudents.push(student);
    
        let objStudent=ArrNewYearStudents.find(s=> s.grade==gradenum);
        if(!objStudent && avgnum > 3){
            gradesArr.push(grade.trim());
        ArrNewYearStudents.push({grade:gradenum, students:'', avgscore:0});
        }
    }

    }

    let namestudents='';
    
     
       for (const student of ArrNewYearStudents) {
        let allstudents='';
        let avggr=0;
        let sumavg=0;
        let countst=0;
        let CStudents=[];
        for (let i=0; i< ArrStudents.length; i++) {
            let g=ArrStudents[i].grade;
                
        if(student.grade== g && ArrStudents[i].avgeragescore >3){
            countst ++;
            sumavg += ArrStudents[i].avgeragescore;
            CStudents.push(ArrStudents[i].name)
        }
      
       }
       avggr= sumavg/countst;
        
       student.avgscore=avggr;
       student.students=CStudents.join(', ');
     
      }

      gradesArr.sort((a,b)=> a-b);
    

for (let j = 0; j < gradesArr.length; j++) {
    let student= ArrNewYearStudents.find(s=> s.grade==gradesArr[j] );
    console.log(`${student.grade+1} Grade`);
    console.log(`List of students: ${student.students}`);
 
    console.log(`Average annual score from last year: ${student.avgscore.toFixed(2)}\n`)
  
}
}"
EqHraLG6,Untitled,RenSafaray,Java,Saturday 30th of March 2024 04:14:15 PM CDT,"import java.util.Scanner;

public class lab3_21 {

    public static void main(String[] args) {

        // Создаем объект Scanner для считывания данных с клавиатуры
        Scanner scanner = new Scanner(System.in);

        // Считываем количество строк и столбцов матрицы
        System.out.print(""Введите количество строк: "");
        int m = scanner.nextInt();
        System.out.print(""Введите количество столбцов: "");
        int n = scanner.nextInt();

        // Создаем матрицу размером m x n
        double[][] matrix = new double[m][n];

        // Считываем элементы матрицы
        System.out.println(""Введите элементы матрицы:"");
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                matrix[i][j] = scanner.nextDouble();
            }
        }

        // Выводим исходную матрицу
        System.out.println(""Исходная матрица:"");
        printMatrix(matrix);

        // Вычисляем средние арифметические для каждой строки
        double[] averages = new double[m];
        for (int i = 0; i < m; i++) {
            double sum = 0;
            int count = 0;
            for (int j = 0; j < n; j++) {
                sum += matrix[i][j];
                count++;
            }
            averages[i] = sum / count;
        }

        // Выводим средние арифметические для каждой строки
        System.out.println(""Средние арифметические для каждой строки:"");
        for (double average : averages) {
            System.out.println(average);
        }

        // Заменяем четные элементы на средние арифметические в данной строке
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                if (matrix[i][j] % 2 == 0) {
                    matrix[i][j] = averages[i];
                }
            }
        }

        // Выводим результирующую матрицу
        System.out.println(""Результирующая матрица:"");
        printMatrix(matrix);
    }

    // Метод для вывода матрицы на экран
    private static void printMatrix(double[][] matrix) {
        for (double[] row : matrix) {
            for (double element : row) {
                System.out.print(element + "" "");
            }
            System.out.println();
        }
    }
}"
4KRn0mBs,castle_fusion_probs.py,Shuraken007,Python,Saturday 30th of March 2024 03:59:30 PM CDT,"import numpy as np

def get_prob(probs, values):
  p = np.array(probs)
  v = np.array(values)
  return np.dot(p, v)
  
low = get_prob(
  [30, 60, 10],
  [-10, 6, 36]
)

medium = get_prob(
  [15, 70, 15],
  [-10, 6, 36]
)

high = get_prob(
  [0, 60, 40],
  [0, 6, 36]
)

E = [low, medium, high]
values = [4, 9, 21]

M = np.divide(E, values)

print(M)"
eFi6jdJQ,Roblox Starscape GUI [AutoMine],seehuangdeung,Lua,Saturday 30th of March 2024 03:45:22 PM CDT,"-- Place into AUTO-EXEC folder.
-- Unfinished gui, has a 70% working auto miner (for now just set destinations and it will go through them.)
-- Going to redo a lot of this when i have the time, and update this pastebin when I have the time.
-- Also credits to dogeman for instant anomaly finder and loader stuff
-- LeftAlt to open menu
--[[

    Planned features:
        -Fully automine. (its like 70%)
        -Auto PvE (drone hunting, etc. Already did this but just have to update for new starscape game update)
        --Auto haul (havent done yet. For contested problably)
        --Ship modding (for closest cheating)
        --Full aimbot (had this for blasters but figured out hwo to set turret angles so can do for beams eventually.)
        --Ship tracker (tracking other ships, already made but havent integrated into gui yet. (kinda half broken))

]]

local HttpService = game:GetService(""HttpService"")
-- // GLOBALS
getgenv().connections = connections or {}
getgenv().alreadyLoaded = alreadyLoaded or false
getgenv().options = options or {
    --auto
	['AutoMine'] = false,
    ['AutoPvE'] = false,
    ['AutoHaul'] = false,
    ['AutoCombat'] = false,
    ['AutoWarp'] = false,
    ['AutoScan'] = false,

    ['AutoDeposit'] = false,
    ['IgnoreFloatOres'] = false,

    ['StartingSector'] = 'North',
    ['MineTowardsStartingSector'] = true,

    ['DEBUG_MODE'] = true,
    ['AntiNpc'] = true

}
getgenv().webhooks = webhooks or {
	['AutoMine'] = '',
    ['AutoPvE'] = '',
    ['AutoHaul'] = '',
    ['AutoCombat'] = '',
    ['Players'] = '',
    ['Anomalies'] = ''
}
getgenv().signals = signals or {}
getgenv().miscInfo = miscInfo or {
    ['StartingSystem'] = nil,
    ['StartingSector'] = options['StartingSector'],
    ['CurrentSector'] = nil,

    ['AlreadyMinedSystems'] = {},
    ['AlreadyMinedSectors'] = {},
    ['SectorConnectionSystems'] = {['SectorName'] = 'SystemName'}, -- should be used once the entire sector has been mined.
    ['AutoMineResetTimer'] = 172800, --amount of seconds to reset alreadyminedsystems, and sectors, default 48 hours for anomaly refresh time.
    ['AutoMineCurrentTimer'] = -1
}

if not isfile('starscape/options') then
    writefile('starscape/options', HttpService:JSONEncode(options))
else
    options = HttpService:JSONDecode(readfile('starscape/options'))
end

local Loaded = false
local cons = {}

do -- // GAME LOAD

    if game.PlaceId == 679715583 then -- main menu instant join (incase kick)
        game:GetService(""ReplicatedStorage""):WaitForChild('Remote'):WaitForChild('SelectGameMode'):FireServer(1)
    end

    if game.GameId ~= 290384992 then return end

    cons[1] = game:GetService(""LogService"").MessageOut:Connect(function(msg)
        if msg == ""client loaded"" then Loaded = true end
    end)

    for _, tbl in game:GetService('LogService'):GetLogHistory() do
        if tbl['message'] == 'client loaded' then
            Loaded = true
        end
    end

    repeat task.wait() until Loaded or alreadyLoaded == true

end

do -- // CLEANUP

    for _, connection in connections do
        pcall(function()
            connection:Disconnect()
        end)
    end

    cons[1]:Disconnect()
    table.clear(cons)
    cons = nil

end

-- // VARIABLES

local whitelistedOres = {'Reknite', 'Gellium', 'Axnit', 'Narcor', 'Red Narcor', 'Vexnium'}
local oreAnomalies = {
    'VX-', 'AN-', 'AL-', 'AA-', 'AT-', 'MT-'
}

local player = game:GetService(""Players"").LocalPlayer
local HttpService = game:GetService('HttpService')

local notiSound = Instance.new(""Sound"", game.ReplicatedStorage) ; notiSound.SoundId = ""rbxassetid://1788243907"" ; notiSound.Volume = 1
local CURRENT_STATE = Instance.new('StringValue', game.ReplicatedStorage) ; CURRENT_STATE.Name = 'CustomState'

local takeAllRm = game:GetService(""ReplicatedStorage""):WaitForChild(""Remote""):WaitForChild(""Items""):WaitForChild(""TakeAll"")
local activateModuleRm = game:GetService(""ReplicatedStorage""):WaitForChild(""Remote""):WaitForChild(""Ships""):WaitForChild(""ActivateModule"")
local deployItemRm = game:GetService(""ReplicatedStorage""):WaitForChild(""Remote""):WaitForChild(""Items""):WaitForChild(""DeployItem"")
local leaveSystemRm = game:GetService(""ReplicatedStorage""):WaitForChild(""Remote""):WaitForChild(""Transfers""):WaitForChild(""LeaveSystem"")
local fireTurretRm = game:GetService(""ReplicatedStorage""):WaitForChild(""Remote""):WaitForChild('Turrets'):WaitForChild('FireTurret')
local systemProbeRm = game:GetService(""ReplicatedStorage"").Remote.Probe.LaunchSystemProbe
local deactivateModuleRm = game:GetService(""ReplicatedStorage""):WaitForChild(""Remote""):WaitForChild(""Ships""):WaitForChild(""DeactivateModule"")
local grabItemRm = game:GetService(""ReplicatedStorage""):WaitForChild(""Remote""):WaitForChild(""Items""):WaitForChild(""TakeItem"") --a1: containerIns, a2: itemName, a3: amount
local destinationRm = game:GetService(""ReplicatedStorage"").Remote.Updates.UpdateDestinations
local checkProbeTargetRm = game:GetService(""ReplicatedStorage""):WaitForChild(""Remote""):WaitForChild(""Interface""):WaitForChild(""CheckProbeTarget"") --a1: repStorage anomaly object.
local requestAnomalyZoneRm = game:GetService(""ReplicatedStorage""):WaitForChild(""Remote""):WaitForChild(""Situation""):WaitForChild(""RequestAnomalyZoneProvision"") --invoke a1: anomaly identifier
local EnterSystemWarpRm = game:GetService(""ReplicatedStorage""):WaitForChild(""Remote""):WaitForChild(""Ships""):WaitForChild(""EnterSystemWarp"")
local chargeTurretRm = game:GetService(""ReplicatedStorage"").Remote.Turrets.ChargeTurret
local stopChargeRm = game:GetService(""ReplicatedStorage"").Remote.Turrets.StopChargingTurret
local enableTurretRm = game:GetService(""ReplicatedStorage"").Remote.Effects.EnableTurret
local updateDestinationsRm = game:GetService(""ReplicatedStorage"").Remote.Updates.UpdateDestinations
local launchPlanetProbeRm = game:GetService(""ReplicatedStorage""):WaitForChild(""Remote""):WaitForChild(""Probe""):WaitForChild(""LaunchPlanetProbe"")
local checkProbeTargetRm = game:GetService(""ReplicatedStorage""):WaitForChild(""Remote""):WaitForChild(""Interface""):WaitForChild(""CheckProbeTarget"") --a1: object anomaly
local finishPlanetProbingRm = game:GetService(""ReplicatedStorage""):WaitForChild(""Remote""):WaitForChild(""Probe""):WaitForChild(""FinishProbing"") --a1: amount of time for refresh.
local requestAnomalyZoneRm = game:GetService(""ReplicatedStorage""):WaitForChild(""Remote""):WaitForChild(""Situation""):WaitForChild(""RequestAnomalyZoneProvision"") --with hash
local storeAllStorageRm = game:GetService(""ReplicatedStorage""):WaitForChild(""Remote""):WaitForChild(""Items""):WaitForChild(""StoreAllStorage"")

local statsInfo = game:GetService('ReplicatedStorage'):WaitForChild('Stats')
local systemInstances = game:GetService(""ReplicatedStorage""):WaitForChild('Galaxy'):WaitForChild('Sectors')
local featuresWs = game.Workspace:WaitForChild('Features')
local structuresWs = workspace.NPCs.Space.Structures
local containersWs = game.Workspace:WaitForChild('Containers')
local shipStats = game.ReplicatedStorage:WaitForChild('Stats'):WaitForChild('Ships')
local anomaliesMap = game:GetService(""ReplicatedStorage"").Maps.SystemMap.Objects.Anomalies
local stationsWs = game.Workspace:FindFirstChild('Stations')
local npcsWs = workspace.NPCs.Space.Ships
local systemInfoObjects = game:GetService(""ReplicatedStorage"").Maps.SystemMap.Objects
local systemLinks = game:GetService(""ReplicatedStorage"").Galaxy.Links

local lootFromStructures = {}
local avoidSystems = {'Secure', 'Core'}
local systemInfo = { ['VisitedSystems'] = {}, ['LastVisitedSystem'] = nil,}
local unwantedLoot = {
	'Disruptor3',
	'Disruptor2',
	'Disruptor1'
}
local dontBeSusTowardsShips = {
	'Ozark',
	'HoneyBadger',
	'Honey Badger',
	'Kodiak',
	'Yukon',
	'Eos',
	'Vesta',
	'Shroud',
	'Galaxy',
}
local pdtTypes = {'Repeater', 'Pulse', 'Chaingun'}

local shipState = require(game:GetService(""ReplicatedStorage""):WaitForChild('Source'):WaitForChild('Client').Flight.State.Shared)
local routesModule = require(game:GetService('ReplicatedStorage'):WaitForChild('Source'):WaitForChild('Client').Helpers.Routes)
local state = require(game:GetService(""ReplicatedStorage"").Source.Client.Flight.State)
local menuModule = require(game.ReplicatedStorage.Source.Client.Util.Menus)
local utilModule = require(game.ReplicatedStorage.Source.Common.Util)
local destinationModule = require(game.ReplicatedStorage.Source.Client.DataSync.Destinations)
local warpToStarFunc = require(game:GetService(""ReplicatedStorage"").Source.Client.Actions.WarpToStar) -- sectorInstance arg1
local modulesModule = require(game:GetService(""ReplicatedStorage"").Source.Client.Helpers.Modules) --for getting ship modules
local destinationModule = require(game.ReplicatedStorage.Source.Client.DataSync.Destinations)
local trackerMethodsModule = require(game:GetService(""ReplicatedStorage"").Source.Client.Util.Trackers.Methods)
local warpToTargetModule = require(game.ReplicatedStorage.Source.Client.Flight.Warp) -- a1: object in systemmap

local systemLocation = game:GetService(""Players"").LocalPlayer.PlayerGui:WaitForChild('Overlays').Standard.System.Location.System
local systemStatus = game:GetService(""Players"").LocalPlayer.PlayerGui.Overlays.Standard.System.Location.Security.Text
local amountOfStuffInInv = game:GetService(""Players"").LocalPlayer.PlayerGui.Storage.Window.Storage.Inventory.View.Volume.Bar.MinInside
local maxInv = game:GetService(""Players"").LocalPlayer.PlayerGui.Storage.Window.Storage.Inventory.View.Volume.Max
local currentPlanetText = game:GetService(""Players"").LocalPlayer.PlayerGui.Overlays.Standard.System.Location.Planet
local regionText = game:GetService(""Players"").LocalPlayer.PlayerGui.Overlays.Standard.System.Location.Region
local RunService = game:GetService(""RunService"")

repeat task.wait() until state:getVehicle() ~= nil --so doesnt break script
local vehicle = state:getVehicle()

local targetAsteroid = nil
local currentMovementConnection = nil
local probeAlreadyLaunched = false

-- // FUNCTIONS GRABBER

for _, v in getgc(true) do --// Turret Angles
    if type(v) ~= 'table' then continue end
    if rawget(v, 'getTargetPosition') ~= nil then
        local old; old = hookfunction(v['getTargetPosition'], function(...)

            if options['AutoMine'] and targetAsteroid ~= nil then
                if targetAsteroid.Parent ~= nil then
                    return targetAsteroid.PrimaryPart.Position --Auto Mine Target
                end
            end

            return old(...)
        end)
    end

end

-- // FUNCTIONS

function getNextDestinationAutofarm(checkNextDes) --autism / decided not to use / will rewrite
    if isfile('starscape/miscInfo') then
        miscInfo = HttpService:JSONDecode(readfile('starscape/miscInfo'))
    end
    local sectorCoords = {
        ['North'] = '-8:0',
        ['East'] = '0:-8',
        ['West'] = '0:8',
        ['South'] = '8:0'
    }
    local stars = {}
	local nextPathIdentifier = nil
    local nextSystem = nil

    local function getClosestSectorFromCurrent(currentSectorInstance)
        if #miscInfo['SectorConnectionSystems'] == 0 then
            -- do another method.
            warn('THERE IS NO SECTOR CONNECTION SYSTEMS...')


        end
        for _, sectorName in miscInfo['SectorConnectionSystems'] do
            warn(sectorName)
            if table.find(miscInfo['AlreadyMinedSectors'], sectorName) then continue end
            warn('returned:', systemInstances:FindFirstChild(sectorName))
            return systemInstances:FindFirstChild(sectorName)
        end
    end

    local function getRandomSystemFromSector()
        local sectorInstance = systemInstances:FindFirstChild(miscInfo['CurrentSector'])
        if sectorInstance == nil then warn('COULD NOT FIND PROPER SECTOR INSTANCE | getRandomSystemFromSector()') ; return end

        local nextSystem = nil

        for _, system in sectorInstance:GetChildren() do
            if table.find(miscInfo['AlreadyMinedSystems'], system.Name) then continue end
            nextSystem = system
        end

        if nextSystem == nil and miscInfo['CurrentSector'] ~= getStarInformation(formatSystemText(systemLocation.Text)) then
            warn('SECTOR COMPLETELY MINED | ESTABLISHING NEW ONE')
            table.insert(miscInfo['AlreadyMinedSectors'], sectorInstance)
            miscInfo['CurrentSector'] = getClosestSectorFromCurrent(sectorInstance)
            print(sectorInstance, type(sectorInstance))
            print(miscInfo['CurrentSector'])

            destinationModule.setContents({})
            destinationModule.setContents({systemInstances:FindFirstChild(miscInfo['CurrentSector'].Name):GetChildren()[1].Identifier.Value})
            miscInfo['SectorConnectionSystems'] = {}
            nextSystem = systemInstances:FindFirstChild(miscInfo['CurrentSector'].Name):GetChildren()[1]
        elseif nextSystem ~= nil then
            destinationModule.setContents({})
            destinationModule.setContents({nextSystem.Identifier.Value})
        end

        task.wait(.1)
        miscInfo['CurrentSystem'] = nextSystem.Name
        miscInfo['CurrentSector'] =

        task.defer(function()
            warpToSystem(routesModule.getNextSystemName(), 'AutoMine')
        end)
        return true
    end

    if formatSystemText(systemLocation.Text) ~= miscInfo['CurrentSystem'] and miscInfo['CurrentSystem'] ~= nil and options['MineTowardsStartingSector'] == false then
        warn('Going to target system.')
        warpToSystem(routesModule.getNextSystemName(), 'AutoMine')
    elseif options['MineTowardsStartingSector'] == true and not table.find(miscInfo['AlreadyMinedSystems'], formatSystemText(systemLocation.Text)) then
        warn('CAN MINE')
        return 'CAN MINE'
    end

    if miscInfo['CurrentSector'] == nil then
        if miscInfo['StartingSector'] == nil then
            warn('NO STARTING SECTOR EXISITS | getNextDestinationAutofarm()') ; return
        end
        miscInfo['CurrentSector'] = sectorCoords[miscInfo['StartingSector']]
        destinationModule.setContents({})
        getRandomSystemFromSector()
    else
        if miscInfo['CurrentSector'] ~= getStarInformation(formatSystemText(systemLocation.Text)).Parent.Name then
            warn('WARPING TO NEXT SYSTEM')
            if options['MineTowardsStartingSector'] and not table.find(miscInfo['AlreadyMinedSystems'], tostring(getStarInformation(formatSystemText(systemLocation.Text)))) then
                return 'CAN MINE'
            else
                warpToSystem(getStarInformation((formatSystemText(systemLocation.Text))), 'AutoMine')
                return 'FALSE'
            end
        end
    end

    if checkNextDes == true then return end
    table.insert(miscInfo['AlreadyMinedSystems'], formatSystemText(systemLocation.Text))

	for _, ins in game.Workspace.Objects.Stars:GetChildren() do
		table.insert(stars, getStarInformation(ins.Name))
	end

    for _, starInstance in stars do
        local sector = starInstance.Parent
        local securityLevel = starInstance.SecurityLevel.Value

        if securityLevel == 'Secure' or securityLevel == 'Core' then continue end
        if table.find(miscInfo['AlreadyMinedSystems'], starInstance.Name) then continue end
        if sector.Name ~= miscInfo['CurrentSector'] then
            table.insert(miscInfo['SectorConnectionSystems'], sector.Name)
            continue
        end

        nextPathIdentifier = starInstance.Identifier.Value
        nextSystem = starInstance
        miscInfo['CurrentSystem'] = nextSystem.Name
    end

    if nextPathIdentifier == nil then
        local result = getRandomSystemFromSector()
        if result == nil then return warn('DID NOT RETRIEVE PROPER NEXT SECTOR OR SYSTEM') end
    else
        warpToSystem(nextSystem.Name, 'AutoMine')
    end

    writefile('starscape/miscInfo', HttpService:JSONEncode(miscInfo))
end
function toggleShipNoclip(bool)
	for _,v in vehicle:GetChildren() do
		if not v:IsA('BasePart') then continue end
		v.CanCollide = not bool
	end
    for _, v in player.Character:GetChildren() do
        if not v:IsA('BasePart') then continue end
        v.CanCollide = not bool
    end
end
function toggleAntiNpc(bool, isTargetClosest)
    options['AntiNpc'] = bool
	if bool then
		while task.wait(.05) and options['AntiNpc'] do
			for _,v in npcsWs:GetChildren() do
				if v.PrimaryPart == nil then continue end
				if isnetworkowner(v.PrimaryPart) then
					v:PivotTo(CFrame.new(10000, 10000, 10000))
				end
			end
		end
	else
		options['AntiNpc'] = false
	end
end
function launchPlanetProbe(recursive)
    for _, probe in game:GetService(""ReplicatedStorage"").Stats.Launchables.Probes:GetChildren() do
        if not string.find(probe.Name, 'Planet') then continue end
        probe.Stats.Scan.Value = 4000
        probe.Stats.Speed.Value = 4000
    end
    launchPlanetProbeRm:FireServer()
    local tbl = {}

    for _, anomObj in anomaliesMap:GetChildren() do
        checkProbeTargetRm:FireServer(anomObj)
        tbl[anomObj] = anomObj.Stats.Hash.Value
    end

    finishPlanetProbingRm:FireServer(30)

    for obj, hash in tbl do
        local oldZone = obj.Stats.Zone.Value
        requestAnomalyZoneRm:InvokeServer(hash)
        if oldZone == 0 and obj.Stats.Zone.Value > 0 then
            warn('Successfully changed...')
        end
    end

    task.wait(5)

    if recursive then
        return
    end
    launchPlanetProbe(true)
end
function getCurrentSector() : string
	return getStarInformation(formatSystemText(systemLocation.Text)).Parent.Name
end
function formatSystemText(str : string)
	local lol = string.gsub(str, ""<b>"", """")
	local lol2 = string.gsub(lol, ""</b>"", """")
	return lol2
end
function getShipStats(shipName : string) : Configuration
	for _, shipsHolder in shipStats:GetChildren() do
		for _, shipConfig in shipsHolder:GetChildren() do
			if shipConfig.Name ~= shipName then continue end

			return shipConfig
		end
	end
end
function scanAnomalies()
	-- credits to dogeman for making
	local xstart, xlimit = -2000, 2000 --neg = left | pos = right
    local ystart, ylimit = -2000, 2000 --neg = top | pos = bottom

    local systemmapdata = {
        [""X""] = {},
        [""Y""] = {},
    }

    for i = xstart + 30, xlimit, 60 do
        table.insert(systemmapdata[""X""], i)
    end

    for i = ystart + 30, ylimit, 60 do
        table.insert(systemmapdata[""Y""], i)
    end

    local CurrentXactint = 0

	systemProbeRm:FireServer()

    for i = 1,#systemmapdata[""X""] do
        CurrentXactint = systemmapdata[""X""][i]
        for i2 = 1,#systemmapdata[""Y""] do
            game.ReplicatedStorage.Remote.Interface.CheckProbePosition:FireServer(Vector2.new(tonumber(CurrentXactint), tonumber(systemmapdata[""Y""][i2])))
        end
    end

	task.defer(function()
        repeat task.wait() until player.PlayerGui.SystemMap.Enabled
	    menuModule.toggleMenu(""SystemMap"")
    end)
end
function ToggleShipMovement(targetPos, distanceMag, preciseSnap, timeOut, speedMulti, yield, typeRequest)

    if (targetPos - vehicle.PrimaryPart.Position).Magnitude > 10000 then return end
	if speedMulti == nil then speedMulti = 1 end
	if timeOut == nil then timeOut = 100 end
	if distanceMag == nil then distanceMag = 150 end
	local timeoutMax = os.time() + timeOut
    local hasReached = false

    if currentMovementConnection ~= nil then
        currentMovementConnection:Disconnect()
        currentMovementConnection = nil
    end

    currentMovementConnection = game:GetService('RunService').RenderStepped:Connect(function()
        if (targetPos - vehicle.PrimaryPart.Position).Magnitude <= distanceMag or os.time() > timeoutMax then hasReached = true end
        vehicle.PrimaryPart.BodyVelocity.Velocity = ((((vehicle.PrimaryPart.CFrame - vehicle.PrimaryPart.CFrame.p) + targetPos)).Position - vehicle.PrimaryPart.Position).Unit * (getShipStats(vehicle.Name).Speed.Base.Value * speedMulti)
    end)

    if yield then
        repeat task.wait() until hasReached
    end

	if preciseSnap then
		vehicle:PivotTo(CFrame.new(targetPos.X, targetPos.Y, targetPos.Z))
	end

    warn('Started ship movement...')
end
function warpToSystem(desiredSystemName : string, association : string)
	if #game.Players:GetPlayers() == 1 then
		shipState.shipBase.Speed.Agility.Value = 5000
	end
    writefile('starscape/miscInfo', HttpService:JSONEncode(miscInfo))
	--make it super fast if no players in same zone
	for _, sectorInstance in systemInstances:GetChildren() do
		local systemIns = sectorInstance:FindFirstChild(desiredSystemName)
		if not systemIns then continue end
        writefile('starscape/options', HttpService:JSONEncode(options))

        task.defer(function()
            --will request warp right when warping in making much fast. (sometimes)
            while task.wait(.5) and options[association] do
                leaveSystemRm:InvokeServer(systemIns.Identifier.Value)
            end
        end)

		repeat

			shipState.shipBase.Speed.Warp.Value = 5000
            shipState.shipBase.Speed.Charge.Value = .05

            if string.find(regionText.Text, 'Ring', 1, true) and regionText.Visible then
                local desiredZone = currentPlanetText.Text:match('%d+')
                warpToTargetModule.warpToTarget(systemInfoObjects.Regions:FindFirstChild(tostring(desiredZone)))
            else
                warpToStarFunc(systemIns)
            end

            task.wait(1)
		until options[association] == false
	end
end
function setDestination(systemName, andWarp : boolean)
    destinationModule.setContents({getStarInformation(systemName).Identifier.Value})
    if andWarp then
        --warp to system
    end
end
function getStarInformation(systemName : string)
	for _, starHolder in systemInstances:GetChildren() do

		for _, systemInstance in starHolder:GetChildren() do
			if systemInstance.Name ~= systemName then continue end
			return systemInstance
		end

	end
end
function getAsteroids(whiteListArray)
    local asteroids = {}

    for _, model in featuresWs:GetChildren() do
        if model:IsA('Model') and string.find(string.lower(model.Name), 'asteroid') then
            for _, asteroidObject in model:GetChildren() do
                if whiteListArray ~= nil then

                    for _, name in whiteListArray do
                        if string.find(asteroidObject.Rock.Tracker:GetAttribute('Title'), name) then
                            table.insert(asteroids, asteroidObject)
                        end
                    end

                else
                    table.insert(asteroids, asteroidObject)
                end
            end
        end
    end

    return asteroids
end
function getClosestAsteroid(customTbl) : Model
    local asteroids = customTbl or getAsteroids()

    local closest = nil
    local cloestDis = math.huge

    for _, asteroidModel in asteroids do
        if asteroidModel.PrimaryPart == nil then warn(`{asteroidModel.Name} didnt have a primarypart`) continue end
        local mag = (vehicle.PrimaryPart.Position - asteroidModel.PrimaryPart.Position).Magnitude
        if mag < cloestDis then
            closest = asteroidModel
            cloestDis = mag
        end
    end

    warn(`getClosestAsteroid() retrieved {closest}`)

    return closest
end
function toggleMiningTurrets(isReleased : boolean)
    local miningTurrets = {}
    local id = utilModule.generateUniqueId()

    for _, turret in vehicle.Turrets:GetChildren() do
        if not string.find(turret:GetAttribute('ItemType'), 'Miner') then continue end
        chargeTurretRm:FireServer(turret)
        task.defer(function()
            stopChargeRm:FireServer(turret)
            enableTurretRm:FireServer(turret, ""STL""..utilModule.generateUniqueId())
        end)
    end
end
function enableTractorTurrets()
    for _, v in trackerMethodsModule.trackers.Flight do
        if tostring(v.object) == 'Ore' then
            v.actions.primary()
        end
    end
end
function getZonesInfo()
    local tbl = {
        [1] = {
            ['Asteroids'] = {},
            ['Players'] = {},
        }
    }


    return tbl
end
function sortAsteroids(p1, allPs)
    local closest = nil
    local closestDis = math.huge

    for _, part in allPs do
        if part == p1 then continue end
        local mag = (p1.PrimaryPart.Position - part.PrimaryPart.Position).Magnitude
        if mag < closestDis then
            closest = part
            closestDis = mag
        end
    end

    return closest
end
function getCurrentAsteroidsInRadius(radiusAmount)
    radiusAmount = radiusAmount or 7500
    local tbl = {}

    for _, v in workspace:GetPartBoundsInRadius(vehicle.PrimaryPart.Position, radiusAmount) do
        if v.Parent.Name == 'Asteroid' and v.Name == 'Rock' then
            for whitelistedOre, bool in whitelistedOres do
                if not bool then continue end
                if string.find(string.lower(v.Tracker:GetAttribute('Title')), string.lower(whitelistedOre)) then
                    table.insert(tbl, v.Parent)
                end
            end
        end
    end

    table.sort(tbl, function(a,b)
        return (vehicle.PrimaryPart.Position - a.PrimaryPart.Position).Magnitude < (vehicle.PrimaryPart.Position - b.PrimaryPart.Position).Magnitude
    end)

    local nTbl = {}

    for i, asteriod in tbl do
        if i == 1 then
            table.insert(nTbl, sortAsteroids(tbl[1], tbl))
        else
            table.insert(nTbl, asteriod)
        end

        table.remove(tbl, i)
    end

    warn(`getCurrentAsteroidsInRadius() returned {table.unpack(nTbl)}`)

    return nTbl
end
function getMineableAnomalies()

    local mineableAnoms = {}
    local goodAnoms = {}
    local foundStuffs = 0

    for _, anomalyObject in systemInfoObjects.Anomalies:GetChildren() do
        for _, mineAnomStr in oreAnomalies do
            if string.find(anomalyObject.Name, mineAnomStr, 8, true) ~= nil then
                table.insert(mineableAnoms, anomalyObject)
            end
        end
    end

    for _, anomObject in systemInfoObjects.Regions:GetChildren() do
        if string.find(anomObject.Name, 'R') == nil then continue end
        table.insert(mineableAnoms, anomObject)
    end

    for _, anomalyObjectt in mineableAnoms do
        for _, obj in featuresWs:GetChildren() do
            if obj:GetAttribute('Zone') ~= anomalyObjectt.Stats.Zone.Value then continue end
            local found = false

            for _, anomalyModel in obj:GetChildren() do
                if anomalyModel.Name ~= 'Asteroid' then continue end
                if anomalyModel.Rock:FindFirstChild('Tracker') == nil then continue end
                local a,b = anomalyModel.Rock.Tracker:GetAttribute('Title'):match((""^(.-)%(""))
                if a == nil then a = anomalyModel.Rock.Tracker:GetAttribute('Title') end
                a = a:gsub(""%s+"", """")

                if whitelistedOres[a] ~= nil then
                    warn(`{tostring(anomalyObjectt)} | {a}`)
                    found = true
                end
            end

            warn(found)

            if found then
                warn(`Asteroids found in: {tostring(anomalyObjectt)}`)
                table.insert(goodAnoms, anomalyObjectt)
            end
        end
    end

    warn('getMineableAnomalies() returned: ' .. #goodAnoms)
    table.foreach(goodAnoms, warn)

    return goodAnoms
end
function getClosestSystemOfType(systemType : string)

end
function checkInvStatus()
    if amountOfStuffInInv >= maxInv.Text then
        if options['AutoDeposit'] == true then

        end
    end
end
function getCurrentOresInRadius(radiusAmount)
    radiusAmount = radiusAmount or 5000
    local tbl = {}

    for _, v in workspace:GetPartBoundsInRadius(vehicle.PrimaryPart.Position, radiusAmount) do
        if vehicle.PrimaryPart.CFrame:ToObjectSpace(v.CFrame).Y < 0 then continue end
        if v.Parent.Name == 'Ores' and v.Name == 'Ore' then
            table.insert(tbl, v.Parent)
        end
    end

    return tbl
end
function findAsteroidWhichIsTargetable(desiredRange)
    desiredRange = desiredRange or 1000
    local closestAsteroids = getCurrentAsteroidsInRadius(desiredRange)

    local closest = math.huge
    local closestAst = nil

    for _, asteroid in closestAsteroids do
        if vehicle.PrimaryPart.CFrame:ToObjectSpace(asteroid.PrimaryPart.CFrame).Y > 0 then
            local mag = (vehicle.PrimaryPart.Position - asteroid.PrimaryPart.Position).Magnitude
            if mag < closest then
                closestAst = asteroid
                closest = mag
            end
        end
    end

    return closestAst
end
function stateEvaluate(requestedState)
    if CURRENT_STATE.Value == requestedState then return 'RUNNING' end
    --eventually prevent it from running if another automation toggle is running
end
function inventoryEvaluate()
    if tonumber(amountOfStuffInInv.Text) >= tonumber(maxInv.Text) then
        if options['AutoDeposit'] and options['AutoMine'] then
            pcall(function()
                currentMovementConnection:Disconnect()  
            end)
            if formatSystemText(systemStatus) ~= 'Wild' then
                warn('LOOKING FOR STATION...')
                local result = depositLoot()
                if result == 'SUCCESS' then
                    destinationModule.setContents({})
                    return 'SUCCESS'
                end
            end
            destinationModule.setContents({})
            task.wait(.1)
            destinationModule.setContents({'gO'}) --citadel identifier.
            task.wait(.1)
            warpToSystem(routesModule.getNextSystemName())
            return 'RETURNING'
        end
    end
end
function depositLoot()
    if #stationsWs:GetChildren() == 0 then return 'NO STATIONS' end
    for _, station in stationsWs:GetChildren() do
        storeAllStorageRm:FireServer(station, 'All')
    end
    if tonumber(amountOfStuffInInv.Text) <= 50 then
        destinationModule.setContents({})
        return 'SUCCESS'
    end
end

function toggleAutoMine(bool)
    options['AutoMine'] = bool
    if bool then
        if vehicle:GetAttribute('Zone') < 0 then repeat task.wait() until vehicle:GetAttribute('Zone') > 0 end
        if inventoryEvaluate() == 'RETURNING' then return warn('Depositing to next system.') end

        if stateEvaluate('AutoMine') == 'RUNNING' then return warn('Already activated...') end
        CURRENT_STATE.Value = 'AutoMine'

        task.defer(function()
            toggleAntiNpc(true)
        end)

        task.defer(function()
            shipState.shipBase.Speed.Warp.Value = shipState.shipBase.Speed.Warp.Value * 5
            shipState.shipBase.Speed.Charge.Value = .05
            shipState.shipBase.Speed.Agility.Value = 5000
            toggleShipNoclip(true)

            if not probeAlreadyLaunched then
                probeAlreadyLaunched = true
                scanAnomalies()
                for _, anomObj in anomaliesMap:GetChildren() do
                    requestAnomalyZoneRm:InvokeServer(anomObj.Stats.Hash.Value)
                end
            end

        end)

        task.defer(function()
            while task.wait(.1) and options['AutoMine'] do
                enableTractorTurrets()
                toggleMiningTurrets()
            end
        end)

        connections['AutoMineHealth'] = vehicle:FindFirstChild('ship').stats.hull:GetPropertyChangedSignal('Value'):Connect(function()
            local currentHull = vehicle:FindFirstChild('ship').stats.hull.Value
            local maxHull = vehicle:FindFirstChild('ship').stats.hull.max.Value
            if options.AutoDepositMethod ~= 'None' then
                if currentHull < maxHull * .3 then
                    warn('avoiding death...')
                    game:GetService('RunService'):BindToRenderStep('AvoidDeath', 1, function()
                        vehicle:PivotTo(CFrame.new(0,0,0))
                    end)
                end
            end
        end)

        task.wait(1)

        for _, anomalyObject in getMineableAnomalies() do
            if not options['AutoMine'] then return end

            if vehicle:GetAttribute('Zone') ~= anomalyObject.Stats.Zone.Value then
                warn(`Cruising to: {anomalyObject.Name}`)
                warpToTargetModule.warpToTarget(anomalyObject)
                repeat task.wait(.2) until vehicle:GetAttribute('Zone') == anomalyObject.Stats.Zone.Value or #getCurrentAsteroidsInRadius(7500) > 0
                warn(`Arrived at: {anomalyObject.Name}`)
                if anomalyObject.Parent.Name == 'Regions' then --assumed to be a ring planet
                    warn('ASSUMED TO BE RING PLANET.')
                    launchPlanetProbe()
                end
            end

            task.wait(1)

            if #getCurrentAsteroidsInRadius() > 0 then
                repeat
                    if not options['AutoMine'] then return end
                    local asteroidModel = getClosestAsteroid(getCurrentAsteroidsInRadius())
                    targetAsteroid = asteroidModel
                    warn(`targetAsteroid updated to: {targetAsteroid.Name}`)
                    ToggleShipMovement(asteroidModel.PrimaryPart.Position + Vector3.new(0,-300,0), 250, false, 20, 1.35, false)
                    repeat task.wait() until asteroidModel == nil or asteroidModel.Parent == nil
                    currentMovementConnection:Disconnect() ; currentMovementConnection = nil

                    repeat
                        if findAsteroidWhichIsTargetable(950) ~= nil then
                            targetAsteroid = findAsteroidWhichIsTargetable(950)
                            warn(`targetAsteroid updated to: {targetAsteroid.Name} | Found Above`)
                            repeat task.wait() until targetAsteroid == nil or targetAsteroid.Parent == nil
                        end
                        task.wait(.1)
                    until findAsteroidWhichIsTargetable(950) == nil

                    if not options['IgnoreFloatOres'] then
                        repeat task.wait(.5) until #getCurrentOresInRadius(1000) == 0
                    end
                until #getCurrentAsteroidsInRadius() == 0
            else
                warn('No asteroids were found in radius')
            end

        end

        warn('Finished System...')
        if not options['AutoMine'] then return end
        warpToSystem(routesModule.getNextSystemName(), 'AutoMine')
    else
        targetAsteroid = nil
        pcall(function()
            connections['AutoMineHealth']:Disconnect() ; connections['AutoMineHealth'] = nil
        end)
        if currentMovementConnection then
            pcall(function()
                currentMovementConnection:Disconnect() ; currentMovementConnection = nil
            end)
        end
        CURRENT_STATE.Value = 'N/A'
    end
end
function toggleAutoPvE(bool)

end
function toggleAutoHaul(bool)

end

-- // GUI

local repo = 'https://raw.githubusercontent.com/mrchigurh/LinoriaLib/main/'

local Library = loadstring(game:HttpGet(repo .. 'Library.lua'))()
local ThemeManager = loadstring(game:HttpGet(repo .. 'addons/ThemeManager.lua'))()
local SaveManager = loadstring(game:HttpGet(repo .. 'addons/SaveManager.lua'))()

local Window = Library:CreateWindow({
    Title = 'Starscape GUI',
    Center = true,
    AutoShow = false,
})

local Tabs = {

    ['Autofarm'] = Window:AddTab('Autofarm'),
    ['Modify'] = Window:AddTab('Modify'),
    ['Misc'] = Window:AddTab('Misc'),
    ['UI Settings'] = Window:AddTab('UI Settings'),

}

-- [[ MISC STUFF ]] --

local MiscGroupBox = Tabs.Misc:AddLeftGroupbox('DebugOptions')
local MiscDebugMode = MiscGroupBox:AddToggle('DebugMode', {
    Text = 'Debug Mode',
    Default = true, -- Default value (true / false)
    Tooltip = 'Will use warn command for debugging stuff in script.', -- Information shown when you hover over the toggle
    Callback = function(bool)
        options['DEBUG_MODE'] = bool
    end
})
local MiscAntiNpc = MiscGroupBox:AddToggle('AntiNpc', {
    Text = 'Anti Npc',
    Default = true, -- Default value (true / false)
    Tooltip = 'Will teleport npcs to void.', -- Information shown when you hover over the toggle
    Callback = function(bool)
        options['AntiNpc'] = bool
        toggleAntiNpc(bool)
    end
})

-- [[ MINING ]] --
local AutoMinerGroupBox = Tabs.Autofarm:AddLeftGroupbox('Auto Mine')
local AutoMinerEnableToggle = AutoMinerGroupBox:AddToggle('AutoMine', {
    Text = 'Enabled',
    Default = false, -- Default value (true / false)
    Tooltip = 'Will start or resume automine when turned on.', -- Information shown when you hover over the toggle
    Callback = function(bool)
        task.defer(function()
            toggleAutoMine(bool)
        end)
    end
})
local AutoMinerDepositToggle = AutoMinerGroupBox:AddToggle('AutoDeposit', {
    Text = 'Auto Deposit',
    Default = true, -- Default value (true / false)
    Tooltip = 'Will automatically deposit at nearest system with a station when full on inventory.', -- Information shown when you hover over the toggle
    Callback = function(Value)
        options['AutoDeposit'] = Value
    end
})
local AutoMinerIgnoreFloatOres = AutoMinerGroupBox:AddToggle('IgnoreFloatOres', {
    Text = 'Ignore Floating Ores',
    Default = false, -- Default value (true / false)
    Tooltip = 'Will ignore ores which pop out of rocks, useful for precision miners.', -- Information shown when you hover over the toggle
    Callback = function(Value)
        options['IgnoreFloatOres'] = Value
    end
})
local AutoMinerMineTowardsStartingSector = AutoMinerGroupBox:AddToggle('MineTowardsStartingSector', {
    Text = 'Mine towards starting sector',
    Default = true, -- Default value (true / false)
    Tooltip = 'Will mine systems towards starting sector if they are not in already mined systems.', -- Information shown when you hover over the toggle
    Callback = function(Value)
        options['IgnoreFloatOres'] = Value
    end
})
local AutoMinerEvasionDropdown = AutoMinerGroupBox:AddDropdown('EvasionMethod', {

    Values = {'Legit', 'Instant', 'None'},
    Default = 1,
    Multi = false, -- true / false, allows multiple choices to be selected

    Text = 'Evasion Method',
    Tooltip = 'Legit will attempt to planet warp, and then teleport into void to get kicked. \nInstant will put you immediately into void for kick.', -- Information shown when you hover over the textbox

    Callback = function(Value)
    end
})
local AutoMinerOresDropdown = AutoMinerGroupBox:AddDropdown('OresDropdown', {

    Values = {'Korrelite', 'Reknite', 'Gellium', 'Axnit', 'Narcor', 'Red Narcor', 'Vexnium'},
    Default = 1,
    Multi = true, -- true / false, allows multiple choices to be selected

    Text = 'Ores',
    Tooltip = 'Select the ores you want to mine, and leave the ones you dont unselected.', -- Information shown when you hover over the textbox

    Callback = function(Value)
        whitelistedOres = Value
    end
})

-- [[ PVE ]] --
local AutoPvEGroupBox = Tabs.Autofarm:AddLeftGroupbox('Auto PvE')
local AutoPveEnable = AutoPvEGroupBox:AddToggle('AutoPvEEnabled', {
    Text = 'Enabled',
    Default = false, -- Default value (true / false)
    Tooltip = 'Will start or resume auto PvE when turned on.', -- Information shown when you hover over the toggle
    Callback = function(Value)
    end
})

--[[ COMBAT ]] --
local AutoCombatGroupBox = Tabs.Autofarm:AddLeftGroupbox('Auto Combat')
local AutoCombatEnable = AutoCombatGroupBox:AddToggle('AutoCombatEnabled', {
    Text = 'Enabled',
    Default = false, -- Default value (true / false)
    Tooltip = 'Will start or resume auto combat when turned on.', -- Information shown when you hover over the toggle
    Callback = function(Value)
    end
})

--[[ HAULING ]] --

local AutoHaulGroupBox = Tabs.Autofarm:AddLeftGroupbox('Auto Haul')
local AutoHaulEnable = AutoHaulGroupBox:AddToggle('AutoHaulEnabled', {
    Text = 'Enabled',
    Default = false, -- Default value (true / false)
    Tooltip = 'Will start or resume auto hauling when turned on.', -- Information shown when you hover over the toggle
    Callback = function(Value)
    end
})

-- [[ INFO ]] --

local AutoInfoGroupBox = Tabs.Autofarm:AddRightGroupbox('Status')
local CurrentStateLabel = AutoInfoGroupBox:AddLabel('STATE: N/A') -- StateLabel:SetText('Text')
local CurrentStateMiscInfoLabel = AutoInfoGroupBox:AddLabel('', true)

-- [[ MODIFY TAB ]] --

local ShipActionsGroupBox = Tabs.Modify:AddLeftGroupbox('Actions')
local InstantWarpToggle = ShipActionsGroupBox:AddToggle('Instant Warp', {
    Text = 'Instant Warp',
    Default = false, -- Default value (true / false)
    Tooltip = 'Will give you instant charge time for warping to systems.', -- Information shown when you hover over the toggle
    Callback = function(Value)
    end
})
local InstantTravelToggle = ShipActionsGroupBox:AddToggle('Instant Travel', {
    Text = 'Instant Travel',
    Default = false, -- Default value (true / false)
    Tooltip = 'Will give you instant travel time between planets.', -- Information shown when you hover over the toggle
    Callback = function(Value)
    end
})
local ShipStatsGroupBox = Tabs.Modify:AddLeftGroupbox('Ship Stats') -- do later

-- [[ UI SETTINGS ]] --

--Library.KeybindFrame.Visible = true;
Library:OnUnload(function()
    print('Unloaded!')
    Library.Unloaded = true
end)

local MenuGroup = Tabs['UI Settings']:AddLeftGroupbox('Menu')
MenuGroup:AddButton('Unload', function() Library:Unload() end)
MenuGroup:AddLabel('Menu bind'):AddKeyPicker('MenuKeybind', { Default = 'LeftAlt', NoUI = true, Text = 'Menu keybind' })

-- SaveManager (Allows you to have a configuration system)
-- ThemeManager (Allows you to have a menu theme system)

ThemeManager:SetLibrary(Library)
SaveManager:SetLibrary(Library)
SaveManager:IgnoreThemeSettings()
SaveManager:SetIgnoreIndexes({ 'MenuKeybind' })
ThemeManager:SetFolder('MyScriptHub')
SaveManager:SetFolder('MyScriptHub/specific-game')
SaveManager:BuildConfigSection(Tabs['UI Settings'])
ThemeManager:ApplyToTab(Tabs['UI Settings'])
SaveManager:LoadAutoloadConfig()
Library.ToggleKeybind = Options.MenuKeybind -- Allows you to have a custom keybind for the menu

-- // MAIN



task.defer(function()
    for key, toggle in options do
        if options[key] == true and Toggles[key] ~= nil then
            Toggles[key]:SetValue(toggle)
        end
    end
end)

player.OnTeleport:Connect(function(teleportState, _placeId, _spawnName)

    if teleportState == Enum.TeleportState.Started then
       writefile('starscape/options', HttpService:JSONEncode(options))
    end

end)

CURRENT_STATE:GetPropertyChangedSignal('Value'):Connect(function()
    warn('State changed to... ' .. CURRENT_STATE.Value)
    CurrentStateLabel:SetText(tostring(CURRENT_STATE.Value))
end)

amountOfStuffInInv:GetPropertyChangedSignal('Text'):Connect(function()
    if tonumber(amountOfStuffInInv.Text) >= tonumber(maxInv.Text) then
        if options['AutoDeposit'] == true then
            inventoryEvaluate()
        end
    end
end)

game:GetService('Players').PlayerDisconnecting:Connect(function(player)
    if player.Name == game.Players.LocalPlayer.Name then
        writefile('starscape/options', HttpService:JSONEncode(options))
    end
end)


local oldWarn ; oldWarn = hookfunction(warn, function(...)
    if not options.DEBUG_MODE then return end
    return oldWarn(...)
end)

warn('Loaded.....')"
42xGjagf,Notecard Inventory Shuffler,Madi_Perth,Linden Scripting,Saturday 30th of March 2024 03:44:44 PM CDT,"default
{
    state_entry()
    {
        integer numberCards = llGetInventoryNumber(INVENTORY_NOTECARD);
        integer i;
        list numberList;

        for(i = 0; i < numberCards; i++)
            numberList += i;

        numberList = llListRandomize(numberList, 1);

        for(i = 0; i < numberCards; i++)
            llOwnerSay(llGetInventoryName(INVENTORY_NOTECARD , llList2Integer(numberList, i)));


    }
}
"
6WFfuBL9,Computer 3 paste,Archer2o2x,Lua,Saturday 30th of March 2024 03:09:59 PM CDT,"local routes = {
    [""Vert""] = ""top"",
    [""Hori""] = ""left"",
    [""ReverseVert""] = ""bottom"",
    [""ReverseHori""] = ""front""
}

peripheral.find(""modem"", rednet.open)

while true do

    local _, message = rednet.receive(""Red Router v1.0"")

    print(""RCV "" .. message)

    local data = textutils.unserialize(message)

    if routes[data.route] ~= nil then

        redstone.setOutput(routes[data.route], data.value)

    end

end
"
VQFyTceS,Computer 2 paste,Archer2o2x,Lua,Saturday 30th of March 2024 03:08:02 PM CDT,"local routes = {
    [""Fire""] = ""top"",
    [""Reset""] = ""back"",
    [""Reload""] = ""bottom""
}

peripheral.find(""modem"", rednet.open)

while true do

    local _, message = rednet.receive(""Red Router v1.0"")

    print(""RCV "" .. message)

    local data = textutils.unserialize(message)

    if routes[data.route] ~= nil then

        redstone.setOutput(routes[data.route], data.value)

    end

end"
cWZpA6ap,Computer 1 paste,Archer2o2x,Lua,Saturday 30th of March 2024 03:04:20 PM CDT,"shell.execute(""pastebin"", ""get"", ""FpbkURf2"", ""artui"")
shell.execute(""pastebin"", ""get"", ""9UtmiZ5U"", ""artillery"")
shell.execute(""pastebin"", ""get"", ""nkWsHcS5"", ""vec"")
shell.execute(""pastebin"", ""get"", ""pWWvEVPf"", ""defaults"")
shell.execute(""pastebin"", ""get"", ""GyLKqLa0"", ""redroute"")
"
0MuD9EsT,Local Max in Matrix,Manitejaaaa,Java,Saturday 30th of March 2024 02:53:01 PM CDT,"import java.io.*;
import java.util.*;

public class Main {
    static int max(int[][] arr, int i, int j){
        int max = arr[i][j];
        for(int k = i; k < i + 3; k++){
            for(int l = j; l < j + 3; l++){
                max = Math.max(max, arr[k][l]);
            }
        }
        return max;
    }
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int[][] arr = new int[n][n];
        for(int i = 0; i < n; i++){
            for(int j = 0; j < n; j++){
                arr[i][j] = sc.nextInt();
            }
        }
        for(int i = 0; i < n - 2; i++){
            for(int j = 0; j < n - 2; j++){
                System.out.print(max(arr, i, j) + "" "");
            }
            System.out.println();
        }
    }
}"
uPJ3fBrw,Random Binary Code Machine,mrmrcoder,Lua,Saturday 30th of March 2024 02:44:00 PM CDT,"--[[
Generate a random, 24 bit code in binary.
Each set has 8 bits, which will correspond to a number.
Generate a 3 Digit password and convert into 3 8-bit sets of binary.
Every time the button is pressed, move to the next set, showing the binary for that set.
--]]

local binary_table = {
	128,
	64,
	32,
	16,
	8,
	4,
	2,
	1
}

local Machine = script.Parent
local Button = Machine.Button
local Display = Machine.Display
local SetDisplay = Machine.Sets

local CurrentSetIndex = 1

function GenerateRandomSet()
	local set = {}
	
	for i = 1, 8 do
		table.insert(set, math.random(0,1))
	end
	
	return set
end

function DecodeSet(set)
	local true_decimals = {}
	local final_code = 0
	
	for i = 1, 8 do
		local IsNumberTrue = set[i] == 1
		
		if IsNumberTrue == true then
			local binary_value = binary_table[i]
			table.insert(true_decimals, binary_value)
		end
	end
	
	for i, v in true_decimals do
		final_code = final_code + v
	end
	
	return final_code
end

function DisplaySet(set)
	local binary_string = """"
	
	for i = 1, #set do
		local light_name = ""Light""..tostring(i)
		
		if set[i] == 1 then
			Display:FindFirstChild(light_name).BrickColor = BrickColor.Green()
		else
			Display:FindFirstChild(light_name).BrickColor = BrickColor.Black()
		end
		
		binary_string = binary_string..tostring(set[i])
	end
	
	print(""binary string: "".. binary_string)
end

function DisplaySetIndex()
	local SetName = ""Set""..CurrentSetIndex
	local chosen_set = SetDisplay:FindFirstChild(SetName)
	
	for _, set_btn in SetDisplay:GetChildren() do
		set_btn.BrickColor = BrickColor.Black()
	end
	
	chosen_set.BrickColor = BrickColor.Green()
end

local sets = {}

sets[1] = GenerateRandomSet()
sets[2] = GenerateRandomSet()
sets[3] = GenerateRandomSet()

DisplaySet(sets[CurrentSetIndex])
DisplaySetIndex()

local code = tostring(DecodeSet(sets[1])..DecodeSet(sets[2])..DecodeSet(sets[3]))
print(""code: "".. code)

game.Players.PlayerAdded:Connect(function(plr)
	plr.Chatted:Connect(function(msg)
		if msg == code then
			print(""Player guessed the code."")
		end
	end)
end)

Button.ClickDetector.MouseClick:Connect(function()
	Button.ClickAudio.TimePosition = 0
	Button.ClickAudio:Play()
	if CurrentSetIndex < 3 then
		CurrentSetIndex = CurrentSetIndex + 1
	else
		CurrentSetIndex = 1
	end
	
	DisplaySet(sets[CurrentSetIndex])
	DisplaySetIndex()
end)"
kq0KvPTS,Untitled,Mysoft,FreeBasic,Saturday 30th of March 2024 02:36:09 PM CDT,"dim st as string = !""hello\0 world""
dim x as ubyte ptr = @st[0]
do until st[x] = asc(!""\0"")
	print chr(st[x])
	x += 1
loop "
nQD9X0r7,stripmine,Last1k,Lua,Saturday 30th of March 2024 02:34:41 PM CDT,"local Direction = {
    UP = ""up"",
    DOWN = ""down"",
    FORWARD = ""forward"",
    BACKWARD = ""backward"",
    NONE = ""none"" -- Moving in none direction doesn't do anything
}

local moveActions = {
    [Direction.FORWARD] = { move = turtle.forward, dig = turtle.dig },
    [Direction.UP] = { move = turtle.up, dig = turtle.digUp },
    [Direction.DOWN] = { move = turtle.down, dig = turtle.digDown },
    [Direction.BACKWARD] = { move = turtle.back, dig = function() end }
}

function moveTurtle(direction)
    if direction == Direction.NONE then
        return true
    end

    local action = moveActions[direction]
    if not action then
        error(""Invalid direction. Use Direction.UP, Direction.DOWN, Direction.FORWARD or Direction.BACKWARD."")
        return false
    end

    while not action.move() do
        action.dig()
    end
    return true
end

function copyFile(sourcePath, destinationPath)
    -- Open the source file for reading
    local sourceFile, sourceErr = io.open(sourcePath, ""rb"") -- ""rb"" mode for binary read, to ensure all file types are supported
    if not sourceFile then
        error(""Could not open source file: "" .. sourceErr)
    end

    -- Read the entire content of the source file
    local content = sourceFile:read(""*a"") -- ""*a"" reads the whole file
    sourceFile:close()                    -- Close the source file after reading

    -- Open the destination file for writing
    local destinationFile, destErr = io.open(destinationPath, ""wb"") -- ""wb"" mode for binary write
    if not destinationFile then
        error(""Could not open destination file: "" .. destErr)
    end

    -- Write the content to the destination file
    destinationFile:write(content)
    destinationFile:close() -- Close the destination file after writing
end

function placeDiskAndWriteData()
    moveTurtle(Direction.FORWARD)

    turtle.select(1)
    while not turtle.placeUp() do
        turtle.digUp()
    end
    turtle.select(2)
    turtle.dropUp()

    copyFile(""minerArsenal.lua"", ""disk/minerArsenal.lua"")
    copyFile(""slavetartup.lua"", ""disk/startup.lua"")

    moveTurtle(Direction.BACKWARD)
end

function placeTurtle()
    turtle.select(3)
    while not turtle.place() do
        turtle.dig()
    end

    -- Have to wait before interacting with the turtle
    os.sleep(1)

    local computer = peripheral.wrap(""front"")
    computer.turnOn()
end

placeDiskAndWriteData()
placeTurtle()"
yJHpyW8c,slaveStartup,Last1k,Lua,Saturday 30th of March 2024 02:33:47 PM CDT,"function copyFile(sourcePath, destinationPath)
    -- Open the source file for reading
    local sourceFile, sourceErr = io.open(sourcePath, ""rb"") -- ""rb"" mode for binary read, to ensure all file types are supported
    if not sourceFile then
        error(""Could not open source file: "" .. sourceErr)
    end

    -- Read the entire content of the source file
    local content = sourceFile:read(""*a"") -- ""*a"" reads the whole file
    sourceFile:close() -- Close the source file after reading

    -- Open the destination file for writing
    local destinationFile, destErr = io.open(destinationPath, ""wb"") -- ""wb"" mode for binary write
    if not destinationFile then
        error(""Could not open destination file: "" .. destErr)
    end

    -- Write the content to the destination file
    destinationFile:write(content)
    destinationFile:close() -- Close the destination file after writing
end

copyFile(""disk/minerArsenal.lua"", ""minerArsenal.lua"")

local miner = require(""minerArsenal"")
Direction = miner.Direction

os.setComputerLabel(""worker"")
turtle.suckDown()
turtle.refuel()

miner.moveTurtle(Direction.FORWARD)

height = 3
length = 4
miner.digTunnel(length, height)

turtle.turnRight()
turtle.turnRight()

for i = 1, length do
    miner.moveTurtle(Direction.FORWARD)
end

miner.moveTurtle(Direction.FORWARD)

turtle.turnRight()
turtle.turnRight()
"
yXPYvuyW,minerArsenal,Last1k,Lua,Saturday 30th of March 2024 02:33:18 PM CDT,"local Direction = {
    UP = ""up"",
    DOWN = ""down"",
    FORWARD = ""forward"",
    BACKWARD = ""backward"",
    NONE = ""none"" -- Moving in none direction doesn't do anything
}

-- Function to get the opposite direction
function getOppositeDirection(direction)
    local opposite = {
        [Direction.UP] = Direction.DOWN,
        [Direction.DOWN] = Direction.UP,
        [Direction.FORWARD] = Direction.BACKWARD,
        [Direction.BACKWARD] = Direction.FORWARD,
        [Direction.NONE] = Direction.NONE,
    }

    return opposite[direction]
end

function isOre(blockData)
    if blockData and blockData.tags then
        if blockData.tags[""forge:ores""] then
            return true
        end
    end
    return false
end

-- Function to inspect a block in a given direction and check if it's an ore
function hasOre(direction)
    local success, data
    if direction == Direction.UP then
        success, data = turtle.inspectUp()
    elseif direction == Direction.DOWN then
        success, data = turtle.inspectDown()
    elseif direction == Direction.FORWARD then
        success, data = turtle.inspect()
    else
        error(""Invalid direction."")
    end

    if success then
        return isOre(data)
    else
        return false
    end
end

local moveActions = {
    [Direction.FORWARD] = { move = turtle.forward, dig = turtle.dig },
    [Direction.UP] = { move = turtle.up, dig = turtle.digUp },
    [Direction.DOWN] = { move = turtle.down, dig = turtle.digDown },
    [Direction.BACKWARD] = { move = turtle.back, dig = function() end }
}

function moveTurtle(direction)
    if direction == Direction.NONE then
        return true
    end

    local action = moveActions[direction]
    if not action then
        error(""Invalid direction. Use Direction.UP, Direction.DOWN, Direction.FORWARD or Direction.BACKWARD."")
        return false
    end

    while not action.move() do
        action.dig()
    end
    return true
end

Stack = {}
function Stack:new()
    local instance = { items = {} }
    setmetatable(instance, self)
    self.__index = self
    return instance
end

function Stack:push(item)
    table.insert(self.items, item)
end

function Stack:pop()
    return table.remove(self.items)
end

function Stack:isEmpty()
    return #self.items == 0
end

-- Define actions
local digActions = {
    CheckSide = ""checkSide"",
    CheckTop = ""checkTop"",
    CheckBottom = ""checkBottom""
}

-- Function to create a new state with a predefined set of actions
function newState(headingDirection)
    local actionStack = Stack:new()
    -- Add actions in reverse order since we're using a stack
    actionStack:push(digActions.CheckTop)
    actionStack:push(digActions.CheckSide)
    actionStack:push(digActions.CheckSide)
    actionStack:push(digActions.CheckSide)
    actionStack:push(digActions.CheckSide)
    actionStack:push(digActions.CheckBottom)
    return {
        actionStack = actionStack,
        getBackDirection = getOppositeDirection(headingDirection)
    }
end

function mineVein(direction)
    stateStack = Stack:new()
    stateStack:push(newState(direction))
    moveTurtle(direction)

    while not stateStack:isEmpty() do
        local currentState = stateStack:pop()

        while not currentState.actionStack:isEmpty() do
            local action = currentState.actionStack:pop()
            local checkDirection
            if action == digActions.CheckSide then
                turtle.turnRight()
                checkDirection = Direction.FORWARD
            elseif action == digActions.CheckTop then
                checkDirection = Direction.UP
            elseif action == digActions.CheckBottom then
                checkDirection = Direction.DOWN
            end

            if hasOre(checkDirection) then
                stateStack:push(currentState)
                moveTurtle(checkDirection)
                currentState = newState(checkDirection)
            end
        end

        moveTurtle(currentState.getBackDirection)
    end
end

function digColumn(height)
    if hasOre(Direction.DOWN) then
        mineVein(Direction.DOWN)
    end

    turtle.turnLeft()

    for h = 1, height do
        if hasOre(Direction.FORWARD) then
            mineVein(Direction.FORWARD)
        end
        if h ~= height then
            moveTurtle(Direction.UP)
        end
    end

    if hasOre(Direction.UP) then
        mineVein(Direction.UP)
    end

    turtle.turnRight()
    turtle.turnRight()

    for h = height, 1, -1 do
        if hasOre(Direction.FORWARD) then
            mineVein(Direction.FORWARD)
        end
        if h ~= 1 then
            moveTurtle(Direction.DOWN)
        end
    end

    turtle.turnLeft()
end

function digTunnel(length, height)
    for i = 1, length do
        moveTurtle(Direction.FORWARD)
        digColumn(height)
    end
end

function penetrate(length)
    for i = 1, length do
        moveTurtle(Direction.FORWARD)
        if hasOre(Direction.DOWN) then
            mineVein(Direction.DOWN)
        end
        if hasOre(Direction.UP) then
            mineVein(Direction.UP)
        end
    end
end

local M = {}

M.digTunnel = digTunnel
M.penetrate = penetrate
M.moveTurtle = moveTurtle

M.Direction = Direction

return M"
wBc5nGZv,[site-reviews] prevent users from reviewing their own posts,geminilabs,PHP,Saturday 30th of March 2024 02:05:01 PM CDT,"/**
 * @param bool|string $isValid
 * @param \GeminiLabs\SiteReviews\Request $request
 * @return bool|string
 */
add_filter('site-reviews/validate/custom', function ($isValid, $request) {
    if (!is_user_logged_in()) {
        return $isValid;
    }
    $postIds = $request->sanitize('assigned_posts', 'array-int');
    $userId = get_current_user_id();
    foreach ($postIds as $postId) {
		$postAuthorId = (int) (get_post($postId)->post_author ?? 0);
        if ($userId === $postAuthorId) {
            return 'You are not allowed to review your own post.';
        }
    }
    return $isValid;
}, 10, 2);"
ySd7f1qC,Unit_10,lovelyvook,C#,Saturday 30th of March 2024 01:43:04 PM CDT,"using System;

namespace Ijunior
{
    internal class Program
    {
        static void Main(string[] args)
        {
            Random random = new Random();
            int minRandomNumber = 1;
            int maxRandomNumber = 101;
            int number = random.Next(minRandomNumber, maxRandomNumber);
            int dividedNumber1 = 3;
            int dividedNumber2 = 5;
            int sum = 0;

            Console.WriteLine(""Рандомное число: "" + number);

            for (int i = 1; i <= number; i++)
            {
                if (i % dividedNumber1 == 0 || i % dividedNumber2 == 0)
                {
                    sum += i;
                }
            }

            Console.WriteLine($""Сумма чисел кратная {dividedNumber1} и {dividedNumber2} равна {sum}"");
        }
    }
}"
sky959RR,Powershell XAMMP script,RehabCZ,PowerShell,Saturday 30th of March 2024 01:36:35 PM CDT,"# Check if the script is running with administrative privileges
if (-not ([Security.Principal.WindowsPrincipal] [Security.Principal.WindowsIdentity]::GetCurrent()).IsInRole([Security.Principal.WindowsBuiltInRole]::Administrator)) {
    Write-Host ""Please run this script as an administrator.""
    Exit
}

# Prompt for IP address
$ipAddress = Read-Host -Prompt ""Enter IP address""

# Prompt for hostname
$hostname = Read-Host -Prompt ""Enter hostname""

# Prompt for directory
$directory = Read-Host -Prompt ""Enter directory""

# Construct the hosts file entry
$hostsEntry = ""$ipAddress`t$hostname""

# Path to the hosts file
$hostsFilePath = ""$env:SystemRoot\System32\drivers\etc\hosts""

# Check if the entry already exists in the hosts file
if (Select-String -Path $hostsFilePath -Pattern ""^$hostname"") {
    Write-Host ""Entry for $ipAddress already exists in hosts file.""
}
else {
    # Add the entry to the hosts file
    Add-Content -Path $hostsFilePath -Value $hostsEntry
    Write-Host ""Entry added to hosts file:""
    Write-Host $hostsEntry
}

# Check if in vhosts
$apacheVhostsFile = ""C:\Program Files\XAMPP\apache\conf\extra\httpd-vhosts.conf""

$apacheEntry = @""
<VirtualHost $hostname:80>
    DocumentRoot ""$directory""
    ServerName ""$hostname""
    <Directory ""$directory"">
        Options All
        AllowOverride All
        Allow from all
    </Directory>
##</VirtualHost>
""@

# Check if the entry already exists in the vhosts file
if (Select-String -Path $apacheVhostsFile -Pattern '^ServerName ""$hostname""') {
    Write-Host ""Entry for $hostname exists in vhosts file.""
}
else {
    # Add the entry to the hosts file
    Add-Content -Path $apacheVhostsFile -Value $apacheEntry
    Write-Host ""Entry added to hosts file:""
    Write-Host $apacheVhostsFile
}
"
w5jd1SHC,OneTimeEvent,zORg_alex,C#,Saturday 30th of March 2024 01:20:15 PM CDT,"using System;

// This initially was my first Chat GPT experiment... I should have done that myself and saved a couple of hours :)

/// <summary>
/// An event that supposed to be fired once, and after that any subscription will be fired immediately. <code>
/// private static OneTimeEvent onHadInitialized = new OneTimeEvent();
/// public static event Action OnHadInitialized { add => onHadInitialized += value; remove => onHadInitialized -= value; }
/// </code>
/// </summary>
public class OneTimeEvent
{
	private event Action _event;
	private bool _wasInvoked;
	private static object _staticlock = new object();
	private object _lock = new object();

	public bool WasInvoked
	{
		get
		{
			lock (_lock)
			{
				return _wasInvoked;
			}
		}
	}

	public static OneTimeEvent operator +(OneTimeEvent oneTimeEvent, Action handler)
	{
		lock (_staticlock)
		{
			if (oneTimeEvent == null)
			{
				oneTimeEvent = new OneTimeEvent();

				return Subscribe(oneTimeEvent, handler);
			}
		}
		lock (oneTimeEvent._lock)
		{
			return Subscribe(oneTimeEvent, handler);
		}

		static OneTimeEvent Subscribe(OneTimeEvent oneTimeEvent, Action handler)
		{
			if (oneTimeEvent._wasInvoked)
			{
				handler?.Invoke();
			}
			else
			{
				oneTimeEvent._event += handler;
			}
			return oneTimeEvent;
		}
	}
	public static OneTimeEvent operator -(OneTimeEvent oneTimeEvent, Action handler)
	{
		lock (_staticlock)
		{
			if (oneTimeEvent == null)
			{
				oneTimeEvent = new OneTimeEvent();

				return Unsubscribe(oneTimeEvent, handler);
			}
		}
		lock (oneTimeEvent._lock)
		{
			return Unsubscribe(oneTimeEvent, handler);
		}

		static OneTimeEvent Unsubscribe(OneTimeEvent oneTimeEvent, Action handler)
		{
			if (oneTimeEvent._wasInvoked)
			{
				handler?.Invoke();
			}
			else
			{
				oneTimeEvent._event -= handler;
			}
			return oneTimeEvent;
		}
	}

	public void Invoke()
	{
		Action temp;
		lock (_lock)
		{
			if (_wasInvoked)
			{
				return;
			}

			_wasInvoked = true;
			temp = _event;
			_event = null;
		}
			temp?.Invoke();
	}

	public IAsyncResult BeginInvoking()
	{
		Action temp;
		lock (_lock)
		{
			if (_wasInvoked)
			{
				return null;
			}

			_wasInvoked = true;
			temp = _event;
			_event = null;
		}
		return temp?.BeginInvoke(temp.EndInvoke, null);
	}
}

/// <summary>
/// An event that supposed to be fired once, and after that any subscription will be fired immediately.<para/>
/// Thanks Chat GPT to helping improving it... Although, I should have done that myself and saved a couple of hours
/// </summary>
public class OneTimeEvent<T>
{
	private Action<T> _event;
	private T _arg;
	private bool _wasInvoked;
	private static object _staticlock = new object();
	private object _lock = new object();

	public bool WasInvoked
	{
		get
		{
			lock (_lock)
			{
				return _wasInvoked;
			}
		}
	}

	public static OneTimeEvent<T> operator +(OneTimeEvent<T> oneTimeEvent, Action<T> handler)
	{
		lock (_staticlock)
		{
			if (oneTimeEvent == null)
			{
				oneTimeEvent = new OneTimeEvent<T>();

				return Subscribe(oneTimeEvent, handler);
			}
		}
		lock (oneTimeEvent._lock)
		{
			return Subscribe(oneTimeEvent, handler);
		}

		static OneTimeEvent<T> Subscribe(OneTimeEvent<T> oneTimeEvent, Action<T> handler)
		{
			if (oneTimeEvent._wasInvoked)
			{
				handler?.Invoke(oneTimeEvent._arg);
			}
			else
			{
				oneTimeEvent._event += handler;
			}
			return oneTimeEvent;
		}
	}

	public static OneTimeEvent<T> operator -(OneTimeEvent<T> oneTimeEvent, Action<T> handler)
	{
		lock (_staticlock)
		{
			if (oneTimeEvent == null)
			{
				oneTimeEvent = new OneTimeEvent<T>();

				return Unsubscribe(oneTimeEvent, handler);
			}
		}
		lock (oneTimeEvent._lock)
		{
			return Unsubscribe(oneTimeEvent, handler);
		}

		static OneTimeEvent<T> Unsubscribe(OneTimeEvent<T> oneTimeEvent, Action<T> handler)
		{
			if (oneTimeEvent._wasInvoked)
			{
				handler?.Invoke(oneTimeEvent._arg);
			}
			else
			{
				oneTimeEvent._event -= handler;
			}
			return oneTimeEvent;
		}
	}

	public void Invoke(T arg)
	{
		Action<T> temp;
		lock (_lock)
		{
			if (_wasInvoked)
			{
				return;
			}

			_wasInvoked = true;
			temp = _event;
			_event = null;
		}
		temp?.Invoke(arg);
	}
}"
K3rbF96X,Unit_09,lovelyvook,C#,Saturday 30th of March 2024 12:54:06 PM CDT,"using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Ijunior
{
    internal class Program
    {
        static void Main(string[] args)
        {
            int minNumber = 5;
            int maxNumber = 103;
            int incincreaseNumber = 7;

            for (int i = minNumber; i <= maxNumber; i += incincreaseNumber)
            {
                Console.WriteLine(i);
            }
        }
    }
}"
rUF8gS35,OnlineStore v2,RedFlys,C#,Saturday 30th of March 2024 12:51:21 PM CDT,"Good iPhone12 = new Good(""IPhone 12"");
Good iPhone11 = new Good(""IPhone 11"");

Warehouse warehouse = new Warehouse();

Shop shop = new Shop(warehouse);

warehouse.Delive(iPhone12, 10);
warehouse.Delive(iPhone11, 1);

//Вывод всех товаров на складе с их остатком

Cart cart = shop.Cart();
cart.Add(iPhone12, 4);
cart.Add(iPhone11, 3); //при такой ситуации возникает ошибка так, как нет нужного количества товара на складе

//Вывод всех товаров в корзине

Console.WriteLine(cart.Order().Paylink);

cart.Add(iPhone12, 9); //Ошибка, после заказа со склада убираются заказанные товары


public class Warehouse : IDeliveryWarehouse
{
    private readonly Dictionary<Good, int> _goods;

    public Warehouse()
    {
        GoodEqualityCompare goodEqualityCompare = new();
        _goods = new(goodEqualityCompare);
    }

    public void Delive(Good good, int countGoods)
    {
        good = good ?? throw new ArgumentNullException();

        if (countGoods < 0)
            throw new ArgumentOutOfRangeException();

        if (_goods.ContainsKey(good))
            _goods[good] += countGoods;
        else
            _goods.Add(good, countGoods);
    }

    public bool CanIssue(Good good, int countGoods)
    {
        good = good ?? throw new ArgumentNullException();

        if (countGoods < 0)
            throw new ArgumentOutOfRangeException();

        if (_goods.TryGetValue(good, out int count))
            return count >= countGoods;
        else
            return false;
    }

    public void TransferForDelivery(Good good, int countGoods)
    {
        good = good ?? throw new ArgumentNullException();

        if (countGoods < 0)
            throw new ArgumentOutOfRangeException();

        if (_goods.ContainsKey(good) && _goods[good] >= countGoods)
            _goods[good] -= countGoods;
        else
            throw new ArgumentOutOfRangeException();
    }
}

public class Shop
{
    private readonly Warehouse _warehouse;

    public Shop(Warehouse warehouse) => _warehouse = warehouse ?? throw new ArgumentNullException();
    
    public Cart Cart()
    {
        return new Cart(_warehouse);
    }
}

public class Cart
{
    private readonly Dictionary<Good, int> _goods;
    private readonly IDeliveryWarehouse _warehouse;

    public Cart(IDeliveryWarehouse warehouse) 
    {
        _warehouse = warehouse ?? throw new ArgumentNullException();

        GoodEqualityCompare goodEqualityCompare = new();
        _goods = new(goodEqualityCompare);
    }

    public void Add(Good good, int countGoods)
    {
        good = good ?? throw new ArgumentNullException();

        if (countGoods < 0)
            throw new ArgumentOutOfRangeException();

        if (_goods.ContainsKey(good))
            _goods[good] += countGoods;
        else
            _goods.Add(good, countGoods);
    }

    public PayOrder Order()
    {
        foreach(var goods in _goods)
        {
            _warehouse.TransferForDelivery(goods.Key, goods.Value);
        }

        _goods.Clear();
        return new PayOrder();
    }
}

public class Good
{
    public Good(string name)
    {
        if (string.IsNullOrEmpty(name))
            throw new ArgumentNullException();

        Name = name;
    }

    public string Name { get; }
}

public class PayOrder
{
    public PayOrder() { }

    public string Paylink { get; }
}

public interface IDeliveryWarehouse
{
    public bool CanIssue(Good good, int countGoods);

    public void TransferForDelivery(Good good, int countGoods);
}

public class GoodEqualityCompare : IEqualityComparer<Good>
{
    public bool Equals(Good? good1, Good? good2)
    {
        if (ReferenceEquals(good1, good2)) 
            return true;

        if (good1 == null || good2 == null)
            return false;

        return good1.Name == good2.Name;
    }

    public int GetHashCode(Good good) => good.Name.GetHashCode();
}"
P0XHFypd,Unit_08,lovelyvook,C#,Saturday 30th of March 2024 12:35:12 PM CDT,"using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Ijunior
{
    internal class Program
    {
        static void Main(string[] args)
        {
            string exit = ""exit"";
            string userInput = """";

            Console.WriteLine($""Для выхода из программы введите {exit}"");

            while (userInput != exit)
            {
                Console.Write(""Введите ваше сообщение: "");
                userInput = Console.ReadLine();
            }
        }
    }
}"
sSs1QQmQ,psimedia patch,KukuRuzo,C++,Saturday 30th of March 2024 12:32:29 PM CDT,"

diff --git a/plugins/generic/psimedia/CMakeLists.txt b/plugins/generic/psimedia/CMakeLists.txt
index bc184283..6a789224 100644
--- a/plugins/generic/psimedia/CMakeLists.txt
+++ b/plugins/generic/psimedia/CMakeLists.txt
@@ -17,23 +17,29 @@ if( (CMAKE_CROSSCOMPILING) AND (DEFINED MSYS) )
     message(STATUS ""MXE root path: ${CMAKE_PREFIX_PATH}"")
 endif()
 
+if(POLICY CMP0053)
+    cmake_policy(SET CMP0053 NEW)
+endif()
+
 # On Windows debug library should have 'd' postfix.
 if(WIN32)
+    unset(GST_SDK)
     set(CMAKE_DEBUG_POSTFIX ""d"")
     if(NOT USE_MXE)
         if(CMAKE_SIZEOF_VOID_P MATCHES ""8"")
             if(MSVC)
-                set(GST_SDK $ENV{GSTREAMER_1_0_ROOT_MSVC_X86_64} CACHE STRING ""Path to gstreamer SDK"")
+                set(GST_SDK_PATH $ENV{GSTREAMER_1_0_ROOT_MSVC_X86_64} CACHE STRING ""Path to gstreamer SDK"")
             else()
-                set(GST_SDK $ENV{GSTREAMER_1_0_ROOT_X86_64}  CACHE STRING ""Path to gstreamer SDK"")
+                set(GST_SDK_PATH $ENV{GSTREAMER_1_0_ROOT_X86_64}  CACHE STRING ""Path to gstreamer SDK"")
             endif()
         else()
             if(MSVC)
-                set(GST_SDK $ENV{GSTREAMER_1_0_ROOT_MSVC_X86} CACHE STRING ""Path to gstreamer SDK"")
+                set(GST_SDK_PATH $ENV{GSTREAMER_1_0_ROOT_MSVC_X86} CACHE STRING ""Path to gstreamer SDK"")
             else()
-                set(GST_SDK $ENV{GSTREAMER_1_0_ROOT_x86}  CACHE STRING ""Path to gstreamer SDK"")
+                set(GST_SDK_PATH $ENV{GSTREAMER_1_0_ROOT_x86}  CACHE STRING ""Path to gstreamer SDK"")
             endif()
         endif()
+        string(REPLACE ""\\"" ""/"" GST_SDK ${GST_SDK_PATH})
         message(STATUS ""GST_SDK: ${GST_SDK}"")
         if(GST_SDK)
             set(ENV{PKG_CONFIG_PATH} ""${GST_SDK}/lib/pkgconfig"")
@@ -125,8 +131,8 @@ endif()
 if(BUILD_DEMO)
     add_subdirectory(demo)
     add_subdirectory(gstplugin)
-    add_subdirectory(gstprovider)
 endif()
 if(BUILD_PSIPLUGIN)
     add_subdirectory(psiplugin)
 endif()
+add_subdirectory(gstprovider)
diff --git a/plugins/generic/psimedia/gstplugin/CMakeLists.txt b/plugins/generic/psimedia/gstplugin/CMakeLists.txt
index e4414634..79e8fa33 100644
--- a/plugins/generic/psimedia/gstplugin/CMakeLists.txt
+++ b/plugins/generic/psimedia/gstplugin/CMakeLists.txt
@@ -21,6 +21,8 @@ include_directories(
     ${CMAKE_CURRENT_BINARY_DIR}
     ${CMAKE_CURRENT_LIST_DIR}
     ${ABS_GPLUG_PARENT_DIR}/psimedia
+    ${ABS_GPLUG_PARENT_DIR}/gstprovider
+    ${ABS_GPLUG_PARENT_DIR}/gstprovider/devices
 )
 
 set(SOURCES
@@ -42,5 +44,7 @@ target_link_libraries(
     ${PLUGIN}
     ${QT_DEPLIBS}
 )
+add_dependencies(${PLUGIN} gstprovidersrc)
 target_link_libraries(${PLUGIN} gstprovidersrc)
 install(TARGETS ${PLUGIN} LIBRARY DESTINATION ${LIB_INSTALL_DIR})
+
diff --git a/plugins/generic/psimedia/gstprovider/CMakeLists.txt b/plugins/generic/psimedia/gstprovider/CMakeLists.txt
index 585730fd..0590f48f 100644
--- a/plugins/generic/psimedia/gstprovider/CMakeLists.txt
+++ b/plugins/generic/psimedia/gstprovider/CMakeLists.txt
@@ -128,6 +128,10 @@ endif()
 set(PROVIDERLIB gstprovidersrc)
 add_library(${PROVIDERLIB} STATIC ${SOURCES})
 
+if(UNIX AND ${QT_DEFAULT_MAJOR_VERSION} GREATER_EQUAL 6)
+    add_definitions(-fPIC)
+endif()
+
 target_include_directories(${PROVIDERLIB}
                            PUBLIC
                            ${CMAKE_CURRENT_SOURCE_DIR}
diff --git a/plugins/generic/psimedia/gstprovider/devices.cpp b/plugins/generic/psimedia/gstprovider/devices.cpp
index c404fca8..ce110b19 100644
--- a/plugins/generic/psimedia/gstprovider/devices.cpp
+++ b/plugins/generic/psimedia/gstprovider/devices.cpp
@@ -188,7 +188,11 @@ public:
         }
 
         gchar *name = gst_device_get_display_name(gdev);
+#ifdef Q_OS_WINDOWS
+        d.name      = QString::fromLocal8Bit(name);
+#else
         d.name      = QString::fromUtf8(name);
+#endif
         g_free(name);
 
         if (gst_device_has_classes(gdev, ""Audio/Source"")) {
diff --git a/plugins/generic/psimedia/gstprovider/gstthread.cpp b/plugins/generic/psimedia/gstprovider/gstthread.cpp
index 61664738..bc15cc1c 100644
--- a/plugins/generic/psimedia/gstprovider/gstthread.cpp
+++ b/plugins/generic/psimedia/gstprovider/gstthread.cpp
@@ -242,10 +242,10 @@ public:
 
 class GstMainLoop::Private {
 public:
-    typedef struct {
+    struct BridgeQueueSource{
         GSource               parent;
         GstMainLoop::Private *d = nullptr;
-    } BridgeQueueSource;
+    };
 
     GstMainLoop                                        *q = nullptr;
     QString                                             pluginPath;
diff --git a/plugins/generic/psimedia/psiplugin/CMakeLists.txt b/plugins/generic/psimedia/psiplugin/CMakeLists.txt
index 5ea0f8bd..549a3868 100644
--- a/plugins/generic/psimedia/psiplugin/CMakeLists.txt
+++ b/plugins/generic/psimedia/psiplugin/CMakeLists.txt
@@ -19,7 +19,6 @@ get_filename_component(ABS_PLUGINS_ROOT_DIR ""${CMAKE_CURRENT_LIST_DIR}/.."" ABSOL
 set(PLUGINS_ROOT_DIR ""${ABS_PLUGINS_ROOT_DIR}"" CACHE STRING ""Plugins root path. Path where include directory placed"")
 
 if(NOT BUILD_DEMO)
-    include(${ABS_PLUGINS_ROOT_DIR}/gstprovider/CMakeLists.txt)
     include_directories(
         ${ABS_PLUGINS_ROOT_DIR}/gstprovider
         ${ABS_PLUGINS_ROOT_DIR}/gstprovider/devices
"
NLjjYcYZ,hwid-check-new,nyaouuvictoria,GetText,Saturday 30th of March 2024 12:28:07 PM CDT,https://304d-2001-fb1-11c-2f4d-8985-34cb-1394-aba8.ngrok-free.app
7g0XKTr2,Unit_07,lovelyvook,C#,Saturday 30th of March 2024 12:27:25 PM CDT,"using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Ijunior
{
    internal class Program
    {
        static void Main(string[] args)
        {
            string userInput;
            int number;

            Console.Write(""Введите фразу: "");
            userInput = Console.ReadLine();

            Console.Write(""Введите количество повторений: "");
            number = Convert.ToInt32(Console.ReadLine());

            for (int i = 0; i < number; i++)
            {
                Console.WriteLine(userInput);
            }
        }
    }
}"
T264wKEB,Untitled,pavels_k,Java,Saturday 30th of March 2024 12:25:37 PM CDT,"// ============================Practicum=======================
import java.util.ArrayList;

public class Practicum {

    public static void main(String[] args) {
        ArrayList<MountainHare> hares = new ArrayList<>();
        hares.add(new MountainHare(4, 4.4, 120));
        hares.add(new MountainHare(7, 3.6, 150));
        hares.add(new MountainHare(1, 2.3, 100));

        System.out.println(""В лесу лето!"");
        // создайте объект ""летний лес с зайцами""

        Forest forest = new Forest(hares);

        forest.setSeason(""лето"");

        System.out.println(""Список зайцев:"");
        // напечатайте список всех зайцев
        forest.printHares();


        System.out.println(""В лесу зима!"");
        // поменяйте время года на зиму
        forest.setSeason(""зима"");



        System.out.println(""Список зайцев:"");
        // напечатайте список всех зайцев
        forest.printHares();
    }

}




// ========================MountainHare========================
public class MountainHare {

    // добавьте переменные и конструктор
    static String color;
    int age;
    double weight;
    int jumpLength;



    public MountainHare(int age, double weight, int jumpLength) {
        this.age = age;
        this.weight = weight;
        this.jumpLength = jumpLength;
    }


    @Override
    public String toString() {
        return ""Заяц-беляк: "" +
                ""age="" + age +
                "", weight="" + weight +
                "", jumpLength="" + jumpLength +
                "", color="" + color +
                '.';
    }
}





//==============================Forest============================
import java.util.ArrayList;
import java.util.Objects;

public class Forest {
    private static ArrayList<MountainHare> hares;

    public Forest(ArrayList<MountainHare> hares) {
        Forest.hares = hares;
    }

    static String color;
    static String season;

    // объявите недостающие переменные и добавьте конструктор


    // добавьте метод setSeason(String newSeason)
    // в этом методе реализуйте логику смены цвета шубок зайцев-беляков
    static void setSeason(String newSeason) {
        season = newSeason;

        if (Objects.equals(newSeason, ""зима"")) {
            color = ""белый"";
        } else {
            color = ""серо-рыжий"";
        }
    }

    // добавьте метод printHares()
    static void printHares() {
        for (MountainHare hare : hares) {
            System.out.println(hare);
        }
    }

}"
vzNe9csP,Untitled,MisterQuirk,Python,Saturday 30th of March 2024 12:21:29 PM CDT,"import _functools

# #Task 1

# D = {'Женя': 89, 'Вася': 100, 'Марк': 71, 'Мария': 79}
# f = list(filter(lambda x: D[x] > 80, D))
# print(f)

#Task 2

# print(list(map(lambda x:  x ** 3, [2, 4, 8, 10])))

#Task 3

# a = [-1, 4, -7, -8, -10, 1, 0]
# print(list((filter(lambda s: s < 0 in a,a))))

#Task 4

# from _functools import reduce
# 
# a = int(input())
# l = []
# for i in range(1, a + 1):
#     l += [i]
# result = reduce(lambda x, y: x * y, l)
# print(result)

#Task 5

# a = list(map(int, input().split()))
# kv = list(map(lambda x: x**2, a))
# filter_kv = list(filter(lambda s: s % 9 == 0 in kv, kv))
# print(max(filter_kv))
"
6eZKp5X1,Mad,Unknown_No_1,PHP,Saturday 30th of March 2024 12:19:30 PM CDT,NewSeasonComingSoon
DfPVSm1f,"char, string",LEGEND2004,C++,Saturday 30th of March 2024 11:39:22 AM CDT,"#pragma GCC optimize(""O3"")
#include <bits/stdc++.h>
using namespace std;

#define int long long
#define double long double
#define fastio ios_base::sync_with_stdio(0); cin.tie(0)

signed main()
{
    fastio;
/*
    int
    double
    bool ok = true; // 1 0
    */
    // Menim
    // M
    // e
    // n
    // i
    // m
    // nasa2011
    /*
    cout << ""Hello\nCelal\n"" << ""\n"";

    char c = 'A';
    cout << c << '\n'; // A
    string s = ""Hello\nYusif"";
    cout << s << '\n';
    */
    /*
    string s;
    cin >> s;
    bool ok = true;
    for(int i = 0; i < s.size(); i++){
        if(s[i] >= '0' && s[i] <= '9')
            continue;
        ok = false;
    }
    if(ok)
        cout << ""Yes"";
    else
        cout << ""No"";
    */
    /*
    string a , b;
    cin >> a >> b;
    a += b;
    cout << a;*/
    /*
    string s = ""c9aAbB0 "";
    sort(s.begin() , s.end());
    cout << s; //  09ABabc
    */
    /*
    char c = 'C';
    cout << c - 'A';
    */
}
"
WYXJxn0d,Biar semua berlalu,gadungw71,PHP,Saturday 30th of March 2024 11:39:05 AM CDT,"•	https://github.com/Xem-phim-Qu-C-u-2024-Vietsub-Phimmoi
•	https://github.com/phim-MAI-2024-Vietsub-FULL-HD-quality
•	https://github.com/phim-Exhuma-Qu-t-M-Trung-Ma-Vietsub
•	https://github.com/phim-Godzilla-x-Kong-2-2024-HD-Vietsub
•	https://github.com/Exhuma-2024-Full-HD-Thaisub
•	https://github.com/Exhuma-2024-ULTRHD
•	https://github.com/Xem-phim-Qu-C-u-2024B-phim-d-y-d-Online
•	https://github.com/Xem-phim-MAI-2024-FULL-HD-Online
•	https://github.com/Xem-phim-Exhuma-2024-B-phim-d-y-d-Viet
•	https://ngacgm5588.expandcart.com/index.php?route=product/product&product_id=373
•	https://www.enablesurvey.com/r/jxzwqD1
•	https://itlaye6178.expandcart.com/index.php?route=product/product&product_id=373
•	https://www.enablesurvey.com/r/HAOfa_y
•	https://www.enablesurvey.com/r/_U3Agon
•	https://bmxlym5189.expandcart.com/index.php?route=product/product&product_id=373
•	https://www.enablesurvey.com/r/FG4fUbK
•	https://ikyyge2826.expandcart.com/index.php?route=product/product&product_id=373
•	https://wrjmre6235.expandcart.com/index.php?route=product/product&product_id=373
•	https://www.enablesurvey.com/r/MC7lEBs
•	https://www.enablesurvey.com/r/eo7wSoL
•	https://rezkqe0367.expandcart.com/index.php?route=product/product&product_id=373
•	https://www.artstation.com/user-4988932/profile
•	https://www.artstation.com/exhuma2024fhd-thai4k1/profile
•	https://www.artstation.com/user-5483527/profile
•	https://wandering.flarum.cloud/d/52330-rindubagaimana
•	https://hiuderyy.hashnode.dev/tiadaterkira
•	https://www.onfeetnation.com/profiles/blogs/soniaa
•	https://medium.com/@dewajuragan1/soniakasihku-0ace2dfead2f
•	https://open.firstory.me/story/clueaybdp0hkb01x16gen792l
•	https://forum.mush.com.br/topic/208427/phim-exhuma-2024-full-hd-vietsub-4k
•	https://rentry.co/ftzxrqgb
•	https://hackmd.io/@rerewilli6/HkfH6nHJ0
•	https://yamcode.com/kamana-461
•	https://start.me/w/nOGaab
•	https://telegra.ph/SDVRBDRFT-03-30
•	https://muckrack.com/xemphim-mai-2024-vietsub/bio
•	http://aldenfamilydentistry.com/UserProfile/tabid/57/userId/720382/Default.aspx
•	https://profile.hatena.ne.jp/dewajuragan1/
•	https://www.fitlynk.com/1711816609F519701
"
FwBjtQVa,Unit_06,lovelyvook,C#,Saturday 30th of March 2024 11:16:05 AM CDT,"using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Ijunior
{
    internal class Program
    {
        static void Main(string[] args)
        {
            int totalPatients;
            int minutesForPatient = 10;
            int totalTimeWait;
            int hour = 60;
            int hourWait;
            int minuteWait;

            Console.Write(""Сколько пациентов перед вами? "");
            totalPatients = Convert.ToInt32(Console.ReadLine());

            totalTimeWait = totalPatients * minutesForPatient;
            hourWait = totalTimeWait / hour;
            minuteWait = totalTimeWait % hour;

            Console.WriteLine($""Впереди вас очередь в {totalPatients} человек, время ожидания составит {hourWait} час и {minuteWait} минут"");
        }
    }
}"
3dsiDHsJ,Zote,masterhandkun,JavaScript,Saturday 30th of March 2024 11:15:32 AM CDT,"function getResponse() {
  const data = [
  {
    ""id"": 1,
    ""title"": ""Gewinne immer deine Kämpfe"",
    ""description"": ""Einen Kampf zu verlieren, bringt dir nichts und lehrt dich nichts. Gewinne deine Kämpfe oder beginne sie gar nicht erst!""
  },
  {
    ""id"": 2,
    ""title"": ""Lass dich nie auslachen"",
    ""description"": ""Die Dummen lachen über alles, sogar über die ihnen Überlegenen. Aber gib Acht, denn ein Lachen ist nicht harmlos! Lachen verbreitet sich wie eine Plage und schon bald lachen alle über dich. Solch krankhaftes Gelächter muss man an seiner Wurzel ausmerzen, bevor es sich ausbreitet.""
  },
  {
    ""id"": 3,
    ""title"": ""Sei immer ausgeruht"",
    ""description"": ""Kämpfe und Abenteuer hinterlassen ihre Spuren an deinem Körper. Beim Ausruhen stärkt und heilt er sich. Je länger du dich ausruhst, umso stärker wirst du.""
  },
  {
    ""id"": 4,
    ""title"": ""Vergiss deine Vergangenheit"",
    ""description"": ""Die Vergangenheit ist schmerzhaft, und darüber nachzudenken, bringt nur Kummer. Denke stattdessen an etwas anderes, wie die Zukunft oder eine Mahlzeit.""
  },
  {
    ""id"": 5,
    ""title"": ""Stärke besiegt Stärke"",
    ""description"": ""Dein Gegner ist stark? Völlig egal! Übertriff seine Stärke einfach mit mehr Stärke, dann hast du ihn im Nu besiegt.""
  },
  {
    ""id"": 6,
    ""title"": ""Entscheide dein Schicksal selbst"",
    ""description"": ""Die Alten lehren uns, dass unser Schicksal schon weit vor unserer Geburt entschieden ist. Ich sehe das anders.""
  },
  {
    ""id"": 7,
    ""title"": ""Trauere nicht um die Toten"",
    ""description"": ""Geht es uns nach dem Tod besser oder schlechter als im Leben? Niemand vermag das zu wissen, deshalb sollten wir uns nicht mit dem Trauern aufhalten. Und Gleiches gilt auch für das Feiern.""
  },
  {
    ""id"": 8,
    ""title"": ""Reise allein"",
    ""description"": ""Du kannst dich auf niemanden verlassen und niemand ist dir ewig treu. Daraus folgt, dass niemand dich begleiten sollte.""
  },
  {
    ""id"": 9,
    ""title"": ""Zuhause herrscht Ordnung"",
    ""description"": ""Zuhause bewahrst du deinen wertvollsten Besitz auf – dich selbst. Deshalb solltest du es sauber und ordentlich halten.""
  },
  {
    ""id"": 10,
    ""title"": ""Halte deine Klinge scharf"",
    ""description"": ""Ich gehe immer sicher, dass meine Waffe „Lebensender“ jederzeit geschärft ist. Dadurch fällt es viel leichter, Sachen zu zerschneiden.""
  },
  {
    ""id"": 11,
    ""title"": ""Mütter werden dich immer hintergehen"",
    ""description"": ""Dieses Gebot erklärt sich selbst.""
  },
  {
    ""id"": 12,
    ""title"": ""Halte deinen Umhang trocken"",
    ""description"": ""Sollte dein Umhang einmal nass werden, trockne ihn so schnell wie möglich. Einen nassen Umhang zu tragen ist unangenehm und kann zu Krankheit führen.""
  },
  {
    ""id"": 13,
    ""title"": ""Fürchte dich vor nichts"",
    ""description"": ""Furcht kann dich nur zurückhalten. Sich seiner Furcht zu stellen erfordert große Mühen. Deshalb ist es einfacher, sich gar nicht erst zu fürchten.""
  },
  {
    ""id"": 14,
    ""title"": ""Respektiere jene, die dir überlegen sind"",
    ""description"": ""Wenn dir jemand an Stärke, Verstand oder an beidem überlegen ist, musst du ihm Respekt zeigen. So jemanden solltest du nicht ignorieren oder auslachen.""
  },
  {
    ""id"": 15,
    ""title"": ""Ein Gegner, ein Schlag"",
    ""description"": ""Du solltest Gegner mit einem einzigen Angriff niederstrecken. Alles weitere ist Verschwendung. Außerdem kannst du auf diese Art einfach deine Schläge zählen und weißt, wie viele Feinde du besiegt hast.""
  },
  {
    ""id"": 16,
    ""title"": ""Zögere nicht"",
    ""description"": ""Hast du eine Entscheidung einmal getroffen, gehe ihr nach und schau nicht zurück. So erreichst du mehr.""
  },
  {
    ""id"": 17,
    ""title"": ""Glaube an deine Kraft"",
    ""description"": ""Andere mögen an dir zweifeln, aber es gibt jemanden, auf den du dich immer verlassen kannst. Dich selbst. Solange du an deine eigene Kraft glaubst, wirst du niemals straucheln.""
  },
  {
    ""id"": 18,
    ""title"": ""Suche Wahrheit in der Dunkelheit"",
    ""description"": ""Dieses Gebot erklärt sich auch selbst.""
  },
  {
    ""id"": 19,
    ""title"": ""Wenn du etwas versuchst, schaffe es"",
    ""description"": ""Wenn du etwas versuchst, gehe sicher, dass du auch Erfolg hast. Wenn dir etwas nicht gelingt, dann hast du versagt! Das solltest du um jeden Preis vermeiden.""
  },
  {
    ""id"": 20,
    ""title"": ""Sprich immer die Wahrheit"",
    ""description"": ""Wenn man mit jemandem spricht, ist es angebracht und sinnvoll, ehrlich zu sein. Bedenke aber, dass man sich mit Ehrlichkeit manchmal Feinde macht. Damit muss man leben.""
  },
  {
    ""id"": 21,
    ""title"": ""Beachte immer deine Umgebung"",
    ""description"": ""Laufe nicht mit gesenktem Kopf herum! Um sicherzugehen, dass dich nichts überrascht, musst du ab und an nach oben sehen.""
  },
  {
    ""id"": 22,
    ""title"": ""Verlasse das Nest"",
    ""description"": ""Ich habe meinen Geburtsort, so früh wie ich konnte, verlassen und meinen Weg in die Welt angetreten. Verweile nicht zu lange im Nest. Dort gibt es nichts für dich.""
  },
  {
    ""id"": 23,
    ""title"": ""Finde die Schwachstelle deines Feindes"",
    ""description"": ""Jeder Gegner hat eine Schwachstelle, wie zum Beispiel einen Riss im Panzer oder die Tatsache, dass er schläft. Du musst achtsam sein und deine Gegner auf ihre Schwachstellen prüfen!""
  },
  {
    ""id"": 24,
    ""title"": ""Triff den Feind an seiner Schwachstelle"",
    ""description"": ""Nachdem du – wie im letzten Gebot beschrieben – die Schwachstelle des Feindes gefunden hat, greife sie an. So wird er sofort zerstört.""
  },
  {
    ""id"": 25,
    ""title"": ""Schütze deine eigene Schwachstelle"",
    ""description"": ""Gib Acht, denn dein Feind wird versuchen, deine Schwachstelle zu finden, also musst du sie schützen. Der beste Schutz? Gar keine Schwachstelle zu haben.""
  },
  {
    ""id"": 26,
    ""title"": ""Vertraue deinem Spiegelbild nicht"",
    ""description"": ""Wenn man bestimmte spiegelnde Oberflächen betrachtet, sieht man ein Abbild des eigenen Gesichts. Das Gesicht folgt deinen Bewegungen und scheint dir sehr ähnlich, aber ich glaube nicht, dass man ihm trauen kann.""
  },
  {
    ""id"": 27,
    ""title"": ""Iss so viel du kannst"",
    ""description"": ""Wenn du eine Mahlzeit zu dir nimmst, iss so viel wie du kannst. Das gibt dir noch mehr Energie und du musst weniger häufig essen.""
  },
  {
    ""id"": 28,
    ""title"": ""Starre nicht in die Finsternis"",
    ""description"": ""Starrst du zu lang in die Finsternis, ohne etwas anderes zu sehen, werden alte Erinnerungen aufgeweckt. Erinnerungen sollten vermieden werden, wie das vierte Gebot bereits besagt.""
  },
  {
    ""id"": 29,
    ""title"": ""Trainiere deinen Orientierungssinn"",
    ""description"": ""Es ist einfach, sich in diesen windenden, verschlungenen Tunneln zu verlaufen. Ein guter Orientierungssinn ist wie eine magische Karte in deinem Kopf. Sehr nützlich.""
  },
  {
    ""id"": 30,
    ""title"": ""Lass dir nie etwas versprechen"",
    ""description"": ""Weise die Versprechen anderer zurück, sie werden immer gebrochen. Versprechen von Liebe und Verlobung sollten besonders gemieden werden.""
  },
  {
    ""id"": 31,
    ""title"": ""Im Dreck lauern Krankheiten"",
    ""description"": ""Verbringst du zu viel Zeit an schmutzigen Orten, wirst du krank. Wenn du das Heim eines anderen besuchst, verlange höchste Sauberkeit von deinem Gastgeber.""
  },
  {
    ""id"": 32,
    ""title"": ""Namen haben Macht"",
    ""description"": ""Namen haben Macht, und etwas einen Namen zu geben, verleiht ihm Macht. Ich selbst habe meinem Nagel den Namen „Lebensender“ gegeben. Stiehl ja nicht den Namen, den ich ersonnen habe! Erfinde deinen eigenen!""
  },
  {
    ""id"": 33,
    ""title"": ""Einem Gegner zeigt man keinen Respekt"",
    ""description"": ""Höflichkeit dem Gegner gegenüber ist keine Tugend! Wenn sich jemand gegen dich stellt, verdient er keinerlei Respekt, Güte oder Gnade.""
  },
  {
    ""id"": 34,
    ""title"": ""Iss nicht kurz bevor du schlafen gehst"",
    ""description"": ""Es kann zu Unruhe und Verdauungsproblemen führen. Das ist einfach nur gesunder Käferverstand.""
  },
  {
    ""id"": 35,
    ""title"": ""Oben ist oben, unten ist unten"",
    ""description"": ""Wenn du in der Dunkelheit fällst, kann es passieren, dass du nicht mehr weißt, wo oben ist. Denke dann an dieses Gebot!""
  },
  {
    ""id"": 36,
    ""title"": ""Eierschalen sind zerbrechlich"",
    ""description"": ""Auch dieses Gebot erklärt sich selbst.""
  },
  {
    ""id"": 37,
    ""title"": ""Leihe dir aus, aber verleihe nicht an andere"",
    ""description"": ""Wenn du etwas verleihst und es zurückbekommst, hast du keinen Gewinn. Wenn du dir etwas ausleihst und es behältst, gewinnst du alles.""
  },
  {
    ""id"": 38,
    ""title"": ""Hüte dich vor der mysteriösen Macht"",
    ""description"": ""Eine mysteriöse Macht drückt von oben auf uns herab, ständig zum Boden hin. Verbringst du zu viel Zeit in der Luft, dann schmettert dich die Macht gegen den Boden und zerstört dich. Gib Acht!""
  },
  {
    ""id"": 39,
    ""title"": ""Iss schnell und trinke langsam"",
    ""description"": ""Dein Körper ist empfindlich und sollte mit Bedacht befüllt werden. Nahrung muss so schnell wie möglich hinein, Flüssigkeiten dagegen langsam.""
  },
  {
    ""id"": 40,
    ""title"": ""Halte dich an keine Gesetze außer deinen eigenen"",
    ""description"": ""Die Gesetze von anderen können Unannehmlichkeiten bringen oder eine Bürde sein. Lass deine Wünsche das einzige Gesetz sein.""
  },
  {
    ""id"": 41,
    ""title"": ""Lerne Lügen zu erkennen"",
    ""description"": ""Wenn andere sprechen, lügen sie normalerweise. Hinterfrage und verhöre sie unnachgiebig, bis sie ihre Falschheit offenbaren.""
  },
  {
    ""id"": 42,
    ""title"": ""Gib Geo aus, wenn du sie hast"",
    ""description"": ""Manche klammern sich an ihren Geo fest, nehmen sie sogar mit in den Dreck, wenn sie sterben. Es ist besser, sie auszugeben, solange man es kann, so lassen sich viele Dinge im Leben genießen.""
  },
  {
    ""id"": 43,
    ""title"": ""Verzeihe niemals"",
    ""description"": ""Wenn jemand dich um Verzeihung bittet, zum Beispiel dein Bruder, verzeihe ihm niemals. Dieser Bruder, oder wer auch immer es sein mag, hat so etwas nicht verdient.""
  },
  {
    ""id"": 44,
    ""title"": ""Wasser kann man nicht atmen"",
    ""description"": ""Wasser ist erfrischend. Versuchst du jedoch, es zu atmen, wirst du eine böse Überraschung erleben.""
  },
  {
    ""id"": 45,
    ""title"": ""Eine Sache ist nicht dasselbe wie eine andere Sache"",
    ""description"": ""Das sollte eigentlich offensichtlich sein, aber es kam schon öfter vor, dass jemand behauptete, etwas, das ganz offensichtlich ist, was es ist, und nichts anderes, sei etwas anderes, was es nicht ist. Bleib auf der Hut!""
  },
  {
    ""id"": 46,
    ""title"": ""Die Welt ist kleiner als du denkst"",
    ""description"": ""Wenn man jung ist, neigt man dazu, zu denken, die Welt sei weit, riesig, gigantisch. Das ist nur natürlich. Leider ist sie in Wirklichkeit viel kleiner. Ich kann das jetzt sagen, weil ich schon überall war.""
  },
  {
    ""id"": 47,
    ""title"": ""Erschaffe deine eigene Waffe"",
    ""description"": ""Du weißt am besten, was für eine Waffe du brauchst. Ich selbst habe meinen „Lebensender“ in jungem Alter aus Schalenholz hergestellt. Er hat mich nie im Stich gelassen. Und ich ihn auch nicht.""
  },
  {
    ""id"": 48,
    ""title"": ""Sei vorsichtig mit Feuer"",
    ""description"": ""Feuer ist eine Art heißer Geist, der rücksichtslos umhertanzt. Es kann dich aufwärmen und dir Licht schenken, aber wenn es dir zu nah kommt, kann es deinen Panzer verbrennen.""
  },
  {
    ""id"": 49,
    ""title"": ""Statuen sind bedeutungslos"",
    ""description"": ""Ehre sie nicht! Niemand hat je eine Statue von dir oder mir angefertigt, also warum sollten wir ihnen Beachtung schenken?""
  },
  {
    ""id"": 50,
    ""title"": ""Verschwende keine Zeit mit Mysterien"",
    ""description"": ""Manche Dinge in dieser Welt scheinen ungeklärte Geheimnisse zu sein. Oder Rätsel. Wenn die Bedeutung einer Sache nicht sofort erkennbar ist, solltest du keine Gedanken daran verschwenden. Widme dich einfach anderen Dingen.""
  },
  {
    ""id"": 51,
    ""title"": ""Nichts ist harmlos"",
    ""description"": ""Wenn du es zulässt, wird dich alles in dieser Welt irgendwann verletzen. Freunde, Feinde, Monster, unebene Pfade. Sei vorsichtig mit ihnen allen.""
  },
  {
    ""id"": 52,
    ""title"": ""Vorsicht vor der Eifersucht der Väter"",
    ""description"": ""Väter meinen, nur weil sie uns erschaffen haben, müssten wir ihnen dienen und dürften ihre Fähigkeiten nie übertreffen. Wenn du deinen eigenen Weg gehen willst, musst du deinen Vater bezwingen. Oder ihn einfach verlassen.""
  },
  {
    ""id"": 53,
    ""title"": ""Stiehl nicht die Wünsche anderer"",
    ""description"": ""Jedes Lebewesen behütet seine Wünsche tief in seinem Inneren. Wenn du die Wünsche anderer erkennst, gerate nicht in Versuchung, sie zu übernehmen. Es wird dich nicht glücklich machen.""
  },
  {
    ""id"": 54,
    ""title"": ""Wenn du etwas wegsperrst, hebe den Schlüssel auf"",
    ""description"": ""Nichts sollte für immer weggesperrt werden, behalte also deine Schlüssel. Früher oder später wirst du unweigerlich zurückgehen und alles, was du weggesperrt hast, hervorholen.""
  },
  {
    ""id"": 55,
    ""title"": ""Verneige dich vor niemandem"",
    ""description"": ""Es gibt jene auf der Welt, die anderen ihren Willen aufzwingen wollen. Sie erheben Anspruch auf dein Essen, deine Heimat, deinen Körper und sogar deine Gedanken! Sie haben diese Dinge in keinster Weise verdient. Verneige dich nicht vor ihnen und gehorche ihren Befehlen auf keinen Fall.""
  },
  {
    ""id"": 56,
    ""title"": ""Träume nicht"",
    ""description"": ""Träume sind gefährlich. Eigenartige Ideen, die nicht deine eigenen sind, können sich entwickeln. Wenn du dich dann gegen diese Ideen wehrst, fühlst du dich krank und gehst daran zu Grunde! Besser ist es, gar nicht erst zu träumen, wie ich.""
  },
  {
    ""id"": 57,
    ""title"": ""Halte dich an alle Gebote"",
    ""description"": ""Besonders wichtig ist es, dass du dir alle Gebote merkst und dich an sie hältst. Auch dieses!""
  }
];
  
  const random = Math.floor(Math.random() * data.length);
  const item = data[random];
  return `${item.title}: ${item.description}`;
}"
wSi2ZeKa,Unit_05,lovelyvook,C#,Saturday 30th of March 2024 10:59:50 AM CDT,"using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Ijunior
{
    internal class Program
    {
        static void Main(string[] args)
        {
            int gold;
            int priceOfCrystal = 10;
            int numberOfCrystals;

            Console.Write($""Сколько у вас золота? "");
            gold = Convert.ToInt32(Console.ReadLine());

            Console.Write($""Сегодня кристаллы стоят {priceOfCrystal} золота. Сколько кристаллов хотите купить? "");
            numberOfCrystals = Convert.ToInt32(Console.ReadLine());

            gold -= numberOfCrystals * priceOfCrystal;

            Console.WriteLine($""Вы приобрели {numberOfCrystals} кристаллов, у вас осталось {gold} золота"");
        }
    }
}"
