id,title,username,language,date,content
NwWXDiRL,G2A.com Free Gift Card Guide Mar 2024 FIX,HastyBasher0,GetText,Saturday 23rd of March 2024 12:51:55 AM CDT,"G2A.com free gift card & games updated guide.
Any item for free on G2A.com including Amazon, Steam, Xbox, Playstation gift cards & everything else offered.

IMPORTANT: If you use this make sure to use the English version of G2A.com otherwise this will not work!

You can buy gift cards directly with it or you can buy popular games then put them on fresh steam accounts and then sell those accounts.
 
PDF guide here:
https://smallpdf.com/file#s=cea149fd-ead1-4939-94cf-d10a8ce7936a
 
Working as of:
23 March 2024















































"
2dSB7mw5,Untitled,35657,C++,Saturday 23rd of March 2024 12:49:34 AM CDT,"
#include <iostream>

using namespace std;


void print(int n) {
    if (n == 0) {
        return;
    }
    cout << '*';
    print(n - 1);
}


int main() {
    setlocale(LC_ALL, ""ru"");

    print(8);
    
}
"
Dbe7aEAX,Untitled,35657,C++,Saturday 23rd of March 2024 12:29:57 AM CDT,"
#include <iostream>

using namespace std;


void degree(double n) {
    if (n == 1) {
        cout << ""YES"" << endl;
    }
    else if (n < 2) {
        cout << ""NO"" << endl;
    }
    else {
        return degree(n / 2);
    }
}


int main() {
    setlocale(LC_ALL, ""ru"");

    degree(32);

    degree(35);
    
}
"
0t7vPGNg,ü§ë G2A.com Free Gift Card Guide Mar 2024 FIX ü§ë,ounnuo,GetText,Saturday 23rd of March 2024 12:23:38 AM CDT,"G2A.com free gift card & games updated guide.
Any item for free on G2A.com including Amazon, Steam, Xbox, Playstation gift cards & everything else offered.

If you use this make sure to use the English version of G2A.com otherwise this will not work!
 
PDF guide here:
https://drive.google.com/file/d/1thJ3r_goEZ3BA-wE8sNYbGUhGv6gTnXz/view?usp=g2a_refund_exploit_880887.pdf

Working as of:
23 March 2024


















"
9Y8rC5jJ,Exercicios,Smokahontas,C++,Saturday 23rd of March 2024 12:22:07 AM CDT,"#include <stdio.h>

void diasemana() {
    int diasdasemana;

    printf(""Selecione o dia da semana de 1 a 7: "");
    scanf(""%d"", &diasdasemana);

    switch (diasdasemana) {
    case 1:
        printf(""Domingo\n"");
        break;
    case 2:
        printf(""Segunda-feira\n"");
        break;
    case 3:
        printf(""Ter√ßa-feira\n"");
        break;
    case 4:
        printf(""Quarta-feira\n"");
        break;
    case 5:
        printf(""Quinta-feira\n"");
        break;
    case 6:
        printf(""Sexta-feira\n"");
        break;
    case 7:
        printf(""S√°bado\n"");
        break;
    default:
        printf(""Dia da semana invalido\n"");
        break;
    }
}

void imprimirde1a7() {
    int numero = 1;


    while (numero <= 7) {
        printf(""%d\n"", numero);
        numero++;
    }
}

void alturabrinquedo() {

    float altura;

    
    printf(""Digite sua altura: "");
    scanf(""%f"", &altura);

    
    if (altura < 1.60) {
        printf(""Voc√™ n√£o pode ir nesse brinquedo.\n"");
    }
    else if (altura >= 1.60) {
        printf(""Entrada liberada.\n"");
    }
    
}

void paresde1a20() {

    int num = 1;

    while (num <= 20) {
        if (num % 2 == 0) {
            printf(""%d \n"", num);
        }
        num++;
    }
}

void imparde1a20(){
    
    int num = 1;

    while (num <= 20) {
        if (num % 2 != 0) {
            printf(""%d \n"", num);
        }
        num++;
    }

}


int main()
{
    diasemana();
    imprimirde1a7();
    alturabrinquedo();
    paresde1a20();
    imparde1a20();
}"
wKKDZyeS,MySQL Time Difference Duity in And Duty Out Query,Virajsinh,MySQL,Saturday 23rd of March 2024 12:13:07 AM CDT,"SELECT *, SEC_TO_TIME(SUM(TIME_TO_SEC(TIMEDIFF(duty_out, duty_in)))) AS time_difference FROM `timesheet` GROUP BY employee_id, date;"
PdRFrHsC,Dovedale Proof (ServerController),DogeplayzYT,Lua,Saturday 23rd of March 2024 12:09:56 AM CDT,"-- controller -- 
local Seat = script.Parent
local Train = script.Parent.Parent.Parent
local isScript = false

Seat.Changed:Connect(function()
	if Seat.Occupant ~= nil then
		local player = game.Players:GetPlayerFromCharacter(Seat.Occupant.Parent)
		if player then
			if isScript == false then
				controlscript = script.LocalControl:Clone()
				controlscript.Parent = player.PlayerGui
				controlscript.Enabled = true
				controlscript.Train.Value = Train
				isScript = true
			end
		end
	else
		controlscript:Destroy()
		isScript = false
	end
end)"
LtPq6Rkb,Dovedale Proof (Local Controller),DogeplayzYT,Lua,Friday 22nd of March 2024 11:58:42 PM CDT,"-- local Controller script, Gui --
local Keybinds = game:GetService(""ReplicatedStorage"").Events.Keybinds
local UIS = game:GetService(""UserInputService"")
local RunService = game:GetService(""RunService"")

local KeayMappings = { 
	[Enum.KeyCode.Q] = ""Q"",  -- Put any key bind here, and put a comma after each one
	[Enum.KeyCode.E] = ""E"", -- just copy and paste a line and edit the keybind
	[Enum.KeyCode.G] = ""G"",
	[Enum.KeyCode.H] = ""h"",
	[Enum.KeyCode.L] = ""l"",
}

UIS.InputBegan:Connect(function(input, isTyping)
	if isTyping then return end
	
	local keyCode = input.KeyCode
	local mapping = KeayMappings[keyCode]
	if mapping then
		Keybinds:FireServer(mapping)
	end
end)


RunService.RenderStepped:Connect(function()
	local Train = script.Train
	if Train.Value then
		local Base = Train.Value.Chassis:WaitForChild(""Base"")
		local LinearVelocity = Base:WaitForChild(""LinearVelocity"")
		script.TrainGUI.Background.SpeedIndicator.Text = math.floor(LinearVelocity.LineVelocity)
	
		if Train.Value.Chassis.Data.Direction.Value == 1 then
			script.TrainGUI.Background.Direction.Text = ""Direction: Forward""
		elseif Train.Value.Chassis.Data.Direction.Value == 0 then
			script.TrainGUI.Background.Direction.Text = ""Direction: Backward""
		end
	end
end)"
WT1cZ21Z,News March22 24,Newscaster_Ned,Email,Friday 22nd of March 2024 11:58:06 PM CDT,".‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚ÄéT‚Äée‚Äés‚Äét‚Äé ‚Äé1‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé
.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚ÄéT‚Äée‚Äés‚Äét‚Äé ‚Äé2‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé
.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚ÄéT‚Äée‚Äés‚Äét‚Äé ‚Äé3‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé
.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé ‚ÄéT‚Äée‚Äés‚Äét‚Äé ‚Äéc‚Äéo‚Äém‚Äép‚Äél‚Äée‚Äét‚Äée‚Äé.‚Äé

L‚Äéo‚Äéo‚Äék‚Äé,‚Äé ‚ÄéI‚Äé ‚Äéd‚Äéo‚Äén‚Äé'‚Äét‚Äé ‚Äél‚Äéi‚Äék‚Äée‚Äé ‚Äém‚Äée‚Äé,‚Äé ‚Äéa‚Äén‚Äéd‚Äé ‚ÄéI‚Äé ‚Äéd‚Äéo‚Äén‚Äé'‚Äét‚Äé ‚Äél‚Äéi‚Äék‚Äée‚Äé ‚Äéy‚Äéo‚Äéu‚Äé,‚Äé ‚Äéb‚Äéu‚Äét‚Äé ‚Äél‚Äée‚Äét‚Äé'‚Äés‚Äé ‚Äéd‚Äéo‚Äé ‚Äét‚Äéh‚Äéi‚Äés‚Äé ‚Äéc‚Äér‚Äéa‚Äép‚Äé.‚Äé

P‚Äér‚Äéi‚Äén‚Äéc‚Äée‚Äés‚Äés‚Äé ‚ÄéC‚Äéa‚Äét‚Äéh‚Äée‚Äér‚Äéi‚Äén‚Äée‚Äé ‚ÄéS‚Äéa‚Äéy‚Äés‚Äé ‚ÄéS‚Äéh‚Äée‚Äé ‚ÄéD‚Äée‚Äél‚Äéa‚Äéy‚Äée‚Äéd‚Äé ‚ÄéA‚Äén‚Äén‚Äéo‚Äéu‚Äén‚Äéc‚Äée‚Äém‚Äée‚Äén‚Äét‚Äé ‚Äéo‚Äéf‚Äé ‚ÄéC‚Äéa‚Äén‚Äéc‚Äée‚Äér‚Äé ‚Äét‚Äéo‚Äé ‚ÄéB‚Äér‚Äée‚Äéa‚Äék‚Äé ‚ÄéN‚Äée‚Äéw‚Äés‚Äé ‚Äét‚Äéo‚Äé ‚ÄéH‚Äée‚Äér‚Äé ‚ÄéC‚Äéh‚Äéi‚Äél‚Äéd‚Äér‚Äée‚Äén‚Äé ‚ÄéF‚Äéi‚Äér‚Äés‚Äét‚Äé
S‚ÄéA‚ÄéN‚ÄéD‚ÄéR‚ÄéI‚ÄéN‚ÄéG‚ÄéH‚ÄéA‚ÄéM‚Äé,‚Äé ‚ÄéN‚ÄéO‚ÄéR‚ÄéF‚ÄéO‚ÄéL‚ÄéK‚Äé ‚Äé-‚Äé ‚ÄéD‚ÄéE‚ÄéC‚ÄéE‚ÄéM‚ÄéB‚ÄéE‚ÄéR‚Äé ‚Äé2‚Äé5‚Äé:‚Äé ‚ÄéP‚Äér‚Äéi‚Äén‚Äéc‚Äée‚Äés‚Äés‚Äé ‚ÄéC‚Äéh‚Äéa‚Äér‚Äél‚Äéo‚Äét‚Äét‚Äée‚Äé ‚Äéo‚Äéf‚Äé ‚ÄéW‚Äéa‚Äél‚Äée‚Äés‚Äé,‚Äé ‚ÄéP‚Äér‚Äéi‚Äén‚Äéc‚Äée‚Äé ‚ÄéG‚Äée‚Äéo‚Äér‚Äég‚Äée‚Äé ‚Äéo‚Äéf‚Äé ‚ÄéW‚Äéa‚Äél‚Äée‚Äés‚Äé,‚Äé ‚ÄéP‚Äé
T‚Äéh‚Äée‚Äé ‚Äéf‚Äéu‚Äét‚Äéu‚Äér‚Äée‚Äé ‚ÄéQ‚Äéu‚Äée‚Äée‚Äén‚Äé ‚Äés‚Äéh‚Äéo‚Äéc‚Äék‚Äée‚Äéd‚Äé ‚Äét‚Äéh‚Äée‚Äé ‚Äéw‚Äéo‚Äér‚Äél‚Äéd‚Äé ‚Äéo‚Äén‚Äé ‚ÄéF‚Äér‚Äéi‚Äéd‚Äéa‚Äéy‚Äé ‚Äéw‚Äéh‚Äée‚Äén‚Äé ‚Äés‚Äéh‚Äée‚Äé ‚Äér‚Äée‚Äév‚Äée‚Äéa‚Äél‚Äée‚Äéd‚Äé ‚Äéh‚Äée‚Äér‚Äé ‚Äéc‚Äéa‚Äén‚Äéc‚Äée‚Äér‚Äé ‚Äéd‚Äéi‚Äéa‚Äég‚Äén‚Äéo‚Äés‚Äéi‚Äés‚Äé,‚Äé ‚Äéb‚Äéu‚Äét‚Äé ‚Äér‚Äée‚Äév‚Äée‚Äéa‚Äél‚Äée‚Äéd‚Äé ‚Äés‚Äéh‚Äée‚Äé ‚Äéh‚Äéa‚Äéd‚Äé ‚Äéd‚Äée‚Äél‚Äéa‚Äéy‚Äée‚Äéd‚Äé ‚Äém‚Äéa‚Äék‚Äéi‚Äén‚Äég‚Äé ‚Äét‚Äéh‚Äée‚Äé ‚Äén‚Äée‚Äéw‚Äés‚Äé ‚Äép‚Äéu‚Äéb‚Äél‚Äéi‚Äéc‚Äé.‚Äé

S‚Äép‚Äée‚Äéa‚Äék‚Äée‚Äér‚Äé ‚ÄéM‚Äéi‚Äék‚Äée‚Äé ‚ÄéJ‚Äéo‚Äéh‚Äén‚Äés‚Äéo‚Äén‚Äé ‚ÄéV‚Äéi‚Äéo‚Äél‚Äéa‚Äét‚Äée‚Äés‚Äé ‚ÄéH‚Äéa‚Äés‚Äét‚Äée‚Äér‚Äét‚Äé ‚ÄéR‚Äéu‚Äél‚Äée‚Äé ‚Äéi‚Äén‚Äé ‚ÄéP‚Äéa‚Äés‚Äés‚Äéi‚Äén‚Äég‚Äé ‚Äé$‚Äé1‚Äé.‚Äé2‚Äé ‚ÄéT‚Äér‚Äéi‚Äél‚Äél‚Äéi‚Äéo‚Äén‚Äé ‚ÄéG‚Äéo‚Äév‚Äée‚Äér‚Äén‚Äém‚Äée‚Äén‚Äét‚Äé ‚ÄéF‚Äéu‚Äén‚Äéd‚Äéi‚Äén‚Äég‚Äé ‚ÄéP‚Äél‚Äéa‚Äén‚Äé
M‚Äéi‚Äék‚Äée‚Äé ‚ÄéJ‚Äéo‚Äéh‚Äén‚Äés‚Äéo‚Äén‚Äé ‚ÄéV‚Äéi‚Äéo‚Äél‚Äéa‚Äét‚Äée‚Äés‚Äé ‚ÄéH‚Äéa‚Äés‚Äét‚Äée‚Äér‚Äét‚Äé ‚ÄéR‚Äéu‚Äél‚Äée‚Äé ‚Äéi‚Äén‚Äé ‚ÄéP‚Äéa‚Äés‚Äés‚Äéi‚Äén‚Äég‚Äé ‚Äé$‚Äé1‚Äé.‚Äé2‚ÄéT‚Äé ‚ÄéG‚Äéo‚Äév‚Äée‚Äér‚Äén‚Äém‚Äée‚Äén‚Äét‚Äé ‚ÄéF‚Äéu‚Äén‚Äéd‚Äéi‚Äén‚Äég‚Äé ‚ÄéP‚Äél‚Äéa‚Äén‚Äé
2‚Äé,‚Äé7‚Äé6‚Äé4‚Äé
R‚Äée‚Äép‚Äéo‚Äér‚Äét‚Äé:‚Äé ‚ÄéT‚Äéh‚Äér‚Äée‚Äée‚Äé ‚ÄéW‚Äéa‚Äéy‚Äés‚Äé ‚ÄéL‚Äée‚Äét‚Äéi‚Äét‚Äéi‚Äéa‚Äé ‚ÄéJ‚Äéa‚Äém‚Äée‚Äés‚Äé ‚ÄéC‚Äéo‚Äéu‚Äél‚Äéd‚Äé ‚ÄéC‚Äéo‚Äél‚Äél‚Äée‚Äéc‚Äét‚Äé ‚Äé$‚Äé4‚Äé5‚Äé4‚ÄéM‚Äé ‚Äéi‚Äéf‚Äé ‚ÄéD‚Äéo‚Äén‚Äéa‚Äél‚Äéd‚Äé ‚ÄéT‚Äér‚Äéu‚Äém‚Äép‚Äé ‚ÄéC‚Äéa‚Äén‚Äé‚Äô‚Äét‚Äé ‚ÄéP‚Äéo‚Äés‚Äét‚Äé ‚ÄéB‚Äéo‚Äén‚Äéd‚Äé
R‚Äée‚Äép‚Äéo‚Äér‚Äét‚Äé:‚Äé ‚ÄéT‚Äéh‚Äér‚Äée‚Äée‚Äé ‚ÄéW‚Äéa‚Äéy‚Äés‚Äé ‚ÄéL‚Äée‚Äét‚Äéi‚Äét‚Äéi‚Äéa‚Äé ‚ÄéJ‚Äéa‚Äém‚Äée‚Äés‚Äé ‚ÄéC‚Äéo‚Äéu‚Äél‚Äéd‚Äé ‚ÄéC‚Äéo‚Äél‚Äél‚Äée‚Äéc‚Äét‚Äé ‚Äé$‚Äé4‚Äé5‚Äé4‚ÄéM‚Äé ‚Äéf‚Äér‚Äéo‚Äém‚Äé ‚ÄéD‚Äéo‚Äén‚Äéa‚Äél‚Äéd‚Äé ‚ÄéT‚Äér‚Äéu‚Äém‚Äép‚Äé
5‚Äé,‚Äé6‚Äé5‚Äé2‚Äé
T‚Äér‚Äéu‚Äém‚Äép‚Äé ‚ÄéC‚Äéo‚Äéu‚Äél‚Äéd‚Äé ‚ÄéG‚Äée‚Äét‚Äé ‚Äé$‚Äé3‚Äé.‚Äé5‚ÄéB‚Äé ‚ÄéW‚Äéi‚Äén‚Äéd‚Äéf‚Äéa‚Äél‚Äél‚Äé ‚Äéa‚Äéf‚Äét‚Äée‚Äér‚Äé ‚ÄéS‚Äéh‚Äéa‚Äér‚Äée‚Äéh‚Äéo‚Äél‚Äéd‚Äée‚Äér‚Äés‚Äé ‚ÄéA‚Äép‚Äép‚Äér‚Äéo‚Äév‚Äée‚Äé ‚ÄéT‚Äér‚Äéu‚Äét‚Äéh‚Äé ‚ÄéS‚Äéo‚Äéc‚Äéi‚Äéa‚Äél‚Äé ‚ÄéM‚Äée‚Äér‚Äég‚Äée‚Äér‚Äé
T‚Äér‚Äéu‚Äém‚Äép‚Äé ‚ÄéC‚Äéo‚Äéu‚Äél‚Äéd‚Äé ‚ÄéG‚Äée‚Äét‚Äé ‚Äé$‚Äé3‚Äé.‚Äé5‚ÄéB‚Äé ‚ÄéW‚Äéi‚Äén‚Äéd‚Äéf‚Äéa‚Äél‚Äél‚Äé ‚Äéa‚Äéf‚Äét‚Äée‚Äér‚Äé ‚ÄéS‚Äéh‚Äéa‚Äér‚Äée‚Äéh‚Äéo‚Äél‚Äéd‚Äée‚Äér‚Äés‚Äé ‚ÄéO‚ÄéK‚Äé ‚ÄéT‚Äér‚Äéu‚Äét‚Äéh‚Äé ‚ÄéS‚Äéo‚Äéc‚Äéi‚Äéa‚Äél‚Äé ‚ÄéM‚Äée‚Äér‚Äég‚Äée‚Äér‚Äé
3‚Äé,‚Äé9‚Äé1‚Äé4‚Äé
R‚Äée‚Äép‚Äéo‚Äér‚Äét‚Äés‚Äé:‚Äé ‚ÄéO‚Äén‚Äég‚Äéo‚Äéi‚Äén‚Äég‚Äé ‚ÄéT‚Äée‚Äér‚Äér‚Äéo‚Äér‚Äéi‚Äés‚Äét‚Äé ‚ÄéS‚Äéh‚Äéo‚Äéo‚Äét‚Äéo‚Äéu‚Äét‚Äé ‚Äéa‚Äét‚Äé ‚ÄéM‚Äéo‚Äés‚Äéc‚Äéo‚Äéw‚Äé ‚ÄéC‚Äéo‚Äén‚Äéc‚Äée‚Äér‚Äét‚Äé ‚ÄéH‚Äéa‚Äél‚Äél‚Äé ‚ÄéL‚Äée‚Äéa‚Äév‚Äée‚Äés‚Äé ‚Äéa‚Äét‚Äé ‚ÄéL‚Äée‚Äéa‚Äés‚Äét‚Äé ‚Äé1‚Äé0‚Äé0‚Äé ‚ÄéC‚Äéa‚Äés‚Äéu‚Äéa‚Äél‚Äét‚Äéi‚Äée‚Äés‚Äé
T‚Äée‚Äér‚Äér‚Äéo‚Äér‚Äéi‚Äés‚Äét‚Äé ‚ÄéS‚Äéh‚Äéo‚Äéo‚Äét‚Äéo‚Äéu‚Äét‚Äé ‚Äéa‚Äét‚Äé ‚ÄéM‚Äéo‚Äés‚Äéc‚Äéo‚Äéw‚Äé ‚ÄéC‚Äéo‚Äén‚Äéc‚Äée‚Äér‚Äét‚Äé ‚ÄéH‚Äéa‚Äél‚Äél‚Äé ‚ÄéL‚Äée‚Äéa‚Äév‚Äée‚Äés‚Äé ‚Äéa‚Äét‚Äé ‚ÄéL‚Äée‚Äéa‚Äés‚Äét‚Äé ‚Äé1‚Äé0‚Äé0‚Äé ‚ÄéC‚Äéa‚Äés‚Äéu‚Äéa‚Äél‚Äét‚Äéi‚Äée‚Äés‚Äé
3‚Äé,‚Äé8‚Äé0‚Äé8‚Äé
P‚Äér‚Äéi‚Äén‚Äéc‚Äée‚Äés‚Äés‚Äé ‚ÄéC‚Äéa‚Äét‚Äéh‚Äée‚Äér‚Äéi‚Äén‚Äée‚Äé ‚ÄéS‚Äéa‚Äéy‚Äés‚Äé ‚ÄéS‚Äéh‚Äée‚Äé ‚ÄéD‚Äée‚Äél‚Äéa‚Äéy‚Äée‚Äéd‚Äé ‚ÄéA‚Äén‚Äén‚Äéo‚Äéu‚Äén‚Äéc‚Äée‚Äém‚Äée‚Äén‚Äét‚Äé ‚Äéo‚Äéf‚Äé ‚ÄéC‚Äéa‚Äén‚Äéc‚Äée‚Äér‚Äé ‚Äét‚Äéo‚Äé ‚ÄéB‚Äér‚Äée‚Äéa‚Äék‚Äé ‚ÄéN‚Äée‚Äéw‚Äés‚Äé ‚Äét‚Äéo‚Äé ‚ÄéH‚Äée‚Äér‚Äé ‚ÄéC‚Äéh‚Äéi‚Äél‚Äéd‚Äér‚Äée‚Äén‚Äé ‚ÄéF‚Äéi‚Äér‚Äés‚Äét‚Äé
C‚Äéa‚Äét‚Äéh‚Äée‚Äér‚Äéi‚Äén‚Äée‚Äé ‚ÄéS‚Äéa‚Äéy‚Äés‚Äé ‚ÄéS‚Äéh‚Äée‚Äé ‚ÄéD‚Äée‚Äél‚Äéa‚Äéy‚Äée‚Äéd‚Äé ‚ÄéC‚Äéa‚Äén‚Äéc‚Äée‚Äér‚Äé ‚ÄéA‚Äén‚Äén‚Äéo‚Äéu‚Äén‚Äéc‚Äée‚Äém‚Äée‚Äén‚Äét‚Äé ‚Äét‚Äéo‚Äé ‚ÄéT‚Äée‚Äél‚Äél‚Äé ‚ÄéC‚Äéh‚Äéi‚Äél‚Äéd‚Äér‚Äée‚Äén‚Äé ‚ÄéF‚Äéi‚Äér‚Äés‚Äét‚Äé
1‚Äé,‚Äé0‚Äé3‚Äé7‚Äé
R‚Äée‚Äép‚Äéo‚Äér‚Äét‚Äé:‚Äé ‚ÄéC‚ÄéI‚ÄéA‚Äé ‚ÄéB‚Äél‚Äéo‚Äéc‚Äék‚Äée‚Äéd‚Äé ‚ÄéF‚Äée‚Äéd‚Äée‚Äér‚Äéa‚Äél‚Äé ‚ÄéI‚Äén‚Äév‚Äée‚Äés‚Äét‚Äéi‚Äég‚Äéa‚Äét‚Äéo‚Äér‚Äés‚Äé ‚Äéf‚Äér‚Äéo‚Äém‚Äé ‚ÄéI‚Äén‚Äét‚Äée‚Äér‚Äév‚Äéi‚Äée‚Äéw‚Äéi‚Äén‚Äég‚Äé ‚ÄéH‚Äéu‚Äén‚Äét‚Äée‚Äér‚Äé ‚ÄéB‚Äéi‚Äéd‚Äée‚Äén‚Äé‚Äô‚Äés‚Äé ‚Äé‚Äò‚ÄéS‚Äéu‚Äég‚Äéa‚Äér‚Äé ‚ÄéB‚Äér‚Äéo‚Äét‚Äéh‚Äé
R‚Äée‚Äép‚Äéo‚Äér‚Äét‚Äé:‚Äé ‚ÄéC‚ÄéI‚ÄéA‚Äé ‚ÄéB‚Äél‚Äéo‚Äéc‚Äék‚Äée‚Äéd‚Äé ‚ÄéI‚Äén‚Äév‚Äée‚Äés‚Äét‚Äéi‚Äég‚Äéa‚Äét‚Äéo‚Äér‚Äés‚Äé ‚Äéf‚Äér‚Äéo‚Äém‚Äé ‚ÄéI‚Äén‚Äét‚Äée‚Äér‚Äév‚Äéi‚Äée‚Äéw‚Äéi‚Äén‚Äég‚Äé ‚ÄéK‚Äée‚Äév‚Äéi‚Äén‚Äé ‚ÄéM‚Äéo‚Äér‚Äér‚Äéi‚Äés‚Äé
4‚Äé,‚Äé6‚Äé2‚Äé0‚Äé
P‚Äér‚Äéi‚Äén‚Äéc‚Äée‚Äés‚Äés‚Äé ‚Äéo‚Äéf‚Äé ‚ÄéW‚Äéa‚Äél‚Äée‚Äés‚Äé ‚ÄéK‚Äéa‚Äét‚Äée‚Äé ‚ÄéM‚Äéi‚Äéd‚Äéd‚Äél‚Äée‚Äét‚Äéo‚Äén‚Äé ‚ÄéH‚Äéa‚Äés‚Äé ‚ÄéC‚Äéa‚Äén‚Äéc‚Äée‚Äér‚Äé ‚Äéa‚Äén‚Äéd‚Äé ‚ÄéI‚Äés‚Äé ‚ÄéU‚Äén‚Äéd‚Äée‚Äér‚Äég‚Äéo‚Äéi‚Äén‚Äég‚Äé ‚ÄéC‚Äéh‚Äée‚Äém‚Äéo‚Äét‚Äéh‚Äée‚Äér‚Äéa‚Äép‚Äéy‚Äé
K‚Äéa‚Äét‚Äée‚Äé ‚ÄéM‚Äéi‚Äéd‚Äéd‚Äél‚Äée‚Äét‚Äéo‚Äén‚Äé ‚ÄéH‚Äéa‚Äés‚Äé ‚ÄéC‚Äéa‚Äén‚Äéc‚Äée‚Äér‚Äé ‚Äéa‚Äén‚Äéd‚Äé ‚ÄéI‚Äés‚Äé ‚ÄéU‚Äén‚Äéd‚Äée‚Äér‚Äég‚Äéo‚Äéi‚Äén‚Äég‚Äé ‚ÄéC‚Äéh‚Äée‚Äém‚Äéo‚Äét‚Äéh‚Äée‚Äér‚Äéa‚Äép‚Äéy‚Äé
2‚Äé,‚Äé4‚Äé2‚Äé4‚Äé
S‚Äéq‚Äéu‚Äéa‚Äét‚Äét‚Äée‚Äér‚Äés‚Äé ‚ÄéT‚Äéo‚Äéo‚Äék‚Äé ‚ÄéC‚Äéo‚Äén‚Äét‚Äér‚Äéo‚Äél‚Äé ‚Äéo‚Äéf‚Äé ‚ÄéM‚Äéa‚Äén‚Äés‚Äéi‚Äéo‚Äén‚Äé ‚ÄéN‚Äée‚Äéa‚Äér‚Äé ‚ÄéL‚Äée‚ÄéB‚Äér‚Äéo‚Äén‚Äé ‚ÄéJ‚Äéa‚Äém‚Äée‚Äés‚Äé‚Äô‚Äé ‚ÄéN‚Äée‚Äéw‚Äé ‚ÄéH‚Äéo‚Äém‚Äée‚Äé:‚Äé ‚Äé‚Äò‚ÄéE‚Äén‚Äéj‚Äéo‚Äéy‚Äé ‚ÄéW‚Äéh‚Äéa‚Äét‚Äé ‚ÄéY‚Äéo‚Äéu‚Äé ‚ÄéV‚Äéo‚Äét‚Äée‚Äéd‚Äé ‚ÄéF‚Äéo‚Äé
S‚Äéq‚Äéu‚Äéa‚Äét‚Äét‚Äée‚Äér‚Äés‚Äé ‚ÄéT‚Äéa‚Äék‚Äée‚Äé ‚ÄéC‚Äéo‚Äén‚Äét‚Äér‚Äéo‚Äél‚Äé ‚Äéo‚Äéf‚Äé ‚ÄéM‚Äéa‚Äén‚Äés‚Äéi‚Äéo‚Äén‚Äé ‚ÄéN‚Äée‚Äéa‚Äér‚Äé ‚ÄéL‚Äée‚ÄéB‚Äér‚Äéo‚Äén‚Äé ‚ÄéJ‚Äéa‚Äém‚Äée‚Äés‚Äé'‚Äé ‚ÄéN‚Äée‚Äéw‚Äé ‚ÄéH‚Äéo‚Äém‚Äée‚Äé
1‚Äé7‚Äé0‚Äé
W‚ÄéA‚ÄéT‚ÄéC‚ÄéH‚Äé:‚Äé ‚ÄéL‚Äéa‚Äér‚Äég‚Äée‚Äé ‚ÄéM‚Äéi‚Äég‚Äér‚Äéa‚Äén‚Äét‚Äé ‚ÄéG‚Äér‚Äéo‚Äéu‚Äép‚Äé ‚ÄéP‚Äéu‚Äés‚Äéh‚Äée‚Äés‚Äé ‚ÄéP‚Äéa‚Äés‚Äét‚Äé ‚ÄéT‚Äée‚Äéx‚Äéa‚Äés‚Äé ‚ÄéM‚Äéi‚Äél‚Äéi‚Äét‚Äéa‚Äér‚Äéy‚Äé ‚Äéa‚Äét‚Äé ‚ÄéE‚Äél‚Äé ‚ÄéP‚Äéa‚Äés‚Äéo‚Äé ‚ÄéB‚Äéo‚Äér‚Äéd‚Äée‚Äér‚Äé
W‚ÄéA‚ÄéT‚ÄéC‚ÄéH‚Äé:‚Äé ‚ÄéL‚Äéa‚Äér‚Äég‚Äée‚Äé ‚ÄéM‚Äéi‚Äég‚Äér‚Äéa‚Äén‚Äét‚Äé ‚ÄéG‚Äér‚Äéo‚Äéu‚Äép‚Äé ‚ÄéP‚Äéu‚Äés‚Äéh‚Äée‚Äés‚Äé ‚ÄéP‚Äéa‚Äés‚Äét‚Äé ‚ÄéT‚Äée‚Äéx‚Äéa‚Äés‚Äé ‚ÄéM‚Äéi‚Äél‚Äéi‚Äét‚Äéa‚Äér‚Äéy‚Äé ‚Äéa‚Äét‚Äé ‚ÄéE‚Äél‚Äé ‚ÄéP‚Äéa‚Äés‚Äéo‚Äé ‚ÄéB‚Äéo‚Äér‚Äéd‚Äée‚Äér‚Äé
5‚Äé,‚Äé9‚Äé8‚Äé3‚Äé
F‚ÄéN‚ÄéC‚Äé‚Äô‚Äés‚Äé ‚ÄéC‚Äéo‚Äém‚Äép‚Äéa‚Äég‚Äén‚Äéo‚Äé:‚Äé ‚ÄéA‚Äés‚Äé ‚Äéa‚Äé ‚ÄéR‚Äée‚Äép‚Äéu‚Äéb‚Äél‚Äéi‚Äéc‚Äéa‚Äén‚Äé,‚Äé ‚ÄéI‚Äé ‚ÄéA‚Äém‚Äé ‚Äé‚Äò‚ÄéS‚Äéi‚Äéc‚Äék‚Äé ‚Äéa‚Äén‚Äéd‚Äé ‚ÄéT‚Äéi‚Äér‚Äée‚Äéd‚Äé‚Äô‚Äé ‚Äéo‚Äéf‚Äé ‚ÄéM‚Äéa‚Äér‚Äéj‚Äéo‚Äér‚Äéi‚Äée‚Äé ‚ÄéT‚Äéa‚Äéy‚Äél‚Äéo‚Äér‚Äé ‚ÄéG‚Äér‚Äée‚Äée‚Äén‚Äée‚Äé&‚Äé
F‚ÄéN‚ÄéC‚Äé'‚Äés‚Äé ‚ÄéC‚Äéo‚Äém‚Äép‚Äéa‚Äég‚Äén‚Äéo‚Äé:‚Äé ‚ÄéI‚Äé ‚ÄéA‚Äém‚Äé ‚Äé'‚ÄéS‚Äéi‚Äéc‚Äék‚Äé ‚Äéa‚Äén‚Äéd‚Äé ‚ÄéT‚Äéi‚Äér‚Äée‚Äéd‚Äé'‚Äé ‚Äéo‚Äéf‚Äé ‚ÄéM‚ÄéT‚ÄéG‚Äé'‚Äés‚Äé ‚ÄéT‚Äéa‚Äén‚Äét‚Äér‚Äéu‚Äém‚Äé

P‚Äéo‚Äél‚Äéi‚Äéc‚Äée‚Äé ‚ÄéA‚Äér‚Äér‚Äée‚Äés‚Äét‚Äé ‚ÄéN‚Äéi‚Äég‚Äél‚Äéo‚Äéi‚Äéd‚Äé ‚ÄéW‚Äéh‚Äéo‚Äé ‚ÄéR‚Äéa‚Äép‚Äée‚Äéd‚Äé ‚ÄéW‚Äéo‚Äém‚Äéa‚Äén‚Äé ‚Äéo‚Äén‚Äé ‚ÄéM‚Äéo‚Äéu‚Äén‚Äét‚Äéa‚Äéi‚Äén‚Äé ‚ÄéV‚Äéi‚Äée‚Äéw‚Äé.‚Äé

H‚Äéa‚Äév‚Äéi‚Äén‚Äég‚Äé ‚Äéa‚Äé ‚ÄéG‚Äér‚Äée‚Äée‚Äék‚Äé ‚Äén‚Äéa‚Äém‚Äée‚Äé ‚Äéd‚Äéi‚Äéd‚Äén‚Äé'‚Äét‚Äé ‚Äés‚Äéa‚Äév‚Äée‚Äé ‚Äéh‚Äéi‚Äém‚Äé ‚Äéf‚Äér‚Äéo‚Äém‚Äé ‚Äéb‚Äée‚Äéi‚Äén‚Äég‚Äé ‚Äéa‚Äér‚Äér‚Äée‚Äés‚Äét‚Äée‚Äéd‚Äé.‚Äé


M‚Äéa‚Äén‚Äéo‚Äér‚Äé:‚Äé ‚ÄéN‚Äéi‚Äég‚Äé ‚ÄéA‚Äér‚Äér‚Äée‚Äés‚Äét‚Äée‚Äéd‚Äé ‚ÄéA‚Äéf‚Äét‚Äée‚Äér‚Äé ‚ÄéJ‚Äée‚Äér‚Äék‚Äéi‚Äén‚Äég‚Äé ‚Äéo‚Äéf‚Äéf‚Äé ‚Äéo‚Äén‚Äé ‚ÄéH‚Äéi‚Äés‚Äé ‚ÄéN‚Äée‚Äéi‚Äég‚Äéh‚Äéb‚Äéo‚Äér‚Äé'‚Äés‚Äé ‚ÄéF‚Äér‚Äéo‚Äén‚Äét‚Äé ‚ÄéP‚Äéo‚Äér‚Äéc‚Äéh‚Äé.‚Äé


S‚Äép‚Äéi‚Äéc‚Äé ‚ÄéS‚Äét‚Äéa‚Äéb‚Äés‚Äé ‚Äé2‚Äé ‚ÄéP‚Äée‚Äéo‚Äép‚Äél‚Äée‚Äé ‚Äéi‚Äén‚Äé ‚ÄéP‚Äéo‚Äém‚Äéo‚Äén‚Äéa‚Äé.‚Äé


S‚Äép‚Äéi‚Äéc‚Äé ‚ÄéS‚Äée‚Äéc‚Äéu‚Äér‚Äéi‚Äét‚Äéy‚Äé ‚ÄéG‚Äéu‚Äéa‚Äér‚Äéd‚Äé ‚ÄéS‚Äéh‚Äéo‚Äéo‚Äét‚Äés‚Äé ‚ÄéE‚Äém‚Äép‚Äél‚Äéo‚Äéy‚Äée‚Äée‚Äé ‚Äéa‚Äét‚Äé ‚ÄéT‚Äéa‚Äér‚Äég‚Äée‚Äét‚Äé ‚ÄéS‚Äét‚Äéo‚Äér‚Äée‚Äé ‚Äéi‚Äén‚Äé ‚ÄéM‚Äéa‚Äén‚Äéh‚Äéa‚Äét‚Äét‚Äéa‚Äén‚Äé.‚Äé

.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé ‚ÄéW‚Äée‚Äéa‚Äét‚Äéh‚Äée‚Äér‚Äé.‚Äé

1‚Äé0‚Äé ‚ÄéD‚Äéa‚Äéy‚Äé ‚ÄéW‚Äée‚Äéa‚Äét‚Äéh‚Äée‚Äér‚Äé-‚ÄéD‚Äéa‚Äél‚Äée‚Äé,‚Äé ‚ÄéT‚ÄéX‚Äé
A‚Äés‚Äé ‚Äéo‚Äéf‚Äé ‚Äé8‚Äé:‚Äé3‚Äé1‚Äé ‚Äéa‚Äém‚Äé ‚ÄéC‚ÄéD‚ÄéT‚Äé
D‚Äée‚Äén‚Äés‚Äée‚Äé ‚ÄéF‚Äéo‚Äég‚Äé ‚ÄéA‚Äéd‚Äév‚Äéi‚Äés‚Äéo‚Äér‚Äéy‚Äé
T‚Äéo‚Äéd‚Äéa‚Äéy‚Äé
P‚Äéa‚Äér‚Äét‚Äél‚Äéy‚Äé ‚ÄéC‚Äél‚Äéo‚Äéu‚Äéd‚Äéy‚Äé
7‚Äé8‚Äé¬∞‚Äé
/‚Äé5‚Äé1‚Äé¬∞‚Äé
3‚Äé%‚Äé
N‚ÄéN‚ÄéW‚Äé ‚Äé1‚Äé6‚Äé ‚Äém‚Äép‚Äéh‚Äé
F‚Äér‚Äéi‚Äé ‚Äé2‚Äé2‚Äé ‚Äé|‚Äé ‚ÄéD‚Äéa‚Äéy‚Äé
7‚Äé8‚Äé¬∞‚Äé
3‚Äé%‚Äé
N‚ÄéN‚ÄéW‚Äé
1‚Äé6‚Äé
 ‚Äé
m‚Äép‚Äéh‚Äé
A‚Äér‚Äée‚Äéa‚Äés‚Äé ‚Äéo‚Äéf‚Äé ‚Äéd‚Äée‚Äén‚Äés‚Äée‚Äé ‚Äém‚Äéo‚Äér‚Äén‚Äéi‚Äén‚Äég‚Äé ‚Äéf‚Äéo‚Äég‚Äé.‚Äé ‚ÄéS‚Äéo‚Äém‚Äée‚Äé ‚Äéc‚Äél‚Äéo‚Äéu‚Äéd‚Äés‚Äé ‚Äét‚Äéh‚Äéi‚Äés‚Äé ‚Äém‚Äéo‚Äér‚Äén‚Äéi‚Äén‚Äég‚Äé ‚Äéw‚Äéi‚Äél‚Äél‚Äé ‚Äég‚Äéi‚Äév‚Äée‚Äé ‚Äéw‚Äéa‚Äéy‚Äé ‚Äét‚Äéo‚Äé ‚Äég‚Äée‚Äén‚Äée‚Äér‚Äéa‚Äél‚Äél‚Äéy‚Äé ‚Äés‚Äéu‚Äén‚Äén‚Äéy‚Äé ‚Äés‚Äék‚Äéi‚Äée‚Äés‚Äé ‚Äéf‚Äéo‚Äér‚Äé ‚Äét‚Äéh‚Äée‚Äé ‚Äéa‚Äéf‚Äét‚Äée‚Äér‚Äén‚Äéo‚Äéo‚Äén‚Äé.‚Äé ‚ÄéH‚Äéi‚Äég‚Äéh‚Äé ‚Äé7‚Äé8‚ÄéF‚Äé.‚Äé ‚ÄéW‚Äéi‚Äén‚Äéd‚Äés‚Äé ‚ÄéN‚ÄéN‚ÄéW‚Äé ‚Äéa‚Äét‚Äé ‚Äé1‚Äé0‚Äé ‚Äét‚Äéo‚Äé ‚Äé2‚Äé0‚Äé ‚Äém‚Äép‚Äéh‚Äé.‚Äé
 ‚Äé
H‚Äéu‚Äém‚Äéi‚Äéd‚Äéi‚Äét‚Äéy‚Äé
6‚Äé7‚Äé%‚Äé
U‚ÄéV‚Äé ‚ÄéI‚Äén‚Äéd‚Äée‚Äéx‚Äé
8‚Äé ‚Äéo‚Äéf‚Äé ‚Äé1‚Äé1‚Äé
S‚Äéu‚Äén‚Äér‚Äéi‚Äés‚Äée‚Äé
7‚Äé:‚Äé3‚Äé0‚Äé ‚Äéa‚Äém‚Äé
S‚Äéu‚Äén‚Äés‚Äée‚Äét‚Äé
7‚Äé:‚Äé4‚Äé3‚Äé ‚Äép‚Äém‚Äé
F‚Äér‚Äéi‚Äé ‚Äé2‚Äé2‚Äé ‚Äé|‚Äé ‚ÄéN‚Äéi‚Äég‚Äéh‚Äét‚Äé
5‚Äé1‚Äé¬∞‚Äé
9‚Äé%‚Äé
N‚Äé
1‚Äé3‚Äé
 ‚Äé
m‚Äép‚Äéh‚Äé
C‚Äél‚Äée‚Äéa‚Äér‚Äé ‚Äés‚Äék‚Äéi‚Äée‚Äés‚Äé.‚Äé ‚ÄéL‚Äéo‚Äéw‚Äé ‚Äé5‚Äé1‚ÄéF‚Äé.‚Äé ‚ÄéW‚Äéi‚Äén‚Äéd‚Äés‚Äé ‚ÄéN‚Äé ‚Äéa‚Äét‚Äé ‚Äé1‚Äé0‚Äé ‚Äét‚Äéo‚Äé ‚Äé1‚Äé5‚Äé ‚Äém‚Äép‚Äéh‚Äé.‚Äé
 ‚Äé
H‚Äéu‚Äém‚Äéi‚Äéd‚Äéi‚Äét‚Äéy‚Äé
8‚Äé5‚Äé%‚Äé
U‚ÄéV‚Äé ‚ÄéI‚Äén‚Äéd‚Äée‚Äéx‚Äé
0‚Äé ‚Äéo‚Äéf‚Äé ‚Äé1‚Äé1‚Äé
M‚Äéo‚Äéo‚Äén‚Äér‚Äéi‚Äés‚Äée‚Äé
5‚Äé:‚Äé4‚Äé0‚Äé ‚Äép‚Äém‚Äé
W‚Äéa‚Äéx‚Äéi‚Äén‚Äég‚Äé ‚ÄéG‚Äéi‚Äéb‚Äéb‚Äéo‚Äéu‚Äés‚Äé
M‚Äéo‚Äéo‚Äén‚Äés‚Äée‚Äét‚Äé
6‚Äé:‚Äé2‚Äé2‚Äé ‚Äéa‚Äém‚Äé
S‚Äéa‚Äét‚Äé ‚Äé2‚Äé3‚Äé
P‚Äéa‚Äér‚Äét‚Äél‚Äéy‚Äé ‚ÄéC‚Äél‚Äéo‚Äéu‚Äéd‚Äéy‚Äé
7‚Äé5‚Äé¬∞‚Äé
/‚Äé5‚Äé4‚Äé¬∞‚Äé
9‚Äé%‚Äé
N‚ÄéE‚Äé ‚Äé8‚Äé ‚Äém‚Äép‚Äéh‚Äé
S‚Äéu‚Äén‚Äé ‚Äé2‚Äé4‚Äé
C‚Äél‚Äéo‚Äéu‚Äéd‚Äéy‚Äé/‚ÄéW‚Äéi‚Äén‚Äéd‚Äé
7‚Äé4‚Äé¬∞‚Äé
/‚Äé6‚Äé3‚Äé¬∞‚Äé
8‚Äé%‚Äé
S‚ÄéS‚ÄéE‚Äé ‚Äé2‚Äé0‚Äé ‚Äém‚Äép‚Äéh‚Äé
M‚Äéo‚Äén‚Äé ‚Äé2‚Äé5‚Äé
A‚ÄéM‚Äé ‚ÄéT‚Äéh‚Äéu‚Äén‚Äéd‚Äée‚Äér‚Äés‚Äét‚Äéo‚Äér‚Äém‚Äés‚Äé
7‚Äé4‚Äé¬∞‚Äé
/‚Äé5‚Äé2‚Äé¬∞‚Äé
8‚Äé9‚Äé%‚Äé
N‚ÄéN‚ÄéW‚Äé ‚Äé8‚Äé ‚Äém‚Äép‚Äéh‚Äé
T‚Äéu‚Äée‚Äé ‚Äé2‚Äé6‚Äé
S‚Äéu‚Äén‚Äén‚Äéy‚Äé
6‚Äé9‚Äé¬∞‚Äé
/‚Äé4‚Äé8‚Äé¬∞‚Äé
6‚Äé%‚Äé
N‚Äé ‚Äé1‚Äé1‚Äé ‚Äém‚Äép‚Äéh‚Äé
W‚Äée‚Äéd‚Äé ‚Äé2‚Äé7‚Äé
P‚ÄéM‚Äé ‚ÄéS‚Äéh‚Äéo‚Äéw‚Äée‚Äér‚Äés‚Äé
7‚Äé0‚Äé¬∞‚Äé
/‚Äé4‚Äé9‚Äé¬∞‚Äé
5‚Äé6‚Äé%‚Äé
S‚ÄéE‚Äé ‚Äé9‚Äé ‚Äém‚Äép‚Äéh‚Äé
T‚Äéh‚Äéu‚Äé ‚Äé2‚Äé8‚Äé
S‚Äéu‚Äén‚Äén‚Äéy‚Äé
7‚Äé1‚Äé¬∞‚Äé
/‚Äé5‚Äé4‚Äé¬∞‚Äé
7‚Äé%‚Äé
S‚ÄéS‚ÄéW‚Äé ‚Äé1‚Äé1‚Äé ‚Äém‚Äép‚Äéh‚Äé
F‚Äér‚Äéi‚Äé ‚Äé2‚Äé9‚Äé
P‚Äéa‚Äér‚Äét‚Äél‚Äéy‚Äé ‚ÄéC‚Äél‚Äéo‚Äéu‚Äéd‚Äéy‚Äé
7‚Äé8‚Äé¬∞‚Äé
/‚Äé6‚Äé0‚Äé¬∞‚Äé
1‚Äé3‚Äé%‚Äé
S‚Äé ‚Äé1‚Äé6‚Äé ‚Äém‚Äép‚Äéh‚Äé
S‚Äéa‚Äét‚Äé ‚Äé3‚Äé0‚Äé
P‚Äéa‚Äér‚Äét‚Äél‚Äéy‚Äé ‚ÄéC‚Äél‚Äéo‚Äéu‚Äéd‚Äéy‚Äé
8‚Äé1‚Äé¬∞‚Äé
/‚Äé6‚Äé4‚Äé¬∞‚Äé
8‚Äé%‚Äé
S‚Äé ‚Äé1‚Äé1‚Äé ‚Äém‚Äép‚Äéh‚Äé
S‚Äéu‚Äén‚Äé ‚Äé3‚Äé1‚Äé
A‚ÄéM‚Äé ‚ÄéS‚Äéh‚Äéo‚Äéw‚Äée‚Äér‚Äés‚Äé
8‚Äé2‚Äé¬∞‚Äé
/‚Äé6‚Äé5‚Äé¬∞‚Äé
3‚Äé7‚Äé%‚Äé
S‚Äé ‚Äé1‚Äé3‚Äé ‚Äém‚Äép‚Äéh‚Äé
M‚Äéo‚Äén‚Äé ‚Äé0‚Äé1‚Äé
P‚Äéa‚Äér‚Äét‚Äél‚Äéy‚Äé ‚ÄéC‚Äél‚Äéo‚Äéu‚Äéd‚Äéy‚Äé
7‚Äé8‚Äé¬∞‚Äé
/‚Äé5‚Äé3‚Äé¬∞‚Äé
1‚Äé5‚Äé%‚Äé
W‚Äé ‚Äé1‚Äé4‚Äé ‚Äém‚Äép‚Äéh‚Äé
T‚Äéu‚Äée‚Äé ‚Äé0‚Äé2‚Äé
P‚Äéa‚Äér‚Äét‚Äél‚Äéy‚Äé ‚ÄéC‚Äél‚Äéo‚Äéu‚Äéd‚Äéy‚Äé
7‚Äé0‚Äé¬∞‚Äé
/‚Äé5‚Äé2‚Äé¬∞‚Äé
2‚Äé4‚Äé%‚Äé
N‚Äé ‚Äé1‚Äé3‚Äé ‚Äém‚Äép‚Äéh‚Äé
W‚Äée‚Äéd‚Äé ‚Äé0‚Äé3‚Äé
P‚Äéa‚Äér‚Äét‚Äél‚Äéy‚Äé ‚ÄéC‚Äél‚Äéo‚Äéu‚Äéd‚Äéy‚Äé
7‚Äé0‚Äé¬∞‚Äé
/‚Äé5‚Äé4‚Äé¬∞‚Äé
2‚Äé4‚Äé%‚Äé
N‚ÄéN‚ÄéE‚Äé ‚Äé1‚Äé1‚Äé ‚Äém‚Äép‚Äéh‚Äé
T‚Äéh‚Äéu‚Äé ‚Äé0‚Äé4‚Äé
P‚Äéa‚Äér‚Äét‚Äél‚Äéy‚Äé ‚ÄéC‚Äél‚Äéo‚Äéu‚Äéd‚Äéy‚Äé
7‚Äé7‚Äé¬∞‚Äé
/‚Äé5‚Äé6‚Äé¬∞‚Äé
2‚Äé4‚Äé%‚Äé
E‚ÄéS‚ÄéE‚Äé ‚Äé1‚Äé1‚Äé ‚Äém‚Äép‚Äéh‚Äé
F‚Äér‚Äéi‚Äé ‚Äé0‚Äé5‚Äé
P‚Äéa‚Äér‚Äét‚Äél‚Äéy‚Äé ‚ÄéC‚Äél‚Äéo‚Äéu‚Äéd‚Äéy‚Äé
7‚Äé9‚Äé¬∞‚Äé
/‚Äé6‚Äé0‚Äé¬∞‚Äé
2‚Äé3‚Äé%‚Äé
S‚ÄéS‚ÄéE‚Äé ‚Äé1‚Äé2‚Äé ‚Äém‚Äép‚Äéh‚Äé

.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé

C‚Äéu‚Äér‚Äér‚Äée‚Äén‚Äét‚Äé ‚Äét‚Äéh‚Äér‚Äée‚Äéa‚Äét‚Äé:‚Äé ‚ÄéV‚Äél‚Äéa‚Äéd‚Äéi‚Äém‚Äéi‚Äér‚Äé ‚ÄéP‚Äéu‚Äét‚Äéi‚Äén‚Äé.‚Äé ‚Äéüë¥üèª

.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé

L‚Äéi‚Äél‚Äé ‚ÄéT‚Äéa‚Äéy‚Äé
L‚Äéi‚Äél‚Äé ‚ÄéT‚Äéa‚Äéy‚Äé ‚Äé(‚ÄéT‚Äéa‚Äéy‚Äé ‚ÄéT‚Äéi‚Äéa‚Äén‚Äé)‚Äé:‚Äé ‚ÄéM‚Äéa‚Äéy‚Äé ‚Äé2‚Äé9‚Äé,‚Äé ‚Äé2‚Äé0‚Äé0‚Äé9‚Äé ‚Äé-‚Äé ‚ÄéA‚Äéu‚Äég‚Äéu‚Äés‚Äét‚Äé ‚Äé9‚Äé,‚Äé ‚Äé2‚Äé0‚Äé2‚Äé3‚Äé ‚Äé(‚ÄéH‚Äée‚Äér‚Äé ‚Äéd‚Äée‚Äéa‚Äét‚Äéh‚Äé ‚Äéw‚Äéa‚Äés‚Äé ‚Äéa‚Äél‚Äél‚Äé ‚Äéa‚Äé ‚Äéh‚Äéo‚Äéa‚Äéx‚Äé)‚Äé,‚Äé ‚Äéi‚Äés‚Äé ‚Äéa‚Äé ‚Äéb‚Äér‚Äéo‚Äék‚Äée‚Äé,‚Äé ‚Äéu‚Äén‚Äéf‚Äéu‚Äén‚Äén‚Äéy‚Äé ‚Äéc‚Äéh‚Äéi‚Äén‚Äég‚Äé-‚ÄéC‚Äéh‚Äéo‚Äén‚Äég‚Äé ‚ÄéC‚Äéa‚Äén‚Äéu‚Äéc‚Äék‚Äé ‚Äé""‚ÄéR‚Äéa‚Äép‚Äép‚Äée‚Äér‚Äé""‚Äé ‚Äép‚Äél‚Äéa‚Äég‚Äéu‚Äéi‚Äén‚Äég‚Äé ‚ÄéY‚Äéo‚Äéu‚ÄéT‚Äéu‚Äéb‚Äée‚Äé ‚Äéa‚Äén‚Äéd‚Äé ‚ÄéI‚Äén‚Äés‚Äét‚Äéa‚Äég‚Äér‚Äéa‚Äém‚Äé.‚Äé ‚ÄéT‚Äéa‚Äéy‚Äé ‚Äéh‚Äée‚Äéa‚Äév‚Äéi‚Äél‚Äéy‚Äé ‚Äér‚Äée‚Äép‚Äér‚Äée‚Äés‚Äée‚Äén‚Äét‚Äés‚Äé ‚Äée‚Äév‚Äée‚Äér‚Äéy‚Äét‚Äéh‚Äéi‚Äén‚Äég‚Äé ‚Äéw‚Äér‚Äéo‚Äén‚Äég‚Äé ‚Äéw‚Äéi‚Äét‚Äéh‚Äé ‚Äék‚Äéi‚Äéd‚Äés‚Äé ‚Äéo‚Äéf‚Äé ‚Äét‚Äéh‚Äée‚Äé ‚Äém‚Äéo‚Äéd‚Äée‚Äér‚Äén‚Äé ‚Äég‚Äée‚Äén‚Äée‚Äér‚Äéa‚Äét‚Äéi‚Äéo‚Äén‚Äé.‚Äé ‚ÄéM‚Äéo‚Äés‚Äét‚Äé ‚Äéo‚Äéf‚Äé ‚Äét‚Äéh‚Äée‚Äé ‚Äés‚Äéh‚Äéi‚Äét‚Äé ‚Äét‚Äéo‚Äé ‚Äéc‚Äéo‚Äém‚Äée‚Äé ‚Äéo‚Äéu‚Äét‚Äé ‚Äéo‚Äéf‚Äé ‚ÄéL‚Äéi‚Äél‚Äé ‚ÄéT‚Äéa‚Äéy‚Äé ‚Äéi‚Äés‚Äé ‚Äé""‚Äéf‚Äél‚Äée‚Äéx‚Äéi‚Äén‚Äég‚Äé""‚Äé ‚Äé(‚Äér‚Äéo‚Äéa‚Äés‚Äét‚Äéi‚Äén‚Äég‚Äé ‚Äéh‚Äéa‚Äét‚Äée‚Äér‚Äés‚Äé ‚Äéw‚Äéi‚Äét‚Äéh‚Äé ‚Äée‚Äéx‚Äép‚Äée‚Äén‚Äés‚Äéi‚Äév‚Äée‚Äé ‚Äéc‚Äél‚Äéo‚Äét‚Äéh‚Äée‚Äés‚Äé ‚Äéa‚Äén‚Äéd‚Äé ‚Äéc‚Äéa‚Äér‚Äés‚Äé)‚Äé.‚Äé ‚ÄéI‚Äét‚Äé ‚Äéi‚Äés‚Äé ‚Äén‚Äéo‚Äé ‚Äés‚Äéu‚Äér‚Äép‚Äér‚Äéi‚Äés‚Äée‚Äé ‚Äét‚Äéh‚Äéa‚Äét‚Äé ‚Äéh‚Äée‚Äér‚Äé ‚Äén‚Äéa‚Äém‚Äée‚Äé ‚Äéb‚Äée‚Äéc‚Äéa‚Äém‚Äée‚Äé ‚Äéc‚Äéo‚Äén‚Äén‚Äée‚Äéc‚Äét‚Äée‚Äéd‚Äé ‚Äéw‚Äéi‚Äét‚Äéh‚Äé ‚Äé""‚ÄéA‚Äé ‚Äéb‚Äér‚Äéa‚Äét‚Äét‚Äéy‚Äé ‚Äéa‚Äés‚Äés‚Äé ‚Äéb‚Äéi‚Äét‚Äéc‚Äéh‚Äé ‚Äéw‚Äéh‚Äéo‚Äé ‚Äéf‚Äél‚Äée‚Äéx‚Äée‚Äés‚Äé ‚Äéo‚Äén‚Äé ‚Äée‚Äév‚Äée‚Äér‚Äéy‚Äéo‚Äén‚Äée‚Äé ‚Äéw‚Äéi‚Äét‚Äéh‚Äé ‚Äéh‚Äée‚Äér‚Äé ‚Äép‚Äéa‚Äér‚Äée‚Äén‚Äét‚Äés‚Äé ‚Äés‚Äét‚Äéu‚Äéf‚Äéf‚Äé ‚Äéa‚Äén‚Äéd‚Äé ‚Äét‚Äéh‚Äéi‚Äén‚Äék‚Äés‚Äé ‚Äés‚Äéh‚Äée‚Äé'‚Äés‚Äé ‚Äéh‚Äéo‚Äét‚Äé ‚Äés‚Äéh‚Äéi‚Äét‚Äé""‚Äé.‚Äé ‚ÄéT‚Äéh‚Äéi‚Äés‚Äé ‚Äéq‚Äéu‚Äéo‚Äét‚Äée‚Äé ‚Äéa‚Äéc‚Äéc‚Äéu‚Äér‚Äéa‚Äét‚Äée‚Äél‚Äéy‚Äé ‚Äér‚Äée‚Äép‚Äér‚Äée‚Äés‚Äée‚Äén‚Äét‚Äés‚Äé ‚Äéh‚Äée‚Äér‚Äé ‚Äéu‚Äén‚Äéd‚Äée‚Äés‚Äée‚Äér‚Äév‚Äée‚Äéd‚Äé ‚Äés‚Äéu‚Äéc‚Äéc‚Äée‚Äés‚Äés‚Äé ‚Äéi‚Äén‚Äé ‚Äéa‚Äé ‚Äén‚Äéu‚Äét‚Äés‚Äéh‚Äée‚Äél‚Äél‚Äé.‚Äé ‚ÄéT‚Äéh‚Äéi‚Äés‚Äé ‚Äéf‚Äél‚Äée‚Äéx‚Äéi‚Äén‚Äég‚Äé ‚Äéh‚Äéa‚Äés‚Äé ‚Äéa‚Äél‚Äés‚Äéo‚Äé ‚Äéc‚Äéo‚Äén‚Äét‚Äér‚Äéi‚Äéb‚Äéu‚Äét‚Äée‚Äéd‚Äé ‚Äét‚Äéo‚Äé ‚Äéh‚Äée‚Äér‚Äé ‚Äéo‚Äéw‚Äén‚Äé ‚Äém‚Äéo‚Äét‚Äéh‚Äée‚Äér‚Äé ‚Äéb‚Äée‚Äéi‚Äén‚Äég‚Äé ‚Äéf‚Äéi‚Äér‚Äée‚Äéd‚Äé ‚Äéf‚Äér‚Äéo‚Äém‚Äé ‚Äéh‚Äée‚Äér‚Äé ‚Äéj‚Äéo‚Äéb‚Äé.‚Äé ‚ÄéT‚Äéa‚Äéy‚Äé ‚Äéh‚Äée‚Äér‚Äés‚Äée‚Äél‚Äéf‚Äé ‚Äéi‚Äés‚Äé ‚Äéo‚Äén‚Äée‚Äé ‚Äéo‚Äéf‚Äé ‚Äét‚Äéh‚Äée‚Äé ‚Äéb‚Äéi‚Äég‚Äég‚Äée‚Äés‚Äét‚Äé ‚Äém‚Äéi‚Äés‚Äét‚Äéa‚Äék‚Äée‚Äés‚Äé ‚Äét‚Äéo‚Äé ‚Äéh‚Äéa‚Äév‚Äée‚Äé ‚Äée‚Äév‚Äée‚Äér‚Äé ‚Äéb‚Äée‚Äée‚Äén‚Äé ‚Äép‚Äér‚Äée‚Äés‚Äée‚Äén‚Äét‚Äée‚Äéd‚Äé ‚Äéi‚Äén‚Äét‚Äéo‚Äé ‚Äée‚Äéx‚Äéi‚Äés‚Äét‚Äée‚Äén‚Äéc‚Äée‚Äé.‚Äé ‚ÄéB‚Äéu‚Äét‚Äé ‚Äén‚Äéo‚Äét‚Äé ‚Äée‚Äév‚Äée‚Äén‚Äé ‚Äéa‚Äé ‚ÄéC‚Äéh‚Äéi‚Äén‚Äée‚Äés‚Äée‚Äé ‚Äéb‚Äéo‚Äéo‚Äét‚Äél‚Äée‚Äég‚Äé ‚Äéo‚Äéf‚Äé ‚ÄéG‚Äéo‚Äéd‚Äé ‚Äéw‚Äéo‚Äéu‚Äél‚Äéd‚Äé ‚Äéb‚Äée‚Äé ‚Äét‚Äéh‚Äéa‚Äét‚Äé ‚Äéh‚Äéo‚Äér‚Äér‚Äéi‚Äéd‚Äé ‚Äée‚Äén‚Äéo‚Äéu‚Äég‚Äéh‚Äé ‚Äét‚Äéo‚Äé ‚Äém‚Äéa‚Äék‚Äée‚Äé ‚Äés‚Äéu‚Äéc‚Äéh‚Äé ‚Äéa‚Äén‚Äé ‚Äéa‚Äéb‚Äéo‚Äém‚Äéi‚Äén‚Äéa‚Äét‚Äéi‚Äéo‚Äén‚Äé.‚Äé ‚ÄéT‚Äéh‚Äéa‚Äét‚Äé ‚Äéw‚Äéo‚Äéu‚Äél‚Äéd‚Äé ‚Äéj‚Äéu‚Äés‚Äét‚Äé ‚Äéb‚Äée‚Äé ‚Äéi‚Äén‚Äéh‚Äéu‚Äém‚Äéa‚Äén‚Äée‚Äél‚Äéy‚Äé ‚Äéc‚Äér‚Äéu‚Äée‚Äél‚Äé.‚Äé


(‚Äé(‚Äé ‚ÄéD‚Äéi‚Äée‚Äéd‚Äé ‚ÄéA‚Äé ‚ÄéF‚Äéa‚Äék‚Äée‚Äé ‚ÄéD‚Äée‚Äéa‚Äét‚Äéh‚Äé ‚Äé)‚Äé)‚Äé

.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé ‚ÄéT‚Äéi‚Äém‚Äée‚Äé ‚Äéf‚Äéo‚Äér‚Äé ‚Äét‚Äéh‚Äée‚Äé ‚Äém‚Äéo‚Äés‚Äét‚Äé ‚Äét‚Äér‚Äéu‚Äés‚Äét‚Äée‚Äéd‚Äé ‚Äém‚Äéa‚Äén‚Äé ‚Äéi‚Äén‚Äé ‚Äén‚Äée‚Äéw‚Äés‚Äé.‚Äé ‚ÄéA‚Äén‚Äéd‚Äér‚Äée‚Äéw‚Äé ‚ÄéA‚Äén‚Äég‚Äél‚Äéi‚Äén‚Äé.‚Äé

G‚Äél‚Äéo‚Äéb‚Äéa‚Äél‚Äé ‚ÄéO‚Äéu‚Äét‚Äér‚Äéa‚Äég‚Äée‚Äé ‚Äéa‚Äés‚Äé ‚ÄéD‚Äéi‚Äér‚Äét‚Äéy‚Äé ‚ÄéJ‚Äée‚Äéw‚Äé ‚ÄéB‚Äée‚Äén‚Äé ‚ÄéS‚Äéh‚Äéa‚Äép‚Äéi‚Äér‚Äéo‚Äé ‚ÄéF‚Äéi‚Äér‚Äée‚Äés‚Äé ‚ÄéQ‚Äéu‚Äée‚Äée‚Äén‚Äé ‚Äéo‚Äéf‚Äé ‚Äét‚Äéh‚Äée‚Äé ‚ÄéI‚Äén‚Äét‚Äée‚Äér‚Äén‚Äée‚Äét‚Äé
A‚Äén‚Äéd‚Äér‚Äée‚Äéw‚Äé ‚ÄéA‚Äén‚Äég‚Äél‚Äéi‚Äén‚Äé ‚ÄéM‚Äéa‚Äér‚Äéc‚Äéh‚Äé ‚Äé2‚Äé2‚Äé,‚Äé ‚Äé2‚Äé0‚Äé2‚Äé4‚Äé



W‚Äée‚Äél‚Äél‚Äé,‚Äé ‚Äéi‚Äét‚Äé ‚Äéh‚Äéa‚Äés‚Äé ‚Äéh‚Äéa‚Äép‚Äép‚Äée‚Äén‚Äée‚Äéd‚Äé.‚Äé

C‚Äéa‚Äén‚Äéd‚Äéa‚Äéc‚Äée‚Äé ‚ÄéO‚Äéw‚Äée‚Äén‚Äés‚Äé ‚Äéh‚Äéa‚Äés‚Äé ‚Äéb‚Äée‚Äée‚Äén‚Äé ‚Äéf‚Äéi‚Äér‚Äée‚Äéd‚Äé ‚Äéf‚Äér‚Äéo‚Äém‚Äé ‚ÄéB‚Äée‚Äén‚Äé ‚ÄéS‚Äéh‚Äéa‚Äép‚Äéi‚Äér‚Äéo‚Äé‚Äô‚Äés‚Äé ‚ÄéD‚Äéa‚Äéi‚Äél‚Äéy‚Äé ‚ÄéW‚Äéi‚Äér‚Äée‚Äé ‚Äéf‚Äéo‚Äér‚Äé ‚Äés‚Äét‚Äéa‚Äén‚Äéd‚Äéi‚Äén‚Äég‚Äé ‚Äéu‚Äép‚Äé ‚Äét‚Äéo‚Äé ‚Äét‚Äéh‚Äée‚Äé ‚Äéb‚Äéa‚Äéb‚Äéy‚Äé-‚Äék‚Äéi‚Äél‚Äél‚Äée‚Äér‚Äé ‚ÄéJ‚Äée‚Äéw‚Äés‚Äé.‚Äé

T‚Äéh‚Äéi‚Äés‚Äé ‚Äéw‚Äéa‚Äés‚Äé ‚Äéi‚Äén‚Äée‚Äév‚Äéi‚Äét‚Äéa‚Äéb‚Äél‚Äée‚Äé.‚Äé ‚ÄéI‚Äé ‚Äéw‚Äéa‚Äés‚Äé ‚Äés‚Äéu‚Äér‚Äép‚Äér‚Äéi‚Äés‚Äée‚Äéd‚Äé ‚Äéi‚Äét‚Äé ‚Äét‚Äéo‚Äéo‚Äék‚Äé ‚Äét‚Äéh‚Äéi‚Äés‚Äé ‚Äél‚Äéo‚Äén‚Äég‚Äé.‚Äé

J‚Äée‚Äér‚Äée‚Äém‚Äéy‚Äé ‚ÄéB‚Äéo‚Äér‚Äée‚Äéi‚Äén‚Äég‚Äé,‚Äé ‚ÄéS‚Äéh‚Äéa‚Äép‚Äéi‚Äér‚Äéo‚Äé‚Äô‚Äés‚Äé ‚Äép‚Äéa‚Äér‚Äét‚Äén‚Äée‚Äér‚Äé,‚Äé ‚Äéa‚Äén‚Äén‚Äéo‚Äéu‚Äén‚Äéc‚Äée‚Äéd‚Äé ‚Äéo‚Äén‚Äé ‚ÄéT‚Äéw‚Äéi‚Äét‚Äét‚Äée‚Äér‚Äé ‚Äét‚Äéh‚Äéa‚Äét‚Äé ‚Äés‚Äéh‚Äée‚Äé ‚Äéw‚Äéa‚Äés‚Äé ‚Äéd‚Äér‚Äéo‚Äép‚Äép‚Äée‚Äéd‚Äé.‚Äé



W‚Äéh‚Äée‚Äén‚Äé ‚Äés‚Äéh‚Äée‚Äé ‚Äéw‚Äéa‚Äés‚Äé ‚Äéa‚Äés‚Äék‚Äée‚Äéd‚Äé ‚Äéa‚Äéb‚Äéo‚Äéu‚Äét‚Äé ‚Äéh‚Äée‚Äér‚Äé ‚Äér‚Äée‚Äél‚Äéa‚Äét‚Äéi‚Äéo‚Äén‚Äés‚Äéh‚Äéi‚Äép‚Äé ‚Äéw‚Äéi‚Äét‚Äéh‚Äé ‚ÄéB‚Äée‚Äén‚Äé ‚ÄéS‚Äéh‚Äéa‚Äép‚Äéi‚Äér‚Äéo‚Äé ‚Äéh‚Äéa‚Äév‚Äéi‚Äén‚Äég‚Äé ‚Äéd‚Äée‚Äég‚Äér‚Äéa‚Äéd‚Äée‚Äéd‚Äé ‚Äéi‚Äén‚Äé ‚Äét‚Äéh‚Äée‚Äé ‚Äéw‚Äéa‚Äék‚Äée‚Äé ‚Äéo‚Äéf‚Äé ‚ÄéO‚Äéc‚Äét‚Äéo‚Äéb‚Äée‚Äér‚Äé ‚Äé7‚Äé ‚Äéa‚Äén‚Äéd‚Äé ‚Äét‚Äéh‚Äée‚Äé ‚ÄéI‚Äés‚Äér‚Äéa‚Äée‚Äél‚Äéi‚Äé ‚Äéc‚Äéh‚Äéi‚Äél‚Äéd‚Äé ‚Äés‚Äél‚Äéa‚Äéu‚Äég‚Äéh‚Äét‚Äée‚Äér‚Äé ‚Äéc‚Äéa‚Äém‚Äép‚Äéa‚Äéi‚Äég‚Äén‚Äé,‚Äé ‚Äés‚Äéh‚Äée‚Äé ‚Äéc‚Äél‚Äéa‚Äéi‚Äém‚Äée‚Äéd‚Äé ‚Äét‚Äéh‚Äéa‚Äét‚Äé ‚Äé‚Äú‚ÄéB‚Äée‚Äén‚Äé ‚Äéi‚Äés‚Äé ‚Äén‚Äéo‚Äét‚Äé ‚Äém‚Äéy‚Äé ‚Äéb‚Äéo‚Äés‚Äés‚Äé,‚Äé‚Äù‚Äé ‚Äéa‚Äén‚Äéd‚Äé ‚Äét‚Äéh‚Äéa‚Äét‚Äé ‚Äés‚Äéh‚Äée‚Äé ‚Äéh‚Äéa‚Äéd‚Äé ‚Äéa‚Äé ‚Äég‚Äéo‚Äéo‚Äéd‚Äé ‚Äér‚Äée‚Äél‚Äéa‚Äét‚Äéi‚Äéo‚Äén‚Äés‚Äéh‚Äéi‚Äép‚Äé ‚Äéw‚Äéi‚Äét‚Äéh‚Äé ‚ÄéB‚Äéo‚Äér‚Äée‚Äéi‚Äén‚Äég‚Äé ‚Äé(‚Äéw‚Äéh‚Äéo‚Äé ‚Äéi‚Äés‚Äé ‚Äén‚Äéo‚Äét‚Äé ‚ÄéJ‚Äée‚Äéw‚Äéi‚Äés‚Äéh‚Äé)‚Äé.‚Äé

I‚Äé ‚Äéd‚Äéo‚Äén‚Äé‚Äô‚Äét‚Äé ‚Äék‚Äén‚Äéo‚Äéw‚Äé ‚Äée‚Äéx‚Äéa‚Äéc‚Äét‚Äél‚Äéy‚Äé ‚Äéh‚Äéo‚Äéw‚Äé ‚Äét‚Äéh‚Äée‚Äé ‚Äéc‚Äéo‚Äém‚Äép‚Äéa‚Äén‚Äéy‚Äé ‚Äéi‚Äés‚Äé ‚Äés‚Äét‚Äér‚Äéu‚Äéc‚Äét‚Äéu‚Äér‚Äée‚Äéd‚Äé,‚Äé ‚Äéb‚Äéu‚Äét‚Äé ‚ÄéI‚Äé ‚Äék‚Äén‚Äéo‚Äéw‚Äé ‚Äét‚Äéh‚Äéa‚Äét‚Äé ‚ÄéS‚Äéh‚Äéa‚Äép‚Äéi‚Äér‚Äéo‚Äé ‚Äés‚Äét‚Äéa‚Äér‚Äét‚Äée‚Äéd‚Äé ‚Äét‚Äéh‚Äée‚Äé ‚Äéc‚Äéo‚Äém‚Äép‚Äéa‚Äén‚Äéy‚Äé ‚Äéa‚Äén‚Äéd‚Äé ‚Äét‚Äéh‚Äéa‚Äét‚Äé ‚Äéh‚Äée‚Äé ‚Äéh‚Äéa‚Äéd‚Äé ‚Äét‚Äéh‚Äée‚Äé ‚Äéa‚Äéb‚Äéi‚Äél‚Äéi‚Äét‚Äéy‚Äé ‚Äét‚Äéo‚Äé ‚Äéf‚Äéo‚Äér‚Äéc‚Äée‚Äé ‚Äéh‚Äée‚Äér‚Äé ‚Äéo‚Äéu‚Äét‚Äé,‚Äé ‚Äér‚Äée‚Äég‚Äéa‚Äér‚Äéd‚Äél‚Äée‚Äés‚Äés‚Äé ‚Äéo‚Äéf‚Äé ‚Äéw‚Äéh‚Äée‚Äét‚Äéh‚Äée‚Äér‚Äé ‚Äéo‚Äér‚Äé ‚Äén‚Äéo‚Äét‚Äé ‚ÄéB‚Äéo‚Äér‚Äée‚Äéi‚Äén‚Äég‚Äé ‚Äéi‚Äés‚Äé ‚Äéo‚Äéf‚Äéf‚Äéi‚Äéc‚Äéi‚Äéa‚Äél‚Äél‚Äéy‚Äé ‚Äéh‚Äée‚Äér‚Äé ‚Äéb‚Äéo‚Äés‚Äés‚Äé.‚Äé

T‚Äéh‚Äée‚Äé ‚Äér‚Äée‚Äéa‚Äés‚Äéo‚Äén‚Äé ‚Äés‚Äéo‚Äém‚Äée‚Äéo‚Äén‚Äée‚Äé ‚Äém‚Äéi‚Äég‚Äéh‚Äét‚Äé ‚Äéw‚Äéa‚Äén‚Äét‚Äé ‚Äét‚Äéo‚Äé ‚Äék‚Äée‚Äée‚Äép‚Äé ‚Äéh‚Äée‚Äér‚Äé ‚Äéa‚Äér‚Äéo‚Äéu‚Äén‚Äéd‚Äé ‚Äéi‚Äés‚Äé ‚Äét‚Äéh‚Äéa‚Äét‚Äé ‚Äés‚Äéh‚Äée‚Äé‚Äô‚Äés‚Äé ‚Äév‚Äée‚Äér‚Äéy‚Äé ‚Äép‚Äéo‚Äép‚Äéu‚Äél‚Äéa‚Äér‚Äé,‚Äé ‚Äéa‚Äén‚Äéd‚Äé ‚Äés‚Äéh‚Äée‚Äé‚Äô‚Äés‚Äé ‚Äéa‚Äél‚Äés‚Äéo‚Äé ‚Äém‚Äéa‚Äér‚Äér‚Äéi‚Äée‚Äéd‚Äé ‚Äét‚Äéo‚Äé ‚Äéa‚Äé ‚Äég‚Äéu‚Äéy‚Äé ‚Äéw‚Äéh‚Äéo‚Äé ‚Äéi‚Äés‚Äé ‚Äév‚Äée‚Äér‚Äéy‚Äé ‚Äéw‚Äée‚Äéa‚Äél‚Äét‚Äéh‚Äéy‚Äé,‚Äé ‚Äés‚Äéo‚Äé ‚Äéh‚Äéa‚Äév‚Äéi‚Äén‚Äég‚Äé ‚Äéh‚Äée‚Äér‚Äé ‚Äét‚Äée‚Äét‚Äéh‚Äée‚Äér‚Äée‚Äéd‚Äé ‚Äét‚Äéo‚Äé ‚Äét‚Äéh‚Äée‚Äé ‚ÄéD‚Äéa‚Äéi‚Äél‚Äéy‚Äé ‚ÄéW‚Äéi‚Äér‚Äée‚Äé ‚Äém‚Äéi‚Äég‚Äéh‚Äét‚Äé ‚Äék‚Äée‚Äée‚Äép‚Äé ‚Äéh‚Äée‚Äér‚Äé ‚Äém‚Äéo‚Äéd‚Äée‚Äér‚Äéa‚Äét‚Äée‚Äéd‚Äé.‚Äé

N‚Äéo‚Äéw‚Äé,‚Äé ‚Äés‚Äéh‚Äée‚Äé‚Äô‚Äés‚Äé ‚Äéo‚Äéf‚Äéf‚Äé ‚Äét‚Äéh‚Äée‚Äé ‚Äép‚Äél‚Äéa‚Äén‚Äét‚Äéa‚Äét‚Äéi‚Äéo‚Äén‚Äé,‚Äé ‚Äés‚Äéo‚Äé ‚Äét‚Äéo‚Äé ‚Äés‚Äéa‚Äéy‚Äé.‚Äé ‚ÄéS‚Äéh‚Äée‚Äé‚Äô‚Äés‚Äé ‚Äér‚Äéi‚Äéd‚Äéi‚Äén‚Äég‚Äé ‚Äét‚Äéh‚Äée‚Äé ‚Äéu‚Äén‚Äéd‚Äée‚Äér‚Äég‚Äér‚Äéo‚Äéu‚Äén‚Äéd‚Äé ‚Äér‚Äéa‚Äéi‚Äél‚Äér‚Äéo‚Äéa‚Äéd‚Äé ‚Äét‚Äéo‚Äé ‚Äéf‚Äér‚Äée‚Äée‚Äéd‚Äéo‚Äém‚Äé.‚Äé

T‚Äéh‚Äée‚Äé ‚Äél‚Äéa‚Äés‚Äét‚Äé ‚Äés‚Äét‚Äér‚Äéa‚Äéw‚Äé ‚Äéw‚Äéa‚Äés‚Äé ‚Äéa‚Äép‚Äép‚Äéa‚Äér‚Äée‚Äén‚Äét‚Äél‚Äéy‚Äé ‚Äét‚Äéh‚Äée‚Äé ‚Äéi‚Äén‚Äét‚Äée‚Äér‚Äév‚Äéi‚Äée‚Äéw‚Äé ‚Äés‚Äéh‚Äée‚Äé ‚Äéd‚Äéi‚Äéd‚Äé ‚Äéa‚Äé ‚Äéc‚Äéo‚Äéu‚Äép‚Äél‚Äée‚Äé ‚Äéd‚Äéa‚Äéy‚Äés‚Äé ‚Äéa‚Äég‚Äéo‚Äé ‚Äéw‚Äéi‚Äét‚Äéh‚Äé ‚Äés‚Äéo‚Äém‚Äée‚Äé ‚Äél‚Äéu‚Äén‚Äéa‚Äét‚Äéi‚Äéc‚Äé ‚Äér‚Äéa‚Äéb‚Äéb‚Äéi‚Äé.‚Äé



S‚Äéh‚Äée‚Äé ‚Äéi‚Äés‚Äé ‚Äéd‚Äée‚Äéf‚Äéi‚Äén‚Äéi‚Äét‚Äée‚Äél‚Äéy‚Äé ‚Äéc‚Äér‚Äéo‚Äés‚Äés‚Äéi‚Äén‚Äég‚Äé ‚Äét‚Äéh‚Äée‚Äé ‚Äél‚Äéi‚Äén‚Äée‚Äé ‚Äéf‚Äér‚Äéo‚Äém‚Äé ‚Äéb‚Äée‚Äéi‚Äén‚Äég‚Äé ‚Äéa‚Äén‚Äét‚Äéi‚Äé-‚Äég‚Äée‚Äén‚Äéo‚Äéc‚Äéi‚Äéd‚Äée‚Äé ‚Äéi‚Äén‚Äét‚Äéo‚Äé ‚Äéa‚Äés‚Äék‚Äéi‚Äén‚Äég‚Äé ‚Äéw‚Äéh‚Äéa‚Äét‚Äé ‚Äée‚Äéx‚Äéa‚Äéc‚Äét‚Äél‚Äéy‚Äé ‚Äéi‚Äés‚Äé ‚Äég‚Äéo‚Äéi‚Äén‚Äég‚Äé ‚Äéo‚Äén‚Äé ‚Äéw‚Äéi‚Äét‚Äéh‚Äé ‚ÄéJ‚Äée‚Äéw‚Äés‚Äé ‚Äéi‚Äén‚Äé ‚Äég‚Äée‚Äén‚Äée‚Äér‚Äéa‚Äél‚Äé.‚Äé ‚ÄéT‚Äéh‚Äéi‚Äés‚Äé ‚Äéi‚Äés‚Äé ‚Äés‚Äéo‚Äér‚Äét‚Äé ‚Äéo‚Äéf‚Äé ‚Äét‚Äéh‚Äée‚Äé ‚Äéo‚Äép‚Äép‚Äéo‚Äés‚Äéi‚Äét‚Äée‚Äé ‚Äéo‚Äéf‚Äé ‚Äét‚Äéh‚Äée‚Äé ‚Äét‚Äér‚Äéa‚Äéc‚Äék‚Äé ‚Äét‚Äéh‚Äéa‚Äét‚Äé ‚ÄéE‚Äél‚Äéo‚Äén‚Äé ‚ÄéM‚Äéu‚Äés‚Äék‚Äé ‚Äét‚Äéo‚Äéo‚Äék‚Äé,‚Äé ‚Äéw‚Äéh‚Äée‚Äér‚Äée‚Äé ‚Äéh‚Äée‚Äé ‚Äéw‚Äéa‚Äés‚Äé ‚Äéq‚Äéu‚Äée‚Äés‚Äét‚Äéi‚Äéo‚Äén‚Äéi‚Äén‚Äég‚Äé ‚ÄéA‚Äém‚Äée‚Äér‚Äéi‚Äéc‚Äéa‚Äén‚Äé ‚ÄéJ‚Äée‚Äéw‚Äés‚Äé ‚Äéb‚Äée‚Äéc‚Äéa‚Äéu‚Äés‚Äée‚Äé ‚Äéo‚Äéf‚Äé ‚Äét‚Äéh‚Äée‚Äéi‚Äér‚Äé ‚Äéa‚Äét‚Äét‚Äéa‚Äéc‚Äék‚Äés‚Äé ‚Äéo‚Äén‚Äé ‚Äéh‚Äéi‚Äém‚Äé,‚Äé ‚Äéo‚Äén‚Äé ‚Äéf‚Äér‚Äée‚Äée‚Äéd‚Äéo‚Äém‚Äé ‚Äéo‚Äéf‚Äé ‚Äés‚Äép‚Äée‚Äée‚Äéc‚Äéh‚Äé,‚Äé ‚Äéa‚Äén‚Äéd‚Äé ‚Äéo‚Äén‚Äé ‚Äéw‚Äéh‚Äéi‚Äét‚Äée‚Äé ‚Äép‚Äée‚Äéo‚Äép‚Äél‚Äée‚Äé ‚Äéa‚Äén‚Äéd‚Äé ‚Äét‚Äéh‚Äée‚Äé ‚ÄéW‚Äée‚Äés‚Äét‚Äé,‚Äé ‚Äét‚Äéh‚Äée‚Äén‚Äé ‚Äéu‚Äés‚Äée‚Äéd‚Äé ‚Äér‚Äéi‚Äég‚Äéh‚Äét‚Äé-‚Äéw‚Äéi‚Äén‚Äég‚Äé ‚ÄéI‚Äés‚Äér‚Äéa‚Äée‚Äél‚Äé ‚ÄéJ‚Äée‚Äéw‚Äés‚Äé ‚Äéa‚Äés‚Äé ‚Äéa‚Äén‚Äé ‚Äée‚Äéx‚Äéi‚Äét‚Äé ‚Äés‚Äét‚Äér‚Äéa‚Äét‚Äée‚Äég‚Äéy‚Äé,‚Äé ‚Äéc‚Äéo‚Äéz‚Äéy‚Äéi‚Äén‚Äég‚Äé ‚Äéu‚Äép‚Äé ‚Äét‚Äéo‚Äé ‚Äét‚Äéh‚Äée‚Äém‚Äé ‚Äéa‚Äén‚Äéd‚Äé ‚Äéa‚Äéc‚Äét‚Äéi‚Äén‚Äég‚Äé ‚Äél‚Äéi‚Äék‚Äée‚Äé ‚Äéi‚Äét‚Äé ‚Äéi‚Äés‚Äé ‚Äéj‚Äéu‚Äés‚Äét‚Äé ‚Äé‚Äú‚Äél‚Äéi‚Äéb‚Äée‚Äér‚Äéa‚Äél‚Äé ‚ÄéJ‚Äée‚Äéw‚Äés‚Äé‚Äù‚Äé ‚Äét‚Äéh‚Äéa‚Äét‚Äé ‚Äéa‚Äér‚Äée‚Äé ‚Äét‚Äéh‚Äée‚Äé ‚Äép‚Äér‚Äéo‚Äéb‚Äél‚Äée‚Äém‚Äé.‚Äé

B‚Äéo‚Äét‚Äéh‚Äé ‚ÄéA‚Äém‚Äée‚Äér‚Äéi‚Äéc‚Äéa‚Äén‚Äé ‚Äéf‚Äér‚Äée‚Äée‚Äéd‚Äéo‚Äém‚Äé-‚Äéh‚Äéa‚Äét‚Äéi‚Äén‚Äég‚Äé ‚ÄéJ‚Äée‚Äéw‚Äés‚Äé ‚Äéa‚Äén‚Äéd‚Äé ‚ÄéI‚Äés‚Äér‚Äéa‚Äée‚Äél‚Äé-‚Äél‚Äéo‚Äév‚Äée‚Äér‚Äé ‚Äéb‚Äéa‚Äéb‚Äéy‚Äé-‚Äék‚Äéi‚Äél‚Äél‚Äée‚Äér‚Äé ‚ÄéJ‚Äée‚Äéw‚Äés‚Äé ‚Äéa‚Äér‚Äée‚Äé ‚Äét‚Äéh‚Äée‚Äé ‚Äép‚Äér‚Äéo‚Äéb‚Äél‚Äée‚Äém‚Äé.‚Äé ‚ÄéJ‚Äée‚Äéw‚Äés‚Äé,‚Äé ‚Äéi‚Äén‚Äé ‚Äég‚Äée‚Äén‚Äée‚Äér‚Äéa‚Äél‚Äé,‚Äé ‚Äéa‚Äér‚Äée‚Äé ‚Äét‚Äéh‚Äée‚Äé ‚Äép‚Äér‚Äéo‚Äéb‚Äél‚Äée‚Äém‚Äé.‚Äé ‚ÄéT‚Äéh‚Äée‚Äés‚Äée‚Äé ‚ÄéJ‚Äée‚Äéw‚Äés‚Äé ‚Äép‚Äél‚Äéa‚Äéy‚Äé ‚Äéa‚Äél‚Äél‚Äé ‚Äék‚Äéi‚Äén‚Äéd‚Äés‚Äé ‚Äéo‚Äéf‚Äé ‚Äéd‚Äéi‚Äéf‚Äéf‚Äée‚Äér‚Äée‚Äén‚Äét‚Äé ‚Äég‚Äéa‚Äém‚Äée‚Äés‚Äé ‚Äéw‚Äéi‚Äét‚Äéh‚Äé ‚Äéi‚Äéd‚Äée‚Äéo‚Äél‚Äéo‚Äég‚Äéy‚Äé,‚Äé ‚Äéb‚Äéu‚Äét‚Äé ‚Äéw‚Äéh‚Äée‚Äét‚Äéh‚Äée‚Äér‚Äé ‚Äét‚Äéh‚Äée‚Äéy‚Äé ‚Äéa‚Äér‚Äée‚Äé ‚Äél‚Äée‚Äéf‚Äét‚Äé-‚Äéw‚Äéi‚Äén‚Äég‚Äé ‚Äéo‚Äér‚Äé ‚Äér‚Äéi‚Äég‚Äéh‚Äét‚Äé-‚Äéw‚Äéi‚Äén‚Äég‚Äé,‚Äé ‚Äéy‚Äéo‚Äéu‚Äé ‚Äéw‚Äéi‚Äél‚Äél‚Äé ‚Äéf‚Äéi‚Äén‚Äéd‚Äé ‚Äéy‚Äéo‚Äéu‚Äér‚Äés‚Äée‚Äél‚Äéf‚Äé ‚Äég‚Äée‚Äét‚Äét‚Äéi‚Äén‚Äég‚Äé ‚Äév‚Äée‚Äér‚Äéy‚Äé ‚Äés‚Äée‚Äér‚Äéi‚Äéo‚Äéu‚Äés‚Äél‚Äéy‚Äé ‚Äék‚Äéi‚Äék‚Äée‚Äéd‚Äé ‚Äéb‚Äéy‚Äé ‚Äét‚Äéh‚Äée‚Äém‚Äé ‚Äéi‚Äén‚Äé ‚Äés‚Äéh‚Äéo‚Äér‚Äét‚Äé ‚Äéo‚Äér‚Äéd‚Äée‚Äér‚Äé.‚Äé

I‚Äé ‚Äéd‚Äéi‚Äéd‚Äén‚Äé‚Äô‚Äét‚Äé ‚Äéu‚Äés‚Äée‚Äé ‚Äét‚Äéo‚Äé ‚Äés‚Äéa‚Äéy‚Äé ‚Äét‚Äéh‚Äéi‚Äés‚Äé,‚Äé ‚Äéb‚Äéu‚Äét‚Äé ‚ÄéI‚Äé ‚Äéw‚Äéi‚Äél‚Äél‚Äé ‚Äén‚Äéo‚Äéw‚Äé ‚Äé(‚Äém‚Äéa‚Äéy‚Äéb‚Äée‚Äé ‚Äéb‚Äée‚Äéc‚Äéa‚Äéu‚Äés‚Äée‚Äé ‚ÄéI‚Äé‚Äô‚Äém‚Äé ‚Äéa‚Äé ‚Äém‚Äéi‚Äéd‚Äéd‚Äél‚Äée‚Äé-‚Äéa‚Äég‚Äée‚Äéd‚Äé ‚Äéa‚Äél‚Äéc‚Äéo‚Äéh‚Äéo‚Äél‚Äéi‚Äéc‚Äé ‚Äéw‚Äéi‚Äét‚Äéh‚Äé ‚Äéa‚Äé ‚Äéb‚Äér‚Äéa‚Äéi‚Äén‚Äé ‚Äét‚Äéu‚Äém‚Äéo‚Äér‚Äé ‚Äél‚Äéo‚Äéc‚Äék‚Äée‚Äéd‚Äé ‚Äéi‚Äén‚Äét‚Äéo‚Äé ‚Äéa‚Äé ‚Äés‚Äét‚Äéa‚Äét‚Äée‚Äé ‚Äéo‚Äéf‚Äé ‚Äéb‚Äéo‚Äét‚Äéc‚Äéh‚Äée‚Äéd‚Äé ‚Äéc‚Äéo‚Äén‚Äév‚Äéa‚Äél‚Äée‚Äés‚Äéc‚Äée‚Äén‚Äéc‚Äée‚Äé)‚Äé:‚Äé ‚Äéi‚Äét‚Äé‚Äô‚Äés‚Äé ‚Äén‚Äéo‚Äét‚Äé ‚Äén‚Äée‚Äéc‚Äée‚Äés‚Äés‚Äéa‚Äér‚Äéi‚Äél‚Äéy‚Äé ‚Äé‚Äú‚Äée‚Äév‚Äée‚Äér‚Äéy‚Äé ‚Äés‚Äéi‚Äén‚Äég‚Äél‚Äée‚Äé ‚ÄéJ‚Äée‚Äéw‚Äéi‚Äés‚Äéh‚Äé ‚Äép‚Äée‚Äér‚Äés‚Äéo‚Äén‚Äé‚Äù‚Äé ‚Äét‚Äéh‚Äéa‚Äét‚Äé ‚Äéi‚Äés‚Äé ‚Äéa‚Äé ‚Äép‚Äér‚Äéo‚Äéb‚Äél‚Äée‚Äém‚Äé.‚Äé ‚ÄéI‚Äét‚Äé ‚Äéi‚Äés‚Äé,‚Äé ‚Äéh‚Äéo‚Äéw‚Äée‚Äév‚Äée‚Äér‚Äé,‚Äé ‚Äée‚Äév‚Äée‚Äér‚Äéy‚Äé ‚Äés‚Äéi‚Äén‚Äég‚Äél‚Äée‚Äé ‚ÄéJ‚Äée‚Äéw‚Äéi‚Äés‚Äéh‚Äé ‚Äép‚Äée‚Äér‚Äés‚Äéo‚Äén‚Äé ‚Äét‚Äéh‚Äéa‚Äét‚Äé ‚Äéi‚Äés‚Äé ‚Äéi‚Äén‚Äév‚Äéo‚Äél‚Äév‚Äée‚Äéd‚Äé ‚Äéi‚Äén‚Äé ‚Äé‚Äú‚Äéo‚Äér‚Äég‚Äéa‚Äén‚Äéi‚Äéz‚Äée‚Äéd‚Äé ‚Äéw‚Äéo‚Äér‚Äél‚Äéd‚Äé ‚ÄéJ‚Äée‚Äéw‚Äér‚Äéy‚Äé‚Äù‚Äé ‚Äét‚Äéh‚Äéa‚Äét‚Äé ‚Äéi‚Äés‚Äé ‚Äét‚Äéh‚Äée‚Äé ‚Äép‚Äér‚Äéo‚Äéb‚Äél‚Äée‚Äém‚Äé.‚Äé

Y‚Äéo‚Äéu‚Äé ‚Äék‚Äén‚Äéo‚Äéw‚Äé,‚Äé ‚ÄéI‚Äé ‚Äéh‚Äéa‚Äév‚Äée‚Äé ‚Äéa‚Äé ‚Äél‚Äéo‚Äét‚Äé ‚Äéo‚Äéf‚Äé ‚Äén‚Äéa‚Äés‚Äét‚Äéy‚Äé ‚Äét‚Äéh‚Äéi‚Äén‚Äég‚Äés‚Äé ‚Äét‚Äéo‚Äé ‚Äés‚Äéa‚Äéy‚Äé ‚Äéa‚Äéb‚Äéo‚Äéu‚Äét‚Äé ‚Äéb‚Äél‚Äéa‚Äéc‚Äék‚Äé ‚Äép‚Äée‚Äéo‚Äép‚Äél‚Äée‚Äé,‚Äé ‚Äéa‚Äén‚Äéd‚Äé ‚Äéa‚Äéb‚Äéo‚Äéu‚Äét‚Äé ‚Äéw‚Äéo‚Äém‚Äée‚Äén‚Äé ‚Äéf‚Äéo‚Äér‚Äé ‚Äét‚Äéh‚Äéa‚Äét‚Äé ‚Äém‚Äéa‚Äét‚Äét‚Äée‚Äér‚Äé,‚Äé ‚Äéa‚Äén‚Äéd‚Äé ‚ÄéC‚Äéa‚Äén‚Äéd‚Äéa‚Äéc‚Äée‚Äé ‚Äéi‚Äés‚Äé ‚Äén‚Äéo‚Äéw‚Äé ‚Äém‚Äéy‚Äé ‚Äéh‚Äée‚Äér‚Äéo‚Äé.‚Äé ‚ÄéS‚Äéo‚Äé,‚Äé ‚Äéi‚Äén‚Äéd‚Äéi‚Äév‚Äéi‚Äéd‚Äéu‚Äéa‚Äél‚Äés‚Äé ‚Äée‚Äéx‚Äéi‚Äés‚Äét‚Äé ‚Äéa‚Äén‚Äéd‚Äé ‚Äéw‚Äée‚Äé ‚Äéc‚Äéa‚Äén‚Äé ‚Äéa‚Äéc‚Äék‚Äén‚Äéo‚Äéw‚Äél‚Äée‚Äéd‚Äég‚Äée‚Äé ‚Äét‚Äéh‚Äéa‚Äét‚Äé,‚Äé ‚Äéb‚Äéu‚Äét‚Äé ‚Äéj‚Äéu‚Äés‚Äét‚Äé ‚Äéa‚Äés‚Äé ‚Äéw‚Äée‚Äé ‚Äét‚Äéa‚Äél‚Äék‚Äé ‚Äéa‚Äéb‚Äéo‚Äéu‚Äét‚Äé ‚Äé‚Äú‚Äét‚Äéh‚Äée‚Äé ‚ÄéI‚Äét‚Äéa‚Äél‚Äéi‚Äéa‚Äén‚Äé ‚ÄéM‚Äéa‚Äéf‚Äéi‚Äéa‚Äé‚Äù‚Äé ‚Äéa‚Äén‚Äéd‚Äé ‚Äé‚Äú‚Äéb‚Äél‚Äéa‚Äéc‚Äék‚Äé ‚Äég‚Äéa‚Äén‚Äég‚Äés‚Äé,‚Äé‚Äù‚Äé ‚Äéw‚Äée‚Äé ‚Äén‚Äée‚Äée‚Äéd‚Äé ‚Äét‚Äéo‚Äé ‚Äéb‚Äée‚Äé ‚Äéa‚Äéb‚Äél‚Äée‚Äé ‚Äét‚Äéo‚Äé ‚Äét‚Äéa‚Äél‚Äék‚Äé ‚Äéa‚Äéb‚Äéo‚Äéu‚Äét‚Äé ‚Äé‚Äú‚Äét‚Äéh‚Äée‚Äé ‚ÄéJ‚Äée‚Äéw‚Äéi‚Äés‚Äéh‚Äé ‚ÄéP‚Äér‚Äéo‚Äéb‚Äél‚Äée‚Äém‚Äé.‚Äé‚Äù‚Äé ‚ÄéB‚Äée‚Äéc‚Äéa‚Äéu‚Äés‚Äée‚Äé ‚Äét‚Äéh‚Äée‚Äé ‚ÄéJ‚Äée‚Äéw‚Äés‚Äé ‚Äéa‚Äér‚Äée‚Äé ‚Äét‚Äéh‚Äée‚Äé ‚Äép‚Äér‚Äéo‚Äéb‚Äél‚Äée‚Äém‚Äé,‚Äé ‚Äéa‚Äén‚Äéd‚Äé ‚Äét‚Äéh‚Äéi‚Äés‚Äé ‚Äéw‚Äéh‚Äéo‚Äél‚Äée‚Äé ‚Äé‚Äú‚Äéo‚Äéh‚Äé ‚Äéw‚Äée‚Äél‚Äél‚Äé,‚Äé ‚Äét‚Äéh‚Äée‚Äér‚Äée‚Äé ‚Äéa‚Äér‚Äée‚Äé ‚Äél‚Äée‚Äéf‚Äét‚Äé ‚Äéa‚Äén‚Äéd‚Äé ‚Äér‚Äéi‚Äég‚Äéh‚Äét‚Äé ‚ÄéJ‚Äée‚Äéw‚Äés‚Äé‚Äù‚Äé ‚Äét‚Äéh‚Äéi‚Äén‚Äég‚Äé ‚Äéi‚Äés‚Äé ‚Äén‚Äéo‚Äét‚Äé ‚Äéw‚Äéo‚Äér‚Äék‚Äéi‚Äén‚Äég‚Äé ‚Äéa‚Äét‚Äé ‚Äéa‚Äél‚Äél‚Äé.‚Äé ‚ÄéI‚Äét‚Äé‚Äô‚Äés‚Äé ‚Äéf‚Äéi‚Äén‚Äée‚Äé ‚Äéi‚Äéf‚Äé ‚Äéy‚Äéo‚Äéu‚Äé ‚Äéw‚Äéa‚Äén‚Äét‚Äé ‚Äét‚Äéo‚Äé ‚Äés‚Äéa‚Äéy‚Äé ‚Äé‚Äú‚Äéw‚Äée‚Äél‚Äél‚Äé,‚Äé ‚ÄéI‚Äé ‚Äék‚Äén‚Äéo‚Äéw‚Äé ‚Äéa‚Äé ‚ÄéJ‚Äée‚Äéw‚Äéi‚Äés‚Äéh‚Äé ‚Äég‚Äéu‚Äéy‚Äé ‚Äéw‚Äéh‚Äéo‚Äé‚Äô‚Äés‚Äé ‚Äéo‚Äék‚Äéa‚Äéy‚Äé.‚Äé‚Äù‚Äé ‚ÄéF‚Äér‚Äéa‚Äén‚Äék‚Äél‚Äéy‚Äé,‚Äé ‚Äét‚Äéh‚Äée‚Äéy‚Äé ‚Äés‚Äéh‚Äéo‚Äéu‚Äél‚Äéd‚Äé ‚Äéb‚Äée‚Äé ‚Äéb‚Äéa‚Äép‚Äét‚Äéi‚Äéz‚Äée‚Äéd‚Äé ‚Äéi‚Äéf‚Äé ‚Äét‚Äéh‚Äée‚Äéy‚Äé ‚Äéa‚Äér‚Äée‚Äé ‚Äé‚Äú‚Äéo‚Äék‚Äéa‚Äéy‚Äé,‚Äé‚Äù‚Äé ‚Äéb‚Äéu‚Äét‚Äé ‚Äéo‚Äék‚Äéa‚Äéy‚Äé.‚Äé ‚ÄéR‚Äée‚Äég‚Äéa‚Äér‚Äéd‚Äél‚Äée‚Äés‚Äés‚Äé,‚Äé ‚Äét‚Äéh‚Äée‚Äér‚Äée‚Äé ‚Äéi‚Äés‚Äé ‚Äén‚Äéo‚Äé ‚Äég‚Äér‚Äéo‚Äéu‚Äép‚Äé ‚Äéi‚Äén‚Äév‚Äéo‚Äél‚Äév‚Äée‚Äéd‚Äé ‚Äéi‚Äén‚Äé ‚Äé‚Äú‚Äéo‚Äér‚Äég‚Äéa‚Äén‚Äéi‚Äéz‚Äée‚Äéd‚Äé ‚ÄéJ‚Äée‚Äéw‚Äér‚Äéy‚Äé‚Äù‚Äé ‚Äét‚Äéh‚Äéa‚Äét‚Äé ‚Äéi‚Äés‚Äé ‚Äén‚Äéo‚Äét‚Äé ‚Äéa‚Äé ‚Äép‚Äér‚Äéo‚Äéb‚Äél‚Äée‚Äém‚Äé,‚Äé ‚Äéa‚Äén‚Äéd‚Äé ‚Äéo‚Äér‚Äég‚Äéa‚Äén‚Äéi‚Äéz‚Äée‚Äéd‚Äé ‚ÄéJ‚Äée‚Äéw‚Äér‚Äéy‚Äé ‚Äés‚Äép‚Äéa‚Äén‚Äés‚Äé ‚Äéa‚Äé ‚Äéw‚Äéi‚Äéd‚Äée‚Äé ‚Äér‚Äéa‚Äén‚Äég‚Äée‚Äé ‚Äéo‚Äéf‚Äé ‚Äéi‚Äéd‚Äée‚Äéo‚Äél‚Äéo‚Äég‚Äéi‚Äée‚Äés‚Äé ‚Äéa‚Äéc‚Äér‚Äéo‚Äés‚Äés‚Äé ‚Äét‚Äéh‚Äée‚Äé ‚Äég‚Äél‚Äéo‚Äéb‚Äée‚Äé.‚Äé

C‚Äéa‚Äén‚Äéd‚Äéa‚Äéc‚Äée‚Äé ‚Äéw‚Äéa‚Äés‚Äé ‚Äéb‚Äér‚Äéi‚Äén‚Äég‚Äéi‚Äén‚Äég‚Äé ‚Äét‚Äéh‚Äéi‚Äés‚Äé ‚Äéa‚Äél‚Äél‚Äé ‚Äét‚Äéo‚Äég‚Äée‚Äét‚Äéh‚Äée‚Äér‚Äé ‚Äéo‚Äén‚Äé ‚Äéh‚Äée‚Äér‚Äé ‚Äés‚Äéh‚Äéo‚Äéw‚Äé.‚Äé ‚ÄéB‚Äée‚Äéf‚Äéo‚Äér‚Äée‚Äé ‚Äét‚Äéh‚Äée‚Äé ‚Äér‚Äéa‚Äéb‚Äéb‚Äéi‚Äé ‚Äéi‚Äén‚Äét‚Äée‚Äér‚Äév‚Äéi‚Äée‚Äéw‚Äé ‚Äéa‚Äéb‚Äéo‚Äév‚Äée‚Äé,‚Äé ‚Äés‚Äéh‚Äée‚Äé ‚Äéw‚Äéa‚Äés‚Äé ‚Äéb‚Äéu‚Äéi‚Äél‚Äéd‚Äéi‚Äén‚Äég‚Äé ‚Äéa‚Äé ‚Äéc‚Äéa‚Äés‚Äée‚Äé ‚Äéa‚Äég‚Äéa‚Äéi‚Äén‚Äés‚Äét‚Äé ‚Äét‚Äéh‚Äée‚Äé ‚ÄéJ‚Äée‚Äéw‚Äés‚Äé ‚Äéi‚Äén‚Äé ‚Äév‚Äéa‚Äér‚Äéi‚Äéo‚Äéu‚Äés‚Äé ‚Äéd‚Äéi‚Äéf‚Äéf‚Äée‚Äér‚Äée‚Äén‚Äét‚Äé ‚Äéw‚Äéa‚Äéy‚Äés‚Äé,‚Äé ‚Äéi‚Äén‚Äéc‚Äél‚Äéu‚Äéd‚Äéi‚Äén‚Äég‚Äé ‚Äée‚Äéx‚Äép‚Äéo‚Äés‚Äéi‚Äén‚Äég‚Äé ‚Äét‚Äéh‚Äée‚Äé ‚Äéf‚Äéa‚Äéc‚Äét‚Äé ‚Äét‚Äéh‚Äéa‚Äét‚Äé ‚Äéb‚Äéa‚Äés‚Äéi‚Äéc‚Äéa‚Äél‚Äél‚Äéy‚Äé ‚Äéa‚Äél‚Äél‚Äé ‚Äéo‚Äéf‚Äé ‚Äét‚Äéh‚Äée‚Äé ‚Äé‚Äú‚ÄéR‚Äéu‚Äés‚Äés‚Äéi‚Äéa‚Äén‚Äé‚Äù‚Äé ‚Äéc‚Äéo‚Äém‚Äém‚Äéu‚Äén‚Äéi‚Äés‚Äét‚Äé ‚Äém‚Äéa‚Äés‚Äés‚Äé ‚Äém‚Äéu‚Äér‚Äéd‚Äée‚Äér‚Äée‚Äér‚Äés‚Äé ‚Äéw‚Äée‚Äér‚Äée‚Äé ‚ÄéJ‚Äée‚Äéw‚Äéi‚Äés‚Äéh‚Äé.‚Äé ‚ÄéT‚Äéh‚Äéi‚Äés‚Äé ‚Äéi‚Äés‚Äé ‚Äév‚Äée‚Äér‚Äéy‚Äé ‚Äés‚Äém‚Äéa‚Äér‚Äét‚Äé ‚Äéf‚Äéo‚Äér‚Äé ‚Äéa‚Äé ‚Äép‚Äéo‚Äép‚Äéu‚Äél‚Äéa‚Äér‚Äé ‚Äéf‚Äéi‚Äég‚Äéu‚Äér‚Äée‚Äé ‚Äél‚Äéi‚Äék‚Äée‚Äé ‚Äéh‚Äée‚Äér‚Äé.‚Äé

T‚Äéh‚Äée‚Äé ‚Äéi‚Äés‚Äés‚Äéu‚Äée‚Äé ‚Äéi‚Äés‚Äé:‚Äé ‚Äén‚Äéo‚Äé ‚Äéo‚Äén‚Äée‚Äé ‚Äéi‚Äés‚Äé ‚Äég‚Äéo‚Äéi‚Äén‚Äég‚Äé ‚Äét‚Äéo‚Äé ‚Äéd‚Äée‚Äén‚Äéy‚Äé ‚Äét‚Äéh‚Äée‚Äé ‚ÄéH‚Äéo‚Äél‚Äéo‚Äéc‚Äéa‚Äéu‚Äés‚Äét‚Äé ‚Äéa‚Äén‚Äéy‚Äé ‚Äét‚Äéi‚Äém‚Äée‚Äé ‚Äés‚Äéo‚Äéo‚Äén‚Äé.‚Äé ‚ÄéT‚Äéh‚Äée‚Äé ‚Äég‚Äéa‚Äém‚Äée‚Äé ‚Äéi‚Äés‚Äé ‚Äét‚Äéo‚Äé ‚Äés‚Äéi‚Äém‚Äép‚Äél‚Äéy‚Äé ‚Äéb‚Äéy‚Äép‚Äéa‚Äés‚Äés‚Äé ‚Äéi‚Äét‚Äé ‚Äéb‚Äéy‚Äé ‚Äét‚Äée‚Äél‚Äél‚Äéi‚Äén‚Äég‚Äé ‚Äét‚Äéh‚Äée‚Äé ‚ÄéJ‚Äée‚Äéw‚Äés‚Äé ‚Äét‚Äéo‚Äé ‚Äés‚Äéh‚Äéu‚Äét‚Äé ‚Äéu‚Äép‚Äé ‚Äéa‚Äén‚Äéd‚Äé ‚Äés‚Äét‚Äéo‚Äép‚Äé ‚Äéw‚Äéh‚Äéi‚Äén‚Äéi‚Äén‚Äég‚Äé.‚Äé ‚ÄéI‚Äén‚Äé ‚Äét‚Äéh‚Äée‚Äé ‚Äél‚Äéo‚Äén‚Äég‚Äée‚Äér‚Äé ‚Äét‚Äée‚Äér‚Äém‚Äé,‚Äé ‚Äép‚Äée‚Äéo‚Äép‚Äél‚Äée‚Äé ‚Äéa‚Äér‚Äée‚Äé ‚Äég‚Äéo‚Äéi‚Äén‚Äég‚Äé ‚Äét‚Äéo‚Äé ‚Äéh‚Äéa‚Äév‚Äée‚Äé ‚Äét‚Äéo‚Äé ‚Äéa‚Äéd‚Äéd‚Äér‚Äée‚Äés‚Äés‚Äé ‚Äét‚Äéh‚Äée‚Äé ‚Äéf‚Äéa‚Äéc‚Äét‚Äé ‚Äét‚Äéh‚Äéa‚Äét‚Äé ‚Äét‚Äéh‚Äée‚Äér‚Äée‚Äé ‚Äéw‚Äée‚Äér‚Äée‚Äé ‚Äén‚Äéo‚Äé ‚Äéh‚Äéo‚Äém‚Äéi‚Äéc‚Äéi‚Äéd‚Äéa‚Äél‚Äé ‚Äég‚Äéa‚Äés‚Äé ‚Äéc‚Äéh‚Äéa‚Äém‚Äéb‚Äée‚Äér‚Äés‚Äé ‚Äéa‚Äét‚Äé ‚ÄéA‚Äéu‚Äés‚Äéc‚Äéh‚Äéw‚Äéi‚Äét‚Äéz‚Äé,‚Äé ‚Äéb‚Äéu‚Äét‚Äé ‚Äét‚Äéh‚Äéa‚Äét‚Äé ‚Äéi‚Äés‚Äé ‚Äéa‚Äé ‚Äél‚Äéo‚Äén‚Äég‚Äé ‚Äég‚Äéa‚Äém‚Äée‚Äé.‚Äé ‚ÄéR‚Äéi‚Äég‚Äéh‚Äét‚Äé ‚Äén‚Äéo‚Äéw‚Äé,‚Äé ‚Äéw‚Äée‚Äé ‚Äéa‚Äér‚Äée‚Äé ‚Äég‚Äée‚Äét‚Äét‚Äéi‚Äén‚Äég‚Äé ‚Äév‚Äée‚Äér‚Äéy‚Äé ‚Äéc‚Äél‚Äéo‚Äés‚Äée‚Äé ‚Äét‚Äéo‚Äé ‚Äét‚Äéh‚Äée‚Äé ‚Äép‚Äéo‚Äéi‚Äén‚Äét‚Äé ‚Äéw‚Äéh‚Äée‚Äér‚Äée‚Äé ‚Äép‚Äée‚Äéo‚Äép‚Äél‚Äée‚Äé ‚Äéj‚Äéu‚Äés‚Äét‚Äé ‚Äés‚Äét‚Äéa‚Äér‚Äét‚Äé ‚Äét‚Äée‚Äél‚Äél‚Äéi‚Äén‚Äég‚Äé ‚Äét‚Äéh‚Äée‚Äés‚Äée‚Äé ‚ÄéJ‚Äée‚Äéw‚Äés‚Äé ‚Äét‚Äéh‚Äée‚Äéy‚Äé‚Äô‚Äér‚Äée‚Äé ‚Äét‚Äéi‚Äér‚Äée‚Äéd‚Äé ‚Äéo‚Äéf‚Äé ‚Äéh‚Äée‚Äéa‚Äér‚Äéi‚Äén‚Äég‚Äé ‚Äéa‚Äéb‚Äéo‚Äéu‚Äét‚Äé ‚Äét‚Äéh‚Äée‚Äé ‚ÄéH‚Äéo‚Äél‚Äéo‚Äéc‚Äéa‚Äéu‚Äés‚Äét‚Äé.‚Äé ‚ÄéW‚Äéh‚Äée‚Äén‚Äé ‚Äéy‚Äéo‚Äéu‚Äé ‚Äéb‚Äéu‚Äéi‚Äél‚Äéd‚Äé ‚Äéu‚Äép‚Äé ‚Äét‚Äéh‚Äée‚Äé ‚Äéc‚Äéa‚Äés‚Äée‚Äé ‚Äét‚Äéh‚Äéa‚Äét‚Äé ‚Äét‚Äéh‚Äée‚Äé ‚ÄéJ‚Äée‚Äéw‚Äés‚Äé ‚Äéd‚Äéi‚Äéd‚Äé ‚Äém‚Äéu‚Äéc‚Äéh‚Äé ‚Äéw‚Äéo‚Äér‚Äés‚Äée‚Äé ‚Äét‚Äéh‚Äéi‚Äén‚Äég‚Äés‚Äé ‚Äét‚Äéo‚Äé ‚Äét‚Äéh‚Äée‚Äé ‚ÄéR‚Äéu‚Äés‚Äés‚Äéi‚Äéa‚Äén‚Äés‚Äé ‚Äét‚Äéh‚Äéa‚Äén‚Äé ‚Äét‚Äéh‚Äée‚Äé ‚ÄéN‚Äéa‚Äéz‚Äéi‚Äés‚Äé ‚Äé(‚Äés‚Äéu‚Äép‚Äép‚Äéo‚Äés‚Äée‚Äéd‚Äél‚Äéy‚Äé)‚Äé ‚Äéd‚Äéi‚Äéd‚Äé ‚Äét‚Äéo‚Äé ‚Äét‚Äéh‚Äée‚Äém‚Äé,‚Äé ‚Äéy‚Äéo‚Äéu‚Äé‚Äô‚Äév‚Äée‚Äé ‚Äéc‚Äér‚Äée‚Äéa‚Äét‚Äée‚Äéd‚Äé ‚Äéa‚Äé ‚Äém‚Äéo‚Äér‚Äéa‚Äél‚Äé ‚Äée‚Äéq‚Äéu‚Äéi‚Äév‚Äéa‚Äél‚Äée‚Äén‚Äéc‚Äéy‚Äé ‚Äét‚Äéh‚Äéa‚Äét‚Äé ‚Äéc‚Äéa‚Äén‚Äé ‚Äéb‚Äée‚Äé ‚Äéu‚Äés‚Äée‚Äéd‚Äé ‚Äét‚Äéo‚Äé ‚Äés‚Äéi‚Äél‚Äée‚Äén‚Äéc‚Äée‚Äé ‚ÄéJ‚Äée‚Äéw‚Äéi‚Äés‚Äéh‚Äé ‚ÄéH‚Äéo‚Äél‚Äéo‚Äéc‚Äéa‚Äéu‚Äés‚Äét‚Äé ‚Äéw‚Äéh‚Äéi‚Äén‚Äéi‚Äén‚Äég‚Äé.‚Äé ‚ÄéI‚Äéf‚Äé ‚Äét‚Äéh‚Äée‚Äé ‚ÄéJ‚Äée‚Äéw‚Äés‚Äé ‚Äéa‚Äér‚Äée‚Äé ‚Äém‚Äéo‚Äér‚Äéa‚Äél‚Äél‚Äéy‚Äé ‚Äée‚Äéq‚Äéu‚Äéi‚Äév‚Äéa‚Äél‚Äée‚Äén‚Äét‚Äé ‚Äét‚Äéo‚Äé ‚Äét‚Äéh‚Äée‚Äé ‚ÄéN‚Äéa‚Äéz‚Äéi‚Äés‚Äé,‚Äé ‚Äét‚Äéh‚Äée‚Äéy‚Äé ‚Äéd‚Äéo‚Äén‚Äé‚Äô‚Äét‚Äé ‚Äéh‚Äéa‚Äév‚Äée‚Äé ‚Äéa‚Äén‚Äéy‚Äé ‚Äér‚Äéi‚Äég‚Äéh‚Äét‚Äé ‚Äét‚Äéo‚Äé ‚Äéu‚Äés‚Äée‚Äé ‚Äé‚Äú‚Äéo‚Äéh‚Äé ‚Äéb‚Äéu‚Äét‚Äé ‚Äét‚Äéh‚Äée‚Äé ‚ÄéN‚Äéa‚Äéz‚Äéi‚Äés‚Äé‚Äù‚Äé ‚Äéa‚Äés‚Äé ‚Äéa‚Äé ‚Äés‚Äéh‚Äéi‚Äée‚Äél‚Äéd‚Äé.‚Äé

Y‚Äéo‚Äéu‚Äé ‚Äéh‚Äéa‚Äév‚Äée‚Äé ‚Äét‚Äéo‚Äé ‚Äéj‚Äéu‚Äés‚Äét‚Äé ‚Äét‚Äée‚Äél‚Äél‚Äé ‚Äét‚Äéh‚Äée‚Äés‚Äée‚Äé ‚ÄéJ‚Äée‚Äéw‚Äés‚Äé ‚Äét‚Äéo‚Äé ‚Äés‚Äéh‚Äéu‚Äét‚Äé ‚Äéu‚Äép‚Äé ‚Äéa‚Äén‚Äéd‚Äé ‚Äés‚Äét‚Äéo‚Äép‚Äé ‚Äéw‚Äéh‚Äéi‚Äén‚Äéi‚Äén‚Äég‚Äé,‚Äé ‚Äéy‚Äéo‚Äéu‚Äé ‚Äéa‚Äér‚Äée‚Äé ‚Äét‚Äéi‚Äér‚Äée‚Äéd‚Äé ‚Äéo‚Äéf‚Äé ‚Äéh‚Äée‚Äéa‚Äér‚Äéi‚Äén‚Äég‚Äé ‚Äéa‚Äéb‚Äéo‚Äéu‚Äét‚Äé ‚Äéh‚Äéo‚Äéw‚Äé ‚Äét‚Äéh‚Äée‚Äéy‚Äé ‚Äéa‚Äér‚Äée‚Äé ‚Äés‚Äéu‚Äéc‚Äéh‚Äé ‚Äév‚Äéi‚Äéc‚Äét‚Äéi‚Äém‚Äés‚Äé.‚Äé ‚ÄéW‚Äée‚Äé ‚Äéh‚Äéa‚Äév‚Äée‚Äé ‚Äét‚Äéo‚Äé ‚Äéb‚Äée‚Äé ‚Äéa‚Äéb‚Äél‚Äée‚Äé ‚Äét‚Äéo‚Äé ‚Äéa‚Äéd‚Äéd‚Äér‚Äée‚Äés‚Äés‚Äé ‚Äé‚Äú‚Äét‚Äéh‚Äée‚Äé ‚ÄéJ‚Äée‚Äéw‚Äés‚Äé‚Äù‚Äé ‚Äéa‚Äés‚Äé ‚Äéb‚Äée‚Äéi‚Äén‚Äég‚Äé ‚Äéa‚Äét‚Äé ‚Äét‚Äéh‚Äée‚Äé ‚Äér‚Äéo‚Äéo‚Äét‚Äé ‚Äéo‚Äéf‚Äé ‚Äéa‚Äél‚Äél‚Äé ‚Äéo‚Äéf‚Äé ‚Äét‚Äéh‚Äée‚Äés‚Äée‚Äé ‚Äép‚Äér‚Äéo‚Äéb‚Äél‚Äée‚Äém‚Äés‚Äé.‚Äé ‚ÄéT‚Äéh‚Äée‚Äér‚Äée‚Äé ‚Äéi‚Äés‚Äé ‚Äén‚Äéo‚Äé ‚Äéc‚Äéh‚Äéo‚Äéi‚Äéc‚Äée‚Äé.‚Äé ‚ÄéE‚Äéi‚Äét‚Äéh‚Äée‚Äér‚Äé ‚Äéw‚Äée‚Äé ‚Äés‚Äét‚Äéa‚Äér‚Äét‚Äé ‚Äés‚Äéa‚Äéy‚Äéi‚Äén‚Äég‚Äé ‚Äé‚Äú‚ÄéT‚Äéh‚Äée‚Äé ‚ÄéJ‚Äée‚Äéw‚Äés‚Äé,‚Äé‚Äù‚Äé ‚Äéo‚Äér‚Äé ‚Äéa‚Äél‚Äél‚Äé ‚Äél‚Äéi‚Äéf‚Äée‚Äé ‚Äéo‚Äén‚Äé ‚Äée‚Äéa‚Äér‚Äét‚Äéh‚Äé ‚Äéw‚Äéi‚Äél‚Äél‚Äé ‚Äéd‚Äéi‚Äée‚Äé.‚Äé

I‚Äét‚Äé‚Äô‚Äés‚Äé ‚Äéa‚Äél‚Äér‚Äée‚Äéa‚Äéd‚Äéy‚Äé ‚Äés‚Äét‚Äéa‚Äér‚Äét‚Äéi‚Äén‚Äég‚Äé ‚Äét‚Äéo‚Äé ‚Äéh‚Äéa‚Äép‚Äép‚Äée‚Äén‚Äé.‚Äé ‚ÄéI‚Äé ‚Äéw‚Äéa‚Äés‚Äé ‚Äéw‚Äéa‚Äét‚Äéc‚Äéh‚Äéi‚Äén‚Äég‚Äé ‚ÄéR‚Äéu‚Äés‚Äés‚Äéi‚Äéa‚Äén‚Äé ‚Äés‚Äéh‚Äéi‚Äél‚Äél‚Äé ‚ÄéS‚Äéc‚Äéo‚Äét‚Äét‚Äé ‚ÄéR‚Äéi‚Äét‚Äét‚Äée‚Äér‚Äé ‚Äéo‚Äén‚Äé ‚ÄéJ‚Äéu‚Äéd‚Äég‚Äée‚Äé ‚ÄéN‚Äéa‚Äép‚Äéo‚Äél‚Äéi‚Äét‚Äéa‚Äén‚Äéo‚Äé ‚Äéy‚Äée‚Äés‚Äét‚Äée‚Äér‚Äéd‚Äéa‚Äéy‚Äé,‚Äé ‚Äéa‚Äén‚Äéd‚Äé ‚Äéh‚Äée‚Äé ‚Äés‚Äéa‚Äéi‚Äéd‚Äé ‚Äé‚Äú‚Äép‚Äée‚Äéo‚Äép‚Äél‚Äée‚Äé ‚Äés‚Äéa‚Äéy‚Äé ‚Äét‚Äéh‚Äéa‚Äét‚Äé ‚ÄéI‚Äés‚Äér‚Äéa‚Äée‚Äél‚Äé ‚Äéc‚Äéo‚Äén‚Äét‚Äér‚Äéo‚Äél‚Äés‚Äé ‚ÄéA‚Äém‚Äée‚Äér‚Äéi‚Äéc‚Äéa‚Äén‚Äé ‚Äép‚Äéo‚Äél‚Äéi‚Äét‚Äéi‚Äéc‚Äés‚Äé,‚Äé ‚Äéb‚Äéu‚Äét‚Äé ‚Äét‚Äéh‚Äée‚Äé ‚Äét‚Äér‚Äéu‚Äét‚Äéh‚Äé,‚Äé ‚Äép‚Äée‚Äér‚Äéh‚Äéa‚Äép‚Äés‚Äé ‚Äém‚Äéo‚Äér‚Äée‚Äé ‚Äéc‚Äéo‚Äén‚Äét‚Äér‚Äéo‚Äév‚Äée‚Äér‚Äés‚Äéi‚Äéa‚Äél‚Äé,‚Äé ‚Äéi‚Äés‚Äé ‚Äét‚Äéh‚Äéa‚Äét‚Äé ‚ÄéA‚Äém‚Äée‚Äér‚Äéi‚Äéc‚Äéa‚Äén‚Äé ‚ÄéJ‚Äée‚Äéw‚Äés‚Äé ‚Äéu‚Äés‚Äée‚Äé ‚ÄéI‚Äés‚Äér‚Äéa‚Äée‚Äél‚Äé ‚Äéa‚Äés‚Äé ‚Äéa‚Äé ‚Äém‚Äée‚Äéa‚Äén‚Äés‚Äé ‚Äét‚Äéo‚Äé ‚Äés‚Äéh‚Äéa‚Äép‚Äée‚Äé ‚ÄéA‚Äém‚Äée‚Äér‚Äéi‚Äéc‚Äéa‚Äén‚Äé ‚Äéf‚Äéo‚Äér‚Äée‚Äéi‚Äég‚Äén‚Äé ‚Äép‚Äéo‚Äél‚Äéi‚Äéc‚Äéy‚Äé.‚Äé‚Äù‚Äé ‚ÄéT‚Äéh‚Äéi‚Äés‚Äé ‚Äés‚Äét‚Äéa‚Äét‚Äée‚Äém‚Äée‚Äén‚Äét‚Äé ‚Äéw‚Äéa‚Äés‚Äé ‚Äém‚Äéa‚Äéd‚Äée‚Äé ‚Äéi‚Äén‚Äé ‚Äér‚Äée‚Äég‚Äéa‚Äér‚Äéd‚Äés‚Äé ‚Äét‚Äéo‚Äé ‚Äét‚Äéh‚Äée‚Äé ‚ÄéC‚Äéh‚Äéu‚Äéc‚Äék‚Äé ‚ÄéS‚Äéc‚Äéh‚Äéu‚Äém‚Äée‚Äér‚Äé ‚Äéc‚Äéo‚Äén‚Äéd‚Äée‚Äém‚Äén‚Äéa‚Äét‚Äéi‚Äéo‚Äén‚Äé ‚Äéo‚Äéf‚Äé ‚ÄéB‚Äéi‚Äéb‚Äéi‚Äé ‚ÄéN‚Äée‚Äét‚Äéa‚Äén‚Äéy‚Äéa‚Äéh‚Äéu‚Äé,‚Äé ‚Äéw‚Äéh‚Äéi‚Äéc‚Äéh‚Äé ‚Äéw‚Äéa‚Äés‚Äé ‚Äér‚Äéu‚Äén‚Äé ‚Äéb‚Äéy‚Äé ‚ÄéA‚ÄéI‚ÄéP‚ÄéA‚ÄéC‚Äé ‚Äéb‚Äée‚Äéf‚Äéo‚Äér‚Äée‚Äé ‚Äéh‚Äée‚Äé ‚Äés‚Äéa‚Äéi‚Äéd‚Äé ‚Äéi‚Äét‚Äé.‚Äé



T‚Äéh‚Äée‚Äé ‚Äéo‚Äén‚Äél‚Äéy‚Äé ‚Äéw‚Äéa‚Äéy‚Äé ‚Äéa‚Äén‚Äéy‚Äé ‚Äéo‚Äéf‚Äé ‚Äéw‚Äéh‚Äéa‚Äét‚Äé ‚Äéi‚Äés‚Äé ‚Äég‚Äéo‚Äéi‚Äén‚Äég‚Äé ‚Äéo‚Äén‚Äé ‚Äéi‚Äén‚Äé ‚Äét‚Äéh‚Äée‚Äé ‚Äéw‚Äéo‚Äér‚Äél‚Äéd‚Äé ‚Äém‚Äéa‚Äék‚Äée‚Äés‚Äé ‚Äéa‚Äén‚Äéy‚Äé ‚Äés‚Äée‚Äén‚Äés‚Äée‚Äé ‚Äéi‚Äés‚Äé ‚Äéi‚Äéf‚Äé ‚Äéy‚Äéo‚Äéu‚Äé ‚Äés‚Äéa‚Äéy‚Äé ‚Äé‚Äú‚ÄéT‚Äéh‚Äée‚Äé ‚ÄéJ‚Äée‚Äéw‚Äés‚Äé.‚Äé‚Äù‚Äé ‚ÄéE‚Äév‚Äée‚Äér‚Äéy‚Äéo‚Äén‚Äée‚Äé ‚Äéa‚Äén‚Äéa‚Äél‚Äéy‚Äéz‚Äéi‚Äén‚Äég‚Äé ‚Äét‚Äéh‚Äée‚Äé ‚Äés‚Äéi‚Äét‚Äéu‚Äéa‚Äét‚Äéi‚Äéo‚Äén‚Äé ‚Äéa‚Äél‚Äér‚Äée‚Äéa‚Äéd‚Äéy‚Äé ‚Äék‚Äén‚Äéo‚Äéw‚Äés‚Äé ‚Äét‚Äéh‚Äéa‚Äét‚Äé.‚Äé ‚ÄéW‚Äée‚Äé ‚Äéj‚Äéu‚Äés‚Äét‚Äé ‚Äén‚Äée‚Äée‚Äéd‚Äé ‚Äéb‚Äér‚Äéa‚Äév‚Äée‚Äé ‚Äép‚Äée‚Äéo‚Äép‚Äél‚Äée‚Äé ‚Äé‚Äì‚Äé ‚Äéc‚Äéo‚Äén‚Äés‚Äée‚Äér‚Äév‚Äéa‚Äét‚Äéi‚Äév‚Äée‚Äés‚Äé,‚Äé ‚ÄéR‚Äéu‚Äés‚Äés‚Äéi‚Äéa‚Äén‚Äé ‚Äés‚Äéh‚Äéi‚Äél‚Äél‚Äés‚Äé,‚Äé ‚ÄéC‚Äéh‚Äéi‚Äén‚Äée‚Äés‚Äée‚Äé ‚Äés‚Äéh‚Äéi‚Äél‚Äél‚Äés‚Äé,‚Äé ‚ÄéP‚Äéa‚Äél‚Äée‚Äés‚Äét‚Äéi‚Äén‚Äée‚Äé ‚Äéd‚Äée‚Äéf‚Äée‚Äén‚Äéd‚Äée‚Äér‚Äés‚Äé,‚Äé ‚Äéi‚Äén‚Äéc‚Äée‚Äél‚Äés‚Äé ‚Äé‚Äì‚Äé ‚Äét‚Äéo‚Äé ‚Äés‚Äét‚Äéa‚Äér‚Äét‚Äé ‚Äés‚Äéa‚Äéy‚Äéi‚Äén‚Äég‚Äé ‚Äéi‚Äét‚Äé ‚Äéa‚Äél‚Äéo‚Äéu‚Äéd‚Äé.‚Äé ‚ÄéT‚Äéh‚Äéa‚Äét‚Äé ‚Äéi‚Äés‚Äé ‚Äéh‚Äéa‚Äép‚Äép‚Äée‚Äén‚Äéi‚Äén‚Äég‚Äé.‚Äé ‚ÄéC‚Äéa‚Äén‚Äéd‚Äéa‚Äéc‚Äée‚Äé ‚Äéw‚Äéi‚Äél‚Äél‚Äé ‚Äéb‚Äée‚Äé ‚Äéa‚Äé ‚Äéb‚Äéi‚Äég‚Äé ‚Äép‚Äéa‚Äér‚Äét‚Äé ‚Äéo‚Äéf‚Äé ‚Äét‚Äéh‚Äéi‚Äés‚Äé ‚Äét‚Äér‚Äéa‚Äén‚Äés‚Äéf‚Äéo‚Äér‚Äém‚Äéa‚Äét‚Äéi‚Äéo‚Äén‚Äé,‚Äé ‚Äéa‚Äén‚Äéd‚Äé ‚Äéb‚Äél‚Äéa‚Äéc‚Äék‚Äés‚Äé ‚Äéw‚Äéi‚Äél‚Äél‚Äé ‚Äéb‚Äée‚Äé ‚Äér‚Äée‚Äés‚Äée‚Äén‚Äét‚Äée‚Äéd‚Äé ‚Äéf‚Äéo‚Äér‚Äé ‚Äéh‚Äée‚Äér‚Äé ‚Äél‚Äée‚Äéa‚Äéd‚Äéi‚Äén‚Äég‚Äé ‚Äér‚Äéo‚Äél‚Äée‚Äé ‚Äéi‚Äén‚Äé ‚Äét‚Äéh‚Äéa‚Äét‚Äé ‚Äét‚Äér‚Äéa‚Äén‚Äés‚Äéf‚Äéo‚Äér‚Äém‚Äéa‚Äét‚Äéi‚Äéo‚Äén‚Äé.‚Äé ‚ÄéB‚Äéu‚Äét‚Äé ‚Äéf‚Äéo‚Äér‚Äé ‚Äél‚Äéi‚Äéf‚Äée‚Äé ‚Äéo‚Äén‚Äé ‚Äée‚Äéa‚Äér‚Äét‚Äéh‚Äé ‚Äét‚Äéo‚Äé ‚Äés‚Äéu‚Äér‚Äév‚Äéi‚Äév‚Äée‚Äé,‚Äé ‚Äét‚Äéh‚Äéa‚Äét‚Äé ‚Äét‚Äér‚Äéa‚Äén‚Äés‚Äéf‚Äéo‚Äér‚Äém‚Äéa‚Äét‚Äéi‚Äéo‚Äén‚Äé ‚Äém‚Äéu‚Äés‚Äét‚Äé ‚Äét‚Äéa‚Äék‚Äée‚Äé ‚Äép‚Äél‚Äéa‚Äéc‚Äée‚Äé.‚Äé

.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé

L‚Äéa‚Äéo‚Äéc‚Äéo‚Äé√∂‚Äén‚Äé ‚Äéa‚Äén‚Äéd‚Äé ‚ÄéH‚Äéi‚Äés‚Äé ‚ÄéS‚Äéo‚Äén‚Äés‚Äé ‚Äéi‚Äés‚Äé ‚Äéa‚Äén‚Äé ‚Äéa‚Äén‚Äéc‚Äéi‚Äée‚Äén‚Äét‚Äé ‚Äés‚Äéc‚Äéu‚Äél‚Äép‚Äét‚Äéu‚Äér‚Äée‚Äé ‚Äéw‚Äéh‚Äéi‚Äéc‚Äéh‚Äé ‚Äéw‚Äéa‚Äés‚Äé ‚Äée‚Äéx‚Äéc‚Äéa‚Äév‚Äéa‚Äét‚Äée‚Äéd‚Äé ‚Äéi‚Äén‚Äé ‚ÄéR‚Äéo‚Äém‚Äée‚Äé,‚Äé ‚ÄéI‚Äét‚Äéa‚Äél‚Äéy‚Äé,‚Äé ‚Äéi‚Äén‚Äé ‚Äé1‚Äé5‚Äé0‚Äé6‚Äé.‚Äé ‚ÄéI‚Äét‚Äé ‚Äéd‚Äée‚Äép‚Äéi‚Äéc‚Äét‚Äés‚Äé ‚Äét‚Äéh‚Äée‚Äé ‚ÄéT‚Äér‚Äéo‚Äéj‚Äéa‚Äén‚Äé ‚Äép‚Äér‚Äéi‚Äée‚Äés‚Äét‚Äé ‚ÄéL‚Äéa‚Äéo‚Äéc‚Äéo‚Äé√∂‚Äén‚Äé ‚Äéa‚Äén‚Äéd‚Äé ‚Äéh‚Äéi‚Äés‚Äé ‚Äés‚Äéo‚Äén‚Äés‚Äé ‚ÄéA‚Äén‚Äét‚Äéi‚Äép‚Äéh‚Äéa‚Äén‚Äét‚Äée‚Äés‚Äé ‚Äéa‚Äén‚Äéd‚Äé ‚ÄéT‚Äéh‚Äéy‚Äém‚Äéb‚Äér‚Äéa‚Äée‚Äéu‚Äés‚Äé ‚Äéb‚Äée‚Äéi‚Äén‚Äég‚Äé ‚Äéa‚Äét‚Äét‚Äéa‚Äéc‚Äék‚Äée‚Äéd‚Äé ‚Äéb‚Äéy‚Äé ‚Äés‚Äée‚Äéa‚Äé ‚Äés‚Äée‚Äér‚Äép‚Äée‚Äén‚Äét‚Äés‚Äé.‚Äé ‚ÄéT‚Äéh‚Äée‚Äé ‚Äéf‚Äéi‚Äég‚Äéu‚Äér‚Äée‚Äés‚Äé ‚Äéi‚Äén‚Äé ‚Äét‚Äéh‚Äée‚Äé ‚Äés‚Äét‚Äéa‚Äét‚Äéu‚Äée‚Äé ‚Äéa‚Äér‚Äée‚Äé ‚Äén‚Äée‚Äéa‚Äér‚Äél‚Äéy‚Äé ‚Äél‚Äéi‚Äéf‚Äée‚Äé-‚Äés‚Äéi‚Äéz‚Äée‚Äéd‚Äé,‚Äé ‚Äéw‚Äéi‚Äét‚Äéh‚Äé ‚Äét‚Äéh‚Äée‚Äé ‚Äée‚Äén‚Äét‚Äéi‚Äér‚Äée‚Äé ‚Äég‚Äér‚Äéo‚Äéu‚Äép‚Äé ‚Äém‚Äée‚Äéa‚Äés‚Äéu‚Äér‚Äéi‚Äén‚Äég‚Äé ‚Äéj‚Äéu‚Äés‚Äét‚Äé ‚Äéo‚Äév‚Äée‚Äér‚Äé ‚Äé2‚Äé ‚Äém‚Äée‚Äét‚Äér‚Äée‚Äés‚Äé ‚Äé(‚Äé6‚Äé ‚Äéf‚Äét‚Äé ‚Äé7‚Äé ‚Äéi‚Äén‚Äé)‚Äé ‚Äéi‚Äén‚Äé ‚Äéh‚Äée‚Äéi‚Äég‚Äéh‚Äét‚Äé.‚Äé ‚ÄéT‚Äéh‚Äée‚Äé ‚Äés‚Äét‚Äéa‚Äét‚Äéu‚Äée‚Äé ‚Äéi‚Äés‚Äé ‚Äél‚Äéi‚Äék‚Äée‚Äél‚Äéy‚Äé ‚Äét‚Äéo‚Äé ‚Äéb‚Äée‚Äé ‚Äét‚Äéh‚Äée‚Äé ‚Äés‚Äéa‚Äém‚Äée‚Äé ‚Äéo‚Äén‚Äée‚Äé ‚Äét‚Äéh‚Äéa‚Äét‚Äé ‚Äér‚Äée‚Äéc‚Äée‚Äéi‚Äév‚Äée‚Äéd‚Äé ‚Äép‚Äér‚Äéa‚Äéi‚Äés‚Äée‚Äé ‚Äéf‚Äér‚Äéo‚Äém‚Äé ‚Äét‚Äéh‚Äée‚Äé ‚ÄéR‚Äéo‚Äém‚Äéa‚Äén‚Äé ‚Äéw‚Äér‚Äéi‚Äét‚Äée‚Äér‚Äé ‚ÄéP‚Äél‚Äéi‚Äén‚Äéy‚Äé ‚Äét‚Äéh‚Äée‚Äé ‚ÄéE‚Äél‚Äéd‚Äée‚Äér‚Äé,‚Äé ‚Äéw‚Äéh‚Äéo‚Äé ‚Äéa‚Äét‚Äét‚Äér‚Äéi‚Äéb‚Äéu‚Äét‚Äée‚Äéd‚Äé ‚Äét‚Äéh‚Äée‚Äé ‚Äéw‚Äéo‚Äér‚Äék‚Äé ‚Äé(‚Äét‚Äéh‚Äée‚Äén‚Äé ‚Äéh‚Äéo‚Äéu‚Äés‚Äée‚Äéd‚Äé ‚Äéi‚Äén‚Äé ‚Äét‚Äéh‚Äée‚Äé ‚Äép‚Äéa‚Äél‚Äéa‚Äéc‚Äée‚Äé ‚Äéo‚Äéf‚Äé ‚Äét‚Äéh‚Äée‚Äé ‚Äée‚Äém‚Äép‚Äée‚Äér‚Äéo‚Äér‚Äé ‚ÄéT‚Äéi‚Äét‚Äéu‚Äés‚Äé)‚Äé ‚Äét‚Äéo‚Äé ‚Äét‚Äéh‚Äér‚Äée‚Äée‚Äé ‚ÄéG‚Äér‚Äée‚Äée‚Äék‚Äé ‚Äés‚Äéc‚Äéu‚Äél‚Äép‚Äét‚Äéo‚Äér‚Äés‚Äé ‚Äéf‚Äér‚Äéo‚Äém‚Äé ‚Äét‚Äéh‚Äée‚Äé ‚Äéi‚Äés‚Äél‚Äéa‚Äén‚Äéd‚Äé ‚Äéo‚Äéf‚Äé ‚ÄéR‚Äéh‚Äéo‚Äéd‚Äée‚Äés‚Äé:‚Äé ‚ÄéA‚Äég‚Äée‚Äés‚Äéa‚Äén‚Äéd‚Äée‚Äér‚Äé,‚Äé ‚ÄéA‚Äét‚Äéh‚Äée‚Äén‚Äéo‚Äéd‚Äéo‚Äér‚Äéo‚Äés‚Äé ‚Äéa‚Äén‚Äéd‚Äé ‚ÄéP‚Äéo‚Äél‚Äéy‚Äéd‚Äéo‚Äér‚Äéu‚Äés‚Äé,‚Äé ‚Äéb‚Äéu‚Äét‚Äé ‚Äéh‚Äée‚Äé ‚Äéd‚Äéi‚Äéd‚Äé ‚Äén‚Äéo‚Äét‚Äé ‚Äém‚Äée‚Äén‚Äét‚Äéi‚Äéo‚Äén‚Äé ‚Äét‚Äéh‚Äée‚Äé ‚Äéw‚Äéo‚Äér‚Äék‚Äé'‚Äés‚Äé ‚Äéd‚Äéa‚Äét‚Äée‚Äé ‚Äéo‚Äér‚Äé ‚Äép‚Äéa‚Äét‚Äér‚Äéo‚Äén‚Äé.‚Äé ‚ÄéM‚Äéo‚Äéd‚Äée‚Äér‚Äén‚Äé ‚Äés‚Äéc‚Äéh‚Äéo‚Äél‚Äéa‚Äér‚Äés‚Äé ‚Äéa‚Äér‚Äée‚Äé ‚Äén‚Äéo‚Äét‚Äé ‚Äéc‚Äée‚Äér‚Äét‚Äéa‚Äéi‚Äén‚Äé ‚Äéo‚Äéf‚Äé ‚Äét‚Äéh‚Äée‚Äé ‚Äéw‚Äéo‚Äér‚Äék‚Äé'‚Äés‚Äé ‚Äéo‚Äér‚Äéi‚Äég‚Äéi‚Äén‚Äés‚Äé;‚Äé ‚Äéi‚Äét‚Äé ‚Äém‚Äéi‚Äég‚Äéh‚Äét‚Äé ‚Äéb‚Äée‚Äé ‚Äéa‚Äén‚Äé ‚Äéo‚Äér‚Äéi‚Äég‚Äéi‚Äén‚Äéa‚Äél‚Äé ‚Äéw‚Äéo‚Äér‚Äék‚Äé ‚Äéo‚Äér‚Äé ‚Äéa‚Äé ‚Äéc‚Äéo‚Äép‚Äéy‚Äé ‚Äéo‚Äéf‚Äé ‚Äéa‚Äén‚Äé ‚Äée‚Äéa‚Äér‚Äél‚Äéi‚Äée‚Äér‚Äé ‚Äéb‚Äér‚Äéo‚Äén‚Äéz‚Äée‚Äé ‚Äés‚Äéc‚Äéu‚Äél‚Äép‚Äét‚Äéu‚Äér‚Äée‚Äé.‚Äé ‚ÄéA‚Äéf‚Äét‚Äée‚Äér‚Äé ‚Äéi‚Äét‚Äés‚Äé ‚Äéd‚Äéi‚Äés‚Äéc‚Äéo‚Äév‚Äée‚Äér‚Äéy‚Äé,‚Äé ‚ÄéL‚Äéa‚Äéo‚Äéc‚Äéo‚Äé√∂‚Äén‚Äé ‚Äéa‚Äén‚Äéd‚Äé ‚ÄéH‚Äéi‚Äés‚Äé ‚ÄéS‚Äéo‚Äén‚Äés‚Äé ‚Äéw‚Äéa‚Äés‚Äé ‚Äép‚Äéu‚Äét‚Äé ‚Äéo‚Äén‚Äé ‚Äép‚Äéu‚Äéb‚Äél‚Äéi‚Äéc‚Äé ‚Äéd‚Äéi‚Äés‚Äép‚Äél‚Äéa‚Äéy‚Äé ‚Äéi‚Äén‚Äé ‚Äét‚Äéh‚Äée‚Äé ‚ÄéV‚Äéa‚Äét‚Äéi‚Äéc‚Äéa‚Äén‚Äé ‚ÄéM‚Äéu‚Äés‚Äée‚Äéu‚Äém‚Äés‚Äé,‚Äé ‚Äéw‚Äéh‚Äée‚Äér‚Äée‚Äé ‚Äéi‚Äét‚Äé ‚Äér‚Äée‚Äém‚Äéa‚Äéi‚Äén‚Äés‚Äé.‚Äé

S‚Äéc‚Äéu‚Äél‚Äép‚Äét‚Äéu‚Äér‚Äée‚Äé ‚Äéc‚Äér‚Äée‚Äéd‚Äéi‚Äét‚Äé:‚Äé ‚Äéa‚Äét‚Äét‚Äér‚Äéi‚Äéb‚Äéu‚Äét‚Äée‚Äéd‚Äé ‚Äét‚Äéo‚Äé ‚ÄéA‚Äég‚Äée‚Äés‚Äéa‚Äén‚Äéd‚Äée‚Äér‚Äé,‚Äé ‚ÄéA‚Äét‚Äéh‚Äée‚Äén‚Äéo‚Äéd‚Äéo‚Äér‚Äéo‚Äés‚Äé ‚Äéa‚Äén‚Äéd‚Äé ‚ÄéP‚Äéo‚Äél‚Äéy‚Äéd‚Äéo‚Äér‚Äéu‚Äés‚Äé;‚Äé ‚Äép‚Äéh‚Äéo‚Äét‚Äéo‚Äég‚Äér‚Äéa‚Äép‚Äéh‚Äée‚Äéd‚Äé ‚Äéb‚Äéy‚Äé ‚ÄéW‚Äéi‚Äél‚Äéf‚Äér‚Äée‚Äéd‚Äéo‚Äé ‚ÄéR‚Äéo‚Äéd‚Äér‚Äé√≠‚Äég‚Äéu‚Äée‚Äéz‚Äé


.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé

A‚Äél‚Äér‚Äéi‚Äég‚Äéh‚Äét‚Äé,‚Äé ‚ÄéI‚Äé'‚Äém‚Äé ‚Äét‚Äér‚Äéy‚Äéi‚Äén‚Äég‚Äé ‚Äéo‚Äéu‚Äét‚Äé ‚Äéf‚Äéo‚Äér‚Äé ‚ÄéT‚Äéh‚Äée‚Äé ‚ÄéV‚Äéo‚Äéi‚Äéc‚Äée‚Äé.‚Äé ‚ÄéH‚Äée‚Äér‚Äée‚Äé'‚Äés‚Äé ‚Äém‚Äéy‚Äé ‚Äés‚Äéi‚Äén‚Äég‚Äéi‚Äén‚Äég‚Äé.‚Äé ‚ÄéW‚ÄéU‚Äéa‚Äéu‚Äéa‚Äéu‚Äéu‚Äéa‚Äéu‚Äéa‚Äéu‚Äéa‚Äéh‚Äéa‚Äéu‚Äéa‚Äéa‚Äéa‚Äéa‚Äéa‚Äéa‚Äéa‚Äéa‚Äéa‚Äéa‚Äéa‚Äéa‚Äéa‚Äéa‚Äéa‚Äéa‚Äéa‚Äéa‚Äéa‚Äéa‚Äéa‚Äéa‚Äéa‚Äéa‚Äéa‚Äéa‚Äéa‚Äéa‚Äéa‚Äéa‚Äéu‚Äéu‚Äéh‚Äéa‚Äéa‚Äéa‚Äéa‚Äéa‚Äéa‚Äéa‚Äéa‚Äéa‚Äéa‚Äéa‚Äéa‚Äéa‚Äéa‚Äéa‚Äéa‚Äéa‚Äéa‚Äéa‚Äéa‚Äéa‚Äéa‚Äéa‚Äéa‚Äéa‚Äéa‚Äéa‚Äéa‚Äéa‚Äéa‚Äéa‚Äéa‚Äéa‚Äéa‚Äéa‚Äéa‚Äéa‚Äéa‚Äéa‚Äéa‚Äéa‚Äéa‚Äéa‚Äéa‚Äéa‚Äéa‚Äéa‚Äéa‚Äéa‚Äéa‚Äéa‚Äéa‚Äéa‚Äéa‚Äéa‚Äéu‚Äéu‚Äéa‚Äéa‚Äéu‚Äéu‚Äéu‚Äéa‚Äéu‚Äéu‚Äéu‚Äéu‚Äéu‚Äéu‚Äéu‚Äéu‚Äéu‚Äéa‚Äéa‚Äéa‚Äéa‚Äéa‚Äéa‚Äéa‚Äéa‚Äéa‚Äéa‚Äéa‚Äéa‚Äéa‚Äéa‚Äéa‚Äéa‚Äéa‚Äéa‚Äéa‚Äéa‚Äéa‚Äéa‚Äéa‚Äéa‚Äéa‚Äéa‚Äéa‚Äéa‚Äéa‚Äéa‚Äéa‚Äéa‚Äéa‚Äéa‚Äéa‚Äéa‚Äéa‚Äéa‚Äéa‚Äéa‚Äéa‚Äéa‚Äéa‚Äéa‚Äé!‚Äé"
Gwh2sRpj,Untitled,35657,C++,Friday 22nd of March 2024 11:47:35 PM CDT,"
#include <iostream>

using namespace std;


int fib(int n) {
    if (n == 1 || n == 2) {
        return 1;
    }
    if (n > 2) {
        return fib(n - 1) + fib(n - 2);
    }
}

// —Ä—è–¥ –§–∏–±–æ–Ω–∞—á—á–∏ 1 1 2 3 5 8 13 21 34

int main() {
    setlocale(LC_ALL, ""ru"");

    cout << fib(9) << endl;
}
"
WBUjpigc,Dovedale Proof (Throttle),DogeplayzYT,Lua,Friday 22nd of March 2024 11:45:21 PM CDT,"--Throttle script
local Seat = script.Parent
local Train = script.Parent.Parent.Parent
local LinearVelocity = Train.Chassis.Base.LinearVelocity
local Data = Train.Chassis.Data
local RunService = game:GetService(""RunService"")
local Keybinds = game:GetService(""ReplicatedStorage"").Events.Keybinds



RunService.Heartbeat:Connect(function()
	if Data.Direction.Value == 1 then --forward
		
		if Seat.Throttle > 0 then
			local speed = Seat.Throttle * 0.053
			LinearVelocity.LineVelocity = math.clamp(LinearVelocity.LineVelocity + speed, 0, 50)
		end
			if Seat.Throttle < 0 then
				local speed = Seat.Throttle * 0.053
				LinearVelocity.LineVelocity = math.clamp(LinearVelocity.LineVelocity + speed, 0, 50)
			end	
			elseif Data.Direction.Value == 0 then
		if Seat.Throttle > 0 then
			local speed = Seat.Throttle * 0.053
			LinearVelocity.LineVelocity = math.clamp(LinearVelocity.LineVelocity + speed, -50, 0)
		end
		if Seat.Throttle < 0 then
			local speed = Seat.Throttle * 0.053
			LinearVelocity.LineVelocity = math.clamp(LinearVelocity.LineVelocity + speed, -50, 0)
		end	
	end
end)


Keybinds.OnServerEvent:Connect(function(player, keybind)
	if Seat.Occupant ~= nil then
		local plr = game:GetService(""Players""):GetPlayerFromCharacter(Seat.Occupant.Parent)
		local case = {
			[""G""] = function()
				if Data.Direction.Value == 1 and LinearVelocity.LineVelocity == 0 then
					Data.Direction.Value = 0
				elseif Data.Direction.Value == 0 and LinearVelocity.LineVelocity == 0 then
					Data.Direction.Value = 1
				end
			end,
			[""h""] = function()
				if script.Parent.Horn.IsPlaying == false then
					script.Parent.Horn:Play()
				end
			end,
			[""l""] = function()
				if script.Parent.Parent.Base.Light1.PointLight.Enabled == false and script.Parent.Parent.Base.Light2.PointLight.Enabled == false then
					script.Parent.Parent.Base.Light1.PointLight.Enabled = true
					script.Parent.Parent.Base.Light2.PointLight.Enabled = true
					elseif script.Parent.Parent.Base.Light1.PointLight.Enabled == true and script.Parent.Parent.Base.Light2.PointLight.Enabled == true then
					script.Parent.Parent.Base.Light1.PointLight.Enabled = false
					script.Parent.Parent.Base.Light2.PointLight.Enabled = false
				end
			end,
		}
		if case[keybind] then
			case[keybind]()
		end
	end		
end)


"
GpHGYwta,Untitled,35657,C++,Friday 22nd of March 2024 11:13:37 PM CDT,"
#include <iostream>

using namespace std;

int power(int a, int n) {
    if (n == 1) {
        return a;
    }
    return a * power(a, n - 1);
}


int main() {
    setlocale(LC_ALL, ""ru"");

    cout << power(2,4) << endl;
}
"
E2PXgvNr,Weapon v2,RedFlys,C#,Friday 22nd of March 2024 10:58:00 PM CDT,"class Weapon
{
    private readonly int _damage;
    private int _bullets;

    public bool CanFire => _bullets > 0;

    public void Fire(IDamagable target)
    {
        if(target == null)
            throw new ArgumentNullException(""target"");

        if (CanFire)
        {
            target.TakeDamage(_damage);
            _bullets--;
        }
    }
}

class Player : IDamagable
{
    private int _health;

    public bool IsAlive => _health > 0;

    public void TakeDamage(int damage)
    {
        if (damage < 0)
            throw new ArgumentOutOfRangeException();

        if (IsAlive)
            _health = Math.Max(_health - damage, 0);
    }
}

class Bot
{
    private Weapon _weapon;

    public Bot(Weapon weapon)
    {
        if (_weapon == null)
            throw new ArgumentNullException();

        _weapon = weapon;
    }

    public void OnSeePlayer(Player player)
    {
        if (player == null) 
            throw new ArgumentNullException();

        if (player.IsAlive && _weapon.CanFire)
            _weapon.Fire(player);
    }
}

interface IDamagable
{
    public void TakeDamage(int damage) { }
}

"
sEudVNv5,box_skewness,NTahmid,HTML,Friday 22nd of March 2024 10:56:43 PM CDT,"<!DOCTYPE html>
<meta charset=""utf-8"" />

<!-- Load d3.js -->
<script src=""https://d3js.org/d3.v4.js""></script>
<script src=""https://rawgit.com/susielu/d3-annotation/master/d3-annotation.min.js""></script>
<!-- Create a div where the graph will take place -->
<div id=""my_dataviz""></div>

<script>
  // set the dimensions and margins of the graph
  var margin = { top: 10, right: 30, bottom: 30, left: 40 },
    width = 960 - margin.left - margin.right,
    height = 600 - margin.top - margin.bottom;
  var chartWidth = 700;
  var boxWidth = 100;

  // append the svg object to the body of the page
  var svg = d3
    .select(""#my_dataviz"")
    .append(""svg"")
    .attr(""width"", width + margin.left + margin.right)
    .attr(""height"", height + margin.top + margin.bottom)
    .append(""g"")
    .attr(""transform"", ""translate("" + margin.left + "","" + margin.top + "")"");

  var months = [""Jan"", ""Apr"", ""Jul""];

  // Actual data for chickenpox cases - Data for January, April, and July with added data points and outliers
  var actualData = [
    [
      956, 922, 1320, 1500, 1124, 970, 1120, 1154, 970, 1220, 1100, 980, 1050,
      950, 1000, 1800, 1650,
    ], // Data for January
    [
      1005, 1075, 1035, 1200, 1125, 980, 1080, 1150, 930, 1185, 1065, 955, 1000,
      920, 980, 1500, 1420,
    ], // Data for April
    [
      1120, 980, 1035, 1250, 1300, 1400, 1500, 1150, 950, 1000, 1045, 1280,
      1200, 1250, 1380, 1420, 1500,
    ], // Data for July
  ];

  var rectangleColors = [""#8ebad9"", ""#ffbe86"", ""#95cf95""];
  var lineColors = [""#1f77b4"", ""#ff7f0e"", ""#2ca02c""];

  var legendColors = d3
    .scaleOrdinal()
    .domain(months)
    .range([""#8ebad9"", ""#ffbe86"", ""#95cf95""]);

  //Title
  svg
    .append(""text"")
    .attr(""x"", chartWidth / 2)
    .attr(""y"", 40 - margin.top / 2)
    .attr(""text-anchor"", ""middle"")
    .style(""font-size"", ""16px"")
    .style(""text-decoration"", ""underline"")
    .text(""Monthly Chickenpox Cases in NYC 1931-1971"");

  // Show the X scale
  var x = d3
    .scaleBand()
    .range([0, chartWidth])
    .domain(months)
    .paddingInner(1)
    .paddingOuter(0.5);
  svg
    .append(""g"")
    .attr(""transform"", ""translate(40,"" + height + "")"")
    .call(d3.axisBottom(x));

  // Show the Y scale
  var y = d3.scaleLinear().domain([400, 2000]).range([height, 80]);
  svg
    .append(""g"")
    .attr(""transform"", ""translate(40,"" + 0 + "")"")
    .call(d3.axisLeft(y));

  // Y axis label:
  svg
    .append(""text"")
    .attr(""text-anchor"", ""middle"")
    .attr(""transform"", ""rotate(-90)"")
    .attr(""y"", -margin.left + 20)
    .attr(""x"", -height / 2 + 20)
    .text(""Number of Chickenpox Cases"");

  // Loop through the data and draw the boxplots
  var boxes = svg
    .selectAll("".box"")
    .data(months)
    .enter()
    .append(""g"")
    .attr(""class"", ""box"")
    .attr(""transform"", function (d) {
      return ""translate("" + (x(d) + 40 - boxWidth / 2) + "",0)"";
    });

  boxes.each(function (month, i) {
    var data = actualData[i].sort(d3.ascending);
    var q1 = d3.quantile(data, 0.25);
    var median = d3.quantile(data, 0.5);
    var q3 = d3.quantile(data, 0.75);
    var interQuantileRange = q3 - q1;
    var min = q1 - 1.5 * interQuantileRange;
    var max = q3 + 1.5 * interQuantileRange;

    // Show the main vertical line
    d3.select(this)
      .append(""line"")
      .attr(""x1"", boxWidth / 2)
      .attr(""x2"", boxWidth / 2)
      .attr(""y1"", y(min))
      .attr(""y2"", y(max))
      .attr(""stroke"", lineColors[i]);

    // Show the box
    d3.select(this)
      .append(""rect"")
      .attr(""y"", y(q3))
      .attr(""height"", y(q1) - y(q3))
      .attr(""width"", boxWidth)
      .attr(""stroke"", lineColors[i])
      .style(""fill"", rectangleColors[i]);

    // show median, min and max horizontal lines
    d3.select(this)
      .selectAll(""toto"")
      .data([min, median, max])
      .enter()
      .append(""line"")
      .attr(""x1"", 0)
      .attr(""x2"", boxWidth)
      .attr(""y1"", function (d) {
        return y(d);
      })
      .attr(""y2"", function (d) {
        return y(d);
      })
      .attr(""stroke"", lineColors[i]);

    var filteredData = data.filter(function (d) {
      return d > max || d < min;
    });

    d3.select(this)
      .selectAll(""circle"")
      .data(filteredData)
      .enter()
      .append(""circle"")
      .attr(""cx"", function (d) {
        return boxWidth / 2;
      })
      .attr(""cy"", function (d) {
        return y(d);
      })
      .attr(""r"", 4)
      .style(""fill"", ""none"")
      .attr(""stroke"", ""#c86984"");

    // Annotations for skewness
    const annotations = [
      {
        note: {
          label: ""Longer tail towards higher values indicates positive skewness"",
          title: ""Skewness""
        },
        x: x(""Jan"") + 40,
        y: y(1500),
        dy: -100,
        dx: 0,
        color: ""#c86984""
      },
      {
        note: {
          label: ""Few unusually high values (outliers)"",
          title: ""Outliers""
        },
        x: x(""Jan"") + 40,
        y: y(1650),
        dy: -30,
        dx: 40,
        color: ""#c86984""
      }
    ];

    const makeAnnotations = d3.annotation()
      .annotations(annotations)
      .type(d3.annotationCalloutElbow)
      .accessors({
        x: d => d.x,
        y: d => d.y
      });

    svg.append(""g"")
      .call(makeAnnotations);
  });

  // Legend
  var size = 20;
  svg
    .selectAll("".mydots"")
    .data(months)
    .enter()
    .append(""rect"")
    .attr(""class"", ""mydots"")
    .attr(""x"", 800)
    .attr(""y"", function (d, i) {
      return 100 + i * (size + 5);
    })
    .attr(""width"", size)
    .attr(""height"", size)
    .style(""fill"", function (d) {
      return legendColors(d);
    });

  svg
    .selectAll("".mylabels"")
    .data(months)
    .enter()
    .append(""text"")
    .attr(""class"", ""mylabels"")
    .attr(""x"", 800 + size * 1.2)
    .attr(""y"", function (d, i) {
      return 100 + i * (size + 5) + size / 2;
    })
    .style(""fill"", function (d) {
      return legendColors(d);
    })
    .text(function (d) {
      return d;
    })
    .attr(""text-anchor"", ""left"")
    .style(""alignment-baseline"", ""middle"");
</script>"
6kM7B8iy,Mad,Unknown_No_1,PHP,Friday 22nd of March 2024 10:56:22 PM CDT,15kSpecialNewMod
5TFjnqF2,Untitled,35657,C++,Friday 22nd of March 2024 10:44:04 PM CDT,"#include <iostream>

using namespace std;


#include <iostream>

using namespace std;

int Fact(int N) {
    if (N == 1) {
        return 1;
    }
    return N * Fact(N - 1);
}


int main() {
    setlocale(LC_ALL, ""ru"");

    cout << Fact(6) << endl;
}
"
N5yhdhVh,1076,lighted,C++,Friday 22nd of March 2024 10:40:50 PM CDT,"#include <bits/stdc++.h>

using namespace std;

using ll = __int128;

struct fraction {
    ll a, b;
    
    fraction(ll num = 0, ll den = 1): a(num), b(den) {
		simplify();
	}    
    void simplify() {
        if (b < 0) {
            b = - b;
            a = -a;
        }
        ll g = __gcd(a < 0 ? -a : a, b);
        a /= g;
        b /= g;
    }
    fraction operator + (fraction f) {
        return fraction(a * f.b + f.a * b, b * f.b);
    }
    fraction operator - (fraction f) {
        return fraction(a * f.b - f.a * b, b * f.b);
    }
    fraction operator * (fraction f) {
        return fraction(a * f.a, b * f.b);
    }
    fraction operator / (fraction f) {
        return fraction(a * f.b, b * f.a);
    }
    bool operator > (fraction f) {
        return a * f.b > f.a * b;
    }
    bool operator == (fraction f) {
        return a * f.b == f.a * b;
    }
};

ll abs(ll x) {
    return x < 0 ? -x : x;
}    
fraction abs(fraction f) {
    return {abs(f.a), f.b}; /// |a/b| > |a|/b
}
ll to_ll(string s) {
    ll ans = 0, sign = (s.front() == '-' ? -1 : 1);
    
    if (s.front() == '-') {
        s.erase(0, 1);
    }
    
    for (int i = 0; i < s.size(); i++) {
        ans = ans * 10 + s[i] - '0';
    }
    return ans * sign;
}
string tostring(ll x) {
    string s = (x == 0 ? ""0"" : """");
    
    string sign = (x < 0 ? ""-"" : """");
    
    if (x < 0) {
        x = -x;
    }
    
    while (x > 0) {
        char last = x % 10 + '0';
        s = last + s;
        x /= 10;
    }
    
    return sign + s;
}
istream& operator >> (istream &in, fraction &f) {
    string s; cin >> s;
    
    if (s.find('/') == string::npos) {
        f = fraction(to_ll(s), 1);
    } else {
        int pos = s.find('/');
        f = fraction(to_ll(s.substr(0, pos)), to_ll(s.substr(pos + 1, s.size() - 1 - pos)));
    }
    return in;
}
ostream& operator << (ostream &out, fraction &f) {
    return out << tostring(f.a) << (f.b == 1 ? """" : ""/"" + tostring(f.b));
}

bool is_token_delimiter(char c) {
    return c == '+'  ||  c == '-'  ||  c == '=';
}
bool is_number_delimiter(char c) {
    return c == '*'  ||  c == '/'  ||  c == '+'  ||  c == '-'  ||  c == '=';
}
string get_token(string s, int &pos) {
    int start = pos;
    while (pos < s.size()  &&  !(is_token_delimiter(s[pos])  &&  !is_number_delimiter(s[pos - 1]))) pos++;
    return s.substr(start, pos - start);
}
ll get_number(string &t, int &pos) {
    int unary_sign = (t[pos] == '-' ? -1 : 1);
    
    if (t[pos] == '-') {
        pos++;
    }
    int start = pos;

    while (pos < t.size()  &&  (isdigit(t[pos]))) pos++;
    return unary_sign * to_ll(t.substr(start, pos - start));        
}
fraction calc(fraction a, char op, fraction b) {
    return op == '*' ? a * b : a / b;
}
fraction get_coefficient(string token, int &pos, int sign) {
    fraction f = {sign, 1};
    
    for (char op = '*'; pos < token.size(); pos++) {
        if (token[pos] == 'x') {
            return f;
        }
        f = calc(f, op, fraction(get_number(token, pos), 1));
        op = token[pos];
    }
}
void parse_token(string token, vector <fraction> &a, char op) {
    int pos = 0, sign = (op == '-' ? -1 : 1);

    fraction c = get_coefficient(token, pos, sign);
    int id = token[pos + 1] - '1'; /// skip 'x' char, id is 0-based
    a[id] = c;
}
void read_equation(vector <fraction> &a) {
    string s;
    getline(cin, s);
    
    s.erase(remove(s.begin(), s.end(), ' '), s.end());

    if (!is_token_delimiter(s.front())) {
        s = '+' + s;
    }
    s += ""*x"" + to_string(a.size());
    
    for (int i = 0; i < s.size(); ) {
        char op = s[i++];
        parse_token(get_token(s, i), a, op);
    }
}

const fraction zero = {0, 1};

void gauss(int n, int m, vector <vector <fraction>> &a) {
    vector <int> where(m, -1);

    int free_x = m; /// –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–≤–æ–±–æ–¥–Ω—ã—Ö/–Ω–µ–∑–∞–≤–∏—Å–∏–º—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
    for (int col = 0, row = 0; col < m  &&  row < n; col++) { /// row - —Ç–µ–∫—É—â–∞—è —Å—Ç—Ä–æ–∫–∞, col - —Ç–µ–∫—É—â–∏–π —Å—Ç–æ–ª–±–µ—Ü
        int sel = row;
        for (int i = row; i < n; i++)
            if (abs(a[i][col]) > abs(a[sel][col]))
                sel = i;
        
        if (a[sel][col] == zero) continue; /// —Å–≤–æ–±–æ–¥–Ω–∞—è, –Ω–µ–∑–∞–≤–∏—Å–∏–º–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è x[col], –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–π –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π x[col+1]

        fraction c = a[sel][col];
        for (int j = col; j <= m; j++) { /// –≤ —Å—Ç—Ä–æ–∫–µ row —Å—Ç–æ–ª–±—Ü—ã —Å–ª–µ–≤–∞ –æ—Ç col —Ä–∞–≤–Ω—ã 0, –ø–æ—ç—Ç–æ–º—É –Ω–µ –Ω—É–∂–Ω–æ —Å–≤–∞–ø–∞—Ç—å
            swap(a[sel][j], a[row][j]);
            a[row][j] = a[row][j] / c;
        }
        where[col] = row; /// —Ä–µ—à–µ–Ω–∏–µ –¥–ª—è x[col] –±—É–¥–µ–º –±—Ä–∞—Ç—å –≤ —Å—Ç—Ä–æ–∫–µ row –∏–∑ a[row][m], x[col] -> –∑–∞–≤–∏—Å–∏–º–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è

        for (int i = 0; i < n; i++)
            if (i != row) {
                fraction c = a[i][col]; /// –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç (–≤ –≤–∏–¥–µ –¥—Ä–æ–±–∏) —á—Ç–æ–±—ã –æ–±–Ω—É–ª–∏—Ç—å —á–∏—Å–ª–æ –≤ i-–π —Å—Ç—Ä–æ–∫–µ –∏ col-–º —Å—Ç–æ–ª–±—Ü–µ
                for (int j = col; j <= m; j++)
                    a[i][j] = a[i][j] - a[row][j] * c;
            }
        row++, free_x--;
    }

    vector <fraction> ans(m, zero);
    for (int j = 0; j < m; j++)
        if (where[j] != -1)
            ans[j] = a[ where[j] ][m];

    for (int i = 0; i < n; i++) {
        fraction sum = zero;
        for (int j = 0; j < m; j++)
            sum = sum + ans[j] * a[i][j];

        sum = sum - a[i][m]; 
        if (!(sum == zero)) { /// i-–µ —É—Ä–∞–≤–Ω–µ–Ω–∏–µ –Ω–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è
            cout << ""No solution.\n""; 
            return;
        }
    }

    if (free_x != 0) {
        cout << ""Infinite solutions.\n"";
        return;
    }
    
    cout << ""1 solution.\n"";

    for (int j = 0; j < m; j++)
        cout << ""x"" << j + 1 << ""="" << ans[j] << ""\n"";
}

int main() {
    int n;

    cin >> n;
    string s;
    getline(cin, s);

    vector <vector <fraction>> a(n, vector <fraction>(n + 1));
    for (int i = 0; i < n; i++) {
        read_equation(a[i]);
    }
    
    gauss(n, n, a);
}

/**
2
x1+2*x2=11
0*x1+0*x2=0

2
x1+2*x2=11
x1+2*x2=12

1
-0*x1 = 1

1
-0*x1 = 0

1
-1*x1 = 0


*/"
K2Jj7YXN,Pastes.io - New Pastebin,xxsa,PHP,Friday 22nd of March 2024 10:28:05 PM CDT,"https://pastes.io - #1 Pastebin Alternative - its free.

Pastes.io is a simple and efficient pastebin for mainly code to be distributed neatly and efficiently across the web. Website where you can paste and store any type of text or code snippets online and share it with your friends, Also You can see Recent Pastes

Simple Ads by Google Adsense Few rather than Pastebin
150+ different syntax languages - All Free
Paste Folders
Load files feature
Password protected pastes
Encrypted pastes.
URL Shortener.
Unlisted pastes.
Private pastes.
Embed, download, print pastes.
Socialite (Facebook/Twitter/Google Social login)
Trending pastes page (day, week, month, year)
Encrypted pastes.x
Trending pastes page (day, week, month, year).
No Captcha for logged in users feature.


"
87dWCTmb,scatter_labels_legends,NTahmid,HTML,Friday 22nd of March 2024 09:55:52 PM CDT,"<!doctype html>
<meta charset=""utf-8"" />
<html>
  <head>
    <script src=""https://d3js.org/d3.v6.min.js"" charset=""utf-8""></script>
    <script src=""https://rawgit.com/susielu/d3-annotation/master/d3-annotation.min.js""></script>
  </head>

  <style>
    * {
      font-family: sans-serif;
    }

    #tooltip {
      visibility: hidden;
      position: absolute;
      opacity: 0.8;
      padding: 10px;
      vertical-align: middle;
      border-radius: 5px;
      background-color: #ecf0f1;
      font-size: 14px;
    }

    .textbox {
      font-size: 14px;
    }

    #legend {
      opacity: 0.2;
      fill: #2c3e50;
    }

    #title {
      text-anchor: middle;
      font-size: 22px;
    }

    .label {
      text-anchor: middle;
    }

    #svg {
      background-color: white;
    }

    .annotation-group {
      fill: #c86984;
      stroke: #c86984;
    }
  </style>

  <body>
    <div id=""container"" align=""center""></div>

    <script type=""text/javascript"">
      // Url to the input data
      var url =
        ""https://raw.githubusercontent.com/freeCodeCamp/ProjectReferenceData/master/cyclist-data.json"";

      // Colors to differentiate riders with and without doping allegations
      var colors = [""#27ae60"", ""#8e44ad""];

      // The attributes of the riders corresponding to the above colors
      var legendKeys = [""No Doping Allegations"", ""Doping Allegations""];

      // Create an invisible div for the tooltip
      const tooltip = d3
        .select(""body"")
        .append(""div"")
        .attr(""id"", ""tooltip"")
        .style(""visibility"", ""hidden"");

      // 1. Load the data from external source
      d3.json(url).then(function (data) {
        // 2. Append svg-object for the bar chart to a div in your webpage
        // (here we use a div with id=container)
        var width = 700;
        var height = 500;
        var margin = { left: 90, top: 80, bottom: 50, right: 20 };
        var axisOffset = 10; // How for the axes are moved away from each other

        const svg = d3
          .select(""#container"")
          .append(""svg"")
          .attr(""id"", ""svg"")
          .attr(""width"", width)
          .attr(""height"", height);

        // 3. Define scales to translate domains of the data to the range of the svg
        var xMin = d3.min(data, (d) => d[""Year""]);
        var xMax = d3.max(data, (d) => d[""Year""]);

        var parseTime = d3.timeParse(""%M:%S"");
        var yMin = d3.min(data, (d) => parseTime(d[""Time""]));
        var yMax = d3.max(data, (d) => parseTime(d[""Time""]));

        var xScale = d3
          .scaleLinear()
          .domain([xMin, xMax])
          .range([margin.left + axisOffset, width - margin.right]);

        var yScale = d3
          .scaleTime()
          .domain([yMax, yMin])
          .range([height - margin.bottom - axisOffset, margin.top]);

        // 4. Draw and transform/translate horizontal and vertical axes
        var xAxis = d3.axisBottom().scale(xScale).tickFormat(d3.format(""d""));
        var yAxis = d3
          .axisLeft()
          .scale(yScale)
          .tickFormat(d3.timeFormat(""%M:%S""));

        svg
          .append(""g"")
          .attr(""transform"", ""translate(0, "" + (height - margin.bottom) + "")"")
          .attr(""id"", ""x-axis"")
          .call(xAxis);

        svg
          .append(""g"")
          .attr(""transform"", ""translate("" + margin.left + "", 0)"")
          .attr(""id"", ""y-axis"")
          .call(yAxis);

        // 5. Draw individual scatter points and define mouse events for the tooltip
        svg
          .selectAll(""scatterPoints"")
          .data(data)
          .enter()
          .append(""circle"")
          .attr(""cx"", (d) => xScale(d[""Year""]))
          .attr(""cy"", (d) => yScale(parseTime(d[""Time""])))
          .attr(""r"", 5)
          .attr(""fill"", (d) => (d[""Doping""] == """" ? colors[0] : colors[1]))
          .attr(""class"", ""dot"")
          .attr(""data-xvalue"", (d) => d[""Year""])
          .attr(""data-yvalue"", (d) => parseTime(d[""Time""]))
          .on(""mouseover"", function (d) {
            info = d[""originalTarget""][""__data__""];
            tooltip
              .style(""visibility"", ""visible"")
              .style(""left"", event.pageX + 10 + ""px"")
              .style(""top"", event.pageY - 80 + ""px"")
              .attr(""data-year"", info[""Year""])
              .html(
                info[""Name""] +
                  "" ("" +
                  info[""Year""] +
                  "") <br> Time: "" +
                  info[""Time""] +
                  ""<br><br>"" +
                  info[""Doping""]
              );
          })
          .on(""mousemove"", function () {
            tooltip.style(""left"", event.pageX + 10 + ""px"");
          })
          .on(""mouseout"", function () {
            tooltip.style(""visibility"", ""hidden"");
          });

        // 6. Finalize chart by adding title, axes labels and legend
        
        //X-axis label
        svg
          .append(""text"")
          .attr(""x"", margin.left + (width - margin.left - margin.right) / 2)
          .attr(""y"", height - margin.bottom / 5)
          .attr(""class"", ""label"")
          .text(""Year"");


        //Y-axis label
        svg
          .append(""text"")
          .attr(""y"", margin.left / 4)
          .attr(""x"", -height / 2)
          .attr(""transform"", ""rotate(-90)"")
          .attr(""class"", ""label"")
          .text(""Time to finish"");

        //Title of the chart
        svg
          .append(""text"")
          .attr(""x"", margin.left + (width - margin.left - margin.right) / 2)
          .attr(""y"", margin.top / 2.6)
          .attr(""id"", ""title"")
          .text(""Doping in professional bike racing"");

        svg
          .append(""text"")
          .attr(""x"", margin.left + (width - margin.left - margin.right) / 2)
          .attr(""y"", margin.top / 1.4)
          .text(""35 fastest times to finish Alpe d'Huez"")
          .style(""font-size"", ""16px"")
          .style(""text-anchor"", ""middle"");

        //Chart Legends
        svg
          .selectAll(""legendSymbols"")
          .data(legendKeys)
          .enter()
          .append(""circle"")
          .attr(""cx"", width - margin.right - 200)
          .attr(""cy"", (d, i) => 150 + i * 25)
          .attr(""r"", 5)
          .attr(""fill"", (d, i) => colors[i]);

        svg
          .selectAll(""legendTexts"")
          .data(legendKeys)
          .enter()
          .append(""text"")
          .text((d) => d)
          .attr(""x"", width - margin.right - 200 + 15)
          .attr(""y"", (d, i) => 150 + i * 25 + 5)
          .attr(""class"", ""textbox"");

        const legend = svg
          .append(""rect"")
          .attr(""x"", width - margin.right - 200 - 15)
          .attr(""y"", 150 - 5 - 10)
          .attr(""rx"", 5)
          .attr(""ry"", 5)
          .attr(""width"", 195)
          .attr(""height"", 55)
          .attr(""id"", ""legend"");

        // Annotations
        const annotations = [
          {
            note: {
              label: ""Doping allegations and notable performances"",
              bgPadding: 20,
              title: ""Annotations""
            },
            color: [""#c86984""],
            x: xScale(1995),
            y: yScale(parseTime(""36:50"")),
            dy: 50,
            dx: 60,
            subject: {
              radius: 50,
              radiusPadding: 5
            },
            type: d3.annotationCalloutCircle
          }
        ];

        const makeAnnotations = d3.annotation()
          .annotations(annotations)
          .type(d3.annotationLabel)
          .accessors({
            x: d => xScale(d.Year),
            y: d => yScale(parseTime(d.Time))
          })
          .accessorsInverse({
            Year: d => xScale.invert(d.x),
            Time: d => yScale.invert(d.y)
          })
          .on('subjectover', function(annotation) {
            annotation.type.a.selectAll(""g.annotation-connector, g.annotation-note"")
              .classed(""hidden"", false);
          })
          .on('subjectout', function(annotation) {
            annotation.type.a.selectAll(""g.annotation-connector, g.annotation-note"")
              .classed(""hidden"", true);
          });

        svg.append(""g"")
          .attr(""class"", ""annotation-group"")
          .call(makeAnnotations);
      });
    </script>
  </body>
</html>"
iw3CLdaZ,PYTHON-ALL-CODE-EXAMPLES.py,Najeebsk,Python,Friday 22nd of March 2024 09:07:14 PM CDT,"        # Color Palette
        self.bg_color = ""#336699""
        self.button_color = ""#4CAF50""
        self.text_color = ""white""
----------------------------------------------
self.title_label = tk.Label(self.main_frame, text=""NAJEEB VIDEO PLAYER"", font=(""Arial"", 24, ""bold""), fg=self.text_color, bg=self.bg_color)
        self.title_label.pack(pady=10)
--------------------------------------------------------------------
self.search_button = tk.Button(self.search_frame, text=""Search YouTube"", command=self.search_and_play, bg=self.button_color, fg=self.text_color)
        self.search_button.pack(side=""left"", padx=5, pady=5)

        self.save_button = tk.Button(self.search_frame, text=""Save"", command=self.save_results, bg=self.button_color, fg=self.text_color)
        self.save_button.pack(side=""left"", padx=5, pady=5)
-----------------------------------------------------------------------------
self.prev_button = tk.Button(self.button_frame, text=""Prev"", command=self.prev_page, bg=self.button_color, fg=self.text_color)
        self.prev_button.pack(side=""left"", padx=5, pady=5)

        self.next_button = tk.Button(self.button_frame, text=""Next"", command=self.next_page, bg=self.button_color, fg=self.text_color)
        self.next_button.pack(side=""left"", padx=5, pady=5)

        self.play_button = tk.Button(self.button_frame, text=""Play"", command=self.play_video, bg=self.button_color, fg=self.text_color)
        self.play_button.pack(side=""left"", padx=5, pady=5)

        self.stop_button = tk.Button(self.button_frame, text=""Stop"", command=self.stop_video, bg=self.button_color, fg=self.text_color)
        self.stop_button.pack(side=""left"", padx=5, pady=5)

        self.current_video_label = tk.Label(root, text=""No video selected"", bg=self.bg_color, fg=self.text_color)
        self.current_video_label.pack(pady=5)

        self.time_label = tk.Label(root, text="""", bg=self.bg_color, fg=self.text_color)
        self.time_label.pack(pady=5)

        self.slider = tk.Scale(root, from_=0, to=100, orient=""horizontal"", bg=self.bg_color, fg=self.text_color, command=self.set_video_position)
        self.slider.pack(fill=""x"")
------------------------------------------------------------------------
root = tk.Tk()
root.geometry(""800x600+300+50"")
root.title(""Najeeb VLC Player"")
root.configure(bg=""#336699"")
video_player = VideoPlayer(root)
root.mainloop()
--------------------------------------------------
# Create the main application window
app = tk.Tk()
app.title(""Najeeb IPTV Channel Search M3u All Category"")
app.geometry(""800x600"")
app.configure(bg=""#336699"")
-------------------------------------------------------------------------------
# Add labels, entry fields, buttons, etc.
url_frame = tk.Frame(app, bg=""#336699"")
url_frame.pack(pady=10)

url_label = tk.Label(url_frame, text=""Enter URL 0R local OR Select Category:"", bg=""#336699"", fg=""white"")
url_label.pack(side=tk.LEFT, padx=5)

url_entry = tk.Entry(url_frame, width=80)  # Adjust width here
url_entry.pack(side=tk.LEFT, padx=5)

search_button = tk.Button(url_frame, text=""Search"", command=search_channels, bg=""#FFA500"", fg=""white"")
search_button.pack(side=tk.LEFT, padx=5)

result_label = tk.Label(app, text=""Najeeb Iptv Channels Run Vlc Player Check Working Or Not Working And save Working URLS in M3U File:"", bg=""#336699"", fg=""white"")
result_label.pack()

# Add scrollbar to the listbox
scrollbar = tk.Scrollbar(app, orient=tk.VERTICAL)
scrollbar.pack(side=tk.RIGHT, fill=tk.Y)

result_text = tk.Listbox(app, height=30, width=130, yscrollcommand=scrollbar.set)
result_text.pack()

# Configure scrollbar
scrollbar.config(command=result_text.yview)

# Bind double click event to play_selected_channel function
result_text.bind(""<Double-1>"", play_selected_channel)

# Add button to check links
check_button = tk.Button(app, text=""Check Links"", command=check_links, bg=""#008000"", fg=""white"")
check_button.pack(side=tk.RIGHT, padx=5)

# Add button to save working links
save_button = tk.Button(app, text=""Save Working Links"", command=save_working_links, bg=""#FF0000"", fg=""white"")
save_button.pack(side=tk.LEFT, padx=5)

# Dropdown menu for channel categories
category_urls = {
    ""ALL-CATEGORY"": """",
    ""Animation"": ""https://iptv-org.github.io/iptv/categories/animation.m3u"",
    ""Auto"": ""https://iptv-org.github.io/iptv/categories/auto.m3u"",
    ""Business"": ""https://iptv-org.github.io/iptv/categories/business.m3u"",
    ""Classic"": ""https://iptv-org.github.io/iptv/categories/classic.m3u"",
    ""Comedy"": ""https://iptv-org.github.io/iptv/categories/comedy.m3u"",
    ""Cooking"": ""https://iptv-org.github.io/iptv/categories/cooking.m3u"",
    ""Culture"": ""https://iptv-org.github.io/iptv/categories/culture.m3u"",
    ""Documentary"": ""https://iptv-org.github.io/iptv/categories/documentary.m3u"",
    ""Education"": ""https://iptv-org.github.io/iptv/categories/education.m3u"",
    ""Entertainment"": ""https://iptv-org.github.io/iptv/categories/entertainment.m3u"",
    ""Family"": ""https://iptv-org.github.io/iptv/categories/family.m3u"",
    ""General"": ""https://iptv-org.github.io/iptv/categories/general.m3u"",
    ""Kids"": ""https://iptv-org.github.io/iptv/categories/kids.m3u"",
    ""Legislative"": ""https://iptv-org.github.io/iptv/categories/legislative.m3u"",
    ""Lifestyle"": ""https://iptv-org.github.io/iptv/categories/lifestyle.m3u"",
    ""Movies"": ""https://iptv-org.github.io/iptv/categories/movies.m3u"",
    ""Music"": ""https://iptv-org.github.io/iptv/categories/music.m3u"",
    ""News"": ""https://iptv-org.github.io/iptv/categories/news.m3u"",
    ""Outdoor"": ""https://iptv-org.github.io/iptv/categories/outdoor.m3u"",
    ""Relax"": ""https://iptv-org.github.io/iptv/categories/relax.m3u"",
    ""Religious"": ""https://iptv-org.github.io/iptv/categories/religious.m3u"",
    ""Science"": ""https://iptv-org.github.io/iptv/categories/science.m3u"",
    ""Series"": ""https://iptv-org.github.io/iptv/categories/series.m3u"",
    ""Shop"": ""https://iptv-org.github.io/iptv/categories/shop.m3u"",
    ""Sports"": ""https://iptv-org.github.io/iptv/categories/sports.m3u"",
    ""Travel"": ""https://iptv-org.github.io/iptv/categories/travel.m3u"",
    ""Weather"": ""https://iptv-org.github.io/iptv/categories/weather.m3u"",
    ""XXX"": ""https://iptv-org.github.io/iptv/categories/xxx.m3u"",
    ""Undefined"": ""https://iptv-org.github.io/iptv/categories/undefined.m3u"",
    # Add more categories here
}
========================= START===========================
import tkinter as tk
window = tk.Tk()
greeting = tk.Label(text=""Hello, Tkinter"")
greeting.pack()
label = tk.Label(text=""Hello, Tkinter"")
label = tk.Label(
    text=""Hello, Tkinter"",
    foreground=""white"",  # Set the text color to white
    background=""black""  # Set the background color to black
)
    ""red""
    ""orange""
    ""yellow""
    ""green""
    ""blue""
    ""purple""
label = tk.Label(text=""Hello, Tkinter"", background=""#34A2FE"")
label = tk.Label(text=""Hello, Tkinter"", fg=""white"", bg=""black"")
label = tk.Label(
    text=""Hello, Tkinter"",
    fg=""white"",
    bg=""black"",
    width=10,
    height=10
)
button = tk.Button(
    text=""Click me!"",
    width=25,
    height=5,
    bg=""blue"",
    fg=""yellow"",
)
entry = tk.Entry(fg=""yellow"", bg=""blue"", width=50)
import tkinter as tk
window = tk.Tk()
label = tk.Label(text=""Name"")
entry = tk.Entry()
label.pack()
entry.pack()
name = entry.get()

name

'Real Python'
entry.delete(0)
entry.delete(0, tk.END)
entry.insert(0, ""Python"")
entry.insert(0, ""Real "")
window.destroy()
window = tk.Tk()
text_box = tk.Text()
text_box.pack()
text_box.get()
Traceback (most recent call last):
  ...
TypeError: get() missing 1 required positional argument: 'index1'
text_box.get(""1.0"")
text_box.get(""1.0"", ""1.5"")
'Hello'
text_box.get(""2.0"", ""2.5"")
'World'
text_box.get(""1.0"", tk.END)
'Hello\nWorld\n'
text_box.delete(""1.0"", ""1.4"")
text_box.get(""1.0"")
'\n'
text_box.delete(""1.0"")
text_box.delete(""1.0"", tk.END)
text_box.insert(""1.0"", ""Hello"")
text_box.insert(""2.0"", ""World"")
text_box.insert(""2.0"", ""\nWorld"")
text_box.insert(tk.END, ""Put me at the end!"")
text_box.insert(tk.END, ""\nPut me on a new line!"")
-----------------------------------------------------------------------
Assigning Widgets to Frames With Frame Widgets
In this tutorial, you‚Äôre going to work with only five widgets:
 1   Label
 2   Button
 3   Entry
 4   Text
 5   Frame
These are the four you‚Äôve seen so far plus the Frame widget. 
Frame widgets are important for organizing the layout of your widgets in an application.
--------------------------------------------------------------------------
import tkinter as tk

window = tk.Tk()
frame = tk.Frame()
frame.pack()

window.mainloop()
-------------------------------------
frame = tk.Frame()
label = tk.Label(master=frame)
----------------------------------------
import tkinter as tk

window = tk.Tk()

frame_a = tk.Frame()
frame_b = tk.Frame()

label_a = tk.Label(master=frame_a, text=""I'm in Frame A"")
label_a.pack()

label_b = tk.Label(master=frame_b, text=""I'm in Frame B"")
label_b.pack()

frame_a.pack()
frame_b.pack()

window.mainloop()
--------------------------------------
import tkinter as tk

window = tk.Tk()

frame_a = tk.Frame()
label_a = tk.Label(master=frame_a, text=""I'm in Frame A"")
label_a.pack()

frame_b = tk.Frame()
label_b = tk.Label(master=frame_b, text=""I'm in Frame B"")
label_b.pack()

# Swap the order of `frame_a` and `frame_b`
frame_b.pack()
frame_a.pack()

window.mainloop()
---------------------------------------
Adjusting Frame Appearance With Reliefs
Frame widgets can be configured with a relief attribute that creates a border around the frame.
 You can set relief to be any of the following values:
1    tk.FLAT: Has no border effect (the default value)
2    tk.SUNKEN: Creates a sunken effect
3    tk.RAISED: Creates a raised effect
4    tk.GROOVE: Creates a grooved border effect
5    tk.RIDGE: Creates a ridged effect
To apply the border effect, you must set the borderwidth attribute to a value
------------------------------------------------------------------------------------
import tkinter as tk


border_effects = {

    ""flat"": tk.FLAT,

    ""sunken"": tk.SUNKEN,

    ""raised"": tk.RAISED,

    ""groove"": tk.GROOVE,

    ""ridge"": tk.RIDGE,

}


window = tk.Tk()


for relief_name, relief in border_effects.items():

    frame = tk.Frame(master=window, relief=relief, borderwidth=5)

    frame.pack(side=tk.LEFT)

    label = tk.Label(master=frame, text=relief_name)

    label.pack()


window.mainloop()
--------------------------------------
 tk.Label(text=""Hello, Tkinter"").pack()
--------------------------------------------------
Widget Class 	Variable Name Prefix 	Example
Label 	                        lbl 	                                      lbl_name
Button 	                        btn 	                                      btn_submit
Entry 	                        ent 	                                      ent_age
Text 	                        txt 	                                      txt_notes
Frame 	                        frm 	                                      frm_address
----------------------------------------------------------------------------------------
1    .place()
2    .grid()
-----------------------------
The .pack() Geometry Manager
-----------------------------
import tkinter as tk

window = tk.Tk()

frame1 = tk.Frame(master=window, width=100, height=100, bg=""red"")
frame1.pack()

frame2 = tk.Frame(master=window, width=50, height=50, bg=""yellow"")
frame2.pack()

frame3 = tk.Frame(master=window, width=25, height=25, bg=""blue"")
frame3.pack()

window.mainloop()
--------------------------------------------------------------------
import tkinter as tk

window = tk.Tk()

frame1 = tk.Frame(master=window, height=100, bg=""red"")
frame1.pack(fill=tk.X)

frame2 = tk.Frame(master=window, height=50, bg=""yellow"")
frame2.pack(fill=tk.X)

frame3 = tk.Frame(master=window, height=25, bg=""blue"")
frame3.pack(fill=tk.X)

window.mainloop()
-----------------------------------------------------------------------
1    tk.TOP
2    tk.BOTTOM
3    tk.LEFT
4    tk.RIGHT
-------------------------------------------
import tkinter as tk

window = tk.Tk()

frame1 = tk.Frame(master=window, width=200, height=100, bg=""red"")
frame1.pack(fill=tk.Y, side=tk.LEFT)

frame2 = tk.Frame(master=window, width=100, bg=""yellow"")
frame2.pack(fill=tk.Y, side=tk.LEFT)

frame3 = tk.Frame(master=window, width=50, bg=""blue"")
frame3.pack(fill=tk.Y, side=tk.LEFT)

window.mainloop()
------------------------------------------
import tkinter as tk

window = tk.Tk()

frame1 = tk.Frame(master=window, width=200, height=100, bg=""red"")
frame1.pack(fill=tk.BOTH, side=tk.LEFT, expand=True)

frame2 = tk.Frame(master=window, width=100, bg=""yellow"")
frame2.pack(fill=tk.BOTH, side=tk.LEFT, expand=True)

frame3 = tk.Frame(master=window, width=50, bg=""blue"")
frame3.pack(fill=tk.BOTH, side=tk.LEFT, expand=True)

window.mainloop()
----------------------------------------------------------------------------
The .place() Geometry Manager
-------------------------------------
import tkinter as tk


window = tk.Tk()


frame = tk.Frame(master=window, width=150, height=150)

frame.pack()


label1 = tk.Label(master=frame, text=""I'm at (0, 0)"", bg=""red"")

label1.place(x=0, y=0)


label2 = tk.Label(master=frame, text=""I'm at (75, 75)"", bg=""yellow"")

label2.place(x=75, y=75)


window.mainloop()
---------------------------------------------------------------
The .grid() Geometry Manager
---------------------------------------
import tkinter as tk

window = tk.Tk()

for i in range(3):
    for j in range(3):
        frame = tk.Frame(
            master=window,
            relief=tk.RAISED,
            borderwidth=1
        )
        frame.grid(row=i, column=j)
        label = tk.Label(master=frame, text=f""Row {i}\nColumn {j}"")
        label.pack()

window.mainloop()
-------------------------------------------------------------------
import tkinter as tk

window = tk.Tk()

for i in range(3):
    for j in range(3):
        frame = tk.Frame(
            master=window,
            relief=tk.RAISED,
            borderwidth=1
        )
        frame.grid(row=i, column=j)
        label = tk.Label(master=frame, text=f""Row {i}\nColumn {j}"")
        label.pack()

window.mainloop()
------------------------------------------------------------------------
import tkinter as tk

window = tk.Tk()

for i in range(3):
    for j in range(3):
        frame = tk.Frame(
            master=window,
            relief=tk.RAISED,
            borderwidth=1
        )
        frame.grid(row=i, column=j)
        label = tk.Label(master=frame, text=f""Row {i}\nColumn {j}"")
        label.pack()

window.mainloop()
-------------------------------------------------------------------------
1    padx adds padding in the horizontal direction.
2    pady adds padding in the vertical direction.
-----------------------------------------------------------------
import tkinter as tk

window = tk.Tk()

for i in range(3):
    for j in range(3):
        frame = tk.Frame(
            master=window,
            relief=tk.RAISED,
            borderwidth=1
        )
        frame.grid(row=i, column=j, padx=5, pady=5)
        label = tk.Label(master=frame, text=f""Row {i}\nColumn {j}"")
        label.pack()

window.mainloop()
------------------------------------------------------------------------
import tkinter as tk

window = tk.Tk()

for i in range(3):
    for j in range(3):
        frame = tk.Frame(
            master=window,
            relief=tk.RAISED,
            borderwidth=1
        )
        frame.grid(row=i, column=j, padx=5, pady=5)
        label = tk.Label(master=frame, text=f""Row {i}\nColumn {j}"")
        label.pack(padx=5, pady=5)

window.mainloop()
----------------------------------------------------------------------------
1    Index: The index of the grid column or row that you want to configure or a list 
      of indices to configure multiple rows or columns at the same time
2    Weight: A keyword argument called weight that determines how the column or row 
      should respond to window resizing, relative to the other columns and rows
3    Minimum Size: A keyword argument called minsize that sets the minimum size 
      of the row height or column width in pixels
------------------------------------------------------------------------------------------------
import tkinter as tk

window = tk.Tk()

for i in range(3):
    window.columnconfigure(i, weight=1, minsize=75)
    window.rowconfigure(i, weight=1, minsize=50)

    for j in range(0, 3):
        frame = tk.Frame(
            master=window,
            relief=tk.RAISED,
            borderwidth=1
        )
        frame.grid(row=i, column=j, padx=5, pady=5)
        label = tk.Label(master=frame, text=f""Row {i}\nColumn {j}"")
        label.pack(padx=5, pady=5)

window.mainloop()
--------------------------------------------------------------------------------------------------
import tkinter as tk

window = tk.Tk()
window.columnconfigure(0, minsize=250)
window.rowconfigure([0, 1], minsize=100)

label1 = tk.Label(text=""A"")
label1.grid(row=0, column=0)

label2 = tk.Label(text=""B"")
label2.grid(row=1, column=0)

window.mainloop()
-----------------------------------------------------------------------------------------------------
1    ""n"" or ""N"" to align to the top-center part of the cell
2    ""e"" or ""E"" to align to the right-center side of the cell
3    ""s"" or ""S"" to align to the bottom-center part of the cell
4    ""w"" or ""W"" to align to the left-center side of the cell
-----------------------------------------------------------------------------------
import tkinter as tk

window = tk.Tk()
window.columnconfigure(0, minsize=250)
window.rowconfigure([0, 1], minsize=100)

label1 = tk.Label(text=""A"")
label1.grid(row=0, column=0, sticky=""n"")

label2 = tk.Label(text=""B"")
label2.grid(row=1, column=0, sticky=""n"")

window.mainloop()
------------------------------------------------------------------------------------
import tkinter as tk

window = tk.Tk()
window.columnconfigure(0, minsize=250)
window.rowconfigure([0, 1], minsize=100)

label1 = tk.Label(text=""A"")
label1.grid(row=0, column=0, sticky=""ne"")

label2 = tk.Label(text=""B"")
label2.grid(row=1, column=0, sticky=""sw"")

window.mainloop()
-------------------------------------------------------------------------------------
import tkinter as tk

window = tk.Tk()

window.rowconfigure(0, minsize=50)
window.columnconfigure([0, 1, 2, 3], minsize=50)

label1 = tk.Label(text=""1"", bg=""black"", fg=""white"")
label2 = tk.Label(text=""2"", bg=""black"", fg=""white"")
label3 = tk.Label(text=""3"", bg=""black"", fg=""white"")
label4 = tk.Label(text=""4"", bg=""black"", fg=""white"")

label1.grid(row=0, column=0)
label2.grid(row=0, column=1, sticky=""ew"")
label3.grid(row=0, column=2, sticky=""ns"")
label4.grid(row=0, column=3, sticky=""nsew"")

window.mainloop()
--------------------------------------------------------------------------------------
.grid() 	                   .pack()
sticky=""ns"" 	fill=tk.Y
sticky=""ew"" 	fill=tk.X
sticky=""nsew"" 	fill=tk.BOTH
-----------------------------------------------------------------------------
import tkinter as tk


window = tk.Tk()

window.title(""Simple Text Editor"")


window.rowconfigure(0, minsize=800, weight=1)

window.columnconfigure(1, minsize=800, weight=1)


txt_edit = tk.Text(window)

frm_buttons = tk.Frame(window, relief=tk.RAISED, bd=2)

btn_open = tk.Button(frm_buttons, text=""Open"")

btn_save = tk.Button(frm_buttons, text=""Save As..."")
---------------------------------------------------------------------------------------
window = tk.Tk()

window.title(""Simple Text Editor"")


window.rowconfigure(0, minsize=800, weight=1)

window.columnconfigure(1, minsize=800, weight=1)


txt_edit = tk.Text(window)

frm_buttons = tk.Frame(window, relief=tk.RAISED, bd=2)

btn_open = tk.Button(frm_buttons, text=""Open"", command=open_file)

btn_save = tk.Button(frm_buttons, text=""Save As..."", command=save_file)


btn_open.grid(row=0, column=0, sticky=""ew"", padx=5, pady=5)

btn_save.grid(row=1, column=0, sticky=""ew"", padx=5)


frm_buttons.grid(row=0, column=0, sticky=""ns"")

txt_edit.grid(row=0, column=1, sticky=""nsew"")


window.mainloop()
--------------------------------------------------------------------------------
import tkinter as tk

def increase():
    value = int(lbl_value[""text""])
    lbl_value[""text""] = f""{value + 1}""

def decrease():
    value = int(lbl_value[""text""])
    lbl_value[""text""] = f""{value - 1}""

window = tk.Tk()

window.rowconfigure(0, minsize=50, weight=1)
window.columnconfigure([0, 1, 2], minsize=50, weight=1)

btn_decrease = tk.Button(master=window, text=""-"", command=decrease)
btn_decrease.grid(row=0, column=0, sticky=""nsew"")

lbl_value = tk.Label(master=window, text=""0"")
lbl_value.grid(row=0, column=1)

btn_increase = tk.Button(master=window, text=""+"", command=increase)
btn_increase.grid(row=0, column=2, sticky=""nsew"")

window.mainloop()
-----------------------------------------------------------------------------
import random
import tkinter as tk

def roll():
    lbl_result[""text""] = str(random.randint(1, 6))

window = tk.Tk()
window.columnconfigure(0, minsize=150)
window.rowconfigure([0, 1], minsize=50)

btn_roll = tk.Button(text=""Roll"", command=roll)
lbl_result = tk.Label()

btn_roll.grid(row=0, column=0, sticky=""nsew"")
lbl_result.grid(row=1, column=0)

window.mainloop()
-------------------------------------------------------------------------------
import tkinter as tk

def fahrenheit_to_celsius():
    """"""Convert the value for Fahrenheit to Celsius and insert the
    result into lbl_result.
    """"""
    fahrenheit = ent_temperature.get()
    celsius = (5 / 9) * (float(fahrenheit) - 32)
    lbl_result[""text""] = f""{round(celsius, 2)} \N{DEGREE CELSIUS}""

# Set up the window
window = tk.Tk()
window.title(""Temperature Converter"")
window.resizable(width=False, height=False)

# Create the Fahrenheit entry frame with an Entry
# widget and label in it
frm_entry = tk.Frame(master=window)
ent_temperature = tk.Entry(master=frm_entry, width=10)
lbl_temp = tk.Label(master=frm_entry, text=""\N{DEGREE FAHRENHEIT}"")

# Layout the temperature Entry and Label in frm_entry
# using the .grid() geometry manager
ent_temperature.grid(row=0, column=0, sticky=""e"")
lbl_temp.grid(row=0, column=1, sticky=""w"")

# Create the conversion Button and result display Label
btn_convert = tk.Button(
    master=window,
    text=""\N{RIGHTWARDS BLACK ARROW}"",
    command=fahrenheit_to_celsius
)
lbl_result = tk.Label(master=window, text=""\N{DEGREE CELSIUS}"")

# Set up the layout using the .grid() geometry manager
frm_entry.grid(row=0, column=0, padx=10)
btn_convert.grid(row=0, column=1, pady=10)
lbl_result.grid(row=0, column=2, padx=10)

# Run the application
window.mainloop()
===========================END==========================


"
cWF1CTnZ,INSTANT UGC,ToxinKindaScripts,Lua,Friday 22nd of March 2024 08:23:16 PM CDT,"while wait() do
local args = {
    [1] = ""Mini Puft""
}

game:GetService(""ReplicatedStorage""):WaitForChild(""RemoteEvents""):WaitForChild(""Collectible""):FireServer(unpack(args))
end

-- game link: https://www.roblox.com/games/5972698540
-- youtube video: https://youtu.be/K9SvCp5obdM"
LtU2s20X,Untitled,Zeinab_Hamdy,C++,Friday 22nd of March 2024 08:13:58 PM CDT,"#include<bits/stdc++.h>
using namespace std;
#define nl ""\n""
#define fi first
#define se second
#define pb push_back
#define ll long long
#define ull unsigned ll
#define RV  return void
#define sz(x) int(x.size())
#define all(v) v.begin(), v.end()
#define rall(v) v.rbegin(), v.rend()
#define fixed(n) fixed << setprecision(n)
#define cin(v) for (auto&i:v) cin >> i;
#define cout(v) for (auto&i:v) cout << i << "" "";
#define clr(memo, x) memset(memo, x, sizeof memo)
#define FastCode ios_base::sync_with_stdio(false); cin.tie(nullptr); cout.tie(nullptr);
 
void  Zainab(){
            // #ifndef ONLINE_JUDGE
              freopen(""hobz.in"", ""r"", stdin);
              // freopen(""longpath.out"", ""w"", stdout);
            // #endif
}


ll n;
vector < ll > v ,dp;

const ll inf = 1e15;

ll rec(ll idx ) {
   
    if(idx >= n) return (idx == n ? 0 : inf);
    
    ll & ret = dp[idx];
    if(~ret)
        return ret ;
    ret =inf;
    
    for(ll i =1 ; i <= min( 7ll , n-idx ) ; ++i){

        ret = min(ret , 1ll * v[idx] * i  + rec(idx+i));
    }

    return ret;
}

void myCode( int test){

cin >> n;
v.assign(n,0);
cin(v);

dp.assign(n+1 , -1);

cout << rec(0) << nl;
// for(int i =0 ; i < n ; i++) cout << i << "" "" << dp[i] << nl;
  
}
 
 
int main(){
                                   FastCode ;

    int testCase=1;
        //  cin >> testCase ;
      for(int i=1 ; i<= testCase ; i++)
        myCode(i);
 
    return 0;
}"
LB14hE55,"Keal's ""Phlegm"" PHP Mathematics Class",jargon,PHP,Friday 22nd of March 2024 07:55:47 PM CDT,"<?php

class phlegmClass
{
	public $bogus=""bogus"";
	
	public function __construct()
	{
		$this->bogus=""bogus"";
	}

	public function math($mnemonic="""",&$q=0,$p=0,$T=true,$F=false)
	{
		global $pretty, $stats;
			
		foreach(
			[
				""inequalityGates"" => false,
				""arithmeticOp"" => false,
				""vennGates"" => true
			] as $instructionSet => $truths
		)
		{
			switch(true)
			{
			case $truths:
				$ret = $this->$instructionSet($mnemonic,$q,$p,$T,$F);
			default:
				$ret = $this->$instructionSet($mnemonic,$q,$p);
			}
			
			if($ret !== $this->bogus){return $ret;}
		}
		
		return $this->bogus;
	}
					
	public function inequalityGates($mnemonic="""",&$q=0,$p=0)
	{
		global $pretty, $stats;
		
		if(is_string($mnemonic))
		{
			$mnemonic=strtoupper($mnemonic);
		}
		
		switch($mnemonic)
		{
		case ""EQU"":
		case ""=="":
		case ""==="":
			return ($q==$p);
			
		case ""NEQ"":
		case ""<>"":
		case ""!="":
		case ""!=="":
			return ($q!==$p);
			
		case ""GTR"":
		case "">"":
			return ($q>$p);
			
		case ""LSS"":
		case ""<"":
			return ($q<$p);
			
		case ""GEQ"":
		case "">="":
			return ($q>=$p);
			
		case ""LEQ"":
		case ""<="":
			return ($q<=$p);
			
		}
		
		return $this->bogus;
	}

	public function arithmeticOp($mnemonic="""",&$q=0,$p=0)
	{
		global $pretty, $stats;
		
		if(is_string($mnemonic))
		{
			$mnemonic=strtoupper($mnemonic);
		}

		switch($mnemonic)
		{
		case ""="":
			$q=$p;
			return $q;
			
		case ""&="":
		case "".="":
			$q.=$p;
			return $q;
			
		case ""+="":
			$q+=$p;
			return $q;
			
		case ""-="":
			$q-=$p;
			return $q;
			
		case ""*="":
			$q=$q*$p;
			return $q;
			
		case ""/="":
			$q=$q/$p;
			return $q;
			
		case ""++"":
			$q++;
			return $q;
			
		case ""--"":
			$q--;
			return $q;
			
		}
		
		return $this->bogus;
	}

	// 64bit x 20input floating gate emulator
	// 1280 total bits input, 64 total bits output
	// copyright 2002 01/26, 2024 03/20 Timothy Robert Keal alias jargon
	
	public function Gate16
	(
	
		$a = 0, $b = 0, $c = 0, $d = 0,
	
		$g0000 = 0,
		$g0001 = 0,
		$g0010 = 0,
		$g0011 = 0,
		$g0100 = 0,
		$g0101 = 0,
		$g0110 = 0,
		$g0111 = 0,
		$g1000 = 0,
		$g1001 = 0,
		$g1010 = 0,
		$g1011 = 0,
		$g1100 = 0,
		$g1101 = 0,
		$g1110 = 0,
		$g1111 = 0
	)
	
	{
		$tmp = 0;
		
		$tmp = $tmp | ($g0000 & ~($a | $b | $c | $d));
		$tmp = $tmp | ($g0001 & ~($this->IMP ( $d,($a | $b | $c))));
		$tmp = $tmp | ($g0010 & ~($this->IMP ( $c, ($a | $b | $d))));
		$tmp = $tmp | ($g0011 & ~($this->IMP ( ($c & $d), ($a | $b))));
		$tmp = $tmp | ($g0100 & ~($this->IMP ( $b, ($a | $c | $d))));
		$tmp = $tmp | ($g0101 & ~($this->IMP ( ($b & $d), ($a | $c))));
		$tmp = $tmp | ($g0110 & ~($this->IMP ( ($b & $c), ($a | $d))));
		$tmp = $tmp | ($g0111 & ~($this->IMP ( ($b & $c & $d), $a)));
		$tmp = $tmp | ($g1000 & ~($this->IMP ( $a, ($b | $c | $d))));
		$tmp = $tmp | ($g1001 & ~($this->IMP ( ($a & $d), ($b | $c))));
		$tmp = $tmp | ($g1010 & ~($this->IMP ( ($a & $c), ($b | $d))));
		$tmp = $tmp | ($g1011 & ~($this->IMP ( ($a & $c & $d), $b)));
		$tmp = $tmp | ($g1100 & ~($this->IMP ( ($a & $b), ($c | $d))));
		$tmp = $tmp | ($g1101 & ~($this->IMP ( ($a & $b & $d), $c)));
		$tmp = $tmp | ($g1110 & ~($this->IMP ( ($a & $b & $c), $d)));
		$tmp = $tmp | ($g1111 & ($a & $b & $c & $d));
		
		return $tmp;
	}
	
	public function IMP ($q,$p)
	{
		return ~$q | $p;
	}
	
	// 64bit x 6input floating gate emulator
	// 384 total bits input, 64 total bits output
	// copyright 2002 01/23, 2024 03/20 Timothy Robert Keal alias jargon
	
	public function Gate4
	(	
		$a = 0, $b = 0,
		
		$g00 = 0,
		$g01 = 0,
		$g10 = 0,
		$g11 = 0
	)
	{
		$a=intval($a);
		$b=intval($b);
		
		$tmp = 0;
		
		$tmp = $tmp | ($g00 & ~($a | $b));
		$tmp = $tmp | ($g01 & ~($this->IMP ( $b, $a)));
		$tmp = $tmp | ($g10 & ~($this->IMP ( $a, $b)));
		$tmp = $tmp | ($g11 & ($a & $b));
		
		return $tmp;
	}

	public function vennGates
	(
		$gate = true,
		$q = 0,
		$p = 0,
		$T = true,
		$F = false
	)
	{
		
		
		if(!is_bool($gate))
		{
			if(!is_numeric($gate))
			{
				if(is_string($gate))
				{
					$gate=strtolower($gate);
					if(explode("":"",$gate)[0] == ""bitwise"")
					{
						$float=explode("":"",$gate);
						$gate=str_replace(""_"","" "",$float[0]);
						unset($float[0]);
						$float=explode("","",implode("","",$float));
						$float=array_map('intval', $float);
					}
				}
			}else{
				$gate=intval($gate);

			}
		}else{
			$gate=boolval($gate);
		}
		
		switch($gate)
		{
		
		case 0:
		case false:
		case ""false"":
		case ""f"":		
			return $this->Gate4($q,$p,$F,$F,$F,$F);

		case 1:
		case ""q nor p"":
			return $this->Gate4($q,$p,$T,$F,$F,$F);

		case 2:
		case ""p nimp q"":
		case ""p not implying q"":
			return $this->Gate4($q,$p,$F,$T,$F,$F);

		case 3:
		case ""not q"":
			return $this->Gate4($q,$p,$T,$T,$F,$F);

		case 4:
		case ""q nimp p"":
		case ""q not implying p"":
			return $this->Gate4($q,$p,$F,$F,$T,$F);

		case 5:
		case ""not p"":
			return $this->Gate4($q,$p,$T,$F,$T,$F);

		case 6:
		case ""q neqv p"":
		case ""q xor p"":
		case ""q not equivalent p"":
			return $this->Gate4($q,$p,$F,$T,$T,$F);

		case 7:
		case ""q nand p"":
			return $this->Gate4($q,$p,$T,$T,$T,$F);

		case 8:
		case ""q and p"":
			return $this->Gate4($q,$p,$F,$F,$F,$T);

		case 9:
		case ""q eqv p"":
		case ""q xnor p"":
		case ""q equivalent p"":
			return $this->Gate4($q,$p,$T,$F,$F,$T);

		case 10:
		case ""p"":
			return $this->Gate4($q,$p,$F,$T,$F,$T);

		case 11:
		case ""q imp p"":
		case ""q implying p"":
			return $this->Gate4($q,$p,$T,$T,$F,$T);

		case 12:
		case ""p"":
			return $this->Gate4($q,$p,$F,$F,$T,$T);

		case 13:
		case ""p imp q"":
		case ""p implying q"":
			return $this->Gate4($q,$p,$T,$F,$T,$T);

		case 14:
		case ""q or p"":
			return $this->Gate4($q,$p,$F,$T,$T,$T);

		case 15:
		case true:
		case ""truth"":
		case ""true"":
		case ""t"":
			return $this->Gate4($q,$p,$T,$T,$T,$T);

		case ""bitwise"":
			return $this->Gate4($q,$p,$float[0],$float[1],$float[2],$float[3]);
			
		}
		
		return $this->bogus;
	}

	public function diceRoll($mnemonic,&$q,&$p)
	{
		global $pretty, $stats;
		
		$tally=1;
		
		$Pattern=""/([1-9][0-9]*[0-9]*|)d([1-9][0-9]*[0-9]*)/mi"";
		
		if(preg_match_all($Pattern,$mnemonic,$matches,PREG_SET_ORDER)==0){return $this->bogus;}

		$exD=explode(""d"",$mnemonic);
		
		if(count($exD)<2)
		{
			return $this->bogus;
		}
		
		if($exD[0]==""""){$exD[0]=1;}
		
		$q=$exD[0];
		$p=$exD[1];
		
		$tally=0;
		for($multi=1;$multi<=$exD[0];$multi++)
		{
			$tally+=rand(1,$exD[1]);
		}
		
		return $tally;
		
	}
}
"
dxz88gwu,Keal's Gamma Adjust,jargon,FreeBasic,Friday 22nd of March 2024 07:35:54 PM CDT,"
/' Keal's Gamma Adjust ( 2024 03/11 ) '/

declare Function AdjustGamma(ByVal cca As Double) As Double

declare Function AdjustDepth(sy1 as longint) As longint

Dim shared As Double adjustedGamma
'gamma = 2.2 ' Set your desired gamma value here

	' Calculate adjusted depth value
	cca = AdjustDepth(sy1)
		
	' Calculate adjusted gamma value
	adjustedGamma = AdjustGamma(cca) ', gamma)


	' Apply gamma adjustment
	pPix[p].r = (pPix[p].r * adjustedGamma) \ 255
	pPix[p].g = (pPix[p].g * adjustedGamma) \ 255
	pPix[p].b = (pPix[p].b * adjustedGamma) \ 255
	pPix[p].x = (pPix[p].x * adjustedGamma) \ 255

Function AdjustGamma(ByVal cca As Double) As Double
	return 255 * ((cca / 255) ^ (POSONE / GAMMA))
End Function

Function AdjustDepth(sy1 as longint) As longint
	return ((YDIM\POSTWO-sy1)*POSSIXTYFOUR)*POSTWO\YDIM
End Function
"
e4dPm8uH,bar_label_legend,NTahmid,HTML,Friday 22nd of March 2024 07:21:07 PM CDT,"
```<!DOCTYPE html>
<meta charset=""utf-8"">

<style>
.axis line{
      visibility:hidden;
    }

.axis .domain {
  display: none;
}

.axis {
	  font: 13px sans-serif;
	}

  .yUnits {
    font: 14px sans-serif;
  }

  .caption {
    font: 12px sans-serif;
  }

.chartDisplayTitle{
  fill:#354B5F;
  font-weight: bold;
  font: 20px sans-serif;
}

.annotation-line {
  stroke: red;
  stroke-width: 1.5px;
}

.annotation-circle {
  stroke: crimson;
  fill: none;
  stroke-width: 1.5px;
}

.annotation-text {
  fill: red;
  font-size: 13px;
  font-family: sans-serif;
}

.annotation-rect {
  fill: red;
  opacity: 0.1;
}
</style>

<svg class=""chart"" width=""960"" height=""590"" aria-labelledby=""graph-title"" aria-describedby=""graph-desc"">
    <title>GDP Growth Remains Broad Based</title>
    <desc id=""graph-desc"">GDP Growth Remains Broad Based, with values for 2017 quarters 1-3.</desc>
    <text transform=""translate(10, 20)"" class=""chartDisplayTitle"">Chart1</text>
    <text id=""graph-title"" transform=""translate(10, 45)"" class=""chartDisplayTitle"">GDP Growth Remains Broad Based</text>
    <text transform=""translate(10, 70)"" class=""yUnits"">Percentage points*</text>
    <text transform=""translate(10, 570)"" class=""caption"">*Contribution to total gross domestic product (GDP) growth; seasonally adjusted annualized rate.</text>
    <text transform=""translate(10, 585)"" class=""caption"">SOURCE: Bureau of Economic Analysis.</text>
</svg>

<script src=""https://d3js.org/d3.v4.min.js""></script>
<script src=""https://rawgit.com/susielu/d3-annotation/master/d3-annotation.min.js""></script>
<script>

const regression = d3.regressionLinear()
  .x(d => d.x)
  .y(d => d.y)
  .domain([0, 100]);

</script>
<script>

var econ2 = [
  {
    ""Category"": ""GDP"",
    ""2017 Q1"": 1.2,
    ""2017 Q2"": 3.1,
    ""2017 Q3 First Estimate"": 3.0
  },
  {
    ""Category"": ""Consumption"",
    ""2017 Q1"": 1.3,
    ""2017 Q2"": 2.2,
    ""2017 Q3 First Estimate"": 1.6

  },
  {
    ""Category"": ""Nonresidential investment"",
    ""2017 Q1"": 0.9,
    ""2017 Q2"": 0.8,
    ""2017 Q3 First Estimate"": 0.5

  },
  {
    ""Category"": ""Residential investment"",
    ""2017 Q1"": 0.4,
    ""2017 Q2"": -0.3,
    ""2017 Q3 First Estimate"": -0.2
  },
  {
    ""Category"": ""Inventories"",
    ""2017 Q1"": -1.5,
    ""2017 Q2"": 0.1,
    ""2017 Q3 First Estimate"": 0.7

  },
  {
    ""Category"": ""Net exports"",
    ""2017 Q1"": 0.2,
    ""2017 Q2"": 0.2,
    ""2017 Q3 First Estimate"": 0.4

  },
  {
    ""Category"": ""Government"",
    ""2017 Q1"": -0.1,
    ""2017 Q2"": 0.0,
    ""2017 Q3 First Estimate"": 0.0

  }
]

var svg = d3.select(""svg""),
    margin = {top: 80, right: 10, bottom: 80, left: 25},
    width = svg.attr(""width"") - margin.left - margin.right,
    height = svg.attr(""height"") - margin.top - margin.bottom,
    g = svg.append(""g"").attr(""transform"", ""translate("" + margin.left + "","" + margin.top + "")"");

var y = d3.scaleLinear()
      .domain([-2, 4])
      .range([height, 0]);

var x0 = d3.scaleBand()  
      .rangeRound([0, width])
      .paddingInner(0.1)
      .paddingOuter(0.1);

var x1 = d3.scaleBand()  
    .paddingOuter(0.25)
    .paddingInner(0.15);

var z = d3.scaleOrdinal()
        .range([""#BC151E"", ""#D3B178"", ""#354B5F""]);

const yAxis = d3.axisLeft(y).ticks(7);

var subCategories = Object.keys(econ2[0]).slice(1);

x0.domain(econ2.map( d =>  d.Category ));

x1.domain(subCategories).rangeRound([0, x0.bandwidth()])

  var selection = g.selectAll(""g"")
    .data(econ2)
    .enter().append(""g"")
      .attr(""transform"", d => ""translate("" + x0(d.Category) + "",0)"" )
    selection.selectAll(""rect"")
     .data(function(d) { return subCategories.map(function(key) { return {key: key, value: d[key]}; }); })
      .enter().append(""rect"")
      .attr(""x"", d => x1(d.key) )
      .attr(""y"", d => (d.value<0 ? y(0) : y(d.value)) )
      .attr(""width"", x1.bandwidth())
      .attr(""height"", d => Math.abs(y(d.value) - y(0)) )
      .attr(""fill"", d => z(d.key) )
    selection.selectAll(""text"")
       .data(function(d) { return subCategories.map(function(key) { return {key: key, value: d[key]}; }); })
        .enter().append(""text"")
        .attr(""x"", d => x1(d.key) )
        .attr(""y"", d => d.value<=0 ? y(0) - (y(4) - (Math.abs(y(d.value) - y(0)) + 20)) : y(d.value) - 10)
        .style('fill', d => z(d.key))
        .style('font-size', '1.25em')
        .text(d => Number.parseFloat(d.value).toFixed(1))

g.append(""g"")
    .attr(""class"", ""axis"")
    .attr(""transform"", ""translate(0,"" + height + "")"")
    .call(d3.axisBottom(x0))
    .selectAll("".tick text"")
    .call(wrap, x0.bandwidth());

g.append('g')
.call(yAxis)

g.append(""line"")
    .attr(""y1"", y(0))
    .attr(""y2"", y(0))
    .attr(""x1"", 0)
    .attr(""x2"", width)
    .attr(""stroke"", ""black"");

var legend = g.append(""g"")
      .attr(""font-family"", ""sans-serif"")
      .attr(""font-size"", 13)
      .attr(""text-anchor"", ""end"")
    .selectAll(""g"")
    .data(subCategories)
    .enter().append(""g"")
      .attr(""transform"", function(d, i) { return ""translate(0,"" + i * 24 + "")""; });
  legend.append(""rect"")
      .attr(""x"", width - 142)
      .attr(""width"", 8)
      .attr(""height"", 8)
      .attr(""fill"", z);
  legend.append(""text"")
          .attr(""x"", d => d.length > 7 ? (width + 5) : (width - 80))
          .attr(""y"", 5.5)
          .attr(""dy"", ""0.22em"")
          .text(d => (d));

  function wrap(text, width) {
            text.each(function() {
              var text = d3.select(this),
                  words = text.text().split(/\s+/).reverse(),
                  word,
                  line = [],
                  lineNumber = 0,
                  lineHeight = 1.1, 
                  y = text.attr(""y""),
                  dy = parseFloat(text.attr(""dy"")),
                  tspan = text.text(null).append(""tspan"").attr(""x"", 0).attr(""y"", y).attr(""dy"", dy + ""em"");
              while (word = words.pop()) {
                line.push(word);
                tspan.text(line.join("" ""));
                if (tspan.node().getComputedTextLength() > width) {
                  line.pop();
                  tspan.text(line.join("" ""));
                  line = [word];
                  tspan = text.append(""tspan"").attr(""x"", 0).attr(""y"", y).attr(""dy"", ++lineNumber * lineHeight + dy + ""em"").text(word);
                }
              }
            });
          }

// Annotations
var annotations = [
  {
    note: {
      label: ""GDP growth in Q2 and Q3"",
      title: ""Highlight""
    },
    x: x0(""GDP"") + x1(""2017 Q2""),
    y: y(3.1),
    dy: -30,
    dx: 30
  },
  {
    note: {
      label: ""Decrease in Residential investment in Q2"",
      title: ""Outlier""
    },
    x: x0(""Residential investment"") + x1(""2017 Q2""),
    y: y(-0.3),
    dy: 30,
    dx: 30
  }
];

var makeAnnotations = d3.annotation()
  .annotations(annotations);

g.append(""g"")
  .attr(""class"", ""annotation-group"")
  .call(makeAnnotations);

// Highlighting
g.selectAll("".highlight"")
  .data(econ2)
  .enter().append(""rect"")
  .attr(""class"", ""highlight"")
  .attr(""x"", d => x0(d.Category))
  .attr(""width"", x0.bandwidth())
  .attr(""y"", 0)
  .attr(""height"", height)
  .attr(""fill"", ""red"")
  .attr(""opacity"", d => d.Category === ""GDP"" || d.Category === ""Residential investment"" ? 0.1 : 0);

</script>```"
7y7nHdRN,2024-03-22_stats.json,rdp_snitch,JSON,Friday 22nd of March 2024 07:18:33 PM CDT,"{
  ""ip"": {
    ""80.66.76.92"": 9,
    ""81.19.135.47"": 9,
    ""58.218.204.183"": 12,
    ""194.169.175.21"": 3,
    ""187.190.60.112"": 3,
    ""198.235.24.111"": 9,
    ""87.251.75.64"": 3,
    ""194.165.16.37"": 3,
    ""185.170.144.113"": 9,
    ""185.170.144.3"": 6,
    ""87.251.75.145"": 9,
    ""36.91.222.100"": 6,
    ""196.190.117.7"": 6,
    ""194.165.16.72"": 6,
    ""87.251.75.120"": 6,
    ""103.151.53.100"": 3,
    ""198.235.24.131"": 9,
    ""120.240.145.8"": 3,
    ""185.73.125.127"": 3,
    ""185.196.220.41"": 9,
    ""113.160.91.206"": 3,
    ""193.142.146.227"": 9,
    ""71.6.134.234"": 30,
    ""187.191.116.227"": 3,
    ""62.204.41.123"": 12,
    ""212.70.149.146"": 3,
    ""165.154.129.130"": 3,
    ""167.248.133.36"": 3,
    ""205.210.31.33"": 9,
    ""91.150.126.124"": 3,
    ""179.60.149.155"": 9,
    ""101.200.164.85"": 3,
    ""194.165.16.76"": 6,
    ""185.81.68.38"": 9,
    ""71.6.134.235"": 30,
    ""45.227.254.54"": 6,
    ""167.248.133.52"": 3,
    ""198.235.24.102"": 9,
    ""80.66.88.211"": 3
  },
  ""asn"": {
    ""AS208091"": 33,
    ""AS209588"": 9,
    ""AS4134"": 12,
    ""AS209605"": 3,
    ""AS22884"": 3,
    ""AS396982"": 36,
    ""AS48721"": 15,
    ""AS197414"": 15,
    ""AS7713"": 6,
    ""AS24757"": 6,
    ""AS135918"": 3,
    ""AS56040"": 3,
    ""AS208046"": 18,
    ""AS45899"": 3,
    ""AS10439"": 60,
    ""AS262545"": 3,
    ""AS59425"": 12,
    ""AS204428"": 3,
    ""AS135377"": 3,
    ""AS398324"": 6,
    ""AS8400"": 3,
    ""AS395839"": 9,
    ""AS37963"": 3,
    ""AS57523"": 9,
    ""AS267784"": 6
  },
  ""isp"": {
    ""Xhost Internet Solutions LP"": 45,
    ""Flyservers S.A."": 30,
    ""Chinanet"": 12,
    ""UAB Host Baltic"": 3,
    ""Total Play Telecomunicaciones SA De CV"": 3,
    ""Google LLC"": 36,
    ""PT Telekomunikasi Indonesia"": 6,
    ""Ethiotelecom"": 6,
    ""Viet Digital Technology Liability Company"": 3,
    ""China Mobile communications corporation"": 3,
    ""ColocationX Ltd."": 18,
    ""VietNam Post and Telecom Corporation"": 3,
    ""CariNet, Inc."": 60,
    ""Mandic S.A."": 3,
    ""Horizon LLC"": 12,
    ""SS-Net"": 3,
    ""UCLOUD INFORMATION TECHNOLOGY (HK) LIMITED"": 3,
    ""Censys, Inc."": 6,
    ""TELEKOM-SRBIJA"": 3,
    ""HOSTKEY"": 9,
    ""Hangzhou Alibaba Advertising Co"": 3,
    ""Chang Way Technologies Co. Limited"": 9,
    ""Xhost Internet Solutions"": 3
  },
  ""org"": {
    ""Xhost Internet Solutions"": 27,
    ""Alviva Holding Limited"": 9,
    ""Chinanet JS"": 12,
    ""EmanuelHosting LTD"": 3,
    ""Total Play Telecomunicaciones SA De CV"": 3,
    ""Palo Alto Networks, Inc"": 36,
    ""Flyservers S.A"": 15,
    ""Xhostis"": 18,
    ""Telekomunikasi Indonesia"": 6,
    ""Unknown"": 9,
    ""FLYCLOUD Company Limited"": 3,
    ""China Mobile"": 3,
    ""Makut Investments"": 9,
    ""Vietnam Posts and Telecommunications Group"": 3,
    ""ColocationX Ltd"": 9,
    ""CariNet, Inc."": 60,
    ""Mandic S.A"": 3,
    ""Horizon LLC"": 12,
    ""4Media Ltd"": 3,
    ""UCLOUD INFORMATION TECHNOLOGY (HK) LIMITED"": 3,
    ""Censys, Inc."": 6,
    ""Safe VPN S.A"": 9,
    ""Aliyun Computing Co., LTD"": 3,
    ""Starcrecium Limited"": 9,
    ""UAB Host Baltic"": 6,
    ""XHOSTIS"": 3
  },
  ""regionName"": {
    ""North Holland"": 54,
    ""Hesse"": 9,
    ""Jiangsu"": 12,
    ""Kaunas"": 18,
    ""Hidalgo"": 3,
    ""California"": 36,
    ""Jakarta"": 6,
    ""Addis Ababa"": 6,
    ""Da Nang"": 3,
    ""Guangdong"": 3,
    ""Virginia"": 9,
    ""Hanoi"": 3,
    ""Nevada"": 60,
    ""Sao Paulo"": 3,
    ""Moscow"": 21,
    ""Sliven"": 3,
    ""England"": 3,
    ""Michigan"": 6,
    ""Belgrade"": 3,
    ""Managua Department"": 9,
    ""Beijing"": 3,
    ""Vilnius"": 6,
    ""Drenthe"": 3
  },
  ""country"": {
    ""The Netherlands"": 57,
    ""Germany"": 9,
    ""China"": 18,
    ""Lithuania"": 24,
    ""Mexico"": 3,
    ""United States"": 111,
    ""Indonesia"": 6,
    ""Ethiopia"": 6,
    ""Vietnam"": 6,
    ""Brazil"": 3,
    ""Russia"": 21,
    ""Bulgaria"": 3,
    ""United Kingdom"": 3,
    ""Serbia"": 3,
    ""Nicaragua"": 9
  },
  ""account"": {
    ""Administr"": 39,
    ""Domain"": 66,
    ""hello"": 24,
    ""qaADwHK"": 3,
    ""CzlZZubZB"": 3,
    ""XCZeGt"": 3,
    ""HOOtFQ"": 3,
    ""Test"": 39,
    ""PPiHwZILc"": 3,
    ""yJiVoj"": 3,
    ""SFfXAo"": 3,
    ""(empty)"": 9,
    ""eltons"": 30,
    ""administr"": 30,
    ""Administrator"": 3,
    ""trrchCuwI"": 3,
    ""YziCXH"": 3,
    ""pEnxCr"": 3,
    ""a"": 3,
    ""MFaxzBrxG"": 3,
    ""JejfAB"": 3,
    ""vAOmzh"": 3
  },
  ""keyboard"": {
    ""Unknown"": 282
  },
  ""client_build"": {
    ""Unknown"": 282
  },
  ""client_name"": {
    ""Unknown"": 282
  },
  ""ip_type"": {
    ""Unknown"": 144,
    ""hosting"": 75,
    ""proxy"": 12,
    ""mobile"": 12,
    ""hosting & proxy"": 39
  }
}"
Wr0HwWsV,2024-03-22_stats.json,rdp_snitch,JSON,Friday 22nd of March 2024 07:16:16 PM CDT,"{
  ""ip"": {
    ""80.66.76.92"": 6,
    ""81.19.135.47"": 6,
    ""58.218.204.183"": 8,
    ""194.169.175.21"": 2,
    ""187.190.60.112"": 2,
    ""198.235.24.111"": 6,
    ""87.251.75.64"": 2,
    ""194.165.16.37"": 2,
    ""185.170.144.113"": 6,
    ""185.170.144.3"": 4,
    ""87.251.75.145"": 6,
    ""36.91.222.100"": 4,
    ""196.190.117.7"": 4,
    ""194.165.16.72"": 4,
    ""87.251.75.120"": 4,
    ""103.151.53.100"": 2,
    ""198.235.24.131"": 6,
    ""120.240.145.8"": 2,
    ""185.73.125.127"": 2,
    ""185.196.220.41"": 6,
    ""113.160.91.206"": 2,
    ""193.142.146.227"": 6,
    ""71.6.134.234"": 20,
    ""187.191.116.227"": 2,
    ""62.204.41.123"": 8,
    ""212.70.149.146"": 2,
    ""165.154.129.130"": 2,
    ""167.248.133.36"": 2,
    ""205.210.31.33"": 6,
    ""91.150.126.124"": 2,
    ""179.60.149.155"": 6,
    ""101.200.164.85"": 2,
    ""194.165.16.76"": 4,
    ""185.81.68.38"": 6,
    ""71.6.134.235"": 20,
    ""45.227.254.54"": 4,
    ""167.248.133.52"": 2,
    ""198.235.24.102"": 6,
    ""80.66.88.211"": 2
  },
  ""asn"": {
    ""AS208091"": 22,
    ""AS209588"": 6,
    ""AS4134"": 8,
    ""AS209605"": 2,
    ""AS22884"": 2,
    ""AS396982"": 24,
    ""AS48721"": 10,
    ""AS197414"": 10,
    ""AS7713"": 4,
    ""AS24757"": 4,
    ""AS135918"": 2,
    ""AS56040"": 2,
    ""AS208046"": 12,
    ""AS45899"": 2,
    ""AS10439"": 40,
    ""AS262545"": 2,
    ""AS59425"": 8,
    ""AS204428"": 2,
    ""AS135377"": 2,
    ""AS398324"": 4,
    ""AS8400"": 2,
    ""AS395839"": 6,
    ""AS37963"": 2,
    ""AS57523"": 6,
    ""AS267784"": 4
  },
  ""isp"": {
    ""Xhost Internet Solutions LP"": 30,
    ""Flyservers S.A."": 20,
    ""Chinanet"": 8,
    ""UAB Host Baltic"": 2,
    ""Total Play Telecomunicaciones SA De CV"": 2,
    ""Google LLC"": 24,
    ""PT Telekomunikasi Indonesia"": 4,
    ""Ethiotelecom"": 4,
    ""Viet Digital Technology Liability Company"": 2,
    ""China Mobile communications corporation"": 2,
    ""ColocationX Ltd."": 12,
    ""VietNam Post and Telecom Corporation"": 2,
    ""CariNet, Inc."": 40,
    ""Mandic S.A."": 2,
    ""Horizon LLC"": 8,
    ""SS-Net"": 2,
    ""UCLOUD INFORMATION TECHNOLOGY (HK) LIMITED"": 2,
    ""Censys, Inc."": 4,
    ""TELEKOM-SRBIJA"": 2,
    ""HOSTKEY"": 6,
    ""Hangzhou Alibaba Advertising Co"": 2,
    ""Chang Way Technologies Co. Limited"": 6,
    ""Xhost Internet Solutions"": 2
  },
  ""org"": {
    ""Xhost Internet Solutions"": 18,
    ""Alviva Holding Limited"": 6,
    ""Chinanet JS"": 8,
    ""EmanuelHosting LTD"": 2,
    ""Total Play Telecomunicaciones SA De CV"": 2,
    ""Palo Alto Networks, Inc"": 24,
    ""Flyservers S.A"": 10,
    ""Xhostis"": 12,
    ""Telekomunikasi Indonesia"": 4,
    ""Unknown"": 6,
    ""FLYCLOUD Company Limited"": 2,
    ""China Mobile"": 2,
    ""Makut Investments"": 6,
    ""Vietnam Posts and Telecommunications Group"": 2,
    ""ColocationX Ltd"": 6,
    ""CariNet, Inc."": 40,
    ""Mandic S.A"": 2,
    ""Horizon LLC"": 8,
    ""4Media Ltd"": 2,
    ""UCLOUD INFORMATION TECHNOLOGY (HK) LIMITED"": 2,
    ""Censys, Inc."": 4,
    ""Safe VPN S.A"": 6,
    ""Aliyun Computing Co., LTD"": 2,
    ""Starcrecium Limited"": 6,
    ""UAB Host Baltic"": 4,
    ""XHOSTIS"": 2
  },
  ""regionName"": {
    ""North Holland"": 36,
    ""Hesse"": 6,
    ""Jiangsu"": 8,
    ""Kaunas"": 12,
    ""Hidalgo"": 2,
    ""California"": 24,
    ""Jakarta"": 4,
    ""Addis Ababa"": 4,
    ""Da Nang"": 2,
    ""Guangdong"": 2,
    ""Virginia"": 6,
    ""Hanoi"": 2,
    ""Nevada"": 40,
    ""Sao Paulo"": 2,
    ""Moscow"": 14,
    ""Sliven"": 2,
    ""England"": 2,
    ""Michigan"": 4,
    ""Belgrade"": 2,
    ""Managua Department"": 6,
    ""Beijing"": 2,
    ""Vilnius"": 4,
    ""Drenthe"": 2
  },
  ""country"": {
    ""The Netherlands"": 38,
    ""Germany"": 6,
    ""China"": 12,
    ""Lithuania"": 16,
    ""Mexico"": 2,
    ""United States"": 74,
    ""Indonesia"": 4,
    ""Ethiopia"": 4,
    ""Vietnam"": 4,
    ""Brazil"": 2,
    ""Russia"": 14,
    ""Bulgaria"": 2,
    ""United Kingdom"": 2,
    ""Serbia"": 2,
    ""Nicaragua"": 6
  },
  ""account"": {
    ""Administr"": 26,
    ""Domain"": 44,
    ""hello"": 16,
    ""qaADwHK"": 2,
    ""CzlZZubZB"": 2,
    ""XCZeGt"": 2,
    ""HOOtFQ"": 2,
    ""Test"": 26,
    ""PPiHwZILc"": 2,
    ""yJiVoj"": 2,
    ""SFfXAo"": 2,
    ""(empty)"": 6,
    ""eltons"": 20,
    ""administr"": 20,
    ""Administrator"": 2,
    ""trrchCuwI"": 2,
    ""YziCXH"": 2,
    ""pEnxCr"": 2,
    ""a"": 2,
    ""MFaxzBrxG"": 2,
    ""JejfAB"": 2,
    ""vAOmzh"": 2
  },
  ""keyboard"": {
    ""Unknown"": 188
  },
  ""client_build"": {
    ""Unknown"": 188
  },
  ""client_name"": {
    ""Unknown"": 188
  },
  ""ip_type"": {
    ""Unknown"": 96,
    ""hosting"": 50,
    ""proxy"": 8,
    ""mobile"": 8,
    ""hosting & proxy"": 26
  }
}"
7XSpBNQT,2024-03-22_stats.json,rdp_snitch,JSON,Friday 22nd of March 2024 07:15:08 PM CDT,"{
  ""ip"": {
    ""80.66.76.92"": 3,
    ""81.19.135.47"": 3,
    ""58.218.204.183"": 4,
    ""194.169.175.21"": 1,
    ""187.190.60.112"": 1,
    ""198.235.24.111"": 3,
    ""87.251.75.64"": 1,
    ""194.165.16.37"": 1,
    ""185.170.144.113"": 3,
    ""185.170.144.3"": 2,
    ""87.251.75.145"": 3,
    ""36.91.222.100"": 2,
    ""196.190.117.7"": 2,
    ""194.165.16.72"": 2,
    ""87.251.75.120"": 2,
    ""103.151.53.100"": 1,
    ""198.235.24.131"": 3,
    ""120.240.145.8"": 1,
    ""185.73.125.127"": 1,
    ""185.196.220.41"": 3,
    ""113.160.91.206"": 1,
    ""193.142.146.227"": 3,
    ""71.6.134.234"": 10,
    ""187.191.116.227"": 1,
    ""62.204.41.123"": 4,
    ""212.70.149.146"": 1,
    ""165.154.129.130"": 1,
    ""167.248.133.36"": 1,
    ""205.210.31.33"": 3,
    ""91.150.126.124"": 1,
    ""179.60.149.155"": 3,
    ""101.200.164.85"": 1,
    ""194.165.16.76"": 2,
    ""185.81.68.38"": 3,
    ""71.6.134.235"": 10,
    ""45.227.254.54"": 2,
    ""167.248.133.52"": 1,
    ""198.235.24.102"": 3,
    ""80.66.88.211"": 1
  },
  ""asn"": {
    ""AS208091"": 11,
    ""AS209588"": 3,
    ""AS4134"": 4,
    ""AS209605"": 1,
    ""AS22884"": 1,
    ""AS396982"": 12,
    ""AS48721"": 5,
    ""AS197414"": 5,
    ""AS7713"": 2,
    ""AS24757"": 2,
    ""AS135918"": 1,
    ""AS56040"": 1,
    ""AS208046"": 6,
    ""AS45899"": 1,
    ""AS10439"": 20,
    ""AS262545"": 1,
    ""AS59425"": 4,
    ""AS204428"": 1,
    ""AS135377"": 1,
    ""AS398324"": 2,
    ""AS8400"": 1,
    ""AS395839"": 3,
    ""AS37963"": 1,
    ""AS57523"": 3,
    ""AS267784"": 2
  },
  ""isp"": {
    ""Xhost Internet Solutions LP"": 15,
    ""Flyservers S.A."": 10,
    ""Chinanet"": 4,
    ""UAB Host Baltic"": 1,
    ""Total Play Telecomunicaciones SA De CV"": 1,
    ""Google LLC"": 12,
    ""PT Telekomunikasi Indonesia"": 2,
    ""Ethiotelecom"": 2,
    ""Viet Digital Technology Liability Company"": 1,
    ""China Mobile communications corporation"": 1,
    ""ColocationX Ltd."": 6,
    ""VietNam Post and Telecom Corporation"": 1,
    ""CariNet, Inc."": 20,
    ""Mandic S.A."": 1,
    ""Horizon LLC"": 4,
    ""SS-Net"": 1,
    ""UCLOUD INFORMATION TECHNOLOGY (HK) LIMITED"": 1,
    ""Censys, Inc."": 2,
    ""TELEKOM-SRBIJA"": 1,
    ""HOSTKEY"": 3,
    ""Hangzhou Alibaba Advertising Co"": 1,
    ""Chang Way Technologies Co. Limited"": 3,
    ""Xhost Internet Solutions"": 1
  },
  ""org"": {
    ""Xhost Internet Solutions"": 9,
    ""Alviva Holding Limited"": 3,
    ""Chinanet JS"": 4,
    ""EmanuelHosting LTD"": 1,
    ""Total Play Telecomunicaciones SA De CV"": 1,
    ""Palo Alto Networks, Inc"": 12,
    ""Flyservers S.A"": 5,
    ""Xhostis"": 6,
    ""Telekomunikasi Indonesia"": 2,
    ""Unknown"": 3,
    ""FLYCLOUD Company Limited"": 1,
    ""China Mobile"": 1,
    ""Makut Investments"": 3,
    ""Vietnam Posts and Telecommunications Group"": 1,
    ""ColocationX Ltd"": 3,
    ""CariNet, Inc."": 20,
    ""Mandic S.A"": 1,
    ""Horizon LLC"": 4,
    ""4Media Ltd"": 1,
    ""UCLOUD INFORMATION TECHNOLOGY (HK) LIMITED"": 1,
    ""Censys, Inc."": 2,
    ""Safe VPN S.A"": 3,
    ""Aliyun Computing Co., LTD"": 1,
    ""Starcrecium Limited"": 3,
    ""UAB Host Baltic"": 2,
    ""XHOSTIS"": 1
  },
  ""regionName"": {
    ""North Holland"": 18,
    ""Hesse"": 3,
    ""Jiangsu"": 4,
    ""Kaunas"": 6,
    ""Hidalgo"": 1,
    ""California"": 12,
    ""Jakarta"": 2,
    ""Addis Ababa"": 2,
    ""Da Nang"": 1,
    ""Guangdong"": 1,
    ""Virginia"": 3,
    ""Hanoi"": 1,
    ""Nevada"": 20,
    ""Sao Paulo"": 1,
    ""Moscow"": 7,
    ""Sliven"": 1,
    ""England"": 1,
    ""Michigan"": 2,
    ""Belgrade"": 1,
    ""Managua Department"": 3,
    ""Beijing"": 1,
    ""Vilnius"": 2,
    ""Drenthe"": 1
  },
  ""country"": {
    ""The Netherlands"": 19,
    ""Germany"": 3,
    ""China"": 6,
    ""Lithuania"": 8,
    ""Mexico"": 1,
    ""United States"": 37,
    ""Indonesia"": 2,
    ""Ethiopia"": 2,
    ""Vietnam"": 2,
    ""Brazil"": 1,
    ""Russia"": 7,
    ""Bulgaria"": 1,
    ""United Kingdom"": 1,
    ""Serbia"": 1,
    ""Nicaragua"": 3
  },
  ""account"": {
    ""Administr"": 13,
    ""Domain"": 22,
    ""hello"": 8,
    ""qaADwHK"": 1,
    ""CzlZZubZB"": 1,
    ""XCZeGt"": 1,
    ""HOOtFQ"": 1,
    ""Test"": 13,
    ""PPiHwZILc"": 1,
    ""yJiVoj"": 1,
    ""SFfXAo"": 1,
    ""(empty)"": 3,
    ""eltons"": 10,
    ""administr"": 10,
    ""Administrator"": 1,
    ""trrchCuwI"": 1,
    ""YziCXH"": 1,
    ""pEnxCr"": 1,
    ""a"": 1,
    ""MFaxzBrxG"": 1,
    ""JejfAB"": 1,
    ""vAOmzh"": 1
  },
  ""keyboard"": {
    ""Unknown"": 94
  },
  ""client_build"": {
    ""Unknown"": 94
  },
  ""client_name"": {
    ""Unknown"": 94
  },
  ""ip_type"": {
    ""Unknown"": 48,
    ""hosting"": 25,
    ""proxy"": 4,
    ""mobile"": 4,
    ""hosting & proxy"": 13
  }
}"
nYrqxHDF,bar_color,NTahmid,HTML,Friday 22nd of March 2024 07:06:19 PM CDT,"<!DOCTYPE html>
<meta charset=""utf-8"">

<style>
.axis line{
      visibility:hidden;
    }

.axis .domain {
  display: none;
}

.axis {
	  font: 13px sans-serif;
	}

  .yUnits {
    font: 14px sans-serif;
  }

  .caption {
    font: 12px sans-serif;
  }

.chartDisplayTitle{
  fill:#354B5F;
  font-weight: bold;
  font: 20px sans-serif;
}

.annotation {
  fill: red;
  font: 16px sans-serif;
  font-weight: bold;
}
</style>

<svg class=""chart"" width=""960"" height=""590"" aria-labelledby=""graph-title"" aria-describedby=""graph-desc"">
    <title>Analyzing Trends in Grouped Bar Charts</title>
    <desc id=""graph-desc"">This chart shows the trends in different categories of economic activity over the quarters of 2017. The height of each bar represents the percentage point contribution to total GDP growth.</desc>
    <text transform=""translate(10, 20)"" class=""chartDisplayTitle"">Chart1</text>
    <text id=""graph-title"" transform=""translate(10, 45)"" class=""chartDisplayTitle"">Analyzing Trends in Grouped Bar Charts</text>
    <text transform=""translate(10, 70)"" class=""yUnits"">Percentage points*</text>
    <text transform=""translate(10, 570)"" class=""caption"">*Contribution to total gross domestic product (GDP) growth; seasonally adjusted annualized rate.</text>
    <text transform=""translate(10, 585)"" class=""caption"">SOURCE: Bureau of Economic Analysis.</text>
</svg>
<script src=""https://d3js.org/d3.v4.min.js""></script>
<script>

var econ2 = [
  {
    ""Category"": ""GDP"",
    ""2017 Q1"": 1.2,
    ""2017 Q2"": 3.1,
    ""2017 Q3 First Estimate"": 3.0
  },
  {
    ""Category"": ""Consumption"",
    ""2017 Q1"": 1.3,
    ""2017 Q2"": 2.2,
    ""2017 Q3 First Estimate"": 1.6

  },
  {
    ""Category"": ""Nonresidential investment"",
    ""2017 Q1"": 0.9,
    ""2017 Q2"": 0.8,
    ""2017 Q3 First Estimate"": 0.5

  },
  {
    ""Category"": ""Residential investment"",
    ""2017 Q1"": 0.4,
    ""2017 Q2"": -0.3,
    ""2017 Q3 First Estimate"": -0.2
  },
  {
    ""Category"": ""Inventories"",
    ""2017 Q1"": -1.5,
    ""2017 Q2"": 0.1,
    ""2017 Q3 First Estimate"": 0.7

  },
  {
    ""Category"": ""Net exports"",
    ""2017 Q1"": 0.2,
    ""2017 Q2"": 0.2,
    ""2017 Q3 First Estimate"": 0.4

  },
  {
    ""Category"": ""Government"",
    ""2017 Q1"": -0.1,
    ""2017 Q2"": 0.0,
    ""2017 Q3 First Estimate"": 0.0

  }
]

var svg = d3.select(""svg""),
    margin = {top: 80, right: 10, bottom: 80, left: 25},
    width = svg.attr(""width"") - margin.left - margin.right,
    height = svg.attr(""height"") - margin.top - margin.bottom,
    g = svg.append(""g"").attr(""transform"", ""translate("" + margin.left + "","" + margin.top + "")"");

var y = d3.scaleLinear()
      .domain([-2, 4])
      .range([height, 0]);

var x0 = d3.scaleBand()
      .rangeRound([0, width])
      .paddingInner(0.1)
      .paddingOuter(0.1);

var x1 = d3.scaleBand()
    .paddingOuter(0.25)
    .paddingInner(0.15);

var z = d3.scaleOrdinal()
        .range([""#BC151E"", ""#D3B178"", ""#354B5F""]);

const yAxis = d3.axisLeft(y).ticks(7);

var subCategories = Object.keys(econ2[0]).slice(1);

x0.domain(econ2.map( d =>  d.Category ));

x1.domain(subCategories).rangeRound([0, x0.bandwidth()])

  var selection = g.selectAll(""g"")
    .data(econ2)
    .enter().append(""g"")
      .attr(""transform"", d => ""translate("" + x0(d.Category) + "",0)"" )
    selection.selectAll(""rect"")
     .data(function(d) { return subCategories.map(function(key) { return {key: key, value: d[key]}; }); })
      .enter().append(""rect"")
      .attr(""x"", d => x1(d.key) )
      .attr(""y"", d => (d.value<0 ? y(0) : y(d.value)) )
      .attr(""width"", x1.bandwidth())
      .attr(""height"", d => Math.abs(y(d.value) - y(0)) )
      .attr(""fill"", d => z(d.key) )
    selection.selectAll(""text"")
       .data(function(d) { return subCategories.map(function(key) { return {key: key, value: d[key]}; }); })
        .enter().append(""text"")
        .attr(""x"", d => x1(d.key) )
        .attr(""y"", d => d.value<=0 ? y(0) - (y(4) - (Math.abs(y(d.value) - y(0)) + 20)) : y(d.value) - 10)
        .style('fill', d => z(d.key))
        .style('font-size', '1.25em')
        .text(d => Number.parseFloat(d.value).toFixed(1))

g.append(""g"")
    .attr(""class"", ""axis"")
    .attr(""transform"", ""translate(0,"" + height + "")"")
    .call(d3.axisBottom(x0))
    .selectAll("".tick text"")
    .call(wrap, x0.bandwidth());

g.append('g')
.call(yAxis)

g.append(""line"")
    .attr(""y1"", y(0))
    .attr(""y2"", y(0))
    .attr(""x1"", 0)
    .attr(""x2"", width)
    .attr(""stroke"", ""black"");

var legend = g.append(""g"")
      .attr(""font-family"", ""sans-serif"")
      .attr(""font-size"", 13)
      .attr(""text-anchor"", ""end"")
    .selectAll(""g"")
    .data(subCategories)
    .enter().append(""g"")
      .attr(""transform"", function(d, i) { return ""translate(0,"" + i * 24 + "")""; });
  legend.append(""rect"")
      .attr(""x"", width - 142)
      .attr(""width"", 8)
      .attr(""height"", 8)
      .attr(""fill"", z);
  legend.append(""text"")
          .attr(""x"", d => d.length > 7 ? (width + 5) : (width - 80))
          .attr(""y"", 5.5)
          .attr(""dy"", ""0.22em"")
          .text(d => (d));

  function wrap(text, width) {
            text.each(function() {
              var text = d3.select(this),
                  words = text.text().split(/\s+/).reverse(),
                  word,
                  line = [],
                  lineNumber = 0,
                  lineHeight = 1.1,
                  y = text.attr(""y""),
                  dy = parseFloat(text.attr(""dy"")),
                  tspan = text.text(null).append(""tspan"").attr(""x"", 0).attr(""y"", y).attr(""dy"", dy + ""em"");
              while (word = words.pop()) {
                line.push(word);
                tspan.text(line.join("" ""));
                if (tspan.node().getComputedTextLength() > width) {
                  line.pop();
                  tspan.text(line.join("" ""));
                  line = [word];
                  tspan = text.append(""tspan"").attr(""x"", 0).attr(""y"", y).attr(""dy"", ++lineNumber * lineHeight + dy + ""em"").text(word);
                }
              }
            });
          }

// Annotations
g.append(""text"")
  .attr(""class"", ""annotation"")
  .attr(""x"", 200)
  .attr(""y"", 100)
  .text(""GDP growth increased from Q1 to Q2, then slightly decreased in Q3"");

g.append(""text"")
  .attr(""class"", ""annotation"")
  .attr(""x"", 400)
  .attr(""y"", 200)
  .text(""Consumption consistently contributed more to GDP growth than Government"");

</script>"
ujj5DzN9,Doors Dread Spawner,RobloxButExploits,Lua,Friday 22nd of March 2024 05:14:55 PM CDT,"-- Hello!
function DeathHint(args, Color) -- credits to Master Oogway in the kardin hong discord server
local func, setupval, getinfo, typeof, getgc, next = nil, debug.setupvalue or setupvalue, debug.getinfo or getinfo, typeof, getgc, next

for i,v in next, getgc(false) do
    if typeof(v) == ""function"" then
        local info = getinfo(v)
        if info.currentline == 54 and info.nups == 2 and info.is_vararg == 0 then
            func = v
            break
        end
    end
end

local function Hint(hints, type: string)
    setupval(func, 1, hints)
    if type ~= nil then
        setupval(func, 2, type)
    end
end

Hint({
unpack(args)
}, Color)
end
spawn(function()
require(game:GetService(""Players"").LocalPlayer.PlayerGui.MainUI.Initiator.Main_Game.RemoteListener.Modules.Dread)(require(game:GetService(""Players"").LocalPlayer.PlayerGui.MainUI.Initiator.Main_Game))
end)
repeat wait() until game:GetService(""Players"").LocalPlayer.PlayerGui.MainUI.MainFrame.DreadVignette.Visible == true
wait(1)
repeat wait() until game:GetService(""Players"").LocalPlayer.PlayerGui.MainUI.MainFrame.DreadVignette.ImageColor3 ~= Color3.fromRGB(0,0,0) or not workspace:FindFirstChild('Dread')
if not workspace:FindFirstChild(""Dread"") then -- Player went to the next door despawning dread.
return
end
 game:GetService(""ReplicatedStorage"") .GameStats[""Player_"".. game.Players.LocalPlayer.Name].Total.DeathCause.Value = ""Dread"" -- forcing the game to set the entity i died to as ""Dread""
  spawn(function()
 require(game:GetService(""Players"").LocalPlayer.PlayerGui.MainUI.Initiator.Main_Game.RemoteListener.Jumpscares.Dread) (require(game:GetService(""Players"").LocalPlayer.PlayerGui.MainUI.Initiator.Main_Game)) -- Dread Jumpscare
 end)
  wait(1)
  pcall(function()
  DeathHint({""You died to Dread..."", ""Try not to stall. Keep moving!""}, ""Blue"") -- Creating the Death Hint
end)
wait(1)
game.Players.LocalPlayer.Character.Humanoid:TakeDamage(1000) -- Killing the player"
SrBevCS2,Untitled,villev,Python,Friday 22nd of March 2024 04:49:16 PM CDT,"from llama_cpp import Llama
 

llm = Llama(
    model_path=""G:/poro-34b.Q3_K_M.gguf"",
    n_ctx=2048,
    n_threads=10,
    n_gpu_layers=5
)


while True:
    text_prompt = input(""LLM input: "")
    #
    if text_prompt == ""\n"":
        break
    #
    output = llm(
        text_prompt,
        max_tokens=512,
        stop=[""\n""],
        echo=True
    )
    #
    print(output[""choices""][0][""text""])
    print(""\n\n"")
"
W4VrV4i3,"Gumroad to Itch.io Export, Minimal",antijingoist,SQL,Friday 22nd of March 2024 04:07:56 PM CDT,"-- Use this to export your Gumroad sales data to a minimal import on Itch.io.
-- Go to your project on your Itch.io Dashboard, select Distribute, and select Kickstarter Import
-- More details on importing here: https://itch.io/docs/creators/kickstarter

SELECT
	`Purchase Email` AS ""Email"",
	FORMAT(""$%.2f"", `Sale Price ($)`) AS ""Amount""
FROM
	GumroadSalesRaw  -- Name of the table you imported your Gumroad CSV into
WHERE
-- 	`Item Name` IS ""Item Name"" -- filter by item name if you have more than one product
	`Do not contact?` IS 0
	AND `Buyer Email` IS NOT NULL
	AND `Fully Refunded?` IS 0
	AND `Disputed?` is 0;"
cP3UV7TL,Untitled,TheWaffleDimension,Lua,Friday 22nd of March 2024 03:56:05 PM CDT,"local binary = {}

local function bitoper(a, b, oper)
  local r, m, s = 0, 2^31
    repeat
      s,a,b = a+b+m, a%m, b%m
      r,m = r + m*oper%(s-a-b), m/2
    until m < 1
  return r
end

local function bor(a,b) return bitoper(a,b,1) end
local function bxor(a,b) return bitoper(a,b,3) end
local function band(a,b) return bitoper(a,b,4) end

local function lshift(a, n)
	return a*math.pow(2,n)
end

local function rshift(a, n)
	return math.floor(a/math.pow(2,n))
end

binary.band = bit.band or bit32.band or band
binary.bxor = bit.bxor or bit32.bxor or bxor
binary.bor = bit.bor or bit32.bor or bor
binary.lshift = bit.blshift or bit32.blshift or lshift
binary.rshift = bit.blogic_rshift or bit32.brshift or rshift
local band, bor, bxor, lshift, rshift = binary.band, binary.bor, binary.bxor, binary.lshift, binary.rshift

function binary.rol(a, n)
	local b = rshift(a, 32-n)
	return bor(lshift(a, n), b)
end

function binary.ror(a, n)
	local b = band(a, math.pow(2,n)-1)
	return bor(rshift(a, n), lshift(b, 32-n))
end

function binary.bxors(a, b)
	local q = """"

	for i=1,math.min(a:len(), b:len()) do
		q = q..string.char(bxor(a:byte(i,i), b:byte(i,i)))
	end

	if a:len() < b:len() then
		q = q..b:sub(q:len()+1)
	elseif b:len() < a:len() then
		q = q..a:sub(q:len()+1)
	end

	return q
end

function binary.bands(a, b)
	local q = """"

	for i=1,math.min(a:len(), b:len()) do
		q = q..string.char(band(a:byte(i,i), b:byte(i,i)))
	end

	if a:len() < b:len() then
		q = q..string.rep(""\0"", b-q:len()+1)
	elseif b:len() < a:len() then
		q = q..string.rep(""\0"", a-q:len()+1)
	end

	return q
end

function binary.bors(a, b)
	local q = """"

	for i=1,math.min(a:len(), b:len()) do
		q = q..string.char(bor(a:byte(i,i), b:byte(i,i)))
	end

	if a:len() < b:len() then
		q = q..b:sub(q:len()+1)
	elseif b:len() > a:len() then
		q = q..a:sub(q:len()+1)
	end

	return q
end

-- hashing algorithms
local hash = {}

function hash.sha1(m)
	local h0, h1, h2, h3, h4 = 0x67452301, 0xEFCDAB89, 0x98BADCFE, 0x10325476, 0xC3D2E1F0
	local ml = string.len(m)*8+8
	local m = m..'\x80'
	if ml % 512 ~= 0 then
		m = m..string.rep(""\0"", (512-(ml%512))/8)
	end
	
	local ml = string.len(m)*8
	for i=1,ml,512 do
		local a, b, c, d, e = h0, h1, h2, h3, h4

		local w = {}
		for i=0,15 do
			w[i+1] = string.byte(m, i*4, i*4)*256*256*256
			w[i+1] = w[i+1]+string.byte(m, i*4+1, i*4+1)*256*256
			w[i+1] = w[i+1]+string.byte(m, i*4+2, i*4+2)*256
			w[i+1] = w[i+1]+string.byte(m, i*4+3, i*4+3)
		end

		for i=16,79 do
			w[i+1] = binary.bxor(w[i-2], binary.bxor(w[i-7], binary.bxor(w[i-13], w[i-15])))
			w[i+1] = binary.rol(w[i+1], 1)
		end

		for j=0,79 do
			local f. k

			if i <= 19 then
				f = binary.bor(binary.band(b, c), binary.band(binary.bnot(b), d))
				k = 0x5A827999
			elseif i <= 39 then
				f = binary.bxor(b, binary.bxor(c, d))
				k = 0x6ED9EBA1
			elseif i <= 59 then
				f = binary.bor(binary.band(b, c), binary.bor(binary.band(b, d), binary.band(c, d)))
				k = 0x8F1BBCDC
			elseif i <= 79 then
				f = binary.bxor(b, binary.bxor(c, d))
				k = 0xCA62C1D6
			end

			local temp = binary.band(binary.rol(a, 5) + f + e + k + w[i+1], 0xffffffff)
			e, d, c, b, a = d, c, binary.rol(b, 30), a, temp
		end

		h0, h1, h2, h3, h4 = h0 + a, h1 + b, h2+c, h3+d, h4+e
	end

	return string.char(h0, h1, h2, h3, h4)
end

local len, sub, rep = string.len, string.sub, string.rep
local ceil = math.ceil

local function pad(x, b, with)
	if len(x) < b then
		return sub(x..rep(with, ceil((b-len(x))/len(with))), 1, b)
	else
		return x
	end
end

-- k = key
-- H = hash function
-- b = block size
local function block_sized_key(k, H, b)
	if len(k) > b then
		k = H(k)
	end

	if len(k) < b then
		return pad(k, b)
	end

	return k
end

-- H = hash function
-- m = message
-- k = secret key
-- b = block size
local function hmac(H, m, k, b)
	local kprime = block_sized_key(k, H, b)
	
	local opad = binary.bxors(rep(""\x5c"", b), kprime)
	local ipad = binary.bxors(rep(""\x36"", b), kprime)

	return H(binary.bors(opad, H(binary.bors(ipad, m))))
end"
xQKXaaAS,Softuni Students,bAngelov,JavaScript,Friday 22nd of March 2024 02:07:16 PM CDT,"function softUniStudents(data) {
    const courses = {}

    const actions = {

        "":"": value =>{
            const [name,capacity] = value.split("": "")
            if(!courses.hasOwnProperty(name)) courses[name] = {capacity:0,students:{}}
            courses[name]['capacity'] += Number(capacity)
        },
        ""["": value =>{
            const [studentName,credits,email,course] = value.match(/^([^\[]+)|(?<=\[)\d+|(?<=email\s)(\S+)|(?<=joins\s)(.+)/gm)
            if(courses.hasOwnProperty(course) && courses[course].capacity > Object.keys(courses[course].students).length){
                courses[course].students[studentName] = {credits:Number(credits),email:email}
            }

        },

    }

    for (let command of data){
        for (let action of Object.keys(actions)){
            if (command.includes(action)){
                actions[action](command)
                break
            }
        }
    }
    Object.entries(courses)
        .sort(([name,data],[nameB,dataB])=>Object.entries(dataB.students).length - Object.entries(data.students).length)
        .forEach(([courseName,data])=>{
            console.log(`${courseName}: ${data.capacity - Object.keys(data.students).length} places left`)
            Object.entries(data.students)
                .sort(([name,dat],[nameB,datB])=>datB.credits - dat.credits)
                .forEach(([name,dat])=>{
                    console.log(`--- ${dat.credits}: ${name}, ${dat.email}`)
                })
        })

}"
RuUti4ii,Script helligkeit-einstellen,breti76,YAML,Friday 22nd of March 2024 01:56:54 PM CDT,"alias: helligkeit-einstellen
sequence:
  - choose:
      - conditions:
          - condition: template
            value_template: ""{{ brightness < 64 }}""
        sequence:
          - service: script.turn_on
            target:
              entity_id: script.ueberdachung_dimm25
            data: {}
      - conditions:
          - condition: template
            value_template: ""{{ brightness < 128 }}""
        sequence:
          - service: script.turn_on
            target:
              entity_id: script.ueberdachung_dimm50
            data: {}
      - conditions:
          - condition: template
            value_template: ""{{ brightness < 192 }}""
        sequence:
          - service: script.turn_on
            target:
              entity_id: script.ueberdachung_dimm75
            data: {}
    default:
      - service: script.turn_on
        target:
          entity_id: script.ueberdachung_dimm100
        data: {}
mode: single
fields:
  brightness:
    selector:
      number:
        min: 1
        max: 255
        step: 1
    name: brightness
    required: true
"
tfhJeiEL,Untitled,Josif_tepe,C++,Friday 22nd of March 2024 01:52:12 PM CDT,"//{ Driver Code Starts
// Initial Template for C++

#include <bits/stdc++.h>
using namespace std;

// } Driver Code Ends
// User function Template for C++
class Solution {
  public:
    vector<int> idx, sz;
    int root(int x) {
        while(x != idx[x]) {
            idx[x] = idx[idx[x]];
            x = idx[x];
        }
        return x;
    }
    void join(int x, int y) {
        int root_x = root(x);
        int root_y = root(y);
        if(root_x != root_y) {
            if(sz[root_x] > sz[root_y]) {
                idx[root_y] = idx[root_x];
                sz[root_x] += sz[root_y];
            }
            else {
                idx[root_x] = idx[root_y];
                sz[root_y] += sz[root_x];
            }
        }
    }
    vector<int> numOfIslands(int n, int m, vector<vector<int>> &operators) {
        idx.resize(n * m);
        sz.resize(n * m);
        for(int i = 0; i < n * m; i++) {
            idx[i] = i;
            sz[i] = 1;
        }
        map<pair<int, int>, int> g;
        int cnt = 0;
        for(int i = 0; i < n; i++) {
            for(int j = 0; j < m; j++) {
                g[make_pair(i, j)] = cnt;
                cnt++;
            }
        }
        int di[] = {-1, 1, 0, 0};
        int dj[] = {0, 0, -1, 1};
        set<int> st;
        vector<int> res;
        vector<vector<int>> mat(n, vector<int>(m, 0));
        for(int i= 0; i < operators.size(); i++) {
            int ci = operators[i][0], cj = operators[i][1];
            mat[ci][cj] = 1;
            for(int k = 0; k < 4; k++) {
                int ti = di[k] + ci;
                int tj = dj[k] + cj;
                
                if(ti >= 0 and ti < n and tj >= 0 and tj < m and mat[ti][tj] == 1) {
                    if(st.find(root(g[make_pair(ti, tj)])) != st.end()) {
                        st.erase(st.find(root(g[make_pair(ti, tj)])));
                    }
                    int root_1 = root(g[make_pair(ci, cj)]), root_2 = root(g[make_pair(ti, tj)]);
                    join(root_1, root_2);
                }
            }
            st.insert(root(g[make_pair(ci, cj)]));
            res.push_back(st.size());
        }
        
        return res;
    }
};


//{ Driver Code Starts.
int main() {
    int t;
    cin >> t;
    while (t--) {
        int n,m,k; cin>>n>>m>>k;
        vector<vector<int>> a;
        
        for(int i=0; i<k; i++){
            vector<int> temp;
            for(int j=0; j<2; j++){
                int x; cin>>x;
                temp.push_back(x);
            }
            a.push_back(temp);
        }
    
        Solution obj;
        vector<int> res = obj.numOfIslands(n,m,a);
        
        for(auto x : res)cout<<x<<"" "";
        cout<<""\n"";
    }
}

// } Driver Code Ends"
VFb2TKMD,Untitled,Josif_tepe,C++,Friday 22nd of March 2024 01:46:00 PM CDT,"#include <queue>
#include <iostream>
#include <vector>
#include <cstring>
#include <iostream>
#include <set>
#include <cstring>
#include <stack>
#include <algorithm>
#include <map>
#include <cmath>
//#include <bits/stdc++.h>
using namespace std;
typedef long long ll;
const int maxn = 1e6 + 10;
const ll INF = 3e16 + 10;
const int max_point = 10000000;
int segment_tree[3 * maxn];
void build_tree(int L, int R, int node) {
    if(L == R) {
        segment_tree[node] = 0;
    }
    else {
        int mid = (L + R) / 2;
        build_tree(L, mid, 2 * node);
        build_tree(mid + 1, R, 2 * node + 1);
        segment_tree[node] = segment_tree[2 * node] + segment_tree[2 * node + 1];
    }
}
void update(int L, int R, int node, int idx, int new_value) {
    if(L == R) {
        segment_tree[node] = new_value;
        return;
    }
    int mid = (L + R) / 2;
    if(idx <= mid) {
        update(L, mid, 2 * node, idx, new_value);
    }
    else {
        update(mid + 1, R, 2 * node + 1, idx, new_value);
    }
    segment_tree[node] = segment_tree[2 * node] + segment_tree[2 * node + 1];
}
int query(int L, int R, int node, int i, int j) {
    // L R i L R j L R
    if(i <= L and R <= j) {
        return segment_tree[node];
    }
    if(R < i or j < L) {
        return 0;
    }
    int mid = (L + R) / 2;
    return query(L, mid, 2 * node, i, j) + query(mid + 1, R, 2 * node + 1, i, j);
}
int main() {
    ios_base::sync_with_stdio(false);
    int n;
    cin >> n;
    build_tree(0, n, 1);
    vector<int> v(n);
    for(int i = 0; i < n; i++) {
        cin >> v[i];
    }
     
    ll res = 0;
    for(int i = n - 1; i >= 0; i--) {
        update(0, n, 1, v[i], 1);
        res += query(0, n, 1, 0, v[i] - 1);
    }
    cout << res << endl;
    return 0;
}"
QR48teEb,"Earn Money With ""Earn Global""",SkidScripts,Python,Friday 22nd of March 2024 01:39:47 PM CDT,"Earn Fast Cash From Anywhere.

$25 bonus when you signup.
Earn $20 for every user you refer.
Get paid to invite friends, test out free apps and games, and more.

What to do:
1. Sign up & redeem $25 bonus!
2. Start sharing and earning
3. Earn money in the Offer area
4. Cashout your earnings!


Start Earning Now:
https://earnglobal.co/share/netroism

Rules: Reminder, if anyone is caught cheating or violating rules, you will be banned & your cashouts canceled."
yvAuvNTD,Untitled,Josif_tepe,C++,Friday 22nd of March 2024 01:34:19 PM CDT,"#include <iostream>
#include <vector>
#include <map>
#include <set>
using namespace std;
typedef long long ll;
const int maxn = 1e5 + 1;
const int INF = 2e9;
int dp[1005][maxn];

int main() {
    int n, x;
    cin >> n >> x;
    
    vector<int> prices(n), pages(n);
    for(int i = 0; i < n; i++) {
        cin >> prices[i];
    }
    for(int i =0 ; i < n; i++) {
        cin >> pages[i];
    }
    
    for(int i = 0; i <= n; i++) {
        for(int j = 0; j < maxn; j++) {
            dp[i][j] = -INF;
        }
    }
    dp[0][x] = 0;
    
    for(int at = 0; at < n; at++) {
        for(int sum = x; sum >= 0; sum--) {
            if(sum - prices[at] >= 0) {
                dp[at + 1][sum - prices[at]] = max(dp[at + 1][sum - prices[at]], dp[at][sum] + pages[at]);
            }
            dp[at + 1][sum] = max(dp[at + 1][sum], dp[at][sum]);
        }
    }
    int res = -INF;
    for(int sum = 0; sum <= x; sum++) {
        res = max(res, dp[n][sum]);
    }
    cout << res << endl;
    return 0;
}
//   2 1 3 3
"
XbQg9UuG,Proxy NGINX Novu self-hosting,thiagofaioli,Nginx,Friday 22nd of March 2024 01:31:43 PM CDT,"server {
    listen 80;

    # set client body size to 5M #
    client_max_body_size 20M;

    server_name mydns.com.br xxx.xxx.xxx.xxx;

    access_log  /var/log/nginx/novu_access.log;
    error_log /var/log/nginx/novu_error.log;

    location / {
			proxy_pass http://localhost:4200;
			proxy_http_version 1.1;
            if ($request_method = OPTIONS) {
              add_header 'Access-Control-Allow-Origin' '*';
              add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, DELETE';
              add_header 'Access-Control-Allow-Headers' 'Content-Type, Authorization';
              return 200;
            }
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header Host $host;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection ""upgrade"";
    }

    location /api {
            proxy_pass http://localhost:3000/api;
			proxy_http_version 1.1;
            add_header 'Access-Control-Allow-Origin' '*'; 
            add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, DELETE';
            add_header 'Access-Control-Allow-Headers' 'Content-Type, Authorization';
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header Host $host;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection ""upgrade"";
    }

    location /ws {
            proxy_pass http://localhost:3002/ws;
			proxy_http_version 1.1;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header Host $host;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection ""upgrade"";
    }

    location /widget {
			proxy_pass http://localhost:4500/widget;
            proxy_http_version 1.1;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header Host $host;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection ""upgrade"";
    }

    location /socket.io/ {
			proxy_pass http://localhost:3002;
            proxy_http_version 1.1;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header Host $host;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection ""upgrade"";
    }

# proxy_headers_hash_max_size 512;
# proxy_headers_hash_bucket_size 128;
}
"
GT2Ex119,Review ATC Brokers,fxvnpro,PHP,Friday 22nd of March 2024 12:57:56 PM CDT,https://www.fxvnpro.com/review-atc-brokers/
wx36AWqc,Review ATC Brokers,reviewbrokers,PHP,Friday 22nd of March 2024 12:57:23 PM CDT,https://www.reviewbrokers.net/review-atc-brokers/
xbN0MtMx,Untitled,yasi04,Python,Friday 22nd of March 2024 12:46:29 PM CDT,"import os
from dotenv import load_dotenv
import disnake
import asyncio
import sqlite3
from disnake.ext import commands

load_dotenv()

bot = commands.Bot(command_prefix=""!"", help_command=None, intents=disnake.Intents.all())

conn = sqlite3.connect('filters.db')
c = conn.cursor()

c.execute('''CREATE TABLE IF NOT EXISTS text_filters 
             (channel_id INTEGER PRIMARY KEY, filters TEXT)''')

c.execute('''CREATE TABLE IF NOT EXISTS link_filters 
             (channel_id INTEGER PRIMARY KEY, filters TEXT)''')

conn.commit()


@bot.event
async def on_ready():
    print(f""Bot {bot.user} is ready to work!"")


@bot.event
async def on_message(message):
    if message.author == message.guild.owner:
        return
    elif message.author == bot.user:
        await asyncio.sleep(120)
        await message.delete()
        return
    elif message.author.bot:
        return
    else:
        c.execute(""SELECT filters FROM link_filters WHERE channel_id = ?"", (message.channel.id,))
        row = c.fetchone()
        if row:
            filters = row[0].split(';')
            if message.content.startswith(""http://"") or message.content.startswith(""https://""):
                flag = True
                for word in filters:
                    if word == message.content.split('/')[2]:
                        flag = False
                        return
                if flag:
                    await message.delete()
                    await message.channel.send(f""*–í —ç—Ç–æ–º –∫–∞–Ω–∞–ª–µ –¥–æ—Å—Ç—É–ø–Ω—ã —Ç–æ–ª—å–∫–æ* `{filters}`, *–î—Ä—É–≥–æ–µ –Ω–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–æ XD*"")
                    return

        c.execute(""SELECT filters FROM text_filters WHERE channel_id = ?"", (message.channel.id,))
        row = c.fetchone()
        if row:
            text_filters = row[0].split(';')
            flag = True
            if message.content.split(' ')[0] in text_filters:
                flag = False
                return
            if flag:
                await message.delete()
                await message.channel.send(f""*–í —ç—Ç–æ–º –∫–∞–Ω–∞–ª–µ –¥–æ—Å—Ç—É–ø–Ω—ã —Ç–æ–ª—å–∫–æ* `{text_filters}`, *–î—Ä—É–≥–æ–µ –Ω–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–æ XD*"")
                return

    await bot.process_commands(message)


@bot.slash_command(description=""–¥–æ–±–∞–≤–∏—Ç—å —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∏–ª—å—Ç—Ä"")
async def add_text_filter(ctx, channel_id: str, filter_text: str):
    channel_id = int(channel_id)

    if ctx.author != ctx.guild.owner:
        await ctx.send('–ö–æ–º–∞–Ω–¥–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è —Å–æ–∑–¥–∞—Ç–µ–ª—è')
        return

    c.execute(""SELECT filters FROM text_filters WHERE channel_id = ?"", (channel_id,))
    row = c.fetchone()
    if row:
        old_filters = row[0]
        new_filters = old_filters + "";"" + filter_text
        c.execute(""UPDATE text_filters SET filters = ? WHERE channel_id = ?"", (new_filters, channel_id))
        conn.commit()
        await ctx.send('–ì–æ—Ç–æ–≤–æ')
    else:
        c.execute(""INSERT INTO text_filters (channel_id, filters) VALUES (?, ?)"", (channel_id, filter_text))
        conn.commit()
        await ctx.send('–ì–æ—Ç–æ–≤–æ')


@bot.slash_command(description=""–¥–æ–±–∞–≤–∏—Ç—å —Å—Å—ã–ª–∫—É –≤ —Ñ–∏–ª—å—Ç—Ä"")
async def add_link_filter(ctx, channel_id: str, filter_link: str):
    channel_id = int(channel_id)

    if ctx.author != ctx.guild.owner:
        await ctx.send('–ö–æ–º–∞–Ω–¥–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è —Å–æ–∑–¥–∞—Ç–µ–ª—è')
        return

    c.execute(""SELECT filters FROM link_filters WHERE channel_id = ?"", (channel_id,))
    row = c.fetchone()
    if row:
        old_filters = row[0]
        new_filters = old_filters + "";"" + filter_link
        c.execute(""UPDATE link_filters SET filters = ? WHERE channel_id = ?"", (new_filters, channel_id))
        conn.commit()
        await ctx.send('–ì–æ—Ç–æ–≤–æ')
    else:
        c.execute(""INSERT INTO link_filters (channel_id, filters) VALUES (?, ?)"", (channel_id, filter_link))
        conn.commit()
        await ctx.send('–ì–æ—Ç–æ–≤–æ')


@bot.slash_command(description=""—É–¥–∞–ª–∏—Ç—å —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∏–ª—å—Ç—Ä (–≤—ã–±–æ—Ä)"")
async def delete_filter(ctx, channel_id: str, filters: str):
    channel_id = int(channel_id)

    if ctx.author != ctx.guild.owner:
        await ctx.send('–ö–æ–º–∞–Ω–¥–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è —Å–æ–∑–¥–∞—Ç–µ–ª—è')
        return

    c.execute(""SELECT filters FROM text_filters WHERE channel_id = ?"", (channel_id,))
    row = c.fetchone()
    if row:
        text_filters = row[0].split(';')
        new_text_filters = [filter_word for filter_word in text_filters if filter_word not in filters.split(';')]
        new_text_filters_str = ';'.join(new_text_filters)
        c.execute(""UPDATE text_filters SET filters = ? WHERE channel_id = ?"", (new_text_filters_str, channel_id))
        conn.commit()

        await ctx.send('–ì–æ—Ç–æ–≤–æ')
    else:
        await ctx.send('–§–∏–ª—å—Ç—Ä–æ–≤ –¥–ª—è —ç—Ç–æ–≥–æ –∫–∞–Ω–∞–ª–∞ –∏ –Ω–µ –±—ã–ª–æ')


@bot.slash_command(description=""—É–¥–∞–ª–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä —Å—Å—ã–ª–æ–∫ (–≤—ã–±–æ—Ä)"")
async def delete_link_filter(ctx, channel_id: str, filters: str):
    channel_id = int(channel_id)

    if ctx.author != ctx.guild.owner:
        await ctx.send('–ö–æ–º–∞–Ω–¥–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è —Å–æ–∑–¥–∞—Ç–µ–ª—è')
        return

    c.execute(""SELECT filters FROM link_filters WHERE channel_id = ?"", (channel_id,))
    row = c.fetchone()
    if row:
        link_filters = row[0].split(';')
        new_link_filters = [filter_link for filter_link in link_filters if filter_link not in filters.split(';')]
        new_link_filters_str = ';'.join(new_link_filters)
        c.execute(""UPDATE link_filters SET filters = ? WHERE channel_id = ?"", (new_link_filters_str, channel_id))
        conn.commit()

        await ctx.send('–ì–æ—Ç–æ–≤–æ')
    else:
        await ctx.send('–§–∏–ª—å—Ç—Ä–æ–≤ –¥–ª—è —ç—Ç–æ–≥–æ –∫–∞–Ω–∞–ª–∞ –∏ –Ω–µ –±—ã–ª–æ')


@bot.slash_command(description=""—É–¥–∞–ª–∏—Ç—å –≤—Å–µ —Ñ–∏–ª—å—Ç—Ä—ã –¥–ª—è –∫–∞–Ω–∞–ª–∞"")
async def delete_all_filters(ctx, channel_id: str):
    channel_id = int(channel_id)

    if ctx.author != ctx.guild.owner:
        await ctx.send('–ö–æ–º–∞–Ω–¥–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è —Å–æ–∑–¥–∞—Ç–µ–ª—è')
        return

    c.execute(""DELETE FROM text_filters WHERE channel_id = ?"", (channel_id,))
    c.execute(""DELETE FROM link_filters WHERE channel_id = ?"", (channel_id,))
    conn.commit()

    await ctx.send('–ì–æ—Ç–æ–≤–æ')


bot.run(os.getenv('TOKEN'))
"
a2DcAmjQ,1.5c,Shiko5303,Lua,Friday 22nd of March 2024 12:20:26 PM CDT,gg.sleep(10)
2XKrbKsb,DSRBTDRMNDRY,gadungw71,PHP,Friday 22nd of March 2024 12:00:28 PM CDT,"‚Ä¢	https://www.senscritique.com/liste/xem_phim_qu_cu_2024_1080_full__vietsub/3798914
‚Ä¢	https://www.senscritique.com/liste/xem_phim_hd_qu_cu_2024_vietsub_phimmoi/3798922
‚Ä¢	https://www.senscritique.com/liste/Xem_Phim_Quy_Cau_Thuyet_Minh_2023_Vietsub/3798928
‚Ä¢	https://www.senscritique.com/liste/xem_phim_exhuma_qut_m_trung_ma_2024_1080_full__vietsub/3798951
‚Ä¢	https://www.senscritique.com/liste/Xemphim_Exhuma_Quat_Mo_Trung_Ma_2024_Full_HD/3798958
‚Ä¢	https://www.senscritique.com/liste/gh_Xem_Phim_Exhuma_Quat_Mo_Trung_Ma_2024_Vietsub_FULL4K/3798960
‚Ä¢	https://www.senscritique.com/liste/Xem_phim_Kung_Fu_Panda_4_20241080_FULL_Vietsub/3798964
‚Ä¢	https://www.senscritique.com/liste/xem_phim_kung_fu_panda_4_2024_full__vietsub/3798967
‚Ä¢	https://www.senscritique.com/liste/xem_phim_kung_fu_panda_4_2024_vietsub_full_4k/3798972
‚Ä¢	https://www.senscritique.com/liste/FULL_HD_Xem_Phim_Mai_2024_Vietsub_Thuyet_Minh/3798975
‚Ä¢	https://www.senscritique.com/liste/phim_mai_2024_hd_vietsub_thuyt_minh/3798982
‚Ä¢	https://scribehow.com/page/FULL_HD__Xem_Phim_Mai_2024_Vietsub__Thuyet_Minh4K__SdSaJgXjQLOAIinpg5BJZg
‚Ä¢	https://scribehow.com/page/Full_HD_Xem_Phim_Mai_2024_Vietsub_high_quality__RcuTfRj7Sf2O_p3149gSpg
‚Ä¢	https://www.senscritique.com/liste/2024_exhuma_____hd/3799010
‚Ä¢	https://www.senscritique.com/liste/exhuma___korean___hd_2024/3799025
‚Ä¢	https://www.senscritique.com/liste/Exhuma_2024_ZOOMhd/3799032
‚Ä¢	https://scribehow.com/page/_Exhuma2024_____HD1080P__eLtaLIh8Tn-tarwVxuYU_Q
‚Ä¢	https://scribehow.com/page/___Exhuma_2024-HD____full4k__2xyxBMX-RkunN9DY5GN5FQ
‚Ä¢	https://wandering.flarum.cloud/d/50870-jagjagwaringhas
‚Ä¢	https://click4r.com/posts/g/15693452/sutdownnight
‚Ä¢	https://hiuderyy.hashnode.dev/warobay
‚Ä¢	https://www.onfeetnation.com/profiles/blogs/phim-viet-nam-hd-4k
‚Ä¢	https://medium.com/@kusimagasri/%E8%A2%AB%E6%88%91%E5%BC%84%E4%B8%A2%E7%9A%84%E4%BD%A0-i-miss-you-%E5%AE%8C%E6%95%B4%E7%89%88%E6%9C%AC%E5%AE%8C%E6%95%B4%E7%94%B5%E5%BD%B1-hd-1080p-0150f032ea54
‚Ä¢	https://open.firstory.me/user/clu2vmgfu003i01vybyp9fgqy
‚Ä¢	https://open.firstory.me/story/clu2vpyqr1hpm01w14dl4bi6b
‚Ä¢	https://telegra.ph/SIMABDI-03-22
‚Ä¢	https://paste.ee/p/Pzyjw
‚Ä¢	https://start.me/w/qQ57MA
‚Ä¢	https://hackmd.io/@rerewilli6/BJzv7NsRa
‚Ä¢	https://rentry.co/cebf97o2
‚Ä¢	https://muckrack.com/doeden-berthth/bio
‚Ä¢	https://www.bitsdujour.com/profiles/UPvkUg
‚Ä¢	http://aldenfamilydentistry.com/UserProfile/tabid/57/userId/715605/Default.aspx
‚Ä¢	https://profile.hatena.ne.jp/zexixuqutab6/
‚Ä¢	https://www.fitlynk.com/3e0684b04
‚Ä¢	https://www.artstation.com/artwork/aowBy0
"
aHkLZQvj,Comments,bAngelov,JavaScript,Friday 22nd of March 2024 11:43:18 AM CDT,"//Passing all tests already

function solve(data) {
    const userList = []
    const articlesList = []
    const info = {}
    const postsOn = []

    const splitConditions = {
        user: value => [value.split(""user "")[1]],
        article: value => [value.split(""article "")[1]],
        ""posts on"": value => {
            let [first, second] = value.split("": "")
            first = first.split("" posts on "")
            second = second.split("", "")
            return [...first,...second]
        },
    }
    const actions ={
        user: value => userList.push(value),
        article: value => articlesList.push(value),
        'posts on':(userName,article,commentTitle, commentContent)=>{
            if (userList.includes(userName) && articlesList.includes(article)){
                if(!info.hasOwnProperty(article)) info[article] = {}
                if(!info[article].hasOwnProperty(userName)) info[article][userName] = {}
                info[article][userName][commentTitle] = commentContent
            }
        },
    }

    for (let command of data){
        for(let action of Object.keys(actions)){
            if (command.includes(action) && action !== ""posts on""){
                command = splitConditions[action](command)
                actions[action](...command)
                break
            }else if(command.includes(action) && action === ""posts on""){
                postsOn.push(command)
                break
            }
        }
    }
    for (let command of postsOn){
        command = splitConditions[""posts on""](command)
        actions[""posts on""](...command)
    }
    // My sort
    Object.entries(info)
        .sort(([name,data],[nameB,dataB])=>
            Object.entries(dataB).reduce((a,b)=>
                Number(a) + Object.keys(Object.values(b)).length,0) -
            Object.entries(data).reduce((a,b)=>
                Number(a) + Object.keys(Object.values(b)).length,0))
        .forEach(([article,users])=>{
            console.log(`Comments on ${article}`)
            Object.entries(users)
                .sort(([username,comments],[usernameB,commentsB])=>username.localeCompare(usernameB))
                .forEach(([username,comment])=>{
                    Object.entries(comment).forEach(currentComment=> {
                        console.log(`--- From user ${username}: ${currentComment.join(' - ')}`)
                    })
                })
        })
}"
ZRTDbj8P,Pow Loop,Flammrock,Batch,Friday 22nd of March 2024 11:42:30 AM CDT,"@echo off
setlocal enabledelayedexpansion

set ""pow=(b1=a,b2=b,b3=(b2&1)*b1,b4=1,b4*=(1-((b3|(~b3+1))>>31)&1)+b3,b2>>=1,b1*=b1,b3=(b2&1)*b1,b4*=(1-((b3|(~b3+1))>>31)&1)+b3,b2>>=1,b1*=b1,b3=(b2&1)*b1,b4*=(1-((b3|(~b3+1))>>31)&1)+b3,b2>>=1,b1*=b1,b3=(b2&1)*b1,b4*=(1-((b3|(~b3+1))>>31)&1)+b3,b2>>=1,b1*=b1,b3=(b2&1)*b1,b4*=(1-((b3|(~b3+1))>>31)&1)+b3,b2>>=1,b1*=b1,b3=(b2&1)*b1,b4*=(1-((b3|(~b3+1))>>31)&1)+b3,b2>>=1,b1*=b1,b3=(b2&1)*b1,b4*=(1-((b3|(~b3+1))>>31)&1)+b3,b2>>=1,b1*=b1,b3=(b2&1)*b1,b4*=(1-((b3|(~b3+1))>>31)&1)+b3,b2>>=1,b1*=b1,b3=(b2&1)*b1,b4*=(1-((b3|(~b3+1))>>31)&1)+b3,b2>>=1,b1*=b1,b3=(b2&1)*b1,b4*=(1-((b3|(~b3+1))>>31)&1)+b3,b2>>=1,b1*=b1,b3=(b2&1)*b1,b4*=(1-((b3|(~b3+1))>>31)&1)+b3,b2>>=1,b1*=b1,b3=(b2&1)*b1,b4*=(1-((b3|(~b3+1))>>31)&1)+b3,b2>>=1,b1*=b1,b3=(b2&1)*b1,b4*=(1-((b3|(~b3+1))>>31)&1)+b3,b2>>=1,b1*=b1,b3=(b2&1)*b1,b4*=(1-((b3|(~b3+1))>>31)&1)+b3,b2>>=1,b1*=b1,b3=(b2&1)*b1,b4*=(1-((b3|(~b3+1))>>31)&1)+b3,b2>>=1,b1*=b1,b3=(b2&1)*b1,b4*=(1-((b3|(~b3+1))>>31)&1)+b3,b2>>=1,b1*=b1,b3=(b2&1)*b1,b4*=(1-((b3|(~b3+1))>>31)&1)+b3,b2>>=1,b1*=b1,b3=(b2&1)*b1,b4*=(1-((b3|(~b3+1))>>31)&1)+b3,b2>>=1,b1*=b1,b3=(b2&1)*b1,b4*=(1-((b3|(~b3+1))>>31)&1)+b3,b2>>=1,b1*=b1,b3=(b2&1)*b1,b4*=(1-((b3|(~b3+1))>>31)&1)+b3,b2>>=1,b1*=b1,b3=(b2&1)*b1,b4*=(1-((b3|(~b3+1))>>31)&1)+b3,b2>>=1,b1*=b1,b3=(b2&1)*b1,b4*=(1-((b3|(~b3+1))>>31)&1)+b3,b2>>=1,b1*=b1,b3=(b2&1)*b1,b4*=(1-((b3|(~b3+1))>>31)&1)+b3,b2>>=1,b1*=b1,b3=(b2&1)*b1,b4*=(1-((b3|(~b3+1))>>31)&1)+b3,b2>>=1,b1*=b1,b3=(b2&1)*b1,b4*=(1-((b3|(~b3+1))>>31)&1)+b3,b2>>=1,b1*=b1,b3=(b2&1)*b1,b4*=(1-((b3|(~b3+1))>>31)&1)+b3,b2>>=1,b1*=b1,b3=(b2&1)*b1,b4*=(1-((b3|(~b3+1))>>31)&1)+b3,b2>>=1,b1*=b1,b3=(b2&1)*b1,b4*=(1-((b3|(~b3+1))>>31)&1)+b3,b2>>=1,b1*=b1,b3=(b2&1)*b1,b4*=(1-((b3|(~b3+1))>>31)&1)+b3,b2>>=1,b1*=b1,b3=(b2&1)*b1,b4*=(1-((b3|(~b3+1))>>31)&1)+b3,b2>>=1,b1*=b1,b3=(b2&1)*b1,b4*=(1-((b3|(~b3+1))>>31)&1)+b3,b2>>=1,b1*=b1,b3=(b2&1)*b1,b4*(1-((b3|(~b3+1))>>31)&1)+b3)""

for /l %%i in (1,1,6) do (
  set /a ""a=!random! %% 10""
  set /a ""b=!random! %% 10""
  set /a ""c=%pow%""
  echo;!a! ** !b! = !c!
)

pause>nul&exit
"
MfXcNDbN,Untitled,Ilya_Bykonya,C++ (with Qt extensions),Friday 22nd of March 2024 11:29:29 AM CDT,"
class CustomKeyCatcher: public QThread {
public:
    explicit CustomKeyCatcher(QObject* parent = nullptr)
        :QThread{ parent } {}
    void interruptAndWait() {
        requestInterruption();
        wait();
    }
protected:
    virtual void run() override {
        while(not isInterruptionRequested()) {
            const auto symbol = getchar();
            std::cout << ""Key pressed: "" << symbol << std::endl;
        }
    }
};

int main(int argc, char** argv) {
    QCoreApplication app{ argc, argv };

    auto catcher = new CustomKeyCatcher{ &app };
    QObject::connect(&app, &QCoreApplication::aboutToQuit, catcher, &CustomKeyCatcher::interruptAndWait);
    catcher->start(QThread::Priority::LowestPriority);

    return app.exec();
}

"
DPmtKDP7,Untitled,sissou123,C++,Friday 22nd of March 2024 11:23:47 AM CDT,"Beginning C++ Programming - From Beginner to Beyond
Obtain Modern C++ Object-Oriented Programming (OOP) and STL skills. C++14 and C++17 covered. C++20 info see below. 
What you'll learn
Learn to program with one of the most powerful programming languages that exists today, C++.
Obtain the key concepts of programming that will also apply to other programming languages 
for more:https://cuty.io/0drVyg9QYkqd
"
sxkLR3P0,versions,ab_random,HTML,Friday 22nd of March 2024 10:51:59 AM CDT,"<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <title>System version</title>

    <style>
        table {
            width: 100%;

            border-collapse: collapse;
            margin: 25px 0;
            font-size: 0.9em;
            font-family: sans-serif;
            box-shadow: 0 0 20px rgba(0, 0, 0, 0.15);
        }

        thead {
            background-color: #4c545c;
            color: #ffffff;
            text-align: left;
        }

        th, td {
            padding: 12px 15px;
        }

        tbody tr {
            border-bottom: 1px solid #dddddd;
        }

        tbody tr:nth-of-type(even) {
            background-color: #f3f3f3;
        }

        tbody tr:last-of-type {
            border-bottom: 2px solid #4c545c;
        }

        tbody tr:hover {
            color: #428aca;
        }

        a {
            color: #428aca;
        }

        [data-tooltip]:hover::after {
            display: block;
            position: absolute;
            content: attr(data-tooltip);
            /*border: 1px solid #4c545c;*/
            background: #ffffff;
            padding: .25em;
            color: black;
            box-shadow: 0 0 20px rgba(0, 0, 0, 0.15);
        }

        th:nth-child(2), th:nth-child(3), th:nth-child(8) {
            width: 0.1%;
            white-space: nowrap;
        }

        td {
            text-overflow: ellipsis;
        }

        #failed {
            summary {
                color: red;
                font-weight: bold;
            }

            .taskName {
                font-weight: bold;
            }

            li {
                padding: 12px 15px;
            }

            font-size: 0.9em;
            font-family: sans-serif;
        }
    </style>
</head>
<body>
<table>
    <thead>
    <tr>
        <th>Service</th>
        <th>IP</th>

        <th>Commit</th>

        <th>Committed</th>
        <th>By</th>
        <th>Message</th>
        <th>Branch</th>

        <th>Version</th>
        <th>Built</th>
        <th>At</th>
    </tr>
    </thead>

    <tbody id=""services"">
        <!-- Dynamic -->
    </tbody>
</table>

<div id=""failed"" style=""display: none"">
    <br/>
    <details>
        <summary>Failed tasks</summary>
        <ul>
            <!-- Dynamic -->
        </ul>
    </details>
</div>

</body>

<script>
    let url = './versions/raw';

    function addService(row, name, service) {
        // Service
        let cell = row.insertCell();
        cell.innerHTML = name.replace(/__.*/, '');

        // IP
        let host = name.replace(/^.*__/, '');
        row.insertCell().innerHTML = (host === name ? '' : host);

        const git = service.git;

        // https://git.intermb.ru/asupr/asupr-all/-/commit/e969130f1681c3da79fd345e1c4f4696210eeb99
        // ssh://git@git.intermb.ru:2224/asupr/asupr-all/-/commit/11e5d88353a7a098e09ea71406f6d89dd5a36d5c

        // Commit
        let a = document.createElement('a');
        a.appendChild(document.createTextNode(`#${git.commit.id.abbrev}`));
        a.href = `${git.remote.origin.url.replace(/^ssh:\/\/git@git\.intermb.ru:\d{2,5}/, 'https://git.intermb.ru')
            .replace('.git', '')}/-/commit/${git.commit.id.full}`;
        row.insertCell().appendChild(a)

        // Committed
        row.insertCell().innerHTML = git.commit.time;

        // By
        {
            let cell = row.insertCell();
            cell.innerHTML = git.commit.user.name;
            cell.setAttribute('data-tooltip', git.commit.user.email)
        }

        // Message
        row.insertCell().innerHTML = git.commit.message.full;

        // Branch
        row.insertCell().innerHTML = git.branch;

        // Version
        row.insertCell().innerHTML = git.build.version;

        // Built
        if (git.build.pipeline) {
            let remGit;
            if (git.build.gitlab.includes('git.mos.ru')) remGit = ' (DIT)'
            else if (git.build.gitlab.includes('git.intermb.ru')) remGit = ' (IM)'
            else remGit = ''

            let a = document.createElement('a');
            a.appendChild(document.createTextNode(`#${git.build.pipeline}${remGit}`));
            a.href = `${git.build.gitlab}/-/pipelines/${git.build.pipeline}`;
            row.insertCell().appendChild(a);

        } else {
            let cell = row.insertCell();
            cell.innerHTML = 'Local';
            cell.setAttribute('data-tooltip', git.build.host)
        }

        // At
        row.insertCell().innerHTML = git.build.time;
    }

    function addFaileds(failed) {
        const failedList = document.getElementById('failed')
        failedList.style.display = 'block'

        const list = failedList.getElementsByTagName('ul')[0]
        failed.forEach(problem => {
            const task = /^tasks.asupr_([\w_\-]+)/

            const taskName = document.createElement('span')
            taskName.className = 'taskName'
            taskName.appendChild(document.createTextNode(problem.match(task)[1]))

            const li = document.createElement('li');
            li.appendChild(taskName)
            li.appendChild(document.createTextNode(problem.replace(task, '')))

            list.appendChild(li)
        })
    }

    fetch(url)
        .then(res => res.json())
        .then(services => {

            let table = document.getElementById('services');

            Object.keys(services).sort().forEach(name => {
                if (name === 'lookup_problems') {
                    addFaileds(services[name])
                    return;
                }

                let service = services[name];
                let row = table.insertRow();

                addService(row, name, service);
            });
        })
</script>
</html>"
