id,title,username,language,date,content
6Kce6pdU,list.php  show file list on folder,ssaidz,PHP,Wednesday 29th of November 2023 12:01:39 PM CDT,"
<ul>
<?php

$folder = 'uploads'; // Ganti dengan path folder yang diinginkan

$files = scandir($folder, SCANDIR_SORT_ASCENDING);

// Membalik urutan file
$files = array_reverse($files);

// Menampilkan file sebagai link
foreach ($files as $file) {
    if (is_file($folder . '/' . $file)) {
        $fileSizeMB = round(filesize($folder . '/' . $file) / (1024 * 1024), 2);
        echo '[' . $fileSizeMB . 'MB] <a href=""' . $folder . '/' . $file . '"">' . $file . '</a> - ' . date(""F d Y H:i:s."", filemtime($folder . '/' . $file)) . ""<br>"";
    }
}
?>
</ul>"
CLZVMJnx,upload.php - upload via url and rename,ssaidz,PHP,Wednesday 29th of November 2023 12:00:41 PM CDT,"<?php
if(isset($_POST['submit'])){
  $file_url = $_POST['file_url'];
  $new_name = $_POST['new_name'];

  // Inisialisasi cURL
  $ch = curl_init($file_url);

  // Menentukan opsi untuk menyimpan hasil download ke variabel
  curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);

  // Melakukan request
  $data = curl_exec($ch);

  // Menutup koneksi cURL
  curl_close($ch);

  // Mendapatkan informasi nama file asli jika `<link>$new_name</link>` kosong
  if(empty($new_name)){
    $path_parts = pathinfo($file_url);
    $new_name = $path_parts['basename'];
  }

  // Menyimpan file ke folder uploads dengan nama baru
  if(file_put_contents('uploads/' . $new_name, $data) !== false){
    $file_url = 'http://' . $_SERVER['HTTP_HOST'] . '/uploads/' . $new_name;
    $file_size = filesize('uploads/' . $new_name);
    $file_size_mb = round($file_size/1024/1024, 2); // Mengonversi ukuran file ke MB
    echo ""File berhasil diunggah. <br>"";
    echo ""Nama file: <link>$new_name</link> <br>"";
    echo ""Ukuran file: $file_size_mb MB <br>"";
    echo ""Link: <a href='$file_url'>$file_url</a>"";
  } else {
    echo ""Gagal mengunggah file."";
  }
}
?>"
AK1zA6if,index.php - upload file via url and rename it,ssaidz,PHP,Wednesday 29th of November 2023 11:59:32 AM CDT,"<!DOCTYPE html>
<html>
<body>

<form action=""upload.php"" method=""post"">
  URL File: <input type=""text"" name=""file_url""><br>
  Nama Baru: <input type=""text"" name=""new_name""><br>
  <input type=""submit"" value=""Upload"" name=""submit"">
</form>
<?php
// Memeriksa apakah file_get_contents aktif
if (ini_get('allow_url_fopen')) {
    echo 'file_get_contents aktif';
} else {
    echo 'file_get_contents nonaktif';
}

echo '<br>';

// Memeriksa apakah cURL aktif
if (function_exists('curl_version')) {
    echo 'cURL aktif';
} else {
    echo 'cURL nonaktif';
}
?>
</body>
</html>"
56Zqd4s5,BTC Wallet Credentials have been reset,VQ-Moe,GetText,Wednesday 29th of November 2023 11:36:04 AM CDT,"Dear User
We have received a request to reset the login information for your Bitcoin wallet. If you did not make this request, please contact us immediately.

Your new login credentials will be 
chefman440:Jmh3x9ZB on 149.28.231.183
You can connect via SSH.

Regards,
GM-755337"
jxWCQc1b,Untitled,dllbridge,C,Wednesday 29th of November 2023 11:32:13 AM CDT,int n = 7;
rj8CPdmH,Untitled,dllbridge,C,Wednesday 29th of November 2023 11:31:30 AM CDT,"#include <stdio.h>


float height        (float v, float t);
float vertical_speed(float v, float t);

///////////////////////////////////////////////////////////////
int main()
{

	float v = 200,
	      t =   5;
	height        (v, t);
	vertical_speed(v, t);
}
//////////////////////////////////////////////////////////////

   float height(float v, float t)
{
	
	   int const g = 10,
		         i =  2;
	  
	   float height = v*t - (g * t * t) / i;

	   
   	   printf(""height = %.2f\n"", height);
	   return 0;
	  
}
   ////////////////////////////////////////////////////////////
   float vertical_speed(float v, float t)
{
	   int const g = 10,
		         i =  2;

	   float vertical_speed = v - g * t;


	   printf(""vertical speed = %.2f\n"", vertical_speed);

	   return 0;
}"
D6SzqVz1,Reverse String in Assembly,VladimirKostovsky,MIX Assembler,Wednesday 29th of November 2023 11:15:20 AM CDT,"section .data
    input_string db 'Hello, World!', 0  ; –í–∞—à–∞ —Å—Ç—Ä–æ–∫–∞ –¥–ª—è —á—Ç–µ–Ω–∏—è
    output_string db 20 dup(0)            ; –ë—É—Ñ–µ—Ä –¥–ª—è –ø–µ—Ä–µ–≤–µ—Ä–Ω—É—Ç–æ–π —Å—Ç—Ä–æ–∫–∏

section .text
    global _start

_start:
    ; –ù–∞—Ö–æ–¥–∏–º –¥–ª–∏–Ω—É –≤—Ö–æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
    mov ecx, 0
find_length:
    cmp byte [input_string + ecx], 0
    je  reverse_string

    inc ecx
    jmp find_length

reverse_string:
    ; –ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞—Ç–Ω—ã–π —Ü–∏–∫–ª
    mov esi, ecx          ; esi - –∏–Ω–¥–µ–∫—Å –∫–æ–Ω—Ü–∞ —Å—Ç—Ä–æ–∫–∏
    dec esi              ; —É–º–µ–Ω—å—à–∞–µ–º –Ω–∞ 1, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–π —Å–∏–º–≤–æ–ª —Å—Ç—Ä–æ–∫–∏
    mov edi, 0           ; edi - –∏–Ω–¥–µ–∫—Å –Ω–∞—á–∞–ª–∞ –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏

reverse_loop:
    cmp esi, 0           ; –ø—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ—Å—Ç–∏–≥–ª–∏ –ª–∏ –Ω–∞—á–∞–ª–∞ —Å—Ç—Ä–æ–∫–∏
    jl  end_program

    ; –ß–∏—Ç–∞–µ–º —Å–∏–º–≤–æ–ª –∏–∑ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
    mov al, [input_string + esi]

    ; –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–∏–º–≤–æ–ª –≤ –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–µ
    mov [output_string + edi], al

    ; –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∏–Ω–¥–µ–∫—Å—ã
    inc edi
    dec esi

    ; –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–π –∏—Ç–µ—Ä–∞—Ü–∏–∏ —Ü–∏–∫–ª–∞
    jmp reverse_loop

end_program:
    ; –ó–∞–≤–µ—Ä—à–∞–µ–º –ø—Ä–æ–≥—Ä–∞–º–º—É
    ; –í–∞—à –∫–æ–¥ –¥–ª—è –≤—ã–≤–æ–¥–∞ –∏–ª–∏ –¥–∞–ª—å–Ω–µ–π—à–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π

    ; –ü—Ä–µ—Ä—ã–≤–∞–Ω–∏–µ –¥–ª—è –≤—ã—Ö–æ–¥–∞ –∏–∑ –ø—Ä–æ–≥—Ä–∞–º–º—ã
    mov eax, 1           ; –∫–æ–¥ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞ –¥–ª—è exit
    xor ebx, ebx         ; –∫–æ–¥ –≤–æ–∑–≤—Ä–∞—Ç–∞ 0
    int 0x80             ; –≤—ã–∑–æ–≤ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è"
2TRbwAFw,A2,Tss_Flmzy,C++,Wednesday 29th of November 2023 11:09:24 AM CDT,"#include <chrono>
#include <fstream>
#include <random>
#include <vector>


void InsertionSort(std::vector<int>& v, int l, int r) {
    for (int i = l; i < r; ++i) {
        int j = i + 1;
        int curr = v[j];
        while (j > l && v[j - 1] > curr) {
            v[j] = v[j - 1];
            --j;
        }
        v[j] = curr;
    }
}

void Merge(std::vector<int>& v, int l, int r, int m) {
    auto left_size = m - l + 1;
    auto right_size = r - m;

    std::vector<int> left_arr = std::vector<int>(m - l + 1);
    std::vector<int> right_arr = std::vector<int>(r - m);


    for (int i = 0; i < left_size; ++i) {
        left_arr[i] = v[l + i];
    }
    for (int i = 0; i < right_size; ++i) {
        right_arr[i] = v[m + 1 + i];
    }

    int left_ind = 0;
    int right_ind = 0;
    int merge_ind = l;

    while (left_ind < left_size && right_ind < right_size)
    {
        if (left_arr[left_ind] <=
            right_arr[right_ind])
        {
            v[merge_ind] = left_arr[left_ind];
            ++left_ind;
        }
        else
        {
            v[merge_ind] = right_arr[right_ind];
            ++right_ind;
        }
        ++merge_ind;
    }

    while (left_ind < left_size)
    {
        v[merge_ind] = left_arr[left_ind];
        ++left_ind;
        ++merge_ind;
    }

    while (right_ind < right_size)
    {
        v[merge_ind] = right_arr[right_ind];
        ++right_ind;
        ++merge_ind;
    }
}

void HybridSort(std::vector<int>& v, int l, int r, int key) {
    if (r - l > key) {
        int m = (l + r) / 2;
        HybridSort(v, m + 1, r, key);
        HybridSort(v, l, m, key);
        Merge(v, l, r, m);
    } else {
        InsertionSort(v, l, r);
    }
}


int main() {
    std::random_device rd;
    std::default_random_engine re(rd());
    std::uniform_int_distribution<int> dist(0, 3000);
    std::vector<int> v = std::vector<int>(4000);

    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö 1-–π –≥—Ä—É–ø–ø—ã
    std::ofstream file_1;
    file_1.open(""group_1.txt"");
    for (int i = 500; i <= 4000; i += 100) {
        for (int j = 0; j < i; ++j) {
            int curr = dist(re);
            file_1 << curr << ' ';
        }
        file_1 << '\n';
    }
    file_1.close();

    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö 2-–π –≥—Ä—É–ø–ø—ã
    std::ofstream file_2;
    file_2.open(""group_2.txt"");
    for (int i = 500; i <= 4000; i += 100) {
        for (int j = 0; j < i; ++j) {
            int curr = dist(re);
            v[j] = curr;
        }
        HybridSort(v, 0, i - 1, 10);
        for (int j = 0; j < i; ++j) {
            file_2 << v[i - j - 1] << ' ';
        }
        file_2 << '\n';
    }
    file_2.close();

    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö 3-–π –≥—Ä—É–ø–ø—ã
    std::ofstream file_3;
    file_3.open(""group_3.txt"");
    for (int i = 500; i <= 4000; i += 100) {
        for (int j = 0; j < i; ++j) {
            int curr = dist(re);
            v[j] = curr;
        }
        HybridSort(v, 0, i - 1, 10);
        std::uniform_int_distribution<int> ind_dist(0, i - 1);
        for (int _ = 0; _ < 7; ++_) {
            std::swap(v[ind_dist(re)], v[ind_dist(re)]);
        }
        for (int j = 0; j < i; ++j) {
            file_3 << v[j] << ' ';
        }
        file_3 << '\n';
    }
    file_3.close();

    return 0;
}
"
cd1f3MJ7,Dideridos Champions,jaguenk,JSON,Wednesday 29th of November 2023 11:07:10 AM CDT,"{
""name"": ""Champions"",
""author"": ""üÖ∞Ô∏èüÖµ1üÖ≤üÖ∏üÖæÔ∏èüÖΩüÖ∞Ô∏èüÖ≥üÖæÔ∏èüÜÇ"",
""url"": ""https://pastebin.com/cd1f3MJ7"",
""image"": ""https://images3.alphacoders.com/595/595865.jpg"",
""telegram"": ""Lista_AF1CIONADOS"",
""info"": """",
""groups"":
    [
        {
        ""name"": ""Jornada 05 de 06"",
        ""info"":"""",
        ""image"": ""https://i.postimg.cc/6QN30jVd/ucl-fixtures.jpg"",
        ""imageScale"": """",
        ""groups"":
        	[
				{
        		""name"": ""Manchester City vs Leipzig"",
        		""info"":""Jornada 05"",
       	 		""image"": ""https://i.postimg.cc/GhpN9GNr/8.webp"",
        		""imageScale"": """",
        		""stations"":
            		[
						{
                		""name"": ""Manchester City vs Leipzig"",
                		""info"":""[Espa√±ol]"",
                		""image"": ""https://i.postimg.cc/GhpN9GNr/8.webp"",
                		""url"":""https://filemoon.sx/d/6d0bwoapcqkd"",
                		""isHost"":""true"",
                		""online"":""true""
                		}
            		]
        		},
				{
        		""name"": ""Young Boys vs Estrella Roja"",
        		""info"":""Jornada 05"",
       	 		""image"": ""https://i.postimg.cc/tJdXTPmF/7.webp"",
        		""imageScale"": """",
        		""stations"":
            		[
						{
                		""name"": ""Young Boys vs Estrella Roja"",
                		""info"":""[Espa√±ol]"",
                		""image"": ""https://i.postimg.cc/tJdXTPmF/7.webp"",
                		""url"":""https://filemoon.sx/d/o9e58zljmjpr"",
                		""isHost"":""true"",
                		""online"":""true""
                		}
            		]
        		},
				{
        		""name"": ""Barcelona vs Porto"",
        		""info"":""Jornada 05"",
       	 		""image"": ""https://i.postimg.cc/63mWgt4G/6.webp"",
        		""imageScale"": """",
        		""stations"":
            		[
						{
                		""name"": ""Barcelona vs Porto"",
                		""info"":""[Espa√±ol]"",
                		""image"": ""https://i.postimg.cc/63mWgt4G/6.webp"",
                		""url"":""https://filemoon.sx/d/niupnfpti35u"",
                		""isHost"":""true"",
                		""online"":""true""
                		}
            		]
        		},
				{
        		""name"": ""PSG vs. Newcastle"",
        		""info"":""Jornada 05"",
       	 		""image"": ""https://i.postimg.cc/yYS460t5/5.webp"",
        		""imageScale"": """",
        		""stations"":
            		[
						{
                		""name"": ""PSG vs. Newcastle"",
                		""info"":""[Espa√±ol]"",
                		""image"": ""https://i.postimg.cc/yYS460t5/5.webp"",
                		""url"":""https://filemoon.sx/d/wc0dbzq7w0he"",
                		""isHost"":""true"",
                		""online"":""true""
                		}
            		]
        		},
				{
        		""name"": ""Feyenoord vs Atl√©tico"",
        		""info"":""Jornada 05"",
       	 		""image"": ""https://i.postimg.cc/BvbCsBwP/4.webp"",
        		""imageScale"": """",
        		""stations"":
            		[
						{
                		""name"": ""Feyenoord vs Atl√©tico"",
                		""info"":""[Espa√±ol]"",
                		""image"": ""https://i.postimg.cc/BvbCsBwP/4.webp"",
                		""url"":""https://filemoon.sx/d/ls31poujb96y"",
                		""isHost"":""true"",
                		""online"":""true""
                		}
            		]
        		},
				{
        		""name"": ""Milan vs Dortmund"",
        		""info"":""Jornada 05"",
       	 		""image"": ""https://i.postimg.cc/2jhyMf6P/3.webp"",
        		""imageScale"": """",
        		""stations"":
            		[
						{
                		""name"": ""Milan vs Dortmund"",
                		""info"":""[Espa√±ol]"",
                		""image"": ""https://i.postimg.cc/2jhyMf6P/3.webp"",
                		""url"":""https://filemoon.sx/d/n42uou23buyi"",
                		""isHost"":""true"",
                		""online"":""true""
                		}
            		]
        		},
				{
        		""name"": ""Shakhtar vs Antwerp"",
        		""info"":""Jornada 05"",
       	 		""image"": ""https://i.postimg.cc/gjRRjXGp/2.webp"",
        		""imageScale"": """",
        		""stations"":
            		[
						{
                		""name"": ""Shakhtar vs Antwerp"",
                		""info"":""[Espa√±ol]"",
                		""image"": ""https://i.postimg.cc/gjRRjXGp/2.webp"",
                		""url"":""https://filemoon.sx/d/hkq04ys1g1h0"",
                		""isHost"":""true"",
                		""online"":""true""
                		}
            		]
        		},
				{
        		""name"": ""Lazio Vs Celtics"",
        		""info"":""Jornada 05"",
       	 		""image"": ""https://i.postimg.cc/2yjs0mJs/1.webp"",
        		""imageScale"": """",
        		""stations"":
            		[
						{
                		""name"": ""Lazio Vs Celtics"",
                		""info"":""[1er Tiempo]"",
                		""image"": ""https://i.postimg.cc/2yjs0mJs/1.webp"",
                		""url"":""https://ds2play.com/e/emyzl9pjlpnd?autoplay=1&auto_play=1"",
                		""isHost"":""true"",
                		""online"":""true""
                		},
						{
                		""name"": ""Lazio Vs Celtics"",
                		""info"":""[2er Tiempo]"",
                		""image"": ""https://i.postimg.cc/2yjs0mJs/1.webp"",
                		""url"":""https://ds2play.com/e/qcil2shq5suo?autoplay=1&auto_play=1"",
                		""isHost"":""true"",
                		""online"":""true""
                		}
            		]
        		}
			]
		}
	]
}"
XvQqfzNX,maint-bacula.sh,kinsham,Bash,Wednesday 29th of November 2023 11:04:21 AM CDT,"#!/bin/bash
#forked from:
# https://github.com/elonen/bareos-cleaner/blob/master/bareos-cleanup and
# https://admin.shamot.cz/?p=309
print_usage() {
  echo ""  -s""
  echo ""     status of all catalog volumes""
  echo ""  -c""
  echo ""     check configs""
  echo ""  -z""
  echo ""     list disk space used""
  echo ""  -p""
  echo ""     prune all volumes "";
  echo ""  -d""
  echo ""     check/repair catalog "";
  echo ""  -t""
  echo ""     update all volumes to \""actiononpurge=Truncate\"""";
  echo ""  -n""
  echo ""     update all volumes to \""actiononpurge=None\"""";
  echo ""  -Do""
  echo ""     delete obsolete volume files from disk and cloud storage""
  echo ""  -Dp""
  echo ""     delete all purged, recycle, error volumes from catalog""
  echo ""  -h""
  echo ""     print this screen"";
  echo """"
  exit 0
}

if [ $# -lt 1 ]; then
  print_usage
  exit 3
fi

dbname=""bacula""
dbuser=""bacula""
dbpass=""xxxxxx""
cloud=""backblaze:bacula01""

#local stores
cache=""/mnt/usb16tb/cache""
nas=""/mnt/nas-bacula""
qnap=""/mnt/nas-qnap""

#check which stores exist
if [ ! -d ${cache} ]; then
  cache=""""
fi
if [ ! -d  ${nas} ]; then
  nas=""""
fi
if [ ! -d  ${qnap} ]; then
  qnap=""""
fi
stores=""${nas} ${qnap} ${cache}""

status() {
#list status of all catalog volumes
for vol in $(echo ""llist media"" | bconsole | grep ""volumename:"" | awk '{print $2}')
do
  volname=$(echo ""llist volume=${vol}"" | bconsole | grep ""volumename:"" | xargs)
  volstat=$(echo ""llist volume=${vol}"" | bconsole | grep ""volstatus:"" | xargs)
  expires=$(echo ""llist volume=${vol}"" | bconsole | grep ""expiresin:"" | xargs | sed s/,//g)
  echo ""${volname}"" ""${volstat}"" ""${expires}""
done
}

configs() {
  if [ -z $(bacula-dir -t) ]; then
    echo ""director config OK""
  fi

  if [ -z $(bacula-fd -t) ]; then
    echo ""file daemon config OK""
  fi

  if [ -z $(bacula-sd -t) ]; then
    echo ""storage daemon config OK""
  fi
}

update_volume() {
  echo """"
  echo ""updating all volumes to \""actiononpurge=$1\""...""
  echo """"
  for storage in ${stores}; do
    echo ""Processing"" ${storage}
    BACULA_BATCH=""$(mktemp)""
    ls -1 ${storage} | while read vol; do
      echo ""update volume=${vol} ActionOnPurge=$1"" >> ${BACULA_BATCH}
    done
    bconsole < ${BACULA_BATCH} | grep $1
    rm ""${BACULA_BATCH}""
  done
}

pool_size() {
  for store in ${stores}; do
    if [[ -d ${store} ]] && [[ -n $(ls -1 ${store}) ]]; then  #exists and has files
      echo ${store}
      for pool in $(ls -1 ${store} | cut -d - -f 1 | sort -u); do #filename is pool-sequ
        echo ${pool} $'\t' $(sudo du -sch ${store}/${pool}* | grep total | cut -d $'\t' -f 1)
      done
      echo ${store} ""Total"" $(sudo du -sch ${store} | grep total)
    fi
done

#cloud
  if [[ ${store} = ""cloud"" ]]; then
    echo ""Cloud Total"" $(rclone size ${cloud} --human-readable)
  fi
}

checkdb() {
  dbcheck /var/lib/bacula/ ${dbname} ${dbuser} ${dbpass}
}

delete_obsolete_volumes() {
#################################################################################################
#list volumes that have no associated job and hence can be deleted from the catalog and disk/cloud
#################################################################################################
echo ""############################################""
echo ""Deleting volumes that have no associated job""
echo ""############################################""
  VOLUMES_TO_DELETE=""$(mktemp)""
  for vol in $(echo ""list media"" | bconsole | grep ""^| \+[0-9].*"" | awk '{print $4}'); do
    echo -e ""query 14\n${vol}\n"" | bconsole | if grep --quiet ""No results to list""; then
      status=$(echo ""list volume=${vol}"" | bconsole | grep ""^| \+[0-9].*"" | awk '{print $6}')
      echo ${vol} ""has no job"" ""status=""${status}  #volumes in catalog that have no associated job
#      if [ ${status} != ""Append"" ]; then
        echo ${vol} >> ${VOLUMES_TO_DELETE}  # do not delete Append status volumes
#      fi
    fi
  done

# Check whether we have found some volumes to delete
  numvols=$(wc -l ${VOLUMES_TO_DELETE} | awk '{print $1}')
  if [ ${numvols} -gt 0 ]; then
    echo ""${numvols} volumes are ready to delete: ""
    cat ""${VOLUMES_TO_DELETE}""
    echo -n ""Are you sure you want to delete these ${numvols} volumes ? \(yes|no\): ""
    read response
    if [ ${response} = ""yes"" ]; then
      cat ${VOLUMES_TO_DELETE} | while read vol; do
        echo -e ""delete yes volume=${vol}"" | bconsole  # delete from catalog
        volpath=$(find ${stores} -name ${vol}) # directories for cloud volumes
        if [ -f ${volpath} ]; then
          sudo -u bacula rm -rf ${volpath} # delete from disk also directories for cache
          echo ${volpath} ""deleted""
        fi
        rclone purge ${cloud}/${vol} # cloud
      done
      echo ""DONE: following volumes were deleted: ""
      cat ""${VOLUMES_TO_DELETE}""
    else
      echo ""quitting""
      exit 1
    fi
  else
    echo ""no volumes found to delete""
  fi
  rm ""${VOLUMES_TO_DELETE}""

#now check for disk volumes that are not in the catalog
  echo ""####################################################""
  echo ""Deleting volumes on disk that are not in the catalog""
  echo ""####################################################""
  VOLUMES_TO_DELETE=""$(mktemp)""
#cache
  echo ""cache""
  if [[ -d ${cache} ]] && [[ -n $(ls -1 ${cache}) ]]; then  #exists and has files
    for vol in $(basename -a $(sudo -u bacula find ${cache} -mindepth 1 -type d | sort)); do
      echo ""list volume=${vol}"" | bconsole | if grep --quiet ""No results to list""; then
        echo $(sudo -u bacula du -s -b ${cache}/${vol})
        sudo -u bacula rm -rf ${cache}/${vol}
        echo ""Deleted"" ""${cache}/${vol}""
      fi
    done
  fi
#cloud
  echo ""cloud""
  if [[ ! -z $(rclone ls ${cloud}) ]]; then
    for vol in $(basename -a $(rclone lsd ${cloud} | awk '{print $5}' | sort)); do
      echo ""list volume=${vol}"" | bconsole | if grep --quiet ""No results to list""; then
        echo ${vol} $(rclone size ${cloud}/${vol}) #print volumes/size that do not exist in catalog
        rclone purge ${cloud}/${vol} #delete on remote
        echo ""Deleted"" ${vol} $(rclone size ${cloud}/${vol})
      fi
    done
  fi
#dns-325
  echo ""DNS-325""
  if [[ -d ${nas} ]] && [[ -n $(ls -1 ${nas}) ]]; then  #exists and has files
    for vol in $(basename -a $(sudo find ${nas} -mindepth 1 -type f | sort)); do
      echo ""list volume=${vol}"" | bconsole | if grep --quiet ""No results to list""; then
        echo $(sudo -u bacula du -s -b ${nas}/${vol})
        sudo -u bacula rm -f ${nas}/${vol}
        echo ""Deleted"" ""${nas}/${vol}""
      fi
    done
  fi
#QNAP
  echo ""QNAP""
  if [[ -d ${qnqp} ]] && [[ -n $(ls -1 ${qnap}) ]]; then  #exists and has files
    for vol in $(basename -a $(sudo find ${qnap} -mindepth 1 -type f | sort)); do
      echo ""list volume=${vol}"" | bconsole | if grep --quiet ""No results to list""; then
        echo $(sudo -u bacula du -s -b ${qnap}/${vol})
        sudo -u bacula rm -f ${qnap}/${vol}
        echo ""Deleted"" ""${qnap}/${vol}""
      fi
    done
  fi
}

prune_all() {
  BACULA_BATCH=""$(mktemp)""
  echo """"
  echo ""pruning all volumes and let Bacula mark them as purged once the retention periods are expired...""
  echo """"
  for st in ${stores}; do
    ls -1 ${st} | while read vol; do
      echo ""prune volume=${vol}"" >> ${BACULA_BATCH}
      echo ""yes"" >> ${BACULA_BATCH}
    done
    bconsole < ${BACULA_BATCH} | grep -i ""marking it purged""
  done
  rm ""${BACULA_BATCH}""
}

delete_purged_volumes() {
# delete purged, recycle or error volumes from catalog
  echo ""searching for all purged, recycle, read-only or error volumes to be deleted...""
  echo ""purged""
  PURGED_VOLUMES=`echo ""list volumes"" | bconsole | grep ""Purged"" | awk '{print $4}'`
  if [[ -n ${PURGED_VOLUMES} ]]; then
    echo ""${PURGED_VOLUMES}""
    echo -n ""Are you sure you want to delete these purged volumes from the catalog ? \(yes|no\): ""
    read -r response
    if [[ ${response} = ""yes"" ]]; then
      for vol in ${PURGED_VOLUMES}; do
        echo ""delete volume=${vol} yes"" | bconsole
      done
    fi
  else
    echo ""no purged volumes""
  fi

  echo ""recycled""
  RECYCLE_VOLUMES=$(echo ""list volumes"" | bconsole | grep ""Recycle"" | awk '{print $4}')
  if [[ -n ${RECYCLE_VOLUMES} ]]; then
    echo ""${RECYCLE_VOLUMES}""
    echo -n ""Are you sure you want to delete these recycled volumes from the catalog ? \(yes|no\): ""
    read -r response
    if [[ ${response} = ""yes"" ]]; then
      for vol in ${RECYCLE_VOLUMES}; do
        echo ""delete volume=${vol} yes"" | bconsole
      done
    fi
  else
    echo ""no recycle volumes""
  fi

  echo ""errored""
  ERROR_VOLUMES=$(echo ""list volumes"" | bconsole | grep ""Error"" | awk '{print $4}')
  if [[ -n ${ERROR_VOLUMES} ]]; then
    echo ""${ERROR_VOLUMES}""
    echo -n ""Are you sure you want to delete these errored volumes from the catalog ? \(yes|no\): ""
    read -r response
    if [[ ${response} = ""yes"" ]]; then
      for vol in ${ERROR_VOLUMES}; do
        echo ""delete volume=${vol} yes"" | bconsole
      done
    fi
  else
    echo ""no error volumes""
  fi

  echo ""read only""
  READ_ONLY_VOLUMES=$(echo ""list volumes"" | bconsole | grep ""Read-Only"" | awk '{print $4}')
  if [[ -n ${READ_ONLY_VOLUMES} ]]; then
    echo ""${READ_ONLY_VOLUMES}""
    echo -n ""Are you sure you want to delete these read-only volumes from the catalog ? \(yes|no\): ""
    read -r response
    if [[ ${response} = ""yes"" ]]; then
      for vol in ${READ_ONLY_VOLUMES}; do
        echo ""delete volume=${vol} yes"" | bconsole
      done
    fi
  else
    echo ""no read only volumes""
  fi
}

# Parse parameters
while [ $# -gt 0 ]; do
  case ""$1"" in
  -h | --help)
    print_usage
    exit 0
    ;;
  -s)
    shift
    status
    exit 0
    ;;
  -c)
    shift
    configs
    exit 0
    ;;
  -z)
    shift
    pool_size
    exit 0
    ;;
  -t)
    shift
    update_volume Truncate
    exit 0
    ;;
  -d)
    shift
    checkdb
    exit 0
    ;;
  -p)
    shift
    prune_all
    exit 0
    ;;
  -n)
    shift
    update_volume None
    exit 0
    ;;
  -Do)
    shift
    delete_obsolete_volumes
    exit 0
    ;;
  -Dp)
    shift
    delete_purged_volumes
    exit 0
    ;;
  *)  echo 'Unknown argument: ' $1
      print_usage
      exit 3
      ;;
  esac
done
exit 1
"
hv3n8cFr,Untitled,Martin_Toseski,C++,Wednesday 29th of November 2023 10:54:29 AM CDT,"class Solution {
public:
    const int d = 4;
    const int mod = 1000003;

    map<char, int> dna;
    map<int, int> m;
    
    vector<string> robin_karp(string& text) {
        vector<string> rez;

        dna['A'] = 0;
        dna['C'] = 1;
        dna['G'] = 2;
        dna['T'] = 3;

        int N = text.size();
        int M = 10;

        int hash_t = 0, h = 1;

        for (int i=0; i < M-1; i++) {
            h = (h * d);
        }

        for (int i=0; i < M; i++) {
            hash_t = ((hash_t * d) + dna[text[i]]);
        }

        int l = 0, r = M, cnt = 0;

        while (r <= N) {
            m[hash_t]++;
            if (m[hash_t] == 2)
                rez.push_back(text.substr(l, 10));

            if (r == N)
                break;

            hash_t = (hash_t - dna[text[l]] * h);
            hash_t = (hash_t * d + dna[text[r]]);

            if (hash_t < 0)
                hash_t += mod;
            
            l++;
            r++;
        }

        return rez;
    }

    vector<string> findRepeatedDnaSequences(string s) {
        vector<string> rez = robin_karp(s);
        return rez;
    }
};"
QAzrfGcB,miner,Voxel3042,Lua,Wednesday 29th of November 2023 10:52:21 AM CDT,"function mine()
  turtle.dig()
  turtle.forward()
  turtle.digUp()
  turtle.digDown()
end

function mine_process()
  mine()
  turtle.turnRight()
  mine()
  turtle.turnLeft()
  mine()
  turtle.turnLeft()
  mine()
  turtle.turnRight()
end

while true do
	mine_process()
end"
9yjqSdJL,Minecraft Stargate Journey 1.20.1-0.6.8 readme,MarcosKoco,Lua,Wednesday 29th of November 2023 10:39:30 AM CDT,"Version 0.0.2 :

Changed Button Api to in File Function (no download required any more).
Fixed bugs.


Version: 0.0.1 :

Made the program till it worked my way.
Dail with milky way stargate to other gates or press 0 to close the portal with cc:tweaked (computercraft).
To added a address u can use the equals key. It will be save in a file and u also can edit the file. It will load it at the start of the program. Warning, dont go over the 9. Im still working to added more adresses, but they wont be on number buttons.

Still W.I.P."
rxYAEVTM,yoyo snowybot ++,coinwalk,JavaScript,Wednesday 29th of November 2023 10:36:52 AM CDT,"var sturn = parseFloat(document.getElementById('pct_balance').value);
var kill = (sturn/1000).toFixed(8);
var freakish = kill;
var taget = (kill*24000);
var dozer = (kill*10);
var soven = (kill*6.9);
var ovenbake = (kill*7.9);
var trailbob = (kill*3);
var tobetnext = ((freakish*1).toFixed(8));
var goodly = sturn;
var gjebers = sturn;
var flight =  6.9;
var submarine = 2.9;
var submerge = 12.9;
var fart = 1;
var fickle = true;
var stick = 0;
var nobby = sturn;
var james = ((Math.floor(sturn/dozer))*dozer);
 
function get(){
console.clear();
goodly = document.getElementById('pct_balance').value;
if (goodly>(james+(freakish*flight))){
    freakish = freakish*2;
    flight =  4.9;
    submarine = 4.9;
    james = parseFloat(goodly);
}
if (goodly<(james-(freakish*submarine))){
    freakish = freakish*2; 
    flight =  4.9;
    submarine = 4.9;
    james = parseFloat(goodly);
}
if ((freakish*3)>=(kill*14)){
    freakish = kill;
    flight =  6.9;
    submarine = 2.9;
    james = ((Math.floor(goodly/dozer))*dozer);
} 
  if (goodly >= taget) {
        console.log(""winner winner chicken dinner"");
        return;
    }
tobetnext = (freakish*1).toFixed(8);
$('#pct_chance').val(49.5);
$('#pct_bet').val(tobetnext);
$('#a_lo').click();
var good = ((goodly-sturn).toFixed(8));
console.log(""profit"");
console.log(good);
setTimeout(() => get(), 1);
}
get()"
hA4LwRkt,Untitled,Tss_Flmzy,C++,Wednesday 29th of November 2023 10:36:17 AM CDT,"#include <chrono>
#include <fstream>
#include <random>
#include <vector>


void InsertionSort(std::vector<int>& v, int l, int r) {
    for (int i = l; i < r; ++i) {
        int j = i + 1;
        int curr = v[j];
        while (j > l && v[j - 1] > curr) {
            v[j] = v[j - 1];
            --j;
        }
        v[j] = curr;
    }
}

void Merge(std::vector<int>& v, int l, int r, int m) {
    auto left_size = m - l + 1;
    auto right_size = r - m;

    std::vector<int> left_arr = std::vector<int>(m - l + 1);
    std::vector<int> right_arr = std::vector<int>(r - m);


    for (int i = 0; i < left_size; ++i) {
        left_arr[i] = v[l + i];
    }
    for (int i = 0; i < right_size; ++i) {
        right_arr[i] = v[m + 1 + i];
    }

    int left_ind = 0;
    int right_ind = 0;
    int merge_ind = l;

    while (left_ind < left_size && right_ind < right_size)
    {
        if (left_arr[left_ind] <=
            right_arr[right_ind])
        {
            v[merge_ind] = left_arr[left_ind];
            ++left_ind;
        }
        else
        {
            v[merge_ind] = right_arr[right_ind];
            ++right_ind;
        }
        ++merge_ind;
    }

    while (left_ind < left_size)
    {
        v[merge_ind] = left_arr[left_ind];
        ++left_ind;
        ++merge_ind;
    }

    while (right_ind < right_size)
    {
        v[merge_ind] = right_arr[right_ind];
        ++right_ind;
        ++merge_ind;
    }
}

void HybridSort(std::vector<int>& v, int l, int r, int key) {
    if (r - l > key) {
        int m = (l + r) / 2;
        HybridSort(v, m + 1, r, key);
        HybridSort(v, l, m, key);
        Merge(v, l, r, m);
    } else {
        InsertionSort(v, l, r);
    }
}


int main() {
    std::ofstream file_1;
    file_1.open(""group_1.txt"");
    if (file_1.is_open()) {
        std::random_device rd;
        std::default_random_engine re(rd());
        std::uniform_int_distribution<int> dist(0, 3000);
        std::vector<int> v = std::vector<int>(4000);
        for (int i = 500; i <= 4000; i += 100) {
            for (int j = 0; j < i; ++j) {
                int temp = dist(re);
                file_1 << temp << ' ';
            }
            file_1 << '\n';
        }
    }
    file_1.close();

    std::ofstream file_2;
    file_2.open(""group_2.txt"");
    if (file_2.is_open()) {
        std::random_device rd;
        std::default_random_engine re(rd());
        std::uniform_int_distribution<int> dist(0, 3000);
        std::vector<int> v = std::vector<int>(4000);
        for (int i = 500; i <= 4000; i += 100) {
            for (int j = 0; j < i; ++j) {
                int temp = dist(re);
                file_2 << temp << ' ';
            }
            file_2 << '\n';
        }
    }
    file_2.close();

    std::ofstream file_3;
    file_3.open(""group_3.txt"");
    if (file_3.is_open()) {
        std::random_device rd;
        std::default_random_engine re(rd());
        std::uniform_int_distribution<int> dist(0, 3000);
        std::vector<int> v = std::vector<int>(4000);
        for (int i = 500; i <= 4000; i += 100) {
            for (int j = 0; j < i; ++j) {
                int temp = dist(re);
                file_3 << temp << ' ';
            }
            file_3 << '\n';
        }
    }
    file_3.close();

    return 0;
}
"
B4fFUKbK,Untitled,savva_morozov,C++,Wednesday 29th of November 2023 10:14:47 AM CDT,"int main(int argc, const char* argv[]) {

    std::setlocale(LC_ALL, ""en_US.UTF-8"");

    if (argc != 3) {
        std::cerr << ""Usage: game_server <game-config-json> <static_path>""sv  << std::endl;
        return EXIT_FAILURE;
    }
    
    server_logger::InitBoostLog();

    try {
        // 1. –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–∞—Ä—Ç—É –∏–∑ —Ñ–∞–π–ª–∞ –∏ –ø–æ—Å—Ç—Ä–æ–∏—Ç—å –º–æ–¥–µ–ª—å –∏–≥—Ä—ã
        model::Game game = json_loader::LoadGame(argv[1]);
        model::GameSessions game_sessions(game);
        game_sessions.InitializeOneSessionPerMap();
        app::Players players(&game_sessions);

        // 2. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º io_context
        const unsigned num_threads = std::thread::hardware_concurrency();
        net::io_context ioc(num_threads);

        // strand –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ API
        auto api_strand = net::make_strand(ioc);

        // 3. –î–æ–±–∞–≤–ª—è–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∏–≥–Ω–∞–ª–æ–≤ SIGINT –∏ SIGTERM
        net::signal_set signals(ioc, SIGINT, SIGTERM);
        signals.async_wait([&ioc](const sys::error_code& ec, [[maybe_unused]] int signal_number) {
            if (!ec) {
                ioc.stop();
            }
            server_logger::LogStopping(ec);
        });

        // 4. –°–æ–∑–¥–∞—ë–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ HTTP-–∑–∞–ø—Ä–æ—Å–æ–≤ –∏ —Å–≤—è–∑—ã–≤–∞–µ–º –µ–≥–æ —Å –º–æ–¥–µ–ª—å—é –∏–≥—Ä—ã
        auto handler = std::make_shared<http_handler::RequestHandler>(&players, api_strand, game, argv[2]);
        //http_handler::LoggingRequestHandler log_handler(handler);
        http_handler::LoggingRequestHandler log_handler{
                    [handler](auto&& req, auto&& send) {
                        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–ø—Ä–æ—Å
                        (*handler)(
                            std::forward<decltype(req)>(req),
                            std::forward<decltype(send)>(send));
                            }};

        // 5. –ó–∞–ø—É—Å—Ç–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ HTTP-–∑–∞–ø—Ä–æ—Å–æ–≤, –¥–µ–ª–µ–≥–∏—Ä—É—è –∏—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫—É –∑–∞–ø—Ä–æ—Å–æ–≤
        const auto address = net::ip::make_address(""0.0.0.0"");
        constexpr net::ip::port_type port = 8080;

        http_server::ServeHttp(ioc, {address, port}, [&log_handler](std::string_view ip, auto&& req, auto&& send) {
            log_handler(ip, std::forward<decltype(req)>(req), std::forward<decltype(send)>(send));
        });

        // –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω
        server_logger::LogStarting(address, port);

        // 6. –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
        RunWorkers(std::max(1u, num_threads), [&ioc] {
            ioc.run();
        });
    } catch (const std::exception& ex) {
        server_logger::LogStoppingException(ex);
        return EXIT_FAILURE;
    }
}


class RequestHandler : public std::enable_shared_from_this<RequestHandler>{
public:
    explicit RequestHandler(app::Players* players, Strand api_strand, model::Game& game, fs::path base_path)
        : api_handler_{api_handler::ApiRequestHandler{game, players}}
        , file_handler_{FileRequestHandler{base_path}}
        , api_strand_{api_strand}
        , base_path_{fs::weakly_canonical(base_path)} {
    }

    RequestHandler(const RequestHandler&) = delete;
    RequestHandler& operator=(const RequestHandler&) = delete;

    template <typename Body, typename Allocator, typename Send>
    void operator()(http::request<Body, http::basic_fields<Allocator>>&& req, Send&& send) {
 
        std::string_view target = req.target();

        if (IsApiEndpoint(target)) {
            auto handle = [self = shared_from_this(), send,
                           req = std::forward<decltype(req)>(req)]() {
                                try {
                                    assert(self->api_strand_.running_in_this_thread());
                                    return send(self->api_handler_(req));
                                } catch (...) {
                                    std::cout << ""not strand"" << std::endl;
                                }
                           };
            return net::dispatch(api_strand_, handle);
            
        }

        else {
            // –µ—Å–ª–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ ...
        }

        send(MakeStringResponse(http::status::method_not_allowed, ""Invalid method""sv, req.version(), req.keep_alive(), ContentType::TEXT_HTML));
        return;
    }

private:
    api_handler::ApiRequestHandler api_handler_;
    FileRequestHandler file_handler_;
    Strand api_strand_;
    fs::path base_path_;
};


template<class SomeRequestHandler>
class LoggingRequestHandler : public std::enable_shared_from_this<RequestHandler> {
    static void LogRequest(std::string_view ip, const auto& req) {
        
        std::string_view uri = req.target();
        std::string_view method = req.method_string();
        server_logger::LogRequest(ip, uri, method);
    }

    template <typename ResponseType>
    static void LogResponse(const ResponseType& resp, const auto t_start) {
        const auto t_end = std::chrono::high_resolution_clock::now();
        const auto response_time = std::chrono::duration_cast<std::chrono::milliseconds>(t_end - t_start).count();

        int code = resp.result_int();
        std::string_view content_type;
        try {
            content_type = resp.at(http::field::content_type);
        } catch (const std::exception& ex) {
            content_type = ""null""sv;
        }

        server_logger::LogResponse(response_time, code, content_type);
    }

public:
    explicit LoggingRequestHandler(SomeRequestHandler&& handler)
        : decorated_{std::move(handler)} {
    }

    LoggingRequestHandler(const LoggingRequestHandler&) = delete;
    LoggingRequestHandler& operator=(const LoggingRequestHandler&) = delete;

    template <typename Body, typename Allocator, typename Send>
    void operator()(std::string_view ip, http::request<Body, http::basic_fields<Allocator>>&& req, Send&& send) {

        LogRequest(ip, req);
        

        const auto t_start = std::chrono::high_resolution_clock::now();

        auto new_send = [&t_start, &send](auto&& response) {
            LogResponse(response, t_start);
            send(std::move(response));
        } ;

        decorated_(std::forward<decltype(req)>(req), std::forward<decltype(new_send)>(new_send));

    }

private:
    SomeRequestHandler decorated_;
};"
gz91Nq06,fuck off cursor hog snowybot,coinwalk,JavaScript,Wednesday 29th of November 2023 10:00:11 AM CDT,"var sturn = parseFloat(document.getElementById('pct_balance').value);
var kill = (sturn/100).toFixed(8);
var freakish = kill;
var taget = (kill*24000);
var dozer = (kill*10);
var soven = (kill*6.9);
var ovenbake = (kill*7.9);
var trailbob = (kill*3);
var tobetnext = ((freakish*1).toFixed(8));
var goodly = sturn;
var gjebers = sturn;
var flight =  6.9;
var submarine = 2.9;
var submerge = 12.9;
var fart = 1;
var fickle = true;
var stick = 0;
var nobby = sturn;
var james = ((Math.floor(sturn/dozer))*dozer);
var fran = ((Math.floor(sturn/dozer))*dozer);
 
function get(){
console.clear();
goodly = document.getElementById('pct_balance').value;
if (goodly>(james+(freakish*flight))){
    freakish = freakish*2;
    flight =  4.9;
    submarine = 4.9;
    james = parseFloat(goodly);
    fran = ((Math.ceil(goodly/dozer))*dozer);
}
if (goodly<(james-(freakish*submarine))){
    freakish = freakish*2; 
    flight =  4.9;
    submarine = 4.9;
    james = parseFloat(goodly);
    fran = ((Math.ceil(goodly/dozer))*dozer);
}
if (((freakish*30)>=goodly)&&(goodly>=fran)){
    freakish = kill;
    flight =  6.9;
    submarine = 2.9;
    james = ((Math.floor(goodly/dozer))*dozer);
    fran = ((Math.ceil(goodly/dozer))*dozer);
} 
if (((freakish*30)>=sturn)&&(goodly>=fran)){
    freakish = kill;
    flight =  6.9;
    submarine = 2.9;
    james = ((Math.floor(goodly/dozer))*dozer);
    fran = ((Math.ceil(goodly/dozer))*dozer);
} 
  if (goodly >= taget) {
        console.log(""winner winner chicken dinner"");
        return;
    }
tobetnext = (freakish*1).toFixed(8);
$('#pct_chance').val(49.5);
$('#pct_bet').val(tobetnext);
$('#a_lo').click();
var good = ((goodly-sturn).toFixed(8));
console.log(""profit"");
console.log(good);
setTimeout(() => get(), 1);
}
get()"
CRve6LYJ,Untitled,ProgMe,C++,Wednesday 29th of November 2023 09:56:10 AM CDT,"#include <bits/stdc++.h>

using namespace std;

int n;

vector<unsigned int> p;
vector<vector<unsigned int>> t;

void build(int v = 1, int tl = 0, int tr = n - 1) {
    if (tl == tr) {
        t[v].push_back(p[tl]);
        return;
    }

    int tm = (tl + tr) / 2;

    build(v * 2, tl, tm);
    build(v * 2 + 1, tm + 1, tr);

    merge(t[v * 2].begin(), t[v * 2].end(),
          t[v * 2 + 1].begin(), t[v * 2 + 1].end(),
          back_inserter(t[v]));
}

long long get(int l, int r, int x, int v = 1, int tl = 0, int tr = n - 1) {
    if (l > r) {
        return 0;
    }
    if (l == tl && r == tr) {
        return tr - tl + 1 -
        (upper_bound(t[v].begin(), t[v].end(), x) - t[v].begin());
    }

    int tm = (tl + tr) / 2;

    return get(l, min(r, tm), x, v * 2, tl, tm) +
            get(max(l, tm + 1), r, x, v * 2 + 1, tm + 1, tr);
}

unsigned int cur = 0, a, b;

unsigned int nextRand24() {
    cur = cur * a + b;
    return cur >> 8;
}

int main() {
    unsigned int m;
    cin >> n >> m;
    cin >> a >> b;

    p.resize(n);
    t.resize(4 * n);

    for (int i = 0; i < n; ++i) {
        p[i] = nextRand24() % m;
    }

    build();

    long long ans = 0;
    for (int i = 1; i < n; ++i) {
        ans += get(0, i - 1, p[i]);
    }
    cout << ans;
}
"
AwEVwuai,Code for Umschool Python marathon bot,Dimaush,Python,Wednesday 29th of November 2023 09:40:24 AM CDT,"import telebot
bot = telebot.TeleBot(...)

from telebot import types

name = '';
surname = '';
age = 0;
@bot.message_handler(content_types=['text'])
def main(message):
    if message.text == '/reg':
        bot.send_message(message.from_user.id, ""–ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?"");
        bot.register_next_step_handler(message, get_name);
    else:
        bot.send_message(message.from_user.id, '–ù–∞–ø–∏—à–∏ /reg');

def get_name(message):
    global name;
    name = message.text;
    bot.send_message(message.from_user.id, '–ö–∞–∫–∞—è —É —Ç–µ–±—è —Ñ–∞–º–∏–ª–∏—è?');
    bot.register_next_step_handler(message, get_surname);

def get_surname(message):
    global surname;
    surname = message.text;
    bot.send_message(message.from_user.id, '–°–∫–æ–ª—å–∫–æ —Ç–µ–±–µ –ª–µ—Ç?');
    bot.register_next_step_handler(message, get_age);

def get_age(message):
    global age;
    while age == 0:
        try:
             age = int(message.text)
        except Exception:
             bot.send_message(message.from_user.id, '–¶–∏—Ñ—Ä–∞–º–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞');
        bot.send_message(message.from_user.id, '–¢–µ–±–µ '+str(age)+' –ª–µ—Ç, —Ç–µ–±—è –∑–æ–≤—É—Ç '+name+' '+surname+'?')

def get_age(message):
    global age;
    while age == 0:
        try:
             age = int(message.text)
        except Exception:
             bot.send_message(message.from_user.id, '–¶–∏—Ñ—Ä–∞–º–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞');
        keyboard = types.InlineKeyboardMarkup();
        key_yes = types.InlineKeyboardButton(text='–î–∞', callback_data='yes');
        keyboard.add(key_yes);
        key_no= types.InlineKeyboardButton(text='–ù–µ—Ç', callback_data='no');
        keyboard.add(key_no);
        question = '–¢–µ–±–µ '+str(age)+' –ª–µ—Ç, —Ç–µ–±—è –∑–æ–≤—É—Ç '+name+' '+surname+'?';
        bot.send_message(message.from_user.id, text=question, reply_markup=keyboard)

@bot.callback_query_handler(func=lambda call: True)
def callback_worker(call):
    if call.data == ""yes"":
        bot.send_message(call.message.chat.id, '–ó–∞–ø–æ–º–Ω—é :)');
    elif call.data == ""no"":
        bot.send_message(call.message.chat.id, '–£–ø—Å :(');

bot.infinity_polling()"
2NvA7Bkr,snowybot trial,coinwalk,JavaScript,Wednesday 29th of November 2023 09:39:33 AM CDT,"var sturn = parseFloat(document.getElementById('pct_balance').value);
var kill = (sturn/100).toFixed(8);
var freakish = kill;
var taget = (sturn*2.4);
var dozer = (kill*10);
var soven = (kill*6.9);
var ovenbake = (kill*7.9);
var trailbob = (kill*3);
var tobetnext = ((freakish*1).toFixed(8));
var goodly = sturn;
var gjebers = sturn;
var flight =  6.9;
var submarine = 2.9;
var submerge = 12.9;
var fart = 1;
var fickle = true;
var stick = 0;
var nobby = sturn;
var james = ((Math.floor(sturn/dozer))*dozer);
var fran = ((Math.floor(sturn/dozer))*dozer);
 
function get(){
console.clear();
goodly = document.getElementById('pct_balance').value;
if (goodly>(fran+(freakish*flight))){
    freakish = freakish*2;
    flight =  4.9;
    submarine = 4.9;
    james = parseFloat(goodly);
    fran = parseFloat(goodly);
}
if (goodly<(james-(freakish*submarine))){
    freakish = freakish*2; 
    flight =  4.9;
    submarine = 4.9;
    james = parseFloat(goodly);
}
if ((freakish*20)>=goodly){
    freakish = kill;
    flight =  6.9;
    submarine = 2.9;
    james = ((Math.floor(goodly/dozer))*dozer);
    fran = ((Math.floor(goodly/dozer))*dozer);
} 
if ((freakish*20)>=sturn){
    freakish = kill;
    flight =  6.9;
    submarine = 2.9;
    james = ((Math.floor(goodly/dozer))*dozer);
    fran = ((Math.floor(goodly/dozer))*dozer);
} 
  if (goodly >= taget) {
        console.log(""winner winner chicken dinner"");
        return;
    }
tobetnext = (freakish*1).toFixed(8);
$('#pct_chance').val(49.5);
$('#pct_bet').val(tobetnext);
$('#a_lo').click();
var good = ((goodly-sturn).toFixed(8));
console.log(""profit"");
console.log(good);
setTimeout(() => get(), 1000);
}
get()"
Y3a0xu0U,Untitled,Kioneyalent,Lua,Wednesday 29th of November 2023 09:36:40 AM CDT,"–ü–æ–¥–∞—é—â–µ–≥–æ


Parent of RectTransform is being set with parent property. Consider using the SetParent method instead, with the worldPositionStays argument set to false. This will retain local orientation and scale rather than world orientation and scale, which can prevent common UI scaling issues.

UnityEngine.Transform:set_parent(Transform)
InGameMenu:FLCBIJPJFEN(Player)
InGameMenu:FHIFKHFKBIA()
UnityEngine.InputSystem.UI.InputSystemUIInputModule:Process()

Parent of RectTransform is being set with parent property. Consider using the SetParent method instead, with the worldPositionStays argument set to false. This will retain local orientation and scale rather than world orientation and scale, which can prevent common UI scaling issues.

UnityEngine.Transform:set_parent(Transform)
InGameMenu:FLCBIJPJFEN(Player)
InGameMenu:FHIFKHFKBIA()
UnityEngine.InputSystem.UI.InputSystemUIInputModule:Process()



–ü–æ–ª—É—á–∞—Ç–µ–ª—è


RPC method 'RecieveFriendshipRequest(String, String, String)' not found on object with PhotonView 1. Implement as non-static. Apply [PunRPC]. Components on children are not found. Return type must be void or IEnumerator (if you enable RunRpcCoroutines). RPCs are a one-way message.

UnityEngine.Debug:LogErrorFormat(Object, String, Object[])
Photon.Pun.PhotonNetwork:ExecuteRpc(Hashtable, Player)
Photon.Pun.PhotonNetwork:OnEvent(EventData)
Photon.Realtime.LoadBalancingClient:OnEvent(EventData)
ExitGames.Client.Photon.PeerBase:DeserializeMessageAndCallback(StreamBuffer)
ExitGames.Client.Photon.EnetPeer:DispatchIncomingCommands()
ExitGames.Client.Photon.PhotonPeer:DispatchIncomingCommands()
Photon.Pun.PhotonHandler:Dispatch()"
iGxwZpci,Untitled,ProgMe,C++,Wednesday 29th of November 2023 09:34:36 AM CDT,"#include <bits/stdc++.h>
#define int int64_t

using namespace std;

struct vertex {
    int sum;
    int maxpref, pref_index;
    int maxsuf, suf_index;
    int ans;
    int ans_l, ans_r;
};

int n;
vector<int> a;
vector<vertex> t;

void build(int v = 1, int tl = 0, int tr = n - 1) {
    if (tl == tr) {
        t[v].ans_l = t[v].ans_r = t[v].suf_index = t[v].pref_index = tl;
        t[v].sum = t[v].maxpref = t[v].maxsuf = t[v].ans = a[tl];
        return;
    }

    int tm = (tl + tr) / 2;

    build(v * 2, tl, tm);
    build(v * 2 + 1, tm + 1, tr);

    t[v].sum = t[v * 2].sum + t[v * 2 + 1].sum;
    if (t[v * 2].maxpref < t[v * 2].sum + t[v * 2 + 1].maxpref) {
        t[v].pref_index = t[v * 2 + 1].pref_index;
        t[v].maxpref = t[v * 2].sum + t[v * 2 + 1].maxpref;
    } else {
        t[v].pref_index = t[v * 2].pref_index;
        t[v].maxpref = t[v * 2].maxpref;
    }
    if (t[v * 2 + 1].maxsuf < t[v * 2 + 1].sum + t[v * 2].maxsuf) {
        t[v].suf_index = t[v * 2].suf_index;
        t[v].maxsuf = t[v * 2 + 1].sum + t[v * 2].maxsuf;
    } else {
        t[v].suf_index = t[v * 2 + 1].suf_index;
        t[v].maxsuf = t[v * 2 + 1].maxsuf;
    }
    if (max({t[v * 2].ans, t[v * 2 + 1].ans,
             t[v * 2].maxsuf + t[v * 2 + 1].maxpref}) == t[v * 2].ans) {
        t[v].ans_l = t[v * 2].ans_l;
        t[v].ans_r = t[v * 2].ans_r;
        t[v].ans = t[v * 2].ans;
    } else if (max({t[v * 2].ans, t[v * 2 + 1].ans,
                    t[v * 2].maxsuf + t[v * 2 + 1].maxpref}) == t[v * 2 + 1].ans) {
        t[v].ans_l = t[v * 2 + 1].ans_l;
        t[v].ans_r = t[v * 2 + 1].ans_r;
        t[v].ans = t[v * 2 + 1].ans;
    } else {
        t[v].ans_l = t[v * 2].suf_index;
        t[v].ans_r = t[v * 2 + 1].pref_index;
        t[v].ans = t[v * 2].maxsuf + t[v * 2 + 1].maxpref;
    }
}

int32_t main() {
    ios::sync_with_stdio(false);
    cin.tie(nullptr);

    cin >> n;
    a.resize(n);
    t.resize(4 * n);

    for (int i = 0; i < n; i++) {
        cin >> a[i];
    }

    build();

    cout << t[1].ans_l + 1 << ' ' << t[1].ans_r + 1 << ' ' << t[1].ans;
}
"
RRH7WHcr,cube,peTheProgrammer,Lua,Wednesday 29th of November 2023 09:12:58 AM CDT,"command = assert(arg[1], ""Usage: cube <command> <dir> <length> <width> <height>"")
dir = assert(arg[2], ""Usage: cube <command> <dir> <length> <width> <height>"")

length = assert(tonumber(arg[3]), ""Usage: cube <command> <dir> <length> <width> <height>"")
width = assert(tonumber(arg[4]), ""Usage: cube <command> <dir> <length> <width> <height>"")
height = assert(tonumber(arg[5]), ""Usage: cube <command> <dir> <length> <width> <height>"")

item = """"
if command == ""place"" or command == ""replace"" then
	for i=1,16,1 do
		detail = turtle.getItemDetail(i)
		if detail ~= nil then
			item = detail.name
			turtle.select(i)
			break
		end
	end
end

print(item)

function forward()
	turtle.forward()
end

function forward_and_break()
	if turtle.detect() then
		turtle.dig()
	end
	turtle.forward()
end

function up_and_break()
	if turtle.detectUp() then
		turtle.digUp()
	end
	turtle.up()
end

function down_and_break()
	if turtle.detectDown() then
		turtle.digDown()
	end
	turtle.down()
end

for y=1,height,1 do
	for x=1,width,1 do
		for z=1,length,1 do
			if command == ""dig"" then
				if z ~= length then
					forward_and_break()
				end
			elseif command == ""place"" then
				detail = turtle.getItemDetail()
				if detail == nil or detail.name ~= item then
					for i=1,16,1 do
						detail = turtle.getItemDetail(i)
						if detail ~= nil then
							if item == detail.name then
								turtle.select(i)
								break
							end
						end
					end
				end
					
				if dir == ""up"" then
					turtle.placeDown()
				else
					turtle.placeUp()
				end
				if z ~= length then
					forward_and_break()
				end
			elseif command == ""replace"" then
				detail = turtle.getItemDetail()
				if detail == nil or detail.name ~= item then
					for i=1,16,1 do
						detail = turtle.getItemDetail(i)
						if detail ~= nil then
							if item == detail.name then
								turtle.select(i)
								break
							end
						end
					end
				end

				if dir == ""up"" then
					if turtle.detectDown() then
						_, detail = turtle.inspectDown()
						if detail ~= nil then
							if detail.name ~= item then
								turtle.digDown()
							end
						end
					end
					turtle.placeDown()
				else
					if turtle.detectUp() then
						_, detail = turtle.inspectUp()
						if detail ~= nil then
							if detail.name ~= item then
								turtle.digUp()
							end
						end
					end
					turtle.placeUp()
				end
				if z ~= length then
					forward_and_break()
				end
			end
			
		end
		if x ~= width then
			left = true
			if width % 2 == 0 then
				left = x % 2 ~= y % 2
			else
				left = x % 2 == 0
			end
			if left then
				turtle.turnLeft()
				forward_and_break()
				turtle.turnLeft()
			else
				turtle.turnRight()
				forward_and_break()
				turtle.turnRight()
			end
		end
	end
	if y ~= height then
		if dir == ""up"" then
			up_and_break()
			turtle.turnLeft()
			turtle.turnLeft()
		else
			down_and_break()
			turtle.turnLeft()
			turtle.turnLeft()
		end
	end
end
"
bFA1EERi,About Vitrine Judite,TessCarstairs,HTML,Wednesday 29th of November 2023 08:55:00 AM CDT,"COR BACKGROUND: #e3dbd7
COR DA BOX: #0000
COR DA FONTE: #000000
 
LEMBRETES: A borda est√° fixa em seu perfil e os avatares precisam ser de 196x300 ou maior.
 
C√ìDIGO PARA ABOUT HTML:
<div
    style=""
        width: 1966px;
        height: 894px;
        background: url('https://i.postimg.cc/mZs6c92L/about-judite.png');
        margin: -75px -698px;
	background-repeat:no-repeat;
    ""
    class=""uk-position-relative side-main-user""
>
    <div style=""margin-left: 733px; margin-top: 704px"">
        <a href="""" alt=""ADICIONAR""
            ><img
                src=""https://i.postimg.cc/cCf0TSw-Z/links.png""
                alt=""ADICIONAR""
        />
	<a href=""""
            ><img
                src=""https://i.postimg.cc/cCf0TSw-Z/links.png""
                alt=""REMOVER""
		style=""margin-left: 43px""
        />
	<a href=""/scraps/muuu-judite"" alt=""RECADOS""
            ><img
                src=""https://i.postimg.cc/cCf0TSw-Z/links.png""
                alt=""RECADOS""
		style=""margin-left: 45px;""
        />
	<a href="""" alt=""AMIGOS""
            ><img
                src=""https://i.postimg.cc/cCf0TSw-Z/links.png""
                alt=""AMIGOS""
		style=""margin-left: 35px""
        />
	<a href=""/testimonials/muuu-judite"" alt=""DEPOIMENTOS""
            ><img
                src=""https://i.postimg.cc/cCf0TSw-Z/links.png""
                alt=""DEPOIMENTOS""
		style=""margin-left: 40px""
        />
    </div>
</div>  "
s7ePP1Qi,Lights Out 2016 :: idws + idfl,Munfaqqiha,C++,Wednesday 29th of November 2023 08:49:19 AM CDT,"idws: https://forum.idws.id/posts/34153553/
idfl: https://idfl-forum.com/showthread.php?t=207765&p=3944065&viewfull=1#post3944065"
Sx6Mhqhs,k.i.s.s snowybot,coinwalk,JavaScript,Wednesday 29th of November 2023 08:43:21 AM CDT,"var sturn = parseFloat(document.getElementById('pct_balance').value);
var kill = (sturn/240).toFixed(8);
var freakish = kill;
var taget = (sturn*24);
var dozer = (kill*10);
var soven = (kill*6.9);
var ovenbake = (kill*7.9);
var trailbob = (kill*3);
var tobetnext = ((freakish*1).toFixed(8));
var goodly = sturn;
var gjebers = sturn;
var flight =  6.9;
var submarine = 2.9;
var submerge = 12.9;
var fart = 1;
var fickle = true;
var stick = 0;
var nobby = sturn;
var james = ((Math.floor(sturn/dozer))*dozer);
var fran = ((Math.floor(sturn/dozer))*dozer);
 
function get(){
console.clear();
goodly = document.getElementById('pct_balance').value;
if (goodly>(fran+(freakish*flight))){
    freakish = freakish*2;
    flight =  4.9;
    submarine = 4.9;
    james = parseFloat(goodly);
    fran = parseFloat(goodly);
}
if (goodly<(james-(freakish*submarine))){
    freakish = freakish*2; 
    flight =  4.9;
    submarine = 4.9;
    james = parseFloat(goodly);
}
if ((freakish*20)>=goodly){
    freakish = kill;
    flight =  6.9;
    submarine = 2.9;
    james = ((Math.floor(goodly/dozer))*dozer);
    fran = ((Math.floor(goodly/dozer))*dozer);
} 
if ((freakish*20)>=sturn){
    freakish = kill;
    flight =  6.9;
    submarine = 2.9;
    james = ((Math.floor(goodly/dozer))*dozer);
    fran = ((Math.floor(goodly/dozer))*dozer);
} 
  if (goodly >= taget) {
        console.log(""winner winner chicken dinner"");
        return;
    }
tobetnext = (freakish*1).toFixed(8);
$('#pct_chance').val(49.5);
$('#pct_bet').val(tobetnext);
$('#a_lo').click();
var good = ((goodly-sturn).toFixed(8));
console.log(""profit"");
console.log(good);
setTimeout(() => get(), 1000);
}
get()"
RqZ4m1Mz,phone number,bstefano79,JavaScript,Wednesday 29th of November 2023 08:38:00 AM CDT,"let createPhoneNumber= array => {
    let format = ['(','','',') ','','','-','','',''];

    let val ="""";
    array.forEach((elemento, indice) => {
        val += format[indice]+elemento;
    });
    return val;
}

console.log(createPhoneNumber([1, 2, 3, 4, 5, 6, 7, 8, 9, 0])); // => returns ""(123) 456-7890"""
0MGQqLvr,Google_weather_parser,Danila_lipatov,Python,Wednesday 29th of November 2023 08:36:09 AM CDT,"from bs4 import BeautifulSoup as bs
import requests
import urllib.request
import ssl

ssl._create_default_https_context = ssl._create_unverified_context
""""""
This is basic parser of weather from google
Using:
----Write to input_box(or to bot if we gonna use telegram)
----If town(coordinates) is exists: get temperture fot today + describe weather feeling.
----If town(coordinates) is not exists: don't get tempreture.

""""""
if __name__ == '__main__':
    headers = {
        'User-Agent': ''}
    url = f""https://www.google.com/search?q=–ø–æ–≥–æ–¥–∞+–≤+{str(input())}""
    parser = requests.get(url)
    if parser.status_code == 200:
        soup = bs(parser.text, 'html.parser')
        try:
            temp = soup.find('div', class_='BNeawe iBp4i AP7Wnd').text
            date, status = soup.find('div', class_='BNeawe tAd8D AP7Wnd').text.split('\n')
        except:
            print('–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ —Ç–∞–∫–æ–º—É –≥–æ—Ä–æ–¥—É')"
DKBzR19i,A really big query,louis77,MySQL,Wednesday 29th of November 2023 08:29:28 AM CDT,"CREATE PROCEDURE get_objects(IN v_group VARCHAR(24), IN v_visible TINYINT(1), IN v_lang CHAR(2),
                                                    IN v_types JSON, IN v_qualities JSON, IN v_tags_must JSON,
                                                    IN v_tags_any JSON, IN v_tags_not JSON, IN v_features JSON,
                                                    IN v_price_min INT, IN v_price_max INT, IN v_engine VARCHAR(20),
                                                    IN v_places JSON, IN v_ids JSON, IN v_ids_not JSON,
                                                    IN v_facts_bedrooms_min INT, IN v_facts_maxadults_min INT,
                                                    IN v_facts_type VARCHAR(100), IN v_position_array JSON,
                                                    IN v_max_distance_meters INT, IN v_sort INT, IN v_bbox JSON,
                                                    IN v_results_in_hash JSON, IN v_fulltext VARCHAR(255),
                                                    IN v_limit INT, IN v_offset INT) READS SQL DATA
BEGIN    
    DECLARE v_lang_path CHAR(5) DEFAULT COALESCE(CONCAT('$.', v_lang), '$.en');

	DECLARE v_position POINT;
    DECLARE v_bbox_min_lat DOUBLE;
    DECLARE v_bbox_min_lon DOUBLE;
    DECLARE v_bbox_max_lat DOUBLE;
    DECLARE v_bbox_max_lon DOUBLE;
    DECLARE v_bbox_geom POLYGON;
    
    IF v_position_array IS NOT NULL THEN
    		SET v_position = ST_GeomFromText(CONCAT('POINT(', v_position_array ->> '$[0]', ' ', v_position_array ->> '$[0]', ')'), 4326);
    END IF;
    
    IF v_bbox IS NOT NULL THEN
        SET v_bbox_min_lat = LEAST(v_bbox ->> '$[0]', v_bbox ->> '$[2]');
        SET v_bbox_min_lon = LEAST(v_bbox ->> '$[1]', v_bbox ->> '$[3]');
        SET v_bbox_max_lat = GREATEST(v_bbox ->> '$[0]', v_bbox ->> '$[2]');
        SET v_bbox_max_lon = GREATEST(v_bbox ->> '$[1]', v_bbox ->> '$[3]');
        SET v_bbox_geom = ST_SRID(ST_POLYGONFROMTEXT(CONCAT('POLYGON((',
                                              v_bbox_min_lon, ' ', v_bbox_min_lat, ', ',
                                              v_bbox_min_lon, ' ', v_bbox_max_lat, ', ',
                                              v_bbox_max_lon, ' ', v_bbox_max_lat, ', ',
                                              v_bbox_max_lon, ' ', v_bbox_min_lat, ', ',
                                              v_bbox_min_lon, ' ', v_bbox_min_lat, '))')), 4326);
    END IF;


    INSERT INTO acco_searchlog (v_group, v_visible, v_lang, v_types, v_qualities, v_tags_must, v_tags_any, v_tags_not, v_features, v_price_min, v_price_max, v_engine, v_places, v_ids, v_ids_not, v_facts_bedrooms, v_facts_maxadults, v_facts_type, v_position, v_max_distance_meters, v_sort, v_bbox, v_results_in_hash, v_fulltext, v_limit, v_offset)
    VALUES                     (v_group, v_visible, v_lang, v_types, v_qualities, v_tags_must, v_tags_any, v_tags_not, v_features, v_price_min, v_price_max, v_engine, v_places, v_ids, v_ids_not, v_facts_bedrooms, v_facts_maxadults, v_facts_type, v_position, v_max_distance_meters, v_sort, v_bbox, v_results_in_hash, v_fulltext, v_limit, v_offset);


	SELECT JSON_ARRAYAGG(result) FROM (
    SELECT JSON_OBJECT(
    				'id', m.id,
    				'blockedEngines', JSON_ARRAY(), # deprecated
                'bookingUrl', apply_lang(r.booking_url, v_lang),
         		'city', r.city,
         		'city_normalized', r.city_normalized,
         		'country', r.country,
         		'createdAt', r.created_at,
         		'description', apply_lang(r.description, v_lang),
         	    'description_arrival', apply_lang(r.description_arrival, v_lang),
         		'description_conditions', apply_lang(r.description_conditions, v_lang),
         		'email', r.email,
		        'externals', JSON_ARRAY(
		            JSON_OBJECT('name', 'field1', 'value', m.cf1),
		            JSON_OBJECT('name', 'field2', 'value', m.cf2),
		            JSON_OBJECT('name', 'field3', 'value', m.cf3),
		            JSON_OBJECT('name', 'field4', 'value', m.cf4),
		            JSON_OBJECT('name', 'field5', 'value', m.cf5)),
         		'facts', r.facts,
         		'features', af.features,
         		'group', m.group_id,
         		'hookData', all_hooks.result,
         		'images', (SELECT JSON_ARRAYAGG(
	                           JSON_OBJECT('season', ri.season,
	                                       'url', ri.url,
	                                       'title', ri.title,
	                                       'description', ri.description,
	                                       'sortOrder', ri.sortorder,
	                                       'favourite', ri.favourite)) AS images
				            FROM ref_images ri
				            WHERE ri.reference_id = r.id
				            ORDER BY -ri.favourite DESC, ri.season, ri.sortorder),
         		'imagesServices', r.images_services,
         		'name', apply_lang(r.name, v_lang),
         		'name_add', apply_lang(r.name_add, v_lang),
         		'name_code', apply_lang(r.name_code, v_lang),
         		'onDemand', r.on_demand,
         		'phone', r.phone,
         		'place', c.local_id,
         		'plz', r.plz,
         		'position', JSON_OBJECT('lng', st_longitude(r.position), 'lat', st_latitude(r.position)),
         		'provider', p.id,
         		'provider_name', p.engine,
         		'quality', r.quality,
         		'ranks', r.ranks,
         		'slug', r.slug,
         		'street', r.street,
         		'superior', r.superior,
         		'tags', at.tags,
         		'type', r.type,
         		'updatedAt', m.updated_at,
         		'visible', m.visible = 1,
         		'url', r.url,
         		'website', r.website) as result
    FROM accommodationmasters m
             JOIN refs r
                  ON m.pid = r.apid AND r.is_master = 1 AND r.is_stale = 0
             JOIN providers p ON r.provider = p.id
             LEFT JOIN cities c ON r.place_id = c.id
             CROSS JOIN LATERAL (SELECT JSON_ARRAYAGG(at.tag) tags
                                 FROM accommodation_tags at
                                 WHERE at.apid = m.pid) at
             CROSS JOIN LATERAL (SELECT JSON_ARRAYAGG(JSON_OBJECT('id', derived_features.id,
                                                                  'name', derived_features.name,
                                                                  'translations',
                                                                  derived_features.translations)) AS features,
                                        JSON_ARRAYAGG(derived_features.name)                      AS feature_ids
                                 FROM (SELECT f.id,
                                              f.name,
                                              f.translations
                                       FROM ref_features rf
                                                JOIN features f ON rf.feature_id = f.id
                                       WHERE rf.reference_id = r.id
                                       UNION
                                       SELECT f.id,
                                              f.name,
                                              f.translations
                                       FROM accommodation_features af
                                                JOIN features f ON af.feature_id = f.id
                                       WHERE af.apid = m.pid) derived_features) af
             CROSS JOIN LATERAL (SELECT CAST((hd.payload ->> '$.price_per_night') AS FLOAT) AS price_per_night
                                 FROM hook_data hd
                                 WHERE hd.hook_id = 187
                                   AND hd.apid = m.pid) mp
             CROSS JOIN LATERAL (SELECT JSON_OBJECTAGG(hd.parameter,
                                  JSON_OBJECT('data', h_1.payload,
                                              'statusCode', h_1.status,
                                              'executed', h_1.executed)) as result
					            FROM hook_data h_1
					                     JOIN hooks hd ON hd.id = h_1.hook_id
					            WHERE h_1.apid = m.pid
					              AND h_1.status = 200) as all_hooks                      
    WHERE m.group_id = v_group
      AND (v_visible IS NULL OR m.visible = v_visible)
      AND (v_ids IS NULL OR m.id MEMBER OF (v_ids) = 1)
      AND (v_ids_not IS NULL OR m.id MEMBER OF (v_ids_not) = 0)
      AND (v_types IS NULL OR r.type MEMBER OF (v_types))
      AND (v_qualities IS NULL OR r.quality MEMBER OF ( v_qualities) OR
           (""noclass"" MEMBER OF(v_qualities) AND (r.quality IS NULL OR r.quality NOT IN (""1"", ""2"", ""3"", ""4"", ""5""))))
      AND (v_tags_must IS NULL OR JSON_CONTAINS(at.tags, v_tags_must))
   	  AND (v_tags_any IS NULL OR JSON_OVERLAPS(at.tags, v_tags_any))
      AND (v_tags_not IS NULL OR NOT JSON_OVERLAPS(at.tags, v_tags_not))
      AND (v_features IS NULL OR JSON_CONTAINS(af.feature_ids, v_features))
      AND ((v_price_min IS NULL AND v_price_max IS NULL) OR EXISTS (SELECT 1
                                                                    FROM hook_data hd
                                                                    WHERE hd.hook_id = 187
                                                                      AND (v_price_min IS NULL OR
                                                                           (hd.payload ->> '$.price_per_night') >=
                                                                           v_price_min)
                                                                      AND (v_price_max IS NULL OR
                                                                           (hd.payload ->> '$.price_per_night') <=
                                                                           v_price_max)
                                                                      AND hd.apid = m.pid))
      AND (v_engine IS NULL OR p.engine = v_engine)
      AND (v_places IS NULL OR JSON_CONTAINS(
            (SELECT JSON_ARRAY_APPEND(JSON_ARRAYAGG(reg.local_id), '$', c.local_id)
             FROM region_cities rp
                      JOIN regions reg ON rp.region_id = reg.id
             WHERE rp.city_id = c.id), v_places))
      AND (v_facts_bedrooms_min IS NULL OR r.facts ->> '$.apartment.bedrooms' >= v_facts_bedrooms_min)
      AND (v_facts_maxadults_min IS NULL OR r.facts ->> '$.apartment.maxAdults' >= v_facts_maxadults_min)
      AND (v_facts_type IS NULL OR r.facts ->> '$.apartment.type' = v_facts_type)
      AND (v_position IS NULL OR v_max_distance_meters IS NULL OR (
            ST_DISTANCE_SPHERE(ST_SRID(v_position, 4326), r.position) <= v_max_distance_meters))
      AND (v_bbox IS NULL OR (r.position IS NOT NULL AND ST_WITHIN(
            r.position,
            v_bbox_geom)))
      AND (v_fulltext IS NULL OR v_fulltext = ""null"" /* fix for a client */ OR
           MATCH(r.ft_string) AGAINST(v_fulltext IN NATURAL LANGUAGE MODE))
      AND (v_results_in_hash IS NULL OR m.pid IN ((SELECT DISTINCT r.apid
                                                   FROM results res
                                                            JOIN refs ON refs.id = r.apid
                                                   WHERE job_id IN (SELECT job_id
                                                                    FROM run_jobs
                                                                    WHERE run_id IN (SELECT id
                                                                                     FROM query_runs
                                                                                     WHERE query_id = (SELECT id
                                                                                                       FROM queries
                                                                                                       WHERE raw_hash = v_results_in_hash ->> '$[0]'
                                                                                                         AND filter_hash = v_results_in_hash ->> '$[1]'
                                                                                                       LIMIT 1))))))
    # Order fields must be separated by data type (numeric, text) because MySQL
    # will otherwise revert to alphanumeric sorting
    ORDER BY CASE v_sort
                 WHEN 0 THEN RAND(DAYOFYEAR(CURRENT_TIMESTAMP)) /* Seed for different order once a day */
                 WHEN 4 THEN mp.price_per_night
                 WHEN 5 THEN m.x_contentscore
                 WHEN 6 THEN m.x_classification
                 WHEN 7 THEN m.x_trustyou
                 WHEN 8 THEN ST_DISTANCE_SPHERE(ST_SRID(v_position, 4326), r.position)
                 WHEN 9 THEN ST_DISTANCE_SPHERE(ST_Centroid(v_bbox_geom), r.position)
                	 WHEN 10 THEN r.facts_max_adults
                	 WHEN 11 THEN r.facts_bedrooms
                 END,
             CASE v_sort
                 WHEN -4 THEN -mp.price_per_night
                 WHEN -5 THEN -m.x_contentscore
                 WHEN -6 THEN -m.x_classification
                 WHEN -7 THEN -m.x_trustyou
                 WHEN -8 THEN ST_DISTANCE_SPHERE(ST_SRID(v_position, 4326), r.position)
                 WHEN -9 THEN ST_DISTANCE_SPHERE(ST_Centroid(v_bbox_geom) , r.position)
                 WHEN -10 THEN r.facts_max_adults
                	 WHEN -11 THEN r.facts_bedrooms
                 END DESC,
             CASE v_sort
                 WHEN 1 THEN m.id
                 WHEN 2 THEN JSON_EXTRACT(r.name, v_lang_path)
                 WHEN 3 THEN r.quality
                 END,
             CASE v_sort
                 WHEN -1 THEN m.id
                 WHEN -2 THEN JSON_EXTRACT(r.name, v_lang_path)
                 WHEN -3 THEN -r.quality
                 END DESC
    LIMIT v_offset, v_limit) accos;
END;
"
Ex0XyPY0,News Nov29 23,Newscaster_Ned,Email,Wednesday 29th of November 2023 08:28:58 AM CDT,".‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚ÄéT‚Äée‚Äés‚Äét‚Äé ‚Äé1‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé
.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚ÄéT‚Äée‚Äés‚Äét‚Äé ‚Äé2‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé
.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚ÄéT‚Äée‚Äés‚Äét‚Äé ‚Äé3‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé
.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé ‚ÄéT‚Äée‚Äés‚Äét‚Äé ‚Äéc‚Äéo‚Äém‚Äép‚Äél‚Äée‚Äét‚Äée‚Äé.‚Äé

O‚Äéh‚Äé,‚Äé ‚Äéh‚Äée‚Äér‚Äée‚Äé'‚Äés‚Äé ‚Äét‚Äéh‚Äée‚Äé ‚Äén‚Äée‚Äéw‚Äés‚Äé.‚Äé ‚ÄéW‚Äéh‚Äéa‚Äét‚Äée‚Äév‚Äée‚Äér‚Äé.‚Äé

W‚Äéa‚Äés‚Äéh‚Äéi‚Äén‚Äég‚Äét‚Äéo‚Äén‚Äé ‚ÄéP‚Äéo‚Äés‚Äét‚Äé ‚ÄéD‚Äér‚Äéo‚Äép‚Äés‚Äé ‚ÄéX‚Äéw‚Äéi‚Äét‚Äét‚Äée‚Äér‚Äé ‚ÄéA‚Äéd‚Äés‚Äé

M‚Äéu‚Äés‚Äék‚Äé ‚ÄéM‚Äéa‚Äél‚Äéa‚Äéi‚Äés‚Äée‚Äé:‚Äé ‚ÄéL‚Äée‚Äéf‚Äét‚Äé‚Äô‚Äés‚Äé ‚ÄéD‚Äéi‚Äér‚Äét‚Äéy‚Äé ‚ÄéT‚Äér‚Äéi‚Äéc‚Äék‚Äés‚Äé ‚ÄéC‚Äéo‚Äéu‚Äél‚Äéd‚Äé ‚ÄéK‚Äéi‚Äél‚Äél‚Äé ‚ÄéP‚Äél‚Äéa‚Äét‚Äéf‚Äéo‚Äér‚Äém‚Äé

M‚Äée‚Äéd‚Äéi‚Äéa‚Äé ‚ÄéM‚Äéa‚Äét‚Äét‚Äée‚Äér‚Äés‚Äé ‚ÄéL‚Äéa‚Äéw‚Äés‚Äéu‚Äéi‚Äét‚Äé ‚ÄéT‚Äéo‚Äéo‚Äé ‚ÄéL‚Äéi‚Äét‚Äét‚Äél‚Äée‚Äé,‚Äé ‚ÄéT‚Äéo‚Äéo‚Äé ‚ÄéL‚Äéa‚Äét‚Äée‚Äé?‚Äé
A‚Äén‚Äé ‚Äée‚Äéf‚Äéf‚Äéi‚Äég‚Äéy‚Äé ‚Äéo‚Äéf‚Äé ‚ÄéE‚Äél‚Äéo‚Äén‚Äé ‚ÄéM‚Äéu‚Äés‚Äék‚Äé ‚Äéi‚Äés‚Äé ‚Äés‚Äée‚Äée‚Äén‚Äé ‚Äéo‚Äén‚Äé ‚Äéa‚Äé ‚Äém‚Äéo‚Äéb‚Äéi‚Äél‚Äée‚Äé ‚Äéd‚Äée‚Äév‚Äéi‚Äéc‚Äée‚Äé ‚Äéw‚Äéi‚Äét‚Äéh‚Äé ‚Äét‚Äéh‚Äée‚Äé ‚ÄéX‚Äé ‚Äéa‚Äén‚Äéd‚Äé ‚ÄéT‚Äéw‚Äéi‚Äét‚Äét‚Äée‚Äér‚Äé ‚Äél‚Äég‚Äéo‚Äés‚Äéo‚Äé ‚Äéi‚Äén‚Äé ‚Äét‚Äéh‚Äée‚Äé ‚Äéb‚Äéa‚Äéc‚Äék‚Äég‚Äér‚Äéo‚Äéu‚Äén‚Äéd‚Äé ‚Äéi‚Äén‚Äé ‚Äét‚Äéh‚Äéi‚Äés‚Äé ‚Äép‚Äéh‚Äéo‚Äét‚Äéo‚Äé ‚Äéi‚Äél‚Äél‚Äéu‚Äés‚Äét‚Äér‚Äéa‚Äét‚Äéi‚Äéo‚Äén‚Äé ‚Äéo‚Äén‚Äé ‚Äé2‚Äé3‚Äé ‚ÄéJ‚Äéu‚Äél‚Äéy‚Äé,‚Äé ‚Äé2‚Äé0‚Äé2‚Äé3‚Äé ‚Äéi‚Äén‚Äé ‚ÄéW‚Äéa‚Äér‚Äés‚Äéa‚Äéw‚Äé,‚Äé ‚ÄéP‚Äéo‚Äél‚Äéa‚Äén‚Äéd‚Äé.‚Äé ‚Äé(‚ÄéP‚Äéh‚Äéo‚Äét‚Äéo‚Äé ‚Äéb‚Äéy‚Äé ‚ÄéJ‚Äéa‚Äéa‚Äép‚Äé ‚ÄéA‚Äér‚Äér‚Äéi‚Äée‚Äén‚Äés‚Äé/‚ÄéN‚Äéu‚Äér‚ÄéP‚Äéh‚Äéo‚Äét‚Äéo‚Äé ‚Äév‚Äéi‚Äéa‚Äé ‚ÄéG‚Äée‚Äét‚Äét‚Äéy‚Äé ‚ÄéI‚Äém‚Äéa‚Äég‚Äée‚Äés‚Äé)‚Äé
T‚Äéh‚Äée‚Äé ‚ÄéW‚Äéa‚Äés‚Äéh‚Äéi‚Äén‚Äég‚Äét‚Äéo‚Äén‚Äé ‚ÄéP‚Äéo‚Äés‚Äét‚Äé ‚Äéh‚Äéa‚Äés‚Äé ‚Äéj‚Äéo‚Äéi‚Äén‚Äée‚Äéd‚Äé ‚Äét‚Äéh‚Äée‚Äé ‚Äég‚Äér‚Äéo‚Äéw‚Äéi‚Äén‚Äég‚Äé ‚Äél‚Äéi‚Äés‚Äét‚Äé ‚Äéo‚Äéf‚Äé ‚Äéc‚Äéo‚Äém‚Äép‚Äéa‚Äén‚Äéi‚Äée‚Äés‚Äé ‚Äéh‚Äéa‚Äél‚Äét‚Äéi‚Äén‚Äég‚Äé ‚Äéa‚Äéd‚Äév‚Äée‚Äér‚Äét‚Äéi‚Äés‚Äéi‚Äén‚Äég‚Äé ‚Äéo‚Äén‚Äé ‚ÄéX‚Äé/‚ÄéT‚Äéw‚Äéi‚Äét‚Äét‚Äée‚Äér‚Äé,‚Äé ‚Äéa‚Äé ‚Äéd‚Äée‚Äéc‚Äéi‚Äés‚Äéi‚Äéo‚Äén‚Äé ‚Äéi‚Äén‚Äéf‚Äél‚Äéu‚Äée‚Äén‚Äéc‚Äée‚Äéd‚Äé ‚Äéb‚Äéy‚Äé ‚Äér‚Äée‚Äéc‚Äée‚Äén‚Äét‚Äé ‚Äéc‚Äéo‚Äén‚Äét‚Äér‚Äéo‚Äév‚Äée‚Äér‚Äés‚Äéi‚Äée‚Äés‚Äé ‚Äés‚Äéu‚Äér‚Äér‚Äéo‚Äéu‚Äén‚Äéd‚Äéi‚Äén‚Äég‚Äé ‚ÄéE‚Äél‚Äéo‚Äén‚Äé ‚ÄéM‚Äéu‚Äés‚Äék‚Äé.‚Äé


S‚Äéo‚Äéu‚Äér‚Äéc‚Äée‚Äé:‚Äé ‚ÄéB‚Äéi‚Äéd‚Äée‚Äén‚Äé ‚ÄéP‚Äéo‚Äél‚Äéi‚Äéc‚Äéy‚Äé ‚ÄéW‚Äéi‚Äél‚Äél‚Äé ‚ÄéL‚Äée‚Äéa‚Äév‚Äée‚Äé ‚ÄéH‚Äéa‚Äém‚Äéa‚Äés‚Äé ‚ÄéI‚Äén‚Äét‚Äéa‚Äéc‚Äét‚Äé ‚Äéa‚Äén‚Äéd‚Äé ‚ÄéR‚Äéu‚Äén‚Äén‚Äéi‚Äén‚Äég‚Äé ‚ÄéG‚Äéa‚Äéz‚Äéa‚Äé
S‚Äéo‚Äéu‚Äér‚Äéc‚Äée‚Äé:‚Äé ‚ÄéB‚Äéi‚Äéd‚Äée‚Äén‚Äé ‚ÄéP‚Äéo‚Äél‚Äéi‚Äéc‚Äéy‚Äé ‚ÄéW‚Äéi‚Äél‚Äél‚Äé ‚ÄéL‚Äée‚Äéa‚Äév‚Äée‚Äé ‚ÄéH‚Äéa‚Äém‚Äéa‚Äés‚Äé ‚ÄéI‚Äén‚Äét‚Äéa‚Äéc‚Äét‚Äé ‚Äéa‚Äén‚Äéd‚Äé ‚ÄéR‚Äéu‚Äén‚Äén‚Äéi‚Äén‚Äég‚Äé ‚ÄéG‚Äéa‚Äéz‚Äéa‚Äé
5‚Äé,‚Äé2‚Äé3‚Äé5‚Äé
R‚Äée‚Äép‚Äéu‚Äéb‚Äél‚Äéi‚Äéc‚Äéa‚Äén‚Äés‚Äé ‚ÄéP‚Äér‚Äée‚Äép‚Äé ‚Äé1‚Äé5‚Äé0‚Äé ‚ÄéS‚Äéu‚Äéb‚Äép‚Äéo‚Äée‚Äén‚Äéa‚Äés‚Äé ‚Äéi‚Äéf‚Äé ‚ÄéD‚Äée‚Äém‚Äéo‚Äéc‚Äér‚Äéa‚Äét‚Äés‚Äé ‚ÄéT‚Äéa‚Äér‚Äég‚Äée‚Äét‚Äé ‚ÄéS‚Äéu‚Äép‚Äér‚Äée‚Äém‚Äée‚Äé ‚ÄéC‚Äéo‚Äéu‚Äér‚Äét‚Äé ‚ÄéJ‚Äéu‚Äés‚Äét‚Äéi‚Äéc‚Äée‚Äés‚Äé
R‚Äée‚Äép‚Äéu‚Äéb‚Äél‚Äéi‚Äéc‚Äéa‚Äén‚Äés‚Äé ‚ÄéP‚Äér‚Äée‚Äép‚Äé ‚Äé1‚Äé5‚Äé0‚Äé ‚ÄéS‚Äéu‚Äéb‚Äép‚Äéo‚Äée‚Äén‚Äéa‚Äés‚Äé ‚Äéi‚Äéf‚Äé ‚ÄéD‚Äée‚Äém‚Äéo‚Äéc‚Äér‚Äéa‚Äét‚Äés‚Äé ‚ÄéT‚Äéa‚Äér‚Äég‚Äée‚Äét‚Äé ‚ÄéS‚Äéu‚Äép‚Äér‚Äée‚Äém‚Äée‚Äé ‚ÄéC‚Äéo‚Äéu‚Äér‚Äét‚Äé ‚ÄéJ‚Äéu‚Äés‚Äét‚Äéi‚Äéc‚Äée‚Äés‚Äé
1‚Äé,‚Äé9‚Äé3‚Äé0‚Äé
L‚Äéa‚Äéw‚Äéy‚Äée‚Äér‚Äé:‚Äé ‚ÄéH‚Äéu‚Äén‚Äét‚Äée‚Äér‚Äé ‚ÄéB‚Äéi‚Äéd‚Äée‚Äén‚Äé ‚ÄéW‚Äéi‚Äél‚Äél‚Äé ‚ÄéO‚Äén‚Äél‚Äéy‚Äé ‚ÄéT‚Äée‚Äés‚Äét‚Äéi‚Äéf‚Äéy‚Äé ‚Äéi‚Äén‚Äé ‚ÄéP‚Äéu‚Äéb‚Äél‚Äéi‚Äéc‚Äé ‚ÄéB‚Äée‚Äéf‚Äéo‚Äér‚Äée‚Äé ‚ÄéH‚Äéo‚Äéu‚Äés‚Äée‚Äé ‚ÄéC‚Äéo‚Äém‚Äém‚Äéi‚Äét‚Äét‚Äée‚Äée‚Äé
L‚Äéa‚Äéw‚Äéy‚Äée‚Äér‚Äé:‚Äé ‚ÄéH‚Äéu‚Äén‚Äét‚Äée‚Äér‚Äé ‚ÄéB‚Äéi‚Äéd‚Äée‚Äén‚Äé ‚ÄéW‚Äéi‚Äél‚Äél‚Äé ‚ÄéO‚Äén‚Äél‚Äéy‚Äé ‚ÄéT‚Äée‚Äés‚Äét‚Äéi‚Äéf‚Äéy‚Äé ‚Äéi‚Äén‚Äé ‚ÄéP‚Äéu‚Äéb‚Äél‚Äéi‚Äéc‚Äé ‚ÄéB‚Äée‚Äéf‚Äéo‚Äér‚Äée‚Äé ‚ÄéH‚Äéo‚Äéu‚Äés‚Äée‚Äé ‚ÄéC‚Äéo‚Äém‚Äém‚Äéi‚Äét‚Äét‚Äée‚Äée‚Äé
4‚Äé,‚Äé4‚Äé5‚Äé0‚Äé
B‚Äéi‚Äéd‚Äée‚Äén‚Äé ‚ÄéS‚Äét‚Äéi‚Äél‚Äél‚Äé ‚ÄéP‚Äéu‚Äés‚Äéh‚Äéi‚Äén‚Äég‚Äé ‚Äé‚Äò‚ÄéF‚Äéa‚Äéi‚Äél‚Äée‚Äéd‚Äé‚Äô‚Äé ‚ÄéT‚Äéw‚Äéo‚Äé-‚ÄéS‚Äét‚Äéa‚Äét‚Äée‚Äé ‚ÄéS‚Äéo‚Äél‚Äéu‚Äét‚Äéi‚Äéo‚Äén‚Äé ‚Äéo‚Äén‚Äé ‚ÄéI‚Äés‚Äér‚Äéa‚Äée‚Äél‚Äé
B‚Äéi‚Äéd‚Äée‚Äén‚Äé ‚ÄéS‚Äét‚Äéi‚Äél‚Äél‚Äé ‚ÄéP‚Äéu‚Äés‚Äéh‚Äéi‚Äén‚Äég‚Äé ‚Äé‚Äò‚ÄéF‚Äéa‚Äéi‚Äél‚Äée‚Äéd‚Äé‚Äô‚Äé ‚ÄéT‚Äéw‚Äéo‚Äé-‚ÄéS‚Äét‚Äéa‚Äét‚Äée‚Äé ‚ÄéS‚Äéo‚Äél‚Äéu‚Äét‚Äéi‚Äéo‚Äén‚Äé ‚Äéo‚Äén‚Äé ‚ÄéI‚Äés‚Äér‚Äéa‚Äée‚Äél‚Äé
3‚Äé7‚Äé7‚Äé
a‚Äén‚Äéd‚Äée‚Äér‚Äés‚Äé:‚Äé ‚ÄéI‚Äés‚Äér‚Äéa‚Äée‚Äél‚Äé ‚ÄéD‚Äéo‚Äée‚Äés‚Äén‚Äé'‚Äét‚Äé ‚ÄéH‚Äéa‚Äév‚Äée‚Äé ‚Äéa‚Äé ‚ÄéR‚Äéi‚Äég‚Äéh‚Äét‚Äé ‚Äét‚Äéo‚Äé ‚ÄéK‚Äéi‚Äél‚Äél‚Äé ‚Äé1‚Äé2‚Äé,‚Äé0‚Äé0‚Äé0‚Äé ‚ÄéP‚Äée‚Äéo‚Äép‚Äél‚Äée‚Äé
a‚Äén‚Äéd‚Äée‚Äér‚Äés‚Äé:‚Äé ‚ÄéI‚Äés‚Äér‚Äéa‚Äée‚Äél‚Äé ‚ÄéD‚Äéo‚Äée‚Äés‚Äén‚Äé'‚Äét‚Äé ‚ÄéH‚Äéa‚Äév‚Äée‚Äé ‚Äéa‚Äé ‚ÄéR‚Äéi‚Äég‚Äéh‚Äét‚Äé ‚Äét‚Äéo‚Äé ‚ÄéK‚Äéi‚Äél‚Äél‚Äé ‚Äé1‚Äé2‚Äé,‚Äé0‚Äé0‚Äé0‚Äé ‚ÄéP‚Äée‚Äéo‚Äép‚Äél‚Äée‚Äé
2‚Äé,‚Äé5‚Äé4‚Äé9‚Äé
'‚ÄéA‚Äél‚Äél‚Äé ‚ÄéA‚Äél‚Äél‚Äéi‚Äée‚Äés‚Äé ‚ÄéA‚Äég‚Äér‚Äée‚Äée‚Äé'‚Äé ‚ÄéU‚Äék‚Äér‚Äéa‚Äéi‚Äén‚Äée‚Äé ‚ÄéW‚Äéi‚Äél‚Äél‚Äé ‚ÄéJ‚Äéo‚Äéi‚Äén‚Äé ‚ÄéN‚ÄéA‚ÄéT‚ÄéO‚Äé,‚Äé ‚ÄéS‚Äéa‚Äéy‚Äés‚Äé ‚ÄéA‚Äél‚Äél‚Äéi‚Äéa‚Äén‚Äéc‚Äée‚Äé
'‚ÄéA‚Äél‚Äél‚Äé ‚ÄéA‚Äél‚Äél‚Äéi‚Äée‚Äés‚Äé ‚ÄéA‚Äég‚Äér‚Äée‚Äée‚Äé'‚Äé ‚ÄéU‚Äék‚Äér‚Äéa‚Äéi‚Äén‚Äée‚Äé ‚ÄéW‚Äéi‚Äél‚Äél‚Äé ‚ÄéJ‚Äéo‚Äéi‚Äén‚Äé ‚ÄéN‚ÄéA‚ÄéT‚ÄéO‚Äé,‚Äé ‚ÄéS‚Äéa‚Äéy‚Äés‚Äé ‚ÄéA‚Äél‚Äél‚Äéi‚Äéa‚Äén‚Äéc‚Äée‚Äé
6‚Äé,‚Äé9‚Äé0‚Äé2‚Äé
C‚Äéh‚Äéi‚Äéc‚Äéa‚Äég‚Äéo‚Äé ‚ÄéM‚Äéa‚Äéy‚Äéo‚Äér‚Äé ‚ÄéB‚Äél‚Äéa‚Äém‚Äée‚Äés‚Äé ‚Äé'‚ÄéR‚Äéi‚Äég‚Äéh‚Äét‚Äé ‚ÄéW‚Äéi‚Äén‚Äég‚Äé ‚ÄéE‚Äéx‚Äét‚Äér‚Äée‚Äém‚Äéi‚Äés‚Äét‚Äés‚Äé'‚Äé ‚Äéf‚Äéo‚Äér‚Äé ‚ÄéC‚Äéi‚Äét‚Äéy‚Äé'‚Äés‚Äé ‚ÄéP‚Äér‚Äéo‚Äéb‚Äél‚Äée‚Äém‚Äés‚Äé
C‚Äéh‚Äéi‚Äéc‚Äéa‚Äég‚Äéo‚Äé ‚ÄéM‚Äéa‚Äéy‚Äéo‚Äér‚Äé ‚ÄéB‚Äél‚Äéa‚Äém‚Äée‚Äés‚Äé ‚Äé'‚ÄéR‚Äéi‚Äég‚Äéh‚Äét‚Äé ‚ÄéW‚Äéi‚Äén‚Äég‚Äé ‚ÄéE‚Äéx‚Äét‚Äér‚Äée‚Äém‚Äéi‚Äés‚Äét‚Äés‚Äé'‚Äé ‚Äéf‚Äéo‚Äér‚Äé ‚ÄéC‚Äéi‚Äét‚Äéy‚Äé'‚Äés‚Äé ‚ÄéP‚Äér‚Äéo‚Äéb‚Äél‚Äée‚Äém‚Äés‚Äé
4‚Äé,‚Äé0‚Äé0‚Äé2‚Äé
W‚Äéh‚Äéi‚Äét‚Äée‚Äé ‚ÄéH‚Äéo‚Äéu‚Äés‚Äée‚Äé:‚Äé ‚ÄéW‚Äée‚Äé ‚ÄéO‚Äép‚Äép‚Äéo‚Äés‚Äée‚Äé ‚ÄéI‚Äés‚Äér‚Äéa‚Äée‚Äél‚Äé ‚Äéi‚Äén‚Äé ‚ÄéS‚Äéo‚Äéu‚Äét‚Äéh‚Äée‚Äér‚Äén‚Äé ‚ÄéG‚Äéa‚Äéz‚Äéa‚Äé ‚ÄéW‚Äéi‚Äét‚Äéh‚Äéo‚Äéu‚Äét‚Äé ‚ÄéC‚Äéi‚Äév‚Äéi‚Äél‚Äéi‚Äéa‚Äén‚Äé ‚ÄéP‚Äél‚Äéa‚Äén‚Äé
W‚Äéh‚Äéi‚Äét‚Äée‚Äé ‚ÄéH‚Äéo‚Äéu‚Äés‚Äée‚Äé:‚Äé ‚ÄéW‚Äée‚Äé ‚ÄéO‚Äép‚Äép‚Äéo‚Äés‚Äée‚Äé ‚ÄéI‚Äés‚Äér‚Äéa‚Äée‚Äél‚Äé ‚Äéi‚Äén‚Äé ‚ÄéS‚Äéo‚Äéu‚Äét‚Äéh‚Äée‚Äér‚Äén‚Äé ‚ÄéG‚Äéa‚Äéz‚Äéa‚Äé ‚ÄéW‚Äéi‚Äét‚Äéh‚Äéo‚Äéu‚Äét‚Äé ‚ÄéC‚Äéi‚Äév‚Äéi‚Äél‚Äéi‚Äéa‚Äén‚Äé ‚ÄéP‚Äél‚Äéa‚Äén‚Äé
8‚Äé8‚Äé2‚Äé
G‚Äér‚Äée‚Äéa‚Äét‚Äé ‚ÄéR‚Äée‚Äés‚Äée‚Äét‚Äé:‚Äé ‚ÄéU‚Äé.‚ÄéN‚Äé.‚Äé ‚Äét‚Äéo‚Äé ‚ÄéO‚Äér‚Äéd‚Äée‚Äér‚Äé ‚Äéa‚Äén‚Äé ‚ÄéE‚Äén‚Äéd‚Äé ‚Äét‚Äéo‚Äé ‚ÄéM‚Äée‚Äéa‚Äét‚Äé ‚ÄéE‚Äéa‚Äét‚Äéi‚Äén‚Äég‚Äé ‚ÄéB‚Äée‚Äéc‚Äéa‚Äéu‚Äés‚Äée‚Äé.‚Äé.‚Äé.‚Äé ‚ÄéC‚Äél‚Äéi‚Äém‚Äéa‚Äét‚Äée‚Äé ‚ÄéC‚Äéh‚Äéa‚Äén‚Äég‚Äée‚Äé
G‚Äér‚Äée‚Äéa‚Äét‚Äé ‚ÄéR‚Äée‚Äés‚Äée‚Äét‚Äé:‚Äé ‚ÄéU‚Äé.‚ÄéN‚Äé.‚Äé ‚Äét‚Äéo‚Äé ‚ÄéO‚Äér‚Äéd‚Äée‚Äér‚Äé ‚Äéa‚Äén‚Äé ‚ÄéE‚Äén‚Äéd‚Äé ‚Äét‚Äéo‚Äé ‚ÄéM‚Äée‚Äéa‚Äét‚Äé ‚ÄéE‚Äéa‚Äét‚Äéi‚Äén‚Äég‚Äé ‚ÄéB‚Äée‚Äéc‚Äéa‚Äéu‚Äés‚Äée‚Äé.‚Äé.‚Äé.‚Äé ‚ÄéC‚Äél‚Äéi‚Äém‚Äéa‚Äét‚Äée‚Äé ‚ÄéC‚Äéh‚Äéa‚Äén‚Äég‚Äée‚Äé

2‚Äé ‚ÄéV‚Äéi‚Äéo‚Äél‚Äée‚Äén‚Äét‚Äé ‚ÄéF‚Äée‚Äém‚Äéa‚Äél‚Äée‚Äé ‚ÄéB‚Äéa‚Äéb‚Äéo‚Äéo‚Äén‚Äés‚Äé ‚ÄéA‚Äét‚Äét‚Äéa‚Äéc‚Äék‚Äé ‚Äé3‚Äé0‚Äé-‚ÄéY‚Äée‚Äéa‚Äér‚Äé-‚ÄéO‚Äél‚Äéd‚Äé ‚ÄéW‚Äéo‚Äém‚Äéa‚Äén‚Äé ‚Äés‚Äéo‚Äé ‚Äét‚Äéh‚Äée‚Äéy‚Äé ‚ÄéC‚Äéo‚Äéu‚Äél‚Äéd‚Äé ‚ÄéR‚Äéi‚Äéd‚Äée‚Äé ‚ÄéS‚Äéu‚Äéb‚Äéw‚Äéa‚Äéy‚Äé.‚Äé

T‚Äéh‚Äéa‚Äét‚Äé'‚Äés‚Äé ‚Äéh‚Äéo‚Äéw‚Äé ‚Äét‚Äéh‚Äée‚Äéy‚Äé ‚Äég‚Äée‚Äét‚Äé ‚Äéo‚Äén‚Äét‚Äéo‚Äé ‚Äés‚Äéu‚Äéb‚Äéw‚Äéa‚Äéy‚Äés‚Äé.‚Äé


S‚Äée‚Äéa‚Äét‚Äét‚Äél‚Äée‚Äé:‚Äé ‚ÄéC‚Äéh‚Äéi‚Äén‚Äék‚Äé ‚ÄéB‚Äéi‚Äét‚Äéc‚Äéh‚Äé ‚ÄéC‚Äér‚Äéa‚Äés‚Äéh‚Äée‚Äés‚Äé ‚ÄéH‚Äée‚Äér‚Äé ‚ÄéP‚Äéo‚Äér‚Äés‚Äéc‚Äéh‚Äée‚Äé ‚Äéi‚Äén‚Äét‚Äéo‚Äé ‚ÄéC‚Äée‚Äém‚Äée‚Äén‚Äét‚Äé ‚ÄéB‚Äéa‚Äér‚Äér‚Äéi‚Äéc‚Äéa‚Äéd‚Äée‚Äé,‚Äé ‚ÄéK‚Äéi‚Äél‚Äél‚Äéi‚Äén‚Äég‚Äé ‚ÄéH‚Äée‚Äér‚Äé ‚ÄéP‚Äéa‚Äés‚Äés‚Äée‚Äén‚Äég‚Äée‚Äér‚Äé,‚Äé ‚ÄéB‚Äée‚Äéf‚Äéo‚Äér‚Äée‚Äé ‚ÄéF‚Äél‚Äée‚Äée‚Äéi‚Äén‚Äég‚Äé ‚ÄéB‚Äéa‚Äéc‚Äék‚Äé ‚Äét‚Äéo‚Äé ‚ÄéC‚Äéh‚Äéi‚Äén‚Äéa‚Äé.‚Äé


N‚Äée‚Äég‚Äér‚Äéo‚Äé ‚ÄéT‚Äée‚Äéa‚Äéc‚Äéh‚Äée‚Äés‚Äé ‚Äé""‚ÄéW‚Äéh‚Äéi‚Äét‚Äée‚Äé ‚ÄéR‚Äéa‚Äéc‚Äéi‚Äés‚Äém‚Äé""‚Äé ‚Äéa‚Äét‚Äé ‚ÄéF‚Äél‚Äéo‚Äér‚Äéi‚Äéd‚Äéa‚Äé ‚ÄéU‚Äén‚Äéi‚Äév‚Äée‚Äér‚Äés‚Äéi‚Äét‚Äéy‚Äé.‚Äé


C‚Äéa‚Äél‚Äéi‚Äéf‚Äéo‚Äér‚Äén‚Äéi‚Äéa‚Äé ‚ÄéP‚Äéo‚Äél‚Äéi‚Äéc‚Äée‚Äé ‚ÄéA‚Äéc‚Äéc‚Äéi‚Äéd‚Äée‚Äén‚Äét‚Äéa‚Äél‚Äél‚Äéy‚Äé ‚ÄéR‚Äée‚Äél‚Äée‚Äéa‚Äés‚Äée‚Äé ‚ÄéS‚Äép‚Äéi‚Äéc‚Äé ‚ÄéC‚Äéh‚Äéi‚Äél‚Äéd‚Äé ‚ÄéM‚Äéo‚Äél‚Äée‚Äés‚Äét‚Äée‚Äér‚Äé ‚Äéf‚Äér‚Äéo‚Äém‚Äé ‚ÄéP‚Äér‚Äéi‚Äés‚Äéo‚Äén‚Äé.‚Äé


S‚Äép‚Äéi‚Äéc‚Äé ‚ÄéI‚Äél‚Äél‚Äée‚Äég‚Äéa‚Äél‚Äé ‚ÄéW‚Äéa‚Äén‚Äét‚Äée‚Äéd‚Äé ‚Äéf‚Äéo‚Äér‚Äé ‚ÄéM‚Äéu‚Äér‚Äéd‚Äée‚Äér‚Äé ‚Äéi‚Äén‚Äé ‚ÄéP‚Äée‚Äén‚Äén‚Äés‚Äéy‚Äél‚Äév‚Äéa‚Äén‚Äéi‚Äéa‚Äé.‚Äé

.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé ‚ÄéW‚Äée‚Äéa‚Äét‚Äéh‚Äée‚Äér‚Äé.‚Äé

T‚Äéo‚Äéd‚Äéa‚Äéy‚Äé
C‚Äél‚Äéo‚Äéu‚Äéd‚Äéy‚Äé
6‚Äé4‚Äé¬∞‚Äé
/‚Äé5‚Äé9‚Äé¬∞‚Äé
1‚Äé5‚Äé%‚Äé
S‚ÄéE‚Äé ‚Äé9‚Äé ‚Äém‚Äép‚Äéh‚Äé
W‚Äée‚Äéd‚Äé ‚Äé2‚Äé9‚Äé ‚Äé|‚Äé ‚ÄéD‚Äéa‚Äéy‚Äé
6‚Äé4‚Äé¬∞‚Äé
1‚Äé5‚Äé%‚Äé
S‚ÄéE‚Äé
9‚Äé
 ‚Äé
m‚Äép‚Äéh‚Äé
C‚Äél‚Äéo‚Äéu‚Äéd‚Äéy‚Äé ‚Äés‚Äék‚Äéi‚Äée‚Äés‚Äé.‚Äé ‚ÄéS‚Äél‚Äéi‚Äég‚Äéh‚Äét‚Äé ‚Äéc‚Äéh‚Äéa‚Äén‚Äéc‚Äée‚Äé ‚Äéo‚Äéf‚Äé ‚Äéa‚Äé ‚Äér‚Äéa‚Äéi‚Äén‚Äé ‚Äés‚Äéh‚Äéo‚Äéw‚Äée‚Äér‚Äé.‚Äé ‚ÄéH‚Äéi‚Äég‚Äéh‚Äé ‚Äé6‚Äé4‚ÄéF‚Äé.‚Äé ‚ÄéW‚Äéi‚Äén‚Äéd‚Äés‚Äé ‚ÄéS‚ÄéE‚Äé ‚Äéa‚Äét‚Äé ‚Äé5‚Äé ‚Äét‚Äéo‚Äé ‚Äé1‚Äé0‚Äé ‚Äém‚Äép‚Äéh‚Äé.‚Äé

H‚Äéu‚Äém‚Äéi‚Äéd‚Äéi‚Äét‚Äéy‚Äé
6‚Äé1‚Äé%‚Äé
U‚ÄéV‚Äé ‚ÄéI‚Äén‚Äéd‚Äée‚Äéx‚Äé
2‚Äé ‚Äéo‚Äéf‚Äé ‚Äé1‚Äé1‚Äé
S‚Äéu‚Äén‚Äér‚Äéi‚Äés‚Äée‚Äé
7‚Äé:‚Äé0‚Äé6‚Äé ‚Äéa‚Äém‚Äé
S‚Äéu‚Äén‚Äés‚Äée‚Äét‚Äé
5‚Äé:‚Äé3‚Äé0‚Äé ‚Äép‚Äém‚Äé
W‚Äée‚Äéd‚Äé ‚Äé2‚Äé9‚Äé ‚Äé|‚Äé ‚ÄéN‚Äéi‚Äég‚Äéh‚Äét‚Äé
5‚Äé9‚Äé¬∞‚Äé
7‚Äé0‚Äé%‚Äé
S‚ÄéE‚Äé
1‚Äé0‚Äé
 ‚Äé
m‚Äép‚Äéh‚Äé
C‚Äél‚Äéo‚Äéu‚Äéd‚Äéy‚Äé ‚Äés‚Äék‚Äéi‚Äée‚Äés‚Äé ‚Äée‚Äéa‚Äér‚Äél‚Äéy‚Äé,‚Äé ‚Äét‚Äéh‚Äée‚Äén‚Äé ‚Äét‚Äéh‚Äéu‚Äén‚Äéd‚Äée‚Äér‚Äés‚Äét‚Äéo‚Äér‚Äém‚Äés‚Äé ‚Äéd‚Äée‚Äév‚Äée‚Äél‚Äéo‚Äép‚Äéi‚Äén‚Äég‚Äé ‚Äél‚Äéa‚Äét‚Äée‚Äé.‚Äé ‚ÄéL‚Äéo‚Äéw‚Äé ‚Äé5‚Äé9‚ÄéF‚Äé.‚Äé ‚ÄéW‚Äéi‚Äén‚Äéd‚Äés‚Äé ‚ÄéS‚ÄéE‚Äé ‚Äéa‚Äét‚Äé ‚Äé1‚Äé0‚Äé ‚Äét‚Äéo‚Äé ‚Äé1‚Äé5‚Äé ‚Äém‚Äép‚Äéh‚Äé.‚Äé ‚ÄéC‚Äéh‚Äéa‚Äén‚Äéc‚Äée‚Äé ‚Äéo‚Äéf‚Äé ‚Äér‚Äéa‚Äéi‚Äén‚Äé ‚Äé7‚Äé0‚Äé%‚Äé.‚Äé

H‚Äéu‚Äém‚Äéi‚Äéd‚Äéi‚Äét‚Äéy‚Äé
8‚Äé6‚Äé%‚Äé
U‚ÄéV‚Äé ‚ÄéI‚Äén‚Äéd‚Äée‚Äéx‚Äé
0‚Äé ‚Äéo‚Äéf‚Äé ‚Äé1‚Äé1‚Äé
M‚Äéo‚Äéo‚Äén‚Äér‚Äéi‚Äés‚Äée‚Äé
7‚Äé:‚Äé3‚Äé0‚Äé ‚Äép‚Äém‚Äé
W‚Äéa‚Äén‚Äéi‚Äén‚Äég‚Äé ‚ÄéG‚Äéi‚Äéb‚Äéb‚Äéo‚Äéu‚Äés‚Äé
M‚Äéo‚Äéo‚Äén‚Äés‚Äée‚Äét‚Äé
9‚Äé:‚Äé2‚Äé9‚Äé ‚Äéa‚Äém‚Äé
T‚Äéh‚Äéu‚Äé ‚Äé3‚Äé0‚Äé
T‚Äéh‚Äéu‚Äén‚Äéd‚Äée‚Äér‚Äés‚Äéh‚Äéo‚Äéw‚Äée‚Äér‚Äés‚Äé
7‚Äé4‚Äé¬∞‚Äé
/‚Äé5‚Äé2‚Äé¬∞‚Äé
6‚Äé8‚Äé%‚Äé
S‚ÄéS‚ÄéW‚Äé ‚Äé1‚Äé5‚Äé ‚Äém‚Äép‚Äéh‚Äé
F‚Äér‚Äéi‚Äé ‚Äé0‚Äé1‚Äé
P‚Äéa‚Äér‚Äét‚Äél‚Äéy‚Äé ‚ÄéC‚Äél‚Äéo‚Äéu‚Äéd‚Äéy‚Äé
7‚Äé1‚Äé¬∞‚Äé
/‚Äé4‚Äé8‚Äé¬∞‚Äé
4‚Äé%‚Äé
N‚ÄéN‚ÄéE‚Äé ‚Äé1‚Äé0‚Äé ‚Äém‚Äép‚Äéh‚Äé
S‚Äéa‚Äét‚Äé ‚Äé0‚Äé2‚Äé
P‚Äéa‚Äér‚Äét‚Äél‚Äéy‚Äé ‚ÄéC‚Äél‚Äéo‚Äéu‚Äéd‚Äéy‚Äé
7‚Äé3‚Äé¬∞‚Äé
/‚Äé4‚Äé9‚Äé¬∞‚Äé
9‚Äé%‚Äé
N‚Äé ‚Äé4‚Äé ‚Äém‚Äép‚Äéh‚Äé
S‚Äéu‚Äén‚Äé ‚Äé0‚Äé3‚Äé
P‚Äéa‚Äér‚Äét‚Äél‚Äéy‚Äé ‚ÄéC‚Äél‚Äéo‚Äéu‚Äéd‚Äéy‚Äé
7‚Äé4‚Äé¬∞‚Äé
/‚Äé4‚Äé6‚Äé¬∞‚Äé
4‚Äé%‚Äé
W‚ÄéN‚ÄéW‚Äé ‚Äé7‚Äé ‚Äém‚Äép‚Äéh‚Äé
M‚Äéo‚Äén‚Äé ‚Äé0‚Äé4‚Äé
P‚Äéa‚Äér‚Äét‚Äél‚Äéy‚Äé ‚ÄéC‚Äél‚Äéo‚Äéu‚Äéd‚Äéy‚Äé
7‚Äé0‚Äé¬∞‚Äé
/‚Äé4‚Äé4‚Äé¬∞‚Äé
1‚Äé%‚Äé
W‚ÄéN‚ÄéW‚Äé ‚Äé1‚Äé1‚Äé ‚Äém‚Äép‚Äéh‚Äé
T‚Äéu‚Äée‚Äé ‚Äé0‚Äé5‚Äé
P‚Äéa‚Äér‚Äét‚Äél‚Äéy‚Äé ‚ÄéC‚Äél‚Äéo‚Äéu‚Äéd‚Äéy‚Äé
6‚Äé8‚Äé¬∞‚Äé
/‚Äé4‚Äé2‚Äé¬∞‚Äé
3‚Äé%‚Äé
W‚ÄéN‚ÄéW‚Äé ‚Äé7‚Äé ‚Äém‚Äép‚Äéh‚Äé
W‚Äée‚Äéd‚Äé ‚Äé0‚Äé6‚Äé
P‚Äéa‚Äér‚Äét‚Äél‚Äéy‚Äé ‚ÄéC‚Äél‚Äéo‚Äéu‚Äéd‚Äéy‚Äé
6‚Äé6‚Äé¬∞‚Äé
/‚Äé4‚Äé5‚Äé¬∞‚Äé
3‚Äé%‚Äé
N‚ÄéN‚ÄéE‚Äé ‚Äé7‚Äé ‚Äém‚Äép‚Äéh‚Äé
T‚Äéh‚Äéu‚Äé ‚Äé0‚Äé7‚Äé
P‚Äéa‚Äér‚Äét‚Äél‚Äéy‚Äé ‚ÄéC‚Äél‚Äéo‚Äéu‚Äéd‚Äéy‚Äé
6‚Äé8‚Äé¬∞‚Äé
/‚Äé4‚Äé9‚Äé¬∞‚Äé
4‚Äé%‚Äé
S‚Äé ‚Äé9‚Äé ‚Äém‚Äép‚Äéh‚Äé
F‚Äér‚Äéi‚Äé ‚Äé0‚Äé8‚Äé
P‚Äéa‚Äér‚Äét‚Äél‚Äéy‚Äé ‚ÄéC‚Äél‚Äéo‚Äéu‚Äéd‚Äéy‚Äé
7‚Äé0‚Äé¬∞‚Äé
/‚Äé5‚Äé2‚Äé¬∞‚Äé
1‚Äé1‚Äé%‚Äé
S‚ÄéS‚ÄéW‚Äé ‚Äé1‚Äé2‚Äé ‚Äém‚Äép‚Äéh‚Äé
S‚Äéa‚Äét‚Äé ‚Äé0‚Äé9‚Äé
P‚Äéa‚Äér‚Äét‚Äél‚Äéy‚Äé ‚ÄéC‚Äél‚Äéo‚Äéu‚Äéd‚Äéy‚Äé
7‚Äé1‚Äé¬∞‚Äé
/‚Äé5‚Äé5‚Äé¬∞‚Äé
1‚Äé6‚Äé%‚Äé
S‚ÄéS‚ÄéW‚Äé ‚Äé1‚Äé2‚Äé ‚Äém‚Äép‚Äéh‚Äé
S‚Äéu‚Äén‚Äé ‚Äé1‚Äé0‚Äé
P‚Äéa‚Äér‚Äét‚Äél‚Äéy‚Äé ‚ÄéC‚Äél‚Äéo‚Äéu‚Äéd‚Äéy‚Äé
6‚Äé7‚Äé¬∞‚Äé
/‚Äé5‚Äé0‚Äé¬∞‚Äé
1‚Äé5‚Äé%‚Äé
N‚ÄéN‚ÄéW‚Äé ‚Äé1‚Äé3‚Äé ‚Äém‚Äép‚Äéh‚Äé
M‚Äéo‚Äén‚Äé ‚Äé1‚Äé1‚Äé
P‚Äéa‚Äér‚Äét‚Äél‚Äéy‚Äé ‚ÄéC‚Äél‚Äéo‚Äéu‚Äéd‚Äéy‚Äé
6‚Äé3‚Äé¬∞‚Äé
/‚Äé4‚Äé6‚Äé¬∞‚Äé
2‚Äé0‚Äé%‚Äé
N‚ÄéN‚ÄéW‚Äé ‚Äé1‚Äé2‚Äé ‚Äém‚Äép‚Äéh‚Äé
T‚Äéu‚Äée‚Äé ‚Äé1‚Äé2‚Äé
P‚Äéa‚Äér‚Äét‚Äél‚Äéy‚Äé ‚ÄéC‚Äél‚Äéo‚Äéu‚Äéd‚Äéy‚Äé
6‚Äé1‚Äé¬∞‚Äé
/‚Äé4‚Äé5‚Äé¬∞‚Äé
2‚Äé4‚Äé%‚Äé
N‚Äé ‚Äé1‚Äé0‚Äé ‚Äém‚Äép‚Äéh‚Äé
W‚Äée‚Äéd‚Äé ‚Äé1‚Äé3‚Äé
P‚Äéa‚Äér‚Äét‚Äél‚Äéy‚Äé ‚ÄéC‚Äél‚Äéo‚Äéu‚Äéd‚Äéy‚Äé
6‚Äé2‚Äé¬∞‚Äé
/‚Äé4‚Äé5‚Äé¬∞‚Äé
1‚Äé7‚Äé%‚Äé
S‚ÄéW‚Äé ‚Äé1‚Äé0‚Äé ‚Äém‚Äép‚Äéh‚Äé

.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé

C‚Äéu‚Äér‚Äér‚Äée‚Äén‚Äét‚Äé ‚Äét‚Äéh‚Äér‚Äée‚Äéa‚Äét‚Äé:‚Äé ‚ÄéS‚Äéu‚Äén‚Äét‚Äée‚Äér‚Äé ‚ÄéK‚Äél‚Äéa‚Äéu‚Äés‚Äé.‚Äé ‚ÄéüéÖüèª

.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé

D‚Äéo‚Äég‚Äée‚Äéc‚Äéo‚Äéi‚Äén‚Äé
D‚Äéo‚Äég‚Äée‚Äéc‚Äéo‚Äéi‚Äén‚Äé ‚Äé(‚Äéa‚Äél‚Äés‚Äéo‚Äé ‚Äék‚Äén‚Äéo‚Äéw‚Äén‚Äé ‚Äéa‚Äés‚Äé ‚ÄéD‚Äéo‚Äéd‚Äég‚Äéy‚Äéc‚Äéo‚Äéi‚Äén‚Äé)‚Äé ‚Äéi‚Äés‚Äé ‚Äéa‚Äén‚Äéo‚Äét‚Äéh‚Äée‚Äér‚Äé ‚Äés‚Äéh‚Äéi‚Äét‚Äét‚Äéy‚Äé ‚ÄéB‚Äéi‚Äét‚Äéc‚Äéo‚Äéi‚Äén‚Äé ‚Äék‚Äén‚Äéo‚Äéc‚Äék‚Äéo‚Äéf‚Äéf‚Äé.‚Äé ‚ÄéI‚Äét‚Äé ‚Äéw‚Äéa‚Äés‚Äé ‚Äéi‚Äén‚Äét‚Äér‚Äéo‚Äéd‚Äéu‚Äéc‚Äée‚Äéd‚Äé ‚Äét‚Äéo‚Äé ‚Äét‚Äéh‚Äée‚Äé ‚ÄéI‚Äén‚Äét‚Äée‚Äér‚Äén‚Äée‚Äét‚Äé ‚Äéo‚Äén‚Äé ‚ÄéD‚Äée‚Äéc‚Äée‚Äém‚Äéb‚Äée‚Äér‚Äé ‚Äé6‚Äét‚Äéh‚Äé,‚Äé ‚Äé2‚Äé0‚Äé1‚Äé3‚Äé ‚Äéa‚Äén‚Äéd‚Äé ‚Äéb‚Äée‚Äéc‚Äéa‚Äém‚Äée‚Äé ‚Äéf‚Äéa‚Äév‚Äéo‚Äér‚Äée‚Äéd‚Äé ‚Äéb‚Äéy‚Äé ‚ÄéS‚Äéh‚Äéi‚Äéb‚Äéa‚Äé ‚ÄéI‚Äén‚Äéu‚Äés‚Äé ‚Äéw‚Äéo‚Äér‚Äél‚Äéd‚Äéw‚Äéi‚Äéd‚Äée‚Äé ‚Äéb‚Äée‚Äéc‚Äéa‚Äéu‚Äés‚Äée‚Äé ‚Äéa‚Äép‚Äép‚Äéa‚Äér‚Äée‚Äén‚Äét‚Äél‚Äéy‚Äé ‚Äéd‚Äéo‚Äég‚Äés‚Äé ‚Äéc‚Äéa‚Äér‚Äée‚Äé ‚Äéa‚Äéb‚Äéo‚Äéu‚Äét‚Äé ‚Äéh‚Äéu‚Äém‚Äéa‚Äén‚Äé ‚Äés‚Äép‚Äéa‚Äéc‚Äée‚Äé ‚Äéb‚Äéu‚Äéx‚Äé.‚Äé

S‚Äéo‚Äém‚Äée‚Äéw‚Äéh‚Äée‚Äér‚Äée‚Äé ‚Äéa‚Äér‚Äéo‚Äéu‚Äén‚Äéd‚Äé ‚Äém‚Äéi‚Äéd‚Äé-‚Äé2‚Äé0‚Äé1‚Äé4‚Äé,‚Äé ‚ÄéD‚Äéo‚Äég‚Äée‚Äéc‚Äéo‚Äéi‚Äén‚Äé ‚Äéf‚Äéo‚Äéu‚Äén‚Äéd‚Äé ‚Äéi‚Äét‚Äés‚Äé ‚Äéw‚Äéa‚Äéy‚Äé ‚Äéi‚Äén‚Äét‚Äéo‚Äé ‚Äé4‚Äéc‚Äéh‚Äéa‚Äén‚Äé,‚Äé ‚Äép‚Äéa‚Äér‚Äét‚Äéi‚Äéc‚Äéu‚Äél‚Äéa‚Äér‚Äél‚Äéy‚Äé ‚Äéi‚Äét‚Äés‚Äé ‚Äét‚Äéh‚Äéi‚Äér‚Äéd‚Äé ‚Äéc‚Äér‚Äéa‚Äép‚Äép‚Äéi‚Äée‚Äés‚Äét‚Äé ‚Äéb‚Äéo‚Äéa‚Äér‚Äéd‚Äé ‚Äé(‚Äér‚Äéa‚Äén‚Äék‚Äéi‚Äén‚Äég‚Äé ‚Äéo‚Äén‚Äél‚Äéy‚Äé ‚Äéb‚Äée‚Äéh‚Äéi‚Äén‚Äéd‚Äé ‚Äé/‚Äév‚Äé/‚Äé ‚Äéa‚Äén‚Äéd‚Äé ‚Äé/‚Äém‚Äél‚Äép‚Äé/‚Äé,‚Äé ‚Äéy‚Äée‚Äét‚Äé ‚Äéa‚Äég‚Äéa‚Äéi‚Äén‚Äé ‚Äéa‚Äéd‚Äéd‚Äéi‚Äén‚Äég‚Äé ‚Äéa‚Äén‚Äéo‚Äét‚Äéh‚Äée‚Äér‚Äé ‚Äéf‚Äéo‚Äér‚Äém‚Äé ‚Äéo‚Äéf‚Äé ‚Äéc‚Äéa‚Äén‚Äéc‚Äée‚Äér‚Äé ‚Äéi‚Äén‚Äét‚Äéo‚Äé ‚Äét‚Äéh‚Äée‚Äé ‚Äés‚Äéi‚Äét‚Äée‚Äé,‚Äé ‚Äéc‚Äér‚Äée‚Äéa‚Äét‚Äéi‚Äén‚Äég‚Äé ‚Äéa‚Äé ‚Äén‚Äée‚Äét‚Äéw‚Äéo‚Äér‚Äék‚Äé ‚Äéf‚Äéo‚Äér‚Äé ‚Äéd‚Äéo‚Äég‚Äée‚Äéc‚Äéo‚Äéi‚Äén‚Äé ‚Äét‚Äér‚Äéa‚Äéd‚Äée‚Äés‚Äé ‚Äé-‚Äé ‚Äéb‚Äée‚Äég‚Äé ‚Äét‚Äéh‚Äér‚Äée‚Äéa‚Äéd‚Äés‚Äé ‚Äéb‚Äéu‚Äém‚Äép‚Äée‚Äéd‚Äé ‚Äéb‚Äéy‚Äé ‚Äéf‚Äéa‚Äég‚Äég‚Äéo‚Äét‚Äés‚Äé ‚Äéw‚Äéh‚Äéo‚Äé ‚Äét‚Äéh‚Äéi‚Äén‚Äék‚Äé ‚Äét‚Äéh‚Äée‚Äéy‚Äé ‚Äéc‚Äéa‚Äén‚Äé ‚Äéa‚Äéc‚Äéq‚Äéu‚Äéi‚Äér‚Äée‚Äé ‚Äéc‚Äéu‚Äér‚Äér‚Äée‚Äén‚Äéc‚Äéy‚Äé ‚Äéb‚Äéy‚Äé ‚Äéc‚Äél‚Äéi‚Äéc‚Äék‚Äéi‚Äén‚Äég‚Äé ‚Äéa‚Äér‚Äéo‚Äéu‚Äén‚Äéd‚Äé ‚Äéo‚Äén‚Äé ‚Äét‚Äéh‚Äée‚Äé ‚Äéi‚Äén‚Äét‚Äée‚Äér‚Äén‚Äée‚Äét‚Äé.‚Äé ‚ÄéN‚Äéo‚Äéw‚Äé ‚Äéa‚Äét‚Äé ‚Äél‚Äée‚Äéa‚Äés‚Äét‚Äé ‚Äéo‚Äén‚Äée‚Äé ‚Äéb‚Äéi‚Äét‚Äéc‚Äéo‚Äéi‚Äén‚Äé/‚Äéd‚Äéo‚Äég‚Äée‚Äéc‚Äéo‚Äéi‚Äén‚Äé ‚Äéo‚Äér‚Äé ‚Äés‚Äét‚Äée‚Äéa‚Äém‚Äé-‚Äéb‚Äée‚Äég‚Äég‚Äéi‚Äén‚Äég‚Äé-‚Äét‚Äéh‚Äér‚Äée‚Äéa‚Äéd‚Äé ‚Äéc‚Äéa‚Äén‚Äé ‚Äéb‚Äée‚Äé ‚Äéf‚Äéo‚Äéu‚Äén‚Äéd‚Äé ‚Äéa‚Äéc‚Äét‚Äéi‚Äév‚Äée‚Äé ‚Äéo‚Äén‚Äé ‚Äé/‚Äéb‚Äé/‚Äé ‚Äéa‚Äét‚Äé ‚Äéa‚Äén‚Äéy‚Äé ‚Äég‚Äéi‚Äév‚Äée‚Äén‚Äé ‚Äét‚Äéi‚Äém‚Äée‚Äé,‚Äé ‚Äéw‚Äéh‚Äéi‚Äéc‚Äéh‚Äé ‚Äéc‚Äéo‚Äém‚Äée‚Äés‚Äé ‚Äéa‚Äés‚Äé ‚Äén‚Äéo‚Äé ‚Äés‚Äéu‚Äér‚Äép‚Äér‚Äéi‚Äés‚Äée‚Äé!‚Äé

I‚Äén‚Äé ‚Äét‚Äéh‚Äée‚Äé ‚Äéy‚Äée‚Äéa‚Äér‚Äé ‚Äé2‚Äé0‚Äé2‚Äé1‚Äé,‚Äé ‚ÄéD‚Äéo‚Äég‚Äée‚Äéc‚Äéo‚Äéi‚Äén‚Äé ‚Äém‚Äéa‚Äéd‚Äée‚Äé ‚Äéa‚Äén‚Äé ‚Äéu‚Äén‚Äée‚Äéx‚Äép‚Äée‚Äéc‚Äét‚Äée‚Äéd‚Äé ‚Äéc‚Äéo‚Äém‚Äée‚Äé-‚Äéb‚Äéa‚Äéc‚Äék‚Äé.‚Äé.‚Äé.‚Äé ‚Äéa‚Äén‚Äéd‚Äé ‚Äéw‚Äée‚Äén‚Äét‚Äé ‚Äés‚Äéo‚Äér‚Äét‚Äé-‚Äéo‚Äéf‚Äé ‚Äém‚Äéa‚Äéi‚Äén‚Äés‚Äét‚Äér‚Äée‚Äéa‚Äém‚Äé ‚Äéa‚Äém‚Äéo‚Äén‚Äég‚Äé ‚ÄéF‚Äéa‚Äéc‚Äée‚Äéb‚Äéo‚Äéo‚Äék‚Äé ‚Äén‚Äéo‚Äér‚Äém‚Äéi‚Äée‚Äés‚Äé ‚Äéa‚Äén‚Äéd‚Äé ‚Äét‚Äéw‚Äéi‚Äét‚Äét‚Äée‚Äér‚Äé ‚Äéu‚Äés‚Äée‚Äér‚Äés‚Äé,‚Äé ‚Äéa‚Äés‚Äé ‚Äéw‚Äée‚Äél‚Äél‚Äé ‚Äéa‚Äés‚Äé ‚Äét‚Äéh‚Äée‚Äé ‚ÄéR‚Äée‚Äéd‚Äéd‚Äéi‚Äét‚Äéo‚Äér‚Äés‚Äé ‚Äéw‚Äéh‚Äéo‚Äé ‚Äéc‚Äéh‚Äéa‚Äém‚Äép‚Äéi‚Äéo‚Äén‚Äée‚Äéd‚Äé ‚Äéi‚Äét‚Äé.‚Äé


(‚Äé(‚Äé ‚ÄéT‚ÄéO‚Äé.‚Äé.‚Äé ‚ÄéT‚ÄéH‚ÄéE‚Äé ‚ÄéM‚ÄéO‚ÄéO‚ÄéN‚Äé?‚Äé?‚Äé ‚Äé)‚Äé)‚Äé

.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé

S‚Äét‚Äéa‚Äét‚Äée‚Äé ‚ÄéF‚Äéa‚Äéi‚Äér‚Äé ‚Äéi‚Äés‚Äé ‚Äéa‚Äé ‚Äé1‚Äé9‚Äé3‚Äé3‚Äé ‚ÄéA‚Äém‚Äée‚Äér‚Äéi‚Äéc‚Äéa‚Äén‚Äé ‚Äéc‚Äéo‚Äém‚Äée‚Äéd‚Äéy‚Äé-‚Äéd‚Äér‚Äéa‚Äém‚Äéa‚Äé ‚Äéf‚Äéi‚Äél‚Äém‚Äé ‚Äéd‚Äéi‚Äér‚Äée‚Äéc‚Äét‚Äée‚Äéd‚Äé ‚Äéb‚Äéy‚Äé ‚ÄéH‚Äée‚Äén‚Äér‚Äéy‚Äé ‚ÄéK‚Äéi‚Äén‚Äég‚Äé ‚Äéa‚Äén‚Äéd‚Äé ‚Äés‚Äét‚Äéa‚Äér‚Äér‚Äéi‚Äén‚Äég‚Äé ‚ÄéJ‚Äéa‚Äén‚Äée‚Äét‚Äé ‚ÄéG‚Äéa‚Äéy‚Äén‚Äéo‚Äér‚Äé,‚Äé ‚ÄéW‚Äéi‚Äél‚Äél‚Äé ‚ÄéR‚Äéo‚Äég‚Äée‚Äér‚Äés‚Äé ‚Äéa‚Äén‚Äéd‚Äé ‚ÄéL‚Äée‚Äéw‚Äé ‚ÄéA‚Äéy‚Äér‚Äée‚Äés‚Äé.‚Äé ‚ÄéI‚Äét‚Äé ‚Äéw‚Äéa‚Äés‚Äé ‚Äéb‚Äéa‚Äés‚Äée‚Äéd‚Äé ‚Äéo‚Äén‚Äé ‚Äét‚Äéh‚Äée‚Äé ‚Äé1‚Äé9‚Äé3‚Äé2‚Äé ‚Äéb‚Äée‚Äés‚Äét‚Äés‚Äée‚Äél‚Äél‚Äéi‚Äén‚Äég‚Äé ‚Äén‚Äéo‚Äév‚Äée‚Äél‚Äé ‚ÄéS‚Äét‚Äéa‚Äét‚Äée‚Äé ‚ÄéF‚Äéa‚Äéi‚Äér‚Äé ‚Äéb‚Äéy‚Äé ‚ÄéP‚Äéh‚Äéi‚Äél‚Äé ‚ÄéS‚Äét‚Äéo‚Äén‚Äég‚Äé.‚Äé ‚ÄéT‚Äéh‚Äée‚Äé ‚Äép‚Äéi‚Äéc‚Äét‚Äéu‚Äér‚Äée‚Äé ‚Äét‚Äée‚Äél‚Äél‚Äés‚Äé ‚Äét‚Äéh‚Äée‚Äé ‚Äés‚Äét‚Äéo‚Äér‚Äéy‚Äé ‚Äéo‚Äéf‚Äé ‚Äéa‚Äé ‚Äéf‚Äéa‚Äér‚Äém‚Äé ‚Äéf‚Äéa‚Äém‚Äéi‚Äél‚Äéy‚Äé'‚Äés‚Äé ‚Äém‚Äéu‚Äél‚Äét‚Äéi‚Äé-‚Äéd‚Äéa‚Äéy‚Äé ‚Äév‚Äéi‚Äés‚Äéi‚Äét‚Äé ‚Äét‚Äéo‚Äé ‚Äét‚Äéh‚Äée‚Äé ‚ÄéI‚Äéo‚Äéw‚Äéa‚Äé ‚ÄéS‚Äét‚Äéa‚Äét‚Äée‚Äé ‚ÄéF‚Äéa‚Äéi‚Äér‚Äé,‚Äé ‚Äéw‚Äéh‚Äée‚Äér‚Äée‚Äé ‚Äét‚Äéh‚Äée‚Äé ‚Äép‚Äéa‚Äér‚Äée‚Äén‚Äét‚Äés‚Äé ‚Äés‚Äée‚Äée‚Äék‚Äé ‚Äét‚Äéo‚Äé ‚Äéw‚Äéi‚Äén‚Äé ‚Äép‚Äér‚Äéi‚Äéz‚Äée‚Äés‚Äé ‚Äéi‚Äén‚Äé ‚Äéa‚Äég‚Äér‚Äéi‚Äéc‚Äéu‚Äél‚Äét‚Äéu‚Äér‚Äéa‚Äél‚Äé ‚Äéa‚Äén‚Äéd‚Äé ‚Äéc‚Äéo‚Äéo‚Äék‚Äéi‚Äén‚Äég‚Äé ‚Äéc‚Äéo‚Äém‚Äép‚Äée‚Äét‚Äéi‚Äét‚Äéi‚Äéo‚Äén‚Äés‚Äé,‚Äé ‚Äéa‚Äén‚Äéd‚Äé ‚Äét‚Äéh‚Äée‚Äéi‚Äér‚Äé ‚Äét‚Äée‚Äée‚Äén‚Äéa‚Äég‚Äée‚Äé ‚Äéd‚Äéa‚Äéu‚Äég‚Äéh‚Äét‚Äée‚Äér‚Äé ‚Äéa‚Äén‚Äéd‚Äé ‚Äés‚Äéo‚Äén‚Äé ‚Äée‚Äéa‚Äéc‚Äéh‚Äé ‚Äéf‚Äéi‚Äén‚Äéd‚Äé ‚Äéu‚Äén‚Äée‚Äéx‚Äép‚Äée‚Äéc‚Äét‚Äée‚Äéd‚Äé ‚Äér‚Äéo‚Äém‚Äéa‚Äén‚Äéc‚Äée‚Äé.‚Äé ‚ÄéT‚Äéh‚Äée‚Äé ‚Äéf‚Äéi‚Äél‚Äém‚Äé ‚Äéw‚Äéa‚Äés‚Äé ‚Äém‚Äéa‚Äéd‚Äée‚Äé ‚Äéi‚Äén‚Äé ‚Äép‚Äér‚Äée‚Äé-‚ÄéC‚Äéo‚Äéd‚Äée‚Äé ‚ÄéH‚Äéo‚Äél‚Äél‚Äéy‚Äéw‚Äéo‚Äéo‚Äéd‚Äé ‚Äéa‚Äén‚Äéd‚Äé,‚Äé ‚Äéd‚Äée‚Äés‚Äép‚Äéi‚Äét‚Äée‚Äé ‚Äéi‚Äét‚Äés‚Äé ‚Äés‚Äée‚Äée‚Äém‚Äéi‚Äén‚Äég‚Äél‚Äéy‚Äé ‚Äét‚Äéa‚Äém‚Äée‚Äé ‚Äép‚Äél‚Äéo‚Äét‚Äé,‚Äé ‚Äéh‚Äéa‚Äéd‚Äé ‚Äés‚Äéo‚Äém‚Äée‚Äé ‚Äés‚Äéc‚Äée‚Äén‚Äée‚Äés‚Äé ‚Äét‚Äéh‚Äéa‚Äét‚Äé ‚Äéw‚Äée‚Äér‚Äée‚Äé ‚Äéc‚Äée‚Äén‚Äés‚Äéo‚Äér‚Äée‚Äéd‚Äé ‚Äéi‚Äén‚Äé ‚Äéa‚Äé ‚Äér‚Äée‚Äé-‚Äér‚Äée‚Äél‚Äée‚Äéa‚Äés‚Äée‚Äé ‚Äéa‚Äé ‚Äéf‚Äée‚Äéw‚Äé ‚Äéy‚Äée‚Äéa‚Äér‚Äés‚Äé ‚Äél‚Äéa‚Äét‚Äée‚Äér‚Äé,‚Äé ‚Äéa‚Äéf‚Äét‚Äée‚Äér‚Äé ‚Äét‚Äéh‚Äée‚Äé ‚ÄéP‚Äér‚Äéo‚Äéd‚Äéu‚Äéc‚Äét‚Äéi‚Äéo‚Äén‚Äé ‚ÄéC‚Äéo‚Äéd‚Äée‚Äé ‚Äét‚Äéo‚Äéo‚Äék‚Äé ‚Äée‚Äéf‚Äéf‚Äée‚Äéc‚Äét‚Äé.‚Äé ‚ÄéC‚Äéu‚Äét‚Äé ‚Äés‚Äéc‚Äée‚Äén‚Äée‚Äés‚Äé ‚Äéi‚Äén‚Äéc‚Äél‚Äéu‚Äéd‚Äée‚Äé ‚Äéa‚Äé ‚Äév‚Äéi‚Äée‚Äéw‚Äé ‚Äéo‚Äéf‚Äé ‚Äéa‚Äé ‚Äéd‚Äéi‚Äés‚Äéh‚Äée‚Äév‚Äée‚Äél‚Äée‚Äéd‚Äé ‚Äéb‚Äée‚Äéd‚Äé ‚Äéa‚Äén‚Äéd‚Äé ‚Äéa‚Äé ‚Äén‚Äée‚Äég‚Äél‚Äéi‚Äég‚Äée‚Äée‚Äé ‚Äéo‚Äén‚Äé ‚Äét‚Äéh‚Äée‚Äé ‚Äéf‚Äél‚Äéo‚Äéo‚Äér‚Äé,‚Äé ‚Äéa‚Äén‚Äéd‚Äé ‚Äéa‚Äé ‚Äés‚Äée‚Äéx‚Äéu‚Äéa‚Äél‚Äé ‚Äér‚Äée‚Äél‚Äéa‚Äét‚Äéi‚Äéo‚Äén‚Äés‚Äéh‚Äéi‚Äép‚Äé ‚Äéb‚Äée‚Äét‚Äéw‚Äée‚Äée‚Äén‚Äé ‚Äét‚Äéh‚Äée‚Äé ‚Äéd‚Äéa‚Äéu‚Äég‚Äéh‚Äét‚Äée‚Äér‚Äé ‚Äéa‚Äén‚Äéd‚Äé ‚Äéa‚Äé ‚Äér‚Äée‚Äép‚Äéo‚Äér‚Äét‚Äée‚Äér‚Äé,‚Äé ‚Äéb‚Äéu‚Äét‚Äé ‚Äét‚Äéh‚Äée‚Äé ‚Äés‚Äéo‚Äén‚Äé'‚Äés‚Äé ‚Äés‚Äée‚Äéd‚Äéu‚Äéc‚Äét‚Äéi‚Äéo‚Äén‚Äé ‚Äéb‚Äéy‚Äé ‚Äéa‚Äé ‚Äét‚Äér‚Äéa‚Äép‚Äée‚Äéz‚Äée‚Äé ‚Äéa‚Äér‚Äét‚Äéi‚Äés‚Äét‚Äé ‚Äéw‚Äéa‚Äés‚Äé ‚Äék‚Äée‚Äép‚Äét‚Äé.‚Äé ‚ÄéT‚Äéh‚Äée‚Äé ‚Äéf‚Äéi‚Äél‚Äém‚Äé ‚Äéw‚Äéa‚Äés‚Äé ‚Äén‚Äéo‚Äém‚Äéi‚Äén‚Äéa‚Äét‚Äée‚Äéd‚Äé ‚Äéf‚Äéo‚Äér‚Äé ‚Äéa‚Äén‚Äé ‚ÄéA‚Äéc‚Äéa‚Äéd‚Äée‚Äém‚Äéy‚Äé ‚ÄéA‚Äéw‚Äéa‚Äér‚Äéd‚Äé ‚Äéf‚Äéo‚Äér‚Äé ‚ÄéB‚Äée‚Äés‚Äét‚Äé ‚ÄéP‚Äéi‚Äéc‚Äét‚Äéu‚Äér‚Äée‚Äé ‚Äéa‚Äén‚Äéd‚Äé ‚Äéw‚Äéa‚Äés‚Äé ‚Äét‚Äéh‚Äée‚Äé ‚Äéf‚Äéi‚Äér‚Äés‚Äét‚Äé ‚Äéo‚Äéf‚Äé ‚Äét‚Äéh‚Äér‚Äée‚Äée‚Äé ‚Äéf‚Äéi‚Äél‚Äém‚Äé ‚Äév‚Äée‚Äér‚Äés‚Äéi‚Äéo‚Äén‚Äés‚Äé ‚Äéo‚Äéf‚Äé ‚Äét‚Äéh‚Äée‚Äé ‚Äén‚Äéo‚Äév‚Äée‚Äél‚Äé ‚Äér‚Äée‚Äél‚Äée‚Äéa‚Äés‚Äée‚Äéd‚Äé ‚Äét‚Äéo‚Äé ‚Äét‚Äéh‚Äée‚Äéa‚Äét‚Äée‚Äér‚Äés‚Äé,‚Äé ‚Äét‚Äéh‚Äée‚Äé ‚Äéo‚Äét‚Äéh‚Äée‚Äér‚Äés‚Äé ‚Äéb‚Äée‚Äéi‚Äén‚Äég‚Äé ‚Äém‚Äéo‚Äév‚Äéi‚Äée‚Äé ‚Äém‚Äéu‚Äés‚Äéi‚Äéc‚Äéa‚Äél‚Äés‚Äé ‚Äér‚Äée‚Äél‚Äée‚Äéa‚Äés‚Äée‚Äéd‚Äé ‚Äéi‚Äén‚Äé ‚Äé1‚Äé9‚Äé4‚Äé5‚Äé ‚Äéa‚Äén‚Äéd‚Äé ‚Äéi‚Äén‚Äé ‚Äé1‚Äé9‚Äé6‚Äé2‚Äé.‚Äé ‚ÄéT‚Äéh‚Äéi‚Äés‚Äé ‚Äép‚Äéo‚Äés‚Äét‚Äée‚Äér‚Äé ‚Äéw‚Äéa‚Äés‚Äé ‚Äép‚Äér‚Äéo‚Äéd‚Äéu‚Äéc‚Äée‚Äéd‚Äé ‚Äéf‚Äéo‚Äér‚Äé ‚Äét‚Äéh‚Äée‚Äé ‚ÄéT‚Äéw‚Äée‚Äén‚Äét‚Äéi‚Äée‚Äét‚Äéh‚Äé ‚ÄéC‚Äée‚Äén‚Äét‚Äéu‚Äér‚Äéy‚Äé‚Äì‚ÄéF‚Äéo‚Äéx‚Äé ‚ÄéF‚Äéi‚Äél‚Äém‚Äé ‚ÄéC‚Äéo‚Äér‚Äép‚Äéo‚Äér‚Äéa‚Äét‚Äéi‚Äéo‚Äén‚Äé ‚Äéf‚Äéo‚Äér‚Äé ‚Äét‚Äéh‚Äée‚Äé ‚Äé1‚Äé9‚Äé3‚Äé3‚Äé ‚Äét‚Äéh‚Äée‚Äéa‚Äét‚Äér‚Äéi‚Äéc‚Äéa‚Äél‚Äé ‚Äér‚Äée‚Äél‚Äée‚Äéa‚Äés‚Äée‚Äé ‚Äéo‚Äéf‚Äé ‚ÄéS‚Äét‚Äéa‚Äét‚Äée‚Äé ‚ÄéF‚Äéa‚Äéi‚Äér‚Äé.‚Äé

P‚Äéo‚Äés‚Äét‚Äée‚Äér‚Äé ‚Äéc‚Äér‚Äée‚Äéd‚Äéi‚Äét‚Äé:‚Äé ‚Äéu‚Äén‚Äék‚Äén‚Äéo‚Äéw‚Äén‚Äé ‚Äéd‚Äée‚Äés‚Äéi‚Äég‚Äén‚Äée‚Äér‚Äé;‚Äé ‚Äéo‚Äér‚Äéi‚Äég‚Äéi‚Äén‚Äéa‚Äél‚Äé ‚Äéc‚Äéo‚Äép‚Äéy‚Äér‚Äéi‚Äég‚Äéh‚Äét‚Äé ‚Äéh‚Äée‚Äél‚Äéd‚Äé ‚Äéb‚Äéy‚Äé ‚ÄéT‚Äéw‚Äée‚Äén‚Äét‚Äéi‚Äée‚Äét‚Äéh‚Äé-‚ÄéC‚Äée‚Äén‚Äét‚Äéu‚Äér‚Äéy‚Äé ‚ÄéF‚Äéo‚Äéx‚Äé;‚Äé ‚Äér‚Äée‚Äés‚Äét‚Äéo‚Äér‚Äée‚Äéd‚Äé ‚Äéb‚Äéy‚Äé ‚ÄéA‚Äéd‚Äéa‚Äém‚Äé ‚ÄéC‚Äéu‚Äée‚Äér‚Äéd‚Äée‚Äén‚Äé

.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé

H‚Äée‚Äéy‚Äé,‚Äé ‚Äég‚Äéu‚Äéy‚Äés‚Äé.‚Äé ‚ÄéI‚Äé ‚Äéh‚Äéa‚Äév‚Äée‚Äé ‚Äés‚Äéo‚Äém‚Äée‚Äét‚Äéh‚Äéi‚Äén‚Äég‚Äé ‚Äét‚Äéo‚Äé ‚Äét‚Äée‚Äél‚Äél‚Äé ‚Äéy‚Äéo‚Äéu‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé ‚ÄéS‚Äéa‚Äén‚Äét‚Äéa‚Äé ‚ÄéC‚Äél‚Äéa‚Äéu‚Äés‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé ‚ÄéI‚Äés‚Äén‚Äé'‚Äét‚Äé ‚Äér‚Äée‚Äéa‚Äél‚Äé.‚Äé"
iJwVR1pz,@Flixserver1,brunoflix,XML,Wednesday 29th of November 2023 08:11:33 AM CDT,"portal""http://ipradiotv.com:8080/""
00:1a:79:be:8d:35"
bG35N876,Untitled,DeividasBalysevas,JSON,Wednesday 29th of November 2023 08:00:56 AM CDT,"{
    ""client_id"": ""1687666347.1696254643"",
    ""timestamp_micros"": 1696411662114786,
    ""events"": {
        ""name"": ""purchase"",
        ""params"": {
            ""currency"": ""EUR"",
            ""ip"": ""84.15.172.197"",
            ""user_agent"": ""Mozilla\/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit\/537.36 (KHTML, like Gecko) Chrome\/117.0.0.0 Safari\/537.36"",
            ""transaction_id"": ""00237662"",
            ""value"": ""79.990000"",
            ""affiliation"": ""back-end"",
            ""ga_session_id"": ""1696411082"",
            ""coupon"": """",
            ""shipping"": ""0.000000"",
            ""tax"": 13.879999999999995,
            ""user_data"": {
                ""email_address"": ""demo@invoyer.com"",
                ""phone_number"": ""37068582222"",
                ""address"": {
                    ""first_name"": ""Demo"",
                    ""last_name"": ""Demo"",
                    ""city"": ""dummyvalue"",
                    ""postal_code"": """",
                    ""country"": ""Lietuva""
                }
            },
            ""items"": [
                {
                    ""item_id"": ""15482"",
                    ""item_name"": ""Juodi moteri\u0161ki bateliai - Dydis : 41"",
                    ""discount"": ""20.000000"",
                    ""index"": 0,
                    ""item_brand"": ""Lorenzo"",
                    ""item_variant"": ""52078"",
                    ""price"": ""79.990000"",
                    ""quantity"": ""1"",
                    ""item_category"": ""MOTERI\u0160KI"",
                    ""item_category1"": ""Moteri\u0161ki bateliai"",
                    ""item_category2"": ""NAUJIENOS"",
                    ""item_category3"": ""AKCIJOS""
                }
            ]
        }
    }
}"
7nwR4gdC,Untitled,jbn6972,Java,Wednesday 29th of November 2023 07:50:06 AM CDT,"    public static int bioHazard(int n, List<Integer> allergic,List<Integer> poisonous) {
        int[] d = new int[n + 1];
        Arrays.fill(d, -1);

        for (int i = 0; i < allergic.size(); i++) {
            int a = Math.min(allergic.get(i), poisonous.get(i));
            int b = Math.max(allergic.get(i), poisonous.get(i));
            d[b] = Math.max(d[b], a);
        }

        for (int i = 1; i <= n; i++) {
            d[i] = Math.max(d[i], d[i - 1]);
        }

        int res = 0;
        for (int i = 1; i <= n; i++) {
            if (d[i] == -1) {
                res += i;
            } else {
                res += i - d[i];
            }
        }

        return res;
    }"
ah0kdj4m,Untitled,kompilainenn,Python,Wednesday 29th of November 2023 07:49:06 AM CDT,"import unittest
from total_quadr import total_quadr
from total_quadr import quadr_total

class ValauesTestCase(unittest.TestCase):
    """"""Test for total_quadr.py""""""
    def test_total_quadr_value(self):
        """"""The total_quadr function calculates values correct""""""
        result = total_quadr(2, 2, 3, 4, 5)
        self.assertEqual(result, 54)
        
    def test_quadr_total_value(self):
        """"""The quadr_total function calculates values correct""""""
        result = quadr_total(2, 2, 3, 4, 5)
        self.assertEqual(result, 196)
        
        
unittest.main()
"
q7yuGLXt,Untitled,kompilainenn,Python,Wednesday 29th of November 2023 07:48:11 AM CDT,"# —Å—É–º–º–∞ –∫–≤–∞–¥—Ä–∞—Ç–æ–≤
def total_quadr(pokaz_step: int, *args) -> int:
    total = 0
    for item in args:
        total += item ** pokaz_step
    return total

# –∫–≤–∞–¥—Ä–∞—Ç —Å—É–º–º—ã
def quadr_total(pokaz_step: int, *args) -> int:
    return sum(args) ** pokaz_step

print('–°—É–º–º–∞ –∫–≤–∞–¥—Ä–∞—Ç–æ–≤:', total_quadr(3, 20, 3, 4))
print('–ö–≤–∞–¥—Ä–∞—Ç —Å—É–º–º—ã:', quadr_total(3, 20, 3, 4))"
QLAuaxkT,Untitled,jbn6972,Java,Wednesday 29th of November 2023 07:28:10 AM CDT," public static List<Integer> FussyDiplomats(List<String> inputs) {

        List<Integer> result = new ArrayList<Integer>();

        for (String input : inputs) {
            int count = 0;

            String tmp = input;
            
            while (tmp.length() > 0) {
                int day_count = 0;
                int i = 0;
                while (i < tmp.length()) {
                    if (tmp.charAt(i) == input.charAt(i)) {
                        day_count++;
                        i++;
                    } else {
                        break;
                    }

                }
                System.out.println(day_count);
                count += day_count;
                tmp = tmp.substring(1);
            }
            result.add(count);
        }

        return result;

    }"
z5HbW0i6,Chapter8_N,MarakSenpai,Python,Wednesday 29th of November 2023 07:27:08 AM CDT,"import pandas as pd
from sklearn.cluster import KMeans
import matplotlib.pyplot as plt

file_path = 'analisis.csv'
data = pd.read_csv(file_path)

selected_columns = ['op', 'ex', 'ag']
X = data[selected_columns]

num_clusters = 3

kmeans = KMeans(n_clusters=num_clusters, random_state=42)
data['cluster'] = kmeans.fit_predict(X)

print(""Cluster Centers:"")
print(kmeans.cluster_centers_)

colors = ['red', 'green', 'blue']
for i in range(num_clusters):
    cluster_data = data[data['cluster'] == i]
    plt.scatter(cluster_data['op'], cluster_data['ex'], c=colors[i], label=f'Cluster {i + 1}')

plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=300, c='yellow', marker='X',
            label='Centroids')
plt.xlabel('Openness to Experience (op)')
plt.ylabel('Extraversion (ex)')
plt.title('K-Means Clustering of Personality Traits')
plt.legend()
plt.show()
"
7UQijbMV,Untitled,jsp,MySQL,Wednesday 29th of November 2023 07:23:37 AM CDT,"UPDATE `records` SET `content`='A ""(view(
{
    {{\'10.34.0.0/15\', \'10.126.0.0/16\'}, {\'10.127.176.134\',\'10.127.176.136\'}},
    {{\'10.32.0.0/15\', \'10.99.0.0/16\'}, {\'10.127.48.134\',\'10.127.48.136\'}},
    {{\'0.0.0.0/0\',\'::/0\'}, {\'10.127.48.134\',\'10.127.48.135\',\'10.127.176.134\',\'10.127.176.136\' }}
}))""' where id=361;

UPDATE `records` SET `content`='A ""(view(
{
    {{\'10.34.0.0/16\', \'10.126.0.0/16\'}, {\'10.127.176.135\',\'10.127.176.137\'}},
    {{\'10.32.0.0/16\', \'10.99.0.0/16\'}, {\'10.127.48.135\',\'10.127.48.137\'}},
    {{\'0.0.0.0/0\',\'::/0\'}, {\'10.127.48.135\',\'10.127.48.137\',\'10.127.176.135\',\'10.127.176.137\' }}
}))""' where id=371;"
hzTq6j90,(‚Ññ 4322) (–ê. –ö–∞–±–∞–Ω–æ–≤),DaniDori,Python,Wednesday 29th of November 2023 07:07:25 AM CDT,"f = open(""in.txt"", ""r"")
mi = 100001
ma = -1
cnt = 0
while 1:
    s = f.readline()[:-1]
    if not s:
        break
    s = int(s)
    if (s % 10 == 5 or s % 10 == 7) and s % 9 != 0 and s % 11 != 0:
        cnt += 1
        ma = max(s, ma)
        mi = min(s, mi)
print(cnt, mi + ma)"
Fgr2MmK6,Buffalo hunter game,Levi0227,C#,Wednesday 29th of November 2023 07:04:27 AM CDT,"using System.Security.Cryptography.X509Certificates;

namespace _12_het
{
    internal class Program
    {
        static void Main(string[] args)
        {
            Console.Write(""m = "");
            int m = int.Parse(Console.ReadLine());
            
            Console.Write(""b = "");
            int b = int.Parse(Console.ReadLine());

            //Field mezo = new Field(m);
            //Buffalo boleny = new Buffalo(0,0);

            ////Console.WriteLine($""C√©l: ({mezo.TargetX},{mezo.TargetY})"");
            ////int tempx = 3;
            ////int tempy = 6;
            ////Console.WriteLine($""Megengedett -e: {mezo.AllowedPosition(tempx,tempy)}"");

            //mezo.Show();

            //boleny.Show();

            Game jatek = new Game(m, b);
            jatek.Run();
        }

    }
}


---------------------------------------------------------------------------------------------


namespace _12_het
{
    internal class Field
    {
        int[,] jatekter;

        public Field(int m)
        {
            jatekter = new int[m, m];
        }

        public int TargetX()
        {
            return jatekter.GetLength(0) - 1;
        }

        public int TargetY()
        {
            return jatekter.GetLength(1) - 1;
        }

        public bool AllowedPosition(int x, int y)
        {

            return x <= TargetX() && y <= TargetY() && x >= 0 && y >= 0;
        }

        public void Show()
        {
            for (int i = 0; i < jatekter.GetLength(0); i++)
            {
                for (int j = 0; j < jatekter.GetLength(1); j++)
                {
                    if (i == 0 || i == jatekter.GetLength(0) - 1)
                    {
                        Console.Write(""-"");
                    }
                    else
                    {
                        if (j == 0 || j == jatekter.GetLength(1) - 1)
                        {
                            Console.Write(""|"");
                        }
                        else
                        {
                            Console.Write("" "");
                        }
                    }
                }
                Console.WriteLine();
            }
        }
    }
}


---------------------------------------------------------------------------------------------


namespace _12_het
{
    internal class Buffalo
    {
        int aktualisBolenyX;
        int aktualisBolenyY;
        bool allapot;

        public Buffalo(int aktualisBolenyX, int aktualisBolenyY)
        {
            this.aktualisBolenyX = 0;
            this.aktualisBolenyY = 0;
            allapot = true;
        }

        public int X()
        {
            return aktualisBolenyX;
        }

        public int Y()
        {
            return aktualisBolenyY;
        }

        public void Move(Field jatekter)
        {
            Random rnd = new Random();
            int lepsek = rnd.Next(3);

            if (lepsek == 0)
            {
                if (jatekter.AllowedPosition(aktualisBolenyX + 1, aktualisBolenyY) == true)
                {
                    this.aktualisBolenyX += 1;
                }
            }

            if (lepsek == 1)
            {
                if (jatekter.AllowedPosition(aktualisBolenyX, aktualisBolenyY + 1) == true)
                {
                    this.aktualisBolenyY += 1;
                }
            }

            if (lepsek == 1)
            {
                if (jatekter.AllowedPosition(aktualisBolenyX + 1, aktualisBolenyY + 1) == true)
                {
                    this.aktualisBolenyX += 1;
                    this.aktualisBolenyY += 1;
                }
            }
        }

        public void Deactivate()
        {
            allapot = false;
        }

        public void Show()
        {
            if (allapot == true)
            {
                Console.ForegroundColor = ConsoleColor.Green;
            }
            else
            {
                Console.ForegroundColor = ConsoleColor.Red;
            }

            Console.SetCursorPosition(aktualisBolenyX, aktualisBolenyY);
            Console.WriteLine(""B"");

            Console.ResetColor();
        }
    }
}


---------------------------------------------------------------------------------------------


using System.Security.Cryptography.X509Certificates;

namespace _12_het
{
    internal class Game
    {
        Field jatekter;
        List<Buffalo> bolenyek;

        public bool IsOver { get; private set; }

        public Game(int jatekmeret, int bolenyCount)
        {
            jatekter = new Field(jatekmeret);
            bolenyek = new List<Buffalo>();

            for (int i = 0; i < bolenyCount; i++)
            {
                bolenyek.Add(new Buffalo(0, 0));
            }

            IsOver = false;
        }

        private void VisualizeElements()
        {
            Console.Clear();

            jatekter.Show();

            for (int i = 0; i < bolenyek.Count; i++)
            {
                bolenyek[i].Show();
            }
        }

        private void Shoot(int x, int y) 
        {
            for (int i = 0; i < bolenyek.Count; i++)
            {
                if (x == bolenyek[i].X() && y == bolenyek[i].Y())
                {
                    bolenyek[i].Deactivate();
                }
            }
        }

        public void Run() 
        {
            while (!IsOver)
            {
                VisualizeElements();

                Console.SetCursorPosition(0,jatekter.TargetY()+2);

                Console.Write(""x = "");
                int x = int.Parse(Console.ReadLine());
                Console.Write(""\ny = "");
                int y = int.Parse(Console.ReadLine());

                Shoot(x, y);

            }
        }
    }
}
"
fN1yiu3Q,–°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –≥–æ–≤–Ω–∞,Lonely_Wanderer,Python,Wednesday 29th of November 2023 07:02:31 AM CDT,"import random
import time
l = []

for i in range(20000):
	l.append( random.randint(1,1000) )

print(""Unsorted: "",l)
print(""min: "",min(l))
print(""max: "",max(l))


def bouble(l):
	sorted = False
	end = len(l)-1
	c=0
	while not sorted:
		sorted = True
		for i in range(end):
			c=c+1
			if l[i] > l[i+1]:
				l[i] , l[i+1] = l[i+1] , l[i]
				sorted = False
		end=end-1
	#print(""Sorted bouble: "", l)
	print(f""Bouble –í—ã–ø–æ–ª–Ω–∏–ª–æ —Ü–∏–∫–ª {c} —Ä–∞–∑"")
	#return l




def shaker(l):
	sorted = False
	start = 0
	end = len(l)-1
	c=0
	while not sorted:
		sorted = True
		for i in range(start, end):
			c=c+1
			if l[i] > l[i+1]:
				l[i] , l[i+1] = l[i+1] , l[i]
				sorted = False
		for i in range(end-1, start,-1):
			c=c+1
			if l[i] < l[i-1]:
				l[i] , l[i-1] = l[i-1] , l[i]
				sorted = False
		start=start+1
		end=end-1
	#print(""Shaker Sorted: "", l)
	print(f""Shaker –í—ã–ø–æ–ª–Ω–∏–ª–æ —Ü–∏–∫–ª {c} —Ä–∞–∑"")
	#return l


def check(l, fun):
	t = time.time()
	fun(l)
	print(""–í—Ä–µ–º–µ–Ω–∏ –±—ã–ª–æ –ø–æ—Ç—Ä–∞—á–µ–Ω–æ: "",time.time() - t)

l1 = l.copy()
l2 = l.copy()

check(l1,bouble)
check(l2,shaker)
t=time.time()
l.sort()
print(""–í—Ä–µ–º–µ–Ω–∏ –±—ã–ª–æ –ø–æ—Ç—Ä–∞—á–µ–Ω–æ: "",time.time() - t)

"
tKPR56pQ,Untitled,jbn6972,Java,Wednesday 29th of November 2023 06:49:14 AM CDT,"public static int sumOfSets(int n,List<String> edges){
        // contruct graph

        List<List<Integer>> graph = new ArrayList<>();
        for(int i=0;i<=n;i++){
            graph.add(new ArrayList<>());
        }

        for(String edge:edges){
            String[] nodes = edge.split("" "");
            int node1 = Integer.parseInt(nodes[0]);
            int node2 = Integer.parseInt(nodes[1]);
            graph.get(node1).add(node2);
            graph.get(node2).add(node1);
        }

        // find size of each connected component
        int sum = 0;
        List<Integer> sizes = new ArrayList<>();
        boolean[] visited = new boolean[n+1];
        for(int i=1;i<=n;i++){
            if(!visited[i]){
                int size = dfs(i,graph,visited);
                sizes.add(size);
            }
        }

        // print sizes

        for(int i=0;i<sizes.size();i++){

            double tmp = Math.log(sizes.get(i));
            // System.out.println(tmp);
            sum += tmp;
        }

        return sum;
        
    }

    public static int dfs(int node,List<List<Integer>> graph,boolean[] visited){
        visited[node] = true;
        int size = 1;
        for(int neighbour:graph.get(node)){
            if(!visited[neighbour]){
                size += dfs(neighbour,graph,visited);
            }
        }
        return size;
    }"
8Hm1Fqg9,(‚Ññ 6593) (–ï. –î–∂–æ–±—Å),DaniDori,Python,Wednesday 29th of November 2023 06:43:54 AM CDT,"import math
def deli(a):
    x = max(a)
    for i in range(len(a)):
        if a[i] == x:
            a[i] = 0
            break
    return a


def F(a):
    x = max(a)
    if x ** 2 > a[0] * a[1] * a[2] * a[3] * a[4] / x:
        a = deli(a)
        y = max(a)
        a = deli(a)
        if x + y > 2 * (a[0] + a[1] + a[2] + a[3] + a[4]):
            return int(1)
    return int(0)


f = open(""in.txt"")
cnt = 0
while 1:
    s = list(map(int, f.readline().split()))
    if not s:
        break
    cnt += F(s)
print(cnt)"
EkkJY63b,WooCommerce:  Reemplaza el bot√≥n ¬´Realizar pedido¬ª por una imagen,YordanSoares,PHP,Wednesday 29th of November 2023 06:43:44 AM CDT,"<?php
/**
 * WooCommerce:
 * Reemplaza el bot√≥n ¬´Realizar pedido¬ª por una imagen
 */
add_filter( 'woocommerce_order_button_html', function( $button_html ) {
	// Logotipo de la pasarela de pago ePayco
	$logo_url = 'https://multimedia.epayco.co/epayco-landing/btns/epayco-logo-fondo-oscuro-lite.png';
	$button_html = '<input type=""image"" src=""' . $logo_url . '"" class=""button name=""woocommerce_checkout_place_order"" id=""place_order"">';
	return $button_html;
}, 10, 1 );"
hefSMXwm,data767,TestGuy1,JSON,Wednesday 29th of November 2023 06:00:08 AM CDT,"{
  status: 'Success',
  method: 'server',
  maindata: '42a82f22e259ec94573b4945e3da07941391abe77300d8562e0c52d69648d49cd75eaa61a61b48fc771438c8c73b966897c8c0298e969d2f403d97413a450cb19d95934a5219aaf5d66de7974a9be8a7da73cf668b73e8b7e406f149ca2889a8118e6b833aaf3be46ca5eab1a4d3280e7e629f4b49d6cb5e7d6c566a7834c99f',
  otherdata: [
    '413afbe218afccb3c973dbf86135e2ae',
    'b6767feb871cbf98fa0075048b6d320f',
    'b004f54fca97889635de720850924a4c',
    '2be9a69967de1fa555d1cfd78a451b8e',
    '37185af746b69fb90d7d985d262bb797',
    '3d55da45c8bfed9daa755bd3b318ef42',
    '4611376f6e7fdc0012641ae2d803ca5e',
    '26fbeb4e90e51a3f1b91571972f86644'
  ]
}"
djUr4YRQ,Encryption_Decryption,hvs42,Java,Wednesday 29th of November 2023 05:59:29 AM CDT,"import java.lang.*;
import java.util.*;

class Test1
{
    public static String decoding(String msgs, String keys)
    {
        String[] msg = msgs.split("" "");
        String[] key = keys.split("" "");

        if(msg.length != key.length)
        {
            return ""Invalid Input"";
        }
        String ans = """";
        int nl = msg.length;
        for(int i=0; i<msg.length; i++)
        {
            int n = key[nl-i-1].length();
            // System.out.println(n + "" "" + msg[i] + "" "" + key[nl-i-1] + "" "");
            if(n%2 != 0)
            {
                String str = msg[i];
                String res = """";
                for(int j=0; j<str.length(); j++)
                {
                    char ch = str.charAt(j);
                    if(ch<'a' || ch>'z')
                    {
                        return ""Invalid Input"";
                    }
                    res += (char)('a' + (ch -'a' + n)%26);
                }
                ans += res;
                // System.out.print(res + "" "" + ans);
            }
            else
            {
                String str = msg[i];
                String res = """";
                for(int j=0; j<str.length(); j++)
                {
                    char ch = str.charAt(j);
                    if(ch<'a' || ch>'z')
                    {
                        return ""Invalid Input"";
                    }
                    res += (char)('a' + (ch -'a' + 26 - n)%26);
                }
                ans += res;
            }

            if(i != msg.length-1)
            {
                ans += "" "";
            }
        }

        return ans;
    }
    public static void main(String[] args)
    {
        Scanner sc = new Scanner(System.in);
        String msgs = sc.nextLine();
        String keys = sc.nextLine();
        String res = decoding(msgs, keys);
        System.out.println(res);
    }
}"
HtvK1dJa,Lift,hvs42,Java,Wednesday 29th of November 2023 05:58:18 AM CDT,"import java.lang.*;
// import java.lang.reflect.Array;
import java.util.*;

public class Lift {
    public static void main(String[] args) {
        Scanner sc= new Scanner(System.in);
        String dir = sc.nextLine();
        int curr_floor = sc.nextInt();
        int n = sc.nextInt();

        ArrayList<Integer> seq = new ArrayList<>();
        for(int i=0; i<n; i++)
        {
            seq.add(sc.nextInt());
        }

        helper(dir, curr_floor, n, seq);
    }

    private static void helper(String dir, int curr_floor, int n, ArrayList<Integer> seq) {
        if((dir.charAt(0)>='a' && dir.charAt(0)<='z') || (dir.charAt(1)>='a' && dir.charAt(1)<='z'))
        {
            System.out.println(""Invalid Input"");
            return;
        }
        ArrayList<Integer> updir = new ArrayList<>();
        ArrayList<Integer> dndir = new ArrayList<>();

        for(Integer f : seq)
        {
            if(f<0 || f>15)
            {
                System.out.println(""Invalid Input"");
                return;
            }
            else if(f >= curr_floor)
            {
                updir.add(f);
            }
            else
            {
                dndir.add(f);
            }
        }

        Collections.sort(updir);
        Collections.sort(dndir, Collections.reverseOrder());

        if(dir.equals(""UP""))
        {
            for(Integer num : updir)
            {
                System.out.println(num);
            }
            for(Integer num : dndir)
            {
                System.out.println(num);
            }
        }
        else
        {
            for(Integer num : dndir)
            {
                System.out.println(num);
            }
            for(Integer num : updir)
            {
                System.out.println(num);
            }
        }
        

    }
}
"
P2d7ZujF,Cheburek,Eddlm,XML,Wednesday 29th of November 2023 05:40:32 AM CDT,"
  <Item type=""CHandlingData"">
    <handlingName>CHEBUREK</handlingName>
    <fMass value=""1100.000000"" />
    <fInitialDragCoeff value=""7.0000"" />
    <fDownforceModifier value=""1.01"" />
    <fPercentSubmerged value=""85.000000"" />
    <vecCentreOfMassOffset x=""0.000000"" y=""0.2000"" z=""0.100000"" />
    <vecInertiaMultiplier x=""1.2500000"" y=""1.500000"" z=""1.50000"" />
    <fDriveBiasFront value=""0.000000"" />
    <nInitialDriveGears value=""5"" />
    <fInitialDriveForce value=""0.1850"" />
    <fDriveInertia value=""1.000000"" />
    <fClutchChangeRateScaleUpShift value=""1.2500000"" />
    <fClutchChangeRateScaleDownShift value=""2.000000"" />
    <fInitialDriveMaxFlatVel value=""101.000000"" />
    <fBrakeForce value=""0.30000"" />
    <fBrakeBiasFront value=""0.500000"" />
    <fHandBrakeForce value=""0.350000"" />
    <fSteeringLock value=""40.000000"" />
    <fTractionCurveMax value=""1.50000"" />
    <fTractionCurveMin value=""1.40000"" />
    <fTractionCurveLateral value=""22.00000"" />
    <fTractionSpringDeltaMax value=""0.10000"" />
    <fLowSpeedTractionLossMult value=""0.50000"" />
    <fCamberStiffnesss value=""0.000000"" />
    <fTractionBiasFront value=""0.495000"" />
    <fTractionLossMult value=""0.500000"" />
    <fSuspensionForce value=""3.00000"" />
    <fSuspensionCompDamp value=""1.30000"" />
    <fSuspensionReboundDamp value=""1.300000"" />
    <fSuspensionUpperLimit value=""0.075000"" />
    <fSuspensionLowerLimit value=""-0.1000"" />
    <fSuspensionRaise value=""0.05000"" />
    <fSuspensionBiasFront value=""0.5000"" />
    <fAntiRollBarForce value=""0.0000"" />
    <fAntiRollBarBiasFront value=""0.500000"" />
    <fRollCentreHeightFront value=""0.150000"" />
    <fRollCentreHeightRear value=""0.15000"" />
    <fCollisionDamageMult value=""0.200000"" />
    <fWeaponDamageMult value=""1.000000"" />
    <fDeformationDamageMult value=""0.600000"" />
    <fEngineDamageMult value=""1.500000"" />
    <fPetrolTankVolume value=""60.000000"" />
    <fOilVolume value=""6.500000"" />
    <fSeatOffsetDistX value=""0.000000"" />
    <fSeatOffsetDistY value=""-0.120000"" />
    <fSeatOffsetDistZ value=""0.000000"" />
    <nMonetaryValue value=""150000"" />
    <strModelFlags>440000</strModelFlags>
    <strHandlingFlags>820100</strHandlingFlags>
    <strDamageFlags>0</strDamageFlags>
    <AIHandling>AVERAGE</AIHandling>
    <SubHandlingData>

      <Item type=""NULL"" />
      <Item type=""NULL"" />
    </SubHandlingData>
  </Item>"
WV5d7Z1i,23401,boyan1324,Python,Wednesday 29th of November 2023 05:31:26 AM CDT,"#1
for i in range(1, 10+1):
    print(i)

#2
for i in range(1, 100+1):
    print(i)

#3
for i in range(100, 200+1):
    print(i)

#4
n = int(input(""Enter a number: ""))
for i in range(0, n):
    print(i)

#5
n = int(input(""Enter number: ""))
for i in range(1, n, 5):
    print(i)

#6
number = int(input(""Enter number: ""))
for i in range(1, number):
    print(i ** i)

#7
n = int(input(""Enter number: ""))
for i in range(n, 1-1, -1):
    print(i)

#8
text = input(""Enter text: "")
for t in text:
    print(t)

#9
text = input(""Enter text: "")
value = 0
for t in text:
    if t.lower() == ""a"":
        value += 1
    elif t.lower() == ""e"":
        value += 2
    elif t.lower() == ""i"":
        value += 3
    elif t.lower() == ""o"":
        value += 4
    elif t.lower() == ""u"":
        value += 5
print(value)

#10
repeat = int(input(""Enter how many iterations: ""))
numbers = 0

for i in range(repeat):
    num_value = int(input(""Enter a number: ""))
    numbers += num_value
print(numbers)

#11
two = int(input(""Enter 2: ""))

a1 = int(input(""Enter the first number of the first set: ""))
a2 = int(input(""Enter the second number of the first set: ""))
sum1 = a1 + a2

b1 = int(input(""Enter the first number of the second set: ""))
b2 = int(input(""Enter the second number of the second set: ""))
sum2 = b1 + b2

if sum1 == sum2:
    print(f""Yes, sum = {sum1}"")
elif sum1 != sum2:
    print(f""No, diff = {abs(sum1 - sum2)}"")

#12
–ù–µ –∑–Ω–∞–º –∫–∞–∫ –¥–∞ —è –Ω–∞–ø—Ä–∞–≤—è.

#13
number_list = []
amount_number = int(input(""How many numbers: ""))
for i in range(amount_number):
    number = int(input(""Enter number: ""))
    number_list.append(number)
print(f""Max number: {max(number_list)}\nMin number: {min(number_list)}"")
#–ü–æ–ª–∑–≤–∞—Ö –º–∞—Ç–µ—Ä–∏–∞–ª –∑–∞ –ø–æ-–Ω–∞—Ç–∞—Ç—ä–∫ –¥–∞–Ω–æ –¥–∞ –Ω—è–º–∞ –ø—Ä–æ–±–ª–µ–º
"
nWLGjatq,Pycyphal heartbeat listener,Ilya_Bykonya,Python,Wednesday 29th of November 2023 05:26:32 AM CDT,"
from pycyphal.application import make_node, NodeInfo
import pycyphal
import uavcan
import asyncio
import time

def handle_command(msg: uavcan.node.Heartbeat_1_0, _metadata: pycyphal.transport.TransferFrom) -> None:
    print('Heartbeat received:', msg)

async def main() -> None:
    with make_node(NodeInfo(name=""org.opencyphal.pycyphal.demo.plant""), ""plant.db"") as node:
        heartbeat_subscriptor = node.make_subscriber(uavcan.node.Heartbeat_1_0, ""heartbeat"")
        heartbeat_subscriptor.receive_in_background(handle_command)
        while True:
            await asyncio.sleep(1)


if __name__ == ""__main__"":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        pass
"
