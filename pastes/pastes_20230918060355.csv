id,title,username,language,date,content
5MSnYsLe,KeePass Key File,AnkitVarma,XML,Monday 18th of September 2023 12:12:32 AM CDT,"<?xml version=""1.0"" encoding=""utf-8""?>
<KeyFile>
	<Meta>
		<Version>2.0</Version>
	</Meta>
	<Key>
		<Data Hash=""2EFD86C6"">
			1735E576 153D3B46 BCFB053A 3318AA73
			81F6BEA4 5FD508CE 493EC251 580C51BD
		</Data>
	</Key>
</KeyFile>"
qeQZ4uqs,Log ISO Bit 75 BJB 18/09/2023 12:00,Abikayusri19,Bash,Monday 18th of September 2023 12:06:05 AM CDT,"12:01:32.886 [http-nio-9872-exec-2] DEBUG i.b.n.e.i.e.b.p.s.c.BjbHtcHsmConfig - ===========================request begin================================================
12:01:32.886 [http-nio-9872-exec-2] DEBUG i.b.n.e.i.e.b.p.s.c.BjbHtcHsmConfig - URI         : http://bjb-hsm/bjb/hsm/pin
12:01:32.886 [http-nio-9872-exec-2] DEBUG i.b.n.e.i.e.b.p.s.c.BjbHtcHsmConfig - Headers     : [Accept:""application/json, application/*+json"", Content-Type:""application/json"", Content-Length:""88""]
12:01:32.886 [http-nio-9872-exec-2] DEBUG i.b.n.e.i.e.b.p.s.c.BjbHtcHsmConfig - Request body: {""terminalId"":""70040001"",""pinUnderTpk"":""AA5F0C02809ABE27"",""cardNo"":""622011020020638074""}
12:01:32.886 [http-nio-9872-exec-2] DEBUG i.b.n.e.i.e.b.p.s.c.BjbHtcHsmConfig - ==========================request end================================================
12:01:32.909 [http-nio-9872-exec-2] DEBUG i.b.n.e.i.e.b.p.s.c.BjbHtcHsmConfig - ============================response begin==========================================
12:01:32.909 [http-nio-9872-exec-2] DEBUG i.b.n.e.i.e.b.p.s.c.BjbHtcHsmConfig - Status code  : 200 OK
12:01:32.909 [http-nio-9872-exec-2] DEBUG i.b.n.e.i.e.b.p.s.c.BjbHtcHsmConfig - Status text  : 
12:01:32.909 [http-nio-9872-exec-2] DEBUG i.b.n.e.i.e.b.p.s.c.BjbHtcHsmConfig - Response body: {""pinBlock"":""AD2328F44C34CA75""}
12:01:32.909 [http-nio-9872-exec-2] DEBUG i.b.n.e.i.e.b.p.s.c.BjbHtcHsmConfig - =======================response end=================================================
12:01:32.912 [http-nio-9872-exec-2] DEBUG i.b.n.e.i.e.b.p.s.BjbTrxServiceImpl - Updated bitmap: {32=110, 33=000110, 2=622011020020638074, 3=319900, 35=622011020020638074D2802221, 4=0, 37=000000209352, 7=0918050132, 41=70040001, 42=700400010001, 43=Menara BCA Lt 39      KABUPATEN TOLIJBID, 11=209352, 12=120132, 13=0918, 14=2802, 15=0919, 49=360, 18=6012, 52=AD2328F44C34CA75, 22=051, 90=020020935209180501320000000011000000000110}
12:01:32.914 [http-nio-9872-exec-2] DEBUG i.b.n.c.c.c.s.RedisBackedCacheService - puts key: /j8583_000000209352, object: {""dataB64"":""MDIwMEYyM0U0NDAxQThFMDkwMDAwMDAwMDA0MDAwMDAwMDIwMTg2MjIwMTEwMjAwMjA2MzgwNzQzMTk5MDAwMDAwMDAwMDAwMDAwOTE4MDUwMTMyMjA5MzUyMTIwMTMyMDkxODI4MDIwOTE5NjAxMjA1MTAzMTEwMDYwMDAxMTAyNjYyMjAxMTAyMDAyMDYzODA3NEQyODAyMjIxMDAwMDAwMjA5MzUyNzAwNDAwMDE3MDA0MDAwMTAwMDEgICBNZW5hcmEgQkNBIEx0IDM5ICAgICAgS0FCVVBBVEVOIFRPTElKQklEMzYwQUQyMzI4RjQ0QzM0Q0E3NTAyMDAyMDkzNTIwOTE4MDUwMTMyMDAwMDAwMDAxMTAwMDAwMDAwMDExMDAyMDAwMDAyMDkzNTIwMDAwMjA5MzUy"",""binaryHeader"":false,""isoHeader"":null,""binaryHeaderB64"":null}, timeout: 10, timeunit: MINUTES
12:01:32.914 [nioEventLoopGroup-5-2] DEBUG i.b.n.e.i.c.CustomIsoLoggingHandler - [id: 0xa36f6e92, L:/10.19.52.7:47100 - R:/10.44.224.145:10608] WRITE: Message: 0200F23E4401A8E0900000000040000000201862201102002063807431990000000000000009180501322093521201320918280209196012051031100600011026622011020020638074D280222100000020935270040001700400010001   Menara BCA Lt 39      KABUPATEN TOLIJBID360AD2328F44C34CA7502002093520918050132000000001100000000011002000002093520000209352
MTI: 0x0200
  2: [LLVAR(18)] = '622011020020638074'
  3: [NUMERIC(6)] = '319900'
  4: [NUMERIC(12)] = '000000000000'
  7: [NUMERIC(10)] = '0918050132'
  11: [NUMERIC(6)] = '209352'
  12: [NUMERIC(6)] = '120132'
  13: [DATE4(4)] = '0918'
  14: [NUMERIC(4)] = '2802'
  15: [NUMERIC(4)] = '0919'
  18: [NUMERIC(4)] = '6012'
  22: [NUMERIC(3)] = '051'
  32: [LLVAR(3)] = '110'
  33: [LLVAR(6)] = '000110'
  35: [LLBCDBIN(26)] = '622011020020638074D2802221'
  37: [NUMERIC(12)] = '000000209352'
  41: [ALPHA(8)] = '70040001'
  42: [ALPHA(15)] = '700400010001   '
  43: [ALPHA(40)] = 'Menara BCA Lt 39      KABUPATEN TOLIJBID'
  49: [NUMERIC(3)] = '360'
  52: [BINARY(8)] = 'AD2328F44C34CA75'
  90: [NUMERIC(42)] = '020020935209180501320000000011000000000110'
  123: [LLLVAR(20)] = '00002093520000209352'
12:01:32.914 [nioEventLoopGroup-5-2] DEBUG i.b.n.e.i.c.CustomIsoLoggingHandler - [id: 0xa36f6e92, L:/10.19.52.7:47100 - R:/10.44.224.145:10608] FLUSH
12:01:32.917 [http-nio-9872-exec-2] DEBUG id.basys.ntt.edc.iso.MbIsoListener - RRN: 209352, Waiting for 70
12:01:33.087 [nioEventLoopGroup-4-3] DEBUG i.b.n.e.i.e.b.i.BJBCollegaJ8583MessageFactory - INCOMING: 3032313037323332303430314141453039303030313836323230313130323030323036333830373433313939303030303030303030303030303030393138303530313332323039333532313230313332303931393035313033313130303630303031313032363632323031313032303032303633383037344432383032323231303030303030323039333532353537303034303030313730303430303031303030312020204d656e61726120424341204c742033392020202020204b414255504154454e20544f4c494a42494433363041443233323846343443333443413735
12:01:33.087 [nioEventLoopGroup-4-3] DEBUG i.b.n.e.i.e.b.i.BJBCollegaJ8583MessageFactory - CUTS: 3032313037323332303430314141453039303030313836323230313130323030323036333830373433313939303030303030303030303030303030393138303530313332323039333532313230313332303931393035313033313130303630303031313032363632323031313032303032303633383037344432383032323231303030303030323039333532353537303034303030313730303430303031303030312020204d656e61726120424341204c742033392020202020204b414255504154454e20544f4c494a42494433363041443233323846343443333443413735
12:01:33.088 [nioEventLoopGroup-5-2] DEBUG i.b.n.e.i.c.CustomIsoLoggingHandler - [id: 0xa36f6e92, L:/10.19.52.7:47100 - R:/10.44.224.145:10608] READ: Message: 021072320401AAE090001862201102002063807431990000000000000009180501322093521201320919051031100600011026622011020020638074D28022210000002093525570040001700400010001   Menara BCA Lt 39      KABUPATEN TOLIJBID360AD2328F44C34CA75
MTI: 0x0210
  2: [LLVAR(18)] = '622011020020638074'
  3: [NUMERIC(6)] = '319900'
  4: [NUMERIC(12)] = '000000000000'
  7: [NUMERIC(10)] = '0918050132'
  11: [NUMERIC(6)] = '209352'
  12: [TIME(6)] = '120132'
  15: [NUMERIC(4)] = '0919'
  22: [NUMERIC(3)] = '051'
  32: [LLVAR(3)] = '110'
  33: [LLVAR(6)] = '000110'
  35: [LLVAR(26)] = '622011020020638074D2802221'
  37: [NUMERIC(12)] = '000000209352'
  39: [ALPHA(2)] = '55'
  41: [ALPHA(8)] = '70040001'
  42: [ALPHA(15)] = '700400010001   '
  43: [ALPHA(40)] = 'Menara BCA Lt 39      KABUPATEN TOLIJBID'
  49: [NUMERIC(3)] = '360'
  52: [BINARY(8)] = 'AD2328F44C34CA75'
12:01:33.088 [nioEventLoopGroup-5-2] DEBUG i.b.n.e.i.c.CustomIsoLoggingHandler - [id: 0xa36f6e92, L:/10.19.52.7:47100 - R:/10.44.224.145:10608] READ COMPLETE
12:01:33.088 [pool-1-thread-70] INFO  i.b.n.e.iso.IsoListenerProcessorImpl - handling 0210, rrn:209352
12:01:33.089 [pool-1-thread-70] DEBUG id.basys.ntt.edc.iso.MbIsoListener - Received response of 209352
12:01:33.092 [http-nio-9872-exec-2] DEBUG i.b.n.e.i.CensorCommonsRequestLoggingFilter - After request [POST /trx, payload={""dataMap"":{""32"":""110"",""33"":""000110"",""2"":""622011020020638074"",""3"":""319900"",""35"":""622011******638074D2802221"",""4"":""0"",""7"":""0918050132"",""41"":""70040001"",""42"":""700400010001"",""43"":""Menara BCA Lt 39      KABUPATEN TOLIJBID"",""12"":""120132"",""13"":""0918"",""14"":""2802"",""15"":""0919"",""49"":""360"",""18"":""6012"",""52"":""AA5F0C02809ABE27"",""22"":""051""},""rc"":null,""rrn"":null,""tracenum"":null,""mti"":512}]
12:01:47.966 [http-nio-9872-exec-3] DEBUG i.b.n.e.i.CensorCommonsRequestLoggingFilter - REQUEST DATA : POST /trx]
12:01:47.967 [http-nio-9872-exec-3] DEBUG i.b.n.e.i.e.b.p.s.BjbTrxServiceImpl - Original bitmap: {32=110, 33=000110, 2=622011020020638074, 3=319900, 35=622011020020638074D2802221, 4=0, 7=0918050147, 41=70040001, 42=700400010001, 43=Menara BCA Lt 39      KABUPATEN TOLIJBID, 12=120147, 13=0918, 14=2802, 15=0919, 49=360, 18=6012, 52=DEF003DA38B653FA, 22=051}
12:01:47.967 [http-nio-9872-exec-3] DEBUG i.b.n.e.i.e.b.p.s.c.BjbHtcHsmConfig - ===========================request begin================================================
12:01:47.967 [http-nio-9872-exec-3] DEBUG i.b.n.e.i.e.b.p.s.c.BjbHtcHsmConfig - URI         : http://bjb-hsm/bjb/hsm/pin
12:01:47.967 [http-nio-9872-exec-3] DEBUG i.b.n.e.i.e.b.p.s.c.BjbHtcHsmConfig - Headers     : [Accept:""application/json, application/*+json"", Content-Type:""application/json"", Content-Length:""88""]
12:01:47.967 [http-nio-9872-exec-3] DEBUG i.b.n.e.i.e.b.p.s.c.BjbHtcHsmConfig - Request body: {""terminalId"":""70040001"",""pinUnderTpk"":""DEF003DA38B653FA"",""cardNo"":""622011020020638074""}
12:01:47.967 [http-nio-9872-exec-3] DEBUG i.b.n.e.i.e.b.p.s.c.BjbHtcHsmConfig - ==========================request end================================================
12:01:47.985 [http-nio-9872-exec-3] DEBUG i.b.n.e.i.e.b.p.s.c.BjbHtcHsmConfig - ============================response begin==========================================
12:01:47.985 [http-nio-9872-exec-3] DEBUG i.b.n.e.i.e.b.p.s.c.BjbHtcHsmConfig - Status code  : 200 OK
12:01:47.985 [http-nio-9872-exec-3] DEBUG i.b.n.e.i.e.b.p.s.c.BjbHtcHsmConfig - Status text  : 
12:01:47.986 [http-nio-9872-exec-3] DEBUG i.b.n.e.i.e.b.p.s.c.BjbHtcHsmConfig - Response body: {""pinBlock"":""28F473B89438F720""}
12:01:47.986 [http-nio-9872-exec-3] DEBUG i.b.n.e.i.e.b.p.s.c.BjbHtcHsmConfig - =======================response end=================================================
12:01:47.987 [http-nio-9872-exec-3] DEBUG i.b.n.e.i.e.b.p.s.BjbTrxServiceImpl - Updated bitmap: {32=110, 33=000110, 2=622011020020638074, 3=319900, 35=622011020020638074D2802221, 4=0, 37=000000209354, 7=0918050147, 41=70040001, 42=700400010001, 43=Menara BCA Lt 39      KABUPATEN TOLIJBID, 11=209354, 12=120147, 13=0918, 14=2802, 15=0919, 49=360, 18=6012, 52=28F473B89438F720, 22=051, 90=020020935409180501470000000011000000000110}
12:01:47.989 [http-nio-9872-exec-3] DEBUG i.b.n.c.c.c.s.RedisBackedCacheService - puts key: /j8583_000000209354, object: {""dataB64"":""MDIwMEYyM0U0NDAxQThFMDkwMDAwMDAwMDA0MDAwMDAwMDIwMTg2MjIwMTEwMjAwMjA2MzgwNzQzMTk5MDAwMDAwMDAwMDAwMDAwOTE4MDUwMTQ3MjA5MzU0MTIwMTQ3MDkxODI4MDIwOTE5NjAxMjA1MTAzMTEwMDYwMDAxMTAyNjYyMjAxMTAyMDAyMDYzODA3NEQyODAyMjIxMDAwMDAwMjA5MzU0NzAwNDAwMDE3MDA0MDAwMTAwMDEgICBNZW5hcmEgQkNBIEx0IDM5ICAgICAgS0FCVVBBVEVOIFRPTElKQklEMzYwMjhGNDczQjg5NDM4RjcyMDAyMDAyMDkzNTQwOTE4MDUwMTQ3MDAwMDAwMDAxMTAwMDAwMDAwMDExMDAyMDAwMDAyMDkzNTQwMDAwMjA5MzU0"",""binaryHeader"":false,""isoHeader"":null,""binaryHeaderB64"":null}, timeout: 10, timeunit: MINUTES
12:01:47.989 [nioEventLoopGroup-5-2] DEBUG i.b.n.e.i.c.CustomIsoLoggingHandler - [id: 0xa36f6e92, L:/10.19.52.7:47100 - R:/10.44.224.145:10608] WRITE: Message: 0200F23E4401A8E0900000000040000000201862201102002063807431990000000000000009180501472093541201470918280209196012051031100600011026622011020020638074D280222100000020935470040001700400010001   Menara BCA Lt 39      KABUPATEN TOLIJBID36028F473B89438F72002002093540918050147000000001100000000011002000002093540000209354
MTI: 0x0200
  2: [LLVAR(18)] = '622011020020638074'
  3: [NUMERIC(6)] = '319900'
  4: [NUMERIC(12)] = '000000000000'
  7: [NUMERIC(10)] = '0918050147'
  11: [NUMERIC(6)] = '209354'
  12: [NUMERIC(6)] = '120147'
  13: [DATE4(4)] = '0918'
  14: [NUMERIC(4)] = '2802'
  15: [NUMERIC(4)] = '0919'
  18: [NUMERIC(4)] = '6012'
  22: [NUMERIC(3)] = '051'
  32: [LLVAR(3)] = '110'
  33: [LLVAR(6)] = '000110'
  35: [LLBCDBIN(26)] = '622011020020638074D2802221'
  37: [NUMERIC(12)] = '000000209354'
  41: [ALPHA(8)] = '70040001'
  42: [ALPHA(15)] = '700400010001   '
  43: [ALPHA(40)] = 'Menara BCA Lt 39      KABUPATEN TOLIJBID'
  49: [NUMERIC(3)] = '360'
  52: [BINARY(8)] = '28F473B89438F720'
  90: [NUMERIC(42)] = '020020935409180501470000000011000000000110'
  123: [LLLVAR(20)] = '00002093540000209354'
12:01:47.989 [nioEventLoopGroup-5-2] DEBUG i.b.n.e.i.c.CustomIsoLoggingHandler - [id: 0xa36f6e92, L:/10.19.52.7:47100 - R:/10.44.224.145:10608] FLUSH
12:01:47.990 [http-nio-9872-exec-3] DEBUG id.basys.ntt.edc.iso.MbIsoListener - RRN: 209354, Waiting for 70
12:01:48.107 [nioEventLoopGroup-4-3] DEBUG i.b.n.e.i.e.b.i.BJBCollegaJ8583MessageFactory - INCOMING: 3032313037323332303430314141453039303030313836323230313130323030323036333830373433313939303030303030303030303030303030393138303530313437323039333534313230313437303931393035313033313130303630303031313032363632323031313032303032303633383037344432383032323231303030303030323039333534353537303034303030313730303430303031303030312020204d656e61726120424341204c742033392020202020204b414255504154454e20544f4c494a42494433363032384634373342383934333846373230
12:01:48.107 [nioEventLoopGroup-4-3] DEBUG i.b.n.e.i.e.b.i.BJBCollegaJ8583MessageFactory - CUTS: 3032313037323332303430314141453039303030313836323230313130323030323036333830373433313939303030303030303030303030303030393138303530313437323039333534313230313437303931393035313033313130303630303031313032363632323031313032303032303633383037344432383032323231303030303030323039333534353537303034303030313730303430303031303030312020204d656e61726120424341204c742033392020202020204b414255504154454e20544f4c494a42494433363032384634373342383934333846373230
12:01:48.107 [nioEventLoopGroup-5-2] DEBUG i.b.n.e.i.c.CustomIsoLoggingHandler - [id: 0xa36f6e92, L:/10.19.52.7:47100 - R:/10.44.224.145:10608] READ: Message: 021072320401AAE090001862201102002063807431990000000000000009180501472093541201470919051031100600011026622011020020638074D28022210000002093545570040001700400010001   Menara BCA Lt 39      KABUPATEN TOLIJBID36028F473B89438F720
MTI: 0x0210
  2: [LLVAR(18)] = '622011020020638074'
  3: [NUMERIC(6)] = '319900'
  4: [NUMERIC(12)] = '000000000000'
  7: [NUMERIC(10)] = '0918050147'
  11: [NUMERIC(6)] = '209354'
  12: [TIME(6)] = '120147'
  15: [NUMERIC(4)] = '0919'
  22: [NUMERIC(3)] = '051'
  32: [LLVAR(3)] = '110'
  33: [LLVAR(6)] = '000110'
  35: [LLVAR(26)] = '622011020020638074D2802221'
  37: [NUMERIC(12)] = '000000209354'
  39: [ALPHA(2)] = '55'
  41: [ALPHA(8)] = '70040001'
  42: [ALPHA(15)] = '700400010001   '
  43: [ALPHA(40)] = 'Menara BCA Lt 39      KABUPATEN TOLIJBID'
  49: [NUMERIC(3)] = '360'
  52: [BINARY(8)] = '28F473B89438F720'
12:01:48.107 [nioEventLoopGroup-5-2] DEBUG i.b.n.e.i.c.CustomIsoLoggingHandler - [id: 0xa36f6e92, L:/10.19.52.7:47100 - R:/10.44.224.145:10608] READ COMPLETE
12:01:48.108 [pool-1-thread-70] INFO  i.b.n.e.iso.IsoListenerProcessorImpl - handling 0210, rrn:209354
12:01:48.108 [pool-1-thread-70] DEBUG id.basys.ntt.edc.iso.MbIsoListener - Received response of 209354
12:01:48.112 [http-nio-9872-exec-3] DEBUG i.b.n.e.i.CensorCommonsRequestLoggingFilter - After request [POST /trx, payload={""dataMap"":{""32"":""110"",""33"":""000110"",""2"":""622011020020638074"",""3"":""319900"",""35"":""622011******638074D2802221"",""4"":""0"",""7"":""0918050147"",""41"":""70040001"",""42"":""700400010001"",""43"":""Menara BCA Lt 39      KABUPATEN TOLIJBID"",""12"":""120147"",""13"":""0918"",""14"":""2802"",""15"":""0919"",""49"":""360"",""18"":""6012"",""52"":""DEF003DA38B653FA"",""22"":""051""},""rc"":null,""rrn"":null,""tracenum"":null,""mti"":512}]
12:01:59.773 [http-nio-9872-exec-4] DEBUG i.b.n.e.i.CensorCommonsRequestLoggingFilter - REQUEST DATA : POST /trx]
12:01:59.774 [http-nio-9872-exec-4] DEBUG i.b.n.e.i.e.b.p.s.BjbTrxServiceImpl - Original bitmap: {32=110, 33=000110, 2=622011020020638074, 3=319900, 35=622011020020638074D2802221, 4=0, 7=0918050159, 41=70040001, 42=700400010001, 43=Menara BCA Lt 39      KABUPATEN TOLIJBID, 12=120159, 13=0918, 14=2802, 15=0919, 49=360, 18=6012, 52=C8BE40AE30C8448B, 22=051}
12:01:59.774 [http-nio-9872-exec-4] DEBUG i.b.n.e.i.e.b.p.s.c.BjbHtcHsmConfig - ===========================request begin================================================
12:01:59.774 [http-nio-9872-exec-4] DEBUG i.b.n.e.i.e.b.p.s.c.BjbHtcHsmConfig - URI         : http://bjb-hsm/bjb/hsm/pin
12:01:59.775 [http-nio-9872-exec-4] DEBUG i.b.n.e.i.e.b.p.s.c.BjbHtcHsmConfig - Headers     : [Accept:""application/json, application/*+json"", Content-Type:""application/json"", Content-Length:""88""]
12:01:59.775 [http-nio-9872-exec-4] DEBUG i.b.n.e.i.e.b.p.s.c.BjbHtcHsmConfig - Request body: {""terminalId"":""70040001"",""pinUnderTpk"":""C8BE40AE30C8448B"",""cardNo"":""622011020020638074""}
12:01:59.775 [http-nio-9872-exec-4] DEBUG i.b.n.e.i.e.b.p.s.c.BjbHtcHsmConfig - ==========================request end================================================
12:01:59.819 [http-nio-9872-exec-4] DEBUG i.b.n.e.i.e.b.p.s.c.BjbHtcHsmConfig - ============================response begin==========================================
12:01:59.819 [http-nio-9872-exec-4] DEBUG i.b.n.e.i.e.b.p.s.c.BjbHtcHsmConfig - Status code  : 200 OK
12:01:59.819 [http-nio-9872-exec-4] DEBUG i.b.n.e.i.e.b.p.s.c.BjbHtcHsmConfig - Status text  : 
12:01:59.820 [http-nio-9872-exec-4] DEBUG i.b.n.e.i.e.b.p.s.c.BjbHtcHsmConfig - Response body: {""pinBlock"":""D81C8E948A3B93A6""}
12:01:59.820 [http-nio-9872-exec-4] DEBUG i.b.n.e.i.e.b.p.s.c.BjbHtcHsmConfig - =======================response end=================================================
12:01:59.844 [http-nio-9872-exec-4] DEBUG i.b.n.e.i.e.b.p.s.BjbTrxServiceImpl - Updated bitmap: {32=110, 33=000110, 2=622011020020638074, 3=319900, 35=622011020020638074D2802221, 4=0, 37=000000209356, 7=0918050159, 41=70040001, 42=700400010001, 43=Menara BCA Lt 39      KABUPATEN TOLIJBID, 11=209356, 12=120159, 13=0918, 14=2802, 15=0919, 49=360, 18=6012, 52=D81C8E948A3B93A6, 22=051, 90=020020935609180501590000000011000000000110}
12:01:59.846 [http-nio-9872-exec-4] DEBUG i.b.n.c.c.c.s.RedisBackedCacheService - puts key: /j8583_000000209356, object: {""dataB64"":""MDIwMEYyM0U0NDAxQThFMDkwMDAwMDAwMDA0MDAwMDAwMDIwMTg2MjIwMTEwMjAwMjA2MzgwNzQzMTk5MDAwMDAwMDAwMDAwMDAwOTE4MDUwMTU5MjA5MzU2MTIwMTU5MDkxODI4MDIwOTE5NjAxMjA1MTAzMTEwMDYwMDAxMTAyNjYyMjAxMTAyMDAyMDYzODA3NEQyODAyMjIxMDAwMDAwMjA5MzU2NzAwNDAwMDE3MDA0MDAwMTAwMDEgICBNZW5hcmEgQkNBIEx0IDM5ICAgICAgS0FCVVBBVEVOIFRPTElKQklEMzYwRDgxQzhFOTQ4QTNCOTNBNjAyMDAyMDkzNTYwOTE4MDUwMTU5MDAwMDAwMDAxMTAwMDAwMDAwMDExMDAyMDAwMDAyMDkzNTYwMDAwMjA5MzU2"",""binaryHeader"":false,""isoHeader"":null,""binaryHeaderB64"":null}, timeout: 10, timeunit: MINUTES
12:01:59.847 [nioEventLoopGroup-5-2] DEBUG i.b.n.e.i.c.CustomIsoLoggingHandler - [id: 0xa36f6e92, L:/10.19.52.7:47100 - R:/10.44.224.145:10608] WRITE: Message: 0200F23E4401A8E0900000000040000000201862201102002063807431990000000000000009180501592093561201590918280209196012051031100600011026622011020020638074D280222100000020935670040001700400010001   Menara BCA Lt 39      KABUPATEN TOLIJBID360D81C8E948A3B93A602002093560918050159000000001100000000011002000002093560000209356
MTI: 0x0200
  2: [LLVAR(18)] = '622011020020638074'
  3: [NUMERIC(6)] = '319900'
  4: [NUMERIC(12)] = '000000000000'
  7: [NUMERIC(10)] = '0918050159'
  11: [NUMERIC(6)] = '209356'
  12: [NUMERIC(6)] = '120159'
  13: [DATE4(4)] = '0918'
  14: [NUMERIC(4)] = '2802'
  15: [NUMERIC(4)] = '0919'
  18: [NUMERIC(4)] = '6012'
  22: [NUMERIC(3)] = '051'
  32: [LLVAR(3)] = '110'
  33: [LLVAR(6)] = '000110'
  35: [LLBCDBIN(26)] = '622011020020638074D2802221'
  37: [NUMERIC(12)] = '000000209356'
  41: [ALPHA(8)] = '70040001'
  42: [ALPHA(15)] = '700400010001   '
  43: [ALPHA(40)] = 'Menara BCA Lt 39      KABUPATEN TOLIJBID'
  49: [NUMERIC(3)] = '360'
  52: [BINARY(8)] = 'D81C8E948A3B93A6'
  90: [NUMERIC(42)] = '020020935609180501590000000011000000000110'
  123: [LLLVAR(20)] = '00002093560000209356'
12:01:59.847 [nioEventLoopGroup-5-2] DEBUG i.b.n.e.i.c.CustomIsoLoggingHandler - [id: 0xa36f6e92, L:/10.19.52.7:47100 - R:/10.44.224.145:10608] FLUSH
12:01:59.848 [http-nio-9872-exec-4] DEBUG id.basys.ntt.edc.iso.MbIsoListener - RRN: 209356, Waiting for 70
12:01:59.949 [nioEventLoopGroup-4-3] DEBUG i.b.n.e.i.e.b.i.BJBCollegaJ8583MessageFactory - INCOMING: 3032313037323332303430314141453039303030313836323230313130323030323036333830373433313939303030303030303030303030303030393138303530313539323039333536313230313539303931393035313033313130303630303031313032363632323031313032303032303633383037344432383032323231303030303030323039333536373537303034303030313730303430303031303030312020204d656e61726120424341204c742033392020202020204b414255504154454e20544f4c494a42494433363044383143384539343841334239334136
12:01:59.949 [nioEventLoopGroup-4-3] DEBUG i.b.n.e.i.e.b.i.BJBCollegaJ8583MessageFactory - CUTS: 3032313037323332303430314141453039303030313836323230313130323030323036333830373433313939303030303030303030303030303030393138303530313539323039333536313230313539303931393035313033313130303630303031313032363632323031313032303032303633383037344432383032323231303030303030323039333536373537303034303030313730303430303031303030312020204d656e61726120424341204c742033392020202020204b414255504154454e20544f4c494a42494433363044383143384539343841334239334136
12:01:59.950 [nioEventLoopGroup-5-2] DEBUG i.b.n.e.i.c.CustomIsoLoggingHandler - [id: 0xa36f6e92, L:/10.19.52.7:47100 - R:/10.44.224.145:10608] READ: Message: 021072320401AAE090001862201102002063807431990000000000000009180501592093561201590919051031100600011026622011020020638074D28022210000002093567570040001700400010001   Menara BCA Lt 39      KABUPATEN TOLIJBID360D81C8E948A3B93A6
MTI: 0x0210
  2: [LLVAR(18)] = '622011020020638074'
  3: [NUMERIC(6)] = '319900'
  4: [NUMERIC(12)] = '000000000000'
  7: [NUMERIC(10)] = '0918050159'
  11: [NUMERIC(6)] = '209356'
  12: [TIME(6)] = '120159'
  15: [NUMERIC(4)] = '0919'
  22: [NUMERIC(3)] = '051'
  32: [LLVAR(3)] = '110'
  33: [LLVAR(6)] = '000110'
  35: [LLVAR(26)] = '622011020020638074D2802221'
  37: [NUMERIC(12)] = '000000209356'
  39: [ALPHA(2)] = '75'
  41: [ALPHA(8)] = '70040001'
  42: [ALPHA(15)] = '700400010001   '
  43: [ALPHA(40)] = 'Menara BCA Lt 39      KABUPATEN TOLIJBID'
  49: [NUMERIC(3)] = '360'
  52: [BINARY(8)] = 'D81C8E948A3B93A6'
12:01:59.950 [nioEventLoopGroup-5-2] DEBUG i.b.n.e.i.c.CustomIsoLoggingHandler - [id: 0xa36f6e92, L:/10.19.52.7:47100 - R:/10.44.224.145:10608] READ COMPLETE
12:01:59.950 [pool-1-thread-70] INFO  i.b.n.e.iso.IsoListenerProcessorImpl - handling 0210, rrn:209356
12:01:59.950 [pool-1-thread-70] DEBUG id.basys.ntt.edc.iso.MbIsoListener - Received response of 209356"
2ERbmGGh,DistanceTransform,WarPie90,Delphi,Sunday 17th of September 2023 11:58:26 PM CDT,"{*
 Distance transform
*}

type EDistUnit = (duEuclidean, duManhatten, duChebyshev);

function dtEucDist(x1,x2:Int32): Int32;
begin
  Result := Sqr(x1) + Sqr(x2);
end;

function dtEucSep(i,j, ii,jj:Int32): Int32;
begin
  Result := Round((sqr(j) - sqr(i) + sqr(jj) - sqr(ii))/(2*(j-i)));
end;


function dtMtnDist(x1, x2: Int32): Int32;
begin
  Result := Abs(x1) + x2
end;

function dtMtnSep(i,j, ii, jj: Int32): Int32;
begin
  if (jj >= (ii + j - i)) then
    Exit($FFFFFF);
  if (ii > (jj + j - i)) then
    Exit(-$FFFFFF);
  Result := (jj-ii+j+i) shr 1;
end;

function dtChbDist(x1, x2: Int32): Int32;
begin
  Result := Max(Abs(x1), x2);
end;


function dtChbSep(i,j, ii,jj: Int32): Int32;
begin
  if (ii <= jj) then
    Result := Max(i+jj, Trunc((i+j) / 2))
  else
    Result := Min(j-ii, Trunc((i+j) / 2));
end;


function DistanceTransform(const binIm:TIntegerArray; m,n:Int32; distanceUnit:EDistUnit): TSingleMatrix;
type
  TSepFunc = function(i,j, ii,jj: Int32): Int32;
  TDistFunc = function(x1,x2: Int32): Int32;
var
  x,y,h,w,i,wid:Int32;
  dist: single;
  tmp,s,t:TIntegerArray;
  sf: TSepFunc;
  df: TDistFunc;
begin
  // first pass
  SetLength(tmp, m*n);
  h := n-1;
  w := m-1;
  for x:=0 to w do
  begin
    if binIm[x] = 0 then
      tmp[x] := 0
    else
      tmp[x] := m+n;

    for y:=1 to h do
      if (binIm[y*m+x] = 0) then
        tmp[y*m+x] := 0
      else
        tmp[y*m+x] := 1 + tmp[(y-1)*m+x];

    for y:=h-1 downto 0 do
      if (tmp[(y+1)*m+x] < tmp[y*m+x]) then
        tmp[y*m+x] := 1 + tmp[(y+1)*m+x]
  end;


  case distanceUnit of
    duEuclidean:
    begin
      df := @dtEucDist;
      sf := @dtEucSep;
    end;
    duManhatten:
    begin
      df := @dtMtnDist;
      sf := @dtMtnSep;
    end;
    duChebyshev:
    begin
      df := @dtChbDist;
      sf := @dtChbSep;
    end;
  end;

  // second pass
  SetLength(Result,n,m);
  SetLength(s,m);
  SetLength(t,m);
  wid := 0;
  for y:=0 to h do
  begin
    i := 0;
    s[0] := 0;
    t[0] := 0;

    for x:=1 to W do
    begin
      while (i >= 0) and (df(t[i]-s[i], tmp[y*m+s[i]]) > df(t[i]-x, tmp[y*m+x])) do
        Dec(i);
      if (i < 0) then
      begin
        i := 0;
        s[0] := x;
      end else
      begin
        wid := 1 + sf(s[i], x, tmp[y*m+s[i]], tmp[y*m+x]);
        if (wid < m) then
        begin
          Inc(i);
          s[i] := x;
          t[i] := wid;
        end;
      end;
    end;

    for x:=W downto 0 do
    begin
      dist := df(x-s[i], tmp[y*m+s[i]]);
      if distanceUnit = duEuclidean then dist := Sqrt(dist);

      Result[y,x] := dist;
      if (x = t[i]) then Dec(i);
    end;
  end;
end;


function DistanceTransform(const TPA:TPointArray; distanceUnit:EDistUnit): TSingleMatrix; overload;
var
  data:TIntegerArray;
  w,h,n,i:Int32;
  area:TBox;
begin
  n := Length(TPA);
  if (n = 0) then Exit;
  area := GetTPABounds(TPA);
  area.y1 -= 1;
  area.x1 -= 1;
  w := (area.x2 - area.x1) + 2;
  h := (area.y2 - area.y1) + 2;
  SetLength(data, h*w);
  for i:=0 to n-1 do
    data[(TPA[i].y-area.y1)*w+(TPA[i].x-area.x1)] := 1;

  Result := DistanceTransform(data,w,h,distanceUnit);
end;"
tDmqFTTQ,Log ISO Bit 51 Miniatm BJB 18/09/2023 11:27,Abikayusri19,Bash,Sunday 17th of September 2023 11:29:01 PM CDT,"11:27:11.051 [http-nio-9872-exec-10] DEBUG i.b.n.e.i.e.b.p.s.c.BjbHtcHsmConfig - ===========================request begin================================================11:27:11.051 [http-nio-9872-exec-10] DEBUG i.b.n.e.i.e.b.p.s.c.BjbHtcHsmConfig - URI         : http://bjb-hsm/bjb/hsm/pin
11:27:11.051 [http-nio-9872-exec-10] DEBUG i.b.n.e.i.e.b.p.s.c.BjbHtcHsmConfig - Headers     : [Accept:""application/json, application/*+json"", Content-Type:""application/json"", Content-Length:""88""]
11:27:11.051 [http-nio-9872-exec-10] DEBUG i.b.n.e.i.e.b.p.s.c.BjbHtcHsmConfig - Request body: {""terminalId"":""70040001"",""pinUnderTpk"":""D468ACCD6373A494"",""cardNo"":""622011020020638074""}
11:27:11.051 [http-nio-9872-exec-10] DEBUG i.b.n.e.i.e.b.p.s.c.BjbHtcHsmConfig - ==========================request end================================================
11:27:11.058 [AsyncResolver-bootstrap-executor-0] INFO  c.n.d.s.r.aws.ConfigClusterResolver - Resolving eureka endpoints via configuration
11:27:11.071 [http-nio-9872-exec-10] DEBUG i.b.n.e.i.e.b.p.s.c.BjbHtcHsmConfig - ============================response begin==========================================
11:27:11.071 [http-nio-9872-exec-10] DEBUG i.b.n.e.i.e.b.p.s.c.BjbHtcHsmConfig - Status code  : 200 OK
11:27:11.071 [http-nio-9872-exec-10] DEBUG i.b.n.e.i.e.b.p.s.c.BjbHtcHsmConfig - Status text  : 
11:27:11.071 [http-nio-9872-exec-10] DEBUG i.b.n.e.i.e.b.p.s.c.BjbHtcHsmConfig - Response body: {""pinBlock"":""2AB05243A6BE24C5""}
11:27:11.071 [http-nio-9872-exec-10] DEBUG i.b.n.e.i.e.b.p.s.c.BjbHtcHsmConfig - =======================response end=================================================
11:27:11.072 [http-nio-9872-exec-10] DEBUG i.b.n.e.i.e.b.p.s.BjbTrxServiceImpl - Updated bitmap: {32=110, 33=360001, 2=622011020020638074, 3=000000, 35=622011020020638074D2802221, 4=5100000, 37=000000209350, 102=0128048839107, 7=0918042711, 41=70040001, 42=700400010001, 43=Menara BCA 39th Floor Kota Palu     JBID, 11=209350, 12=112711, 13=0918, 14=2802, 49=360, 18=6012, 52=2AB05243A6BE24C5, 22=051, 55=820274009F360203179F260865037DFF593D089F9F2701809F34030200009F101C0101A000800000864F7E3600000000000000000000000000000000009F3303E0F8C89F350114950508800410009F3704EBF8509D9F02060000000000005A096220110200206380745F3401009F1A0203605F2A0203609A032309189C01009F090200009F1E0830303030303930354F07A00000060210108407A00000060210109F410400000516, 25=00, 90=020020935009180427110000000011000000360001}
11:27:11.073 [http-nio-9872-exec-10] DEBUG i.b.n.c.c.c.s.RedisBackedCacheService - puts key: /j8583_000000209350/bjb/55, object: ""820274009F360203179F260865037DFF593D089F9F2701809F34030200009F101C0101A000800000864F7E3600000000000000000000000000000000009F3303E0F8C89F350114950508800410009F3704EBF8509D9F02060000000000005A096220110200206380745F3401009F1A0203605F2A0203609A032309189C01009F090200009F1E0830303030303930354F07A00000060210108407A00000060210109F410400000516"", timeout: 15, timeunit: MINUTES
11:27:11.074 [http-nio-9872-exec-10] DEBUG i.b.n.c.c.c.s.RedisBackedCacheService - puts key: /j8583_000000209350, object: {""dataB64"":""MDIwMEYyM0M0NDgxQThFMDkyMDAwMDAwMDA0MDA0MDAwMDIwMTg2MjIwMTEwMjAwMjA2MzgwNzQwMDAwMDAwMDAwMDUxMDAwMDAwOTE4MDQyNzExMjA5MzUwMTEyNzExMDkxODI4MDI2MDEyMDUxMDAwMzExMDA2MzYwMDAxMjY2MjIwMTEwMjAwMjA2MzgwNzREMjgwMjIyMTAwMDAwMDIwOTM1MDcwMDQwMDAxNzAwNDAwMDEwMDAxICAgTWVuYXJhIEJDQSAzOXRoIEZsb29yIEtvdGEgUGFsdSAgICAgSkJJRDM2MDJBQjA1MjQzQTZCRTI0QzUxNjiCAnQAnzYCAxefJghlA33/WT0In58nAYCfNAMCAACfEBwBAaAAgAAAhk9+NgAAAAAAAAAAAAAAAAAAAAAAnzMD4PjInzUBFJUFCIAEEACfNwTr+FCdnwIGAAAAAAAAWgliIBECACBjgHRfNAEAnxoCA2BfKgIDYJoDIwkYnAEAnwkCAACfHggwMDAwMDkwNU8HoAAABgIQEIQHoAAABgIQEJ9BBAAABRYwMjAwMjA5MzUwMDkxODA0MjcxMTAwMDAwMDAwMTEwMDAwMDAzNjAwMDExMzAxMjgwNDg4MzkxMDcwMjAwMDAwMjA5MzUwMDAwMDIwOTM1MA=="",""binaryHeader"":false,""isoHeader"":null,""binaryHeaderB64"":null}, timeout: 10, timeunit: MINUTES
11:27:11.075 [nioEventLoopGroup-5-2] DEBUG i.b.n.e.i.c.CustomIsoLoggingHandler - [id: 0xa36f6e92, L:/10.19.52.7:47100 - R:/10.44.224.145:10608] WRITE: Message: 0200F23C4481A8E09200000000400400002018622011020020638074000000000005100000091804271120935011271109182802601205100031100636000126622011020020638074D280222100000020935070040001700400010001   Menara BCA 39th Floor Kota Palu     JBID3602AB05243A6BE24C5336820274009F360203179F260865037DFF593D089F9F2701809F34030200009F101C0101A000800000864F7E3600000000000000000000000000000000009F3303E0F8C89F350114950508800410009F3704EBF8509D9F02060000000000005A096220110200206380745F3401009F1A0203605F2A0203609A032309189C01009F090200009F1E0830303030303930354F07A00000060210108407A00000060210109F41040000051602002093500918042711000000001100000036000113012804883910702000002093500000209350
MTI: 0x0200
  2: [LLVAR(18)] = '622011020020638074'
  3: [NUMERIC(6)] = '000000'
  4: [NUMERIC(12)] = '000005100000'
  7: [NUMERIC(10)] = '0918042711'
  11: [NUMERIC(6)] = '209350'
  12: [NUMERIC(6)] = '112711'
  13: [DATE4(4)] = '0918'
  14: [NUMERIC(4)] = '2802'
  18: [NUMERIC(4)] = '6012'
  22: [NUMERIC(3)] = '051'
  25: [NUMERIC(2)] = '00'
  32: [LLVAR(3)] = '110'
  33: [LLVAR(6)] = '360001'
  35: [LLBCDBIN(26)] = '622011020020638074D2802221'
  37: [NUMERIC(12)] = '000000209350'
  41: [ALPHA(8)] = '70040001'
  42: [ALPHA(15)] = '700400010001   '
  43: [ALPHA(40)] = 'Menara BCA 39th Floor Kota Palu     JBID'
  49: [NUMERIC(3)] = '360'
  52: [BINARY(8)] = '2AB05243A6BE24C5'
  55: [LLLBIN(168)] = '820274009F360203179F260865037DFF593D089F9F2701809F34030200009F101C0101A000800000864F7E3600000000000000000000000000000000009F3303E0F8C89F350114950508800410009F3704EBF8509D9F02060000000000005A096220110200206380745F3401009F1A0203605F2A0203609A032309189C01009F090200009F1E0830303030303930354F07A00000060210108407A00000060210109F410400000516'
  90: [NUMERIC(42)] = '020020935009180427110000000011000000360001'
  102: [LLVAR(13)] = '0128048839107'
  123: [LLLVAR(20)] = '00002093500000209350'
11:27:11.075 [nioEventLoopGroup-5-2] DEBUG i.b.n.e.i.c.CustomIsoLoggingHandler - [id: 0xa36f6e92, L:/10.19.52.7:47100 - R:/10.44.224.145:10608] FLUSH
11:27:11.076 [http-nio-9872-exec-10] DEBUG id.basys.ntt.edc.iso.MbIsoListener - RRN: 209350, Waiting for 70
11:27:11.775 [nioEventLoopGroup-4-3] DEBUG i.b.n.e.i.e.b.i.BJBCollegaJ8583MessageFactory - INCOMING: 303231303732333834343031414145303932303031383632323031313032303032303633383037343030303030303030303030353130303030303039313830343237313132303933353031313237313130393138363031323035313033313130303633363030303132363632323031313032303032303633383037344432383032323231303030303030323039333530353137303034303030313730303430303031303030312020204d656e61726120424341203339746820466c6f6f72204b6f74612050616c7520202020204a424944333630324142303532343341364245323443353032309f2701805f340100910ac030674a2417da9f3531
11:27:11.775 [nioEventLoopGroup-4-3] DEBUG i.b.n.e.i.e.b.i.BJBCollegaJ8583MessageFactory - CUTS: 303231303732333834343031414145303932303031383632323031313032303032303633383037343030303030303030303030353130303030303039313830343237313132303933353031313237313130393138363031323035313033313130303633363030303132363632323031313032303032303633383037344432383032323231303030303030323039333530353137303034303030313730303430303031303030312020204d656e61726120424341203339746820466c6f6f72204b6f74612050616c7520202020204a424944333630324142303532343341364245323443353032309f2701805f340100910ac030674a2417da9f3531
11:27:11.776 [nioEventLoopGroup-5-2] DEBUG i.b.n.e.i.c.CustomIsoLoggingHandler - [id: 0xa36f6e92, L:/10.19.52.7:47100 - R:/10.44.224.145:10608] READ: Message: 021072384401AAE0920018622011020020638074000000000005100000091804271120935011271109186012051031100636000126622011020020638074D28022210000002093505170040001700400010001   Menara BCA 39th Floor Kota Palu     JBID3602AB05243A6BE24C50409F2701805F340100910AC030674A2417DA9F3531
MTI: 0x0210
  2: [LLVAR(18)] = '622011020020638074'
  3: [NUMERIC(6)] = '000000'
  4: [NUMERIC(12)] = '000005100000'
  7: [NUMERIC(10)] = '0918042711'
  11: [NUMERIC(6)] = '209350'
  12: [TIME(6)] = '112711'
  13: [DATE4(4)] = '0918'
  18: [NUMERIC(4)] = '6012'
  22: [NUMERIC(3)] = '051'
  32: [LLVAR(3)] = '110'
  33: [LLVAR(6)] = '360001'
  35: [LLVAR(26)] = '622011020020638074D2802221'
  37: [NUMERIC(12)] = '000000209350'
  39: [ALPHA(2)] = '51'
  41: [ALPHA(8)] = '70040001'
  42: [ALPHA(15)] = '700400010001   '
  43: [ALPHA(40)] = 'Menara BCA 39th Floor Kota Palu     JBID'
  49: [NUMERIC(3)] = '360'
  52: [BINARY(8)] = '2AB05243A6BE24C5'
  55: [LLLBIN(40)] = '9F2701805F340100910AC030674A2417DA9F3531'
11:27:11.776 [nioEventLoopGroup-5-2] DEBUG i.b.n.e.i.c.CustomIsoLoggingHandler - [id: 0xa36f6e92, L:/10.19.52.7:47100 - R:/10.44.224.145:10608] READ COMPLETE
11:27:11.776 [pool-1-thread-69] INFO  i.b.n.e.iso.IsoListenerProcessorImpl - handling 0210, rrn:209350
11:27:11.776 [pool-1-thread-69] DEBUG id.basys.ntt.edc.iso.MbIsoListener - Received response of 209350"
h4snXf8E,MUNFAQQIHA's List of Twitter Post Links,Munfaqqiha,C++,Sunday 17th of September 2023 11:28:23 PM CDT,"https://twitter.com/petasangu/status/1703418405288808881
https://twitter.com/petasangu/status/1703409650778202122
https://twitter.com/petasangu/status/1703377781676245085
https://twitter.com/petasangu/status/1703348736091734158
https://twitter.com/petasangu/status/1703328786962677771
https://twitter.com/petasangu/status/1703315764206571693
https://twitter.com/petasangu/status/1703313015553348039
https://twitter.com/petasangu/status/1703308761073639820
https://twitter.com/petasangu/status/1703306169757151654
https://twitter.com/petasangu/status/1703299413450674379
https://twitter.com/petasangu/status/1703295963664937091
https://twitter.com/petasangu/status/1703293451666948435
https://twitter.com/petasangu/status/1703290756390326607
https://twitter.com/petasangu/status/1703287076542943474
https://twitter.com/petasangu/status/1703284467404878235
https://twitter.com/petasangu/status/1703281144081592378
https://twitter.com/petasangu/status/1703277293874118994
https://twitter.com/petasangu/status/1703273424280514571
https://twitter.com/petasangu/status/1703272232993313134
https://twitter.com/petasangu/status/1703265384349221337
https://twitter.com/petasangu/status/1703251890728046675
https://twitter.com/petasangu/status/1703263248320201212
https://twitter.com/petasangu/status/1703249037770866712
https://twitter.com/petasangu/status/1703240648055558414
https://twitter.com/petasangu/status/1703232953869119732
https://twitter.com/petasangu/status/1703230224606044342
https://twitter.com/petasangu/status/1703223415791083763
https://twitter.com/petasangu/status/1703215206468600227
https://twitter.com/petasangu/status/1703216265295528213
https://twitter.com/petasangu/status/1703196752541819247
https://twitter.com/petasangu/status/1703192509822992713
https://twitter.com/petasangu/status/1703188871482327213
https://twitter.com/petasangu/status/1703186288256705019
https://twitter.com/petasangu/status/1702644769581924692
https://twitter.com/petasangu/status/1703245731577188571
https://twitter.com/petasangu/status/1701911045097550013
https://twitter.com/petasangu/status/1701950596956258419
https://twitter.com/petasangu/status/1701909505217564920
https://twitter.com/petasangu/status/1701908957475008515
https://twitter.com/petasangu/status/1701416256912687601
https://twitter.com/petasangu/status/1701415227374682430
https://twitter.com/petasangu/status/1701414238156468651
https://twitter.com/petasangu/status/1701411914641998148
https://twitter.com/petasangu/status/1701411238222414107
https://twitter.com/petasangu/status/1701291449453781243
https://twitter.com/petasangu/status/1700950399497519311
https://twitter.com/petasangu/status/1700946810137907651
https://twitter.com/petasangu/status/1700942687590048014
https://twitter.com/petasangu/status/1700937960861102473"
cNvyKfpJ,Log ISO Bit 51 Pos BJB 18/09/2023 11:24,Abikayusri19,Bash,Sunday 17th of September 2023 11:26:21 PM CDT,"11:24:37.982 [http-nio-9872-exec-7] DEBUG i.b.n.e.i.e.b.p.s.c.BjbHtcHsmConfig - ===========================request begin================================================
11:24:37.982 [http-nio-9872-exec-7] DEBUG i.b.n.e.i.e.b.p.s.c.BjbHtcHsmConfig - URI         : http://bjb-hsm/bjb/hsm/pin
11:24:37.982 [http-nio-9872-exec-7] DEBUG i.b.n.e.i.e.b.p.s.c.BjbHtcHsmConfig - Headers     : [Accept:""application/json, application/*+json"", Content-Type:""application/json"", Content-Length:""88""]
11:24:37.982 [http-nio-9872-exec-7] DEBUG i.b.n.e.i.e.b.p.s.c.BjbHtcHsmConfig - Request body: {""terminalId"":""70040001"",""pinUnderTpk"":""D468ACCD6373A494"",""cardNo"":""622011020020638074""}
11:24:37.982 [http-nio-9872-exec-7] DEBUG i.b.n.e.i.e.b.p.s.c.BjbHtcHsmConfig - ==========================request end================================================
11:24:38.023 [http-nio-9872-exec-7] DEBUG i.b.n.e.i.e.b.p.s.c.BjbHtcHsmConfig - ============================response begin==========================================
11:24:38.023 [http-nio-9872-exec-7] DEBUG i.b.n.e.i.e.b.p.s.c.BjbHtcHsmConfig - Status code  : 200 OK
11:24:38.023 [http-nio-9872-exec-7] DEBUG i.b.n.e.i.e.b.p.s.c.BjbHtcHsmConfig - Status text  : 
11:24:38.023 [http-nio-9872-exec-7] DEBUG i.b.n.e.i.e.b.p.s.c.BjbHtcHsmConfig - Response body: {""pinBlock"":""2AB05243A6BE24C5""}
11:24:38.023 [http-nio-9872-exec-7] DEBUG i.b.n.e.i.e.b.p.s.c.BjbHtcHsmConfig - =======================response end=================================================
11:24:38.025 [http-nio-9872-exec-7] DEBUG i.b.n.e.i.e.b.p.s.BjbTrxServiceImpl - Updated bitmap: {32=110, 33=000110, 2=622011020020638074, 3=000000, 35=622011020020638074D2802221, 4=5500000, 37=000000209346, 102=0128048839107, 7=0918042437, 41=70040001, 42=700400010001, 43=Menara BCA Lt 39      KABUPATEN TOLIJBID, 11=209346, 12=112437, 13=0918, 14=2802, 49=360, 18=6012, 52=2AB05243A6BE24C5, 22=051, 55=820274009F360203159F2608F8EFDF315DFF53079F2701809F34030200009F101C0101A000800000BC853A9300000000000000000000000000000000009F3303E0F8C89F350114950508800480009F37043523AB0B9F02060000055000005A096220110200206380745F3401009F1A0203605F2A0203609A032309189C01009F090200009F1E0830303030303930354F07A00000060210108407A00000060210109F410400000515, 25=00, 90=020020934609180424370000000011000000000110}
11:24:38.026 [http-nio-9872-exec-7] DEBUG i.b.n.c.c.c.s.RedisBackedCacheService - puts key: /j8583_000000209346/bjb/55, object: ""820274009F360203159F2608F8EFDF315DFF53079F2701809F34030200009F101C0101A000800000BC853A9300000000000000000000000000000000009F3303E0F8C89F350114950508800480009F37043523AB0B9F02060000055000005A096220110200206380745F3401009F1A0203605F2A0203609A032309189C01009F090200009F1E0830303030303930354F07A00000060210108407A00000060210109F410400000515"", timeout: 15, timeunit: MINUTES
11:24:38.027 [http-nio-9872-exec-7] DEBUG i.b.n.c.c.c.s.RedisBackedCacheService - puts key: /j8583_000000209346, object: {""dataB64"":""MDIwMEYyM0M0NDgxQThFMDkyMDAwMDAwMDA0MDA0MDAwMDIwMTg2MjIwMTEwMjAwMjA2MzgwNzQwMDAwMDAwMDAwMDU1MDAwMDAwOTE4MDQyNDM3MjA5MzQ2MTEyNDM3MDkxODI4MDI2MDEyMDUxMDAwMzExMDA2MDAwMTEwMjY2MjIwMTEwMjAwMjA2MzgwNzREMjgwMjIyMTAwMDAwMDIwOTM0NjcwMDQwMDAxNzAwNDAwMDEwMDAxICAgTWVuYXJhIEJDQSBMdCAzOSAgICAgIEtBQlVQQVRFTiBUT0xJSkJJRDM2MDJBQjA1MjQzQTZCRTI0QzUxNjiCAnQAnzYCAxWfJgj4798xXf9TB58nAYCfNAMCAACfEBwBAaAAgAAAvIU6kwAAAAAAAAAAAAAAAAAAAAAAnzMD4PjInzUBFJUFCIAEgACfNwQ1I6sLnwIGAAAFUAAAWgliIBECACBjgHRfNAEAnxoCA2BfKgIDYJoDIwkYnAEAnwkCAACfHggwMDAwMDkwNU8HoAAABgIQEIQHoAAABgIQEJ9BBAAABRUwMjAwMjA5MzQ2MDkxODA0MjQzNzAwMDAwMDAwMTEwMDAwMDAwMDAxMTAxMzAxMjgwNDg4MzkxMDcwMjAwMDAwMjA5MzQ2MDAwMDIwOTM0Ng=="",""binaryHeader"":false,""isoHeader"":null,""binaryHeaderB64"":null}, timeout: 10, timeunit: MINUTES
11:24:38.027 [nioEventLoopGroup-5-2] DEBUG i.b.n.e.i.c.CustomIsoLoggingHandler - [id: 0xa36f6e92, L:/10.19.52.7:47100 - R:/10.44.224.145:10608] WRITE: Message: 0200F23C4481A8E09200000000400400002018622011020020638074000000000005500000091804243720934611243709182802601205100031100600011026622011020020638074D280222100000020934670040001700400010001   Menara BCA Lt 39      KABUPATEN TOLIJBID3602AB05243A6BE24C5336820274009F360203159F2608F8EFDF315DFF53079F2701809F34030200009F101C0101A000800000BC853A9300000000000000000000000000000000009F3303E0F8C89F350114950508800480009F37043523AB0B9F02060000055000005A096220110200206380745F3401009F1A0203605F2A0203609A032309189C01009F090200009F1E0830303030303930354F07A00000060210108407A00000060210109F41040000051502002093460918042437000000001100000000011013012804883910702000002093460000209346
MTI: 0x0200
  2: [LLVAR(18)] = '622011020020638074'
  3: [NUMERIC(6)] = '000000'
  4: [NUMERIC(12)] = '000005500000'
  7: [NUMERIC(10)] = '0918042437'
  11: [NUMERIC(6)] = '209346'
  12: [NUMERIC(6)] = '112437'
  13: [DATE4(4)] = '0918'
  14: [NUMERIC(4)] = '2802'
  18: [NUMERIC(4)] = '6012'
  22: [NUMERIC(3)] = '051'
  25: [NUMERIC(2)] = '00'
  32: [LLVAR(3)] = '110'
  33: [LLVAR(6)] = '000110'
  35: [LLBCDBIN(26)] = '622011020020638074D2802221'
  37: [NUMERIC(12)] = '000000209346'
  41: [ALPHA(8)] = '70040001'
  42: [ALPHA(15)] = '700400010001   '
  43: [ALPHA(40)] = 'Menara BCA Lt 39      KABUPATEN TOLIJBID'
  49: [NUMERIC(3)] = '360'
  52: [BINARY(8)] = '2AB05243A6BE24C5'
  55: [LLLBIN(168)] = '820274009F360203159F2608F8EFDF315DFF53079F2701809F34030200009F101C0101A000800000BC853A9300000000000000000000000000000000009F3303E0F8C89F350114950508800480009F37043523AB0B9F02060000055000005A096220110200206380745F3401009F1A0203605F2A0203609A032309189C01009F090200009F1E0830303030303930354F07A00000060210108407A00000060210109F410400000515'
  90: [NUMERIC(42)] = '020020934609180424370000000011000000000110'
  102: [LLVAR(13)] = '0128048839107'
  123: [LLLVAR(20)] = '00002093460000209346'
11:24:38.027 [nioEventLoopGroup-5-2] DEBUG i.b.n.e.i.c.CustomIsoLoggingHandler - [id: 0xa36f6e92, L:/10.19.52.7:47100 - R:/10.44.224.145:10608] FLUSH
11:24:38.028 [http-nio-9872-exec-7] DEBUG id.basys.ntt.edc.iso.MbIsoListener - RRN: 209346, Waiting for 70
11:24:39.606 [nioEventLoopGroup-4-3] DEBUG i.b.n.e.i.e.b.i.BJBCollegaJ8583MessageFactory - INCOMING: 303231303732333834343031414145303932303031383632323031313032303032303633383037343030303030303030303030353530303030303039313830343234333732303933343631313234333730393138363031323035313033313130303630303031313032363632323031313032303032303633383037344432383032323231303030303030323039333436353137303034303030313730303430303031303030312020204d656e61726120424341204c742033392020202020204b414255504154454e20544f4c494a424944333630324142303532343341364245323443353032309f2701805f340100910a364ceac9533f11ae3531
11:24:39.606 [nioEventLoopGroup-4-3] DEBUG i.b.n.e.i.e.b.i.BJBCollegaJ8583MessageFactory - CUTS: 303231303732333834343031414145303932303031383632323031313032303032303633383037343030303030303030303030353530303030303039313830343234333732303933343631313234333730393138363031323035313033313130303630303031313032363632323031313032303032303633383037344432383032323231303030303030323039333436353137303034303030313730303430303031303030312020204d656e61726120424341204c742033392020202020204b414255504154454e20544f4c494a424944333630324142303532343341364245323443353032309f2701805f340100910a364ceac9533f11ae3531
11:24:39.606 [nioEventLoopGroup-5-2] DEBUG i.b.n.e.i.c.CustomIsoLoggingHandler - [id: 0xa36f6e92, L:/10.19.52.7:47100 - R:/10.44.224.145:10608] READ: Message: 021072384401AAE0920018622011020020638074000000000005500000091804243720934611243709186012051031100600011026622011020020638074D28022210000002093465170040001700400010001   Menara BCA Lt 39      KABUPATEN TOLIJBID3602AB05243A6BE24C50409F2701805F340100910A364CEAC9533F11AE3531
MTI: 0x0210
  2: [LLVAR(18)] = '622011020020638074'
  3: [NUMERIC(6)] = '000000'
  4: [NUMERIC(12)] = '000005500000'
  7: [NUMERIC(10)] = '0918042437'
  11: [NUMERIC(6)] = '209346'
  12: [TIME(6)] = '112437'
  13: [DATE4(4)] = '0918'
  18: [NUMERIC(4)] = '6012'
  22: [NUMERIC(3)] = '051'
  32: [LLVAR(3)] = '110'
  33: [LLVAR(6)] = '000110'
  35: [LLVAR(26)] = '622011020020638074D2802221'
  37: [NUMERIC(12)] = '000000209346'
  39: [ALPHA(2)] = '51'
  41: [ALPHA(8)] = '70040001'
  42: [ALPHA(15)] = '700400010001   '
  43: [ALPHA(40)] = 'Menara BCA Lt 39      KABUPATEN TOLIJBID'
  49: [NUMERIC(3)] = '360'
  52: [BINARY(8)] = '2AB05243A6BE24C5'
  55: [LLLBIN(40)] = '9F2701805F340100910A364CEAC9533F11AE3531'
11:24:39.606 [nioEventLoopGroup-5-2] DEBUG i.b.n.e.i.c.CustomIsoLoggingHandler - [id: 0xa36f6e92, L:/10.19.52.7:47100 - R:/10.44.224.145:10608] READ COMPLETE
11:24:39.607 [pool-1-thread-68] INFO  i.b.n.e.iso.IsoListenerProcessorImpl - handling 0210, rrn:209346
11:24:39.607 [pool-1-thread-68] DEBUG id.basys.ntt.edc.iso.MbIsoListener - Received response of 209346
11:24:39.628 [http-nio-9872-exec-7] DEBUG i.b.n.e.i.CensorCommonsRequestLoggingFilter - After request [POST /trx, payload={""dataMap"":{""32"":""110"",""33"":""000110"",""2"":""622011020020638074"",""3"":""000000"",""35"":""622011******638074D2802221"",""4"":""5500000"",""102"":""0128048839107"",""7"":""0918042437"",""41"":""70040001"",""42"":""700400010001"",""43"":""Menara BCA Lt 39      KABUPATEN TOLIJBID"",""12"":""112437"",""13"":""0918"",""14"":""2802"",""49"":""360"",""18"":""6012"",""52"":""D468ACCD6373A494"",""22"":""051"",""55"":""622011"",""25"":""00""},""rc"":null,""rrn"":null,""tracenum"":null,""mti"":512}]"
tQqqBGPs,TooManyRequests: received 429 HTTP response,Vault-TecTradingCo,Python,Sunday 17th of September 2023 11:20:00 PM CDT,"Traceback (most recent call last):
  File ""/root/Bots/Fallout76MarketplaceKarmaTransferBot/main.py"", line 258, in main
    for comment in comment_stream:
  File ""/root/Bots/Fallout76MarketplaceKarmaTransferBot/venv/lib/python3.10/site-packages/praw/models/util.py"", line 138, in stream_generator
    for item in reversed(list(function(limit=limit, **function_kwargs))):
  File ""/root/Bots/Fallout76MarketplaceKarmaTransferBot/venv/lib/python3.10/site-packages/praw/models/listing/generator.py"", line 63, in __next__
    self._next_batch()
  File ""/root/Bots/Fallout76MarketplaceKarmaTransferBot/venv/lib/python3.10/site-packages/praw/models/listing/generator.py"", line 89, in _next_batch
    self._listing = self._reddit.get(self.url, params=self.params)
  File ""/root/Bots/Fallout76MarketplaceKarmaTransferBot/venv/lib/python3.10/site-packages/praw/util/deprecate_args.py"", line 43, in wrapped
    return func(**dict(zip(_old_args, args)), **kwargs)
  File ""/root/Bots/Fallout76MarketplaceKarmaTransferBot/venv/lib/python3.10/site-packages/praw/reddit.py"", line 712, in get
    return self._objectify_request(method=""GET"", params=params, path=path)
  File ""/root/Bots/Fallout76MarketplaceKarmaTransferBot/venv/lib/python3.10/site-packages/praw/reddit.py"", line 517, in _objectify_request
    self.request(
  File ""/root/Bots/Fallout76MarketplaceKarmaTransferBot/venv/lib/python3.10/site-packages/praw/util/deprecate_args.py"", line 43, in wrapped
    return func(**dict(zip(_old_args, args)), **kwargs)
  File ""/root/Bots/Fallout76MarketplaceKarmaTransferBot/venv/lib/python3.10/site-packages/praw/reddit.py"", line 941, in request
    return self._core.request(
  File ""/root/Bots/Fallout76MarketplaceKarmaTransferBot/venv/lib/python3.10/site-packages/prawcore/sessions.py"", line 330, in request
    return self._request_with_retries(
  File ""/root/Bots/Fallout76MarketplaceKarmaTransferBot/venv/lib/python3.10/site-packages/prawcore/sessions.py"", line 266, in _request_with_retries
    raise self.STATUS_EXCEPTIONS[response.status_code](response)
prawcore.exceptions.TooManyRequests: received 429 HTTP response
"
6VJgTcMe,Untitled,Ethan-ZYF,C++,Sunday 17th of September 2023 11:17:45 PM CDT,"#include <bits/stdc++.h>
using namespace std;
using i64 = long long;

void solve() {
    int N, Q;
    cin >> N;

    vector<int> A(N);
    for (int i = 0; i < N; i++) {
        cin >> A[i];
    }
    const int M = *max_element(A.begin(), A.end()) + 1;

    vector<int> freq(M);
    const int B = sqrtl(N);
    cin >> Q;
    vector<array<int, 3>> query(Q);
    for (int i = 0; i < Q; i++) {
        int l, r;
        cin >> l >> r;
        l--;
        query[i] = {l, r, i};
    }
    sort(query.begin(), query.end(), [&](auto a, auto b) {
        if (a[0] / B != b[0] / B) {
            return a[0] < b[0];
        } else {
            return a[1] < b[1];
        }
    });
    i64 res = 0;
    vector<i64> ans(Q);

    auto add = [&](int x) {
        res += freq[x] == 0;
        freq[x] += 1;
    };
    auto del = [&](int x) {
        freq[x] -= 1;
        res -= freq[x] == 0;
    };

    int L = 0, R = 0;
    for (auto [l, r, i] : query) {
        while (R < r) {
            add(A[R++]);
        }
        while (L > l) {
            add(A[--L]);
        }
        while (R > r) {
            del(A[--R]);
        }
        while (L < l) {
            del(A[L++]);
        }
        ans[i] = res;
    }
    for (int i = 0; i < Q; i++) {
        cout << ans[i] << ""\n"";
    }
}

int main() {
    ios::sync_with_stdio(false);
    cin.tie(nullptr);

    int T = 1;
    // cin >> T;
    for (int Task = 1; Task <= T; Task++) {
        solve();
    }

    return 0;
}"
u46sFATs,ID,Peluchecoman,Lua,Sunday 17th of September 2023 10:35:37 PM CDT,"3115954513,
1581870246,"
vzS0uaHb,News Sep17 23,Newscaster_Ned,Email,Sunday 17th of September 2023 10:28:18 PM CDT,".‎‎‎.‎‎‎.‎‎‎.‎‎‎.‎‎‎.‎‎‎.‎‎‎.‎‎‎.‎‎‎.‎‎‎.‎‎‎.‎‎‎.‎‎‎.‎‎‎.‎‎‎.‎‎‎.‎‎‎.‎‎‎.‎‎‎T‎‎‎e‎‎‎s‎‎‎t‎‎‎ ‎‎‎1‎‎‎.‎‎‎.‎‎‎.‎‎‎.‎‎‎.‎‎‎.‎‎‎.‎‎‎.‎‎‎.‎‎‎.‎‎‎.‎‎‎.‎‎‎.‎‎‎.‎‎‎.‎‎‎.‎‎‎.‎‎‎.‎‎‎.‎‎‎
.‎‎‎.‎‎‎.‎‎‎.‎‎‎.‎‎‎.‎‎‎.‎‎‎.‎‎‎.‎‎‎.‎‎‎.‎‎‎.‎‎‎.‎‎‎.‎‎‎.‎‎‎.‎‎‎.‎‎‎.‎‎‎.‎‎‎T‎‎‎e‎‎‎s‎‎‎t‎‎‎ ‎‎‎2‎‎‎.‎‎‎.‎‎‎.‎‎‎.‎‎‎.‎‎‎.‎‎‎.‎‎‎.‎‎‎.‎‎‎.‎‎‎.‎‎‎.‎‎‎.‎‎‎.‎‎‎.‎‎‎.‎‎‎.‎‎‎.‎‎‎.‎‎‎
.‎‎‎.‎‎‎.‎‎‎.‎‎‎.‎‎‎.‎‎‎.‎‎‎.‎‎‎.‎‎‎.‎‎‎.‎‎‎.‎‎‎.‎‎‎.‎‎‎.‎‎‎.‎‎‎.‎‎‎.‎‎‎.‎‎‎T‎‎‎e‎‎‎s‎‎‎t‎‎‎ ‎‎‎3‎‎‎.‎‎‎.‎‎‎.‎‎‎.‎‎‎.‎‎‎.‎‎‎.‎‎‎.‎‎‎.‎‎‎.‎‎‎.‎‎‎.‎‎‎.‎‎‎.‎‎‎.‎‎‎.‎‎‎.‎‎‎.‎‎‎.‎‎‎
.‎‎‎.‎‎‎.‎‎‎.‎‎‎.‎‎‎.‎‎‎.‎‎‎.‎‎‎.‎‎‎.‎‎‎.‎‎‎.‎‎‎.‎‎‎.‎‎‎.‎‎‎.‎‎‎.‎‎‎.‎‎‎.‎‎‎.‎‎‎.‎‎‎.‎‎‎.‎‎‎.‎‎‎.‎‎‎.‎‎‎.‎‎‎.‎‎‎.‎‎‎ ‎‎‎T‎‎‎e‎‎‎s‎‎‎t‎‎‎ ‎‎‎c‎‎‎o‎‎‎m‎‎‎p‎‎‎l‎‎‎e‎‎‎t‎‎‎e‎‎‎.‎‎‎

H‎‎‎e‎‎‎r‎‎‎e‎‎‎'‎‎‎s‎‎‎ ‎‎‎t‎‎‎h‎‎‎e‎‎‎ ‎‎‎n‎‎‎e‎‎‎w‎‎‎s‎‎‎,‎‎‎ ‎‎‎y‎‎‎o‎‎‎u‎‎‎ ‎‎‎p‎‎‎u‎‎‎b‎‎‎e‎‎‎h‎‎‎e‎‎‎a‎‎‎d‎‎‎.‎‎‎

W‎‎‎A‎‎‎T‎‎‎C‎‎‎H‎‎‎:‎‎‎ ‎‎‎H‎‎‎a‎‎‎n‎‎‎d‎‎‎c‎‎‎u‎‎‎f‎‎‎f‎‎‎e‎‎‎d‎‎‎ ‎‎‎B‎‎‎e‎‎‎n‎‎‎g‎‎‎a‎‎‎l‎‎‎s‎‎‎ ‎‎‎F‎‎‎a‎‎‎n‎‎‎ ‎‎‎D‎‎‎e‎‎‎l‎‎‎i‎‎‎v‎‎‎e‎‎‎r‎‎‎s‎‎‎ ‎‎‎P‎‎‎e‎‎‎r‎‎‎f‎‎‎e‎‎‎c‎‎‎t‎‎‎ ‎‎‎H‎‎‎e‎‎‎a‎‎‎d‎‎‎ ‎‎‎B‎‎‎u‎‎‎t‎‎‎t‎‎‎ ‎‎‎A‎‎‎f‎‎‎t‎‎‎e‎‎‎r‎‎‎ ‎‎‎L‎‎‎o‎‎‎s‎‎‎s‎‎‎
N‎‎‎F‎‎‎L‎‎‎ ‎‎‎R‎‎‎e‎‎‎f‎‎‎e‎‎‎r‎‎‎e‎‎‎e‎‎‎ ‎‎‎R‎‎‎e‎‎‎f‎‎‎u‎‎‎s‎‎‎e‎‎‎s‎‎‎ ‎‎‎t‎‎‎o‎‎‎ ‎‎‎B‎‎‎e‎‎‎ ‎‎‎I‎‎‎n‎‎‎t‎‎‎e‎‎‎r‎‎‎r‎‎‎u‎‎‎p‎‎‎t‎‎‎e‎‎‎d‎‎‎ ‎‎‎b‎‎‎y‎‎‎ ‎‎‎P‎‎‎l‎‎‎a‎‎‎y‎‎‎e‎‎‎r‎‎‎:‎‎‎ ‎‎‎'‎‎‎I‎‎‎'‎‎‎m‎‎‎ ‎‎‎T‎‎‎a‎‎‎l‎‎‎k‎‎‎i‎‎‎n‎‎‎g‎‎‎ ‎‎‎t‎‎‎o‎‎‎ ‎‎‎A‎‎‎m‎‎‎e‎‎‎r‎‎‎i‎‎‎c‎‎‎a‎‎‎'‎‎‎
R‎‎‎u‎‎‎s‎‎‎s‎‎‎e‎‎‎l‎‎‎l‎‎‎ ‎‎‎B‎‎‎r‎‎‎a‎‎‎n‎‎‎d‎‎‎'‎‎‎s‎‎‎ ‎‎‎A‎‎‎g‎‎‎e‎‎‎n‎‎‎t‎‎‎s‎‎‎ ‎‎‎D‎‎‎r‎‎‎o‎‎‎p‎‎‎ ‎‎‎A‎‎‎c‎‎‎t‎‎‎o‎‎‎r‎‎‎ ‎‎‎A‎‎‎f‎‎‎t‎‎‎e‎‎‎r‎‎‎ ‎‎‎R‎‎‎a‎‎‎p‎‎‎e‎‎‎,‎‎‎ ‎‎‎S‎‎‎e‎‎‎x‎‎‎u‎‎‎a‎‎‎l‎‎‎ ‎‎‎A‎‎‎s‎‎‎s‎‎‎a‎‎‎u‎‎‎l‎‎‎t‎‎‎ ‎‎‎C‎‎‎l‎‎‎a‎‎‎i‎‎‎m‎‎‎s‎‎‎
K‎‎‎a‎‎‎r‎‎‎e‎‎‎e‎‎‎m‎‎‎ ‎‎‎J‎‎‎a‎‎‎c‎‎‎k‎‎‎s‎‎‎o‎‎‎n‎‎‎ ‎‎‎E‎‎‎j‎‎‎e‎‎‎c‎‎‎t‎‎‎e‎‎‎d‎‎‎ ‎‎‎A‎‎‎f‎‎‎t‎‎‎e‎‎‎r‎‎‎ ‎‎‎V‎‎‎i‎‎‎c‎‎‎i‎‎‎o‎‎‎u‎‎‎s‎‎‎ ‎‎‎H‎‎‎i‎‎‎t‎‎‎ ‎‎‎o‎‎‎n‎‎‎ ‎‎‎C‎‎‎o‎‎‎m‎‎‎m‎‎‎a‎‎‎n‎‎‎d‎‎‎e‎‎‎r‎‎‎s‎‎‎'‎‎‎ ‎‎‎L‎‎‎o‎‎‎g‎‎‎a‎‎‎n‎‎‎ ‎‎‎T‎‎‎h‎‎‎o‎‎‎m‎‎‎a‎‎‎s‎‎‎
G‎‎‎e‎‎‎t‎‎‎ ‎‎‎A‎‎‎l‎‎‎l‎‎‎ ‎‎‎B‎‎‎r‎‎‎e‎‎‎i‎‎‎t‎‎‎b‎‎‎a‎‎‎r‎‎‎t‎‎‎ ‎‎‎N‎‎‎e‎‎‎w‎‎‎s‎‎‎ ‎‎‎H‎‎‎e‎‎‎r‎‎‎e‎‎‎
E‎‎‎x‎‎‎c‎‎‎l‎‎‎u‎‎‎s‎‎‎i‎‎‎v‎‎‎e‎‎‎:‎‎‎ ‎‎‎S‎‎‎e‎‎‎n‎‎‎.‎‎‎ ‎‎‎J‎‎‎.‎‎‎D‎‎‎.‎‎‎ ‎‎‎V‎‎‎a‎‎‎n‎‎‎c‎‎‎e‎‎‎ ‎‎‎D‎‎‎e‎‎‎m‎‎‎a‎‎‎n‎‎‎d‎‎‎s‎‎‎ ‎‎‎B‎‎‎i‎‎‎d‎‎‎e‎‎‎n‎‎‎ ‎‎‎A‎‎‎d‎‎‎m‎‎‎i‎‎‎n‎‎‎ ‎‎‎R‎‎‎e‎‎‎v‎‎‎e‎‎‎a‎‎‎l‎‎‎ ‎‎‎i‎‎‎f‎‎‎ ‎‎‎A‎‎‎m‎‎‎e‎‎‎r‎‎‎i‎‎‎c‎‎‎a‎‎‎n‎‎‎ ‎‎‎T‎‎‎r‎‎‎a‎‎‎n‎‎‎s‎‎‎ ‎‎‎‘‎‎‎S‎‎‎p‎‎‎o‎‎‎k‎‎‎e‎‎‎s‎‎‎p‎‎‎e‎‎‎r‎‎‎s‎‎‎o‎‎‎n‎‎‎’‎‎‎ ‎‎‎f‎‎‎o‎‎‎r‎‎‎ ‎‎‎U‎‎‎k‎‎‎r‎‎‎a‎‎‎i‎‎‎n‎‎‎e‎‎‎ ‎‎‎M‎‎‎i‎‎‎l‎‎‎i‎‎‎t‎‎‎a‎‎‎r‎‎‎y‎‎‎ ‎‎‎H‎‎‎a‎‎‎s‎‎‎ ‎‎‎U‎‎‎.‎‎‎S‎‎‎.‎‎‎ ‎‎‎I‎‎‎n‎‎‎t‎‎‎e‎‎‎l‎‎‎l‎‎‎i‎‎‎g‎‎‎e‎‎‎n‎‎‎c‎‎‎e‎‎‎ ‎‎‎T‎‎‎i‎‎‎e‎‎‎s‎‎‎
S‎‎‎a‎‎‎r‎‎‎a‎‎‎h‎‎‎ ‎‎‎A‎‎‎s‎‎‎h‎‎‎t‎‎‎o‎‎‎n‎‎‎-‎‎‎C‎‎‎i‎‎‎r‎‎‎i‎‎‎l‎‎‎l‎‎‎o‎‎‎,‎‎‎ ‎‎‎T‎‎‎w‎‎‎i‎‎‎t‎‎‎t‎‎‎e‎‎‎r‎‎‎
S‎‎‎e‎‎‎n‎‎‎a‎‎‎t‎‎‎o‎‎‎r‎‎‎ ‎‎‎J‎‎‎.‎‎‎D‎‎‎.‎‎‎ ‎‎‎V‎‎‎a‎‎‎n‎‎‎c‎‎‎e‎‎‎ ‎‎‎(‎‎‎R‎‎‎-‎‎‎O‎‎‎H‎‎‎)‎‎‎ ‎‎‎h‎‎‎a‎‎‎s‎‎‎ ‎‎‎w‎‎‎r‎‎‎i‎‎‎t‎‎‎t‎‎‎e‎‎‎n‎‎‎ ‎‎‎t‎‎‎o‎‎‎ ‎‎‎t‎‎‎o‎‎‎p‎‎‎ ‎‎‎B‎‎‎i‎‎‎d‎‎‎e‎‎‎n‎‎‎ ‎‎‎a‎‎‎d‎‎‎m‎‎‎i‎‎‎n‎‎‎i‎‎‎s‎‎‎t‎‎‎r‎‎‎a‎‎‎t‎‎‎i‎‎‎o‎‎‎n‎‎‎ ‎‎‎o‎‎‎f‎‎‎f‎‎‎i‎‎‎c‎‎‎i‎‎‎a‎‎‎l‎‎‎s‎‎‎ ‎‎‎d‎‎‎e‎‎‎m‎‎‎a‎‎‎n‎‎‎d‎‎‎i‎‎‎n‎‎‎g‎‎‎ ‎‎‎t‎‎‎h‎‎‎e‎‎‎ ‎‎‎W‎‎‎h‎‎‎i‎‎‎t‎‎‎e‎‎‎ ‎‎‎H‎‎‎o‎‎‎u‎‎‎s‎‎‎e‎‎‎ ‎‎‎r‎‎‎e‎‎‎v‎‎‎e‎‎‎a‎‎‎l‎‎‎ ‎‎‎i‎‎‎f‎‎‎ ‎‎‎S‎‎‎a‎‎‎r‎‎‎a‎‎‎h‎‎‎ ‎‎‎A‎‎‎s‎‎‎h‎‎‎t‎‎‎o‎‎‎n‎‎‎-‎‎‎C‎‎‎i‎‎‎r‎‎‎i‎‎‎l‎‎‎l‎‎‎o‎‎‎,‎‎‎ ‎‎‎a‎‎‎ ‎‎‎t‎‎‎r‎‎‎a‎‎‎n‎‎‎s‎‎‎g‎‎‎e‎‎‎n‎‎‎d‎‎‎e‎‎‎r‎‎‎ ‎‎‎i‎‎‎n‎‎‎d‎‎‎i‎‎‎v‎‎‎i‎‎‎d‎‎‎u‎‎‎a‎‎‎l‎‎‎ ‎‎‎c‎‎‎l‎‎‎a‎‎‎i‎‎‎m‎‎‎i‎‎‎n‎‎‎g‎‎‎ ‎‎‎t‎‎‎o‎‎‎ ‎‎‎b‎‎‎e‎‎‎ ‎‎‎a‎‎‎ ‎‎‎s‎‎‎p‎‎‎o‎‎‎k‎‎‎e‎‎‎s‎‎‎p‎‎‎e‎‎‎r‎‎‎s‎‎‎o‎‎‎n‎‎‎ ‎‎‎f‎‎‎o‎‎‎r‎‎‎ ‎‎‎t‎‎‎h‎‎‎e‎‎‎ ‎‎‎U‎‎‎k‎‎‎r‎‎‎a‎‎‎i‎‎‎n‎‎‎i‎‎‎a‎‎‎n‎‎‎ ‎‎‎m‎‎‎i‎‎‎l‎‎‎i‎‎‎t‎‎‎a‎‎‎r‎‎‎y‎‎‎,‎‎‎ ‎‎‎h‎‎‎a‎‎‎s‎‎‎ ‎‎‎t‎‎‎i‎‎‎e‎‎‎s‎‎‎ ‎‎‎t‎‎‎o‎‎‎ ‎‎‎A‎‎‎m‎‎‎e‎‎‎r‎‎‎i‎‎‎c‎‎‎a‎‎‎n‎‎‎ ‎‎‎i‎‎‎n‎‎‎t‎‎‎e‎‎‎l‎‎‎l‎‎‎i‎‎‎g‎‎‎e‎‎‎n‎‎‎c‎‎‎e‎‎‎ ‎‎‎s‎‎‎e‎‎‎r‎‎‎v‎‎‎i‎‎‎c‎‎‎e‎‎‎s‎‎‎ ‎‎‎o‎‎‎r‎‎‎ ‎‎‎r‎‎‎e‎‎‎c‎‎‎e‎‎‎i‎‎‎v‎‎‎e‎‎‎s‎‎‎ ‎‎‎U‎‎‎.‎‎‎S‎‎‎.‎‎‎ ‎‎‎f‎‎‎u‎‎‎n‎‎‎d‎‎‎i‎‎‎n‎‎‎g‎‎‎.‎‎‎

W‎‎‎e‎‎‎s‎‎‎t‎‎‎ ‎‎‎M‎‎‎u‎‎‎s‎‎‎t‎‎‎ ‎‎‎P‎‎‎r‎‎‎e‎‎‎p‎‎‎a‎‎‎r‎‎‎e‎‎‎ ‎‎‎f‎‎‎o‎‎‎r‎‎‎ ‎‎‎a‎‎‎ ‎‎‎'‎‎‎L‎‎‎o‎‎‎n‎‎‎g‎‎‎ ‎‎‎W‎‎‎a‎‎‎r‎‎‎ ‎‎‎i‎‎‎n‎‎‎ ‎‎‎U‎‎‎k‎‎‎r‎‎‎a‎‎‎i‎‎‎n‎‎‎e‎‎‎'‎‎‎ ‎‎‎S‎‎‎a‎‎‎y‎‎‎s‎‎‎ ‎‎‎N‎‎‎A‎‎‎T‎‎‎O‎‎‎ ‎‎‎C‎‎‎h‎‎‎i‎‎‎e‎‎‎f‎‎‎
W‎‎‎e‎‎‎s‎‎‎t‎‎‎ ‎‎‎M‎‎‎u‎‎‎s‎‎‎t‎‎‎ ‎‎‎P‎‎‎r‎‎‎e‎‎‎p‎‎‎a‎‎‎r‎‎‎e‎‎‎ ‎‎‎f‎‎‎o‎‎‎r‎‎‎ ‎‎‎a‎‎‎ ‎‎‎'‎‎‎L‎‎‎o‎‎‎n‎‎‎g‎‎‎ ‎‎‎W‎‎‎a‎‎‎r‎‎‎ ‎‎‎i‎‎‎n‎‎‎ ‎‎‎U‎‎‎k‎‎‎r‎‎‎a‎‎‎i‎‎‎n‎‎‎e‎‎‎'‎‎‎ ‎‎‎S‎‎‎a‎‎‎y‎‎‎s‎‎‎ ‎‎‎N‎‎‎A‎‎‎T‎‎‎O‎‎‎ ‎‎‎C‎‎‎h‎‎‎i‎‎‎e‎‎‎f‎‎‎
3‎‎‎,‎‎‎1‎‎‎7‎‎‎3‎‎‎
E‎‎‎x‎‎‎c‎‎‎l‎‎‎u‎‎‎s‎‎‎i‎‎‎v‎‎‎e‎‎‎ ‎‎‎—‎‎‎ ‎‎‎M‎‎‎c‎‎‎C‎‎‎a‎‎‎r‎‎‎t‎‎‎h‎‎‎y‎‎‎ ‎‎‎C‎‎‎a‎‎‎l‎‎‎l‎‎‎s‎‎‎ ‎‎‎f‎‎‎o‎‎‎r‎‎‎ ‎‎‎A‎‎‎l‎‎‎l‎‎‎-‎‎‎M‎‎‎e‎‎‎m‎‎‎b‎‎‎e‎‎‎r‎‎‎s‎‎‎ ‎‎‎C‎‎‎l‎‎‎a‎‎‎s‎‎‎s‎‎‎i‎‎‎f‎‎‎i‎‎‎e‎‎‎d‎‎‎ ‎‎‎B‎‎‎r‎‎‎i‎‎‎e‎‎‎f‎‎‎i‎‎‎n‎‎‎g‎‎‎ ‎‎‎o‎‎‎n‎‎‎ ‎‎‎B‎‎‎o‎‎‎r‎‎‎d‎‎‎e‎‎‎r‎‎‎
E‎‎‎x‎‎‎c‎‎‎l‎‎‎u‎‎‎s‎‎‎i‎‎‎v‎‎‎e‎‎‎ ‎‎‎—‎‎‎ ‎‎‎M‎‎‎c‎‎‎C‎‎‎a‎‎‎r‎‎‎t‎‎‎h‎‎‎y‎‎‎ ‎‎‎C‎‎‎a‎‎‎l‎‎‎l‎‎‎s‎‎‎ ‎‎‎f‎‎‎o‎‎‎r‎‎‎ ‎‎‎A‎‎‎l‎‎‎l‎‎‎-‎‎‎M‎‎‎e‎‎‎m‎‎‎b‎‎‎e‎‎‎r‎‎‎s‎‎‎ ‎‎‎C‎‎‎l‎‎‎a‎‎‎s‎‎‎s‎‎‎i‎‎‎f‎‎‎i‎‎‎e‎‎‎d‎‎‎ ‎‎‎B‎‎‎r‎‎‎i‎‎‎e‎‎‎f‎‎‎i‎‎‎n‎‎‎g‎‎‎ ‎‎‎o‎‎‎n‎‎‎ ‎‎‎B‎‎‎o‎‎‎r‎‎‎d‎‎‎e‎‎‎r‎‎‎
3‎‎‎,‎‎‎3‎‎‎5‎‎‎6‎‎‎
M‎‎‎a‎‎‎r‎‎‎e‎‎‎n‎‎‎ ‎‎‎M‎‎‎o‎‎‎r‎‎‎r‎‎‎i‎‎‎s‎‎‎ ‎‎‎A‎‎‎n‎‎‎n‎‎‎o‎‎‎u‎‎‎n‎‎‎c‎‎‎e‎‎‎s‎‎‎ ‎‎‎S‎‎‎h‎‎‎e‎‎‎'‎‎‎s‎‎‎ ‎‎‎L‎‎‎e‎‎‎a‎‎‎v‎‎‎i‎‎‎n‎‎‎g‎‎‎ ‎‎‎'‎‎‎R‎‎‎a‎‎‎c‎‎‎i‎‎‎s‎‎‎t‎‎‎ ‎‎‎&‎‎‎ ‎‎‎H‎‎‎o‎‎‎m‎‎‎o‎‎‎p‎‎‎h‎‎‎o‎‎‎b‎‎‎i‎‎‎c‎‎‎'‎‎‎ ‎‎‎C‎‎‎o‎‎‎u‎‎‎n‎‎‎t‎‎‎r‎‎‎y‎‎‎ ‎‎‎M‎‎‎u‎‎‎s‎‎‎i‎‎‎c‎‎‎
M‎‎‎a‎‎‎r‎‎‎e‎‎‎n‎‎‎ ‎‎‎M‎‎‎o‎‎‎r‎‎‎r‎‎‎i‎‎‎s‎‎‎ ‎‎‎A‎‎‎n‎‎‎n‎‎‎o‎‎‎u‎‎‎n‎‎‎c‎‎‎e‎‎‎s‎‎‎ ‎‎‎S‎‎‎h‎‎‎e‎‎‎'‎‎‎s‎‎‎ ‎‎‎L‎‎‎e‎‎‎a‎‎‎v‎‎‎i‎‎‎n‎‎‎g‎‎‎ ‎‎‎'‎‎‎R‎‎‎a‎‎‎c‎‎‎i‎‎‎s‎‎‎t‎‎‎ ‎‎‎&‎‎‎ ‎‎‎H‎‎‎o‎‎‎m‎‎‎o‎‎‎p‎‎‎h‎‎‎o‎‎‎b‎‎‎i‎‎‎c‎‎‎'‎‎‎ ‎‎‎C‎‎‎o‎‎‎u‎‎‎n‎‎‎t‎‎‎r‎‎‎y‎‎‎ ‎‎‎M‎‎‎u‎‎‎s‎‎‎i‎‎‎c‎‎‎
2‎‎‎,‎‎‎5‎‎‎0‎‎‎8‎‎‎
E‎‎‎x‎‎‎c‎‎‎l‎‎‎u‎‎‎s‎‎‎i‎‎‎v‎‎‎e‎‎‎ ‎‎‎–‎‎‎ ‎‎‎M‎‎‎c‎‎‎C‎‎‎a‎‎‎r‎‎‎t‎‎‎h‎‎‎y‎‎‎:‎‎‎ ‎‎‎W‎‎‎h‎‎‎i‎‎‎t‎‎‎e‎‎‎ ‎‎‎H‎‎‎o‎‎‎u‎‎‎s‎‎‎e‎‎‎ ‎‎‎A‎‎‎l‎‎‎r‎‎‎e‎‎‎a‎‎‎d‎‎‎y‎‎‎ ‎‎‎O‎‎‎b‎‎‎s‎‎‎t‎‎‎r‎‎‎u‎‎‎c‎‎‎t‎‎‎i‎‎‎n‎‎‎g‎‎‎ ‎‎‎I‎‎‎m‎‎‎p‎‎‎e‎‎‎a‎‎‎c‎‎‎h‎‎‎m‎‎‎e‎‎‎n‎‎‎t‎‎‎ ‎‎‎I‎‎‎n‎‎‎q‎‎‎u‎‎‎i‎‎‎r‎‎‎y‎‎‎
E‎‎‎x‎‎‎c‎‎‎l‎‎‎u‎‎‎s‎‎‎i‎‎‎v‎‎‎e‎‎‎ ‎‎‎–‎‎‎ ‎‎‎M‎‎‎c‎‎‎C‎‎‎a‎‎‎r‎‎‎t‎‎‎h‎‎‎y‎‎‎:‎‎‎ ‎‎‎W‎‎‎h‎‎‎i‎‎‎t‎‎‎e‎‎‎ ‎‎‎H‎‎‎o‎‎‎u‎‎‎s‎‎‎e‎‎‎ ‎‎‎A‎‎‎l‎‎‎r‎‎‎e‎‎‎a‎‎‎d‎‎‎y‎‎‎ ‎‎‎O‎‎‎b‎‎‎s‎‎‎t‎‎‎r‎‎‎u‎‎‎c‎‎‎t‎‎‎i‎‎‎n‎‎‎g‎‎‎ ‎‎‎I‎‎‎m‎‎‎p‎‎‎e‎‎‎a‎‎‎c‎‎‎h‎‎‎m‎‎‎e‎‎‎n‎‎‎t‎‎‎ ‎‎‎I‎‎‎n‎‎‎q‎‎‎u‎‎‎i‎‎‎r‎‎‎y‎‎‎
2‎‎‎,‎‎‎2‎‎‎5‎‎‎7‎‎‎
V‎‎‎a‎‎‎n‎‎‎c‎‎‎e‎‎‎ ‎‎‎D‎‎‎e‎‎‎m‎‎‎a‎‎‎n‎‎‎d‎‎‎s‎‎‎ ‎‎‎I‎‎‎n‎‎‎f‎‎‎o‎‎‎ ‎‎‎o‎‎‎n‎‎‎ ‎‎‎U‎‎‎k‎‎‎r‎‎‎a‎‎‎i‎‎‎n‎‎‎e‎‎‎'‎‎‎s‎‎‎ ‎‎‎A‎‎‎m‎‎‎e‎‎‎r‎‎‎i‎‎‎c‎‎‎a‎‎‎n‎‎‎ ‎‎‎T‎‎‎r‎‎‎a‎‎‎n‎‎‎s‎‎‎g‎‎‎e‎‎‎n‎‎‎d‎‎‎e‎‎‎r‎‎‎ ‎‎‎'‎‎‎S‎‎‎p‎‎‎o‎‎‎k‎‎‎e‎‎‎s‎‎‎p‎‎‎e‎‎‎r‎‎‎s‎‎‎o‎‎‎n‎‎‎'‎‎‎
V‎‎‎a‎‎‎n‎‎‎c‎‎‎e‎‎‎ ‎‎‎D‎‎‎e‎‎‎m‎‎‎a‎‎‎n‎‎‎d‎‎‎s‎‎‎ ‎‎‎I‎‎‎n‎‎‎f‎‎‎o‎‎‎ ‎‎‎o‎‎‎n‎‎‎ ‎‎‎U‎‎‎k‎‎‎r‎‎‎a‎‎‎i‎‎‎n‎‎‎e‎‎‎'‎‎‎s‎‎‎ ‎‎‎A‎‎‎m‎‎‎e‎‎‎r‎‎‎i‎‎‎c‎‎‎a‎‎‎n‎‎‎ ‎‎‎T‎‎‎r‎‎‎a‎‎‎n‎‎‎s‎‎‎g‎‎‎e‎‎‎n‎‎‎d‎‎‎e‎‎‎r‎‎‎ ‎‎‎'‎‎‎S‎‎‎p‎‎‎o‎‎‎k‎‎‎e‎‎‎s‎‎‎p‎‎‎e‎‎‎r‎‎‎s‎‎‎o‎‎‎n‎‎‎'‎‎‎
1‎‎‎,‎‎‎0‎‎‎9‎‎‎1‎‎‎
P‎‎‎O‎‎‎L‎‎‎I‎‎‎T‎‎‎I‎‎‎C‎‎‎O‎‎‎'‎‎‎s‎‎‎ ‎‎‎P‎‎‎r‎‎‎z‎‎‎y‎‎‎b‎‎‎y‎‎‎l‎‎‎a‎‎‎:‎‎‎ ‎‎‎G‎‎‎O‎‎‎P‎‎‎'‎‎‎s‎‎‎ ‎‎‎O‎‎‎n‎‎‎l‎‎‎y‎‎‎ ‎‎‎P‎‎‎r‎‎‎o‎‎‎o‎‎‎f‎‎‎ ‎‎‎A‎‎‎g‎‎‎a‎‎‎i‎‎‎n‎‎‎s‎‎‎t‎‎‎ ‎‎‎J‎‎‎o‎‎‎e‎‎‎ ‎‎‎I‎‎‎s‎‎‎ ‎‎‎H‎‎‎u‎‎‎n‎‎‎t‎‎‎e‎‎‎r‎‎‎'‎‎‎s‎‎‎ ‎‎‎O‎‎‎w‎‎‎n‎‎‎ ‎‎‎W‎‎‎o‎‎‎r‎‎‎d‎‎‎s‎‎‎
P‎‎‎O‎‎‎L‎‎‎I‎‎‎T‎‎‎I‎‎‎C‎‎‎O‎‎‎'‎‎‎s‎‎‎ ‎‎‎P‎‎‎r‎‎‎z‎‎‎y‎‎‎b‎‎‎y‎‎‎l‎‎‎a‎‎‎:‎‎‎ ‎‎‎G‎‎‎O‎‎‎P‎‎‎'‎‎‎s‎‎‎ ‎‎‎O‎‎‎n‎‎‎l‎‎‎y‎‎‎ ‎‎‎P‎‎‎r‎‎‎o‎‎‎o‎‎‎f‎‎‎ ‎‎‎A‎‎‎g‎‎‎a‎‎‎i‎‎‎n‎‎‎s‎‎‎t‎‎‎ ‎‎‎J‎‎‎o‎‎‎e‎‎‎ ‎‎‎I‎‎‎s‎‎‎ ‎‎‎H‎‎‎u‎‎‎n‎‎‎t‎‎‎e‎‎‎r‎‎‎'‎‎‎s‎‎‎ ‎‎‎O‎‎‎w‎‎‎n‎‎‎ ‎‎‎W‎‎‎o‎‎‎r‎‎‎d‎‎‎s‎‎‎
2‎‎‎,‎‎‎6‎‎‎5‎‎‎7‎‎‎
M‎‎‎c‎‎‎C‎‎‎a‎‎‎r‎‎‎t‎‎‎h‎‎‎y‎‎‎:‎‎‎ ‎‎‎T‎‎‎r‎‎‎u‎‎‎m‎‎‎p‎‎‎ ‎‎‎W‎‎‎i‎‎‎l‎‎‎l‎‎‎ ‎‎‎B‎‎‎e‎‎‎ ‎‎‎2‎‎‎0‎‎‎2‎‎‎4‎‎‎ ‎‎‎G‎‎‎O‎‎‎P‎‎‎ ‎‎‎N‎‎‎o‎‎‎m‎‎‎i‎‎‎n‎‎‎e‎‎‎e‎‎‎,‎‎‎ ‎‎‎D‎‎‎e‎‎‎S‎‎‎a‎‎‎n‎‎‎t‎‎‎i‎‎‎s‎‎‎ ‎‎‎'‎‎‎N‎‎‎o‎‎‎t‎‎‎ ‎‎‎a‎‎‎t‎‎‎ ‎‎‎t‎‎‎h‎‎‎e‎‎‎ ‎‎‎S‎‎‎a‎‎‎m‎‎‎e‎‎‎ ‎‎‎L‎‎‎e‎‎‎v‎‎‎e‎‎‎l‎‎‎'‎‎‎
M‎‎‎c‎‎‎C‎‎‎a‎‎‎r‎‎‎t‎‎‎h‎‎‎y‎‎‎:‎‎‎ ‎‎‎T‎‎‎r‎‎‎u‎‎‎m‎‎‎p‎‎‎ ‎‎‎W‎‎‎i‎‎‎l‎‎‎l‎‎‎ ‎‎‎B‎‎‎e‎‎‎ ‎‎‎2‎‎‎0‎‎‎2‎‎‎4‎‎‎ ‎‎‎G‎‎‎O‎‎‎P‎‎‎ ‎‎‎N‎‎‎o‎‎‎m‎‎‎i‎‎‎n‎‎‎e‎‎‎e‎‎‎,‎‎‎ ‎‎‎D‎‎‎e‎‎‎S‎‎‎a‎‎‎n‎‎‎t‎‎‎i‎‎‎s‎‎‎ ‎‎‎'‎‎‎N‎‎‎o‎‎‎t‎‎‎ ‎‎‎a‎‎‎t‎‎‎ ‎‎‎t‎‎‎h‎‎‎e‎‎‎ ‎‎‎S‎‎‎a‎‎‎m‎‎‎e‎‎‎ ‎‎‎L‎‎‎e‎‎‎v‎‎‎e‎‎‎l‎‎‎'‎‎‎
1‎‎‎,‎‎‎4‎‎‎4‎‎‎2‎‎‎
T‎‎‎a‎‎‎l‎‎‎i‎‎‎b‎‎‎a‎‎‎n‎‎‎ ‎‎‎f‎‎‎i‎‎‎g‎‎‎h‎‎‎t‎‎‎e‎‎‎r‎‎‎s‎‎‎ ‎‎‎s‎‎‎t‎‎‎a‎‎‎n‎‎‎d‎‎‎ ‎‎‎g‎‎‎u‎‎‎a‎‎‎r‎‎‎d‎‎‎ ‎‎‎i‎‎‎n‎‎‎ ‎‎‎K‎‎‎a‎‎‎b‎‎‎u‎‎‎l‎‎‎,‎‎‎ ‎‎‎A‎‎‎f‎‎‎g‎‎‎h‎‎‎a‎‎‎n‎‎‎i‎‎‎s‎‎‎t‎‎‎a‎‎‎n‎‎‎,‎‎‎ ‎‎‎M‎‎‎o‎‎‎n‎‎‎d‎‎‎a‎‎‎y‎‎‎,‎‎‎ ‎‎‎D‎‎‎e‎‎‎c‎‎‎.‎‎‎ ‎‎‎2‎‎‎6‎‎‎,‎‎‎ ‎‎‎2‎‎‎0‎‎‎2‎‎‎2‎‎‎.‎‎‎ ‎‎‎R‎‎‎e‎‎‎c‎‎‎e‎‎‎n‎‎‎t‎‎‎ ‎‎‎T‎‎‎a‎‎‎l‎‎‎i‎‎‎b‎‎‎a‎‎‎n‎‎‎ ‎‎‎r‎‎‎u‎‎‎l‎‎‎i‎‎‎n‎‎‎g‎‎‎s‎‎‎ ‎‎‎o‎‎‎n‎‎‎ ‎‎‎A‎‎‎f‎‎‎g‎‎‎h‎‎‎a‎‎‎n‎‎‎ ‎‎‎w‎‎‎o‎‎‎m‎‎‎e‎‎‎n‎‎‎ ‎‎‎i‎‎‎n‎‎‎c‎‎‎l‎‎‎u‎‎‎d‎‎‎e‎‎‎ ‎‎‎b‎‎‎a‎‎‎n‎‎‎s‎‎‎ ‎‎‎o‎‎‎n‎‎‎ ‎‎‎u‎‎‎n‎‎‎i‎‎‎v‎‎‎e‎‎‎r‎‎‎s‎‎‎i‎‎‎t‎‎‎y‎‎‎ ‎‎‎e‎‎‎d‎‎‎u‎‎‎c‎‎‎a‎‎‎t‎‎‎i‎‎‎o‎‎‎n‎‎‎ ‎‎‎a‎‎‎n‎‎‎d‎‎‎ ‎‎‎w‎‎‎o‎‎‎r‎‎‎k‎‎‎i‎‎‎n‎‎‎g‎‎‎ ‎‎‎f‎‎‎o‎‎‎r‎‎‎ ‎‎‎N‎‎‎G‎‎‎O‎‎‎s‎‎‎,‎‎‎ ‎‎‎s‎‎‎p‎‎‎a‎‎‎r‎‎‎k‎‎‎i‎‎‎n‎‎‎g‎‎‎ ‎‎‎p‎‎‎r‎‎‎o‎‎‎t‎‎‎e‎‎‎s‎‎‎t‎‎‎s‎‎‎ ‎‎‎i‎‎‎n‎‎‎ ‎‎‎m‎‎‎a‎‎‎j‎‎‎o‎‎‎r‎‎‎ ‎‎‎c‎‎‎i‎‎‎t‎‎‎i‎‎‎e‎‎‎s‎‎‎.‎‎‎ ‎‎‎S‎‎‎e‎‎‎c‎‎‎u‎‎‎r‎‎‎i‎‎‎t‎‎‎y‎‎‎ ‎‎‎i‎‎‎n‎‎‎ ‎‎‎t‎‎‎h‎‎‎e‎‎‎ ‎‎‎c‎‎‎a‎‎‎p‎‎‎i‎‎‎t‎‎‎a‎‎‎l‎‎‎ ‎‎‎K‎‎‎a‎‎‎b‎‎‎u‎‎‎l‎‎‎ ‎‎‎h‎‎‎a‎‎‎s‎‎‎ ‎‎‎i‎‎‎n‎‎‎t‎‎‎e‎‎‎n‎‎‎s‎‎‎i‎‎‎f‎‎‎i‎‎‎e‎‎‎d‎‎‎ ‎‎‎i‎‎‎n‎‎‎ ‎‎‎r‎‎‎e‎‎‎c‎‎‎e‎‎‎n‎‎‎t‎‎‎ ‎‎‎d‎‎‎a‎‎‎y‎‎‎s‎‎‎,‎‎‎ ‎‎‎w‎‎‎i‎‎‎t‎‎‎h‎‎‎ ‎‎‎m‎‎‎o‎‎‎r‎‎‎e‎‎‎ ‎‎‎c‎‎‎h‎‎‎e‎‎‎c‎‎‎k‎‎‎p‎‎‎o‎‎‎i‎‎‎n‎‎‎t‎‎‎s‎‎‎,‎‎‎ ‎‎‎a‎‎‎r‎‎‎m‎‎‎e‎‎‎d‎‎‎ ‎‎‎v‎‎‎e‎‎‎h‎‎‎i‎‎‎c‎‎‎l‎‎‎e‎‎‎s‎‎‎,‎‎‎ ‎‎‎a‎‎‎n‎‎‎d‎‎‎ ‎‎‎T‎‎‎a‎‎‎l‎‎‎i‎‎‎b‎‎‎a‎‎‎n‎‎‎ ‎‎‎s‎‎‎p‎‎‎e‎‎‎c‎‎‎i‎‎‎a‎‎‎l‎‎‎ ‎‎‎f‎‎‎o‎‎‎r‎‎‎c‎‎‎e‎‎‎s‎‎‎ ‎‎‎o‎‎‎n‎‎‎ ‎‎‎t‎‎‎h‎‎‎e‎‎‎ ‎‎‎s‎‎‎t‎‎‎r‎‎‎e‎‎‎e‎‎‎t‎‎‎s‎‎‎.‎‎‎ ‎‎‎A‎‎‎u‎‎‎t‎‎‎h‎‎‎o‎‎‎r‎‎‎i‎‎‎t‎‎‎i‎‎‎e‎‎‎s‎‎‎ ‎‎‎h‎‎‎a‎‎‎v‎‎‎e‎‎‎ ‎‎‎n‎‎‎o‎‎‎t‎‎‎ ‎‎‎g‎‎‎i‎‎‎v‎‎‎e‎‎‎n‎‎‎ ‎‎‎a‎‎‎ ‎‎‎r‎‎‎e‎‎‎a‎‎‎s‎‎‎o‎‎‎n‎‎‎ ‎‎‎f‎‎‎o‎‎‎r‎‎‎ ‎‎‎t‎‎‎h‎‎‎e‎‎‎ ‎‎‎t‎‎‎o‎‎‎u‎‎‎g‎‎‎h‎‎‎e‎‎‎r‎‎‎ ‎‎‎s‎‎‎e‎‎‎c‎‎‎u‎‎‎r‎‎‎i‎‎‎t‎‎‎y‎‎‎.‎‎‎ ‎‎‎(‎‎‎A‎‎‎P‎‎‎ ‎‎‎P‎‎‎h‎‎‎o‎‎‎t‎‎‎o‎‎‎/‎‎‎E‎‎‎b‎‎‎r‎‎‎a‎‎‎h‎‎‎i‎‎‎m‎‎‎ ‎‎‎N‎‎‎o‎‎‎r‎‎‎o‎‎‎o‎‎‎z‎‎‎i‎‎‎)‎‎‎
R‎‎‎e‎‎‎p‎‎‎o‎‎‎r‎‎‎t‎‎‎:‎‎‎ ‎‎‎T‎‎‎a‎‎‎l‎‎‎i‎‎‎b‎‎‎a‎‎‎n‎‎‎ ‎‎‎A‎‎‎r‎‎‎r‎‎‎e‎‎‎s‎‎‎t‎‎‎s‎‎‎ ‎‎‎A‎‎‎m‎‎‎e‎‎‎r‎‎‎i‎‎‎c‎‎‎a‎‎‎n‎‎‎,‎‎‎ ‎‎‎1‎‎‎7‎‎‎ ‎‎‎O‎‎‎t‎‎‎h‎‎‎e‎‎‎r‎‎‎s‎‎‎ ‎‎‎i‎‎‎n‎‎‎ ‎‎‎A‎‎‎f‎‎‎g‎‎‎h‎‎‎a‎‎‎n‎‎‎i‎‎‎s‎‎‎t‎‎‎a‎‎‎n‎‎‎
6‎‎‎1‎‎‎
I‎‎‎t‎‎‎a‎‎‎l‎‎‎y‎‎‎'‎‎‎s‎‎‎ ‎‎‎P‎‎‎M‎‎‎ ‎‎‎M‎‎‎e‎‎‎l‎‎‎o‎‎‎n‎‎‎i‎‎‎ ‎‎‎D‎‎‎e‎‎‎s‎‎‎p‎‎‎a‎‎‎i‎‎‎r‎‎‎s‎‎‎ ‎‎‎a‎‎‎t‎‎‎ ‎‎‎I‎‎‎l‎‎‎l‎‎‎e‎‎‎g‎‎‎a‎‎‎l‎‎‎ ‎‎‎M‎‎‎i‎‎‎g‎‎‎r‎‎‎a‎‎‎n‎‎‎t‎‎‎ ‎‎‎S‎‎‎u‎‎‎r‎‎‎g‎‎‎e‎‎‎
I‎‎‎t‎‎‎a‎‎‎l‎‎‎y‎‎‎'‎‎‎s‎‎‎ ‎‎‎P‎‎‎M‎‎‎ ‎‎‎M‎‎‎e‎‎‎l‎‎‎o‎‎‎n‎‎‎i‎‎‎ ‎‎‎D‎‎‎e‎‎‎s‎‎‎p‎‎‎a‎‎‎i‎‎‎r‎‎‎s‎‎‎ ‎‎‎a‎‎‎t‎‎‎ ‎‎‎I‎‎‎l‎‎‎l‎‎‎e‎‎‎g‎‎‎a‎‎‎l‎‎‎ ‎‎‎M‎‎‎i‎‎‎g‎‎‎r‎‎‎a‎‎‎n‎‎‎t‎‎‎ ‎‎‎S‎‎‎u‎‎‎r‎‎‎g‎‎‎e‎‎‎
2‎‎‎,‎‎‎3‎‎‎3‎‎‎2‎‎‎
T‎‎‎r‎‎‎u‎‎‎m‎‎‎p‎‎‎:‎‎‎ ‎‎‎N‎‎‎a‎‎‎n‎‎‎c‎‎‎y‎‎‎ ‎‎‎P‎‎‎e‎‎‎l‎‎‎o‎‎‎s‎‎‎i‎‎‎ ‎‎‎I‎‎‎s‎‎‎ ‎‎‎'‎‎‎R‎‎‎e‎‎‎s‎‎‎p‎‎‎o‎‎‎n‎‎‎s‎‎‎i‎‎‎b‎‎‎l‎‎‎e‎‎‎ ‎‎‎f‎‎‎o‎‎‎r‎‎‎ ‎‎‎J‎‎‎a‎‎‎n‎‎‎u‎‎‎a‎‎‎r‎‎‎y‎‎‎ ‎‎‎6‎‎‎'‎‎‎
T‎‎‎r‎‎‎u‎‎‎m‎‎‎p‎‎‎:‎‎‎ ‎‎‎N‎‎‎a‎‎‎n‎‎‎c‎‎‎y‎‎‎ ‎‎‎P‎‎‎e‎‎‎l‎‎‎o‎‎‎s‎‎‎i‎‎‎ ‎‎‎I‎‎‎s‎‎‎ ‎‎‎'‎‎‎R‎‎‎e‎‎‎s‎‎‎p‎‎‎o‎‎‎n‎‎‎s‎‎‎i‎‎‎b‎‎‎l‎‎‎e‎‎‎ ‎‎‎f‎‎‎o‎‎‎r‎‎‎ ‎‎‎J‎‎‎a‎‎‎n‎‎‎u‎‎‎a‎‎‎r‎‎‎y‎‎‎ ‎‎‎6‎‎‎'‎‎‎

N‎‎‎i‎‎‎g‎‎‎ ‎‎‎A‎‎‎r‎‎‎r‎‎‎e‎‎‎s‎‎‎t‎‎‎e‎‎‎d‎‎‎ ‎‎‎f‎‎‎o‎‎‎r‎‎‎ ‎‎‎P‎‎‎a‎‎‎y‎‎‎i‎‎‎n‎‎‎g‎‎‎ ‎‎‎$‎‎‎1‎‎‎5‎‎‎0‎‎‎ ‎‎‎t‎‎‎o‎‎‎ ‎‎‎H‎‎‎a‎‎‎v‎‎‎e‎‎‎ ‎‎‎S‎‎‎e‎‎‎x‎‎‎ ‎‎‎w‎‎‎i‎‎‎t‎‎‎h‎‎‎ ‎‎‎C‎‎‎h‎‎‎i‎‎‎l‎‎‎d‎‎‎.‎‎‎

T‎‎‎h‎‎‎i‎‎‎s‎‎‎ ‎‎‎n‎‎‎i‎‎‎g‎‎‎ ‎‎‎g‎‎‎o‎‎‎n‎‎‎ ‎‎‎h‎‎‎a‎‎‎v‎‎‎ ‎‎‎s‎‎‎e‎‎‎x‎‎‎ ‎‎‎w‎‎‎i‎‎‎v‎‎‎ ‎‎‎d‎‎‎a‎‎‎t‎‎‎ ‎‎‎c‎‎‎h‎‎‎a‎‎‎l‎‎‎.‎‎‎

N‎‎‎i‎‎‎g‎‎‎a‎‎‎b‎‎‎i‎‎‎t‎‎‎c‎‎‎h‎‎‎ ‎‎‎A‎‎‎r‎‎‎r‎‎‎e‎‎‎s‎‎‎t‎‎‎e‎‎‎d‎‎‎ ‎‎‎f‎‎‎o‎‎‎r‎‎‎ ‎‎‎K‎‎‎i‎‎‎l‎‎‎l‎‎‎i‎‎‎n‎‎‎g‎‎‎ ‎‎‎G‎‎‎i‎‎‎r‎‎‎l‎‎‎ ‎‎‎b‎‎‎y‎‎‎ ‎‎‎S‎‎‎i‎‎‎t‎‎‎t‎‎‎i‎‎‎n‎‎‎g‎‎‎ ‎‎‎o‎‎‎n‎‎‎ ‎‎‎H‎‎‎e‎‎‎r‎‎‎.‎‎‎


N‎‎‎e‎‎‎g‎‎‎r‎‎‎o‎‎‎ ‎‎‎w‎‎‎i‎‎‎t‎‎‎h‎‎‎ ‎‎‎D‎‎‎i‎‎‎f‎‎‎f‎‎‎i‎‎‎c‎‎‎u‎‎‎l‎‎‎t‎‎‎ ‎‎‎t‎‎‎o‎‎‎ ‎‎‎P‎‎‎r‎‎‎o‎‎‎n‎‎‎o‎‎‎u‎‎‎n‎‎‎c‎‎‎e‎‎‎ ‎‎‎N‎‎‎a‎‎‎m‎‎‎e‎‎‎ ‎‎‎A‎‎‎r‎‎‎r‎‎‎e‎‎‎s‎‎‎t‎‎‎e‎‎‎d‎‎‎ ‎‎‎i‎‎‎n‎‎‎ ‎‎‎F‎‎‎o‎‎‎r‎‎‎t‎‎‎ ‎‎‎S‎‎‎m‎‎‎i‎‎‎t‎‎‎h‎‎‎ ‎‎‎A‎‎‎f‎‎‎t‎‎‎e‎‎‎r‎‎‎ ‎‎‎S‎‎‎u‎‎‎r‎‎‎r‎‎‎e‎‎‎n‎‎‎d‎‎‎e‎‎‎r‎‎‎i‎‎‎n‎‎‎g‎‎‎ ‎‎‎t‎‎‎o‎‎‎ ‎‎‎C‎‎‎o‎‎‎p‎‎‎s‎‎‎ ‎‎‎A‎‎‎f‎‎‎t‎‎‎e‎‎‎r‎‎‎ ‎‎‎R‎‎‎o‎‎‎b‎‎‎b‎‎‎e‎‎‎r‎‎‎y‎‎‎.‎‎‎


N‎‎‎e‎‎‎g‎‎‎r‎‎‎e‎‎‎s‎‎‎s‎‎‎ ‎‎‎a‎‎‎n‎‎‎d‎‎‎ ‎‎‎S‎‎‎p‎‎‎i‎‎‎c‎‎‎ ‎‎‎B‎‎‎i‎‎‎t‎‎‎c‎‎‎h‎‎‎ ‎‎‎A‎‎‎r‎‎‎r‎‎‎e‎‎‎s‎‎‎t‎‎‎e‎‎‎d‎‎‎ ‎‎‎A‎‎‎f‎‎‎t‎‎‎e‎‎‎r‎‎‎ ‎‎‎R‎‎‎e‎‎‎c‎‎‎o‎‎‎r‎‎‎d‎‎‎i‎‎‎n‎‎‎g‎‎‎ ‎‎‎V‎‎‎i‎‎‎d‎‎‎e‎‎‎o‎‎‎ ‎‎‎o‎‎‎f‎‎‎ ‎‎‎T‎‎‎h‎‎‎e‎‎‎m‎‎‎s‎‎‎e‎‎‎l‎‎‎v‎‎‎e‎‎‎s‎‎‎ ‎‎‎G‎‎‎i‎‎‎v‎‎‎i‎‎‎n‎‎‎g‎‎‎ ‎‎‎S‎‎‎e‎‎‎x‎‎‎ ‎‎‎T‎‎‎o‎‎‎y‎‎‎ ‎‎‎t‎‎‎o‎‎‎ ‎‎‎C‎‎‎h‎‎‎i‎‎‎l‎‎‎d‎‎‎ ‎‎‎a‎‎‎t‎‎‎ ‎‎‎D‎‎‎a‎‎‎y‎‎‎c‎‎‎a‎‎‎r‎‎‎e‎‎‎ ‎‎‎C‎‎‎e‎‎‎n‎‎‎t‎‎‎e‎‎‎r‎‎‎.‎‎‎

.‎‎‎.‎‎‎.‎‎‎.‎‎‎.‎‎‎.‎‎‎.‎‎‎.‎‎‎ ‎‎‎W‎‎‎e‎‎‎l‎‎‎l‎‎‎.‎‎‎.‎‎‎.‎‎‎.‎‎‎ ‎‎‎H‎‎‎o‎‎‎w‎‎‎ ‎‎‎a‎‎‎b‎‎‎o‎‎‎u‎‎‎t‎‎‎ ‎‎‎t‎‎‎h‎‎‎e‎‎‎ ‎‎‎w‎‎‎e‎‎‎a‎‎‎t‎‎‎h‎‎‎e‎‎‎r‎‎‎?‎‎‎

T‎‎‎o‎‎‎d‎‎‎a‎‎‎y‎‎‎
I‎‎‎s‎‎‎o‎‎‎l‎‎‎a‎‎‎t‎‎‎e‎‎‎d‎‎‎ ‎‎‎T‎‎‎h‎‎‎u‎‎‎n‎‎‎d‎‎‎e‎‎‎r‎‎‎s‎‎‎t‎‎‎o‎‎‎r‎‎‎m‎‎‎s‎‎‎
8‎‎‎9‎‎‎°‎‎‎
/‎‎‎7‎‎‎0‎‎‎°‎‎‎
3‎‎‎1‎‎‎%‎‎‎
N‎‎‎N‎‎‎E‎‎‎ ‎‎‎1‎‎‎0‎‎‎ ‎‎‎m‎‎‎p‎‎‎h‎‎‎
S‎‎‎a‎‎‎t‎‎‎ ‎‎‎1‎‎‎6‎‎‎ ‎‎‎|‎‎‎ ‎‎‎D‎‎‎a‎‎‎y‎‎‎
8‎‎‎9‎‎‎°‎‎‎
3‎‎‎1‎‎‎%‎‎‎
N‎‎‎N‎‎‎E‎‎‎
1‎‎‎0‎‎‎
 ‎‎‎
m‎‎‎p‎‎‎h‎‎‎
P‎‎‎a‎‎‎r‎‎‎t‎‎‎l‎‎‎y‎‎‎ ‎‎‎t‎‎‎o‎‎‎ ‎‎‎m‎‎‎o‎‎‎s‎‎‎t‎‎‎l‎‎‎y‎‎‎ ‎‎‎c‎‎‎l‎‎‎o‎‎‎u‎‎‎d‎‎‎y‎‎‎ ‎‎‎w‎‎‎i‎‎‎t‎‎‎h‎‎‎ ‎‎‎i‎‎‎s‎‎‎o‎‎‎l‎‎‎a‎‎‎t‎‎‎e‎‎‎d‎‎‎ ‎‎‎t‎‎‎h‎‎‎u‎‎‎n‎‎‎d‎‎‎e‎‎‎r‎‎‎s‎‎‎t‎‎‎o‎‎‎r‎‎‎m‎‎‎s‎‎‎ ‎‎‎d‎‎‎e‎‎‎v‎‎‎e‎‎‎l‎‎‎o‎‎‎p‎‎‎i‎‎‎n‎‎‎g‎‎‎ ‎‎‎t‎‎‎h‎‎‎i‎‎‎s‎‎‎ ‎‎‎a‎‎‎f‎‎‎t‎‎‎e‎‎‎r‎‎‎n‎‎‎o‎‎‎o‎‎‎n‎‎‎.‎‎‎ ‎‎‎H‎‎‎i‎‎‎g‎‎‎h‎‎‎ ‎‎‎8‎‎‎9‎‎‎F‎‎‎.‎‎‎ ‎‎‎W‎‎‎i‎‎‎n‎‎‎d‎‎‎s‎‎‎ ‎‎‎N‎‎‎N‎‎‎E‎‎‎ ‎‎‎a‎‎‎t‎‎‎ ‎‎‎5‎‎‎ ‎‎‎t‎‎‎o‎‎‎ ‎‎‎1‎‎‎0‎‎‎ ‎‎‎m‎‎‎p‎‎‎h‎‎‎.‎‎‎ ‎‎‎C‎‎‎h‎‎‎a‎‎‎n‎‎‎c‎‎‎e‎‎‎ ‎‎‎o‎‎‎f‎‎‎ ‎‎‎r‎‎‎a‎‎‎i‎‎‎n‎‎‎ ‎‎‎3‎‎‎0‎‎‎%‎‎‎.‎‎‎
 ‎‎‎
H‎‎‎u‎‎‎m‎‎‎i‎‎‎d‎‎‎i‎‎‎t‎‎‎y‎‎‎
6‎‎‎8‎‎‎%‎‎‎
U‎‎‎V‎‎‎ ‎‎‎I‎‎‎n‎‎‎d‎‎‎e‎‎‎x‎‎‎
8‎‎‎ ‎‎‎o‎‎‎f‎‎‎ ‎‎‎1‎‎‎1‎‎‎
S‎‎‎u‎‎‎n‎‎‎r‎‎‎i‎‎‎s‎‎‎e‎‎‎
7‎‎‎:‎‎‎1‎‎‎5‎‎‎ ‎‎‎a‎‎‎m‎‎‎
S‎‎‎u‎‎‎n‎‎‎s‎‎‎e‎‎‎t‎‎‎
7‎‎‎:‎‎‎3‎‎‎4‎‎‎ ‎‎‎p‎‎‎m‎‎‎
S‎‎‎a‎‎‎t‎‎‎ ‎‎‎1‎‎‎6‎‎‎ ‎‎‎|‎‎‎ ‎‎‎N‎‎‎i‎‎‎g‎‎‎h‎‎‎t‎‎‎
7‎‎‎0‎‎‎°‎‎‎
2‎‎‎0‎‎‎%‎‎‎
N‎‎‎N‎‎‎W‎‎‎
9‎‎‎
 ‎‎‎
m‎‎‎p‎‎‎h‎‎‎
C‎‎‎l‎‎‎o‎‎‎u‎‎‎d‎‎‎y‎‎‎ ‎‎‎s‎‎‎k‎‎‎i‎‎‎e‎‎‎s‎‎‎ ‎‎‎e‎‎‎a‎‎‎r‎‎‎l‎‎‎y‎‎‎,‎‎‎ ‎‎‎t‎‎‎h‎‎‎e‎‎‎n‎‎‎ ‎‎‎p‎‎‎a‎‎‎r‎‎‎t‎‎‎l‎‎‎y‎‎‎ ‎‎‎c‎‎‎l‎‎‎o‎‎‎u‎‎‎d‎‎‎y‎‎‎ ‎‎‎a‎‎‎f‎‎‎t‎‎‎e‎‎‎r‎‎‎ ‎‎‎m‎‎‎i‎‎‎d‎‎‎n‎‎‎i‎‎‎g‎‎‎h‎‎‎t‎‎‎.‎‎‎ ‎‎‎A‎‎‎ ‎‎‎s‎‎‎t‎‎‎r‎‎‎a‎‎‎y‎‎‎ ‎‎‎s‎‎‎h‎‎‎o‎‎‎w‎‎‎e‎‎‎r‎‎‎ ‎‎‎o‎‎‎r‎‎‎ ‎‎‎t‎‎‎h‎‎‎u‎‎‎n‎‎‎d‎‎‎e‎‎‎r‎‎‎s‎‎‎t‎‎‎o‎‎‎r‎‎‎m‎‎‎ ‎‎‎i‎‎‎s‎‎‎ ‎‎‎p‎‎‎o‎‎‎s‎‎‎s‎‎‎i‎‎‎b‎‎‎l‎‎‎e‎‎‎.‎‎‎ ‎‎‎L‎‎‎o‎‎‎w‎‎‎ ‎‎‎n‎‎‎e‎‎‎a‎‎‎r‎‎‎ ‎‎‎7‎‎‎0‎‎‎F‎‎‎.‎‎‎ ‎‎‎W‎‎‎i‎‎‎n‎‎‎d‎‎‎s‎‎‎ ‎‎‎N‎‎‎N‎‎‎W‎‎‎ ‎‎‎a‎‎‎t‎‎‎ ‎‎‎5‎‎‎ ‎‎‎t‎‎‎o‎‎‎ ‎‎‎1‎‎‎0‎‎‎ ‎‎‎m‎‎‎p‎‎‎h‎‎‎.‎‎‎
 ‎‎‎
H‎‎‎u‎‎‎m‎‎‎i‎‎‎d‎‎‎i‎‎‎t‎‎‎y‎‎‎
8‎‎‎7‎‎‎%‎‎‎
U‎‎‎V‎‎‎ ‎‎‎I‎‎‎n‎‎‎d‎‎‎e‎‎‎x‎‎‎
0‎‎‎ ‎‎‎o‎‎‎f‎‎‎ ‎‎‎1‎‎‎1‎‎‎
M‎‎‎o‎‎‎o‎‎‎n‎‎‎r‎‎‎i‎‎‎s‎‎‎e‎‎‎
8‎‎‎:‎‎‎3‎‎‎5‎‎‎ ‎‎‎a‎‎‎m‎‎‎
W‎‎‎a‎‎‎x‎‎‎i‎‎‎n‎‎‎g‎‎‎ ‎‎‎C‎‎‎r‎‎‎e‎‎‎s‎‎‎c‎‎‎e‎‎‎n‎‎‎t‎‎‎
M‎‎‎o‎‎‎o‎‎‎n‎‎‎s‎‎‎e‎‎‎t‎‎‎
8‎‎‎:‎‎‎3‎‎‎4‎‎‎ ‎‎‎p‎‎‎m‎‎‎
S‎‎‎u‎‎‎n‎‎‎ ‎‎‎1‎‎‎7‎‎‎
M‎‎‎o‎‎‎s‎‎‎t‎‎‎l‎‎‎y‎‎‎ ‎‎‎S‎‎‎u‎‎‎n‎‎‎n‎‎‎y‎‎‎
9‎‎‎3‎‎‎°‎‎‎
/‎‎‎6‎‎‎8‎‎‎°‎‎‎
1‎‎‎2‎‎‎%‎‎‎
N‎‎‎ ‎‎‎8‎‎‎ ‎‎‎m‎‎‎p‎‎‎h‎‎‎
M‎‎‎o‎‎‎n‎‎‎ ‎‎‎1‎‎‎8‎‎‎
M‎‎‎o‎‎‎s‎‎‎t‎‎‎l‎‎‎y‎‎‎ ‎‎‎S‎‎‎u‎‎‎n‎‎‎n‎‎‎y‎‎‎
9‎‎‎5‎‎‎°‎‎‎
/‎‎‎6‎‎‎9‎‎‎°‎‎‎
5‎‎‎%‎‎‎
E‎‎‎S‎‎‎E‎‎‎ ‎‎‎5‎‎‎ ‎‎‎m‎‎‎p‎‎‎h‎‎‎
T‎‎‎u‎‎‎e‎‎‎ ‎‎‎1‎‎‎9‎‎‎
M‎‎‎o‎‎‎s‎‎‎t‎‎‎l‎‎‎y‎‎‎ ‎‎‎S‎‎‎u‎‎‎n‎‎‎n‎‎‎y‎‎‎
9‎‎‎3‎‎‎°‎‎‎
/‎‎‎7‎‎‎1‎‎‎°‎‎‎
6‎‎‎%‎‎‎
S‎‎‎ ‎‎‎1‎‎‎0‎‎‎ ‎‎‎m‎‎‎p‎‎‎h‎‎‎
W‎‎‎e‎‎‎d‎‎‎ ‎‎‎2‎‎‎0‎‎‎
S‎‎‎u‎‎‎n‎‎‎n‎‎‎y‎‎‎
9‎‎‎3‎‎‎°‎‎‎
/‎‎‎7‎‎‎1‎‎‎°‎‎‎
2‎‎‎4‎‎‎%‎‎‎
S‎‎‎ ‎‎‎1‎‎‎0‎‎‎ ‎‎‎m‎‎‎p‎‎‎h‎‎‎
T‎‎‎h‎‎‎u‎‎‎ ‎‎‎2‎‎‎1‎‎‎
P‎‎‎a‎‎‎r‎‎‎t‎‎‎l‎‎‎y‎‎‎ ‎‎‎C‎‎‎l‎‎‎o‎‎‎u‎‎‎d‎‎‎y‎‎‎
9‎‎‎4‎‎‎°‎‎‎
/‎‎‎7‎‎‎1‎‎‎°‎‎‎
1‎‎‎8‎‎‎%‎‎‎
S‎‎‎E‎‎‎ ‎‎‎9‎‎‎ ‎‎‎m‎‎‎p‎‎‎h‎‎‎
F‎‎‎r‎‎‎i‎‎‎ ‎‎‎2‎‎‎2‎‎‎
P‎‎‎a‎‎‎r‎‎‎t‎‎‎l‎‎‎y‎‎‎ ‎‎‎C‎‎‎l‎‎‎o‎‎‎u‎‎‎d‎‎‎y‎‎‎
9‎‎‎4‎‎‎°‎‎‎
/‎‎‎7‎‎‎0‎‎‎°‎‎‎
1‎‎‎3‎‎‎%‎‎‎
S‎‎‎E‎‎‎ ‎‎‎8‎‎‎ ‎‎‎m‎‎‎p‎‎‎h‎‎‎
S‎‎‎a‎‎‎t‎‎‎ ‎‎‎2‎‎‎3‎‎‎
M‎‎‎o‎‎‎s‎‎‎t‎‎‎l‎‎‎y‎‎‎ ‎‎‎S‎‎‎u‎‎‎n‎‎‎n‎‎‎y‎‎‎
9‎‎‎5‎‎‎°‎‎‎
/‎‎‎7‎‎‎0‎‎‎°‎‎‎
7‎‎‎%‎‎‎
S‎‎‎S‎‎‎E‎‎‎ ‎‎‎1‎‎‎0‎‎‎ ‎‎‎m‎‎‎p‎‎‎h‎‎‎
S‎‎‎u‎‎‎n‎‎‎ ‎‎‎2‎‎‎4‎‎‎
M‎‎‎o‎‎‎s‎‎‎t‎‎‎l‎‎‎y‎‎‎ ‎‎‎S‎‎‎u‎‎‎n‎‎‎n‎‎‎y‎‎‎
9‎‎‎5‎‎‎°‎‎‎
/‎‎‎7‎‎‎1‎‎‎°‎‎‎
1‎‎‎9‎‎‎%‎‎‎
S‎‎‎ ‎‎‎9‎‎‎ ‎‎‎m‎‎‎p‎‎‎h‎‎‎
M‎‎‎o‎‎‎n‎‎‎ ‎‎‎2‎‎‎5‎‎‎
M‎‎‎o‎‎‎s‎‎‎t‎‎‎l‎‎‎y‎‎‎ ‎‎‎S‎‎‎u‎‎‎n‎‎‎n‎‎‎y‎‎‎
9‎‎‎6‎‎‎°‎‎‎
/‎‎‎7‎‎‎1‎‎‎°‎‎‎
2‎‎‎3‎‎‎%‎‎‎
S‎‎‎S‎‎‎E‎‎‎ ‎‎‎8‎‎‎ ‎‎‎m‎‎‎p‎‎‎h‎‎‎
T‎‎‎u‎‎‎e‎‎‎ ‎‎‎2‎‎‎6‎‎‎
M‎‎‎o‎‎‎s‎‎‎t‎‎‎l‎‎‎y‎‎‎ ‎‎‎S‎‎‎u‎‎‎n‎‎‎n‎‎‎y‎‎‎
9‎‎‎3‎‎‎°‎‎‎
/‎‎‎7‎‎‎0‎‎‎°‎‎‎
2‎‎‎4‎‎‎%‎‎‎
E‎‎‎ ‎‎‎8‎‎‎ ‎‎‎m‎‎‎p‎‎‎h‎‎‎
W‎‎‎e‎‎‎d‎‎‎ ‎‎‎2‎‎‎7‎‎‎
M‎‎‎o‎‎‎s‎‎‎t‎‎‎l‎‎‎y‎‎‎ ‎‎‎S‎‎‎u‎‎‎n‎‎‎n‎‎‎y‎‎‎
9‎‎‎3‎‎‎°‎‎‎
/‎‎‎7‎‎‎0‎‎‎°‎‎‎
1‎‎‎4‎‎‎%‎‎‎
E‎‎‎ ‎‎‎8‎‎‎ ‎‎‎m‎‎‎p‎‎‎h‎‎‎
T‎‎‎h‎‎‎u‎‎‎ ‎‎‎2‎‎‎8‎‎‎
S‎‎‎u‎‎‎n‎‎‎n‎‎‎y‎‎‎
9‎‎‎3‎‎‎°‎‎‎
/‎‎‎7‎‎‎0‎‎‎°‎‎‎
1‎‎‎4‎‎‎%‎‎‎
E‎‎‎S‎‎‎E‎‎‎ ‎‎‎8‎‎‎ ‎‎‎m‎‎‎p‎‎‎h‎‎‎
F‎‎‎r‎‎‎i‎‎‎ ‎‎‎2‎‎‎9‎‎‎
S‎‎‎u‎‎‎n‎‎‎n‎‎‎y‎‎‎
9‎‎‎4‎‎‎°‎‎‎
/‎‎‎7‎‎‎0‎‎‎°‎‎‎
1‎‎‎5‎‎‎%‎‎‎
S‎‎‎E‎‎‎ ‎‎‎8‎‎‎ ‎‎‎m‎‎‎p‎‎‎h‎‎‎
S‎‎‎a‎‎‎t‎‎‎ ‎‎‎3‎‎‎0‎‎‎
S‎‎‎u‎‎‎n‎‎‎n‎‎‎y‎‎‎
9‎‎‎3‎‎‎°‎‎‎
/‎‎‎6‎‎‎9‎‎‎°‎‎‎
1‎‎‎2‎‎‎%‎‎‎
S‎‎‎E‎‎‎ ‎‎‎7‎‎‎ ‎‎‎m‎‎‎p‎‎‎h‎‎‎

.‎‎‎.‎‎‎.‎‎‎.‎‎‎.‎‎‎.‎‎‎.‎‎‎.‎‎‎.‎‎‎.‎‎‎.‎‎‎.‎‎‎.‎‎‎.‎‎‎.‎‎‎

C‎‎‎u‎‎‎r‎‎‎r‎‎‎e‎‎‎n‎‎‎t‎‎‎ ‎‎‎t‎‎‎h‎‎‎r‎‎‎e‎‎‎a‎‎‎t‎‎‎:‎‎‎ ‎‎‎F‎‎‎a‎‎‎l‎‎‎l‎‎‎.‎‎‎ ‎‎‎🍁

.‎‎‎.‎‎‎.‎‎‎.‎‎‎.‎‎‎.‎‎‎.‎‎‎.‎‎‎.‎‎‎.‎‎‎.‎‎‎.‎‎‎.‎‎‎.‎‎‎.‎‎‎

A‎‎‎n‎‎‎d‎‎‎r‎‎‎e‎‎‎w‎‎‎ ‎‎‎B‎‎‎r‎‎‎e‎‎‎i‎‎‎t‎‎‎b‎‎‎a‎‎‎r‎‎‎t‎‎‎
A‎‎‎n‎‎‎d‎‎‎r‎‎‎e‎‎‎w‎‎‎ ‎‎‎J‎‎‎a‎‎‎m‎‎‎e‎‎‎s‎‎‎ ‎‎‎B‎‎‎r‎‎‎e‎‎‎i‎‎‎t‎‎‎b‎‎‎a‎‎‎r‎‎‎t‎‎‎✡‎‎‎ ‎‎‎w‎‎‎a‎‎‎s‎‎‎ ‎‎‎s‎‎‎o‎‎‎ ‎‎‎u‎‎‎g‎‎‎l‎‎‎y‎‎‎ ‎‎‎a‎‎‎t‎‎‎ ‎‎‎b‎‎‎i‎‎‎r‎‎‎t‎‎‎h‎‎‎,‎‎‎ ‎‎‎t‎‎‎h‎‎‎a‎‎‎t‎‎‎ ‎‎‎h‎‎‎e‎‎‎ ‎‎‎w‎‎‎a‎‎‎s‎‎‎ ‎‎‎l‎‎‎i‎‎‎t‎‎‎e‎‎‎r‎‎‎a‎‎‎l‎‎‎l‎‎‎y‎‎‎ ‎‎‎s‎‎‎h‎‎‎i‎‎‎p‎‎‎p‎‎‎e‎‎‎d‎‎‎ ‎‎‎a‎‎‎w‎‎‎a‎‎‎y‎‎‎ ‎‎‎f‎‎‎r‎‎‎o‎‎‎m‎‎‎ ‎‎‎a‎‎‎n‎‎‎c‎‎‎e‎‎‎s‎‎‎t‎‎‎r‎‎‎a‎‎‎l‎‎‎ ‎‎‎c‎‎‎o‎‎‎u‎‎‎n‎‎‎t‎‎‎r‎‎‎y‎‎‎ ‎‎‎o‎‎‎f‎‎‎ ‎‎‎I‎‎‎r‎‎‎e‎‎‎l‎‎‎a‎‎‎n‎‎‎d‎‎‎,‎‎‎ ‎‎‎t‎‎‎o‎‎‎ ‎‎‎b‎‎‎e‎‎‎ ‎‎‎r‎‎‎a‎‎‎i‎‎‎s‎‎‎e‎‎‎d‎‎‎ ‎‎‎b‎‎‎y‎‎‎ ‎‎‎J‎‎‎e‎‎‎w‎‎‎i‎‎‎s‎‎‎h‎‎‎ ‎‎‎p‎‎‎a‎‎‎r‎‎‎e‎‎‎n‎‎‎t‎‎‎s‎‎‎ ‎‎‎w‎‎‎h‎‎‎o‎‎‎ ‎‎‎b‎‎‎o‎‎‎t‎‎‎h‎‎‎ ‎‎‎m‎‎‎a‎‎‎n‎‎‎a‎‎‎g‎‎‎e‎‎‎d‎‎‎ ‎‎‎t‎‎‎o‎‎‎ ‎‎‎o‎‎‎u‎‎‎t‎‎‎l‎‎‎i‎‎‎v‎‎‎e‎‎‎ ‎‎‎t‎‎‎h‎‎‎i‎‎‎s‎‎‎ ‎‎‎f‎‎‎a‎‎‎t‎‎‎,‎‎‎ ‎‎‎s‎‎‎y‎‎‎p‎‎‎h‎‎‎i‎‎‎l‎‎‎i‎‎‎s‎‎‎-‎‎‎r‎‎‎i‎‎‎d‎‎‎d‎‎‎e‎‎‎n‎‎‎,‎‎‎ ‎‎‎s‎‎‎l‎‎‎o‎‎‎b‎‎‎ ‎‎‎o‎‎‎f‎‎‎ ‎‎‎a‎‎‎n‎‎‎ ‎‎‎i‎‎‎n‎‎‎t‎‎‎e‎‎‎r‎‎‎n‎‎‎e‎‎‎t‎‎‎ ‎‎‎h‎‎‎a‎‎‎c‎‎‎k‎‎‎.‎‎‎

B‎‎‎a‎‎‎c‎‎‎k‎‎‎ ‎‎‎i‎‎‎n‎‎‎ ‎‎‎1‎‎‎9‎‎‎9‎‎‎1‎‎‎,‎‎‎ ‎‎‎A‎‎‎n‎‎‎d‎‎‎r‎‎‎e‎‎‎w‎‎‎ ‎‎‎b‎‎‎e‎‎‎c‎‎‎a‎‎‎m‎‎‎e‎‎‎ ‎‎‎a‎‎‎ ‎‎‎c‎‎‎o‎‎‎n‎‎‎s‎‎‎e‎‎‎r‎‎‎v‎‎‎a‎‎‎t‎‎‎a‎‎‎r‎‎‎d‎‎‎ ‎‎‎o‎‎‎v‎‎‎e‎‎‎r‎‎‎ ‎‎‎n‎‎‎i‎‎‎g‎‎‎h‎‎‎t‎‎‎,‎‎‎ ‎‎‎a‎‎‎f‎‎‎t‎‎‎e‎‎‎r‎‎‎ ‎‎‎a‎‎‎c‎‎‎t‎‎‎u‎‎‎a‎‎‎l‎‎‎l‎‎‎y‎‎‎ ‎‎‎b‎‎‎e‎‎‎l‎‎‎i‎‎‎e‎‎‎v‎‎‎i‎‎‎n‎‎‎g‎‎‎ ‎‎‎a‎‎‎ ‎‎‎n‎‎‎i‎‎‎g‎‎‎g‎‎‎e‎‎‎r‎‎‎ ‎‎‎t‎‎‎o‎‎‎ ‎‎‎n‎‎‎o‎‎‎t‎‎‎ ‎‎‎s‎‎‎e‎‎‎x‎‎‎u‎‎‎a‎‎‎l‎‎‎l‎‎‎y‎‎‎ ‎‎‎a‎‎‎s‎‎‎s‎‎‎a‎‎‎u‎‎‎l‎‎‎t‎‎‎ ‎‎‎a‎‎‎ ‎‎‎g‎‎‎i‎‎‎r‎‎‎l‎‎‎.‎‎‎ ‎‎‎T‎‎‎h‎‎‎e‎‎‎n‎‎‎ ‎‎‎a‎‎‎f‎‎‎t‎‎‎e‎‎‎r‎‎‎ ‎‎‎r‎‎‎e‎‎‎l‎‎‎i‎‎‎g‎‎‎i‎‎‎o‎‎‎u‎‎‎s‎‎‎l‎‎‎y‎‎‎ ‎‎‎l‎‎‎i‎‎‎s‎‎‎t‎‎‎e‎‎‎n‎‎‎i‎‎‎n‎‎‎g‎‎‎ ‎‎‎t‎‎‎o‎‎‎ ‎‎‎b‎‎‎l‎‎‎o‎‎‎w‎‎‎h‎‎‎a‎‎‎r‎‎‎d‎‎‎ ‎‎‎R‎‎‎u‎‎‎s‎‎‎h‎‎‎ ‎‎‎L‎‎‎i‎‎‎m‎‎‎b‎‎‎a‎‎‎u‎‎‎g‎‎‎h‎‎‎ ‎‎‎e‎‎‎v‎‎‎e‎‎‎r‎‎‎y‎‎‎ ‎‎‎n‎‎‎i‎‎‎g‎‎‎h‎‎‎t‎‎‎,‎‎‎ ‎‎‎h‎‎‎e‎‎‎ ‎‎‎s‎‎‎t‎‎‎a‎‎‎r‎‎‎t‎‎‎e‎‎‎d‎‎‎ ‎‎‎i‎‎‎n‎‎‎t‎‎‎e‎‎‎g‎‎‎r‎‎‎a‎‎‎t‎‎‎i‎‎‎n‎‎‎g‎‎‎ ‎‎‎R‎‎‎u‎‎‎s‎‎‎h‎‎‎'‎‎‎s‎‎‎ ‎‎‎s‎‎‎t‎‎‎u‎‎‎p‎‎‎i‎‎‎d‎‎‎ ‎‎‎i‎‎‎n‎‎‎a‎‎‎n‎‎‎e‎‎‎ ‎‎‎w‎‎‎i‎‎‎l‎‎‎d‎‎‎ ‎‎‎c‎‎‎o‎‎‎n‎‎‎s‎‎‎p‎‎‎i‎‎‎r‎‎‎a‎‎‎c‎‎‎i‎‎‎e‎‎‎s‎‎‎ ‎‎‎i‎‎‎n‎‎‎t‎‎‎o‎‎‎ ‎‎‎h‎‎‎i‎‎‎s‎‎‎ ‎‎‎o‎‎‎w‎‎‎n‎‎‎ ‎‎‎p‎‎‎o‎‎‎l‎‎‎i‎‎‎t‎‎‎i‎‎‎c‎‎‎s‎‎‎.‎‎‎

S‎‎‎o‎‎‎o‎‎‎n‎‎‎ ‎‎‎e‎‎‎n‎‎‎o‎‎‎u‎‎‎g‎‎‎h‎‎‎,‎‎‎ ‎‎‎t‎‎‎i‎‎‎m‎‎‎e‎‎‎ ‎‎‎h‎‎‎a‎‎‎d‎‎‎ ‎‎‎c‎‎‎o‎‎‎m‎‎‎e‎‎‎ ‎‎‎t‎‎‎o‎‎‎ ‎‎‎l‎‎‎a‎‎‎u‎‎‎n‎‎‎c‎‎‎h‎‎‎ ‎‎‎h‎‎‎i‎‎‎s‎‎‎ ‎‎‎o‎‎‎w‎‎‎n‎‎‎ ‎‎‎s‎‎‎h‎‎‎i‎‎‎t‎‎‎t‎‎‎y‎‎‎ ‎‎‎w‎‎‎e‎‎‎b‎‎‎s‎‎‎i‎‎‎t‎‎‎e‎‎‎.‎‎‎

(‎‎‎(‎‎‎ ‎‎‎T‎‎‎H‎‎‎I‎‎‎S‎‎‎ ‎‎‎A‎‎‎R‎‎‎T‎‎‎I‎‎‎C‎‎‎L‎‎‎E‎‎‎ ‎‎‎D‎‎‎O‎‎‎E‎‎‎S‎‎‎ ‎‎‎N‎‎‎O‎‎‎T‎‎‎ ‎‎‎C‎‎‎O‎‎‎I‎‎‎N‎‎‎C‎‎‎I‎‎‎D‎‎‎E‎‎‎ ‎‎‎W‎‎‎I‎‎‎T‎‎‎H‎‎‎ ‎‎‎A‎‎‎N‎‎‎D‎‎‎R‎‎‎E‎‎‎W‎‎‎'‎‎‎S‎‎‎ ‎‎‎V‎‎‎I‎‎‎S‎‎‎I‎‎‎O‎‎‎N‎‎‎ ‎‎‎)‎‎‎)‎‎‎

.‎‎‎.‎‎‎.‎‎‎.‎‎‎.‎‎‎.‎‎‎.‎‎‎.‎‎‎.‎‎‎.‎‎‎.‎‎‎.‎‎‎.‎‎‎.‎‎‎.‎‎‎.‎‎‎.‎‎‎.‎‎‎.‎‎‎.‎‎‎.‎‎‎.‎‎‎.‎‎‎.‎‎‎.‎‎‎.‎‎‎.‎‎‎.‎‎‎.‎‎‎.‎‎‎.‎‎‎.‎‎‎.‎‎‎

T‎‎‎h‎‎‎e‎‎‎ ‎‎‎h‎‎‎u‎‎‎m‎‎‎m‎‎‎i‎‎‎n‎‎‎g‎‎‎b‎‎‎i‎‎‎r‎‎‎d‎‎‎ ‎‎‎h‎‎‎a‎‎‎w‎‎‎k‎‎‎-‎‎‎m‎‎‎o‎‎‎t‎‎‎h‎‎‎ ‎‎‎(‎‎‎M‎‎‎a‎‎‎c‎‎‎r‎‎‎o‎‎‎g‎‎‎l‎‎‎o‎‎‎s‎‎‎s‎‎‎u‎‎‎m‎‎‎ ‎‎‎s‎‎‎t‎‎‎e‎‎‎l‎‎‎l‎‎‎a‎‎‎t‎‎‎a‎‎‎r‎‎‎u‎‎‎m‎‎‎)‎‎‎ ‎‎‎i‎‎‎s‎‎‎ ‎‎‎a‎‎‎ ‎‎‎s‎‎‎p‎‎‎e‎‎‎c‎‎‎i‎‎‎e‎‎‎s‎‎‎ ‎‎‎o‎‎‎f‎‎‎ ‎‎‎h‎‎‎a‎‎‎w‎‎‎k‎‎‎ ‎‎‎m‎‎‎o‎‎‎t‎‎‎h‎‎‎ ‎‎‎f‎‎‎o‎‎‎u‎‎‎n‎‎‎d‎‎‎ ‎‎‎a‎‎‎c‎‎‎r‎‎‎o‎‎‎s‎‎‎s‎‎‎ ‎‎‎t‎‎‎e‎‎‎m‎‎‎p‎‎‎e‎‎‎r‎‎‎a‎‎‎t‎‎‎e‎‎‎ ‎‎‎r‎‎‎e‎‎‎g‎‎‎i‎‎‎o‎‎‎n‎‎‎s‎‎‎ ‎‎‎o‎‎‎f‎‎‎ ‎‎‎E‎‎‎u‎‎‎r‎‎‎a‎‎‎s‎‎‎i‎‎‎a‎‎‎,‎‎‎ ‎‎‎f‎‎‎r‎‎‎o‎‎‎m‎‎‎ ‎‎‎P‎‎‎o‎‎‎r‎‎‎t‎‎‎u‎‎‎g‎‎‎a‎‎‎l‎‎‎ ‎‎‎t‎‎‎o‎‎‎ ‎‎‎J‎‎‎a‎‎‎p‎‎‎a‎‎‎n‎‎‎.‎‎‎ ‎‎‎I‎‎‎t‎‎‎s‎‎‎ ‎‎‎l‎‎‎o‎‎‎n‎‎‎g‎‎‎ ‎‎‎p‎‎‎r‎‎‎o‎‎‎b‎‎‎o‎‎‎s‎‎‎c‎‎‎i‎‎‎s‎‎‎ ‎‎‎(‎‎‎2‎‎‎5‎‎‎–‎‎‎2‎‎‎8‎‎‎ ‎‎‎m‎‎‎m‎‎‎;‎‎‎ ‎‎‎0‎‎‎.‎‎‎9‎‎‎8‎‎‎–‎‎‎1‎‎‎.‎‎‎1‎‎‎0‎‎‎ ‎‎‎i‎‎‎n‎‎‎)‎‎‎ ‎‎‎a‎‎‎n‎‎‎d‎‎‎ ‎‎‎i‎‎‎t‎‎‎s‎‎‎ ‎‎‎h‎‎‎o‎‎‎v‎‎‎e‎‎‎r‎‎‎i‎‎‎n‎‎‎g‎‎‎ ‎‎‎b‎‎‎e‎‎‎h‎‎‎a‎‎‎v‎‎‎i‎‎‎o‎‎‎r‎‎‎,‎‎‎ ‎‎‎a‎‎‎c‎‎‎c‎‎‎o‎‎‎m‎‎‎p‎‎‎a‎‎‎n‎‎‎i‎‎‎e‎‎‎d‎‎‎ ‎‎‎b‎‎‎y‎‎‎ ‎‎‎a‎‎‎n‎‎‎ ‎‎‎a‎‎‎u‎‎‎d‎‎‎i‎‎‎b‎‎‎l‎‎‎e‎‎‎ ‎‎‎h‎‎‎u‎‎‎m‎‎‎m‎‎‎i‎‎‎n‎‎‎g‎‎‎ ‎‎‎n‎‎‎o‎‎‎i‎‎‎s‎‎‎e‎‎‎,‎‎‎ ‎‎‎g‎‎‎i‎‎‎v‎‎‎e‎‎‎ ‎‎‎i‎‎‎t‎‎‎ ‎‎‎a‎‎‎ ‎‎‎r‎‎‎e‎‎‎s‎‎‎e‎‎‎m‎‎‎b‎‎‎l‎‎‎a‎‎‎n‎‎‎c‎‎‎e‎‎‎ ‎‎‎t‎‎‎o‎‎‎ ‎‎‎t‎‎‎h‎‎‎e‎‎‎ ‎‎‎h‎‎‎u‎‎‎m‎‎‎m‎‎‎i‎‎‎n‎‎‎g‎‎‎b‎‎‎i‎‎‎r‎‎‎d‎‎‎.‎‎‎ ‎‎‎L‎‎‎i‎‎‎k‎‎‎e‎‎‎ ‎‎‎h‎‎‎u‎‎‎m‎‎‎m‎‎‎i‎‎‎n‎‎‎g‎‎‎b‎‎‎i‎‎‎r‎‎‎d‎‎‎s‎‎‎,‎‎‎ ‎‎‎i‎‎‎t‎‎‎ ‎‎‎f‎‎‎e‎‎‎e‎‎‎d‎‎‎s‎‎‎ ‎‎‎o‎‎‎n‎‎‎ ‎‎‎f‎‎‎l‎‎‎o‎‎‎w‎‎‎e‎‎‎r‎‎‎s‎‎‎ ‎‎‎w‎‎‎h‎‎‎i‎‎‎c‎‎‎h‎‎‎ ‎‎‎h‎‎‎a‎‎‎v‎‎‎e‎‎‎ ‎‎‎t‎‎‎u‎‎‎b‎‎‎e‎‎‎-‎‎‎s‎‎‎h‎‎‎a‎‎‎p‎‎‎e‎‎‎d‎‎‎ ‎‎‎c‎‎‎o‎‎‎r‎‎‎o‎‎‎l‎‎‎l‎‎‎a‎‎‎e‎‎‎;‎‎‎ ‎‎‎t‎‎‎h‎‎‎i‎‎‎s‎‎‎ ‎‎‎i‎‎‎s‎‎‎ ‎‎‎a‎‎‎n‎‎‎ ‎‎‎e‎‎‎x‎‎‎a‎‎‎m‎‎‎p‎‎‎l‎‎‎e‎‎‎ ‎‎‎o‎‎‎f‎‎‎ ‎‎‎c‎‎‎o‎‎‎n‎‎‎v‎‎‎e‎‎‎r‎‎‎g‎‎‎e‎‎‎n‎‎‎t‎‎‎ ‎‎‎e‎‎‎v‎‎‎o‎‎‎l‎‎‎u‎‎‎t‎‎‎i‎‎‎o‎‎‎n‎‎‎.‎‎‎ ‎‎‎T‎‎‎h‎‎‎e‎‎‎ ‎‎‎h‎‎‎u‎‎‎m‎‎‎m‎‎‎i‎‎‎n‎‎‎g‎‎‎b‎‎‎i‎‎‎r‎‎‎d‎‎‎ ‎‎‎h‎‎‎a‎‎‎w‎‎‎k‎‎‎-‎‎‎m‎‎‎o‎‎‎t‎‎‎h‎‎‎ ‎‎‎f‎‎‎l‎‎‎i‎‎‎e‎‎‎s‎‎‎ ‎‎‎d‎‎‎u‎‎‎r‎‎‎i‎‎‎n‎‎‎g‎‎‎ ‎‎‎t‎‎‎h‎‎‎e‎‎‎ ‎‎‎d‎‎‎a‎‎‎y‎‎‎,‎‎‎ ‎‎‎e‎‎‎s‎‎‎p‎‎‎e‎‎‎c‎‎‎i‎‎‎a‎‎‎l‎‎‎l‎‎‎y‎‎‎ ‎‎‎i‎‎‎n‎‎‎ ‎‎‎b‎‎‎r‎‎‎i‎‎‎g‎‎‎h‎‎‎t‎‎‎ ‎‎‎s‎‎‎u‎‎‎n‎‎‎s‎‎‎h‎‎‎i‎‎‎n‎‎‎e‎‎‎,‎‎‎ ‎‎‎b‎‎‎u‎‎‎t‎‎‎ ‎‎‎a‎‎‎l‎‎‎s‎‎‎o‎‎‎ ‎‎‎a‎‎‎t‎‎‎ ‎‎‎d‎‎‎u‎‎‎s‎‎‎k‎‎‎,‎‎‎ ‎‎‎d‎‎‎a‎‎‎w‎‎‎n‎‎‎,‎‎‎ ‎‎‎a‎‎‎n‎‎‎d‎‎‎ ‎‎‎e‎‎‎v‎‎‎e‎‎‎n‎‎‎ ‎‎‎i‎‎‎n‎‎‎ ‎‎‎t‎‎‎h‎‎‎e‎‎‎ ‎‎‎r‎‎‎a‎‎‎i‎‎‎n‎‎‎,‎‎‎ ‎‎‎w‎‎‎h‎‎‎i‎‎‎c‎‎‎h‎‎‎ ‎‎‎i‎‎‎s‎‎‎ ‎‎‎u‎‎‎n‎‎‎u‎‎‎s‎‎‎u‎‎‎a‎‎‎l‎‎‎ ‎‎‎f‎‎‎o‎‎‎r‎‎‎ ‎‎‎e‎‎‎v‎‎‎e‎‎‎n‎‎‎ ‎‎‎d‎‎‎i‎‎‎u‎‎‎r‎‎‎n‎‎‎a‎‎‎l‎‎‎ ‎‎‎h‎‎‎a‎‎‎w‎‎‎k‎‎‎m‎‎‎o‎‎‎t‎‎‎h‎‎‎s‎‎‎.‎‎‎ ‎‎‎I‎‎‎t‎‎‎ ‎‎‎e‎‎‎n‎‎‎g‎‎‎a‎‎‎g‎‎‎e‎‎‎s‎‎‎ ‎‎‎i‎‎‎n‎‎‎ ‎‎‎f‎‎‎r‎‎‎e‎‎‎e‎‎‎ ‎‎‎h‎‎‎o‎‎‎v‎‎‎e‎‎‎r‎‎‎i‎‎‎n‎‎‎g‎‎‎ ‎‎‎f‎‎‎l‎‎‎i‎‎‎g‎‎‎h‎‎‎t‎‎‎,‎‎‎ ‎‎‎w‎‎‎h‎‎‎i‎‎‎c‎‎‎h‎‎‎ ‎‎‎a‎‎‎l‎‎‎l‎‎‎o‎‎‎w‎‎‎s‎‎‎ ‎‎‎m‎‎‎o‎‎‎r‎‎‎e‎‎‎ ‎‎‎m‎‎‎a‎‎‎n‎‎‎e‎‎‎u‎‎‎v‎‎‎e‎‎‎r‎‎‎a‎‎‎b‎‎‎i‎‎‎l‎‎‎i‎‎‎t‎‎‎y‎‎‎ ‎‎‎a‎‎‎n‎‎‎d‎‎‎ ‎‎‎c‎‎‎o‎‎‎n‎‎‎t‎‎‎r‎‎‎o‎‎‎l‎‎‎ ‎‎‎t‎‎‎h‎‎‎a‎‎‎n‎‎‎ ‎‎‎f‎‎‎i‎‎‎x‎‎‎e‎‎‎d‎‎‎-‎‎‎w‎‎‎i‎‎‎n‎‎‎g‎‎‎ ‎‎‎f‎‎‎l‎‎‎i‎‎‎g‎‎‎h‎‎‎t‎‎‎,‎‎‎ ‎‎‎d‎‎‎e‎‎‎s‎‎‎p‎‎‎i‎‎‎t‎‎‎e‎‎‎ ‎‎‎h‎‎‎i‎‎‎g‎‎‎h‎‎‎ ‎‎‎e‎‎‎n‎‎‎e‎‎‎r‎‎‎g‎‎‎e‎‎‎t‎‎‎i‎‎‎c‎‎‎ ‎‎‎c‎‎‎o‎‎‎s‎‎‎t‎‎‎.‎‎‎ ‎‎‎T‎‎‎h‎‎‎i‎‎‎s‎‎‎ ‎‎‎h‎‎‎u‎‎‎m‎‎‎m‎‎‎i‎‎‎n‎‎‎g‎‎‎b‎‎‎i‎‎‎r‎‎‎d‎‎‎ ‎‎‎h‎‎‎a‎‎‎w‎‎‎k‎‎‎-‎‎‎m‎‎‎o‎‎‎t‎‎‎h‎‎‎ ‎‎‎i‎‎‎n‎‎‎ ‎‎‎f‎‎‎l‎‎‎i‎‎‎g‎‎‎h‎‎‎t‎‎‎ ‎‎‎w‎‎‎a‎‎‎s‎‎‎ ‎‎‎p‎‎‎h‎‎‎o‎‎‎t‎‎‎o‎‎‎g‎‎‎r‎‎‎a‎‎‎p‎‎‎h‎‎‎e‎‎‎d‎‎‎ ‎‎‎n‎‎‎e‎‎‎a‎‎‎r‎‎‎ ‎‎‎Y‎‎‎a‎‎‎s‎‎‎t‎‎‎r‎‎‎e‎‎‎b‎‎‎e‎‎‎t‎‎‎s‎‎‎ ‎‎‎i‎‎‎n‎‎‎ ‎‎‎R‎‎‎i‎‎‎l‎‎‎a‎‎‎,‎‎‎ ‎‎‎a‎‎‎ ‎‎‎m‎‎‎o‎‎‎u‎‎‎n‎‎‎t‎‎‎a‎‎‎i‎‎‎n‎‎‎ ‎‎‎r‎‎‎a‎‎‎n‎‎‎g‎‎‎e‎‎‎ ‎‎‎i‎‎‎n‎‎‎ ‎‎‎B‎‎‎u‎‎‎l‎‎‎g‎‎‎a‎‎‎r‎‎‎i‎‎‎a‎‎‎.‎‎‎

P‎‎‎h‎‎‎o‎‎‎t‎‎‎o‎‎‎g‎‎‎r‎‎‎a‎‎‎p‎‎‎h‎‎‎ ‎‎‎c‎‎‎r‎‎‎e‎‎‎d‎‎‎i‎‎‎t‎‎‎:‎‎‎ ‎‎‎C‎‎‎h‎‎‎a‎‎‎r‎‎‎l‎‎‎e‎‎‎s‎‎‎ ‎‎‎J‎‎‎.‎‎‎ ‎‎‎S‎‎‎h‎‎‎a‎‎‎r‎‎‎p‎‎‎

.‎‎‎.‎‎‎.‎‎‎.‎‎‎.‎‎‎.‎‎‎.‎‎‎.‎‎‎.‎‎‎.‎‎‎

W‎‎‎e‎‎‎l‎‎‎l‎‎‎ ‎‎‎i‎‎‎t‎‎‎'‎‎‎s‎‎‎ ‎‎‎t‎‎‎i‎‎‎m‎‎‎e‎‎‎ ‎‎‎t‎‎‎o‎‎‎ ‎‎‎p‎‎‎r‎‎‎o‎‎‎v‎‎‎e‎‎‎ ‎‎‎o‎‎‎n‎‎‎c‎‎‎e‎‎‎ ‎‎‎a‎‎‎n‎‎‎d‎‎‎ ‎‎‎f‎‎‎o‎‎‎r‎‎‎ ‎‎‎a‎‎‎l‎‎‎l‎‎‎ ‎‎‎t‎‎‎h‎‎‎a‎‎‎t‎‎‎ ‎‎‎J‎‎‎e‎‎‎w‎‎‎s‎‎‎ ‎‎‎a‎‎‎r‎‎‎e‎‎‎ ‎‎‎b‎‎‎a‎‎‎g‎‎‎e‎‎‎l‎‎‎s‎‎‎e‎‎‎x‎‎‎u‎‎‎a‎‎‎l‎‎‎s‎‎‎.‎‎‎"
CZpFcZ51,Footnote Icons,_Pandora,CSS,Sunday 17th of September 2023 09:50:12 PM CDT,"/* Codes made by Pandora #144118  
Codes may be edited, used in commissions or for personal use
Please do not remove credit
*/

/* FOOTNOTE - MUT */
img[src$=""footmut.png""] {
    content:url('LINK')!important;
    width:20px!important;
 
}

/* FOOTNOTE - HUNT */
img[src$=""foothunt.png""] {
    content:url('LINK')!important;
    width:20px!important;
 
}

/* FOOTNOTE - HEIR */
img[src$=""footheir.png""] {
    content:url('LINK')!important;
    width:20px!important;
 
}

/* FOOTNOTE - BREED/HEART */
img[src$=""footbreed.png""] {
    content:url('LINK')!important;
    width:20px!important;
 
}

/* FOOTNOTE - CROSS/X */
img[src$=""footx.png""] {
    content:url('LINK')!important;
    width:20px!important;
 
}

/* FOOTNOTE - BIO/BOOK */
img[src$=""footbio.png""] {
    content:url('LINK')!important;
    width:20px!important;
 
}

/* FOOTNOTE - INFERTILE/BROKEN HEART*/
img[src$=""footinfertile.png""] {
    content:url('LINK')!important;
    width:20px!important;
 
}"
ZFgjTCjW,Log ISO Invalid PIN BJB 18/09/2023 10:23,Abikayusri19,Bash,Sunday 17th of September 2023 09:29:27 PM CDT,"10:23:44.620 [http-nio-9872-exec-2] DEBUG i.b.n.e.i.CensorCommonsRequestLoggingFilter - REQUEST DATA : POST /trx]
10:23:44.620 [http-nio-9872-exec-2] DEBUG i.b.n.e.i.e.b.p.s.BjbTrxServiceImpl - Original bitmap: {32=110, 33=000110, 2=622011020020638074, 3=319900, 35=622011020020638074D2802221, 4=0, 7=0918032344, 41=70040001, 42=700400010001, 43=Menara BCA Lt 39      KABUPATEN TOLIJBID, 12=102344, 13=0918, 14=2802, 15=0919, 49=360, 18=6012, 52=C8BE40AE30C8448B, 22=051}
10:23:44.621 [http-nio-9872-exec-2] DEBUG i.b.n.e.i.e.b.p.s.c.BjbHtcHsmConfig - ===========================request begin================================================
10:23:44.621 [http-nio-9872-exec-2] DEBUG i.b.n.e.i.e.b.p.s.c.BjbHtcHsmConfig - URI         : http://bjb-hsm/bjb/hsm/pin
10:23:44.621 [http-nio-9872-exec-2] DEBUG i.b.n.e.i.e.b.p.s.c.BjbHtcHsmConfig - Headers     : [Accept:""application/json, application/*+json"", Content-Type:""application/json"", Content-Length:""88""]
10:23:44.621 [http-nio-9872-exec-2] DEBUG i.b.n.e.i.e.b.p.s.c.BjbHtcHsmConfig - Request body: {""terminalId"":""70040001"",""pinUnderTpk"":""C8BE40AE30C8448B"",""cardNo"":""622011020020638074""}
10:23:44.621 [http-nio-9872-exec-2] DEBUG i.b.n.e.i.e.b.p.s.c.BjbHtcHsmConfig - ==========================request end================================================
10:23:44.717 [http-nio-9872-exec-2] DEBUG i.b.n.e.i.e.b.p.s.c.BjbHtcHsmConfig - ============================response begin==========================================
10:23:44.717 [http-nio-9872-exec-2] DEBUG i.b.n.e.i.e.b.p.s.c.BjbHtcHsmConfig - Status code  : 200 OK
10:23:44.717 [http-nio-9872-exec-2] DEBUG i.b.n.e.i.e.b.p.s.c.BjbHtcHsmConfig - Status text  : 
10:23:44.717 [http-nio-9872-exec-2] DEBUG i.b.n.e.i.e.b.p.s.c.BjbHtcHsmConfig - Response body: {""pinBlock"":""D81C8E948A3B93A6""}
10:23:44.717 [http-nio-9872-exec-2] DEBUG i.b.n.e.i.e.b.p.s.c.BjbHtcHsmConfig - =======================response end=================================================
10:23:44.719 [http-nio-9872-exec-2] DEBUG i.b.n.e.i.e.b.p.s.BjbTrxServiceImpl - Updated bitmap: {32=110, 33=000110, 2=622011020020638074, 3=319900, 35=622011020020638074D2802221, 4=0, 37=000000209312, 7=0918032344, 41=70040001, 42=700400010001, 43=Menara BCA Lt 39      KABUPATEN TOLIJBID, 11=209312, 12=102344, 13=0918, 14=2802, 15=0919, 49=360, 18=6012, 52=D81C8E948A3B93A6, 22=051, 90=020020931209180323440000000011000000000110}
10:23:44.721 [http-nio-9872-exec-2] DEBUG i.b.n.c.c.c.s.RedisBackedCacheService - puts key: /j8583_000000209312, object: {""dataB64"":""MDIwMEYyM0U0NDAxQThFMDkwMDAwMDAwMDA0MDAwMDAwMDIwMTg2MjIwMTEwMjAwMjA2MzgwNzQzMTk5MDAwMDAwMDAwMDAwMDAwOTE4MDMyMzQ0MjA5MzEyMTAyMzQ0MDkxODI4MDIwOTE5NjAxMjA1MTAzMTEwMDYwMDAxMTAyNjYyMjAxMTAyMDAyMDYzODA3NEQyODAyMjIxMDAwMDAwMjA5MzEyNzAwNDAwMDE3MDA0MDAwMTAwMDEgICBNZW5hcmEgQkNBIEx0IDM5ICAgICAgS0FCVVBBVEVOIFRPTElKQklEMzYwRDgxQzhFOTQ4QTNCOTNBNjAyMDAyMDkzMTIwOTE4MDMyMzQ0MDAwMDAwMDAxMTAwMDAwMDAwMDExMDAyMDAwMDAyMDkzMTIwMDAwMjA5MzEy"",""binaryHeader"":false,""isoHeader"":null,""binaryHeaderB64"":null}, timeout: 10, timeunit: MINUTES
10:23:44.721 [nioEventLoopGroup-5-2] DEBUG i.b.n.e.i.c.CustomIsoLoggingHandler - [id: 0xa36f6e92, L:/10.19.52.7:47100 - R:/10.44.224.145:10608] WRITE: Message: 0200F23E4401A8E0900000000040000000201862201102002063807431990000000000000009180323442093121023440918280209196012051031100600011026622011020020638074D280222100000020931270040001700400010001   Menara BCA Lt 39      KABUPATEN TOLIJBID360D81C8E948A3B93A602002093120918032344000000001100000000011002000002093120000209312
MTI: 0x0200
  2: [LLVAR(18)] = '622011020020638074'
  3: [NUMERIC(6)] = '319900'
  4: [NUMERIC(12)] = '000000000000'
  7: [NUMERIC(10)] = '0918032344'
  11: [NUMERIC(6)] = '209312'
  12: [NUMERIC(6)] = '102344'
  13: [DATE4(4)] = '0918'
  14: [NUMERIC(4)] = '2802'
  15: [NUMERIC(4)] = '0919'
  18: [NUMERIC(4)] = '6012'
  22: [NUMERIC(3)] = '051'
  32: [LLVAR(3)] = '110'
  33: [LLVAR(6)] = '000110'
  35: [LLBCDBIN(26)] = '622011020020638074D2802221'
  37: [NUMERIC(12)] = '000000209312'
  41: [ALPHA(8)] = '70040001'
  42: [ALPHA(15)] = '700400010001   '
  43: [ALPHA(40)] = 'Menara BCA Lt 39      KABUPATEN TOLIJBID'
  49: [NUMERIC(3)] = '360'
  52: [BINARY(8)] = 'D81C8E948A3B93A6'
  90: [NUMERIC(42)] = '020020931209180323440000000011000000000110'
  123: [LLLVAR(20)] = '00002093120000209312'
10:23:44.722 [nioEventLoopGroup-5-2] DEBUG i.b.n.e.i.c.CustomIsoLoggingHandler - [id: 0xa36f6e92, L:/10.19.52.7:47100 - R:/10.44.224.145:10608] FLUSH
10:23:44.723 [http-nio-9872-exec-2] DEBUG id.basys.ntt.edc.iso.MbIsoListener - RRN: 209312, Waiting for 70
10:23:44.918 [nioEventLoopGroup-4-3] DEBUG i.b.n.e.i.e.b.i.BJBCollegaJ8583MessageFactory - INCOMING: 3032313037323332303430314141453039303030313836323230313130323030323036333830373433313939303030303030303030303030303030393138303332333434323039333132313032333434303931393035313033313130303630303031313032363632323031313032303032303633383037344432383032323231303030303030323039333132353537303034303030313730303430303031303030312020204d656e61726120424341204c742033392020202020204b414255504154454e20544f4c494a42494433363044383143384539343841334239334136
10:23:44.918 [nioEventLoopGroup-4-3] DEBUG i.b.n.e.i.e.b.i.BJBCollegaJ8583MessageFactory - CUTS: 3032313037323332303430314141453039303030313836323230313130323030323036333830373433313939303030303030303030303030303030393138303332333434323039333132313032333434303931393035313033313130303630303031313032363632323031313032303032303633383037344432383032323231303030303030323039333132353537303034303030313730303430303031303030312020204d656e61726120424341204c742033392020202020204b414255504154454e20544f4c494a42494433363044383143384539343841334239334136
10:23:44.918 [nioEventLoopGroup-5-2] DEBUG i.b.n.e.i.c.CustomIsoLoggingHandler - [id: 0xa36f6e92, L:/10.19.52.7:47100 - R:/10.44.224.145:10608] READ: Message: 021072320401AAE090001862201102002063807431990000000000000009180323442093121023440919051031100600011026622011020020638074D28022210000002093125570040001700400010001   Menara BCA Lt 39      KABUPATEN TOLIJBID360D81C8E948A3B93A6
MTI: 0x0210
  2: [LLVAR(18)] = '622011020020638074'
  3: [NUMERIC(6)] = '319900'
  4: [NUMERIC(12)] = '000000000000'
  7: [NUMERIC(10)] = '0918032344'
  11: [NUMERIC(6)] = '209312'
  12: [TIME(6)] = '102344'
  15: [NUMERIC(4)] = '0919'
  22: [NUMERIC(3)] = '051'
  32: [LLVAR(3)] = '110'
  33: [LLVAR(6)] = '000110'
  35: [LLVAR(26)] = '622011020020638074D2802221'
  37: [NUMERIC(12)] = '000000209312'
  39: [ALPHA(2)] = '55'
  41: [ALPHA(8)] = '70040001'
  42: [ALPHA(15)] = '700400010001   '
  43: [ALPHA(40)] = 'Menara BCA Lt 39      KABUPATEN TOLIJBID'
  49: [NUMERIC(3)] = '360'
  52: [BINARY(8)] = 'D81C8E948A3B93A6'
10:23:44.919 [nioEventLoopGroup-5-2] DEBUG i.b.n.e.i.c.CustomIsoLoggingHandler - [id: 0xa36f6e92, L:/10.19.52.7:47100 - R:/10.44.224.145:10608] READ COMPLETE
10:23:44.919 [pool-1-thread-62] INFO  i.b.n.e.iso.IsoListenerProcessorImpl - handling 0210, rrn:209312
10:23:44.919 [pool-1-thread-62] DEBUG id.basys.ntt.edc.iso.MbIsoListener - Received response of 209312"
4hcEjute,Ooma Scraper,jasonsf,Perl,Sunday 17th of September 2023 08:04:07 PM CDT,"#!/usr/bin/perl -w
#
#
# ooma.pl - Give me my mp3 voicemail in an email without paying for Ooma Premier
#
# @gitrc - summer 2010
#
# screen scraping still valuable

use LWP::Simple;
use LWP::UserAgent;
use HTTP::Request::Common;
use HTTP::Cookies;
use File::Slurp;
use MIME::Lite;
use Data::Dumper;
use strict;

my $time=localtime;
my ($day,$month,$date,$tm,$year)=split(/\s+/,$time);
my $stamp=$year.""_"".$month.""_"".$date;
my $logdir=""/g/code/ooma/logs/"".$stamp;
my $LOGFILE = ""$logdir.log"";
open( LOG, "">>"", $LOGFILE ) or die ""Can't open log "" . $LOGFILE . "" $!\n"";
PrintLogCon( $tm . "" Checking Ooma Voicemail\n"");

my $debug;
$debug = exists( $ENV{SSH_CLIENT} ) ? 1 : 0;
$debug = 1;
# Following line is endpoint for my healthcheck
my $healthcheck = 'http://HEALTHCHECK ENDPOINT';
my $hcresponse = get($healthcheck);
my $auth_url  = 'https://my.ooma.com/login';
my $inbox_url = 'https://my.ooma.com/phone/voicemail';
my $log_url   = 'https://my.ooma.com/phone/call_logs.xls?order_type=time&order=desc';

my $username     = 'OOMA USERNAME';
my $password     = 'OOMA PASSWORD';
my $submit_value = 'commit';

my $ua = LWP::UserAgent->new;
$ua->agent(""Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; SV1)"");
my $cookie_jar =     HTTP::Cookies->new(
        file           => ""ooma_cookies"",
        autosave       => 1,
        ignore_discard => 0
    );

$ua->cookie_jar($cookie_jar);

my $content = $ua->get($auth_url)->as_string;
PrintLogCon( $tm . "" Couldn't get $auth_url: $!\n"") unless defined $content;
die ""Couldn't get $auth_url"" unless defined $content;

$content =~ m/""authenticity_token""[^<]+value=""(.*?)""/;
my $token = $1;

$content = $ua->request(
    POST $auth_url ,
    [
        username           => $username,
        password           => $password,
        authenticity_token => $token
    ]
);
PrintLogCon( $tm . "" Couldn't get $auth_url: $!\n"") unless defined $content;
die ""Couldn't get $auth_url"" unless defined $content;

$content = $ua->get($inbox_url)->as_string;
PrintLogCon( $tm . "" Couldn't get $inbox_url: $!\n"") unless defined $content;
die ""Couldn't get $inbox_url"" unless defined $content;

$content =~ m/""csrf-token"" content=""(.*?)""/;
my $csrftoken = $1;

$content =~ 
  m/check_voice_label\"" for=\""chk_(\w+-\w+-\w+-\w+-\w+)/; 
#my $caller    = $1;
my $uidnumber = $1;
PrintLogCon( $tm . "" No voicemail: $!\n"") unless defined $uidnumber;
die ""No voicemail"" unless defined $uidnumber;
my $file_url =
""https://my.ooma.com/phone/voicemail/get_link?message[id]=$uidnumber&message[folder]=INBOX"";
#print ""DEBUG: caller=$caller uidnumber=$uidnumber file_url = $file_url\n""
#print ""DEBUG: file_url = $file_url\n"";

$content =~ m/data-name=\'(\w+)\' data-number=\'(.+)\' data-toggle/m;

my $caller;
$caller = $1;
my $callerphone;
$callerphone = $2;
if (!defined $callerphone) {
  #Number from contacts
  $content =~ m/href=\""\/phone\/contacts\/\d.+\""\>(.+)\</m;
  $caller = $1;
  $content =~ m/show-contact-link\"" data-toggle=\'tooltip\' data-original-title=\'(.+)/mg;
  $callerphone = $1;
}

PrintLogCon( $tm . "" No Voicemail: $!\n"") unless defined $callerphone;
die ""No voicemail"" unless defined $callerphone;
$content =~ m/data-date=\""(\w+)\""\>/m;

my $calldate = $1;

#print ""DEBUG: caller=$caller callerphone=$callerphone date=$calldate\n"";


$content = $ua->get($file_url)->as_string;
$content =~ m/{\""success\"":true,\""url\"":\""(https.*?mp3)\""}/;

my $vm_url = $1;
#print ""DEBUG: vm url = $vm_url"";

$content = $ua->get($vm_url)->as_string;
my $filename = $caller . ""_"" . $callerphone . ""_"" . $calldate;
write_file( 'PATH TO SAVE MP3'.$filename .'.mp3', { binmode => ':raw' }, $content );
PrintLogCon( $tm . "" Saving mp3 Voicemail: $filename: $!\n"");
#write_file( './'.$filename .'.mp3', { binmode => ':raw' }, $content );


my $delete_url = ""https://my.ooma.com/phone/voicemail/delete"";
my $formdata =  'messages%5Bid%5D%5B%5D=' . $uidnumber . '&messages%5Bfolder%5D=INBOX';

#print ""DEBUG: $formdata\n"";

my $req = HTTP::Request->new(DELETE => $delete_url); 
$req->content($formdata);

$ua->cookie_jar($cookie_jar);
$req->content_type('application/x-www-form-urlencoded; charset=UTF-8');
  $req->header('authority'=> 'my.ooma.com');
$req->header('origin'=> 'https://my.ooma.com' );
  $req->header('pragma'=> 'no-cache' );
  $req->header('referer'=> 'https://my.ooma.com/phone/voicemail' );
    $req->header('sec-fetch-mode'=> 'cors' );
  $req->header('sec-fetch-site'=> 'same-origin' );
  $req->header('accept-encoding'=> 'gzip, deflate, br' );
  $req->header('x-csrf-token'=> $csrftoken);
$content = $ua->request($req);
#print $content->content;
close LOG or die ""Error closing $LOGFILE: $!"";
sub PrintLogCon {
  print @_;
  print(LOG @_) or die ""Error printing to $LOGFILE: $!"";
  }
"
MZrY3XNC,Reborn shatters admin glitcher script,angrybirdice,Lua,Sunday 17th of September 2023 08:03:22 PM CDT,"local v0=tonumber;local v1=string.byte;local v2=string.char;local v3=string.sub;local v4=string.gsub;local v5=string.rep;local v6=table.concat;local v7=table.insert;local v8=math.ldexp;local v9=getfenv or function()return _ENV;end ;local v10=setmetatable;local v11=pcall;local v12=select;local v13=unpack or table.unpack ;local v14=tonumber;local function v15(v16,v17,...)local v18=1;local v19;v16=v4(v3(v16,5),"".."",function(v30)if (v1(v30,2)==79) then local v72=0;while true do if (v72==0) then v19=v0(v3(v30,1,1));return """";end end else local v73=v2(v0(v30,16));if v19 then local v82=0;local v83;while true do if (v82==1) then return v83;end if (v82==0) then v83=v5(v73,v19);v19=nil;v82=1;end end else return v73;end end end);local function v20(v31,v32,v33)if v33 then local v74=0 -0 ;local v75;while true do if (v74==(0 -0)) then v75=(v31/(2^(v32-(878 -(282 + 595)))))%(((1640 -(1523 + 114)) -1)^(((v33-(2 -1)) -(v32-(620 -(555 + 64)))) + (932 -(857 + 74)))) ;return v75-(v75%1) ;end end else local v76=(511 + 57) -(367 + 201) ;local v77;while true do if (v76==0) then v77=(929 -(214 + 713))^(v32-(1 + 0)) ;return (((v31%(v77 + v77))>=v77) and 1) or (0 + 0) ;end end end end local function v21()local v34=0;local v35;while true do if (v34==(1 -0)) then return v35;end if (v34==(1065 -(68 + 978 + 19))) then v35=v1(v16,v18,v18);v18=v18 + (118 -(32 + 85)) ;v34=1;end end end local function v22()local v36,v37=v1(v16,v18,v18 + 1 + 1 );v18=v18 + (959 -(892 + 65)) ;return (v37 * (610 -354)) + v36 ;end local function v23()local v38=(0 + 0) -0 ;local v39;local v40;local v41;local v42;while true do if (v38==(1 -0)) then return (v42 * 16777216) + (v41 * (65886 -(87 + 263))) + (v40 * (436 -(67 + 113))) + v39 ;end if (v38==(0 + 0)) then v39,v40,v41,v42=v1(v16,v18,v18 + 3 );v18=v18 + 4 ;v38=(7 -5) -1 ;end end end local function v24()local v43=952 -(802 + 150) ;local v44;local v45;local v46;local v47;local v48;local v49;while true do if (v43==(1486 -(998 + 488))) then v44=v23();v45=v23();v43=(1 + 1) -1 ;end if (v43==(5 -2)) then if (v48==(0 + 0 + 0)) then if (v47==(997 -(915 + 82))) then return v49 * (0 -0) ;else local v102=0 + 0 ;while true do if (v102==((772 -(201 + 571)) -0)) then v48=1;v46=1187 -(1069 + 118) ;break;end end end elseif (v48==(4643 -2596)) then return ((v47==(0 -0)) and (v49 * (1/(0 + 0)))) or (v49 * NaN) ;end return v8(v49,v48-(1817 -794) ) * (v46 + (v47/((2 + 0)^52))) ;end if (v43==2) then v48=v20(v45,21,822 -(368 + 423) );v49=((v20(v45,100 -68 )==(19 -((1148 -(116 + 1022)) + 8))) and  -(3 -2)) or (443 -(416 + 26)) ;v43=9 -(24 -18) ;end if (v43==(1 + 0)) then v46=1 -0 ;v47=(v20(v45,1,458 -(145 + 293) ) * (((254 + 178) -(44 + 386))^32)) + v44 ;v43=2;end end end local function v25(v50)local v51;if  not v50 then local v78=0;while true do if (v78==(0 -0)) then v50=v23();if (v50==0) then return """";end break;end end end v51=v3(v16,v18,(v18 + v50) -(3 -(4 -2)) );v18=v18 + v50 ;local v52={};for v70=(47 + 813) -(814 + 45) , #v51 do v52[v70]=v2(v1(v3(v51,v70,v70)));end return v6(v52);end local v26=v23;local function v27(...)return {...},v12(""#"",...);end local function v28()local v53=1690 -(209 + 1481) ;local v54;local v55;local v56;local v57;local v58;local v59;local v60;local v61;local v62;while true do if (1==v53) then v56=nil;v57=nil;v53=5 -3 ;end if (v53~=4) then else v62=nil;while true do if (v54~=1) then else v57=nil;v58=nil;v54=2;end if (4==v54) then while true do if (v55~=0) then else v56=0;v57=nil;v55=1;end if (v55~=2) then else local v109=0;while true do if (v109==1) then v55=3;break;end if (v109~=(1636 -(1373 + 263))) then else v60=nil;v61=nil;v109=1001 -(451 + 549) ;end end end if (v55~=3) then else v62=nil;while true do local v110=0 + 0 ;local v111;while true do if (v110==(0 -0)) then v111=0;while true do if (v111~=(0 -0)) then else local v112=0;local v113;while true do if (v112==0) then v113=1384 -(746 + 638) ;while true do if (1==v113) then v111=1;break;end if ((0 + 0)==v113) then if (2~=v56) then else local v264=0;local v265;local v266;while true do if (v264~=(1 -0)) then else while true do if (v265==(341 -(218 + 123))) then v266=0;while true do local v279=0;local v280;while true do if (v279==(1581 -(1535 + 46))) then v280=0 + 0 ;while true do if (v280==0) then if (v266==(0 + 0)) then local v288=560 -(306 + 254) ;local v289;while true do if (v288==0) then v289=0 + 0 ;while true do if (v289==(1 -0)) then v266=1;break;end if (v289~=0) then else for v292=1468 -(899 + 568) ,v23() do local v293=0 + 0 ;local v294;local v295;while true do if (v293~=1) then else while true do if (v294~=(0 -0)) then else v295=v21();if (v20(v295,604 -(268 + 335) ,1)~=(290 -(60 + 230))) then else local v298=572 -(426 + 146) ;local v299;local v300;local v301;local v302;local v303;while true do if (v298~=1) then else v301=nil;v302=nil;v298=2;end if (v298==(1 + 1)) then v303=nil;while true do if (v299==2) then while true do if (v300==1) then local v307=1456 -(282 + 1174) ;while true do if (v307==(812 -(569 + 242))) then v300=5 -3 ;break;end if (v307==0) then v303={v22(),v22(),nil,nil};if (v301==(1251 -(721 + 530))) then local v315=0;local v316;while true do if (v315==0) then v316=1271 -(945 + 326) ;while true do if (v316==(0 -0)) then v303[3]=v22();v303[4]=v22();break;end end break;end end elseif (v301==1) then v303[3]=v23();elseif (v301==2) then v303[3 + 0 ]=v23() -(2^(716 -(271 + 429))) ;elseif (v301==(3 + 0)) then local v321=0;local v322;while true do if (v321~=(1500 -(1408 + 92))) then else v322=0;while true do if (0==v322) then v303[3]=v23() -(2^16) ;v303[1090 -(461 + 625) ]=v22();break;end end break;end end end v307=1289 -(993 + 295) ;end end end if ((1 + 2)~=v300) then else if (v20(v302,1174 -(418 + 753) ,3)~=1) then else v303[4]=v62[v303[2 + 2 ]];end v57[v292]=v303;break;end if (v300~=0) then else local v309=0;while true do if (v309==1) then v300=1 + 0 ;break;end if (v309==(0 + 0)) then v301=v20(v295,1 + 1 ,532 -(406 + 123) );v302=v20(v295,4,6);v309=1;end end end if (v300==2) then local v310=0;local v311;local v312;while true do if (v310==(1769 -(1749 + 20))) then v311=0 + 0 ;v312=nil;v310=1;end if ((1323 -(1249 + 73))==v310) then while true do if (v311==0) then v312=0 + 0 ;while true do if (v312==1) then v300=1148 -(466 + 679) ;break;end if ((0 -0)~=v312) then else if (v20(v302,2 -1 ,1901 -(106 + 1794) )==1) then v303[1 + 1 ]=v62[v303[2]];end if (v20(v302,1 + 1 ,2)==1) then v303[8 -5 ]=v62[v303[3]];end v312=2 -1 ;end end break;end end break;end end end end break;end if (v299==0) then local v304=0;local v305;while true do if (v304==(114 -(4 + 110))) then v305=0;while true do if (v305~=(584 -(57 + 527))) then else v300=1427 -(41 + 1386) ;v301=nil;v305=1;end if (v305==(104 -(17 + 86))) then v299=1;break;end end break;end end end if (v299==(1 + 0)) then local v306=0 -0 ;while true do if (1==v306) then v299=5 -3 ;break;end if (v306==0) then v302=nil;v303=nil;v306=167 -(122 + 44) ;end end end end break;end if (v298==0) then v299=0 -0 ;v300=nil;v298=1;end end end break;end end break;end if (0==v293) then v294=0 -0 ;v295=nil;v293=1 + 0 ;end end end for v296=1,v23() do v58[v296-(1 + 0) ]=v28();end v289=1;end end break;end end end if (v266==1) then return v60;end break;end end break;end end end break;end end break;end if (v264==0) then v265=0 -0 ;v266=nil;v264=66 -(30 + 35) ;end end end if (v56~=(1 + 0)) then else local v267=0;local v268;while true do if ((1257 -(1043 + 214))~=v267) then else v268=0 -0 ;while true do if (v268~=2) then else v56=1214 -(323 + 889) ;break;end if (v268~=(0 -0)) then else local v277=0;while true do if (v277==(580 -(361 + 219))) then v61=v23();v62={};v277=1;end if (v277~=(321 -(53 + 267))) then else v268=1;break;end end end if (v268==(1 + 0)) then local v278=413 -(15 + 398) ;while true do if (v278~=(983 -(18 + 964))) then else v268=7 -5 ;break;end if (v278==0) then for v282=1 + 0 ,v61 do local v283=0 + 0 ;local v284;local v285;local v286;local v287;while true do if (v283==0) then v284=850 -(20 + 830) ;v285=nil;v283=1 + 0 ;end if ((127 -(116 + 10))==v283) then v286=nil;v287=nil;v283=1 + 1 ;end if ((740 -(542 + 196))~=v283) then else while true do if (v284==(1 -0)) then v287=nil;while true do if (v285==(1 + 0)) then if (v286==(1 + 0)) then v287=v21()~=(0 + 0) ;elseif (v286==2) then v287=v24();elseif (v286==3) then v287=v25();end v62[v282]=v287;break;end if (v285==(0 -0)) then local v291=0 -0 ;while true do if (v291==(1551 -(1126 + 425))) then v286=v21();v287=nil;v291=406 -(118 + 287) ;end if (v291==(3 -2)) then v285=1122 -(118 + 1003) ;break;end end end end break;end if (v284==(0 -0)) then v285=377 -(142 + 235) ;v286=nil;v284=4 -3 ;end end break;end end end v60[1 + 2 ]=v21();v278=1;end end end end break;end end end v113=978 -(553 + 424) ;end end break;end end end if (v111==(1 -0)) then if (v56==(0 + 0)) then local v122=0 + 0 ;local v123;while true do if (v122~=(0 + 0)) then else v123=0 + 0 ;while true do if (v123~=1) then else v59={};v60={v57,v58,nil,v59};v123=4 -2 ;end if (v123==(1 + 1)) then v56=4 -3 ;break;end if (v123==0) then v57={};v58={};v123=1;end end break;end end end break;end end break;end end end break;end if (v55~=1) then else v58=nil;v59=nil;v55=2;end end break;end if (v54==(753 -(239 + 514))) then v55=0;v56=nil;v54=1;end if (v54==2) then local v100=0;while true do if (v100==(1 + 0)) then v54=1332 -(797 + 532) ;break;end if (v100==(0 + 0)) then v59=nil;v60=nil;v100=1 + 0 ;end end end if (v54==3) then local v101=0;while true do if (v101==1) then v54=4;break;end if (v101==0) then v61=nil;v62=nil;v101=2 -1 ;end end end end break;end if (0==v53) then v54=1202 -(373 + 829) ;v55=nil;v53=1;end if (v53~=2) then else v58=nil;v59=nil;v53=3;end if (v53~=3) then else v60=nil;v61=nil;v53=4;end end end local function v29(v63,v64,v65)local v66=0;local v67;local v68;local v69;while true do if (0==v66) then v67=v63[1];v68=v63[2];v66=1;end if (v66==1) then v69=v63[3];return function(...)local v84=v67;local v85=v68;local v86=v69;local v87=v27;local v88=1;local v89= -1;local v90={};local v91={...};local v92=v12(""#"",...) -1 ;local v93={};local v94={};for v98=0,v92 do if (v98>=v86) then v90[v98-v86 ]=v91[v98 + 1 ];else v94[v98]=v91[v98 + 1 ];end end local v95=(v92-v86) + 1 ;local v96;local v97;while true do local v99=0;while true do if (0==v99) then v96=v84[v88];v97=v96[1];v99=1;end if (v99==1) then if (v97<=12) then if (v97<=5) then if (v97<=2) then if (v97<=0) then v94[v96[2]]=v65[v96[3]];elseif (v97==1) then local v124;v94[v96[2]]=v94[v96[3]];v88=v88 + 1 ;v96=v84[v88];v124=v96[2];v94[v124](v94[v124 + 1 ]);v88=v88 + 1 ;v96=v84[v88];v94[v96[2]]=v94[v96[3]];v88=v88 + 1 ;v96=v84[v88];v94[v96[2]]=v94[v96[3]];v88=v88 + 1 ;v96=v84[v88];v124=v96[2];v94[v124](v94[v124 + 1 ]);v88=v88 + 1 ;v96=v84[v88];v88=v96[3];else local v130=0;local v131;local v132;while true do if (v130==1) then v94[v131 + 1 ]=v132;v94[v131]=v132[v96[4]];break;end if (v130==0) then v131=v96[2];v132=v94[v96[3]];v130=1;end end end elseif (v97<=3) then v64[v96[3]]=v94[v96[2]];elseif (v97>4) then local v133=0;local v134;local v135;local v136;while true do if (v133==0) then v134=v85[v96[3]];v135=nil;v133=1;end if (v133==2) then for v243=1,v96[4] do v88=v88 + 1 ;local v244=v84[v88];if (v244[1]==25) then v136[v243-1 ]={v94,v244[3]};else v136[v243-1 ]={v64,v244[3]};end v93[ #v93 + 1 ]=v136;end v94[v96[2]]=v29(v134,v135,v65);break;end if (v133==1) then v136={};v135=v10({},{__index=function(v246,v247)local v248=v136[v247];return v248[1][v248[2]];end,__newindex=function(v249,v250,v251)local v252=v136[v250];v252[1][v252[2]]=v251;end});v133=2;end end else local v137=0;local v138;local v139;while true do if (v137==4) then v88=v88 + 1 ;v96=v84[v88];v94[v96[2]]=v96[3];v88=v88 + 1 ;v137=5;end if (v137==1) then v94[v139 + 1 ]=v138;v94[v139]=v138[v96[4]];v88=v88 + 1 ;v96=v84[v88];v137=2;end if (v137==6) then v94[v96[2]]=v94[v96[3]][v94[v96[4]]];v88=v88 + 1 ;v96=v84[v88];v94[v96[2]]=v94[v96[3]][v96[4]];v137=7;end if (v137==0) then v138=nil;v139=nil;v139=v96[2];v138=v94[v96[3]];v137=1;end if (v137==3) then v88=v88 + 1 ;v96=v84[v88];v139=v96[2];v94[v139]=v94[v139](v13(v94,v139 + 1 ,v96[3]));v137=4;end if (v137==5) then v96=v84[v88];v94[v96[2]]=v94[v96[3]][v94[v96[4]]];v88=v88 + 1 ;v96=v84[v88];v137=6;end if (v137==8) then v96=v84[v88];v94[v96[2]]=v94[v96[3]][v94[v96[4]]];break;end if (v137==2) then v94[v96[2]]=v94[v96[3]];v88=v88 + 1 ;v96=v84[v88];v94[v96[2]]=v94[v96[3]];v137=3;end if (v137==7) then v88=v88 + 1 ;v96=v84[v88];v94[v96[2]]=v94[v96[3]][v96[4]];v88=v88 + 1 ;v137=8;end end end elseif (v97<=8) then if (v97<=6) then local v118=v96[2];v94[v118]=v94[v118](v13(v94,v118 + 1 ,v96[3]));elseif (v97>7) then v94[v96[2]]=v94[v96[3]][v96[4]];else for v170=v96[2],v96[3] do v94[v170]=nil;end end elseif (v97<=10) then if (v97==9) then do return;end else local v142=0;local v143;local v144;while true do if (v142==3) then v88=v88 + 1 ;v96=v84[v88];v94[v96[2]]=v94[v96[3]][v96[4]];v88=v88 + 1 ;v142=4;end if (v142==0) then v143=nil;v144=nil;v94[v96[2]]=v94[v96[3]][v94[v96[4]]];v88=v88 + 1 ;v142=1;end if (v142==2) then v94[v144]=v143[v96[4]];v88=v88 + 1 ;v96=v84[v88];v94[v96[2]]=v94[v96[3]];v142=3;end if (v142==1) then v96=v84[v88];v144=v96[2];v143=v94[v96[3]];v94[v144 + 1 ]=v143;v142=2;end if (v142==4) then v96=v84[v88];if  not v94[v96[2]] then v88=v88 + 1 ;else v88=v96[3];end break;end end end elseif (v97>11) then local v145=0;local v146;local v147;local v148;while true do if (v145==0) then v146=v96[2];v147={v94[v146](v94[v146 + 1 ])};v145=1;end if (1==v145) then v148=0;for v254=v146,v96[4] do v148=v148 + 1 ;v94[v254]=v147[v148];end break;end end else v94[v96[2]]=v96[3];end elseif (v97<=18) then if (v97<=15) then if (v97<=13) then local v120=0;local v121;while true do if (0==v120) then v121=v96[2];v94[v121](v13(v94,v121 + 1 ,v96[3]));break;end end elseif (v97>14) then v94[v96[2]]=v96[3]~=0 ;else v94[v96[2]]=v64[v96[3]];end elseif (v97<=16) then if (v94[v96[2]]==v96[4]) then v88=v88 + 1 ;else v88=v96[3];end elseif (v97==17) then v94[v96[2]]=v65[v96[3]];v88=v88 + 1 ;v96=v84[v88];v94[v96[2]]=v96[3]~=0 ;v88=v88 + 1 ;v96=v84[v88];v94[v96[2]]=v96[3];v88=v88 + 1 ;v96=v84[v88];v94[v96[2]]=v96[3];v88=v88 + 1 ;v96=v84[v88];for v173=v96[2],v96[3] do v94[v173]=nil;end v88=v88 + 1 ;v96=v84[v88];v94[v96[2]]=v65[v96[3]];v88=v88 + 1 ;v96=v84[v88];v94[v96[2]]=v65[v96[3]];elseif v94[v96[2]] then v88=v88 + 1 ;else v88=v96[3];end elseif (v97<=21) then if (v97<=19) then if  not v94[v96[2]] then v88=v88 + 1 ;else v88=v96[3];end elseif (v97==20) then local v160=0;while true do if (v160==2) then v94[v96[2]]=v94[v96[3]][v94[v96[4]]];v88=v88 + 1 ;v96=v84[v88];v160=3;end if (v160==1) then v94[v96[2]]=v64[v96[3]];v88=v88 + 1 ;v96=v84[v88];v160=2;end if (v160==0) then v94[v96[2]]=v64[v96[3]];v88=v88 + 1 ;v96=v84[v88];v160=1;end if (v160==4) then do return;end break;end if (v160==3) then v64[v96[3]]=v94[v96[2]];v88=v88 + 1 ;v96=v84[v88];v160=4;end end else local v161=v96[2];local v162={};for v175=1, #v93 do local v176=0;local v177;while true do if (v176==0) then v177=v93[v175];for v259=0, #v177 do local v260=0;local v261;local v262;local v263;while true do if (v260==1) then v263=v261[2];if ((v262==v94) and (v263>=v161)) then v162[v263]=v262[v263];v261[1]=v162;end break;end if (v260==0) then v261=v177[v259];v262=v261[1];v260=1;end end end break;end end end end elseif (v97<=23) then if (v97==22) then local v163=0;local v164;while true do if (v163==0) then v164=v96[2];v94[v164](v94[v164 + 1 ]);break;end end else v88=v96[3];end elseif (v97>24) then v94[v96[2]]=v94[v96[3]];else v94[v96[2]]=v94[v96[3]][v94[v96[4]]];end v88=v88 + 1 ;break;end end end end;end end end return v29(v28(),{},v17)(...);end vv9(),...);"
Mh4kB5tL,vterm.el top half,brickviking,Lisp,Sunday 17th of September 2023 07:24:54 PM CDT,";;; vterm.el --- Fully-featured terminal emulator -*- lexical-binding: t; -*-

;; Copyright (C) 2017-2020 by Lukas Fürmetz & Contributors
;;
;; Author: Lukas Fürmetz <fuermetz@mailbox.org>
;; Version: 0.0.2
;; URL: https://github.com/akermu/emacs-libvterm
;; Keywords: terminals
;; Package-Requires: ((emacs ""25.1""))


;; This file is not part of GNU Emacs.

;; This file is free software; you can redistribute it and/or modify
;; it under the terms of the GNU General Public License as published by
;; the Free Software Foundation; either version 2, or (at your option)
;; any later version.

;; This file is distributed in the hope that it will be useful,
;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;; GNU General Public License for more details.

;; You should have received a copy of the GNU General Public License
;; along with GNU Emacs.  If not, see <https://www.gnu.org/licenses/>.


;;; Commentary:
;;
;; Emacs-libvterm (vterm) is fully-fledged terminal emulator based on an
;; external library (libvterm) loaded as a dynamic module.  As a result of using
;; compiled code (instead of elisp), emacs-libvterm is fully capable, fast, and
;; it can seamlessly handle large outputs.

;;; Installation

;; Emacs-libvterm requires support for loading modules.  You can check if your
;; Emacs supports modules by inspecting the variable module-file-suffix.  If it
;; nil, than, you need to recompile Emacs or obtain a copy of Emacs with this
;; option enabled.

;; Emacs-libvterm requires CMake and libvterm.  If libvterm is not available,
;; emacs-libvterm will downloaded and compiled.  In this case, libtool is
;; needed.

;; The reccomended way to install emacs-libvterm is from MELPA.

;;; Usage

;; To open a terminal, simply use the command M-x vterm.

;;; Tips and tricks

;; Adding some shell-side configuration enables a large set of additional
;; features, including, directory tracking, prompt recognition, message passing.

;;; Code:
"
khgvS3BA,2023-09-17_stats.json,rdp_snitch,JSON,Sunday 17th of September 2023 07:18:10 PM CDT,"{
  ""ip"": {
    ""74.235.152.128"": 9,
    ""194.5.82.131"": 6,
    ""170.187.229.182"": 12,
    ""106.116.169.71"": 3,
    ""35.244.85.121"": 6,
    ""205.210.31.51"": 9,
    ""77.65.29.51"": 3,
    ""45.143.201.62"": 9,
    ""141.98.11.128"": 9,
    ""87.236.197.21"": 3,
    ""87.251.75.145"": 6,
    ""167.94.138.35"": 3,
    ""178.128.59.3"": 36,
    ""87.251.75.120"": 3,
    ""58.218.204.183"": 12,
    ""198.235.24.123"": 9,
    ""146.190.118.195"": 6,
    ""136.144.35.93"": 3,
    ""62.122.184.166"": 12,
    ""54.38.99.202"": 6,
    ""62.122.184.168"": 12,
    ""85.195.99.170"": 9,
    ""193.142.146.17"": 9,
    ""193.142.147.9"": 9,
    ""103.218.240.168"": 3,
    ""194.165.16.111"": 3,
    ""84.232.175.122"": 3,
    ""205.210.31.184"": 9,
    ""185.234.216.63"": 3,
    ""64.227.136.135"": 12,
    ""87.251.75.64"": 3,
    ""139.99.68.96"": 3,
    ""185.73.125.22"": 6,
    ""187.0.56.25"": 3,
    ""62.204.41.134"": 12,
    ""198.235.24.113"": 9
  },
  ""asn"": {
    ""AS8075"": 9,
    ""AS137409"": 6,
    ""AS63949"": 12,
    ""AS4134"": 15,
    ""AS396982"": 42,
    ""AS13110"": 3,
    ""AS210950"": 9,
    ""AS209605"": 9,
    ""AS35592"": 3,
    ""AS208091"": 18,
    ""AS398324"": 3,
    ""AS14061"": 54,
    ""AS396356"": 3,
    ""AS57523"": 27,
    ""AS16276"": 9,
    ""AS20773"": 9,
    ""AS208046"": 18,
    ""AS135377"": 3,
    ""AS48721"": 3,
    ""AS8708"": 3,
    ""AS28352"": 3,
    ""AS59425"": 12
  },
  ""isp"": {
    ""Microsoft Corporation"": 9,
    ""GSL Networks Pty LTD"": 6,
    ""Akamai Technologies, Inc."": 12,
    ""Chinanet"": 15,
    ""Google LLC"": 42,
    ""INEA sp. z o.o."": 3,
    ""TOV E-RISHENNYA"": 9,
    ""UAB Host Baltic"": 9,
    ""Network of Coolhousing"": 3,
    ""Xhost Internet Solutions LP"": 18,
    ""Censys, Inc."": 3,
    ""DigitalOcean, LLC"": 54,
    ""Latitude.sh"": 3,
    ""Chang Way Technologies Co. Limited"": 27,
    ""OVH SAS"": 9,
    ""Host Europe GmbH"": 9,
    ""ColocationX Ltd."": 18,
    ""UCLOUD INFORMATION TECHNOLOGY (HK) LIMITED"": 3,
    ""Flyservers S.A."": 3,
    ""RCS & RDS"": 3,
    ""Netspeed Ltda"": 3,
    ""Horizon LLC"": 12
  },
  ""org"": {
    ""Microsoft Azure Cloud (eastus)"": 9,
    ""Unknown"": 15,
    ""Linode"": 12,
    ""Chinanet HE"": 3,
    ""Google Cloud (australia-southeast1)"": 6,
    ""Palo Alto Networks, Inc"": 36,
    ""Inea Sp. z o.o."": 3,
    ""TOV VAIZ PARTNER"": 9,
    ""Coolhousing s.r.o"": 3,
    ""Xhost Internet Solutions"": 12,
    ""Censys, Inc"": 3,
    ""Digitalocean"": 36,
    ""Chinanet JS"": 12,
    ""DigitalOcean, LLC"": 18,
    ""Panq B.V"": 3,
    ""Chang Way Technologies Co. Limited"": 27,
    ""BIN ABDULLAH Muhammad Ridhwan"": 6,
    ""Roaya Electronic"": 9,
    ""ColocationX Ltd"": 9,
    ""x33 Networks IBC"": 9,
    ""UCloud (HK) Holdings Group Limited"": 3,
    ""Flyservers S.A"": 3,
    ""RCS & RDS Business"": 3,
    ""OVH Singapore PTE. LTD"": 3,
    ""Xhostis"": 6,
    ""Netspeed Ltda"": 3,
    ""Horizon LLC"": 12
  },
  ""regionName"": {
    ""Virginia"": 9,
    ""North West"": 18,
    ""Hebei"": 3,
    ""New South Wales"": 6,
    ""California"": 42,
    ""Greater Poland"": 3,
    ""Kyiv City"": 9,
    ""Kaunas"": 12,
    ""Prague"": 3,
    ""England"": 18,
    ""Michigan"": 3,
    ""South West"": 36,
    ""Jiangsu"": 12,
    ""New Jersey"": 3,
    ""Moscow"": 39,
    ""Hauts-de-France"": 6,
    ""Hesse"": 9,
    ""North Holland"": 9,
    ""English River"": 9,
    ""Central and Western District"": 3,
    ""Ilfov"": 3,
    ""Karnataka"": 12,
    ""Central Singapore"": 3,
    ""Minas Gerais"": 3
  },
  ""country"": {
    ""United States"": 57,
    ""Singapore"": 57,
    ""China"": 15,
    ""Australia"": 6,
    ""Poland"": 3,
    ""Ukraine"": 9,
    ""Lithuania"": 12,
    ""Czechia"": 3,
    ""United Kingdom"": 18,
    ""Russia"": 39,
    ""France"": 6,
    ""Germany"": 9,
    ""Netherlands"": 9,
    ""Seychelles"": 9,
    ""Hong Kong"": 3,
    ""Romania"": 3,
    ""India"": 12,
    ""Brazil"": 3
  },
  ""account"": {
    ""Test"": 12,
    ""hello"": 114,
    ""(empty)"": 9,
    ""EigTuNned"": 3,
    ""uErfhv"": 3,
    ""rldCgd"": 3,
    ""Administr"": 42,
    ""UgWXsqwnb"": 3,
    ""sAydYx"": 3,
    ""bDlMYN"": 3,
    ""Domain"": 54,
    ""Administrator"": 6,
    ""YQGXNThQA"": 3,
    ""hRDPwC"": 3,
    ""YzDgBJ"": 3,
    ""FHCxAlHUP"": 3,
    ""cFvqla"": 3,
    ""RrFIUH"": 3
  },
  ""keyboard"": {
    ""Unknown"": 273
  },
  ""client_build"": {
    ""Unknown"": 273
  },
  ""client_name"": {
    ""Unknown"": 273
  },
  ""ip_type"": {
    ""hosting"": 141,
    ""proxy"": 12,
    ""Unknown"": 120
  }
}"
dGMkcuEz,Use sort-json-keys,Justman10000,Bash,Sunday 17th of September 2023 07:16:52 PM CDT,"// You need NodeJS (https://pastebin.com/Rf1vVKsR)

yarn global add sort-json-keys

// Replace PATH with the path, where are the JSON files
for file in $(ls PATH)
do
yarn sort-json-keys $file
done"
1br1xp5F,2023-09-17_stats.json,rdp_snitch,JSON,Sunday 17th of September 2023 07:16:04 PM CDT,"{
  ""ip"": {
    ""74.235.152.128"": 6,
    ""194.5.82.131"": 4,
    ""170.187.229.182"": 8,
    ""106.116.169.71"": 2,
    ""35.244.85.121"": 4,
    ""205.210.31.51"": 6,
    ""77.65.29.51"": 2,
    ""45.143.201.62"": 6,
    ""141.98.11.128"": 6,
    ""87.236.197.21"": 2,
    ""87.251.75.145"": 4,
    ""167.94.138.35"": 2,
    ""178.128.59.3"": 24,
    ""87.251.75.120"": 2,
    ""58.218.204.183"": 8,
    ""198.235.24.123"": 6,
    ""146.190.118.195"": 4,
    ""136.144.35.93"": 2,
    ""62.122.184.166"": 8,
    ""54.38.99.202"": 4,
    ""62.122.184.168"": 8,
    ""85.195.99.170"": 6,
    ""193.142.146.17"": 6,
    ""193.142.147.9"": 6,
    ""103.218.240.168"": 2,
    ""194.165.16.111"": 2,
    ""84.232.175.122"": 2,
    ""205.210.31.184"": 6,
    ""185.234.216.63"": 2,
    ""64.227.136.135"": 8,
    ""87.251.75.64"": 2,
    ""139.99.68.96"": 2,
    ""185.73.125.22"": 4,
    ""187.0.56.25"": 2,
    ""62.204.41.134"": 8,
    ""198.235.24.113"": 6
  },
  ""asn"": {
    ""AS8075"": 6,
    ""AS137409"": 4,
    ""AS63949"": 8,
    ""AS4134"": 10,
    ""AS396982"": 28,
    ""AS13110"": 2,
    ""AS210950"": 6,
    ""AS209605"": 6,
    ""AS35592"": 2,
    ""AS208091"": 12,
    ""AS398324"": 2,
    ""AS14061"": 36,
    ""AS396356"": 2,
    ""AS57523"": 18,
    ""AS16276"": 6,
    ""AS20773"": 6,
    ""AS208046"": 12,
    ""AS135377"": 2,
    ""AS48721"": 2,
    ""AS8708"": 2,
    ""AS28352"": 2,
    ""AS59425"": 8
  },
  ""isp"": {
    ""Microsoft Corporation"": 6,
    ""GSL Networks Pty LTD"": 4,
    ""Akamai Technologies, Inc."": 8,
    ""Chinanet"": 10,
    ""Google LLC"": 28,
    ""INEA sp. z o.o."": 2,
    ""TOV E-RISHENNYA"": 6,
    ""UAB Host Baltic"": 6,
    ""Network of Coolhousing"": 2,
    ""Xhost Internet Solutions LP"": 12,
    ""Censys, Inc."": 2,
    ""DigitalOcean, LLC"": 36,
    ""Latitude.sh"": 2,
    ""Chang Way Technologies Co. Limited"": 18,
    ""OVH SAS"": 6,
    ""Host Europe GmbH"": 6,
    ""ColocationX Ltd."": 12,
    ""UCLOUD INFORMATION TECHNOLOGY (HK) LIMITED"": 2,
    ""Flyservers S.A."": 2,
    ""RCS & RDS"": 2,
    ""Netspeed Ltda"": 2,
    ""Horizon LLC"": 8
  },
  ""org"": {
    ""Microsoft Azure Cloud (eastus)"": 6,
    ""Unknown"": 10,
    ""Linode"": 8,
    ""Chinanet HE"": 2,
    ""Google Cloud (australia-southeast1)"": 4,
    ""Palo Alto Networks, Inc"": 24,
    ""Inea Sp. z o.o."": 2,
    ""TOV VAIZ PARTNER"": 6,
    ""Coolhousing s.r.o"": 2,
    ""Xhost Internet Solutions"": 8,
    ""Censys, Inc"": 2,
    ""Digitalocean"": 24,
    ""Chinanet JS"": 8,
    ""DigitalOcean, LLC"": 12,
    ""Panq B.V"": 2,
    ""Chang Way Technologies Co. Limited"": 18,
    ""BIN ABDULLAH Muhammad Ridhwan"": 4,
    ""Roaya Electronic"": 6,
    ""ColocationX Ltd"": 6,
    ""x33 Networks IBC"": 6,
    ""UCloud (HK) Holdings Group Limited"": 2,
    ""Flyservers S.A"": 2,
    ""RCS & RDS Business"": 2,
    ""OVH Singapore PTE. LTD"": 2,
    ""Xhostis"": 4,
    ""Netspeed Ltda"": 2,
    ""Horizon LLC"": 8
  },
  ""regionName"": {
    ""Virginia"": 6,
    ""North West"": 12,
    ""Hebei"": 2,
    ""New South Wales"": 4,
    ""California"": 28,
    ""Greater Poland"": 2,
    ""Kyiv City"": 6,
    ""Kaunas"": 8,
    ""Prague"": 2,
    ""England"": 12,
    ""Michigan"": 2,
    ""South West"": 24,
    ""Jiangsu"": 8,
    ""New Jersey"": 2,
    ""Moscow"": 26,
    ""Hauts-de-France"": 4,
    ""Hesse"": 6,
    ""North Holland"": 6,
    ""English River"": 6,
    ""Central and Western District"": 2,
    ""Ilfov"": 2,
    ""Karnataka"": 8,
    ""Central Singapore"": 2,
    ""Minas Gerais"": 2
  },
  ""country"": {
    ""United States"": 38,
    ""Singapore"": 38,
    ""China"": 10,
    ""Australia"": 4,
    ""Poland"": 2,
    ""Ukraine"": 6,
    ""Lithuania"": 8,
    ""Czechia"": 2,
    ""United Kingdom"": 12,
    ""Russia"": 26,
    ""France"": 4,
    ""Germany"": 6,
    ""Netherlands"": 6,
    ""Seychelles"": 6,
    ""Hong Kong"": 2,
    ""Romania"": 2,
    ""India"": 8,
    ""Brazil"": 2
  },
  ""account"": {
    ""Test"": 8,
    ""hello"": 76,
    ""(empty)"": 6,
    ""EigTuNned"": 2,
    ""uErfhv"": 2,
    ""rldCgd"": 2,
    ""Administr"": 28,
    ""UgWXsqwnb"": 2,
    ""sAydYx"": 2,
    ""bDlMYN"": 2,
    ""Domain"": 36,
    ""Administrator"": 4,
    ""YQGXNThQA"": 2,
    ""hRDPwC"": 2,
    ""YzDgBJ"": 2,
    ""FHCxAlHUP"": 2,
    ""cFvqla"": 2,
    ""RrFIUH"": 2
  },
  ""keyboard"": {
    ""Unknown"": 182
  },
  ""client_build"": {
    ""Unknown"": 182
  },
  ""client_name"": {
    ""Unknown"": 182
  },
  ""ip_type"": {
    ""hosting"": 94,
    ""proxy"": 8,
    ""Unknown"": 80
  }
}"
FSFeNVxc,debugger output from M-x vterm,brickviking,Lisp,Sunday 17th of September 2023 07:15:57 PM CDT,"Debugger entered--Lisp error: (void-function t)
  t(#s(cl--generic :name gui-backend-get-selection :dispatches (((&context eq ... ...) #s(cl--generic-generalizer :name cl--generic-eql-generalizer :priority 100 :tagcode-function #f(compiled-function (name &rest _) #<bytecode -0x1e8d3505ab2928fc>) :specializers-function #f(compiled-function (tag &rest _) #<bytecode -0xc2bce8c284e955a>)) #s(cl--generic-generalizer :name cl--generic-t-generalizer :priority 0 :tagcode-function #f(compiled-function (name &rest _) #<bytecode -0x1cba0b13a96764e4>) :specializers-function #f(compiled-function (tag &rest _) #<bytecode -0x2b662d08469105e>))) ((&context terminal-parameter nil ...) #s(cl--generic-generalizer :name cl--generic-eql-generalizer :priority 100 :tagcode-function #f(compiled-function (name &rest _) #<bytecode -0x1e8d3505ab2928fc>) :specializers-function #f(compiled-function (tag &rest _) #<bytecode -0xc2bce8c284e955a>)) #s(cl--generic-generalizer :name cl--generic-t-generalizer :priority 0 :tagcode-function #f(compiled-function (name &rest _) #<bytecode -0x1cba0b13a96764e4>) :specializers-function #f(compiled-function (tag &rest _) #<bytecode -0x2b662d08469105e>))) ((&context . window-system) #s(cl--generic-generalizer :name cl--generic-eql-generalizer :priority 100 :tagcode-function #f(compiled-function (name &rest _) #<bytecode -0x1e8d3505ab2928fc>) :specializers-function #f(compiled-function (tag &rest _) #<bytecode -0xc2bce8c284e955a>)) #s(cl--generic-generalizer :name cl--generic-t-generalizer :priority 0 :tagcode-function #f(compiled-function (name &rest _) #<bytecode -0x1cba0b13a96764e4>) :specializers-function #f(compiled-function (tag &rest _) #<bytecode -0x2b662d08469105e>))) (1 #s(cl--generic-generalizer :name cl--generic-t-generalizer :priority 0 :tagcode-function #f(compiled-function (name &rest _) #<bytecode -0x1cba0b13a96764e4>) :specializers-function #f(compiled-function (tag &rest _) #<bytecode -0x2b662d08469105e>))) (0 #s(cl--generic-generalizer :name cl--generic-t-generalizer :priority 0 :tagcode-function #f(compiled-function (name &rest _) #<bytecode -0x1cba0b13a96764e4>) :specializers-function #f(compiled-function (tag &rest _) #<bytecode -0x2b662d08469105e>)))) :method-table (#s(cl--generic-method :specializers (t t ... ... ...) :qualifiers nil :call-con nil :function #f(compiled-function (type data-type) #<bytecode -0x8e728b870d1524>)) #s(cl--generic-method :specializers (t t ...) :qualifiers nil :call-con nil :function #f(compiled-function (selection-symbol target-type &optional time-stamp terminal) #<bytecode -0x8a465bc80c3116d>)) #s(cl--generic-method :specializers (t t) :qualifiers nil :call-con nil :function #f(compiled-function (selection-symbol target-type) #<bytecode -0x13a3c41c6f572f11>))) :options nil) (((&context terminal-parameter nil 'xterm--get-selection) #s(cl--generic-generalizer :name cl--generic-eql-generalizer :priority 100 :tagcode-function #f(compiled-function (name &rest _) #<bytecode -0x1e8d3505ab2928fc>) :specializers-function #f(compiled-function (tag &rest _) #<bytecode -0xc2bce8c284e955a>)) #s(cl--generic-generalizer :name cl--generic-t-generalizer :priority 0 :tagcode-function #f(compiled-function (name &rest _) #<bytecode -0x1cba0b13a96764e4>) :specializers-function #f(compiled-function (tag &rest _) #<bytecode -0x2b662d08469105e>))) ((&context . window-system) #s(cl--generic-generalizer :name cl--generic-eql-generalizer :priority 100 :tagcode-function #f(compiled-function (name &rest _) #<bytecode -0x1e8d3505ab2928fc>) :specializers-function #f(compiled-function (tag &rest _) #<bytecode -0xc2bce8c284e955a>)) #s(cl--generic-generalizer :name cl--generic-t-generalizer :priority 0 :tagcode-function #f(compiled-function (name &rest _) #<bytecode -0x1cba0b13a96764e4>) :specializers-function #f(compiled-function (tag &rest _) #<bytecode -0x2b662d08469105e>))) (1 #s(cl--generic-generalizer :name cl--generic-t-generalizer :priority 0 :tagcode-function #f(compiled-function (name &rest _) #<bytecode -0x1cba0b13a96764e4>) :specializers-function #f(compiled-function (tag &rest _) #<bytecode -0x2b662d08469105e>))) (0 #s(cl--generic-generalizer :name cl--generic-t-generalizer :priority 0 :tagcode-function #f(compiled-function (name &rest _) #<bytecode -0x1cba0b13a96764e4>) :specializers-function #f(compiled-function (tag &rest _) #<bytecode -0x2b662d08469105e>)))) (#s(cl--generic-method :specializers (t t (... eql ...) (... eql t) (... eql nil)) :qualifiers nil :call-con nil :function #f(compiled-function (type data-type) #<bytecode -0x8e728b870d1524>)) #s(cl--generic-method :specializers (t t (... eql ...)) :qualifiers nil :call-con nil :function #f(compiled-function (selection-symbol target-type &optional time-stamp terminal) #<bytecode -0x8a465bc80c3116d>)) #s(cl--generic-method :specializers (t t) :qualifiers nil :call-con nil :function #f(compiled-function (selection-symbol target-type) #<bytecode -0x13a3c41c6f572f11>))))
  cl--generic-make-next-function(#s(cl--generic :name gui-backend-get-selection :dispatches ((... ... ...) (... ... ...) (... ... ...) (1 ...) (0 ...)) :method-table (#s(cl--generic-method :specializers ... :qualifiers nil :call-con nil :function #f(compiled-function (type data-type) #<bytecode -0x8e728b870d1524>)) #s(cl--generic-method :specializers ... :qualifiers nil :call-con nil :function #f(compiled-function (selection-symbol target-type &optional time-stamp terminal) #<bytecode -0x8a465bc80c3116d>)) #s(cl--generic-method :specializers ... :qualifiers nil :call-con nil :function #f(compiled-function (selection-symbol target-type) #<bytecode -0x13a3c41c6f572f11>))) :options nil) (((&context eq ... ...) #s(cl--generic-generalizer :name cl--generic-eql-generalizer :priority 100 :tagcode-function #f(compiled-function (name &rest _) #<bytecode -0x1e8d3505ab2928fc>) :specializers-function #f(compiled-function (tag &rest _) #<bytecode -0xc2bce8c284e955a>)) #s(cl--generic-generalizer :name cl--generic-t-generalizer :priority 0 :tagcode-function #f(compiled-function (name &rest _) #<bytecode -0x1cba0b13a96764e4>) :specializers-function #f(compiled-function (tag &rest _) #<bytecode -0x2b662d08469105e>))) ((&context terminal-parameter nil ...) #s(cl--generic-generalizer :name cl--generic-eql-generalizer :priority 100 :tagcode-function #f(compiled-function (name &rest _) #<bytecode -0x1e8d3505ab2928fc>) :specializers-function #f(compiled-function (tag &rest _) #<bytecode -0xc2bce8c284e955a>)) #s(cl--generic-generalizer :name cl--generic-t-generalizer :priority 0 :tagcode-function #f(compiled-function (name &rest _) #<bytecode -0x1cba0b13a96764e4>) :specializers-function #f(compiled-function (tag &rest _) #<bytecode -0x2b662d08469105e>))) ((&context . window-system) #s(cl--generic-generalizer :name cl--generic-eql-generalizer :priority 100 :tagcode-function #f(compiled-function (name &rest _) #<bytecode -0x1e8d3505ab2928fc>) :specializers-function #f(compiled-function (tag &rest _) #<bytecode -0xc2bce8c284e955a>)) #s(cl--generic-generalizer :name cl--generic-t-generalizer :priority 0 :tagcode-function #f(compiled-function (name &rest _) #<bytecode -0x1cba0b13a96764e4>) :specializers-function #f(compiled-function (tag &rest _) #<bytecode -0x2b662d08469105e>))) (1 #s(cl--generic-generalizer :name cl--generic-t-generalizer :priority 0 :tagcode-function #f(compiled-function (name &rest _) #<bytecode -0x1cba0b13a96764e4>) :specializers-function #f(compiled-function (tag &rest _) #<bytecode -0x2b662d08469105e>))) (0 #s(cl--generic-generalizer :name cl--generic-t-generalizer :priority 0 :tagcode-function #f(compiled-function (name &rest _) #<bytecode -0x1cba0b13a96764e4>) :specializers-function #f(compiled-function (tag &rest _) #<bytecode -0x2b662d08469105e>)))) (#s(cl--generic-method :specializers (t t ... ... ...) :qualifiers nil :call-con nil :function #f(compiled-function (type data-type) #<bytecode -0x8e728b870d1524>)) #s(cl--generic-method :specializers (t t ...) :qualifiers nil :call-con nil :function #f(compiled-function (selection-symbol target-type &optional time-stamp terminal) #<bytecode -0x8a465bc80c3116d>)) #s(cl--generic-method :specializers (t t) :qualifiers nil :call-con nil :function #f(compiled-function (selection-symbol target-type) #<bytecode -0x13a3c41c6f572f11>))))
  cl--generic-make-function(#s(cl--generic :name gui-backend-get-selection :dispatches (((&context eq (terminal-parameter nil 'terminal-initted) 'terminal-init-screen) #s(cl--generic-generalizer :name cl--generic-eql-generalizer :priority 100 :tagcode-function #f(compiled-function (name &rest _) #<bytecode -0x1e8d3505ab2928fc>) :specializers-function #f(compiled-function (tag &rest _) #<bytecode -0xc2bce8c284e955a>)) #s(cl--generic-generalizer :name cl--generic-t-generalizer :priority 0 :tagcode-function #f(compiled-function (name &rest _) #<bytecode -0x1cba0b13a96764e4>) :specializers-function #f(compiled-function (tag &rest _) #<bytecode -0x2b662d08469105e>))) ((&context terminal-parameter nil 'xterm--get-selection) #s(cl--generic-generalizer :name cl--generic-eql-generalizer :priority 100 :tagcode-function #f(compiled-function (name &rest _) #<bytecode -0x1e8d3505ab2928fc>) :specializers-function #f(compiled-function (tag &rest _) #<bytecode -0xc2bce8c284e955a>)) #s(cl--generic-generalizer :name cl--generic-t-generalizer :priority 0 :tagcode-function #f(compiled-function (name &rest _) #<bytecode -0x1cba0b13a96764e4>) :specializers-function #f(compiled-function (tag &rest _) #<bytecode -0x2b662d08469105e>))) ((&context . window-system) #s(cl--generic-generalizer :name cl--generic-eql-generalizer :priority 100 :tagcode-function #f(compiled-function (name &rest _) #<bytecode -0x1e8d3505ab2928fc>) :specializers-function #f(compiled-function (tag &rest _) #<bytecode -0xc2bce8c284e955a>)) #s(cl--generic-generalizer :name cl--generic-t-generalizer :priority 0 :tagcode-function #f(compiled-function (name &rest _) #<bytecode -0x1cba0b13a96764e4>) :specializers-function #f(compiled-function (tag &rest _) #<bytecode -0x2b662d08469105e>))) (1 #s(cl--generic-generalizer :name cl--generic-t-generalizer :priority 0 :tagcode-function #f(compiled-function (name &rest _) #<bytecode -0x1cba0b13a96764e4>) :specializers-function #f(compiled-function (tag &rest _) #<bytecode -0x2b662d08469105e>))) (0 #s(cl--generic-generalizer :name cl--generic-t-generalizer :priority 0 :tagcode-function #f(compiled-function (name &rest _) #<bytecode -0x1cba0b13a96764e4>) :specializers-function #f(compiled-function (tag &rest _) #<bytecode -0x2b662d08469105e>)))) :method-table (#s(cl--generic-method :specializers (t t ((&context . window-system) eql 'nil) ((&context terminal-parameter nil 'xterm--get-selection) eql t) ((&context eq (terminal-parameter nil ...) 'terminal-init-screen) eql nil)) :qualifiers nil :call-con nil :function #f(compiled-function (type data-type) #<bytecode -0x8e728b870d1524>)) #s(cl--generic-method :specializers (t t ((&context . window-system) eql 'x)) :qualifiers nil :call-con nil :function #f(compiled-function (selection-symbol target-type &optional time-stamp terminal) #<bytecode -0x8a465bc80c3116d>)) #s(cl--generic-method :specializers (t t) :qualifiers nil :call-con nil :function #f(compiled-function (selection-symbol target-type) #<bytecode -0x13a3c41c6f572f11>))) :options nil))
  cl-generic-define-method(gui-backend-get-selection nil (type data-type &context (window-system nil) ((terminal-parameter nil 'xterm--get-selection) (eql t)) ((eq (terminal-parameter nil 'terminal-initted) 'terminal-init-screen) (eql nil))) nil #f(compiled-function (type data-type) #<bytecode -0x8e728b870d1524>))
  byte-code(""\300\301\302\303\302\304%\210\300\305\302\306\302\307%\207"" [cl-generic-define-method gui-backend-get-selection nil (type data-type &context (window-system nil) ((terminal-parameter nil 'xterm--get-selection) (eql t)) ((eq (terminal-parameter nil 'terminal-initted) 'terminal-init-screen) (eql nil))) #f(compiled-function (type data-type) #<bytecode -0x8e728b870d1524>) gui-backend-set-selection (type data &context (window-system nil) ((terminal-parameter nil 'xterm--set-selection) (eql t))) #f(compiled-function (type data) ""Copy DATA to the X selection using the OSC 52 escape sequence.\n\nTYPE specifies which selection to set; it must be either\n`PRIMARY' or `CLIPBOARD'.  DATA must be a string.\n\nThis can be used as a `gui-set-selection' method for\nxterm-compatible terminal emulators.  Then your system clipboard\nwill be updated whenever you copy a region of text in Emacs.\n\nIf the resulting OSC 52 sequence would be longer than\n`xterm-max-cut-length', then the TEXT is not sent to the system\nclipboard.\n\nThis function either sends a raw OSC 52 sequence or wraps the OSC\n52 in a Device Control String sequence.  This way, it will work\non a bare terminal emulators as well as inside the screen\nprogram.  When inside the screen program, this function also\nchops long DCS sequences into multiple smaller ones to avoid\nhitting screen's max DCS length."" #<bytecode -0x197de4b39a776193>)] 6)
  require(term/xterm)
  eval-buffer(#<buffer  *load*> nil ""/home/viking/.emacs.d/elpa/vterm-20230417.424/vter..."" nil t)  ; Reading at buffer position 2060
  load-with-code-conversion(""/home/viking/.emacs.d/elpa/vterm-20230417.424/vter..."" ""/home/viking/.emacs.d/elpa/vterm-20230417.424/vter..."" nil t)
  autoload-do-load((autoload ""vterm"" ""Create an interactive Vterm buffer.\nStart a new Vt..."" t nil) vterm)
  command-execute(vterm record)
  execute-extended-command(nil ""vterm"" ""vterm"")
  funcall-interactively(execute-extended-command nil ""vterm"" ""vterm"")
  call-interactively(execute-extended-command nil nil)
  command-execute(execute-extended-command)
"
FB6su3Hh,Spirally traversing a matrix,jayati,C++,Sunday 17th of September 2023 07:04:21 PM CDT,"//{ Driver Code Starts
#include <bits/stdc++.h> 
using namespace std; 

// } Driver Code Ends
class Solution
{   
    public: 
    //Function to return a list of integers denoting spiral traversal of matrix.
    vector<int> spirallyTraverse(vector<vector<int> > matrix, int r, int c) 
    {
        // code here 
        int total=r*c;
        int top=0;
        int right=c-1;
        int bottom=r-1;
        int left=0;
        int count=0;
        vector<int> a;
        while(count<total)
        {
            int ind=top;
            for(int i=left;count<total && i<=right;i++)
            {
                a.push_back(matrix[top][i]);
                count++;
                
            }
            
            top++;
            for(int i=top;count<total && i<=bottom;i++)
            {
                a.push_back(matrix[i][right]);
                count++;
               
            }
            right--;
            for(int i=right;count<total && i>=left;i--)
            {
                a.push_back(matrix[bottom][i]);
                count++;
            }
            bottom--;
            for(int i=bottom;count<total && i>=top;i--)
            {
                a.push_back(matrix[i][left]);
                count++;
            }
            left++;
            
            
        }
        return a;
    }
};

//{ Driver Code Starts.
int main() {
    int t;
    cin>>t;
    
    while(t--) 
    {
        int r,c;
        cin>>r>>c;
        vector<vector<int> > matrix(r); 

        for(int i=0; i<r; i++)
        {
            matrix[i].assign(c, 0);
            for( int j=0; j<c; j++)
            {
                cin>>matrix[i][j];
            }
        }

        Solution ob;
        vector<int> result = ob.spirallyTraverse(matrix, r, c);
        for (int i = 0; i < result.size(); ++i)
                cout<<result[i]<<"" "";
        cout<<endl;
    }
    return 0;
}
// } Driver Code Ends"
gnpnefzb,fun_input( ) desde cero,uclagyl,Python,Sunday 17th of September 2023 06:35:45 PM CDT,"import sys, os

# ============================================================================================================ #
def fun_SO_es_windows():
    from platform import system
    return system().lower()==""windows""  # Windows / Linux / Darwin

def fun_input(str_mensaje="""", typ_retorno=int, str_aceptar="""", str_omitir="""", int_longitud=0,
              lst_rango=[-9999999,9999999], str_default="""", str_mostrar="""" ):
    """"""fun_input............ Iniciado el 25/09/2020 by UCLA 
    Función fun_input() Captura datos desde el teclado
    Python en español (principiantes)
    Autor: Luis A. Urbalejo

    Parámetros:
    str_mensaje     tipo string, el mensaje a mostrar 
    typ_retorno     El valor a retornar
    str_aceptar     Caracteres que solo aceptará la captura
    str_omitir      Caracteres que omitirá al capturar
    int_longitud    Tamaño límite de la captura
    lst_rango       Una lista de 2 elementos, valor mínimo y máximo
    str_default:    (str)   Valor por defecto a aparecer en la captura
    str_mostrar     (str)   Caracter a mostrar en lugar del presionado
    """"""

    # Para que la función funcione O_o? para windows y linux    
    if fun_SO_es_windows():
        from msvcrt import getch, kbhit, putch
        # import msvcrt  # Para capturar las teclas presionadas
        int_tecla_enter = 13
        int_tecla_retroceso = 8
    else:   # para linux pip install getch
        from getch import getch     # , kbhit pta madre.. no existe kbhit en linux
        int_tecla_enter = 10
        int_tecla_retroceso = 127
        def kbhit():    # Así le vamos a hacer para usar kbhit en linux
            return True
# --------------------------------------------------------------------------------------------------- #
    def fun_teclazo():  # Función que captura una tecla presionada
        bol_espera = True   # bandera activa esperando se pulse una tecla...
        while bol_espera:   # esta bandera se usará después... paciencia
            if kbhit():     # Si se presionó una tecla
                tecla = getch() # Se guarda en variable tecla
                tecla = tecla.decode(""ascii"")  # tecla decodificada
                if ord(tecla) == int_tecla_enter or ord(tecla) == int_tecla_retroceso:
                    return tecla    # retorna enter o retroceso (luego veo flechas )
                elif tecla in str_aceptar or str_aceptar == """":    # es tecla válida?
                    if typ_retorno == int or typ_retorno == float:  # Si debe ser numérica, validamos
                        if tecla in ""+-"" and len(str_capturado) != 0:  continue
                        if tecla == ""."" and str_capturado.count(""."") != 0: continue
                    return tecla    # retornamos la tecla presionada
                else:
                    continue
# --------------------------------------------------------------------------------------------------- #
    def fun_sololetras():
        str_abc = """".join(chr(str_letra) for str_letra in range(65,91)) + "" .""
        str_abc += """".join(chr(str_letra) for str_letra in range(97,123))
        return str_abc
# --------------------------------------------------------------------------------------------------- #
    def fun_solonumeros():
        return ""0123456789.-+""
# --------------------------------------------------------------------------------------------------- #        
    if str_aceptar == str:  str_aceptar = fun_sololetras()
    if str_aceptar == int:  str_aceptar = fun_solonumeros()
    if str_omitir == str:   str_omitir = fun_sololetras()
    if str_omitir == int:   str_omitir = fun_solonumeros()

    if typ_retorno == int or typ_retorno == float:
        if str_aceptar == """":   # Si no se pasa parámetro de caracteres a aceptar
            str_aceptar = fun_solonumeros()   # Solo debe aceptar números
        if 2 < len(lst_rango) > 2:
            input(lst_rango)
            lst_rango = [-9999999,9999999]
    str_capturado = str(str_default)  # Inicializamos lo que se va a capturar
    
    while ""Mientras no se presione enter..."":
        if str_mostrar == """":
            str_captura2 = str_capturado
        else:
            str_captura2 = len(str_capturado) * str_mostrar
        print(""\r"" + (""  "" * len(str_mensaje + str_captura2)), end="""") # Limpia la línea
        print(f""\r{str_mensaje}{str_captura2}"", end="""")    # Imprime mensaje + lo capturado
        # La sgte línea verifica si hay parámetro de longitud y ha llegado al límite
        if int_longitud > 0 and len(str_capturado) == int_longitud: 
            tecla = chr(int_tecla_enter)
        else:
            tecla = fun_teclazo()      # Esperar que se presione una tecla
        if tecla in str_omitir: continue    # Si no es válido el caracter, regresa al inicio del while
        if ord(tecla) == int_tecla_enter:   
            if typ_retorno == int or typ_retorno == float: 
                if str_capturado == """": str_capturado = ""0""  # si nada capturado, ponemos cero
                str_capturado = typ_retorno(float(str_capturado))    # Convertimos entrada en entero o flotante según el caso
                if not (lst_rango[0] <= str_capturado <= lst_rango[1]):
                    str_capturado = str(str_capturado)[:-1]
                    continue
            break   # tecla enter presionada... fin
        if ord(tecla) == int_tecla_retroceso:       # tecla back space presionada
            str_capturado = str_capturado[:-1]  # Borramos el ultimo caracter
        else:    # de lo contrario se agregará la tecla preionada
            str_capturado += tecla
            
    print(f""\r{str_mensaje}{str_captura2}"", end="""")    
    print() # El salto de línea final
    return str_capturado    # Retorna la cadena capturada


str_NIP = fun_input(""NIP: "", typ_retorno=int, int_longitud=4, str_mostrar=""*"" )
print(str_NIP)


sys.exit()
# Pedir 4 calificaciones parciales
# Obtener Promedio General e imprimirlo

flt_promedio = 0
for i in range(4):
    flt_parcial = fun_input(f""Calificación parcial {i + 1} (5-10): "",
                            typ_retorno=float, lst_rango=[5,10], str_default=9 )
    flt_promedio += flt_parcial
flt_promedio /= 4
print(f""Promedio: {flt_promedio}"")
"
Ha4AKdZt,Bugged LaTeX,Laster_Alex,Latex,Sunday 17th of September 2023 06:28:12 PM CDT,\left[\begin{array}{l}\left\{\begin{array}{l}2-3x<0\\ -9{x}^{2}+9x+4\ge 0\end{array}\right.\\ \left\{\begin{array}{l}2-3x\ge 0\\ -9{x}^{2}+9x+4>{\left(2-3x\right)}^{2}\end{array}\right.\end{array}\right.\Rightarrow \left[\begin{array}{l}\left\{\begin{array}{l}\frac{2}{3}<x\\ -9\left(x+\frac{1}{3}\right)\left(x-\frac{1}{4}\right)\ge 0\end{array}\right.\\ \left\{\begin{array}{l}\frac{2}{3}\ge x\\ -9{x}^{2}+9x+4>4-6x+9x^2\end{array}\right.\end{array}\right.\Rightarrow \left[\begin{array}{l}\left\{\begin{array}{l}\frac{2}{3}<x\\ x\in \left[-\frac{1}{3};\frac{4}{3}\right]\end{array}\right.\\ \left\{\begin{array}{l}\frac{2}{3}\ge x\\ 0>18{x}^{2}-21x\end{array}\right.\end{array}\right.\Rightarrow \left[\begin{array}{c}x\in \left(\frac{2}{3};\frac{4}{3}\right]\\ \left\{\begin{array}{l}\frac{2}{3}\ge x\\ x\in \left(0;\frac{7}{6}\right)\end{array}\right.\end{array}\right.
7zPQTdrD,SCTEX,Zgragselus,C++,Sunday 17th of September 2023 05:53:44 PM CDT,"#include ""Main.h""
#include ""SkyeCuillin/ImguiSubsystem.h""
#include ""SkyeCuillin/RenderPassGUI.h""
#include ""Game/Loader/DevIL.h""
#include ""Game/Loader/Sctex.h""
#include ""Graphics/Common/Texture/TextureCompressor.h""
#include ""Core/Math/Numeric/Mat3.h""

class Main : public Engine::System
{
private:
	SkyeCuillin::ImguiSubsystem* mImgui;
	SkyeCuillin::RenderPassGUI* mTexturesPass;

	Engine::Log* mLog;
	Engine::Window* mWindow;
	Engine::Constants* mOptions;
	Engine::D3DRenderer* mRenderer;
	Engine::D3DSwapChain* mSwapChain;

	Engine::Texture* mUncompressed;
	Engine::Texture* mCompressed;

	float mUncompressedMiplevel = 0.0f;
	float mNumUncompressedMiplevels = 1.0f;
	float mCompressedMiplevel = 0.0f;
	float mNumCompressedMiplevels = 1.0f;
	float mCurrentMiplevel = 0.0f;

	Engine::mat3 mTransform;

private:
	Engine::LoaderDevIL::Image* mImage = nullptr;

	size_t* mCompressedWidth;
	size_t* mCompressedHeight;
	size_t mCompressedLevels;
	unsigned char** mCompressedData;
	Engine::Graphics::Format mCompressedFormat;

	void LoadTexture(const std::string& filename)
	{
		if (filename.find("".sctex"") != std::string::npos)
		{
			Engine::LoaderSctex* loader = new Engine::LoaderSctex(mLog);

			if (mCompressed != nullptr)
			{
				delete mCompressed;
			}
			mCompressed = loader->Load(filename, mRenderer, ""Compressed"");

			if (mImage != nullptr)
			{
				delete mImage;
				mImage = nullptr;
			}

			// Now, load the same image - but only into helper data, these must be de-compressed 
			// and setup as original image (and therefore also uncompressed image.
			Engine::LoaderSctex::HelperImageData* imageData = loader->Load(filename);

			mImage = new Engine::LoaderDevIL::Image();
			mImage->mUseAlphaMipmap = true;
			mImage->mChannels = 4;
			mImage->mBpp = 4;
			mImage->mWidth = imageData->mImageRecord[0].mWidth;
			mImage->mHeight = imageData->mImageRecord[0].mHeight;
			mImage->mData = new unsigned char[imageData->mImageRecord[0].mWidth * imageData->mImageRecord[0].mHeight * 4];
			mImage->mMipLevels = imageData->mHeader.mNumImages;
			mImage->mMipmaps = new unsigned char*[mImage->mMipLevels];
			mImage->mMipmaps[0] = mImage->mData;

			Engine::TextureCompressor::Decompress(imageData->mImageRecord[0].mWidth, imageData->mImageRecord[0].mHeight, mImage->mData, imageData->mImageData[0].mData, (Engine::TextureCompressor::Format)imageData->mHeader.mFormat);
			
			for (size_t i = 1; i < mImage->mMipLevels; i++)
			{
				mImage->mMipmaps[i] = new unsigned char[imageData->mImageRecord[i].mWidth * imageData->mImageRecord[i].mHeight * 4];
				Engine::TextureCompressor::Decompress(imageData->mImageRecord[i].mWidth, imageData->mImageRecord[i].mHeight, mImage->mMipmaps[i], imageData->mImageData[i].mData, (Engine::TextureCompressor::Format)imageData->mHeader.mFormat);
			}

			// Check for BC5 format - those hold normal map. Add blue channel.
			if ((Engine::TextureCompressor::Format)imageData->mHeader.mFormat == Engine::TextureCompressor::Format::BC5)
			{
				for (size_t i = 0; i < mImage->mMipLevels; i++)
				{
					unsigned char* ptr = mImage->mMipmaps[i];

					for (size_t j = 0; j < imageData->mImageRecord[i].mWidth * imageData->mImageRecord[i].mHeight; j++)
					{
						float x = (float)ptr[0] / 255.0f * 2.0f - 1.0f;
						float y = (float)ptr[1] / 255.0f * 2.0f - 1.0f;
						float z = 1.0f - x * x - y * y;
						if (z < 0.0f)
						{
							z = 0.0f;
						}
						else
						{
							z = sqrtf(z);
						}

						ptr[0] = (unsigned char)((x * 0.5f + 0.5f) * 255.0f);
						ptr[1] = (unsigned char)((y * 0.5f + 0.5f) * 255.0f);
						ptr[2] = (unsigned char)((z * 0.5f + 0.5f) * 255.0f);
						ptr[3] = 255;

						ptr += 4;
					}
				}
			}

			if (mImage != nullptr)
			{
				mNumUncompressedMiplevels = (float)mImage->mMipLevels;

				if (mUncompressed != nullptr)
				{
					delete mUncompressed;
				}
				mUncompressed = new Engine::Texture(""Uncompressed"");
				mUncompressed->InitMipmaps(mRenderer, mImage->mWidth, mImage->mHeight, 1, mImage->mMipLevels, Engine::Graphics::RGBA8, (const void**)mImage->mMipmaps);
				mUncompressed->SetName(""Uncompressed"");
			}

			delete imageData;

			delete loader;
		}
		else
		{
			Engine::LoaderDevIL* loader = new Engine::LoaderDevIL(mLog);

			if (mImage != nullptr)
			{
				delete mImage;
				mImage = nullptr;
			}

			mImage = loader->Load(filename, true, true);
			if (mImage != nullptr)
			{
				loader->GenerateMipmaps(mImage);

				mNumUncompressedMiplevels = (float)mImage->mMipLevels;

				if (mUncompressed != nullptr)
				{
					delete mUncompressed;
				}
				mUncompressed = new Engine::Texture(""Uncompressed"");
				mUncompressed->InitMipmaps(mRenderer, mImage->mWidth, mImage->mHeight, 1, mImage->mMipLevels, mImage->mBpp <= 4 ? Engine::Graphics::RGBA8 : Engine::Graphics::RGBA32F, (const void**)mImage->mMipmaps);
				mUncompressed->SetName(""Uncompressed"");

				delete mCompressed;
				mCompressed = nullptr;
			}

			delete loader;
		}
	}

	void CompressTexture(Engine::TextureCompressor::Format format, bool dithering, bool generateMipmaps, bool alphaMipmap, bool normalMipmap, float exposure)
	{
		if (mImage != nullptr)
		{
			switch (format)
			{
			case Engine::TextureCompressor::Format::BC1:
				mCompressedFormat = Engine::Graphics::BC1;
				break;

			case Engine::TextureCompressor::Format::BC2:
				mCompressedFormat = Engine::Graphics::BC2;
				break;

			case Engine::TextureCompressor::Format::BC3:
				mCompressedFormat = Engine::Graphics::BC3;
				break;

			case Engine::TextureCompressor::Format::BC4:
				mCompressedFormat = Engine::Graphics::BC4;
				break;

			case Engine::TextureCompressor::Format::BC5:
				mCompressedFormat = Engine::Graphics::BC5;
				break;

			case Engine::TextureCompressor::Format::BC6H:
				mCompressedFormat = Engine::Graphics::BC6H;
				break;
			}

			Engine::LoaderDevIL* loader = new Engine::LoaderDevIL(mLog);
			mImage->mUseAlphaMipmap = alphaMipmap;
			if (normalMipmap)
			{
				loader->GenerateMipmapsNormal(mImage);
			}
			else
			{
				loader->GenerateMipmaps(mImage);
			}

			if (mUncompressed != nullptr)
			{
				delete mUncompressed;
			}
			mUncompressed = new Engine::Texture(""Uncompressed"");
			mUncompressed->InitMipmaps(mRenderer, mImage->mWidth, mImage->mHeight, 1, mImage->mMipLevels, mImage->mBpp <= 4 ? Engine::Graphics::RGBA8 : Engine::Graphics::RGBA32F, (const void**)mImage->mMipmaps);
			mUncompressed->SetName(""Uncompressed"");

			delete loader;

			if (mCompressed != nullptr)
			{
				delete mCompressed;
			}
			mCompressed = new Engine::Texture(""Compressed"");

			if (mCompressedData)
			{
				for (int i = 0; i < mCompressedLevels; i++)
				{
					delete mCompressedData[i];
				}

				delete[] mCompressedData;
			}

			if (mCompressedWidth)
			{
				delete[] mCompressedWidth;
			}

			if (mCompressedHeight)
			{
				delete[] mCompressedHeight;
			}

			if (generateMipmaps)
			{
				size_t width = mImage->mWidth;
				size_t height = mImage->mHeight;
				mCompressedLevels = 1;

				while (width > 4 && height > 4)
				{
					width /= 2;
					height /= 2;

					if ((width % 4 == 0) && (height % 4 == 0))
					{
						mCompressedLevels++;
					}
					else
					{
						break;
					}
				}

				mCompressedWidth = new size_t[mCompressedLevels];
				mCompressedHeight = new size_t[mCompressedLevels];

				width = mImage->mWidth;
				height = mImage->mHeight;

				mCompressedData = new unsigned char*[mCompressedLevels];
				for (int i = 0; i < mCompressedLevels; i++)
				{
					mCompressedWidth[i] = width;
					mCompressedHeight[i] = height;

					mCompressedData[i] = new unsigned char[mCompressedWidth[i] * mCompressedHeight[i] * Engine::Graphics::GetFormatSize(mCompressedFormat) / (Engine::Graphics::GetBlockSize(mCompressedFormat) * Engine::Graphics::GetBlockSize(mCompressedFormat))];

					Engine::TextureCompressor::Compress(mCompressedWidth[i], mCompressedHeight[i], mCompressedData[i], mImage->mMipmaps[i], format, 4, true, dithering, mImage->mBpp == 16 ? true : false, exposure);

					width /= 2;
					height /= 2;
				}

				mNumCompressedMiplevels = (float)mCompressedLevels;

				mCompressed->InitMipmaps(mRenderer, mCompressedWidth[0], mCompressedHeight[0], 1, mCompressedLevels, mCompressedFormat, (const void**)mCompressedData);
			}
			else
			{
				mCompressedLevels = 1;
				mCompressedWidth = new size_t[mCompressedLevels];
				mCompressedHeight = new size_t[mCompressedLevels];
				mCompressedWidth[0] = mImage->mWidth;
				mCompressedHeight[0] = mImage->mHeight;

				mCompressedData = new unsigned char*[mCompressedLevels];

				mCompressedData[0] = new unsigned char[mCompressedWidth[0] * mCompressedHeight[0] * Engine::Graphics::GetFormatSize(mCompressedFormat) / (Engine::Graphics::GetBlockSize(mCompressedFormat) * Engine::Graphics::GetBlockSize(mCompressedFormat))];

				Engine::TextureCompressor::Compress(mCompressedWidth[0], mCompressedHeight[0], mCompressedData[0], mImage->mData, format, 4, true, dithering, mImage->mBpp == 16 ? true : false, exposure);

				mNumCompressedMiplevels = 1.0f;

				mCompressed->Init(mRenderer, mCompressedWidth[0], mCompressedHeight[0], 1, mCompressedFormat, (const void*)mCompressedData[0]);
			}

			mCompressed->SetName(""Compressed"");
		}
	}

public:
	/// <summary>
	/// Headless compression of input image into output image based on input parameters
	/// 
	/// <para>Format types:</para>
	/// <para>0 - BC1</para>
	/// <para>1 - BC2</para>
	/// <para>2 - BC3</para>
	/// <para>3 - BC4</para>
	/// <para>4 - BC5</para>
	/// </summary>
	/// <param name=""log"">Log to write errors/info into</param>
	/// <param name=""input"">Input image filename</param>
	/// <param name=""output"">Output image filename</param>
	/// <param name=""format"">Format type</param>
	/// <param name=""dithering"">Use dithering?</param>
	/// <param name=""generateMipmaps"">Generate mipmaps?</param>
	/// <param name=""alphaMipmap"">Use alpha conservation when generating mipmaps?</param>
	/// <param name=""normalMipmap"">Generate normal-map mipmaps (renormalize each level)?</param>
	/// <param name=""exposure"">Exposure value to pre-multiply original image with</param>
	static void CompressHeadless(Engine::Log* log, const std::string& input, const std::string& output, int format, bool dithering, bool generateMipmaps, bool alphaMipmap, bool normalMipmap, float exposure)
	{
		Engine::LoaderDevIL* loader = new Engine::LoaderDevIL(log);

		Engine::LoaderDevIL::Image* image = loader->Load(input, true, true);
		if (image != nullptr)
		{

			Engine::TextureCompressor::Format compressFormat = (Engine::TextureCompressor::Format)format;

			Engine::Graphics::Format compressedFormat;
			switch (compressFormat)
			{
			case Engine::TextureCompressor::Format::BC1:
				compressedFormat = Engine::Graphics::BC1;
				break;

			case Engine::TextureCompressor::Format::BC2:
				compressedFormat = Engine::Graphics::BC2;
				break;

			case Engine::TextureCompressor::Format::BC3:
				compressedFormat = Engine::Graphics::BC3;
				break;

			case Engine::TextureCompressor::Format::BC4:
				compressedFormat = Engine::Graphics::BC4;
				break;

			case Engine::TextureCompressor::Format::BC5:
				compressedFormat = Engine::Graphics::BC5;
				break;

			case Engine::TextureCompressor::Format::BC6H:
				compressedFormat = Engine::Graphics::BC6H;
				break;
			}

			image->mUseAlphaMipmap = alphaMipmap;
			if (normalMipmap)
			{
				loader->GenerateMipmapsNormal(image);
			}
			else
			{
				loader->GenerateMipmaps(image);
			}

			size_t compressedLevels = 0;
			size_t* compressedWidth = nullptr;
			size_t* compressedHeight = nullptr;
			unsigned char** compressedData = nullptr;

			if (generateMipmaps)
			{
				size_t width = image->mWidth;
				size_t height = image->mHeight;
				compressedLevels = 1;

				while (width > 4 && height > 4)
				{
					width /= 2;
					height /= 2;

					if ((width % 4 == 0) && (height % 4 == 0))
					{
						compressedLevels++;
					}
					else
					{
						break;
					}
				}

				compressedWidth = new size_t[compressedLevels];
				compressedHeight = new size_t[compressedLevels];

				width = image->mWidth;
				height = image->mHeight;

				compressedData = new unsigned char* [compressedLevels];
				for (int i = 0; i < compressedLevels; i++)
				{
					compressedWidth[i] = width;
					compressedHeight[i] = height;

					compressedData[i] = new unsigned char[compressedWidth[i] * compressedHeight[i] * Engine::Graphics::GetFormatSize(compressedFormat) / (Engine::Graphics::GetBlockSize(compressedFormat) * Engine::Graphics::GetBlockSize(compressedFormat))];

					Engine::TextureCompressor::Compress(compressedWidth[i], compressedHeight[i], compressedData[i], image->mMipmaps[i], compressFormat, 4, true, dithering, image->mBpp == 16 ? true : false, exposure);

					width /= 2;
					height /= 2;
				}
			}
			else
			{
				compressedLevels = 1;
				compressedWidth = new size_t[compressedLevels];
				compressedHeight = new size_t[compressedLevels];
				compressedWidth[0] = image->mWidth;
				compressedHeight[0] = image->mHeight;

				compressedData = new unsigned char* [compressedLevels];

				compressedData[0] = new unsigned char[compressedWidth[0] * compressedHeight[0] * Engine::Graphics::GetFormatSize(compressedFormat) / (Engine::Graphics::GetBlockSize(compressedFormat) * Engine::Graphics::GetBlockSize(compressedFormat))];

				Engine::TextureCompressor::Compress(compressedWidth[0], compressedHeight[0],compressedData[0], image->mData, compressFormat, 4, true, dithering, image->mBpp == 16 ? true : false, exposure);
			}

			// Save the image
			Engine::LoaderSctex* sctexLoader = new Engine::LoaderSctex(log);

			std::vector<Engine::LoaderSctex::Image> data;

			for (size_t i = 0; i < compressedLevels; i++)
			{
				Engine::LoaderSctex::Image image;
				image.mWidth = compressedWidth[i];
				image.mHeight = compressedHeight[i];
				image.mData = compressedData[i];

				data.push_back(image);
			}

			sctexLoader->Save(output, compressedFormat, data);

			delete sctexLoader;

			for (size_t i = 0; i < compressedLevels; i++)
			{
				delete[] compressedData[i];
			}

			delete compressedWidth;
			delete compressedHeight;
			delete compressedData;

			delete image;
		}

		delete loader;
	}

	Main(Engine::Log* log, Engine::Constants* options) : Engine::System(""Main"")
	{
		EnableUpdater();

		mLog = log;
		mOptions = options;

		mWindow = new Engine::Window(log, options);
		mWindow->Create();

		mRenderer = new Engine::D3DRenderer(mWindow, log, options);
		mSwapChain = new Engine::D3DSwapChain(mRenderer, mWindow, log, options);

		static Engine::EventChannel chan;
		chan.Add<Engine::Keyboard::KeyPressed>(*this);
		chan.Add<Engine::Keyboard::KeyReleased>(*this);
		chan.Add<Engine::Keyboard::KeyChar>(*this);
		chan.Add<Engine::Mouse::MouseMove>(*this);
		chan.Add<Engine::Mouse::ButtonPressed>(*this);
		chan.Add<Engine::Mouse::ButtonReleased>(*this);
		chan.Add<Engine::Mouse::MouseWheel>(*this);
		chan.Add<Engine::Window::Resize>(*this);
	}

	virtual ~Main()
	{
		for (int i = 0; i < mCompressedLevels; i++)
		{
			delete mCompressedData[i];
		}
		delete[] mCompressedData;

		delete[] mCompressedWidth;
		delete[] mCompressedHeight;

		delete mImage;
		delete mCompressed;
		delete mUncompressed;

		delete mSwapChain;
		delete mRenderer;
		delete mWindow;
	}

	virtual bool Init()
	{
		int w;
		int h;
		this->mWindow->GetSize(&w, &h);

		mTexturesPass = new SkyeCuillin::RenderPassGUI(mRenderer, w, h);

		mImgui = new SkyeCuillin::ImguiSubsystem(mRenderer, w, h);
		ImGui::GetStyle().WindowBorderSize = 0;

		LoadTexture(""../Data/Shared/Test.png"");
		CompressTexture(Engine::TextureCompressor::Format::BC1, true, true, false, false, 1.0f);

		return true;
	}

	virtual void Shutdown()
	{
		mRenderer->Flush();

		delete mImgui;

		delete mTexturesPass;

		mWindow->Destroy();
	}

	virtual void Update()
	{
		static bool compressionShow = false;


		int w;
		int h;
		mWindow->GetSize(&w, &h);

		mWindow->Process();

		Engine::GraphicsContext* context = mRenderer->GetGraphicsContext();

		context->Begin();
		context->SetDescriptorHeap(Engine::DescriptorHeap::CBV_SRV_UAV, mRenderer->Heap());
		context->TransitionResource(mSwapChain->GetBackBuffer(), D3D12_RESOURCE_STATE_RENDER_TARGET, true);
		context->SetRenderTargets(mSwapChain->GetBackBuffer(), mSwapChain->GetDepthBuffer());
		context->SetViewport(0.0f, 0.0f, (float)w, (float)h);
		context->SetScissorRect(0.0f, 0.0f, (float)w, (float)h);
		context->ClearColor(mSwapChain->GetBackBuffer(), 0.0f, 0.0f, 0.0f, 1.0f);
		context->ClearDepth(mSwapChain->GetDepthBuffer(), 1.0f, 0);

		static bool alphaMask = false;
		static float exposure = 1.0f;
		static int mode = 0;

		Engine::float3 mUV[2] = {
			mTransform * Engine::float3(-1.0f, -1.0f, 1.0f),
			mTransform * Engine::float3(1.0f, 1.0f, 1.0f)
		};

		mTexturesPass->Clear();
		if (mUncompressed != nullptr)
		{
			mUncompressedMiplevel = mCurrentMiplevel;
			if (mCurrentMiplevel >= mNumUncompressedMiplevels)
			{
				mUncompressedMiplevel = mNumUncompressedMiplevels - 1.0f;
			}
			mTexturesPass->AddSprite(Engine::float2(0.0f, 0.0f), 
				Engine::float2(0.5f, 1.0f), 
				Engine::float2(mUV[0].x, mUV[0].y) * 0.5f + 0.5f, 
				Engine::float2(mUV[1].x, mUV[1].y) * 0.5f + 0.5f,
				Engine::float4(exposure, exposure, exposure, 1.0f), 
				mUncompressed, 
				mUncompressedMiplevel, 
				alphaMask ? mode + 5 : mode);
		}
		if (mCompressed != nullptr)
		{
			mCompressedMiplevel = mCurrentMiplevel;
			if (mCurrentMiplevel >= mNumCompressedMiplevels)
			{
				mCompressedMiplevel = mNumCompressedMiplevels - 1.0f;
			}
			mTexturesPass->AddSprite(Engine::float2(0.5f, 0.0f), 
				Engine::float2(0.5f, 1.0f), 
				Engine::float2(mUV[0].x, mUV[0].y) * 0.5f + 0.5f, 
				Engine::float2(mUV[1].x, mUV[1].y) * 0.5f + 0.5f, 
				Engine::float4(exposure, exposure, exposure, 1.0f), 
				mCompressed, 
				mCompressedMiplevel, 
				alphaMask ? mode + 5 : mode);
		}

		mTexturesPass->Render(mRenderer->Heap(), context);

		bool loadTexture = false;
		std::string textureFilename;

		mImgui->Update(context);
		mImgui->NewFrame();
		ImGui::SetNextWindowSize(ImVec2((float)w, 20.0f), ImGuiCond_Always);
		ImGui::SetNextWindowPos(ImVec2(0.0f, 0.0f));
		ImGui::PushStyleVar(ImGuiStyleVar_WindowRounding, 0.0f);
		if (ImGui::Begin(""Menu"", nullptr, ImGuiWindowFlags_NoTitleBar | ImGuiWindowFlags_NoResize | ImGuiWindowFlags_NoMove | ImGuiWindowFlags_NoScrollbar | ImGuiWindowFlags_NoCollapse | ImGuiWindowFlags_MenuBar))
		{
			if (ImGui::BeginMenuBar())
			{
				if (ImGui::BeginMenu(""File""))
				{
					if (ImGui::MenuItem(""Open"", ""CTRL+O"", nullptr))
					{
						std::string filename;
						bool open = Engine::FileDialog::Show(mLog, ""Open Image"", ""Image Files\0*.jpg;*.jpeg;*.png;*.bmp;*.tga;*.dds;*.tif;*.gif;*.sctex\0All Files\0*.*\0"", Engine::FileDialog::Type::OPEN_FILE_DIALOG, filename);
						if (open)
						{
							textureFilename = filename;
							loadTexture = true;

							// Reset miplevel, view and exposure when loading a new image
							mCurrentMiplevel = 0.0f;
							mTransform = Engine::mat3();
							exposure = 1.0f;
						}
					}

					if (ImGui::MenuItem(""Save"", ""CTRL+S"", nullptr))
					{
						std::string filename;
						bool save = Engine::FileDialog::Show(mLog, ""Save Compressed Image"", ""Skye Cuillin Texture\0*.sctex\0All Files\0*.*\0"", Engine::FileDialog::Type::SAVE_FILE_DIALOG, filename);
						if (save)
						{
							Engine::LoaderSctex* sctexLoader = new Engine::LoaderSctex(mLog);

							std::vector<Engine::LoaderSctex::Image> data;

							for (size_t i = 0; i < mCompressedLevels; i++)
							{
								Engine::LoaderSctex::Image image;
								image.mWidth = mCompressedWidth[i];
								image.mHeight = mCompressedHeight[i];
								image.mData = mCompressedData[i];

								data.push_back(image);
							}

							sctexLoader->Save(filename, mCompressedFormat, data);

							delete sctexLoader;
						}
					}

					if (ImGui::MenuItem(""Exit""))
					{
						static Engine::EventChannel chan;
						chan.Broadcast(Engine::Scheduler::StopEvent());
					}

					ImGui::EndMenu();
				}

				if (ImGui::BeginMenu(""Edit""))
				{
					if (ImGui::MenuItem(""Compress""))
					{
						compressionShow = true;
					}

					ImGui::EndMenu();
				}

				if (ImGui::BeginMenu(""View""))
				{
					if (ImGui::MenuItem(""Mip Level Up""))
					{
						mCurrentMiplevel = mCurrentMiplevel - 1.0f;
						if (mCurrentMiplevel < 0.0f)
						{
							mCurrentMiplevel = 0.0f;
						}
					}

					if (ImGui::MenuItem(""Mip Level Down""))
					{
						mCurrentMiplevel = mCurrentMiplevel + 1.0f;
						float maxLevel = Engine::Math::Max(mNumCompressedMiplevels, mNumUncompressedMiplevels);
						if (mCurrentMiplevel >= maxLevel)
						{
							mCurrentMiplevel = maxLevel - 1.0f;
						}
					}

					if (ImGui::MenuItem(""Reset View""))
					{
						mTransform = Engine::mat3();
					}

					if (ImGui::MenuItem(""Reset Exposure""))
					{
						exposure = 1.0f;
					}

					ImGui::EndMenu();
				}

				ImGui::RadioButton(""C"", &mode, 0);
				ImGui::RadioButton(""R"", &mode, 1);
				ImGui::RadioButton(""G"", &mode, 2);
				ImGui::RadioButton(""B"", &mode, 3);
				ImGui::RadioButton(""A"", &mode, 4);

				ImGui::Checkbox(""Alpha Mask"", &alphaMask);

				ImGui::SliderFloat(""Exposure"", &exposure, 0.0f, 10.0f);

				ImGui::EndMenuBar();
			}
		}
		ImGui::End();
		ImGui::PopStyleVar();

		if (compressionShow)
		{
			if (ImGui::Begin(""Compress"", nullptr, ImGuiWindowFlags_NoCollapse))
			{
				const char* compression[] = { ""BC1"", ""BC2"", ""BC3"", ""BC4"", ""BC5"", ""BC6H""};
				static int compressionSelected = 0;
				ImGui::Combo(""Compression Type"", &compressionSelected, compression, IM_ARRAYSIZE(compression));

				static bool dithering = false;
				ImGui::Checkbox(""Use Dithering"", &dithering);

				static bool generateMipmaps = false;
				ImGui::Checkbox(""Generate Mipmaps"", &generateMipmaps);

				static bool alphaMipmaps = false;
				ImGui::Checkbox(""Alpha Mipmaps"", &alphaMipmaps);

				static bool normalMipmaps = false;
				ImGui::Checkbox(""Normal Mipmaps"", &normalMipmaps);

				if (ImGui::Button(""Compress""))
				{
					CompressTexture((Engine::TextureCompressor::Format)compressionSelected, dithering, generateMipmaps, alphaMipmaps, normalMipmaps, exposure);
					compressionShow = false;
				}
				ImGui::SameLine();
				if (ImGui::Button(""Cancel""))
				{
					compressionShow = false;
				}
			}
			ImGui::End();
		}

		ImGui::SetNextWindowSize(ImVec2((float)w, 24.0f), ImGuiCond_Always);
		ImGui::SetNextWindowPos(ImVec2(0.0f, (float)h - 24.0f));
		ImGui::PushStyleVar(ImGuiStyleVar_WindowRounding, 0.0f);
		if (ImGui::Begin(""StatusBar"", nullptr, ImGuiWindowFlags_NoTitleBar | ImGuiWindowFlags_NoResize | ImGuiWindowFlags_NoMove | ImGuiWindowFlags_NoScrollbar | ImGuiWindowFlags_NoCollapse))
		{
			ImGui::Text(""Mip Level %2f    Position (%4f, %4f)"", mCurrentMiplevel, (mUV[0].x + mUV[1].x) * 0.5f, (mUV[1].y + mUV[1].y) * 0.5f);
		}
		ImGui::End();
		ImGui::PopStyleVar();

		mImgui->Render();

		context->TransitionResource(mSwapChain->GetBackBuffer(), D3D12_RESOURCE_STATE_PRESENT, true);
		uint64_t fence = context->Finish();

		mSwapChain->SwapBuffers();

		if (loadTexture)
		{
			LoadTexture(textureFilename);
		}
	}

	void Handle(const Engine::Keyboard::KeyChar& kc)
	{
		ImGuiIO& io = ImGui::GetIO();

		if (kc.mKey < 256)
		{
			io.AddInputCharacter((ImWchar)kc.mKey);
		}
	}

	void Handle(const Engine::Keyboard::KeyPressed& kp)
	{
		ImGuiIO& io = ImGui::GetIO();
		io.KeysDown[kp.mKey] = 1;

		Engine::Input* input = (Engine::Input*)Engine::Core::Instance()->Get(""Input"");
		/*if (input->GetKeyboard()->GetKeyState(Engine::Keyboard::KEY_CONTROL_L))
		{
			io.AddInputCharacter((ImWchar)kp.mKey);
		}*/

		switch (kp.mKey)
		{
		case Engine::Keyboard::KEY_CONTROL_L:
			io.KeyCtrl = true;
			break;

		case Engine::Keyboard::KEY_ALT_L:
			io.KeyAlt = true;
			break;

		case Engine::Keyboard::KEY_SHIFT_L:
			io.KeyShift = true;
			break;
		}

		switch (kp.mKey)
		{
		case Engine::Keyboard::KEY_PAGE_UP:
			mCurrentMiplevel = mCurrentMiplevel - 1.0f;
			if (mCurrentMiplevel < 0.0f)
			{
				mCurrentMiplevel = 0.0f;
			}
			break;

		case Engine::Keyboard::KEY_PAGE_DOWN:
			mCurrentMiplevel = mCurrentMiplevel + 1.0f;
			float maxLevel = Engine::Math::Max(mNumCompressedMiplevels, mNumUncompressedMiplevels);
			if (mCurrentMiplevel >= maxLevel)
			{
				mCurrentMiplevel = maxLevel - 1.0f;
			}
			break;
		}
	}

	void Handle(const Engine::Keyboard::KeyReleased& kp)
	{
		ImGuiIO& io = ImGui::GetIO();
		io.KeysDown[kp.mKey] = 0;

		switch (kp.mKey)
		{
		case Engine::Keyboard::KEY_CONTROL_L:
			io.KeyCtrl = false;
			break;

		case Engine::Keyboard::KEY_ALT_L:
			io.KeyAlt = false;
			break;

		case Engine::Keyboard::KEY_SHIFT_L:
			io.KeyShift = false;
			break;
		}
	}

	bool mMousing = false;
	
	float mPrevMouse[2];

	void Handle(const Engine::Mouse::MouseMove& m)
	{
		ImGuiIO& io = ImGui::GetIO();
		io.MousePos.x = (float)m.mX;
		io.MousePos.y = (float)m.mY;

		// Check whether we're moving with mouse and whether mouse isn't over ImGUI panels/windows - if both apply, update viewport transform
		if (mMousing && !io.WantCaptureMouse)
		{
			float mDeltaMouse[2];
			mDeltaMouse[0] = mPrevMouse[0] - (float)m.mX;
			mDeltaMouse[1] = mPrevMouse[1] - (float)m.mY;

			int w = 0;
			int h = 0;
			mWindow->GetSize(&w, &h);

			Engine::float3 transform = Engine::float3(mDeltaMouse[0] * 1.0f / (float)w, mDeltaMouse[1] * 1.0f / (float)h, 1.0f);

			mTransform = mTransform * Engine::mat3(transform);
		}

		mPrevMouse[0] = (float)m.mX;
		mPrevMouse[1] = (float)m.mY;
	}

	void Handle(const Engine::Mouse::MouseWheel& m)
	{
		ImGuiIO& io = ImGui::GetIO();
		io.MouseWheel = (float)m.mDelta / 120.0f;

		// Check whether mouse isn't over ImGUI panels/windows - if it isn't, zoom in/out viewport
		if (!io.WantCaptureMouse)
		{
			if (m.mDelta < 0)
			{
				mTransform = mTransform * Engine::mat3(1.1f, 0.0f, 0.0f, 0.0f, 1.1f, 0.0f, 0.0f, 0.0f, 1.0f);
			}
			else if (m.mDelta > 0)
			{
				mTransform = mTransform * Engine::mat3(0.9f, 0.0f, 0.0f, 0.0f, 0.9f, 0.0f, 0.0f, 0.0f, 1.0f);
			}
		}
	}

	void Handle(const Engine::Mouse::ButtonPressed& bp)
	{
		ImGuiIO& io = ImGui::GetIO();
		io.MouseDown[bp.mButton] = true;

		if (bp.mButton == 0)
		{
			mMousing = true;
		}
	}

	void Handle(const Engine::Mouse::ButtonReleased& br)
	{
		ImGuiIO& io = ImGui::GetIO();
		io.MouseDown[br.mButton] = false;

		if (br.mButton == 0)
		{
			mMousing = false;
		}
	}

	void Handle(const Engine::Window::Resize& r)
	{
		mSwapChain->Resize(r.mWidth, r.mHeight);
		mImgui->Resize(r.mWidth, r.mHeight);
		mTexturesPass->Resize(r.mWidth, r.mHeight);
	}
};

int main(int argc, char** argv)
{
	Engine::Log* log = new Engine::Log();
	log->AddOutput(new std::ofstream(""Output.log""), Engine::Log::LOG_DEFAULT);

	if (argc > 1)
	{
		int inputIndex = -1;
		std::string input;
		int outputIndex = -1;
		std::string output;
		int formatIndex = -1;
		int format = 0;
		bool dithering = false;
		bool mipmaps = false;
		bool alphaMipmaps = false;
		bool normalMipmaps = false;
		bool useExposure = false;
		int exposureIndex = -1;
		float exposure = 1.0f;

		for (int i = 0; i < argc; i++)
		{
			std::string arg = std::string(argv[i]);

			if ((arg == ""--input"" || arg == ""-i"") && argc >(i + 1) && inputIndex == -1)
			{
				inputIndex = i + 1;
			}
			else if ((arg == ""--output"" || arg == ""-o"") && argc > (i + 1) && outputIndex == -1)
			{
				outputIndex = i + 1;
			}
			else if ((arg == ""--format"" || arg == ""-f"") && argc > (i + 1) && formatIndex == -1)
			{
				formatIndex = i + 1;
			}
			else if (arg == ""--dithering"" || arg == ""-d"")
			{
				dithering = true;
			}
			else if (arg == ""--mipmaps"" || arg == ""-m"")
			{
				mipmaps = true;
			}
			else if (arg == ""--alpha"" || arg == ""-a"")
			{
				alphaMipmaps = true;
			}
			else if (arg == ""--normals"" || arg == ""-n"")
			{
				normalMipmaps = true;
			}
			else if ((arg == ""--exposure"" || arg == ""-e"") && argc > (i + 1) && exposureIndex == -1)
			{
				useExposure = true;
				exposureIndex = i + 1;
			}
		}

		input = argv[inputIndex];
		if (input[0] == '\""')
		{
			input = input.substr(1, input.length() - 2);
		}

		output = argv[outputIndex];
		if (output[0] == '\""')
		{
			output = output.substr(1, output.length() - 2);
		}

		format = std::atoi(argv[formatIndex]);

		if (exposureIndex > -1)
		{
			exposure = std::atof(argv[exposureIndex]);
		}

		if (inputIndex == -1 || outputIndex == -1 || formatIndex == -1 || input.length() == 0 || output.length() == 0 || format < 0 || format > 4)
		{
			std::cout << ""Error: Invalid arguments, required arguments are:"" << std::endl << std::endl;
			std::cout << ""--input, -i"" << std::endl;
			std::cout << ""\tPath to input image file (*.*)"" << std::endl;
			std::cout << ""--output, -o"" << std::endl;
			std::cout << ""\tPath to output image file (*.sctex)"" << std::endl;
			std::cout << ""--format, -f"" << std::endl;
			std::cout << ""\tFormat to use for compression (0 - BC1, 1 - BC2, 2 - BC3, 3 - BC4, 4 - BC5)"" << std::endl;
			std::cout << ""--dithering, -d"" << std::endl;
			std::cout << ""\tUse dithering to improve"" << std::endl;
			std::cout << ""--mipmaps, -m"" << std::endl;
			std::cout << ""\tPath to input image file"" << std::endl;
			std::cout << ""--alpha, -a"" << std::endl;
			std::cout << ""\tPath to input image file"" << std::endl;
			std::cout << ""--normals, -n"" << std::endl;
			std::cout << ""\tPath to input image file"" << std::endl;
			std::cout << ""--exposure, -e"" << std::endl;
			std::cout << ""\tExposure value - decimal number, default is 1.0"" << std::endl;
		}
		else
		{
			Main::CompressHeadless(log, input, output, format, dithering, mipmaps, alphaMipmaps, normalMipmaps, exposure);
		}
	}
	else
	{
		Engine::Constants* options = new Engine::Constants(log, ""../Data/Config/ConfigTexture.conf"");

		Engine::Input* input = new Engine::Input();

		Main* m = new Main(log, options);

		Engine::Core::Instance()->Add(input);
		Engine::Core::Instance()->Add(m);
		Engine::Core::Instance()->SetLog(log);
		Engine::Core::Instance()->SetOptions(options);

		Engine::Core::Instance()->Run();

		Engine::Core::Instance()->Dispose();

		delete m;
		delete input;
		delete options;
	}

	delete log;

	Engine::MemoryDump(std::cout);

	return 0;
}"
JP0tdf4s,Python 3.10+ Two Function Complete Monad Library!,HasteBin0,Python,Sunday 17th of September 2023 05:52:48 PM CDT,"# py_struct = NamedTuple
class CompareResult(py_struct):
    les: bool
    equ: bool
    gtr: bool


cmp_str_input_t = NewType('cmp_str_input_t', Iterable[SupportsBytes and SupportsIndex and SupportsInt])


def cmp_iter_str(si1: cmp_str_input_t, si2: cmp_str_input_t) -> CompareResult:
    it1 = iter(si1)
    it2 = iter(si2)
    while True:
        c1 = next(it1, None)
        c2 = next(it2, None)
        n1 = c1 is None
        n2 = c2 is None
        if n1 and n2:
            return CompareResult(False, True, False)
        elif n1 ^ n2:
            return CompareResult(n1, False, n2)
        elif c1 != c2:
            return CompareResult(c1 < c2, False, c1 > c2)


class monad_attr_err_spec_t(py_struct):
    obj_type: Type[Any]
    attr_name: str
    fxn_triggered: callable


def monad(call_function: callable, *op_types: monad_attr_err_spec_t, pass_types: bool = False) -> callable:
    def _i(*args, **kwargs):
        try:
            if pass_types:
                return call_function(*args, op_types = op_types, **kwargs)
            return call_function(*args, **kwargs)
        except AttributeError as attr_err:  # https://docs.python.org/3.11/library/exceptions.html#AttributeError
            if attr_err.obj is None:
                return
            ae_obj, ae_name = attr_err.obj, attr_err.name  # Changed in version 3.10: Added the name and obj attributes.
            x: monad_attr_err_spec_t
            for x in op_types:
                if x.obj_type is type(ae_obj) and ae_name == x.attr_name:
                    return x.fxn_triggered(*args, ae_obj = ae_obj, ae_name = ae_name, **kwargs)
    
    return _i"
MTHAS4EY,Untitled,skimono,C++,Sunday 17th of September 2023 05:24:55 PM CDT,"#pragma GCC optimize(""Ofast"") // ������������ ���������, �� ��� ������
#pragma GCC optimize(""no-stack-protector"") //�����
#pragma GCC optimize(""unroll-loops"") // � ���� ���� ��� �� 100 �� ������ ����� � ��������� �� ��� � 100 ��� �� ������ ��������
#pragma GCC target(""sse,sse2,sse3,ssse3,popcnt,abm,mmx,tune=native"") // ��� ����� ����� �� ��� 03 02 ��������� � ������ ������� �������� ��� ���� ������������
#pragma GCC optimize(""fast-math"")
#define _CRT_SECURE_NO_WARNINGS

#include <iostream>
#include <vector>
#include <string>
#include <algorithm>
#include <cmath>
#include <stack>
#include <iomanip>
#include <fstream>
#include <string>
#include <set>
#include <deque>
#include <queue>
#include <map>
#include <bitset>
#include <random>
#include <list>
#include <unordered_map>
#include <unordered_set>
#include <cassert>

using namespace std;

typedef long long ll;
typedef short sh;
typedef unsigned long long ull;
typedef long double ld;
typedef string str;
//typedef __int128 ultraint;
#define sqrt sqrtl
#define F first
#define S second
#define endl '\n'
#define all(vc666) vc666.begin(), vc666.end()
#define allr(vc666) vc666.rbegin(), vc666.rend()
#define int long long
#define degug(x) cerr (#x) << "" "" << (x) << endl;

const ll INF = 2e18;
const ll inf = 2e9 + 3;
const ll ONE = 1, ZERO = 0;
const ll mod = 998244353;
const ll m1 = 1e9 + 575179;
const ll m2 = 1e9 + 87;
const ll LG = 19;
const ll k = 1;
const ll p = 79;
ld EPS = 1e-9;
ld PI = 3.1415926535897932384;
ld phi = (sqrt(5) + 1.0) / 2.0;
mt19937_64 rnd(4906);

struct Query {
    int l, r, idx;
};

const int N = 1e5 + 3;
pair <int, int> pw[N];
pair <int, int> h[N];
map <int, int> keys[N];
vector <int> base[N], base2[N];
int ans[N];
Query Q[N];

pair <int, int> get_h(int l, int r) {
    return { (h[r + 1].first - (h[l].first * pw[r - l + 1].first) % m1 + m1) % m1, (h[r + 1].second - (h[l].second * pw[r - l + 1].second) % m2 + m2) % m2 };
}

bool cmp(const Query& a, const Query& b) {
    if (a.l / k != b.l / k) {
        return a.l < b.l;
    }
    else {
        return a.r < b.r;
    }
}

void solve() {
    string t, s;
    int n, len_t, len_s, len, i, j, m, l, r, q, res, lst = -1;
    cin >> t;
    len_t = t.size();
    pw[0] = { 1, 1 };
    h[0] = { 0, 0 };
    for (i = 1; i <= len_t; i++) {
        pw[i].first = (pw[i - 1].first * p) % m1;
        pw[i].second = (pw[i - 1].second * p) % m2;
        h[i].first = (h[i - 1].first * p + (t[i - 1] - 'a' + ONE)) % m1;
        h[i].second = (h[i - 1].second * p + (t[i - 1] - 'a' + ONE)) % m2;
    }
    pair <int, int> hesh;
    vector <int> rzl;
    cin >> n;
    for (i = 0; i < n; i++) {
        cin >> s;
        len_s = s.size();
        rzl.push_back(len_s);
        hesh = { 0, 0 };
        for (j = 0; j < len_s; j++) {
            hesh.first = (hesh.first * p + (s[j] - 'a' + ONE)) % m1;
            hesh.second = (hesh.second * p + (s[j] - 'a' + ONE)) % m2;
        }
        keys[len_s][hesh.first * m1 + hesh.second] = i;
    }
    sort(all(rzl));
    rzl.resize(unique(all(rzl)) - rzl.begin());
    m = rzl.size();
    for (i = 0; i < len_t; i++) {
        for (j = 0; j < m; j++) {
            len = rzl[j];
            if (i + len - 1 < len_t) {
                hesh = get_h(i, i + len - 1);
                if (keys[len].contains(hesh.first * m1 + hesh.second)) {
                    base[i].push_back(len);
                    base2[i + len - 1].push_back(len);
                }
            }
        }
    }
    for (i = 0; i < len_t; i++) {
        sort(all(base2[i]));
    }
    cin >> q;
    for (i = 0; i < q; i++) {
        cin >> Q[i].l >> Q[i].r;
        Q[i].idx = i;
        Q[i].l--;
        Q[i].r--;
    }
    sort(Q, Q + q, cmp);
    int left, right, last_r, last_l;
    for (i = 0; i < q; i++) {
        if (Q[i].l / k != lst) {
            lst = Q[i].l / k;
            l = Q[i].l;
            r = Q[i].l - 1;
            res = 0;
        }
        last_r = r;
        last_l = l;
        for (r; r < Q[i].r; r++) {
            left = -1, right = base2[r + 1].size();
            while (right - left > 1) {
                m = (left + right) / 2;
                if (r + 1 - base2[r + 1][m] + 1 >= last_l) {
                    left = m;
                }
                else {
                    right = m;
                }
            }
            res += right;
        }
        for (l; l > Q[i].l; l--) {
            left = -1, right = base[l - 1].size();
            while (right - left > 1) {
                m = (left + right) / 2;
                if (l - 1 + base[l - 1][m] - 1 <= r) {
                    left = m;
                }
                else {
                    right = m;
                }
            }
            res += right;
        }
        for (l; l < Q[i].l; l++) {
            left = -1, right = base[l].size();
            while (right - left > 1) {
                m = (left + right) / 2;
                if (l + base[l][m] - 1 <= r) {
                    left = m;
                }
                else {
                    right = m;
                }
            }
            res -= right;
        }
        ans[Q[i].idx] = res;
    }
    for (i = 0; i < q; i++) {
        cout << ans[i] << "" "";
    }
}

signed main() {
#ifdef _DEBUG
    freopen(""input.txt"", ""r "", stdin);
    freopen(""output.txt"", ""w"", stdout);
#endif
    ios_base::sync_with_stdio(0);
    cin.tie(NULL);
    cout.tie(NULL);
    int t = 1;
    //cin >> t;
    while (t--) solve();
}
//Deisgned by skimono
//Клуб ""Кольца(Серьги)"""
LYBSuxh5,WindManager,GoodNoodle,C#,Sunday 17th of September 2023 05:22:47 PM CDT,"using DG.Tweening;
using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class WindMaker : MonoBehaviour
{

    public float waitTime;

    public float speed;

    [SerializeField] public PlayerController player, buddy;


    // Start is called before the first frame update
    void Start()
    {
      
       
    }

    // Update is called once per frame
    void Update()
    {
        Vector2 pos = player.theRb.position;
        player.theRb.position += Vector2.down * speed * Time.deltaTime;
        player.theRb.MovePosition(pos);
    }

    private void OnTriggerStay2D(Collider2D other)
    {
        if(other.tag == ""Player"")
        {
            StartCoroutine(PushDirection());
        }
    }

    public IEnumerator PushDirection()
    {
        Vector2 pos = player.theRb.position;
        player.theRb.position += Vector2.down * speed * Time.deltaTime;
        player.theRb.MovePosition(pos);

       yield return new WaitForSeconds(waitTime);     
    }
}
"
1aqAuSGs,Untitled,corbinjo,SQL,Sunday 17th of September 2023 04:59:28 PM CDT,"--1.   Kreirati bazu podataka pod nazivom ZadaciZaVjezbu.
CREATE DATABASE ZadaciZaVjezbu
GO
USE ZadaciZaVjezbu
 
--2.   U pomenutoj bazi kreirati tabelu Aplikanti koja æe sadržavati sljedeæe kolone: Ime, Prezime i Mjesto_roðenja. Sva navedena polja trebaju da budu tekstualnog tipa, te prilikom kreiranja istih paziti da se ne zauzimaju bespotrebno memorijski resursi.
CREATE TABLE Aplikanti
(
Ime NVARCHAR(10),
Prezime NVARCHAR(20),
MjestoRodjenja NVARCHAR(50)
)
--3.   U tabelu Aplikanti dodati kolonu AplikantID, te je proglasiti primarnim kljuèem tabele (kolona mora biti autonkrement)
ALTER TABLE Aplikanti
ADD AplikantID INT NOT NULL IDENTITY(1,1)
 
ALTER TABLE Aplikanti
ADD CONSTRAINT PK_Aplikant PRIMARY KEY(AplikantID)
--4.   U bazi ZadaciZaVjezbu kreirati tabelu Projekti koji æe sadržavati sljedeæe kolone: Naziv projekta, Akronim projekta, Svrha projekta i Cilj projekta. Sva polja u tabeli su tekstualnog tipa, te prilikom kreiranja istih paziti da se ne zauzimaju bespotrebno memorijski resursi. Sva navedena polja osim cilja projekta moraju imati vrijednost.
CREATE TABLE Projekti
(
NazivProjekta NVARCHAR(30) NOT NULL,
AkronimProjekta NVARCHAR(30) NOT NULL,
SvrhaProjekta NVARCHAR(150) NOT NULL,
CiljProjekta NVARCHAR(150)
 
)
--5.   U tabelu Projekti dodati kolonu Sifra projekta, te je proglasiti primarnim kljuèem tabele.
ALTER TABLE Projekti
ADD SifraProjekta NVARCHAR(30) PRIMARY KEY
--6.   U tabelu Aplikanti dodati kolonu projekatID koje æe biti spoljni kljuè na tabelu projekat.
ALTER TABLE Aplikanti
ADD ProjekatID NVARCHAR(30) NOT NULL CONSTRAINT FK_Aplikant_Projekti FOREIGN KEY REFERENCES Projekti(sifraProjekta)
--7.   U bazi podataka ZadaciZaVjezbu kreirati tabelu TematskeOblasti koja æe sadržavati sljedeæa polja tematskaOblastID, naziv i opseg. TematskaOblastID predstavlja primarni kljuè tabele, te se automatski uveæava. Sva definisana polja moraju imati vrijednost. Prilikom definisanja dužine polja potrebno je obratiti pažnju da se ne zauzimaju bespotrebno memorijski resursi.
CREATE TABLE TematskeOblasti
(
TematskaOblastID INT CONSTRAINT PK_TematskaOblast PRIMARY KEY,
Naziv NVARCHAR(50) NOT NULL,
Opseg NVARCHAR(150) NOT NULL
)
--8.   U tabeli Aplikanti dodati polje email koje je tekstualnog tipa i može ostati prazno.
ALTER TABLE Aplikanti
ADD Email NVARCHAR(50)
--9.   U tabeli Aplikanti obrisati mjesto roðenja i dodati polja telefon i matièni broj. Oba novokreirana polja su tekstualnog tipa i moraju sadržavati vrijednost.
ALTER TABLE Aplikanti
DROP COLUMN MjestoRodjenja
 
ALTER TABLE Aplikanti
ADD Telefon NVARCHAR(10) NOT NULL,
MaticniBroj NVARCHAR(13) NOT NULL --CONSTRAINT UQ_Aplikanti_MaticniBroj UNIQUE
--10.  Obrisati tabele kreirane u prethodnim zadacima
DROP TABLE Aplikanti, TematskeOblasti, Projekti
--11.  Obrisati kreiranu bazu
DROP DATABASE ZadaciZaVjezbu
 
 
 
--1.         Kreirati bazu Procedure_ i aktivirati je.
CREATE DATABASE Procedure_
GO
USE Procedure_
--2.         Kreirati tabelu Proizvodi te prilikom kreiranja uraditi insert podataka iz tabele Products baze Northwind.
SELECT*
INTO Proizvodi
FROM Northwind.dbo.Products
 
--3.         Kreirati proceduru sp_Insert_Proizvod kojom æe se u tabeli Proizvodi uraditi insert novog zapisa.
GO
CREATE PROCEDURE sp_Products_Insert
(
@ProductName NVARCHAR(40),
@SupplierID INT=NULL,
@CategoryID INT=NULL,
@QuantityPerUnit NVARCHAR (20)= NULL,
@UnitPrice MONEY= NULL,
@UnitsInStock SMALLINT= NULL,
@UnitsOnOrder SMALLINT= NULL,
@ReorderLevel SMALLINT= NULL,
@Discontinued BIT
)
AS
BEGIN
INSERT INTO Proizvodi
VALUES(@ProductName,@SupplierID,@CategoryID,@QuantityPerUnit,@UnitPrice,@UnitsInStock,@UnitsOnOrder,@ReorderLevel,@Discontinued)
END
GO
--4.         Kreirati dva testna sluèaja, u prvom poslati podatke u sva polja, u drugom samo u ona koja su obavezna.
EXEC sp_Products_Insert
  @ProductName='Mlijeko',
  @SupplierID=1,
  @CategoryID=1,
  @QuantityPerUnit=2,
  @UnitPrice=1.4,
  @UnitsInStock=30,
  @UnitsOnOrder=0,
  @ReorderLevel=1,
  @Discontinued=1
 
SELECT*
FROM Proizvodi
ORDER BY 1 DESC
 
EXEC sp_Products_Insert
  @ProductName='Brašno',
  @Discontinued=1
 
--5.         Kreirati proceduru sp_Proizvod_Update kojom æe se u tabeli Proizvodi uraditi update zapisa.
GO
CREATE OR ALTER PROCEDURE sp_Proizvod_Update
(
@ProductID INT,
@ProductName NVARCHAR(40),
@SupplierID INT=NULL,
@CategoryID INT=NULL,
@QuantityPerUnit NVARCHAR (20)= NULL,
@UnitPrice MONEY= NULL,
@UnitsInStock SMALLINT= NULL,
@UnitsOnOrder SMALLINT= NULL,
@ReorderLevel SMALLINT= NULL,
@Discontinued BIT
)
AS
BEGIN
UPDATE Proizvodi
SET
                ProductName=ISNULL(@ProductName,ProductName),
                SupplierID=ISNULL(@SupplierID,SupplierID),
                CategoryID=ISNULL(@CategoryID,CategoryID),
                QuantityPerUnit=ISNULL(@QuantityPerUnit,QuantityPerUnit),
                UnitPrice=ISNULL(@UnitPrice,UnitPrice),
                UnitsInStock=ISNULL(@UnitsInStock,UnitsInStock),
                UnitsOnOrder=ISNULL(@UnitsOnOrder,UnitsOnOrder),
                ReorderLevel=ISNULL(@ReorderLevel,ReorderLevel),
                Discontinued=ISNULL(@Discontinued,Discontinued)
                WHERE ProductID=@ProductID
END
GO
 
EXEC sp_Proizvod_Update
  @ProductID=76,
  @ProductName='New product',
  @SupplierID=2,
  @ReorderLevel=1,
  @Discontinued=1
 
SELECT *
FROM Proizvodi
ORDER BY 1 DESC
 
 
GO
CREATE OR ALTER PROCEDURE sp_Proizvod_Update
(
@ProductId INT,
@ProductName NVARCHAR(40)=NULL,
@SupplierID INT=NULL,
@CategoryID INT=NULL,
@QuantityPerUnit NVARCHAR(20)=NULL,
@UnitPrice MONEY=NULL,
@UnitsInStock SMALLINT=NULL,
@UnitsOnOrder SMALLINT=NULL,
@ReorderLevel SMALLINT=NULL,
@Discontinued BIT
)
AS
BEGIN
UPDATE Proizvodi
SET
ProductName=ISNULL(@ProductName,ProductName),
SupplierID=ISNULL(@SupplierID,SupplierID),
CategoryID=      ISNULL(@CategoryID,CategoryID),
QuantityPerUnit=ISNULL(@QuantityPerUnit,QuantityPerUnit),
UnitPrice=ISNULL(@UnitPrice,UnitPrice),
UnitsInStock=ISNULL(@UnitsInStock,UnitsInStock),
UnitsOnOrder=ISNULL(@UnitsOnOrder,UnitsOnOrder),
ReorderLevel=ISNULL(@ReorderLevel,ReorderLevel),
Discontinued=ISNULL(@Discontinued,Discontinued)
WHERE ProductID=@ProductId
END
--6.         Kreirati testni sluèaj za update zapisa kroz proceduru.
EXEC sp_Proizvod_Update
  @ProductName='Mlijeko',
  @SupplierID=1,
  @CategoryID=1,
  @UnitPrice=1.6,
  @UnitsInStock=30,
  @UnitsOnOrder=0,
  @Discontinued=1,
  @ProductID=78
 
--7          Kreirati proceduru sp_Proizvod_Delete kojom æe se u tabeli Proizvodi uraditi delete odreðenog zapisa.
 
GO
CREATE PROCEDURE sp_Proizvod_Delete
(
                @ProductID INT
)
AS
BEGIN
DELETE FROM Proizvodi
WHERE ProductID=@ProductID
END
GO
 
 
GO
CREATE PROCEDURE sp_Proizvod_Delete
(
@ProductID int
)
AS
BEGIN
DELETE FROM Proizvodi
WHERE ProductID=@ProductID
END
 
--8.         Kreirati testni sluèaj za brisanje proizvoda sa id-om 78.
EXEC sp_Proizvod_Delete @ProductId=78
 
--9.         Kreirati tabelu StavkeNarudzbe te prilikom kreiranja uraditi insert podataka iz tabele Order Details baze Northwind.
SELECT*
INTO StavkeNarudzbe
FROM Northwind.dbo.[Order Details]
--10.      Kreirati proceduru sp_StavkeNarudzbe_Proizvodi_InsertUpdate kojom æe se u tabeli StavkeNarudzbe dodati nova stavka narudžbe a u tabeli Proizvodi umanjiti stanje za zalihama.
GO
CREATE PROCEDURE sp_StavkeNarudzbe_Proizvodi_InsertUpdate
(
@OrderID int,
@ProductID int,
@UnitPrice money,
@Quantity smallint,
@Discount real
)
AS
BEGIN
INSERT INTO StavkeNarudzbe
VALUES(@OrderID,@ProductID,@UnitPrice,@Quantity,@Discount)
 
UPDATE Proizvodi
SET UnitsInStock=UnitsInStock-@Quantity
WHERE ProductID=@ProductID
END
--11.      Kreirati testni sluèaj za prethodno kreiranu proceduru.
EXEC sp_StavkeNarudzbe_Proizvodi_InsertUpdate 10248,1,5,4,0.1
 
SELECT*
FROM StavkeNarudzbe
WHERE OrderID=10248
 
SELECT*
FROM Proizvodi
--12.      Kreirati proceduru kojom æe se u tabeli Proizvodi uraditi select proizvoda prema nazivu proizvoda i ID kategorije. Ukoliko korisnik ne unese ništa od navedenog prikazati sve proizvode.
GO
CREATE PROCEDURE sp_Proizvodi_SelectByProductNameOrCategoryID
(
@ProductName NVARCHAR(40)=NULL,
@CategoryID INT=NULL
)
AS
BEGIN
SELECT P.ProductName,P.CategoryID,P.UnitPrice,P.UnitsInStock,P.UnitsOnOrder
FROM Proizvodi as P
WHERE(ProductName=@ProductName OR @ProductName IS NULL) AND (CategoryID=@CategoryID OR @CategoryID IS NULL)
END
 
--13.      Prethodno kreiranu proceduru izvršiti sa sljedeæim testnim sluèajevima:
EXEC sp_Proizvodi_SelectByProductNameOrCategoryID @ProductName='Chai'
EXEC sp_Proizvodi_SelectByProductNameOrCategoryID @CategoryID=7
EXEC sp_Proizvodi_SelectByProductNameOrCategoryID @ProductName='Tofu',@CategoryID=7
EXEC sp_Proizvodi_SelectByProductNameOrCategoryID @ProductName=NULL,@CategoryID=NULL
 
 
--14.      Kreirati proceduru u bazi Procedure_ naziva  sp_uposlenici_selectAll nad tabelama HumanResources.Employee i Person.Person baze AdventureWorks2017 kojom æe se dati prikaz polja BusinessEntityID, FirstName, LastName i JobTitle. Proceduru podesiti da se rezultati sortiraju po BusinessEntityID.
 
GO
CREATE PROCEDURE sp_Uposlenici_selectAll
AS
BEGIN
SELECT  E.BusinessEntityID, P.FirstName, P.LastName, E.JobTitle
FROM AdventureWorks2017.HumanResources.Employee  AS E
INNER JOIN AdventureWorks2017.Person.Person  AS P
ON E.BusinessEntityID = P.BusinessEntityID
ORDER BY E.BusinessEntityID
END
 
EXEC sp_Uposlenici_selectAll
GO
 
--15.      Iz baze AdventureWorks2017 u tabelu Vendor kopirati tabelu Purchasing.Vendor.
SELECT *
INTO Vendor
FROM AdventureWorks2017.Purchasing.Vendor
--16.      Kreirati proceduru sp_vendor_deleteColumn kojom æe se izvršiti brisanje kolone PurchasingWebServiceURL.
GO
CREATE PROCEDURE SP_Vendor_deleteColumn
AS
BEGIN
ALTER TABLE Vendor
DROP COLUMN PurchasingWebServiceURL
END
 
EXEC sp_vendor_deleteColumn
 
SELECT * FROM Vendor
--17.      Kreirati proceduru sp_Vendor_updateColumn kojom æe se izvršiti update kolone AccountNumber tako da u svakom zapisu posljednji znak (cifra) podatka bude iskljuèivo 1.
GO
CREATE PROCEDURE sp_Vendor_updateAccountNumber
AS
BEGIN
UPDATE Vendor
SET AccountNumber = LEFT (AccountNumber, LEN (AccountNumber)-1) + '1'
WHERE RIGHT (AccountNumber,1) <> '1'
--WHERE CAST (RIGHT (AccountNumber,1) AS INT) != 1
--WHERE CONVERT (INT,RIGHT (AccountNumber,1)) <> 1
END
 
 
EXEC sp_Vendor_updateAccountNumber
 
SELECT*
FROM Vendor
--18.      18.          Kreirati proceduru u bazi Procedure_ naziva sp_Zaposlenici_SelectByFirstNameLastNameGender nad odgovarajuæim tabelama baze AdventureWorks2017 kojom æe se definirati sljedeæi ulazni parametri:
--            - EmployeeID,
--            - FirstName,
--            - LastName,
--            - Gender.
--Proceduru kreirati tako da je prilikom izvršavanja moguæe unijeti bilo koji broj parametara (možemo ostaviti bilo koje polje bez unijete vrijednosti parametra),
--te da procedura daje rezultat ako je zadovoljena bilo koja od vrijednosti koje su navedene kao vrijednosti parametara. Nakon kreiranja pokrenuti proceduru za sljedeæe vrijednosti parametara:
--•          EmployeeID = 20,
--•          LastName = Miller,
--•          LastName = Abercrombie Gender = M
 
GO
CREATE PROCEDURE sp_Zaposlenici_SelectByFirstNameLastNameGender
(
                @EmployeeID INT = NULL,
                @FirstName NVARCHAR (50) = NULL,
                @LastName NVARCHAR (50) = NULL,
                @Gender NCHAR (1) = NULL
)
AS
BEGIN
SELECT  e.BusinessEntityID, p.FirstName, p.LastName, e.Gender
FROM AdventureWorks2017.HumanResources.Employee AS E
INNER JOIN  AdventureWorks2017.Person.Person AS P
ON         E.BusinessEntityID = P.BusinessEntityID
WHERE E.BusinessEntityID = @EmployeeID OR P.FirstName = @FirstName OR P.LastName = @LastName OR E.Gender = @Gender
END
 
EXEC sp_Zaposlenici_SelectByFirstNameLastNameGender @EmployeeID = 20
 
EXEC sp_Zaposlenici_SelectByFirstNameLastNameGender @LastName = 'Miller'
 
EXEC sp_Zaposlenici_SelectByFirstNameLastNameGender @LastName = Abercrombie, @Gender = M
 
 
--19.      Proceduru sp_Zaposlenici_SelectByFirstNameLastNameGender izmijeniti tako da je prilikom izvršavanja moguæe unijeti bilo koje vrijednosti za prva tri parametra (možemo ostaviti bilo koje od tih polja bez unijete vrijednosti), a da vrijednost èetvrtog parametra bude F.
--Nakon izmjene pokrenuti proceduru za sljedeæe vrijednosti parametara:
--•          EmployeeID = 2,
--•          LastName = Miller
 
GO
ALTER PROCEDURE sp_Zaposlenici_SelectByFirstNameLastNameGender
(
                @EmployeeID INT = NULL,
                @FirstName NVARCHAR (50) = NULL,
                @LastName NVARCHAR (50) = NULL,
                @Gender NCHAR (1) = 'F'
)
AS
BEGIN
SELECT  E.BusinessEntityID, P.FirstName, P.LastName, E.Gender
FROM AdventureWorks2017.HumanResources.Employee AS E
INNER JOIN  AdventureWorks2017.Person.Person AS P
ON         E.BusinessEntityID = P.BusinessEntityID
WHERE (E.BusinessEntityID = @EmployeeID OR P.FirstName = @FirstName or P.LastName = @LastName) AND E.Gender = @Gender
END
 
EXEC sp_Zaposlenici_SelectByFirstNameLastNameGender @EmployeeID = 2
 
EXEC sp_Zaposlenici_SelectByFirstNameLastNameGender @LastName = 'Miller'
 
--20.      Kreirati proceduru u bazi Procedure_ naziva sp_Narudzbe_SelectByCustomerID nad odgovarajuæim tabelama baze Northwind, sa parametrom CustomerID kojom æe se dati pregled ukupno naruèenih koloèina svakog od proizvoda za unijeti ID Customera. Proceduru pokrenuti za ID Customera BOLID
GO
CREATE PROCEDURE sp_Narudzbe_SelectByCustomerID
@CustomerID NCHAR (5)
AS
BEGIN
SELECT  P.ProductName, SUM (OD.Quantity) as 'Ukupno narudèenih'
FROM Northwind.dbo.Products AS P
INNER JOIN Northwind.dbo.[Order Details] AS OD
ON P.ProductID = OD.ProductID
INNER JOIN Northwind.dbo.Orders AS O
ON OD.OrderID = O.OrderID
INNER JOIN Northwind.dbo.Customers AS C
ON O.CustomerID = C.CustomerID
WHERE C.CustomerID = @CustomerID
GROUP BY P.ProductName
ORDER BY 2 desc
END
 
EXEC sp_Narudzbe_SelectByCustomerID @CustomerID = BOLID
 
--21.      Koristeæi bazu Northwind pogled v_Narudzbe strukture:
--            - OrderID
--            - ShippedDate
--            - ukupno (predstavlja sumu vrijednosti stavki po narudžbi).
 
GO
CREATE VIEW v_Narudzbe
AS
SELECT  O.OrderID, O.ShippedDate, SUM (OD.Quantity * OD.UnitPrice) 'Ukupno'
FROM   Northwind.dbo.[Order Details] AS OD
INNER JOIN Northwind.dbo.Orders AS O
ON OD.OrderID = O.OrderID
GROUP BY O.OrderID, O.ShippedDate
GO
 
--22.      Koristeæi pogled v_Narudzbe kreirati proceduru sp_Prodavci_Zemlje sa paramterima:
--            - startDate, datumski tip
--            - endDate, datumski tip
--startDate i endDate su datumi izmeðu kojih se izraèunava suma prometa po narudžbi i obavezno je unijeti oba datuma.
--Procedura ima sljedeæu strukturu, odnosno vraæa sljedeæe podatke:
--            - OrderID
--            - Ukupno
--pri èemu æe kolona ukupno biti tipa money.
--Omoguæiti sortiranje u opadajuæem redoslijedu po Ukupno.
--Nakon kreiranja procedure pokrenuti za vrijednosti
--            - startDate          = 1997-01-01
--            - endDate           = 1997-12-31
 
GO
CREATE PROCEDURE sp_Prodavci_Zemlje
(
                @startDate        DATE,
                @endDate          DATE
)
AS
SELECT  OrderID, CAST (Ukupno AS MONEY)
FROM   v_Narudzbe
WHERE ShippedDate BETWEEN @startDate AND @endDate
ORDER BY 2
GO
 
EXEC sp_Prodavci_Zemlje @startDate = '1997-01-01', @endDate = '1997-12-31'
 
EXEC sp_Prodavci_Zemlje @startDate = '19970101', @endDate = '19971231'
 
--23.      Iz baze AdventureWorks2017 u bazu Procedure_ kopirati tabelu zaglavlje i tabelu stavke narudžbe za nabavke. Novokreirane tabele imenovati kao zaglavlje i detalji. U kreiranim tabelama definirati PK kao u tabelama u Bazi AdventureWorks2017. Definirati realtionships izmeðu tabela zaglavlje i stavke narudzbe.
SELECT *
INTO Detalji
FROM AdventureWorks2017.Purchasing.PurchaseOrderDetail
 
SELECT *
INTO Zaglavlje
FROM AdventureWorks2017.Purchasing.PurchaseOrderHeader
 
ALTER TABLE Zaglavlje
ADD CONSTRAINT PK_Zaglavlje PRIMARY KEY ([PurchaseOrderID])
 
ALTER TABLE Detalji
ADD CONSTRAINT PK_Detalji PRIMARY KEY ([PurchaseOrderID],[PurchaseOrderDetailID])
 
ALTER TABLE Detalji
ADD CONSTRAINT FK_Detalji_Zaglavlje FOREIGN KEY ([PurchaseOrderID]) REFERENCES Detalji ([PurchaseOrderID])
 
--24.      Kreirati proceduru sp_Narudzbe_Stavke sa paramterima:
--            - status, kratki cjelobrojni tip
--            - mjesecNarudzbe, cjelobrojni tip
--            - kvartalIsporuke, cjelobrojni tip
--            - vrijednostStavke, realni tip
--Procedura je sljedeæe strukture:
--            - status
--            - mjesec datuma narudžbe
--            - kvartal datuma isporuke
--            - naruèena kolièina
--            - cijena
--            - vrijednost stavke kao proizvod kolièine i cijene
--Uslov je da procedura dohvata samo one zapise u kojima je vrijednost kolone ukupno izmeðu 100 i 500, pri èemu æe prilikom pokretanja procedure rezultati biti sortirani u opadajuæem redoslijedu. Proceduru kreirati tako da je prilikom izvršavanja moguæe unijeti bilo koji broj parametara (možemo ostaviti bilo koje polje bez unijetog parametra), te da procedura daje rezultat ako je zadovoljena bilo koja od vrijednosti koje su navedene kao vrijednosti parametara.
--Nakon kreiranja procedure pokrenuti za sljedeæe vrijednosti parametara:
--            - status = 3
--            - kvartal_isporuke = 4
--            - mjesec_narudzbe = 3, status = 1
 
GO
CREATE PROCEDURE sp_Narudzbe_Stavke
(
                @status TINYINT = NULL,
                @mjesec_narudzbe INT = NULL,
                @kvartal_isporuke INT = NULL,
                @vrijednostStavke REAL = NULL
)
AS
SELECT  Z.Status, MONTH (Z.OrderDate) 'Mjesec',
                               DATEPART (QUARTER, Z.ShipDate) 'Kvartal',
                               D.OrderQty, D.UnitPrice, D.OrderQty * D.UnitPrice 'Vrijednost stavke'
FROM Zaglavlje AS Z
INNER JOIN Detalji AS D
ON Z.PurchaseOrderID = D.PurchaseOrderID
WHERE (Z.Status = @status OR MONTH (Z.OrderDate) = @mjesec_narudzbe OR DATEPART (QUARTER, Z.ShipDate) = @kvartal_isporuke OR
                               D.OrderQty * D.UnitPrice = @vrijednostStavke)
                               AND (D.OrderQty * D.UnitPrice) BETWEEN 100 AND 500
ORDER BY 6
GO
 
EXEC sp_Narudzbe_Stavke @status = 3
 
EXEC sp_Narudzbe_Stavke @kvartal_isporuke = 4
 
EXEC sp_Narudzbe_Stavke @mjesec_narudzbe = 3, @status = 1
 
 
--25.      Kreirati proceduru sp_Narudzbe_Stavke_sum sa paramterima:
--            - status, kratki cjelobrojni tip
--            - mjesecNarudzbe, cjelobrojni tip
--            - kvartalIsporuke, cjelobrojni tip
--Procedura je sljedeæe strukture:
--            - Status
--            - mjesec datuma narudžbe
--            - kvartal datuma isporuke
--            - ukupnu vrijednost narudžbe
--Uslov je da procedura dohvata samo one zapise u kojima je vrijednost kolone ukupno izmeðu 10000 i 5 000 000, pri èemu æe prilikom pokretanja procedure rezultati biti sortirani u opadajuæem redoslijedu.
--Proceduru kreirati tako da je prilikom izvršavanja moguæe unijeti bilo koji broj parametara (možemo ostaviti bilo koje polje bez unijetog parametra), te da procedura daje rezultat ako je zadovoljena bilo koja od vrijednosti koje su navedene kao vrijednosti parametara.
--Nakon kreiranja procedure pokrenuti za sljedeæe vrijednosti parametara:
--            - status = 1
--            - kvartal_isporuke = 4, mjesec_narudzbe = 3
 
GO
CREATE PROCEDURE sp_Narudzbe_Stavke_sum
(
                @status TINYINT = NULL,
                @mjesec_narudzbe INT = NULL,
                @kvartal_isporuke INT = NULL
)
AS
SELECT Z.Status, MONTH (Z.OrderDate) 'Mjesec', DATEPART (QUARTER, Z.ShipDate) 'Kvartal', SUM (D.OrderQty * D.UnitPrice) AS Ukupno
FROM Zaglavlje AS Z
INNER JOIN Detalji AS D
ON Z.PurchaseOrderID = D.PurchaseOrderID
WHERE (Z.Status = @status OR MONTH (Z.OrderDate) = @mjesec_narudzbe OR DATEPART (QUARTER, Z.ShipDate) = @kvartal_isporuke)
GROUP BY Z.Status, MONTH (Z.OrderDate), DATEPART (QUARTER, Z.ShipDate)
HAVING SUM(D.OrderQty * D.UnitPrice) BETWEEN 10000 AND 5000000
ORDER BY 4
GO
 
EXEC sp_Narudzbe_Stavke_sum @status = 1
 
EXEC sp_Narudzbe_Stavke_sum @kvartal_isporuke = 4, @mjesec_narudzbe = 3
 
--26.      Kreirati bazu Indeksi i aktivirati je.
CREATE DATABASE Indeksi_
GO
USE Indeksi_
 
--27.      Kreirati tabelu ProizvodiOsobe koja æe nastati spajanjem tabela Product i Person baze AdventureWorks2017 i prilikom kreiranja importovati 10 miliona zapisa.
SELECT TOP 100000000 P.ProductID,P.Name,P.ProductNumber,P.Color,P.ListPrice,PP.BusinessEntityID,PP.FirstName,PP.LastName,PP.MiddleName
INTO ProizvodiOsobe
FROM AdventureWorks2017.Production.Product AS P
CROSS JOIN AdventureWorks2017.Person.Person AS PP
 
--28.      Kreirati nonclustered index kojim æe se ubrzati pretraga po imenu i prezimenu. Kreirati testni sluèaj i pogledati aktualni plan izvršenja. Izbrisati kreirani index.
CREATE INDEX IX_proizvodiOsobe_FirstName_LastName
ON ProizvodiOsobe(FirstName,LastName)
 
SELECT PO.FirstName,PO.LastName
FROM ProizvodiOsobe AS PO
WHERE PO.FirstName LIKE 'A%' AND PO.LastName LIKE 'S%'
 
DROP INDEX IX_proizvodiOsobe_FirstName_LastName
ON ProizvodiOsobe
 
--29.      Kreirati nonclustered indeks koji æe omoguæiti bržu pretragu prema imenu i prezimenu a takoðer pretraga æe biti ubrzana iako se prikaže srednje ime. Kreirati testni sluèaj i pogledati plan izvršenja. Izbrisati kreirani index.
CREATE INDEX IX_proizvodiOsobe_FirstName_LastName_INC_MiddleName
ON ProizvodiOsobe(FirstName,LastName) INCLUDE(MiddleName)
 
SELECT PO.FirstName,PO.LastName,PO.MiddleName
FROM ProizvodiOsobe AS PO
WHERE PO.FirstName LIKE 'A%' AND PO.LastName LIKE 'S%' and po.MiddleName like 'L'
GROUP BY  PO.FirstName,PO.LastName,PO.MiddleName
 
DROP INDEX IX_proizvodiOsobe_FirstName_LastName_INC_MiddleName
ON ProizvodiOsobe
 
--30.      Kreirati kompozitni primarni kljuè nad kolonama ProductId i BusindessEntityId. Kreirati testni sluèaj za upotrebu primarnog kljuèa.
ALTER TABLE ProizvodiOsobe
ADD CONSTRAINT PK_ProizvodiOsobe_ProductId_BusinessEntityID PRIMARY KEY (ProductId, BusinessEntityId)
 
SELECT *
FROM ProizvodiOsobe AS PO
WHERE PO.ProductId = 1 AND PO.BusinessEntityID=14951
 
 
ALTER TABLE ProizvodiOsobe
DROP CONSTRAINT PK_ProizvodiOsobe_ProductId_BusinessEntityID
--31.      Kreirati clustered index nad kolonom ProductNumber. Kreirati testni sluèaj za upotrebu indexa i pogledati plan izvršenja. Izbrisati kreirani index.
CREATE CLUSTERED INDEX IX_proizvodiOsobe_ProductNumber
ON ProizvodiOsobe(ProductNumber)
 
SELECT *
FROM ProizvodiOsobe AS PO
WHERE PO.ProductNumber LIKE 'A%'
               
 
 
--Vježba 11_1 :: Zadaci
USE AdventureWorks2017
GO
--1.   Kreirati upit koji prikazuje kreditne kartice kojima je plaæeno više od 20 narudžbi. U listu ukljuèiti ime i prezime vlasnika kartice, tip kartice, broj kartice, ukupan iznos plaæen karticom. Rezultate sortirati prema ukupnom iznosu u opadajuæem redoslijedu.
SELECT PP.FirstName+' '+PP.LastName 'Ime i prezime', CC.CardType 'Tip kartice', CC.CardNumber 'Broj kartice',ROUND( SUM(SOH.TotalDue),2) 'Ukupan iznos'
FROM Person.Person AS PP
INNER JOIN Sales.PersonCreditCard AS PCC
ON PP.BusinessEntityID=PCC.BusinessEntityID
INNER JOIN Sales.CreditCard AS CC
ON PCC.CreditCardID=CC.CreditCardID
INNER JOIN Sales.SalesOrderHeader AS SOH
ON CC.CreditCardID=SOH.CreditCardID
GROUP BY PP.FirstName,PP.LastName , CC.CardType , CC.CardNumber
HAVING COUNT(*)>20
ORDER BY 4 DESC
 
 
--2. Prikazati ime i prezime te vrijednost narudžbe (bez popusta) kupaca koji su napravili narudžbu veæu od prosjeène vrijednosti svih narudžbi proizvoda sa id 779
SELECT P.FirstName,P.LastName, SUM(SOD.OrderQty*SOD.UnitPrice) 'Vrijednost narudžbe'
FROM Person.Person AS P
INNER JOIN Sales.Customer AS C
ON C.PersonID=P.BusinessEntityID
INNER JOIN Sales.SalesOrderHeader AS SOH
ON SOH.CustomerID=C.CustomerID
INNER JOIN Sales.SalesOrderDetail AS SOD
ON SOD.SalesOrderID=SOH.SalesOrderID
GROUP BY P.FirstName,P.LastName
HAVING SUM(SOD.OrderQty*SOD.UnitPrice) >
(
       SELECT AVG(SOD1.OrderQty*SOD1.UnitPrice)
       FROM Sales.SalesOrderDetail AS SOD1
       WHERE SOD1.ProductID=779
)
 
 
 
--3.   Kreirati upit koji prikazuje kupce koji su u maju mjesecu 2014. godine naruèili proizvod „Front Brakes“ u kolièini veæoj od 5 komada.
SELECT CONCAT(PP.FirstName,' ',PP.LastName) 'Ime i prezime', p.Name 'Ime', SOD.OrderQty 'Narucena kolicina',
CONVERT(NVARCHAR,SOH.OrderDate,104) 'Datum narudzbe'
FROM Person.Person AS PP
INNER JOIN Sales.Customer AS C
ON PP.BusinessEntityID=C.PersonID
INNER JOIN Sales.SalesOrderHeader AS SOH
ON C.CustomerID=SOH.CustomerID
INNER JOIN Sales.SalesOrderDetail AS SOD
ON SOH.SalesOrderID=SOD.SalesOrderID
INNER JOIN Production.Product AS P
ON SOD.ProductID=P.ProductID
WHERE MONTH(SOH.OrderDate)=5 AND YEAR(SOH.OrderDate)=2014 AND P.Name='Front Brakes' AND SOD.OrderQty>5
 
 
 
 
--4.   Kreirati upit koji prikazuje kupce koji su u 7. mjesecu utrošili više od 200.000 KM. U listu ukljuèiti ime i prezime kupca te ukupni utrošak. Izlaz sortirati prema utrošku opadajuæim redoslijedom.
SELECT CONCAT (PP.FirstName,' ',PP.LastName) 'Ime i prezime', SUM(SOH.TotalDue) 'Ukupni trošak'
FROM Person.Person AS PP
INNER JOIN Sales.Customer AS SC
ON PP.BusinessEntityID=SC.PersonID
INNER JOIN Sales.SalesOrderHeader AS SOH
ON SC.CustomerID=SOH.CustomerID
WHERE MONTH(SOH.OrderDate)=7
GROUP BY PP.FirstName,PP.LastName
HAVING SUM(SOH.TotalDue) > 200000
ORDER BY 2 DESC
 
 
--5.   Kreirati upit koji prikazuje zaposlenike koji su uradili više od 200 narudžbi. U listu ukljuèiti ime i prezime zaposlenika te ukupan broj uraðenih narudžbi. Izlaz sortirati prema broju narudžbi opadajuæim redoslijedom
SELECT CONCAT(PP.FirstName,' ',PP.LastName) 'Ime i prezime', COUNT(*) 'Ukupan broj uraðenih narudžbi'
FROM Person.Person AS PP
INNER JOIN Sales.SalesPerson AS SP
ON PP.BusinessEntityID=SP.BusinessEntityID
INNER JOIN Sales.SalesOrderHeader AS SOH
ON SP.BusinessEntityID=SOH.SalesPersonID
GROUP BY PP.FirstName,PP.LastName
HAVING COUNT(*)>200
ORDER BY 2 DESC
 
 
 
--6.   Kreirati upit koji prikazuje proizvode kojih na skladištu ima u kolièini manjoj od 30 komada. Lista treba da sadrži naziv proizvoda, naziv skladišta (lokaciju), stanje na skladištu i ukupnu prodanu kolièinu. U rezultate upita ukljuèiti i one proizvode koji nikad nisu prodavani. Ukoliko je ukupna prodana kolièina prikazana kao NULL vrijednost, izlaz formatirati brojem 0.
SELECT P.Name 'Naziv proizvoda', L.Name 'Naziv skladišta', PI.Quantity 'Stanje na skladištu',
ISNULL((SELECT SUM(SOD.OrderQty)
             FROM Sales.SalesOrderDetail AS SOD
        WHERE SOD.ProductID=P.ProductID),0) 'Prodana kolièina'
FROM Production.Product AS P
INNER JOIN Production.ProductInventory AS PI
ON P.ProductID=PI.ProductID
INNER JOIN Production.Location AS L
ON PI.LocationID=L.LocationID
WHERE (PI.Quantity<30 OR P.ProductID NOT IN(SELECT DISTINCT SOD.ProductID
                                                                          FROM Sales.SalesOrderDetail AS SOD))
ORDER BY [Prodana kolièina] DESC
 
 
 
--7.   Prikazati ukupnu kolièinu prodaje i ukupnu zaradu (ukljuèujuæi popust) od prodaje svakog pojedinog proizvoda po teritoriji. Uzeti u obzir samo prodaju u sklopu ponude pod nazivom “Volume Discount 11 to 14” i to samo gdje je kolièina prodaje veæa od 100 komada. Zaradu zaokružiti na dvije decimale, te izlaz sortirati po zaradi u opadajuæem redoslijedu.
SELECT ST.Name 'Teritorija',PP.Name'Naziv proizvoda',SUM(SOD.OrderQty)'Ukupna kolièina prodaje', CAST(SUM((SOD.LineTotal)) AS DECIMAL(10,2)) 'Ukupna zarada'
FROM Production.Product AS PP
INNER JOIN Sales.SalesOrderDetail AS SOD
ON PP.ProductID=SOD.ProductID
INNER JOIN Sales.SalesOrderHeader AS SOH
ON SOD.SalesOrderID=SOH.SalesOrderID
INNER JOIN Sales.SalesTerritory AS ST
ON SOH.TerritoryID=ST.TerritoryID
INNER JOIN Sales.SpecialOffer AS SO
ON SOD.SpecialOfferID=SO.SpecialOfferID
WHERE SO.Description LIKE 'Volume Discount 11 to 14'
GROUP BY PP.Name,ST.Name
HAVING SUM(SOD.OrderQty)>100
ORDER BY [Ukupna zarada] DESC
 
SELECT ST.Name 'Teritorija',PP.Name'Naziv proizvoda',SUM(SOD.OrderQty)'Ukupna kolièina prodaje', CAST(SUM((SOD.LineTotal)) AS DECIMAL(10,2)) 'Ukupna zarada'
FROM Production.Product AS PP
INNER JOIN Sales.SalesOrderDetail AS SOD
ON PP.ProductID=SOD.ProductID
INNER JOIN Sales.SalesOrderHeader AS SOH
ON SOD.SalesOrderID=SOH.SalesOrderID
INNER JOIN Sales.SalesTerritory AS ST
ON SOH.TerritoryID=ST.TerritoryID
INNER JOIN Sales.SpecialOfferProduct AS SOP
ON SOP.SpecialOfferID=SOD.SpecialOfferID AND SOP.ProductID=SOD.ProductID
INNER JOIN Sales.SpecialOffer AS SO
ON SOP.SpecialOfferID=SO.SpecialOfferID
WHERE SO.Description LIKE 'Volume Discount 11 to 14'
GROUP BY PP.Name,ST.Name
HAVING SUM(SOD.OrderQty)>100
ORDER BY [Ukupna zarada] DESC
 
--8.   Kreirati upit koji prikazuje naziv proizvoda, naziv lokacije, stanje zaliha na lokaciji, ukupno stanje zaliha na svim lokacijama i ukupnu prodanu kolièinu. Uzeti u obzir prodaju samo u 2013. godini.
SELECT PP.Name 'Naziv proizvoda', L.Name 'Naziv lokacije', PI.Quantity 'Stanje zaliha',
(
       SELECT SUM(PI.Quantity)
       FROM Production.ProductInventory AS PI
       WHERE PI.ProductID=PP.ProductID
) 'Ukupno na svim lokacijama',
(
       SELECT SUM(SOD.OrderQty)
       FROM Sales.SalesOrderDetail AS SOD
       INNER JOIN Sales.SalesOrderHeader AS SOH
       ON SOD.SalesOrderID=SOH.SalesOrderID
       WHERE PP.ProductID=SOD.ProductID AND YEAR(SOH.OrderDate)=2013
) 'Ukupna prodana kolièina'
FROM Production.Product AS PP
INNER JOIN Production.ProductInventory AS PI
ON PP.ProductID=PI.ProductID
INNER JOIN Production.Location AS L
ON PI.LocationID=L.LocationID
ORDER BY [Ukupna prodana kolièina] DESC
 
 
 
--9.   Kreirati upit kojim æe se prikazati narudžbe kojima je na osnovu popusta kupac uštedio 100KM i više. Upit treba da sadrži broj narudžbe, naziv kupca i stvarnu ukupnu vrijednost narudžbe zaokruženu na 2 decimale. Podatke je potrebno sortirati rastuæim redosljedom od najmanjeg do najveæeg.
SELECT SOH.SalesOrderID, PP.FirstName +' '+PP.LastName 'Kupac', CAST(SUM(SOD.LineTotal) AS DECIMAL(18,2)) 'Ukupna vrijednost'
FROM Sales.SalesOrderHeader AS SOH
INNER JOIN Sales.Customer AS SC
ON SOH.CustomerID=SC.CustomerID
INNER JOIN Person.Person AS PP
ON SC.PersonID=PP.BusinessEntityID
INNER JOIN Sales.SalesOrderDetail AS SOD
ON SOD.SalesOrderID=SOH.SalesOrderID
GROUP BY SOH.SalesOrderID, PP.FirstName +' '+PP.LastName
HAVING SUM(SOD.UnitPrice*SOD.OrderQty*SOD.UnitPriceDiscount)>=100
ORDER BY 3
 
 
--10.  Kreirati upit kojim se prikazuje da li su muškarci ili žene napravili veæi broj narudžbi. Naèin provjere spola jeste da osobe èije ime završava slovom „a“ predstavljaju ženski spol. U rezultatima upita prikazati spol (samo jedan), ukupan broj narudžbi koje su napravile osobe datog spola i ukupnu potrošenu vrijednost zaokruženu na dvije decimale.
SELECT TOP 1 COUNT(*) 'Broj narudžbi',IIF(RIGHT(PP.FirstName,1)='a', 'Ž','M') 'Broj narudžbi', ROUND(SUM(SOH.TotalDue),2) 'Ukupna potrošena vrijednost'
FROM Person.Person AS PP
INNER JOIN Sales.Customer AS SC
ON PP.BusinessEntityID=SC.PersonID
INNER JOIN Sales.SalesOrderHeader AS SOH
ON SOH.CustomerID=SC.CustomerID
GROUP BY IIF(RIGHT(PP.FirstName,1)='a', 'Ž','M')
ORDER BY 1 DESC
 
 
--11.  Kreirati upit koji prikazuje ukupan broj proizvoda, ukupnu kolièinu proizvoda na lageru, te ukupnu vrijednost proizvoda na lageru (skladištu). Rezultate prikazati grupisane po nazivu dobavljaèa te uzeti u obzir samo one zapise gdje je sumarna kolièina na lageru veæa od 100 i vrijednost cijene proizvoda veæa od 0.
SELECT PV.Name,COUNT(*) 'Ukupan broj proizvoda', SUM(PPI.Quantity) 'Uk. kolièina na lageru', SUM(PP.ListPrice*PPI.Quantity) 'Uk. vrijednost proizvoda na lageru'
FROM Production.ProductInventory AS PPI
INNER JOIN Production.Product AS PP
ON PPI.ProductID = PP.ProductID
INNER JOIN Purchasing.ProductVendor AS PPV
ON PPV.ProductID = PP.ProductID
INNER JOIN Purchasing.Vendor AS PV
ON PPV.BusinessEntityID=PV.BusinessEntityID
WHERE PP.ListPrice > 0
GROUP BY PV.Name
HAVING SUM(PPI.Quantity) > 1000
 
 
 
--Vježba 11_2 :: Zadaci
 
--1.   Kreirati bazu View_ i aktivirati je.
CREATE DATABASE View_
GO
USE View_
--2.   U bazi View kreirati pogled v_Employee sljedeæe strukture:
--     - prezime i ime uposlenika kao polje ime i prezime,
--     - teritoriju i
--     - regiju koju pokrivaju
--Uslov je da se dohvataju uposlenici koji su stariji od 60 godina.(Northwind)
GO
CREATE VIEW v_Employee
AS
SELECT E.[FirstName] + ' ' + e.[LastName] 'Ime i prezime', T.[TerritoryDescription] 'Teritorija', R.[RegionDescription] 'Regija'
FROM Northwind.dbo.Employees AS E
INNER JOIN Northwind.dbo.EmployeeTerritories AS ET
ON E.EmployeeID=ET.EmployeeID
INNER JOIN Northwind.dbo.Territories AS T
ON ET.TerritoryID=T.TerritoryID
INNER JOIN Northwind.dbo.Region AS R
ON T.RegionID=R.RegionID
WHERE DATEDIFF (YEAR, E.[BirthDate], GETDATE ()) > 60
GO
 
--3.   Koristeæi pogled v_Employee prebrojati broj teritorija koje uposlenik pokriva po jednoj regiji.(Northwind)
SELECT VE.[Ime i prezime], VE.Regija, COUNT(VE.Teritorija) 'Broj teritorija'
FROM v_Employee AS VE
GROUP BY VE.[Ime i prezime], VE.Regija
ORDER BY 3 DESC,1
 
--4.   Kreirati pogled v_Sales sljedeæe strukture: (Adventureworks2017)
--     - Id kupca
--     - Ime i prezime kupca
--     - Godinu narudžbe
--     - Vrijednost narudžbe bez troškova prevoza i takse
GO
CREATE VIEW v_Sales
AS
SELECT SC.CustomerID 'Id kupca', CONCAT(PP.FirstName, ' ', PP.LastName) 'Ime i prezime kupca', YEAR(SOH.OrderDate) 'Godina narudžbe', SOH.SubTotal 'Vrijednost'
FROM AdventureWorks2017.Person.Person AS PP
INNER JOIN AdventureWorks2017.Sales.Customer AS SC
ON PP.BusinessEntityID=SC.PersonID
INNER JOIN AdventureWorks2017.Sales.SalesOrderHeader AS SOH
ON SC.CustomerID=SOH.CustomerID
GO
 
--5.   Koristeæi pogled v_Sales dati pregled sumarno ostvarenih prometa po osobi i godini.
SELECT VS.[Godina narudžbe],VS.[Ime i prezime kupca],SUM(VS.Vrijednost) 'Sumarno ostvaren promet'
FROM v_Sales AS VS
GROUP BY VS.[Godina narudžbe],VS.[Ime i prezime kupca]
 
--6.   Koristeæi pogled v_Sales dati pregled zapisa iz 2013. godine u kojima je vrijednost narudžbe bez troškova prevoza i takse u intervalu 10% u odnosu na srednju vrijednost SubTotala iz 2013 godine. Pregled treba da sadrži ime i prezime kupca i vrijednost narudžbe.
GO
CREATE VIEW v_Sales2013
AS
SELECT *
FROM v_Sales AS VS
WHERE  VS.[Godina narudžbe]= 2013
GO
 
SELECT       VS13.[Ime i prezime kupca], VS13.Vrijednost
FROM   v_Sales2013 AS VS13
WHERE  VS13.Vrijednost BETWEEN
             (SELECT AVG (VS13_2.Vrijednost) FROM v_Sales2013 AS VS13_2) - 0.1 * (SELECT AVG (VS13_2.Vrijednost) FROM v_Sales2013 AS VS13_2)
             AND
             (SELECT AVG (VS13_2.Vrijednost) FROM v_Sales2013 AS VS13_2) + 0.1 * (SELECT AVG (VS13_2.Vrijednost) FROM v_Sales2013 AS VS13_2)
ORDER BY 2 DESC
 
 
 
--DRUGI NAÈIN
 
SELECT VS.[Ime i prezime kupca],VS.Vrijednost
FROM v_Sales AS VS
WHERE VS.[Godina narudžbe]=2013
AND VS.Vrijednost BETWEEN
(SELECT AVG(VS.Vrijednost)
FROM v_Sales AS VS
WHERE VS.[Godina narudžbe]=2013)-0.1*(SELECT AVG(VS.Vrijednost) FROM v_Sales AS VS
                                                               WHERE VS.[Godina narudžbe]=2013) AND (SELECT AVG(VS.Vrijednost) FROM v_Sales AS VS
                                                                            WHERE VS.[Godina narudžbe]=2013)+0.1*
                                                                                                                                (SELECT AVG(VS.Vrijednost) FROM v_Sales AS VS
                                                                             WHERE VS.[Godina narudžbe]=2013)
ORDER BY 2 DESC
 
--7.   Kreirati tabelu Zaposlenici te prilikom kreiranja uraditi insert podataka iz tabele Employees baze Northwind.
SELECT*
INTO Zaposlenici
FROM Northwind.dbo.Employees
--8.   Kreirati pogled v_Zaposlenici koji æe dati pregled ID-a, imena, prezimena i države zaposlenika.
GO
CREATE VIEW v_Zaposlenici
AS
SELECT Z.EmployeeID,Z.FirstName,Z.LastName,Z.Country
FROM Zaposlenici AS Z
GO
 
--9.   Modificirati prethodno kreirani pogled te onemoguæiti unos podataka kroz pogled za uposlenike koji ne dolaze iz Amerike ili Velike Britanije.
CREATE OR ALTER VIEW v_Zaposlenici
AS
SELECT Z.EmployeeID,Z.FirstName,Z.LastName,Z.Country
FROM Zaposlenici AS Z
WHERE Z.Country LIKE 'USA' OR Z.Country LIKE 'UK'
WITH CHECK OPTION
GO
 
--10.  Testirati prethodno modificiran view unosom ispravnih i neispravnih podataka (napisati 2 testna sluèaja).
INSERT INTO v_Zaposlenici
VALUES ('FirstName1','LastName1', 'BIH')
 
INSERT INTO v_Zaposlenici
VALUES ('FirstName1','LastName1', 'USA')
 
SELECT*
FROM v_Zaposlenici
 
SELECT*
FROM Zaposlenici
--11.  Koristeæi tabele Purchasing.Vendor i Purchasing.PurchaseOrderDetail kreirati pogled sljedeæe strukture:
--     - Name iz tabele Vendor
--     - PurchaseOrderID iz tabele Purchasing.PurchaseOrderDetail
--     - DueDate iz tabele Purchasing.PurchaseOrderDetail
--     - OrderQty iz tabele Purchasing.PurchaseOrderDetail
--     - UnitPrice iz tabele Purchasing.PurchaseOrderDetail
--     - ukupno kao proizvod OrderQty i UnitPrice
--Uslov je da se dohvate samo oni zapisi kod kojih DueDate pripada 1. ili 3. kvartalu. (AdventureWorks2017)
GO
CREATE VIEW V_Purchasing
AS
SELECT V.Name,POD.PurchaseOrderID,POD.DueDate,POD.OrderQty,POD.UnitPrice,POD.UnitPrice*POD.OrderQty 'Ukupno'
FROM AdventureWorks2017.Purchasing.Vendor AS V
INNER JOIN AdventureWorks2017.Purchasing.PurchaseOrderHeader AS POH
ON V.BusinessEntityID=POH.VendorID
INNER JOIN AdventureWorks2017.Purchasing.PurchaseOrderDetail AS POD
ON POH.PurchaseOrderID=POD.PurchaseOrderID
WHERE DATEPART(QUARTER,POD.DueDate)=1 OR DATEPART(QUARTER,POD.DueDate)=3
--WHERE MONTH (POD.DueDate) IN (1,2,3,7,8,9)
GO
 
--12.  Koristeæi pogled v_Purchasing dati pregled svih dobavljaèa(e) koji je u sklopu narudžbe imao stavke èija je ukupni broj stavki jednak minimumu, odnosno, maksimumu ukupnog broja stavki (proizvoda) po narudžbi.
--Pregled treba imati sljedeæu strukturu:
--     - Name
--     - PurchaseOrderID
--     - prebrojani broj
GO
CREATE VIEW V_Purchasing_prebrojano
AS
SELECT VP.Name,VP.PurchaseOrderID,COUNT(*) 'Prebrojano'
FROM V_Purchasing AS VP
GROUP BY VP.Name,VP.PurchaseOrderID
GO
 
SELECT VPP.Name,VPP.PurchaseOrderID, Prebrojano
FROM V_Purchasing_prebrojano AS VPP
WHERE VPP.Prebrojano=(SELECT MAX(VPP.Prebrojano) FROM V_Purchasing_prebrojano AS VPP) OR VPP.Prebrojano=(SELECT MIN(VPP.Prebrojano) FROM V_Purchasing_prebrojano AS VPP)
 
--13.  U bazi radna kreirati tabele Osoba i Uposlenik.
--Strukture tabela su sljedeæe:
 
--- Osoba
--     OsobaID                    cjelobrojna varijabla, primarni kljuè
--     VrstaOsobe          2 unicode karaktera, obavezan unos
--     Prezime                    50 unicode karaktera, obavezan unos
--     Ime                        50 unicode karaktera, obavezan unos
 
--- Uposlenik
--     UposlenikID         cjelobrojna varijabla, primarni kljuè
--     NacionalniID  15 unicode karaktera, obavezan unos
--     LoginID                    256 unicode karaktera, obavezan unos
--     RadnoMjesto         50 unicode karaktera, obavezan unos
--     DtmZapos            datumska varijabla
--Spoj tabela napraviti prema spoju izmeðu tabela
--Person.Person i HumanResources.Employee baze AdventureWorks2017.
CREATE TABLE Osoba
(
       OsobaID                    INT CONSTRAINT PK_Osoba PRIMARY KEY,
       VrstaOsobe          NVARCHAR (2) NOT NULL,
       Prezime                    NVARCHAR (50) NOT NULL,
       Ime                        NVARCHAR (50) NOT NULL
)
 
CREATE TABLE Uposlenik
(
       UposlenikID         INT CONSTRAINT PK_Uposlenik PRIMARY KEY,
       NacionalniID  NVARCHAR (15) NOT NULL,
       LoginID                    NVARCHAR (256) NOT NULL,
       RadnoMjesto         NVARCHAR (50) NOT NULL,
       DtmZapos            DATE,
       CONSTRAINT FK_Uposlenik_Osoba FOREIGN KEY (UposlenikID) REFERENCES Osoba (OsobaID)
)
 
--14.  Nakon kreiranja tabela u tabelu Osoba kopirati odgovarajuæe podatke iz tabele Person.Person, a u tabelu Uposlenik kopirati odgovarajuæe zapise iz tabele HumanResources.Employee.
INSERT INTO Osoba
SELECT P.BusinessEntityID,P.PersonType,P.LastName,P.FirstName
FROM AdventureWorks2017.Person.Person AS P
 
INSERT INTO Uposlenik
SELECT E.BusinessEntityID, E.NationalIDNumber, E.LoginID, E.JobTitle, E.HireDate
FROM AdventureWorks2017.HumanResources.Employee AS E
 
--15.  Kreirati pogled (view) v_osoba_uposlenik nad tabelama Uposlenik i Osoba koji æe sadržavati sva polja obje tabele.
GO
CREATE VIEW v_Osoba_Uposlenik
AS
SELECT *
FROM Osoba AS O
INNER JOIN Uposlenik  AS U
ON O.OsobaID = U.UposlenikID
GO
 
--16.  Koristeæi pogled v_osoba_uposlenik prebrojati koliko se osoba zaposlilo po godinama.
SELECT YEAR (VOU.DtmZapos) 'Godina', COUNT (*) 'Broj osoba'
FROM v_Osoba_Uposlenik AS VOU
GROUP BY YEAR (VOU.DtmZapos)
ORDER BY 2
 
 
 
 
 
--Vježba 12 :: Zadaci
 
--1.    Kreirati bazu Function_ i aktivirati je.
CREATE DATABASE Function_
GO
USE Function_
--2.   Kreirati tabelu Zaposlenici te prilikom kreiranja uraditi insert podataka iz tabele Employees baze Northwind.
SELECT*
INTO Zaposlenici
FROM pubs.dbo.employee
 
--3.   U tabeli uposlenici dodati izraèunatu (stalno pohranjenu) kolonu godina kojom æe se iz kolone hire_date izdvajati godina uposlenja.
ALTER TABLE Zaposlenici
ADD GodinaZaposlenja AS YEAR(hire_date)
 
SELECT*
FROM Zaposlenici
--4.   Kreirati funkciju f_ocjena sa parametrom brojBodova, cjelobrojni tip koja æe vraæati poruke po sljedeæem pravilu:
--     - brojBodova < 55          nedovoljan broj bodova
--     - brojBodova 55 - 65       šest (6)
--     - broj Bodova 65 - 75             sedam (7)
--     - brojBodova 75 - 85       osam (8)
--     - broj Bodova 85 - 95             devet (9)
--     - brojBodova 95-100        deset
--     - brojBodova >100          fatal error
--Kreirati testne sluèajeve.
GO
CREATE FUNCTION f_ocjena
(
       @brojBodova int
)
RETURNS VARCHAR (30)
AS
BEGIN
       DECLARE @poruka VARCHAR (50)
       SET @poruka = 'nedovoljan broj bodova'
       IF @brojBodova BETWEEN 55 AND 64 SET @poruka = 'šest (6)'
       IF @brojBodova BETWEEN 65 AND 74 SET @poruka = 'sedam (7)'
       IF @brojBodova BETWEEN 75 AND 84 SET @poruka = 'osam (8)'
       IF @brojBodova BETWEEN 85 AND 94 SET @poruka = 'devet (9)'
       IF @brojBodova BETWEEN 95 AND 100 SET @poruka = 'deset (10)'
       IF @brojBodova>100 SET @poruka = 'fatal error'
       RETURN @poruka
END
GO
SELECT dbo.f_ocjena(55),dbo.f_ocjena(40),dbo.f_ocjena(80)
 
--5.   Kreirati funkciju f_godina koja vraæa podatke u formi tabele sa parametrom godina, cjelobrojni tip. Parametar se referira na kolonu godina tabele uposlenici, pri èemu se trebaju vraæati samo oni zapisi u kojima je godina veæa od unijete vrijednosti parametra. Potrebno je da se prilikom pokretanja funkcije u rezultatu nalaze sve kolone tabele uposlenici. Provjeriti funkcioniranje funkcije unošenjem kontrolnih vrijednosti.
GO
CREATE FUNCTION f_godina
(
@godina INT
)
RETURNS TABLE
AS
RETURN
SELECT*
FROM Zaposlenici AS Z
WHERE Z.GodinaZaposlenja>@godina
 
 
SELECT *
FROM f_godina (1993)
ORDER BY 9
--6.   Kreirati funkciju f_pub_id koja vraæa podatke u formi tabele sa parametrima:
--     - prva_cifra, kratki cjelobrojni tip
--     - job_id, kratki cjelobrojni tip
--Parametar prva_cifra se referira na prvu cifru kolone pub_id tabele uposlenici, pri èemu je njegova zadana vrijednost 0. Parametar job_id se referira na kolonu job_id tabele uposlenici. Potrebno je da se prilikom pokretanja funkcije u rezultatu nalaze sve kolone tabele uposlenici. Provjeriti funkcioniranje funkcije unošenjem vrijednosti za parametar job_id = 5
GO
CREATE FUNCTION f_pub_id
(
       @prva_cifra TINYINT = 0,
       @job_id TINYINT
)
RETURNS TABLE
AS
RETURN
       SELECT *
       FROM Zaposlenici AS Z
       WHERE  LEFT (Z.pub_id,1) = @prva_cifra and
                    Z.job_id = @job_id
GO
 
SELECT *
FROM f_pub_id (DEFAULT, 5)
--7.   Kreirati tabelu detalji, te prilikom kreiranja uraditi isert podataka iz tabele Order Details baze Northwind.
SELECT*
INTO Detalji
FROM Northwind.dbo.[Order Details]
--8.   Kreirati funkciju f_ukupno sa parametrima
--     - UnitPrice   novèani tip money,
--     - Quantity    kratki cjelobrojni tip
--     - Discount    realni broj
--Funkcija æe vraæati rezultat tip decimal (10,2) koji æe raèunati po pravilu:
--     UnitPrice * Quantity * (1 - Discount)
GO
CREATE FUNCTION f_ukupno
(
@UnitPrice MONEY,
@Quantity SMALLINT,
@Discount REAL
)
RETURNS DECIMAL(10,2)
AS
BEGIN
RETURN @UnitPrice*@Quantity*(1-@Discount)
END
GO
 
SELECT dbo.f_ukupno(2,2,0.1)
--9.   Koristeæi funkciju f_ukupno u tabeli detalji prikazati ukupnu vrijednost prometa po ID proizvoda.
SELECT ProductID, SUM (dbo.f_ukupno([UnitPrice],[Quantity],[Discount])) 'Ukupno'
FROM Detalji
GROUP BY ProductID
ORDER BY 1
--10.  Koristeæi funkciju f_ukupno u tabeli detalji kreirati pogled v_f_ukupno u kojem æe biti prijazan ukupan promet po ID narudžbe.
GO
CREATE VIEW v_f_ukupno
AS
SELECT OrderID, SUM (dbo.f_ukupno([UnitPrice],[Quantity],[Discount])) as 'Ukupno'
FROM Detalji
GROUP BY OrderID
GO
--11.  Iz pogleda v_f_ukupno odrediti najmanju i najveæu vrijednost sume.
SELECT MIN(VU.Ukupno) 'Min', MAX(VU.Ukupno) 'Max'
FROM v_f_ukupno AS VU
--12.  Kreirati tabelu Kupovina, te prilikom kreiranja uraditi insert podataka iz tabele PurchaseOrderDetail baze AdventureWorks2017.
--Tabela æe sadržavati kolone:
--     - PurchaseOrderID,
--     - PurchaseOrderDetailID,
--     - UnitPrice
--     - RejectedQty,
--     - RazlikaKolicina koja predstavlja razliku izmeðu naruèene i primljene kolièine
SELECT POD.PurchaseOrderID,POD.PurchaseOrderDetailID,POD.UnitPrice,POD.RejectedQty,POD.OrderQty-POD.ReceivedQty 'RazlikaKolicina'
INTO Kupovina
FROM AdventureWorks2017.Purchasing.PurchaseOrderDetail AS POD
--13.  Kreirati funkciju f_rejected koja vraæa podatke u formi tabele sa parametrima:
--     - RejectedQty decimal (8,2)
--     - RazlikaKolicina  int
--Parametar RejectedQty se referira na kolonu RejectedQty tabele kupovina, pri èemu je njegova zadana vrijednost 0. Parametar RazlikaKolicina  se odnosi na kolonu RazlikaKolicina. Potrebno je da se prilikom pokretanja funkcije u rezultatu nalaze sve kolone tabele uposlenici. Provjeriti funkcioniranje funkcije unošenjem vrijednosti za parametar RazlikaKolicina = 27, pri èemu æe upit vraæati sume UnitPrice po PurchaseOrderID.
--Sortirati po sumiranim vrijednostima u opadajuæem redoslijedu.
 
GO
CREATE FUNCTION f_rejected
(
@RejectedQty DECIMAL (8,2)=0,
@RazlikaKolicina INT
)
RETURNS TABLE
AS
RETURN
       SELECT *
       FROM Kupovina
       WHERE  RejectedQty= @RejectedQty AND
                    RazlikaKolicina = @RazlikaKolicina
GO
 
SELECT DISTINCT RazlikaKolicina
FROM kupovina
 
--0.00
--62.00
--5.00
--3.00
--1.00
--280.00
--187.00
--27.00
--82.00
--9.00
 
 
SELECT PurchaseOrderID, SUM (UnitPrice)'Ukupno'
FROM f_rejected (DEFAULT, 27)
GROUP BY PurchaseOrderID
ORDER BY 2 DESC
 
--14.  Kreirati bazu Trigger_ i aktivirati je.
CREATE DATABASE Trigger_
GO
USE Trigger_
--15.  Kreirati tabelu Autori, te prilikom kreiranja uraditi insert podataka iz tabele Authors baze Pubs.
SELECT*
INTO Autori
FROM pubs.dbo.authors
--16.  16.    Kreirati tabelu Autori_log strukture:
       --- log_id int identity (1,1)
       --- au_id varchar (11)
       --- dogadjaj varchar (3)
       --- mod_date datetime
CREATE TABLE Autori_log
(
       log_id INT IDENTITY (1,1),
       au_id VARCHAR (11),
       dogadjaj VARCHAR (3),
       mod_date DATETIME
)
--17.  Nad tabelom Autori kreirati okidaè t_ins_autori kojim æe se prilikom inserta podataka u tabelu autori izvršiti insert podataka u tabelu Autori_log.
GO
CREATE TRIGGER t_ins_autori
ON Autori
AFTER INSERT
AS
BEGIN
       INSERT INTO autori_log
       SELECT au_id, 'ins', GETDATE ()
       FROM inserted
       --select * from inserted
       --select * from deleted
END
--18.  U tabelu Autori insertovati zapis
--'1', 'Ringer', 'Albert', '801 826-0752', '67 Seventh Av.', 'Salt Lake City', 'UT', 84152, 1
--'2', 'Green', 'Marjorie', '415 986-7020', '309 63rd St. #411', 'Oakland',      'CA', 94618, 1
--Provjeriti stanje u tabelama Autori i Autori_log.
INSERT INTO Autori
VALUES
('1', 'Ringer', 'Albert', '801 826-0752', '67 Seventh Av.', 'Salt Lake City', 'UT', 84152, 1),
('2', 'Green', 'Marjorie', '415 986-7020', '309 63rd St. #411', 'Oakland', 'CA', 94618, 1)
 
SELECT *
FROM Autori
 
SELECT *
FROM autori_log
--19.  Nad tabelom Autori kreirati okidaè t_upd_autori kojim æe se prilikom update podataka u tabeli Autori izvršiti insert podataka u tabelu autori_log.
GO
CREATE TRIGGER t_upd_autori
ON Autori
AFTER UPDATE
AS
BEGIN
       INSERT INTO Autori_log
       SELECT au_id, 'upd', GETDATE ()
       FROM   inserted
       SELECT * FROM inserted
       SELECT * FROM deleted
END
--20.  U tabeli autori napraviti update zapisa u kojem je au_id = 998-72-3567 tako što æe se vrijednost kolone au_lname postaviti na prezime. Provjeriti stanje u tabelama autori i autori_log.
UPDATE Autori
SET au_lname = 'prezime'
WHERE au_id = '998-72-3567'
 
SELECT * FROM autori
SELECT * FROM autori_log
--21.  Nad tabelom Autori kreirati okidaè t_del_autori kojim æe se prilikom brisanja podataka u tabeli Autori izvršiti insert podataka u tabelu Autori_log.
s
GO
CREATE TRIGGER t_del_autori
ON Autori
AFTER DELETE
AS
BEGIN
       INSERT INTO Autori_log
       SELECT au_id, 'del', GETDATE ()
       FROM   deleted
       SELECT * FROM inserted
       SELECT * FROM deleted
END
--22.  U tabeli Autori obrisati zapis u kojem je au_id = 3. Provjeriti stanje u tabelama Autori i Autori_log.
DELETE
FROM Autori
WHERE au_id = '2'
 
SELECT * FROM autori
SELECT * FROM autori_log
--23.  Kreirati tabelu Autori_instead_log strukture:
--     - log_id INT IDENTITY (1,1),
--     - au_id VARCHAR (11),
--     - dogadjaj VARCHAR (15),  
--     - mod_date datetime
 
CREATE TABLE Autori_instead_log
(
log_id INT IDENTITY (1,1),
au_id VARCHAR (11),
dogadjaj VARCHAR (15),
mod_date datetime
)
--24.  Nad tabelom autori kreirati okidaè t_instead_ins_autori kojim æe se onemoguæiti insert podataka u tabelu autori. Okidaè treba da vraæa poruku da insert nije izvršen.
GO
CREATE TRIGGER t_instead_ins_autori
ON Autori
INSTEAD OF INSERT
AS
BEGIN
       SELECT 'Insert nije izvršen'
       INSERT INTO Autori_instead_log
       SELECT au_id, 'not_insert', GETDATE ()
       FROM inserted
       SELECT * FROM inserted
       SELECT * FROM deleted
END
GO
--25.  U tabelu autori insertovati zapis
--'3', 'Ringer', 'Albert', '801 826-0752', '67 Seventh Av.', 'Salt Lake City', 'UT', 84152, 1
--Provjeriti stanje u tabelama autori, autori_log i autori_instead_log.
INSERT INTO Autori
VALUES ('3', 'Ringer', 'Albert', '801 826-0752', '67 Seventh Av.', 'Salt Lake City', 'UT', 84152, 1)
 
SELECT * FROM Autori
SELECT * FROM Autori_log
SELECT * FROM Autori_instead_log
--26.  Nad tabelom Autori kreirati okidaè t_instead_upd_autori kojim æe se onemoguæiti update podataka u tabelu Autori. Okidaè treba da vraæa poruku da update nije izvršen.
GO
CREATE TRIGGER t_instead_upd_autori
ON Autori
INSTEAD OF UPDATE
AS
BEGIN
       SELECT 'Update nije izvršen'
       INSERT INTO Autori_instead_log
       SELECT au_id, 'not_update', GETDATE ()
       FROM inserted
       SELECT * FROM inserted
       SELECT * FROM deleted
END
--27.  U tabeli Autori pokušati update zapisa u kojem je au_id = 172-32-1176 tako što æe se vrijednost kolone contract postaviti na  0. Provjeriti stanje u tabelama autori i autori_instead_log.
UPDATE Autori
SET contract = 0
WHERE au_id = '172-32-1176'
 
SELECT * FROM Autori
SELECT * FROM Autori_log
SELECT * FROM Autori_instead_log
--28.  Nad tabelom autori kreirati okidaè t_instead_del_autori kojim æe se onemoguæiti delete podataka u tabelu autori. Okidaè treba da vraæa poruku da delete nije izvršen.
--CHECK
GO
CREATE OR ALTER TRIGGER t_instead_del_autori
ON Autori
INSTEAD OF DELETE
AS
BEGIN
       SELECT 'Delete nije izvršen'
       INSERT INTO Autori_instead_log
       SELECT au_id, 'not_delete', GETDATE ()
       FROM deleted
       --SELECT * FROM inserted
       --SELECT * FROM deleted
END
--29.  U tabeli autori pokušati obrisati zapis u kojem je au_id = 172-32-1176. Provjeriti stanje u tabelama autori i autori_instead_log.
DELETE Autori
WHERE au_id = '172-32-1176'
 
SELECT * FROM Autori
SELECT * FROM Autori_log
SELECT * FROM Autori_instead_log
--30.  Iskljuæiti okidaè t_instead_ins_autori.
DISABLE TRIGGER t_instead_ins_autori ON Autori
--31.  U tabelu Autori insertovati zapis
--'3', 'Ringer', 'Albert', '801 826-0752', '67 Seventh Av.', 'Salt Lake City', 'UT', 84152, 1
--Provjeriti stanje u tabelama Autori, Autori_log i Autori_instead_log.
INSERT INTO Autori
VALUES ('3', 'Ringer', 'Albert', '801 826-0752', '67 Seventh Av.', 'Salt Lake City', 'UT', 84152, 1)
 
SELECT * FROM Autori
SELECT * FROM Autori_log
SELECT * FROM Autori_instead_log
 
--32.  Iskljuèiti sve okidaèe nad tabelom autori.
DISABLE TRIGGER ALL ON Autori
--33.  Ukljuèiti sve okidaèe nad tabelom autori.
ENABLE TRIGGER ALL ON Autori
 
 
 
 
--1.   Koristeæi bazu Northwind izdvojiti godinu, mjesec i dan datuma isporuke narudžbe.
SELECT YEAR(O.ShippedDate) AS Godina, MONTH(O.ShippedDate) AS Mjesec, DAY(O.ShippedDate) AS Dan
FROM Northwind.dbo.Orders AS O
--2.   Koristeæi bazu Northwind izraèunati koliko je vremena prošlo od datum narudžbe do danas.
USE Northwind
SELECT DATEDIFF(YEAR,O.OrderDate,GETDATE()) AS 'Broj godina'
FROM Orders AS O
--3.   Koristeæi bazu Northwind dohvatiti sve zapise u kojima ime zaposlenika poèinje slovom A.
SELECT*
FROM Employees AS E
WHERE E.FirstName LIKE 'A%'
--4.   Koristeæi bazu Pubs dohvatiti sve zapise u kojima ime zaposlenika poèinje slovom A ili M.
SELECT*
FROM pubs.dbo.employee AS E
WHERE E.fname LIKE 'A%' OR E.fname LIKE 'M%'
 
--%    Represents zero or more characters      bl% finds bl, black, blue, and blob
--_    Represents a single character     h_t finds hot, hat, and hit
--[]   Represents any single character within the brackets   h[oa]t finds hot and hat, but not hit
--^    Represents any character not in the brackets   h[^oa]t finds hit, but not hot and hat
---    Represents any single character within the specified range   c[a-b]t finds cat and cbt
SELECT*
FROM pubs.dbo.employee AS E
WHERE E.fname LIKE '[AM]%'
 
--5.   Koristeæi bazu Northwind prikazati sve kupce koje u koloni ContactTitle sadrže pojam ""manager"".
SELECT*
FROM Customers AS C
WHERE C.ContactTitle LIKE '%manager%'
--6.   Koristeæi bazu Northwind dohvatiti sve kupce kod kojih se poštanski broj sastoji samo od cifara.
SELECT*
FROM Customers AS C
WHERE C.PostalCode LIKE '[0-9]%' AND C.PostalCode NOT LIKE '%-%'
 
SELECT*
FROM Customers AS C
WHERE C.PostalCode NOT LIKE '%[^0-9]%'
 
SELECT*
FROM Customers AS C
WHERE ISNUMERIC(C.PostalCode)=1
 
--7.   Iz tabele Person.Person baze AdventureWorks2017 u bazu Vjezba2 u tabelu Osoba kopirati kolone FirstName, MiddleName i LastName. Prikazati spojeno ime, srednje ime i prezime.Uslov je da se izmeðu pojedinih segmenata nalazi space. Omoguæiti prikaz podataka i ako neki od podataka nije unijet. Prikazati samo jedinstvene zapise (bez ponavljanja istih zapisa).
 
USE Vjezba2
 
SELECT PP.FirstName,PP.MiddleName,PP.LastName
INTO Osoba
FROM AdventureWorks2017.Person.Person AS PP
 
SELECT O.FirstName + ' ' +ISNULL(O.MiddleName,' ')+ ' ' + O.LastName
FROM Osoba AS O
 
UPDATE Osoba
SET MiddleName=' '
WHERE MiddleName IS NULL
 
SELECT DISTINCT O.FirstName + ' ' + O.MiddleName + ' ' + O.LastName
FROM Osoba AS O
 
SELECT DISTINCT CONCAT(PP.FirstName,' ',PP.MiddleName,' ',PP.LastName)
FROM AdventureWorks2017.Person.Person AS PP
 
--8.   Prikazati listu zaposlenika sa sljedeæim atributima: ID, ime, prezime, država i titula, gdje je ID = 9 ili dolaze iz USA.
SELECT E.EmployeeID,E.FirstName,E.LastName,E.Country,E.Title
FROM Northwind.dbo.Employees AS E
WHERE E.EmployeeID=9 OR E.Country LIKE 'USA'
--WHERE
--9.   Prikazati podatke o narudžbama koje su napravljene prije 19.07.1996. godine. Izlaz treba da sadrži sljedeæe kolone: ID narudžbe, datum narudžbe, ID kupca, te grad.
USE Northwind
SELECT O.OrderID,O.OrderDate,O.CustomerID,O.ShipCity
FROM Orders AS O
WHERE O.OrderDate<'1996-07-19'
--10.  Prikazati stavke narudžbe gdje je kolièina narudžbe bila veæa od 100 komada uz odobreni popust.
SELECT*
FROM [Order Details] AS OD
WHERE OD.Quantity>100 AND OD.Discount>0
--11.  Prikazati ime kompanije kupca i kontakt telefon i to samo onih koji u svome imenu posjeduju rijeè „Restaurant“. Ukoliko naziv kompanije sadrži karakter (-), kupce izbaciti iz rezultata upita.
SELECT C.CompanyName,C.Phone
FROM Customers AS C
WHERE C.CompanyName LIKE '%Restaurant%' AND C.CompanyName NOT LIKE '%-%'
--12.  Prikazati proizvode èiji naziv poèinje slovima „C“ ili „G“, drugo slovo može biti bilo koje, a treæe slovo u nazivu je „A“ ili „O“.
SELECT*
FROM Products AS P
WHERE P.ProductName LIKE '[CG]_[ao]%'
--13.  Prikazati listu proizvoda èiji naziv poèinje slovima „L“ ili „T“, ili je ID proizvoda = 46. Lista treba da sadrži samo one proizvode èija se cijena po komadu kreæe izmeðu 10 i 50 (ukljuèujuæi graniène vrijednosti). Upit napisati na dva naèina.
SELECT *
FROM Products AS P
WHERE (P.ProductName LIKE '[LT]%' OR P.ProductID=46) AND P.UnitPrice BETWEEN 10 AND 50
 
SELECT *
FROM Products AS P
WHERE (P.ProductName LIKE '[LT]%' OR P.ProductID=46) AND P.UnitPrice>=10 AND P.UnitPrice<=50
 
--14.  Prikazati naziv proizvoda i cijenu gdje je stanje na zalihama manje od naruèene kolièine. Takoðer, u rezultate upita ukljuèiti razliku izmeðu naruèene kolièine i stanja zaliha.
SELECT P.ProductName,P.UnitPrice,P.UnitsInStock-P.UnitsOnOrder AS Razlika
FROM Products AS P
WHERE P.UnitsInStock<P.UnitsOnOrder
--15.  Prikazati dobavljaèe koji dolaze iz Španije ili Njemaèke a nemaju unesen broj faxa. Formatirati izlaz NULL vrijednosti. Upit napisati na dva naèina
SELECT S.SupplierID,S.CompanyName,S.ContactName,S.ContactTitle,S.Address,S.City,S.Region,S.PostalCode,S.Country,S.Phone,ISNULL(S.Fax,'nepoznata vrijednost') AS Fax,S.HomePage
FROM Suppliers AS S
WHERE S.Country IN ('Spain','Germany') AND S.Fax IS NULL
 
SELECT S.SupplierID,S.CompanyName,S.ContactName,S.ContactTitle,S.Address,S.City,S.Region,S.PostalCode,S.Country,S.Phone,ISNULL(S.Fax,'nepoznata vrijednost') AS Fax,S.HomePage
FROM Suppliers AS S
WHERE (S.Country LIKE'Spain'OR S.Country LIKE'Germany') AND S.Fax IS NULL
 
--16.  Prikazati listu autora sa sljedeæim kolonama: ID, ime i prezime (spojeno), grad i to samo one autore èiji ID poèinje brojem 8 ili dolaze iz grada „Salt Lake City“. Takoðer autorima status ugovora treba biti 1. Koristiti aliase nad kolonama.
USE pubs
SELECT A.au_id, A.au_fname +' '+A.au_lname AS 'ime prezime', A.city,A.contract
FROM authors AS A
WHERE (A.au_id LIKE '8%' OR A.city LIKE 'Salt Lake City') AND A.contract=1
--17.  Prikazati sve tipove knjiga bez duplikata. Listu sortirati po tipu.
SELECT DISTINCT T.type
FROM titles AS T
ORDER BY T.type
--18.  Prikazati listu prodaje knjiga sa sljedeæim kolonama: ID prodavnice, broj narudžbe i kolièinu, ali samo gdje je kolièina izmeðu 10 i 50, ukljuèujuæi i graniène vrijednosti. Rezultat upita sortirati po kolièini opadajuæim redoslijedom. Upit napisati na dva naèina.
SELECT S.stor_id,S.ord_num,S.qty AS Kolicina
FROM sales AS S
WHERE S.qty BETWEEN 10 AND 50
ORDER BY 3 DESC
--19.  Prikazati listu knjiga sa sljedeæim kolonama: naslov, tip djela i cijenu. Kao novu kolonu dodati 20% od prikazane cijene (npr. Ako je cijena 19.99 u novoj koloni treba da piše 3,998). Naziv kolone se treba zvati „20% od cijene“. Listu sortirati abecedno po tipu djela i po cijeni opadajuæim redoslijedom. Sa liste eliminisati one vrijednosti koje u polju cijena imaju nepoznatu vrijednost. Modifikovati upit tako da prikaže cijenu umanjenu za 20 %. Naziv kolone treba da se zove „Cijena umanjena za 20%“.
SELECT T.title,T.type,T.price,T.price*0.2 '20% od cijene', T.price*(1-0.2)'Cijena umanjena za 20%'
FROM titles AS T
WHERE T.price IS NOT NULL
ORDER BY 2,3
--20.  Prikazati 10 kolièinski najveæih stavki prodaje. Lista treba da sadrži broj narudžbe, datum narudžbe i kolièinu. Provjeriti da li ima više stavki sa kolièinom kao posljednja u listi
USE pubs
SELECT TOP 10 WITH TIES S.ord_num,S.ord_date,S.qty
FROM sales AS S
ORDER BY 3 DESC
 
 
 
 
 
 
 
 
--Vježba 10 :: Zadaci
 
--1.   a) Upotrebom podupita iz tabele Customers baze Northwind
--dati prikaz svih polja tabele pri èemu je kupac iz Berlina.
--b) Upotrebom podupita iz tabele Customers baze Northwind dati prikaz svih polja tabele pri èemu je kupac iz Londona ili Berlina.
--A
USE Northwind
SELECT*
FROM Customers AS C
WHERE C.City LIKE (SELECT C.City
                           FROM Customers AS C
                           WHERE C.City='Berlin')
--B
SELECT*
FROM Customers AS C
WHERE C.City IN (SELECT C.City
                           FROM Customers AS C
                           WHERE C.City='Berlin' OR C.City='London')
 
 
--2.   Prikazati srednju vrijednost nabavljene kolièine, u obzir uzeti samo one zapise
--u kojima je vrijednost UnitPrice izmeðu 50 i 100 (ukljuèujuæi graniène
--vrijednosti). (AdventureWorks2017)
 
USE AdventureWorks2017
 
SELECT AVG(PP.OrderQty) 'Srednja vrijednost naruèene kolièine'
FROM Purchasing.PurchaseOrderDetail AS PP
WHERE PP.UnitPrice BETWEEN 50 AND 100
 
SELECT AVG(PodQ.OrderQty) 'Srednja vrijednost naruèene kolièine'
FROM (SELECT PP.OrderQty
         FROM Purchasing.PurchaseOrderDetail AS PP
         WHERE PP.UnitPrice BETWEEN 50 AND 100) AS PodQ
 
--3.Prikazati ID narudžbe(i) u kojima je naruèena kolièina jednaka minimalnoj, odnosno, maksimalnoj vrijednosti svih naruèenih kolièina. (Northwind)     
USE Northwind
 
SELECT MIN(OD.Quantity) 'MIN', MAX(OD.Quantity)'MAX'
FROM [Order Details] AS OD
--MIN 1
--MAX 130
--NAÈIN 1
SELECT DISTINCT OD.OrderID, OD.Quantity
FROM [Order Details] AS OD
WHERE OD.Quantity=(SELECT MIN(OD.Quantity)
                                  FROM [Order Details] AS OD) OR OD.Quantity=(SELECT MAX(OD.Quantity)
                                                                                                            FROM [Order Details] AS OD)
--NAÈIN 2
SELECT OD.OrderID, OD.Quantity
FROM [Order Details] AS OD
WHERE OD.Quantity=(SELECT MIN(OD.Quantity)
                                  FROM [Order Details] AS OD)
UNION
SELECT OD.OrderID, OD.Quantity
FROM [Order Details] AS OD
WHERE OD.Quantity=(SELECT MAX(OD.Quantity)
                                  FROM [Order Details] AS OD)
 
--4.   Prikazati  ID narudžbe i ID kupca koji je kupio više od 10 komada proizvoda èiji je ID 15. (Northwind)
SELECT O.OrderID,O.CustomerID
FROM Orders as O
WHERE ( SELECT Quantity
             FROM [Order Details] AS OD       
             WHERE O.OrderID=OD.OrderID AND OD.ProductID=15)>10
 
USE Northwind
SELECT O.OrderID,O.CustomerID, OD.Quantity
FROM Orders AS O
INNER JOIN [Order Details] AS OD
ON O.OrderID=OD.OrderID
WHERE  OD.ProductID=15 AND OD.Quantity>10
 
--5.   Prikazati sve osobe koje nemaju prihode, vanredni i redovni. (Prihodi)
USE prihodi
SELECT O.OsobaID, o.Ime
FROM Osoba AS O
WHERE NOT EXISTS  (SELECT VP.OsobaID
                              FROM VanredniPrihodi AS VP
                                  WHERE VP.OsobaID=O.OsobaID) AND NOT EXISTS (SELECT RP.OsobaID
                                                                                                            FROM RedovniPrihodi AS RP
                                                                                                            WHERE RP.OsobaID=O.OsobaID)
 
SELECT O.OsobaID, O.Ime
FROM Osoba AS O
LEFT JOIN VanredniPrihodi AS VP
ON VP.OsobaID=O.OsobaID
WHERE VP.OsobaID IS NULL
INTERSECT
SELECT O.OsobaID, O.Ime
FROM Osoba AS O
LEFT JOIN RedovniPrihodi AS RP
ON RP.OsobaID=O.OsobaID
WHERE RP.OsobaID IS NULL
 
--6.   Dati prikaz ID narudžbe, ID proizvoda i jediniène cijene, te razliku cijene u odnosu na srednju vrijednost cijene za sve stavke. Rezultat sortirati prema vrijednosti razlike u rastuæem redoslijedu.  (Northwind)
USE Northwind
SELECT OD.OrderID,OD.ProductID,OD.UnitPrice,
(SELECT AVG(OD.UnitPrice)
FROM [Order Details] AS OD) 'Srednja vrijednost',
OD.UnitPrice-(SELECT AVG(OD.UnitPrice)
                      FROM [Order Details] AS OD) 'Razlika'
FROM [Order Details] AS OD
ORDER BY 5
 
--7.   Za sve proizvode kojih ima na stanju dati prikaz ID proizvoda, naziv proizvoda i stanje zaliha, te razliku stanja zaliha proizvoda u odnosu na srednju vrijednost stanja za sve proizvode u tabeli. Rezultat sortirati prema vrijednosti razlike u opadajuæem redoslijedu. (Northwind)
SELECT P.ProductID,P.ProductName,P.UnitsInStock, P.UnitsInStock -(SELECT AVG(P.UnitsInStock)
                                                                                                                  FROM Products AS P) 'Razlika'
FROM Products AS P
WHERE P.UnitsInStock>0
ORDER BY 4 DESC
 
--8.   Prikazati po 5 najstarijih zaposlenika muškog, odnosno, ženskog spola uz navoðenje sljedeæih podataka: radno mjesto na kojem se nalazi, datum roðenja, korisnicko ime i godine starosti. Korisnièko ime je dio podatka u LoginID. Rezultate sortirati prema polu rastuæim, a zatim prema godinama starosti opadajuæim redoslijedom. (AdventureWorks2017)
USE AdventureWorks2017
SELECT *
FROM(SELECT TOP 5 E.JobTitle, E.BirthDate, E.LoginID, DATEDIFF(YEAR, E.BirthDate, GETDATE())'Godine starosti', E.Gender
FROM HumanResources.Employee AS E
WHERE E.Gender='F'
ORDER BY 4 DESC) AS F
UNION
SELECT*
FROM(SELECT TOP 5 E.JobTitle, E.BirthDate, E.LoginID, DATEDIFF(YEAR, E.BirthDate, GETDATE())'Godine starosti', E.Gender
FROM HumanResources.Employee AS E
WHERE E.Gender='M'
ORDER BY 4 DESC) AS M
ORDER BY 5, 4 DESC
 
 
 
 
--9.   Prikazati po 3 zaposlenika koji obavljaju poslove managera uz navoðenje sljedeæih podataka: radno mjesto na kojem se nalazi, datum zaposlenja, braèni status i staž. Ako osoba nije u braku plaæa dodatni porez (upitom naglasiti to), inaèe ne plaæa. Rezultate sortirati prema braènom statusu rastuæim, a zatim prema stažu opadajuæim redoslijedom. (AdventureWorks2017)
SELECT TOP 3 E.JobTitle,E.HireDate,E.MaritalStatus,DATEDIFF(YEAR, E.HireDate,GETDATE()) 'Godine staza', 'Placa dodatni porez' Porez
FROM HumanResources.Employee AS E
WHERE E.JobTitle LIKE '%manager%' AND E.MaritalStatus ='S'
UNION
SELECT TOP 3 E.JobTitle,E.HireDate,E.MaritalStatus,DATEDIFF(YEAR, E.HireDate,GETDATE()) 'Godine staza', ' ' Porez
FROM HumanResources.Employee AS E
WHERE E.JobTitle LIKE '%manager%' AND E.MaritalStatus ='M'
ORDER BY 3, [Godine staza] DESC
 
 
--10.  Prikazati po 5 osoba koje se nalaze na 1, odnosno, 4.  organizacionom nivou, uposlenici su i žele primati email ponude od AdventureWorksa uz navoðenje sljedeæih polja: ime i prezime osobe kao jedinstveno polje, organizacijski nivo na kojem se nalazi i da li prima email promocije. Pored ovih uvesti i polje koje æe sadržavati poruke: Ne prima (0), Prima selektirane (1) i Prima (2). Sadržaj novog polja ovisi o vrijednosti polja EmailPromotion. Rezultat sortirati prema organizacijskom nivou i dodatno uvedenom polju. (AdventureWorks2017)
SELECT TOP 5 PP.FirstName +' ' +PP.LastName 'Ime i prezime', E.OrganizationLevel,PP.EmailPromotion, 'Ne prima' Prima
FROM HumanResources.Employee AS E
INNER JOIN Person.Person AS PP
ON E.BusinessEntityID=PP.BusinessEntityID
WHERE (E.OrganizationLevel=1 OR E.OrganizationLevel=4) AND PP.EmailPromotion=0
UNION
SELECT TOP 5 PP.FirstName +' ' +PP.LastName 'Ime i prezime', E.OrganizationLevel,PP.EmailPromotion, 'Prima selektirane' Prima
FROM HumanResources.Employee AS E
INNER JOIN Person.Person AS PP
ON E.BusinessEntityID=PP.BusinessEntityID
WHERE (E.OrganizationLevel=1 OR E.OrganizationLevel=4) AND PP.EmailPromotion=1
UNION
SELECT TOP 5 PP.FirstName +' ' +PP.LastName 'Ime i prezime', E.OrganizationLevel,PP.EmailPromotion, 'Prima email promocije' Prima
FROM HumanResources.Employee AS E
INNER JOIN Person.Person AS PP
ON E.BusinessEntityID=PP.BusinessEntityID
WHERE (E.OrganizationLevel=1 OR E.OrganizationLevel=4) AND PP.EmailPromotion=2
ORDER BY 2 ,4
 
--11.  Prikazati broj narudžbe, datum narudžbe i datum isporuke za narudžbe koje su isporuèene u Kanadu u 7. mjesecu 2014. godine. Uzeti u obzir samo narudžbe koje nisu plaæene kreditnom karticom. Datume formatirati u sljedeæem obliku: dd.mm.yyyy. (AdventureWorks2017)
SELECT SOH.SalesOrderID, FORMAT(SOH.OrderDate,'dd.MM.yyyy') 'Order date',FORMAT( SOH.ShipDate,'dd.MM.yyyy') 'Ship date'
FROM Sales.SalesOrderHeader AS SOH
INNER JOIN Sales.SalesTerritory AS ST
ON ST.TerritoryID=SOH.TerritoryID
WHERE ST.Name LIKE 'Canada' AND YEAR(SOH.ShipDate)=2014 AND MONTH(SOH.ShipDate)=7 AND SOH.CreditCardID IS NULL
 
 
--12.  Kreirati upit koji prikazuje minimalnu, maksimalnu, prosjeènu te ukupnu vrijednost stavke po mjesecima u 2013. godini. (AdventureWorks2017)
SELECT MONTH(SOH.OrderDate) 'Mjesec',AVG(SOD.LineTotal) 'Prosjek', MIN(SOD.LineTotal) 'Minimalna', MAX(SOD.LineTotal) 'Maksimalna'
FROM Sales.SalesOrderDetail AS SOD
INNER JOIN Sales.SalesOrderHeader AS SOH
ON SOD.SalesOrderID=SOH.SalesOrderID
WHERE YEAR(SOH.OrderDate)=2013
GROUP BY MONTH(SOH.OrderDate)
ORDER BY 1
 
SELECT MONTH(SOH.OrderDate) 'Mjesec',AVG(SOD.UnitPrice*SOD.OrderQty) 'Prosjek', MIN(SOD.UnitPrice*SOD.OrderQty) 'Minimalna', MAX(SOD.UnitPrice*SOD.OrderQty) 'Maksimalna'
FROM Sales.SalesOrderDetail AS SOD
INNER JOIN Sales.SalesOrderHeader AS SOH
ON SOD.SalesOrderID=SOH.SalesOrderID
WHERE YEAR(SOH.OrderDate)=2013
GROUP BY MONTH(SOH.OrderDate)
ORDER BY 1
 
--13.  Kreirati upit koji prikazuje ime i prezime, korisnièko ime (sve iza znaka „\“ u koloni LoginID), dužinu korisnièkog imena, titulu, datum zaposlenja (dd.mm.yyyy), starost i staž zaposlenika. Uslov je da se prikaže 10 najstarijih zaposlenika koji obavljaju bilo koju ulogu menadžera. (AdventureWorks2017)
SELECT TOP 10 PP.FirstName+ ' '+PP.LastName 'Ime i prezime', RIGHT(E.LoginID, CHARINDEX('\',REVERSE(E.LoginID))-1) 'Korisnièko ime', LEN(RIGHT(E.LoginID, CHARINDEX('\',REVERSE(E.LoginID))-1)) 'Dužina korisnièkog imena', E.JobTitle, FORMAT(E.HireDate,'dd.MM.yyyy') 'Datum zaposlenja', DATEDIFF(YEAR,E.BirthDate,GETDATE()) 'Starost', DATEDIFF(YEAR, E.HireDate,GETDATE()) 'Staž'
FROM Person.Person AS PP
INNER JOIN HumanResources.Employee AS E
ON E.BusinessEntityID=PP.BusinessEntityID
WHERE E.JobTitle LIKE '%Manager%'
ORDER BY Starost DESC
 
--14.  Kreirati upit koji prikazuje 10 najskupljih stavki prodaje (detalji narudžbe) i to sljedeæe kolone: naziv proizvoda, kolièina, cijena, iznos. Cijenu i iznos zaokružiti na dvije decimale. Takoðer, kolièinu prikazati u formatu „10 kom.“, a cijenu i iznos u formatu „1000 KM“. (AdventureWorks2017)
SELECT TOP 10 PP.Name,CAST(SOD.OrderQty AS VARCHAR) +' kom' 'Kolicina',CAST(SOD.UnitPrice AS VARCHAR) +' KM' 'Cijena',CAST(SUM(SOD.UnitPrice*SOD.OrderQty) AS VARCHAR) +' KM' 'Iznos'
FROM Sales.SalesOrderDetail AS SOD
INNER JOIN Production.Product AS PP
ON SOD.ProductID=PP.ProductID
GROUP BY PP.Name,SOD.OrderQty,SOD.UnitPrice
ORDER BY 3 DESC
 
--15.  Kreirati upit koji prikazuje naziv modela i opis modela proizvoda. Uslov je da naziv modela sadrži rijeè „Mountain“, dok je opis potrebno prikazati samo na engleskom jeziku. (AdventureWorks2017)
SELECT PM.Name,PD.Description
FROM Production.ProductModel AS PM
INNER JOIN Production.ProductModelProductDescriptionCulture AS PMPDC
ON PM.ProductModelID=PMPDC.ProductModelID
INNER JOIN Production.ProductDescription AS PD
ON PD.ProductDescriptionID=PMPDC.ProductDescriptionID
INNER JOIN Production.Culture AS C
ON C.CultureID=PMPDC.CultureID
WHERE C.Name LIKE 'English' AND PM.Name LIKE '%Mountain%'
 
--16.  Kreirati upit koji prikazuje broj, naziv i cijenu proizvoda, te stanje zaliha po lokacijama. Uzeti u obzir samo proizvode koji pripadaju kategoriji „Bikes“. Izlaz sortirati po stanju zaliha u opadajuæem redoslijedu. (AdventureWorks2017)
SELECT PP.ProductNumber,PP.Name,PP.ListPrice,PL.Name,SUM(PI.Quantity) 'Stanje zaliha'
FROM Production.Product AS PP
INNER JOIN Production.ProductInventory AS PI
ON PP.ProductID=PI.ProductID
INNER JOIN Production.Location AS PL
ON PI.LocationID=PL.LocationID
INNER JOIN Production.ProductSubcategory AS PS
ON PP.ProductSubcategoryID=PS.ProductSubcategoryID
INNER JOIN Production.ProductCategory AS PC
ON PS.ProductCategoryID=PC.ProductCategoryID
WHERE PC.Name LIKE 'Bikes'
GROUP BY PP.ProductNumber,PP.Name,PP.ListPrice,PL.Name
ORDER BY 5 DESC
 
--17.  Kreirati upit koji prikazuje ukupno ostvarenu zaradu bez popusta po zaposleniku, za robu isporuèenu na podruèje Evrope, u januaru mjesecu 2014. godine. Lista treba da sadrži ime i prezime zaposlenika, datum zaposlenja (dd.mm.yyyy), mail adresu, te ukupnu ostvarenu zaradu zaokruženu na dvije decimale. Izlaz sortirati po zaradi u opadajuæem redoslijedu. (AdventureWorks2017)  
SELECT PP.FirstName + ' '+ PP.LastName 'Ime i prezime zaposlenika', FORMAT(E.HireDate,'dd.MM.yyyy') 'Datum zaposlenja',E.HireDate,EA.EmailAddress,ROUND(SUM(SOD.UnitPrice*SOD.OrderQty),2)'Ukupna zarada'
FROM HumanResources.Employee AS E
INNER JOIN Person.Person AS PP
ON E.BusinessEntityID=PP.BusinessEntityID
INNER JOIN Person.EmailAddress AS EA
ON PP.BusinessEntityID=EA.BusinessEntityID
INNER JOIN Sales.SalesPerson AS SP
ON E.BusinessEntityID=SP.BusinessEntityID
INNER JOIN Sales.SalesOrderHeader AS SOH
ON SOH.SalesPersonID=SP.BusinessEntityID
INNER JOIN Sales.SalesOrderDetail AS SOD
ON SOD.SalesOrderID=SOH.SalesOrderID
INNER JOIN Sales.SalesTerritory AS ST
ON SOH.TerritoryID=ST.TerritoryID
WHERE ST.[Group]='Europe' AND YEAR(SOH.OrderDate)=2014 AND MONTH(SOH.OrderDate)=1
GROUP BY PP.FirstName + ' '+ PP.LastName,FORMAT(E.HireDate,'dd.MM.yyyy'),E.HireDate,EA.EmailAddress
ORDER BY [Ukupna zarada] DESC
 
 
 
--FUNKCIJE ZA RAD SA STRINGOVIMA
SELECT LEFT('Softverski inzinjering',2)  --REZULTAT: SO
SELECT RIGHT('Softverski inzinjering',11)  --REZULTAT: INZINJERING
SELECT CHARINDEX(' ','Sofrverski inzinjering') --REZULTAT: 11
SELECT PATINDEX('%[0-9]%','FITCC2022') --REZULTAT 6
SELECT SUBSTRING('Sofrverski inzinjering',11+1,11) --REZULTAT: INZINJERING
SELECT UPPER('Sofrverski inzinjering') --REZULTAT: INZINJERING
SELECT LOWER('Sofrverski inzinjering') --REZULTAT: inzinjering
SELECT LEN('Sofrverski inzinjering') --REZULTAT: 22
SELECT REPLACE('Sofrverski inzinjering','i','XY') --REZULTAT:SofrverskXY XYnzXYnjerXYng
SELECT STUFF('Softverski inzinjering',3,2,'XY') --REZULTAT: SoXYverski inzinjering
SELECT STR(122)+ '.' --REZULTAT: 122.
SELECT REVERSE('Softverski inzinjering') --REZULTAT: gnirejnizni iksrevtfoS
 
 
--Vježba 9_1 :: Zadaci
 
--1.   Iz tabele HumanResources.Employee baze AdventureWorks2017 iz kolone LoginID izvuæi ime uposlenika.
SELECT E.LoginID, SUBSTRING(E.LoginID,CHARINDEX('\',E.LoginID)+1,LEN(E.LoginID)-CHARINDEX('\',E.LoginID)-1) AS 'Ime uposlenika'
FROM AdventureWorks2017.HumanResources.Employee AS E
 
--2.   Kreirati upit koji prikazuje podatke o zaposlenicima. Lista treba da sadrži sljedeæe kolone: ID uposlenika, korisnièko ime i novu lozinku:
--Uslovi su sljedeæi:
--•    Za korisnièko ime potrebno je koristiti kolonu LoginID (tabela Employees). Npr. LoginID zaposlenika sa imenom i prezimenom 'Mary Gibson' je adventureworks\mary0. Korisnièko ime zaposlenika je sve što se nalazi iza znaka \ (backslash) što je u ovom primjeru mary0,
--•    Nova lozinka se formira koristeæi hešovanu lozinku zaposlenika na sljedeæi naèin: o Hešovanu lozinku potrebno je okrenuti obrnuto (npr. dbms2015 -> 5102smbd) o Nakon toga preskaèemo prvih 5 i uzimamo narednih 8 karaktera
--•    Sljedeæi korak jeste da iz dobivenog stringa poèevši od drugog karaktera naredna dva zamijenimo sa X# (npr. ako je dobiveni string dbms2015 izlaz æe biti dX#s2015)
--RJEŠENJE 1
SELECT *,RIGHT(E.LoginID,CHARINDEX('\',REVERSE(E.LoginID))-1) AS 'Korisnicko ime',
REPLACE(SUBSTRING(REVERSE(E.rowguid),6,7),SUBSTRING(SUBSTRING(REVERSE(E.rowguid),6,8),2,3),'X#')
FROM AdventureWorks2017.HumanResources.Employee AS E
--RJEŠENJE 2
SELECT *,RIGHT(E.LoginID,CHARINDEX('\',REVERSE(E.LoginID))-1) AS 'Korisnicko ime',
STUFF(SUBSTRING(REVERSE(E.rowguid),6,8),2,2,'X#') 'Nova lozinka'
FROM AdventureWorks2017.HumanResources.Employee AS E
 
--3.   Iz tabele Sales.Customer baze AdventureWorks2017 iz kolone AccountNumber izvuæi broj pri èemu je potrebno broj prikazati bez vodeæih nula.
--a) dohvatiti sve zapise
--b) dohvatiti one zapise kojima je unijet podatak u kolonu PersonID
--a
SELECT C.AccountNumber, CAST(RIGHT(C.AccountNumber,PATINDEX('%[A-Z]%',REVERSE(C.AccountNumber))-1) AS INT)
FROM AdventureWorks2017.Sales.Customer AS C
--b
SELECT C.AccountNumber, CAST(RIGHT(C.AccountNumber,PATINDEX('%[A-Z]%',REVERSE(C.AccountNumber))-1) AS INT)
FROM AdventureWorks2017.Sales.Customer AS C
WHERE C.PersonID IS NOT NULL
 
--4.   Iz tabele Purchasing.Vendor baze AdventureWorks2017 dohvatiti zapise u kojima se podatak u koloni AccountNumber formirao iz prve rijeèi kolone Name.
--1.RJEŠENJE
SELECT PV.AccountNumber,PV.Name,LEFT(PV.AccountNumber,CHARINDEX('0',PV.AccountNumber)-1), LEFT(PV.Name+' ',CHARINDEX(' ',PV.Name+ ' ')-1)
FROM AdventureWorks2017.Purchasing.Vendor AS PV
WHERE LEFT(PV.AccountNumber,CHARINDEX('0',PV.AccountNumber)-1)=LEFT(PV.Name+' ',CHARINDEX(' ',PV.Name+ ' ')-1)
--2.RJEŠENJE
SELECT PV.AccountNumber,PV.Name,LEFT(PV.AccountNumber,CHARINDEX('0',PV.AccountNumber)-1), IIF(CHARINDEX(' ',PV.Name)=0,PV.Name,LEFT(PV.Name,CHARINDEX(' ',PV.Name)-1))
FROM AdventureWorks2017.Purchasing.Vendor AS PV
WHERE LEFT(PV.AccountNumber,CHARINDEX('0',PV.AccountNumber)-1)=IIF(CHARINDEX(' ',PV.Name)=0,PV.Name,LEFT(PV.Name,CHARINDEX(' ',PV.Name)-1))
--3 RJEŠENJE
SELECT PV.AccountNumber,PV.Name,LEFT(PV.AccountNumber,PATINDEX('%[0-9]%',PV.AccountNumber)-1), IIF(CHARINDEX(' ',PV.Name)=0,PV.Name,LEFT(PV.Name,CHARINDEX(' ',PV.Name)-1))
FROM AdventureWorks2017.Purchasing.Vendor AS PV
WHERE LEFT(PV.AccountNumber,PATINDEX('%[0-9]%',PV.AccountNumber)-1)=IIF(CHARINDEX(' ',PV.Name)=0,PV.Name,LEFT(PV.Name,CHARINDEX(' ',PV.Name)-1))
 
--5.   Koristeæi bazu Northwind kreirati upit koji æe prikazati odvojeno ime i prezime, naziv firme te državu i grad kupca ali samo onih èija adresa završava sa 2 ili više cifre. U rezultate upita ne treba ukljuèiti one koje u polju ContactName imaju 2 ili više rijeèi
SELECT LEFT(C.ContactName,CHARINDEX(' ',C.ContactName)-1) AS Ime, RIGHT(C.ContactName,CHARINDEX(' ',REVERSE(C.ContactName))-1) AS Prezime, C.CompanyName ,C.ContactName,C.Address
FROM Northwind.dbo.Customers AS C
WHERE IIF(ISNUMERIC(RIGHT(C.Address,CHARINDEX(' ',REVERSE(C.Address))-1))=1,RIGHT(C.Address,CHARINDEX(' ',REVERSE(C.Address))-1),0)>=10 AND LEN(C.ContactName)-LEN(REPLACE(C.ContactName,' ',''))=1
 
 
--ILI
 
SELECT LEFT(C.ContactName,CHARINDEX(' ',C.ContactName)-1) AS Ime, RIGHT(C.ContactName,CHARINDEX(' ',REVERSE(C.ContactName))-1) AS Prezime, C.CompanyName ,C.ContactName,C.Address
FROM Northwind.dbo.Customers AS C
WHERE RIGHT(C.Address,CHARINDEX(' ',REVERSE(C.Address))-1) NOT LIKE '%[^0-9]%' AND LEN(RIGHT(C.Address,CHARINDEX(' ',REVERSE(C.Address))-1))>=2 AND LEN(C.ContactName)-LEN(REPLACE(C.ContactName,' ',''))=1
--6.   Koristeæi bazu Northwind u tabeli Customers dodati izraèunato polje Spol u koji æe se upitom pohraniti vrijednost da li se radi o muškarcu ili ženi (M ili F). Vrijednost na osnovu koje se odreðuje to o kojem se spolu radi nalazi se u koloni ContactName gdje zadnje slovo prve rijeèi odreðuje spol (rijeèi koje se završavaju slovom a predstavljaju osobe ženskog spola).
--SELECT I PROVJERA ISPRAVNOSTI ZAPISA
SELECT C.ContactName,IIF(RIGHT(LEFT(C.ContactName,CHARINDEX(' ',C.ContactName)-1),1)='a','F','M')
FROM Northwind.dbo.Customers AS C
--COMPUTED FIELD
ALTER TABLE Northwind.dbo.Customers
ADD Spol2 AS IIF(RIGHT(LEFT(ContactName,CHARINDEX(' ',ContactName)-1),1)='a','F','M')
 
 
 
--1.   U tabeli Customers baze Northwind ID kupca je primarni kljuè.
--U tabeli Orders baze Northwind ID kupca je vanjski kljuè.
--Prikazati:
--a)   Koliko je kupaca evidentirano u obje tabele
--b)   Da li su svi kupci obavili narudžbu
--c)   Ukoliko postoje neki da nisu prikazati koji su to
USE Northwind
--A
--UNIJOM PROVJERAVAMO KOLIKO JE KUPACA EVIDENTIRANO-BROJ KUPACA
SELECT C.CustomerID
FROM Customers AS C
UNION
SELECT O.CustomerID
FROM Orders AS O
--B
--INTERSECTOM MOŽEMO PROVJERITI DA LI SU SVI KUPCI OBAVILI NARUDŽBU
SELECT C.CustomerID
FROM Customers AS C
INTERSECT
SELECT O.CustomerID
FROM Orders AS O
--C
SELECT C.CustomerID
FROM Customers AS C
EXCEPT
SELECT O.CustomerID
FROM Orders AS O
--LEFT JOIN
SELECT C.CustomerID,O.OrderID
FROM Customers AS C
LEFT OUTER JOIN Orders AS O
ON O.CustomerID=C.CustomerID
WHERE O.OrderID IS NULL
 
--2.   Dati pregled vanrednih prihoda svih osoba. Pregled treba da sadrži sljedeæe kolone: OsobaID, Ime, VanredniPrihodID, IznosPrihoda (Prihodi)
USE prihodi
SELECT O.OsobaID,O.Ime,VP.VanredniPrihodiID,VP.IznosVanrednogPrihoda
FROM Osoba AS O
LEFT OUTER JOIN VanredniPrihodi AS VP
ON VP.OsobaID=O.OsobaID
 
--3.   Dati pregled redovnih prihoda svih osoba. Pregled treba da sadrži sljedeæe kolone: OsobaID, Ime, RedovniPrihodID, Neto (Prihodi)
SELECT O.OsobaID,O.Ime,RP.RedovniPrihodiID,RP.Neto
FROM Osoba AS O
LEFT OUTER JOIN RedovniPrihodi AS RP
ON O.OsobaID=RP.OsobaID
 
 
--4.   Odrediti da li je svaki autor napisao bar po jedan naslov. (Pubs)
--a) ako ima autora koji nisu napisali ni jedan naslov navesti njihov ID.
--b) dati pregled autora koji su napisali bar po jedan naslov.
USE pubs
SELECT A.au_id
FROM authors AS A
INTERSECT
SELECT TA.au_id
FROM titleauthor AS TA
 
SELECT*
FROM authors
 
-- OVIM VIDIMO DA SVI AUTORI NISU NAPISALI PO JEDAN NASLOV
--A
SELECT A.au_id 'Autori bez naslova'
FROM authors AS A
LEFT OUTER JOIN titleauthor AS TA
ON A.au_id=TA.au_id
WHERE TA.title_id IS NULL
 
--ILI
 
SELECT A.au_id
FROM authors AS A
EXCEPT
SELECT TA.au_id
FROM titleauthor AS TA
 
--B
-- DISTINCT UKOLIKO ŽELIMO DA SE JEDAN AUTOR NE PONAVLJA VIŠE PUTA
SELECT DISTINCT A.au_id 'Autori s naslovima'
FROM authors AS A
INNER JOIN titleauthor AS TA
ON A.au_id=TA.au_id
 
--ILI
 
SELECT A.au_id
FROM authors AS A
INTERSECT
SELECT TA.au_id
FROM titleauthor AS TA
 
--5.   Prikazati 10 najskupljih stavki prodaje. Upit treba da sadrži naziv proizvoda, kolièinu, cijenu i vrijednost stavke prodaje. Cijenu i vrijednost stavke prodaje zaokružiti na dvije decimale. Izlaz formatirati na naèin da uz kolièinu stoji 'kom' (npr 50kom) a uz cijenu KM (npr 50KM). (AdventureWorks2017)
USE AdventureWorks2017
SELECT TOP 10 PP.Name,CAST(SOD.OrderQty AS NVARCHAR)+' kom' 'Kolicina',CAST(ROUND(SOD.UnitPrice,2) AS NVARCHAR) +' KM' 'Cijena',CAST(ROUND((SOD.OrderQty*SOD.UnitPrice),2) AS nvarchar) +'KM' 'Stavka prodaje'
FROM Sales.SalesOrderDetail AS SOD
INNER JOIN Production.Product AS PP
ON SOD.ProductID=PP.ProductID
ORDER BY 4 DESC
 
--6.   Kreirati upit koji prikazuje ukupan broj kupaca po teritoriji. Lista treba da sadrži sljedeæe kolone: naziv teritorije, ukupan broj kupaca. Uzeti u obzir samo teritorije gdje ima više od 1000 kupaca. (AdventureWorks2017)
SELECT ST.Name, COUNT(*) 'Broj kupaca'
FROM Sales.Customer AS SC
INNER JOIN SALES.SalesTerritory AS ST
ON SC.TerritoryID=ST.TerritoryID
GROUP BY St.Name
HAVING COUNT(*)>1000
 
--7.   Kreirati upit koji prikazuje zaradu od prodaje proizvoda. Lista treba da sadrži naziv proizvoda, ukupnu zaradu bez uraèunatog popusta i ukupnu zaradu sa uraèunatim popustom. Iznos zarade zaokružiti na dvije decimale. Uslov je da se prikaže zarada samo za stavke gdje je bilo popusta. Listu sortirati po zaradi opadajuæim redoslijedom. (AdventureWorks2017)
SELECT PP.Name,ROUND(SUM(SOD.UnitPrice*SOD.OrderQty),2) 'Ukupna zarada bez popusta', ROUND(SUM(SOD.UnitPrice*SOD.OrderQty*(1-SOD.UnitPriceDiscount)),2) 'Ukupna zarada sa popustom'
FROM Sales.SalesOrderDetail AS SOD
INNER JOIN Production.Product AS PP
ON PP.ProductID=SOD.ProductID
WHERE SOD.UnitPriceDiscount>0
GROUP BY PP.Name
ORDER BY 3 DESC
 
 
 
--VJEŽBA 8
 
USE Northwind
 
--1.  Prikazati kolièinski najmanju i najveæu vrijednost stavke narudžbe. (Northwind)
SELECT MIN(OD.Quantity) 'Najmanja', MAX(OD.Quantity) 'Najveca'
FROM [Order Details] AS OD
 
--2.  Prikazati kolièinski najmanju i najveæu vrijednost stavke narudžbe za svaku od
--narudžbi pojedinaèno. (Northwind)
SELECT  OD.OrderID, MIN(OD.Quantity) Najmanja, MAX(OD.Quantity) Najveca
FROM [Order Details] AS OD
GROUP BY OD.OrderID
 
--3.  Prikazati ukupnu zaradu od svih narudžbi. (Northwind)
SELECT SUM(OD.Quantity*OD.UnitPrice) 'Zarada'
FROM [Order Details] AS OD
 
--4.  Prikazati ukupnu vrijednost za svaku narudžbu pojedinaèno uzimajuæi u obzir i popust.
--Rezultate zaokružiti na dvije decimale i sortirati prema ukupnoj vrijednosti naružbe u
--opadajuæem redoslijedu. (Northwind)
SELECT OD.OrderID, ROUND(SUM(OD.Quantity*OD.UnitPrice*(1-OD.Discount)),2) 'Ukupna vrijednost sa popustom'
FROM [Order Details] AS OD
GROUP BY OD.OrderID
ORDER BY 2 DESC
 
--5.  Prebrojati stavke narudžbe gdje su naruèene kolièine veæe od 50 (ukljuèujuæi i graniènu
--vrijednost). Uzeti u obzir samo one stavke narudžbe gdje je odobren popust.
--(Northwind)
SELECT COUNT(*) 'Broj stavki'
FROM [Order Details] AS OD
WHERE OD.Quantity>=50 AND OD.Discount>0
 
--6.  Prikazati prosjeènu cijenu stavki narudžbe za svaku narudžbu pojedinaèno. Sortirati
--po prosjeènoj cijeni u opadajuæem redoslijedu. (Northwind)
SELECT OD.OrderID,AVG(OD.UnitPrice) 'Cijena'
FROM [Order Details] AS OD
GROUP BY OD.OrderID
 
--7.  Prikazati broj stavki narudžbi sa odobrenim popustom. (Northwind)
SELECT COUNT(*) 'Broj stavki'
FROM [Order Details] AS OD
WHERE OD.Discount>0
 
--8.  Prikazati broj narudžbi u kojima je unesena regija kupovine. (Northwind)
SELECT COUNT (*) 'Broj narudžbi sa unesenim regijama'
FROM Orders AS O
WHERE O.ShipRegion IS NOT NULL
 
SELECT COUNT (O.ShipRegion) 'Broj narudžbi sa unesenim regijama'
FROM Orders AS O
 
--9. Modificirati prethodni upit tako da se dobije broj narudžbi u kojima nije unesena regija
--kupovine. (Northwind)
SELECT COUNT(*)-COUNT(O.ShipRegion) 'Nije unesena regija kupovine'
FROM Orders AS O
 
SELECT COUNT (*) 'Broj narudžbi sa unesenim regijama'
FROM Orders AS O
WHERE O.ShipRegion IS NULL
 
--10. Prikazati ukupne troškove prevoza po uposlenicima. Uslov je da ukupni troškovi
--prevoza nisu prešli 7500 pri èemu se rezultat treba sortirati opadajuæim redoslijedom
--po visini troškova prevoza. (Northwind)
SELECT O.EmployeeID, SUM(O.Freight) 'Troškovi prevoza'
FROM Orders AS O
GROUP BY O.EmployeeID
HAVING SUM(O.Freight)<7500
ORDER BY 2 DESC
 
--11. Prikazati ukupnu vrijednost troškova prevoza po državama ali samo ukoliko je veæa od
--4000 za robu koja se kupila u Francuskoj, Njemaèkoj ili USA. (Northwind)
SELECT O.ShipCountry, SUM (O.Freight) 'Troškovi prevoza'
FROM Orders AS O
WHERE O.ShipCountry IN ('France', 'Germany', 'USA')
GROUP BY O.ShipCountry
HAVING SUM (O.Freight)>4000
 
--12. Prikazati ukupan broj modela proizvoda. Lista treba da sadrži ID modela proizvoda i
--njihov ukupan broj. Uslov je da proizvod pripada nekom modelu i da je ukupan broj
--proizvoda po modelu veæi od 3. U listu ukljuèiti (prebrojati) samo one proizvode èiji
--naziv poèinje slovom 'S'. (AdventureWorks2017)
USE AdventureWorks2017
SELECT PP.ProductModelID, COUNT (*)
FROM Production.Product AS PP
WHERE PP.Name LIKE 'S%' AND PP.ProductModelID IS NOT NULL
GROUP BY PP.ProductModelID
HAVING COUNT (*)>3
 
--ILI
 
SELECT PP.ProductModelID, COUNT (PP.ProductModelID)
FROM Production.Product AS PP
WHERE PP.Name LIKE 'S%'
GROUP BY PP.ProductModelID
HAVING COUNT (PP.ProductModelID)>3
 
--13.  Prikazati tip popusta, naziv prodavnice i njen id. (Pubs)
USE pubs
SELECT D.discounttype,S.stor_name,S.stor_id
FROM stores AS S
INNER JOIN discounts AS D
ON S.stor_id=D.stor_id
 
--14.  Prikazati ime uposlenika, njegov id, te naziv posla koji obavlja. (Pubs)
SELECT E.fname,E.emp_id,J.job_desc
FROM employee AS E
INNER JOIN jobs AS J
ON J.job_id=E.job_id
 
--15.  Prikazati spojeno ime i prezime uposlenika, teritoriju i regiju koju pokriva. Uslov je da su zaposlenici mlaði od 60 godina. (Northwind)
USE Northwind
SELECT E.FirstName + ' '+E.LastName,T.TerritoryDescription,R.RegionDescription
FROM Employees AS E
INNER JOIN EmployeeTerritories AS ET
ON E.EmployeeID=ET.EmployeeID
INNER JOIN Territories AS T
ON ET.TerritoryID=T.TerritoryID
INNER JOIN Region AS R
ON R.RegionID=T.RegionID
WHERE DATEDIFF(YEAR,E.BirthDate,GETDATE())<60
 
--16.  Prikazati ime uposlenika i ukupnu vrijednost svih narudžbi koju je taj uposlenik napravio u 1996. godini. U obzir uzeti samo one uposlenike èija je ukupna napravljena vrijednost veæa od 20000. Podatke sortirati prema ukupnoj vrijednosti (zaokruženoj na dvije decimale) u rastuæem redoslijedu. (Northwind)
SELECT E.EmployeeID,SUM(OD.UnitPrice*OD.Quantity)'Ukupna vrijednost'
FROM Employees AS E
INNER JOIN Orders AS O
ON E.EmployeeID=O.EmployeeID
INNER JOIN [Order Details] AS OD
ON OD.OrderID=O.OrderID
WHERE YEAR(O.OrderDate)=1996
GROUP BY E.EmployeeID
HAVING SUM(OD.UnitPrice*OD.Quantity)>20000
ORDER BY 2
 
--17.  Prikazati naziv dobavljaèa, adresu i državu dobavljaèa i nazive proizvoda koji pripadaju kategoriji piæa i ima ih na stanju više od 30 komada. Rezultate upita sortirati po državama. (Northwind)
SELECT S.ContactName,S.Address,S.Country,P.ProductName
FROM Suppliers AS S
INNER JOIN Products AS P
ON S.SupplierID=P.SupplierID
INNER JOIN Categories AS C
ON C.CategoryID=P.CategoryID
WHERE P.UnitsInStock>30 AND C.Description LIKE '%drinks%'
ORDER BY 3
 
--18.  Prikazati kontakt ime kupca, njegov id, broj narudžbe, datum kreiranja narudžbe (prikazan na naèin npr 24.07.2021) te ukupnu vrijednost narudžbe sa i bez popusta. Prikazati samo one narudžbe koje su kreirane u 1997. godini. Izraèunate vrijednosti zaokružiti na dvije decimale, te podatke sortirati prema ukupnoj vrijednosti narudžbe sa popustom. (Northwind)
USE Northwind
SELECT C.ContactName,C.CustomerID,O.OrderID,FORMAT(O.OrderDate,'dd.MM.yyyy') AS 'Datum kreiranja narudžbe', SUM(OD.UnitPrice*OD.Quantity) 'Ukupno bez popusta',ROUND(SUM(OD.UnitPrice*OD.Quantity*(1-OD.Discount)),2) 'Ukupno sa popustom'
FROM Customers AS C
INNER JOIN Orders AS O
ON C.CustomerID=O.CustomerID
INNER JOIN [Order Details] AS OD
ON OD.OrderID=O.OrderID
WHERE YEAR(O.OrderDate)=1997
GROUP BY C.ContactName,C.CustomerID,O.OrderID,FORMAT(O.OrderDate,'dd.MM.yyyy')
ORDER BY 6 DESC
 
 
 
 
 
 
 
 
 
--01.11.2022.
 
--BAZE PODATAKA – PRAKTIÈNI ISPIT
 
 
--1. Kroz SQL kod kreirati bazu podataka sa imenom vašeg broja indeksa.
CREATE DATABASE ispitni
GO
USE ispitni
--2. U kreiranoj bazi podataka kreirati tabele sa sljedeæom strukturom:
--a) Proizvodi
--• ProizvodID, cjelobrojna vrijednost i primarni kljuè
--• Naziv, 50 UNICODE karaktera (obavezan unos)
--• SifraProizvoda, 25 UNICODE karaktera (obavezan unos)
--• Boja, 15 UNICODE karaktera
--• NazivKategorije, 50 UNICODE (obavezan unos)
--• Tezina, decimalna vrijednost sa 2 znaka iza zareza
--b) ZaglavljeNarudzbe
--• NarudzbaID, cjelobrojna vrijednost i primarni kljuè,
--• DatumNarudzbe, polje za unos datuma i vremena (obavezan unos)
--• DatumIsporuke, polje za unos datuma i vremena
--• ImeKupca, 50 UNICODE (obavezan unos)
--• PrezimeKupca, 50 UNICODE (obavezan unos)
--• NazivTeritorije, 50 UNICODE (obavezan unos)
--• NazivRegije, 50 UNICODE (obavezan unos)
--• NacinIsporuke, 50 UNICODE (obavezan unos)
--c) DetaljiNarudzbe
--• NarudzbaID, cjelobrojna vrijednost, strani kljuè
--• ProizvodID, cjelobrojna vrijednost, strani kljuè
--• Cijena, novèani tip (obavezan unos),
--• Kolicina, smallint (obavezan unos),
--• Popust, novèani tip (obavezan unos)
--• Narudzba ID i ProizvodID primarni kljuè
--12 bodova
CREATE TABLE Proizvodi (
ProizvodID INT PRIMARY KEY,
Naziv NVARCHAR(50) NOT NULL,
SifraProizvoda NVARCHAR(25) NOT NULL,
Boja NVARCHAR(15),
NazivKategorije NVARCHAR(50) NOT NULL,
Tezina DECIMAL(8,2)
)
 
CREATE TABLE ZaglavljeNarudzbe (
NarudzbaID INT PRIMARY KEY,
DatumNarudzbe DATETIME,
DatumIsporuke DATETIME,
ImeKupca NVARCHAR(50) NOT NULL,
PrezimeKupca NVARCHAR(50) NOT NULL,
NazivTeritorije NVARCHAR(50) NOT NULL,
NazivRegije NVARCHAR(50) NOT NULL,
NacinIsporuke NVARCHAR(50) NOT NULL,
)
 
CREATE TABLE DetaljiNarudzbe (
NarudzbaID INT CONSTRAINT FK_DetaljiNarudzbe_NarudzbaID FOREIGN KEY REFERENCES ZaglavljeNarudzbe (NarudzbaID),
ProizvodID INT CONSTRAINT FK_DetaljiNarudzbe_ProizvodID FOREIGN KEY REFERENCES Proizvodi (ProizvodID),
Cijena MONEY NOT NULL,
Kolicina SMALLINT NOT NULL,
Popust MONEY NOT NULL,
PRIMARY KEY(NarudzbaID, ProizvodID)
)
 
--3. Iz baze podataka AdventureWorks u svoju bazu podataka prebaciti sljedeæe podatke:
--a) U tabelu Proizvodi dodati sve proizvode, na mjestima gdje nema pohranjenih podataka o težini zamijeniti vrijednost sa 0
--• ProductID -> ProizvodID
--• Name  -> Naziv
--• ProductNumber -> SifraProizvoda
--• Color -> Boja
--• Name (ProductCategory) -> NazivKategorije
--• Weight -> Tezina
INSERT INTO Proizvodi
SELECT PP.ProductID, PP.Name, PP.ProductNumber, PP.Color, PPC.Name, ISNULL(PP.Weight, 0)
FROM AdventureWorks2017.Production.Product AS PP
INNER JOIN AdventureWorks2017.Production.ProductSubcategory AS PPS
ON PP.ProductSubcategoryID = PPS.ProductSubcategoryID
INNER JOIN AdventureWorks2017.Production.ProductCategory AS PPC
ON PPS.ProductCategoryID = PPC.ProductCategoryID
 
--b) U tabelu ZaglavljeNarudzbe dodati sve narudžbe
--• SalesOrderID -> NarudzbaID
--• OrderDate -> DatumNarudzbe
--• ShipDate -> DatumIsporuke
--• FirstName (Person) -> ImeKupca
--• LastName (Person) -> PrezimeKupca
--• Name (SalesTerritory) -> NazivTeritorije
--• Group (SalesTerritory) -> NazivRegije
--• Name (ShipMethod) -> NacinIsporuke
INSERT INTO ZaglavljeNarudzbe
SELECT SOH.SalesOrderID, SOH.OrderDate, SOH.ShipDate, PP.FirstName, PP.LastName, ST.Name, ST.[Group], SM.Name
FROM AdventureWorks2017.Sales.SalesOrderHeader AS SOH
INNER JOIN AdventureWorks2017.Sales.Customer AS SC
ON SOH.CustomerID = SC.CustomerID
INNER JOIN AdventureWorks2017.Person.Person AS PP
ON SC.PersonID = PP.BusinessEntityID
INNER JOIN AdventureWorks2017.Sales.SalesTerritory AS ST
ON SOH.TerritoryID = ST.TerritoryID
INNER JOIN AdventureWorks2017.Purchasing.ShipMethod AS SM
ON SOH.ShipMethodID = SM.ShipMethodID
--c) U tabelu DetaljiNarudzbe dodati sve stavke narudžbe
--• SalesOrderID -> NarudzbaID
--• ProductID -> ProizvodID
--• UnitPrice -> Cijena
--• OrderQty -> Kolicina
--• UnitPriceDiscount -> Popust
--12 bodova
INSERT INTO DetaljiNarudzbe
SELECT SOD.SalesOrderID, SOD.ProductID, SOD.UnitPrice, SOD.OrderQty, SOD.UnitPriceDiscount
FROM AdventureWorks2017.Sales.SalesOrderDetail AS SOD
 
--4.
--a) (6 bodova) Prikazati sve proizvode koji imaju težinu izmeðu 15 i 25, ili su crvene ili crne boje.
SELECT * FROM Proizvodi
WHERE Tezina BETWEEN 15 and 25
OR Boja IN ('Black', 'Red')
 
--b) (7 bodova) Prikazati ukupni promet (uzimajuæi u obzir i popust) od narudžbi grupisan po teritorijama.
SELECT NazivTeritorije, SUM(DT.Cijena * DT.Kolicina * (1 - DT.Popust)) as UkupnoProdano
FROM ZaglavljeNarudzbe AS ZN
INNER JOIN DetaljiNarudzbe AS DT
ON ZN.NarudzbaID = DT.NarudzbaID
GROUP BY ZN.NazivTeritorije
 
--c) (7 bodova) Napisati upit koji æe prebrojati stavke narudžbe za svaku narudžbu pojedinaèno. U rezultatima prikazati ID narudžbe i broj stavki, te uzeti u obzir samo one narudžbe èiji je broj stavki veæi od 1, te koje su napravljene izmeðu 1.6. i 10.6. bilo koje godine. (Novokreirana baza)
SELECT ZN.NarudzbaID, COUNT(*) as BrojStavki
FROM ZaglavljeNarudzbe AS ZN
INNER JOIN DetaljiNarudzbe AS DN
ON ZN.NarudzbaID = DN.NarudzbaID
WHERE MONTH(DatumNarudzbe) = 6
AND DAY(DatumNarudzbe) BETWEEN 1 and 10
GROUP BY ZN.NarudzbaID
HAVING COUNT(*) > 1
 
--d) (7 bodova) Prikazati sve uposlenike ženskog spola koji imaju više od 10 godina radnog staža a rade na Production ili Marketing odjelu. Upitom je potrebno prikazati spojeno ime i prezime uposlenika, godine radnog staža, te odjel na kojem rade uposlenici. Rezultate upita sortirati u rastuæem redoslijedu prema nazivu odjela, te opadajuæem prema godinama radnog staža. (AdventureWorks2017)
USE AdventureWorks2017
SELECT PP.FirstName+ ' '+ PP.LastName 'Ime i prezime', DATEDIFF(YEAR,E.HireDate,GETDATE()) 'Godine radnog staza', D.Name
FROM HumanResources.Employee AS E
INNER JOIN HumanResources.EmployeeDepartmentHistory AS EDH
ON E.BusinessEntityID=EDH.BusinessEntityID
INNER JOIN HumanResources.Department AS D
ON D.DepartmentID=EDH.DepartmentID
INNER JOIN Person.Person AS PP
ON PP.BusinessEntityID=E.BusinessEntityID
WHERE DATEDIFF(YEAR,E.HireDate,GETDATE())>10 AND E.Gender ='F' AND D.Name IN ('Production','Marketing')
ORDER BY 3, 2 DESC
--e) (11 bodova) Prikazati spojeno ime i prezime osobe, spol, ukupnu vrijednost redovnih bruto prihoda, ukupnu vrijednost vanrednih prihoda, te sumu ukupnih vanrednih i ukupnih redovnih bruto prihoda. Uslov je da osobe dolaze iz Latvije, Kine ili Indonezije a suma ukupnih bruto i ukupnih vanrednih prihoda je veæa od 1000KM. Takoðer, uslov je da tip vanrednog prihoda bude prekovremeni rad a tip redovnog prihoda plata. Rezultate upita sortirati prema ukupnoj vrijednosti prihoda obrnuto abecedno. (Prihodi)
USE prihodi
select*
from(select O.Ime,O.PrezIme, SUM(rp.Bruto) 'Ukupna bruto vrijednost',SUM(vp.IznosVanrednogPrihoda) 'Ukupna vrijednost vanr prih',SUM(rp.Bruto)+SUM(vp.IznosVanrednogPrihoda) 'Ukupna vrijednost prihoda'
from Osoba as o
inner join Drzava as d
on o.DrzavaID=d.DrzavaID
inner join RedovniPrihodi as rp
on o.OsobaID=rp.OsobaID
inner join VanredniPrihodi as vp
on vp.OsobaID=o.OsobaID
inner join TipVanrednogPrihoda as tvp
on vp.TipVanrednogPrihodaID=tvp.TipVanrednogPrihodaID
inner join TipRedovnogPrihoda as trp
on rp.TipRedovnogPrihodaID=trp.TipRedovnogPrihodaID
where d.Drzava IN( 'China','Latvia','Indonesia') and tvp.NazivVanrednogPrihoda like 'prekovremeni rad' and trp.NazivRedovnogPrihoda like 'plata'
group by o.ime,o.PrezIme) as podq
where [Ukupna vrijednost prihoda]>10000
order by 5 desc
 
USE prihodi
select O.Ime,O.PrezIme, SUM(rp.Bruto) 'Ukupna bruto vrijednost',SUM(vp.IznosVanrednogPrihoda) 'Ukupna vrijednost vanr prih',SUM(rp.Bruto)+SUM(vp.IznosVanrednogPrihoda) 'Ukupna vrijednost prihoda'
from Osoba as o
inner join Drzava as d
on o.DrzavaID=d.DrzavaID
inner join RedovniPrihodi as rp
on o.OsobaID=rp.OsobaID
inner join VanredniPrihodi as vp
on vp.OsobaID=o.OsobaID
inner join TipVanrednogPrihoda as tvp
on vp.TipVanrednogPrihodaID=tvp.TipVanrednogPrihodaID
inner join TipRedovnogPrihoda as trp
on rp.TipRedovnogPrihodaID=trp.TipRedovnogPrihodaID
where d.Drzava IN( 'China','Latvia','Indonesia') and tvp.NazivVanrednogPrihoda like 'prekovremeni rad' and trp.NazivRedovnogPrihoda like 'plata'
group by o.ime,o.PrezIme
having SUM(rp.Bruto)+SUM(vp.IznosVanrednogPrihoda)>10000
order by 5 desc
--f) (10 bodova) Napisati upit koji æe prikazati sljedeæe podatke o proizvodima: ID proizvoda, naziv proizvoda, šifru proizvoda, te novokreiranu šifru proizvoda. Nova šifra se sastoji od sljedeæih vrijednosti:
--1) Svi karakteri nakon prvog znaka - (crtica)
--2) Karakter /
--3) ID proizvoda
--Npr. Za proizvod sa ID-om 716 i šifrom LJ-0192-X, nova šifra æe biti 0192-X/716.
USE ispitni
GO
SELECT ProizvodID, Naziv, SifraProizvoda,
SUBSTRING(SifraProizvoda, CHARINDEX('-', SifraProizvoda, 0) + 1, LEN(SifraProizvoda)) + '/' + CONVERT(NVARCHAR(50), ProizvodID) as Šifra
FROM Proizvodi
 
-- 48 bodova
--5.
--a) (8 bodova) Kreirati view koji prikazuje sljedeæe kolone: ID narudžbe, datum narudžbe, spojeno ime i prezime kupca i ukupnu vrijednost narudžbe. Podatke sortirati prema ukupnoj vrijednosti u opadajuæem redoslijedu. (Novokreirana baza)
GO
CREATE VIEW view_5a AS
SELECT ZN.NarudzbaID, ZN.DatumNarudzbe,ZN.ImeKupca + ' '+ ZN.PrezimeKupca AS 'Ime i prezime',
SUM(DN.Cijena*DN.Kolicina*(1-DN.Popust)) AS 'Vrijednost'
FROM ZaglavljeNarudzbe AS ZN
INNER JOIN DetaljiNarudzbe AS DN
ON ZN.NarudzbaID=DN.NarudzbaID
GROUP BY ZN.NarudzbaID, ZN.DatumNarudzbe, ZN.ImeKupca, ZN.PrezimeKupca
 
GO
 
SELECT*
FROM view_5a
ORDER BY Vrijednost DESC
 
--b) (7 bodova) Kreirati proceduru sp_edit_proizvodi kojom æe se izmijeniti odreðeni zapis iz tabele Proizvodi. Procedurom korisnik može da izmijeni sve podatke o jednom proizvodu ili samo neki odreðeni podatak. Ukoliko korisnik mijenja odreðeni podatak voditi raèuna da ostali podaci ne dobiju NULL vrijednost. OBAVEZNO kreirati testni sluèaj za kreiranu proceduru. (Novokreirana baza)
GO
CREATE PROCEDURE sp_edit_proizvodi
(
@ProizvodID INT,
@Naziv NVARCHAR(40)=NULL,
@SifraProizvoda NVARCHAR(25)=NULL,
@Boja NVARCHAR(15)=NULL,
@NazivKategorije NVARCHAR(50)=NULL,
@Tezina DECIMAL (8,2)=NULL
)
AS
BEGIN
UPDATE Proizvodi
SET Naziv=ISNULL(@Naziv, Naziv),
SifraProizvoda=ISNULL(@SifraProizvoda, SifraProizvoda),
Boja=ISNULL(@Boja, Boja),
NazivKategorije=ISNULL(@NazivKategorije, NazivKategorije),
Tezina=ISNULL(@Tezina, Tezina)
WHERE @ProizvodID=ProizvodID
END
GO
 
EXEC sp_edit_proizvodi @ProizvodID=706, @Naziv='HL Naziv'
 
SELECT*
FROM Proizvodi
 
--c) (7 bodova) Kreirati proceduru sp_search_proizvodi kojom æe se u tabeli Proizvodi uraditi select proizvoda prema nazivu proizvoda ili nazivu kategorije. Proceduru obavezno pokrenuti. (Novokreirana baza)
GO
CREATE PROCEDURE proc_search_proizvodi
(
@Naziv NVARCHAR(40)=NULL,
@Kategorija NVARCHAR(50)=NULL
)
AS
BEGIN
SELECT * FROM Proizvodi as P
WHERE Naziv=@Naziv OR NazivKategorije=@Kategorija
END
 
EXEC proc_search_proizvodi @Naziv = 'HL Road Frame - Red, 62'
EXEC proc_search_proizvodi @Kategorija = 'Components'
EXEC proc_search_proizvodi @Naziv = 'LL Road Front Wheel', @Kategorija = 'Components'
 
 
--22 boda
 
 
--SQL skriptu (bila prazna ili ne) imenovati Vašim brojem indeksa, te istu upload-ovati na FTP u folder Upload.
--Maksimalan broj bodova:100 
--Prag prolaznosti: 55
 
 
 
 
create database zadacic
go
use zadacic
 
 
 
--1 zadatak
create table proizvodi
(
       proizvodID int constraint PK_proizvodi primary key not null,
       naziv nvarchar(50) not null,
       sifraProizvoda nvarchar(25) not null,
       boja nvarchar (15),
       nazivKategorije nvarchar(50) not null,
       tezina decimal (8,2)
)
 
create table zaglavljeNarudzba
(
       narudzbaID int constraint PK_narudzba primary key not null,
       datumNaruzdbe datetime not null,
       datumIsporuke datetime,
       imeKupca nvarchar (50) not null,
       prezimeKupca nvarchar (50) not null,
       nazivTeritorije nvarchar (50) not null,
       nazivRegije nvarchar (50) not null,
       nacinIsporuke nvarchar (50) not null
)
 
create table detaljiNarudzbe
(
       narudzbaID int,
       proizvodID int,
       constraint FK_detaljiNarudzbeZ foreign key (narudzbaID) references zaglavljeNarudzba (narudzbaID),
       constraint FK_detaljiNarudzbeP foreign key (proizvodID) references proizvodi (proizvodID),
       cijena money not null,
       kolicina smallint not null,
       popust money not null,
       constraint PK_detaljiNarudzbeZP primary key(narudzbaID,proizvodID)
)
 
 
--2 zadatak
 
insert into proizvodi
select pp.productID, pp.Name, pp.ProductNumber, pp.color, pc.Name, isnull(pp.Weight,0) as Weight
from [AdventureWorks2014].Production.Product as pp inner join [AdventureWorks2014].Production.ProductSubcategory as sc
on pp.ProductSubcategoryID = sc.ProductSubcategoryID
inner join [AdventureWorks2014].Production.ProductCategory as pc
on sc.ProductCategoryID = pc.ProductCategoryID
 
 
insert into zaglavljeNarudzba
select soh.SalesOrderID, soh.OrderDate, soh.ShipDate, pp.FirstName, pp.LastName, st.Name, st.[Group], sm.Name
from [AdventureWorks2014].Sales.SalesOrderHeader as soh inner join AdventureWorks2014.Sales.Customer as c
on soh.CustomerID = c.CustomerID
inner join AdventureWorks2014.Person.Person as pp
on c.PersonID = pp.BusinessEntityID
inner join AdventureWorks2014.Sales.SalesTerritory as st
on st.TerritoryID = soh.TerritoryID
inner join AdventureWorks2014.Purchasing.ShipMethod as sm
on soh.ShipMethodID = sm.ShipMethodID
 
 
insert into detaljiNarudzbe
select SalesOrderID, ProductID, UnitPrice, OrderQty, UnitPriceDiscount
from AdventureWorks2014.Sales.SalesOrderDetail
 
--zadatak 3
select naziv, boja, tezina
from proizvodi
where tezina between 15 and 25 and (boja like 'Black' or boja like 'Red')
 
select*
from proizvodi
--zadatak 4
 
select dn.narudzbaID, dn.cijena*dn.kolicina*(1-dn.popust) as UkupniPrometSaPopustom, zn.nazivTeritorije
from detaljiNarudzbe as dn inner join zaglavljeNarudzba as zn
on dn.narudzbaID = zn.narudzbaID
 
select *
from detaljiNarudzbe as dn inner join zaglavljeNarudzba as zn
on dn.narudzbaID = zn.narudzbaID
 
--zadatak5
 
select zn.narudzbaID, dn.kolicina, month(zn.datumNaruzdbe) as Mjesec
from zaglavljeNarudzba as zn inner join detaljiNarudzbe as dn
on zn.narudzbaID = dn.narudzbaID
where dn.kolicina > 1 and day(zn.datumNaruzdbe) between 1 and 10
--nema 6 mjeseca
 
select*
from zaglavljeNarudzba as zn inner join detaljiNarudzbe as dn
on zn.narudzbaID = dn.narudzbaID
 
--zadatak6
 
select pp.FirstName + pp.LastName as ImePrezime, year(e.HireDate) as GodinaRadnogStaza, e.JobTitle
from AdventureWorks2014.HumanResources.Employee as e inner join AdventureWorks2014.Person.Person as pp
on e.BusinessEntityID = pp.BusinessEntityID
where e.Gender like 'F' and ( e.JobTitle like '%Marketing%' or e.JobTitle like '%Production%') and DATEDIFF(year, e.HireDate, getdate()) > 10
order by e.JobTitle asc, e.HireDate desc
 
select *
from AdventureWorks2014.HumanResources.Employee as e inner join AdventureWorks2014.Person.Person as pp
on e.BusinessEntityID = pp.BusinessEntityID
 
--zadaatak 7, prihodi
 
select o.ime+o.prezime as imeprezime, sum(rp.bruto) as ukupnaVrijednostBruto, sum(vp.iznos) as ukupnaVrijednostVanPrihodaIznosa, sum(rp.bruto) + sum(vp.iznos) as Ukupno
from prihodi.dbo.osoba as o inner join prihodi.dbo.red_prihodi as rp
on o.osobaID = rp.osobaID
inner join prihodi.dbo.vanr_prihodi as vp
on o.osobaID = vp.osobaID
inner join prihodi.dbo.grad as g
on o.gradID = g.gradID
inner join prihodi.dbo.regija as r
on g.regijaID = r.regijaID
inner join prihodi.dbo.drzava as d
on r.drzavaID = d.drzavaID
inner join prihodi.dbo.tip_vanr_prihoda as tvp
on vp.tip_vanr_prihodaID = tvp.tip_vanr_prihodaID
inner join prihodi.dbo.tip_red_prihoda as trp
on rp.tip_red_prihodaID = trp.tip_red_prihodaID
where (d.naziv like 'Latvia' or d.naziv like 'Indonesia' or d.naziv like 'China') and rp.bruto + vp.iznos > 1000 and tvp.tip_vanr_prihodaID like '1' and trp.tip_red_prihodaID like '1'
group by o.ime+o.prezime
 
 
 
--pomoc pri rjesavanju zadatka
select*
from prihodi.dbo.osoba as o inner join prihodi.dbo.red_prihodi as rp
on o.osobaID = rp.osobaID
inner join prihodi.dbo.vanr_prihodi as vp
on o.osobaID = vp.osobaID
inner join prihodi.dbo.grad as g
on o.gradID = g.gradID
inner join prihodi.dbo.regija as r
on g.regijaID = r.regijaID
inner join prihodi.dbo.drzava as d
on r.drzavaID = d.drzavaID
where (d.drzavaID like 'Latvia' or d.drzavaID like 'Indonesia' or d.drzavaID like 'China') 
 
select vp.tip_vanr_prihodaID
from prihodi.dbo.osoba as o inner join prihodi.dbo.red_prihodi as rp
on o.osobaID = rp.osobaID
inner join prihodi.dbo.vanr_prihodi as vp
on o.osobaID = vp.osobaID
 
 
select*
from prihodi.dbo.tip_red_prihoda
 
--zadatak 8
 
select proizvodID, naziv, sifraProizvoda, right(concat(sifraProizvoda,'/', proizvodID),10) as novaSifra
from proizvodi
 
--right(sifraProizvoda, (charindex ('-', sifraProizvoda)+3)), -- left(punaAdresa, (charindex ('-', punaAdresa)-1))-- ovo mogu iskoristiiti za sifru sa apl roka
 
--zadatak 9
 
go
create view zadatak9view
as
select dn.narudzbaID, zn.datumNaruzdbe, zn.imeKupca+zn.prezimeKupca as imePrezime, dn.cijena * dn.kolicina as UkupnaVrijednostNarudzbe
from detaljiNarudzbe as dn inner join zaglavljeNarudzba as zn
on dn.narudzbaID = zn.narudzbaID
go
 
--samo sortirati ostalo
 
--zadatak 10
 
go
create procedure sp_editProizvodi
as
begin
       update proizvodi
       set 
       where
end
go
 
--nemam pojma iskreno
 
select*
from proizvodi
 
 
 
--zadatak 11
go
create procedure sp_searchProizvod
(
       @naziv nvarchar (50) = null,
       @nazivKategorije nvarchar (50) = null
)
as
begin
select *
from proizvodi
where naziv = @naziv or
             nazivKategorije = @nazivKategorije
end
 
 
 
exec sp_searchProizvod @naziv = 'HL Road Frame - Black, 58'
exec sp_searchProizvod @nazivKategorije = 'Components'
 
select*
from proizvodi
 
 
 
 
create database IspitniZadatak11
go
use IspitniZadatak11
 
--1 zadatak
 
create table proizvodi
(
       proizvodID int constraint PK_proizvodi primary key not null,
       naziv nvarchar (50) not null,
       sifraProizvoda nvarchar (25) not null,
       bona nvarchar (15),
       nazivKategorije nvarchar (50) not null,
       tezina decimal (8,2)
)
 
select*
from detaljiNarudzbe
 
create table zaglavljeNarudzbe
(
       narudzbaID int constraint PK_zaglavljeNarudzbe primary key not null,
       datumNarudzbe datetime not null,
       datumIsporuke datetime not null,
       nazivTeritorije nvarchar (50) not null,
       nazivRegije nvarchar (50) not null,
       nazivIsporuke nvarchar (50) not null
)
 
create table detaljiNarudzbe
(
       narudzbaID int,
       constraint FK_detaljiNarudzbeNarudzba foreign key (narudzbaID) references zaglavljeNarudzbe (narudzbaID),
       proizvodID int,
       constraint FK_detaljiNarudzbeProizvod foreign key (proizvodID) references proizvodi (proizvodID),
       cijena money not null,
       kolicina smallint not null,
       popust money not null,
       constraint PK_proizNaru primary key (narudzbaID, proizvodID)
)
 
drop table detaljiNarudzbe
 
 
--2 zadatak
 
insert into proizvodi
select p.ProductID, p.name, p.ProductNumber, isnull(p.Color,'nije naznaceno') as Boja, pc.Name, p.Weight
from AdventureWorks2014.Production.Product as p inner join AdventureWorks2014.Production.ProductSubcategory as psc
on p.ProductSubcategoryID = psc.ProductSubcategoryID
inner join AdventureWorks2014.Production.ProductCategory as pc
on psc.ProductCategoryID = pc.ProductCategoryID
 
select*
from proizvodi
 
insert into zaglavljeNarudzbe
select soh.SalesOrderID, soh.OrderDate, soh.ShipDate, st.Name, st.[Group], sm.Name
from AdventureWorks2014.Sales.SalesOrderHeader as soh inner join AdventureWorks2014.Sales.SalesTerritory as st
on soh.TerritoryID = st.TerritoryID
inner join AdventureWorks2014.Purchasing.ShipMethod as sm
on soh.ShipMethodID = sm.ShipMethodID
 
select*
from zaglavljeNarudzbe
 
insert into detaljiNarudzbe
select soh.SalesOrderID, sod.ProductID, sod.UnitPrice, sod.OrderQty, sod.UnitPriceDiscount
from AdventureWorks2014.Sales.SalesOrderHeader as soh inner join AdventureWorks2014.Sales.SalesOrderDetail as sod
on soh.SalesOrderID = sod.SalesOrderID
 
select*
from detaljiNarudzbe
 
--3 zadatak
 
go
create view v_proizvodi
as
select p.naziv, p.sifraProizvoda,  count(dn.kolicina) as ukupnoKolicina, dn.cijena*dn.kolicina*(1-dn.popust) as cijena
from proizvodi as p inner join detaljiNarudzbe as dn
on p.proizvodID = dn.proizvodID
group by p.naziv, p.sifraProizvoda, dn.cijena*dn.kolicina*(1-dn.popust)
go
 
select *
from v_proizvodi
order by cijena desc
 
 
 
--4 zadatak
 
select d.GroupName, count(*)
from AdventureWorks2014.HumanResources.Employee as e inner join AdventureWorks2014.HumanResources.EmployeeDepartmentHistory as edh
on e.BusinessEntityID = edh.BusinessEntityID
inner join AdventureWorks2014.HumanResources.Department as d
on d.DepartmentID = edh.DepartmentID
where datediff(year, e.HireDate,getdate()) > 10
group by d.GroupName
order by count(*) desc
 
 
--pomoc pri rjesavanju
--select d.GroupName
--from AdventureWorks2014.HumanResources.Employee as e inner join AdventureWorks2014.HumanResources.EmployeeDepartmentHistory as edh
--on e.BusinessEntityID = edh.BusinessEntityID
--inner join AdventureWorks2014.HumanResources.Department as d
--on d.DepartmentID = edh.DepartmentID
--where datediff(year, e.HireDate,getdate()) > 10
 
 
--5 zadatak
 
 
select count(pod.OrderQty) as UkupnoPoMjesecu
from AdventureWorks2014.Purchasing.PurchaseOrderHeader as poh inner join AdventureWorks2014.Purchasing.PurchaseOrderDetail as pod
on poh.PurchaseOrderID = pod.PurchaseOrderID
inner join AdventureWorks2014.Purchasing.ShipMethod as sm
on poh.ShipMethodID = sm.ShipMethodID
where poh.Freight between 500 and 2500 and sm.Name like '%Cargo%'
group by month(pod.DueDate)
 
--pomoc
--select*
--from AdventureWorks2014.Purchasing.PurchaseOrderHeader as poh inner join AdventureWorks2014.Purchasing.PurchaseOrderDetail as pod
--on poh.PurchaseOrderID = pod.PurchaseOrderID
--inner join AdventureWorks2014.Purchasing.ShipMethod as sm
--on poh.ShipMethodID = sm.ShipMethodID
 
 
--6 zadatak
 
select soh.SalesPersonID, count(soh.SalesOrderID) as BrojNarucenihNarudzbiPoOsobi
from AdventureWorks2014.Sales.SalesOrderHeader as soh inner join AdventureWorks2014.Sales.SalesTerritory as st
on soh.TerritoryID = st.TerritoryID
where (year(soh.OrderDate) like 2011 or year(soh.OrderDate) like 2011) and (st.Name like 'Canada' or st.Name like 'France' or st.Name like 'United Kingdom')
group by soh.SalesPersonID
order by count(soh.SalesOrderID)
 
--pomoc
--select st.Name
--from AdventureWorks2014.Sales.SalesOrderHeader as soh inner join AdventureWorks2014.Sales.SalesTerritory as st
--on soh.TerritoryID = st.TerritoryID
 
--7 zadatak
-- moram ponoviti index
 
--8 zadatak
 
 
 
--1
/*
a) Kreirati bazu Indeks.
*/
 
create database IspitniZadatak10
go
use IspitniZadatak10
 
/*
b) U bazi indeks kreirati sljedeće tabele:
1. Narudzba koja će se sastojati od polja:
2. Dobavljac
3. Proizvod
*/
 
create table narudzba
(
       narudzbaID int constraint PK_narudzba primary key not null,
       datumNarudzbe date not null,
       datumPrijema date not null,
       datumIsporuke date not null,
       trosakPrevoza money not null,
       punaAdresa nvarchar (70) not null
)
 
 
create table dobavljac
(
       dobavljacID int constraint PK_dobavljac primary key not null,
       nazivDobavljaca nvarchar (40) not null,
       punaAdresa nvarchar (60) not null,
       drzava nvarchar (15) not null
)
 
create table proizvod
(
       narudzbaID int not null,
       dobavljacID int not null,
       proizvodID int constraint PK_proizvod primary key not null,
       nazivProizvoda nvarchar (40) not null,
       cijena int not null,
       kolicina int not null,
       popust decimal (3,2) not null,
       raspolozivost bit not null,
       constraint FK_proizvodNarudzba foreign key (narudzbaID) references narudzba (narudzbaID),
       constraint FK_proizvodDobavljac foreign key (dobavljacID) references dobavljac (dobavljacID)
)
 
 
--2
/*a) U tabelu Narudzba insertovati podatke iz tabele Orders baze Northwind pri čemu će puna adresa biti sačinjena od adrese, poštanskog broja i grada isporuke.
Između dijelova adrese umetnuti prazno mjesto. Ukoliko nije unijeta vrijednost poštanskog broja zamijeniti je sa 00000.
Uslov je da se insertuju zapisi iz 1997. i većih godina (1998, 1999...), te da postoji datum isporuke. Zapise sortirati po vrijednosti troška prevoza.
*/
insert into narudzba
select orderID, OrderDate, RequiredDate, ShippedDate, Freight, ShipAddress + ' ' + isnull(ShipPostalCode, '00000') + ShipCity as PunaAdresa
from NORTHWND.dbo.Orders
where year(OrderDate) > 1996 and ShippedDate is not null -- postoji datum isporuke
order by Freight
 
--RJ: 657
 
/*
b) U tabelu Dobavljac insertovati zapise iz tabele Suppliers. Puna adresa će se sastojati od adrese, poštanskog broja i grada dobavljača.
*/
insert into dobavljac
select SupplierID, CompanyName, Address + ' '+ PostalCode + ' ' + City, Country
from NORTHWND.dbo.Suppliers
 
--RJ: 29
 
/*
c) U tabelu Proizvod insertovati zapise iz odgovarajućih kolona tabela Order Details i Product uz uslov da vrijednost cijene bude veća od
10, te da je na proizvod odobren popust. S obzirom na zadatak 2a voditi računa o postavljanju odgovarajućeg uslova da ne bi došlo do
konflikta u odnosu na NarudzbaID - potrebno je postaviti uslov da se insertuju zapisi iz 1997. i većih godina (1998, 1999...), te da postoji datum isporuke.
*/
 
insert into proizvod
select od.OrderID, p.SupplierID, p.ProductID, p.ProductName, p.UnitPrice, od.Quantity, od.Discount, p.Discontinued
from NORTHWND.dbo.[Order Details] as od inner join NORTHWND.dbo.Products as p
on od.ProductID = p.ProductID
inner join NORTHWND.dbo.Orders as o
on od.OrderID = o.OrderID
where od.Quantity > 10 and od.Discount > 0 and year (o.OrderDate) > 1996 and o.ShippedDate is not null
 
insert into proizvod
select od.OrderID, p.SupplierID, p.ProductID, p.ProductName, od.UnitPrice, od.Quantity, od.Discount, p.Discontinued
from NORTHWND.dbo.[Order Details] as od inner join NORTHWND.dbo.Products as p
on od.ProductID = p.ProductID
inner join NORTHWND.dbo.Orders as o
       on od.OrderID = o.OrderID
where od.Quantity > 10 and od.Discount > 0 and year (o.OrderDate) > 1996 and o.ShippedDate is not null
 
--RJ: 521
 
--3
/*
Iz tabele Proizvod dati pregled ukupnog broja ostvarenih narudzbi po dobavljaču i proizvodu.
*/
SELECT DobavljacID, NazivProizvoda, COUNT (NarudzbaID) AS UkupnoNarudzbi
FROM Proizvod
GROUP BY DobavljacID, NazivProizvoda
ORDER BY 1
--RJ: 76
 
--4
/*
Iz tabele Proizvod dati pregled ukupnog prometa ostvarenog po dobavljaču i narudžbi uz uslov da se prikažu samo oni zapisi kod kojih je vrijednost
prometa manja od 1000 i odobreni popust veći od 10%. Ukupni promet izračunati uz uzimanje u obzir i odobrenog popusta.
*/
SELECT DobavljacID, NarudzbaID, Popust, SUM (Cijena * Kolicina * (1 - Popust)) AS Promet
FROM Proizvod
WHERE Popust > 0.10
GROUP BY DobavljacID, NarudzbaID, Popust
HAVING SUM (Cijena * Kolicina * (1 - Popust)) < 1000
ORDER BY 1
--RJ: 242
 
--5
/*
Iz tabele Narudzba dati pregled svih narudzbi kod kojih je broj dana od datuma narudžbe do datuma isporuke manji od 10.
Pregled će se sastojati od ID narudžbe, broja dana razlike i kalendarske godine, pri čemu je razdvojiti pregled po godinama
(1997 i 1998 - prvo sve 1997, zatim sve 1998). Sortirati po broju dana isporuke u opadajućem redoslijedu.
*/
SELECT NarudzbaID, DATEDIFF (DAY, DatumNarudzbe, DatumIsporuke) AS BrDanaIsporuke, YEAR (DatumIsporuke) AS Godina
FROM Narudzba
WHERE DATEDIFF (DAY, DatumNarudzbe, DatumIsporuke) < 10
ORDER BY 3, 2
--RJ: 495
 
SELECT NarudzbaID, DATEDIFF (DAY, DatumNarudzbe, DatumIsporuke) AS BrDanaIsporuke, '1997' AS Godina
FROM Narudzba
WHERE YEAR (DatumIsporuke) = 1997 AND DATEDIFF (DAY, DatumNarudzbe, DatumIsporuke) < 10
UNION
SELECT NarudzbaID, DATEDIFF (DAY, DatumNarudzbe, DatumIsporuke) AS BrDanaIsporuke, '1998' AS Godina
FROM Narudzba
WHERE YEAR (DatumIsporuke) = 1998 AND DATEDIFF (DAY, DatumNarudzbe, DatumIsporuke) < 10
ORDER BY 2 DESC
 
--6
/*
Iz tabele Narudzba dati pregled svih narudzbi kod kojih je isporuka izvršena u istom mjesecu.
Pregled će se sastojati od ID narudžbe, broja dana razlike, mjeseca narudžbe, mjeseca isporuke i kalendarske godine, pri čemu je potrebno razdvojiti pregled po godinama
(1997 i 1998 - prvo sve 1997, zatim sve 1998). Sortirati po broju dana isporuke u opadajućem redoslijedu.
*/
SELECT NarudzbaID, DATEDIFF (DAY, DatumNarudzbe, DatumIsporuke) AS BrDanaIsporuke, MONTH (DatumIsporuke) AS MjesecNarudzbe, MONTH (DatumNarudzbe) AS MjesecIsporuke, YEAR (DatumIsporuke) AS Godina
FROM Narudzba
WHERE MONTH (DatumIsporuke) = MONTH (DatumNarudzbe)
ORDER BY 5, 2
--RJ: 464
 
--7
/*Iz tabele Narudzba dati pregled svih narudžbi koje su isporučene u Graz ili Köln.
Pregled će se sastojati od ID narudžbe i naziva grada. Sortirati po nazivu grada.
*/
SELECT NarudzbaID, RIGHT (PunaAdresa, 4) AS NazivGrada
FROM Narudzba
WHERE PunaAdresa LIKE '%Graz%' OR PunaAdresa LIKE '%Köln%'
ORDER BY 2
--RJ: 31
 
--8
/*
Iz tabela Narudzba, Dobavljac i Proizvod kreirati pregled koji će se sastojati od polja NarudzbaID, GodNarudzbe kao godinu iz polja DatumNarudzbe,
NazivProizvoda, NazivDobavljaca, Drzava, TrosakPrevoza, Ukupno kao ukupna vrijednost narudžbe koja će se računati uz uzimanje u obzir i popusta i postotak
koji će davati informaciju o vrijednosti postotka troška prevoza u odnosu na ukupnu vrijenost narudžbe.
Uslov je da postotak bude veći od 30% i da je ukupna vrijednost veća od troška prevoza. Sortirati po vrijednosti postotka u opadajućem redoslijedu.
*/
SELECT N.NarudzbaID, YEAR (N.DatumNarudzbe) AS GodNarudzbe, P.NazivProizvoda, D.NazivDobavljaca, D.Drzava,
             N.TrosakPrevoza, P.Cijena * P.Kolicina * (1 - P.Popust) AS Ukupno, LEFT (ROUND (N.TrosakPrevoza / (P.Cijena * P.Kolicina * (1 - P.Popust)) * 100, 2),5) AS Postotak
FROM   Narudzba AS N INNER JOIN Proizvod AS P
ON           N.NarudzbaID = P.NarudzbaID
             INNER JOIN Dobavljac AS D
             ON P.DobavljacID = D.DobavljacID
WHERE  N.TrosakPrevoza > 0.3 * (P.Cijena * P.Kolicina * (1 - P.Popust)) AND N.TrosakPrevoza < (P.Cijena * P.Kolicina * (1 - P.Popust))
ORDER BY 8 DESC
--RJ: 104
 
--9
/*
Iz tabela Narudzba, Dobavljac i Proizvod kreirati pogled koji će sadržavati ID narudžbe, dan iz datuma prijema, raspoloživost, naziv grada iz pune adrese naručitelja,
i državu dobavljača. Uslov je da je datum prijema u 2. ili 3. dekadi mjeseca i da grad naručitelja Bergamo.
*/
USE Indeks
GO
CREATE VIEW view1
AS
SELECT TOP 100 PERCENT N.NarudzbaID, DAY (N.DatumPrijema) AS DanPrijema, P.Raspolozivost, RIGHT (N.PunaAdresa, 7) AS NazivGrada, D.Drzava
FROM   Narudzba AS N INNER JOIN Proizvod AS P
ON           N.NarudzbaID = P.NarudzbaID
             INNER JOIN Dobavljac AS D
             ON P.DobavljacID = D.DobavljacID
WHERE  DAY (N.DatumPrijema) BETWEEN 11 AND 31 AND RIGHT (N.PunaAdresa, 7) = 'Bergamo'
ORDER BY 2
 
SELECT * FROM view1
--RJ: 5
 
--10
/*
Iz tabela Proizvod i Dobavljac kreirati proceduru proc1 koja će sadržavati ID i naziv dobavljača i ukupan broj proizvoda
koji je realizirao dobavljač. Pokrenuti proceduru za vrijednost ukupno realiziranog broja proizvoda 22 i 14.
*/
USE Indeks
GO
CREATE PROCEDURE proc1
(
       @DobavljacID int = NULL,
       @NazivDobavljaca nvarchar(40) = NULL,
       @UkBroj int = NULL
)
AS
BEGIN
SELECT P.DobavljacID, D.NazivDobavljaca, COUNT (P.ProizvodID) AS Broj
FROM   Proizvod AS P INNER JOIN Dobavljac AS D
ON           P.DobavljacID = D.DobavljacID
--WHERE      P.DobavljacID = @DobavljacID OR
--           NazivDobavljaca = @NazivDobavljaca OR
--           P.ProizvodID >= 0
GROUP BY P.DobavljacID, D.NazivDobavljaca
HAVING COUNT (P.ProizvodID) = @UkBroj
END
 
exec proc1 @UkBroj = 14
 
exec proc1 @UkBroj = 22
 
 
 
 
--1
/*
a) Koristeći izričito SQL kod kreirati bazu podataka pod vlastitim brojem indeksa.
*/
 
create database IspitniZadatak9
go
use IspitniZadatak9
 
 
 
--b) Kreiranje tabela. Voditi računa o međusobnom odnosu između tabela. Definirati odgovarajuće spoljne ključeve pomoću kojih će se tabele međusobno povezati.
/*
I. Kreirati tabelu narudzba sljedeće strukture:
       - narudzbaID cjelobrojna varijabla, primarni ključ
       - kupac, 40 unicode karaktera
       - puna_adresa, 80 unicode karaktera
       - datum_narudzbe, datumska varijabla
       - cijena_prevoza, novčana varijabla
*/
create table narudzba
(
       narudzbaID int constraint PK_narudzba primary key not null,
       kupac nvarchar (40),
       punaAdresa nvarchar (80),
       datumNarudzbe date,
       cijenaPrevoza money
)
 
/*
II. Kreirati tabelu proizvod sljedeće strukture:
       - proizvodID, , cjelobrojna varijabla, primarni ključ
       - naziv_proizvoda, 40 unicode karaktera
       - naziv_dobavljaca, 40 unicode karaktera
       - stanje_na_sklad, cjelobrojna varijabla
       - narucena_kol, cjelobrojna varijabla
 
*/
create table proizvod
(
       proizvodID int constraint PK_proizvod primary key not null,
       nazivProizvoda nvarchar (40),
       nazivDobavljaca nvarchar (40),
       stanjeNaSkladistu int,
       narucenaKolicina int
)
 
/*
II. Kreirati tabelu detalji_narudzbe sljedeće strukture:
       - narudzbaID, cjelobrojna varijabla
       - proizvodID, cjelobrojna varijabla
       - cijena_proizvoda, novčana varijabla
       - kolicina, cjelobrojna varijabla
       - popust, decimalna varijabla
*/
 
create table detaljiNarudzbe
(
       narudzbaID int,
       proizvodID  int,
       cijenaProizvoda money,
       kolicina int,
       popust decimal(8,2),
       constraint PK_detaljiNarudzbe primary key (narudzbaID, proizvodID),
       constraint FK_detaljiProizvod foreign key (proizvodID) references proizvod (proizvodID),
       constraint FK_detaljiNarudzba foreign key (narudzbaID) references narudzba (narudzbaID)
)
 
drop table detaljiNarudzbe
 
--10 bodova
 
---------------------------------------------------------------------------
--2. Import podataka
/*
Koristeći bazu Northwind u vlastiti bazu prebaciti podatke prema zadatim pravilima.
a) U tabelu narudzba iz tabela Customers i Orders prebaciti:
       - OrderID -> narudzbaID
       - CompanyName -> kupac
       - puna_adresa - spojiti podatke iz kolona Address, PostalCode i City pri čemu je potrebno podatke razdvojiti crticom
       - OrderDate -> datum_narudzbe
       - Freight -> cijena_prevoza
 
*/
insert into narudzba
select o.OrderID, c.CompanyName, c.Address + '-' + c.PostalCode + '-' + c.City as PunaAdresa, o.OrderDate, o.Freight
from NORTHWND.dbo.Customers as c inner join NORTHWND.dbo.Orders as o
on c.CustomerID = o.CustomerID
 
select*
from narudzba
--830
 
 
/*
b) U tabelu proizvod iz tabela Products i Suppliers prebaciti:
       - ProductID -> proizvodID
       - ProductName -> naziv_proizvoda
       - CompanyName -> naziv_dobavljaca
       - UnitsInStock -> stanje_na_sklad
       - UnitsOnOrder -> narucena_kol
*/
insert into proizvod
select p.ProductID, p.ProductName, s.CompanyName, p.UnitsInStock, p.UnitsOnOrder
from NORTHWND.dbo.Products as p inner join NORTHWND.dbo.Suppliers as s
on p.SupplierID = s.SupplierID
 
select*
from proizvod
--77
 
/*
c) U tabelu detalji_narudzbe iz tabela Order Details i Products prebaciti:
       - OrderID -> narudzbaID
       - ProductID -> proizvodID
       - UnitPrice -> cijena_proizvoda
       - Quantity -> kolicina
       - Discount -> popust
*/
 
insert into detaljiNarudzbe
select od.OrderID, p.ProductID, p.UnitPrice, od.Quantity, od.Discount
from NORTHWND.dbo.[Order Details] as od inner join NORTHWND.dbo.Products as p
on od.ProductID = p.ProductID
 
--2155
--10 bodova
 
---------------------------------------------------------------------------
/*
3.
a) Koristeći tabele narudzba i detalji_narudzbe kreirati pogled view_kupac_kol sljedeće strukture:
       -      narudzbaID
       -      kupac
       -      datum_narudzbe
       -      kolicina
uz uslov da je narudzba izvršena najranije 22 godine u odnosu na aktuelni datum.
*/
 
go
create view view_kupac_kol
as
select n.narudzbaID, n.kupac, n.datumNarudzbe, dn.kolicina
from narudzba as n inner join detaljiNarudzbe as dn
on n.narudzbaID = dn.narudzbaID
where datediff(year, n.datumNarudzbe, getdate()) < 25 --zapamti
go
 
--691
select * from view_kupac_kol
 
--12 bodova
 
---------------------------------------------------------------------------
/*
4.
Kreirati proceduru koja će imati istu strukturu kao tabela detalji_narudzba. Voditi računa o tipovima varijabli u proceduri.
Proceduru kreirati tako da je prilikom izvršavanja moguće unijeti bilo koji broj parametara (možemo ostaviti bilo koji parametar bez unijete vrijednosti).
Uslov je da preuzmu samo oni zapisi u kojima nije odobren popust. Pokrenuti porceduru za sljedeće vrijednosti parametara:
1. količina = 10
2. ID narudžbe = 10255
*/
go
create procedure procedureDetaljiNarudzba
(
       @narudzbaID int = null,
       @proizvodID int = null,
       @cijenaProizvoda money = null,
       @kolicina int = null,
       @popust decimal(8,2) = null
)
as
begin
       select narudzbaID, proizvodID, cijenaProizvoda, kolicina, popust
       from detaljiNarudzbe
where (
                    @narudzbaID = narudzbaID or
                    @proizvodID = proizvodID or
                    @cijenaProizvoda = cijenaProizvoda or
                    @kolicina = kolicina or
                    @popust = popust ) and popust = 0
end
go
 
drop procedure procedureDetaljiNarudzba
 
exec procedureDetaljiNarudzba @kolicina = 10
exec procedureDetaljiNarudzba @narudzbaID = 10255
 
--130
--4
 
--8 bodova
 
---------------------------------------------------------------------------
/*
5. Kreirati pogled kojim će se dati prikaz naručenih količina prema mjesecu narudžbe.
Uslov je da je narudžba izvršena u 1996. godini. Pogled treba sadržavati ID narudžbe, redni broj mjeseca i količinu.
*/
go
create view zadatak5
as
select dn.narudzbaID, month(n.datumNarudzbe) as mjesec, dn.kolicina
from detaljiNarudzbe as dn inner join narudzba as n
on dn.narudzbaID = n.narudzbaID
where year(n.datumNarudzbe) = 1996
go
 
--405
 
select * from zadatak5
 
--7 bodova
 
---------------------------------------------------------------------------
/*
6.
a) Kreirati pogled koji će se sastojati od naziva dobavljača, naziva proizvoda,
ukupne cijene koja je proizvod jedinične cijene i količine, ukupne cijene s popustom koja predstavlja ukupnu cijenu sa obračunatim popustom i visinu popusta izraženu kao broj. Obratiti pažnju na
način računanja ukupne cijene s popustom. Uslov da je u pogledu budu samo oni zapisi kod kojih je odobren popust.
b) Koriseći pogled kreiran pod a) prikazati minimalnu, maksimalnu i srednju vrijednost visine popusta,
te razliku između minimalne i maksimalne vrijednosti. Srednja vrijednsot predstavlja srednju vrijednost novčanih vrijednosti, pa njen prikaz treba s tim uskladiti.
*/
--a
go
create view zadatak6
as
select p.nazivDobavljaca, p.nazivProizvoda, dn.cijenaProizvoda * dn.kolicina as ukupnaCijena, dn.cijenaProizvoda * dn.kolicina * (1 - dn.popust) as UkupnaCijenaSaPopustom,
             dn.cijenaProizvoda * dn.kolicina * dn.popust as visinaPopusta
from proizvod as p inner join detaljiNarudzbe as dn
on p.proizvodID = dn.proizvodID
where dn.popust > 0
go
 
select * from zadatak6
 
--838
 
--b
 
select min(visinaPopusta) as minimalno, max(visinaPopusta) as maksimalno, round(avg(visinaPopusta),2) as srednjaVrijednost, max(visinaPopusta) - min(visinaPopusta) as razlikaIzmedjuMaxiMin
from zadatak6
 
 
--8 bodova
 
---------------------------------------------------------------------------
/*
7.
a) Kreirati pogled koji će prikazati sumirane cijene proizvoda po nazivu proizvoda i popustu.
b) Koristeći pogled kreiran pod a) prikazati maksimalne vrijednosti suma po visinama popusta. Sortirati po vrijednostima popusta u rastućem redoslijedu.
c) Koristeći pogled kreiran pod a) prikazati srednje vrijednosti suma po nazivima proizvoda. Sortirati po vrijednostima suma u opadajućem redoslijedu.
--Voditi računa da je cijena proizvoda novčana varijabla, te prema tome formatirati srednje vrijednosti.
*/
--
--a
go
create view sumirano
as
select p.nazivProizvoda, dn.popust, sum(dn.cijenaProizvoda) as ukupno
from detaljiNarudzbe as dn inner join proizvod as p
on dn.proizvodID = p.proizvodID
group by p.nazivProizvoda, dn.popust
go
 
select *
from sumirano
 
--b
 
select popust, max(ukupno)
from sumirano
group by popust
 
--407
--11
/*
0.00   3530.90
0.01   15.00
0.02   25.00
0.03   33.25
0.04   81.00
0.05   1212.10
0.06   34.00
0.10   527.00
0.15   297.00
0.20   421.60
0.25   742.74
*/
--c
select nazivProizvoda, round(avg(ukupno),2)
from sumirano
group by nazivProizvoda
order by 2 desc
--77
--15 bodova
 
 
 
---------------------------------------------------------------------------
/*
8. Dati pregled kupovine po rednom broju dana u mjesecu. Upit treba da sadrži naziv proizvoda,
redni broj dana u mjesecu i ukupan broj prodaje proizvoda na taj redni broj dana. Npr, proizvod_1 se 1 dana u mjesecu prodao 3 puta. Uslova je da se dadne prikaz za prvu polovicu mjeseca.
*/
select p.nazivProizvoda, day(n.datumNarudzbe) as brojDana, count(day(n.datumNarudzbe))
from proizvod as p inner join detaljiNarudzbe as dn
on p.proizvodID = dn.proizvodID
inner join narudzba as n
on n.narudzbaID = dn.narudzbaID
where day(n.datumNarudzbe) between 1 and 15
group by p.nazivProizvoda, day(n.datumNarudzbe)
 
--646
--15 bodova
 
 
---------------------------------------------------------------------------
/*
9. Kreirati pregled kojim će se na osnovu podataka iz kolone puna_adresa prebrojati koliko puta se neka adresa pojavljuje.
Upit treba da sadrži adresu i broj pojavljivanja adrese. Npr. adresa 1 se pojavljuje 10 puta. Sortirati prema broju pojavljivanja u opadajućem redoslijedu.
*/
 
select  left(punaAdresa, (charindex ('-', punaAdresa)-1)) as dioAdrese, count( left(punaAdresa, (charindex ('-', punaAdresa)-1))) as prebrojano
from narudzba
group by left(punaAdresa, (charindex ('-', punaAdresa)-1))
order by 2 desc
 
-- left(punaAdresa, (charindex ('-', punaAdresa)-1))-- ovo mogu iskoristiiti za sifru sa apl roka
 
 
 
--89
--15 bodova
 
 
 
------------------------------------------------
--1
/*
a) Kreirati bazu podataka pod vlastitim brojem indeksa.
*/
create database IspitniZadatak8
go
use IspitniZadatak8
 
 
--------------------------
 
/*Prilikom kreiranja tabela voditi računa o međusobnom odnosu između tabela.
b) Kreirati tabelu radnik koja će imati sljedeću strukturu:
       - radnikID, cjelobrojna varijabla, primarni ključ
       - drzavaID, 15 unicode karaktera
       - loginID, 256 unicode karaktera
       - sati_god_odmora, cjelobrojna varijabla
       - sati_bolovanja, cjelobrojna varijabla
*/
create table radnik
(
       radnikID int constraint PK_radnik primary key not null,
       drzavaID nvarchar (15),
       loginID nvarchar (256),
       satiGodisnjegOdmora int,
       satiBolovanja int
)
 
/*
c) Kreirati tabelu kupovina koja će imati sljedeću strukturu:
       - kupovinaID, cjelobrojna varijabla, primarni ključ
       - status, cjelobrojna varijabla
       - radnikID, cjelobrojna varijabla
       - br_racuna, 15 unicode karaktera
       - naziv_dobavljaca, 50 unicode karaktera
       - kred_rejting, cjelobrojna varijabla
*/
create table kupovina
(
       kupovinaID int constraint PK_kupovina primary key not null,
       status int,
       radnikID int,
       constraint FK_kupovina foreign key (radnikID) references radnik (radnikID),
       brRacuna nvarchar(15),
       nazivDobavljaca nvarchar (50),
       kredRejting int
)
 
/*
c) Kreirati tabelu prodaja koja će imati sljedeću strukturu:
       - prodavacID, cjelobrojna varijabla, primarni ključ
       - prod_kvota, novčana varijabla
       - bonus, novčana varijabla
       - proslogod_prodaja, novčana varijabla
       - naziv_terit, 50 unicode karaktera
*/
create table prodaja
(
       prodavacID int constraint PK_prodaja primary key not null,
       prodKvota money,
       bonus money,
       proslogodisnjaProdaja money,
       nazivteritorije nvarchar (50),
       constraint FK_ProdajaRadnik foreign key (prodavacID) references radnik (radnikID)
)
 
--10 bodova
 
 
--------------------------------------------
--2. Import podataka
/*
a) Iz tabele humanresources.employee baze AdventureWorks2014 u tabelu radnik importovati podatke po sljedećem pravilu:
       - BusinessEntityID -> radnikID
       - NationalIDNumber -> drzavaID
       - LoginID -> loginID
       - VacationHours -> sati_god_odmora
       - SickLeaveHours -> sati_bolovanja
*/
 
insert into radnik
select BusinessEntityID, NationalIDNumber, LoginID, VacationHours, SickLeaveHours
from AdventureWorks2014.HumanResources.Employee
 
--rj: 290
 
/*
b) Iz tabela purchasing.purchaseorderheader i purchasing.vendor baze AdventureWorks2014 u tabelu kupovina importovati podatke po sljedećem pravilu:
       - PurchaseOrderID -> kupovinaID
       - Status -> status
       - EmployeeID -> radnikID
       - AccountNumber -> br_racuna
       - Name -> naziv_dobavljaca
       - CreditRating -> kred_rejting
*/
insert into kupovina
select poh.PurchaseOrderID, poh.status, poh.EmployeeID, v.AccountNumber, v.Name, v.CreditRating
from AdventureWorks2014.Purchasing.PurchaseOrderHeader as poh inner join AdventureWorks2014.Purchasing.Vendor as v
on poh.VendorID = v.BusinessEntityID
 
--rj: 4012
 
/*
c) Iz tabela sales.salesperson i sales.salesterritory baze AdventureWorks2014 u tabelu prodaja importovati podatke po sljedećem pravilu:
       - BusinessEntityID -> prodavacID
       - SalesQuota -> prod_kvota
       - Bonus -> bonus
       - SalesLastYear -> proslogod_prodaja
       - Name -> naziv_terit
       - CreditRating -> kred_rejting // nema imena
*/
insert into prodaja
select sp.BusinessEntityID, sp.SalesQuota, sp.Bonus, sp.SalesLastYear, st.Name
from AdventureWorks2014.Sales.SalesPerson as sp inner join AdventureWorks2014.Sales.SalesTerritory as st
on sp.TerritoryID = st.TerritoryID
 
--rj: 14
--10 bodova
 
------------------------------------------
/*
3.
a) Iz tabela radnik i kupovina kreirati pogled view_bicikl koji će imati sljedeću strukturu:
       - kupovinaID,
       - naziv dobavljača,
       - kreditni rejting
Uslov je da u pogledu budu samo oni zapisi u kojima se prema nazivu dobavljača zaključuje da se bavi prodajom bicikla.
Obavezno napisati kod kojim će se dati prikaz sadržaja pogleda sortiran po ID kupovine.
b) Koristeći prethodno kreirani pogled prebrojati broj obavljenih kupovina prema kreditnom rejtingu. Pregled treba da sadrži oznaku kreditnog rejtinga i ukupan broj obavljenih kupovina.*/
--a
go
create view v_biciklo
as
select k.kupovinaID, k.nazivDobavljaca, k.kredRejting
from radnik as r inner join kupovina as k
on r.radnikID = k.radnikID
where k.nazivDobavljaca like '%Bi%'
go
 
select * from v_biciklo
order by kupovinaID
 
--rj: 1474
 
--b
select kredRejting, count(kredRejting) as UkupanBroj
from v_biciklo
group by kredRejting
order by 1
 
--rj: 3
/*
1      1273
3      151
5      50
*/
--10 bodova
-----------------------------------------------
/*
4.
Kreirati proceduru koja će imati istu strukturu kao pogled kreiran u prethodnom zadatku.
Voditi računa o tipovima varijabli u proceduri.
Proceduru kreirati tako da je prilikom izvršavanja moguće unijeti bilo koji broj parametara (možemo ostaviti bilo koji parametar bez unijete vrijednosti).
Uslov je da se procedurom obuhvate oni zapisi iz pogleda kod kojih je kreditni rejting veći od 1, te da se izvrši sortiranje po kreditnom rejtingu. Pokrenuti proceduru za kreditni rejting 3 i 5.*/
 
go
create procedure zadatak4
(
       @kupovinaID int = null,
       @nazivDobavljaca nvarchar (50) = null,
       @kredRejting int = null
)
as
begin
select kupovinaID, nazivDobavljaca, kredRejting
from v_biciklo
where @kredRejting > 1 and
       (
             @kupovinaID = kupovinaID or
             @nazivDobavljaca = nazivDobavljaca or
             @kredRejting = kredRejting
       )
order by kredRejting
end
 
exec zadatak4 @kredRejting = 3
exec zadatak4 @kredRejting = 5
 
--rj: 151
 
--rj: 50
--10 bodova
 
 
 
 
-----------------------------------------------
/*
5.
a) U tabeli radnik kreirati neklasterirani indeks nad kolonom drzavaID. Uključiti kolone sati_god_odmora i sati_bolovanja.
b) Izvršiti testiranje kreiranog indeksa.
c) Obrisati prethodno kreirani indeks.
*/
create nonclustered index IX_ukupnoSati on radnik
(
       drzavaID asc
)
include (satiGodisnjegOdmora, satiBolovanja)
 
 
select*
from radnik
where drzavaID < 50000000 and satiGodisnjegOdmora > 80 and satiBolovanja > 40
 
drop index IX_ukupnoSati on radnik
--rj: 3
/*
53     9659517       adventure-works\diane0     87     63
210    20244403      adventure-works\belinda0   83     61
230    28414965      adventure-works\stuart1    88     64
*/
 
--5 bodova
-----------------------------------------------
/*
6.
a) Dati pregled kojim će se prebrojati zapisi u kojima je broj sati bolovanja veći od broja sati godišnjeg odmora,
uz uslov da je ta razlika veća od 10. Pregled treba da sadrži razliku sati i ukupan broj. Sortirati prema razlici sati.
b) Dati pregled svih zapisa kojim će se prebrojati broj država po prodajnim kvotama.
*/
--a
 
select  (satiBolovanja - satiGodisnjegOdmora) as razlikaSati, count(satiBolovanja - satiGodisnjegOdmora) as UkupanBroj
from radnik
where (satiBolovanja - satiGodisnjegOdmora) > 10
group by (satiBolovanja - satiGodisnjegOdmora)
order by (satiBolovanja - satiGodisnjegOdmora)
 
select *
from radnik
 
--rj: 12
 
--b
select count(r.drzavaID), p.prodKvota
from radnik as r inner join prodaja as p
on r.radnikID = p.prodavacID
group by p.prodKvota
 
select*
from radnik as r inner join prodaja as p
on r.radnikID = p.prodavacID
 
--rj: 2
/*
250000.00    11
300000.00    3
*/
--10 bodova
 
-------------------------------------------
/*
7.
a) Kreirati pogled dobavljaci_radnici koji će se sastojati od kolona naziv dobavljača i ukupan broj radnika.
Ukupan broj je podatak kojim se prebrojava broj radnika s kojima je dobavljač poslovao. Obavezno napisati kod kojim će se izvršiti pregled sadržaja pogleda sortiran po ukupnom broju.
b) Kreirati pregled kojim će se izvršiti prebrojavanje po ukupnom broju prebrojanih radnika.
c) Kreirati proceduru kojom će se iz pogleda kreiranog pod a) preuzeti zapisi u kojima je ukupan broj manji od 50. Voditi računa o tipovima podataka.
Proceduru kreirati tako da je prilikom izvršavanja moguće unijeti bilo koji broj parametara (možemo ostaviti bilo koji parametar bez unijete vrijednosti). Pokrenuti proceduru za vrijednosti ukupan broj = 1, 2 i 50.
*/
--a
go
create view dobavljaci_radnici
as
select nazivDobavljaca, count(radnikID) as UkupanBrojRadnika
from kupovina
group by nazivDobavljaca
go
 
 
select *
from dobavljaci_radnici
 
--rj: 86
 
--b
select UkupanBrojRadnika, count(UkupanBrojRadnika)
from dobavljaci_radnici
group by UkupanBrojRadnika
order by UkupanBrojRadnika
 
--5
/*
1      4
2      2
4      1
50     29
51     50
*/
 
--c
 
--c) Kreirati proceduru kojom će se iz pogleda kreiranog pod a) preuzeti zapisi u kojima je ukupan broj manji od 50. Voditi računa o tipovima podataka.
--Proceduru kreirati tako da je prilikom izvršavanja moguće unijeti bilo koji broj parametara (možemo ostaviti bilo koji parametar bez unijete vrijednosti).
--Pokrenuti proceduru za vrijednosti ukupan broj = 1, 2 i 50.
go
create procedure dobavljaci
(
       @nazivDobavljaca nvarchar (50) = null,
       @UkupanBrojRadnika int = null
)
as
begin
select nazivDobavljaca, UkupanBrojRadnika
from dobavljaci_radnici
where UkupanBrojRadnika < 51 and
       (
             @nazivDobavljaca = nazivDobavljaca or
             @UkupanBrojRadnika = UkupanBrojRadnika
       )
end
 
drop procedure dobavljaci
exec dobavljaci @UkupanBrojRadnika = 1
exec dobavljaci @UkupanBrojRadnika = 2
exec dobavljaci @UkupanBrojRadnika = 50
 
 
 
--rj: 1
--15 bodova
 
---------------------------------------
/*
8.
a) Iz tabela kupovina i radnik kreirati pogled view_sifra_transakc koja će se sastojati od sljedećih kolona:
       - naziv dobavljača,
       - ID države (odnosi se na radnika),
       - sifra_transakc
Podaci u koloni sifra_transakc će se formirati spajanjem karaktera koji se dobiju kada se iz kolone loginID tabele radnik ukloni dio 'adventure-works\' i posljednja 4 karaktera iz kolone br_racuna tabele kupovina, između kojih je potrebno umetnuti donju crtu (_).
Obavezno napisati kod za pregled sadržaja pogleda.
b) Iz prethodno kreiranog pogleda prebrojati sve zapise u kojima su i drzavaID i šifra transkacije parni brojevi .*/
*/
 
create view view_sifra_transakc
as
select k.nazivDobavljaca, r.drzavaID,   SUBSTRING(r.loginID, 17, 15) + +'-' + right(k.brRacuna,4) as SifraTRansakcije, r.loginID
from kupovina as k inner join radnik as r
on k.radnikID = r.radnikID
 
select *
from view_sifra_transakc
order by 1
 
--4012
select count (*)
from view_sifra_transakc
where right (drzavaID,1) in (0,2,4,6,8) and right (SifraTRansakcije,1) in (0,2,4,6,8)
 
--rj: count = 93 
--10 bodova
 
 
--------------------------------------------
/*
9.
a) U tabeli kupovina broj računa se sastoji od slovnog i brojčanog dijela. Kreirati pogled view_slovni kojim će se izvršiti prebrojavanje prema slovnom dijelu broja računa.
b) Koristeći prethodno kreirani pogled izvršiti prebrojavanje prema početnom slovu
c) Koristeći pogled kreiran pod a) izvršiti prebrojavanje ukupnog broj prebrojanih slovnih dijelova koji nisu jednocifreni.
*/
create view view_slovni
as
select left (brRacuna,LEN (brRacuna)-4) as slovni, COUNT (left (brRacuna,LEN (brRacuna)-4)) as count_slovni
from kupovina
group by left (brRacuna,LEN (brRacuna)-4)
--80
 
select LEFT (slovni,1), COUNT (LEFT (slovni,1))
from view_slovni
group by LEFT (slovni,1)
--18
 
select count_slovni, COUNT (count_slovni)
from view_slovni
where count_slovni > 9
group by count_slovni
--4
/*
50     29
51     41
102    3
154    1
*/
--15 bodova
 
 
 
--------------------------------------------
/*
10.
Kreirati upit kojim će dati prikaz kolone loginID nakon što se iz nje izbaci sve osim karaktera koji slijede nakon znaka \,
uz uslov da se prikažu samo oni zapisi u kojima je dužina novonastalog stringa kraća od 6 znakova.
*/
select substring (loginID,17,15)
from radnik
where LEN (substring (loginID,17,15)) < 6
--82
--5 bodova
 
--1.
/*
a) Kreirati bazu podataka pod vlastitim brojem indeksa.
*/
 
create database IspitniZadatak7
go
use IspitniZadatak7
 
 
 
--b) Kreiranje tabela. Prilikom kreiranja tabela voditi računa o spojnim poljima između tabela.
/*
I. Kreirati tabelu TipProizv koja se sastoji od polja:
       - potkatID - cjelobrojna varijabla, primarni ključ
       - katID - cjelobrojna varijabla, obavezan unos
       - kat_naziv - 50 unicode karaktera, obavezan unos
       - potkat_naziv - 50 unicode karaktera, obavezan unos
*/
create table TipProizvodnje
(
       potkatID int constraint PK_tipProizvodnje primary key not null,
       katID int not null,
       katNaziv nvarchar (50) not null,
       potkatNaziv nvarchar (50)  not null
)
 
/*
II. Kreirati tabelu proizvod koja se sastoji od polja:
       - proizvodID - cjelobrojna varijabla, primarni ključ
       - naziv - 50 UNICODE karaktera, obavezan unos
       - boja - 15 UNICODE karaktera
       - tezina - decimalni broj  decimal(8, 2),
       - dana_za_proiz - cjelobrojna varijabla, obavezan unos
       - klasa - 2 unicode karaktera
       - potkat_ID cjelobrojna varijabla, obavezan unos
*/
create table proizvod
(
       proizvodID int constraint PK_proizvod primary key not null,
       naziv nvarchar(50) not null,
       boja nvarchar (15),
       tezina decimal (8,2),
       danaZaProizvodnju  int not null,
       klasa nvarchar (2),
       potkatID int not null,
       constraint FK_potkat foreign key (potkatID) references TipProizvodnje (potkatID)
)
 
/*
III. Kreirati tabelu nalog koja se sastoji od polja:
       - nalogID - cjelobrojna varijabla, primarni ključ
       - proizvodID - cjelobrojna varijabla, obavezan unos
       - naruc_kol - cjelobrojna varijabla, obavezan unos
       - stanje_kol - cjelobrojna varijabla, obavezan unos
       - dtm_zaduz - datumska varijabla samo za unos datuma (bez vremena)
       - oznaka_greske - 50 unicode karaktera, obavezan unos
*/
create table nalog
(
       nalogID int constraint PK_nalog primary key not null,
       proizvodID int not null,
       constraint FK_proizvod foreign key (nalogID) references proizvod (proizvodID),
       narucenaKolicina int not null,
       stanjeKolicina int not null,
       datumZaduzivanja date,
       oznakaGreske nvarchar (50) not null
)
 
create table nalozi
(
       nalogID int,
       proizvodID int not null,
       constraint PK_proizvoda primary key (proizvodID, nalogID),
       narucenaKolicina int not null,
       stanjeKolicine int not null,
       datumZaduzivanja date,
       oznakaGreske nvarchar (50) not null
)
 
drop table nalog
--15 bodova
 
-----------------------------------------------------------------------------------------------
--2. Importovanje podataka
/*
a) U tabelu TipProizv importovati podatke iz tabela ProductSubcategory i ProductCategory baze AdventureWorks2014 koje se nalaze u šemi Production na sljedeći način:
       - ProductSubcategoryID -> potkatID
       - ProductCategoryID -> katID
       - Name -> kat_naziv
       - Name -> potkat_naziv
Voditi računa o pripadnosti polja tabelama iz kojih se importuju podaci.
*/
 
insert into TipProizvodnje
select ps.ProductSubcategoryID, pc.ProductCategoryID, ps.name, pc.Name
from AdventureWorks2014.Production.ProductSubcategory as ps inner join AdventureWorks2014.Production.ProductCategory as pc
on ps.ProductCategoryID = pc.ProductCategoryID
 
--37
 
/*
b) U tabelu proizvod importovati podatke iz tabele Product baze AdventureWorks2014 koja se nalazi u šemi Production na sljedeći način:
       - ProductID -> proizvodID
       - Name -> naziv
       - Color -> boja
       - Weight -> tezina
       - DaysToManufacture -> dana_za_proiz
       - Class -> klasa
       - ProductSubcategoryID -> potkatID
uz uslov da je ProductSubcategoryID sadrži vrijednost.
*/
insert into proizvod
select ProductID, name, color, Weight, DaysToManufacture, Class, ProductSubcategoryID
from AdventureWorks2014.Production.Product
where ProductSubcategoryID is not null
--295
 
/*
c) U tabelu nalog importovati podatke iz tabela WorkOrder i ScrapReason baze AdventureWorks2014 koja se nalazi u šemi Production na sljedeći način:
       - WorkOrderID -> nalogID
       - ProductID -> proizvodID
       - OrderQty -> naruc_kol
       - StockedQty -> stanje_kol
       - DueDate -> dtm_zaduz
       - Name -> oznaka_greske
uz uslov da je ProductID veći ili jednak 680.
*/
 
insert into nalozi
select wo.WorkOrderID, wo.ProductID, wo.OrderQty, wo.StockedQty, wo.DueDate, sr.name
from AdventureWorks2014.Production.WorkOrder as wo inner join AdventureWorks2014.Production.ScrapReason as sr
on wo.ScrapReasonID = sr.ScrapReasonID
where wo.ProductID >= 680
 
--332
-- 15 bodova
 
-----------------------------------------------------------------------------------------------
--3.
/*
Iz tabele nalog dati pregled koji će se sastojati od polja:
       - godina - godina zaduženja proizvoda
       - uk_broj_po_god - ukupan broj zapisa po godinama
uz uslov da je proizvod zadužen u prvom polugodištu bilo koje godine.
Primjer za uk_broj: U tabeli se nalazi 5 zapisa kod kojih je datum zaduženja iz prvog polugodišta 2015. godine
*/
 
select year(datumZaduzivanja) as godina, count(datumZaduzivanja) as ukupanBrojPoGodinama
from nalog
where MONTH(datumZaduzivanja) < 7
group by year(datumZaduzivanja)
 
--4
/*
2011   2
2012   49
2013   72
2014   51
*/
--5 bodova
 
-----------------------------------------------------------------------------------------------
--4.
/*
Iz tabele nalog kreirati pogled view_razlika koji će se sastojati od polja:
       - razlika_stanja - razlika između naručene količine i količine na stanju
       - uk_broj_po_razlici - ukupan broj zapisa po vrijednosti razlike, npr. u tabeli se nalazi 5 zapisa kod kojih je razlika 10
uz uslov da je proizvod zadužen u 10. mjesecu bilo koje godine prije 2013.
Obavezno napisati naredbu za pregled sadržaja pogleda.
*/
 
go
create view view_Razlika
as
select narucenaKolicina - stanjeKolicine as razlikaStanja, count(narucenaKolicina - stanjeKolicine) as UkupanBrojPoRazlici
from nalog
where MONTH(datumZaduzivanja) = 10 and year(datumZaduzivanja) < 2013
group by narucenaKolicina - stanjeKolicine
go
 
 
select *
from view_Razlika
 
 
--6
/*
1      8
2      7
3      1
10     1
30     1
32     1
*/
--12 bodova
 
-----------------------------------------------------------------------------------------------
/*
5. Koristeći tabelu proizvod kreirati proceduru proc_proizvod kojom će se definirati sljedeći ulazni parametri:
- proizvodID
- boja
- tezina
- dana_za_proiz
Proceduru kreirati tako da je prilikom izvršavanja moguće unijeti bilo koji broj parametara (možemo ostaviti bilo koje polje bez unijetog parametra).
 
Proceduru pokrenuti za sljedeće vrijednosti parametara:
1. @boja = Black
2. @dana_za_proiz = 1
 
*/
go
create procedure proc_proizvod
(
       @proizvodID int = null,
       @boja nvarchar(15) = null,
       @tezina decimal(8,2) = null,
       @danaZaProizvodnju int = null
)
as
begin
select proizvodID, boja, tezina, danaZaProizvodnju
from proizvod
where (
                    @proizvodID = proizvodID or
                    @boja = boja or
                    @tezina = tezina or
                    @danaZaProizvodnju = danaZaProizvodnju
             )
end
go
 
exec proc_proizvod @boja = 'Black'
exec proc_proizvod @danaZaProizvodnju = 1
 
--89
--127
 
--8 bodova
 
 
-----------------------------------------------------------------------------------------------
/*
6. Kreirati pregled koji će sadržavati polja:
       - potkatID
       - suma_tez u kojem će se nalaziti suma težina
Uslov je da naziv proizvoda počinje slovima HL, da se ne preuzimaju zapisi u kojima se nalaze vrijednosti u kolonama boja i tezina, te da je proizvod zaduzen u 2011. ili 2012. godini.
*/
 
select p.potkatID, sum(p.tezina) as sumaTezina
from proizvod as p inner join nalog as n
on p.proizvodID = n.proizvodID
where p.naziv like '%HL%' and p.boja is not null and p.tezina is not null and year(datumZaduzivanja) in (2011, 2012)
group by p.potkatID
 
 
 
--10 bodova
--3
/*
17     5270.00
12     27.56
14     6.52
*/
 
-----------------------------------------------------------------------------------------------
/*
7.
Kreirati pogled view_potkat_boja koji će se sastojati od polja:
       - potkatID
       - boja
       - uk_broj_po_oznaka_greske kojim će se prebrojati ukupan broj pojedinog naziva greške
Napisati naredbu za pregled sadržaja pogleda pri čemu će se izostaviti svi zapisi u kojima nije unijeta vrijednost za boju i uk_broj_po_oznaka_greske je neparan broj.
*/
go
create view view_potkatBoja
as
select p.potkatID, p.boja, count(oznakaGreske) as UkupanBrojGresaka
from nalog as n inner join proizvod as p
on n.proizvodID = p.proizvodID
group by p.potkatID, p.boja
go
 
select *
from view_potkatBoja
where boja is not null and right(UkupanBrojGresaka, 1) in (0,2,4,6,8)
 
--21
 
--7
--10 bodova
 
 
-----------------------------------------------------------------------------------------------
/*
8. Kreirati pregled koji će sadržavati polja:
- naziv potkategorije
- sr_vr_tez - srednja vrijednost težine zaokružena na 2 decimalna mjesta (treća i ostale decimale su 0)
pri čemu se ne prikazuju zapisi u kojima ne postoji srednja vrijednost.
*/
select potkatNaziv, round (avg(p.tezina), 2) as srednjaVrijednost
from  tipProizvodnje as tp inner join proizvod as p
on tp.potkatID = p.potkatID
group by tp.potkatNaziv
having avg(p.tezina) is not null
 
 
--12
/*
Bottom Brackets            187.000000
Brakes                     317.000000
Cranksets                  603.330000
Derailleurs                151.500000
Mountain Bikes             25.060000
Mountain Frames            2.840000
Pedals                     187.330000
Road Bikes                 17.450000
Road Frames                2.310000
Touring Bikes       27.680000
Touring Frames             3.080000
Wheels                     890.000000
*/
--10 bodova
 
 
-----------------------------------------------------------------------------------------------
/*
9.
Kreirati pogled kojim će se dati prikaz ID naloga, ID proizvoda, broja godina razlike u odnosu na aktivnu godinu,
oznaku boje koju će predstavljati prvo slovo naziva (npr. Purple -> P), klase i naziva potkategorije.
Izraz za izračunavanje broja godina razlike treba biti općeg karaktera. Uslov je da naziv potkategorije sadrži riječ Bikes, te da boja nije crna. Obavezno napisati kod za pregled sadržaja pogleda.
*/
--a
go
create view view_zadatak9
as
select n.nalogID, p.proizvodID, datediff(year, n.datumZaduzivanja, getdate()) as GodinaRazlike, left(p.boja, 1) as OznakaBoje, p.klasa, tp.potkatNaziv
from nalog as n inner join proizvod as p
on n.proizvodID = p.proizvodID
inner join tipProizvodnje as tp
on p.potkatID = tp.potkatID
where tp.potkatNaziv like '%Bike%' and p.boja  not like 'Black'
go
 
select *
from view_zadatak9
 
--59
--15 bodova
 
 
--1.
/*
a) Kreirati bazu podataka pod vlastitim brojem indeksa.
*/
 
create database IspitniZadatak7
go
use IspitniZadatak7
 
 
 
--b) Kreiranje tabela. Prilikom kreiranja tabela voditi računa o spojnim poljima između tabela.
/*
I. Kreirati tabelu TipProizv koja se sastoji od polja:
       - potkatID - cjelobrojna varijabla, primarni ključ
       - katID - cjelobrojna varijabla, obavezan unos
       - kat_naziv - 50 unicode karaktera, obavezan unos
       - potkat_naziv - 50 unicode karaktera, obavezan unos
*/
create table TipProizvodnje
(
       potkatID int constraint PK_tipProizvodnje primary key not null,
       katID int not null,
       katNaziv nvarchar (50) not null,
       potkatNaziv nvarchar (50)  not null
)
 
/*
II. Kreirati tabelu proizvod koja se sastoji od polja:
       - proizvodID - cjelobrojna varijabla, primarni ključ
       - naziv - 50 UNICODE karaktera, obavezan unos
       - boja - 15 UNICODE karaktera
       - tezina - decimalni broj  decimal(8, 2),
       - dana_za_proiz - cjelobrojna varijabla, obavezan unos
       - klasa - 2 unicode karaktera
       - potkat_ID cjelobrojna varijabla, obavezan unos
*/
create table proizvod
(
       proizvodID int constraint PK_proizvod primary key not null,
       naziv nvarchar(50) not null,
       boja nvarchar (15),
       tezina decimal (8,2),
       danaZaProizvodnju  int not null,
       klasa nvarchar (2),
       potkatID int not null,
       constraint FK_potkat foreign key (potkatID) references TipProizvodnje (potkatID)
)
 
/*
III. Kreirati tabelu nalog koja se sastoji od polja:
       - nalogID - cjelobrojna varijabla, primarni ključ
       - proizvodID - cjelobrojna varijabla, obavezan unos
       - naruc_kol - cjelobrojna varijabla, obavezan unos
       - stanje_kol - cjelobrojna varijabla, obavezan unos
       - dtm_zaduz - datumska varijabla samo za unos datuma (bez vremena)
       - oznaka_greske - 50 unicode karaktera, obavezan unos
*/
create table nalog
(
       nalogID int constraint PK_nalog primary key not null,
       proizvodID int not null,
       constraint FK_proizvod foreign key (nalogID) references proizvod (proizvodID),
       narucenaKolicina int not null,
       stanjeKolicina int not null,
       datumZaduzivanja date,
       oznakaGreske nvarchar (50) not null
)
 
create table nalozi
(
       nalogID int,
       proizvodID int not null,
       constraint PK_proizvoda primary key (proizvodID, nalogID),
       narucenaKolicina int not null,
       stanjeKolicine int not null,
       datumZaduzivanja date,
       oznakaGreske nvarchar (50) not null
)
 
drop table nalog
--15 bodova
 
-----------------------------------------------------------------------------------------------
--2. Importovanje podataka
/*
a) U tabelu TipProizv importovati podatke iz tabela ProductSubcategory i ProductCategory baze AdventureWorks2014 koje se nalaze u šemi Production na sljedeći način:
       - ProductSubcategoryID -> potkatID
       - ProductCategoryID -> katID
       - Name -> kat_naziv
       - Name -> potkat_naziv
Voditi računa o pripadnosti polja tabelama iz kojih se importuju podaci.
*/
 
insert into TipProizvodnje
select ps.ProductSubcategoryID, pc.ProductCategoryID, ps.name, pc.Name
from AdventureWorks2014.Production.ProductSubcategory as ps inner join AdventureWorks2014.Production.ProductCategory as pc
on ps.ProductCategoryID = pc.ProductCategoryID
 
--37
 
/*
b) U tabelu proizvod importovati podatke iz tabele Product baze AdventureWorks2014 koja se nalazi u šemi Production na sljedeći način:
       - ProductID -> proizvodID
       - Name -> naziv
       - Color -> boja
       - Weight -> tezina
       - DaysToManufacture -> dana_za_proiz
       - Class -> klasa
       - ProductSubcategoryID -> potkatID
uz uslov da je ProductSubcategoryID sadrži vrijednost.
*/
insert into proizvod
select ProductID, name, color, Weight, DaysToManufacture, Class, ProductSubcategoryID
from AdventureWorks2014.Production.Product
where ProductSubcategoryID is not null
--295
 
/*
c) U tabelu nalog importovati podatke iz tabela WorkOrder i ScrapReason baze AdventureWorks2014 koja se nalazi u šemi Production na sljedeći način:
       - WorkOrderID -> nalogID
       - ProductID -> proizvodID
       - OrderQty -> naruc_kol
       - StockedQty -> stanje_kol
       - DueDate -> dtm_zaduz
       - Name -> oznaka_greske
uz uslov da je ProductID veći ili jednak 680.
*/
 
insert into nalozi
select wo.WorkOrderID, wo.ProductID, wo.OrderQty, wo.StockedQty, wo.DueDate, sr.name
from AdventureWorks2014.Production.WorkOrder as wo inner join AdventureWorks2014.Production.ScrapReason as sr
on wo.ScrapReasonID = sr.ScrapReasonID
where wo.ProductID >= 680
 
--332
-- 15 bodova
 
-----------------------------------------------------------------------------------------------
--3.
/*
Iz tabele nalog dati pregled koji će se sastojati od polja:
       - godina - godina zaduženja proizvoda
       - uk_broj_po_god - ukupan broj zapisa po godinama
uz uslov da je proizvod zadužen u prvom polugodištu bilo koje godine.
Primjer za uk_broj: U tabeli se nalazi 5 zapisa kod kojih je datum zaduženja iz prvog polugodišta 2015. godine
*/
 
 
select year (datumZaduzivanja) as GodinaZaduzivanja, count(datumZaduzivanja) as UkupanBrojZapisaPoGodinama
from nalozi
where MONTH(datumZaduzivanja) < 7
group by year (datumZaduzivanja)
 
select *
from nalozi
 
--4
/*
2011   2
2012   49
2013   72
2014   51
*/
--5 bodova
 
-----------------------------------------------------------------------------------------------
--4.
/*
Iz tabele nalog kreirati pogled view_razlika koji će se sastojati od polja:
       - razlika_stanja - razlika između naručene količine i količine na stanju
       - uk_broj_po_razlici - ukupan broj zapisa po vrijednosti razlike, npr. u tabeli se nalazi 5 zapisa kod kojih je razlika 10
uz uslov da je proizvod zadužen u 10. mjesecu bilo koje godine prije 2013.
Obavezno napisati naredbu za pregled sadržaja pogleda.
*/
 
go
create view viewRazlika
as
select narucenaKolicina - stanjeKolicine as RazlikaStanja, count(narucenaKolicina - stanjeKolicine) as UkupanBrojZapisaPoVrijednostiRazlike
from nalozi
where year(datumZaduzivanja) < 2013 and MONTH(datumZaduzivanja) = 10
group by narucenaKolicina - stanjeKolicine
go
 
select*
from nalozi
 
select*
from viewRazlika
 
 
 
--6
/*
1      8
2      7
3      1
10     1
30     1
32     1
*/
--12 bodova
 
-----------------------------------------------------------------------------------------------
/*
5. Koristeći tabelu proizvod kreirati proceduru proc_proizvod kojom će se definirati sljedeći ulazni parametri:
- proizvodID
- boja
- tezina
- dana_za_proiz
Proceduru kreirati tako da je prilikom izvršavanja moguće unijeti bilo koji broj parametara (možemo ostaviti bilo koje polje bez unijetog parametra).
 
Proceduru pokrenuti za sljedeće vrijednosti parametara:
1. @boja = Black
2. @dana_za_proiz = 1
 
*/
go
create procedure proceduraProizvod
(
       @proizvodID int = null,
       @boja nvarchar (15) = null,
       @tezina decimal (8,2) = null,
       @danaZaProizvodnju int = null
)
as
begin
select proizvodID, boja, tezina, danaZaProizvodnju
from proizvod
where (
                    @proizvodID = proizvodID or
                    @boja = boja or
                    @tezina = tezina or
                    @danaZaProizvodnju = danaZaProizvodnju
             )
end
go
 
exec proceduraProizvod @danaZaProizvodnju = 1
exec proceduraProizvod @boja = 'Black'
 
--89
--127
 
--8 bodova
 
 
-----------------------------------------------------------------------------------------------
/*
6. Kreirati pregled koji će sadržavati polja:
       - potkatID
       - suma_tez u kojem će se nalaziti suma težina
Uslov je da naziv proizvoda počinje slovima HL, da se ne preuzimaju zapisi u kojima se nalaze vrijednosti u kolonama boja i tezina, te da je proizvod zaduzen u 2011. ili 2012. godini.
*/
 
select p.potkatID, sum(p.tezina) as sumaTezina
from proizvod as p inner join nalozi as n
on p.proizvodID = n.proizvodID
where p.naziv like '%HL%' and p.boja is not null and p.tezina is not null and year(datumZaduzivanja) in (2011, 2012)
group by p.potkatID
order by sum(p.tezina) desc
 
select p.naziv
from proizvod as p inner join nalozi as n
on p.proizvodID = n.proizvodID
 
 
--10 bodova
--3
/*
17     5270.00
12     27.56
14     6.52
*/
 
-----------------------------------------------------------------------------------------------
/*
7.
Kreirati pogled view_potkat_boja koji će se sastojati od polja:
       - potkatID
       - boja
       - uk_broj_po_oznaka_greske kojim će se prebrojati ukupan broj pojedinog naziva greške
Napisati naredbu za pregled sadržaja pogleda pri čemu će se izostaviti svi zapisi u kojima nije unijeta vrijednost za boju i uk_broj_po_oznaka_greske je neparan broj.
*/
go
create view viewPotkatBoja
as
select p.potkatID, p.boja, count(n.oznakaGreske) as ukupanBrojGresaka
from proizvod as p inner join nalozi as n
on p.proizvodID = n.proizvodID
group by p.potkatID, p.boja
go
 
--21
 
select*
from viewPotkatBoja
where boja is not null and right(ukupanBrojGresaka, 1) in (0,2,4,6,8)
 
--7
--10 bodova
 
 
-----------------------------------------------------------------------------------------------
/*
8. Kreirati pregled koji će sadržavati polja:
- naziv potkategorije
- sr_vr_tez - srednja vrijednost težine zaokružena na 2 decimalna mjesta (treća i ostale decimale su 0)
pri čemu se ne prikazuju zapisi u kojima ne postoji srednja vrijednost.
*/
 
select tp.potkatNaziv, round(avg(p.tezina),2) as SrednjaVrijednost
from TipProizvodnje as tp inner join proizvod as p
on tp.potkatID = p.potkatID
group by tp.potkatNaziv
having avg(p.tezina) is not null
 
select tp.potkatNaziv
from TipProizvodnje as tp inner join proizvod as p
on tp.potkatID = p.potkatID
 
 
--12
/*
Bottom Brackets            187.000000
Brakes                     317.000000
Cranksets                  603.330000
Derailleurs                151.500000
Mountain Bikes             25.060000
Mountain Frames            2.840000
Pedals                     187.330000
Road Bikes                 17.450000
Road Frames                2.310000
Touring Bikes       27.680000
Touring Frames             3.080000
Wheels                     890.000000
*/
--10 bodova
 
 
-----------------------------------------------------------------------------------------------
/*
9.
Kreirati pogled kojim će se dati prikaz ID naloga, ID proizvoda, broja godina razlike u odnosu na aktivnu godinu,
oznaku boje koju će predstavljati prvo slovo naziva (npr. Purple -> P), klase i naziva potkategorije.
Izraz za izračunavanje broja godina razlike treba biti općeg karaktera. Uslov je da naziv potkategorije sadrži riječ Bikes, te da boja nije crna. Obavezno napisati kod za pregled sadržaja pogleda.
*/
--a
 
go
create view viewZadatak9
as
select n.nalogID, p.proizvodID, datediff(year, n.datumZaduzivanja, getdate()) as GodinaRazlike, left(p.boja, 1) as OznakaBoje, p.klasa, tp.potkatNaziv
from nalozi as n inner join proizvod as p
on n.proizvodID = p.proizvodID
inner join TipProizvodnje as tp
on p.potkatID = tp.potkatID
where tp.potkatNaziv like '%Bikes%' and p.boja not like 'Black'
go
 
select*
from viewZadatak9
 
 
 
--59
--15 bodova
 
 
--1.
/*
a) Kreirati bazu podataka pod vlastitim brojem indeksa.
*/
 
 
 
create database IspitniZadatak6
go
use IspitniZadatak6
 
 
 
--b) Kreiranje tabela. Prilikom kreiranja tabela voditi računa o spojnim poljima između tabela.
/*
I. Kreirati tabelu TipProizv koja se sastoji od polja:
       - potkatID - cjelobrojna varijabla, primarni ključ
       - katID - cjelobrojna varijabla, obavezan unos
       - kat_naziv - 50 unicode karaktera, obavezan unos
       - potkat_naziv - 50 unicode karaktera, obavezan unos
*/
 
create table TipProizvodnje
(
       potkatID int constraint PK_tipProizvodnje primary key not null,
       katID int not null,
       katNaziv nvarchar (50) not null,
       potkatNaziv nvarchar (50) not null
)
 
/*
II. Kreirati tabelu proizvod koja se sastoji od polja:
       - proizvodID - cjelobrojna varijabla, primarni ključ
       - naziv - 50 UNICODE karaktera, obavezan unos
       - boja - 15 UNICODE karaktera
       - tezina - decimalni broj  decimal(8, 2),
       - dana_za_proiz - cjelobrojna varijabla, obavezan unos
       - klasa - 2 unicode karaktera
       - potkat_ID cjelobrojna varijabla, obavezan unos
*/
create table proizvod
(
       proizvodID int constraint PK_proizvod primary key not null,
       naziv nvarchar (50) not null,
       boja nvarchar (15),
       tezina decimal (8,2),
       danaZaProizvodnju int not null,
       klasa nvarchar (2),
       potkatID int not null,
       constraint FK_potkatID foreign key (potkatID) references TipProizvodnje (potkatID)
)
 
/*
III. Kreirati tabelu nalog koja se sastoji od polja:
       - nalogID - cjelobrojna varijabla, primarni ključ
       - proizvodID - cjelobrojna varijabla, obavezan unos
       - naruc_kol - cjelobrojna varijabla, obavezan unos
       - stanje_kol - cjelobrojna varijabla, obavezan unos
       - dtm_zaduz - datumska varijabla samo za unos datuma (bez vremena)
       - oznaka_greske - 50 unicode karaktera, obavezan unos
*/
 
create table nalog
(
       nalogID int,
       proizvodID int not null,
       constraint PK_proizvoda primary key (proizvodID, nalogID),
       narucenaKolicina int not null,
       stanjeKolicine int not null,
       datumZaduzivanja date,
       oznakaGreske nvarchar (50) not null
)
 
drop table nalog
--15 bodova
 
-----------------------------------------------------------------------------------------------
--2. Importovanje podataka
/*
a) U tabelu TipProizv importovati podatke iz tabela ProductSubcategory i ProductCategory baze AdventureWorks2014 koje se nalaze u šemi Production na sljedeći način:
       - ProductSubcategoryID -> potkatID
       - ProductCategoryID -> katID
       - Name -> kat_naziv
       - Name -> potkat_naziv
Voditi računa o pripadnosti polja tabelama iz kojih se importuju podaci.
*/
insert into TipProizvodnje
select ps.ProductSubcategoryID, pc.ProductCategoryID, ps.name, pc.Name
from AdventureWorks2014.Production.ProductSubcategory as ps inner join AdventureWorks2014.Production.ProductCategory as pc
on ps.ProductCategoryID = pc.ProductCategoryID
 
--37
 
/*
b) U tabelu proizvod importovati podatke iz tabele Product baze AdventureWorks2014 koja se nalazi u šemi Production na sljedeći način:
       - ProductID -> proizvodID
       - Name -> naziv
       - Color -> boja
       - Weight -> tezina
       - DaysToManufacture -> dana_za_proiz
       - Class -> klasa
       - ProductSubcategoryID -> potkatID
uz uslov da je ProductSubcategoryID sadrži vrijednost.
*/
insert into proizvod
select ProductID, name, color, Weight, DaysToManufacture, Class, ProductSubcategoryID
from AdventureWorks2014.Production.Product
where ProductSubcategoryID is not null
--295
 
/*
c) U tabelu nalog importovati podatke iz tabela WorkOrder i ScrapReason baze AdventureWorks2014 koja se nalazi u šemi Production na sljedeći način:
       - WorkOrderID -> nalogID
       - ProductID -> proizvodID
       - OrderQty -> naruc_kol
       - StockedQty -> stanje_kol
       - DueDate -> dtm_zaduz
       - Name -> oznaka_greske
uz uslov da je ProductID veći ili jednak 680.
*/
 
insert into nalog
select wo.WorkOrderID, wo.ProductID, wo.OrderQty, wo.StockedQty, wo.DueDate, sr.name
from AdventureWorks2014.Production.WorkOrder as wo inner join AdventureWorks2014.Production.ScrapReason as sr
on wo.ScrapReasonID = sr.ScrapReasonID
where wo.ProductID >= 680
 
--332
-- 15 bodova
 
-----------------------------------------------------------------------------------------------
--3.
/*
Iz tabele nalog dati pregled koji će se sastojati od polja:
       - godina - godina zaduženja proizvoda
       - uk_broj_po_god - ukupan broj zapisa po godinama
uz uslov da je proizvod zadužen u prvom polugodištu bilo koje godine.
Primjer za uk_broj: U tabeli se nalazi 5 zapisa kod kojih je datum zaduženja iz prvog polugodišta 2015. godine
*/
 
select year(datumZaduzivanja) as godina, count(datumZaduzivanja) as ukupanBrojPoGodinama
from nalog
where MONTH(datumZaduzivanja) < 7
group by year(datumZaduzivanja)
 
--4
/*
2011   2
2012   49
2013   72
2014   51
*/
--5 bodova
 
-----------------------------------------------------------------------------------------------
--4.
/*
Iz tabele nalog kreirati pogled view_razlika koji će se sastojati od polja:
       - razlika_stanja - razlika između naručene količine i količine na stanju
       - uk_broj_po_razlici - ukupan broj zapisa po vrijednosti razlike, npr. u tabeli se nalazi 5 zapisa kod kojih je razlika 10
uz uslov da je proizvod zadužen u 10. mjesecu bilo koje godine prije 2013.
Obavezno napisati naredbu za pregled sadržaja pogleda.
*/
 
go
create view view_Razlika
as
select narucenaKolicina - stanjeKolicine as razlikaStanja, count(narucenaKolicina - stanjeKolicine) as UkupanBrojPoRazlici
from nalog
where MONTH(datumZaduzivanja) = 10 and year(datumZaduzivanja) < 2013
group by narucenaKolicina - stanjeKolicine
go
 
 
select *
from view_Razlika
 
 
--6
/*
1      8
2      7
3      1
10     1
30     1
32     1
*/
--12 bodova
 
-----------------------------------------------------------------------------------------------
/*
5. Koristeći tabelu proizvod kreirati proceduru proc_proizvod kojom će se definirati sljedeći ulazni parametri:
- proizvodID
- boja
- tezina
- dana_za_proiz
Proceduru kreirati tako da je prilikom izvršavanja moguće unijeti bilo koji broj parametara (možemo ostaviti bilo koje polje bez unijetog parametra).
 
Proceduru pokrenuti za sljedeće vrijednosti parametara:
1. @boja = Black
2. @dana_za_proiz = 1
 
*/
go
create procedure proc_proizvod
(
       @proizvodID int = null,
       @boja nvarchar(15) = null,
       @tezina decimal(8,2) = null,
       @danaZaProizvodnju int = null
)
as
begin
select proizvodID, boja, tezina, danaZaProizvodnju
from proizvod
where (
                    @proizvodID = proizvodID or
                    @boja = boja or
                    @tezina = tezina or
                    @danaZaProizvodnju = danaZaProizvodnju
             )
end
go
 
exec proc_proizvod @boja = 'Black'
exec proc_proizvod @danaZaProizvodnju = 1
 
--89
--127
 
--8 bodova
 
 
-----------------------------------------------------------------------------------------------
/*
6. Kreirati pregled koji će sadržavati polja:
       - potkatID
       - suma_tez u kojem će se nalaziti suma težina
Uslov je da naziv proizvoda počinje slovima HL, da se ne preuzimaju zapisi u kojima se nalaze vrijednosti u kolonama boja i tezina, te da je proizvod zaduzen u 2011. ili 2012. godini.
*/
 
select p.potkatID, sum(p.tezina) as sumaTezina
from proizvod as p inner join nalog as n
on p.proizvodID = n.proizvodID
where p.naziv like '%HL%' and p.boja is not null and p.tezina is not null and year(datumZaduzivanja) in (2011, 2012)
group by p.potkatID
 
 
 
--10 bodova
--3
/*
17     5270.00
12     27.56
14     6.52
*/
 
-----------------------------------------------------------------------------------------------
/*
7.
Kreirati pogled view_potkat_boja koji će se sastojati od polja:
       - potkatID
       - boja
       - uk_broj_po_oznaka_greske kojim će se prebrojati ukupan broj pojedinog naziva greške
Napisati naredbu za pregled sadržaja pogleda pri čemu će se izostaviti svi zapisi u kojima nije unijeta vrijednost za boju i uk_broj_po_oznaka_greske je neparan broj.
*/
go
create view view_potkatBoja
as
select p.potkatID, p.boja, count(oznakaGreske) as UkupanBrojGresaka
from nalog as n inner join proizvod as p
on n.proizvodID = p.proizvodID
group by p.potkatID, p.boja
go
 
select *
from view_potkatBoja
where boja is not null and right(UkupanBrojGresaka, 1) in (0,2,4,6,8)
 
--21
 
--7
--10 bodova
 
 
-----------------------------------------------------------------------------------------------
/*
8. Kreirati pregled koji će sadržavati polja:
- naziv potkategorije
- sr_vr_tez - srednja vrijednost težine zaokružena na 2 decimalna mjesta (treća i ostale decimale su 0)
pri čemu se ne prikazuju zapisi u kojima ne postoji srednja vrijednost.
*/
select potkatNaziv, round (avg(p.tezina), 2) as srednjaVrijednost
from  TipProizvodnje as tp inner join proizvod as p
on tp.potkatID = p.potkatID
group by tp.potkatNaziv
having avg(p.tezina) is not null
 
 
--12
/*
Bottom Brackets            187.000000
Brakes                     317.000000
Cranksets                  603.330000
Derailleurs                151.500000
Mountain Bikes             25.060000
Mountain Frames            2.840000
Pedals                     187.330000
Road Bikes                 17.450000
Road Frames                2.310000
Touring Bikes       27.680000
Touring Frames             3.080000
Wheels                     890.000000
*/
--10 bodova
 
 
-----------------------------------------------------------------------------------------------
/*
9.
Kreirati pogled kojim će se dati prikaz ID naloga, ID proizvoda, broja godina razlike u odnosu na aktivnu godinu,
oznaku boje koju će predstavljati prvo slovo naziva (npr. Purple -> P), klase i naziva potkategorije.
Izraz za izračunavanje broja godina razlike treba biti općeg karaktera. Uslov je da naziv potkategorije sadrži riječ Bikes, te da boja nije crna. Obavezno napisati kod za pregled sadržaja pogleda.
*/
--a
go
create view view_zadatak9
as
select n.nalogID, p.proizvodID, datediff(year, n.datumZaduzivanja, getdate()) as GodinaRazlike, left(p.boja, 1) as OznakaBoje, p.klasa, tp.potkatNaziv
from nalog as n inner join proizvod as p
on n.proizvodID = p.proizvodID
inner join TipProizvodnje as tp
on p.potkatID = tp.potkatID
where tp.potkatNaziv like '%Bike%' and p.boja  not like 'Black'
go
 
select *
from view_zadatak9
 
--59
--15 bodova
 
 
/*
Napomena:
A.
Prilikom  bodovanja rješenja prioritet ima rezultat koji upit treba da vrati (broj zapisa, vrijednosti agregatnih funkcija...).
U sluèaju da rezultat upita nije taèan, a pogled, tabela... koji su rezultat tog upita se koriste u narednim zadacima,
tada se rješenja narednih zadataka, bez obzira na taènost koda, ne boduju punim brojem bodova,
jer ni ta rješenja ne mogu vratiti taèan rezultat (broj zapisa, vrijednosti agregatnih funkcija...).
B.
Tokom pisanja koda obratiti posebnu pažnju na tekst zadatka i ono što se traži zadatkom.
Prilikom pregleda rada pokreæe se kod koji se nalazi u sql skripti i
sve ono što nije uraðeno prema zahtjevima zadatka ili je pogrešno uraðeno predstavlja grešku.
*/
 
------------------------------------------------
--1
/*
Kreirati bazu podataka pod vlastitim brojem indeksa.
*/
 
create database IspitniZadatak4
go
use IspitniZadatak4
 
 
 
/*Prilikom kreiranja tabela voditi raèuna o meðusobnom odnosu izmeðu tabela.
a) Kreirati tabelu radnik koja æe imati sljedeæu strukturu:
       - radnikID, cjelobrojna varijabla, primarni kljuè
       - drzavaID, 15 unicode karaktera
       - loginID, 256 unicode karaktera
       - sati_god_odmora, cjelobrojna varijabla
       - sati_bolovanja, cjelobrojna varijabla
*/
create table radnik
(
       radnikID int constraint PK_radnik primary key not null,
       drzavaID nvarchar (15),
       loginID nvarchar (256),
       satiGodisnjegOdmora int,
       satiBolovanja int
)
 
/*
b) Kreirati tabelu nabavka koja æe imati sljedeæu strukturu:
       - nabavkaID, cjelobrojna varijabla, primarni kljuè
       - status, cjelobrojna varijabla
       - nabavaljacID, cjelobrojna varijabla
       - br_racuna, 15 unicode karaktera
       - naziv_nabavljaca, 50 unicode karaktera
       - kred_rejting, cjelobrojna varijabla
*/
create table nabavka
(
       nabavkaID int constraint PK_nabavka primary key not null,
       status int,
       nabavljacID int,
       brojRacuna nvarchar (15),
       nazivDobavljaca nvarchar (50),
       kreditniRejting int,
       constraint FK_radnikID foreign key (nabavljacID) references radnik(radnikID)
)
 
/*
c) Kreirati tabelu prodaja koja æe imati sljedeæu strukturu:
       - prodavacID, cjelobrojna varijabla, primarni kljuè
       - prod_kvota, novèana varijabla
       - bonus, novèana varijabla
       - proslogod_prodaja, novèana varijabla
       - naziv_terit, 50 unicode karaktera
*/
--10 bodova
 
create table prodaja
(
       prodavacID int constraint PK_prodaja primary key not null,
       prodKvota money,
       bonus money,
       proslogodisnjaProdaja money,
       nazivTeritorije nvarchar (50)
       constraint FK_prodaja foreign key (prodavacID) references radnik (radnikID)
)
 
 
 
--------------------------------------------
--2. Import podataka
/*
a) Iz tabele HumanResources.Employee AdventureWorks2017 u tabelu radnik importovati podatke po sljedeæem pravilu:
       - BusinessEntityID -> radnikID
       - NationalIDNumber -> drzavaID
       - LoginID -> loginID
       - VacationHours -> sati_god_odmora
       - SickLeaveHours -> sati_bolovanja
*/
insert into radnik
select BusinessEntityID, NationalIDNumber, LoginID, VacationHours, SickLeaveHours
from AdventureWorks2014.HumanResources.Employee
 
 
 
 
/*
b) Iz tabela Purchasing.PurchaseOrderHeader i Purchasing.Vendor baze AdventureWorks2017 u tabelu nabavka importovati podatke po sljedeæem pravilu:
       - PurchaseOrderID -> nabavkaID
       - Status -> status
       - EmployeeID -> radnikID
       - AccountNumber -> br_racuna
       - Name -> naziv_nabavljaca
       - CreditRating -> kred_rejting
*/
 
insert into nabavka
select poh.PurchaseOrderID, poh.Status, poh.EmployeeID, v.AccountNumber, v.Name, v.CreditRating
from AdventureWorks2014.Purchasing.PurchaseOrderHeader as poh inner join AdventureWorks2014.Purchasing.Vendor as v
on poh.VendorID = v.BusinessEntityID
 
select *
from nabavka
 
 
/*
c) Iz tabela Sales.SalesPerson i Sales.SalesTerritory baze AdventureWorks2017 u tabelu prodaja importovati podatke po sljedeæem pravilu:
       - BusinessEntityID -> prodavacID
       - SalesQuota -> prod_kvota
       - Bonus -> bonus
       - SalesLastYear iz Sales.SalesPerson -> proslogod_prodaja
       - Name -> naziv_terit
*/
 
insert into prodaja
select sp.BusinessEntityID, sp.SalesQuota, sp.bonus, sp.SalesLastYear, st.name
from AdventureWorks2014.sales.SalesPerson as sp inner join AdventureWorks2014.Sales.SalesTerritory as st
on sp.TerritoryID = st.TerritoryID
 
 
select * from prodaja
select * from radnik
 
--10 bodova
 
------------------------------------------
/*
3.
a) Iz tabela radnik i nabavka kreirati pogled view_drzavaID koji æe imati sljedeæu strukturu:
       - nabavkaID,
       - loginID,
       - status
       - naziv nabavljaèa,
       - kreditni rejting
Uslov je da u pogledu budu zapisi u kojima je kreditni rejting veæi od 1.
b) Koristeæi prethodno kreirani pogled prebrojati broj obavljenih nabavki prema kreditnom rejtingu.
Npr. kreditni rejting 8 se pojavljuje 20 puta. Pregled treba da sadrži oznaku kreditnog rejtinga i ukupan broj obavljenih nabavki.
*/
--10 bodova
 
--a
go
create view viweDrzavaID
as
select n.nabavkaID, r.loginID, n.status, n.nazivDobavljaca, n.kredRejting
from nabavka as n inner join radnik as r
on n.nabavljacID = r.radnikID
where n.kredRejting > 1
 
 
select * from viweDrzavaID
 
 
--b
select count(kredRejting)
from viweDrzavaID
group by kredRejting
 
-----------------------------------------------
/*
4.
Kreirati proceduru koja æe imati istu strukturu kao pogled kreiran u prethodnom zadatku. Proceduru kreirati tako da je prilikom izvršavanja moguæe unijeti
bilo koji broj parametara (možemo ostaviti bilo koji parametar bez unijete vrijednosti), uz uslov da je status veæi od 2. Pokrenuti proceduru za kreditni rejting 3 i 5.
*/
--10 bodova
 
go
create procedure zadatak4
(
       @nabavkaID int = null,
       @loginID nvarchar (2) = null,
       @status int = null,
       @nazivDobavljaca nvarchar (50) = null,
       @kredRejting int = null
)
as
begin
       select n.nabavkaID, r.loginID, n.status, n.nazivDobavljaca, n.kredRejting
       from radnik as r inner join nabavka as n
       on r.radnikID = n.nabavkaID
       where (      
                           @nabavkaID = n.nabavkaID or
                           @loginID = r.loginID or
                           @status = n.status or
                           @nazivDobavljaca = n.nazivDobavljaca or
                           @kredRejting = n.kredRejting
                    ) and n.status > 2
end
 
exec zadatak4 @kredRejting = 3
exec zadatak4 @kredRejting = 5
 
 
-------------------------------------------
/*
5.
a) Kreirati pogled nabavljaci_radnici koji æe se sastojati od kolona naziv dobavljaèa i prebrojani_broj radnika. prebrojani_broj je podatak kojim se prebrojava broj
radnika s kojima je dobavljaè poslovao. Obavezno napisati kod kojim æe se izvršiti pregled sadržaja pogleda sortiran po ukupnom broju.
b) Kreirati proceduru kojom æe se iz pogleda kreiranog pod a) preuzeti zapisi u kojima je prebrojani_broj manji od 50. Proceduru kreirati tako da je prilikom izvršavanja
moguæe unijeti bilo koji broj parametara (možemo ostaviti bilo koji parametar bez unijete vrijednosti). Pokrenuti proceduru za vrijednosti prebrojani_broj = 1 i 2.
*/
--15 bodova
 
--a
go
create view viewNabavljaciRadnici
as
select n.nazivDobavljaca, count (r.radnikID) as prebrojaniBrojRadnika
from radnik as r inner join nabavka as n
on r.radnikID = n.nabavkaID
group by n.nazivDobavljaca
      
select *
from viewNabavljaciRadnici
order by prebrojaniBrojRadnika
 
--b
 
create procedure zadatak5
(
       @nazivDobavljaca nvarchar (50) = null,
       @prebrojaniBrojRadnika int = null
)
as
begin
       select *
       from viewNabavljaciRadnici
       where (
                    @nazivDobavljaca = nazivDobavljaca or
                    @prebrojaniBrojRadnika = prebrojaniBrojRadnika)
                    and prebrojaniBrojRadnika < 50
end
exec zadatak5 @prebrojaniBrojRadnika = 1
exec zadatak5 @prebrojaniBrojRadnika = 2
 
exec zad5b @prebrojani_broj = 1
exec zad5b @prebrojani_broj = 2
 
 
--------------------------------------------
/*
6.
a) U tabeli radnik dodati kolonu razlika_sati kao cjelobrojnu varijablu sa obaveznom default vrijednošæu 0.
b) U koloni razlika_sati ostaviti 0 ako su sati bolovanja veæi od godišnjeg odmora, inaèe u kolonu smjestiti vrijednost razlike izmeðu sato_bolovanja i sati_god_odmora.
c) Kreirati pogled view_sati u kojem æe biti poruka da li radnik ima više sati godišnjeg odmora ili bolovanja.
Ako je više bolovanja daje se poruka ""bolovanje"", inaèe ""godisnji"". Pogled treba da sadrži ID radnika i poruku.
*/
--10 bodova
 
--a
alter table radnik
add razlikaSati int default(0)
 
--b
update radnik
set razlikaSati =
       case
       when satiBolovanja > satiGodOdmora then 0
       when satiBolovanja <= satiGodOdmora then satiBolovanja - satiGodOdmora
       end
 
select * from radnik
 
--c
create view viewSati
as
select radnikID, 'bolovanje' bolovanjeGodisnji
from radnik
where satiBolovanja > satiGodOdmora
union
select radnikID, 'godisnji' bolovanjeGodisnji
from radnik
where satiBolovanja < satiGodOdmora
 
select * from viewSati
 
-----------------------------------------------
/*
7.
Koristeæi tabelu prodaja kreirati pogled view_prodaja sljedeæe strukture:
       - prodavacID
       - naziv_terit
       - razlika prošlogodišnje prodaje i srednje vrijednosti prošlogodišnje prodaje.
Uslov je da se dohvate zapisi u kojima je bonus bar za 1000 veæi od minimalne vrijednosti bonusa
*/
--10 bodova
create view viewProdaja
as
select prodavacID, nazivTeritorije, proslogodProdaja - (select avg (proslogodProdaja) from prodaja) as razlika
from prodaja
where (bonus - 1000) > (select min(bonus) from prodaja)
 
select * from viewProdaja
 
------------------------------------------
/*
8.
U koloni drzavaID tabele radnik izvršiti promjenu svih vrijednosti u kojima je broj cifara neparan broj. Promjenu izvršiti tako što æe se u umjesto postojeæih
vrijednosti unijeti sluèajno generisani niz znakova.
*/
--10 bodova
update radnik
set drzavaID = cast (left(newid(), 15) as nvarchar)
where len(drzavaID)%2 != 0
 
select drzavaID
from radnik
 
---------------------------------------
/*
9.
Iz tabela nabavka i radnik kreirati pogled view_sifra_transakc koja æe se sastojati od sljedeæih kolona:
       - naziv dobavljaèa,
       - sifra_transakc
Podaci u koloni sifra_transakc æe se formirati spajanjem karaktera imena iz kolone loginID tabele radnik (ime je npr. ken, NE ken0) i rijeèi iz kolone
br_racuna (npr. u LITWARE0001 rijeè je LITWARE) tabele nabavka, izmeðu kojih je potrebno umetnuti donju crtu (_).
Uslov je da se ne dohvataju duplikati (prikaz jedinstvenih vrijednosti) u koloni sifre_transaks.
Obavezno napisati kod za pregled sadržaja pogleda.
*/
--13 bodova
create view viewSifraTransakcije
as
select distinct n.nazivDobavljaca, SUBSTRING(loginID, CHARINDEX ('\', loginID) + 1, len (substring(loginID, charindex ('\', loginID) + 1, len(loginID)) ) - 1) + '_' +
                           left(n.brRacuna, charindex ('0', brRacuna) - 1) as sifraTransakcije
from radnik as r inner join nabavka as n
on r.radnikID =n.nabavkaID
 
select loginID
from radnik
 
-----------------------------------------------
--10.
/*
Kreirati backup baze na default lokaciju, obrisati bazu, a zatim izvršiti restore baze.
Uslov prihvatanja koda je da se može izvršiti.
*/
 
BACKUP DATABASE BP2_2020_09_11
TO DISK = 'BP2_2020_09_11.bak'
GO
 
USE master
DROP DATABASE BP2_2020_09_11
 
RESTORE DATABASE BP2_2020_09_11 FROM DISK = 'BP2_2020_09_11.bak'
USE BP2_2020_09_11
 
--2 boda
 
 
/*
Napomena:
A.
Prilikom  bodovanja rješenja prioritet ima rezultat koji upit treba da vrati (broj zapisa, vrijednosti agregatnih funkcija...).
U sluèaju da rezultat upita nije taèan, a pogled, tabela... koji su rezultat tog upita se koriste u narednim zadacima,
tada se rješenja narednih zadataka, bez obzira na taènost koda, ne boduju punim brojem bodova,
jer ni ta rješenja ne mogu vratiti taèan rezultat (broj zapisa, vrijednosti agregatnih funkcija...).
B.
Tokom pisanja koda obratiti posebnu pažnju na tekst zadatka i ono što se traži zadatkom.
Prilikom pregleda rada pokreæe se kod koji se nalazi u sql skripti i
sve ono što nije uraðeno prema zahtjevima zadatka ili je pogrešno uraðeno predstavlja grešku.
*/
 
------------------------------------------------
--1
/*
Kreirati bazu podataka pod vlastitim brojem indeksa.
*/
 
create database IspitniZadatak3
go
use IspitniZadatak3
 
 
 
/*Prilikom kreiranja tabela voditi raèuna o meðusobnom odnosu izmeðu tabela.
a) Kreirati tabelu radnik koja æe imati sljedeæu strukturu:
       - radnikID, cjelobrojna varijabla, primarni kljuè
       - drzavaID, 15 unicode karaktera
       - loginID, 256 unicode karaktera
       - sati_god_odmora, cjelobrojna varijabla
       - sati_bolovanja, cjelobrojna varijabla
*/
create table radnik
(
       radnikID int constraint PK_radnik primary key not null,
       drzavaID nvarchar (15),
       loginID nvarchar (256),
       satiGodisnjegOdmora int,
       satiBolovanja int
)
 
 
/*
b) Kreirati tabelu nabavka koja æe imati sljedeæu strukturu:
       - nabavkaID, cjelobrojna varijabla, primarni kljuè
       - status, cjelobrojna varijabla
       - nabavaljacID, cjelobrojna varijabla
       - br_racuna, 15 unicode karaktera
       - naziv_nabavljaca, 50 unicode karaktera
       - kred_rejting, cjelobrojna varijabla
*/
create table nabavka
(
       nabavkaID int constraint PK_nabavka primary key not null,
       status int,
       nabavljacID int,
       brojRacuna nvarchar (15),
       nazivDobavljaca nvarchar (50),
       kreditniRejting int,
       constraint FK_radnik foreign key (nabavljacID) references radnik (radnikID)
)
 
 
 
drop table nabavka
/*
c) Kreirati tabelu prodaja koja æe imati sljedeæu strukturu:
       - prodavacID, cjelobrojna varijabla, primarni kljuè
       - prod_kvota, novèana varijabla
       - bonus, novèana varijabla
       - proslogod_prodaja, novèana varijabla
       - naziv_terit, 50 unicode karaktera
*/
--10 bodova
create table prodaja
(
       prodavacID int constraint PK_prodaja primary key not null,
       prodKvota money,
       bonus money,
       proslogodisnjaProdaja money,
       nazivteritorije nvarchar (50)
       constraint FK_prodajaRadnik foreign key (prodavacID) references radnik (radnikID)
)
 
drop table prodaja
--------------------------------------------
--2. Import podataka
/*
a) Iz tabele HumanResources.Employee AdventureWorks2017 u tabelu radnik importovati podatke po sljedeæem pravilu:
       - BusinessEntityID -> radnikID
       - NationalIDNumber -> drzavaID
       - LoginID -> loginID
       - VacationHours -> sati_god_odmora
       - SickLeaveHours -> sati_bolovanja
*/
insert into radnik
select BusinessEntityID, NationalIDNumber, LoginID, VacationHours, SickLeaveHours
from AdventureWorks2014.HumanResources.Employee
 
 
 
 
/*
b) Iz tabela Purchasing.PurchaseOrderHeader i Purchasing.Vendor baze AdventureWorks2017 u tabelu nabavka importovati podatke po sljedeæem pravilu:
       - PurchaseOrderID -> nabavkaID
       - Status -> status
       - EmployeeID -> radnikID
       - AccountNumber -> br_racuna
       - Name -> naziv_nabavljaca
       - CreditRating -> kred_rejting
*/
 
insert into nabavka
select poh.PurchaseOrderID, poh.Status, poh.EmployeeID, v.AccountNumber, v.Name, v.CreditRating
from AdventureWorks2014.Purchasing.PurchaseOrderHeader as poh inner join AdventureWorks2014.Purchasing.Vendor as v
on poh.VendorID = v.BusinessEntityID
 
select *
from nabavka
 
 
/*
c) Iz tabela Sales.SalesPerson i Sales.SalesTerritory baze AdventureWorks2017 u tabelu prodaja importovati podatke po sljedeæem pravilu:
       - BusinessEntityID -> prodavacID
       - SalesQuota -> prod_kvota
       - Bonus -> bonus
       - SalesLastYear iz Sales.SalesPerson -> proslogod_prodaja
       - Name -> naziv_terit
*/
 
insert into prodaja
select
from ad
 
insert into prodaja
select sp.BusinessEntityID, sp.SalesQuota, sp.bonus, sp.SalesLastYear, st.name
from AdventureWorks2014.sales.SalesPerson as sp inner join AdventureWorks2014.Sales.SalesTerritory as st
on sp.TerritoryID = st.TerritoryID
 
 
select * from prodaja
select * from radnik
 
--10 bodova
 
------------------------------------------
/*
3.
a) Iz tabela radnik i nabavka kreirati pogled view_drzavaID koji æe imati sljedeæu strukturu:
       - nabavkaID,
       - loginID,
       - status
       - naziv nabavljaèa,
       - kreditni rejting
Uslov je da u pogledu budu zapisi u kojima je kreditni rejting veæi od 1.
b) Koristeæi prethodno kreirani pogled prebrojati broj obavljenih nabavki prema kreditnom rejtingu.
Npr. kreditni rejting 8 se pojavljuje 20 puta. Pregled treba da sadrži oznaku kreditnog rejtinga i ukupan broj obavljenih nabavki.
*/
--10 bodova
 
--a
go
create view viweDrzavaID
as
select n.nabavkaID, r.loginID, n.status, n.nazivDobavljaca, n.kredRejting
from nabavka as n inner join radnik as r
on n.nabavljacID = r.radnikID
where n.kredRejting > 1
 
 
select * from viweDrzavaID
 
 
--b
select count(kredRejting)
from viweDrzavaID
group by kredRejting
 
-----------------------------------------------
/*
4.
Kreirati proceduru koja æe imati istu strukturu kao pogled kreiran u prethodnom zadatku. Proceduru kreirati tako da je prilikom izvršavanja moguæe unijeti
bilo koji broj parametara (možemo ostaviti bilo koji parametar bez unijete vrijednosti), uz uslov da je status veæi od 2. Pokrenuti proceduru za kreditni rejting 3 i 5.
*/
--10 bodova
 
go
create procedure zadatak4
(
       @nabavkaID int = null,
       @loginID nvarchar (2) = null,
       @status int = null,
       @nazivDobavljaca nvarchar (50) = null,
       @kredRejting int = null
)
as
begin
       select n.nabavkaID, r.loginID, n.status, n.nazivDobavljaca, n.kredRejting
       from radnik as r inner join nabavka as n
       on r.radnikID = n.nabavkaID
       where (      
                           @nabavkaID = n.nabavkaID or
                           @loginID = r.loginID or
                           @status = n.status or
                           @nazivDobavljaca = n.nazivDobavljaca or
                           @kredRejting = n.kredRejting
                    ) and n.status > 2
end
 
exec zadatak4 @kredRejting = 3
exec zadatak4 @kredRejting = 5
 
 
-------------------------------------------
/*
5.
a) Kreirati pogled nabavljaci_radnici koji æe se sastojati od kolona naziv dobavljaèa i prebrojani_broj radnika. prebrojani_broj je podatak kojim se prebrojava broj
radnika s kojima je dobavljaè poslovao. Obavezno napisati kod kojim æe se izvršiti pregled sadržaja pogleda sortiran po ukupnom broju.
b) Kreirati proceduru kojom æe se iz pogleda kreiranog pod a) preuzeti zapisi u kojima je prebrojani_broj manji od 50. Proceduru kreirati tako da je prilikom izvršavanja
moguæe unijeti bilo koji broj parametara (možemo ostaviti bilo koji parametar bez unijete vrijednosti). Pokrenuti proceduru za vrijednosti prebrojani_broj = 1 i 2.
*/
--15 bodova
 
--a
go
create view viewNabavljaciRadnici
as
select n.nazivDobavljaca, count (r.radnikID) as prebrojaniBrojRadnika
from radnik as r inner join nabavka as n
on r.radnikID = n.nabavkaID
group by n.nazivDobavljaca
      
select *
from viewNabavljaciRadnici
order by prebrojaniBrojRadnika
 
--b
 
create procedure zadatak5
(
       @nazivDobavljaca nvarchar (50) = null,
       @prebrojaniBrojRadnika int = null
)
as
begin
       select *
       from viewNabavljaciRadnici
       where (
                    @nazivDobavljaca = nazivDobavljaca or
                    @prebrojaniBrojRadnika = prebrojaniBrojRadnika)
                    and prebrojaniBrojRadnika < 50
end
exec zadatak5 @prebrojaniBrojRadnika = 1
exec zadatak5 @prebrojaniBrojRadnika = 2
 
exec zad5b @prebrojani_broj = 1
exec zad5b @prebrojani_broj = 2
 
 
--------------------------------------------
/*
6.
a) U tabeli radnik dodati kolonu razlika_sati kao cjelobrojnu varijablu sa obaveznom default vrijednošæu 0.
b) U koloni razlika_sati ostaviti 0 ako su sati bolovanja veæi od godišnjeg odmora, inaèe u kolonu smjestiti vrijednost razlike izmeðu sato_bolovanja i sati_god_odmora.
c) Kreirati pogled view_sati u kojem æe biti poruka da li radnik ima više sati godišnjeg odmora ili bolovanja.
Ako je više bolovanja daje se poruka ""bolovanje"", inaèe ""godisnji"". Pogled treba da sadrži ID radnika i poruku.
*/
--10 bodova
 
--a
alter table radnik
add razlikaSati int default(0)
 
--b
update radnik
set razlikaSati =
       case
       when satiBolovanja > satiGodOdmora then 0
       when satiBolovanja <= satiGodOdmora then satiBolovanja - satiGodOdmora
       end
 
select * from radnik
 
--c
create view viewSati
as
select radnikID, 'bolovanje' bolovanjeGodisnji
from radnik
where satiBolovanja > satiGodOdmora
union
select radnikID, 'godisnji' bolovanjeGodisnji
from radnik
where satiBolovanja < satiGodOdmora
 
select * from viewSati
 
-----------------------------------------------
/*
7.
Koristeæi tabelu prodaja kreirati pogled view_prodaja sljedeæe strukture:
       - prodavacID
       - naziv_terit
       - razlika prošlogodišnje prodaje i srednje vrijednosti prošlogodišnje prodaje.
Uslov je da se dohvate zapisi u kojima je bonus bar za 1000 veæi od minimalne vrijednosti bonusa
*/
--10 bodova
create view viewProdaja
as
select prodavacID, nazivTeritorije, proslogodProdaja - (select avg (proslogodProdaja) from prodaja) as razlika
from prodaja
where (bonus - 1000) > (select min(bonus) from prodaja)
 
select * from viewProdaja
 
------------------------------------------
/*
8.
U koloni drzavaID tabele radnik izvršiti promjenu svih vrijednosti u kojima je broj cifara neparan broj. Promjenu izvršiti tako što æe se u umjesto postojeæih
vrijednosti unijeti sluèajno generisani niz znakova.
*/
--10 bodova
update radnik
set drzavaID = cast (left(newid(), 15) as nvarchar)
where len(drzavaID)%2 != 0
 
select drzavaID
from radnik
 
---------------------------------------
/*
9.
Iz tabela nabavka i radnik kreirati pogled view_sifra_transakc koja æe se sastojati od sljedeæih kolona:
       - naziv dobavljaèa,
       - sifra_transakc
Podaci u koloni sifra_transakc æe se formirati spajanjem karaktera imena iz kolone loginID tabele radnik (ime je npr. ken, NE ken0) i rijeèi iz kolone
br_racuna (npr. u LITWARE0001 rijeè je LITWARE) tabele nabavka, izmeðu kojih je potrebno umetnuti donju crtu (_).
Uslov je da se ne dohvataju duplikati (prikaz jedinstvenih vrijednosti) u koloni sifre_transaks.
Obavezno napisati kod za pregled sadržaja pogleda.
*/
--13 bodova
create view viewSifraTransakcije
as
select distinct n.nazivDobavljaca, SUBSTRING(loginID, CHARINDEX ('\', loginID) + 1, len (substring(loginID, charindex ('\', loginID) + 1, len(loginID)) ) - 1) + '_' +
                           left(n.brRacuna, charindex ('0', brRacuna) - 1) as sifraTransakcije
from radnik as r inner join nabavka as n
on r.radnikID =n.nabavkaID
 
select loginID
from radnik
 
-----------------------------------------------
--10.
/*
Kreirati backup baze na default lokaciju, obrisati bazu, a zatim izvršiti restore baze.
Uslov prihvatanja koda je da se može izvršiti.
*/
 
BACKUP DATABASE BP2_2020_09_11
TO DISK = 'BP2_2020_09_11.bak'
GO
 
USE master
DROP DATABASE BP2_2020_09_11
 
RESTORE DATABASE BP2_2020_09_11 FROM DISK = 'BP2_2020_09_11.bak'
USE BP2_2020_09_11
 
--2 boda
 
 
 
/*
Napomena:
A.
Prilikom  bodovanja rješenja prioritet ima rezultat koji upit treba da vrati (broj zapisa, vrijednosti agregatnih funkcija...).
U sluèaju da rezultat upita nije taèan, a pogled, tabela... koji su rezultat tog upita se koriste u narednim zadacima,
tada se rješenja narednih zadataka, bez obzira na taènost koda, ne boduju punim brojem bodova,
jer ni ta rješenja ne mogu vratiti taèan rezultat (broj zapisa, vrijednosti agregatnih funkcija...).
B.
Tokom pisanja koda obratiti posebnu pažnju na tekst zadatka i ono što se traži zadatkom.
Prilikom pregleda rada pokreæe se kod koji se nalazi u sql skripti i
sve ono što nije uraðeno prema zahtjevima zadatka ili je pogrešno uraðeno predstavlja grešku.
*/
 
------------------------------------------------
--1
/*
Kreirati bazu podataka pod vlastitim brojem indeksa.
*/
 
create database FIT_ispitniZadatak5
go
 
use FIT_ispitniZadatak5
go
 
 
/*Prilikom kreiranja tabela voditi raèuna o meðusobnom odnosu izmeðu tabela.
a) Kreirati tabelu radnik koja æe imati sljedeæu strukturu:
       - radnikID, cjelobrojna varijabla, primarni kljuè
       - drzavaID, 15 unicode karaktera
       - loginID, 256 unicode karaktera
       - sati_god_odmora, cjelobrojna varijabla
       - sati_bolovanja, cjelobrojna varijabla
*/
 
create table radnik
(
       radnikID int constraint PK_radnik primary key not null,
       drzavaID nvarchar (15),
       loginID nvarchar(256),
       satiGodOdmora int,
       satiBolovanja int
)
 
 
/*
b) Kreirati tabelu nabavka koja æe imati sljedeæu strukturu:
       - nabavkaID, cjelobrojna varijabla, primarni kljuè
       - status, cjelobrojna varijabla
       - nabavaljacID, cjelobrojna varijabla
       - br_racuna, 15 unicode karaktera
       - naziv_nabavljaca, 50 unicode karaktera
       - kred_rejting, cjelobrojna varijabla
*/
create table nabavka
(     
       nabavkaID int constraint PK_nabavka primary key not null,
       status int,
       nabavljacID int,
       brRacuna nvarchar (15),
       nazivDobavljaca nvarchar (50),
       kredRejting int
       constraint FK_radnikID foreign key (nabavljacID) references radnik(radnikID)
)
 
drop table nabavka
/*
c) Kreirati tabelu prodaja koja æe imati sljedeæu strukturu:
       - prodavacID, cjelobrojna varijabla, primarni kljuè
       - prod_kvota, novèana varijabla
       - bonus, novèana varijabla
       - proslogod_prodaja, novèana varijabla
       - naziv_terit, 50 unicode karaktera
*/
--10 bodova
create table prodaja
(
       prodavacID int constraint PK_prodaja primary key not null,
       prodKvota money,
       bonus money,
       proslogodProdaja money,
       nazivTeritorije nvarchar(50)
       constraint FK_prodaja foreign key (prodavacID) references radnik (radnikID)
)
 
 
drop table prodaja
--------------------------------------------
--2. Import podataka
/*
a) Iz tabele HumanResources.Employee AdventureWorks2017 u tabelu radnik importovati podatke po sljedeæem pravilu:
       - BusinessEntityID -> radnikID
       - NationalIDNumber -> drzavaID
       - LoginID -> loginID
       - VacationHours -> sati_god_odmora
       - SickLeaveHours -> sati_bolovanja
*/
insert into radnik
select BusinessEntityID, NationalIDNumber, LoginID, VacationHours, SickLeaveHours
from AdventureWorks2014.HumanResources.Employee
 
/*
b) Iz tabela Purchasing.PurchaseOrderHeader i Purchasing.Vendor baze AdventureWorks2017 u tabelu nabavka importovati podatke po sljedeæem pravilu:
       - PurchaseOrderID -> nabavkaID
       - Status -> status
       - EmployeeID -> radnikID
       - AccountNumber -> br_racuna
       - Name -> naziv_nabavljaca
       - CreditRating -> kred_rejting
*/
 
insert into nabavka
select poh.PurchaseOrderID, poh.Status, poh.EmployeeID, v.AccountNumber, v.Name, v.CreditRating
from AdventureWorks2014.Purchasing.PurchaseOrderHeader as poh inner join AdventureWorks2014.Purchasing.Vendor as v
on poh.VendorID = v.BusinessEntityID
 
select *
from nabavka
 
 
/*
c) Iz tabela Sales.SalesPerson i Sales.SalesTerritory baze AdventureWorks2017 u tabelu prodaja importovati podatke po sljedeæem pravilu:
       - BusinessEntityID -> prodavacID
       - SalesQuota -> prod_kvota
       - Bonus -> bonus
       - SalesLastYear iz Sales.SalesPerson -> proslogod_prodaja
       - Name -> naziv_terit
*/
 
insert into prodaja
select sp.BusinessEntityID, sp.SalesQuota, sp.bonus, sp.SalesLastYear, st.name
from AdventureWorks2014.sales.SalesPerson as sp inner join AdventureWorks2014.Sales.SalesTerritory as st
on sp.TerritoryID = st.TerritoryID
 
 
select * from prodaja
select * from radnik
 
--10 bodova
 
------------------------------------------
/*
3.
a) Iz tabela radnik i nabavka kreirati pogled view_drzavaID koji æe imati sljedeæu strukturu:
       - nabavkaID,
       - loginID,
       - status
       - naziv nabavljaèa,
       - kreditni rejting
Uslov je da u pogledu budu zapisi u kojima je kreditni rejting veæi od 1.
b) Koristeæi prethodno kreirani pogled prebrojati broj obavljenih nabavki prema kreditnom rejtingu.
Npr. kreditni rejting 8 se pojavljuje 20 puta. Pregled treba da sadrži oznaku kreditnog rejtinga i ukupan broj obavljenih nabavki.
*/
--10 bodova
 
--a
go
create view viweDrzavaID
as
select n.nabavkaID, r.loginID, n.status, n.nazivDobavljaca, n.kredRejting
from nabavka as n inner join radnik as r
on n.nabavljacID = r.radnikID
where n.kredRejting > 1
 
 
select * from viweDrzavaID
 
 
--b
select count(kredRejting)
from viweDrzavaID
group by kredRejting
 
-----------------------------------------------
/*
4.
Kreirati proceduru koja æe imati istu strukturu kao pogled kreiran u prethodnom zadatku. Proceduru kreirati tako da je prilikom izvršavanja moguæe unijeti
bilo koji broj parametara (možemo ostaviti bilo koji parametar bez unijete vrijednosti), uz uslov da je status veæi od 2. Pokrenuti proceduru za kreditni rejting 3 i 5.
*/
--10 bodova
 
go
create procedure zadatak4
(
       @nabavkaID int = null,
       @loginID nvarchar (2) = null,
       @status int = null,
       @nazivDobavljaca nvarchar (50) = null,
       @kredRejting int = null
)
as
begin
       select n.nabavkaID, r.loginID, n.status, n.nazivDobavljaca, n.kredRejting
       from radnik as r inner join nabavka as n
       on r.radnikID = n.nabavkaID
       where (      
                           @nabavkaID = n.nabavkaID or
                           @loginID = r.loginID or
                           @status = n.status or
                           @nazivDobavljaca = n.nazivDobavljaca or
                           @kredRejting = n.kredRejting
                    ) and n.status > 2
end
 
exec zadatak4 @kredRejting = 3
exec zadatak4 @kredRejting = 5
 
 
-------------------------------------------
/*
5.
a) Kreirati pogled nabavljaci_radnici koji æe se sastojati od kolona naziv dobavljaèa i prebrojani_broj radnika. prebrojani_broj je podatak kojim se prebrojava broj
radnika s kojima je dobavljaè poslovao. Obavezno napisati kod kojim æe se izvršiti pregled sadržaja pogleda sortiran po ukupnom broju.
b) Kreirati proceduru kojom æe se iz pogleda kreiranog pod a) preuzeti zapisi u kojima je prebrojani_broj manji od 50. Proceduru kreirati tako da je prilikom izvršavanja
moguæe unijeti bilo koji broj parametara (možemo ostaviti bilo koji parametar bez unijete vrijednosti). Pokrenuti proceduru za vrijednosti prebrojani_broj = 1 i 2.
*/
--15 bodova
 
--a
go
create view viewNabavljaciRadnici
as
select n.nazivDobavljaca, count (r.radnikID) as prebrojaniBrojRadnika
from radnik as r inner join nabavka as n
on r.radnikID = n.nabavkaID
group by n.nazivDobavljaca
      
select *
from viewNabavljaciRadnici
order by prebrojaniBrojRadnika
 
--b
 
create procedure zadatak5
(
       @nazivDobavljaca nvarchar (50) = null,
       @prebrojaniBrojRadnika int = null
)
as
begin
       select *
       from viewNabavljaciRadnici
       where (
                    @nazivDobavljaca = nazivDobavljaca or
                    @prebrojaniBrojRadnika = prebrojaniBrojRadnika)
                    and prebrojaniBrojRadnika < 50
end
exec zadatak5 @prebrojaniBrojRadnika = 1
exec zadatak5 @prebrojaniBrojRadnika = 2
 
exec zad5b @prebrojani_broj = 1
exec zad5b @prebrojani_broj = 2
 
 
--------------------------------------------
/*
6.
a) U tabeli radnik dodati kolonu razlika_sati kao cjelobrojnu varijablu sa obaveznom default vrijednošæu 0.
b) U koloni razlika_sati ostaviti 0 ako su sati bolovanja veæi od godišnjeg odmora, inaèe u kolonu smjestiti vrijednost razlike izmeðu sato_bolovanja i sati_god_odmora.
c) Kreirati pogled view_sati u kojem æe biti poruka da li radnik ima više sati godišnjeg odmora ili bolovanja.
Ako je više bolovanja daje se poruka ""bolovanje"", inaèe ""godisnji"". Pogled treba da sadrži ID radnika i poruku.
*/
--10 bodova
 
--a
alter table radnik
add razlikaSati int default(0)
 
--b
update radnik
set razlikaSati =
       case
       when satiBolovanja > satiGodOdmora then 0
       when satiBolovanja <= satiGodOdmora then satiBolovanja - satiGodOdmora
       end
 
select * from radnik
 
--c
create view viewSati
as
select radnikID, 'bolovanje' bolovanjeGodisnji
from radnik
where satiBolovanja > satiGodOdmora
union
select radnikID, 'godisnji' bolovanjeGodisnji
from radnik
where satiBolovanja < satiGodOdmora
 
select * from viewSati
 
-----------------------------------------------
/*
7.
Koristeæi tabelu prodaja kreirati pogled view_prodaja sljedeæe strukture:
       - prodavacID
       - naziv_terit
       - razlika prošlogodišnje prodaje i srednje vrijednosti prošlogodišnje prodaje.
Uslov je da se dohvate zapisi u kojima je bonus bar za 1000 veæi od minimalne vrijednosti bonusa
*/
--10 bodova
create view viewProdaja
as
select prodavacID, nazivTeritorije, proslogodProdaja - (select avg (proslogodProdaja) from prodaja) as razlika
from prodaja
where (bonus - 1000) > (select min(bonus) from prodaja)
 
select * from viewProdaja
 
------------------------------------------
/*
8.
U koloni drzavaID tabele radnik izvršiti promjenu svih vrijednosti u kojima je broj cifara neparan broj. Promjenu izvršiti tako što æe se u umjesto postojeæih
vrijednosti unijeti sluèajno generisani niz znakova.
*/
--10 bodova
update radnik
set drzavaID = cast (left(newid(), 15) as nvarchar)
where len(drzavaID)%2 != 0
 
select drzavaID
from radnik
 
---------------------------------------
/*
9.
Iz tabela nabavka i radnik kreirati pogled view_sifra_transakc koja æe se sastojati od sljedeæih kolona:
       - naziv dobavljaèa,
       - sifra_transakc
Podaci u koloni sifra_transakc æe se formirati spajanjem karaktera imena iz kolone loginID tabele radnik (ime je npr. ken, NE ken0) i rijeèi iz kolone
br_racuna (npr. u LITWARE0001 rijeè je LITWARE) tabele nabavka, izmeðu kojih je potrebno umetnuti donju crtu (_).
Uslov je da se ne dohvataju duplikati (prikaz jedinstvenih vrijednosti) u koloni sifre_transaks.
Obavezno napisati kod za pregled sadržaja pogleda.
*/
--13 bodova
create view viewSifraTransakcije
as
select distinct n.nazivDobavljaca, SUBSTRING(loginID, CHARINDEX ('\', loginID) + 1, len (substring(loginID, charindex ('\', loginID) + 1, len(loginID)) ) - 1) + '_' +
                           left(n.brRacuna, charindex ('0', brRacuna) - 1) as sifraTransakcije
from radnik as r inner join nabavka as n
on r.radnikID =n.nabavkaID
 
select loginID
from radnik
 
-----------------------------------------------
--10.
/*
Kreirati backup baze na default lokaciju, obrisati bazu, a zatim izvršiti restore baze.
Uslov prihvatanja koda je da se može izvršiti.
*/
 
BACKUP DATABASE BP2_2020_09_11
TO DISK = 'BP2_2020_09_11.bak'
GO
 
USE master
DROP DATABASE BP2_2020_09_11
 
RESTORE DATABASE BP2_2020_09_11 FROM DISK = 'BP2_2020_09_11.bak'
USE BP2_2020_09_11
 
--2 boda
 
 
 
-------------------------------------------------------------
/*
Napomena:
A.
Prilikom  bodovanja rješenja prioritet ima rezultat koji upit treba da vrati (broj zapisa, vrijednosti agregatnih funkcija...).
U sluèaju da rezultat upita nije taèan, a pogled, tabela... koji su rezultat tog upita se koriste u narednim zadacima,
tada se rješenja narednih zadataka, bez obzira na taènost koda, ne boduju punim brojem bodova,
jer ni ta rješenja ne mogu vratiti taèan rezultat (broj zapisa, vrijednosti agregatnih funkcija...).
B.
Tokom pisanja koda obratiti posebnu pažnju na tekst zadatka i ono što se traži zadatkom.
Prilikom pregleda rada pokreæe se kod koji se nalazi u sql skripti i
sve ono što nije uraðeno prema zahtjevima zadatka ili je pogrešno uraðeno predstavlja grešku.
*/
 
 
--1.
/*
Kreirati bazu podataka pod vlastitim brojem indeksa.
*/
create database FIT_ispitniZadatak4
go
use FIT_ispitniZadatak4
 
 
/*Prilikom kreiranja tabela voditi raèuna o meðusobnom odnosu izmeðu tabela.
a) Kreirati tabelu osoba sljedeæe strukture:
       - osoba_id          cjelobrojna varijabla, primarni kljuè
       - ime               50 UNICODE karaktera
       - prezime           50 UNICODE karaktera
       - tip_osobe         2 UNICODE karaktera
       - kreditna_id cjelobrojna varijabla
       - tip_kreditne      50 UNICODE karaktera
       - broj_kartice      50 UNICODE karaktera
       - dtm_izdav         datumska varijabla
*/
 
create table osoba
(
       osobaID int constraint PK_osoba primary key not null,
       ime nvarchar (50),
       prezime nvarchar (50),
       tipOsobe nvarchar (2),
       kreditnaID int,
       tipKreditne nvarchar (50),
       brojKartice nvarchar (50),
       datumIzdavanja date
)
 
/*
c) Kreirati tabelu kupac sljedeæe strukture:
       - kupac_id          cjelobrojna varijabla, primarni kljuè
       - osoba_id          cjelobrojna varijabla
       - prodavnica_id cjelobrojna varijabla
       - br_racuna         10 unicode karaktera
*/
 
create table kupac
(
       kupacID int constraint PK_kupac primary key not null,
       osobaID int,
       prodavnicaID int,
       brRacuna nvarchar (10),
       constraint FK_kupacOsoba foreign key (osobaID) references osoba (osobaID)
)
 
/*
c) Kreirati tabelu kupovina sljedeæe strukture:
       - kupovina_id cjelobrojna varijabla, primarni kljuè
       - detalj_id         cjelobrojna varijabla, primarni kljuè
       - narudzba_id 25 UNICODE karaktera
       - kreditna_id cjelobrojna varijabla
       - teritorija_id cjelobrojna varijabla
       - kupac_id          cjelobrojna varijabla
       - kolicina          cjelobrojna varijabla
       - cijena            novèana varijabla
*/
create table kupovina
(
       kupovinaID int,
       detaljID int,
       narudzbaID nvarchar (25),
       kreditnaID int,
       teritorijaID int,
       kupacID int,
       kolicina int,
       cijena money,
       constraint PK_kupovina primary key (kupovinaID, detaljID),
       constraint FK_kupovinaKupac foreign key (kupacID) references kupac (kupacID)
)
 
--10 bodova
-----------------------------------------------------------------------
--2.
/*
a) Koristeæi tabele Person.Person, Sales.PersonCreditCard i Sales.CreditCard baze AdventureWorks2017 izvršiti insert podataka prema sljedeæem pravilu:
       - BusinessEntityID  -> osoba_id
       - FirstName                -> ime
       - LastName                 -> prezime
       - CardType                 -> tip_kreditne
       - PersonType        -> tip_osobe
       - CardNumber        -> broj_kartice
       - CreditCardID             -> kreditna_id
       - ModifiedDate             -> dtm_izdav
*/
 
insert into osoba
select pp.BusinessEntityID, pp.FirstName, pp.LastName, pp.PersonType, cc.CreditCardID, cc.CardType, cc.CardNumber, pcc.ModifiedDate
from AdventureWorks2014.Person.Person as pp inner join AdventureWorks2014.Sales.PersonCreditCard as pcc
on pp.BusinessEntityID = pcc.BusinessEntityID
inner join AdventureWorks2014.Sales.CreditCard as cc
on pcc.CreditCardID = cc.CreditCardID
 
--19118
 
/*
b) Koristeæi tabelu Sales.Customer baze AdventureWorks2017 izvršiti insert podataka prema sljedeæem pravilu:
       - CustomerID  -> kupac_id
       - PersonID          -> osoba_id
       - StoreID           -> prodavnica_id
       - AccountNumber -> br_racuna
uz uslov da PersonID bude veæi od 300.
*/
insert into kupac
select CustomerID, PersonID, StoreID, AccountNumber
from AdventureWorks2014.Sales.Customer
where PersonID > 300
 
--19114
 
/*
c) Koristeæi tabele Sales.SalesOrderHeader i Sales.SalesOrderDetail baze AdventureWorks2017 izvršiti insert podataka u tabelu kupovina prema sljedeæem pravilu:
       - SalesOrderID                    -> kupovina_id
       - SalesOrderDetailID -> detalj_id
       - PurchaseOrderNumber      -> narudzba_id
       - CreditCardID                    -> kreditna_id
       - TerritoryID              -> teritorija_id
       - CustomerID               -> kupac_id
       - OrderQty                        -> kolicina
       - UnitPrice                       -> cijena
uz uslov da CustomerID bude manji od 29000.
*/
insert into kupovina
select soh.SalesOrderID, sod.SalesOrderDetailID, soh.PurchaseOrderNumber, soh.CreditCardID, soh.TerritoryID, soh.CustomerID, sod.OrderQty, sod.UnitPrice
from AdventureWorks2014.sales.SalesOrderHeader as soh inner join AdventureWorks2014.Sales.SalesOrderDetail as sod
on soh.SalesOrderID = sod.SalesOrderID
where soh.CustomerID < 29000
 
--59297
--10 bodova
 
-----------------------------------------------------------------------
--3.
/*
a)
Kreirati pogled view_ukupno kojim æe se dati ukupna vrijednost svih kupovina koje je osoba ostvarila.
Pogled treba sadržavati kolone:
       - osoba_id
       - ukupno - ukupna svota svih kupovina
Napomena:
Vrijednost jedne kupovine predstavlja umnožak kolièine i cijene.
b)
Odrediti koliko je zapisa veæe, koliko jednako, a koliko manje od srednje vrijednosti kolone ukupno iz view_ukupno.
Rezultat upita treba da vrati prebrojane brojeve sa pripadajuæim oznakama (veæe, jednako, manje).
Ne prihvata se rješenje koje ne vraæa oznake.
*/
--a
go
create view viewUkupno
as
select o.osobaID, sum(kup.kolicina * kup.cijena) as ukupno
from osoba as o inner join kupac as k
on o.osobaID = k.osobaID
inner join kupovina as kup
on k.kupacID = kup.kupacID
group by o.osobaID
go
 
select *
from viewUkupno
--18000
 
--b)
/*Odrediti koliko je zapisa veæe, koliko jednako, a koliko manje od srednje vrijednosti kolone ukupno iz view_ukupno.
Rezultat upita treba da vrati prebrojane brojeve sa pripadajuæim oznakama (veæe, jednako, manje).
Ne prihvata se rješenje koje ne vraæa oznake.*/
 
select 'veæe', count (*)
from viewUkupno
where ukupno > (select avg(ukupno) from viewUkupno)
 
select 'jednako', count (*)
from viewUkupno
where ukupno = (select avg(ukupno) from viewUkupno)
 
select 'manje', count (*)
from viewUkupno
where ukupno < (select avg(ukupno) from viewUkupno)
 
/*
veæe   6509
jednako      0
manje  11491
*/
--10 bodova
 
 
-----------------------------------------------------------------------
--4.
/*
a)
U tabeli osoba dodati izraèunatu kolonu lozinka.
Podatak u koloni lozinka æe se sastojati od sljedeæih dijelova:
       -      2 znaka sluèajno generisani karakteri
       -      bilo koja 3 karaktera iz kolona ime u obrnutom redoslijedu
       -      bilo koja 3 karaktera iz kolone prezime u obrnutom redoslijedu
       -      godina iz datuma izdavanja
       -      dan iz datuma izdavanja
       -      mjesec iz datuma izdavanja
Izmeðu svih dijelova lozinke OBAVEZNO treba biti donja crta.
b)
U tabeli kupac u koloni prodavnica_id umjesto NULL vrijednosti ubaciti vrijednost podatka iz kolone osoba_id uveæan za 1.
*/
alter table osoba
add lozinka as left (newid(), 2) + '_' + reverse (left(ime, 3)) + '_' + reverse (left(prezime, 3)) + '_' +
                    cast (year (getdate()) as nvarchar) + '_' + cast (day(getdate()) as nvarchar) + '_' + cast (month (getdate()) as nvarchar)
 
update kupac
set prodavnicaID = osobaID + 1
where prodavnicaID is null
 
--18484
--10 bodova
 
 
 
 
-----------------------------------------------------------------------
--5.
/*
a)
Kreirati proceduru proc_narudzba kojom æe se smještati podaci u kolonu narudzba_id tabele kupovina.
Podatak u koloni narudzba_id æe se sastoji od sljedeæih dijelova:
       - 1. karakter je slovo n
       - kupovina_id
       - detalj_id
Izmeðu svih dijelova narudzba_id OBAVEZNO treba biti srednja crta.
OBAVEZNO pokrenuti proceduru.
b)
Nad kolonom narudzba_id kreirati ogranièenje kojim æe biti moguæe unijeti podatak koji ima najviše 20 karaktera.
*/
--a
go
create procedure proc_narudzba
as
begin
update kupovina
set narudzba_id = 'n' + '-' + CAST (kupovina_id as nvarchar) + '-' + CAST (detalj_id as nvarchar)
end
 
exec proc_narudzba
--59297
 
--b
alter table kupovina
add constraint CK_narudzba_id check (len (narudzba_id) <= 20)
--10 bodova
 
 
 
-----------------------------------------------------------------------
--6.
/*
Neka su za cijene definirane sljedeæe 4 klase:
       - 0-999,99          => klasa 1
       - 1000-1999,99      => klasa 2
       - 2000-2999,99      => klasa 3
       - 3000-3999,99      => klasa 4
Kreirati proceduru proc_klasa kojom æe se izvršiti klasificiranje cijena prema navedenim klasama.
Procedura treba da vrati cijenu (njenu vrijednost) i oznaku klase kojoj pripada,
uz uslov da procedura ne vraæa duplikate cijena.
*/
go
create procedure proc_klasa
as
begin
select distinct cijena, 'klasa 1' as klasa
from   kupovina
where  cijena between 0 and 999.99
union
select distinct cijena, 'klasa 2' as klasa
from   kupovina
where  cijena between 1000 and 1999.99
union
select distinct cijena, 'klasa 3' as klasa
from   kupovina
where  cijena between 2000 and 2999.99
union
select distinct cijena, 'klasa 4' as klasa
from   kupovina
where  cijena between 3000 and 3999.99
order by 1
end
 
exec proc_klasa
--42
--10 bodova
 
 
 
 
-----------------------------------------------------------------------
--7.
/*
a)
Koristeæi tabele baze kreirati pogled view_tip sljedeæe strukture:
       - tip kreditne kartice
       - ID prodavnice
       - prebrojano - prebrojani broj kupovina po tipu kreditne kartice i ID prodavnice
b)
Koristeæi pogled view_tip kreirati proceduru proc_tip koja æe imati parametar za kolonu prebrojano. Pokrenuti proceduru za vrijednosti paramtera 3 i 30.
*/
go
create view view_tip
as
SELECT osoba.tip_kreditne, kupac.prodavnica_id, COUNT(kupovina.kupovina_id) AS prebrojano
FROM   kupac INNER JOIN kupovina
ON           kupac.kupac_id = kupovina.kupac_id
             INNER JOIN osoba ON kupac.osoba_id = osoba.osoba_id
GROUP BY osoba.tip_kreditne, kupac.prodavnica_id
go
--18000
 
--b
go
create procedure proc_prebrojano
(
       @prebrojano int = null
)
as
begin
select prebrojano, count (*)
from view_tip
where  prebrojano = @prebrojano
group by prebrojano
end
 
exec proc_prebrojano 3
exec proc_prebrojano 30
/*
3      4505
30     3
*/
--10 bodova
 
 
-----------------------------------------------------------------------
--8.
/*
Na osnovu tabele osoba kreirati proceduru nakon èijeg pokretanja æe se dobiti ukupan broj osoba èije prezime je jedinstveno.
*/
go
create view view_jedinstveno
as
select prezime, count(*) indikator
from osoba
group by prezime
having COUNT (*) = 1
go
 
go
create procedure proc_jedinstveno
as
begin
select count (*)
from view_jedinstveno
end
 
exec proc_jedinstveno
--585
--10 bodova
 
 
-----------------------------------------------------------------------
--9.
/*
a)
Koristeæi tabele baze kreirati globalnu privremenu tabelu temp sljedeæe strukture:
       - ID osobe
       - tip kreditne kartice
       - klasa - prve 4 cifre iz kolone broj_kartice
       - datum izdavanja
       - ID narudzbe
i u nju povuæi podatke iz odgovarajuæih tabela.
b)
Provjeriti da li je jednom tipu kreditne kartice u privremenoj tabeli pridružena jedna ili više klasa.
*/
SELECT osoba.osoba_id, osoba.tip_kreditne, left (osoba.broj_kartice,4) klasa, osoba.dtm_izdav, kupovina.narudzba_id
into   temp
FROM   kupac INNER JOIN kupovina
ON           kupac.kupac_id = kupovina.kupac_id
             INNER JOIN osoba
             ON kupac.osoba_id = osoba.osoba_id
--52297
 
--b
select distinct tip_kreditne, klasa
from   ##temp
order by 1
--jedna
 
--10 bodova
 
 
-----------------------------------------------------------------------
--10.
/*
a)
Prebrojati broj pojavljivanja dužina podatka u koloni narudzba_id, 
uz uslov da se prikažu samo one vrijednosti dužina koja se pojavljaju više od 1000 puta.
b)
Svim zapisima èija dužina podatka se pojavljuje manje od 1000 puta promijeniti sadržaj
kolone narudzba_id tako što æe se na postojeæi podatak dodati tekuæi datum.
*/
--a
select LEN (narudzba_id), COUNT (*)
from kupovina
group by LEN (narudzba_id)
having COUNT (*) > 1000
/*
12     1747
13     42192
14     15213
*/
 
--b
alter table kupovina
drop constraint [CK_narudzba_id]
 
alter table kupovina
alter column narudzba_id nvarchar (50)
 
update kupovina
set narudzba_id = narudzba_id + cast (getdate () as nvarchar)
where LEN (narudzba_id) = 11
--145
--10 bodova
 
 
 
 
/*
Napomena:
A.
Prilikom  bodovanja rješenja prioritet ima rezultat
koji upit treba da vrati (broj zapisa, vrijednosti agregatnih funkcija...).
U sluèaju da rezultat upita nije taèan, a rezultat tog upita se koristi
u narednim zadacima, tada se rješenja narednih zadataka,
bez obzira na taènost koda, ne boduju punim brojem bodova,
jer ni ta rješenja ne mogu vratiti taèan rezultat
(broj zapisa, vrijednosti agregatnih funkcija...).
B.
Tokom pisanja koda obratiti pažnju na tekst zadatka
i ono što se traži zadatkom. Prilikom pregleda rada pokreæe se
kod koji se nalazi u sql skripti i
sve ono što nije uraðeno prema zahtjevima zadatka
ili je pogrešno uraðeno predstavlja grešku.
*/
 
------------------------------------------------
/*
BODOVANJE
       Maksimalni broj bodova:           80
       Prag prolaznosti:                 44
RASPON OCJENA
       bodovi              ocjena
       0      -      43           5
       44     -      58           6
       59     -      73           7
       74     -      80           8
*/
------------------------------------------------
 
 
 
------------------------------------------------
--1.
/*
Kreirati bazu podataka pod vlastitim brojem indeksa
i aktivirati je.
*/
 
create database FIT_ispitniZadatak3
use FIT_ispitniZadatak3
 
---------------------------------------------------------------------------
--Prilikom kreiranja tabela voditi raèuna o njihovom meðusobnom odnosu.
---------------------------------------------------------------------------
/*
a)
Kreirati tabelu prodavac koja æe imati sljedeæu strukturu:
       - prodavac_id, cjelobrojni tip, primarni kljuè
       - naziv_posla, 50 unicode karaktera
       - dtm_rodj, datumski tip
       - bracni_status, 1 karakter
       - prod_kvota, novèani tip
       - bonus, novèani tip
*/
create table prodavac
(
       prodavacID int constraint PK_prodavac primary key not null,
       nazivPosla nvarchar (50),
       datumRodjenja date,
       bracniStatus char (1),
       prodKvota money,
       bonus money
)
/*
b)
Kreirati tabelu prodavnica koja æe imati sljedeæu strukturu:
       - prodavnica_id, cjelobrojni tip, primarni kljuè
       - naziv_prodavnice, 50 unicode karaktera
       - prodavac_id, cjelobrojni tip
*/
create table prodavnica
(
       prodavnicaID int constraint PK_prodavnica primary key not null,
       nazivProdavnice nvarchar (50),
       prodavacID int,
       constraint FK_prodavac foreign key (prodavacID) references prodavac (prodavacID)
)
 
/*
c)
Kreirati tabelu kupac_detalji koja æe imati sljedeæu strukturu:
       - detalj_id, cjelobrojni tip, primarni kljuè, automatsko punjenje sa poèetnom vrijednošæu 1 i inkrementom 1
       - kupac_id, cjelobrojni tip, primarni kljuè
       - prodavnica_id, cjelobrojni tip
       - br_rac, 10 karaktera
       - dtm_narudz, datumski tip
       - kolicina, skraæeni cjelobrojni tip
       - cijena, novèani tip
       - popust, realni tip
*/
create table kupacDetalj
(
       detaljID int identity (1,1),
       kupacID int,
       prodavnicaID int,
       brojRacuna nvarchar (10),
       datumNarudzbe date,
       kolicina smallint,
       cijena money,
       popust real,
       constraint PK_detaljiKupac primary key (detaljID, kupacID),
       constraint FK_prodavnicaID foreign key (prodavnicaID) references prodavnica (prodavnicaID)
)
 
 
--10 bodova
--2.
/*
a)
Koristeæi tabele HumanResources.Employee i Sales.SalesPerson
baze AdventureWorks2017 zvršiti insert podataka u
tabelu prodavac prema sljedeæem pravilu:
       - BusinessEntityID -> prodavac_id
       - JobTitle -> naziv_posla
       - BirthDate -> dtm_rodj
       - MaritalStatus -> bracni_status
       - SalesQuota -> prod_kvota
       - Bonus -> nžbonus
*/
insert into prodavac
select  sp.BusinessEntityID, e.JobTitle, e.BirthDate, e.MaritalStatus, sp.SalesQuota, sp.Bonus
from AdventureWorks2014.HumanResources.Employee as e inner join AdventureWorks2014.Sales.SalesPerson as sp
on e.BusinessEntityID = sp.BusinessEntityID
 
select *
from prodavac
 
/*
b)
Koristeæi tabelu Sales.Store baze AdventureWorks2017
izvršiti insert podataka u tabelu prodavnica
prema sljedeæem pravilu:
       - BusinessEntityID -> prodavnica_id
       - Name -> naziv_prodavnice
       - SalesPersonID -> prodavac_id
*/
 
insert into prodavnica
select BusinessEntityID, name, SalesPersonID
from AdventureWorks2014.Sales.Store
 
select *
from prodavnica
 
/*
b)
Koristeæi tabele Sales.Customer, Sales.SalesOrderHeader i SalesOrderDetail
baze AdventureWorks2017 izvršiti insert podataka u tabelu kupac_detalji
prema sljedeæem pravilu:
       - CustomerID -> kupac_id
       - StoreID -> prodavnica_id
       - AccountNumber -> br_rac
       - OrderDate -> dtm_narudz
       - OrderQty -> kolicina
       - UnitPrice -> cijena
       - UnitPriceDiscount -> popust
Uslov je da se ne dohvataju zapisi u kojima su
StoreID i PersonID NULL vrijednost
*/
insert into kupacDetalj
select c.CustomerID, c.StoreID, c.AccountNumber, soh.OrderDate, sod.OrderQty, sod.UnitPrice, sod.UnitPriceDiscount
from AdventureWorks2014.Sales.Customer as c inner join AdventureWorks2014.Sales.SalesOrderHeader as soh
on c.CustomerID = soh.CustomerID
inner join AdventureWorks2014.Sales.SalesOrderDetail as sod
on soh.SalesOrderID = sod.SalesOrderID
where c.StoreID is not null and c.PersonID is not null
 
select*
from kupacDetalj
 
--10 bodova
 
 
 
--3.
/*
a)
U tabeli prodavac dodati izraèunatu kolonu god_rodj
u koju æe se smještati godina roðenja prodavca.
*/
 
select *
from prodavac
 
alter table prodavac
add godinaRodjenja as year(datumRodjenja)
 
select * from prodavac
 
 
 
/*
b)
U tabeli kupac_detalji promijeniti tip podatka
kolone cijena iz novèanog u decimalni tip oblika (8,2)
*/
 
alter table kupacDetalj
alter column cijena decimal(8,2)
 
/*
c)
U tabeli kupac_detalji dodati standardnu kolonu
lozinka tipa 20 unicode karaktera.
*/
 
alter table kupacDetalj
add lozinka nvarchar(20)
 
select * from kupacDetalj
 
/*
d)
Kolonu lozinka popuniti tako da bude spojeno
10 sluèajno generisanih znakova i
numerièki dio (bez vodeæih nula) iz kolone br_rac
*/
update kupacDetalj
set lozinka = left(newid(), 10) + right(brojRacuna, 5)
 
select *
from kupacDetalj
 
--10 bodova
 
 
 
 
 
 
--4.
/*
Koristeæi tabele prodavnica i kupac_detalji
dati pregled sumiranih kolièina po
nazivu prodavnice i godini naruèivanja.
Sortirati po nazivu prodavnice.
*/
 
select p.nazivProdavnice, sum(kd.kolicina) as kolicinaSumirano, year(kd.datumNarudzbe) as godina
from prodavnica as p inner join kupacDetalj as kd
on p.prodavnicaID = kd.prodavnicaID
group by p.nazivProdavnice, year(kd.datumNarudzbe)
order by 1
 
--6 bodova
 
 
--5.
/*
Kreirati pogled v_prodavac_cijena sljedeæe strukture:
       - prodavac_id
       - bracni_status
       - sum_cijena
Uslov je da se u pogled dohvate samo oni zapisi u
kojima je sumirana vrijednost veæa od 1000000.
*/
 
go
create view view_prodavacCijena
as
select p.prodavacID, p.bracniStatus, sum(kd.cijena) as cijenaSumirano
from prodavac as p inner join prodavnica as pr
on p.prodavacID = pr.prodavacID
inner join kupacDetalj as kd
on pr.prodavnicaID = kd.prodavnicaID
group by p.prodavacID, p.bracniStatus
having sum(kd.cijena) > 1000000
 
select*
from view_prodavacCijena
 
 
--8 bodova
 
--6.
/*
Koristeæi pogled v_prodavac_cijena
kreirati proceduru p_prodavac_cijena sa parametrom
bracni_status èija je zadata (default) vrijednost M.
Uslov je da se procedurom dohvataju zapisi u kojima je
vrijednost u koloni sum_cijena veæa od srednje vrijednosti kolone sum_cijena.
Obavezno napisati kod za pokretanje procedure.
*/
 
go
create procedure procProdavacCijena
(
       @bracni_status char(1) = 'M'
)
as
begin
select *
from view_prodavacCijena
where bracniStatus = @bracni_status and
       cijenaSumirano > (select avg(cijenaSumirano) from view_prodavacCijena)
end
 
exec procProdavacCijena;
--8 bodova
 
 
--7.
/*
Iz tabele kupac_detalji prikazati zapise u kojima je
vrijednost u koloni cijena jednaka
minimalnoj, odnosno, maksimalnoj vrijednosti u ovoj koloni.
Upit treba da vraæa kolone kupac_id, prodavnica_id i cijena.
Sortirati u rastuæem redoslijedu prema koloni cijena.
*/
select kupacID, prodavnicaID, cijena
from kupacDetalj
where cijena = (select min(cijena) from kupacDetalj) or cijena = (select max(cijena) from kupacDetalj)
 
--8 bodova
 
--8.
/*
a)
U tabeli kupac_detalji kreirati kolonu
cijena_sa_popustom tipa decimal (8,2).
*/
select *
from kupacDetalj
alter table kupacDetalj
add cijenaSaPopustom decimal(8,2)
 
select *
from kupacDetalj
 
/*
b)
Koristeæi tabelu kupac_detalji
kreirati proceduru p_popust sa parametrom
godina koji æe odgovarati godini iz datum naruèivanja.
Procedura æe vršiti update kolone cijena_sa_popustom
ako je vrijednost parametra veæa od 2013,
inaèe se daje poruka 'transakcija nije izvršena'.
Testirati funkcionisanje procedure za vrijednost
parametra godina 2014.
Obavezno napisati kod za provjeru sadržaja tabele
nakon što se pokrene procedura.
*/
go
create procedure procPopust
(     
       @godina int
)
as
begin
       begin transaction
       update kupacDetalj
       set cijenaSaPopustom = cijena * (1 - popust)
       where YEAR(datumNarudzbe) = @godina
       if (@godina > 2013)
             begin
                    commit transaction
                    print('Transakcija uspjesna!')
             end
             else
                    begin
                           print ('Transankcija nije izvrsena!')
                           rollback transaction
                    end
end
exec procPopust @godina = 2014;
exec procPopust @godina = 2010;
--testiranje
 
select *
from kupacDetalj
--8 bodova
 
--9.
/*
a)
U tabeli prodavac kreirati kolonu min_kvota tipa decimal (8,2).
i na njoj postaviti ogranièenje da se
ne može unijeti negativna vrijednost.
*/
 
alter table prodavac
add minimalnaKvota decimal (8,2) constraint CK_minimalnaKvota check (minimalnaKvota >=0)
 
select *
from prodavac
 
/*
b)
Kreirati skalarnu funkciju f_kvota sa parametrom prod_kvota.
Funkcija æe vraæati rezultat tipa decimal (8,2)
koji æe se raèunati po pravilu:
       10% od prod_kvota
*/
go
create function f_Kvota(@prod_Kvota money)
returns decimal (8,2)
as
begin
       return @prod_Kvota * 0.10
end
 
 
--testiranje
 
/*
c)
Koristeæi funkciju f_kvota izvršiti update
kolone min_kvota u tabeli prodavac
*/
update prodavac
set minimalnaKvota = dbo.f_Kvota(prodKvota)
 
 
select * from prodavac
--8 bodova
 
--10.
/*
a)
Kreirati tabelu prodavac_log strukture:
       - log_id, primarni kljuè, automatsko punjenje sa poèetnom vrijednošæu 1 i inkrementom 1
       - prodavac_id int
       - min_kvota decimal (8,2)
       - dogadjaj varchar (3)
       - mod_date datetime
*/
create table prodavacLog
(
       logID int constraint PK_logID primary key identity (1,1),
       prodavacID int,
       min_kvota decimal (8,2),
       dogadjaj varchar(3),
       mod_date datetime
)
 
 
/*
b)
Nad tabelom prodavac kreirati okidaè t_ins_prod
kojim æe se prilikom inserta podataka u
tabelu prodavac izvršiti insert podataka u
tabelu prodavac_log sa naznakom aktivnosti
(insert, update ili delete).
*/
go
create trigger triggerInsProd
on prodavac
after insert
as
begin
       insert into prodavacLog
       select i.prodavacID, i.minimalnaKvota, 'ins', getdate()
       from inserted as i
end
 
 
/*
c)
U tabelu prodavac insertovati zapis
291, Sales Manager, 1985-09-30, M, 250000.00, 985.00, -20000.00
Ako je potrebno izvršiti podešavanja
koja æe omoguæiti insrt zapisa.
*/
 
--da bi mogli izvrsiti insert potrebno je dropati constraint
alter table prodavac
drop constraint CK_minimalnaKvota
 
insert into prodavac
values (291, 'Sales Manager', '1985-09-30', 'M', 250000.00, 985.00, -20000.00)
 
insert into prodavac
values(291, 'Sales Manager', '1985-09-30','M', 250000.00, 985.00, -20000.00)
 
/*
d)
Obavezno napisati kod za pregled sadržaja
tabela prodavac i prodavac_log.
*/
select * from prodavac
select * from prodavacLog
--4 boda
 
 
 
--29.06.2022.
 
--BAZE PODATAKA II � ISPIT
 
--***Prilikom izrade zadataka, OBAVEZNO iznad svakog zadatka napisati redni broj zadatka npr (4c). Zadaci koji ne budu ozna�eni na prethodno definisan na�in ne�e biti evaluirani.
 
--1.   Kroz SQL kod kreirati bazu podataka sa imenom va�eg broja indeksa.
CREATE DATABASE FIT_ispitniZadatak1
GO
USE FIT_ispitniZadatak1
GO
--2.   U kreiranoj bazi podataka kreirati tabele sa sljede�om strukturom:
--a)   Proizvodi
--�   ProizvodID, cjelobrojna vrijednost i primarni klju�, autoinkrement
--�   Naziv, 50 UNICODE karaktera (obavezan unos)
--�   SifraProizvoda, 25 UNICODE karaktera (obavezan unos)
--�   Boja, 15 UNICODE karaktera
--�   NazivKategorije, 50 UNICODE (obavezan unos)
--�   Tezina, decimalna vrijednost sa 2 znaka iza zareza
 
create table proizvodi
(
       proizvodID int constraint PK_proizvod primary key identity(1,1),
       naziv nvarchar(50) not null,
       sifraProizvoda nvarchar (25) not null,
       boja nvarchar (15),
       nazivKategorije nvarchar (50) not null,
       tezina decimal (8,2)
)
--b)   ZaglavljeNarudzbe
--�   NarudzbaID, cjelobrojna vrijednost i primarni klju�, autoinkrement
--�   DatumNarudzbe, polje za unos datuma i vremena (obavezan unos)
--�   DatumIsporuke, polje za unos datuma i vremena
--�   ImeKupca, 50 UNICODE (obavezan unos)
--�   PrezimeKupca, 50 UNICODE (obavezan unos)
--�   NazivTeritorije, 50 UNICODE (obavezan unos)
--�   NazivRegije, 50 UNICODE (obavezan unos)
--�   NacinIsporuke, 50 UNICODE (obavezan unos)
create table zaglavljeNarudzbe
(
       narudzbaID int constraint PK_zaglavljeNaruzdbe primary key identity (1,1),
       datumNarudzbe datetime not null,
       datumIsporuke datetime,
       imeKupca nvarchar (50) not null,
       prezimeKupca nvarchar (50) not null,
       nazivTeritorije nvarchar (50) not null,
       nazivRegije nvarchar (50) not null,
       nacinIsporuke nvarchar (50) not null
)
--c)   DetaljiNarudzbe
--�   NarudzbaID, cjelobrojna vrijednost, strani klju�
--�   ProizvodID, cjelobrojna vrijednost, strani klju�
--�   Cijena, nov�ani tip (obavezan unos),
--�   Kolicina, skra�eni cjelobrojni tip (obavezan unos),
--�   Popust, nov�ani tip (obavezan unos)
create table detaljiNarudzbe
(
       narudzbaID int not null constraint FK_zaglavljeNarudzbe foreign key references zaglavljeNarudzbe(narudzbaID),
       proizvodID int not null constraint FK_proizvodi foreign key references proizvodi(proizvodID),
       cijena money not null,
       kolicina smallint not null,
       popust money not null,
       detaljiNarudzbe int constraint PK_detaljiNarudzbe primary key identity (1,1)
       --primarni kljuc se mora pratiti, ukoliko ga nema mozemo iskoristiti naziv same tabele da nam bude primarni kljuc
)
--**Jedan proizvod se mo�e vi�e puta naru�iti, dok jedna narud�ba mo�e sadr�avati vi�e proizvoda. U okviru jedne narud�be jedan proizvod se mo�e naru�iti vi�e puta.
--7 bodova
 
 
--3.   Iz baze podataka AdventureWorks u svoju bazu podataka prebaciti sljede�e podatke:
--a)   U tabelu Proizvodi dodati sve proizvode, na mjestima gdje nema pohranjenih podataka o te�ini zamijeniti vrijednost sa 0
--�   ProductID -> ProizvodID
--�   Name  -> Naziv     
--�   ProductNumber -> SifraProizvoda
--�   Color -> Boja
--�   Name (ProductCategory) -> NazivKategorije
--�   Weight -> Tezina
SET IDENTITY_INSERT proizvodi ON
 
insert into proizvodi (proizvodID, naziv, sifraProizvoda, boja, nazivKategorije, tezina)
select p.ProductID, p.name, p.ProductNumber, p.Color, pc.name, isnull(p.weight, 0)
from AdventureWorks2014.Production.Product as p inner join AdventureWorks2014.Production.ProductSubcategory as ps
on p.ProductSubcategoryID = ps.ProductSubcategoryID
inner join AdventureWorks2014.Production.ProductCategory as pc
on ps.ProductCategoryID = pc.ProductCategoryID
 
select*
from proizvodi
 
--b)   U tabelu ZaglavljeNarudzbe dodati sve narud�be
--�   SalesOrderID -> NarudzbaID
--�   OrderDate -> DatumNarudzbe
--�   ShipDate -> DatumIsporuke
--�   FirstName (Person) -> ImeKupca
--�   LastName (Person) -> PrezimeKupca
--�   Name (SalesTerritory) -> NazivTeritorije
--�   Group (SalesTerritory) -> NazivRegije
--�   Name (ShipMethod) -> NacinIsporuke
 
SET IDENTITY_INSERT zaglavljeNarudzbe ON
 
insert into zaglavljeNarudzbe(narudzbaID, datumNarudzbe, datumIsporuke, imeKupca, prezimeKupca, nazivTeritorije, nazivRegije, nacinIsporuke)
select soh.SalesOrderID, soh.OrderDate, soh.ShipDate, pp.FirstName, pp.LastName, st.name, st.[Group], sm.name
from AdventureWorks2014.Sales.SalesOrderHeader as soh inner join AdventureWorks2014.sales.Customer as sc
on soh.CustomerID = sc.CustomerID
inner join AdventureWorks2014.Person.Person as pp
on sc.PersonID = pp.BusinessEntityID
inner join AdventureWorks2014.Sales.SalesTerritory as st
on st.TerritoryID = soh.TerritoryID
inner join AdventureWorks2014.Purchasing.ShipMethod as sm
on soh.ShipMethodID = sm.ShipMethodID
 
SET IDENTITY_INSERT zaglavljeNarudzbe OFF
go
 
select*
from zaglavljeNarudzbe
 
 
--c)   U tabelu DetaljiNarudzbe dodati sve stavke narud�be
--�   SalesOrderID -> NarudzbaID
--�   ProductID -> ProizvodID
--�   UnitPrice -> Cijena
--�   OrderQty -> Kolicina
--�   UnitPriceDiscount -> Popust
--8 bodova
 
 
INSERT INTO detaljiNarudzbe
SELECT SOD.SalesOrderID, SOD.ProductID, SOD.UnitPrice, SOD.OrderQty, SOD.UnitPriceDiscount
FROM AdventureWorks2014.Sales.SalesOrderDetail AS SOD
GO
 
 
 
--4.  
--a)   (6 bodova) Kreirati upit koji �e prikazati ukupan broj uposlenika po odjelima.
--Potrebno je prebrojati samo one uposlenike koji su trenutno aktivni, odnosno rade na datom odjelu.
--Tako�er, samo uzeti u obzir one uposlenike koji imaju vi�e od 10 godina radnog sta�a (ne uklju�uju�i grani�nu vrijednost).
--Rezultate sortirati preba broju uposlenika u opadaju�em redoslijedu.(AdventureWorks2017)
USE AdventureWorks2017
SELECT
    D.Name,
    COUNT(*) 'Broj uposlenika'
FROM HumanResources.Employee AS E
    INNER JOIN HumanResources.EmployeeDepartmentHistory AS EDH ON E.BusinessEntityID = EDH.BusinessEntityID
    INNER JOIN HumanResources.Department AS D ON EDH.DepartmentID = D.DepartmentID
WHERE EDH.EndDate IS NULL AND DATEDIFF(YEAR, E.HireDate, GETDATE()) > 10
GROUP BY D.Name
ORDER BY 'Broj uposlenika' DESC
GO
--, SUM(IIF(POD.RejectedQty>100,1,0)) 'Broj stavki'
--b)   Kreirati upit koji prikazuje po mjesecima ukupnu vrijednost poru�ene robe za skladi�te, te ukupnu koli�inu primljene robe, isklju�ivo u 2012 godini. Uslov je da su tro�kovi prevoza bili izme�u 500 i 2500, a da je dostava izvr�ena CARGO transportom. Tako�er u rezultatima upita je potrebno prebrojati stavke narud�be na kojima je odbijena koli�ina ve�a od 100.(AdventureWorks2017)
 
USE AdventureWorks2017
--1. NA�IN
SELECT
    MONTH(POH.OrderDate) 'Mjesec',
    SUM(POD.LineTotal),
    SUM(POD.ReceivedQty),
    SUM(IIF(POD.RejectedQty > 100, 1, 0)) 'Broj stavki'
FROM Purchasing.PurchaseOrderHeader AS POH
    INNER JOIN Purchasing.PurchaseOrderDetail AS POD ON POH.PurchaseOrderID = POD.PurchaseOrderID
   INNER JOIN Purchasing.ShipMethod AS SM ON POH.ShipMethodID = SM.ShipMethodID
WHERE YEAR(POH.OrderDate)=2012
    AND POH.Freight BETWEEN 500 AND 2500
    AND SM.Name LIKE '%CARGO%'
GROUP BY MONTH(POH.OrderDate) 
GO 
--2. NA�IN 
SELECT
  MONTH(POH.OrderDate) 'Mjesec',
  SUM(POD.LineTotal),
  SUM(POD.ReceivedQty),
  (SELECT COUNT(*)
      FROM Purchasing.PurchaseOrderHeader AS POH1
             INNER JOIN Purchasing.PurchaseOrderDetail AS POD1 ON POH1.PurchaseOrderID = POD1.PurchaseOrderID
        INNER JOIN Purchasing.ShipMethod AS SM1 ON POH1.ShipMethodID = SM1.ShipMethodID
      WHERE MONTH(POH.OrderDate) = MONTH(POH1.OrderDate)
          AND POD1.RejectedQty > 100
          AND YEAR(POH1.OrderDate) = 2012
          AND POH1.Freight BETWEEN 500 AND 2500
          AND SM1.Name LIKE '%CARGO%')
FROM Purchasing.PurchaseOrderHeader AS POH
  INNER JOIN Purchasing.PurchaseOrderDetail AS POD ON POH.PurchaseOrderID = POD.PurchaseOrderID
  INNER JOIN Purchasing.ShipMethod AS SM ON POH.ShipMethodID = SM.ShipMethodID
WHERE YEAR(POH.OrderDate)=2012
  AND POH.Freight BETWEEN 500 AND 2500
  AND SM.Name LIKE '%CARGO%'
GROUP BY MONTH(POH.OrderDate)
 
GO
 
--3. NA�IN
SELECT
    Q.Mjesec,
    SUM(Q.[Ukupna vrijednost]) 'Ukupna vrijednost',
    SUM(Q.[Ukupna koli�ina]) 'Ukupna koli�ina',
    SUM(Q.[Stavke narudzbe]) 'Stavke narudzbe'
FROM (SELECT
    MONTH(POH.OrderDate) 'Mjesec',
    SUM(POD.LineTotal) 'Ukupna vrijednost',
    SUM(POD.ReceivedQty) 'Ukupna koli�ina',
    (SELECT COUNT(*)
           FROM AdventureWorks2017.Purchasing.PurchaseOrderDetail AS POD1
             WHERE POD1.RejectedQty > 100 AND POD.PurchaseOrderID = POD1.PurchaseOrderID) 'Stavke narudzbe'
FROM Purchasing.PurchaseOrderDetail AS POD
    INNER JOIN Purchasing.PurchaseOrderHeader AS POH ON POD.PurchaseOrderID = POH.PurchaseOrderID
    INNER JOIN Purchasing.ShipMethod AS SM ON POH.ShipMethodID = SM.ShipMethodID
WHERE YEAR(POH.OrderDate) = 2012
    AND (POH.Freight BETWEEN 500 AND 2500)
    AND SM.Name LIKE '%CARGO%'
GROUP BY MONTH(POH.OrderDate), POD.PurchaseOrderID) AS Q
GROUP BY Q.Mjesec
 
GO
--PROVJERA
SELECT
    POH.OrderDate,
    POD.RejectedQty,
    POD.PurchaseOrderDetailID,
    POH.PurchaseOrderID
FROM Purchasing.PurchaseOrderHeader AS POH
    INNER JOIN Purchasing.PurchaseOrderDetail AS POD ON POH.PurchaseOrderID = POD.PurchaseOrderID
    INNER JOIN Purchasing.ShipMethod AS SM ON POH.ShipMethodID = SM.ShipMethodID
WHERE YEAR(POH.OrderDate)=2012
    AND POH.Freight BETWEEN 500 AND 2500
    AND SM.Name LIKE '%CARGO%'
    AND MONTH(POH.OrderDate) = 1
  --GROUP BY MONTH(POH.OrderDate), POD.RejectedQty
GO 
--c)   (11 bodova) Prikazati ukupan broj narud�bi koje su obradili uposlenici, za svakog uposlenika pojedina�no. Uslov je da su narud�be kreirane u 2011 ili 2012 godini, te da je u okviru jedne narud�be odobren popust na dvije ili vi�e stavki. Tako�er uzeti u obzir samo one narud�be koje su isporu�ene u Veliku Britaniju, Kanadu ili Francusku. (AdventureWorks2017)
 
SELECT
    PP.LastName,
    PP.FirstName,
    COUNT(*) BrojNarudzbi
FROM Person.Person AS PP
    INNER JOIN HumanResources.Employee AS E ON PP.BusinessEntityID = E.BusinessEntityID
    INNER JOIN Sales.SalesPerson AS SP ON SP.BusinessEntityID = E.BusinessEntityID
    INNER JOIN Sales.SalesOrderHeader AS SOH ON SOH.SalesPersonID = SP.BusinessEntityID
    INNER JOIN Sales.SalesTerritory AS ST ON ST.TerritoryID = SOH.TerritoryID
WHERE YEAR(SOH.OrderDate) IN (2011,2012)
    AND ST.Name IN ('United Kingdom', 'Canada', 'France')
    AND (SELECT COUNT(*)
           FROM Sales.SalesOrderDetail AS SOD
        WHERE SOD.SalesOrderID = SOH.SalesOrderID AND SOD.UnitPriceDiscount>0) >=2
GROUP BY PP.LastName, PP.FirstName
ORDER BY BrojNarudzbi DESC
 
GO
 
 
 
 
--d)   (11 bodova) Napisati upit koji �e prikazati sljede�e podatke o proizvodima: naziv proizvoda,
--naziv kompanije dobavlja�a, koli�inu na skladi�tu, te kreiranu �ifru proizvoda. �ifra se sastoji od sljede�ih vrijednosti: (Northwind)
--1)   Prva dva slova naziva proizvoda
--2)   Karakter /
--3)   Prva dva slova druge rije�i naziva kompanije dobavlja�a, uzeti u obzir one kompanije koje u nazivu imaju 2 ili 3 rije�i
--4)   ID proizvoda po pravilu ukoliko se radi o jednocifrenom broju na njega dodati slovo 'a', u ostalim slu�ajevima dodati obrnutu vrijednost broja
--Npr. Za proizvod sa nazivom Chai i sa dobavlja�em naziva Exotic Liquids, �ifra �e btiti Ch/Li1a.
 
USE Northwind
GO
SELECT
    P.ProductName,
    S.CompanyName,
    P.UnitsInStock,
    CONCAT(
        LEFT(P.ProductName, 2),
        '/',
        LEFT(SUBSTRING(S.CompanyName, CHARINDEX(' ', S.CompanyName) + 1, LEN(S.CompanyName)), 2),
        IIF(P.ProductID BETWEEN 1 AND 9, 'a', REVERSE(P.ProductID))
    ),
    -- Moze i sa +, meni bolje izgleda kad je grupisano pod CONCAT
    -- LEFT(P.ProductName, 2)
    --     + '/'
    --     + LEFT(SUBSTRING(S.CompanyName, CHARINDEX(' ', S.CompanyName) + 1, LEN(S.CompanyName)), 2)
    --     + IIF(P.ProductID BETWEEN 1 AND 9, 'a', REVERSE(P.ProductID)),
    P.ProductID
FROM Products AS P
INNER JOIN Suppliers AS S ON P.SupplierID = S.SupplierID
WHERE LEN(S.CompanyName) - LEN(REPLACE(S.CompanyName, ' ', '')) IN (1, 2)
 
GO
--           37 bodova
--5.  
--a)   (3 boda) U kreiranoj bazi kreirati index kojim �e se ubrzati pretraga prema �ifri i nazivu proizvoda. Napisati upit za potpuno iskori�tenje indexa.
USE brojIndexa
GO
 
CREATE INDEX IX_Search_Products
ON Proizvodi(SifraProizvoda, Naziv)
 
SELECT P.SifraProizvoda, P.Naziv
FROM Proizvodi AS P
WHERE P.SifraProizvoda LIKE 'F%' AND P.Naziv LIKE 'H%'
--b)   (7 bodova) U kreiranoj bazi kreirati proceduru sp_search_products kojom �e se vratiti podaci o proizvodima na osnovu kategorije kojoj pripadaju ili te�ini.
--Korisnici ne moraju unijeti niti jedan od parametara ali u tom slu�aju procedura ne vra�a niti jedan od zapisa.
--Korisnicima unosom ve� prvog slova kategorije se trebaju osvje�iti zapisi, a vrijednost unesenog parametra te�ina �e vratiti one proizvode �ija te�ina je ve�a od  unesene vrijednosti.
GO
CREATE PROCEDURE sp_search_products
(
    @Kategorija NVARCHAR(50)=NULL,
    @Tezina DECIMAL(18,2)=NULL
)
AS
BEGIN
       SELECT *
       FROM Proizvodi AS P
       WHERE P.NazivKategorije LIKE @Kategorija + '%' OR P.Tezina > @Tezina
END
GO
 
 
EXEC sp_search_products 'Clothing'
EXEC sp_search_products @Tezina = 2.2
 
--c)   (18 bodova) Zbog progla�enja dobitnika nagradne igre odr�ane u prva dva mjeseca drugog kvartala 2013 godine potrebno je kreirati upit. Upitom �e se prikazati tre�a najve�a narud�ba (vrijednost bez popusta) za svaki mjesec pojedina�no. Obzirom da je u pravilima nagradne igre potrebno nagraditi 2 osobe (mu�karca i �enu) za svaki mjesec, potrebno je u rezultatima upita prikazati pored navedenih stavki i o kojem se kupcu radi odnosno ime i prezime, te koju je nagradu osvojio. Nagrade se dodjeljuju po sljede�em pravilu:
--�   za �ene u prvom mjesecu drugog kvartala je stoni mikser, dok je za mu�karce usisiva�
--�   za �ene u drugom mjesecu drugog kvartala je pegla, dok je za mu�karc multicooker
-- Obzirom da za kupce nije eksplicitno naveden spol, odre�ivat �e se po pravilu: Ako je zadnje slovo imena a, smatra se da je osoba �enskog spola u suprotnom radi se o osobi mu�kog spola. Rezultate u formiranoj tabeli dobitnika sortirati prema vrijednosti narud�be u opadaju�em redoslijedu. (AdventureWorks2017)
--28 bodova
--6.   Dokument teorija_28_06_2022, preimenovati va�im brojem indeksa, te u tom dokumentu izraditi pitanja.
--20 bodova
--SQL skriptu (bila prazna ili ne) imenovati Va�im brojem indeksa npr IB200001.sql, te istu zajedno sa .docx dokumentom kompromitovati  u jednu datoteku naziva npr IB200001.zip i upload-ovati na ftp u folder Upload.
--Maksimalan broj bodova:100 
--Prag prolaznosti: 55
GO
USE AdventureWorks2017
 
SELECT *
FROM
    (SELECT TOP 1
        T1.SalesOrderID,
        T1.FirstName,
        T1.LastName,
        T1.[Ukupna vrijednost],
        T1.Nagrada
    FROM
        (SELECT TOP 3
            SOH.SalesOrderID,
            PP.FirstName,
            PP.LastName,
            SUM(SOD.UnitPrice * SOD.OrderQty) 'Ukupna vrijednost',
            'Stoni mikser' Nagrada
            FROM Sales.SalesOrderHeader AS SOH
                INNER JOIN Sales.SalesOrderDetail AS SOD ON SOH.SalesOrderID = SOD.SalesOrderID
                INNER JOIN Sales.Customer AS SC ON SOH.CustomerID = SC.CustomerID
                INNER JOIN Person.Person AS PP ON SC.PersonID = PP.BusinessEntityID
            WHERE YEAR(SOH.OrderDate) = 2013 AND MONTH(SOH.OrderDate) = 4 AND RIGHT(PP.FirstName, 1) = 'a'
            GROUP BY SOH.SalesOrderID, PP.FirstName, PP.LastName
            ORDER BY 'Ukupna vrijednost' DESC) AS T1
        ORDER BY 'Ukupna vrijednost' ASC) AS T2
UNION
SELECT *
FROM
    (SELECT TOP 1
        T1.SalesOrderID,
        T1.FirstName,
        T1.LastName,
        T1.[Ukupna vrijednost],
        T1.Nagrada
    FROM
        (SELECT TOP 3
            SOH.SalesOrderID,
            PP.FirstName,
            PP.LastName,
            SUM(SOD.UnitPrice * SOD.OrderQty) 'Ukupna vrijednost',
            'Usisiva�' Nagrada
            FROM Sales.SalesOrderHeader AS SOH
                INNER JOIN Sales.SalesOrderDetail AS SOD ON SOH.SalesOrderID = SOD.SalesOrderID
                INNER JOIN Sales.Customer AS SC ON SOH.CustomerID = SC.CustomerID
                INNER JOIN Person.Person AS PP ON SC.PersonID = PP.BusinessEntityID
            WHERE YEAR(SOH.OrderDate) = 2013 AND MONTH(SOH.OrderDate) = 4 AND RIGHT(PP.FirstName, 1) <> 'a'
            GROUP BY SOH.SalesOrderID, PP.FirstName, PP.LastName
            ORDER BY 'Ukupna vrijednost' DESC) AS T1
        ORDER BY 'Ukupna vrijednost' ASC) AS T2
UNION
SELECT *
FROM
    (SELECT TOP 1
        T1.SalesOrderID,
        T1.FirstName,
        T1.LastName,
        T1.[Ukupna vrijednost],
        T1.Nagrada
    FROM
        (SELECT TOP 3
            SOH.SalesOrderID,
            PP.FirstName,
            PP.LastName,
            SUM(SOD.UnitPrice * SOD.OrderQty) 'Ukupna vrijednost',
            'Pegla' Nagrada
            FROM Sales.SalesOrderHeader AS SOH
                INNER JOIN Sales.SalesOrderDetail AS SOD ON SOH.SalesOrderID = SOD.SalesOrderID
                INNER JOIN Sales.Customer AS SC ON SOH.CustomerID = SC.CustomerID
                INNER JOIN Person.Person AS PP ON SC.PersonID = PP.BusinessEntityID
            WHERE YEAR(SOH.OrderDate) = 2013 AND MONTH(SOH.OrderDate) = 5 AND RIGHT(PP.FirstName, 1) = 'a'
            GROUP BY SOH.SalesOrderID, PP.FirstName, PP.LastName
            ORDER BY 'Ukupna vrijednost' DESC) AS T1
        ORDER BY 'Ukupna vrijednost' ASC) AS T2
UNION
SELECT *
FROM
    (SELECT TOP 1
        T1.SalesOrderID,
        T1.FirstName,
        T1.LastName,
        T1.[Ukupna vrijednost],
        T1.Nagrada
    FROM
        (SELECT TOP 3
            SOH.SalesOrderID,
            PP.FirstName,
            PP.LastName,
            SUM(SOD.UnitPrice * SOD.OrderQty) 'Ukupna vrijednost',
            'Multicooker' Nagrada
            FROM Sales.SalesOrderHeader AS SOH
                INNER JOIN Sales.SalesOrderDetail AS SOD ON SOH.SalesOrderID = SOD.SalesOrderID
                INNER JOIN Sales.Customer AS SC ON SOH.CustomerID = SC.CustomerID
                INNER JOIN Person.Person AS PP ON SC.PersonID = PP.BusinessEntityID
            WHERE YEAR(SOH.OrderDate) = 2013 AND MONTH(SOH.OrderDate) = 5 AND RIGHT(PP.FirstName, 1) <> 'a'
            GROUP BY SOH.SalesOrderID, PP.FirstName, PP.LastName
            ORDER BY 'Ukupna vrijednost' DESC) AS T1
        ORDER BY 'Ukupna vrijednost' ASC) AS T2
 
 
-- Naredni kod nije Elda pisala
-- Usrana alternativa
GO
CREATE PROCEDURE Nagradna_Igra  
    @NagradaM nvarchar(max),
    @NagradaZ nvarchar(max),
    @Spol varchar(1),
    @Godina int,
    @Mjesec int  
AS  
SELECT
    SOH.SalesOrderID,
    PP.FirstName,
    PP.LastName,
    SUM(SOD.UnitPrice * SOD.OrderQty) 'Ukupna vrijednost',
    IIF(@Spol = 'M' AND RIGHT(PP.FirstName, 1) <> 'a', @NagradaM, @NagradaZ) Nagrada
FROM Sales.SalesOrderHeader AS SOH
    INNER JOIN Sales.SalesOrderDetail AS SOD ON SOH.SalesOrderID = SOD.SalesOrderID
    INNER JOIN Sales.Customer AS SC ON SOH.CustomerID = SC.CustomerID
    INNER JOIN Person.Person AS PP ON SC.PersonID = PP.BusinessEntityID
WHERE YEAR(SOH.OrderDate) = @Godina
    AND MONTH(SOH.OrderDate) = @Mjesec
    AND ((@Spol = 'M' AND RIGHT(PP.FirstName, 1) <> 'a') OR (@Spol = 'Z' AND RIGHT(PP.FirstName, 1) = 'a'))
GROUP BY SOH.SalesOrderID, PP.FirstName, PP.LastName
ORDER BY 'Ukupna vrijednost' DESC
OFFSET 2 ROWS FETCH NEXT 1 ROWS ONLY
GO 
 
 
CREATE TABLE #Dobitnici
(
    SalesOrderID INT,
    FirstName VARCHAR(MAX),
    LastName VARCHAR(MAX),
    UkupnaVrijednost MONEY,
    Nagrada VARCHAR(MAX)
)
 
INSERT INTO #Dobitnici
EXECUTE Nagradna_Igra @NagradaM = 'Multicooker', @NagradaZ = 'Pegla', @Godina = 2013, @Mjesec = 4, @Spol = 'M'
 
INSERT INTO #Dobitnici
EXECUTE Nagradna_Igra @NagradaM = 'Multicooker', @NagradaZ = 'Pegla', @Godina = 2013, @Mjesec = 4, @Spol = 'Z'
 
INSERT INTO #Dobitnici
EXECUTE Nagradna_Igra @NagradaM = 'Stoni mikser', @NagradaZ = 'Usisiva�', @Godina = 2013, @Mjesec = 5, @Spol = 'M'
 
INSERT INTO #Dobitnici
EXECUTE Nagradna_Igra @NagradaM = 'Stoni mikser', @NagradaZ = 'Usisiva�', @Godina = 2013, @Mjesec = 5, @Spol = 'Z'
 
SELECT * FROM #Dobitnici
 
DROP TABLE #Dobitnici
 
 
 
 
use pubs
 
select a.au_fname, a.au_lname, count(ta.title_id) as 'Ukupan broj naslova'
from pubs.dbo.authors as a
inner join pubs.dbo.titleauthor as ta
on a.au_id = ta.au_id
group by a.au_fname, a.au_lname
having COUNT(ta.title_id) >=2
order by 3 desc
 
create view view_2
as
select t.title, t.type, t.price, s.qty, YEAR(s.ord_date) 'Godina prodaje', MONTH(s.ord_date) 'Mjesec prodaje', st.stor_name
from titles as t
inner join sales as s
on t.title_id = s.title_id
inner join stores as st
on s.stor_id = st.stor_id
where YEAR(s.ord_date) = 1994 and t.price between 10 and 20
 
select*
from view_2
 
create procedure proc_3(
@au_id varchar(11),
@au_lname varchar(40),
@au_fname varchar(20),
@phone char(12),
@address varchar(40),
@city varchar(20),
@state char(2),
@zip char(5),
@contract bit
)
as
begin
insert into authors
values (@au_id, @au_lname, @au_fname, @phone, @address, @city, @state, @zip, @contract)
end
 
select*
from authors
exec proc_3 @au_id = '222-55-6851',
@au_lname = 'Gološ',
@au_fname = 'Kemal',
@phone = '062 967-6080',
@address = 'Blagaj bb',
@city = 'Mostar',
@state = 'MO',
@zip = '88201',
@contract = '1'
 
create procedure proc_4(
@au_id varchar(11)
)
as
begin
delete from authors
where au_id = @au_id
end
 
exec proc_4 @au_id = '222-55-6851'
select *
from authors
where au_id = '222-55-6851'
 
 
 
 
 
 
 
--1
create database indeks2
go
use indeks2
 
--2
--2a
create table Proizvodi
(
       ProizvodID          int constraint PK_proizvod primary key,
       Naziv               nvarchar (50) not null,
       SifraProizvoda      nvarchar (25) not null,
       Boja                nvarchar (15),
       NazivKategorije     nvarchar (50) not null,
       Tezina              decimal (8,2)
)
 
--2b
create table ZaglavljeNarudzbe
(
       NaruzdbaID          int constraint PK_zaglavljeNarudzbe primary key,
       DatumNarudzbe datetime not null,
       DatumIsporuke datetime,
       ImeKupca            nvarchar (50) not null,
       PrezimeKupca  nvarchar (50) not null,
       NazivTeritorije     nvarchar (50) not null,
       NazivRegije         nvarchar (50) not null,
       NacinIsporuke nvarchar (50) not null
)
 
--2c
create table DetaljiNarudzbe
(
       NarudzbaID    int constraint FK_DetNar_ZagNar foreign key (NarudzbaID) references ZaglavljeNarudzbe (NaruzdbaID),
       ProizvodID    int constraint FK_DetNar_Proizv foreign key (ProizvodID) references Proizvodi (ProizvodID),
       Cijena        money not null,
       Kolicina      smallint not null,
       Popust        money not null,
       constraint PK_DetaljiNarudzbe primary key (NarudzbaID, ProizvodID)
)
 
--3
--3a
insert into Proizvodi
select p.ProductID,p.Name, p.ProductNumber, p.Color, pc.Name, p.Weight
from   AdventureWorks2014.Production.Product as p inner join AdventureWorks2014.Production.ProductSubcategory as ps
on           p.ProductSubcategoryID = ps.ProductSubcategoryID
             inner join AdventureWorks2014.Production.ProductCategory as pc
             on ps.ProductCategoryID = pc.ProductCategoryID
 
--3b
insert into ZaglavljeNarudzbe
select soh.SalesOrderID, soh.OrderDate, soh.ShipDate, p.FirstName, p.LastName, st.Name, st.[Group], sm.Name
from   AdventureWorks2014.Sales.SalesTerritory as st inner join AdventureWorks2014.Sales.SalesOrderHeader as soh
on           st.TerritoryID = soh.TerritoryID
             inner join AdventureWorks2014.Purchasing.ShipMethod as sm
             on soh.ShipMethodID = sm.ShipMethodID
             inner join AdventureWorks2014.Sales.Customer as c
             on soh.CustomerID = c.CustomerID
             inner join AdventureWorks2014.Person.Person as p
             on c.PersonID = p.BusinessEntityID
 
--3c
insert into DetaljiNarudzbe
select sod.SalesOrderID, sod.ProductID, sod.UnitPrice, sod.OrderQty, sod.UnitPriceDiscount
from   AdventureWorks2014.Sales.SalesOrderDetail as sod
 
 
--4
--4a
select COUNT(e.BusinessEntityID) as 'ukupan broj zaposlenih', d.GroupName, DATEDIFF(year, e.HireDate, getdate()) as 'god radnog staža'
from   AdventureWorks2014.HumanResources.Employee as e inner join AdventureWorks2014.HumanResources.EmployeeDepartmentHistory as edh
on           e.BusinessEntityID = edh.BusinessEntityID
             inner join AdventureWorks2014.HumanResources.Department as d
             on edh.DepartmentID = d.DepartmentID
where  DATEDIFF(year, e.HireDate, getdate()) > 10 and edh.EndDate is not null
group by d.GroupName, e.HireDate
order by 1 desc
 
--4b
select MONTH(poh.OrderDate) 'mjesec', SUM(pod.StockedQty * pod.UnitPrice) as 'ukupna vrijednost robe', SUM(pod.ReceivedQty) as 'ukupna kolicina', poh.Freight, sm.Name
from   AdventureWorks2014.Purchasing.PurchaseOrderDetail as pod inner join AdventureWorks2014.Purchasing.PurchaseOrderHeader as poh
on           pod.PurchaseOrderID = poh.PurchaseOrderID
             inner join AdventureWorks2014.Purchasing.ShipMethod as sm
             on poh.ShipMethodID = sm.ShipMethodID
where  poh.Freight between 500 and 2500 and sm.Name like '%CARGO%' and YEAR(poh.OrderDate) > '2012'
group by poh.Freight, sm.Name, poh.OrderDate
 
--5c
select count (soh.SalesOrderID) as 'ukupno narudzbe', sp.BusinessEntityID, sod.UnitPriceDiscount, st.Name
from   AdventureWorks2014.Sales.SalesOrderDetail as sod inner join AdventureWorks2014.Sales.SalesOrderHeader as soh
on           sod.SalesOrderID = soh.SalesOrderID inner join AdventureWorks2014.Sales.SalesPerson as sp
             on soh.SalesPersonID = sp.BusinessEntityID inner join AdventureWorks2014.Sales.SalesTerritory as st
             on sp.TerritoryID = st.TerritoryID inner join AdventureWorks2014.HumanResources.Employee as e
             on sp.BusinessEntityID = e.BusinessEntityID
where  (YEAR(soh.OrderDate) = 2011 or year(soh.OrderDate) = 2012) and st.Name in ('Canada', 'United Kingdom', 'France')
group by sp.BusinessEntityID, sod.UnitPriceDiscount, st.Name
 
--5c
select p.ProductName, s.CompanyName, p.UnitsInStock, left(p.ProductName,2) + '/' +
             left(SUBSTRING(s.CompanyName, charindex(' ', s.CompanyName) + 1, LEN(s.CompanyName)),2) +
             IIF (p.ProductID between 1 and 9, 'a', reverse(p.ProductID)) as 'SifraProizvoda'
from   Northwind.dbo.Suppliers as s inner join Northwind.dbo.Products as p
on           s.SupplierID = p.SupplierID
 
--5
--5a
create nonclustered index IX_sifra_naziv on Proizvodi
(
       SifraProizvoda asc,
       Naziv asc
)
 
--5b
create procedure sp_search
(
       @Kategorija nvarchar (50) = null,
       @Tezina decimal (8,2) = null
)
as
begin
             select *
             from Proizvodi as p
             where p.NazivKategorije like @Kategorija + '%' or p.Tezina > @Tezina
end
go
 
exec sp_search @Tezina = 2.2
exec sp_search @Kategorija = 'C'
 
 
 
 
--1 ZADATAK
 
CREATE DATABASE Indeks
GO
USE Indeks
GO
 
CREATE TABLE Narudzba
(
       NarudzbaID INT NOT NULL PRIMARY KEY (NarudzbaID),
       DatumNarudzbe DATE NULL,
       DatumPrijema DATE NULL,
       DatumIsporuke DATE NULL,
       TrosakPrevoza MONEY NULL,
       PunaAdresa NVARCHAR (70) NULL
)
 
CREATE TABLE Dobavljac
(
       DobavljacID INT NOT NULL PRIMARY KEY (DobavljacID),
       NazivDobavljaca nvarchar(40) NOT NULL,
       PunaAdresa nvarchar(60) NULL,
       Drzava nvarchar(15) NULL,
      
)
 
CREATE TABLE Proizvod
(
       NarudzbaID INT NOT NULL CONSTRAINT FK_Proizvod_Narudzba FOREIGN KEY (NarudzbaID) REFERENCES Narudzba (NarudzbaID),
       DobavljacID INT NOT NULL CONSTRAINT FK_Proizvod_Dobavljac FOREIGN KEY (DobavljacID) REFERENCES Dobavljac (DobavljacID),  
       ProizvodID INT NOT NULL,
       NazivProizvoda NVARCHAR (40) NOT NULL,
       Cijena INT NOT NULL,
       Kolicina INT NOT NULL,
       Popust DECIMAL (3,2) NOT NULL,
       Raspolozivost BIT NOT NULL,
       CONSTRAINT PK_Proizvod PRIMARY KEY (NarudzbaID, DobavljacID, ProizvodID)
)
--2 ZADATAK
 
--2a
INSERT INTO Narudzba
SELECT o.OrderID, o.OrderDate, o.RequiredDate, o.ShippedDate,o.Freight, o.ShipAddress + ' '+ ISNULL(o.ShipPostalCode,'0000')+ ' '+o.ShipCity
FROM Northwind.dbo.Orders as o
WHERE YEAR(o.OrderDate)>=1997 AND o.ShippedDate IS NOT NULL
ORDER BY o.Freight
--657
 
--2b
INSERT INTO Dobavljac
SELECT S.SupplierID, S.CompanyName, S.Address + S.PostalCode + S.City, S.Country
FROM Northwind.dbo.Suppliers as S
--29
 
--2c
INSERT INTO Proizvod
SELECT OD.OrderID, P.SupplierID, P.ProductID, P.ProductName, OD.UnitPrice,OD.Quantity,OD.Discount,P.Discontinued
FROM Northwind.dbo.Products as P
inner join Northwind.dbo.[Order Details] as OD
on P.ProductID=OD.ProductID
inner join Northwind.dbo.Orders as O
on O.OrderID=OD.OrderID
WHERE OD.UnitPrice>10 AND OD.Discount>0 AND YEAR(O.OrderDate)>=1997 AND O.ShippedDate IS NOT NULL
--512
 
--3 ZADATAK
--Iz tabele Proizvod dati pregled ukupnog broja ostvarenih narudzbi po dobavljaèu i proizvodu.
 
SELECT P.DobavljacID,P.ProizvodID,COUNT(P.DobavljacID) AS 'Broj narudzbi'
FROM Proizvod AS P
GROUP BY P.DobavljacID,P.ProizvodID
ORDER BY 1
--62
 
--4 ZADATAK
--Iz tabele Proizvod dati pregled ukupnog prometa ostvarenog po dobavljaèu i narudžbi uz uslov da se prikažu samo oni zapisi
--kod kojih je vrijednost prometa manja od 1000 i odobreni popust veæi od 10%. Ukupni promet izraèunati uz uzimanje u obzir i odobrenog popusta.
 
SELECT  P.DobavljacID,P.NarudzbaID,SUM(P.Cijena*P.Kolicina*(1-P.Popust)) AS Promet
FROM Proizvod AS P
WHERE P.Popust>0.1
GROUP BY P.DobavljacID,P.NarudzbaID
HAVING SUM(P.Cijena*P.Kolicina*(1-P.Popust))<1000
 
--5 ZADATAK
--Iz tabele Narudzba dati pregled svih narudzbi kod kojih je broj dana od datuma narudžbe do datuma isporuke manji od 10.
--Pregled æe se sastojati od ID narudžbe, broja dana razlike i kalendarske godine,
--pri èemu je razdvojiti pregled po godinama - 1997 i 1998 (prvo sve 1997, zatim sve 1998).
--Sortirati po broju dana isporuke u opadajuæem redoslijedu.
 
SELECT NarudzbaID, DATEDIFF (DAY, DatumNarudzbe, DatumIsporuke) AS BrDanaIsporuke, YEAR (DatumIsporuke) AS Godina
FROM Narudzba
WHERE DATEDIFF (DAY, DatumNarudzbe, DatumIsporuke) < 10
ORDER BY 3, 2
--495
 
SELECT N.NarudzbaID, DATEDIFF(DAY,N.DatumNarudzbe,N.DatumIsporuke) AS 'Broj dana razlike', '1997' AS 'Godina'
FROM Narudzba AS N
WHERE  DATEDIFF(DAY,N.DatumNarudzbe,N.DatumIsporuke)<10 AND YEAR(N.DatumIsporuke)=1997
UNION
SELECT N.NarudzbaID, DATEDIFF(DAY,N.DatumNarudzbe,N.DatumIsporuke) AS 'Broj dana razlike', '1998' AS 'Godina'
FROM Narudzba AS N
WHERE  DATEDIFF(DAY,N.DatumNarudzbe,N.DatumIsporuke)<10 AND YEAR(N.DatumIsporuke)=1998
ORDER BY 2 DESC
--495
 
 
 
--6 ZADATAK
--Iz tabele Narudzba dati pregled svih narudzbi kod kojih je isporuka izvršena u istom mjesecu.
--Pregled æe se sastojati od ID narudžbe, broja dana razlike, mjeseca narudžbe, mjeseca isporuke i kalendarske godine,
--pri èemu je potrebno razdvojiti pregled po godinama (1997 i 1998 - prvo sve 1997, zatim sve 1998).
--Sortirati po broju dana isporuke u opadajuæem redoslijedu.
 
SELECT N.NarudzbaID, DATEDIFF(DAY,N.DatumNarudzbe,N.DatumIsporuke) AS 'Broj dana razlike',
       MONTH(N.DatumNarudzbe) AS 'Mjesec narudzbe',MONTH(N.DatumIsporuke) AS 'Mjesec isporuke','1997' AS 'Godina'
FROM Narudzba AS N
WHERE  MONTH(N.DatumNarudzbe)=MONTH(N.DatumIsporuke) AND YEAR(N.DatumIsporuke)=1997
UNION
SELECT N.NarudzbaID, DATEDIFF(DAY,N.DatumNarudzbe,N.DatumIsporuke) AS 'Broj dana razlike',
       MONTH(N.DatumNarudzbe) AS 'Mjesec narudzbe',MONTH(N.DatumIsporuke) AS 'Mjesec isporuke','1998' AS 'Godina'
FROM Narudzba AS N
WHERE  MONTH(N.DatumNarudzbe)=MONTH(N.DatumIsporuke) AND YEAR(N.DatumIsporuke)=1998
ORDER BY 2 DESC
--464
 
SELECT NarudzbaID, DATEDIFF (DAY, DatumNarudzbe, DatumIsporuke) AS BrDanaIsporuke, MONTH (DatumIsporuke) AS MjesecNarudzbe,
MONTH (DatumNarudzbe) AS MjesecIsporuke, YEAR (DatumIsporuke) AS Godina
FROM Narudzba
WHERE MONTH (DatumIsporuke) = MONTH (DatumNarudzbe)
ORDER BY 5, 2
 
 
 
 
--7 ZADATAK
--Iz tabele Narudzba dati pregled svih narudžbi koje su isporuèene u Graz ili Köln.
--Pregled æe se sastojati od ID narudžbe i naziva grada. Sortirati po nazivu grada.
 
SELECT N.PunaAdresa, RIGHT(N.PunaAdresa, CHARINDEX(' ',REVERSE(N.PunaAdresa))-1) AS 'Naziv grada'
FROM Narudzba AS N
WHERE RIGHT(N.PunaAdresa, CHARINDEX(' ',REVERSE(N.PunaAdresa))-1) IN('Graz', 'Köln')
ORDER BY 2
 
 
--8 ZADATAK
--Iz tabela Narudzba, Dobavljac i Proizvod kreirati pregled koji æe se sastojati od polja NarudzbaID,
--GodNarudzbe kao godinu iz polja DatumNarudzbe, NazivProizvoda, NazivDobavljaca, Drzava, TrosakPrevoza,
--Ukupno kao ukupna vrijednost narudžbe koja æe se raèunati uz uzimanje u obzir i popusta i postotak koji æe
--davati informaciju o vrijednosti postotka troška prevoza u odnosu na ukupnu vrijenost narudžbe. Uslov je da
--postotak bude veæi od 30% i da je ukupna vrijednost veæa od troška prevoza. Sortirati po vrijednosti postotka u opadajuæem redoslijedu.
 
SELECT N.NarudzbaID,YEAR(N.DatumNarudzbe) AS 'GodNarudzbe', P.NazivProizvoda,D.NazivDobavljaca,D.Drzava,N.TrosakPrevoza,
P.Cijena*P.Kolicina*(1-P.Popust) AS 'Ukupna vrijednost',
LEFT (ROUND (N.TrosakPrevoza / (P.Cijena * P.Kolicina * (1 - P.Popust)) * 100, 2),5) AS Postotak
FROM Proizvod AS P INNER JOIN
     Narudzba AS N
        ON P.NarudzbaID=N.NarudzbaID
       JOIN Dobavljac AS D
       ON D.DobavljacID=P.DobavljacID
WHERE N.TrosakPrevoza / (P.Cijena * P.Kolicina * (1 - P.Popust)) * 100>30 AND P.Cijena*P.Kolicina*(1-p.Popust)>N.TrosakPrevoza
ORDER BY 8 DESC
 
 
--9 ZADATAK
--Iz tabela Narudzba, Dobavljac i Proizvod kreirati pogled koji æe sadržavati ID narudžbe, dan iz datuma prijema,
--raspoloživost, naziv grada iz pune adrese naruèitelja i državu dobavljaèa.
--Uslov je da je datum prijema u 2. ili 3. dekadi mjeseca i da grad naruèitelja Bergamo.
 
CREATE VIEW view_9
AS
SELECT N.NarudzbaID, DAY(N.DatumPrijema) AS 'Dan', P.Raspolozivost,
N.PunaAdresa ,RIGHT(N.PunaAdresa, CHARINDEX(' ',REVERSE(N.PunaAdresa))-1) AS 'Naziv grada', d.Drzava
FROM Proizvod AS P
     INNER JOIN Narudzba AS N
       ON P.NarudzbaID=N.NarudzbaID
       INNER JOIN Dobavljac AS D
       ON D.DobavljacID=P.DobavljacID
--WHERE DAY(N.DatumPrijema) BETWEEN 11 AND 31 AND RIGHT(N.PunaAdresa, CHARINDEX(' ',REVERSE(N.PunaAdresa))-1) = 'Bergamo'
SELECT*
FROM view_9
--7
 
 
--10 ZADATAK
--Iz tabela Proizvod i Dobavljac kreirati proceduru proc1 koja æe sadržavati ID i naziv dobavljaèa i ukupan broj proizvoda
--koji je realizirao dobavljaè. Pokrenuti proceduru za vrijednost ukupno realiziranog broja proizvoda 22 i 14.
 
ALTER PROCEDURE proc1
(
       @DobavljacID int = NULL,
       @NazivDobavljaca nvarchar(40) = NULL,
       @UkBroj int = NULL
)
AS
BEGIN
SELECT P.DobavljacID, D.NazivDobavljaca, COUNT (P.ProizvodID) AS Broj
FROM   Proizvod AS P INNER JOIN Dobavljac AS D
ON           P.DobavljacID = D.DobavljacID
--WHERE      P.DobavljacID = @DobavljacID OR
--           NazivDobavljaca = @NazivDobavljaca OR
--           P.ProizvodID >= 0
GROUP BY P.DobavljacID, D.NazivDobavljaca
HAVING COUNT (P.ProizvodID) = @UkBroj --OR @UkBroj IS NULL
END
 
EXEC proc1  @UkBroj=22
 
 
 
 
--1.
create database DodatniRok
go
use DodatniRok
go
 
drop table Proizvodi
drop table ZaglavljeNarudzbe
drop table DetaljiNarudzbe
 
 
--2.
--a)
create table Proizvodi(
ProizvodID int not null primary key,
Naziv nvarchar(50) not null,
SifraProizvoda nvarchar(50) not null,
Boja nvarchar(15),
NazivKategorije nvarchar(50) not null,
Tezina dec(8,2)
)
--b)
create table ZaglavljeNarudzbe(
NarudzbaID int not null primary key,
DatumNarudzbe datetime not null,
DatumIsporuke datetime,
NazivTeritorije nvarchar(50) not null,
NazivRegije nvarchar(50) not null,
NacinIsporuke nvarchar(50) not null
)
--c)
create table DetaljiNarudzbe(
NarudzbaID int not null constraint FK_DetaljiNarudzbe_ZaglavljeNarudzbe foreign key (NarudzbaID) references ZaglavljeNarudzbe(NarudzbaID),
ProizvodID int not null constraint FK_DetaljiNaruzbe_Proizvodi foreign key (ProizvodID) references Proizvodi(ProizvodID),
Cijena money not null,
Kolicina smallint not null,
Popust money not null,
Constraint PK_DetaljiNarudzbe primary key(NarudzbaID, ProizvodID)
)
 
--3.
--a)
insert into Proizvodi
select P.ProductID, P.Name, P.ProductNumber, ISNULL(P.Color, 'nije naznaceno') as 'Boja', PC.Name, P.Weight
from AdventureWorks2019.Production.Product as P
inner join AdventureWorks2019.Production.ProductSubcategory as SC
on P.ProductSubcategoryID = SC.ProductSubcategoryID
inner join AdventureWorks2019.Production.ProductCategory as PC
on SC.ProductCategoryID = PC.ProductCategoryID
--b)
insert into ZaglavljeNarudzbe
select SOH.SalesOrderID, SOH.OrderDate, SOH.ShipDate, ST.Name, ST.[Group], SM.Name
from AdventureWorks2019.Sales.SalesTerritory as ST
inner join AdventureWorks2019.Sales.SalesOrderHeader as SOH
on ST.TerritoryID = SOH.TerritoryID
inner join AdventureWorks2019.Purchasing.ShipMethod as SM
on SOH.ShipMethodID = SM.ShipMethodID
--c)
insert into DetaljiNarudzbe
select SOD.SalesOrderID, SOD.ProductID, SOD.UnitPrice, SOD.OrderQty, SOD.UnitPriceDiscount
from AdventureWorks2019.Sales.SalesOrderDetail as SOD
 
--4.
--a)
create view v_proizvodi
as
select P.Naziv, P.SifraProizvoda, COUNT(P.ProizvodID) as 'Broj prodanih stavki', SUM(DN.Cijena*DN.Kolicina*(1-DN.Popust)) as 'Ukupna vrijednost sa popustom'
from Proizvodi as P
inner join DetaljiNarudzbe as DN
on P.ProizvodID = DN.ProizvodID
group by P.Naziv, P.SifraProizvoda, (DN.Cijena*DN.Kolicina*(1-DN.Popust))
 select*
from v_proizvodi
order by 4 desc
 
--b)
select COUNT(EDH.BusinessEntityID) as 'Ukupan broj uposlenika', D.Name, DATEDIFF(YEAR, EDH.StartDate, GETDATE()) as 'Radni staz'
from AdventureWorks2019.HumanResources.EmployeeDepartmentHistory as EDH
inner join AdventureWorks2019.HumanResources.Department as D
on EDH.DepartmentID = D.DepartmentID
where DATEDIFF(YEAR, EDH.StartDate, GETDATE()) > 10
group by D.Name, DATEDIFF(YEAR, EDH.StartDate, GETDATE())
order by 1 desc
 
--c)
select SUM(POD.ReceivedQty) as 'Ukupna kolicina primljene robe', SUM(POD.UnitPrice*POD.ReceivedQty) as 'Vrijednost robe',
MONTH(POD.DueDate) as 'Mjesec', YEAR(POD.DueDate) as 'Godina', SM.Name
from AdventureWorks2019.Purchasing.ShipMethod as SM
inner join AdventureWorks2019.Purchasing.PurchaseOrderHeader as POH
on SM.ShipMethodID = POH.ShipMethodID
 inner join AdventureWorks2019.Purchasing.PurchaseOrderDetail as POD
on POH.PurchaseOrderID = POD.PurchaseOrderID
where YEAR(POD.DueDate) = 2012 and POH.Freight between 500 and 2500 and SM.Name like '%CARGO%'
group by MONTH(POD.DueDate), YEAR(POD.DueDate), SM.Name
 
select*
from AdventureWorks2019.Sales.SalesTerritory
 
--d)
select COUNT(SOH.SalesOrderID) 'Ukupan broj narudzbi', YEAR(SOH.OrderDate) as 'Godina narudzbe', ST.Name
from AdventureWorks2019.Sales.SalesOrderHeader as SOH
inner join AdventureWorks2019.Sales.SalesTerritory as ST
on SOH.TerritoryID = ST.TerritoryID
where YEAR(SOH.OrderDate) = 2011 or YEAR(SOH.OrderDate) = 2012 and ST.Name in('United Kingdom', 'France', 'Canada')
group by YEAR(SOH.OrderDate), ST.Name
order by 1 desc
 
select*
from AdventureWorks2019.Sales.SalesTerritory
 
--5.
--a)
create nonclustered index IX_Naziv_Sifra on Proizvodi(
Naziv asc,
SifraProizvoda asc
)
 
--b)
create procedure sp_insert(
@NarudzbaID int = null,
@ProizvodID int = null,
@Cijena money = null,
@Kolicina smallint = null,
@Popust money = null
)
as
begin
insert into DetaljiNarudzbe
values(@NarudzbaID, @ProizvodID, @Cijena, @Kolicina, @Popust)
end
 
select*
from DetaljiNarudzbe
 
exec sp_insert
@NarudzbaID = '43661',
@ProizvodID = '833',
@Cijena = '129.00',
@Kolicina = '1',
@Popust = '50.00'
 
--c)
create procedure sp_search_products(
 
)
 
 
 
-- TABLE
CREATE TABLE demo (ID integer primary key, Name varchar(20), Hint text );
CREATE TABLE Dobavljac (
  DobavljacID INT PRIMARY KEY,
  NazivDobavljaca NVARCHAR(40) NOT NULL,
  PunaAdresa NVARCHAR(60),
  Drzava NVARCHAR(15)
);
CREATE TABLE Narudzba (
  NarudzbaID INT PRIMARY KEY,
  DatumNarudzbe DATE,
  DatumPrijema DATE,
  DatumIsporuke DATE,
  TrosakPrevoza DECIMAL(10,2),
  PunaAdresa NVARCHAR(70)
);
CREATE TABLE Proizvod (
  NarudzbaID INT,
  DobavljacID INT NOT NULL,
  ProizvodID INT NOT NULL,
  NazivProizvoda NVARCHAR(40) NOT NULL,
  Cijena INT NOT NULL,
  Kolicina INT NOT NULL,
  Popust DECIMAL(5,2) NOT NULL,
  Raspolozivost BIT NOT NULL,
  PRIMARY KEY (NarudzbaID, DobavljacID, ProizvodID),
  FOREIGN KEY (NarudzbaID) REFERENCES Narudzba(NarudzbaID),
  FOREIGN KEY (DobavljacID) REFERENCES Dobavljac(DobavljacID)
);
-- INDEX
-- TRIGGER
-- VIEW
 
 
--1.
go
create database BB200001
go
use BB200001
 
--2.
--a)
create table Proizvodi(
ProizvodID int not null primary key,
Naziv nvarchar(50) not null,
SifraProizvoda nvarchar(25) not null,
Boja nvarchar(15),
NazivKategorije nvarchar(50) not null,
Tezina decimal(8,2)
)
 
--b)
create table ZaglavljeNarudzbe(
NarudzbaID int not null primary key,
DatumNarudzbe datetime not null,
DatumIsporuke datetime,
NazivTeritorije nvarchar(50) not null,
NazivRegije nvarchar(50) not null,
NacinIsporuke nvarchar(50) not null
)
 
--c)
create table DetaljiNarudzbe(
NarudzbaID int not null constraint FK_DetaljiNarudzbe_ZaglavljeNarudzbe foreign key (NarudzbaID) references ZaglavljeNarudzbe(NarudzbaID),
ProizvodID int not null constraint FK_DetaljiNarudzbe_Proizvodi foreign key (ProizvodID) references Proizvodi(ProizvodID),
Cijena money not null,
Kolicina smallint not null,
Popust money not null
constraint PK_DetaljiNarudzbe primary key(NarudzbaID, ProizvodID)
)
 
--3.
--a)
insert into Proizvodi
select P.ProductID, P.Name, P.ProductNumber, ISNULL(P.Color, 'nije naznaceno') as 'Boja', PC.Name, P.Weight
from AdventureWorks2019.Production.Product as P
inner join AdventureWorks2019.Production.ProductSubcategory as PS
on P.ProductSubcategoryID = PS.ProductSubcategoryID
inner join AdventureWorks2019.Production.ProductCategory as PC
on PS.ProductCategoryID = PC.ProductCategoryID
 
--b)
insert into ZaglavljeNarudzbe
select SOH.SalesOrderID, SOH.OrderDate, SOH.ShipDate, ST.Name, ST.[Group], SM.Name
from AdventureWorks2019.Sales.SalesTerritory as ST
inner join AdventureWorks2019.Sales.SalesOrderHeader as SOH
on ST.TerritoryID = SOH.TerritoryID
inner join AdventureWorks2019.Purchasing.ShipMethod as SM
on SOH.ShipMethodID = SM.ShipMethodID
 
--c)
insert into DetaljiNarudzbe
select SOD.SalesOrderID, SOD.ProductID, SOD.UnitPrice, SOD.OrderQty, SOD.UnitPriceDiscount
from AdventureWorks2019.Sales.SalesOrderDetail as SOD
 
--4.
--a)
create view v_proizvodi
as
select P.Naziv, P.SifraProizvoda, COUNT(P.ProizvodID) as 'Ukupan broj stavki', SUM(DN.Cijena*DN.Kolicina*(1-DN.Popust)) as 'Ukupna vrijednost'
from Proizvodi as P
inner join DetaljiNarudzbe as DN
on P.ProizvodID = DN.ProizvodID
group by P.Naziv, P.SifraProizvoda
 
select*
from v_proizvodi
order by 4 desc
 
--b)
select COUNT(E.BusinessEntityID) as 'Ukupan broj uposlenika', D.Name, DATEDIFF(YEAR, EDH.StartDate, GETDATE()) as 'Radni staz'
from AdventureWorks2019.HumanResources.Employee as E
inner join AdventureWorks2019.HumanResources.EmployeeDepartmentHistory as EDH
on E.BusinessEntityID = EDH.BusinessEntityID
inner join AdventureWorks2019.HumanResources.Department as D
on EDH.DepartmentID = D.DepartmentID
where DATEDIFF(YEAR, EDH.StartDate, GETDATE()) > 10
group by D.Name, DATEDIFF(YEAR, EDH.StartDate, GETDATE())
order by 1 desc
 
--c)
select MONTH(POD.DueDate) as 'Mjesec', SUM(POD.ReceivedQty) as 'Ukupna količina', SUM(POD.UnitPrice*POD.OrderQty) as 'Ukupna vrijednost'
from AdventureWorks2019.Purchasing.ShipMethod as SM
inner join AdventureWorks2019.Purchasing.PurchaseOrderHeader as POH
on SM.ShipMethodID = POH.ShipMethodID
inner join AdventureWorks2019.Purchasing.PurchaseOrderDetail as POD
on POH.PurchaseOrderID = POD.PurchaseOrderID
where YEAR(POD.DueDate) = 2012 and POH.Freight between 500 and 2500 and SM.Name like '%CARGO%'
group by MONTH(POD.DueDate)
 
--d)
select COUNT(SOH.SalesOrderID) as 'Ukupan broj', P.FirstName as 'Ime uposlenika', ST.Name
from AdventureWorks2019.Sales.SalesTerritory as ST
inner join AdventureWorks2019.Sales.SalesOrderHeader as SOH
on ST.TerritoryID = SOH.TerritoryID
inner join AdventureWorks2019.Person.Person as P
on SOH.SalesPersonID = P.BusinessEntityID
where (YEAR(SOH.OrderDate) = 2011 or YEAR(SOH.OrderDate) = 2012) and ST.Name in('United Kingdom', 'France', 'Canada')
group by P.FirstName, ST.Name
order by 1 desc
 
 
 
go
create database Agregatne
go
create schema Funkcije
 
create table Funkcije.Odjel(
OdjelID smallint not null constraint PK_OdjelID primary key (OdjelID) identity (1,1),
Naziv nvarchar(50) not null,
NazivSektora nvarchar(50) not null,
DatumKreiranja date not null
)
 
insert into Funkcije.Odjel
select D.Name, D.GroupName, LEFT(D.ModifiedDate, 11)
from AdventureWorks2019.HumanResources.Department as D
where D.GroupName like 'Sales and Marketing' or D.GroupName like 'Research and Development'
order by D.GroupName
 
create table Funkcije.AgrOdjel(
NazivSektora nvarchar(50) not null,
UkupnoSektor int
)
 
insert into Funkcije.AgrOdjel
select D.GroupName, COUNT(D.GroupName) as 'Ukupan broj odjela po sektorima'
from AdventureWorks2019.HumanResources.Department as D
group by D.GroupName
 
select YEAR(E.BirthDate) as GodRodj, COUNT(YEAR(E.BirthDate)) BrojPoGodinama,
YEAR(E.HireDate) as GodZap, COUNT(YEAR(E.HireDate)) BrojPoGod
from AdventureWorks2019.HumanResources.Employee as E
group by YEAR(E.BirthDate), YEAR(E.HireDate)
 
SELECT LEFT (BirthDate,4) AS GodRodj,
COUNT (LEFT (BirthDate,4)) BrojRodj,
LEFT (HireDate,4) AS GodZap,
COUNT (LEFT (HireDate,4)) BrojZapos
FROM AdventureWorks2019.HumanResources.Employee as E
GROUP BY LEFT (BirthDate,4), LEFT (HireDate,4)
 
select E.JobTitle, COUNT(E.JobTitle) as 'Ukupan broj'
from AdventureWorks2019.HumanResources.Employee as E
where E.JobTitle like '%manager%'
group by E.JobTitle
 
 
--1.
create database vjezba13_zadaci
use vjezba13_zadaci
 
--2.
--a)
create table Proizvodi(
ProizvodID int not null primary key,
Naziv nvarchar(40) not null,
Cijena money not null,
KolicinaNaSkladistu smallint,
NazivKompanijeDobavljaca nvarchar(40) not null,
Raspolozivost bit not null
)
 
--b)
create table Narudzbe(
NarudzbaID int not null primary key,
DatumNarudzbe date,
DatumPrijema date,
DatumIsporuke date,
Drzava nvarchar(15),
Regija nvarchar(15),
Grad nvarchar(15),
Adresa nvarchar(60)
)
 
--c)
create table StavkeNarudzbe(
NarudzbaID int not null constraint FK_StavkeNarudzbe_Narudzbe foreign key (NarudzbaID) references Narudzbe(NarudzbaID),
ProizvodID int not null constraint FK_StavkeNarudzbe_Proizvodi foreign key (ProizvodID) references Proizvodi(ProizvodID),
Cijena money not null,
Kolicina smallint not null,
Popust real not null
constraint PK_StavkeNarudzbe primary key(NarudzbaID, ProizvodID)
)
 
--3.
--a)
insert into Proizvodi
select P.ProductID, P.ProductName, P.UnitPrice, P.UnitsInStock, S.CompanyName, P.Discontinued
from Northwind.dbo.Products as P
inner join Northwind.dbo.Suppliers as S
on P.SupplierID = S.SupplierID
--77
 
--b)
insert into Narudzbe
select O.OrderID, O.OrderDate, O.RequiredDate, O.ShippedDate, O.ShipCountry, ISNULL(O.ShipRegion, 'nije naznaceno'), O.ShipCity,O.ShipAddress
from Northwind.dbo.Orders as O
--830
 
--c)
insert into StavkeNarudzbe
select OD.OrderID, OD.ProductID, OD.UnitPrice, OD.Quantity, OD.Discount
from Northwind.dbo.[Order Details] as OD
where OD.Quantity > 4
--1985
 
--4
--a)
select*
from Proizvodi as P
where (P.Naziv like 'A%' or P.Naziv like 'C%') and P.Raspolozivost = 0
--9
 
--b)
select N.NarudzbaID, YEAR(N.DatumNarudzbe) as 'Godina narudzbe', SUM(SN.Cijena*SN.Kolicina) as 'Ukupna vrijednost'
from Narudzbe as N
inner join StavkeNarudzbe as SN
on N.NarudzbaID = SN.NarudzbaID
where YEAR(N.DatumNarudzbe) = 1996
group by N.NarudzbaID, YEAR(N.DatumNarudzbe)
having SUM(SN.Cijena*SN.Kolicina) > 500
--104
 
--c)
SELECT ST.Name,round(SUM(SOD.LineTotal),2) 'Ukupni promet'
FROM AdventureWorks2019.Sales.SalesTerritory AS ST
INNER JOIN AdventureWorks2019.Sales.SalesOrderHeader AS SOH
ON ST.TerritoryID=SOH.TerritoryID
INNER JOIN AdventureWorks2019.Sales.SalesOrderDetail AS SOD
ON SOH.SalesOrderID=SOD.SalesOrderID
GROUP BY ST.Name
--10
 
--d)
select SOH.SalesOrderID, COUNT(*) as 'Broj stavki'
from AdventureWorks2019.Sales.SalesOrderHeader as SOH
inner join AdventureWorks2019.Sales.SalesOrderDetail as SOD
on SOH.SalesOrderID = SOD.SalesOrderID
where MONTH(SOH.OrderDate) = 6 and DAY(SOH.OrderDate) between 1 and 10
group by SOH.SalesOrderID
having COUNT(*) > 1
order by 2 desc
--386
 
--e)
select P.ProductID, P.Name, P.ProductNumber,
SUBSTRING(P.ProductNumber, CHARINDEX('-', P.ProductNumber) + 1, LEN(P.ProductNumber)) + '/'
+ CONVERT(nvarchar(50), P.ProductID) as 'Sifra'
from AdventureWorks2019.Production.Product as P
where P.ProductID = 716
 
--5.
--a)
create procedure sp_search_proizvodi(
@Naziv nvarchar(40) = null,
@Dobavljac nvarchar(50) = null
)
as
begin
select*
from Proizvodi as P
where (Naziv like @Naziv + '%' or @Naziv is null) and (NazivKompanijeDobavljaca like @Dobavljac + '%' or @Dobavljac is null)
end
 
exec sp_search_proizvodi
--@Naziv = 'R',
@Dobavljac = 'P'
 
--b)
create procedure sp_insert_stavke(
@NarudzbaID int = null,
@ProizvodID int = null,
@Cijena money = null,
@Kolicina smallint = null,
@Popust money = null
)
as
begin
insert into StavkeNarudzbe
values(@NarudzbaID, @ProizvodID, @Cijena, @Kolicina, @Popust)
end
 
select*
from StavkeNarudzbe
 
exec sp_insert_stavke
@NarudzbaID = '10248',
@ProizvodID = '13',
@Cijena = '15.30',
@Kolicina = '3',
@Popust = '0'
 
--c)
create view pogled_narudzba
as
select SOH.SalesOrderID as 'ID Narudzbe', SOH.OrderDate as 'Datum narudzbe', P.FirstName + ' ' + P.LastName as 'Ime i prezime',
SUM(SOD.UnitPrice*SOD.OrderQty) as 'Ukupna vrijednost'
from AdventureWorks2019.Sales.SalesOrderHeader as SOH
inner join AdventureWorks2019.sales.SalesOrderDetail as SOD
on SOH.SalesOrderID = SOD.SalesOrderID
inner join AdventureWorks2019.Sales.Customer as C
on SOH.CustomerID = C.CustomerID
inner join AdventureWorks2019.Person.Person as P
on C.PersonID = P.BusinessEntityID
group by SOH.SalesOrderID, SOH.OrderDate, P.FirstName, P.LastName
 
select*
from pogled_narudzba
order by 4 desc
 
--d)
create index ix_selectPoNazivuProizvoda
on Proizvodi(Naziv)
 
select Naziv
from Proizvodi
where Naziv like 'B%'
 
--f)
 
 
 
 
--Vježba 13 :: Zadaci
 
--1.   Kroz SQL kod kreirati bazu podataka sa imenom vašeg broja indeksa.
CREATE DATABASE brojIndexa
GO
USE brojIndexa
--2.   U kreiranoj bazi podataka kreirati tabele sa sljedeæom strukturom:
--a)   Proizvodi
--•    ProizvodID, cjelobrojna vrijednost i primarni kljuè
--•    Naziv, 40 UNICODE karaktera (obavezan unos)
--•    Cijena, novèani tip (obavezan unos)
--•    KolièinaNaSkladistu, smallint
--•    NazivKompanijeDobavljaca, 40 UNICODE (obavezan unos)
--•    Raspolozivost, bit (obavezan unos)
CREATE TABLE Proizvodi
(
       ProizvodID INT NOT NULL PRIMARY KEY,
       Naziv NVARCHAR(40) NOT NULL,
       Cijena MONEY NOT NULL,
       KolièinaNaSkladistu SMALLINT,
       NazivKompanijeDobavljaca NVARCHAR(40) NOT NULL,
       Raspolozivost BIT NOT NULL
)
CREATE TABLE Narudzbe
(
       NarudzbaID INT NOT NULL PRIMARY KEY,
       DatumNarudzbe DATE,
       DatumPrijema DATE,
       DatumIsporuke DATE,
       Drzava NVARCHAR(15),
       Regija NVARCHAR(15),
       Grad NVARCHAR(15),
       Adresa NVARCHAR(60)
)
CREATE TABLE StavkeNarudzbe
(
       NarudzbaID INT CONSTRAINT FK_StavkeNarudzbe_Narudzbe FOREIGN KEY REFERENCES Narudzbe(NarudzbaID),
       ProizvodID INT CONSTRAINT FK_StavkeNarudzbe_Proizvodi FOREIGN KEY REFERENCES Proizvodi(ProizvodID),
       Cijena MONEY NOT NULL,
       Kolièina SMALLINT NOT NULL,
       Popust REAL NOT NULL,
       CONSTRAINT PK_StavkeNarudzbe PRIMARY KEY(NarudzbaID,ProizvodID)
)
--**Jedan proizvod se može naæi na više narudžbi, dok jedna narudžba može imati više proizvoda. U okviru jedne narudžbe jedan proizvod se ne može pojaviti više od jedanput.
 
--3.   Iz baze podataka Northwind u svoju bazu podataka prebaciti sljedeæe podatke:
--a)   U tabelu Proizvodi dodati sve proizvode
--•    ProductID -> ProizvodID
--•    ProductName -> Naziv      
--•    UnitPrice -> Cijena
--•    UnitsInStock -> KolicinaNaSkladistu
--•    CompanyName -> NazivKompanijeDobavljaca
--•    Discontinued -> Raspolozivost
INSERT INTO Proizvodi
SELECT P.ProductID,P.ProductName,P.UnitPrice,P.UnitsInStock,S.CompanyName,P.Discontinued
FROM Northwind.dbo.Products AS P
INNER JOIN Northwind.dbo.Suppliers AS S
ON P.SupplierID=S.SupplierID
--b)   U tabelu Narudzbe dodati sve narudžbe, na mjestima gdje nema pohranjenih podataka o regiji zamijeniti vrijednost sa nije naznaceno
--•    OrderID -> NarudzbaID
--•    OrderDate -> DatumNarudzbe
--•    RequiredDate -> DatumPrijema
--•    ShippedDate -> DatumIsporuke
--•    ShipCountry -> Drzava
--•    ShipRegion -> Regija
--•    ShipCity -> Grad
--•    ShipAddress -> Adresa
INSERT INTO Narudzbe
SELECT O.OrderID,O.OrderDate,O.RequiredDate,O.ShippedDate,O.ShipCountry,ISNULL(O.ShipRegion,'nije naznaceno'),O.ShipCity,O.ShipAddress
FROM Northwind.dbo.Orders AS O
--c)   U tabelu StavkeNarudzbe dodati sve stavke narudžbe gdje je kolièina veæa od 4
--•    OrderID -> NarudzbaID
--•    ProductID -> ProizvodID
--•    UnitPrice -> Cijena
--•    Quantity -> Kolièina
--•    Discount -> Popust
INSERT INTO StavkeNarudzbe
SELECT OD.OrderID,OD.ProductID,OD.UnitPrice,OD.Quantity,OD.Quantity
FROM Northwind.dbo.[Order Details] AS OD
WHERE OD.Quantity>4
--4.  
--a)   Prikazati sve proizvode koji poèinju sa slovom a ili c a trenutno nisu raspoloživi.
SELECT*
FROM Proizvodi AS P
WHERE (P.Naziv LIKE 'A%' OR P.Naziv LIKE 'C%') AND P.Raspolozivost=0
--b)   Prikazati narudžbe koje su kreirane 1996 godine i èija je ukupna vrijednost bez popusta veæa od 500KM.
SELECT N.NarudzbaID, SUM(SN.Cijena*SN.Kolièina) 'Ukupna vrijednost'
FROM Narudzbe AS N
INNER JOIN StavkeNarudzbe AS SN
ON N.NarudzbaID=SN.NarudzbaID
WHERE YEAR(N.DatumNarudzbe)=1996
GROUP BY N.NarudzbaID
HAVING SUM(SN.Cijena*SN.Kolièina)>500
select*
from StavkeNarudzbe
--c)   Prikazati ukupni promet (uzimajuæi u obzir i popust) od narudžbi po teritorijama. (AdventureWorks2017)
SELECT ST.Name,round(SUM(SOD.LineTotal),2) 'Ukupni promet'
FROM AdventureWorks2017.Sales.SalesTerritory AS ST
INNER JOIN AdventureWorks2017.Sales.SalesOrderHeader AS SOH
ON ST.TerritoryID=SOH.TerritoryID
INNER JOIN AdventureWorks2017.Sales.SalesOrderDetail AS SOD
ON SOH.SalesOrderID=SOD.SalesOrderID
GROUP BY ST.Name
--d)   Napisati upit koji æe prebrojati stavke narudžbe za svaku narudžbu pojedinaèno. U rezultatima prikazati ID narudžbe i broj stavki, te uzeti u obzir samo one narudžbe èiji je broj stavki veæi od 1, te koje su napravljene izmeðu 1.6. i 10.6. bilo koje godine. (AdventureWorks2017)
SELECT SOH.SalesOrderID,(SELECT COUNT(*)
                                               FROM AdventureWorks2017.Sales.SalesOrderDetail AS SOD
                                               WHERE SOD.SalesOrderID=SOH.SalesOrderID) 'Ukupno stavki'
FROM AdventureWorks2017.Sales.SalesOrderHeader AS SOH
WHERE MONTH(SOH.OrderDate)=6 AND DAY(SOH.OrderDate) BETWEEN 1 AND 10 AND (SELECT COUNT(*)
                                               FROM AdventureWorks2017.Sales.SalesOrderDetail AS SOD
                                               WHERE SOD.SalesOrderID=SOH.SalesOrderID)>1
ORDER BY 2 DESC
 
--ILI
 
SELECT SOH.SalesOrderID, COUNT(*) as BrojStavki
FROM AdventureWorks2017.Sales.SalesOrderHeader AS SOH
       INNER JOIN AdventureWorks2017.Sales.SalesOrderDetail AS SOD
       ON SOH.SalesOrderID = SOD.SalesOrderID
WHERE MONTH(SOH.OrderDate) = 6
AND DAY(SOH.OrderDate) BETWEEN 1 and 10
GROUP BY SOH.SalesOrderID
HAVING COUNT(*) > 1
ORDER BY 2 DESC
--e)   Napisati upit koji æe prikazati sljedeæe podatke o proizvodima: ID proizvoda, naziv proizvoda, šifru proizvoda, te novokreiranu šifru proizvoda. Nova šifra se sastoji od sljedeæih vrijednosti: (AdventureWorks2017)
--•    Svi karakteri nakon prvog znaka - (crtica)
--•    Karakter /
--•    ID proizvoda
--Npr. Za proizvod sa ID-om 716 i šifrom LJ-0192-X, nova šifra æe biti 0192-X/716.
SELECT PP.ProductID, PP.Name, PP.ProductNumber,
SUBSTRING(ProductNumber, CHARINDEX('-', ProductNumber) + 1, LEN(ProductNumber)) + '/' + CONVERT(NVARCHAR(50), PP.ProductID) as Šifra
FROM AdventureWorks2017.Production.Product AS PP
WHERE PP.ProductID=716
 
--5.  
--a)   Kreirati proceduru sp_search_proizvodi kojom æe se u tabeli Proizvodi uraditi pretraga proizvoda prema nazivu prizvoda ili nazivu dobavljaèa. Pretraga treba da radi i prilikom unosa bilo kojeg od slova, ne samo potpune rijeèi. Ukoliko korisnik ne unese ništa od navedenog vratiti sve zapise. Proceduru obavezno pokrenuti.
GO
CREATE PROCEDURE proc_search_proizvodi
(
@Naziv NVARCHAR(40)=NULL,
@Dobavljac NVARCHAR(50)=NULL
)
AS
BEGIN
SELECT * FROM Proizvodi as P
WHERE (Naziv LIKE @Naziv+'%' OR @Naziv IS NULL) AND (NazivKompanijeDobavljaca LIKE @Dobavljac+'%' OR @Dobavljac IS NULL)
END
 
EXEC proc_search_proizvodi @Naziv='C'
--b)   Kreirati proceduru sp_insert_stavkeNarudzbe koje æe vršiti insert nove stavke narudžbe u tabelu stavkeNarudzbe. Proceduru obavezno pokrenuti.
GO
CREATE PROCEDURE sp_insert_stavkeNarudzbe (
@NarudzbaID INT,
@ProizvodID INT,
@Cijena MONEY,
@Kolicina SMALLINT,
@Popust MONEY
)
AS
BEGIN
       INSERT INTO StavkeNarudzbe VALUES (@NarudzbaID, @ProizvodID, @Cijena, @Kolicina, @Popust)
END
GO
EXEC sp_insert_stavkeNarudzbe 10248, 1, 2, 2, 0.02
 
SELECT*
FROM StavkeNarudzbe
WHERE NarudzbaID=10248
 
--c)   Kreirati view koji prikazuje sljedeæe kolone: ID narudžbe, datum narudžbe, spojeno ime i prezime kupca i ukupnu vrijednost narudžbe bez popusta. Podatke sortirati prema ukupnoj vrijednosti u opadajuæem redoslijedu. (AdventureWorks2017)
GO
CREATE VIEW view_5c AS
SELECT SOH.SalesOrderID 'ID narudžbe', SOH.OrderDate 'Datum narudžbe',PP.FirstName + ' '+ PP.LastName AS 'Ime i prezime',
SUM(SOD.UnitPrice*SOD.OrderQty) AS 'Vrijednost'
FROM AdventureWorks2017.Sales.SalesOrderHeader AS SOH
       INNER JOIN AdventureWorks2017.Sales.SalesOrderDetail AS SOD
       ON SOH.SalesOrderID = SOD.SalesOrderID
       INNER JOIN AdventureWorks2017.Sales.Customer AS C
       ON SOH.CustomerID=C.CustomerID
       INNER JOIN AdventureWorks2017.Person.Person AS PP
       ON PP.BusinessEntityID=C.PersonID
GROUP BY SOH.SalesOrderID , SOH.OrderDate ,PP.FirstName , PP.LastName
GO
 
SELECT*
FROM view_5c
ORDER BY Vrijednost DESC
--d)   Kreirati okidaè kojim æe se onemoguæiti brisanje zapisa iz tabele StavkeNarudzbe. Korisnicima je potrebno ispisati poruku Arhivske zapise nije moguæe izbrisati.
GO
CREATE TRIGGER t_instead_delete
ON StavkeNarudzbe
INSTEAD OF DELETE
AS
BEGIN
       SELECT 'Arhivske zapise nije moguæe izbrisati'
END
DELETE
FROM StavkeNarudzbe
--e)   Kreirati index kojim æe se ubrzati pretraga po nazivu proizvoda.
CREATE INDEX ix_selectByProductName
ON Proizvodi(Naziv)
 
SELECT Naziv
FROM Proizvodi
WHERE Naziv LIKE 'A%'
--f)   U tabeli StavkeNarudzbe kreirati polje ModifiedDate u kojem æe se nakon kreiranja okidaèa za izmjenu podataka spremati datum modifikacije podataka za konkretan red na kojem je izvršena modifikacija.
ALTER TABLE StavkeNarudzbe
ADD ModifiedDate DATE
GO
CREATE OR ALTER TRIGGER t_after_update
ON StavkeNarudzbe
AFTER UPDATE
AS
BEGIN
       UPDATE StavkeNarudzbe
       SET ModifiedDate=GETDATE()
       WHERE NarudzbaID IN (SELECT DISTINCT NarudzbaID FROM Inserted) AND ProizvodID IN (SELECT DISTINCT ProizvodID FROM Inserted)
END
 
UPDATE StavkeNarudzbe
SET Cijena=1
WHERE NarudzbaID=10248 AND ProizvodID=1
 
SELECT*
FROM StavkeNarudzbe
 
--ALTER TABLE StavkeNarudzbe
--DROP COLUMN ModifiedDate
 
 
 
--1.
go
create database vjezba_ispitni
go
use vjezba_ispitni
 
--2.
--a)
create table Narudzba(
NarudzbaID int not null primary key,
DatumNarudzbe date,
DatumPrijema date,
DatumIsporuke date,
TrosakPrevoza money,
PunaAdresa nvarchar(70)
)
--b)
create table Dobavljac(
DobavljacID int not null primary key,
NazivDobavljaca nvarchar(40) not null,
PunaAdresa nvarchar(60),
Drzava nvarchar(15)
)
--c)
create table Proizvod(
NarudzbaID int not null constraint FK_Proizvod_Naruzba foreign key (NarudzbaID) references Narudzba(NarudzbaID),
DobavljacID int not null constraint FK_Proizvod_Dobavljac foreign key (DobavljacID) references Dobavljac(DobavljacID),
ProizvodID int not null,
NazivProizvoda nvarchar(40) not null,
Cijena int not null,
Kolicina int not null,
Popust decimal(3,2) not null,
Raspolozivost bit not null,
constraint PK_Proizvod primary key (NarudzbaID, DobavljacID, ProizvodID)
)
 
--2.
--a)
insert into Narudzba
select O.OrderID, O.OrderDate, O.RequiredDate, O.ShippedDate, O.Freight, O.ShipAddress + ' ' + isnull(O.ShipPostalCode, '00000') + ' ' + O.ShipCity as 'Puna adresa'
from Northwind.dbo.Orders as O
where YEAR(O.OrderDate) >= 1997 and O.ShippedDate is not null
order by O.Freight
--b)
insert into Dobavljac
select S.SupplierID, S.CompanyName, S.Address + ' ' + S.PostalCode + ' ' + S.City as 'Puna adresa', S.Country
from Northwind.dbo.Suppliers as S
--c)
insert into Proizvod
select OD.OrderID, P.SupplierID, P.ProductID, P.ProductName, OD.UnitPrice, OD.Quantity, OD.Discount, P.Discontinued
from Northwind.dbo.Products as P
inner join Northwind.dbo.[Order Details] as OD
on P.ProductID = OD.ProductID
inner join Northwind.dbo.Orders as O
on OD.OrderID = O.OrderID
where OD.UnitPrice > 10 and OD.Discount > 0 and YEAR(O.OrderDate) >= 1997 and O.ShippedDate is not null
 
--3.
select count(P.NarudzbaID) as 'Broj narudzbi', P.DobavljacID, P.ProizvodID
from Proizvod as P
group by P.DobavljacID, P.ProizvodID
order by 1
 
--4.
select P.DobavljacID, P.NarudzbaID, SUM(P.Cijena*P.Kolicina*(1-P.Popust)) as 'Ukupni promet'
from Proizvod as P
where P.Popust > 0.1
group by P.DobavljacID, P.NarudzbaID
having SUM(P.Cijena*P.Kolicina*(1-P.Popust)) < 1000
 
--5.
select N.NarudzbaID, DATEDIFF(DAY, N.DatumNarudzbe, N.DatumIsporuke) as 'Broj dana razlike', YEAR(N.DatumIsporuke) as 'Kalendarska godina'
from Narudzba as N
where DATEDIFF(DAY, N.DatumNarudzbe, N.DatumIsporuke) < 10
order by 3, 2
 
select N.NarudzbaID, DATEDIFF(DAY, N.DatumNarudzbe, N.DatumIsporuke) as 'Broj dana razlike', '1997' as 'Kalendarska godina'
from Narudzba as N
where DATEDIFF(DAY, N.DatumNarudzbe, N.DatumIsporuke) < 10 and YEAR(N.DatumIsporuke) = 1997
union
select N.NarudzbaID, DATEDIFF(DAY, N.DatumNarudzbe, N.DatumIsporuke) as 'Broj dana razlike', '1998' as 'Kalendarska godina'
from Narudzba as N
where DATEDIFF(DAY, N.DatumNarudzbe, N.DatumIsporuke) < 10 and YEAR(N.DatumIsporuke) = 1998
order by 2 desc
 
--6.
select N.NarudzbaID, DATEDIFF(DAY, N.DatumNarudzbe, N.DatumIsporuke) as 'Broj dana razlike', MONTH(N.DatumNarudzbe) as 'Mjesec narudzbe', MONTH(N.DatumIsporuke) as 'Mjesec isporuke', YEAR(N.DatumIsporuke) as 'Kalendarska godina'
from Narudzba as N
where MONTH(N.DatumNarudzbe) = MONTH(N.DatumIsporuke)
order by 5, 2
 
select N.NarudzbaID, DATEDIFF(DAY, N.DatumNarudzbe, N.DatumIsporuke) as 'Broj dana razlike', MONTH(N.DatumNarudzbe) as 'Mjesec narudzbe', MONTH(N.DatumIsporuke) as 'Mjesec isporuke', '1997' as 'Kalendarska godina'
from Narudzba as N
where MONTH(N.DatumNarudzbe) = MONTH(N.DatumIsporuke) and YEAR(N.DatumIsporuke) = 1997
union
select N.NarudzbaID, DATEDIFF(DAY, N.DatumNarudzbe, N.DatumIsporuke) as 'Broj dana razlike', MONTH(N.DatumNarudzbe) as 'Mjesec narudzbe', MONTH(N.DatumIsporuke) as 'Mjesec isporuke', '1998' as 'Kalendarska godina'
from Narudzba as N
where MONTH(N.DatumNarudzbe) = MONTH(N.DatumIsporuke) and YEAR(N.DatumIsporuke) = 1998
order by 2 desc
 
--7.
select N.NarudzbaID, RIGHT(N.PunaAdresa, CHARINDEX(' ', REVERSE(N.PunaAdresa))-1) as 'Naziv grada'
from Narudzba as N
where RIGHT(N.PunaAdresa, CHARINDEX(' ', REVERSE(N.PunaAdresa))-1) in('Graz', 'Köln')
order by 2
 
--8.
select N.NarudzbaID, YEAR(N.DatumNarudzbe) as 'Godina narudzbe', P.NazivProizvoda, D.NazivDobavljaca, D.Drzava, N.TrosakPrevoza, (P.Cijena*P.Kolicina*(1-P.Popust)) as 'Ukupno',
LEFT(ROUND(N.TrosakPrevoza/(P.Cijena*P.Kolicina*(1-P.Popust))*100, 2), 5) as 'Postotak'
from Narudzba as N
inner join Proizvod as P
on N.NarudzbaID = P.NarudzbaID
inner join Dobavljac as D
on P.DobavljacID = D.DobavljacID
where N.TrosakPrevoza/(P.Cijena*P.Kolicina*(1-P.Popust))* 100 > 30 and (P.Cijena*P.Kolicina*(1-P.Popust)) > N.TrosakPrevoza
order by 8 desc
 
--9.
create view pogled1
as
select N.NarudzbaID, DAY(N.DatumPrijema) as 'Dan prijema', P.Raspolozivost, RIGHT(N.PunaAdresa, CHARINDEX(' ', REVERSE(N.PunaAdresa))-1) as 'Naziv grada', D.Drzava
from Narudzba as N
inner join Proizvod as P
on N.NarudzbaID = P.NarudzbaID
inner join Dobavljac as D
on P.DobavljacID = D.DobavljacID
where DAY(N.DatumPrijema) between 11 and 31 and RIGHT(N.PunaAdresa, CHARINDEX(' ', REVERSE(N.PunaAdresa))-1) = 'Bergamo'
 
select*
from pogled1
 
--10.
create procedure proc1(
@DobavljacID int = null,
@NazivDobavljaca nvarchar(40) = null,
@UkupanBrojPr int = null
)
as
begin
select P.DobavljacID, D.NazivDobavljaca, COUNT(P.ProizvodID) as 'UkupanBrojPr'
from Proizvod as P
inner join Dobavljac as D
on P.DobavljacID = D.DobavljacID
where P.DobavljacID = @DobavljacID
or D.NazivDobavljaca = @NazivDobavljaca
or P.ProizvodID >= 0
group by P.DobavljacID, D.NazivDobavljaca
having COUNT(P.ProizvodID) = @UkupanBrojPr or @UkupanBrojPr is null
end
 
exec proc1 @UkupanBrojPr = 22
exec proc1 @UkupanBrojPr = 14
 
 
 
go
create database treci_online_test
go
use treci_online_test
 
--Zadatak 1.
select a.au_fname as 'Ime', a.au_lname as 'Prezime', COUNT(ta.title_id) as 'Ukupan broj naslova'
from pubs.dbo.authors as a
inner join pubs.dbo.titleauthor as ta
on a.au_id = ta.au_id
inner join pubs.dbo.titles as t
on ta.title_id = t.title_id
group by a.au_fname, a.au_lname
having COUNT(ta.title_id) >= 2
order by 3 desc
--6
 
--Zadatak 2.
create view view_2
as
select t.title as 'Naziv naslova', t.type as 'Naziv(tip)', t.price as 'Cijena', s.qty as 'Kolicina',
YEAR(s.ord_date) as 'Godina prodaje', MONTH(s.ord_date) as 'Mjesec prodaje', st.stor_name as 'Naziv prodavnice'
from pubs.dbo.titles as t
inner join pubs.dbo.sales as s
on t.title_id = s.title_id
inner join pubs.dbo.stores as st
on s.stor_id = st.stor_id
where YEAR(s.ord_date) = 1994 and t.price between 10 and 20
 
select*
from view_2
 
--Zadatak 3.
create procedure proc_3(
@au_id varchar(11),
@au_lname varchar(40),
@au_fname varchar(20),
@phone char(12),
@address varchar(40),
@city varchar(20),
@state char(2),
@zip char(5),
@contract bit
)
as
begin
insert into pubs.dbo.authors
values (@au_id, @au_lname, @au_fname, @phone, @address, @city, @state, @zip, @contract)
end
 
select*
from pubs.dbo.authors
exec proc_3
@au_id = '222-55-6851',
@au_lname = 'Gološ',
@au_fname = 'Kemal',
@phone = '062 967-6080',
@address = 'Blagaj bb',
@city = 'Mostar',
@state = 'MO',
@zip = '88201',
@contract = '1'
 
--Zadatak 4.
create procedure proc_4(
@au_id varchar(11)
)
as
begin
delete from pubs.dbo.authors
where au_id = @au_id
end
 
exec proc_4
@au_id = '222-55-6851'
 
select*
from pubs.dbo.authors
where au_id = '222-55-6851'
 
 
 
 
--Vježba 13 :: Zadaci
 
--1.   Kroz SQL kod kreirati bazu podataka sa imenom vašeg broja indeksa.
CREATE DATABASE brojIndexa
GO
USE brojIndexa
--2.   U kreiranoj bazi podataka kreirati tabele sa sljedeæom strukturom:
--a)   Proizvodi
--•    ProizvodID, cjelobrojna vrijednost i primarni kljuè
--•    Naziv, 40 UNICODE karaktera (obavezan unos)
--•    Cijena, novèani tip (obavezan unos)
--•    KolièinaNaSkladistu, smallint
--•    NazivKompanijeDobavljaca, 40 UNICODE (obavezan unos)
--•    Raspolozivost, bit (obavezan unos)
CREATE TABLE Proizvodi
(
       ProizvodID INT NOT NULL PRIMARY KEY,
       Naziv NVARCHAR(40) NOT NULL,
       Cijena MONEY NOT NULL,
       KolièinaNaSkladistu SMALLINT,
       NazivKompanijeDobavljaca NVARCHAR(40) NOT NULL,
       Raspolozivost BIT NOT NULL
)
CREATE TABLE Narudzbe
(
       NarudzbaID INT NOT NULL PRIMARY KEY,
       DatumNarudzbe DATE,
       DatumPrijema DATE,
       DatumIsporuke DATE,
       Drzava NVARCHAR(15),
       Regija NVARCHAR(15),
       Grad NVARCHAR(15),
       Adresa NVARCHAR(60)
)
CREATE TABLE StavkeNarudzbe
(
       NarudzbaID INT CONSTRAINT FK_StavkeNarudzbe_Narudzbe FOREIGN KEY REFERENCES Narudzbe(NarudzbaID),
       ProizvodID INT CONSTRAINT FK_StavkeNarudzbe_Proizvodi FOREIGN KEY REFERENCES Proizvodi(ProizvodID),
       Cijena MONEY NOT NULL,
       Kolièina SMALLINT NOT NULL,
       Popust REAL NOT NULL,
       CONSTRAINT PK_StavkeNarudzbe PRIMARY KEY(NarudzbaID,ProizvodID)
)
--**Jedan proizvod se može naæi na više narudžbi, dok jedna narudžba može imati više proizvoda. U okviru jedne narudžbe jedan proizvod se ne može pojaviti više od jedanput.
 
--3.   Iz baze podataka Northwind u svoju bazu podataka prebaciti sljedeæe podatke:
--a)   U tabelu Proizvodi dodati sve proizvode
--•    ProductID -> ProizvodID
--•    ProductName -> Naziv      
--•    UnitPrice -> Cijena
--•    UnitsInStock -> KolicinaNaSkladistu
--•    CompanyName -> NazivKompanijeDobavljaca
--•    Discontinued -> Raspolozivost
INSERT INTO Proizvodi
SELECT P.ProductID,P.ProductName,P.UnitPrice,P.UnitsInStock,S.CompanyName,P.Discontinued
FROM Northwind.dbo.Products AS P
INNER JOIN Northwind.dbo.Suppliers AS S
ON P.SupplierID=S.SupplierID
--b)   U tabelu Narudzbe dodati sve narudžbe, na mjestima gdje nema pohranjenih podataka o regiji zamijeniti vrijednost sa nije naznaceno
--•    OrderID -> NarudzbaID
--•    OrderDate -> DatumNarudzbe
--•    RequiredDate -> DatumPrijema
--•    ShippedDate -> DatumIsporuke
--•    ShipCountry -> Drzava
--•    ShipRegion -> Regija
--•    ShipCity -> Grad
--•    ShipAddress -> Adresa
INSERT INTO Narudzbe
SELECT O.OrderID,O.OrderDate,O.RequiredDate,O.ShippedDate,O.ShipCountry,ISNULL(O.ShipRegion,'nije naznaceno'),O.ShipCity,O.ShipAddress
FROM Northwind.dbo.Orders AS O
--c)   U tabelu StavkeNarudzbe dodati sve stavke narudžbe gdje je kolièina veæa od 4
--•    OrderID -> NarudzbaID
--•    ProductID -> ProizvodID
--•    UnitPrice -> Cijena
--•    Quantity -> Kolièina
--•    Discount -> Popust
INSERT INTO StavkeNarudzbe
SELECT OD.OrderID,OD.ProductID,OD.UnitPrice,OD.Quantity,OD.Quantity
FROM Northwind.dbo.[Order Details] AS OD
WHERE OD.Quantity>4
--4.  
--a)   Prikazati sve proizvode koji poèinju sa slovom a ili c a trenutno nisu raspoloživi.
SELECT*
FROM Proizvodi AS P
WHERE (P.Naziv LIKE 'A%' OR P.Naziv LIKE 'C%') AND P.Raspolozivost=0
--b)   Prikazati narudžbe koje su kreirane 1996 godine i èija je ukupna vrijednost bez popusta veæa od 500KM.
SELECT N.NarudzbaID, SUM(SN.Cijena*SN.Kolièina) 'Ukupna vrijednost'
FROM Narudzbe AS N
INNER JOIN StavkeNarudzbe AS SN
ON N.NarudzbaID=SN.NarudzbaID
WHERE YEAR(N.DatumNarudzbe)=1996
GROUP BY N.NarudzbaID
HAVING SUM(SN.Cijena*SN.Kolièina)>500
select*
from StavkeNarudzbe
--c)   Prikazati ukupni promet (uzimajuæi u obzir i popust) od narudžbi po teritorijama. (AdventureWorks2017)
SELECT ST.Name,round(SUM(SOD.LineTotal),2) 'Ukupni promet'
FROM AdventureWorks2017.Sales.SalesTerritory AS ST
INNER JOIN AdventureWorks2017.Sales.SalesOrderHeader AS SOH
ON ST.TerritoryID=SOH.TerritoryID
INNER JOIN AdventureWorks2017.Sales.SalesOrderDetail AS SOD
ON SOH.SalesOrderID=SOD.SalesOrderID
GROUP BY ST.Name
--d)   Napisati upit koji æe prebrojati stavke narudžbe za svaku narudžbu pojedinaèno. U rezultatima prikazati ID narudžbe i broj stavki, te uzeti u obzir samo one narudžbe èiji je broj stavki veæi od 1, te koje su napravljene izmeðu 1.6. i 10.6. bilo koje godine. (AdventureWorks2017)
SELECT SOH.SalesOrderID,(SELECT COUNT(*)
                                               FROM AdventureWorks2017.Sales.SalesOrderDetail AS SOD
                                               WHERE SOD.SalesOrderID=SOH.SalesOrderID) 'Ukupno stavki'
FROM AdventureWorks2017.Sales.SalesOrderHeader AS SOH
WHERE MONTH(SOH.OrderDate)=6 AND DAY(SOH.OrderDate) BETWEEN 1 AND 10 AND (SELECT COUNT(*)
                                               FROM AdventureWorks2017.Sales.SalesOrderDetail AS SOD
                                               WHERE SOD.SalesOrderID=SOH.SalesOrderID)>1
ORDER BY 2 DESC
 
--ILI
 
SELECT SOH.SalesOrderID, COUNT(*) as BrojStavki
FROM AdventureWorks2017.Sales.SalesOrderHeader AS SOH
       INNER JOIN AdventureWorks2017.Sales.SalesOrderDetail AS SOD
       ON SOH.SalesOrderID = SOD.SalesOrderID
WHERE MONTH(SOH.OrderDate) = 6
AND DAY(SOH.OrderDate) BETWEEN 1 and 10
GROUP BY SOH.SalesOrderID
HAVING COUNT(*) > 1
ORDER BY 2 DESC
--e)   Napisati upit koji æe prikazati sljedeæe podatke o proizvodima: ID proizvoda, naziv proizvoda, šifru proizvoda, te novokreiranu šifru proizvoda. Nova šifra se sastoji od sljedeæih vrijednosti: (AdventureWorks2017)
--•    Svi karakteri nakon prvog znaka - (crtica)
--•    Karakter /
--•    ID proizvoda
--Npr. Za proizvod sa ID-om 716 i šifrom LJ-0192-X, nova šifra æe biti 0192-X/716.
SELECT PP.ProductID, PP.Name, PP.ProductNumber,
SUBSTRING(ProductNumber, CHARINDEX('-', ProductNumber) + 1, LEN(ProductNumber)) + '/' + CONVERT(NVARCHAR(50), PP.ProductID) as Šifra
FROM AdventureWorks2017.Production.Product AS PP
WHERE PP.ProductID=716
 
--5.  
--a)   Kreirati proceduru sp_search_proizvodi kojom æe se u tabeli Proizvodi uraditi pretraga proizvoda prema nazivu prizvoda ili nazivu dobavljaèa. Pretraga treba da radi i prilikom unosa bilo kojeg od slova, ne samo potpune rijeèi. Ukoliko korisnik ne unese ništa od navedenog vratiti sve zapise. Proceduru obavezno pokrenuti.
GO
CREATE PROCEDURE proc_search_proizvodi
(
@Naziv NVARCHAR(40)=NULL,
@Dobavljac NVARCHAR(50)=NULL
)
AS
BEGIN
SELECT * FROM Proizvodi as P
WHERE (Naziv LIKE @Naziv+'%' OR @Naziv IS NULL) AND (NazivKompanijeDobavljaca LIKE @Dobavljac+'%' OR @Dobavljac IS NULL)
END
 
EXEC proc_search_proizvodi @Naziv='C'
--b)   Kreirati proceduru sp_insert_stavkeNarudzbe koje æe vršiti insert nove stavke narudžbe u tabelu stavkeNarudzbe. Proceduru obavezno pokrenuti.
GO
CREATE PROCEDURE sp_insert_stavkeNarudzbe (
@NarudzbaID INT,
@ProizvodID INT,
@Cijena MONEY,
@Kolicina SMALLINT,
@Popust MONEY
)
AS
BEGIN
       INSERT INTO StavkeNarudzbe VALUES (@NarudzbaID, @ProizvodID, @Cijena, @Kolicina, @Popust)
END
GO
EXEC sp_insert_stavkeNarudzbe 10248, 1, 2, 2, 0.02
 
SELECT*
FROM StavkeNarudzbe
WHERE NarudzbaID=10248
 
--c)   Kreirati view koji prikazuje sljedeæe kolone: ID narudžbe, datum narudžbe, spojeno ime i prezime kupca i ukupnu vrijednost narudžbe bez popusta. Podatke sortirati prema ukupnoj vrijednosti u opadajuæem redoslijedu. (AdventureWorks2017)
GO
CREATE VIEW view_5c AS
SELECT SOH.SalesOrderID 'ID narudžbe', SOH.OrderDate 'Datum narudžbe',PP.FirstName + ' '+ PP.LastName AS 'Ime i prezime',
SUM(SOD.UnitPrice*SOD.OrderQty) AS 'Vrijednost'
FROM AdventureWorks2017.Sales.SalesOrderHeader AS SOH
       INNER JOIN AdventureWorks2017.Sales.SalesOrderDetail AS SOD
       ON SOH.SalesOrderID = SOD.SalesOrderID
       INNER JOIN AdventureWorks2017.Sales.Customer AS C
       ON SOH.CustomerID=C.CustomerID
       INNER JOIN AdventureWorks2017.Person.Person AS PP
       ON PP.BusinessEntityID=C.PersonID
GROUP BY SOH.SalesOrderID , SOH.OrderDate ,PP.FirstName , PP.LastName
GO
 
SELECT*
FROM view_5c
ORDER BY Vrijednost DESC
--d)   Kreirati okidaè kojim æe se onemoguæiti brisanje zapisa iz tabele StavkeNarudzbe. Korisnicima je potrebno ispisati poruku Arhivske zapise nije moguæe izbrisati.
GO
CREATE TRIGGER t_instead_delete
ON StavkeNarudzbe
INSTEAD OF DELETE
AS
BEGIN
       SELECT 'Arhivske zapise nije moguæe izbrisati'
END
DELETE
FROM StavkeNarudzbe
--e)   Kreirati index kojim æe se ubrzati pretraga po nazivu proizvoda.
CREATE INDEX ix_selectByProductName
ON Proizvodi(Naziv)
 
SELECT Naziv
FROM Proizvodi
WHERE Naziv LIKE 'A%'
--f)   U tabeli StavkeNarudzbe kreirati polje ModifiedDate u kojem æe se nakon kreiranja okidaèa za izmjenu podataka spremati datum modifikacije podataka za konkretan red na kojem je izvršena modifikacija.
ALTER TABLE StavkeNarudzbe
ADD ModifiedDate DATE
GO
CREATE OR ALTER TRIGGER t_after_update
ON StavkeNarudzbe
AFTER UPDATE
AS
BEGIN
       UPDATE StavkeNarudzbe
       SET ModifiedDate=GETDATE()
       WHERE NarudzbaID IN (SELECT DISTINCT NarudzbaID FROM Inserted) AND ProizvodID IN (SELECT DISTINCT ProizvodID FROM Inserted)
END
 
UPDATE StavkeNarudzbe
SET Cijena=1
WHERE NarudzbaID=10248 AND ProizvodID=1
 
SELECT*
FROM StavkeNarudzbe
 
--ALTER TABLE StavkeNarudzbe
--DROP COLUMN ModifiedDate
 
 
 
 
create database vježba
go
 
use vježba
 
create table Proizvodi(
ProizvodID int not null primary key,
Naziv nvarchar(40) not null,
Cijena money not null,
Koli?inaNaSkladištu smallint,
NazivKompanijeDobavlja?a nvarchar(40) not null,
Raspoloživost bit not null
)
 
create table Narudžbe(
NarudzbaID int not null primary key,
DatumNarudzbe date,
DatumPrijema date,
DatumIpsoruke date,
Drzava nvarchar(15),
Regija nvarchar(15),
Grad nvarchar(15),
Adresa nvarchar(60)
)
 
create table StavkeNarudzbe(
NarudzbaID int constraint FK_StavkeNarudzbe_Narudzbe foreign key references Narudžbe(NarudzbaID),
ProizvodID int constraint FK_StavkeNarudzbe_Proizvodi foreign key references Proizvodi(ProizvodID),
Cijena money not null,
Koli?ina smallint not null,
Popust real not null,
constraint PK_StavkeNarudzbe primary key(NarudzbaID, ProizvodID)
)
 
insert into Proizvodi
select P.ProductID, P.ProductName, P.UnitPrice, P.UnitsInStock, S.CompanyName, P.Discontinued
from Northwind.dbo.Products as P
inner join Northwind.dbo.Suppliers as S
on P.SupplierID = S.SupplierID
 
insert into Narudžbe
select O.OrderID, O.OrderDate, O.RequiredDate, O.ShippedDate, O.ShipCountry, O.ShipRegion, O.ShipCity, O.ShipAddress
from Northwind.dbo.Orders as O
 
insert into StavkeNarudzbe
select OD.OrderID, OD.ProductID, OD.UnitPrice, OD.Quantity, OD.Discount
from Northwind.dbo.[Order Details] as OD
 
select*
from Proizvodi as P
where (P.Naziv like 'A%' or P.Naziv like 'C%') and P.Raspoloživost = 0
 
select N.NarudzbaID, SUM(SN.Cijena*SN.Koli?ina) 'Ukupna vrijednost'
from Narudžbe as N
inner join StavkeNarudzbe as SN
on N.NarudzbaID = SN.NarudzbaID
where YEAR(N.DatumNarudzbe) = 1996
group by N.NarudzbaID
having SUM(SN.Cijena*SN.Koli?ina) > 500
 
select*
from StavkeNarudzbe
 
 
 
 
 
 
 
 
SELECT
    o.OrderID,
    SUM(od.Quantity) AS UkupanBrojKomada,
    ROUND(SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)), 2) AS UkupnaCijenaBezPopusta,
    ROUND(SUM(od.UnitPrice * od.Quantity * (1 - od.Discount) * (1 + o.ShippingCosts)), 2) AS UkupnaCijenaSPopustom
FROM
    Orders o
    INNER JOIN OrderDetails od ON o.OrderID = od.OrderID
    INNER JOIN Customers c ON o.CustomerID = c.CustomerID
WHERE
    o.ShippedDate IS NOT NULL
    AND o.ShippedDate - o.OrderDate <= 7
    AND c.City IN ('Madrid', 'Munich', 'Seattle')
GROUP BY
    o.OrderID
ORDER BY   UkupanBrojKomada DESC;

create database jacuseubit
use jacuseubit

create table izdavac 
(
	izdavacID nvarchar(4) primary key not null,
	izdavac_naziv nvarchar(40),
	izdavac_grad_okrug nvarchar(40)
)

create table uposlenik
(
	uposlenikID nvarchar(9) primary key not null,
	ime_prezime nvarchar(50),
	datum_zaposl datetime,
	opis_posla nvarchar(50),
	izdavacID nvarchar(4)
	constraint FK_uposlenik_izdavac foreign key (izdavacID) references izdavac(izdavacID)
)
create table publikacija
(
	pubID nvarchar(10) primary key not null,
	naziv_pub nvarchar(80),
	cijena money,
	datum_izd datetime,
	izdavacID nvarchar(4),
	constraint  FK_publikacija_izdavac foreign key (izdavacID) references izdavac(izdavacID)
)

INSERT INTO izdavac
select p.pub_id,p.pub_name,ISNULL(p.city,'xx')+'_'+ISNULL(p.state,'xx')
from pubs.dbo.publishers as p

INSERT INTO uposlenik
select e.emp_id,e.fname+ ' ' + e.lname as 'ime i prezime',e.hire_date,j.job_desc,e.pub_id
from pubs.dbo.employee as e join pubs.dbo.jobs as j on e.job_id=j.job_id

insert into publikacija
select t.title_id,t.title,t.price,t.pubdate,t.pub_id
from pubs.dbo.titles as t

go
create view view_god_zaposl
as
select u.ime_prezime,year(u.datum_zaposl) as 'godina_zaposlenja',DATEDIFF(year,u.datum_zaposl,GETDATE()) as 'godina_staza',u.opis_posla,i.izdavac_naziv
from uposlenik as u join izdavac as i on u.izdavacID=i.izdavacID
where DATEDIFF(year,u.datum_zaposl,GETDATE())>25

drop view view_god_zaposl

select*from view_god_zaposl
order by 3 desc

select opis_posla,COUNT(godina_staza) as 'pobrojano'
from view_god_zaposl
group by opis_posla 

select godina_staza,COUNT(godina_staza)
from view_god_zaposl 
group by godina_staza
order by 2 desc 

select* from view_god_zaposl
order by 3 desc 

go
create procedure proc_god_zaposl
(
	@ime_prezime nvarchar(50)=null,
	@godina_zaposlenja int=null,
	@godina_staza int=null,
	@opis_posla nvarchar(50)=null,
	@izdavac_naziv nvarchar(40)=null
)
as 
begin
select ime_prezime,godina_zaposlenja,godina_staza,opis_posla,izdavac_naziv

from view_god_zaposl 
where  ime_prezime=@ime_prezime OR
	   godina_zaposlenja=@godina_zaposlenja OR
	   godina_staza=@godina_staza OR 
	   opis_posla=@opis_posla OR
	   izdavac_naziv=@izdavac_naziv
end;

exec proc_god_zaposl @godina_staza=26
exec proc_god_zaposl @opis_posla='designer'
exec proc_god_zaposl @godina_zaposlenja=1992

select u.ime_prezime,count(p.pubID) as 'ukupno pub'
from publikacija as p join izdavac as i on p.izdavacID=i.izdavacID join uposlenik as u on i.izdavacID=p.izdavacID
where year(p.datum_izd)=1991 and u.opis_posla LIKE ('%Ed%')
GROUP BY U.ime_prezime
ORDER BY 2 DESC


go
create view view_izdavaci
as
select distinct p.izdavacID,i.izdavac_naziv
from publikacija as p join izdavac as i  on p.izdavacID=i.izdavacID

select*from view_izdavaci

select i.izdavacID,i.izdavac_naziv,sum(p.cijena) as 'ukupno'
from publikacija as p join izdavac as i on p.izdavacID=i.izdavacID
group by i.izdavacID,i.izdavac_naziv

go
create procedure proc_uposlenik
(
	@uposlenikID nvarchar(9)=null,
	@ime_prezime nvarchar(50)=null,
	@godina_zaposlenja int=null,
	@opis_posla nvarchar(50)=null,
	@izdavacID nvarchar(4)=null
)
as
begin
select uposlenikID,ime_prezime,year(datum_zaposl) as 'godina_zaposlenja',opis_posla,izdavacID
from uposlenik
where opis_posla LIKE ('%Man%') and uposlenikID=uposlenikID OR ime_prezime=@ime_prezime OR year(datum_zaposl)=@godina_zaposlenja or 
	  opis_posla=@opis_posla or izdavacID=@izdavacID
end;

exec proc_uposlenik @godina_zaposlenja=1992
exec proc_uposlenik @opis_posla='Marketing Manager'
exec proc_uposlenik @izdavacID=9999
drop procedure proc_uposlenik

drop table izdavac
drop table publikacija
drop table uposlenik

use master
drop database jacuseubit





create database PI_5_7_2019
use PI_5_7_2019


create table uposlenik
(
	uposlenikID int constraint PK_uposlenikID primary key (uposlenikID) identity (1,1),
	prezime_ime nvarchar (30) not null, 
	datum_rodj date,
	datum_zaposl date,
	kucni_tel nvarchar (25),
	teritorija nvarchar (50)
)

insert into uposlenik
SELECT	E.LastName + ' ' + E.FirstName, E.BirthDate, E.HireDate, E.HomePhone, T.TerritoryDescription
FROM	Northwind.dbo.EmployeeTerritories as ET INNER JOIN Northwind.dbo.Employees as E
ON		ET.EmployeeID = E.EmployeeID 
		INNER JOIN Northwind.dbo.Territories AS T
		ON ET.TerritoryID = T.TerritoryID
--rj: 49


create table isporucitelj
(
	isporuciteljID int constraint PK_isporuciteljID primary key (isporuciteljID),
	ispor_naziv nvarchar (40),
	ispor_tel nvarchar (24)
)

insert into isporucitelj
select * from Northwind.dbo.Shippers
--rJ: 3

create table isporuka
(
	isporukaID int constraint PK_narudzbaID primary key (narudzbaID),
	kupac_naziv nvarchar (40) not null, 
	kupac_br_tel nvarchar (25),
	prevoz money,
	isporuciteljID int,
	uposlenikID int,
	constraint FK_isporucitelj foreign key (isporuciteljID) references isporucitelj (isporuciteljID),
	constraint FK_uposlenik foreign key (uposlenikID) references uposlenik (uposlenikID)
)

insert into isporuka
SELECT	O.OrderID, C.CompanyName, C.Phone, O.Freight, O.ShipVia, O.EmployeeID
FROM	Northwind.dbo.Customers AS C INNER JOIN Northwind.dbo.Orders AS O
ON		C.CustomerID = O.CustomerID
--rj: 830

--------------------------------------------------------------------
--3
--------------------------------------------------------------------
select isporuciteljID, sum (prevoz) as ukupno
from narudzba
where isporuciteljID = 3
group by isporuciteljID

se
--------------------------------------------------------------------
--4
--------------------------------------------------------------------
/*a Kreirati pogled sljedeće strukture: */
create view view_uposlenici
as 
SELECT	prezime_ime, year (datum_rodj) as godina, count (teritorija) broj_po_teritoriji
FROM	uposlenik
where year (datum_rodj) > 1950
group by prezime_ime, year (datum_rodj)

select *
from view_uposlenici
order by 2

/*b Kreirati proceduru koja će imati istu strukturu kao i pogled pod 3.a, a zatim pokrenuti proceduru  za sljedeće vrijednosti parametara:
1. godina = 1963
2. broj_po_teritoriji = 7*/
create procedure proc_uposlenici
(
	@prezime_ime nvarchar (40) = null,
	@godina int = null,
	@broj_po_teritoriji int = null
)
as
begin
select * 
from view_uposlenici
where	prezime_ime = @prezime_ime or
		godina = @godina or
		broj_po_teritoriji = @broj_po_teritoriji
end

exec proc_uposlenici @godina = 1963
--rj: 2
/*
prezime_ime                    godina      broj_po_teritoriji
------------------------------ ----------- ------------------
Leverling Janet                1963        4
Suyama Michael                 1963        5
*/

exec proc_uposlenici @broj_po_teritoriji = 7
--rj: 3
/*
prezime_ime                    godina      broj_po_teritoriji
------------------------------ ----------- ------------------
Fuller Andrew                  1952        7
Buchanan Steven                1955        7
Dodsworth Anne                 1966        7
*/


--------------------------------------------------------------------
--5
--------------------------------------------------------------------
/*Dati pregled ukupno ostvarenog prihoda kojeg su ostvarili isporučitelji. Pregled treba da sadrži naziv isporučitelja i ukupno ostvareni prihod po osnovu prevoza. Sortirati po visini ostvarenog prihoda u opadajućem redoslijedu.*/
select I.ispor_naziv, sum (N.prevoz) as suma_prevoza
from narudzba as N inner join isporucitelj as I
on N.isporuciteljID = I.isporuciteljID
group by I.ispor_naziv
order by 2 desc
--rj: 3
/*
ispor_naziv                              suma_prevoza
---------------------------------------- ---------------------
United Package                           28244.85
Federal Shipping                         20512.51
Speedy Express                           16185.33
*/

--------------------------------------------------------------------
--6
--------------------------------------------------------------------
create nonclustered index IX_tel on isporucitelj
(
	ispor_tel asc
)


--------------------------------------------------------------------
--7
--------------------------------------------------------------------
/*Koristeći tabele iz vlastite baze podataka kreirati pogled koji će imati sljedeću strukturu: prezime i ime uposlenika, naziv kupca, broj telefona kupca i prevoz. U pogledu trebaju biti smješteni oni zapisi kod kojih se predbroj (broj smješten između zagrada) broja telefona kupca sastoji od isključivo dvije cifre (nije dozvoljen bilo kakav  drugi znak osim cifre). Obavezno provjeriti sadržaj kreiranog pogleda. Potrebno je da svaki uposlenik pojavljuje samo jedanput.*/
create view view_uposlenik_kupac
as 
select	u.prezime_ime, n.kupac_naziv, n.kupac_br_tel, n.prevoz
from	narudzba as n inner join uposlenik as u
on		n.uposlenikID = u.uposlenikID
where	left( n.kupac_br_tel ,4) like '([0-9][0-9])'

select *
from view_uposlenik_kupac
order by 1
--rj: 120


--------------------------------------------------------------------
--8
--------------------------------------------------------------------
/*Kreirati proceduru koja će koristiti podatke iz prethodno kreiranog pogleda, a imat će sljedeću strukturu: prezime i ime, prevoz, suma prevoza, uz uslov da se procedurom daje suma samo onih zapisa kod kojih je vrijednost prevoza veća od 10. Pokrenuti proceduru  za sljedeće vrijednosti parametara:
1. prezime_ime = Fuller Andrew
2. prezime_ime = Davolio Nancy*/
create procedure proc_suma_prevoza
(
	@prezime_ime nvarchar (40) = null,
	@suma_prevoza decimal (8,2) = null
)
as
begin
select	prezime_ime, sum (prevoz) as suma_prevoza
from	view_uposlenik_kupac
where	prevoz > 10 and
		prezime_ime = @prezime_ime
group by prezime_ime
end

exec proc_suma_prevoza @prezime_ime= 'Fuller Andrew'
--rj: 5054.15

exec proc_suma_prevoza @prezime_ime= 'Davolio Nancy'
--rj: 1182.68

--------------------------------------------------------------------
--9
--------------------------------------------------------------------
/*a) Kreirati pogled koji će imati sljedeću strukturu: prezime_ime, mjesec, pri čemu je u mjesec potrebno smjestiti redni broj mjeseca u kojem je uposlenik zaposlen, uz uslov da se uposlenik zaposlio u prvoj polovini kalendarske godine. Obavezno provjeriti sadržaj kreiranog pogleda. Potrebno je da svaki uposlenik pojavljuje samo jedanput.*/
create view view_mjeseci
as
select distinct prezime_ime, month(datum_zaposl) as mjesec
from uposlenik
where month (datum_zaposl) in (1,2,3,4,5,6)

select * 
from view_mjeseci
order by 2
--rj: 5
/*
prezime_ime                    mjesec
------------------------------ -----------
King Robert                    1
Callahan Laura                 3
Leverling Janet                4
Davolio Nancy                  5
Peacock Margaret               5
*/

/*b Iz pogleda kreiranog u zadatku 5.a dati pregled broja zaposlenika po mjesecima, tj. koliko se uposlenika zaposlilo u svakom od mjeseci navedenog perioda u godini.*/
select mjesec, count (mjesec) as uk_broj
from view_mjeseci
group by mjesec
--rj: 4
/*
mjesec		uk_broj
1           1
3           1
4           1
5           2
*/


--------------------------------------------------------------------
--10
--------------------------------------------------------------------
drop table uposlenik
drop table isporucitelj
drop table narudzba
drop database PI_5_7_2019


--1.
/*
a) Kreirati bazu podataka pod vlastitim brojem indeksa.
*/
create database PI_2019_9_I
use PI_2019_9_I

--b) Kreiranje tabela. Prilikom kreiranja tabela voditi računa o spojnim poljima između tabela.
/*
I. Kreirati tabelu TipProizv koja se sastoji od polja:
	- potkatID - cjelobrojna varijabla, primarni ključ
	- katID - cjelobrojna varijabla, obavezan unos
	- kat_naziv - 50 unicode karaktera, obavezan unos
	- potkat_naziv - 50 unicode karaktera, obavezan unos
*/
create table TipProizv
(
	potkatID int constraint PK_TipProizv primary key (potkatID),
	katID int not null,
	kat_naziv nvarchar(50) not null,
	potkat_naziv nvarchar(50)
)
/*
II. Kreirati tabelu proizvod koja se sastoji od polja:
	- proizvodID - cjelobrojna varijabla, primarni ključ
	- naziv - 50 UNICODE karaktera, obavezan unos
	- boja - 15 UNICODE karaktera
	- tezina - decimalni broj  decimal(8, 2),
	- dana_za_proiz - cjelobrojna varijabla, obavezan unos
	- klasa - 2 unicode karaktera 
	- potkat_ID cjelobrojna varijabla, obavezan unos
*/
create table proizvod
(
	proizvodID int constraint PK_proizvod Primary key (proizvodID),
	naziv nvarchar(50) not null,
	boja nvarchar(15),
	tezina decimal(8, 2),
	dana_za_proiz int not null,
	klasa nvarchar (2),
	potkatID int not null
	constraint FK_proizvod_TipProiz foreign key (potkatID) references TipProizv (potkatID)
)

/*
III. Kreirati tabelu nalog koja se sastoji od polja:
	- nalogID - cjelobrojna varijabla, primarni ključ
	- proizvodID - cjelobrojna varijabla, obavezan unos
	- naruc_kol - cjelobrojna varijabla, obavezan unos
	- stanje_kol - cjelobrojna varijabla, obavezan unos
	- dtm_zaduz - datumska varijabla samo za unos datuma (bez vremena)
	- oznaka_greske - 50 unicode karaktera, obavezan unos
*/

create table nalog
(
	nalogID int constraint PK_nalogID primary key (nalogID),
	proizvodID int not null,
	naruc_kol int not null,
	stanje_kol int not null,
	dtm_zaduz date,
	oznaka_greske nvarchar(50) not null,
	constraint FK_nalog_proizvod foreign key (proizvodID) references proizvod (proizvodID)
)
--15 bodova


-----------------------------------------------------------------------------------------------
--2. Importovanje podataka
/*
a) U tabelu TipProizv importovati podatke iz tabela ProductSubcategory i ProductCategory baze AdventureWorks2014 koje se nalaze u šemi Production na sljedeći način:
	- ProductSubcategoryID -> potkatID 
	- ProductCategoryID -> katID 
	- Name -> kat_naziv
	- Name -> potkat_naziv
Voditi računa o pripadnosti polja tabelama iz kojih se importuju podaci.
*/

INSERT INTO TipProizv
SELECT	PS.ProductSubcategoryID, PC.ProductCategoryID, PC.Name, PS.Name
FROM	AdventureWorks2014.Production.ProductCategory AS PC INNER JOIN AdventureWorks2014.Production.ProductSubcategory AS PS
ON		PC.ProductCategoryID = PS.ProductCategoryID
--37

/*
b) U tabelu proizvod importovati podatke iz tabele Product baze AdventureWorks2014 koja se nalazi u šemi Production na sljedeći način:
	- ProductID -> proizvodID
	- Name -> naziv
	- Color -> boja 
	- Weight -> tezina 
	- DaysToManufacture -> dana_za_proiz 
	- Class -> klasa 
	- ProductSubcategoryID -> potkatID
uz uslov da je ProductSubcategoryID sadrži vrijednost.
*/
INSERT INTO proizvod
SELECT	P.ProductID, P.Name, P.Color, P.Weight, P.DaysToManufacture, P.Class, P.ProductSubcategoryID
FROM	AdventureWorks2014.Production.Product AS P
where	P.ProductSubcategoryID is not null ------------ ne moze biti not null 
--295

/*
c) U tabelu nalog importovati podatke iz tabela WorkOrder i ScrapReason baze AdventureWorks2014 koja se nalazi u šemi Production na sljedeći način:
	- WorkOrderID -> nalogID 
	- ProductID -> proizvodID 
	- OrderQty -> naruc_kol 
	- StockedQty -> stanje_kol 
	- DueDate -> dtm_zaduz 
	- Name -> oznaka_greske
uz uslov da je ProductID veći ili jednak 680. 
*/
INSERT INTO nalog
SELECT	WO.WorkOrderID, WO.ProductID, WO.OrderQty, WO.StockedQty, WO.DueDate, SR.Name
FROM	AdventureWorks2014.Production.WorkOrder as WO INNER JOIN AdventureWorks2014.Production.ScrapReason as SR
ON		SR.ScrapReasonID = WO.ScrapReasonID
where	WO.ProductID >=680 
--332
-- 15 bodova


-----------------------------------------------------------------------------------------------
--3.
/*
Iz tabele nalog dati pregled koji će se sastojati od polja:
	- godina - godina zaduženja proizvoda
	- uk_broj_po_god - ukupan broj zapisa po godinama
uz uslov da je proizvod zadužen u prvom polugodištu bilo koje godine.
Primjer za uk_broj: U tabeli se nalazi 5 zapisa kod kojih je datum zaduženja iz prvog polugodišta 2015. godine
*/
select	year (dtm_zaduz) as godina, count (dtm_zaduz) as uk_broj_po_god
from	nalog
where	MONTH (dtm_zaduz) < 7
group by year (dtm_zaduz)
--4
/*
2011	2
2012	49
2013	72
2014	51
*/
--5 bodova

-----------------------------------------------------------------------------------------------
--4.
/*
Iz tabele nalog kreirati pogled view_razlika koji će se sastojati od polja:
	- razlika_stanja - razlika između naručene količine i količine na stanju
	- uk_broj_po_razlici - ukupan broj zapisa po vrijednosti razlike, npr. u tabeli se nalazi 5 zapisa kod kojih je razlika 10
uz uslov da je proizvod zadužen u 10. mjesecu bilo koje godine prije 2013.
Obavezno napisati naredbu za pregled sadržaja pogleda.
*/
create view view_razlika
as
select	naruc_kol - stanje_kol as razlika_stanja, count (naruc_kol - stanje_kol) as uk_broj_po_razlici
from	nalog
where	MONTH (dtm_zaduz) = 10 and year (dtm_zaduz) < 2013 
group by (naruc_kol - stanje_kol)

select * from view_razlika
--6
/*
1	8
2	7
3	1
10	1
30	1
32	1
*/
--12 bodova

-----------------------------------------------------------------------------------------------
/*
5. Koristeći tabelu proizvod kreirati proceduru proc_proizvod kojom će se definirati sljedeći ulazni parametri:
- proizvodID
- boja
- tezina
- dana_za_proiz
Proceduru kreirati tako da je prilikom izvršavanja moguće unijeti bilo koji broj parametara (možemo ostaviti bilo koje polje bez unijetog parametra).

Proceduru pokrenuti za sljedeće vrijednosti parametara:
1. @boja = Black
2. @dana_za_proiz = 1
*/

CREATE PROCEDURE proc_proizvod
(
	@proizvodID int = null,
	@boja nvarchar(15) = null,
	@tezina decimal(8, 2) = null,
	@dana_za_proiz int = null
)
AS
BEGIN
select	proizvodID, naziv, boja, tezina, dana_za_proiz
from	PI_2019_9_I.dbo.proizvod
where	proizvodID = @proizvodID or
		boja = @boja or
		tezina = @tezina or
		dana_za_proiz = @dana_za_proiz
END

exec proc_proizvod @boja = 'Black'
--89

exec proc_proizvod @dana_za_proiz = 1
--127
--8 bodova


-----------------------------------------------------------------------------------------------
/*
6. Kreirati pregled koji će sadržavati polja:
	- potkatID
	- suma_tez u kojem će se nalaziti suma težina
Uslov je da naziv proizvoda počinje slovima HL, da se ne preuzimaju zapisi u kojima se nalaze vrijednosti u kolonama boja i tezina, te da je proizvod zaduzen u 2011. ili 2012. godini.
*/
select	P.potkatID, sum (tezina) as suma_tez
from	proizvod as P inner join nalog as N
on		P.proizvodID = N.proizvodID
where	P.naziv like 'HL%' and P.boja is not null and P.tezina is not null and year (dtm_zaduz) in (2011,2012)
group by P.potkatID
--10 bodova
--3
/*
17	5270.00
12	27.56
14	6.52
*/



-----------------------------------------------------------------------------------------------
/*
7. 
Kreirati pogled view_potkat_boja koji će se sastojati od polja:
	- potkatID
	- boja
	- uk_broj_po_oznaka_greske kojim će se prebrojati ukupan broj pojedinog naziva greške
Napisati naredbu za pregled sadržaja pogleda pri čemu će se izostaviti svi zapisi u kojima nije unijeta vrijednost za boju i uk_broj_po_oznaka_greske je neparan broj.
*/
create view view_potkat_boja
as
select	P.potkatID, P.boja, count (oznaka_greske) as uk_broj_po_oznaka_greske
from	proizvod as P inner join nalog as N
on		P.proizvodID = N.proizvodID
group by P.potkatID, P.boja
--21
 
select *
from view_potkat_boja
where boja is not null and right (uk_broj_po_oznaka_greske,1) in (0,2,4,6,8)
--7
--10 bodova


-----------------------------------------------------------------------------------------------
/*
8. Kreirati pregled koji će sadržavati polja:
- naziv potkategorije
- sr_vr_tez - srednja vrijednost težine zaokružena na 2 decimalna mjesta (treća i ostale decimale su 0)
pri čemu se ne prikazuju zapisi u kojima ne postoji srednja vrijednost.
*/
SELECT	TP.potkat_naziv, round (avg (P.tezina),2) as sr_vr_tez
FROM	proizvod AS P INNER JOIN TipProizv AS TP
ON		P.potkatID = TP.potkatID
group by TP.potkat_naziv
HAVING	AVG (P.tezina) is not null
--12
/*
Bottom Brackets		187.000000
Brakes				317.000000
Cranksets			603.330000
Derailleurs			151.500000
Mountain Bikes		25.060000
Mountain Frames		2.840000
Pedals				187.330000
Road Bikes			17.450000
Road Frames			2.310000
Touring Bikes		27.680000
Touring Frames		3.080000
Wheels				890.000000
*/
--10 bodova


-----------------------------------------------------------------------------------------------
/*
9. 
Kreirati pogled kojim će se dati prikaz ID naloga, ID proizvoda, broja godina razlike u odnosu na aktivnu godinu, oznaku boje koju će predstavljati prvo slovo naziva (npr. Purple -> P), klase i naziva potkategorije. Izraz za izračunavanje broja godina razlike treba biti općeg karaktera. Uslov je da naziv potkategorije sadrži riječ Bikes, te da boja nije crna. Obavezno napisati kod za pregled sadržaja pogleda.
*/
--a
create view view_bikes
as
SELECT	nalog.nalogID, proizvod.proizvodID, datediff (year,nalog.dtm_zaduz,getdate()) as razl_godina, left (proizvod.boja,1) as ozn_boje, proizvod.klasa, TipProizv.potkat_naziv
FROM	nalog INNER JOIN proizvod 
ON		nalog.proizvodID = proizvod.proizvodID 
		INNER JOIN TipProizv 
		ON proizvod.potkatID = TipProizv.potkatID
where	TipProizv.potkat_naziv like '%Bikes%' and proizvod.boja not like 'Black'

select * from view_bikes
--59
--15 bodova


------------------------------------------------
--1
/*
a) Kreirati bazu podataka pod vlastitim brojem indeksa.
*/
create database PI_BP_2019_9_12
use PI_BP_2019_9_12

--------------------------

/*Prilikom kreiranja tabela voditi računa o međusobnom odnosu između tabela.
b) Kreirati tabelu radnik koja će imati sljedeću strukturu:
	- radnikID, cjelobrojna varijabla, primarni ključ
	- drzavaID, 15 unicode karaktera
	- loginID, 256 unicode karaktera
	- sati_god_odmora, cjelobrojna varijabla
	- sati_bolovanja, cjelobrojna varijabla
*/
create table radnik
(
	radnikID int constraint PK_radnikID primary key (radnikID),
	drzavaID nvarchar (15),
	loginID nvarchar (256),
	sati_god_odmora int,
	sati_bolovanja int
)

/*
c) Kreirati tabelu kupovina koja će imati sljedeću strukturu:
	- kupovinaID, cjelobrojna varijabla, primarni ključ
	- status, cjelobrojna varijabla
	- radnikID, cjelobrojna varijabla
	- br_racuna, 15 unicode karaktera
	- naziv_dobavljaca, 50 unicode karaktera
	- kred_rejting, cjelobrojna varijabla
*/
create table kupovina
(
	kupovinaID int constraint PK_kupovinaID primary key (kupovinaID),
	status int,
	radnikID int not null,
	br_racuna nvarchar (15),
	naziv_dobavljaca nvarchar (50),
	kred_rejting int,
	constraint FK_kupovina_radnik foreign key (radnikID) references radnik (radnikID)
)

/*
c) Kreirati tabelu prodaja koja će imati sljedeću strukturu:
	- prodavacID, cjelobrojna varijabla, primarni ključ
	- prod_kvota, novčana varijabla
	- bonus, novčana varijabla
	- proslogod_prodaja, novčana varijabla
	- naziv_terit, 50 unicode karaktera
*/

create table prodaja
(
	prodavacID int constraint PK_prodaja primary key (prodavacID),
	prod_kvota money,
	bonus money,
	proslogod_prodaja money,
	naziv_terit nvarchar (50),
	constraint FK_prodaja_radnik foreign key (prodavacID) references radnik (radnikID)
)
--10 bodova




--------------------------------------------
--2. Import podataka
/*
a) Iz tabele humanresources.employee baze AdventureWorks2014 u tabelu radnik importovati podatke po sljedećem pravilu:
	- BusinessEntityID -> radnikID
	- NationalIDNumber -> drzavaID
	- LoginID -> loginID
	- VacationHours -> sati_god_odmora
	- SickLeaveHours -> sati_bolovanja
*/
insert into radnik
SELECT	E.BusinessEntityID, E.NationalIDNumber, E.LoginID, E.VacationHours, E.SickLeaveHours
FROM	AdventureWorks2014.HumanResources.Employee as E
--rj: 290

/*
b) Iz tabela purchasing.purchaseorderheader i purchasing.vendor baze AdventureWorks2014 u tabelu kupovina importovati podatke po sljedećem pravilu:
	- PurchaseOrderID -> kupovinaID
	- Status -> status
	- EmployeeID -> radnikID
	- AccountNumber -> br_racuna
	- Name -> naziv_dobavljaca
	- CreditRating -> kred_rejting
*/
insert into kupovina
SELECT	POH.PurchaseOrderID, POH.Status, POH.EmployeeID, V.AccountNumber, V.Name, V.CreditRating
FROM	AdventureWorks2014.Purchasing.PurchaseOrderHeader as POH INNER JOIN AdventureWorks2014.Purchasing.Vendor as V
ON		POH.VendorID = V.BusinessEntityID
--rj: 4012

/*
c) Iz tabela sales.salesperson i sales.salesterritory baze AdventureWorks2014 u tabelu prodaja importovati podatke po sljedećem pravilu:
	- BusinessEntityID -> prodavacID
	- SalesQuota -> prod_kvota
	- Bonus -> bonus
	- SalesLastYear -> proslogod_prodaja
	- Name -> naziv_terit
	- CreditRating -> kred_rejting
*/
insert into prodaja
SELECT	SP.BusinessEntityID, SP.SalesQuota, SP.Bonus, SP.SalesLastYear, ST.Name
FROM	AdventureWorks2014.Sales.SalesPerson as SP INNER JOIN AdventureWorks2014.Sales.SalesTerritory as ST
ON		SP.TerritoryID = ST.TerritoryID
--rj: 14
--10 bodova




------------------------------------------
/*
3.
a) Iz tabela radnik i kupovina kreirati pogled view_bicikl koji će imati sljedeću strukturu: 
	- kupovinaID,
	- naziv dobavljača,
	- kreditni rejting
Uslov je da u pogledu budu samo oni zapisi u kojima se prema nazivu dobavljača zaključuje da se bavi prodajom bicikla.
 Obavezno napisati kod kojim će se dati prikaz sadržaja pogleda sortiran po ID kupovine.
b) Koristeći prethodno kreirani pogled prebrojati broj obavljenih kupovina prema kreditnom rejtingu. Pregled treba da sadrži oznaku kreditnog rejtinga i ukupan broj obavljenih kupovina.*/
--a
CREATE VIEW view_bicikl
as
SELECT	K.kupovinaID, K.naziv_dobavljaca, K.kred_rejting
FROM	radnik as R INNER JOIN kupovina as K 
ON		R.radnikID = K.radnikID
where	K.naziv_dobavljaca like '%Bi%'

select * 
from view_bicikl
order by 1
--rj: 1474

--b
select kred_rejting, count (kred_rejting) as ukupan_broj
from view_bicikl
group by kred_rejting
order by 1
--rj: 3
/*
1	1273
3	151
5	50
*/
--10 bodova




-----------------------------------------------
/*
4.
Kreirati proceduru koja će imati istu strukturu kao pogled kreiran u prethodnom zadatku. Voditi računa o tipovima varijabli u proceduri. Proceduru kreirati tako da je prilikom izvršavanja moguće unijeti bilo koji broj parametara (možemo ostaviti bilo koji parametar bez unijete vrijednosti). Uslov je da se procedurom obuhvate oni zapisi iz pogleda kod kojih je kreditni rejting veći od 1, te da se izvrši sortiranje po kreditnom rejtingu. Pokrenuti proceduru za kreditni rejting 3 i 5.*/
CREATE PROCEDURE sp_view_bicikl
(
	@kupovinaID int = null, 
	@naziv_dobavljaca nvarchar (50) = null,
	@kred_rejting int = null
)
AS
BEGIN
	SELECT kupovinaID, naziv_dobavljaca, kred_rejting 
	FROM view_bicikl
	WHERE	kred_rejting > 1 AND 
			(kupovinaID = @kupovinaID OR
			naziv_dobavljaca = @naziv_dobavljaca OR
			kred_rejting = @kred_rejting)
	ORDER BY 3
END

EXEC sp_view_bicikl @kred_rejting = 3
--rj: 151

EXEC sp_view_bicikl @kred_rejting = 5
--rj: 50
--10 bodova




-----------------------------------------------
/*
5.
a) U tabeli radnik kreirati neklasterirani indeks nad kolonom drzavaID. Uključiti kolone sati_god_odmora i sati_bolovanja. 
b) Izvršiti testiranje kreiranog indeksa. 
c) Obrisati prethodno kreirani indeks.
*/
CREATE NONCLUSTERED INDEX IX_ukupno_sati ON radnik
(
		drzavaID ASC
)
INCLUDE (sati_god_odmora, sati_bolovanja)

SELECT * FROM radnik
WHERE drzavaID < 50000000 And sati_god_odmora > 80 and sati_bolovanja > 40
--rj: 3
/*
53	9659517	adventure-works\diane0	87	63
210	20244403	adventure-works\belinda0	83	61
230	28414965	adventure-works\stuart1	88	64
*/

drop index IX_ukupno_sati on radnik
--5 bodova
	



-----------------------------------------------
/*
6.
a) Dati pregled kojim će se prebrojati zapisi u kojima je broj sati bolovanja veći od broja sati godišnjeg odmora, uz uslov da je ta razlika veća od 10. Pregled treba da sadrži razliku sati i ukupan broj. Sortirati prema razlici sati. 
b) Dati pregled svih zapisa kojim će se prebrojati broj država po prodajnim kvotama.
*/
--a
SELECT	(sati_bolovanja - sati_god_odmora) as razlika_sati, count (sati_bolovanja - sati_god_odmora) as ukupan_broj
FROM	radnik
where	(sati_bolovanja - sati_god_odmora) > 10
group by (sati_bolovanja - sati_god_odmora)
order by 1 
--rj: 12

--b
SELECT	prodaja.prod_kvota, count (radnik.drzavaID)
FROM	radnik INNER JOIN
		prodaja ON radnik.radnikID = prodaja.prodavacID
group by prodaja.prod_kvota
--rj: 2
/*
250000.00	11
300000.00	3
*/
--10 bodova




-------------------------------------------
/*
7.
a) Kreirati pogled dobavljaci_radnici koji će se sastojati od kolona naziv dobavljača i ukupan broj radnika. Ukupan broj je podatak kojim se prebrojava broj radnika s kojima je dobavljač poslovao. Obavezno napisati kod kojim će se izvršiti pregled sadržaja pogleda sortiran po ukupnom broju.
b) Kreirati pregled kojim će se izvršiti prebrojavanje po ukupnom broju prebrojanih radnika.
c) Kreirati proceduru kojom će se iz pogleda kreiranog pod a) preuzeti zapisi u kojima je ukupan broj manji od 50. Voditi računa o tipovima podataka. Proceduru kreirati tako da je prilikom izvršavanja moguće unijeti bilo koji broj parametara (možemo ostaviti bilo koji parametar bez unijete vrijednosti). Pokrenuti proceduru za vrijednosti ukupan broj = 1, 2 i 50.
*/
--a
create view dobavljaci_radnici
as
SELECT	naziv_dobavljaca, count (radnikID) as ukupan_broj
FROM	kupovina
GROUP BY naziv_dobavljaca

select *
from dobavljaci_radnici
order by 1
--rj: 86

--b
select ukupan_broj, count (ukupan_broj)
from dobavljaci_radnici
group by ukupan_broj
order by 1
--5
/*
1	4
2	2
4	1
50	29
51	50
*/

--c
CREATE PROCEDURE sp_dobavljaci_radnici 
(
	@naziv_dobavljaca nvarchar (50) = null,
	@ukupan_broj int = null
) 
as
begin
	select naziv_dobavljaca, ukupan_broj
	from dobavljaci_radnici
	WHERE ukupan_broj < 51 and
		(naziv_dobavljaca = @naziv_dobavljaca or
		ukupan_broj = @ukupan_broj)
END

exec sp_dobavljaci_radnici @ukupan_broj = 4
--rj: 1
--15 bodova

---------------------------------------
/*
8.
a) Iz tabela kupovina i radnik kreirati pogled view_sifra_transakc koja će se sastojati od sljedećih kolona: 
	- naziv dobavljača,
	- ID države (odnosi se na radnika),
	- sifra_transakc
Podaci u koloni sifra_transakc će se formirati spajanjem karaktera koji se dobiju kada se iz kolone loginID tabele radnik ukloni dio 'adventure-works\' i posljednja 4 karaktera iz kolone br_racuna tabele kupovina, između kojih je potrebno umetnuti donju crtu (_). 
Obavezno napisati kod za pregled sadržaja pogleda.
b) Iz prethodno kreiranog pogleda prebrojati sve zapise u kojima su i drzavaID i šifra transkacije parni brojevi .*/
*/
create view view_sifra_transakc
as
select	K.naziv_dobavljaca, R.drzavaID, substring (R.loginID, 17, 15) + '_' +right (K.br_racuna, 4) as sifra_transakc
FROM	kupovina as K INNER JOIN radnik as R
ON		K.radnikID = R.radnikID

select * 
from view_sifra_transakc
order by 1
--4012

select count (*) 
from view_sifra_transakc
where right (drzavaID,1) in (0,2,4,6,8) and right (sifra_transakc, 1) in (0,2,4,6,8)
--rj: count = 93  
--10 bodova


--------------------------------------------
/*
9.
a) U tabeli kupovina broj računa se sastoji od slovnog i brojčanog dijela. Kreirati pogled view_slovni kojim će se izvršiti prebrojavanje prema slovnom dijelu broja računa.
b) Koristeći prethodno kreirani pogled izvršiti prebrojavanje prema početnom slovu 
c) Koristeći pogled kreiran pod a) izvršiti prebrojavanje ukupnog broj prebrojanih slovnih dijelova koji nisu jednocifreni.
*/
create view view_slovni
as
select left (br_racuna,LEN (br_racuna)-4) as slovni, COUNT (left (br_racuna,LEN (br_racuna)-4)) as count_slovni
from kupovina
group by left (br_racuna,LEN (br_racuna)-4)
--80

select LEFT (slovni,1), COUNT (LEFT (slovni,1))
from view_slovni
group by LEFT (slovni,1)
--18

select count_slovni, COUNT (count_slovni)
from view_slovni
where count_slovni > 9 
group by count_slovni
--4
/*
50	29
51	41
102	3
154	1
*/
--15 bodova



--------------------------------------------
/*
10. 
Kreirati upit kojim će dati prikaz kolone loginID nakon što se iz nje izbaci sve osim karaktera koji slijede nakon znaka \, uz uslov da se prikažu samo oni zapisi u kojima je dužina novonastalog stringa kraća od 6 znakova.
*/
select substring (loginID,17,15)
from radnik
where LEN (substring (loginID,17,15)) < 6
--82
--5 bodova


	CREATE DATABASE MILICALJUBAVkl
	use MILICALJUBAVkl

--b) Kreiranje tabela. Voditi raèuna o meðusobnom odnosu izmeðu tabela. Definirati odgovarajuæe spoljne kljuèeve pomoæu kojih æe se tabele meðusobno povezati.

	
/*
I. Kreirati tabelu narudzba sljedeæe strukture:
	- narudzbaID cjelobrojna varijabla, primarni kljuè
	- kupac, 40 unicode karaktera
	- puna_adresa, 80 unicode karaktera
	- datum_narudzbe, datumska varijabla
	- cijena_prevoza, novèana varijabla
*/

	CREATE TABLE narudzba
	(
		narudzbaID int not null primary key,
		kupac nvarchar(40),
		puna_adresa nvarchar(80),
		datum_narudzbe date,
		cijena_prevoza money
	)


/*
II. Kreirati tabelu proizvod sljedeæe strukture:
	- proizvodID, , cjelobrojna varijabla, primarni kljuè 
	- naziv_proizvoda, 40 unicode karaktera
	- naziv_dobavljaca, 40 unicode karaktera
	- stanje_na_sklad, cjelobrojna varijabla
	- narucena_kol, cjelobrojna varijabla
*/
	create table proizvod
	(
		proizvodID int not null primary key,
		naziv_proizvoda nvarchar(40),
		naziv_dobavljaca nvarchar(40),
		stanje_na_sklad int,
		narucena_kol int
	)

/*
II. Kreirati tabelu detalji_narudzbe sljedeæe strukture:
	- narudzbaID, cjelobrojna varijabla
	- proizvodID, cjelobrojna varijabla
	- cijena_proizvoda, novèana varijabla
	- kolicina, cjelobrojna varijabla
	- popust, decimalna varijabla
*/
	create table detalji_narudzbe 
	(
		narudzbaID int not null,
		proizvodID int not null,
		cijena_proizvoda money,
		kolicina int,
		popust decimal(8,2),
		constraint PK_detalji_narudzbe primary key (narudzbaID,proizvodID),
		constraint FK_detalji_narudzbe_narudzba foreign key (narudzbaID) references narudzba(narudzbaID),
		constraint FK_detalji_narudzbe_proizvod foreign key (proizvodID) references proizvod (proizvodID)
	)

--10 bodova
---------------------------------------------------------------------------
--2. Import podataka
/*
Koristeæi bazu Northwind u vlastiti bazu prebaciti podatke prema zadatim pravilima.
a) U tabelu narudzba iz tabela Customers i Orders prebaciti: 
	- OrderID -> narudzbaID 
	- CompanyName -> kupac 
	- puna_adresa - spojiti podatke iz kolona Address, PostalCode i City pri èemu je potrebno podatke razdvojiti crticom
	- OrderDate -> datum_narudzbe 
	- Freight -> cijena_prevoza
*/
	INSERT INTO narudzba
	SELECT O.OrderID,C.CompanyName,C.Address+ '_' + C.PostalCode + '_' + C.City AS 'puna_adresa',o.OrderDate,O.Freight
	FROM Northwind.dbo.Customers as C join Northwind.dbo.Orders as O ON C.CustomerID=O.CustomerID


/*
b) U tabelu proizvod iz tabela Products i Suppliers prebaciti: 
	- ProductID -> proizvodID 
	- ProductName -> naziv_proizvoda 
	- CompanyName -> naziv_dobavljaca 
	- UnitsInStock -> stanje_na_sklad 
	- UnitsOnOrder -> narucena_kol 
*/

	INSERT INTO proizvod
	SELECT P.ProductID,p.ProductName,S.CompanyName,P.UnitsInStock,P.UnitsOnOrder
	from Northwind.dbo.Products as P join Northwind.dbo.Suppliers as S ON P.SupplierID=S.SupplierID
--77

/*
c) U tabelu detalji_narudzbe iz tabela Order Details i Products prebaciti: 
	- OrderID -> narudzbaID 
	- ProductID -> proizvodID 
	- UnitPrice -> cijena_proizvoda 
	- Quantity -> kolicina 
	- Discount -> popust 
*/

	INSERT INTO detalji_narudzbe
	SELECT OD.OrderID,P.ProductID,P.UnitPrice,OD.Quantity,OD.Discount
	FROM Northwind.dbo.[Order Details] AS OD JOIN Northwind.dbo.Products AS P ON OD.ProductID=P.ProductID


--2155
--10 bodova




---------------------------------------------------------------------------
/*
3. 
a) Koristeæi tabele narudzba i detalji_narudzbe kreirati pogled view_kupac_kol sljedeæe strukture:
	-	narudzbaID
	-	kupac
	-	datum_narudzbe
	-	kolicina
uz uslov da je narudzba izvršena najranije 22 godine u odnosu na aktuelni datum.
*/

--12 bodova
go
create view view_kupac_kol
as
select n.narudzbaID, n.kupac, n.datum_narudzbe, dn.kolicina
from narudzba as n join detalji_narudzbe as dn on dn.narudzbaID=n.narudzbaID 
where datediff(year, n.datum_narudzbe, getdate()) <22
/*4. 
Kreirati proceduru koja æe imati istu strukturu kao tabela narudzba. Voditi raèuna o tipovima varijabli u proceduri. Proceduru kreirati tako da je prilikom izvršavanja moguæe unijeti bilo koji broj parametara (možemo ostaviti bilo koji parametar bez unijete vrijednosti). Uslov je da preuzmu samo oni zapisi u kojima nije odobren popust. Pokrenuti porceduru za sljedeæe vrijednosti parametara:
1. kolièina = 10
2. ID narudžbe = 10255
*/

go
create procedure proc_kupac_kol
(
@narudzbaID INT=NULL,
@proizvodID INT=NULL,
@cijena_proizvoda MONEY=null,
@kolicina INT=null,
@popust DECIMAL=null
)
as
begin
select narudzbaID,proizvodID,cijena_proizvoda,kolicina,popust
from detalji_narudzbe
where (@narudzbaID=narudzbaID OR  @proizvodID=proizvodID OR @cijena_proizvoda=cijena_proizvoda OR
	   @kolicina=kolicina OR  @popust=popust) AND ( @popust IS NULL)
END;


exec proc_kupac_kol @kolicina=10
exec proc_kupac_kol @narudzbaID=10255


/*
5. Kreirati pogled kojim æe se dati prikaz naruèenih kolièina prema mjesecu narudžbe. Uslov je da je narudžba izvršena u 1996. godini. Pogled treba sadržavati ID narudžbe, redni broj mjeseca i kolièinu.
*/

go
create view view_kolicina
as
select n.narudzbaID, month(n.datum_narudzbe) as 'mjesec', dn.kolicina
from narudzba as n join detalji_narudzbe as dn on dn.narudzbaID=n.narudzbaID
where YEAR(n.datum_narudzbe) LIKE 1996 

/*
6. 
a) Kreirati pogled koji æe se sastojati od naziva dobavljaèa, naziva proizvoda, ukupne cijene koja je proizvod jediniène cijene i kolièine, ukupne cijene s popustom koja predstavlja ukupnu cijenu sa obraèunatim popustom i visinu popusta izraženu kao broj. Obratiti pažnju na naèin raèunanja ukupne cijene s popustom. Uslov da je u pogledu budu samo oni zapisi kod kojih je odobren popust.
b) Koriseæi pogled kreiran pod a) prikazati minimalnu, maksimalnu i srednju vrijednost visine popusta, te razliku izmeðu minimalne i maksimalne vrijednosti. Srednja vrijednsot predstavlja srednju vrijednost novèanih vrijednosti, pa njen prikaz treba s tim uskladiti.
*/

go
create view view_dobavljac
as
select p.naziv_dobavljaca, p.naziv_proizvoda, dn.kolicina*dn.cijena_proizvoda as 'ukupna_cijena', dn.kolicina*dn.cijena_proizvoda*(1-dn.popust) as 'uk_sa_pop', dn.cijena_proizvoda*dn.kolicina*dn.popust as 'visina_popusta' 
from proizvod as p join detalji_narudzbe as dn on p.proizvodID=dn.proizvodID
where dn.popust IS NOT NULL

SELECT min(visina_popusta) as 'min', max(visina_popusta) as 'max', round(avg(visina_popusta),2) as 'prosjecna',
	   MAX(visina_popusta)-MIN(visina_popusta) as 'razlika'
from view_dobavljac

/*
7. 
a) Kreirati pogled koji æe prikazati sumirane cijene proizvoda po nazivu proizvoda i popustu.
b) Koristeæi pogled kreiran pod a) prikazati maksimalne vrijednosti suma po visinama popusta. Sortirati po vrijednostima popusta u rastuæem redoslijedu.
c) Koristeæi pogled kreiran pod a) prikazati srednje vrijednosti suma po nazivima proizvoda. Sortirati po vrijednostima suma u opadajuæem redoslijedu. Voditi raèuna da je cijena proizvoda novèana varijabla, te prema tome formatirati srednje vrijednosti.
*/

go
create view view_cijena
as
select p.naziv_proizvoda,dn.popust,SUM(dn.cijena_proizvoda) as 'sumirana_cijena'
from proizvod as p join detalji_narudzbe as dn on p.proizvodID=dn.proizvodID
group by p.naziv_proizvoda,dn.popust


select MAX(c.sumirana_cijena) as 'cijena',c.popust
from view_cijena as c
group by c.popust
order by popust asc

select naziv_proizvoda, round(avg(sumirana_cijena),2) as 'sumirana cijena'
from view_cijena 
group by naziv_proizvoda
order by round(avg(sumirana_cijena),2) desc

/*
8. Dati pregled kupovine po rednom broju dana u mjesecu. Upit treba da sadrži naziv proizvoda, redni broj dana u mjesecu i ukupan broj prodaje proizvoda na taj redni broj dana. Npr, proizvod_1 se 1 dana u mjesecu prodao 3 puta. Uslov je da se da prikaz za prvu polovinu mjeseca.
*/

SELECT p.naziv_proizvoda,day(n.datum_narudzbe) as 'dani_u_mjesecu',count(*) as 'koliko_puta_se_prodalo'
FROM proizvod as p join detalji_narudzbe as dn on p.proizvodID=dn.proizvodID JOIN narudzba as n ON dn.narudzbaID=n.narudzbaID
where day(n.datum_narudzbe)>=1 AND day(n.datum_narudzbe)<=15
GROUP BY p.naziv_proizvoda,day(n.datum_narudzbe)

/*
9. Kreirati pregled kojim æe se na osnovu podataka iz kolone puna_adresa prebrojati koliko puta se neka adresa pojavljuje. Upit treba da sadrži adresu i broj pojavljivanja adrese. Npr. adresa 1 se pojavljuje 10 puta. Sortirati prema broju pojavljivanja u opadajuæem redoslijedu.
*/

SELECT n.puna_adresa,COUNT(n.puna_adresa) as 'broj_pojavljivanja_adrese'
FROM narudzba AS n
GROUP BY n.puna_adresa
ORDER BY COUNT(n.puna_adresa) desc


select left (puna_adresa, (CHARINDEX ('-',puna_adresa)-1)), count (left (puna_adresa, (CHARINDEX ('-',puna_adresa)-1)))
from narudzba
group by left (puna_adresa, (CHARINDEX ('-',puna_adresa)-1))
order by 2 desc





--1
/*
a) Koristeći izričito SQL kod kreirati bazu podataka pod vlastitim brojem indeksa.
*/
CREATE DATABASE PI_2019_9_16
USE PI_2019_9_16

--b) Kreiranje tabela. Voditi računa o međusobnom odnosu između tabela. Definirati odgovarajuće spoljne ključeve pomoću kojih će se tabele međusobno povezati.
/*
I. Kreirati tabelu narudzba sljedeće strukture:
	- narudzbaID cjelobrojna varijabla, primarni ključ
	- kupac, 40 unicode karaktera
	- puna_adresa, 80 unicode karaktera
	- datum_narudzbe, datumska varijabla
	- cijena_prevoza, novčana varijabla
*/
CREATE TABLE narudzba
(
	narudzbaID INT CONSTRAINT PK_Narudzba PRIMARY KEY,
	kupac NVARCHAR (40),
	puna_adresa NVARCHAR (80),
	datum_narudzbe DATE,
	cijena_prevoza MONEY
)

/*
II. Kreirati tabelu proizvod sljedeće strukture:
	- proizvodID, , cjelobrojna varijabla, primarni ključ 
	- naziv_proizvoda, 40 unicode karaktera
	- naziv_dobavljaca, 40 unicode karaktera
	- stanje_na_sklad, cjelobrojna varijabla
	- narucena_kol, cjelobrojna varijabla
*/
CREATE TABLE proizvod
(
	proizvodID INT CONSTRAINT PK_ProizvodID PRIMARY KEY,
	naziv_proizvoda NVARCHAR (40),
	naziv_dobavljaca NVARCHAR (40),
	stanje_na_sklad INT,
	narucena_kol INT
)

/*
II. Kreirati tabelu detalji_narudzbe sljedeće strukture:
	- narudzbaID, cjelobrojna varijabla
	- proizvodID, cjelobrojna varijabla
	- cijena_proizvoda, novčana varijabla
	- kolicina, cjelobrojna varijabla
	- popust, decimalna varijabla
*/
CREATE TABLE detalji_narudzbe
(
	narudzbaID INT,
	proizvodID INT,
	cijena_proizvoda MONEY,
	kolicina INT,
	popust decimal (8,2),
	CONSTRAINT FK_Detalji_Narudzba FOREIGN KEY (narudzbaID) REFERENCES narudzba (narudzbaID),
	CONSTRAINT FK_Detalji_Proizvod FOREIGN KEY (proizvodID) REFERENCES proizvod (proizvodID),
	CONSTRAINT PK_DetaljiNarudzbe PRIMARY KEY (narudzbaID, proizvodID)
)
--10 bodova



---------------------------------------------------------------------------
--2. Import podataka
/*
Koristeći bazu Northwind u vlastiti bazu prebaciti podatke prema zadatim pravilima.
a) U tabelu narudzba iz tabela Customers i Orders prebaciti: 
	- OrderID -> narudzbaID 
	- CompanyName -> kupac 
	- puna_adresa - spojiti podatke iz kolona Address, PostalCode i City pri čemu je potrebno podatke razdvojiti crticom
	- OrderDate -> datum_narudzbe 
	- Freight -> cijena_prevoza
*/
INSERT INTO narudzba 
SELECT	O.OrderID, C.CompanyName, C.Address + ' - ' + C.PostalCode + ' - ' + C.City,
		O.OrderDate, O.Freight
FROM	Northwind.dbo.Customers AS C INNER JOIN Northwind.dbo.Orders AS O
ON		C.CustomerID = O.CustomerID 
--830

SELECT * FROM narudzba

/*
b) U tabelu proizvod iz tabela Products i Suppliers prebaciti: 
	- ProductID -> proizvodID 
	- ProductName -> naziv_proizvoda 
	- CompanyName -> naziv_dobavljaca 
	- UnitsInStock -> stanje_na_sklad 
	- UnitsOnOrder -> narucena_kol 
*/
INSERT INTO proizvod
SELECT	P.ProductID, P.ProductName, S.CompanyName, P.UnitsInStock, P.UnitsOnOrder
FROM	Northwind.dbo.Products AS P INNER JOIN Northwind.dbo.Suppliers AS S 
ON		P.SupplierID = S.SupplierID
--77

/*
c) U tabelu detalji_narudzbe iz tabela Order Details i Products prebaciti: 
	- OrderID -> narudzbaID 
	- ProductID -> proizvodID 
	- UnitPrice -> cijena_proizvoda 
	- Quantity -> kolicina 
	- Discount -> popust 
*/
INSERT INTO detalji_narudzbe
SELECT	OD.OrderID, OD.ProductID, OD.UnitPrice, OD.Quantity, OD.Discount
FROM    Northwind.dbo.[Order Details] AS OD INNER JOIN Northwind.dbo.Products AS P
ON		OD.ProductID = P.ProductID
--2155
--10 bodova




---------------------------------------------------------------------------
/*
3. 
a) Koristeći tabele narudzba i detalji_narudzbe kreirati pogled view_kupac_kol sljedeće strukture:
	-	narudzbaID
	-	kupac
	-	datum_narudzbe
	-	kolicina
uz uslov da je narudzba izvršena najranije 22 godine u odnosu na aktuelni datum.
*/
create view view_kupac_kol
as
SELECT	detalji_narudzbe.narudzbaID, narudzba.kupac, narudzba.datum_narudzbe, detalji_narudzbe.kolicina
FROM	detalji_narudzbe INNER JOIN narudzba 
ON		detalji_narudzbe.narudzbaID = narudzba.narudzbaID
WHERE   (DATEDIFF(year, narudzba.datum_narudzbe, GETDATE()) < 22)
--691

select * from view_kupac_kol
--12 bodova




---------------------------------------------------------------------------
/*
4. 
Kreirati proceduru koja će imati istu strukturu kao tabela narudzba. Voditi računa o tipovima varijabli u proceduri. Proceduru kreirati tako da je prilikom izvršavanja moguće unijeti bilo koji broj parametara (možemo ostaviti bilo koji parametar bez unijete vrijednosti). Uslov je da preuzmu samo oni zapisi u kojima nije odobren popust. Pokrenuti porceduru za sljedeće vrijednosti parametara:
1. količina = 10
2. ID narudžbe = 10255
*/
go
CREATE PROCEDURE proc_detalji_narudzbe
(
	@narudzbaID int = null, 
	@proizvodID int = null,
	@cijena_proizvoda money = null,
	@kolicina int = null,
	@popust decimal (8,2) = null
)
AS
BEGIN
	SELECT narudzbaID, proizvodID, cijena_proizvoda, kolicina, popust 
	FROM detalji_narudzbe
	WHERE popust = 0 AND 
			(narudzbaID = @narudzbaID OR
			proizvodID = @proizvodID OR
			cijena_proizvoda = @cijena_proizvoda or
			kolicina = @kolicina or
			popust = @popust)
END

exec proc_detalji_narudzbe @kolicina = 10
--130

exec proc_detalji_narudzbe @narudzbaID = 10255
--4
--8 bodova




---------------------------------------------------------------------------
/*
5. Kreirati pogled kojim će se dati prikaz naručenih količina prema mjesecu narudžbe. Uslov je da je narudžba izvršena u 1996. godini. Pogled treba sadržavati ID narudžbe, redni broj mjeseca i količinu.
*/
go
create view view_1996
as
SELECT	detalji_narudzbe.narudzbaID, month (narudzba.datum_narudzbe) as mjesec, detalji_narudzbe.kolicina
FROM	detalji_narudzbe INNER JOIN narudzba 
	ON detalji_narudzbe.narudzbaID = narudzba.narudzbaID
where year (narudzba.datum_narudzbe) = 1996
--405

select * from view_1996

--7 bodova



---------------------------------------------------------------------------
/*
6. 
a) Kreirati pogled koji će se sastojati od naziva dobavljača, naziva proizvoda, ukupne cijene koja je proizvod jedinične cijene i količine, ukupne cijene s popustom koja predstavlja ukupnu cijenu sa obračunatim popustom i visinu popusta izraženu kao broj. Obratiti pažnju na način računanja ukupne cijene s popustom. Uslov da je u pogledu budu samo oni zapisi kod kojih je odobren popust.
b) Koriseći pogled kreiran pod a) prikazati minimalnu, maksimalnu i srednju vrijednost visine popusta, te razliku između minimalne i maksimalne vrijednosti. Srednja vrijednsot predstavlja srednju vrijednost novčanih vrijednosti, pa njen prikaz treba s tim uskladiti.
*/
--a
create view view_popust
as
SELECT	proizvod.naziv_dobavljaca, proizvod.naziv_proizvoda, detalji_narudzbe.cijena_proizvoda * detalji_narudzbe.kolicina as uk_cijena, detalji_narudzbe.cijena_proizvoda * detalji_narudzbe.kolicina * (1-detalji_narudzbe.popust) as uk_cij_sa_pop, detalji_narudzbe.cijena_proizvoda * detalji_narudzbe.kolicina * detalji_narudzbe.popust as vis_pop
FROM	detalji_narudzbe INNER JOIN proizvod 
	ON detalji_narudzbe.proizvodID = proizvod.proizvodID
	where detalji_narudzbe.popust <> 0
--838

select * from view_popust

--b
select min (vis_pop), MAX (vis_pop), round(AVG (vis_pop),2), MAX (vis_pop) - min (vis_pop)
from view_popust
--8 bodova





---------------------------------------------------------------------------
/*
7. 
a) Kreirati pogled koji će prikazati sumirane cijene proizvoda po nazivu proizvoda i popustu.
b) Koristeći pogled kreiran pod a) prikazati maksimalne vrijednosti suma po visinama popusta. Sortirati po vrijednostima popusta u rastućem redoslijedu.
c) Koristeći pogled kreiran pod a) prikazati srednje vrijednosti suma po nazivima proizvoda. Sortirati po vrijednostima suma u opadajućem redoslijedu. Voditi računa da je cijena proizvoda novčana varijabla, te prema tome formatirati srednje vrijednosti.
*/
--a
create view view_max_popust
as
SELECT	proizvod.naziv_proizvoda, detalji_narudzbe.popust, sum (detalji_narudzbe.cijena_proizvoda) as ukupno
FROM	detalji_narudzbe INNER JOIN proizvod 
	ON	detalji_narudzbe.proizvodID = proizvod.proizvodID
group by proizvod.naziv_proizvoda, detalji_narudzbe.popust
--407

--b
select popust, max (ukupno)
from view_max_popust
group by popust
--11
/*
0.00	3530.90
0.01	15.00
0.02	25.00
0.03	33.25
0.04	81.00
0.05	1212.10
0.06	34.00
0.10	527.00
0.15	297.00
0.20	421.60
0.25	742.74
*/
--c
select naziv_proizvoda, round (avg (ukupno),2)
from view_max_popust
group by naziv_proizvoda
order by 2 desc
--77
--15 bodova



---------------------------------------------------------------------------
/*
8. Dati pregled kupovine po rednom broju dana u mjesecu. Upit treba da sadrži naziv proizvoda, redni broj dana u mjesecu i ukupan broj prodaje proizvoda na taj redni broj dana. Npr, proizvod_1 se 1 dana u mjesecu prodao 3 puta. Uslova je da se dadne prikaz za prvu polovicu mjeseca.
*/
SELECT	proizvod.naziv_proizvoda, day (narudzba.datum_narudzbe) as r_br_dana, count (day (narudzba.datum_narudzbe))
FROM	detalji_narudzbe INNER JOIN narudzba 
	ON detalji_narudzbe.narudzbaID = narudzba.narudzbaID INNER JOIN proizvod 
		ON detalji_narudzbe.proizvodID = proizvod.proizvodID
where day (narudzba.datum_narudzbe) between 1 and 15
group  by proizvod.naziv_proizvoda, day (narudzba.datum_narudzbe)
--646
--15 bodova





---------------------------------------------------------------------------
/*
9. Kreirati pregled kojim će se na osnovu podataka iz kolone puna_adresa prebrojati koliko puta se neka adresa pojavljuje. Upit treba da sadrži adresu i broj pojavljivanja adrese. Npr. adresa 1 se pojavljuje 10 puta. Sortirati prema broju pojavljivanja u opadajućem redoslijedu.
*/
select left (puna_adresa, (CHARINDEX ('-',puna_adresa)-1)), count (left (puna_adresa, (CHARINDEX ('-',puna_adresa)-1)))
from narudzba
group by left (puna_adresa, (CHARINDEX ('-',puna_adresa)-1))
order by 2 desc
--89
--15 bodova
create database probajseneubit
USE probajseneubit
--b) Kreiranje tabela. Prilikom kreiranja tabela voditi računa o spojnim poljima između tabela.
/*
I. Kreirati tabelu TipProizv koja se sastoji od polja:
	- potkatID - cjelobrojna varijabla, primarni ključ
	- katID - cjelobrojna varijabla, obavezan unos
	- kat_naziv - 50 unicode karaktera, obavezan unos
	- potkat_naziv - 50 unicode karaktera, obavezan unos
*/
create table TipProizv
(
	potkatID int constraint PK_TipProizv primary key (potkatID),
	katID int not null,
	kat_naziv nvarchar(50) not null,
	potkat_naziv nvarchar(50)
)

/*
II. Kreirati tabelu proizvod koja se sastoji od polja:
	- proizvodID - cjelobrojna varijabla, primarni ključ
	- naziv - 50 UNICODE karaktera, obavezan unos
	- boja - 15 UNICODE karaktera
	- tezina - decimalni broj  decimal(8, 2),
	- dana_za_proiz - cjelobrojna varijabla, obavezan unos
	- klasa - 2 unicode karaktera 
	-dtmm_poc_prodaje- datumska varijabla samo za unos datuma (bez vremena)
	- potkat_ID cjelobrojna varijabla, obavezan unos
*/
create table proizvod
(
	proizvodID int constraint PK_proizvod Primary key (proizvodID),
	naziv nvarchar(50) not null,
	boja nvarchar(15),
	tezina decimal(8, 2),
	dana_za_proiz int not null,
	klasa nvarchar (2),
	dtm_poc_prodaje date,
	potkatID int not null
	constraint FK_proizvod_TipProiz foreign key (potkatID) references TipProizv (potkatID)
)

/*
III. Kreirati tabelu nalog koja se sastoji od polja:
	- nalogID - cjelobrojna varijabla, primarni ključ
	- proizvodID - cjelobrojna varijabla, obavezan unos
	- naruc_kol - cjelobrojna varijabla, obavezan unos
	- stanje_kol - cjelobrojna varijabla, obavezan unos
	- dtm_zaduz - datumska varijabla samo za unos datuma (bez vremena)
	- oznaka_greske - 50 unicode karaktera, obavezan unos
*/
create table nalog
(
	nalogID int not null primary key,
	proizvodID int not null,
	naruc_kol int not null,
	stanje_kol int not null,
	dtm_zaduz date,
	oznaka_greske nvarchar(50) not null,
	constraint FK_nalog_proizvod foreign key (proizvodID) references proizvod (proizvodID)
)
--15 bodova

--2. Importovanje podataka
/*
a) U tabelu TipProizv importovati podatke iz tabela ProductSubcategory i ProductCategory baze AdventureWorks2014 koje se nalaze u šemi Production na sljedeći način:
	- ProductSubcategoryID -> potkatID 
	- ProductCategoryID -> katID 
	- Name -> kat_naziv
	- Name -> potkat_naziv
Voditi računa o pripadnosti polja tabelama iz kojih se importuju podaci.
*/

INSERT INTO TipProizv
SELECT	PS.ProductSubcategoryID, PC.ProductCategoryID, PC.Name, PS.Name
FROM	AdventureWorks2014.Production.ProductCategory AS PC INNER JOIN AdventureWorks2014.Production.ProductSubcategory AS PS
ON		PC.ProductCategoryID = PS.ProductCategoryID

/*b) U tabelu proizvod importovati podatke iz tabele Product baze AdventureWorks2014 koja se nalazi u šemi Production na sljedeći način:
	- ProductID -> proizvodID
	- Name -> naziv
	- Color -> boja 
	- Weight -> tezina 
	- DaysToManufacture -> dana_za_proiz 
	- Class -> klasa 
	- ProductSubcategoryID -> potkatID
uz uslov da je ProductSubcategoryID sadrži vrijednost.
*/

INSERT INTO proizvod(proizvodID, naziv, boja, tezina, dana_za_proiz, klasa, potkatID)
select p.ProductID, P.Name, P.Color, P.Weight, P.DaysToManufacture, P.Class, P.ProductSubcategoryID
FROM	AdventureWorks2014.Production.Product AS P
where	P.ProductSubcategoryID is not null

/*
c) U tabelu nalog importovati podatke iz tabela WorkOrder i ScrapReason baze AdventureWorks2014 koja se nalazi u šemi Production na sljedeći način:
	- WorkOrderID -> nalogID 
	- ProductID -> proizvodID 
	- OrderQty -> naruc_kol 
	- StockedQty -> stanje_kol 
	- DueDate -> dtm_zaduz 
	- Name -> oznaka_greske
uz uslov da je ProductID veći ili jednak 680. 
*/
INSERT INTO nalog
SELECT	WO.WorkOrderID, WO.ProductID, WO.OrderQty, WO.StockedQty, WO.DueDate, SR.Name
FROM	AdventureWorks2014.Production.WorkOrder as WO INNER JOIN AdventureWorks2014.Production.ScrapReason as SR
ON		SR.ScrapReasonID = WO.ScrapReasonID
where	WO.ProductID >= 680 

/*
3. Iz tabele proizvod dati pregled koji će se sastojati od polja:

mjesec - mjesec iz datuma početka prodaje
uk_broj_po_mj - ukupan broj zapisa po mjesecima

5 bodova
*/

select MONTH(dtm_poc_prodaje) AS 'mjesec', count(*)
from proizvod
group by month(dtm_poc_prodaje)

/*
4. Iz tabele nalog kreirati pogled view_greska koji će se sastojati od polja:
- nalogID, proizvodID, dtm_zaduz, uz uslov da se u oznaci greške bilo gdje pojavi riječ 'brake'

10 bodova


*/

go
create view view_greska
as
select n.nalogID, n.proizvodID, n.dtm_zaduz, n.oznaka_greske
from nalog as n
where n.oznaka_greske LIKE '%Brake%'
/*
5. Koristeći pogled view_greska kreirati proceduru proc_greska kojom će se definisati ulazni parametar godina
a procedura će imati strukturu 
-godina 
-prebrojano, broj grešaka po godinama
Proc pokrenuti za vrijednost parametra 2011 i 2014

10 bodova

*/

go
create procedure proc_greska
(
@godina int=null
)
as
begin
select year(dtm_zaduz) as 'godina', count(*) as 'prebrojano' 
from view_greska
where @godina=year(dtm_zaduz)
group by year(dtm_zaduz)
end;

exec proc_greska @godina=2014
exec proc_greska @godina=2011
/*
6. Koristeći tabele proizvod i nalog kreirati pogled view_tezina sljedeće strukture:
- potkatID, 
- suma_tez suma tezina 
Uslov je da se preuzimaju zapisi u kojima se nalaze vrijednosti u kolonama boja i težina
*/

go
create view view_tezina
as
select p.potkatID, sum(p.tezina) as 'suma'
from proizvod as p join nalog as n on n.proizvodID=p.proizvodID
where p.boja IS NOT NULL AND p.tezina IS NOT NULL
GROUP BY P.potkatID
*/
/*
Koristeći pogled view_tezina prebrojati broj zapisa koji su veći ili jednaki, odnosno manji od srednje vrijednosti. Rezultat upita trebaju biti isključivo dvije poruke:
'Broj zapisa u kojima je suma veća ili jednaka srednjoj vrijednosti sume težina je: ' nakon čega slijedi prebrojati
'Broj zapisa u kojima je suma manja srednjoj vrijednosti sume težina je: ' nakon čega slijedi prebrojani broj
Neće se priznati rješenje koje vraća dvije ili više kolona

---- spajanje poruka, vise od jedne je UNION !

15 bodoba
*/

select 'broj zapisa u kojima je suma veca ili jednaka sredjnoj vrijednosti sume tezina je:' + CONVERT(nvarchar,COUNT(suma))
from view_tezina
where suma>=AVG(suma)
UNION 
SELECT
FROM 
group by 
having 

*/
/*
8. a)Kreirati pogled view_proizv_greska koji će se sastojati od polja:
proizvodID, oznaka_greske, uk_broj_gresaka kojim će se prebrojati ukupan broj pojavljivanja grešaka po proizvodID i nazivu greške.
b) Koristeći pogled view_proizv_greska dati informaciju o proizvodima na kojim je ustanovljeno više vrsta grešaka
Sortirati po opadajućem redoslijedu prema broju poajvljivanja


15 bodova
*/

go
create view view_proizv_greska
as
select n.proizvodID, n.oznaka_greske, count(n.oznaka_greske) as 'ukupan_broj'
from nalog as n
group by n.proizvodID, n.oznaka_greske



	select proizvodID,COUNT(ukupan_broj) as ' uk_prebrojano'
	from view_proizv_greska
	group by proizvodID
	order by 2 desc 

*/
/*
9. Kreirati pogled kojim će se dati prikaz nalogID, proizvodID, broja godina razlike u odnosnu na trenutnu (aktivnu), oznaku boje koju će predstavljati prvo slovo naziva (npr. Puprle) -> P, klase i naziva potkat. Izraz za izračunavanje broja godina razlike treba biti opšteg karaktera. Uslov je da naziv potkat sadrži 'Bikes', te da boja nije crna.Obavezno napisati kod za pregled sadržaja pogleda.


*/

go
create view view_neki
as
select N.nalogID, N.proizvodID,DATEDIFF(YEAR,N.dtm_zaduz,GETDATE()) as 'razlika_godina', LEFT(P.boja,1) AS 'oznaka_boje',P.klasa,TP.potkat_naziv							          
from nalog as N join proizvod as P ON N.proizvodID=P.proizvodID join TipProizv as TP ON P.potkatID=TP.potkatID
where TP.potkat_naziv like '%Bikes%' AND P.boja  NOT LIKE 'Black'


SELECT* from  view_neki
/*
10.a) Kreirati backup baze na default lokaciju
b) obrisati bazu
c) restore baze
*/
backup database probajseneubit
to disk = 'probajseneubit.bak'

use master

alter database probajseneubit
set offline

drop database probajseneubit

restore database probajseneubit 
from disk = 'probajseneubit.bak'
with replace

*/


*/



















--29.06.2022.

--BAZE PODATAKA II – ISPIT

--***Prilikom izrade zadataka, OBAVEZNO iznad svakog zadatka napisati redni broj zadatka npr (4c). Zadaci koji ne budu oznaèeni na prethodno definisan naèin neæe biti evaluirani.

--1.	Kroz SQL kod kreirati bazu podataka sa imenom vašeg broja indeksa.
CREATE DATABASE brojIndexa
GO
USE brojIndexa
GO
--2.	U kreiranoj bazi podataka kreirati tabele sa sljedeæom strukturom:
--a)	Proizvodi
--•	ProizvodID, cjelobrojna vrijednost i primarni kljuè, autoinkrement
--•	Naziv, 50 UNICODE karaktera (obavezan unos)
--•	SifraProizvoda, 25 UNICODE karaktera (obavezan unos)
--•	Boja, 15 UNICODE karaktera 
--•	NazivKategorije, 50 UNICODE (obavezan unos)
--•	Tezina, decimalna vrijednost sa 2 znaka iza zareza
CREATE TABLE Proizvodi
(
	ProizvodID INT CONSTRAINT PK_Proizvod PRIMARY KEY IDENTITY(1,1),
	Naziv NVARCHAR(50) NOT NULL,
	SifraProizvoda NVARCHAR(25) NOT NULL,
	Boja NVARCHAR(15), 
	NazivKategorije  NVARCHAR(50) NOT NULL,
	Tezina DECIMAL(18,2)

)
GO
--b)	ZaglavljeNarudzbe 
--•	NarudzbaID, cjelobrojna vrijednost i primarni kljuè, autoinkrement
--•	DatumNarudzbe, polje za unos datuma i vremena (obavezan unos)
--•	DatumIsporuke, polje za unos datuma i vremena
--•	ImeKupca, 50 UNICODE (obavezan unos)
--•	PrezimeKupca, 50 UNICODE (obavezan unos)
--•	NazivTeritorije, 50 UNICODE (obavezan unos)
--•	NazivRegije, 50 UNICODE (obavezan unos)
--•	NacinIsporuke, 50 UNICODE (obavezan unos)
CREATE TABLE ZaglavljeNarudzbe
(
	NarudzbaID INT CONSTRAINT PK_ZaglavljeNarudzbe PRIMARY KEY IDENTITY(1,1),
	DatumNarudzbe DATETIME NOT NULL,
	DatumIsporuke DATETIME,
	ImeKupca NVARCHAR(50) NOT NULL,
	PrezimeKupca NVARCHAR(50) NOT NULL, 
	NazivTeritorije NVARCHAR(50) NOT NULL,
	NazivRegije NVARCHAR(50) NOT NULL,
	NacinIsporuke NVARCHAR(50) NOT NULL
)
GO
--c)	DetaljiNarudzbe
--•	NarudzbaID, cjelobrojna vrijednost, strani kljuè
--•	ProizvodID, cjelobrojna vrijednost, strani kljuè
--•	Cijena, novèani tip (obavezan unos),
--•	Kolicina, skraæeni cjelobrojni tip (obavezan unos),
--•	Popust, novèani tip (obavezan unos)
CREATE TABLE DetaljiNarudzbe
(
	NarudzbaID INT NOT NULL CONSTRAINT FK_ZaglavljeNarudzbe FOREIGN KEY REFERENCES ZaglavljeNarudzbe(NarudzbaID),
	ProizvodID INT NOT NULL CONSTRAINT FK_Proizvodi FOREIGN KEY REFERENCES Proizvodi(ProizvodID),
	Cijena MONEY NOT NULL,
	Kolicina SMALLINT NOT NULL,
	Popust MONEY NOT NULL,
	DetaljiNarudzbe INT CONSTRAINT PK_DetaljiNarudzbe PRIMARY KEY IDENTITY(1,1)
)
GO
--**Jedan proizvod se može više puta naruèiti, dok jedna narudžba može sadržavati više proizvoda. U okviru jedne narudžbe jedan proizvod se može naruèiti više puta.
--7 bodova
--3.	Iz baze podataka AdventureWorks u svoju bazu podataka prebaciti sljedeæe podatke:
--a)	U tabelu Proizvodi dodati sve proizvode, na mjestima gdje nema pohranjenih podataka o težini zamijeniti vrijednost sa 0
--•	ProductID -> ProizvodID
--•	Name  -> Naziv 	
--•	ProductNumber -> SifraProizvoda
--•	Color -> Boja 
--•	Name (ProductCategory) -> NazivKategorije
--•	Weight -> Tezina
SET IDENTITY_INSERT  Proizvodi ON
INSERT INTO Proizvodi(ProizvodID,Naziv,SifraProizvoda,Boja,NazivKategorije,Tezina)
SELECT P.ProductID,P.Name,P.ProductNumber,P.Color,PC.Name,ISNULL(P.Weight,0)
FROM AdventureWorks2017.Production.Product AS P
INNER JOIN AdventureWorks2017.Production.ProductSubcategory AS PS
ON P.ProductSubcategoryID=PS.ProductSubcategoryID
INNER JOIN AdventureWorks2017.Production.ProductCategory AS PC
ON PS.ProductCategoryID=PC.ProductCategoryID
SET IDENTITY_INSERT  Proizvodi OFF
GO

--b)	U tabelu ZaglavljeNarudzbe dodati sve narudžbe
--•	SalesOrderID -> NarudzbaID
--•	OrderDate -> DatumNarudzbe
--•	ShipDate -> DatumIsporuke
--•	FirstName (Person) -> ImeKupca
--•	LastName (Person) -> PrezimeKupca
--•	Name (SalesTerritory) -> NazivTeritorije
--•	Group (SalesTerritory) -> NazivRegije
--•	Name (ShipMethod) -> NacinIsporuke
SET IDENTITY_INSERT ZaglavljeNarudzbe ON
INSERT INTO ZaglavljeNarudzbe(NarudzbaID,DatumNarudzbe,DatumIsporuke,ImeKupca,PrezimeKupca,NazivTeritorije,NazivRegije,NacinIsporuke)
SELECT SOH.SalesOrderID,SOH.OrderDate,SOH.ShipDate,PP.FirstName,PP.LastName,ST.Name,ST.[Group],SM.Name
FROM AdventureWorks2017.Sales.SalesOrderHeader AS SOH
INNER JOIN AdventureWorks2017.Sales.Customer AS SC
ON SOH.CustomerID=SC.CustomerID
INNER JOIN AdventureWorks2017.Person.Person AS PP
ON SC.PersonID=PP.BusinessEntityID
INNER JOIN AdventureWorks2017.Sales.SalesTerritory AS ST
ON ST.TerritoryID=SOH.TerritoryID
INNER JOIN AdventureWorks2017.Purchasing.ShipMethod AS SM
ON SOH.ShipMethodID=SM.ShipMethodID
SET IDENTITY_INSERT ZaglavljeNarudzbe OFF
GO
--c)	U tabelu DetaljiNarudzbe dodati sve stavke narudžbe
--•	SalesOrderID -> NarudzbaID
--•	ProductID -> ProizvodID
--•	UnitPrice -> Cijena
--•	OrderQty -> Kolicina
--•	UnitPriceDiscount -> Popust
--8 bodova
INSERT INTO DetaljiNarudzbe
SELECT SOD.SalesOrderID,SOD.ProductID,SOD.UnitPrice,SOD.OrderQty,SOD.UnitPriceDiscount
FROM AdventureWorks2017.Sales.SalesOrderDetail AS SOD
GO
--4.	
--a)	(6 bodova) Kreirati upit koji æe prikazati ukupan broj uposlenika po odjelima. Potrebno je prebrojati samo one uposlenike koji su trenutno aktivni, odnosno rade na datom odjelu. Takoðer, samo uzeti u obzir one uposlenike koji imaju više od 10 godina radnog staža (ne ukljuèujuæi graniènu vrijednost). Rezultate sortirati preba broju uposlenika u opadajuæem redoslijedu. (AdventureWorks2017)
USE AdventureWorks2017
SELECT D.Name,COUNT(*) 'Broj uposlenika'
FROM HumanResources.Employee AS E
INNER JOIN HumanResources.EmployeeDepartmentHistory AS EDH
ON E.BusinessEntityID=EDH.BusinessEntityID
INNER JOIN HumanResources.Department AS D
ON EDH.DepartmentID=D.DepartmentID
WHERE EDH.EndDate IS NULL AND DATEDIFF(YEAR,E.HireDate,GETDATE())>10
GROUP BY D.Name
ORDER BY 2 DESC
GO
--, SUM(IIF(POD.RejectedQty>100,1,0)) 'Broj stavki'
--b)	Kreirati upit koji prikazuje po mjesecima ukupnu vrijednost poruèene robe za skladište, te ukupnu kolièinu primljene robe, iskljuèivo u 2012 godini. Uslov je da su troškovi prevoza bili izmeðu 500 i 2500, a da je dostava izvršena CARGO transportom. Takoðer u rezultatima upita je potrebno prebrojati stavke narudžbe na kojima je odbijena kolièina veæa od 100.(AdventureWorks2017)
USE AdventureWorks2017
--1. NAÈIN
  SELECT MONTH(POH.OrderDate) 'Mjesec', SUM(POD.LineTotal), SUM(POD.ReceivedQty),SUM(IIF(POD.RejectedQty>100,1,0)) 'Broj stavki'
  FROM Purchasing.PurchaseOrderHeader AS POH
  INNER JOIN Purchasing.PurchaseOrderDetail AS POD
  ON POH.PurchaseOrderID=POD.PurchaseOrderID
  INNER JOIN Purchasing.ShipMethod AS SM
  ON POH.ShipMethodID=SM.ShipMethodID
  WHERE YEAR(POH.OrderDate)=2012 AND POH.Freight BETWEEN 500 AND 2500 AND SM.Name LIKE '%CARGO%'
  GROUP BY MONTH(POH.OrderDate)  
GO  
--2. NAÈIN  
  SELECT MONTH(POH.OrderDate) 'Mjesec', SUM(POD.LineTotal), SUM(POD.ReceivedQty),(SELECT COUNT(*)
																					FROM Purchasing.PurchaseOrderHeader AS POH1
																					INNER JOIN Purchasing.PurchaseOrderDetail AS POD1
																					ON POH1.PurchaseOrderID=POD1.PurchaseOrderID
																					INNER JOIN Purchasing.ShipMethod AS SM1
																					ON POH1.ShipMethodID=SM1.ShipMethodID
																					WHERE MONTH(POH.OrderDate)=MONTH(POH1.OrderDate) AND                                                     POD1.RejectedQty>100 AND YEAR(POH1.OrderDate)=2012 AND													POH1.Freight BETWEEN 500 AND 2500 AND SM1.Name LIKE '%CARGO%')
  FROM Purchasing.PurchaseOrderHeader AS POH
  INNER JOIN Purchasing.PurchaseOrderDetail AS POD
  ON POH.PurchaseOrderID=POD.PurchaseOrderID
  INNER JOIN Purchasing.ShipMethod AS SM
  ON POH.ShipMethodID=SM.ShipMethodID
  WHERE YEAR(POH.OrderDate)=2012 AND POH.Freight BETWEEN 500 AND 2500 AND SM.Name LIKE '%CARGO%'
  GROUP BY MONTH(POH.OrderDate)

GO

--3. NAÈIN
 SELECT Q.Mjesec, SUM(Q.[Ukupna vrijednost]) 'Ukupna vrijednost', SUM(Q.[Ukupna kolièina])  'Ukupna kolièina',SUM(Q.[Stavke narudzbe]) 'Stavke narudzbe'
FROM
(SELECT MONTH(POH.OrderDate) 'Mjesec', SUM(POD.LineTotal) 'Ukupna vrijednost', SUM(POD.ReceivedQty) 'Ukupna kolièina', (SELECT COUNT(*)
																														FROM
																														AdventureWorks2017.Purchasing.PurchaseOrderDetail AS POD1
																														 WHERE POD1.RejectedQty>100 AND POD.PurchaseOrderID=POD1.PurchaseOrderID) 'Stavke narudzbe'

FROM Purchasing.PurchaseOrderDetail AS POD
INNER JOIN Purchasing.PurchaseOrderHeader AS POH
ON POD.PurchaseOrderID=POH.PurchaseOrderID
INNER JOIN Purchasing.ShipMethod AS SM
ON POH.ShipMethodID=SM.ShipMethodID
WHERE YEAR(POH.OrderDate)=2012 AND (POH.Freight BETWEEN 500 AND 2500) AND SM.Name LIKE '%CARGO%'
GROUP BY MONTH(POH.OrderDate), POD.PurchaseOrderID) AS Q
GROUP BY Q.Mjesec

GO
 --PROVJERA
 SELECT POH.OrderDate, POD.RejectedQty, POD.PurchaseOrderDetailID, POH.PurchaseOrderID
 FROM Purchasing.PurchaseOrderHeader AS POH
 INNER JOIN Purchasing.PurchaseOrderDetail AS POD
 ON POH.PurchaseOrderID=POD.PurchaseOrderID
 INNER JOIN Purchasing.ShipMethod AS SM
 ON POH.ShipMethodID=SM.ShipMethodID
 WHERE YEAR(POH.OrderDate)=2012 AND POH.Freight BETWEEN 500 AND 2500 AND SM.Name LIKE '%CARGO%' AND MONTH(POH.OrderDate) =1
  --GROUP BY MONTH(POH.OrderDate), POD.RejectedQty
GO  
--c)	(11 bodova) Prikazati ukupan broj narudžbi koje su obradili uposlenici, za svakog uposlenika pojedinaèno. Uslov je da su narudžbe kreirane u 2011 ili 2012 godini, te da je u okviru jedne narudžbe odobren popust na dvije ili više stavki. Takoðer uzeti u obzir samo one narudžbe koje su isporuèene u Veliku Britaniju, Kanadu ili Francusku. (AdventureWorks2017)

SELECT PP.LastName,PP.FirstName, COUNT(*) 'Broj narudžbi'
FROM Person.Person AS PP
INNER JOIN HumanResources.Employee AS E
ON PP.BusinessEntityID=E.BusinessEntityID
INNER JOIN Sales.SalesPerson AS SP
ON SP.BusinessEntityID=E.BusinessEntityID
INNER JOIN Sales.SalesOrderHeader AS SOH
ON SOH.SalesPersonID=SP.BusinessEntityID
INNER JOIN Sales.SalesTerritory AS ST
ON ST.TerritoryID=SOH.TerritoryID
WHERE YEAR(SOH.OrderDate) IN (2011,2012) AND ST.Name IN ('United Kingdom', 'Canada', 'France') AND (SELECT COUNT(*)
																									FROM Sales.SalesOrderDetail AS SOD
																									WHERE SOD.SalesOrderID=SOH.SalesOrderID AND 
																									SOD.UnitPriceDiscount>0) >=2
GROUP BY PP.LastName,PP.FirstName
ORDER BY 3 DESC

GO




--d)	(11 bodova) Napisati upit koji æe prikazati sljedeæe podatke o proizvodima: naziv proizvoda, naziv kompanije dobavljaèa, kolièinu na skladištu, te kreiranu šifru proizvoda. Šifra se sastoji od sljedeæih vrijednosti: (Northwind)
--1)	Prva dva slova naziva proizvoda
--2)	Karakter /
--3)	Prva dva slova druge rijeèi naziva kompanije dobavljaèa, uzeti u obzir one kompanije koje u nazivu imaju 2 ili 3 rijeèi
--4)	ID proizvoda po pravilu ukoliko se radi o jednocifrenom broju na njega dodati slovo 'a', u ostalim sluèajevima dodati obrnutu vrijednost broja
--Npr. Za proizvod sa nazivom Chai i sa dobavljaèem naziva Exotic Liquids, šifra æe btiti Ch/Li1a.

USE Northwind 
GO
SELECT P.ProductName,S.CompanyName,P.UnitsInStock,LEFT(P.ProductName,2)+'/'+LEFT(SUBSTRING(S.CompanyName,CHARINDEX(' ',S.CompanyName)+1,LEN(S.CompanyName)),2)+IIF(P.ProductID BETWEEN 1 AND 9,'a', REVERSE(P.ProductID)), P.ProductID
FROM Products AS P
INNER JOIN Suppliers AS S
ON P.SupplierID=S.SupplierID
WHERE LEN(S.CompanyName)-LEN(REPLACE(S.CompanyName,' ','')) IN (1,2)

GO
--		37 bodova
--5.	
--a)	(3 boda) U kreiranoj bazi kreirati index kojim æe se ubrzati pretraga prema šifri i nazivu proizvoda. Napisati upit za potpuno iskorištenje indexa.
USE brojIndexa
GO

CREATE INDEX IX_Search_Products
ON Proizvodi(SifraProizvoda,Naziv)

SELECT P.SifraProizvoda,P.Naziv
FROM Proizvodi AS P
WHERE P.SifraProizvoda LIKE 'F%' AND P.Naziv LIKE 'H%'
--b)	(7 bodova) U kreiranoj bazi kreirati proceduru sp_search_products kojom æe se vratiti podaci o proizvodima na osnovu kategorije kojoj pripadaju ili težini. Korisnici ne moraju unijeti niti jedan od parametara ali u tom sluèaju procedura ne vraæa niti jedan od zapisa. Korisnicima unosom veæ prvog slova kategorije se trebaju osvježiti zapisi, a vrijednost unesenog parametra težina æe vratiti one proizvode èija težina je veæa od  unesene vrijednosti.
GO
CREATE PROCEDURE sp_search_products
(
@Kategorija NVARCHAR(50)=NULL,
@Tezina DECIMAL(18,2)=NULL
)
AS
BEGIN
	SELECT*
	FROM Proizvodi AS P
	WHERE P.NazivKategorije LIKE @Kategorija+'%' OR P.Tezina>@Tezina
END
GO


EXEC sp_search_products 'Clothing'
EXEC sp_search_products @Tezina=2.2
EXEC sp_search_products
--c)	(18 bodova) Zbog proglašenja dobitnika nagradne igre održane u prva dva mjeseca drugog kvartala 2013 godine potrebno je kreirati upit. Upitom æe se prikazati treæa najveæa narudžba (vrijednost bez popusta) za svaki mjesec pojedinaèno. Obzirom da je u pravilima nagradne igre potrebno nagraditi 2 osobe (muškarca i ženu) za svaki mjesec, potrebno je u rezultatima upita prikazati pored navedenih stavki i o kojem se kupcu radi odnosno ime i prezime, te koju je nagradu osvojio. Nagrade se dodjeljuju po sljedeæem pravilu:
--•	za žene u prvom mjesecu drugog kvartala je stoni mikser, dok je za muškarce usisivaè
--•	za žene u drugom mjesecu drugog kvartala je pegla, dok je za muškarc multicooker
-- Obzirom da za kupce nije eksplicitno naveden spol, odreðivat æe se po pravilu: Ako je zadnje slovo imena a, smatra se da je osoba ženskog spola u suprotnom radi se o osobi muškog spola. Rezultate u formiranoj tabeli dobitnika sortirati prema vrijednosti narudžbe u opadajuæem redoslijedu. (AdventureWorks2017)
--28 bodova
--6.	Dokument teorija_28_06_2022, preimenovati vašim brojem indeksa, te u tom dokumentu izraditi pitanja.
--20 bodova
--SQL skriptu (bila prazna ili ne) imenovati Vašim brojem indeksa npr IB200001.sql, te istu zajedno sa .docx dokumentom kompromitovati  u jednu datoteku naziva npr IB200001.zip i upload-ovati na ftp u folder Upload.
--Maksimalan broj bodova:100  
--Prag prolaznosti: 55
GO
	USE AdventureWorks2017
	SELECT*
	FROM(SELECT TOP 1 T1.SalesOrderID,T1.FirstName,T1.LastName,T1.[Ukupna vrijednost], T1.Nagrada
	FROM (SELECT TOP 3 SOH.SalesOrderID,PP.FirstName,PP.LastName ,SUM(SOD.UnitPrice*SOD.OrderQty) 'Ukupna vrijednost','Stoni mikser' Nagrada
	FROM Sales.SalesOrderHeader AS SOH
	INNER JOIN Sales.SalesOrderDetail AS SOD
	ON SOH.SalesOrderID=SOD.SalesOrderID
	INNER JOIN Sales.Customer AS SC
	ON SOH.CustomerID=SC.CustomerID
	INNER JOIN Person.Person AS PP
	ON SC.PersonID=PP.BusinessEntityID
	WHERE YEAR(SOH.OrderDate)=2013 AND MONTH(SOH.OrderDate)=4 AND RIGHT(PP.FirstName,1)='a'
	GROUP BY SOH.SalesOrderID,PP.FirstName,PP.LastName
	ORDER BY 4 DESC) AS T1
	ORDER BY 4 ASC) AS T2
	UNION
	SELECT*
	FROM(SELECT TOP 1 T1.SalesOrderID,T1.FirstName,T1.LastName,T1.[Ukupna vrijednost], T1.Nagrada
	FROM (SELECT TOP 3 SOH.SalesOrderID,PP.FirstName,PP.LastName ,SUM(SOD.UnitPrice*SOD.OrderQty) 'Ukupna vrijednost','Usisivaè' Nagrada
	FROM Sales.SalesOrderHeader AS SOH
	INNER JOIN Sales.SalesOrderDetail AS SOD
	ON SOH.SalesOrderID=SOD.SalesOrderID
	INNER JOIN Sales.Customer AS SC
	ON SOH.CustomerID=SC.CustomerID
	INNER JOIN Person.Person AS PP
	ON SC.PersonID=PP.BusinessEntityID
	WHERE YEAR(SOH.OrderDate)=2013 AND MONTH(SOH.OrderDate)=4 AND RIGHT(PP.FirstName,1)<>'a'
	GROUP BY SOH.SalesOrderID,PP.FirstName,PP.LastName
	ORDER BY 4 DESC) AS T1
	ORDER BY 4 ASC) AS T2
	UNION
		SELECT*
	FROM(SELECT TOP 1 T1.SalesOrderID,T1.FirstName,T1.LastName,T1.[Ukupna vrijednost], T1.Nagrada
	FROM (SELECT TOP 3 SOH.SalesOrderID,PP.FirstName,PP.LastName ,SUM(SOD.UnitPrice*SOD.OrderQty) 'Ukupna vrijednost','Pegla' Nagrada
	FROM Sales.SalesOrderHeader AS SOH
	INNER JOIN Sales.SalesOrderDetail AS SOD
	ON SOH.SalesOrderID=SOD.SalesOrderID
	INNER JOIN Sales.Customer AS SC
	ON SOH.CustomerID=SC.CustomerID
	INNER JOIN Person.Person AS PP
	ON SC.PersonID=PP.BusinessEntityID
	WHERE YEAR(SOH.OrderDate)=2013 AND MONTH(SOH.OrderDate)=5 AND RIGHT(PP.FirstName,1)='a'
	GROUP BY SOH.SalesOrderID,PP.FirstName,PP.LastName
	ORDER BY 4 DESC) AS T1
	ORDER BY 4 ASC) AS T2
	UNION
	SELECT*
	FROM(SELECT TOP 1 T1.SalesOrderID,T1.FirstName,T1.LastName,T1.[Ukupna vrijednost], T1.Nagrada
	FROM (SELECT TOP 3 SOH.SalesOrderID,PP.FirstName,PP.LastName ,SUM(SOD.UnitPrice*SOD.OrderQty) 'Ukupna vrijednost','Multicooker' Nagrada
	FROM Sales.SalesOrderHeader AS SOH
	INNER JOIN Sales.SalesOrderDetail AS SOD
	ON SOH.SalesOrderID=SOD.SalesOrderID
	INNER JOIN Sales.Customer AS SC
	ON SOH.CustomerID=SC.CustomerID
	INNER JOIN Person.Person AS PP
	ON SC.PersonID=PP.BusinessEntityID
	WHERE YEAR(SOH.OrderDate)=2013 AND MONTH(SOH.OrderDate)=5 AND RIGHT(PP.FirstName,1)<>'a'
	GROUP BY SOH.SalesOrderID,PP.FirstName,PP.LastName
	ORDER BY 4 DESC) AS T1
	ORDER BY 4 ASC) AS T2
	ORDER BY [Ukupna vrijednost] DESC











--1 ZADATAK

CREATE DATABASE Indeks
GO
USE Indeks
GO

CREATE TABLE Narudzba
(
	NarudzbaID INT NOT NULL PRIMARY KEY (NarudzbaID),
	DatumNarudzbe DATE NULL,
	DatumPrijema DATE NULL,
	DatumIsporuke DATE NULL,
	TrosakPrevoza MONEY NULL,
	PunaAdresa NVARCHAR (70) NULL
)

CREATE TABLE Dobavljac 
(
	DobavljacID INT NOT NULL PRIMARY KEY (DobavljacID),
	NazivDobavljaca nvarchar(40) NOT NULL,
	PunaAdresa nvarchar(60) NULL,
	Drzava nvarchar(15) NULL,
	
)

CREATE TABLE Proizvod
(
	NarudzbaID INT NOT NULL CONSTRAINT FK_Proizvod_Narudzba FOREIGN KEY (NarudzbaID) REFERENCES Narudzba (NarudzbaID),
	DobavljacID INT NOT NULL CONSTRAINT FK_Proizvod_Dobavljac FOREIGN KEY (DobavljacID) REFERENCES Dobavljac (DobavljacID),	
	ProizvodID INT NOT NULL,
	NazivProizvoda NVARCHAR (40) NOT NULL,
	Cijena INT NOT NULL,
	Kolicina INT NOT NULL,
	Popust DECIMAL (3,2) NOT NULL,
	Raspolozivost BIT NOT NULL,
	CONSTRAINT PK_Proizvod PRIMARY KEY (NarudzbaID, DobavljacID, ProizvodID)
)
--2 ZADATAK

--2a
INSERT INTO Narudzba
SELECT o.OrderID, o.OrderDate, o.RequiredDate, o.ShippedDate,o.Freight, o.ShipAddress + ' '+ ISNULL(o.ShipPostalCode,'0000')+ ' '+o.ShipCity
FROM Northwind.dbo.Orders as o
WHERE YEAR(o.OrderDate)>=1997 AND o.ShippedDate IS NOT NULL
ORDER BY o.Freight
--657

--2b
INSERT INTO Dobavljac
SELECT S.SupplierID, S.CompanyName, S.Address + S.PostalCode + S.City, S.Country
FROM Northwind.dbo.Suppliers as S
--29

--2c
INSERT INTO Proizvod
SELECT OD.OrderID, P.SupplierID, P.ProductID, P.ProductName, OD.UnitPrice,OD.Quantity,OD.Discount,P.Discontinued
FROM Northwind.dbo.Products as P
inner join Northwind.dbo.[Order Details] as OD
on P.ProductID=OD.ProductID
inner join Northwind.dbo.Orders as O
on O.OrderID=OD.OrderID
WHERE OD.UnitPrice>10 AND OD.Discount>0 AND YEAR(O.OrderDate)>=1997 AND O.ShippedDate IS NOT NULL
--512

--3 ZADATAK
--Iz tabele Proizvod dati pregled ukupnog broja ostvarenih narudzbi po dobavljaèu i proizvodu.

SELECT P.DobavljacID,P.ProizvodID,COUNT(P.DobavljacID) AS 'Broj narudzbi'
FROM Proizvod AS P
GROUP BY P.DobavljacID,P.ProizvodID
ORDER BY 1
--62

--4 ZADATAK
--Iz tabele Proizvod dati pregled ukupnog prometa ostvarenog po dobavljaèu i narudžbi uz uslov da se prikažu samo oni zapisi
--kod kojih je vrijednost prometa manja od 1000 i odobreni popust veæi od 10%. Ukupni promet izraèunati uz uzimanje u obzir i odobrenog popusta.

SELECT  P.DobavljacID,P.NarudzbaID,SUM(P.Cijena*P.Kolicina*(1-P.Popust)) AS Promet
FROM Proizvod AS P
WHERE P.Popust>0.1
GROUP BY P.DobavljacID,P.NarudzbaID
HAVING SUM(P.Cijena*P.Kolicina*(1-P.Popust))<1000 

--5 ZADATAK
--Iz tabele Narudzba dati pregled svih narudzbi kod kojih je broj dana od datuma narudžbe do datuma isporuke manji od 10. 
--Pregled æe se sastojati od ID narudžbe, broja dana razlike i kalendarske godine, 
--pri èemu je razdvojiti pregled po godinama - 1997 i 1998 (prvo sve 1997, zatim sve 1998).
--Sortirati po broju dana isporuke u opadajuæem redoslijedu.

SELECT NarudzbaID, DATEDIFF (DAY, DatumNarudzbe, DatumIsporuke) AS BrDanaIsporuke, YEAR (DatumIsporuke) AS Godina
FROM Narudzba
WHERE DATEDIFF (DAY, DatumNarudzbe, DatumIsporuke) < 10
ORDER BY 3, 2
--495

SELECT N.NarudzbaID, DATEDIFF(DAY,N.DatumNarudzbe,N.DatumIsporuke) AS 'Broj dana razlike', '1997' AS 'Godina'
FROM Narudzba AS N
WHERE  DATEDIFF(DAY,N.DatumNarudzbe,N.DatumIsporuke)<10 AND YEAR(N.DatumIsporuke)=1997
UNION
SELECT N.NarudzbaID, DATEDIFF(DAY,N.DatumNarudzbe,N.DatumIsporuke) AS 'Broj dana razlike', '1998' AS 'Godina'
FROM Narudzba AS N
WHERE  DATEDIFF(DAY,N.DatumNarudzbe,N.DatumIsporuke)<10 AND YEAR(N.DatumIsporuke)=1998
ORDER BY 2 DESC
--495



--6 ZADATAK
--Iz tabele Narudzba dati pregled svih narudzbi kod kojih je isporuka izvršena u istom mjesecu.
--Pregled æe se sastojati od ID narudžbe, broja dana razlike, mjeseca narudžbe, mjeseca isporuke i kalendarske godine, 
--pri èemu je potrebno razdvojiti pregled po godinama (1997 i 1998 - prvo sve 1997, zatim sve 1998). 
--Sortirati po broju dana isporuke u opadajuæem redoslijedu.

SELECT N.NarudzbaID, DATEDIFF(DAY,N.DatumNarudzbe,N.DatumIsporuke) AS 'Broj dana razlike', 
       MONTH(N.DatumNarudzbe) AS 'Mjesec narudzbe',MONTH(N.DatumIsporuke) AS 'Mjesec isporuke','1997' AS 'Godina'
FROM Narudzba AS N
WHERE  MONTH(N.DatumNarudzbe)=MONTH(N.DatumIsporuke) AND YEAR(N.DatumIsporuke)=1997
UNION
SELECT N.NarudzbaID, DATEDIFF(DAY,N.DatumNarudzbe,N.DatumIsporuke) AS 'Broj dana razlike', 
       MONTH(N.DatumNarudzbe) AS 'Mjesec narudzbe',MONTH(N.DatumIsporuke) AS 'Mjesec isporuke','1998' AS 'Godina'
FROM Narudzba AS N
WHERE  MONTH(N.DatumNarudzbe)=MONTH(N.DatumIsporuke) AND YEAR(N.DatumIsporuke)=1998
ORDER BY 2 DESC
--464

SELECT NarudzbaID, DATEDIFF (DAY, DatumNarudzbe, DatumIsporuke) AS BrDanaIsporuke, MONTH (DatumIsporuke) AS MjesecNarudzbe,
MONTH (DatumNarudzbe) AS MjesecIsporuke, YEAR (DatumIsporuke) AS Godina
FROM Narudzba
WHERE MONTH (DatumIsporuke) = MONTH (DatumNarudzbe)
ORDER BY 5, 2




--7 ZADATAK
--Iz tabele Narudzba dati pregled svih narudžbi koje su isporuèene u Graz ili Köln. 
--Pregled æe se sastojati od ID narudžbe i naziva grada. Sortirati po nazivu grada.

SELECT N.PunaAdresa, RIGHT(N.PunaAdresa, CHARINDEX(' ',REVERSE(N.PunaAdresa))-1) AS 'Naziv grada'
FROM Narudzba AS N
WHERE RIGHT(N.PunaAdresa, CHARINDEX(' ',REVERSE(N.PunaAdresa))-1) IN('Graz', 'Köln')
ORDER BY 2


--8 ZADATAK
--Iz tabela Narudzba, Dobavljac i Proizvod kreirati pregled koji æe se sastojati od polja NarudzbaID,
--GodNarudzbe kao godinu iz polja DatumNarudzbe, NazivProizvoda, NazivDobavljaca, Drzava, TrosakPrevoza, 
--Ukupno kao ukupna vrijednost narudžbe koja æe se raèunati uz uzimanje u obzir i popusta i postotak koji æe
--davati informaciju o vrijednosti postotka troška prevoza u odnosu na ukupnu vrijenost narudžbe. Uslov je da 
--postotak bude veæi od 30% i da je ukupna vrijednost veæa od troška prevoza. Sortirati po vrijednosti postotka u opadajuæem redoslijedu.

SELECT N.NarudzbaID,YEAR(N.DatumNarudzbe) AS 'GodNarudzbe', P.NazivProizvoda,D.NazivDobavljaca,D.Drzava,N.TrosakPrevoza,
P.Cijena*P.Kolicina*(1-p.Popust) AS 'Ukupna vrijednost',
LEFT (ROUND (N.TrosakPrevoza / (P.Cijena * P.Kolicina * (1 - P.Popust)) * 100, 2),5) AS Postotak
FROM Proizvod AS P INNER JOIN 
     Narudzba AS N 
	 ON P.NarudzbaID=N.NarudzbaID
	 JOIN Dobavljac AS D
	 ON D.DobavljacID=P.DobavljacID
WHERE N.TrosakPrevoza / (P.Cijena * P.Kolicina * (1 - P.Popust)) * 100>30 AND P.Cijena*P.Kolicina*(1-p.Popust)>N.TrosakPrevoza
ORDER BY 8 DESC


--9 ZADATAK
--Iz tabela Narudzba, Dobavljac i Proizvod kreirati pogled koji æe sadržavati ID narudžbe, dan iz datuma prijema, 
--raspoloživost, naziv grada iz pune adrese naruèitelja i državu dobavljaèa.
--Uslov je da je datum prijema u 2. ili 3. dekadi mjeseca i da grad naruèitelja Bergamo.

CREATE VIEW view_9
AS
SELECT N.NarudzbaID, DAY(N.DatumPrijema) AS 'Dan', P.Raspolozivost,
N.PunaAdresa ,RIGHT(N.PunaAdresa, CHARINDEX(' ',REVERSE(N.PunaAdresa))-1) AS 'Naziv grada', d.Drzava
FROM Proizvod AS P
     INNER JOIN Narudzba AS N
	 ON P.NarudzbaID=N.NarudzbaID
	 INNER JOIN Dobavljac AS D
	 ON D.DobavljacID=P.DobavljacID
--WHERE DAY(N.DatumPrijema) BETWEEN 11 AND 31 AND RIGHT(N.PunaAdresa, CHARINDEX(' ',REVERSE(N.PunaAdresa))-1) = 'Bergamo'
SELECT*
FROM view_9
--7


--10 ZADATAK
--Iz tabela Proizvod i Dobavljac kreirati proceduru proc1 koja æe sadržavati ID i naziv dobavljaèa i ukupan broj proizvoda
--koji je realizirao dobavljaè. Pokrenuti proceduru za vrijednost ukupno realiziranog broja proizvoda 22 i 14.

ALTER PROCEDURE proc1
(
	@DobavljacID int = NULL,
	@NazivDobavljaca nvarchar(40) = NULL,
	@UkBroj int = NULL
)
AS
BEGIN
SELECT	P.DobavljacID, D.NazivDobavljaca, COUNT (P.ProizvodID) AS Broj
FROM	Proizvod AS P INNER JOIN Dobavljac AS D
ON		P.DobavljacID = D.DobavljacID
--WHERE	P.DobavljacID = @DobavljacID OR
--		NazivDobavljaca = @NazivDobavljaca OR
--		P.ProizvodID >= 0
GROUP BY P.DobavljacID, D.NazivDobavljaca
HAVING	COUNT (P.ProizvodID) = @UkBroj --OR @UkBroj IS NULL
END

EXEC proc1  @UkBroj=22


--1. Kroz SQL kod kreirati bazu podataka sa imenom vašeg broja indeksa.
CREATE DATABASE BB210006
GO
USE BB210006

--2. U kreiranoj bazi podataka kreirati tabele sa sljedeæom strukturom:
--a) Prodavaci
--• ProdavacID, cjelobrojna vrijednost i primarni kljuè
--• Ime, 50 UNICODE (obavezan unos)
--• Prezime, 50 UNICODE (obavezan unos)
--• OpisPosla, 50 UNICODE karaktera (obavezan unos)
--• EmailAdresa, 50 UNICODE karaktera

CREATE TABLE Prodavaci
(
ProdavacID INT NOT NULL PRIMARY KEY,
Ime NVARCHAR(50) NOT NULL,
Prezime NVARCHAR(50) NOT NULL,
OpisPosla NVARCHAR(50) NOT NULL,
EmailAdresa NVARCHAR(50)
)
--2.
--b) Proizvodi
--• ProizvodID, cjelobrojna vrijednost i primarni kljuè
--• Naziv, 50 UNICODE karaktera (obavezan unos)
--• SifraProizvoda, 25 UNICODE karaktera (obavezan unos)
--• Boja, 15 UNICODE karaktera ,
--• Cijena, novèani tip podatka (obavezan unos)
--• NazivPodkategorije, 50 UNICODE (obavezan unos)

CREATE TABLE Proizvodi
(
ProizvodID INT NOT NULL PRIMARY KEY,
Naziv NVARCHAR(50) NOT NULL,
SifraProizvoda NVARCHAR(25) NOT NULL,
Boja NVARCHAR(15),
Cijena MONEY NOT NULL,
NazivPodkategorije NVARCHAR(50) NOT NULL
)

--2.
--c) ZaglavljeNarudzbe 
--• NarudzbaID, cjelobrojna vrijednost i primarni kljuè
--• DatumNarudzbe, polje za unos datuma i vremena (obavezan unos)
--• DatumIsporuke, polje za unos datuma i vremena
--• NazivTeritorije, 50 UNICODE (obavezan unos)
--• ProdavacID, cjelobrojna vrijednost, strani kljuè

CREATE TABLE ZaglavljeNarudzbe
(
NarudzbaID INT NOT NULL PRIMARY KEY,
DatumNarudzbe DATETIME NOT NULL,
DatumIsporuke DATETIME,
NazivTeritorije NVARCHAR(50) NOT NULL,
ProdavacID  INT CONSTRAINT FK_ZaglavljeNarudzbe FOREIGN KEY REFERENCES Prodavaci(ProdavacID)
)

--2.
--d) DetaljiNarudzbe
--• NarudzbaID, cjelobrojna vrijednost, obavezan unos i strani kljuè
--• ProizvodID, cjelobrojna vrijednost, obavezan unos i strani kljuè
--• Cijena, novèani tip (obavezan unos),
--• Kolicina, skraæeni cjelobrojni tip (obavezan unos),
--• Popust, novèani tip (obavezan unos)
--**Jedan proizvod se može više puta naruèiti, dok jedna narudžba može sadržavati više proizvoda. U okviru jedne 
--narudžbe jedan proizvod se ne može naruèiti više od jedanput.

CREATE TABLE DetaljiNarudzbe
(
NarudzbaID INT NOT NULL CONSTRAINT FK_DetaljiNarudzbe_ZaglavljeNarudzbe FOREIGN KEY REFERENCES ZaglavljeNarudzbe(NarudzbaID),
ProizvodID INT NOT NULL CONSTRAINT FK_DetaljiNarudzbe_Proizvodi FOREIGN KEY REFERENCES Proizvodi(ProizvodID),
Cijena MONEY NOT NULL,
Kolicina SMALLINT NOT NULL,
Popust MONEY NOT NULL
PRIMARY KEY(NarudzbaID,ProizvodID)
)

--3. Iz baze podataka AdventureWorks u kreiranu bazu podataka prebaciti sljedeæe podatke:
--a) U tabelu Prodavaci dodati sve prodavaèe
--• BusinessEntityID (SalesPerson) -> ProdavacID
--• FirstName (Person) -> Ime
--• LastName (Person) -> Prezime
--• JobTitle (Employee) -> OpisPosla
--• EmailAddress (EmailAddress) -> EmailAdresa

INSERT INTO Prodavaci
SELECT SP.BusinessEntityID,PP.FirstName,PP.LastName,E.JobTitle,EA.EmailAddress
FROM AdventureWorks2014.Sales.SalesPerson AS SP
INNER JOIN AdventureWorks2014.Person.Person AS PP
ON SP.BusinessEntityID=PP.BusinessEntityID
INNER JOIN AdventureWorks2014.HumanResources.Employee AS E
ON E.BusinessEntityID=PP.BusinessEntityID
INNER JOIN AdventureWorks2014.Person.EmailAddress AS EA
ON EA.BusinessEntityID=PP.BusinessEntityID

--3.
--b) U tabelu Proizvodi dodati sve proizvode, na mjestima gdje nema pohranjenih podataka o boji zamijeniti 
--vrijednost sa nije naznaceno
--• ProductID (Product)-> ProizvodID
--• Name (Product)-> Naziv 
--• ProductNumber (Product)-> SifraProizvoda
--• Color (Product)-> Boja 
--• ListPrice (Product)-> Cijena
--• Name (ProductSubategory) -> NazivPodkategorije

INSERT INTO Proizvodi
SELECT PP.ProductID,PP.Name,PP.ProductNumber,ISNULL(PP.Color,0),PP.ListPrice,PS.Name
FROM AdventureWorks2014.Production.Product AS PP
INNER JOIN AdventureWorks2014.Production.ProductSubcategory AS PS
ON PP.ProductSubcategoryID=PS.ProductSubcategoryID

--3.
--c) U tabelu ZaglavljeNarudzbe dodati sve narudžbe
--• SalesOrderID (SalesOrderHeader) -> NarudzbaID
--• OrderDate (SalesOrderHeader)-> DatumNarudzbe
--• ShipDate (SalesOrderHeader)-> DatumIsporuke
--• Name (SalesTerritory) -> NazivTeritorije
--• SalesPersonID (SalesOrderHeader)-> ProdavacID

INSERT INTO ZaglavljeNarudzbe
SELECT SOH.SalesOrderID,SOH.OrderDate,SOH.ShipDate,ST.Name,SOH.SalesPersonID
FROM AdventureWorks2014.Sales.SalesOrderHeader AS SOH
INNER JOIN AdventureWorks2014.Sales.SalesTerritory AS ST
ON ST.TerritoryID=SOH.TerritoryID


--3.
--d) U tabelu DetaljiNarudzbe dodati sve stavke narudžbe
--• SalesOrderID (SalesOrderDetail)-> NarudzbaID
--• ProductID (SalesOrderDetail)-> ProizvodID
--• UnitPrice (SalesOrderDetail)-> Cijena
--• OrderQty (SalesOrderDetail)-> Kolicina
--• UnitPriceDiscount (SalesOrderDetail)-> Popust

INSERT INTO DetaljiNarudzbe
SELECT SOD.SalesOrderID ,SOD.ProductID ,SOD.UnitPrice,SOD.OrderQty,SOD.UnitPriceDiscount
FROM AdventureWorks2014.Sales.SalesOrderDetail AS SOD


--4.
--a) (6 bodova) Prikazati sve uposlenike koji rade na 3 ili više teritorija koje pripadaju regiji Eastern. Upitom 
--je potrebno prikazati spojeno ime i prezime uposlenika, te ukupan broj teritorija na koje su rasporeðeni. 
--(Northwind)

SELECT E.FirstName+ ' '+ E.LastName 'Ime i prezime', count(T.TerritoryID) as Ukupanbrojnarudzbi
FROM Northwind.dbo.Employees AS E
INNER JOIN Northwind.dbo.EmployeeTerritories AS ET
ON E.EmployeeID=ET.EmployeeID
INNER JOIN Northwind.dbo.Territories AS T
ON ET.TerritoryID=T.TerritoryID
INNER JOIN Northwind.dbo.Region AS R
ON T.RegionID=R.RegionID
WHERE T.TerritoryID>3 AND T.RegionID LIKE 'Eastern'
GROUP BY E.FirstName,E.LastName,T.TerritoryID

ORDER BY 2 DESC

--b) (7 bodova) U kreiranoj bazi kreirati pogled v_proizvodi koji æe prikazivati naziv i šifru proizvoda,
--ukupan broj prodanih proizvoda, te ukupnu vrijednost sa popustom. Rezultate sortirati prema ukupnoj 
--vrijednosti u opadajuæem redoslijedu.
USE BB210006
GO
CREATE VIEW v_proizvodi AS
SELECT P.Naziv,P.SifraProizvoda,SUM(DN.Kolicina)'ukupan broj prodanih',SUM(DN.Cijena*DN.Kolicina*(1-DN.Popust))'Ukupna vrijednost sa popustom'
FROM Proizvodi as P
INNER JOIN DetaljiNarudzbe AS DN
ON P.ProizvodID=DN.ProizvodID
GROUP BY  P.Naziv,P.SifraProizvoda
GO
SELECT*
FROM v_proizvodi
ORDER BY 4 DESC

--e) (13 bodova) Za svakog uposlenika pojedinaèno prikazati ukupan broj narudžbi koje su obradili. Uslov je 
--da su narudžbe kreirane u 2011 ili 2012 godini. Takoðer uzeti u obzir samo one narudžbe koje su 
--isporuèene u Veliku Britaniju, Kanadu ili Francusku. Rezultate sortirati prema broju narudžbi u 
--opadajuæem redoslijedu. (AdventureWorks2017)
USE AdventureWorks2017
SELECT E.BusinessEntityID,PP.FirstName+' '+PP.LastName'ime i prezime', COUNT(SOH.SalesOrderID) 'broj narudzbi'
FROM HumanResources.Employee AS E
INNER JOIN Sales.SalesPerson AS SP
ON E.BusinessEntityID=SP.BusinessEntityID
INNER JOIN Person.Person AS PP
ON PP.BusinessEntityID=E.BusinessEntityID
INNER JOIN Sales.SalesOrderHeader AS SOH
ON SOH.SalesPersonID=E.BusinessEntityID
INNER JOIN Sales.SalesTerritoryHistory AS STH
ON STH.TerritoryID=sp.BusinessEntityID
inner join Sales.SalesTerritory AS ST
ON STH.TerritoryID=ST.TerritoryID
group by E.BusinessEntityID
order by 3 desc

--f) (4 boda) Prikazati naziv dobavljaèa, adresu i državu dobavljaèa i nazive proizvoda koji pripadaju 
--kategoriji piæa i ima ih na stanju više od 30 komada. Rezultate upita sortirati po državama. (Northwind)

use Northwind
select
from Suppliers as s
inner join Products as p
on p.SupplierID=s.SupplierID
inner join Categories as c
on c.CategoryID=p.CategoryID



--5.
--a) (7 bodova) U kreiranoj bazi kreirati index kojim æe se ubrzati pretraga prema šifri i nazivu proizvoda.
--OBAVEZNO index testirati.

create index ix_searchproduct
on Proizvod(naziv,šifra)


SELECT*
FROM Proizvodi

go
--b) (8 bodova) Kreirati proceduru sp_insert kojom æe se vršiti unos detalja narudžbe. OBAVEZNO 
--proceduru pokrenuti
GO
CREATE PROCEDURE proc_insert
(
@NarudzbaID INT,
@ProizvodID int,
@Cijena MONEY ,
@Kolicina SMALLINT ,
@Popust MONEY
) AS BEGIN

INSERT INTO DetaljiNarudzbe VALUES (@NarudzbaID,@ProizvodID,@Cijena,@Kolicina,@Popust)


END





--1.   Kreirati bazu podataka pod nazivom ZadaciZaVjezbu.

CREATE DATABASE ZadaciZaVjezbu

GO

USE ZadaciZaVjezbu

 

--2.   U pomenutoj bazi kreirati tabelu Aplikanti koja æe sadržavati sljedeæe kolone: Ime, Prezime i Mjesto_roðenja. Sva navedena polja trebaju da budu tekstualnog tipa, te prilikom kreiranja istih paziti da se ne zauzimaju bespotrebno memorijski resursi.

CREATE TABLE Aplikanti

(

Ime NVARCHAR(10),

Prezime NVARCHAR(20),

MjestoRodjenja NVARCHAR(50)

)

--3.   U tabelu Aplikanti dodati kolonu AplikantID, te je proglasiti primarnim kljuèem tabele (kolona mora biti autonkrement)

ALTER TABLE Aplikanti

ADD AplikantID INT NOT NULL IDENTITY(1,1)

 

ALTER TABLE Aplikanti

ADD CONSTRAINT PK_Aplikant PRIMARY KEY(AplikantID)

--4.   U bazi ZadaciZaVjezbu kreirati tabelu Projekti koji æe sadržavati sljedeæe kolone: Naziv projekta, Akronim projekta, Svrha projekta i Cilj projekta. Sva polja u tabeli su tekstualnog tipa, te prilikom kreiranja istih paziti da se ne zauzimaju bespotrebno memorijski resursi. Sva navedena polja osim cilja projekta moraju imati vrijednost.

CREATE TABLE Projekti

(

NazivProjekta NVARCHAR(30) NOT NULL,

AkronimProjekta NVARCHAR(30) NOT NULL,

SvrhaProjekta NVARCHAR(150) NOT NULL,

CiljProjekta NVARCHAR(150)

 

)

--5.   U tabelu Projekti dodati kolonu Sifra projekta, te je proglasiti primarnim kljuèem tabele.

ALTER TABLE Projekti

ADD SifraProjekta NVARCHAR(30) PRIMARY KEY

--6.   U tabelu Aplikanti dodati kolonu projekatID koje æe biti spoljni kljuè na tabelu projekat.

ALTER TABLE Aplikanti

ADD ProjekatID NVARCHAR(30) NOT NULL CONSTRAINT FK_Aplikant_Projekti FOREIGN KEY REFERENCES Projekti(sifraProjekta)

--7.   U bazi podataka ZadaciZaVjezbu kreirati tabelu TematskeOblasti koja æe sadržavati sljedeæa polja tematskaOblastID, naziv i opseg. TematskaOblastID predstavlja primarni kljuè tabele, te se automatski uveæava. Sva definisana polja moraju imati vrijednost. Prilikom definisanja dužine polja potrebno je obratiti pažnju da se ne zauzimaju bespotrebno memorijski resursi.

CREATE TABLE TematskeOblasti

(

TematskaOblastID INT CONSTRAINT PK_TematskaOblast PRIMARY KEY,

Naziv NVARCHAR(50) NOT NULL,

Opseg NVARCHAR(150) NOT NULL

)

--8.   U tabeli Aplikanti dodati polje email koje je tekstualnog tipa i može ostati prazno.

ALTER TABLE Aplikanti

ADD Email NVARCHAR(50)

--9.   U tabeli Aplikanti obrisati mjesto roðenja i dodati polja telefon i matièni broj. Oba novokreirana polja su tekstualnog tipa i moraju sadržavati vrijednost.

ALTER TABLE Aplikanti

DROP COLUMN MjestoRodjenja

 

ALTER TABLE Aplikanti

ADD Telefon NVARCHAR(10) NOT NULL,

MaticniBroj NVARCHAR(13) NOT NULL --CONSTRAINT UQ_Aplikanti_MaticniBroj UNIQUE

--10.  Obrisati tabele kreirane u prethodnim zadacima

DROP TABLE Aplikanti, TematskeOblasti, Projekti

--11.  Obrisati kreiranu bazu

DROP DATABASE ZadaciZaVjezbu

 

 

 

--1.         Kreirati bazu Procedure_ i aktivirati je.

CREATE DATABASE Procedure_

GO

USE Procedure_

--2.         Kreirati tabelu Proizvodi te prilikom kreiranja uraditi insert podataka iz tabele Products baze Northwind.

SELECT*

INTO Proizvodi

FROM Northwind.dbo.Products

 

--3.         Kreirati proceduru sp_Insert_Proizvod kojom æe se u tabeli Proizvodi uraditi insert novog zapisa.

GO

CREATE PROCEDURE sp_Products_Insert

(

@ProductName NVARCHAR(40),

@SupplierID INT=NULL,

@CategoryID INT=NULL,

@QuantityPerUnit NVARCHAR (20)= NULL,

@UnitPrice MONEY= NULL,

@UnitsInStock SMALLINT= NULL,

@UnitsOnOrder SMALLINT= NULL,

@ReorderLevel SMALLINT= NULL,

@Discontinued BIT

)

AS

BEGIN

INSERT INTO Proizvodi

VALUES(@ProductName,@SupplierID,@CategoryID,@QuantityPerUnit,@UnitPrice,@UnitsInStock,@UnitsOnOrder,@ReorderLevel,@Discontinued)

END

GO

--4.         Kreirati dva testna sluèaja, u prvom poslati podatke u sva polja, u drugom samo u ona koja su obavezna.

EXEC sp_Products_Insert

  @ProductName='Mlijeko',

  @SupplierID=1,

  @CategoryID=1,

  @QuantityPerUnit=2,

  @UnitPrice=1.4,

  @UnitsInStock=30,

  @UnitsOnOrder=0,

  @ReorderLevel=1,

  @Discontinued=1

 

SELECT*

FROM Proizvodi

ORDER BY 1 DESC

 

EXEC sp_Products_Insert

  @ProductName='Brašno',

  @Discontinued=1

 

--5.         Kreirati proceduru sp_Proizvod_Update kojom æe se u tabeli Proizvodi uraditi update zapisa.

GO

CREATE OR ALTER PROCEDURE sp_Proizvod_Update

(

@ProductID INT,

@ProductName NVARCHAR(40),

@SupplierID INT=NULL,

@CategoryID INT=NULL,

@QuantityPerUnit NVARCHAR (20)= NULL,

@UnitPrice MONEY= NULL,

@UnitsInStock SMALLINT= NULL,

@UnitsOnOrder SMALLINT= NULL,

@ReorderLevel SMALLINT= NULL,

@Discontinued BIT

)

AS

BEGIN

UPDATE Proizvodi

SET

                ProductName=ISNULL(@ProductName,ProductName),

                SupplierID=ISNULL(@SupplierID,SupplierID),

                CategoryID=ISNULL(@CategoryID,CategoryID),

                QuantityPerUnit=ISNULL(@QuantityPerUnit,QuantityPerUnit),

                UnitPrice=ISNULL(@UnitPrice,UnitPrice),

                UnitsInStock=ISNULL(@UnitsInStock,UnitsInStock),

                UnitsOnOrder=ISNULL(@UnitsOnOrder,UnitsOnOrder),

                ReorderLevel=ISNULL(@ReorderLevel,ReorderLevel),

                Discontinued=ISNULL(@Discontinued,Discontinued)

                WHERE ProductID=@ProductID

END

GO

 

EXEC sp_Proizvod_Update

  @ProductID=76,

  @ProductName='New product',

  @SupplierID=2,

  @ReorderLevel=1,

  @Discontinued=1

 

SELECT *

FROM Proizvodi

ORDER BY 1 DESC

 

 

GO

CREATE OR ALTER PROCEDURE sp_Proizvod_Update

(

@ProductId INT,

@ProductName NVARCHAR(40)=NULL,

@SupplierID INT=NULL,

@CategoryID INT=NULL,

@QuantityPerUnit NVARCHAR(20)=NULL,

@UnitPrice MONEY=NULL,

@UnitsInStock SMALLINT=NULL,

@UnitsOnOrder SMALLINT=NULL,

@ReorderLevel SMALLINT=NULL,

@Discontinued BIT

)

AS

BEGIN

UPDATE Proizvodi

SET

ProductName=ISNULL(@ProductName,ProductName),

SupplierID=ISNULL(@SupplierID,SupplierID),

CategoryID=      ISNULL(@CategoryID,CategoryID),

QuantityPerUnit=ISNULL(@QuantityPerUnit,QuantityPerUnit),

UnitPrice=ISNULL(@UnitPrice,UnitPrice),

UnitsInStock=ISNULL(@UnitsInStock,UnitsInStock),

UnitsOnOrder=ISNULL(@UnitsOnOrder,UnitsOnOrder),

ReorderLevel=ISNULL(@ReorderLevel,ReorderLevel),

Discontinued=ISNULL(@Discontinued,Discontinued)

WHERE ProductID=@ProductId

END

--6.         Kreirati testni sluèaj za update zapisa kroz proceduru.

EXEC sp_Proizvod_Update

  @ProductName='Mlijeko',

  @SupplierID=1,

  @CategoryID=1,

  @UnitPrice=1.6,

  @UnitsInStock=30,

  @UnitsOnOrder=0,

  @Discontinued=1,

  @ProductID=78

 

--7          Kreirati proceduru sp_Proizvod_Delete kojom æe se u tabeli Proizvodi uraditi delete odreðenog zapisa.

 

GO

CREATE PROCEDURE sp_Proizvod_Delete

(

                @ProductID INT

)

AS

BEGIN

DELETE FROM Proizvodi

WHERE ProductID=@ProductID

END

GO

 

 

GO

CREATE PROCEDURE sp_Proizvod_Delete

(

@ProductID int

)

AS

BEGIN

DELETE FROM Proizvodi

WHERE ProductID=@ProductID

END

 

--8.         Kreirati testni sluèaj za brisanje proizvoda sa id-om 78.

EXEC sp_Proizvod_Delete @ProductId=78

 

--9.         Kreirati tabelu StavkeNarudzbe te prilikom kreiranja uraditi insert podataka iz tabele Order Details baze Northwind.

SELECT*

INTO StavkeNarudzbe

FROM Northwind.dbo.[Order Details]

--10.      Kreirati proceduru sp_StavkeNarudzbe_Proizvodi_InsertUpdate kojom æe se u tabeli StavkeNarudzbe dodati nova stavka narudžbe a u tabeli Proizvodi umanjiti stanje za zalihama.

GO

CREATE PROCEDURE sp_StavkeNarudzbe_Proizvodi_InsertUpdate

(

@OrderID int,

@ProductID int,

@UnitPrice money,

@Quantity smallint,

@Discount real

)

AS

BEGIN

INSERT INTO StavkeNarudzbe

VALUES(@OrderID,@ProductID,@UnitPrice,@Quantity,@Discount)

 

UPDATE Proizvodi

SET UnitsInStock=UnitsInStock-@Quantity

WHERE ProductID=@ProductID

END

--11.      Kreirati testni sluèaj za prethodno kreiranu proceduru.

EXEC sp_StavkeNarudzbe_Proizvodi_InsertUpdate 10248,1,5,4,0.1

 

SELECT*

FROM StavkeNarudzbe

WHERE OrderID=10248

 

SELECT*

FROM Proizvodi

--12.      Kreirati proceduru kojom æe se u tabeli Proizvodi uraditi select proizvoda prema nazivu proizvoda i ID kategorije. Ukoliko korisnik ne unese ništa od navedenog prikazati sve proizvode.

GO

CREATE PROCEDURE sp_Proizvodi_SelectByProductNameOrCategoryID

(

@ProductName NVARCHAR(40)=NULL,

@CategoryID INT=NULL

)

AS

BEGIN












"
37urVYcJ,BWR - Changelog 17/09/23,SSilver,Diff,Sunday 17th of September 2023 04:52:21 PM CDT,"Melee
+ Hit registration made more consistent due to interaction with certain plugins
On-Kill Effects
+ Properly credits on-kill effects for ""honorbound"" mechanics when finishing off enemies
Buildings
~ Teleporter/dispenser health while building should match progress
Quick-Fix
~ Ubercharge automatically sets mirroring on, now properly healing the user
Eviction Notice
+ Fixed damage vulnerability being active before first drawing them
Buffalo Steak Sandvich
+ Fixed bug with attempting to switch to disabled weapon ending the buff early
Some fixing of unintended bugs on the server to make these mechanics more consistent.

Cloak and Dagger
+ Removed hidden slower cloak speed
A fix to a hidden downside to the weapon to make it consistent with stock.

Solemn Vow
+ Removed No Random Crits
+ Removed firing speed penalty
- Added -10% slower move speed while active
- Added +50% extra push force taken from damage while active
The prior downsides weren't didn't fit the intended design. With these downsides, it would be decently more difficult to engage in melee combat with the movement inhibitors and without a direct damage nerf, and with some skill the extra damage force could be used to help surf damage to escape.

Disciplinary Action
+ Removed holster speed penalty
- Added +40% blast damage from rocket jumps
Simply making it clunkier to use didn't much affect the huge benefit of using it, and any further melee combat buffs simply wouldn't impact that either. Instead, the added mobility you and your team are given was balanced against a downside that costs you your core mobility option in rocket jumping, requiring you consider your health more in making jumps or use something like gunboats which synergize less with the team support aspect of this weapon.

Conniver's Kunai
- Max HP regen reduced to 2/s (from 3/s)
The downside after one stab didn't appear to have an impact when making a single stab and escaping with the overheal, due to the high speed your health is restored.

Southern Hospitality
- Reduced extra dispenser range to +300% (from +350%)
A nerf meant to rein in the range to something more reasonable, matching the range limit seen in MvM.

Crusader's Crossbow
- Increased max primary ammo penalty to -90% (was -75%)
A simple nerf meant to make the use of the weapon require more ammo maintenance, and make each bolt less disposable to spam.

Vaccinator
~ Reverting all prior changes
+ Increased uber build speed to +100% (was +67%)
+ Increased uber duration to 3 seconds (was 2.5s)
+ Uber effects remains on user while switching weapons
- Removed passive resistances
- Decreased uber's base damage resistance to 33% (was 75%)
- Cannot capture objectives under uber effects
The intent with these changes is to specialize the weapon into its uber’s disposable nature at the cost of the massive resistance it provides to counter individual enemies. With an even faster uber rate, the Medic is encouraged to spend their bubbles more proactively rather than reactively, preferably in place in waiting for the slow overheal building."
Ym0egMQP,برطبو,NoorTFM,Lua,Sunday 17th of September 2023 04:52:06 PM CDT,"
local player = {}
function main()
    for n in next, tfm.get.room.playerList do
        player[n] = {clickonSpace = false}
        for a, k in next,{32, 70} do
            tfm.exec.bindKeyboard(n, k, true,true)
            tfm.exec.bindKeyboard(n, k, false,true)
        end
    end
end

main()

function eventKeyboard(name,k,down)
    if player[name] then
        if k == 32 and down then
             player[name].clickonSpace = true
        elseif k == 32 and not down then
            player[name].clickonSpace = false
        end
        if player[name].clickonSpace and k == 70 and down then
            if not player[name].timer or player[name].timer + 3000 < os.time() then
                local thing =   {objectid = 34, name = ""Poop"", img = {""18a5851f2b3.png"", 10, 9}, speedx = 20, speedy = 5}
                local p = tfm.exec.addShamanObject(10, 500, 100, 0,0 , 0, false)
                tfm.exec.addImage(thing.img[1] , ""#"" .. p , -thing.img[2], -thing.img[3], nil, thing.scale or 1, (thing.scale or 1)) 
                player[name].timer = os.time()
            end
        end
    end
end"
cZe5RLkM,Untitled,dracz3,Python,Sunday 17th of September 2023 04:43:23 PM CDT,"import math

y0 = math.sqrt(2) - 1
a0 = 6 - (4 * math.sqrt(2))


def f(y):
    fy= (1 - (y**4)) ** (0.25)
    return fy


def calculate_y_kp1(k):
    return (1 - f(y[k])) / (1 + f(y[k]))


def calculate_a_kp1(k):
    return (a[k] * (1 + y[k+1]) ** 4) - (2 ** (2*k+3) * y[k+1] * (1 + y[k+1] + (y[k+1] ** 2)))



y = [y0]
a = [a0]
est = []
for k in range(15):
    y.append(calculate_y_kp1(k))
    a.append(calculate_a_kp1(k))
    est.append(1/a[k+1])
    
print(est)"
TF8FfEVM,Untitled,simkoG,PHP,Sunday 17th of September 2023 04:14:55 PM CDT,"<?php

add_filter( 'generate_article_microdata', '__return_empty_string' );
"
CmLKbFUx,Generatepress CreativeWork,simkoG,PHP,Sunday 17th of September 2023 03:56:28 PM CDT,"<?php

add_filter( 'generate_article_itemtype', 'acme_generate_article_itemtype' );
function acme_generate_article_itemtype( $type ) {
	return ""EZT_KELL_ATIRNI"";
}
"
5TNwieRC,Design Shop Order Status Example,4N5H64M3R,HTML,Sunday 17th of September 2023 03:53:21 PM CDT,"<center style=""max-height: 400px; overflow-y: scroll""><table border=""1"" style=""border-collapse: collapse; border: 1px solid black"" cellpadding=""5""><tbody><tr><th>Order</th><th>Order Info</th><th>Orderer</th><th>Status</th><th>Message/Note(s) from designer</th></tr><tr><td>Item purchased from the roomshop</td><td>Info given by orderer (like what they want)</td><td>Username of person who purchased the item</td><td>Status (with a link if completed)</td><td>Message or note from designer for the orderer</td></tr></tbody></table></center>"
FrQeW9Dm,Horor_CPP5_Done,Neo_Feo,C,Sunday 17th of September 2023 03:52:17 PM CDT,"#include <stdio.h>
#include <math.h>

int factorial(short num){
    int isNegativ = 0, result = 1;
    if(num == 0)
        return 1;
    if(num<0){
        isNegativ = 1;
        num*=-1;
    }

    for(int i = 1; i <= num; ++i)
        result *= i;

    return  isNegativ ? result*-1 : result;
}

int main()
{
    int num;
    printf(""introduceti numarul al carui factorial doriti sa-l aflati: "");
    scanf(""%i"",&num);
    printf(""factorialul numarului %d este %d"",num,factorial(num));
    //printf(""g=%d"",factorial(-4));
    return 0;
}
"
i1ZWuXrM,Horor_CPP4_Done,Neo_Feo,C,Sunday 17th of September 2023 03:38:52 PM CDT,"#include <stdio.h>
#include <string.h>
#include <stdlib.h>

void scanWord(char ** buff){
    char *buffer = NULL;
    size_t bufsize = 0;
    ssize_t bytesRead = getline(&buffer, &bufsize, stdin);

    if (bytesRead == -1) {
        perror(""getline"");
        return;
    }

    *buff = (char *) malloc(bytesRead * sizeof(char));
    strcpy(*buff,buffer);
    free(buffer);
}

int main()
{
    char * word1, * word2;

    char* buff = NULL;
    printf(""Introduceti primul cuvant: "");
    scanWord(&word1);

    printf(""Introduceti al doilea cuvant: "");
    scanWord(&word2);

    size_t lenght1 = strlen(word1);
    size_t lenght2 = strlen(word2);

    if(lenght1 > lenght2){
        printf(""Primul cuvant este cel mai lung"");
    }else{
        printf(""Al doilea cuvant este cel mai lung"");
    }

    free(word1);
    free(word2);
    return 0;
}
"
EwGyGe2H,Easter Party,Spocoman,C++,Sunday 17th of September 2023 03:37:37 PM CDT,"#include <iostream>
#include <iomanip>

using namespace std;

int main() {
    int guest;
    cin >> guest;

    double envelope, budget;
    cin >> envelope >> budget;

    double sum = guest * envelope;

    if (guest >= 10 && guest <= 15) {
        sum *= 0.85;
    }
    else if (guest > 15 && guest <= 20) {
        sum *= 0.80;
    }
    else if (guest > 20) {
        sum *= 0.75;
    }

    sum += budget / 10;

    if (budget >= sum) {
        cout << ""It is party time! "" << fixed << setprecision(2) << budget - sum << "" leva left.\n"";
    }
    else {
        cout << ""No party! "" << fixed << setprecision(2) << sum - budget << "" leva needed.\n"";
    }
    return 0;
}"
sYj404Mn,Easter Lunch,Spocoman,C++,Sunday 17th of September 2023 03:30:00 PM CDT,"#include <iostream>
#include <iomanip>

using namespace std;

int main() {
    int easterBreads, eggPacks, cookies;
    cin >> easterBreads >> eggPacks >> cookies;

    double sum = 3.20 * easterBreads + 4.35 * eggPacks  + 5.4 * cookies + 0.15 * 12 * eggPacks;

    cout << fixed << setprecision(2) << sum << endl;
    return 0;
}"
Z2z6ncx3,Easter Guests,Spocoman,C++,Sunday 17th of September 2023 03:23:24 PM CDT,"#include <iostream>
#include <iomanip>
#include <cmath>

using namespace std;

int main() {
    double guests, budget;
    cin >> guests >> budget;

    budget -= ceil(guests / 3) * 4 + guests * 2 * 0.45;

    if (budget < 0) {
        cout << ""Lyubo doesn't have enough money.\n""
            << ""He needs "" << fixed << setprecision(2) << abs(budget) << "" lv. more.\n"";
    }
    else {
        cout << ""Lyubo bought "" << ceil(guests / 3) << "" Easter bread and "" << guests * 2 << "" eggs.\n""
            << ""He has "" << fixed << setprecision(2) << budget << "" lv. left.\n"";
    }
    return 0;
}"
csqDiGzv,Advanced Discord.JS Polls command,document10,JavaScript,Sunday 17th of September 2023 03:04:50 PM CDT,"const { SlashCommandBuilder, EmbedBuilder ,CommandInteraction,Client} = require('discord.js');

module.exports = {
	data: new SlashCommandBuilder()
		.setName('poll')
		.setDescription('Creates a poll with up to ten options')
        .addStringOption(option => option.setName('title')
            .setDescription('The title of the poll')
            .setRequired(true)
        )
        .addStringOption(option => option.setName('option1')
            .setDescription('First option (required)')
            .setRequired(true)
        )
        .addStringOption(option => option.setName('option2')
            .setDescription('Second option (required)')
            .setRequired(true)
        )
        .addStringOption(option => option.setName('option3')
            .setDescription('Third option')
        )
        .addStringOption(option => option.setName('option4')
            .setDescription('Fourth option')
        )
        .addStringOption(option => option.setName('option5')
            .setDescription('Fifth option')
        )
        .addStringOption(option => option.setName('option6')
            .setDescription('Sixth option')
        )
        .addStringOption(option => option.setName('option7')
            .setDescription('Seventh option')
        )
        .addStringOption(option => option.setName('option8')
            .setDescription('Eighth option')
        )
        .addStringOption(option => option.setName('option9')
            .setDescription('Ninth option')
        )
        .addStringOption(option => option.setName('option10')
            .setDescription('Tenth option')
        )
        .addStringOption(option => option.setName('mode')
            .setDescription('The mode to show options in')
            .addChoices(
                {
                    name:""Numbers"",
                    value:""num""
                },
                {
                    name:""Letters"",
                    value:""li""
                },
                {
                    name:""Circles"",
                    value:""cir""
                },
                {
                    name:""Squares"",
                    value:""sq""
                },
                {
                    name:""Hearts"",
                    value:""hea""
                },
                {
                    name:""Books"",
                    value:""book""
                }
            )
        )
        .addRoleOption(option => option.setName('role')
                .setDescription('Role to mention when the poll is sent')
                .setRequired(false)
        )
        ,
	category:'utility',
	/**
     * @param {Client} client
     * @param {CommandInteraction} interaction 
     */
	async execute(client,interaction) {
        await interaction.reply({content:'Creating poll,please wait',ephemeral:true})
        //reactions
		const num = ['1️⃣','2️⃣','3️⃣','4️⃣','5️⃣','6️⃣','7️⃣','8️⃣','9️⃣','🔟']
        const li = ['🇦','🇧','🇨','🇩','🇪','🇫','🇬','🇭','🇮','🇯']
        const cir = ['🔴','🟢','🔵','🟡','🟣','🟤','🟠','⚪','⚫','🔘']
        const sq = ['🟥','🟩','🟦','🟨','🟪','🟫','🟧','⬜','⬛','⏹️']
        const hea = ['❤️','💚','💙','💛','💜','🤎','🧡','🤍','🖤','💟']
        const book = ['📕','📗','📘','📒','📔','📙','📓','🔖','🗒️','📚']
        const title = interaction.options.getString('title',true)
        //command options
		const role = interaction.options.getRole('role',false)
        var mention = """"
        if(role) mention = `<@&${role.id}>`
        var params = [interaction.options.getString('option1',true),interaction.options.getString('option2',true)]
        var el = """"
        var mode = interaction.options.getString(`mode`,false) || 'num'
        var desc = """"
        var options = new Map()
        var i;
        for (i = 3; i < 11; i++) {
            el = interaction.options.getString(`option${i}`,false)
            if(el)params.push(el)
        }
        switch (mode) {
            case 'num':
                params.forEach((p,i) => {
                    options.set(p,num[i])
                })
                break;
            case 'li':
                params.forEach((p,i) => {
                    options.set(p,li[i])
                })
                break;
            case 'cir':
                params.forEach((p,i) => {
                    options.set(p,cir[i])
                })
                break;
            case 'sq':
                params.forEach((p,i) => {
                    options.set(p,sq[i])
                })
                break;
            case 'hea':
                params.forEach((p,i) => {
                    options.set(p,hea[i])
                })
                break;
            case 'book':
                params.forEach((p,i) => {
                    options.set(p,book[i])
                })
                break;
            default:
                break;
        }
        options.forEach((v,k)=>{
            desc += `${v} : ${k}\n`
        })
        const embed = new EmbedBuilder()
            .setTitle(title)
            .setAuthor({name:interaction.user.username,iconURL:interaction.user.displayAvatarURL()})
            .setDescription(desc)
            .setColor('#0000ff')
            .setTimestamp()
        const msg = await interaction.channel.send({content:mention,embeds:[embed]})
        options.forEach(async (v,k)=>{
            await msg.react(v)
        })
	},
};
"
87TG0197,Easter Eggs Battle,Spocoman,C++,Sunday 17th of September 2023 03:03:29 PM CDT,"#include <iostream>

using namespace std;

int main() {
    int firstPlayer, secondPlayer;
    cin >> firstPlayer >> secondPlayer;

    string command;
    cin >> command;

    while (command != ""End"") {
        if (command == ""one"") {
            secondPlayer--;
            if (secondPlayer == 0) {
                cout << ""Player two is out of eggs. Player one has "" << firstPlayer << "" eggs left.\n"";
                break;
            }
        }
        else if (command == ""two"")
        {
            firstPlayer--;
            if (firstPlayer == 0)
            {
                cout << ""Player one is out of eggs. Player two has "" << secondPlayer << "" eggs left.\n"";
                break;
            }
        }
        cin >> command;
    }

    if (command == ""End"") {
        cout << ""Player one has "" << firstPlayer << "" eggs left.\n""
            << ""Player two has "" << secondPlayer << "" eggs left.\n"";
    }
    return 0;
}

Решение с тернарен оператор:

#include <iostream>

using namespace std;

int main() {
    int firstPlayer, secondPlayer;
    cin >> firstPlayer >> secondPlayer;

    string command;
    cin >> command;

    while (command != ""End"") {
        command == ""one"" ? secondPlayer-- : firstPlayer--;

        if (firstPlayer == 0 || secondPlayer == 0) {

            cout << ""Player "" << (firstPlayer == 0 ? ""one"" : ""two"")
                << "" is out of eggs. Player "" << (firstPlayer > 0 ? ""one"" : ""two"")
                << "" has "" << (firstPlayer > 0 ? firstPlayer : secondPlayer) << "" eggs left.\n"";
            break;
        }
        cin >> command;
    }

    if (command == ""End"") {
        cout << ""Player one has "" << firstPlayer << "" eggs left.\n""
            << ""Player two has "" << secondPlayer << "" eggs left.\n"";
    }
    return 0;
}"
xhnuixJq,Easter Eggs,Spocoman,C++,Sunday 17th of September 2023 02:39:13 PM CDT,"#include <iostream>

using namespace std;

int main() {
    int volume, red = 0, orange = 0, blue = 0, green = 0, maxCount = 0;
    cin >> volume;

    string color, maxColor = """";

    for (int i = 0; i < volume; i++) {
        cin >> color;
        if (color == ""red"") {
            red++;
        }
        else if (color == ""orange"") {
            orange++;
        }
        else if (color == ""blue"") {
            blue++;
        }
        else if (color == ""green"") {
            green++;
        }
    }
    if (red > orange && red > blue && red > green) {
        maxCount = red;
        maxColor = ""red"";
    }
    else if (orange > blue && orange > green && orange > red) {
        maxCount = orange;
        maxColor = ""orange"";
    }
    else if (blue > green && blue > red && blue > orange) {
        maxCount = blue;
        maxColor = ""blue"";
    }
    else {
        maxCount = green;
        maxColor = ""green"";
    }

    cout << ""Red eggs: "" << red << endl
        << ""Orange eggs: "" << orange << endl
        << ""Blue eggs: "" << blue << endl
        << ""Green eggs: "" << green << endl
        << ""Max eggs: "" << maxCount << "" -> "" << maxColor << endl;

    return 0;
}

РЕШЕНИЕ С МАР И FOR(EACH):

#include <iostream>
#include <map>

using namespace std;

int main() {
    map <string, int> eggInfo = { {""red"",0},{""orange"",0},{""blue"",0},{""green"",0} };

    int volume, maxCount = 0;
    cin >> volume;

    string color, maxColor = """";

    for (int i = 0; i < volume; i++) {
        cin >> color;
        eggInfo[color]++;
    }

    for (auto& egg : eggInfo) {
        if (egg.second > maxCount) {
            maxColor = egg.first;
            maxCount = egg.second;
        }
    }

    cout << ""Red eggs: "" << eggInfo[""red""] << endl
        << ""Orange eggs: "" << eggInfo[""orange""] << endl
        << ""Blue eggs: "" << eggInfo[""blue""] << endl
        << ""Green eggs: "" << eggInfo[""green""] << endl
        << ""Max eggs: "" << maxCount << "" -> "" << maxColor << endl;

    return 0;
}"
52k5XpQu,Untitled,Salvens,C++,Sunday 17th of September 2023 02:16:01 PM CDT,"#include <bits/stdc++.h>

//#include <ext/pb_ds/assoc_container.hpp>
//using namespace __gnu_pbds;

using namespace std;

#define int long long
#define IOS ios::sync_with_stdio(false); cin.tie(0); cout.tie(0);

const long long INF = 1e18 + 7;
const double EPS = 1e-6;
const int MAXN = 1e5 + 100;
const int MOD = 1e9 + 7;

vector<int> a;
int n, k;

bool check(int x) {
    multiset<int> st;
    for (int i = 0; i < k; ++i) {
        st.insert(a[i]);
    }
    for (int i = 0; i + k < n; ++i) {
        st.insert(a[i + k]);
        if (st.lower_bound(x) == st.end()) {
            return false;
        }
        st.erase(st.find(a[i]));
    }
    return true;
}

inline void solve() {
    cin >> n >> k;
    a.resize(n);
    for (int i = 0; i < n; ++i) {
        cin >> a[i];
    }

    int l = 0, r = 1e5 + 1;
    while (r - l > 1) {
        int mid = (r + l) / 2;
        if (check(mid)) {
            l = mid;
        } else {
            r = mid;
        }
    }
    cout << l << '\n';
}



int32_t main() {
    IOS;

    int tt = 1;
//    cin >> tt;
    while (tt--) {
        solve();
    }
    return 0;
}

"
hK6tDfuq,Untitled,DenCoder618,Python,Sunday 17th of September 2023 01:37:14 PM CDT,"def frequency_analysis(text):
    frequencies = dict()
    total_chars = 0

    for char in text:
        if char.isalpha():
            char = char.lower()
            frequencies[char] = frequencies.get(char, 0) + 1
            total_chars += 1

    items = frequencies.items()
    for char, count in sorted(items, key=lambda i: i[0]):
        frequency = count / total_chars * 100
        print(f""{char}: {frequency:.2f}%"")"
DEPeDiGy,Easter Decoration,Spocoman,C++,Sunday 17th of September 2023 01:32:38 PM CDT,"#include <iostream>
#include <string>

using namespace std;

int main() {
    int clients;
    cin >> clients;
    cin.ignore();

    string stock;

    double totalSum = 0;

    for (int i = 0; i < clients; i++) {
        getline(cin, stock);

        int counter = 0;
        double sum = 0;

        while (stock != ""Finish"") {

            if (stock == ""basket"") {
                sum += 1.50;
            }
            else if (stock == ""wreath"") {
                sum += 3.80;
            }
            else if (stock == ""chocolate bunny"") {
                sum += 7.00;
            }

            getline(cin, stock);
            counter++;
        }

        if (counter % 2 == 0) {
            sum *= 0.80;
        }

        totalSum += sum;
        printf(""You purchased %i items for %.2f leva.\n"", counter, sum);
    }
    printf(""Average bill per client is: %.2f leva.\n"", totalSum / clients);

    return 0;
}"
JdnZG01i,邀您一起看：小祥(7),xiaomianao666,JavaScript,Sunday 17th of September 2023 01:29:33 PM CDT,海阔视界规则分享，当前分享的是：二级页面详情￥page_detail￥小祥(7)@@
zLTinYeh,Easter Competition,Spocoman,C++,Sunday 17th of September 2023 01:21:29 PM CDT,"#include <iostream>
#include <string>

using namespace std;

int main() {
    int easterBreadCount;
    cin >> easterBreadCount;

    string baker, command, topBaker = """";
    int topPoints = 0;

    for (int i = 0; i < easterBreadCount; i++) {
        cin.ignore();
        getline(cin, baker);
        int bakerpoints = 0;

        while (true) {
            cin >> command;
            if (command == ""Stop"") {
                break;
            }
            bakerpoints += stoi(command);
        }

        if (topPoints < bakerpoints) {
            topBaker = baker;
            topPoints = bakerpoints;
            cout << topBaker << "" has "" << topPoints << "" points.\n""
                << topBaker << "" is the new number 1!\n"";
        }
        else {
            cout << baker << "" has "" << bakerpoints << "" points.\n"";
        }
    }
    
    cout << topBaker << "" won competition with "" << topPoints << "" points!"";

    return 0;
}"
NFYJUQZs,Garagentor - Template-Sensor,gerd_r,YAML,Sunday 17th of September 2023 01:18:12 PM CDT,"  - platform: template
    covers:
      garage_door:
        device_class: garage
        friendly_name: ""Garagentor""
        open_cover:
          - condition: state
            entity_id: binary_sensor.schalter_garagentor_garage_door_contact
            state: ""off""
          - service: switch.turn_on
            target:
              entity_id: switch.schalter_garagentor_trigger
        close_cover:
          - condition: state
            entity_id: binary_sensor.schalter_garagentor_garage_door_contact
            state: ""on""
          - service: switch.turn_off
            target:
              entity_id: switch.schalter_garagentor_trigger
        stop_cover:
          service: switch.turn_on
          target:
            entity_id: switch.schalter_garagentor_trigger
        icon_template: >-
          {% if is_state('binary_sensor.schalter_garagentor_garage_door_contact', 'on') %}
            mdi:garage-open
          {% else %}
            mdi:garage
          {% endif %}
        position_template: >-
          {% if is_state('binary_sensor.schalter_garagentor_garage_door_contact', 'on') %}
            100
          {% else %}
            0
          {% endif %}"
W63YSSW8,ngrokstart/kill,SeloTapeTM,Bash,Sunday 17th of September 2023 01:12:05 PM CDT,"# ngrok http --log=stdout https://localhost:6901 > /dev/null &

#!/bin/sh

# Set local port from command line arg or default to 8080
LOCAL_PORT=${1-8443}

echo ""Start ngrok in background on port [ $LOCAL_PORT ]""
nohup ngrok http ""$LOCAL_PORT"" &>/dev/null &

echo -n ""Extracting ngrok public url .""
NGROK_PUBLIC_URL=""""
while [ -z ""$NGROK_PUBLIC_URL"" ]; do
  # Run 'curl' against ngrok API and extract public (using 'sed' command)
  export NGROK_PUBLIC_URL=$(curl --silent --max-time 10 --connect-timeout 5 \
                            --show-error http://127.0.0.1:4040/api/tunnels | \
                            sed -nE 's/.*public_url"":""(https:..[^""]*).*/\1/p')
  sleep 1
  echo -n "".""
done

echo
echo ""NGROK_PUBLIC_URL => [ $NGROK_PUBLIC_URL ]""
echo $NGROK_PUBLIC_URL > /home/ubuntu/docker/telegram_bot_link.secret



#ngkill

#!/bin/sh

echo ""Stopping background ngrok process""
kill -9 $(ps -ef | grep 'ngrok' | grep -v 'grep' | awk '{print $2}')
echo ""ngrok stopped""
"
krYWrTBR,Horor_CPP3_Done,Neo_Feo,C,Sunday 17th of September 2023 12:59:30 PM CDT,"#include <stdio.h>
#include <stdlib.h>
#include <math.h>

int suma(int lenght, int height,int array [lenght][height]){
    if(height<2){
        printf(""\033[31m Nu exista  coloana cu numarul 2 \033[0m"");
        exit(-6);
    }
    int sum = 0;
    for(int i = 0; i<lenght;++i){
        sum += array[i][1];
    }
    return sum;
}

int produsul (int row, int col,int array [row][col]){
        if(col<2){
            printf(""\033[31m Nu exista  coloana cu numarul 2 \033[0m"");
            exit(-6);
        }
        int prod = 1;
        for(int i = 0; i<row;++i){
            prod *= array[i][1];
        }
        return prod;
}

void input_into_Array(int row,int col, int array[row][col]){
        for (int i = 0; i < row; i++){
            printf(""Introduceti elementele randului %i\n"",i+1);
            for(int j = 0; j < col; j++){
                printf(""%i : "", j+1);
                scanf(""%i"",&array[i][j]);
            }
        }
}

int main()
{
    int row, col;

    printf(""Introduceti numarul de coloane: "");
    scanf(""%i"",&col);
    printf(""Introduceti numarul de randuri: "");
    scanf(""%i"",&row);

    row = abs(row);
    col = abs(col);

    int i [row][col];

    input_into_Array(row,col,i);

    printf(""suma este: %i\n"",suma(row,col,i));
    printf(""produsul este: %i"",produsul(row,col,i));
    return 0;
}
"
MRyZ37y1,Untitled,skaram,Python,Sunday 17th of September 2023 12:54:48 PM CDT,"n = int(input())
s = input()
x = int(s, 2)
g = 0
for i in s:
    if i == '1':
        g += 1
if g == 1:
    for i in s:
        if i == '1':
            print(0)
        else:
            print(1)
    exit(0)
if g == 0:
    print(""1\n"" * n)
    exit(0)
a = x % (g - 1)
ap = 1
c = x % (g + 1)
cp = 1
ans = []
shit = [0]
for i in range(1, 200100):
    shit.append(0)
    k = 1
    while k <= i:
        if i & k:
            shit[i] += 1
        k *= 2
for i in range(n - 1, -1, -1):
    if s[i] == '0':
        b = (c + cp) % (g + 1)
    else:
        b = (a - ap) % (g - 1)
    cnt = 1
    while True:
        h = shit[b]
        if h == 0:
            ans.append(cnt)
            break
        cnt += 1
        b %= h
    ap = 2 * ap % (g - 1)
    cp = 2 * cp % (g + 1)
for i in range(len(ans) - 1, -1, -1):
    print(ans[i])
"
