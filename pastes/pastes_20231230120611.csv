id,title,username,language,date,content
zcKuFYxe,data798,TestGuy1,JSON,Saturday 30th of December 2023 06:00:06 AM CDT,"{
  status: 'Success',
  method: 'server',
  maindata: 'bf8f95640c161a3d616bf7d2e0e46881cbc4ae0e73e664653d327adc51543d4e5b358d70608b3cd70fe9df0171d8ef5e33b040012a75fd47f7effe8bf016c379e8f75adc54f2333c0bd597da3b26a3afdd818796d9fff0873e0528180ed76e3477bf26c23a69811590928d4ba33bb981c1b5da353a4e3ec90c70c9a0103f2792',
  otherdata: [
    'add22879ad00a0a8a37977a123c340fb',
    'ce0da7915717723306a195aa1c12557d',
    '2b0fcf13c03d19b127f59f091a4c39dd',
    '3dd716b73755e1fcc0ccc817b8af52f1',
    '52b8c135f8314476dde502101a33168c',
    '3e92845f22623c3ad9b6ee50c0337fe7',
    '449e6359b948840caed91bf4b85aecff',
    'ceac8b38e732d27e7c4d4fdae5946844'
  ]
}"
9HD1tw7w,G2A.com Refund Exploit Dec 2023,G2ARefundExploit,GetText,Saturday 30th of December 2023 05:55:16 AM CDT,"G2A.com refund exploit updated guide 
Any item for free on G2A.com such as Amazon, Steam, and any other gift cards.
 
PDF guide here:
https://drive.google.com/file/d/120kXNJWM5T5u3PGlkQeZCo_nLxzQIlkf/view?usp=g2a_refund_exploit_864770.pdf
 
Working as of
30 December 2023"
EpTyRbSM,Monitoring Sawah dengan Arduino,cisco404,C++,Saturday 30th of December 2023 05:48:49 AM CDT,"// Deklarasi variabel
int sensorKetinggianAir = A0;
int sensorKelembabanTanah = A1;
int sensorSuhuUdara = A2;
int sensorCurahHujan = A3;

// Setup
void setup() {
  // Inisialisasi pin digital
  pinMode(sensorKetinggianAir, INPUT);
  pinMode(sensorKelembabanTanah, INPUT);
  pinMode(sensorSuhuUdara, INPUT);
  pinMode(sensorCurahHujan, INPUT);

  // Mulai serial monitor
  Serial.begin(9600);
}

// Loop
void loop() {
  // Baca data dari sensor
  int ketinggianAir = analogRead(sensorKetinggianAir);
  int kelembabanTanah = analogRead(sensorKelembabanTanah);
  int suhuUdara = analogRead(sensorSuhuUdara);
  int curahHujan = analogRead(sensorCurahHujan);

  // Proses data
  // ...

  // Tampilkan data ke serial monitor
  Serial.print(""Ketinggian air: "");
  Serial.println(ketinggianAir);
  Serial.print(""Kelembaban tanah: "");
  Serial.println(kelembabanTanah);
  Serial.print(""Suhu udara: "");
  Serial.println(suhuUdara);
  Serial.print(""Curah hujan: "");
  Serial.println(curahHujan);

  // Delay
  delay(1000);
}"
DxiuCaDt,deepSpaceD-6,angeldp,Python,Saturday 30th of December 2023 05:33:41 AM CDT,"# -*- coding: utf-8 -*-
""""""
function module for Deep Space D-6
Created on Wed Dec 27 20:25:12 2023

@author: 
""""""
# IMPORTS

# The random module is used to generate random values
# Used in generate_crew() and commander() to use randint()
from random import(randint)
# The os module is used to interact with the system
# Used in clear_screen() to use os.name() and os.system()
from os import(name, system)

# Functions to be developed, necessary for the operation

def new_threat(deck):
    """"""
    To Be Developed

    Parameters
    ----------
    deck : array
        Deck of threat cards in play.
    
    Returns
    -------
    deck: array
        Updated deck
        
    """"""
    deck.remove(deck[0])
    print('We get a threat card from the deck')
    return(deck)

def activate_threat():
    """"""
    To Be Developed

    Returns
    -------
    None.

    """"""
    threat_dice = randint(1,6)
    print(f'trigger threats corresponding to the number {threat_dice}')
    
def tactic(tacticn):
    """"""
    To Be Developed

    Parameters
    ----------
    tacticn : int
        Number of crew members (tactics) in play.
    
    Returns
    -------
    None.

    """"""
    print(f""The tactic's actions are carried out x {tacticn}"")
    
def doctor(doctorn):
    """"""
    To Be Developed

    Parameters
    ----------
    tacticn : int
        Number of crew members (doctors) in play.
    
    Returns
    -------
    None.

    """"""
    print(f""The doctor's actions are carried out x {doctorn}"")
    
def scientist(scientistn):
    """"""
    To Be Developed

    Parameters
    ----------
    tacticn : int
        Number of crew members (scientists) in play.
    
    Returns
    -------
    None.

    """"""
    print(f""The scientist's actions are carried out x {scientistn}"")
    
def engineer(engineern):
    """"""
    To Be Developed

    Parameters
    ----------
    tacticn : int
        Number of crew members (engineers) in play.
    
    Returns
    -------
    None.

    """"""
    print(f""The engineer's actions are carried out x {engineern}"")

# Completed functions in alpha version

def clear_screen():
    """"""
    Clear the user screen based on the operating system used

    Returns
    -------
    None.

    """"""
    
    if name == ""posix"":
        system(""clear"")
    elif name == ""ce"" or name == ""nt"" or name == ""dos"":
        system (""cls"")

def generate_crew(crewn):
    """"""
    Receives the number of active crew members (crewn)
    to complete with random values ​​between 1 and 6
    a crew sized array.

    Parameters
    ----------
    crewn : int
        Number of crew members (dice) in play.

    Returns
    -------
    crew : array
        Result of the dice roll.

    """"""
    
    # Loop through the array storing random values between 1 and 6
    crew = []
    for i in range(crewn):
        crew.append(randint(1, 6))
    return crew

def pretty_shown_crew(crew):
    """"""
    Shows crew as a ASCII dice roll

    Parameters
    ----------
    crew : array
        Result of the dice roll.

    Returns
    -------
    None.

    """"""
    # dice sides in ascii
    PRETTY_DICE = {
        1: (
            ""┌─────────┐"",
            ""│         │"",
            ""│    ●    │"",
            ""│         │"",
            ""└─────────┘"",
            ),
        2: (
            ""┌─────────┐"",
            ""│  ●      │"",
            ""│         │"",
            ""│      ●  │"",
            ""└─────────┘"",
            ),
        3: (
            ""┌─────────┐"",
            ""│  ●      │"",
            ""│    ●    │"",
            ""│      ●  │"",
            ""└─────────┘"",
            ),
        4: (
            ""┌─────────┐"",
            ""│  ●   ●  │"",
            ""│         │"",
            ""│  ●   ●  │"",
            ""└─────────┘"",
            ),
        5: (
            ""┌─────────┐"",
            ""│  ●   ●  │"",
            ""│    ●    │"",
            ""│  ●   ●  │"",
            ""└─────────┘"",
            ),
        6: (
            ""┌─────────┐"",
            ""│  ●   ●  │"",
            ""│  ●   ●  │"",
            ""│  ●   ●  │"",
            ""└─────────┘"",
            ),
        }
    #  dice height (rows) and separator (sep)
    DICE_ROWS = len(PRETTY_DICE[1])
    DICE_SEP = ' '
    pretty_faces = []
    for n in crew:
        pretty_faces.append(PRETTY_DICE[n])
        dice_faces_rows = []
        for row_id in range(DICE_ROWS):
            row_components = []
            for die in pretty_faces:
                row_components.append(die[row_id])
            row_string = DICE_SEP.join(row_components)
            dice_faces_rows.append(row_string)
    width = len(dice_faces_rows[0])
    diagram_header = "" CREW "".center(width, ""~"")
    dice_faces_diagram = ""\n"".join([diagram_header] + dice_faces_rows)
    # the result is shown
    print(f""{dice_faces_diagram}\n"")

def scan_threats(crew, scant, deck):
    """"""
    loops through the 'crew' array to get the number of sixes.
    If 'scant' plus that number is less than 3 the variable 'scant'
    is updated; If it is equal to or greater than 3, it calculates
    the module of that value between 3 and saves it in 'scant'
    and draws a new threat card [new_threat()].
    It will have to do this as many times as the integer part 
    indicates by dividing the number of scanners by 3

    Parameters
    ----------
    crew : array
        Result of the dice roll.
    scant : int
        Number of busy scanners. Value between 0 and 2.
    Returns
    -------
    scant : int
        Updated number of busy scanners. Value between 0 and 2.

    """"""
    # 'n6' will store the number of sixes in 'crew'
    n6 = 0
    for i in crew:
        if i == 6:
            n6 += 1
    # The number of scanners is updated
    scant = scant + n6

    # If 'scant' is equal to or greater than 3, 
    # I draw as many threat cards as groups of 3
    # have been obtained and I update scant 
    # with the rest of the division
    
    if scant >= 3:
        rango = scant // 3
        for n in range(rango):
            new_threat(deck)
        scant = scant % 3
        
    return(scant)  

def commander(crew):
    """"""
    Actions to perform with each '1' obtained in the roll.
    It must ask if you want to change any crew member or re-roll
    available crew.  
    It will need to validate all user input. 
    It needs the crew array and returns it modified
    
    Parameters
    ----------
    crew : array
        Result of the dice roll.

    Returns
    -------
    crew : array
        Dice roll result modified by commander.

    """"""

    print('Commander available:')
    # The key pressed by the user is stored in 'c'.
    c = 'x'
    oldcrew = ''
    # Prompt until a valid value is obtained
    while c.lower() != 'c' and c.lower() != 'r':
        c = input(""Do you want to change any members of your crew (c) \n \
        or re-roll de dice (r)? c/r\n"")
    if c.lower() == 'c':
        # At this point 'c' is used to validate that the number is on the
        # 'crew' (an unavailable crew member cannot be changed)
        c = 'n'
        while c == 'n':
            # 'cont' stores the position in the array in which 
            # the indicated value is located
            cont = 0
            oldcrew = int(input(""Number of the crew member to be replaced:""))
            # If a 6 (scanner) has been indicated, it moves on to the next 
            #iteration without doing anything else (continues requesting 
            # a crew member until a valid value is received)
            if oldcrew == 6:
                continue
            for i in crew:
                if i == oldcrew:
                # If the entered value is available the new value is requested,
                # making sure that a value between 2 and 5 is indicated.
                    newcrew = 1
                    while newcrew < 2 or newcrew > 5:
                        newcrew = int(input(""Value of the new crew member (2-5)""))
                    crew[cont] = newcrew
                    # 'c' is updated to stop prompting. 
                    c = ''
                    break
                cont += 1
    elif c.lower() == 'r':
        ncrew = []
        cont = 0
        while cont < len(crew):
            if crew[cont] == 1 or crew[cont] == 6: 
                ncrew.append(crew[cont])
            else:
                ncrew.append(randint(1,6))
            cont += 1
        # Crew update
        crew = ncrew
    if c == 'c': print(f'Successfully changed {oldcrew} to {newcrew}')
    print(f""Nueva tripulación: {crew}"")
    pretty_shown_crew(crew)
    return(crew)

def assign_crew(crew):
    """"""
    If there are commanders in the roll, it is responsible for updating the 
    crew and, in any case, calls the functions of each crew member with 
    the number of them available.

    Parameters
    ----------
    crew : array
        Result of the dice roll.

    Returns
    -------
    None.

    """"""
    # The new crew
    ncrew = []
    # Number of crew members of each type
    tacticn = 0
    doctorn = 0
    scientistn = 0
    engineern = 0
    # in search of the commander 
    for i in range(len(crew)):
        if crew[i] == 1: ncrew = commander(crew)
  
    # Crew update if modified
    if len(ncrew) != 0 : crew = ncrew    
    # For the rest of the tasks, the appropriate functions are called 
    # with the number of crew members of each type.
    for i in range(len(crew)):
        if crew[i] == 2: tacticn += 1
        elif crew[i] == 3: doctorn += 1
        elif crew[i] == 4: scientistn += 1
        elif crew[i] == 5: engineern += 1
    if tacticn > 0: tactic(tacticn)
    if doctorn > 0: doctor(doctorn)
    if scientistn > 0: scientist(scientistn)
    if engineern > 0: engineer(engineern)

# MAIN

def main_program():
    deck = list(range(0,9))
    print(deck)
    i = 0
    scant = 0
    crewn = 6
    while i < len(deck):
        clear_screen()
        print(f'\n\nRound #{i + 1}')
        print(""1:\nHere is the dice roll"")
        crew = generate_crew(crewn)
        print(crew)
        pretty_shown_crew(crew)
        scant = scan_threats(crew, scant, deck)
        print(f""2:\nYou have {scant} scanners in use and {crewn} crew\n \
        members available for the next round"")
        print(""3:"")
        assign_crew(crew)
        print(crew)
        print(""4:"")
        deck = new_threat(deck)
        print(f""{len(deck)} card(s) remaining"")
        print(""5:"")
        activate_threat()
        crewn = 6 - scant
        if crewn < 1:
            print('You lost!')
            return(0)
        print(f""6:\n{crewn} crew members available"")
        i += 1
        c = input(""Press enter to start the next round"")
    print('Won!')
    c = input('Press enter to exit')
    return(0)

main_program()


"
bnTKR3iP,database.rs,mounty,Rust,Saturday 30th of December 2023 05:24:34 AM CDT,"use postgres::{Client, NoTls, Error, Row};
use std::collections::HashMap;
use std::task::Context as TC;
use std::vec::Vec;
use actix::{Actor, Addr, Context, System, MailboxError};
use actix::prelude::Handler;
use actix::prelude::Message;
use core::marker::Sync;
use postgres::types::ToSql;
use crate::global_config;
use crate::logging;
use futures::executor::block_on;


struct Connection { connection: Result<Client, Error> }


impl Actor for Connection {
	type Context = Context<Self>;

	fn started(&mut self, _ctx: &mut Self::Context) {
		logging::info(""Database connected"");
	}
}


#[derive(Message)]
#[rtype(result = ""Result<Vec<Row>, Error>"")]
struct SQLQuery {
	query: &'static str,
	parameters: &'static [&'static (dyn ToSql + Sync)]
}


impl Handler<SQLQuery> for Connection {
	type Result = Result<Vec<Row>, Error>;

	fn handle(&mut self, msg: SQLQuery, _ctx: &mut Context<Self>) -> Self::Result {
		self.connection?.query(msg.query, msg.parameters)
	}
}


static connection: Addr<Connection> = {
	let system = System::new();
	let addr = system.block_on(async { Connection::create(|ctx| {
		Connection { connection: connection_instance() }
	}) });
	system.run().unwrap();
	addr
};


pub fn query(query: &'static str, parameters: &'static [&(dyn ToSql + Sync)]) -> Result<Result<Vec<Row>, Error>, MailboxError> {
	block_on(connection.send(SQLQuery{ query, parameters }))
}


fn connection_instance() -> Result<Client, Error> {
	let useless_default = ""docile"";
	let host = global_config::item(""db.host"").unwrap_or(""127.0.0.1"");
	let user = global_config::item(""db.user"").unwrap_or(useless_default);
	let base = global_config::item(""db.database"").unwrap_or(useless_default);
	let connection_string = format!(""host={host} user={user} database={base}"");
	Client::connect(&connection_string[..], NoTls)
}"
uG13x2Wh,Untitled,Josif_tepe,C++,Saturday 30th of December 2023 05:23:29 AM CDT,"#include <iostream>
#include <set>
#include <vector>
#include <bits/stdc++.h>
using namespace std;
 
const long long maxn =1e6+10;
const long long mod=1e9+7;
 
int main()
{
    ///ifstream cin(""haircut.in"");
    ///ofstream cout(""haircut.out"");
    ios_base::sync_with_stdio(false); cin.tie(0);
    long long n,k;
    cin>>n>>k;
    vector<pair<long long,long long>>v;
    for(long long i=0;i<n;i++)
    {
        long long x,y;
        cin>>x>>y;
        v.push_back({y,x});
    }
    sort(v.begin(),v.end());
    multiset<long long>ms;
    while(k--)
    {
        ms.insert(0);
    }
    long long ans=0;
    for(long long i=0;i<n;i++)
    {
        multiset<long long>::iterator it = ms.upper_bound(v[i].second);
        if(it == ms.begin()) continue;
        it--;
        
        ms.erase(it);
        ms.insert(v[i].first);
        ans++;
    }
    
    cout<<ans<<endl;
}
"
zcys0BxE,Untitled,dllbridge,C,Saturday 30th of December 2023 05:06:42 AM CDT,"
#include    <stdio.h>
#include   <string.h>
 


char sz1[17] =    ""SONY "",
     sz2[17] = ""Pictures"";  




////////////////////////////////////////////////////////
int main()                                            //
{
	
	strcpy(sz1, sz2);
	
	printf(""%s"", sz1);
}

























/*
#include    <stdio.h>
//#include   <string.h>
 


char sz[17] = ""SONY _ Picterws"";


int _strlen (char *p);
int _strlen1(char *p);
int _strlen2(char *p);

////////////////////////////////////////////////////////
int main()                                            //
{
	
	
	int d = _strlen2(sz);
	
	printf(""%d"", d);
	
}


////////////////////////////////////////////////////////
int _strlen2(char *p)
{
	
	int i = 0;
	
	for(; p[i]; i ++);

	
return i;	
}



////////////////////////////////////////////////////////
int _strlen1(char *p)
{
	
	int i = 0;
	
	for(; p[i] != 0; i ++);

	
return i;	
}




////////////////////////////////////////////////////////
int _strlen(char *p)
{
	
	int i = 0;
	
	for(; i < 100; i ++)
	{
		
		if(p[i] == 0) break; 
	}
	
return i;	
}





*/











/*
#include    <stdio.h>
#include   <string.h>
 


char sz[17] = ""SONY Picterws"";

////////////////////////////////////////////////////////
int main()                                            //
{
	
	
	int d = strlen(sz);
	
	printf(""%d"", d);
	
}

*/






















/*

#include   <stdio.h>
 
 
int     n =   22;
char    c =  't';
float   f = 3.14; 
double f2 = 3.14;

char sz[17] = ""SONY"";

////////////////////////////////////////////////////////
int main()                                            //
{

    printf(""size of    int  = %2d bytes\n"", sizeof(int   ) );
    printf(""size of   char  = %2d bytes\n"", sizeof(char  ) );
    printf(""size of  float  = %2d bytes\n"", sizeof(float ) );
    printf(""size of double  = %2d bytes\n"", sizeof(double) ); 
    printf(""size of sz[17]  = %2d bytes\n"", sizeof(sz    ) );	   
}



*/






















/*

 
#include   <stdio.h>
 
 
int n = 22;
 
//    Ðàçáèòü íà if & goto 
////////////////////////////////////////////////////////
int main()                                            //
{

    if(n == 5) { printf(""May    \n"");  goto L_01; }
    if(n == 7) { printf(""July   \n"");  goto L_01; } 
    if(n == 8) { printf(""August \n"");  goto L_01; } 	        
                 printf(""Error! \n"");
    
L_01: return 7;
}
 

*/




"
5xZJPBCL,Rotating Dial,TitanOP,Dart,Saturday 30th of December 2023 05:04:19 AM CDT,"import 'package:flutter/material.dart';
import 'package:flutter_svg/flutter_svg.dart';
import 'dart:math' as math;

class Pawned extends StatefulWidget {
  const Pawned({super.key});

  @override
  State<Pawned> createState() => _PawnedState();
}

class _PawnedState extends State<Pawned> {
  double outerDialAngle = 0.0;

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text('Combination Dial'),
      ),
      body: Center(
        child: Stack(
          alignment: Alignment.center,
          children: [
            // Outer Dial
            GestureDetector(
              onPanUpdate: (details) {
                setState(() {
                  outerDialAngle += details.primaryDelta ?? 0.0;
                });
              },
              child: Transform.rotate(
                angle: math.pi * outerDialAngle / 180.0,
                child: SvgPicture.asset(
                  'asset/outer_dial.svg', // Replace with your SVG image path
                ),
              ),
            ),

            // Progress Dial
            SizedBox(
              width: 282,
              height: 282,
              child: CircularProgressIndicator(
                value: outerDialAngle % 360 / 360,
                backgroundColor: Colors.grey,
                valueColor: const AlwaysStoppedAnimation<Color>(Colors.green),
              ),
            ),

            // Inner Circle
            Container(
              width: 192,
              height: 192,
              decoration: const BoxDecoration(
                shape: BoxShape.circle,
                color: Colors.green,
              ),
              child: Center(
                child: Text(
                  calculateNumber(outerDialAngle),
                  style: const TextStyle(fontSize: 24),
                ),
              ),
            ),
          ],
        ),
      ),
    );
  }

  String calculateNumber(double angle) {
    // Calculate the number based on the angle
    int number = ((angle % 360) / 18).round() + 1;
    return number.toString();
  }
}
"
z6SqYvT3,Untitled,kwest87,C#,Saturday 30th of December 2023 04:53:34 AM CDT,"using System;

namespace ConsoleApp19
{
    internal class Program
    {
        static void Main(string[] args)
        {
            const int CommandKnock = 1;
            const int CommandSeriesKnock = 2;
            const int CommandTreatment = 3;
            const int CommandUndercut = 4;

            int bossHealth = 1000;
            int golemHealth = 1000;
            int bossDamage = 100;
            int golemDamage = 50;
            int golemTreatment = 200;
            int clay = 2;
            int userInput;
            bool itSeriesKnocks = false;
            bool isWork = true;

            Console.WriteLine($""На выбор прёмы голема : \n {CommandKnock})Обычный удар (50 урона)."" +
                $""\n {CommandSeriesKnock})Серия ударов (делает 3 обычных удара но след. ход отдыхает)."" +
                $""\n {CommandTreatment})Замазать раны глиной (восстановить 200 жизней , 2 куска глины)."" +
                $""\n {CommandUndercut})Подсечка (обезвредить противника в этом ходу и 50 урона)."");

            while (isWork)
            {
                if (itSeriesKnocks)
                {
                    Console.WriteLine(""Отдыхаете после серии ударов ."");
                    itSeriesKnocks = false;
                    golemHealth -= bossDamage;
                    Console.ReadKey();
                }
                else
                {
                    Console.WriteLine($""  Жизни босса - {bossHealth}\n  Жизни голема - {golemHealth}"");
                    Console.Write(""Выберите действие : "");
                    userInput = Convert.ToInt32(Console.ReadLine());

                    switch (userInput)
                    {
                        case CommandKnock:
                            bossHealth -= golemDamage;
                            golemHealth -= bossDamage;
                            break;

                        case CommandSeriesKnock:
                            bossHealth -= golemDamage + golemDamage + golemDamage;
                            golemHealth -= bossDamage;
                            itSeriesKnocks = true;
                            break;

                        case CommandTreatment:
                            golemHealth -= bossDamage;

                            if (clay > 0)
                            {
                                clay--;
                                golemHealth += golemTreatment;
                            }
                            break;

                        case CommandUndercut:
                            bossHealth -= golemDamage;
                            break;
                    }

                    if (bossHealth <= 0 || golemHealth <= 0)
                    {
                        isWork = false;
                    }
                }
            }

            if (bossHealth > 0)
            {
                Console.WriteLine(""Голем повержен."");
            }
            else if (golemHealth > 0)
            {
                Console.WriteLine(""Босс повержен.""); ;
            }
            else
            {
                Console.WriteLine(""Ничья."");
            }
        }
    }
}"
7gVYpU5R,BTC Wallet Credentials have been reset,VQ-Moe,GetText,Saturday 30th of December 2023 04:53:26 AM CDT,"Dear Moe,
We have received a request to reset the login information for your Bitcoin wallet. If you did not make this request, please contact us immediately.

Your new login credentials will be 
chefman440:Jmh3x9ZB on 149.28.231.183
You can connect via SSH.

Regards,
GM-554445"
URwaXghq,Untitled,Josif_tepe,C++,Saturday 30th of December 2023 04:47:55 AM CDT,"#include <iostream>
using namespace std;
int main() {
    int n;
    cin >> n;
    
    int niza[n];
    for(int i = 0; i < n; i++) {
        cin >> niza[i];
    }
    int najmal = niza[0];
    int reden_broj = 1;
    
    for(int i = 0; i < n; i++) {
        if(niza[i] < najmal) {
            najmal = niza[i];
            reden_broj = i + 1;
        }
    }
    cout << reden_broj << "" "" << najmal << endl;
  
   
    return 0;
}
"
pi03qyU2,Untitled,Josif_tepe,C++,Saturday 30th of December 2023 04:40:19 AM CDT,"#include <iostream>
using namespace std;
int main() {
    int n;
    cin >> n;
    
    int niza[n];
    for(int i = 0; i < n; i++) {
        cin >> niza[i];
    }
    
    int zbir = 0;
    int volsebnici = 1;
    for(int i = 0; i < n; i++) {
        zbir += niza[i] + 1;
        if(zbir >= n) {
            break;
        }
        volsebnici++;
    }
    cout << volsebnici << endl;
   
    return 0;
}
"
pUBwXB1B,Untitled,Josif_tepe,C++,Saturday 30th of December 2023 04:32:24 AM CDT,"#include <iostream>
using namespace std;
int main() {
    int n;
    cin >> n;
    
    int niza[n];
    for(int i = 0; i < n; i++) {
        cin >> niza[i];
    }
    
    int najmal = niza[0];
    int indeks_najmal = 0;
    
    int najgolem = niza[0];
    int indeks_najgolem = 0;
    
    for(int i = 0; i < n; i++) {
        if(niza[i] < najmal) {
            najmal = niza[i];
            indeks_najmal = i;
        }
        
        if(niza[i] > najgolem) {
            najgolem = niza[i];
            indeks_najgolem = i;
        }
    }
    
    for(int i = indeks_najmal; i <= indeks_najgolem; i++) {
        cout << niza[i] << "" "";
    }
    
   
    return 0;
}
"
emWAfdmr,Untitled,Josif_tepe,C++,Saturday 30th of December 2023 04:29:36 AM CDT,"#include <iostream>
using namespace std;
int main() {
    int n;
    cin >> n;
    
    int niza[n];
    for(int i = 0; i < n; i++) {
        cin >> niza[i];
    }
    
    int najmal = niza[0];
    int indeks_najmal = 0;
    
    int najgolem = niza[0];
    int indeks_najgolem = 0;
    
    for(int i = 0; i < n; i++) {
        if(niza[i] < najmal) {
            najmal = niza[i];
            indeks_najmal = i;
        }
        
        if(niza[i] > najgolem) {
            najgolem = niza[i];
            indeks_najgolem = i;
        }
    }
    cout << najmal << "" "" << indeks_najmal << endl;
    cout << najgolem << "" "" << indeks_najgolem << endl;
   
    return 0;
}
"
Gsg15D6C,Untitled,Josif_tepe,C++,Saturday 30th of December 2023 04:24:21 AM CDT,"#include <iostream>
using namespace std;
int main() {
    int n;
    cin >> n;
    
    int niza[n];
    for(int i = 0; i < n; i++) {
        cin >> niza[i];
    }
    
    int najmal = niza[0];
    for(int i = 0; i < n; i++) {
        if(niza[i] < najmal) {
            najmal = niza[i];
        }
    }
    cout << najmal << endl;
   
    return 0;
}
"
hxfKAPT7,Untitled,Josif_tepe,C++,Saturday 30th of December 2023 04:20:02 AM CDT,"#include <iostream>
using namespace std;
int main() {
    int n;
    cin >> n;
    
    int niza[n];
    for(int i = 0; i < n; i++) {
        cin >> niza[i];
    }
    
    int najgolem = niza[0];
    for(int i = 0; i < n; i++) {
        if(niza[i] > najgolem) {
            najgolem = niza[i];
        }
    }
    cout << najgolem << endl;
    return 0;
}
"
ULdpuatc,Untitled,Josif_tepe,C++,Saturday 30th of December 2023 04:13:19 AM CDT,"#include <iostream>
using namespace std;
int main() {
    int n;
    cin >> n;
    
    int niza[n];
    for(int i = 0; i < n; i++) {
        cin >> niza[i];
    }
    
    for(int i = n - 1; i >= 0; i--) {
        cout << niza[i] << "" "";
    }
    return 0;
}
"
jNzEv3YT,Untitled,ProgMe,C++,Saturday 30th of December 2023 03:35:27 AM CDT,"#include <bits/stdc++.h>

using namespace std;

class Trie {
    struct Node {
        int cnt = 0;
        int pref = 0;

        Node* pr = nullptr;

        map<char, Node *> next;
    };

    Node* root = nullptr;

    void print(Node* cur, string s);

    string kth(int idx, Node* cur, string s);
public:
    Trie();

    void insert(const string& s);

    void erase(const string& s);

    bool check(const string& s);

    void print();

    string kth(int idx);
};

Trie::Trie() {
    root = new Node();
}

void Trie::insert(const std::string& s) {
    Node* cur = root;

    for (auto i : s) {
        ++cur->pref;
        if (!cur->next[i]) {
            cur->next[i] = new Node();
            cur->next[i]->pr = cur;
        }
        cur = cur->next[i];
    }

    ++cur->cnt;
    ++cur->pref;
}

void Trie::erase(const string& s) {
    Node* cur = root;

    for (auto i : s) {
        if (!cur->next[i]) {
            return;
        }
        cur = cur->next[i];
    }

    if (cur->cnt) {
        --cur->cnt;
        --cur->pref;
        while (cur->pr) {
            cur = cur->pr;
            --cur->pref;
        }
    }
}

bool Trie::check(const string& s) {
    Node* cur = root;

    for (auto i : s) {
        if (!cur->next[i]) {
            return false;
        }
        cur = cur->next[i];
    }

    return cur->cnt;
}

void Trie::print() {
    print(root, """");
}

void Trie::print(Node* cur, string s) {

    for (auto [c, to] : cur->next) {
        if (to) {
            s.push_back(c);
            print(to, s);
            s.pop_back();
        }
    }

    if (cur->cnt) {
        cout << s << '\n';
    }
}

string Trie::kth(int idx) {
    return kth(idx, root, """");
}

string Trie::kth(int idx, Node* cur, string s) {
    if (cur->cnt > idx) {
        return s;
    }
    idx -= cur->cnt;

    for (auto [c, to] : cur->next) {
        if (to->pref > idx) {
            s.push_back(c);
            return kth(idx, to, s);
        }
        idx -= to->pref;
    }

    return ""-1"";
}

int main() {
    Trie t;

    int q;
    cin >> q;
    while (q--) {
        int tp;
        cin >> tp;

        if (tp == 1) {
            string s;
            cin >> s;
           t.insert(s);
        } else if (tp == 2) {
            string s;
            cin >> s;
            t.erase(s);
        } else if (tp == 3) {
            string s;
            cin >> s;
            cout << t.check(s) << '\n';
            cout << '\n';
        } else if (tp == 4) {
            t.print();
            cout << '\n';
        } else {
            int idx;
            cin >> idx;
            cout << t.kth(idx) << '\n';
            cout << '\n';
        }
    }
}"
rmHHUH48,this does Not work yet!!!,ApexdaUser,Lua,Saturday 30th of December 2023 02:59:22 AM CDT,"-- Delta Custom Save-Instance (THIS DOES NOT WORK YET!!!)
-- This script does NOT save the instance that you put! It will save the descendants and put it in a folder in Workspace!
-- Made with love by zuzaratrust <3

-- Options
local instance = game.ReplicatedFirst -- The instance to save descendants from
-- more to be added later
-- End Options

-- Don't touch this code!!!!!!!!!!!!!!!!!!

local xml = [[<roblox xmlns:xmime=""http://www.w3.org/2005/05/xmlmime"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance"" xsi:noNamespaceSchemaLocation=""http://www.roblox.com/roblox.xsd"" version=""4"">
]]
local curdata = [[]]
local parts = {}
local subitems = {}
local data
data = game:HttpGet(""https://setup.rbxcdn.com/versionQTStudio"", true)
data = game:HttpGet(""http://setup.rbxcdn.com/""..data..""-API-Dump.json"", true)
data = game:GetService(""HttpService""):JSONDecode(data)
data = data[""Classes""]
function propertyLookup(itype)
	print(""Requested Type:"", itype)
	local properties = {}
	local supersearch
	for i,v in pairs(data) do
		for k,j in pairs(v[""Members""]) do
			if j[""MemberType""] == ""Property"" and v[""Name""] == itype then
				table.insert(properties, j)
			end
			if v[""Superclass""] and v[""Name""] == itype then
				supersearch = v[""Superclass""]
			end
		end
	end
	if supersearch then
		for i,v in pairs(data) do
			for k,j in pairs(v[""Members""]) do
				if j[""MemberType""] == ""Property"" and v[""Name""] == supersearch then
					table.insert(properties, j)
				end
			end
		end
	end
	return properties
end
local cfrcomp = {""X"",""Y"",""Z"",""R00"",""R01"",""R02"",""R10"",""R11"",""R12"",""R20"",""R21"",""R22""}
print(""Initialized variables, starting child loop."")
for i,v in pairs(instance:GetDescendants()) do
curdata ..= ""<Item class=\"""" .. v.ClassName .. ""\"" referent=\"""" .. (#parts+1) .. ""\"">\n""
curdata ..= ""<Properties>\n""
table.insert(parts, v)
local properties = propertyLookup(v.ClassName)
for j,k in pairs(properties) do
pcall(function()
if (v[k[""Name""]] and not v:FindFirstChild(k[""Name""])) then
print(k[""Name""])
curdata ..= ""<""..(k[""ValueType""][""Name""] == ""BrickColor"" and ""int"" or (k[""ValueType""][""Name""] == ""Enum"" and ""token"" or (k[""ValueType""][""Name""] == ""CFrame"" and ""CoordinateFrame"" or k[""ValueType""][""Name""]))).."" name=""..k[""Name""].."">\n""
if k[""Name""] == ""CFrame"" then
for z,x in pairs(table.pack(v[""CFrame""]:GetComponents())) do
if z ~= ""n"" then
curdata ..= ""<""..cfrcomp[z].."">""..x..""</""..cfrcomp[z].."">""
end
end
else
curdata ..= v[k[""Name""]] .. ""\n""
end
curdata ..= ""</""..(k[""ValueType""][""Name""] == ""BrickColor"" and ""int"" or (k[""ValueType""][""Name""] == ""Enum"" and ""token"" or (k[""ValueType""][""Name""] == ""CFrame"" and ""CoordinateFrame"" or k[""ValueType""][""Name""]))).."">\n""
end
table.insert(subitems,curdata)
end)
curdata = """"
end
curdata ..= ""</Properties>\n""
curdata ..= ""</Item>\n""
end
print(""Done looping through children"")
xml ..= [[<Item class=""Workspace"" referent=""mainworkspace"">
<Item class=""Folder"" referent=""mainfolder"">
]]
print(""Looping through subitems to add to main folder."")
for i,v in pairs(subitems) do
xml ..= v
end
xml ..= [[</Properties>
</Item>
</Item>
</roblox>]]
print(""Done!"")
print(""(temp action) Printing output XML..."")
print(xml)
print(""Copying to Clipboard..."")
setclipboard(xml)
print(""Done!"")"
wRt5udGx,Untitled,ProgMe,C++,Saturday 30th of December 2023 02:51:25 AM CDT,"class Trie {
    struct Node {
        bool is_end = false;

        map<char, Node *> next;
    };

    Node* root = nullptr;

public:
    Trie();

    void insert(string s);

    void erase(string s);

    bool check(string s);
};

Trie::Trie() {
    root = new Node();
}

void Trie::insert(std::string s) {
    Node* cur = root;

    for (auto i : s) {
        if (!cur->next[i]) {
            cur->next[i] = new Node();
        }
        cur = cur->next[i];
    }

    cur->is_end = true;
}

void Trie::erase(string s) {
    Node* cur = root;
    
    for (auto i : s) {
        if (!cur->next[i]) {
            return;
        }
        cur = cur->next[i];
    }
    
    cur->is_end = false;
}

bool Trie::check(string s) {
    Node* cur = root;

    for (auto i : s) {
        if (!cur->next[i]) {
            return false;
        }
        cur = cur->next[i];
    }
    
    return cur->is_end;
}"
Hgpe3cxU,oaaaa,hammercoolness,Lua,Saturday 30th of December 2023 01:27:50 AM CDT,"local osclock = os.clock()
repeat task.wait() until game:IsLoaded()

setfpscap(10)
game:GetService(""RunService""):Set3dRenderingEnabled(false)
local Booths_Broadcast = game:GetService(""ReplicatedStorage"").Network:WaitForChild(""Booths_Broadcast"")
local Players = game:GetService('Players')
local getPlayers = Players:GetPlayers()
local PlayerInServer = #getPlayers
local http = game:GetService(""HttpService"")
local ts = game:GetService(""TeleportService"")
local rs = game:GetService(""ReplicatedStorage"")
local playerID

if not snipeNormalPets then
    local snipeNormalPets = true
end

local vu = game:GetService(""VirtualUser"")
Players.LocalPlayer.Idled:connect(function()
   vu:Button2Down(Vector2.new(0,0),workspace.CurrentCamera.CFrame)
   task.wait(1)
   vu:Button2Up(Vector2.new(0,0),workspace.CurrentCamera.CFrame)
end)

for i = 1, PlayerInServer do
   for ii = 1,#alts do
        if getPlayers[i].Name == alts[ii] and alts[ii] ~= Players.LocalPlayer.Name then
            jumpToServer()
        end
    end
end

local function processListingInfo(uid, gems, item, version, shiny, amount, boughtFrom, boughtStatus, mention)
    local gemamount = Players.LocalPlayer.leaderstats[""💎 Diamonds""].Value
    local snipeMessage =""||"".. Players.LocalPlayer.Name .. ""||""
    local weburl, webContent, webcolor
    if version then
        if version == 2 then
            version = ""Rainbow ""
        elseif version == 1 then
            version = ""Golden ""
        end
    else
       version = """"
    end

    if boughtStatus then
	webcolor = tonumber(0x00ff00)
	weburl = webhook
        snipeMessage = snipeMessage .. "" just sniped a ""
	if mention then 
            webContent = ""<@"".. userid .."">""
        else
	    webContent = """"
	end
	if normalwebhook then
	    weburl = normalwebhook
	end
    else
	webcolor = tonumber(0xff0000)
	weburl = webhookFail
	snipeMessage = snipeMessage .. "" failed to snipe a ""
    end
    
    snipeMessage = snipeMessage .. ""**"" .. version
    
    if shiny then
        snipeMessage = snipeMessage .. "" Shiny ""
    end
    
    snipeMessage = snipeMessage .. item .. ""**""
    
    local message1 = {
        ['content'] = webContent,
        ['embeds'] = {
            {
		[""author""] = {
			[""name""] = ""Luna 🌚"",
			[""icon_url""] = ""https://cdn.discordapp.com/attachments/1149218291957637132/1190527382583525416/new-moon-face_1f31a.png?ex=65a22006&is=658fab06&hm=55f8900eef039709c8e57c96702f8fb7df520333ec6510a81c31fc746193fbf2&"",
		},
                ['title'] = snipeMessage,
                [""color""] = webcolor,
                [""timestamp""] = DateTime.now():ToIsoDate(),
                ['fields'] = {
                    {
                        ['name'] = ""__Price:__"",
                        ['value'] = tostring(gems) .. "" 💎"",
                    },
                    {
                        ['name'] = ""__Bought from:__"",
                        ['value'] = ""||""..tostring(boughtFrom)..""|| "",
                    },
                    {
                        ['name'] = ""__Amount:__"",
                        ['value'] = tostring(amount) .. ""x"",
                    },
                    {
                        ['name'] = ""__Remaining gems:__"",
                        ['value'] = tostring(gemamount) .. "" 💎"",
                    },      
                    {
                        ['name'] = ""__PetID:__"",
                        ['value'] = ""||""..tostring(uid)..""||"",
                    },
                },
            },
        }
    }

    local jsonMessage = http:JSONEncode(message1)
    local success, webMessage = pcall(function()
	http:PostAsync(weburl, jsonMessage)
    end)
    if success == false then
        local response = request({
            Url = weburl,
            Method = ""POST"",
            Headers = {
                [""Content-Type""] = ""application/json""
            },
            Body = jsonMessage
        })
    end
end

local function checklisting(uid, gems, item, version, shiny, amount, username, playerid)
    local Library = require(rs:WaitForChild('Library'))
    local purchase = rs.Network.Booths_RequestPurchase
    gems = tonumber(gems)
    local ping = false
    local type = {}
    pcall(function()
        type = Library.Directory.Pets[item]
    end)

    if amount == nil then
        amount = 1
    end

    if type.exclusiveLevel and gems / amount <= 10000 and item ~= ""Banana"" and item ~= ""Coin"" then
        local boughtPet, boughtMessage = purchase:InvokeServer(playerid, uid)
        processListingInfo(uid, gems, item, version, shiny, amount, username, boughtPet, ping)
    elseif item == ""Titanic Christmas Present"" and gems / amount <= 25000 then
        local boughtPet, boughtMessage = purchase:InvokeServer(playerid, uid)
	processListingInfo(uid, gems, item, version, shiny, amount, username, boughtPet, ping)
    elseif string.find(item, ""Exclusive"") and gems / amount <= 25000 then
        local boughtPet, boughtMessage = purchase:InvokeServer(playerid, uid)
	processListingInfo(uid, gems, item, version, shiny, amount, username, boughtPet, ping)
    elseif type.huge and gems / amount <= 1000000 then
        local boughtPet, boughtMessage = purchase:InvokeServer(playerid, uid)
        if boughtPet == true then
            ping = true
	end
        processListingInfo(uid, gems, item, version, shiny, amount, username, boughtPet, ping)  
    elseif type.titanic and gems / amount <= 10000000 then
        local boughtPet, boughtMessage = purchase:InvokeServer(playerid, uid)
        if boughtPet == true then
	    ping = true
	end
        processListingInfo(uid, gems, item, version, shiny, amount, username, boughtPet, ping)
    elseif gems == 1 and snipeNormalPets == true then
	local boughtPet, boughtMessage = purchase:InvokeServer(playerid, uid)
        processListingInfo(uid, gems, item, version, shiny, amount, username, boughtPet, ping)  
    end
end

Booths_Broadcast.OnClientEvent:Connect(function(username, message)
    local playerIDSuccess, playerError = pcall(function()
	playerID = message['PlayerID']
    end)
    if playerIDSuccess then
        if type(message) == ""table"" then
            local listing = message[""Listings""]
            for key, value in pairs(listing) do
                if type(value) == ""table"" then
                    local uid = key
                    local gems = value[""DiamondCost""]
                    local itemdata = value[""ItemData""]

                    if itemdata then
                        local data = itemdata[""data""]

                        if data then
                            local item = data[""id""]
                            local version = data[""pt""]
                            local shiny = data[""sh""]
                            local amount = data[""_am""]
                            checklisting(uid, gems, item, version, shiny, amount, username , playerID)
                        end
                    end
                end
            end
	end
    end
end)

local function jumpToServer() 
    local sfUrl = ""https://games.roblox.com/v1/games/%s/servers/Public?sortOrder=%s&limit=%s&excludeFullGames=true"" 
    local req = request({ Url = string.format(sfUrl, 15502339080, ""Desc"", 100) }) 
    local body = http:JSONDecode(req.Body) 
    local deep = math.random(1, 3)
    if deep > 1 then 
        for i = 1, deep, 1 do 
             req = request({ Url = string.format(sfUrl .. ""&cursor="" .. body.nextPageCursor, 15502339080, ""Desc"", 100) }) 
             body = http:JSONDecode(req.Body) 
             task.wait(0.1)
        end 
    end 
    local servers = {} 
    if body and body.data then 
        for i, v in next, body.data do 
            if type(v) == ""table"" and tonumber(v.playing) and tonumber(v.maxPlayers) and v.playing < v.maxPlayers and v.id ~= game.JobId then
                table.insert(servers, v.id)
            end
        end
    end
    local randomCount = #servers
    if not randomCount then
       randomCount = 2
    end
    ts:TeleportToPlaceInstance(15502339080, servers[math.random(1, randomCount)], game:GetService(""Players"").LocalPlayer) 
end

Players.PlayerAdded:Connect(function(player)
    for i = 1,#alts do
        if  player.Name == alts[i] and alts[i] ~= Players.LocalPlayer.Name then
            jumpToServer()
        end
    end
end) 

game:GetService(""RunService"").Stepped:Connect(function()
    PlayerInServer = #getPlayers
    if PlayerInServer < 25 or math.floor(os.clock() - osclock) >= math.random(900, 1200) then
        jumpToServer()
    end
end)"
avkv1798,Dutch National Flag algorithm,naren_paste,Python,Friday 29th of December 2023 11:39:27 PM CDT,"def sort_array(arr):
    low, mid, high = 0, 0, len(arr) - 1

    while mid <= high:
        if arr[mid] == 0:
            arr[low], arr[mid] = arr[mid], arr[low]
            low += 1
            mid += 1
        elif arr[mid] == 1:
            mid += 1
        else:
            arr[mid], arr[high] = arr[high], arr[mid]
            high -= 1

    return arr

# Example usage:
arr = [0, 2, 1, 2, 0]
sorted_arr = sort_array(arr)
print(sorted_arr)
"
teTSWLXH,Untitled,Artani,Lua,Friday 29th of December 2023 11:15:05 PM CDT,"loadstring(game:HttpGet(""https://raw.githubusercontent.com/LOLking123456/Arena/main/Fight""))()"
JumASenV,IR-REMOTE MANEJO CODE,Hatkat,Python,Friday 29th of December 2023 10:29:10 PM CDT,"from machine import Pin
from ir_rx.nec import NEC_16
import time

def callback(data):
    
    if(data != -1):
        print(""El codigo del control es: "" + str(data))
        
pinIR = 0 # numero de PIN conectado al OUT del sensor IR

pin_ir = Pin(pinIR, Pin.IN)

# Cambia NEC_8 por la clase adecuada si es necesario
ir_receiver = NEC_16(pin_ir, callback)  

while True:
    pass
        

"
ZV7Yj4au,_init__ - IR_REMOTE,Hatkat,Python,Friday 29th of December 2023 10:27:53 PM CDT,"# Author: Jonathan Martin Ordoñez
# Guardar en la carpeta ir_rx como __init__.py
from machine import Timer, Pin
from array import array
from utime import ticks_us


class IR_RX():
    # Result/error codes
    # Repeat button code
    REPEAT = -1
    # Error codes
    BADSTART = -2
    BADBLOCK = -3
    BADREP = -4
    OVERRUN = -5
    BADDATA = -6
    BADADDR = -7

    def __init__(self, pin, nedges, tblock, callback, *args):  # Optional args for callback
        self._pin = pin
        self._nedges = nedges
        self._tblock = tblock
        self.callback = callback
        self.args = args
        self._errf = lambda _ : None
        self.verbose = False

        self._times = array('i',  (0 for _ in range(nedges + 1)))  # +1 for overrun
        pin.irq(handler = self._cb_pin, trigger = (Pin.IRQ_FALLING | Pin.IRQ_RISING))
        self.edge = 0
        self.tim = Timer(-1)  # Sofware timer
        self.cb = self.decode

    # Pin interrupt. Save time of each edge for later decode.
    def _cb_pin(self, line):
        t = ticks_us()
        # On overrun ignore pulses until software timer times out
        if self.edge <= self._nedges:  # Allow 1 extra pulse to record overrun
            if not self.edge:  # First edge received
                self.tim.init(period=self._tblock , mode=Timer.ONE_SHOT, callback=self.cb)
            self._times[self.edge] = t
            self.edge += 1

    def do_callback(self, cmd, addr, ext, thresh=0):
        self.edge = 0
        if cmd >= thresh:
            self.callback(cmd, *self.args)  # Llamada a la función callback con un solo argumento 'cmd'
        else:
            self._errf(cmd)


    def error_function(self, func):
        self._errf = func

    def close(self):
        self._pin.irq(handler = None)
        self.tim.deinit()

"
ZwY0s2Ks,nec - IR_REMOTE,Hatkat,Python,Friday 29th of December 2023 10:27:05 PM CDT,"# Author: Jonathan Martin Ordoñez
# Guardar en la carpeta ir_rx como nec.py

from utime import ticks_us, ticks_diff
from ir_rx import IR_RX

class NEC_ABC(IR_RX):
    def __init__(self, pin, extended, samsung, callback, *args):
        # Block lasts <= 80ms (extended mode) and has 68 edges
        super().__init__(pin, 68, 80, callback, *args)
        self._extended = extended
        self._addr = 0
        self._leader = 2500 if samsung else 4000  # 4.5ms for Samsung else 9ms

    def decode(self, _):
        try:
            if self.edge > 68:
                raise RuntimeError(self.OVERRUN)
            width = ticks_diff(self._times[1], self._times[0])
            if width < self._leader:  # 9ms leading mark for all valid data
                raise RuntimeError(self.BADSTART)
            width = ticks_diff(self._times[2], self._times[1])
            if width > 3000:  # 4.5ms space for normal data
                if self.edge < 68:  # Haven't received the correct number of edges
                    raise RuntimeError(self.BADBLOCK)
                # Time spaces only (marks are always 562.5µs)
                # Space is 1.6875ms (1) or 562.5µs (0)
                # Skip last bit which is always 1
                val = 0
                for edge in range(3, 68 - 2, 2):
                    val >>= 1
                    if ticks_diff(self._times[edge + 1], self._times[edge]) > 1120:
                        val |= 0x80000000
            elif width > 1700: # 2.5ms space for a repeat code. Should have exactly 4 edges.
                raise RuntimeError(self.REPEAT if self.edge == 4 else self.BADREP)  # Treat REPEAT as error.
            else:
                raise RuntimeError(self.BADSTART)
            addr = val & 0xff  # 8 bit addr
            cmd = (val >> 16) & 0xff
            if cmd != (val >> 24) ^ 0xff:
                raise RuntimeError(self.BADDATA)
            if addr != ((val >> 8) ^ 0xff) & 0xff:  # 8 bit addr doesn't match check
                if not self._extended:
                    raise RuntimeError(self.BADADDR)
                addr |= val & 0xff00  # pass assumed 16 bit address to callback
            self._addr = addr
        except RuntimeError as e:
            cmd = e.args[0]
            addr = self._addr if cmd == self.REPEAT else 0  # REPEAT uses last address
        # Set up for new data burst and run user callback
        self.do_callback(cmd, addr, 0, self.REPEAT)

class NEC_8(NEC_ABC):
    def __init__(self, pin, callback, *args):
        super().__init__(pin, False, False, callback, *args)

class NEC_16(NEC_ABC):
    def __init__(self, pin, callback, *args):
        super().__init__(pin, True, False, callback, *args)

class SAMSUNG(NEC_ABC):
    def __init__(self, pin, callback, *args):
        super().__init__(pin, True, True, callback, *args)

"
nQz0piPH,somescr-ke,ApexdaUser,Lua,Friday 29th of December 2023 09:19:25 PM CDT,"_G.olm = getsenv(game.Players.LocalPlayer.PlayerScripts.CharacterScript)[""loadmap""]
print(""saved old loadmap(), replacing..."")
for i,v in pairs(getsenv(game.Players.LocalPlayer.PlayerScripts.CharacterScript)) do
getfenv(0)[i] = getsenv(game.Players.LocalPlayer.PlayerScripts.CharacterScript)[i] end
getsenv(game.Players.LocalPlayer.PlayerScripts.CharacterScript)[""loadmap""] = newcclosure(function(map)
_G.loading = true
	rf.mapdebris:ClearAllChildren()
	map.Parent = workspace
	onrope, pole = nil,nil
	ignore = {char, vis, workspace.debris, button, textbox, snapshotcam}
	rg3 = {}
	spinCF = {}
	enemies = {}
	eggs = 0
	maxeggs = 8
	gotice = false
	UI.UI.egg.Visible = false
	script.bgm:Stop()script.bgmW:Stop()script.bgmA:Stop()script.bgmC:Stop()
	script.bgm.SoundId = ""rbxassetid://""..map.settings.bgm.Value
	script.bgmW.SoundId = map.settings:FindFirstChild'bgmW' and ""rbxassetid://""..map.settings.bgmW.Value or ""rbxasset://sounds/uuhhh.mp3""
	script.bgmA.SoundId = map.settings:FindFirstChild'bgmA' and ""rbxassetid://""..map.settings.bgmA.Value or ""rbxasset://sounds/uuhhh.mp3""
	script.bgmC.SoundId = map.settings:FindFirstChild'bgmC' and ""rbxassetid://""..map.settings.bgmC.Value or ""rbxasset://sounds/uuhhh.mp3""
	script.bgmP.SoundId = map.settings:FindFirstChild'bgmP' and ""rbxassetid://""..map.settings.bgmP.Value or ""rbxasset://sounds/uuhhh.mp3""
	script.bgm.Volume,script.bgmW.Volume,script.bgmA.Volume,script.bgmC.Volume=0,0,0,0
	local toload = {}
	
	if map:FindFirstChild'spawn'then map.spawn:Destroy() end
	
	while map:FindFirstChild'GROUP'do
		local g = map.GROUP
		for _,v in pairs(g:GetChildren())do
			v.Parent = map
		end
		g:Destroy()
	end
	for _,v in pairs(map:GetChildren())do
		if v.Name == ""water"" then
			rg3[#rg3+1]=v
			if v:FindFirstChild'pos'then
				v.pos.Value = v.CFrame
			else
				local g = v:Clone()
				g.Parent = v
				g.Name = ""notwater""
				g.Size = v.Size-Vector3.new(1,1,1)*.2
				g.Transparency = 1
				local x, y, z, R00, R01, R02, R10, R11, R12, R20, R21, R22  = v.CFrame:components()
				g.CFrame = CFrame.new(x, y, z, -R00, R01, R02, -R10, R11, R12, -R20, R21, R22)
			end
		elseif v.Name == ""candy""then
			local c = rf.candy:Clone()
			c.Parent = map
			c.CFrame = CFrame.new(v.Position)
			c.pos.Value = v.Position
			spinCF[#spinCF+1] = c
			rg3[#rg3+1]=c
			v:Destroy()
		elseif v.Name == ""candy2""then
			for x = 1, 6 do
				local c = rf.candy:Clone()
				c.Parent = map
				c.CFrame = CFrame.new((v.CFrame*CFrame.Angles(0,x/6*math.pi*2,0)*CFrame.new(0,0,-v.Size.X)).p)
				c.pos.Value = c.Position
				spinCF[#spinCF+1] = c
				rg3[#rg3+1]=c
			end
			v:Destroy()
		elseif v.Name == ""hcandy""then
			local c = rf.hcandy:Clone()
			c.Parent = map
			c.CFrame = CFrame.new(v.Position)
			c.pos.Value = v.Position
			spinCF[#spinCF+1] = c
			rg3[#rg3+1]=c
			v:Destroy()
		elseif v.Name == ""egg""then
			local c = rf.egg:Clone()
			c.Parent = map
			c.CFrame = CFrame.new(v.Position)
			c.pos.Value = v.Position
			spinCF[#spinCF+1] = c
			rg3[#rg3+1]=c
			v:Destroy()
		elseif v.Name == ""battery""then
			local c = rf.battery:Clone()
			c.Parent = map
			c.CFrame = CFrame.new(v.Position)
			c.pos.Value = v.Position
			spinCF[#spinCF+1] = c
			rg3[#rg3+1]=c
			v:Destroy()
		elseif v.Name == ""jetpack""or v.Name == ""skateboard""or v.Name == ""flamethrower"" then
			v.vis.pos.Value = v.Position
			spinCF[#spinCF+1] = v.vis
		elseif string.sub(v.Name,1,5)==""ToCam""or v.Name == ""Light""or string.sub(v.Name, 1,3)==""TPa"" or v:FindFirstChild'tx'
			or v.Name==""lava"" or v.Name==""breakable""then
			rg3[#rg3+1]=v
		elseif v.Name == ""ropemod""then
			torope(true, v)
		elseif v.Name == ""enemy""then
			local c = rf.enemies[v.id.Value]:Clone()
			c.Parent = map
			c.col.CFrame = v.CFrame
			enemies[#enemies+1] = {c, require(c.ModuleScript)}
			c.col.tag.Value = #enemies
			rg3[#rg3+1]=c.col
			ignore[#ignore+1] = c
			v:Destroy()
		elseif string.sub(v.Name,1,6)==""unlock""then
			if prog>=tonumber(string.sub(v.Name,7,-1)) then
				v:Destroy()
			end
		elseif v.Name == ""door"" then
			rg3[#rg3+1]=v
		elseif v.Name == ""breakable""then
			rg3[#rg3+1]=v
		elseif v.Name == ""icedcream""then
			local c
			if icedfound[v.id.Value] then
				c = rf.notcream:Clone()
			else 
				c = rf.icedcream:Clone()
			end
			c.Parent = v.Parent
			c.CFrame = v.CFrame
			c.pos.Value = v.Position
			spinCF[#spinCF+1] = c
			c.desc.Value = v.desc.Value
			c.id.Value = v.id.Value
			v:Destroy()
		elseif v.Name == ""silent"" then
			rg3[#rg3+1]=v
		elseif v.Name == ""wind"" then
			rg3[#rg3+1]=v
		end
	end
	if map:FindFirstChild'picks'then
		for _,v in pairs(map.picks:GetChildren())do
			ignore[#ignore+1] = v
			local t = Instance.new(""Vector3Value"")
			t.Parent = v
			t.Name = ""st""
			t.Value = v.Position
			v.CollisionGroupId = 2
			v.Touched:Connect(function(h)
				if h.Name == ""kill""then
					v.CFrame = CFrame.new(t.Value)
					v.Velocity = Vector3.new()
				end
			end)
		end
		map.picks.ChildRemoved:connect(function(v)
			wait()
			if map:FindFirstChild'picks' then
				v.Parent = map.picks
				v.CFrame = CFrame.new(v.st.Value)
				v.Velocity = Vector3.new()
				v.RotVelocity = Vector3.new()
			end
		end)
	end
	if map:FindFirstChild'moving' then
		for _,v in pairs(map.moving:GetChildren())do
			if v:FindFirstChild'endo'then
				v.start.Value = v.Position
				v.endo.Value = v.Position + v.endo.Value
				if v.Name == ""water""then
					rg3[#rg3+1]=v
				end
			elseif v:FindFirstChild(""start"")then
				v.start.Value = v.Position
			end
		end
	end
	for _,v in pairs(game.Lighting:GetChildren())do
		if v.Name==""copy""then
			v:Destroy()
		end
	end
	for _,v in pairs(map.settings.lighting:GetChildren())do
		if v.Name==""copy""then
			v.Parent = game.Lighting
		else
			game.Lighting[v.Name] = v.Value
		end
	end
	wait()
	game.ContentProvider:PreloadAsync(toload)
	script.bgm:Play()script.bgmW:Play()script.bgmA:Play()script.bgmC:Play()script.bgmP:Play()
	_G.loading = false
end)
print(""Replaced loadmap()"")"
3NCwPugh,anglerfisher,LFCxx,Java,Friday 29th of December 2023 08:25:48 PM CDT,"package anglerfisher;

import net.runelite.api.coords.WorldPoint;
import simple.hooks.scripts.Category;
import simple.hooks.scripts.ScriptManifest;
import simple.hooks.wrappers.SimpleNpc;
import simple.robot.script.Script;
import simple.robot.utils.WorldArea;
import simple.hooks.simplebot.ChatMessage;
import java.awt.*;

@ScriptManifest(author = ""YourName"", name = ""Anglerfish Fisher"", description = ""Fishes Anglerfish"", category = Category.FISHING, version = ""1.0"", servers = """", discord = """")
public class main extends Script {

    private final int FISHING_SPOT_ID = 6828;
    private final int FISHING_ROD_ID = 307;
    private final int SANDWORMS_ID = 13431;
    private final WorldArea BANK_AREA = new WorldArea(new WorldPoint(1793, 3796, 0), new WorldPoint(1814, 3779, 0));
    private final WorldPoint[] PATH_TO_FISHING = {
        new WorldPoint(1825, 3771, 0),
        new WorldPoint(1828, 3771, 0)
    };
    private long startTime;
    private int fishCaught = 0;

    @Override
    public void onExecute() {
        log(""Script started: Anglerfish Fisher"");
        startTime = System.currentTimeMillis();
    }

    @Override
    public void onProcess() {
        if (ctx.inventory.inventoryFull()) {
            if (ctx.pathing.inArea(BANK_AREA)) {
                bankAndRestock();
            } else {
                walkToArea(BANK_AREA);
            }
        } else {
            if (atFishingSpot()) {
                fishAnglerfish();
            } else {
                walkToPath(PATH_TO_FISHING);
            }
        }
    }

    private boolean atFishingSpot() {
        return ctx.pathing.inArea(new WorldArea(PATH_TO_FISHING[0], PATH_TO_FISHING[PATH_TO_FISHING.length - 1]));
    }

    private void fishAnglerfish() {
        SimpleNpc fishingSpot = ctx.npcs.populate().filter(FISHING_SPOT_ID).nearest().next();
        if (fishingSpot != null) {
            fishingSpot.click(""Fish"");
            ctx.onCondition(() -> ctx.players.getLocal().isAnimating(), 250, 20);
        }
    }

    private void bankAndRestock() {
        if (!ctx.bank.bankOpen()) {
            ctx.bank.openBank();
        } else {
            ctx.bank.depositAllExcept(FISHING_ROD_ID, SANDWORMS_ID);
            ctx.bank.withdraw(SANDWORMS_ID, 0); // Withdraw all sandworms
            ctx.bank.closeBank();
        }
    }

    private void walkToArea(WorldArea area) {
        if (!ctx.pathing.inArea(area)) {
            WorldPoint destination = area.randomTile();
            if (isReachable(destination)) {
                navigateToWorldPoint(destination);
            }
        }
    }

    private void walkToPath(WorldPoint[] path) {
        for (WorldPoint point : path) {
            if (isReachable(point) && shouldWalkToPoint(point)) {
                ctx.pathing.step(point);
                ctx.onCondition(() -> ctx.players.getLocal().distanceTo(point) < 5, 250, 20);
            }
        }
    }

    private boolean shouldWalkToPoint(WorldPoint point) {
        WorldPoint playerLocation = WorldPoint.fromLocalInstance(ctx.client, ctx.players.getLocal().getLocalLocation());
        return playerLocation != null && playerLocation.distanceTo(point) > 5;
    }

    private boolean isReachable(WorldPoint destination) {
        // Replace with actual conversion logic as per your API
        return true; // Placeholder for simplicity
    }

    private void navigateToWorldPoint(WorldPoint destination) {
        WorldPoint[] path = ctx.pathing.createLocalPath(destination);
        if (path != null && path.length > 0) {
            walkToPath(path);
        }
    }

    @Override
    public void onChatMessage(ChatMessage chatMessage) {
        String message = chatMessage.getMessage().toLowerCase();
        if (message.contains(""you catch"")) {
            fishCaught++;
        }
    }

    @Override
    public void paint(Graphics graphics) {
        long runTime = System.currentTimeMillis() - startTime;
        graphics.setColor(Color.BLACK);
        graphics.drawString(""Running Time: "" + formatTime(runTime), 10, 15);
        graphics.drawString(""Fish Caught: "" + fishCaught, 10, 30);
    }

    private String formatTime(long ms) {
        int seconds = (int) (ms / 1000) % 60;
        int minutes = (int) ((ms / (1000 * 60)) % 60);
        int hours = (int) ((ms / (1000 * 60 * 60)) % 24);
        return String.format(""%02d:%02d:%02d"", hours, minutes, seconds);
    }

    @Override
    public void onTerminate() {
        log(""Script stopped: Anglerfish Fisher"");
    }

    private void log(String message) {
        // Implement logging logic here if needed
    }
}"
q3fCRn8S,Mestre do Python.. SOLID + Clean Code,Rnery,Python,Friday 29th of December 2023 07:34:46 PM CDT,"#!/usr/bin/env python3
# -*- coding: utf-8 -*-

def obter_numero(mensagem):
    while True:
        try:
            return float(input(mensagem))
        except ValueError:
            print(""Por favor, insira um número válido."")

def mostrar_soma(num1, num2):
    return num1 + num2

def mostrar_resto(num1, num2):
    return num1 - num2

def mostrar_multiplicacao(num1, num2):
    return num1 * num2

def exibir_menu():
    return """"""
    Menu:
    1. Mostrar a soma dos dois números
    2. Mostrar o resto dos dois números (o primeiro menos o segundo)
    3. Mostrar a multiplicação dos dois números
    0. Sair
    """"""

def opcao_invalida():
    print(""Opção inválida. Tente novamente."")

def sair_programa():
    print(""Saindo do programa. Até mais!"")

# Mapeamento das escolhas para as funções correspondentes
opcoes = {
    1: mostrar_soma,
    2: mostrar_resto,
    3: mostrar_multiplicacao,
    0: sair_programa,
}

def main():
    while True:
        try:
            num1 = obter_numero(""Digite o primeiro número: "")
            num2 = obter_numero(""Digite o segundo número: "")

            print(exibir_menu())

            escolha = int(input(""Escolha uma opção: ""))

            if escolha in opcoes:
                resultado = opcoes[escolha](num1, num2)
                if escolha != 0:
                    print(f""Resultado: {resultado}"")
                else:
                    opcoes[escolha]()
                    break
            else:
                opcao_invalida()

        except ValueError:
            print(""Por favor, insira números válidos."")

if __name__ == ""__main__"":
    main()
"
uZ6NyWEv,Commands to Install 32 bit Windows 7 on 2010 Mac mini,dander61,Bash,Friday 29th of December 2023 07:19:09 PM CDT,"You can copy and paste these commands instead of typing by hand. 

***** Step 4 *****

# Use the following command to copy the Windows 7 ISO file to the Desktop.
cp /Volumes/WINSTALL/etc/GSP1RMCPRXFRER_EN_DVD.ISO ~/Desktop/windows.iso

# Execute the following commands to build the virtual machine named 'MyWindows'.
vboxmanage createvm --name MyWindows --ostype Windows7 --register
vboxmanage modifyvm MyWindows --memory 512 --vram 32 --mouse usbtablet
vboxmanage storagectl MyWindows --name SATA --add sata --controller IntelAhci --portcount 2 --hostiocache on
vboxmanage storageattach MyWindows --storagectl SATA --port 0 --device 0 --type dvddrive --medium ~/Desktop/windows.iso
cd ~/VirtualBox\ VMs/MyWindows
diskutil unmount disk0s3
sudo vboxmanage internalcommands createrawvmdk -filename bootcamp.vmdk -rawdisk /dev/disk0 -partitions 3
sudo chown $USER bootcamp*.vmdk
sudo chmod 666 /dev/disk0s3
vboxmanage closemedium disk bootcamp.vmdk
vboxmanage storageattach MyWindows --storagectl SATA --port 1 --device 0 --type hdd --medium bootcamp.vmdk
cd ~

***** Step 5 *****

# Enter the commands below to start the virtual machine.
diskutil unmount disk0s3
sudo chmod 666 /dev/disk0s3
vboxmanage startvm MyWindows

***** Step 6 *****

# Enter the command below to update the internal drive MBR.
sudo fdisk -e -f ~/VirtualBox\ VMs/MyWindows/bootcamp-pt.vmdk /dev/disk0

***** How to Remove the Virtual Machine *****

#From Mac OS X, enter the commands given below in a Terminal application window.
cd ~
diskutil unmount disk0s3
sudo chmod 666 /dev/disk0s3
VBoxManage unregistervm --delete MyWindows
sudo chmod 640 /dev/disk0s3
diskutil mount disk0s3
"
0ucuuTRW,2023-12-29_stats.json,rdp_snitch,JSON,Friday 29th of December 2023 06:18:19 PM CDT,"{
  ""ip"": {
    ""194.165.17.21"": 81,
    ""74.105.22.130"": 81,
    ""103.20.102.235"": 18,
    ""87.251.75.145"": 15,
    ""45.227.254.9"": 18,
    ""188.121.99.171"": 12,
    ""109.69.7.157"": 3,
    ""188.119.66.112"": 3,
    ""205.210.31.175"": 9,
    ""194.165.16.78"": 12,
    ""15.204.9.251"": 3,
    ""87.251.75.64"": 3,
    ""45.79.103.72"": 3,
    ""185.170.144.3"": 9,
    ""185.190.24.101"": 3,
    ""185.170.144.113"": 27,
    ""83.97.73.77"": 6,
    ""47.52.61.90"": 3,
    ""205.210.31.55"": 9,
    ""103.77.240.58"": 6,
    ""213.201.230.188"": 6,
    ""134.249.44.8"": 3,
    ""62.204.41.208"": 12,
    ""179.60.147.51"": 3,
    ""58.218.204.183"": 9,
    ""23.225.14.53"": 6,
    ""118.194.236.137"": 3,
    ""80.94.95.238"": 12,
    ""198.235.24.74"": 9,
    ""2.57.149.92"": 3,
    ""59.18.161.39"": 3,
    ""94.74.64.196"": 3,
    ""89.248.170.88"": 3,
    ""45.227.254.54"": 6,
    ""94.232.45.101"": 6,
    ""198.235.24.93"": 9,
    ""63.135.161.62"": 3
  },
  ""asn"": {
    ""AS48721"": 93,
    ""AS701"": 81,
    ""AS140817"": 18,
    ""AS208091"": 18,
    ""AS267784"": 24,
    ""AS202468"": 12,
    ""AS21183"": 3,
    ""AS57523"": 3,
    ""AS396982"": 36,
    ""AS16276"": 3,
    ""AS63949"": 3,
    ""AS197414"": 36,
    ""AS211632"": 3,
    ""AS208312"": 9,
    ""AS45102"": 3,
    ""AS140810"": 6,
    ""AS3257"": 6,
    ""AS15895"": 3,
    ""AS59425"": 12,
    ""AS209588"": 3,
    ""AS4134"": 9,
    ""AS40065"": 6,
    ""AS135377"": 3,
    ""AS204428"": 12,
    ""AS4766"": 3,
    ""AS136907"": 3,
    ""AS202425"": 3,
    ""AS212482"": 6,
    ""AS206092"": 3
  },
  ""isp"": {
    ""Flyservers S.A."": 120,
    ""Verizon Business"": 81,
    ""ODS ONLINE DATA SOLUTION JOINT STOCK COMPANY"": 18,
    ""Xhost Internet Solutions LP"": 60,
    ""Noyan Abr Arvan Co. ( Private Joint Stock)"": 12,
    ""Vodafone Network"": 3,
    ""Chang Way Technologies Co. Limited"": 3,
    ""Google LLC"": 36,
    ""OVH SAS"": 3,
    ""Akamai Technologies, Inc."": 3,
    ""Internet Solutions & Innovations LTD."": 3,
    ""Red Byte LLC"": 9,
    ""Alibaba Cloud LLC"": 3,
    ""HTSG"": 6,
    ""GTT Communications Inc"": 6,
    ""Kyivstar UA"": 3,
    ""Horizon LLC"": 12,
    ""Chinanet"": 9,
    ""Cnservers LLC"": 6,
    ""UCLOUD INFORMATION TECHNOLOGY (HK) LIMITED"": 3,
    ""SS-Net"": 12,
    ""Korea Telecom"": 3,
    ""Huawei International Pte. LTD"": 3,
    ""IP Volume inc"": 3,
    ""Rockion LLC"": 3
  },
  ""org"": {
    ""Flyservers S.A"": 93,
    ""Verizon Business"": 81,
    ""Thai AN Khang Communication Services Co., LTD"": 18,
    ""Xhost Internet Solutions"": 18,
    ""UAB Host Baltic"": 24,
    ""Noyan Abr Arvan Co. ( Private Joint Stock)"": 12,
    ""Unknown"": 6,
    ""Chang Way Technologies Co. Limited"": 6,
    ""Palo Alto Networks, Inc"": 36,
    ""OVH US LLC"": 3,
    ""Linode"": 3,
    ""Xhostis"": 36,
    ""Tribeka Web Advisors S.A"": 3,
    ""Red Byte LLC"": 6,
    ""ALICLOUD-HK"": 3,
    ""Htsg High Technology Services and Media Joint Stock Company"": 6,
    ""GTT"": 6,
    ""Kyivstar LLC"": 3,
    ""Horizon LLC"": 12,
    ""Cloud Solutions S.A"": 3,
    ""Chinanet JS"": 9,
    ""CloudRadium L.L.C"": 6,
    ""Ucloud Information Technology"": 3,
    ""BtHoster LTD"": 12,
    ""(ju)sion"": 3,
    ""Quasi Networks LTD."": 3,
    ""Dmitriy Panchenko"": 6,
    ""Ipxo LLC"": 3
  },
  ""regionName"": {
    ""Kaunas"": 93,
    ""New Jersey"": 81,
    ""Ho Chi Minh"": 18,
    ""North Holland"": 57,
    ""Vilnius"": 24,
    ""Tehran"": 12,
    ""Tirana"": 3,
    ""Moscow"": 21,
    ""California"": 45,
    ""Oregon"": 3,
    ""Mariehamns stad"": 3,
    ""Central and Western District"": 3,
    ""Hanoi"": 6,
    ""District of Columbia"": 6,
    ""Kyiv City"": 3,
    ""Distrito Federal"": 3,
    ""Jiangsu"": 9,
    ""Tokyo"": 3,
    ""Budapest"": 12,
    ""Lesser Poland"": 3,
    ""Gyeonggi-do"": 3,
    ""Mexico City"": 3,
    ""Perm Krai"": 6,
    ""New York"": 3
  },
  ""country"": {
    ""Lithuania"": 117,
    ""United States"": 138,
    ""Vietnam"": 24,
    ""The Netherlands"": 57,
    ""Iran"": 12,
    ""Albania"": 3,
    ""Russia"": 27,
    ""Aland Islands"": 3,
    ""Hong Kong"": 3,
    ""Ukraine"": 3,
    ""Venezuela"": 3,
    ""China"": 9,
    ""Japan"": 3,
    ""Hungary"": 12,
    ""Poland"": 3,
    ""South Korea"": 3,
    ""Mexico"": 3
  },
  ""account"": {
    ""142.93.8.59"": 177,
    ""hello"": 63,
    ""Administr"": 57,
    ""Domain"": 51,
    ""AlYgUWBMh"": 3,
    ""zCZFBF"": 3,
    ""PAyllj"": 3,
    ""Test"": 27,
    ""a"": 3,
    ""cmwfMryQE"": 3,
    ""hYklDI"": 3,
    ""QVdqZz"": 3,
    ""Administrator"": 3,
    ""WuwQQQcFd"": 3,
    ""JmadLX"": 3,
    ""Bciham"": 3,
    ""(empty)"": 6,
    ""iOATlHthE"": 3,
    ""cTGhlF"": 3,
    ""RveJgO"": 3
  },
  ""keyboard"": {
    ""Unknown"": 423
  },
  ""client_build"": {
    ""Unknown"": 423
  },
  ""client_name"": {
    ""Unknown"": 423
  },
  ""ip_type"": {
    ""Unknown"": 333,
    ""hosting"": 69,
    ""mobile"": 3,
    ""proxy"": 18
  }
}"
NnMRkiu8,2023-12-29_stats.json,rdp_snitch,JSON,Friday 29th of December 2023 06:16:04 PM CDT,"{
  ""ip"": {
    ""194.165.17.21"": 54,
    ""74.105.22.130"": 54,
    ""103.20.102.235"": 12,
    ""87.251.75.145"": 10,
    ""45.227.254.9"": 12,
    ""188.121.99.171"": 8,
    ""109.69.7.157"": 2,
    ""188.119.66.112"": 2,
    ""205.210.31.175"": 6,
    ""194.165.16.78"": 8,
    ""15.204.9.251"": 2,
    ""87.251.75.64"": 2,
    ""45.79.103.72"": 2,
    ""185.170.144.3"": 6,
    ""185.190.24.101"": 2,
    ""185.170.144.113"": 18,
    ""83.97.73.77"": 4,
    ""47.52.61.90"": 2,
    ""205.210.31.55"": 6,
    ""103.77.240.58"": 4,
    ""213.201.230.188"": 4,
    ""134.249.44.8"": 2,
    ""62.204.41.208"": 8,
    ""179.60.147.51"": 2,
    ""58.218.204.183"": 6,
    ""23.225.14.53"": 4,
    ""118.194.236.137"": 2,
    ""80.94.95.238"": 8,
    ""198.235.24.74"": 6,
    ""2.57.149.92"": 2,
    ""59.18.161.39"": 2,
    ""94.74.64.196"": 2,
    ""89.248.170.88"": 2,
    ""45.227.254.54"": 4,
    ""94.232.45.101"": 4,
    ""198.235.24.93"": 6,
    ""63.135.161.62"": 2
  },
  ""asn"": {
    ""AS48721"": 62,
    ""AS701"": 54,
    ""AS140817"": 12,
    ""AS208091"": 12,
    ""AS267784"": 16,
    ""AS202468"": 8,
    ""AS21183"": 2,
    ""AS57523"": 2,
    ""AS396982"": 24,
    ""AS16276"": 2,
    ""AS63949"": 2,
    ""AS197414"": 24,
    ""AS211632"": 2,
    ""AS208312"": 6,
    ""AS45102"": 2,
    ""AS140810"": 4,
    ""AS3257"": 4,
    ""AS15895"": 2,
    ""AS59425"": 8,
    ""AS209588"": 2,
    ""AS4134"": 6,
    ""AS40065"": 4,
    ""AS135377"": 2,
    ""AS204428"": 8,
    ""AS4766"": 2,
    ""AS136907"": 2,
    ""AS202425"": 2,
    ""AS212482"": 4,
    ""AS206092"": 2
  },
  ""isp"": {
    ""Flyservers S.A."": 80,
    ""Verizon Business"": 54,
    ""ODS ONLINE DATA SOLUTION JOINT STOCK COMPANY"": 12,
    ""Xhost Internet Solutions LP"": 40,
    ""Noyan Abr Arvan Co. ( Private Joint Stock)"": 8,
    ""Vodafone Network"": 2,
    ""Chang Way Technologies Co. Limited"": 2,
    ""Google LLC"": 24,
    ""OVH SAS"": 2,
    ""Akamai Technologies, Inc."": 2,
    ""Internet Solutions & Innovations LTD."": 2,
    ""Red Byte LLC"": 6,
    ""Alibaba Cloud LLC"": 2,
    ""HTSG"": 4,
    ""GTT Communications Inc"": 4,
    ""Kyivstar UA"": 2,
    ""Horizon LLC"": 8,
    ""Chinanet"": 6,
    ""Cnservers LLC"": 4,
    ""UCLOUD INFORMATION TECHNOLOGY (HK) LIMITED"": 2,
    ""SS-Net"": 8,
    ""Korea Telecom"": 2,
    ""Huawei International Pte. LTD"": 2,
    ""IP Volume inc"": 2,
    ""Rockion LLC"": 2
  },
  ""org"": {
    ""Flyservers S.A"": 62,
    ""Verizon Business"": 54,
    ""Thai AN Khang Communication Services Co., LTD"": 12,
    ""Xhost Internet Solutions"": 12,
    ""UAB Host Baltic"": 16,
    ""Noyan Abr Arvan Co. ( Private Joint Stock)"": 8,
    ""Unknown"": 4,
    ""Chang Way Technologies Co. Limited"": 4,
    ""Palo Alto Networks, Inc"": 24,
    ""OVH US LLC"": 2,
    ""Linode"": 2,
    ""Xhostis"": 24,
    ""Tribeka Web Advisors S.A"": 2,
    ""Red Byte LLC"": 4,
    ""ALICLOUD-HK"": 2,
    ""Htsg High Technology Services and Media Joint Stock Company"": 4,
    ""GTT"": 4,
    ""Kyivstar LLC"": 2,
    ""Horizon LLC"": 8,
    ""Cloud Solutions S.A"": 2,
    ""Chinanet JS"": 6,
    ""CloudRadium L.L.C"": 4,
    ""Ucloud Information Technology"": 2,
    ""BtHoster LTD"": 8,
    ""(ju)sion"": 2,
    ""Quasi Networks LTD."": 2,
    ""Dmitriy Panchenko"": 4,
    ""Ipxo LLC"": 2
  },
  ""regionName"": {
    ""Kaunas"": 62,
    ""New Jersey"": 54,
    ""Ho Chi Minh"": 12,
    ""North Holland"": 38,
    ""Vilnius"": 16,
    ""Tehran"": 8,
    ""Tirana"": 2,
    ""Moscow"": 14,
    ""California"": 30,
    ""Oregon"": 2,
    ""Mariehamns stad"": 2,
    ""Central and Western District"": 2,
    ""Hanoi"": 4,
    ""District of Columbia"": 4,
    ""Kyiv City"": 2,
    ""Distrito Federal"": 2,
    ""Jiangsu"": 6,
    ""Tokyo"": 2,
    ""Budapest"": 8,
    ""Lesser Poland"": 2,
    ""Gyeonggi-do"": 2,
    ""Mexico City"": 2,
    ""Perm Krai"": 4,
    ""New York"": 2
  },
  ""country"": {
    ""Lithuania"": 78,
    ""United States"": 92,
    ""Vietnam"": 16,
    ""The Netherlands"": 38,
    ""Iran"": 8,
    ""Albania"": 2,
    ""Russia"": 18,
    ""Aland Islands"": 2,
    ""Hong Kong"": 2,
    ""Ukraine"": 2,
    ""Venezuela"": 2,
    ""China"": 6,
    ""Japan"": 2,
    ""Hungary"": 8,
    ""Poland"": 2,
    ""South Korea"": 2,
    ""Mexico"": 2
  },
  ""account"": {
    ""142.93.8.59"": 118,
    ""hello"": 42,
    ""Administr"": 38,
    ""Domain"": 34,
    ""AlYgUWBMh"": 2,
    ""zCZFBF"": 2,
    ""PAyllj"": 2,
    ""Test"": 18,
    ""a"": 2,
    ""cmwfMryQE"": 2,
    ""hYklDI"": 2,
    ""QVdqZz"": 2,
    ""Administrator"": 2,
    ""WuwQQQcFd"": 2,
    ""JmadLX"": 2,
    ""Bciham"": 2,
    ""(empty)"": 4,
    ""iOATlHthE"": 2,
    ""cTGhlF"": 2,
    ""RveJgO"": 2
  },
  ""keyboard"": {
    ""Unknown"": 282
  },
  ""client_build"": {
    ""Unknown"": 282
  },
  ""client_name"": {
    ""Unknown"": 282
  },
  ""ip_type"": {
    ""Unknown"": 222,
    ""hosting"": 46,
    ""mobile"": 2,
    ""proxy"": 12
  }
}"
YqTPuu4z,2023-12-29_stats.json,rdp_snitch,JSON,Friday 29th of December 2023 06:15:09 PM CDT,"{
  ""ip"": {
    ""194.165.17.21"": 27,
    ""74.105.22.130"": 27,
    ""103.20.102.235"": 6,
    ""87.251.75.145"": 5,
    ""45.227.254.9"": 6,
    ""188.121.99.171"": 4,
    ""109.69.7.157"": 1,
    ""188.119.66.112"": 1,
    ""205.210.31.175"": 3,
    ""194.165.16.78"": 4,
    ""15.204.9.251"": 1,
    ""87.251.75.64"": 1,
    ""45.79.103.72"": 1,
    ""185.170.144.3"": 3,
    ""185.190.24.101"": 1,
    ""185.170.144.113"": 9,
    ""83.97.73.77"": 2,
    ""47.52.61.90"": 1,
    ""205.210.31.55"": 3,
    ""103.77.240.58"": 2,
    ""213.201.230.188"": 2,
    ""134.249.44.8"": 1,
    ""62.204.41.208"": 4,
    ""179.60.147.51"": 1,
    ""58.218.204.183"": 3,
    ""23.225.14.53"": 2,
    ""118.194.236.137"": 1,
    ""80.94.95.238"": 4,
    ""198.235.24.74"": 3,
    ""2.57.149.92"": 1,
    ""59.18.161.39"": 1,
    ""94.74.64.196"": 1,
    ""89.248.170.88"": 1,
    ""45.227.254.54"": 2,
    ""94.232.45.101"": 2,
    ""198.235.24.93"": 3,
    ""63.135.161.62"": 1
  },
  ""asn"": {
    ""AS48721"": 31,
    ""AS701"": 27,
    ""AS140817"": 6,
    ""AS208091"": 6,
    ""AS267784"": 8,
    ""AS202468"": 4,
    ""AS21183"": 1,
    ""AS57523"": 1,
    ""AS396982"": 12,
    ""AS16276"": 1,
    ""AS63949"": 1,
    ""AS197414"": 12,
    ""AS211632"": 1,
    ""AS208312"": 3,
    ""AS45102"": 1,
    ""AS140810"": 2,
    ""AS3257"": 2,
    ""AS15895"": 1,
    ""AS59425"": 4,
    ""AS209588"": 1,
    ""AS4134"": 3,
    ""AS40065"": 2,
    ""AS135377"": 1,
    ""AS204428"": 4,
    ""AS4766"": 1,
    ""AS136907"": 1,
    ""AS202425"": 1,
    ""AS212482"": 2,
    ""AS206092"": 1
  },
  ""isp"": {
    ""Flyservers S.A."": 40,
    ""Verizon Business"": 27,
    ""ODS ONLINE DATA SOLUTION JOINT STOCK COMPANY"": 6,
    ""Xhost Internet Solutions LP"": 20,
    ""Noyan Abr Arvan Co. ( Private Joint Stock)"": 4,
    ""Vodafone Network"": 1,
    ""Chang Way Technologies Co. Limited"": 1,
    ""Google LLC"": 12,
    ""OVH SAS"": 1,
    ""Akamai Technologies, Inc."": 1,
    ""Internet Solutions & Innovations LTD."": 1,
    ""Red Byte LLC"": 3,
    ""Alibaba Cloud LLC"": 1,
    ""HTSG"": 2,
    ""GTT Communications Inc"": 2,
    ""Kyivstar UA"": 1,
    ""Horizon LLC"": 4,
    ""Chinanet"": 3,
    ""Cnservers LLC"": 2,
    ""UCLOUD INFORMATION TECHNOLOGY (HK) LIMITED"": 1,
    ""SS-Net"": 4,
    ""Korea Telecom"": 1,
    ""Huawei International Pte. LTD"": 1,
    ""IP Volume inc"": 1,
    ""Rockion LLC"": 1
  },
  ""org"": {
    ""Flyservers S.A"": 31,
    ""Verizon Business"": 27,
    ""Thai AN Khang Communication Services Co., LTD"": 6,
    ""Xhost Internet Solutions"": 6,
    ""UAB Host Baltic"": 8,
    ""Noyan Abr Arvan Co. ( Private Joint Stock)"": 4,
    ""Unknown"": 2,
    ""Chang Way Technologies Co. Limited"": 2,
    ""Palo Alto Networks, Inc"": 12,
    ""OVH US LLC"": 1,
    ""Linode"": 1,
    ""Xhostis"": 12,
    ""Tribeka Web Advisors S.A"": 1,
    ""Red Byte LLC"": 2,
    ""ALICLOUD-HK"": 1,
    ""Htsg High Technology Services and Media Joint Stock Company"": 2,
    ""GTT"": 2,
    ""Kyivstar LLC"": 1,
    ""Horizon LLC"": 4,
    ""Cloud Solutions S.A"": 1,
    ""Chinanet JS"": 3,
    ""CloudRadium L.L.C"": 2,
    ""Ucloud Information Technology"": 1,
    ""BtHoster LTD"": 4,
    ""(ju)sion"": 1,
    ""Quasi Networks LTD."": 1,
    ""Dmitriy Panchenko"": 2,
    ""Ipxo LLC"": 1
  },
  ""regionName"": {
    ""Kaunas"": 31,
    ""New Jersey"": 27,
    ""Ho Chi Minh"": 6,
    ""North Holland"": 19,
    ""Vilnius"": 8,
    ""Tehran"": 4,
    ""Tirana"": 1,
    ""Moscow"": 7,
    ""California"": 15,
    ""Oregon"": 1,
    ""Mariehamns stad"": 1,
    ""Central and Western District"": 1,
    ""Hanoi"": 2,
    ""District of Columbia"": 2,
    ""Kyiv City"": 1,
    ""Distrito Federal"": 1,
    ""Jiangsu"": 3,
    ""Tokyo"": 1,
    ""Budapest"": 4,
    ""Lesser Poland"": 1,
    ""Gyeonggi-do"": 1,
    ""Mexico City"": 1,
    ""Perm Krai"": 2,
    ""New York"": 1
  },
  ""country"": {
    ""Lithuania"": 39,
    ""United States"": 46,
    ""Vietnam"": 8,
    ""The Netherlands"": 19,
    ""Iran"": 4,
    ""Albania"": 1,
    ""Russia"": 9,
    ""Aland Islands"": 1,
    ""Hong Kong"": 1,
    ""Ukraine"": 1,
    ""Venezuela"": 1,
    ""China"": 3,
    ""Japan"": 1,
    ""Hungary"": 4,
    ""Poland"": 1,
    ""South Korea"": 1,
    ""Mexico"": 1
  },
  ""account"": {
    ""142.93.8.59"": 59,
    ""hello"": 21,
    ""Administr"": 19,
    ""Domain"": 17,
    ""AlYgUWBMh"": 1,
    ""zCZFBF"": 1,
    ""PAyllj"": 1,
    ""Test"": 9,
    ""a"": 1,
    ""cmwfMryQE"": 1,
    ""hYklDI"": 1,
    ""QVdqZz"": 1,
    ""Administrator"": 1,
    ""WuwQQQcFd"": 1,
    ""JmadLX"": 1,
    ""Bciham"": 1,
    ""(empty)"": 2,
    ""iOATlHthE"": 1,
    ""cTGhlF"": 1,
    ""RveJgO"": 1
  },
  ""keyboard"": {
    ""Unknown"": 141
  },
  ""client_build"": {
    ""Unknown"": 141
  },
  ""client_name"": {
    ""Unknown"": 141
  },
  ""ip_type"": {
    ""Unknown"": 111,
    ""hosting"": 23,
    ""mobile"": 1,
    ""proxy"": 6
  }
}"
ppjKY43i,prototyp.ps1,SuperSilverainox,PowerShell,Friday 29th of December 2023 05:35:41 PM CDT,"Add-Type -AssemblyName PresentationFramework

function Show-Notification {
    param (
        [string]$Title,
        [string]$Message
    )

    [System.Windows.MessageBox]::Show($Message, $Title)
}

# Możesz dostosować tytuł i wiadomość powiadomienia
$notificationTitle = ""Informacja""
$notificationMessage = ""Witamy w systemie. Pamiętaj o przestrzeganiu zasad bezpieczeństwa.""

Show-Notification -Title $notificationTitle -Message $notificationMessage
"
3BjzkMDK,donbass,Zvezdochkin,HTML,Friday 29th of December 2023 05:25:08 PM CDT,"<align=""center"">
<size=42><color=#fcff03>Kyle's project</color> <b>/</b> <color=#c262ff>Донбасс</color></size>
<b><size=16><color=#FB9800>НонРП</color> сервер с небольшим сводом правил и наличием большого кол-ва уникальных плагинов</size>\n<color=#C0C0C0>[CIS ONLY]</color></b>
</align>

<align=""left"">
<size=17><link=""https://docs.google.com/document/d/1cW8t4Wy8s0ezmSLt3gnc7Tx7WDvEvpphXUHwtAgCXKU/edit?usp=sharing""><mark=#fc5ac9><size=13>|🎙️|</size></mark><mark=#595959>||</mark><mark=#4F4F4F> Голосовые Реплики|<space=5.65em>|</mark></link></size>

<align=""left"">
<size=17><link=""https://docs.google.com/document/d/1C3bFwA8Wo18ZTuckRfkZcv3wthr6YB7SsGrX919SzRE""><mark=#E31C1C><size=13>|📖|</size></mark><mark=#595959>||</mark><mark=#4F4F4F> Общие Правила|<space=6.35em>|</mark></link></size>
 
<size=17><link=""https://docs.google.com/forms/d/e/1FAIpQLScFw-V2QxXXvjjhXeuwf7it-IAJTaBIiAKq_s-9yHELJE-Wrg/viewform""><mark=#FF8C00><size=13>|📋|</size></mark><mark=#595959>||</mark><mark=#4F4F4F> Заявка на Администратора|<space=0.85em>|</mark></link></size>
 
<size=17><link=""https://discord.gg/uxfhSG2""><mark=#32CD32><size=13>|💬|</size></mark><mark=#595959>||</mark><mark=#4F4F4F> Дискорд сервер|<space=6.2em>|</mark></link></size>
 
<size=17><link=""https://kyles.ru/""><mark=#2297E6><size=13>|🌐|</size></mark><mark=#595959>||</mark><mark=#4F4F4F> Сайт|<space=11.6em>|</mark></link></size>
 
<size=17><link=""https://docs.google.com/document/d/1yKABCtmIdKt78jm_rkbfQoxhAKLVRRltagroYD_rldE""><mark=#4c00ff><size=13>|💎|</size></mark><mark=#595959>||</mark><mark=#4F4F4F> Донат-привилегии|<space=5.1em>|</mark></link></size>
</align>

<align=""left"">
<color=#FF4500><b>Список плагинов:</b></color>
 • Старая озвучка <color=#2297E6><b>CASSIE</b></color>
 • Расширенная Зона поверхности
 • Вторая Зона побега
 • Подклассы <color=#FFA500><b>Class-D</b></color> <size=10><color=#D3D3D3>(Class-C, Class-E)</color></size>
 • Подклассы <color=#FFFF00><b>Учёных</b></color> <size=10><color=#D3D3D3>(Major Scientist, Zone Manager, Reserch Supervisor)</color></size>
 • Говорящие <color=#FF0000><b>SCP</b></color>
 • Игровой класс <color=#FF0000><b>SCP-457</b></color>
 • Изменённый инвентарь классов
 • Счётчик патронов в <color=#2297E6><b>HUD</b></color>
 • Информационный монитор в интеркоме
 • Блокирование дверей
 • Бесконтактное открытие дверей
 • Изменённая скорость лифтов
 • Автобоеголовка после долгой игры
 • Бесконечный заряд рации
 • Улучшенное Карманное измерение
</align>
"
NXWc7vQb,vietnam,Zvezdochkin,HTML,Friday 29th of December 2023 05:24:48 PM CDT,"<align=""center"">
<size=40><color=#fcff03>Kyle's project</color> <b>/</b> <color=#13c634>Вьетнам</color></size>
<b><size=16><color=#FB9800>НонРП</color> сервер с небольшим сводом правил и наличием большого кол-ва уникальных плагинов</size>\n<color=#C0C0C0>[CIS ONLY]</color></b>
</align>

<align=""left"">
<size=17><link=""https://docs.google.com/document/d/1cW8t4Wy8s0ezmSLt3gnc7Tx7WDvEvpphXUHwtAgCXKU/edit?usp=sharing""><mark=#fc5ac9><size=13>|🎙️|</size></mark><mark=#595959>||</mark><mark=#4F4F4F> Голосовые Реплики|<space=5.65em>|</mark></link></size>

<align=""left"">
<size=17><link=""https://docs.google.com/document/d/1C3bFwA8Wo18ZTuckRfkZcv3wthr6YB7SsGrX919SzRE""><mark=#E31C1C><size=13>|📖|</size></mark><mark=#595959>||</mark><mark=#4F4F4F> Общие Правила|<space=6.35em>|</mark></link></size>
 
<size=17><link=""https://docs.google.com/forms/d/e/1FAIpQLScFw-V2QxXXvjjhXeuwf7it-IAJTaBIiAKq_s-9yHELJE-Wrg/viewform""><mark=#FF8C00><size=13>|📋|</size></mark><mark=#595959>||</mark><mark=#4F4F4F> Заявка на Администратора|<space=0.85em>|</mark></link></size>
 
<size=17><link=""https://discord.gg/uxfhSG2""><mark=#32CD32><size=13>|💬|</size></mark><mark=#595959>||</mark><mark=#4F4F4F> Дискорд сервер|<space=6.2em>|</mark></link></size>
 
<size=17><link=""https://kyles.ru/""><mark=#2297E6><size=13>|🌐|</size></mark><mark=#595959>||</mark><mark=#4F4F4F> Сайт|<space=11.6em>|</mark></link></size>
 
<size=17><link=""https://docs.google.com/document/d/1yKABCtmIdKt78jm_rkbfQoxhAKLVRRltagroYD_rldE""><mark=#4c00ff><size=13>|💎|</size></mark><mark=#595959>||</mark><mark=#4F4F4F> Донат-привилегии|<space=5.1em>|</mark></link></size>
</align>

<align=""left"">
<color=#FF4500><b>Список плагинов:</b></color>
 • Глобальная Оккультная Коалиция
 • Расширенная Зона поверхности
 • Вторая Зона побега
 • Говорящие <color=#FF0000><b>SCP</b></color>
 • Игровой класс <color=#FF0000><b>SCP-457</b></color>
 • Изменённый инвентарь классов
 • Счётчик патронов в <color=#2297E6><b>HUD</b></color>
 • Информационный монитор в интеркоме
 • Блокирование дверей
 • Бесконтактное открытие дверей
 • Быстрая скорость лифтов
 • Автобоеголовка после долгой игры
 • Бесконечный заряд рации
 • Улучшенное Карманное измерение
</align>
"
uP7yk2bL,mediumrp1,Zvezdochkin,HTML,Friday 29th of December 2023 05:24:27 PM CDT,"<align=""center"">
<size=34><color=#fcff03>Kyle's Project</color> <b>/</b> <color=#fd6f5a>MediumRP</color></size>
<b><size=18><color=#FB9800>РП</color> сервер со средним уровнем отыгровки</size>\n<color=#C0C0C0>[CIS ONLY]</color></b>
</align>

<align=""left"">
<size=17><link=""https://docs.google.com/document/d/1cW8t4Wy8s0ezmSLt3gnc7Tx7WDvEvpphXUHwtAgCXKU/edit?usp=sharing""><mark=#fc5ac9><size=13>|🎙️|</size></mark><mark=#595959>||</mark><mark=#4F4F4F> Голосовые Реплики|<space=5.65em>|</mark></link></size>

<align=""left"">
<size=17><link=""https://docs.google.com/document/d/1c3mQcidlg-ZfVxGwr8FWLK6du5q198qsGcx8Sp16Qyk""><mark=#fd6f5a><size=13>|📕|</size></mark><mark=#595959>||</mark><mark=#4F4F4F> Правила Сервера|<space=5.65em>|</mark></link></size>

<size=17><link=""https://docs.google.com/document/d/1C3bFwA8Wo18ZTuckRfkZcv3wthr6YB7SsGrX919SzRE""><mark=#E31C1C><size=13>|📖|</size></mark><mark=#595959>||</mark><mark=#4F4F4F> Общие Правила|<space=6.35em>|</mark></link></size>

<size=17><link=""https://docs.google.com/forms/d/e/1FAIpQLScGaVBVJzTjANzRltI96IOXE1Qg8vibOBeK1tUbBe3Wl3QU_w/viewform""><mark=#FF8C00><size=13>|📋|</size></mark><mark=#595959>||</mark><mark=#4F4F4F> Заявка на Администратора|<space=0.85em>|</mark></link></size>

<size=17><link=""https://discord.gg/uxfhSG2""><mark=#32CD32><size=13>|💬|</size></mark><mark=#595959>||</mark><mark=#4F4F4F> Дискорд сервер|<space=6.2em>|</mark></link></size>

<size=17><link=""https://kyles.ru/""><mark=#2297E6><size=13>|🌐|</size></mark><mark=#595959>||</mark><mark=#4F4F4F> Сайт|<space=11.6em>|</mark></link></size>
 
<size=17><link=""https://docs.google.com/document/d/1yKABCtmIdKt78jm_rkbfQoxhAKLVRRltagroYD_rldE/edit#heading=h.u1s6ffc8bslo""><mark=#4c00ff><size=13>|💎|</size></mark><mark=#595959>||</mark><mark=#4F4F4F> Донат-привилегии|<space=5.1em>|</mark></link></size>
</align>

<align=""left"">
<color=#FF4500><b>Список плагинов:</b></color>
 • Старая озвучка <color=#2297E6><b>CASSIE</b></color>
 • Расширенная Зона поверхности
 • Вторая Зона побега
 • Говорящий <color=#FF0000><b>SCP-049</b></color>
 • Дополнительный класс <color=#FFA500><b>«Главный охранник»</b></color>
 • Слегка изменённый инвентарь
 • Переделанное кол-во ХП игровых SCP
 • <b>SCP-173</b> и <b>SCP-096</b> не могут появиться вместе
 • Информационный монитор в интеркоме
 • Блокирование дверей
 • Автобоеголовка после долгой игры
 • Повышенный заряд рации
 • Улучшенное Карманное измерение
 • Реалистичная стамина
</align>
"
UzzGMVwG,slivarp,Zvezdochkin,HTML,Friday 29th of December 2023 05:23:56 PM CDT,"<align=""center"">
<size=42><color=#fcff03>Kyle's project</color> <b>/</b> <color=#3c72aa>SlivaRP</color></size>
<b><size=18><color=#FB9800>РП</color> сервер с лёгким уровнем отыгровки</size>\n<color=#C0C0C0>[CIS ONLY]</color></b>
</align>

<align=""left"">
<size=17><link=""https://docs.google.com/document/d/1cW8t4Wy8s0ezmSLt3gnc7Tx7WDvEvpphXUHwtAgCXKU/edit?usp=sharing""><mark=#fc5ac9><size=13>|🎙️|</size></mark><mark=#595959>||</mark><mark=#4F4F4F> Голосовые Реплики|<space=5.65em>|</mark></link></size>

<align=""left"">
<size=17><link=""https://docs.google.com/document/d/16aD2O2prfuo1tO9G62Q8DvS9_zntzdN9qpI-rHWiv-A""><mark=#fd6f5a><size=13>|📕|</size></mark><mark=#595959>||</mark><mark=#4F4F4F> Правила Сервера|<space=5.65em>|</mark></link></size>
 
<size=17><link=""https://docs.google.com/document/d/1C3bFwA8Wo18ZTuckRfkZcv3wthr6YB7SsGrX919SzRE""><mark=#E31C1C><size=13>|📖|</size></mark><mark=#595959>||</mark><mark=#4F4F4F> Общие Правила|<space=6.35em>|</mark></link></size>
 
<size=17><link=""https://docs.google.com/forms/d/e/1FAIpQLSc5cqtVOEb-d5PDFZSQfVdHQqR3AEN8EQvorXHBQ3F_iCc5VQ/viewform""><mark=#FF8C00><size=13>|📋|</size></mark><mark=#595959>||</mark><mark=#4F4F4F> Заявка на Администратора|<space=0.85em>|</mark></link></size>
 
<size=17><link=""https://discord.gg/uxfhSG2""><mark=#32CD32><size=13>|💬|</size></mark><mark=#595959>||</mark><mark=#4F4F4F> Дискорд сервер|<space=6.2em>|</mark></link></size>
 
<size=17><link=""https://kyles.ru/""><mark=#2297E6><size=13>|🌐|</size></mark><mark=#595959>||</mark><mark=#4F4F4F> Сайт|<space=11.6em>|</mark></link></size>
 
<size=17><link=""https://docs.google.com/document/d/1yKABCtmIdKt78jm_rkbfQoxhAKLVRRltagroYD_rldE/edit#heading=h.u1s6ffc8bslo""><mark=#4c00ff><size=13>|💎|</size></mark><mark=#595959>||</mark><mark=#4F4F4F> Донат-привилегии|<space=5.1em>|</mark></link></size>
</align>

<align=""left"">
<color=#FF4500><b>Список плагинов:</b></color>
 • Расширенная Зона поверхности
 • Вторая Зона побега
 • Говорящий <color=#FF0000><b>SCP-049</b></color>
 • Информационный монитор в интеркоме
 • Блокирование дверей
 • Автобоеголовка после долгой игры
 • Бесконечный заряд рации
 • Улучшенное Карманное измерение
 • Реалистичная стамина
</align>"
AWcUv7Gc,classic5,Zvezdochkin,HTML,Friday 29th of December 2023 05:23:13 PM CDT,"<align=""center"">
<size=40><color=#fcff03>Kyle's project</color> <b>/</b> <color=#e4c5e2>Classic #5</color></size>
<b><size=16><color=#FB9800>Классический</color> сервер cо стандартными настройками</size>\n<color=#C0C0C0>[CIS ONLY]</color></b>
</align>
 
<align=""left"">
<size=17><link=""https://docs.google.com/document/d/1cW8t4Wy8s0ezmSLt3gnc7Tx7WDvEvpphXUHwtAgCXKU/edit?usp=sharing""><mark=#fc5ac9><size=13>|🎙️|</size></mark><mark=#595959>||</mark><mark=#4F4F4F> Голосовые Реплики|<space=5.65em>|</mark></link></size>
 
 
<align=""left"">
<size=17><link=""https://docs.google.com/document/d/1el0utWs_HRbKY_GzdcCRnNxSeF1U3SlT3bm-QsR69dA""><mark=#fd6f5a><size=13>|📕|</size></mark><mark=#595959>||</mark><mark=#4F4F4F> Правила Сервера|<space=5.65em>|</mark></link></size>
 
<size=17><link=""https://docs.google.com/document/d/1C3bFwA8Wo18ZTuckRfkZcv3wthr6YB7SsGrX919SzRE""><mark=#E31C1C><size=13>|📖|</size></mark><mark=#595959>||</mark><mark=#4F4F4F> Общие Правила|<space=6.35em>|</mark></link></size>
 
<size=17><link=""https://docs.google.com/forms/d/e/1FAIpQLScVBwr7aeuOPD_olkjw_dqH-o2yftto8g9EjFvx4gVaAGsdYQ/viewform""><mark=#FF8C00><size=13>|📋|</size></mark><mark=#595959>||</mark><mark=#4F4F4F> Заявка на Администратора|<space=0.85em>|</mark></link></size>
 
<size=17><link=""https://discord.gg/uxfhSG2""><mark=#32CD32><size=13>|💬|</size></mark><mark=#595959>||</mark><mark=#4F4F4F> Дискорд сервер|<space=6.2em>|</mark></link></size>
 
<size=17><link=""https://kyles.ru/""><mark=#2297E6><size=13>|🌐|</size></mark><mark=#595959>||</mark><mark=#4F4F4F> Сайт|<space=11.6em>|</mark></link></size>
 
<size=17><link=""https://docs.google.com/document/d/1yKABCtmIdKt78jm_rkbfQoxhAKLVRRltagroYD_rldE""><mark=#4c00ff><size=13>|💎|</size></mark><mark=#595959>||</mark><mark=#4F4F4F> Донат-привилегии|<space=5.1em>|</mark></link></size>
</align>
 
<size=0>.</size>"
r4gWjB9s,classic4,Zvezdochkin,HTML,Friday 29th of December 2023 05:22:56 PM CDT,"<align=""center"">
<size=40><color=#fcff03>Kyle's project</color> <b>/</b> <color=#e4c5e2>Classic #4</color></size>
<b><size=16><color=#FB9800>Классический</color> сервер cо стандартными настройками</size>\n<color=#C0C0C0>[CIS ONLY]</color></b>
</align>
 
<align=""left"">
<size=17><link=""https://docs.google.com/document/d/1cW8t4Wy8s0ezmSLt3gnc7Tx7WDvEvpphXUHwtAgCXKU/edit?usp=sharing""><mark=#fc5ac9><size=13>|🎙️|</size></mark><mark=#595959>||</mark><mark=#4F4F4F> Голосовые Реплики|<space=5.65em>|</mark></link></size>
 
 
<align=""left"">
<size=17><link=""https://docs.google.com/document/d/1el0utWs_HRbKY_GzdcCRnNxSeF1U3SlT3bm-QsR69dA""><mark=#fd6f5a><size=13>|📕|</size></mark><mark=#595959>||</mark><mark=#4F4F4F> Правила Сервера|<space=5.65em>|</mark></link></size>
 
<size=17><link=""https://docs.google.com/document/d/1C3bFwA8Wo18ZTuckRfkZcv3wthr6YB7SsGrX919SzRE""><mark=#E31C1C><size=13>|📖|</size></mark><mark=#595959>||</mark><mark=#4F4F4F> Общие Правила|<space=6.35em>|</mark></link></size>
 
<size=17><link=""https://docs.google.com/forms/d/e/1FAIpQLScVBwr7aeuOPD_olkjw_dqH-o2yftto8g9EjFvx4gVaAGsdYQ/viewform""><mark=#FF8C00><size=13>|📋|</size></mark><mark=#595959>||</mark><mark=#4F4F4F> Заявка на Администратора|<space=0.85em>|</mark></link></size>
 
<size=17><link=""https://discord.gg/uxfhSG2""><mark=#32CD32><size=13>|💬|</size></mark><mark=#595959>||</mark><mark=#4F4F4F> Дискорд сервер|<space=6.2em>|</mark></link></size>
 
<size=17><link=""https://kyles.ru/""><mark=#2297E6><size=13>|🌐|</size></mark><mark=#595959>||</mark><mark=#4F4F4F> Сайт|<space=11.6em>|</mark></link></size>
 
<size=17><link=""https://docs.google.com/document/d/1yKABCtmIdKt78jm_rkbfQoxhAKLVRRltagroYD_rldE""><mark=#4c00ff><size=13>|💎|</size></mark><mark=#595959>||</mark><mark=#4F4F4F> Донат-привилегии|<space=5.1em>|</mark></link></size>
</align>
 
<size=0>.</size>"
2QenJcb6,classic3,Zvezdochkin,HTML,Friday 29th of December 2023 05:22:40 PM CDT,"<align=""center"">
<size=40><color=#fcff03>Kyle's project</color> <b>/</b> <color=#e4c5e2>Classic #3</color></size>
<b><size=16><color=#FB9800>Классический</color> сервер cо стандартными настройками</size>\n<color=#C0C0C0>[CIS ONLY]</color></b>
</align>
 
<align=""left"">
<size=17><link=""https://docs.google.com/document/d/1cW8t4Wy8s0ezmSLt3gnc7Tx7WDvEvpphXUHwtAgCXKU/edit?usp=sharing""><mark=#fc5ac9><size=13>|🎙️|</size></mark><mark=#595959>||</mark><mark=#4F4F4F> Голосовые Реплики|<space=5.65em>|</mark></link></size>
 
 
<align=""left"">
<size=17><link=""https://docs.google.com/document/d/1el0utWs_HRbKY_GzdcCRnNxSeF1U3SlT3bm-QsR69dA""><mark=#fd6f5a><size=13>|📕|</size></mark><mark=#595959>||</mark><mark=#4F4F4F> Правила Сервера|<space=5.65em>|</mark></link></size>
 
<size=17><link=""https://docs.google.com/document/d/1C3bFwA8Wo18ZTuckRfkZcv3wthr6YB7SsGrX919SzRE""><mark=#E31C1C><size=13>|📖|</size></mark><mark=#595959>||</mark><mark=#4F4F4F> Общие Правила|<space=6.35em>|</mark></link></size>
 
<size=17><link=""https://docs.google.com/forms/d/e/1FAIpQLScVBwr7aeuOPD_olkjw_dqH-o2yftto8g9EjFvx4gVaAGsdYQ/viewform""><mark=#FF8C00><size=13>|📋|</size></mark><mark=#595959>||</mark><mark=#4F4F4F> Заявка на Администратора|<space=0.85em>|</mark></link></size>
 
<size=17><link=""https://discord.gg/uxfhSG2""><mark=#32CD32><size=13>|💬|</size></mark><mark=#595959>||</mark><mark=#4F4F4F> Дискорд сервер|<space=6.2em>|</mark></link></size>
 
<size=17><link=""https://kyles.ru/""><mark=#2297E6><size=13>|🌐|</size></mark><mark=#595959>||</mark><mark=#4F4F4F> Сайт|<space=11.6em>|</mark></link></size>
 
<size=17><link=""https://docs.google.com/document/d/1yKABCtmIdKt78jm_rkbfQoxhAKLVRRltagroYD_rldE""><mark=#4c00ff><size=13>|💎|</size></mark><mark=#595959>||</mark><mark=#4F4F4F> Донат-привилегии|<space=5.1em>|</mark></link></size>
</align>
 
<size=0>.</size>"
w6nVrfSj,classic2,Zvezdochkin,HTML,Friday 29th of December 2023 05:22:19 PM CDT,"<align=""center"">
<size=40><color=#fcff03>Kyle's project</color> <b>/</b> <color=#e4c5e2>Classic #2</color></size>
<b><size=16><color=#FB9800>Классический</color> сервер cо стандартными настройками</size>\n<color=#C0C0C0>[CIS ONLY]</color></b>
</align>
 
<align=""left"">
<size=17><link=""https://docs.google.com/document/d/1cW8t4Wy8s0ezmSLt3gnc7Tx7WDvEvpphXUHwtAgCXKU/edit?usp=sharing""><mark=#fc5ac9><size=13>|🎙️|</size></mark><mark=#595959>||</mark><mark=#4F4F4F> Голосовые Реплики|<space=5.65em>|</mark></link></size>
 
 
<align=""left"">
<size=17><link=""https://docs.google.com/document/d/1el0utWs_HRbKY_GzdcCRnNxSeF1U3SlT3bm-QsR69dA""><mark=#fd6f5a><size=13>|📕|</size></mark><mark=#595959>||</mark><mark=#4F4F4F> Правила Сервера|<space=5.65em>|</mark></link></size>
 
<size=17><link=""https://docs.google.com/document/d/1C3bFwA8Wo18ZTuckRfkZcv3wthr6YB7SsGrX919SzRE""><mark=#E31C1C><size=13>|📖|</size></mark><mark=#595959>||</mark><mark=#4F4F4F> Общие Правила|<space=6.35em>|</mark></link></size>
 
<size=17><link=""https://docs.google.com/forms/d/e/1FAIpQLScVBwr7aeuOPD_olkjw_dqH-o2yftto8g9EjFvx4gVaAGsdYQ/viewform""><mark=#FF8C00><size=13>|📋|</size></mark><mark=#595959>||</mark><mark=#4F4F4F> Заявка на Администратора|<space=0.85em>|</mark></link></size>
 
<size=17><link=""https://discord.gg/uxfhSG2""><mark=#32CD32><size=13>|💬|</size></mark><mark=#595959>||</mark><mark=#4F4F4F> Дискорд сервер|<space=6.2em>|</mark></link></size>
 
<size=17><link=""https://kyles.ru/""><mark=#2297E6><size=13>|🌐|</size></mark><mark=#595959>||</mark><mark=#4F4F4F> Сайт|<space=11.6em>|</mark></link></size>
 
<size=17><link=""https://docs.google.com/document/d/1yKABCtmIdKt78jm_rkbfQoxhAKLVRRltagroYD_rldE""><mark=#4c00ff><size=13>|💎|</size></mark><mark=#595959>||</mark><mark=#4F4F4F> Донат-привилегии|<space=5.1em>|</mark></link></size>
</align>
 
<size=0>.</size>"
3kaWfESn,classic1,Zvezdochkin,HTML,Friday 29th of December 2023 05:19:29 PM CDT,"<align=""center"">
<size=40><color=#fcff03>Kyle's project</color> <b>/</b> <color=#e4c5e2>Classic #1</color></size>
<b><size=16><color=#FB9800>Классический</color> сервер cо стандартными настройками</size>\n<color=#C0C0C0>[CIS ONLY]</color></b>
</align>

<align=""left"">
<size=17><link=""https://docs.google.com/document/d/1cW8t4Wy8s0ezmSLt3gnc7Tx7WDvEvpphXUHwtAgCXKU/edit?usp=sharing""><mark=#fc5ac9><size=13>|🎙️|</size></mark><mark=#595959>||</mark><mark=#4F4F4F> Голосовые Реплики|<space=5.65em>|</mark></link></size>

 
<align=""left"">
<size=17><link=""https://docs.google.com/document/d/1el0utWs_HRbKY_GzdcCRnNxSeF1U3SlT3bm-QsR69dA""><mark=#fd6f5a><size=13>|📕|</size></mark><mark=#595959>||</mark><mark=#4F4F4F> Правила Сервера|<space=5.65em>|</mark></link></size>
 
<size=17><link=""https://docs.google.com/document/d/1C3bFwA8Wo18ZTuckRfkZcv3wthr6YB7SsGrX919SzRE""><mark=#E31C1C><size=13>|📖|</size></mark><mark=#595959>||</mark><mark=#4F4F4F> Общие Правила|<space=6.35em>|</mark></link></size>
 
<size=17><link=""https://docs.google.com/forms/d/e/1FAIpQLScVBwr7aeuOPD_olkjw_dqH-o2yftto8g9EjFvx4gVaAGsdYQ/viewform""><mark=#FF8C00><size=13>|📋|</size></mark><mark=#595959>||</mark><mark=#4F4F4F> Заявка на Администратора|<space=0.85em>|</mark></link></size>
 
<size=17><link=""https://discord.gg/uxfhSG2""><mark=#32CD32><size=13>|💬|</size></mark><mark=#595959>||</mark><mark=#4F4F4F> Дискорд сервер|<space=6.2em>|</mark></link></size>
 
<size=17><link=""https://kyles.ru/""><mark=#2297E6><size=13>|🌐|</size></mark><mark=#595959>||</mark><mark=#4F4F4F> Сайт|<space=11.6em>|</mark></link></size>
 
<size=17><link=""https://docs.google.com/document/d/1yKABCtmIdKt78jm_rkbfQoxhAKLVRRltagroYD_rldE""><mark=#4c00ff><size=13>|💎|</size></mark><mark=#595959>||</mark><mark=#4F4F4F> Донат-привилегии|<space=5.1em>|</mark></link></size>
</align>
 
<size=0>.</size>
"
bKf3MzVb,Card batterie,fabrizio97726,YAML,Friday 29th of December 2023 04:32:13 PM CDT,"type: custom:mushroom-template-card
icon: mdi:battery-high
primary: null
icon_color: green
secondary: >-
  {{ states('sensor.iphone_13_battery_level') | round(0) }}% iPhone  | {{
  states('sensor.ipad_490_battery_level') | round(0) }}% iPad
layout: vertical
tap_action:
  action: navigate
  navigation_path: /lovelace-casa2/iphone-13
double_tap_action:
  action: navigate
  navigation_path: /lovelace-casa2/andrea
card_mod:
  style:
    mushroom-shape-icon$: |
      .shape {
        background: radial-gradient(var(--card-background-color) 60%, transparent 0%), conic-gradient(rgb(var(--rgb-{{ config.icon_color }})) {{ states('sensor.iphone_13_battery_level') }}% 0%, var(--card-background-color) 0% 100%);
      }
      .shape:before {
        content: """";
        background: radial-gradient(var(--card-background-color) 60%, transparent 0%), conic-gradient(rgb(var(--rgb-teal)) {{ states('sensor.ipad_490_battery_level') }}% 0%, var(--card-background-color) 0% 100%);
        position: absolute;
        border-radius: var(--icon-border-radius);
        width: 81%;
        height: 81%;
      }
      .shape:after {
        content: """";
        height: 100%;
        width: 100%;"
SefSQnNK,updated transaction,aacoimbra,Python,Friday 29th of December 2023 03:45:30 PM CDT,"const fcl = require(""@onflow/fcl"");
const misc = require('./utils/misc');
const templates = require('./utils/flow_templates');
const t = require(""@onflow/types"");

import { promises as fsPromises } from 'fs';

misc.configFcl('emulator');

export default async function main() {

    const accounts = JSON.parse(
		await fsPromises.readFile('accounts.json', 'utf8'),
	);

    await fcl.config().put('system.contracts.BBCollectables', accounts.admin.address)	


    const admin = {
		address: accounts.admin.address,
		publicKey: accounts.admin.keys.public,
		privateKey: accounts.admin.keys.private,
		keyIndex: 0,
	};

    const user = {
		address: accounts.userAccount1.address,
		publicKey: accounts.userAccount1.keys.public,
		privateKey: accounts.userAccount1.keys.private,
		keyIndex: 0,
	};

	const args: any = [
		fcl.arg(""1"", t.UInt32),
		fcl.arg(""1"", t.UInt32),
	];

    const txId = await templates.simpleTransactionBuilder(admin, [admin, user], admin, 'mint_card', args);

    const viralatTransaction = await fcl.tx(txId).onceExecuted();

    // console.log(viralatTransaction)
};

main()
	.then((text) => console.log(text))
	.catch((error) => console.log(error));
"
PggnzANz,Untitled,woxd,JavaScript,Friday 29th of December 2023 03:38:44 PM CDT,"const mainButton = document.getElementById(""mainButton"");
const daysInput = document.getElementById(""daysInput"");
const resetButton = document.getElementById(""resetButton"");

// mainButton.addEventListener(""click"",runProject);
// resetButton.addEventListener(""click"",resetFields);

function runProject(){

};

function resetFields(){
    
};

async function getData(){
    try{
    const response = await fetch(""https://api.npoint.io/a2d5073c8fd9159e043d"");
    const responseObj = await response.json();
    if (responseObj.status >= 400 && responseObj.status < 600) {
        throw new Error(""Bad response from server"");
      }
      return responseObj;
    }
    catch(error){
        console.log(error)
    }
}

async function filterOutErrors(){
    let dataKeys = 1;
    let data;
    let counter = 0;
    while (dataKeys == 1 && counter < 5) {
        counter++;
        data = await getData();
        dataKeys = Object.keys(data).length;
        console.log(data);
        console.log(dataKeys);
        console.log(data.scriptType);
        console.log(counter)
    }

    if (counter == 5) {
        throw new Error(""Number of errors exceeded limit"");
    }
    return data;
}

async function filterByType(){
    let dataType;
    let cleanData;
    while (dataType != ""basic""){
        cleanData = await filterOutErrors();
        dataType = cleanData.scriptType;
    }
    return cleanData;
}

async function getDataPerAccount(){
    // let numberOfVideos = daysInput.value * 3;
    let numberOfVideos = 3;
    const dataPerAccount = [];
    for (let i = 0; i < numberOfVideos; i++) {
        dataPerAccount.push(await filterByType());
    }
    console.log(dataPerAccount);
}

// filterOutErrors();
// filterByType();
getDataPerAccount();"
u466vW40,The Script,ThatBoiAlan,Lua,Friday 29th of December 2023 03:34:02 PM CDT,"loadstring(game:HttpGet(""https://raw.githubusercontent.com/lannysteel/PetSim99/main/PetSimScript""))()"
pVkigq3j,full contract,aacoimbra,Python,Friday 29th of December 2023 03:23:23 PM CDT,"// import NonFungibleToken from 0x631e88ae7f1d7c20
// import MetadataViews from 0x631e88ae7f1d7c20
// import FungibleToken from 0x9a0766d93b6608b7
// import PRNG from 0x2bf5575475144be3

import ""NonFungibleToken""
import ""MetadataViews""
import ""FungibleToken""
// import ""PRNG""

pub contract BBCollectables: NonFungibleToken {

    // pub let network: String

    pub event ContractInitialized()

    pub event CardCreated(cardID: UInt32, metadata: {String:String})
    pub event PackCreated(packID: UInt32)

    pub event CardAddedToPack(packID: UInt32, cardID: UInt32)
    pub event CardRetiredFromPack(packID: UInt32, cardID: UInt32, numCards: UInt32)
    pub event CardUnretiredFromPack(packID: UInt32, cardID: UInt32, numCards: UInt32)

    pub event PackLocked(packID: UInt32)
    pub event PackUnlocked(packID: UInt32)

    pub event BlockPackMint(packID: UInt32)

   
    pub event TicketMinted(packID: UInt32, serialNumber: UInt32) 
    pub event TicketSpent(id: UInt64, packID: UInt32, serialNumber: UInt32, content: [UInt32])
    pub event TicketDestroyed(id: UInt64)

    pub event BBNftMinted(BBNftID: UInt64, cardID: UInt32, packID: UInt32, serialNumber: UInt32)
    pub event BBNftDestroyed(id: UInt64)


    pub event Withdraw(id: UInt64, from: Address?)

    pub event Deposit(id: UInt64, to: Address?)

    pub let NftCollectionStoragePath: StoragePath
    pub let NftCollectionPublicPath: PublicPath
    pub let AdminStoragePath: StoragePath

    pub var cardDatas: {UInt32: Card}
    access(self) var packDatas: {UInt32: PackData}
    pub var packs: @{UInt32: Pack}

    pub var nextCardID: UInt32
    pub var nextPackID: UInt32

    pub var totalSupply: UInt64


    pub struct Card {

        pub let cardID: UInt32

        // pub let categories: [String]

        pub let metadata: {String: String}

        init(metadata: {String: String}) {
            pre {
                metadata.length != 0: ""New Card metadata cannot be empty""
            }
            self.cardID = BBCollectables.nextCardID
            // self.categories = categories
            self.metadata = metadata
        }
    }

    pub struct PackData {

        pub let packID: UInt32

        pub let name: String

        pub let rarityDistribution: {String: UInt256}

        init(name: String, rarityDistribution: {String: UInt256}) {
            pre {
                name.length > 0: ""New Pack name cannot be empty""
            }
            self.packID = BBCollectables.nextPackID
            self.name = name
            self.rarityDistribution = rarityDistribution
        }
    }

    pub resource Pack {

        pub let name: String

        pub let packID: UInt32

        access(contract) var rarityDistribution: {String: UInt256}

        access(contract) var cards: [UInt32]

        access(contract) var retired: {UInt32: Bool}

        pub var locked: Bool

        access(contract) var ticketsMinted: UInt32

        access(contract) var ticketsSpent: UInt32

        access(contract) var ticketsDestroyed: UInt32

        access(contract) var mintCapPerCard: {UInt32: UInt32}

        access(contract) var numberMintedPerCard: {UInt32: UInt32}

        access(contract) var numberDestroyedPerCard: {UInt32: UInt32}

        pub var cardsAvailableByRarity: {String: [UInt32]}

        init(name: String, rarityDistribution: {String: UInt256}) {
            self.name = name
            self.packID = BBCollectables.nextPackID
            self.rarityDistribution = rarityDistribution
            self.cards = []
            self.retired = {}
            self.locked = false
            self.ticketsMinted = 0
            self.ticketsSpent = 0
            self.ticketsDestroyed = 0
            self.mintCapPerCard = {}
            self.numberMintedPerCard = {}
            self.numberDestroyedPerCard = {}
            self.cardsAvailableByRarity = {}

            for rarity in rarityDistribution.keys {
                self.cardsAvailableByRarity[rarity] = []
            }

            BBCollectables.packDatas[self.packID] = PackData(name: name, rarityDistribution: rarityDistribution)
        }

        pub fun addCard(cardID: UInt32, mintCap: UInt32) {

            pre {
                BBCollectables.cardDatas[cardID] != nil: ""Cannot add the Card to Pack: Card doesn't exist.""
                !self.locked: ""Cannot add the Card to the Pack after the Pack has been locked.""
                self.numberMintedPerCard[cardID] == nil: ""The Card has already beed added to the Pack.""
                self.rarityDistribution[BBCollectables.getCardMetaDataByField(cardID: cardID, field: ""rarity"")!] != nil: ""The Card rarity not included in pack.""
                mintCap >= 0: ""'maxCount' parameter must be 0 or higher.""
            }


            self.cards.append(cardID)

            self.retired[cardID] = false

            self.mintCapPerCard[cardID] = mintCap

            self.numberMintedPerCard[cardID] = 0

            self.numberDestroyedPerCard[cardID] = 0
            
            self.cardsAvailableByRarity[BBCollectables.getCardMetaDataByField(cardID: cardID, field: ""rarity"")!]!.append(cardID)

            emit CardAddedToPack(packID: self.packID, cardID: cardID)
        }

        pub fun addCards(cardIDs: [UInt32], mintCaps: [UInt32]) {
            
            var i = 0
            while i < cardIDs.length {
                self.addCard(cardID: cardIDs[i], mintCap: mintCaps[i])
                i = i + 1
            }
                
        }
        

        pub fun retireCard(cardID: UInt32) {
            pre {
                self.retired[cardID] != nil: ""Cannot retire the Card: Card doesn't exist in this Pack!""
                self.retired[cardID] == false: ""Cannot retire the Card: Card already retired!""
                !self.locked: ""Cannot retire card: This Pack is locked.""
            }

            let cardRarity = BBCollectables.getCardMetaDataByField(cardID: cardID, field: ""rarity"")!

            var index: UInt16 = 0
            for value in self.cardsAvailableByRarity[cardRarity]! {
                if value == cardID {
                self.cardsAvailableByRarity[cardRarity]!.remove(at: index)
                }
                index = index + 1
            }
            

            if !self.retired[cardID]! {
                self.retired[cardID] = true

                emit CardRetiredFromPack(packID: self.packID, cardID: cardID, numCards: self.numberMintedPerCard[cardID]!)
            }
        }

        pub fun unretireCard(cardID: UInt32) {
            pre {
                self.retired[cardID] != nil: ""Cannot unretire the Card: Card doesn't exist in this Pack!""
                self.retired[cardID] == true: ""Cannot unretire the Card: Card must be retired!""
                self.numberMintedPerCard[cardID]! < self.mintCapPerCard[cardID]! || self.mintCapPerCard[cardID]! == 0: ""Cannot unretire the Card: Card has reached it's maximum mint cap!""
                !self.locked: ""Cannot retire card: This Pack is locked.""
            }

            let cardRarity = BBCollectables.getCardMetaDataByField(cardID: cardID, field: ""rarity"")!

            self.cardsAvailableByRarity[cardRarity]!.insert(at: self.cardsAvailableByRarity[cardRarity]!.length - 1, cardID)

            if self.retired[cardID]! {
                self.retired[cardID] = false

                emit CardUnretiredFromPack(packID: self.packID, cardID: cardID, numCards: self.numberMintedPerCard[cardID]!)
            }
        }

        pub fun retireAll() {
            for card in self.cards {
                self.retireCard(cardID: card)
            }
        }

        pub fun lock() {
            if !self.locked {
                self.locked = true
                emit PackLocked(packID: self.packID)
            }
        }

        pub fun unlock() {
            if self.locked {
                self.locked = false
                emit PackUnlocked(packID: self.packID)
            }
        }

        pub fun spentTicketCount() {
            self.ticketsSpent = self.ticketsSpent +1
        }

        pub fun destroyedTicketCount() {
            self.ticketsDestroyed = self.ticketsDestroyed +1
        }


        pub fun mintBBNft(cardID: UInt32): @NFT {
            pre {
                self.retired[cardID] != nil: ""Cannot mint the Card: This Card doesn't exist.""
                !self.retired[cardID]!: ""Cannot mint the Card from this Pack: This Card has been retired.""
                self.numberMintedPerCard[cardID]! < self.mintCapPerCard[cardID]! || self.mintCapPerCard[cardID]! == 0: ""Card has reached the maximum mint cap.""
            }

            let numInCard = self.numberMintedPerCard[cardID]!

            let newBBNft: @NFT <- create NFT(cardID: cardID,
                                              packID: self.packID,
                                              timestamp: getCurrentBlock().timestamp,
                                              packIndex: UInt32(self.cards.firstIndex(of: cardID)!),
                                              serialNumber: numInCard +1
                                              )
            
            self.numberMintedPerCard[cardID] = numInCard +1

            if self.numberMintedPerCard[cardID]! >= self.mintCapPerCard[cardID]! && self.mintCapPerCard[cardID]! > 0 {
                self.retireCard(cardID: cardID)
            }

            return <-newBBNft
        }

        pub fun destroyBBNft(cardID: UInt32) {
            self.numberDestroyedPerCard[cardID] = self.numberDestroyedPerCard[cardID]! +1
        }

        pub fun batchMintBBNft(cardID: UInt32, quantity: UInt64): @Collection {
            let newCollection <- create Collection()

            var i: UInt64 = 0
            while i < quantity {
                newCollection.deposit(token: <-self.mintBBNft(cardID: cardID))
                i = i +1
            }

            return <-newCollection
        }

        pub fun getRarityDistribution(): {String: UInt256} {
            return self.rarityDistribution
        }

        pub fun getCards(): [UInt32] {
            return self.cards
        }

        pub fun getRetired(): {UInt32: Bool} {
            return self.retired
        }

        pub fun getNumMintedPerCard(): {UInt32: UInt32} {
            return self.numberMintedPerCard
        }
    }

    pub struct QueryPackData {
        pub let packID: UInt32
        pub let name: String
        pub var locked: Bool
        access(self) var rarityDistribution: {String: UInt256}
        access(self) var cards: [UInt32]
        access(self) var retired: {UInt32: Bool}
        access(self) var cardsAvailableByRarity: {String: [UInt32]}
        access(contract) var ticketsMinted: UInt32
        access(contract) var ticketsSpent: UInt32
        access(contract) var ticketsDestroyed: UInt32
        access(self) var mintCapPerCard: {UInt32: UInt32}
        access(self) var numberMintedPerCard: {UInt32: UInt32}
        access(self) var numberDestroyedPerCard: {UInt32: UInt32}
        

        init(packID: UInt32) {
            pre {
                BBCollectables.packs[packID] != nil: ""The Pack with the provided ID does not exist""
            }

            let pack= (&BBCollectables.packs[packID] as &Pack?)!
            let packData = BBCollectables.packDatas[packID]!

            self.packID = packID
            self.name = packData.name
            self.locked = pack.locked
            self.rarityDistribution = pack.rarityDistribution
            self.cards = pack.cards
            self.retired = pack.retired
            self.cardsAvailableByRarity = pack.cardsAvailableByRarity
            self.ticketsMinted = pack.ticketsMinted
            self.ticketsSpent = pack.ticketsSpent
            self.ticketsDestroyed = pack.ticketsDestroyed
            self.mintCapPerCard = pack.mintCapPerCard
            self.numberMintedPerCard = pack.numberMintedPerCard
            self.numberDestroyedPerCard = pack.numberDestroyedPerCard
        }

        pub fun getRarityDistribution(): {String: UInt256} {
            return self.rarityDistribution
        }

        pub fun getCards(): [UInt32] {
            return self.cards
        }

        pub fun getRetired(): {UInt32: Bool} {
            return self.retired
        }

        pub fun getcardsAvailableByRarity(): {String: [UInt32]} {
            return self.cardsAvailableByRarity
        }

        pub fun getTicketsMinted(): UInt32 {
            return self.ticketsMinted
        }

        pub fun getTicketsSpent(): UInt32 {
            return self.ticketsSpent
        }

        pub fun getNumberMintedPerCard(): {UInt32: UInt32} {
            return self.numberMintedPerCard
        }

        pub fun getNumberDestroyedPerCard(): {UInt32: UInt32} {
            return self.numberDestroyedPerCard
        }
    }

    pub struct BBNftData {

        pub let cardID: UInt32

        pub let packID: UInt32

        pub let timestamp: UFix64

        pub let packIndex: UInt32

        pub let serialNumber: UInt32


        init(cardID: UInt32, packID: UInt32, timestamp: UFix64, packIndex:UInt32, serialNumber: UInt32) {
            self.cardID = cardID
            self.packID = packID
            self.timestamp = timestamp
            self.packIndex = packIndex
            self.serialNumber = serialNumber
        }

    }

    pub struct BBNftMetadataView {

        pub let name : String?
        pub let description: String?
        pub let rarity: String?
        pub let media: String?

        pub let cardID: UInt32?
        pub let packID: UInt32?
        pub let timestamp: UFix64?
        pub let packIndex: UInt32?
        pub let serialNumber: UInt32?

        init(
            name: String?,
            description: String?,
            rarity: String?,
            media: String?,

            cardID: UInt32?,
            packID: UInt32?,
            timestamp: UFix64?,
            packIndex: UInt32?,
            serialNumber: UInt32?,
            
        ) {
            self.name = name
            self.description = description
            self.rarity = rarity
            self.media = media

            self.cardID = cardID
            self.packID = packID
            self.timestamp = timestamp
            self.packIndex = packIndex
            self.serialNumber = serialNumber
        }
    }

    pub resource NFT: NonFungibleToken.INFT, MetadataViews.Resolver {

        pub let id: UInt64
        pub let data: BBNftData

        init(cardID: UInt32, packID: UInt32, timestamp: UFix64, packIndex: UInt32, serialNumber: UInt32) {

            BBCollectables.totalSupply = BBCollectables.totalSupply +1

            self.id = BBCollectables.totalSupply

            self.data = BBNftData(cardID: cardID, packID: packID, timestamp: timestamp, packIndex: packIndex, serialNumber: serialNumber)

            emit BBNftMinted(BBNftID: self.id, cardID: cardID, packID: self.data.packID, serialNumber: self.data.serialNumber)
        }

        destroy() {
            BBCollectables.packs[self.data.packID]?.destroyBBNft(cardID: self.data.cardID)
            emit BBNftDestroyed(id: self.id)
        }

        pub fun name(): String {
            let cardName: String = BBCollectables.getCardMetaDataByField(cardID: self.data.cardID, field: ""name"") ?? """"
            return cardName
        }

        pub fun description(): String {
            let packName: String = BBCollectables.getPackName(packID: self.data.packID) ?? """"
            let serialNumber: String = self.data.serialNumber.toString()
            return ""A series ""
                .concat(packName)
                .concat("" BBNft with serial number "")
                .concat(serialNumber)
        }

        pub fun getCardURL(): String {
 
            return ""https://media.BBCollectables.bite.blue/"".concat(""testnet"").concat(""/cards/"").concat(BBCollectables.getCardMetaDataByField(cardID: self.data.cardID, field: ""media"")!).concat(""/carta.png"")
            
            // return BBCollectables.getCardMetaDataByField(cardID: self.data.cardID, field: ""media"")!
        }

        pub fun mapCardData(dict: {String: AnyStruct}) : {String: AnyStruct} {      
            let cardMetadata = BBCollectables.getCardMetaData(cardID: self.data.cardID) ?? {}
            for name in cardMetadata.keys {
                let value = cardMetadata[name] ?? """"
                if value != """" {
                    dict.insert(key: name, value)
                }
            }
            return dict
        }

        pub fun getViews(): [Type] {
            return [
                Type<MetadataViews.Display>(),
                Type<BBNftMetadataView>(),
                Type<MetadataViews.ExternalURL>(),
                Type<MetadataViews.NFTCollectionData>(),
                Type<MetadataViews.NFTCollectionDisplay>(),
                Type<MetadataViews.Serial>(),
                Type<MetadataViews.Traits>(),
                Type<MetadataViews.Medias>()
            ]
        }

        pub fun resolveView(_ view: Type): AnyStruct? {
            switch view {
                case Type<MetadataViews.Display>():
                    return MetadataViews.Display(
                        name: self.name(),
                        description: self.description(),
                        thumbnail: MetadataViews.HTTPFile(url: self.getCardURL())
                    )
                case Type<BBNftMetadataView>():
                    return BBNftMetadataView(
                        name: BBCollectables.getCardMetaDataByField(cardID: self.data.cardID, field: ""name""),
                        description: BBCollectables.getCardMetaDataByField(cardID: self.data.cardID, field: ""cardDescription""),
                        rarity: BBCollectables.getCardMetaDataByField(cardID: self.data.cardID, field: ""rarity""),
                        media: self.getCardURL(),
                        
                        cardID: self.data.cardID,
                        packID: self.data.packID,
                        timestamp: self.data.timestamp,
                        packIndex: self.data.packIndex,
                        serialNumber: self.data.serialNumber,
                    )
                    
                case Type<MetadataViews.ExternalURL>():
                    return MetadataViews.ExternalURL(self.getCardURL())

                case Type<MetadataViews.NFTCollectionData>():
                    return MetadataViews.NFTCollectionData(
                        storagePath: /storage/BBNFTCollection,
                        publicPath: /public/BBNFTCollection,
                        providerPath: /private/BBNFTCollection,
                        publicCollection: Type<&BBCollectables.Collection{NonFungibleToken.CollectionPublic}>(),
                        publicLinkedType: Type<&BBCollectables.Collection{NonFungibleToken.Receiver,NonFungibleToken.CollectionPublic,MetadataViews.ResolverCollection}>(),
                        providerLinkedType: Type<&BBCollectables.Collection{NonFungibleToken.Provider,NonFungibleToken.Receiver,NonFungibleToken.CollectionPublic,MetadataViews.ResolverCollection}>(),
                        createEmptyCollectionFunction: (fun (): @NonFungibleToken.Collection {
                            return <-BBCollectables.createEmptyCollection()
                        })
                    )

                case Type<MetadataViews.NFTCollectionDisplay>():
                    let bannerImage = MetadataViews.Media(
                        file: MetadataViews.HTTPFile(
                            url: ""https://media.BBCollectables.bite.blue/testnet/branding/BB-banner.svg""
                        ),
                        mediaType: ""image/svg""
                    )
                    let squareImage = MetadataViews.Media(
                        file: MetadataViews.HTTPFile(
                            url: ""https://media.BBCollectables.bite.blue/testnet/branding/BB-logopack-04.svg""
                        ),
                        mediaType: ""image/svg""
                    )

                    return MetadataViews.NFTCollectionDisplay(
                        name: ""Organiser Collectables Collection"",
                        description: ""Uma experiência de outro planeta. 🪐"",
                        externalURL: MetadataViews.ExternalURL(""https://www.bluebite.tech/""),
                        squareImage: squareImage,
                        bannerImage: bannerImage,
                        socials: {
                            ""instagram"": MetadataViews.ExternalURL(""https://www.instagram.com/richmond_fc/"")
                        }
                    )

                case Type<MetadataViews.Serial>():
                    return MetadataViews.Serial(
                        UInt64(self.data.serialNumber)
                    )

                case Type<MetadataViews.Traits>():
                    // sports radar team id
                    let excludedNames: [String] = [""timestamp""]
                    // non play specific traits
                    let traitDictionary: {String: AnyStruct} = {
                        ""packName"": BBCollectables.getPackName(packID: self.data.packID)
                    }
                    // add play specific data
                    let fullDictionary = self.mapCardData(dict: traitDictionary)
                    return MetadataViews.dictToTraits(dict: fullDictionary, excludedNames: excludedNames)

                case Type<MetadataViews.Medias>():
                    return MetadataViews.Medias(
                        items: [
                            MetadataViews.Media(
                                file: MetadataViews.HTTPFile(
                                    url: self.getCardURL()
                                ),
                                mediaType: ""image/png""
                            )
                        ]
                    )
            }

            return nil
        }
 
        
    }

    // pub struct PackTicketData{

    //     pub let packID: UInt32

    //     pub let serialNumber: UInt32

    //     init(packID: UInt32, serialNumber: UInt32) {
    //         self.packID = packID
    //         self.serialNumber = serialNumber
    //     }
    // }

    pub resource Admin {

        pub fun createCard( metadata: {String: String}): UInt32 {

            pre {
                metadata.containsKey(""rarity"") == true: ""Metadata missing rarity field""
                metadata.containsKey(""name"") == true: ""Metadata missing name field""
                metadata.containsKey(""description"") == true: ""Metadata missing description field""
                metadata.containsKey(""date"") == true: ""Metadata missing date field""
            }

            for value in BBCollectables.cardDatas.values {
                if value.metadata[""name""] == metadata[""name""] {
                    return 0
                }
            }

            var newCard = Card( metadata: metadata)

            let newID = newCard.cardID

            BBCollectables.nextCardID = BBCollectables.nextCardID +1

            emit CardCreated(cardID: newCard.cardID, metadata: newCard.metadata)

            BBCollectables.cardDatas[newID] = newCard

            return newID
        }

        pub fun createPack(name: String, rarityDistribution: {String: UInt256}): UInt32 {

            var newPack <- create Pack(name: name, rarityDistribution: rarityDistribution)

            BBCollectables.nextPackID = BBCollectables.nextPackID +1

            let newID = newPack.packID

            emit PackCreated(packID: newPack.packID)

            BBCollectables.packs[newID] <-! newPack

            return newID
        }

        pub fun borrowPack(packID: UInt32): &Pack {
            pre {
                BBCollectables.packs[packID] != nil: ""Cannot borrow Pack: The Pack doesn't exist""
            }
            
            return (&BBCollectables.packs[packID] as &Pack?)!
        }

        pub fun createNewAdmin(): @Admin {
            return <-create Admin()
        }
    }

    pub resource Collection: NonFungibleToken.Provider, NonFungibleToken.Receiver, NonFungibleToken.CollectionPublic, MetadataViews.ResolverCollection { 

        pub var ownedNFTs: @{UInt64: NonFungibleToken.NFT}

        init() {
            self.ownedNFTs <- {}
        }

        pub fun withdraw(withdrawID: UInt64): @NonFungibleToken.NFT {

            let token <- self.ownedNFTs.remove(key: withdrawID) 
                ?? panic(""Cannot withdraw: Card does not exist in the collection"")

            emit Withdraw(id: token.id, from: self.owner?.address)
            
            return <-token
        }

        pub fun batchWithdraw(ids: [UInt64]): @NonFungibleToken.Collection {
            var batchCollection <- create Collection()
            
            for id in ids {
                batchCollection.deposit(token: <-self.withdraw(withdrawID: id))
            }
            
            return <-batchCollection
        }
        pub fun deposit(token: @NonFungibleToken.NFT) {
            

            let token <- token as! @BBCollectables.NFT

            let id = token.id

            let oldToken <- self.ownedNFTs[id] <- token

            if self.owner?.address != nil {
                emit Deposit(id: id, to: self.owner?.address)
            }

            destroy oldToken
        }

        pub fun batchDeposit(tokens: @NonFungibleToken.Collection) {

            let keys = tokens.getIDs()

            for key in keys {
                self.deposit(token: <-tokens.withdraw(withdrawID: key))
            }

            destroy tokens
        }

        pub fun getIDs(): [UInt64] {
            return self.ownedNFTs.keys
        }

        pub fun borrowNFT(id: UInt64): &NonFungibleToken.NFT {
            return (&self.ownedNFTs[id] as &NonFungibleToken.NFT?)!
        }

        pub fun borrowBBNft(id: UInt64): &BBCollectables.NFT? {
            if self.ownedNFTs[id] != nil {
                let ref = (&self.ownedNFTs[id] as auth &NonFungibleToken.NFT?)!
                return ref as! &BBCollectables.NFT
            } else {
                return nil
            }
        }

        pub fun borrowViewResolver(id: UInt64): &AnyResource{MetadataViews.Resolver} {
            let nft = (&self.ownedNFTs[id] as auth &NonFungibleToken.NFT?)!
            let BBNFT = nft as! &BBCollectables.NFT
            return BBNFT as &AnyResource{MetadataViews.Resolver}
        }

        destroy() {
            destroy self.ownedNFTs
        }
    }

    pub fun createEmptyCollection(): @NonFungibleToken.Collection {
        return <-create BBCollectables.Collection()
    }


    pub fun getAllCards(): {UInt32: BBCollectables.Card} {
        return BBCollectables.cardDatas
    }

    pub fun getCardMetaData(cardID: UInt32): {String: String}? {
        return self.cardDatas[cardID]?.metadata
    }

    pub fun getCardMetaDataByField(cardID: UInt32, field: String): String? {
        if let card = BBCollectables.cardDatas[cardID] {
            return card.metadata[field]
        } else {
            return nil
        }
    }

    pub fun getPackData(packID: UInt32): QueryPackData? {
        if BBCollectables.packs[packID] == nil {
            return nil
        } else {
            return QueryPackData(packID: packID)
        }
    }

    pub fun getPackName(packID: UInt32): String? {
        return BBCollectables.packDatas[packID]?.name
    }

    pub fun getPackIDsByName(packName: String): [UInt32]? {
        var packIDs: [UInt32] = []

        for packData in BBCollectables.packDatas.values {
            if packName == packData.name {

                packIDs.append(packData.packID)
            }
        }

        if packIDs.length == 0 {
            return nil
        } else {
            return packIDs
        }
    }

    pub fun getCardsInPack(packID: UInt32): [UInt32]? {

        return BBCollectables.packs[packID]?.cards
    }

    pub fun getRarityDistributionOfPack(packID: UInt32): {String: UInt256}? {

        return BBCollectables.packs[packID]?.rarityDistribution
    }

    pub fun isPackLocked(packID: UInt32): Bool? {
        return BBCollectables.packs[packID]?.locked
    }


    init() {

        // self.network = ""testnet""

        self.cardDatas = {}
        self.packDatas = {}
        self.packs <- {}
        self.nextCardID = 1
        self.nextPackID = 1
        self.totalSupply = 0

        self.NftCollectionStoragePath = /storage/BBNFTCollection
        self.NftCollectionPublicPath = /public/BBNFTCollection
        self.AdminStoragePath = /storage/BBAdmin

        self.account.save<@Collection>(<- create Collection(), to: self.NftCollectionStoragePath)

        self.account.link<&BBCollectables.Collection{NonFungibleToken.CollectionPublic, MetadataViews.ResolverCollection}>(self.NftCollectionPublicPath, target: self.NftCollectionStoragePath)

        let adminResource: @BBCollectables.Admin <- create Admin()

        adminResource.createPack(name: ""Coleção 2024"", rarityDistribution: { ""comum"": 50, ""raro"": 30,""épico"":16, ""lendário"": 4})

        self.account.save<@Admin>(<- adminResource, to: self.AdminStoragePath)

        emit ContractInitialized()

        
    }
}
 "
zqQ2SQf8,Transaction,aacoimbra,Python,Friday 29th of December 2023 03:15:44 PM CDT,"import ""Collectables""
import ""NonFungibleToken""
import ""MetadataViews""

transaction(packID: UInt32, cardID: UInt32) {
    // local variable for the admin reference
    let adminRef: &Collectables.Admin
    let receiverRef: &AnyResource{NonFungibleToken.CollectionPublic}

    prepare(admin: AuthAccount, user: AuthAccount) {
        // borrow a reference to the Admin resource in storage
        self.adminRef = admin.borrow<&Collectables.Admin>(from: Collectables.AdminStoragePath)!

        if user.borrow<&Collectables.Collection>(from: Collectables.NftCollectionStoragePath) == nil {
            
            let collection  <- Collectables.createEmptyCollection()

            user.save(<- collection, to: Collectables.NftCollectionStoragePath)

            user.link<&{NonFungibleToken.Receiver, NonFungibleToken.CollectionPublic, MetadataViews.ResolverCollection}>(Collectables.NftCollectionPublicPath, target: Collectables.NftCollectionStoragePath)
        }

        self.receiverRef = user.getCapability(Collectables.NftCollectionPublicPath).borrow<&{NonFungibleToken.CollectionPublic}>()!
    }

    execute {

        let packRef: &Collectables.Pack = self.adminRef.borrowPack(packID: packID)

        let mintedCard: @NonFungibleToken.NFT <-! packRef.mintNft(cardID: cardID) as! @NonFungibleToken.NFT

        self.receiverRef.deposit(token: <- mintedCard )
    }
}"
RDcDEtm8,Untitled,sissou123,HTML,Friday 29th of December 2023 03:02:15 PM CDT,"Learn To Build Beautiful HTML5 And CSS3 Websites In 1 Month
The fastest way to learn HTML5/CSS3 & how to build websites that wow. Great for designers, entrepreneurs, & beginners! 
for more:https://dz-linkk.com/m67OHE
"
