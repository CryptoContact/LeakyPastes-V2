id,title,username,language,date,content
P1xrMUmc,2023-10-29_stats.json,rdp_snitch,JSON,Sunday 29th of October 2023 07:15:08 PM CDT,"{
  ""ip"": {
    ""164.152.166.54"": 3,
    ""198.235.24.42"": 3,
    ""51.75.160.42"": 2,
    ""62.122.184.166"": 4,
    ""162.142.125.12"": 1,
    ""180.93.172.150"": 7,
    ""79.124.62.106"": 1,
    ""62.122.184.168"": 4,
    ""87.251.75.145"": 2,
    ""212.70.149.146"": 5,
    ""185.170.144.3"": 2,
    ""87.251.75.120"": 1,
    ""205.210.31.203"": 3,
    ""103.229.176.140"": 1,
    ""203.192.226.19"": 1,
    ""136.144.35.245"": 1,
    ""83.97.73.94"": 3,
    ""42.112.31.53"": 1,
    ""101.36.121.119"": 1,
    ""212.70.149.142"": 5,
    ""198.235.24.48"": 3,
    ""58.218.204.183"": 3,
    ""185.73.124.228"": 2,
    ""72.190.193.76"": 1,
    ""185.170.144.113"": 1,
    ""103.232.53.123"": 1,
    ""162.142.125.220"": 1,
    ""45.90.158.35"": 1,
    ""45.62.170.27"": 3,
    ""103.255.178.228"": 4,
    ""103.255.178.128"": 2,
    ""51.158.63.184"": 1,
    ""80.66.66.125"": 1,
    ""45.58.38.250"": 1,
    ""66.36.230.41"": 1,
    ""198.235.24.122"": 3,
    ""106.116.169.71"": 1
  },
  ""asn"": {
    ""AS59253"": 3,
    ""AS396982"": 12,
    ""AS16276"": 2,
    ""AS57523"": 8,
    ""AS398324"": 2,
    ""AS135944"": 7,
    ""AS207812"": 1,
    ""AS208091"": 5,
    ""AS204428"": 10,
    ""AS197414"": 3,
    ""AS133453"": 1,
    ""AS17665"": 1,
    ""AS396356"": 1,
    ""AS208312"": 3,
    ""AS18403"": 1,
    ""AS135377"": 1,
    ""AS4134"": 4,
    ""AS11427"": 1,
    ""AS63737"": 1,
    ""AS61226"": 1,
    ""AS396073"": 3,
    ""AS132883"": 6,
    ""AS12876"": 1,
    ""AS51765"": 1,
    ""AS6364"": 1,
    ""AS14361"": 1
  },
  ""isp"": {
    ""Leaseweb Asia Pacific pte. ltd."": 3,
    ""Google LLC"": 12,
    ""OVH SAS"": 2,
    ""Chang Way Technologies Co. Limited"": 8,
    ""Censys, Inc."": 2,
    ""SPT"": 7,
    ""DM AUTO EOOD"": 1,
    ""Xhost Internet Solutions LP"": 8,
    ""SS-Net"": 10,
    ""Mogul Service LLC"": 1,
    ""Entire In2Cable"": 1,
    ""Latitude.sh"": 1,
    ""Red Byte LLC"": 3,
    ""Vietnam Internet Network Information Center"": 1,
    ""UCLOUD INFORMATION TECHNOLOGY (HK) LIMITED"": 1,
    ""Chinanet"": 4,
    ""Charter Communications"": 1,
    ""VIETSERVER"": 1,
    ""Flexiscale Technologies Limited"": 1,
    ""RAM Host"": 3,
    ""Hong Kong San Ai Net Int'l Limited"": 6,
    ""SCALEWAY"": 1,
    ""Oy Crea Nova Hosting Solution Ltd"": 1,
    ""Atlantic.net"": 1,
    ""HopOne Internet Corporation"": 1
  },
  ""org"": {
    ""365 Group LLC"": 3,
    ""Palo Alto Networks, Inc"": 12,
    ""OVH Ltd"": 2,
    ""Chang Way Technologies Co. Limited"": 8,
    ""Censys Inc"": 2,
    ""Saigon Postel Corporation"": 7,
    ""Internet Solutions & Innovations LTD"": 1,
    ""Xhost Internet Solutions"": 4,
    ""4Media Ltd"": 10,
    ""Xhostis"": 5,
    ""Mogul Service and Support Co., Ltd"": 1,
    ""Indusind Media And Communication Ltd."": 1,
    ""Panq B.V"": 1,
    ""Red Byte LLC"": 3,
    ""Unknown"": 1,
    ""UCLOUD INFORMATION TECHNOLOGY (HK) LIMITED"": 1,
    ""Chinanet JS"": 3,
    ""Spectrum"": 1,
    ""VietServer Services technology company limited"": 1,
    ""Cool Data Centres (Lincoln) Limited"": 1,
    ""Ipxo LLC"": 3,
    ""HK New Media Culture Communication Limited"": 6,
    ""ONLINE"": 1,
    ""Atlantic.Net - Santa Clara, CA"": 1,
    ""HopOne Internet Corporation"": 1,
    ""Chinanet HE"": 1
  },
  ""regionName"": {
    ""North East"": 3,
    ""California"": 13,
    ""England"": 5,
    ""Moscow"": 11,
    ""Michigan"": 2,
    ""Hanoi"": 8,
    ""English River"": 1,
    ""Plovdiv"": 10,
    ""North Holland"": 5,
    ""Ulaanbaatar Hot"": 1,
    ""Maharashtra"": 1,
    ""New Jersey"": 1,
    ""Ho Chi Minh"": 1,
    ""Central and Western District"": 1,
    ""Jiangsu"": 3,
    ""Texas"": 4,
    ""Northern Ireland"": 1,
    ""Yau Tsim Mong"": 6,
    ""\u00cele-de-France"": 1,
    ""Uusimaa"": 1,
    ""Virginia"": 1,
    ""Hebei"": 1
  },
  ""country"": {
    ""Singapore"": 3,
    ""United States"": 21,
    ""United Kingdom"": 6,
    ""Russia"": 11,
    ""Vietnam"": 9,
    ""Seychelles"": 1,
    ""Bulgaria"": 10,
    ""Netherlands"": 5,
    ""Mongolia"": 1,
    ""India"": 1,
    ""Hong Kong"": 7,
    ""China"": 4,
    ""France"": 1,
    ""Finland"": 1
  },
  ""account"": {
    ""hello"": 19,
    ""wlccqVSKF"": 1,
    ""goPKCS"": 1,
    ""jhjxkQ"": 1,
    ""Test"": 2,
    ""Domain"": 11,
    ""(empty)"": 5,
    ""Administr"": 18,
    ""SQOYHHdqs"": 1,
    ""qyKTYO"": 1,
    ""LGKWym"": 1,
    ""Administrator"": 1,
    ""pqNuCtRiE"": 1,
    ""mgFuUJ"": 1,
    ""jnScLJ"": 1,
    ""142.93.8.59"": 13,
    ""eiXRyqiVr"": 1,
    ""WjTUHu"": 1,
    ""ezvhFv"": 1
  },
  ""keyboard"": {
    ""Unknown"": 81
  },
  ""client_build"": {
    ""Unknown"": 81
  },
  ""client_name"": {
    ""Unknown"": 81
  },
  ""ip_type"": {
    ""mobile & hosting"": 3,
    ""hosting"": 28,
    ""Unknown"": 46,
    ""proxy"": 4
  }
}"
FSy5wUwH,BTC Wallet Credentials have been reset,castlclass_20,GetText,Sunday 29th of October 2023 06:20:47 PM CDT,"Dear User
We have received a request to reset the login information for your Bitcoin wallet. If you did not make this request, please disregard this message.
Your new login credentials will be 
hefring27:QHWz56 on 212.224.93.130
You can connect via SSH .
Regards"
0M7R1cS9,realoneboy2's Data,azimuths,JSON,Sunday 29th of October 2023 06:18:25 PM CDT,"{""Stats"":{""Key5"":{""ObjectName"":""Key5"",""ObjectClass"":""StringValue"",""ObjectValue"":""5""},""PrimaryCN"":{""ObjectName"":""PrimaryCN"",""ObjectClass"":""IntValue"",""ObjectValue"":""5""},""mapmove1"":{""ObjectName"":""mapmove1"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""TrainingEXP"":{""ObjectName"":""TrainingEXP"",""ObjectClass"":""IntValue"",""ObjectValue"":""29""},""Key12"":{""ObjectName"":""Key12"",""ObjectClass"":""StringValue"",""ObjectValue"":""=""},""Blind"":{""ObjectName"":""Blind"",""ObjectClass"":""NumberValue"",""ObjectValue"":""0""},""CanRank"":{""ObjectName"":""CanRank"",""ObjectClass"":""IntValue"",""ObjectValue"":""1""},""TailedBeastLevel"":{""ObjectName"":""TailedBeastLevel"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""CombatEXP"":{""ObjectName"":""CombatEXP"",""ObjectClass"":""IntValue"",""ObjectValue"":""298""},""Personality"":{""ObjectName"":""Personality"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""GripCount"":{""ObjectName"":""GripCount"",""ObjectClass"":""IntValue"",""ObjectValue"":""4""},""Marking"":{""ObjectName"":""Marking"",""ObjectClass"":""IntValue"",""ObjectValue"":""69""},""SkinColor"":{""ObjectName"":""SkinColor"",""ObjectClass"":""IntValue"",""ObjectValue"":""3""},""RP"":{""ObjectName"":""RP"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""ToggleAccessories"":{""ObjectName"":""ToggleAccessories"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""Slot11"":{""ObjectName"":""Slot11"",""ObjectClass"":""StringValue"",""ObjectValue"":""""},""MSAbility1"":{""ObjectName"":""MSAbility1"",""ObjectClass"":""StringValue"",""ObjectValue"":""0""},""Key8"":{""ObjectName"":""Key8"",""ObjectClass"":""StringValue"",""ObjectValue"":""8""},""LINDAMINISTARTUP"":{""ObjectName"":""LINDAMINISTARTUP"",""ObjectClass"":""IntValue"",""ObjectValue"":""5""},""Slot4"":{""ObjectName"":""Slot4"",""ObjectClass"":""StringValue"",""ObjectValue"":""Leaf Rising Wind""},""Slot9"":{""ObjectName"":""Slot9"",""ObjectClass"":""StringValue"",""ObjectValue"":""""},""Version"":{""ObjectName"":""Version"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""HairColorR"":{""ObjectName"":""HairColorR"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""Key4"":{""ObjectName"":""Key4"",""ObjectClass"":""StringValue"",""ObjectValue"":""4""},""CurseMarkLevel"":{""ObjectName"":""CurseMarkLevel"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""Key2"":{""ObjectName"":""Key2"",""ObjectClass"":""StringValue"",""ObjectValue"":""2""},""Genjutsu"":{""ObjectName"":""Genjutsu"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""SwordSave"":{""ObjectName"":""SwordSave"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""BijuuXP"":{""ObjectName"":""BijuuXP"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""Key3"":{""ObjectName"":""Key3"",""ObjectClass"":""StringValue"",""ObjectValue"":""3""},""BonusSkillPoints"":{""ObjectName"":""BonusSkillPoints"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""CColorB"":{""ObjectName"":""CColorB"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""PosY"":{""ObjectName"":""PosY"",""ObjectClass"":""IntValue"",""ObjectValue"":""176""},""SPR"":{""ObjectName"":""SPR"",""ObjectClass"":""IntValue"",""ObjectValue"":""12""},""BijuuConvo"":{""ObjectName"":""BijuuConvo"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""jincooldown"":{""ObjectName"":""jincooldown"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""Ken"":{""ObjectName"":""Ken"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""Scar"":{""ObjectName"":""Scar"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""Slot12"":{""ObjectName"":""Slot12"",""ObjectClass"":""StringValue"",""ObjectValue"":""""},""RecentTrainings"":{""ObjectName"":""RecentTrainings"",""ObjectClass"":""StringValue"",""ObjectValue"":""[\""Kunai Training\"",\""Kunai Training\"",\""Kunai Training\""]""},""EyeColorR"":{""ObjectName"":""EyeColorR"",""ObjectClass"":""IntValue"",""ObjectValue"":""86""},""HairColorG"":{""ObjectName"":""HairColorG"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""RaidCD"":{""ObjectName"":""RaidCD"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""Slot6"":{""ObjectName"":""Slot6"",""ObjectClass"":""StringValue"",""ObjectValue"":""Water Clone""},""HairColorB"":{""ObjectName"":""HairColorB"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""Gender"":{""ObjectName"":""Gender"",""ObjectClass"":""IntValue"",""ObjectValue"":""1""},""MSAbility2"":{""ObjectName"":""MSAbility2"",""ObjectClass"":""StringValue"",""ObjectValue"":""0""},""Kids"":{""ObjectName"":""Kids"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""SecondaryWep"":{""ObjectName"":""SecondaryWep"",""ObjectClass"":""StringValue"",""ObjectValue"":""Kunai""},""PosZ"":{""ObjectName"":""PosZ"",""ObjectClass"":""IntValue"",""ObjectValue"":""-4221""},""UnlockedCloak"":{""ObjectName"":""UnlockedCloak"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""CloakTime"":{""ObjectName"":""CloakTime"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""BijuuRelation"":{""ObjectName"":""BijuuRelation"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""Prestige"":{""ObjectName"":""Prestige"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""Elo"":{""ObjectName"":""Elo"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""TailedBeastMastered"":{""ObjectName"":""TailedBeastMastered"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""Mangekyo"":{""ObjectName"":""Mangekyo"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""LastGripped"":{""ObjectName"":""LastGripped"",""ObjectClass"":""IntValue"",""ObjectValue"":""489529402""},""LastAge"":{""ObjectName"":""LastAge"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""Key11"":{""ObjectName"":""Key11"",""ObjectClass"":""StringValue"",""ObjectValue"":""-""},""AwakenCD"":{""ObjectName"":""AwakenCD"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""LastStomach"":{""ObjectName"":""LastStomach"",""ObjectClass"":""IntValue"",""ObjectValue"":""440""},""ChakraArmorRGB"":{""ObjectName"":""ChakraArmorRGB"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""Mastered"":{""ObjectName"":""Mastered"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""HandsignTraining"":{""ObjectName"":""HandsignTraining"",""ObjectClass"":""IntValue"",""ObjectValue"":""1""},""WipeLog"":{""ObjectName"":""WipeLog"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""Slot10"":{""ObjectName"":""Slot10"",""ObjectClass"":""StringValue"",""ObjectValue"":""Handsign Training""},""Key9"":{""ObjectName"":""Key9"",""ObjectClass"":""StringValue"",""ObjectValue"":""9""},""Slot5"":{""ObjectName"":""Slot5"",""ObjectClass"":""StringValue"",""ObjectValue"":""""},""Slot7"":{""ObjectName"":""Slot7"",""ObjectClass"":""StringValue"",""ObjectValue"":""Demon Mode""},""RESTORE"":{""ObjectName"":""RESTORE"",""ObjectClass"":""IntValue"",""ObjectValue"":""561""},""TailedBeast"":{""ObjectName"":""TailedBeast"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""GrandParentID"":{""ObjectName"":""GrandParentID"",""ObjectClass"":""StringValue"",""ObjectValue"":""""},""TimesRerolled"":{""ObjectName"":""TimesRerolled"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""CurseMarkEXP"":{""ObjectName"":""CurseMarkEXP"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""HBChoice"":{""ObjectName"":""HBChoice"",""ObjectClass"":""IntValue"",""ObjectValue"":""1""},""WeaponSave"":{""ObjectName"":""WeaponSave"",""ObjectClass"":""StringValue"",""ObjectValue"":""""},""PrimaryWep"":{""ObjectName"":""PrimaryWep"",""ObjectClass"":""StringValue"",""ObjectValue"":""Shuriken""},""OriginalVillage"":{""ObjectName"":""OriginalVillage"",""ObjectClass"":""IntValue"",""ObjectValue"":""3""},""BijuuSealed"":{""ObjectName"":""BijuuSealed"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""Name"":{""ObjectName"":""Name"",""ObjectClass"":""StringValue"",""ObjectValue"":""Real""},""SeenDeaths"":{""ObjectName"":""SeenDeaths"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""LastChakra"":{""ObjectName"":""LastChakra"",""ObjectClass"":""IntValue"",""ObjectValue"":""345""},""Parentq"":{""ObjectName"":""Parentq"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""EyeColorG"":{""ObjectName"":""EyeColorG"",""ObjectClass"":""IntValue"",""ObjectValue"":""133""},""RU"":{""ObjectName"":""RU"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""DateRecord"":{""ObjectName"":""DateRecord"",""ObjectClass"":""IntValue"",""ObjectValue"":""2114""},""logcheck"":{""ObjectName"":""logcheck"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""Slot-"":{""ObjectName"":""Slot-"",""ObjectClass"":""StringValue"",""ObjectValue"":""""},""PrimaryAmmo"":{""ObjectName"":""PrimaryAmmo"",""ObjectClass"":""IntValue"",""ObjectValue"":""12""},""FamilyID"":{""ObjectName"":""FamilyID"",""ObjectClass"":""StringValue"",""ObjectValue"":""Real(44)681694""},""KPos"":{""ObjectName"":""KPos"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""IsExiled"":{""ObjectName"":""IsExiled"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""Slot3"":{""ObjectName"":""Slot3"",""ObjectClass"":""StringValue"",""ObjectValue"":""Leaf Whirlwind""},""ItemSave"":{""ObjectName"":""ItemSave"",""ObjectClass"":""StringValue"",""ObjectValue"":""""},""Blindness"":{""ObjectName"":""Blindness"",""ObjectClass"":""NumberValue"",""ObjectValue"":""0""},""HideName"":{""ObjectName"":""HideName"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""Slot="":{""ObjectName"":""Slot="",""ObjectClass"":""StringValue"",""ObjectValue"":""""},""BerserkTimes"":{""ObjectName"":""BerserkTimes"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""SpentSkillPoints"":{""ObjectName"":""SpentSkillPoints"",""ObjectClass"":""IntValue"",""ObjectValue"":""-5""},""PDLog"":{""ObjectName"":""PDLog"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""Key6"":{""ObjectName"":""Key6"",""ObjectClass"":""StringValue"",""ObjectValue"":""6""},""berserkcheck"":{""ObjectName"":""berserkcheck"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""EyeColorB"":{""ObjectName"":""EyeColorB"",""ObjectClass"":""IntValue"",""ObjectValue"":""2""},""Slot1"":{""ObjectName"":""Slot1"",""ObjectClass"":""StringValue"",""ObjectValue"":""Tanto""},""AnbuLog"":{""ObjectName"":""AnbuLog"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""Key10"":{""ObjectName"":""Key10"",""ObjectClass"":""StringValue"",""ObjectValue"":""0""},""BDAYS"":{""ObjectName"":""BDAYS"",""ObjectClass"":""StringValue"",""ObjectValue"":""0""},""SecondaryAmmo"":{""ObjectName"":""SecondaryAmmo"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""Key1"":{""ObjectName"":""Key1"",""ObjectClass"":""StringValue"",""ObjectValue"":""1""},""AgeLimit"":{""ObjectName"":""AgeLimit"",""ObjectClass"":""IntValue"",""ObjectValue"":""2400""},""Slot2"":{""ObjectName"":""Slot2"",""ObjectClass"":""StringValue"",""ObjectValue"":""Strike""},""WeaveSpeed"":{""ObjectName"":""WeaveSpeed"",""ObjectClass"":""IntValue"",""ObjectValue"":""20""},""DefaultMouth"":{""ObjectName"":""DefaultMouth"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""ResetPos"":{""ObjectName"":""ResetPos"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""SkillPoints"":{""ObjectName"":""SkillPoints"",""ObjectClass"":""IntValue"",""ObjectValue"":""5""},""Rank"":{""ObjectName"":""Rank"",""ObjectClass"":""IntValue"",""ObjectValue"":""4""},""Slot0"":{""ObjectName"":""Slot0"",""ObjectClass"":""StringValue"",""ObjectValue"":""""},""LastKilledUser"":{""ObjectName"":""LastKilledUser"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""Trauma"":{""ObjectName"":""Trauma"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""MissionSuccess"":{""ObjectName"":""MissionSuccess"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""CurrentWep"":{""ObjectName"":""CurrentWep"",""ObjectClass"":""IntValue"",""ObjectValue"":""1""},""LeftEye"":{""ObjectName"":""LeftEye"",""ObjectClass"":""StringValue"",""ObjectValue"":""Default""},""MaxRank"":{""ObjectName"":""MaxRank"",""ObjectClass"":""IntValue"",""ObjectValue"":""24""},""MissionEXP"":{""ObjectName"":""MissionEXP"",""ObjectClass"":""IntValue"",""ObjectValue"":""239""},""RyoRES"":{""ObjectName"":""RyoRES"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""LastHealth"":{""ObjectName"":""LastHealth"",""ObjectClass"":""IntValue"",""ObjectValue"":""225""},""Ryo"":{""ObjectName"":""Ryo"",""ObjectClass"":""IntValue"",""ObjectValue"":""202""},""CColorR"":{""ObjectName"":""CColorR"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""Key7"":{""ObjectName"":""Key7"",""ObjectClass"":""StringValue"",""ObjectValue"":""7""},""MaxAge"":{""ObjectName"":""MaxAge"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""RightEye"":{""ObjectName"":""RightEye"",""ObjectClass"":""StringValue"",""ObjectValue"":""Default""},""Bank"":{""ObjectName"":""Bank"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""startnewlife"":{""ObjectName"":""startnewlife"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""PosX"":{""ObjectName"":""PosX"",""ObjectClass"":""IntValue"",""ObjectValue"":""-126""},""ParentID"":{""ObjectName"":""ParentID"",""ObjectClass"":""StringValue"",""ObjectValue"":""""},""TailedBeastEXP"":{""ObjectName"":""TailedBeastEXP"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""CColorG"":{""ObjectName"":""CColorG"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""MaxTails"":{""ObjectName"":""MaxTails"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""Age"":{""ObjectName"":""Age"",""ObjectClass"":""IntValue"",""ObjectValue"":""15""},""Deaths"":{""ObjectName"":""Deaths"",""ObjectClass"":""IntValue"",""ObjectValue"":""17""},""Village"":{""ObjectName"":""Village"",""ObjectClass"":""IntValue"",""ObjectValue"":""3""},""bald"":{""ObjectName"":""bald"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""SecondaryCN"":{""ObjectName"":""SecondaryCN"",""ObjectClass"":""IntValue"",""ObjectValue"":""2""},""KillStreak"":{""ObjectName"":""KillStreak"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""Slot8"":{""ObjectName"":""Slot8"",""ObjectClass"":""StringValue"",""ObjectValue"":""Pushup Training""},""kek"":{""ObjectName"":""kek"",""ObjectClass"":""IntValue"",""ObjectValue"":""44""},""Influence"":{""ObjectName"":""Influence"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""Title"":{""ObjectName"":""Title"",""ObjectClass"":""StringValue"",""ObjectValue"":""Academy Student""}},""Skilltree"":{""Strike"":{""ObjectName"":""Strike"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""Water Clone"":{""ObjectName"":""Water Clone"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""Demon Mode"":{""ObjectName"":""Demon Mode"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""Leaf Rising Wind"":{""ObjectName"":""Leaf Rising Wind"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""Substitution"":{""ObjectName"":""Substitution"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""1000 Years of Death"":{""ObjectName"":""1000 Years of Death"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""Leaf Whirlwind"":{""ObjectName"":""Leaf Whirlwind"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""}},""Copy"":[]}"
d5khYrSk,algoritmy,Afanas2707,C++,Sunday 29th of October 2023 05:13:12 PM CDT,"#include <iostream>
using namespace std;

void sort(int data[], int n) {
    int* l = new int[n + 1];

    l[0] = n;
    l[n] = 0;

    for (int i = 1; i <= n - 1; i++) {
        l[i] = 0;
    }

    /*for (int i = 0; i < 17; i++) {
        std::cout << l[i] << "" "";
    }*/

    for (int j = n - 1; j >= 1; j--) {
        int q = 0;
        int p = l[0];
        int k = data[j];
        while (p != 0){
            if (k <= data[p]) {
                break;
            }
            else {
                q = p;
                p = l[q];
            }
        }
        l[q] = j;
        l[j] = p;

        /*for (int i = 0; i < 17; i++) {
            std::cout << l[i] << "" "";
        }
        cout << endl;*/
    }

    for (int i = 0; i < 17; i++) {
        std::cout << data[i] << "" "";
    }
    cout << endl;
    for (int i = 0; i < 17; i++) {
        std::cout << l[i] << "" "";
    }

}

int main()
{
    int myArray[] = { 0, 503, 87, 512, 61, 908, 170, 897, 275, 653, 426, 154, 509, 612, 677, 765, 703};

    sort(myArray, 16);

}

"
Vyqp2bzk,ivan_p,zerg959,Python,Sunday 29th of October 2023 05:04:05 PM CDT,"from kivy.app import App
from kivy.uix.screenmanager import ScreenManager, Screen
from kivy.uix.boxlayout import BoxLayout
from kivy.uix.button import Button
from kivy.uix.label import Label
from kivy.uix.textinput import TextInput  # <--потерял импорт
from kivy.uix.scrollview import ScrollView
from kivy.clock import Clock
from seconds import Seconds  # <-- не подключил импорт с Секундами

from instructions import (
    txt_instruction, txt_test1, txt_test2, txt_test3, txt_sits
    )
from ruffier import test

# пропустил 8 строк кода ниже
age = 7
name = """"
p1, p2, p3 = 0, 0, 0


def check_int(str_num):
    try:
        return int(str_num)
    except:
        return False


class InstructionScreen(Screen):
    '''
    class for insruction screen 
    '''
    def __init__(self, **kwargs):
        super().__init__(**kwargs)
        instr = Label(text=txt_instruction)  # <--потерял знак равно
        name_label = Label(text='Введите имя:', halign='right')
        self.in_name = TextInput(multiline=False)
        age_label = Label(text='Введите возраст', halign='left')
        self.in_age = TextInput(multiline=False)

        self.btn = Button(
            text='начать',
            size_hint=(0.3, 0.2),
            pos_hint={'center_x': 0.5}
        ) 
        self.btn.on_press = self.next


        line1 = BoxLayout(
            size_hint=(0.8, None),
            height='30sp'
        )
        line2 = BoxLayout(
            size_hint=(0.8, None),
            height='30sp'
        )
        line1.add_widget(name_label)
        line1.add_widget(self.in_name)
        line2.add_widget(age_label)
        line2.add_widget(self.in_age)
        outer = BoxLayout(
            orientation='vertical',
            padding=8,
            spacing=8)
        outer.add_widget(instr)
        outer.add_widget(line1)
        outer.add_widget(line2)
        outer.add_widget(self.btn)
        self.add_widget(outer)


    def next(self):
        name = self.in_name.text
        age = check_int(self.in_age.text)
        if age == False or age < 7:
            age = 7
            self.in_age.text = str(age)
        else:
            self.manager.current = 'pulse1'

# немного дополнил твой класс, тот, который был у тебя - совсем приболел
class PulseScr(Screen):
    def __init__(self, **kwargs):
        super().__init__(**kwargs)
        self.next_screen = False

        instr = Label(text=txt_test1)
        self.lbl_sec = Seconds(15)
        self.lbl_sec.bind(done=self.sec_finished)

        line = BoxLayout(size_hint=(0.8, None), height='30sp')
        lbl_result = Label(text='Введите результат:', halign='right')
        self.in_result = TextInput(text='0', multiline=False)
        self.in_result.set_disabled(True)

        line.add_widget(lbl_result)
        line.add_widget(self.in_result)
        self.btn = Button(text='Начать', size_hint=(0.3, 0.4), pos_hint={'center_x': 0.5})
        # self.btn.background_color = btn_color
        self.btn.on_press = self.next
        outer = BoxLayout(orientation='vertical', padding=8, spacing=8)
        outer.add_widget(instr)
        # outer.add_widget(lbl1)
        outer.add_widget(self.lbl_sec)
        outer.add_widget(line)
        outer.add_widget(self.btn)
        self.add_widget(outer)

    def sec_finished(self, *args):
        self.next_screen = True
        self.in_result.set_disabled(False)
        self.btn.set_disabled(False)
        self.btn.text = 'Продолжить'

    def next(self):
        if not self.next_screen:
            self.btn.set_disabled(True)
            self.lbl_sec.start()
        else:
            global p1
            p1 = check_int(self.in_result.text)
            if p1 == False or p1 <= 0:
                p1 = 0
                self.in_result.text = str(p1)
            else:
                self.manager.current = 'sits'

# тут всё запускается, у тебя пропущено
class HeartCheck(App):
    def build(self):
        sm = ScreenManager()
        sm.add_widget(InstructionScreen(name='instr'))
        sm.add_widget(PulseScr(name='pulse1'))
      # sm.add_widget(CheckSits(name='sits'))
      # sm.add_widget(PulseScr2(name='pulse2'))
      # sm.add_widget(Result(name='result'))
        return sm
app = HeartCheck()
app.run()
"
abZry3ZW,daniil_i,zerg959,Python,Sunday 29th of October 2023 04:35:41 PM CDT,"# напиши здесь свое приложение
from kivy.app import App
from kivy.uix.screenmanager import ScreenManager, Screen
from kivy.uix.button import Button
from kivy.uix.boxlayout import BoxLayout
from kivy.uix.label import Label
from kivy.uix.textinput import TextInput
from kivy.core.window import Window
from kivy.uix.scrollview  import ScrollView
from instructions import (
    txt_instruction, txt_test1, txt_test2, txt_test3, txt_sits
    )
from ruffier import test
from seconds import Seconds

age = 7
name = """"
p1, p2, p3 = 0, 0, 0
# lost func below
def check_int(str_num):
   # возвращает число или False, если строка не конвертируется
   try:
       return int(str_num)
   except:
       return False

class InstructionScreen(Screen):
    def __init__(self, **kwargs):
        super().__init__(**kwargs)  # <<-- lost brackets after 'super'
        instr = Label(text = txt_instruction)
        name_label = Label(text = 'Введите имя:', halign = 'right')
        self.in_name = TextInput(multiline = False)
        age_label = Label(text = 'Введите возраст:', halign = 'right')
        self.in_age = TextInput(multiline = False)
        self.btn = Button(
            text = 'Начать',
            size_hint = (0.3, 0.2),
            pos_hint = {'center_x' : 0.5}
        )
        self.btn.on_press = self.next  # <--wrong syntax
        line1 = BoxLayout(
            size_hint = (0.8, None),
            height='30sp'
        )
        line2 = BoxLayout(
            size_hint = (0.8, None),
            height='30sp'
        )
        line1.add_widget(name_label)
        line1.add_widget(self.in_name)
        line2.add_widget(age_label)
        line2.add_widget(self.in_age)
        outer = BoxLayout(
            orientation = 'vertical',
            padding = 8,
            spacing = 8
        )
        outer.add_widget(instr)
        outer.add_widget(line1)
        outer.add_widget(line2)
        outer.add_widget(self.btn)
        self.add_widget(outer)

    def next(self):
        name = self.in_name.text
        age = check_int(self.in_age.text)
        if age == False or age < 7:
            age = 7
            self.in_age.text = str(age)
        else:
            self.manager.current = 'pulse1'



class PulseScr(Screen):
    def __init__(self, **kwargs):
        super().__init__(**kwargs)  # <<--- dont need 'self'
        self.next_screen = False

        instr = Label(text = txt_test1)
        #name = Label(text = 'Считайте пульс')
        #self.lbl_sec = Seconds(15)
        #self.lbl_sec.bindz(done = self.sec_finished)

        line = BoxLayout(
            size_hint = (0.8, None),
            height = '30sp'
        )
        lbl_result = Label(
            text = 'Введите результат:',
            halign = 'right'
        )
        self.in_result = TextInput(
            text = '0',
            multiline = False
        )
        self.in_result.set_disabled(True)
        
        line.add_widget(lbl_result)
        line.add_widget(self.in_result)
        self.btn = Button(
            text = 'Начать',
            size_hint = (0.3, 0.4),
            pos_hint = {center_x: 0.5}
        )
        self.btn.on_press = self.next
        outer = BoxLayout(
            orientation = 'vertical',
            padding = 8,
            spacing = 8
        )
# lost block of code below
        outer.add_widget(instr)
#        outer.add_widget(self.lbl_sec)
        outer.add_widget(line)
        outer.add_widget(self.btn)

    def sec_finished(self, *args):  # <--lost indents
        self.next_screen = True
        self.in_result.set_disabled(False)
        self.btn.set_disabled(False)
        self.btn.text = 'Продолжить'

    def next(self):
        if not self.next_screen:
            self.btn.set_disabled(True)  # lost indents




class CheckSits(Screen):
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)
        self.btn = Label(text=txt_sits)
        self.btn = Button(text='Продолжить',
                        size_hint = (0.3, 0.2),
                        pos_hint = {center_x : 0.5}
                        )
        self.btn.on_press = self.next
        outer = BoxLayout(orietation = 'vertical',
                          padding=8, spacing=8)
        outer.add_widget(instr)
        outer.add_widget(self.btn)
        self.add_widget(outer)
    def next(self):
        self.manager.current = 'pulse2'




class PulseScr2(Screen):
    def __init__(self, **kwargs):
        self.next_screen = False
        self.stage = 0
        super().__init__(**kwargs)

        instr = Label(text=txt_test3)
        line1 = BoxLayout(
            size_hint = (0.8, None),
            height='30sp')
        self.lbl_sec = Seconds(15)
        self.lbl_sec.bind(done=self.sec_finished)
        self.lbl1 = Label(text='Считайте пульс')

        lbl_result1 = Label(text='Результат:',
                            halign = 'right')
        self.in_result1 = TextInput(text = '0',
                                    multiline=False)
        line1.add_widget(lbl_result1)
        line1.add_widget(self.in_result1)
        line2 = BoxLayout(size_hint = (0.8, None),
                          height='30sp')
        lbl_result2 = Label(text='Результат после отдыха:',
                            halign='right')
        self.in_result2 = TextInput(text='0',
                                    multiline=False)

        self.in_result1.set_disabled(True)
        self.in_result2.set_disabled(True)
        line2.add_widget(lbl_result2)
        line2.add_widget(self.in_result2)
        self.btn.on_press = self.next
        outer = BoxLayout(orientation='vertical',
                          padding=8,
                          spacing=8)
        outer.add_widget(instr)
        outer.add_widget(self.lbl1)
        outer.add_widget(self.lbl_sec)
        outer.add_widget(line1)
        outer.add_widget(line2)
        outer.add_widget(self.btn)
        self.add_widget(outer)



    def sec_finished(self, *args):
        if swelf.lbl_sec.done:
            if self.stage == 0:
                #закончили первый подсчёт, отдыхаем
                self.stage = 1
                self.lbl1.text = 'Отдыхайте'
                self.lbl_sec.restart(30)
                self.in_result1.set_disabled(False)
            elif self.stage == 1:
                #закончили отдых, считаем
                self.stage = 2
                self.lbl.text = 'Считайте пульс'
                self.lbl_sec.restart(15)
            elif self.stage == 2:
                self.in_result2.set_disabled(False)
                self.btn.set_disabled(False)
                self.btn.text = 'Завершить'
                self.next_screen = True



    def next(self):
        if not self.next_screen:
            self.btn.set_disabled(True)
            self.lbl_sec.start()
        else:
            global p2, p3
            p2 = check_int(self.in_result1.text)
            p3 = check_int(self.in_result2.text)
            if p2 == False:
                p2 = 0
                self.in_result1.text = str(p2)
            elif p3 == False:
                p3 = 0
                self.in_result2.text = str(p3)
            else:
                #переходим
                self.manager.current = 'result'





class HeartCheck(App):
    def build(self):
        sm = ScreenManager()
        sm.add_widget(InstructionScreen(name = 'instr'))
        #sm.add_widget(CheckSits(name = 'sits'))
        #sm.add_widget(PulseScr2(name = 'pulse2'))
        #sm.add_widget(Result(name = 'result'))
        return sm

app = HeartCheck()
app.run()  #  <-- lost brackets"
xF44JL8J,Machine Learning II - exercise 2 - AdaBoost_GradientBoosting,Nam_Hoang_Waw,Python,Sunday 29th of October 2023 04:28:09 PM CDT,"# -*- coding: utf-8 -*-
""""""
Created on Sat Oct 28 23:46:48 2023

@author: Lenovo
""""""

from sklearn.datasets import load_breast_cancer
from sklearn.model_selection import train_test_split
import matplotlib.pyplot as plt
import numpy as np
import pandas as pd
import seaborn as sns
from  sklearn.ensemble import RandomForestClassifier as rfc
from sklearn.feature_selection import RFECV
from sklearn.preprocessing import StandardScaler
from collections import Counter
from sklearn.feature_selection import RFE
from sklearn.linear_model import LogisticRegression
from sklearn.model_selection import StratifiedKFold
import statsmodels.api as sm
from mlxtend.feature_selection import SequentialFeatureSelector
from sklearn_genetic import GASearchCV
from sklearn.ensemble import AdaBoostClassifier
from sklearn.ensemble import GradientBoostingClassifier
from skopt import BayesSearchCV
import optuna
from sklearn.feature_selection import SelectFromModel
from sklearn.metrics import roc_auc_score
from sklearn.metrics import f1_score
from sklearn.metrics import roc_curve
from sklearn.metrics import precision_score
from sklearn.metrics import accuracy_score
from sklearn.metrics import precision_recall_curve

precision_recall_curve
# Load breast cancer data
data = load_breast_cancer()
feature_names = data.feature_names
print(data.DESCR)

df = pd.DataFrame(data.data, columns=data.feature_names)

df.isnull().sum()
df.isna().sum()
df['target'] = data.target

df['target'].value_counts()[1] # number of target = 357
df['target'].value_counts()[0] # number of non target = 212

# Splitting the training vs. testing data based on 30-70% ratio
X_train, X_test, y_train, y_test = train_test_split(df.drop(columns=['target']), df['target'], test_size=0.2, random_state=1)

X_train, X_val, y_train, y_val = train_test_split(X_train, y_train, test_size=0.15, random_state=1)

# Feature scaling:
sc = StandardScaler()
X_train = sc.fit_transform(X_train)
X_val = sc.fit_transform(X_val)
X_test = sc.transform(X_test)   

X_train = pd.DataFrame(X_train, columns=df.drop(columns=['target']).columns)
X_val = pd.DataFrame(X_val, columns=df.drop(columns=['target']).columns)
X_test = pd.DataFrame(X_test, columns=df.drop(columns=['target']).columns)

f,ax = plt.subplots(figsize=(18, 18))
sns.heatmap(X_train.corr(method='spearman'), annot=True, linewidths=.5, fmt= '.1f',ax=ax)

# There are quite a lot of variables that are highly correlated => This suggests omission of some variables to avoid 
# instability of a model on testing dataset.

# feature selection:

    # Using recursive feature elimination with random forest classifier to decide the max number of features for logistic regression
number_of_random_states = 30
average_optimal = np.zeros(30)

i = 0
for rs in range(number_of_random_states):
    rf_classifier = rfc(random_state = rs)
    rfecv = RFECV(estimator=rf_classifier, step=1, cv=5, scoring='f1')
    rfecv = rfecv.fit(X_train, y_train)
    average_optimal += np.asarray(rfecv.cv_results_[""mean_test_score""])
    i = i + 1
    print ('progress ' + str(round(i/number_of_random_states*100)) + '%')
    
average_optimal /= number_of_random_states    
plt.plot(range(1, len(rfecv.cv_results_['mean_test_score']) + 1), average_optimal)
print(""Number of features selected :"", np.argmax(average_optimal)+1)
print(""Evaluation of the optimal f1 :"", np.max(average_optimal))
plt.show()

# Number of features selected : 15

    # List of top 15 features chosen by REFECV    
most_appearing_features = []

for rs in range(10):
    rf_classifier = rfc(random_state=rs)      
    rfe = RFE(estimator=rf_classifier, n_features_to_select=15, step=1)
    rfe = rfe.fit(X_train, y_train)
    most_appearing_features.append(X_train.columns[rfe.support_].tolist())
most_appearing_features = [item for sublist in most_appearing_features for item in sublist]

print('Most appearing features :')
Counter(most_appearing_features).most_common(15)

# [('mean radius', 10),
# ('mean texture', 10),
# ('mean area', 10),
# ('mean concavity', 10),
# ('mean concave points', 10),
# ('area error', 10),
# ('worst radius', 10),
# ('worst texture', 10),
# ('worst perimeter', 10),
# ('worst area', 10),
# ('worst smoothness', 10),
# ('worst concavity', 10),
# ('worst concave points', 10),
# ('mean perimeter', 9),
# ('worst compactness', 9)]

# Construct correlation matrix of the top 15 features:
X_train_selected = X_train[['mean radius', 'mean texture', 'mean area', 'mean concavity', 'mean concave points',
                            'area error', 'worst radius', 'worst texture', 'worst perimeter', 'worst area', 'worst smoothness',
                            'worst concavity', 'worst concave points', 'mean perimeter', 'worst compactness']]

    
f,ax = plt.subplots(figsize=(18, 18))
sns.heatmap(X_train_selected.corr(method='spearman'), annot=True, linewidths=.5, fmt= '.1f',ax=ax)

# Fitting these 15 features to the logit model from statsmodels library to check if all of them are statistically significant
X = X_train_selected
Y = y_train.reset_index()
Y = Y['target']
logit_model = sm.Logit(Y, X)
logit_result = logit_model.fit(method=""nm"", maxiter=5000)
print(logit_result.summary2())

# mean texture, mean concavity, mean concave points, worst perimeter, worst smoothness are statistically significant

X_train_selected_final = X_train[['mean concave points', 'worst perimeter', 'worst smoothness', 'mean concave points',
                                          'mean concavity']]

X_test_selected = X_test[['mean concave points', 'worst perimeter', 'worst smoothness', 'mean concave points',
                                          'mean concavity']]

X_val_selected = X_val[['mean concave points', 'worst perimeter', 'worst smoothness', 'mean concave points',
                                          'mean concavity']]

# Creating logistic model using sklearn based on the selected variables:
model = LogisticRegression(solver='liblinear', max_iter=500, penalty = 'l1')
model.fit(X_train_selected_final, Y)
coefficients = model.coef_

y_pred = model.predict(X_train_selected)
f1_in_sample = f1_score(y_train, y_pred) 
print(f""F1 Score on Test Set: {f1_in_sample:.3f}"") # in sample F1 score = 0.975

y_pred = model.predict(X_test_selected)
f1_out_sample = f1_score(y_test, y_pred)
print(f""F1 Score on Test Set: {f1_out_sample:.3f}"") # out-of-sample F1 score = 0.959

# Hyperparameter tunning with Optuna:

def logit_objective(trial: optuna.trial.Trial):
    C = trial.suggest_float(""C"", 0.001, 10)
    penalty = trial.suggest_categorical(""penalty"", [""l1"", ""l2""])    
    model = LogisticRegression(solver='liblinear', C=C, penalty=penalty)
    model.fit(X_train_selected, y_train)
    
    y_pred = model.predict(X_val_selected)
    f1 = f1_score(y_val, y_pred)
    
    return f1

sampler = optuna.samplers.TPESampler(seed=999)
study = optuna.create_study(direction=""maximize"", sampler=sampler)
study.optimize(logit_objective, n_trials=100)

print(""Number of finished trials: "", len(study.trials))
print(""Best trial:"")
trial = study.best_trial
print(""  Value: "", trial.value)
print(""  Params: "")
for key, value in trial.params.items():
    print(""    {}: {}"".format(key, value))

# Best trial:
#  Value:  0.9772727272727273
#  Params: 
#    C: 8.0344769727568
#    penalty: l1

logistic_model = LogisticRegression(solver='liblinear', penalty= trial.params[""penalty""], C = trial.params[""C""], max_iter=10000, random_state=0)
logistic_model_fit = logistic_model.fit(X_train_selected, y_train)
y_prob = logistic_model_fit.predict_log_proba(X_test_selected)[:, 1]
precision, recall, _ = precision_recall_curve(y_test, y_prob)

plt.figure(figsize=(8, 6))
plt.plot(recall, precision, marker='.')
plt.xlabel('Recall')
plt.ylabel('Precision')
plt.title('Precision-Recall Curve')
plt.show()


y_pred = logistic_model.predict(X_train_selected)
f1_in_sample = f1_score(y_train, y_pred) 
print(f""F1 Score on Test Set: {f1_in_sample:.3f}"") # in sample F1 score = 0.975


y_pred = logistic_model.predict(X_test_selected)
f1_out_sample = f1_score(y_test, y_pred)
print(f""F1 Score on Test Set: {f1_out_sample:.3f}"") # out of sample F1 score = 0.959

# Look like there is no improvement on both in sample and out of sample performance after hyperparameter tunning

############### ADA BOOST ###############

# Fiting AdaBoost model with default hyperparameter:
    
ada_model = AdaBoostClassifier(random_state=1)
ada_model.fit(X_train, y_train)

# In sample F1 score
y_pred = ada_model.predict(X_train)
print(f1_score(y_train, y_pred)) # f1_score = 1.0

# Out of sample F1 score
y_pred = ada_model.predict(X_test)
print(f1_score(y_test, y_pred)) # f1_score = 0.95238

# Hyperparameter tunning using Optuna:
    
def ADA_objective(trial):
    n_estimators = trial.suggest_int(""n_estimators"", 50, 500)
    learning_rate = trial.suggest_float(""learning_rate"", 0.01, 1.0, log=True)
    model = AdaBoostClassifier(n_estimators=n_estimators, learning_rate=learning_rate, random_state=1)
    model.fit(X_train, y_train)
    y_pred = model.predict(X_val)
    return f1_score(y_val, y_pred)

sampler = optuna.samplers.TPESampler(seed=1)
study = optuna.create_study(direction=""maximize"", sampler=sampler)
study.optimize(ADA_objective, n_trials=100)

print(""Number of finished trials: "", len(study.trials))
print(""Best trial:"")
trial = study.best_trial
print(""  Value: "", trial.value)
print(""  Params: "")
for key, value in trial.params.items():
    print(""    {}: {}"".format(key, value))
    
# Best trial:
#  Value:  0.98876
#  Params: 
#    n_estimators: 238
#    learning_rate: 0.2758347554916674

ada_model = AdaBoostClassifier(n_estimators=trial.params[""n_estimators""], learning_rate=trial.params[""learning_rate""], random_state=1)
ada_model.fit(X_train, y_train)

feature_importances = ada_model.feature_importances_
sorted_idx = feature_importances.argsort()[::-1]

plt.figure(figsize=(10, 6))
plt.bar(range(X_train.shape[1]), feature_importances[sorted_idx], align=""center"")
plt.xticks(range(X_train.shape[1]), data.feature_names[sorted_idx], rotation=90)
plt.xlabel(""Feature"")
plt.ylabel(""Feature Importance"")
plt.title(""Feature Importances in AdaBoost Model"")
plt.show()

# mean perimeter, smoothness error, mean smoothness and mean radius has feature importance = 0!!

y_pred = ada_model.predict(X_test)

print(f1_score(y_test, y_pred)) # f1_score = 0.97260

# construct correlation matrix of the remaining features

X_train_selected_features = X_train.drop(columns=['mean perimeter', 'smoothness error', 'mean smoothness', 'mean radius'])

f,ax = plt.subplots(figsize=(18, 18))
sns.heatmap(X_train_selected_features.corr(method='spearman'), annot=True, linewidths=.5, fmt= '.1f',ax=ax)

# radius error has almost perfect correlation with area error => drop radius error as it has lower feature importance score
# worst perimeter, worst area, mean area have almost perfect correlation with worst radius => drop those 3 as they have lower feature importance score

X_train_selected_features = X_train.drop(columns=['mean perimeter', 'smoothness error', 'mean smoothness', 'mean radius',
                                                  'radius error', 'worst perimeter', 'worst area', 'mean area'])

X_test_selected_features = X_test.drop(columns=['mean perimeter', 'smoothness error', 'mean smoothness', 'mean radius',
                                                  'radius error', 'worst perimeter', 'worst area', 'mean area'])

X_val_selected_features = X_val.drop(columns=['mean perimeter', 'smoothness error', 'mean smoothness', 'mean radius',
                                                  'radius error', 'worst perimeter', 'worst area', 'mean area'])


    # Hyperparameter tunning on selected features:
def ADA_objective(trial):
    n_estimators = trial.suggest_int(""n_estimators"", 50, 500)
    learning_rate = trial.suggest_float(""learning_rate"", 0.01, 1.0, log=True)
    model = AdaBoostClassifier(n_estimators=n_estimators, learning_rate=learning_rate, random_state=1)
    model.fit(X_train_selected_features, y_train)
    y_pred = model.predict(X_val_selected_features)
    return f1_score(y_val, y_pred)

sampler = optuna.samplers.TPESampler(seed=1)
study = optuna.create_study(direction=""maximize"", sampler=sampler)
study.optimize(ADA_objective, n_trials=100)

print(""Number of finished trials: "", len(study.trials))
print(""Best trial:"")
trial = study.best_trial
print(""  Value: "", trial.value)
print(""  Params: "")
for key, value in trial.params.items():
    print(""    {}: {}"".format(key, value))
    
# Best trial:
#  Value:  0.98876 an imporovement in in-sample f1 score
#  Params: 
#    n_estimators: 142
#    learning_rate: 0.5704727088203682

ada_model = AdaBoostClassifier(n_estimators=trial.params[""n_estimators""], learning_rate=trial.params[""learning_rate""], random_state=1)
ada_model.fit(X_train_selected_features, y_train)

feature_importances = ada_model.feature_importances_
sorted_idx = feature_importances.argsort()[::-1]

plt.figure(figsize=(10, 6))
plt.bar(range(X_train_selected_features.shape[1]), feature_importances[sorted_idx], align=""center"")
plt.xticks(range(X_train_selected_features.shape[1]), ada_model.feature_names_in_, rotation=90)
plt.xlabel(""Feature"")
plt.ylabel(""Feature Importance"")
plt.title(""Feature Importances in ADA Boost Model"")
plt.show()

y_pred = ada_model.predict(X_test_selected_features)

print(f1_score(y_test, y_pred)) # out-of-sample f1_score = 0.95890 which is worse than f1_score = 0.97260 before dropping features

############### GRADIENT BOOSTING ###############

# Fiting GBM model with default hyperparameter:
    
GB_model = GradientBoostingClassifier(random_state=1)
GB_model.fit(X_train, y_train)

# In sample F1 score
y_pred = GB_model.predict(X_train)
print(f1_score(y_train, y_pred)) # f1_score = 1.0

# Out of sample F1 score
y_pred = GB_model.predict(X_test)
print(f1_score(y_test, y_pred)) # f1_score = 0.9517

# Using Hyperparameter tunning from Optuna library

def GBM_objective(trial):
    n_estimators = trial.suggest_int(""n_estimators"", 50, 500)
    learning_rate = trial.suggest_float(""learning_rate"", 0.001, 1.0, log=True)
    max_depth = trial.suggest_int(""max_depth"", 2, 10)
    subsample = trial.suggest_float(""subsample"", 0.1, 1.0, step = 0.1)
    model = GradientBoostingClassifier(n_estimators=n_estimators, learning_rate=learning_rate, 
                                       max_depth=max_depth, subsample=subsample, random_state=1)
    model.fit(X_train, y_train)
    y_pred = model.predict(X_val)
    return f1_score(y_val, y_pred)

sampler = optuna.samplers.TPESampler(seed=1)
study = optuna.create_study(direction=""maximize"", sampler=sampler)
study.optimize(GBM_objective, n_trials=100)

print(""Number of finished trials: "", len(study.trials))
print(""Best trial:"")
trial = study.best_trial
print(""  Value: "", trial.value)
print(""  Params: "")
for key, value in trial.params.items():
    print(""    {}: {}"".format(key, value))
    
# Best trial:
#  Value:  1.0
#  Params: 
#    n_estimators: 98
#    learning_rate: 0.5257150170904044
#    max_depth: 4
#    subsample: 0.9

GB_model = GradientBoostingClassifier(n_estimators=trial.params[""n_estimators""], 
                                       learning_rate=trial.params[""learning_rate""], 
                                       max_depth = trial.params[""max_depth""],
                                       subsample = trial.params[""subsample""], random_state=1)
GB_model.fit(X_train, y_train)

# Visualize the feature importances in the model
feature_importances = GB_model.feature_importances_
sorted_idx = feature_importances.argsort()[::-1]

plt.figure(figsize=(10, 6))
plt.bar(range(X_train.shape[1]), feature_importances[sorted_idx], align=""center"")
plt.xticks(range(X_train.shape[1]), data.feature_names[sorted_idx], rotation=90)
plt.xlabel(""Feature"")
plt.ylabel(""Feature Importance"")
plt.title(""Feature Importances in Gradient Boosting Model"")
plt.show()

# Based on the feature importance graph, worst perimeter, worse concave points, worst texture, mean concave points, concave points error and worst radius are the most important features
# Lets build a correlation matrix to see if among the top features, there exists any pair with high correlation

X_train_selected_features = X_train[['worst perimeter', 'worst concave points', 'worst texture', 'mean concave points', 'concave points error', 'worst radius']]

f,ax = plt.subplots(figsize=(18, 18))
sns.heatmap(X_train_selected_features.corr(method='spearman'), annot=True, linewidths=.5, fmt= '.1f',ax=ax)
# worst radius has perfect correlation with worse perimeter and given worst perimeter has the highest importance value, we then drop worst radius
# Final selected variables: 'worst perimeter', 'worst concave points', 'worst texture', 'mean concave points', 'concave points error'

# Before using the selected variables, we could check for out-of-sample result based on current model specification
y_pred = GB_model.predict(X_test)

print(f1_score(y_test, y_pred)) # f1_score = 0.9726

# Building GBM based on selected features:
    #Selected features based on spearman correlation analysis:
X_train_selected_features = X_train[['worst perimeter', 'worst concave points', 'worst texture', 'mean concave points', 'concave points error']]    
X_test_selected_features = X_test[['worst perimeter', 'worst concave points', 'worst texture', 'mean concave points', 'concave points error']]
X_val_selected_features = X_val[['worst perimeter', 'worst concave points', 'worst texture', 'mean concave points', 'concave points error']]

    # Hyperparameter tunning on selected features:
def GBM_objective(trial):
    n_estimators = trial.suggest_int(""n_estimators"", 50, 500)
    learning_rate = trial.suggest_float(""learning_rate"", 0.001, 1.0, log=True)
    max_depth = trial.suggest_int(""max_depth"", 2, 10)
    subsample = trial.suggest_float(""subsample"", 0.1, 1.0, step = 0.1)
    model = GradientBoostingClassifier(n_estimators=n_estimators, learning_rate=learning_rate, 
                                       max_depth=max_depth, subsample=subsample, random_state=1)
    model.fit(X_train_selected_features, y_train)
    y_pred = model.predict(X_val_selected_features)
    return f1_score(y_val, y_pred)

sampler = optuna.samplers.TPESampler(seed=1)
study = optuna.create_study(direction=""maximize"", sampler=sampler)
study.optimize(GBM_objective, n_trials=100)

print(""Number of finished trials: "", len(study.trials))
print(""Best trial:"")
trial = study.best_trial
print(""  Value: "", trial.value)
print(""  Params: "")
for key, value in trial.params.items():
    print(""    {}: {}"".format(key, value))

# Best trial:
#  Value:  1.0
#  Params: 
#    n_estimators: 359
#    learning_rate: 0.31906341975134206
#    max_depth: 2
#    subsample: 0.8

GB_model = GradientBoostingClassifier(n_estimators=trial.params[""n_estimators""], 
                                       learning_rate=trial.params[""learning_rate""], 
                                       max_depth = trial.params[""max_depth""],
                                       subsample = trial.params[""subsample""], random_state=1)
GB_model.fit(X_train_selected_features, y_train)

feature_importances = GB_model.feature_importances_
sorted_idx = feature_importances.argsort()[::-1]

plt.figure(figsize=(10, 6))
plt.bar(range(X_train_selected_features.shape[1]), feature_importances[sorted_idx], align=""center"")
plt.xticks(range(X_train_selected_features.shape[1]), GB_model.feature_names_in_, rotation=90)
plt.xlabel(""Feature"")
plt.ylabel(""Feature Importance"")
plt.title(""Feature Importances in Gradient Boosting Model"")
plt.show()

y_pred = GB_model.predict(X_test_selected_features)

print(f1_score(y_test, y_pred)) # f1_score = 0.9796 => better than f1_score = 0.9726 (before dropping worst radius)

############# MODEL COMPARISON #############

# Comparison of performance is done by comparing out of sample F1-score before and after hyperparameter tunning:

    # Logistic model with default hyperparameter + feature selection: 0.952
    # Logistic model after hyperparameter tunning + feature selection: 0.952
    
    # AdaBoost model with default hyperparameter: 0.95238
    # AdaBoost model after hyperparameter tunning: 0.97260
    # AdaBoost model after hyperparameter tunning + feature selection: 0.9589
    
    # GB model with default hyperparameter: 0.9517
    # GB model after hyperparameter tunning: 0.9726
    # GB model after hyperparameter tunning + feature selection: 0.9796

# Both AdaBoost and GB perform better than Logistic Regression after hyperparameter tunning and feature selection
# which is evident in higher F1 score of both Boosting models than that of logistic regression

# hyperparameter tunning has positive impact on both AdaBoost and Gradient Boosting models as the F1 score increased
# slightly after tunning took place. On the other hand, hyperparameter has almost no impact on logistic model. Perhaps,
# logistic model has much simpler hyperparameters compared to the other

# Feature selection based on feature importance + spearman correlation has positive impact on Gradient Boosting while it
# has negative impact on AdaBoost and almost no impact on logistic model."
9dCD65Ev,viktor_v,zerg959,Python,Sunday 29th of October 2023 04:19:25 PM CDT,"
from kivy.app import App

from kivy.uix.button import Button

from kivy.uix.label import Label

from kivy.uix.boxlayout import BoxLayout

from kivy.uix.screenmanager import ScreenManager, Screen

from kivy.uix.textinput import TextInput

from kivy.core.window import Window

from instructions import (
    txt_instruction, txt_test1, txt_test2, txt_test3, txt_sits
)

from ruffier import test

from seconds import Seconds

p1, p2, p3 = 0, 0, 0
name = ''
age = 7

def check_int(str_num):
    try:
        return int(str_num)
    except:
        return False

class FirstScr(Screen):
    def __init__(self, **kwargs):
        super().__init__(**kwargs)
        instr = Label(text = txt_instruction)
        lbl_name = Label(text = 'Введите имя:')
        self.in_name = TextInput(multiline = False)
        lbl_age = Label(text = 'Введите возраст:') 
        self.in_age = TextInput(multiline = False)
        self.btn = Button(
            text='Начать', 
            size_hint = (0.3, 0.2), 
            pos_hint = {'center_x':0.5}
            )
        self.btn.on_press = self.next
        #self.add_widget(self.btn)

        line1 = BoxLayout(
            size_hint=(0.8, None),
            height = '30sp')

        line2 = BoxLayout(
            size_hint=(0.8, None),
            height = '30sp')
        line1.add_widget(lbl_name)
        line1.add_widget(self.in_name)
        line2.add_widget(lbl_age)
        line2.add_widget(self.in_age)

        outer = BoxLayout(
            orientation='vertical',
            padding=8,
            spacing=8
           )

        outer.add_widget(instr)
        outer.add_widget(line1)
        outer.add_widget(line2)
        outer.add_widget(self.btn) 
        self.add_widget(outer)
        

    def next(self):
        name = self.in_name.text
        age = check_int(self.in_age.text)
        if age == False or age < 7:
            age = 7
            self.in_age.text = str(age)
        else:
            self.manager.current = 'pulse1'

class SecondScr(Screen):
    def __init__(self, **kwargs):
        super().__init__(**kwargs)
        self.next_screen = False

        instr = Label(text = txt_test1)
        lbl1 = Label(text = 'Считайте пульс')
        self.lbl_sec = Seconds(15)
#        self.lbl_sec = bind(done = self.sec_finished)

        line = BoxLayout(
            size_hint=(0.8, None),
            height = '30sp')

        lbl_rslt = Label(
            text = 'Введите результат:',
            halign = 'right'
        )

        self.in_result = TextInput(text='0',multiline = False)
        self.in_result.set_disabled(True)

        line.add_widget(lbl_rslt)
        line.add_widget(self.in_result)
        self.btn = Button(
            text = 'Начать',
            size_hint = (0.3, 0.4),
            pos_hint = {'center_x': 0.5}
            )

        self.btn.on_press = self.next
        outer = BoxLayout(
            orientation = 'vertical',
            padding = 8,
            spacing = 8
        )

        outer.add_widget(instr)
        #outer.add_widget(self.lbl_sec)
        outer.add_widget(line)
        outer.add_widget(self.btn)
        self.add_widget(outer)  # <--- add widget to itself

    def sec_finished(self, *args):
        self.next_screen = True
        self.in_result.set_disable(False)
        self.btn.set_disabled(False)
        self.btn.text = 'Продолжить'

    def next(self):
        if not self.next_screen:
            self.btn.set_disabled(True)
            self.lbl_sec.start()
        else:
            global p1 
            p1 = check_int(self.in_result.text)
            if p1 == False or p1 <=0:
                p1 = 0
                self.in_result.text = str(p1)
            else:
                self.manager.current = 'sits'
        
                                                   
        self.manager.current = 'third'

class ThirdScr(Screen):
    def __init__(self, **kwargs):
        super().__init__(**kwargs) 
        instr = Label(text = txt_sits)
        self.btn = Button(
            text = 'Продолжить',
            size_hint = (0.3, 0.2),
            pos_hint = {'center_x': 0.5}
            )
        self.btn.on_press = self.next
        outer = BoxLayout(
            orientation = 'vertical',
            padding = 8,
            spacing = 8
            )
        outer.add_widget(instr)
        outer.add_widget(self.btn)
        self.add_widget(outer)  # <---add outer to itself

    def next(self):                                
        self.manager.current = 'pulse2'

class FourthScr(Screen):
    def __init__(self, **kwargs):
        self.next_screen = False 
        self.stage = 0
        super().__init__(**kwargs)

        inst = Label(text = txt_test3)
        line1 = BoxLayout(
            size_hint = (0.8, None),
            height = '30sp'
        )
        self.lbl_sec = Seconds(15)
        self.lbl_sec.bind(done = self.sec_finished)
        self.lbl1 = Label(text = 'Считайте пульс')

        lbl_rslt1 = Label(
            text = 'Результат',
            halign = 'right'
            )
        self.in_result1 = TextInput(
            text = '0',
            multiline = False
            )
        line1.add_widget(lbl_rslt1)
        line1.add_widget(self.in_result1)
        line2 = BoxLayout(
            size_hint = (0.8, None),
            height = '30sp'
            )
        lbl_rslt2 = Label(
            text = 'Результат после отдыха:',
            halign = 'right'
            )
        self.in_result2 = TextInput(text = '0', multiline = False)

        self.in_result1.set_disabled(True)
        self.in_result2.set_disabled(True)


    def next(self):
        self.manager.transition.direction = 'left'  
                                                   
        self.manager.current = 'fifth'

# class FifthScr(Screen):
#     def __init__(self, name='fifth'):
#         super().__init__(name=name) 
#         self.outer = BoxLayout(
#             orienration
#         )

#     def next(self):
#         self.manager.transition.direction = 'left'  
                                                   
#         self.manager.current = 'first'
    

class MyApp(App):
    def build(self):
        sm = ScreenManager()
        sm.add_widget(FirstScr())
        sm.add_widget(SecondScr(name='pulse1'))
        sm.add_widget(ThirdScr(name='third'))
        sm.add_widget(FourthScr(name='pulse2'))
        # sm.add_widget(FifthScr())

        
        
        return sm

app = MyApp()
app.run()"
H9i41pSU,velichko_a,zerg959,Python,Sunday 29th of October 2023 04:09:45 PM CDT,"# напиши здесь свое приложение
from kivy import *
from kivy.app import App
from kivy.uix.textinput import TextInput  # <--lost import
from kivy.uix.button import Button
from kivy.uix.label import Label
from kivy.uix.boxlayout import BoxLayout
from kivy.uix.screenmanager import ScreenManager , Screen
from kivy.core.window import Window
from seconds import Seconds
from sits import Sits
from runner import Runner
from ruffier import test
from instructions import (
    txt_instruction,txt_test1,txt_test2,txt_test3,txt_sits
    )
from ruffier import test

age = 7
name = """"
p1, p2, p3 = 0, 0, 0


def check_int(str_num):  # возвращает число или False, если строка не конвертируется
    try:
        return int(str_num)
    except:
       return False


class InstructionScreen(Screen):
    def __init__(self,**kwargs):
        super().__init__(**kwargs)
        instr = Label(text = txt_instruction)
        name_label = Label(text = 'Введите имя',halign = 'right')
        self.in_name = TextInput(multiline = False)
        age_label = Label(text = 'Введите возраст',halign = 'right')  # <--halign, not helign
        self.in_age = TextInput(multiline = False)
        self.btn = Button(
            text = 'Начать',
            size_hint = (0.3,0.2),
            pos_hint= {'center_x':0.5}
        )   
        self.btn.on_press = self.next

        line1 = BoxLayout(
            size_hint = (0.8,None),
            height = '30sp'
            )
        line2 = BoxLayout(
            size_hint = (0.8,None),
            height = '30sp'
            )
        line1.add_widget(name_label)
        line1.add_widget(self.in_name)
        line2.add_widget(age_label)
        line2.add_widget(self.in_age)  # <<--wrong line for widget, need 2

        outer = BoxLayout(
            orientation = 'vertical',
            padding = 8,
            spacing = 8)
        outer.add_widget(instr)
        outer.add_widget(line1)
        outer.add_widget(line2)
        outer.add_widget(self.btn)
        self.add_widget(outer)  # <<-- wrong syntax

    def next(self):
        name = self.in_name.text
        age = check_int(self.in_age.text)   
        if age == False or age < 7:
            age = 7
            self.in_age.text = str(age)
        else:
            self.manager.current = 'pulse1' 


class PulseScr(Screen):
    def __init__(self,**kwargs):
        super().__init__(**kwargs)
        self.next_screen = False
        instr = Label(text=txt_test1)


        line = BoxLayout(
            size_hint = (0.8,None),
            height = '30sp'
        )
        lbl_result = Label(
            text = 'Введите результат:',
            halign = 'right'
        )

        self.in_result = TextInput(
            text = '0',
            multiline = False
        )
        self.in_result.set_disabled(True)

        line.add_widget(lbl_result)
        line.add_widget(self.in_result)
        self.btn = Button(
            text = 'Начать',
            size_hint = (0.3,0.4),
            pos_hint = {'center_x': 0.5}  # <--- wrong brackets. need { }
        )
        self.btn.on_press = self.next_screen
        outer = BoxLayout(
            orientation = 'vertical',
            padding = 8,  # <--- lost comma
            spacing = 8
        )
        outer.add_widget(instr)
        outer.add_widget(line)
        outer.add_widget(self.btn)
        self.add_widget(outer)

    def sec_finished(self, *args):  # <-----lost indent
        self.next_screen = True
        self.in_result.set_disabled(False)
        self.btn.set_disabled(False)
        self.btn.text = 'Продолжить'

    def next(self):  # <---lost indent
        if not self.next_screen:
            self.btn.set_disabled(True)
            self.lbl_sec.start()
        else:
            global p1
            p1 = check_int


class PulseScr(Screen):
    def __init__(self, **kwargs):
        super().__init__(**kwargs)
        self.next_screen = False

        instr = Label(text=txt_test1)
        self.lbl_sec = Seconds(15)
        self.lbl_sec.bind(done=self.sec_finished)

        line = BoxLayout(size_hint=(0.8, None), height='30sp')
        lbl_result = Label(text='Введите результат:', halign='right')
        self.in_result = TextInput(text='0', multiline=False)
        self.in_result.set_disabled(True)

        line.add_widget(lbl_result)
        line.add_widget(self.in_result)
        self.btn = Button(text='Начать', size_hint=(0.3, 0.4), pos_hint={'center_x': 0.5})
        self.btn.on_press = self.next
        outer = BoxLayout(orientation='vertical', padding=8, spacing=8)
        outer.add_widget(instr)
        # outer.add_widget(lbl1)
        outer.add_widget(self.lbl_sec)
        outer.add_widget(line)
        outer.add_widget(self.btn)
        self.add_widget(outer)

    def sec_finished(self, *args):
        self.next_screen = True
        self.in_result.set_disabled(False)
        self.btn.set_disabled(False)
        self.btn.text = 'Продолжить'

    def next(self):
        if not self.next_screen:
            self.btn.set_disabled(True)
            self.lbl_sec.start()
        else:
            global p1
            p1 = check_int(self.in_result.text)
            if p1 == False or p1 <= 0:
                p1 = 0
                self.in_result.text = str(p1)
            else:
                self.manager.current = 'sits'


class CheckSits(Screen):
    def __init__(self, **kwargs):
        super().__init__(**kwargs)
        self.next_screen = False


        instr = Label(text=txt_sits, size_hint=(0.5, 1))
        self.lbl_sits = Sits(30)
        self.run = Runner(total=30, steptime=1.5, size_hint=(0.4, 1))
        self.run.bind(finished=self.run_finished)


        line = BoxLayout()
        vlay = BoxLayout(orientation='vertical', size_hint=(0.3, 1))
        vlay.add_widget(self.lbl_sits)
        line.add_widget(instr)
        line.add_widget(vlay)
        line.add_widget(self.run)


        self.btn = Button(text='Начать', size_hint=(0.3, 0.2), pos_hint={'center_x': 0.5})
        # self.btn.background_color = btn_color
        self.btn.on_press = self.next


        outer = BoxLayout(orientation='vertical', padding=8, spacing=8)
        outer.add_widget(line)
        outer.add_widget(self.btn)
        self.add_widget(outer)

    def run_finished(self, instance, value):
        self.btn.set_disabled(False)
        self.btn.text = 'Продолжить'
        self.next_screen = True

    def next(self):
        if not self.next_screen:
            self.btn.set_disabled(True)
            self.run.start()
            self.run.bind(value=self.lbl_sits.next)
        else:
            self.manager.current = 'pulse2'


class PulseScr2(Screen):
    def __init__(self, **kwargs):
        self.next_screen = False

        self.stage = 0
        super().__init__(**kwargs)
        instr = Label(text=txt_test3)
        line1 = BoxLayout(size_hint=(0.8, None), height='30sp')
        self.lbl_sec = Seconds(15)
        self.lbl_sec.bind(done=self.sec_finished)
        self.lbl1 = Label(text='Считайте пульс')

        lbl_result1 = Label(text='Результат:', halign='right')
        self.in_result1 = TextInput(text='0', multiline=False)
        line1.add_widget(lbl_result1)
        line1.add_widget(self.in_result1)
        line2 = BoxLayout(size_hint=(0.8, None), height='30sp')
        lbl_result2 = Label(text='Результат после отдыха:', halign='right')
        self.in_result2 = TextInput(text='0', multiline=False)

        self.in_result1.set_disabled(True)
        self.in_result2.set_disabled(True)
        line2.add_widget(lbl_result2)
        line2.add_widget(self.in_result2)
        self.btn = Button(text='Начать', size_hint=(0.3, 0.5), pos_hint={'center_x': 0.5})
        # self.btn.background_color = btn_color
        self.btn.on_press = self.next
        outer = BoxLayout(orientation='vertical', padding=8, spacing=8)
        outer.add_widget(instr)
        outer.add_widget(self.lbl1)
        outer.add_widget(self.lbl_sec)
        outer.add_widget(line1)
        outer.add_widget(line2)
        outer.add_widget(self.btn)
        self.add_widget(outer)

    def sec_finished(self, *args):
        if self.lbl_sec.done:
            if self.stage == 0:
# закончили первый подсчёт, отдыхаем
                self.stage = 1
                self.lbl1.text = 'Отдыхайте'
                self.lbl_sec.restart(30)
                self.in_result1.set_disabled(False)
            elif self.stage == 1:
            # закончили отдых, считаем
                self.stage = 2
                self.lbl1.text='Считайте пульс'
                self.lbl_sec.restart(15)
        elif self.stage == 2:
            self.in_result2.set_disabled(False)
            self.btn.set_disabled(False)
            self.btn.text = 'Завершить'
            self.next_screen = True

    def next(self):
        if not self.next_screen:
            self.btn.set_disabled(True)
            self.lbl_sec.start()
        else:
            global p2, p3
            p2 = check_int(self.in_result1.text)
            p3 = check_int(self.in_result2.text)
        if p2 == False:
            p2 = 0
            self.in_result1.text = str(p2)
        elif p3 == False:
            p3 = 0
            self.in_result2.text = str(p3)
        else:
       # переходим
            self.manager.current = 'result'


class Result(Screen):
    def __init__(self, **kwargs):
        super().__init__(**kwargs)
        self.outer = BoxLayout(orientation='vertical', padding=8, spacing=8)
        self.instr = Label(text = '')
        self.outer.add_widget(self.instr)
        self.add_widget(self.outer)
        self.on_enter = self.before

    def before(self):
        global name
        self.instr.text = test(p1, p2, p3, age)


class HeartCheck(App):
    def build(self):
        sm = ScreenManager()
        sm.add_widget(InstructionScreen(name='instr'))
        sm.add_widget(PulseScr(name='pulse1'))
        sm.add_widget(CheckSits(name='sits'))
        sm.add_widget(PulseScr2(name='pulse2'))
        sm.add_widget(Result(name='result'))
        return sm  # forgot return ScreenManager


app = HeartCheck()
app.run()
"
VkSXzWAR,Untitled,MikeWinfield,YAML,Sunday 29th of October 2023 04:02:10 PM CDT,"name: Тесты

on: pull_request

jobs:
  run-tests: 
    runs-on: 'ubuntu-latest'
    steps:
      - name: Checkout
		uses: actions/checkout@v4
      - name: Install Go
		uses: actions/setup-go@v4
        with:
          go-version-file: 'go.mod'
          cache-dependency-path: 'go.sum'
      - run: go test -v -race"
6EmS7Wau,CC-Tweaked: Alert System Point,GenericBrandName,Lua,Sunday 29th of October 2023 03:59:52 PM CDT,"rednet.open(""top"")

while true do

	if redstone.getInput(""front"") == true then
		rednet.send(6, ""alert"")
	end
	
	sleep(1)
end"
L6pJwjBG,SimpleEncoder_1,Ruslan_nig,Arduino,Sunday 29th of October 2023 03:58:37 PM CDT,"//this is my example for Amperka L298P shield
//this code placed on Pastebin
//source example from here: http://andrewjkramer.net/motor-encoders-arduino/
#define dirPin 4
#define speedPin 5
#define RH_ENCODER_A 3
#define RH_ENCODER_B 8
uint8_t pwm = 55;
uint8_t step = 1;
bool mean = 0;
bool newmean = 0;
uint32_t counter = 0;

void simpleGo(uint8_t dir1, uint8_t speed) {
  digitalWrite(dirPin, dir1);
  analogWrite(speedPin, speed);
}

void setup() {
  pinMode(dirPin, OUTPUT);
  pinMode(speedPin, OUTPUT);
  pinMode(RH_ENCODER_A, INPUT);
  pinMode(RH_ENCODER_B, INPUT);
  Serial.begin(9600);
  //simpleGo(1, 40);
  //delay(2000);
  //simpleGo(1,0);
}



void loop() {
  //Serial.print(""port A = "");
  //Serial.println(digitalRead(RH_ENCODER_A));
  //Serial.print(""port B = "");
  //Serial.println(digitalRead(RH_ENCODER_B));
  while (counter <= 60000) {
    newmean = digitalRead(RH_ENCODER_B);
    if (mean != newmean) {
      counter++;
      Serial.print(""count = "");
      Serial.println(counter);
      mean = newmean;
    }
    simpleGo(1, 50);
  }
  simpleGo(1, 0);

}
"
891jm1MF,05. Invalid Input,Spocoman,C++,Sunday 29th of October 2023 03:47:14 PM CDT,"#include <iostream>
#include <vector>
#include <string>

using namespace std;

int main() {
    string str, word = """", digit = """";
    getline(cin, str);
    str += ' ';
    int sumNumbers = 0;
    vector<string> words;

    for (int i = 0; i < str.length(); i++) {
        if (isdigit(str[i]) || str[i] == '-' && isdigit(str[i + 1])) {
            digit += str[i];
        }
        else if (str[i] != ' ') {
            word += str[i];
        }
        else {
            if (digit != """") {
                sumNumbers += stoi(digit);
                digit = """";
            }
            else {
                words.push_back(word);
                word = """";
            }
        }
    }

    cout << sumNumbers << endl;

    for (auto& w : words) {
        cout << w << ' ';
    }
    return 0;
}"
K9q9fcCU,Untitled,maksincolf,C++,Sunday 29th of October 2023 03:25:43 PM CDT,"#pragma once

#include <cstddef>
#include <typeinfo>
#include <utility>

template <class Iterator>
class Sequence {
   public:
    Sequence(Iterator begin, Iterator end)
        : begin_{std::move(begin)}, end_{std::move(end)}, it_(begin_) {
    }

    [[nodiscard]] Iterator begin() const {  // NOLINT(readability-identifier-naming)
        return begin_;
    }

    [[nodiscard]] Iterator end() const {  // NOLINT(readability-identifier-naming)
        return end_;
    }

    auto operator*() {
        return *it_;
    }

    Iterator& operator++() {
        return ++it_;
    }

   private:
    Iterator begin_, end_, it_;
};

template <class Iterator>
class RepeatIterator {
   public:
    RepeatIterator(
        Iterator begin, Iterator end,
        size_t count = 0)  // NOLINT(fuchsia-default-arguments-declarations)
        : begin_{begin}, it_{begin}, end_{end}, count_{count} {
    }

    RepeatIterator& operator++() {
        if (!(++it_ != end_)) {
            ++count_;
            it_ = begin_;
        }
        return *this;
    }

    auto operator*() const {
        return *it_;
    }

    bool operator==(const RepeatIterator& rhs) const = default;

   private:
    Iterator begin_, it_, end_;
    size_t count_;
};

auto Repeat(const auto& sequence, size_t n) {
    auto begin = sequence.begin();
    auto end = sequence.end();
    if (n && (begin != end)) {
        return Sequence{RepeatIterator{begin, end}, RepeatIterator{begin, end, n}};
    }
    return Sequence{RepeatIterator{end, end}, RepeatIterator{end, end}};
}

template <class Iterator1, class Iterator2>
class ZipIterator {
   public:
    ZipIterator(Iterator1 begin1, Iterator2 begin2)
        : begin1_(std::move(begin1)), it1_(begin1_), begin2_(std::move(begin2)), it2_(begin2_) {
    }

    ZipIterator& operator++() {
        ++it1_;
        ++it2_;
        return *this;
    }

    bool operator==(const ZipIterator& rhs) const {
        return it1_ == rhs.it1_ || it2_ == rhs.it2_;
    }

    auto operator*() {
        return std::pair{*it1_, *it2_};
    }

   private:
    Iterator1 begin1_, it1_;
    Iterator2 begin2_, it2_;
};

auto Zip(const auto& a, const auto& b) {
    auto it1 = ZipIterator{a.begin(), b.begin()};
    auto it2 = ZipIterator{a.end(), b.end()};

    return Sequence{it1, it2};
}

class Range {
   public:
    Range(int64_t from, int64_t to) : Range(from, to, 1) {
    }

    Range(int64_t from, int64_t to, int64_t step)
        : begin_(from, step)
        , end_(from + ((to - from) / step + ((to - from) % step != 0 ? 1 : 0)) * step, step) {
    }

    explicit Range(int64_t to) : Range(0, to, 1) {
    }

    class Iterator {
       public:
        explicit Iterator(int64_t value, int64_t step) : value_(value), step_(step) {
        }

        Iterator(const Iterator&) = default;

        Iterator(const Iterator&& rhs) noexcept : Iterator(rhs.value_, rhs.step_) {
        }

        Iterator& operator=(const Iterator& rhs) = default;
        Iterator& operator=(const Iterator&& rhs) = delete;
        ~Iterator() = default;

        int64_t operator*() const {
            return value_;
        }

        Iterator& operator++() {
            value_ += step_;
            return *this;
        }

        bool operator==(const Iterator& rhs) const = default;

       private:
        int64_t value_;
        int64_t step_;
    };

    [[nodiscard]] Iterator begin() const {
        return begin_;
    }

    [[nodiscard]] Iterator end() const {
        return end_;
    }

   private:
    Iterator begin_, end_;
};

template <typename Iterator>
class GroupIterator {
   public:
    GroupIterator(Iterator begin, Iterator end)
        : end_(end), current_begin_(begin), current_end_(begin) {
        while (current_end_ != end && *current_end_ == *begin) {
            ++current_end_;
        }
    }

    auto operator*() {
        return Sequence{current_begin_, current_end_};
    }

    GroupIterator& operator++() {
        current_begin_ = current_end_;
        while (current_end_ != end_ && *current_end_ == *current_begin_) {
            ++current_end_;
        }
        return *this;
    }

    bool operator==(const GroupIterator& rhs) const {
        return current_begin_ == rhs.current_begin_ && current_end_ == rhs.current_end_;
    }

   private:
    Iterator end_;
    Iterator current_begin_, current_end_;
};

template <typename T>
auto Group(const T& seq) {
    return Sequence{GroupIterator{seq.begin(), seq.end()}, GroupIterator{seq.end(), seq.end()}};
}
"
kZchgD9M,split song into pieces of 2 seconds,nicuf,Python,Sunday 29th of October 2023 03:02:56 PM CDT,"from pydub import AudioSegment
import os

# Specificați calea către executabilul FFmpeg
os.environ[""PATH""] += os.pathsep + r""d:\Ffmpeg\bin""

# Încărcați melodia
melodie = AudioSegment.from_file(""d:/Downloads/uuu/Rastafair - Emtiness.mp3"")

# Stabiliți durata intervalului de extragere (în milisecunde, 2 secunde = 2000 milisecunde)
interval = 2000

# Specificați directorul în care să salvați bucațile
director_ieșire = r""d:\Bucati Melodii""

# Verificați dacă directorul de ieșire există și, dacă nu, creați-l
if not os.path.exists(director_ieșire):
    os.makedirs(director_ieșire)

# Parcurgeți melodia și extrageți bucațile la fiecare interval
for i in range(0, len(melodie), interval):
    fragment = melodie[i:i + interval]

    # Salvați fragmentul în directorul de ieșire
    nume_fisier = os.path.join(director_ieșire, f""fragment_{i // interval + 1}.mp3"")
    fragment.export(nume_fisier, format=""mp3"")
    print(f""Extras: {nume_fisier}"")

print(""Extragerile au fost finalizate cu succes."")
"
jK6JWu64,convert html pages to PDF,nicuf,Python,Sunday 29th of October 2023 02:56:37 PM CDT,"import os
import pdfkit

# Specificați calea către executabilul wkhtmltopdf
config = pdfkit.configuration(wkhtmltopdf=r'c:\Program Files\wkhtmltopdf\bin\wkhtmltopdf.exe')

# Specificați directorul în care se află fișierele HTML
director_html = r'j:\DE SCANAT\socc\Van Llewyn, Sophie'

# Specificați un director în care să salvați fișierele PDF generate
director_pdf = r'C:\calea\catre\director\pdf'

# Verificați dacă directorul de ieșire există și, dacă nu, creați-l
if not os.path.exists(director_pdf):
    os.makedirs(director_pdf)

# Obțineți lista fișierelor HTML din director
fisiere_html = [f for f in os.listdir(director_html) if f.endswith('.html')]

# Parcurgeți lista de fișiere HTML și convertiți-le în PDF
for fisier_html in fisiere_html:
    cale_html = os.path.join(director_html, fisier_html)
    cale_pdf = os.path.join(director_pdf, fisier_html.replace('.html', '.pdf'))

    pdfkit.from_file(cale_html, cale_pdf, configuration=config)

print(""Conversia HTML în PDF a fost finalizată cu succes."")
"
7i3LgMWC,roman_m,zerg959,Python,Sunday 29th of October 2023 02:31:15 PM CDT,"'''Импортирование классов из библиотеки ""kivy""'''
from kivy.app import App #Импортирование управляющего класса
from kivy.uix.button import Button #Импортирование класса кнопок
from kivy.uix.screenmanager import Screen,ScreenManager #Импортирование мэнеджера экрана и самого экрана
from kivy.uix.label import Label #Импортирование класса надписей
from kivy.uix.boxlayout import BoxLayout #Импортирование лэйаутов
from kivy.uix.textinput import TextInput #Импортирование поля ввода
from kivy.core.window import Window #Импортирование окна
from kivy.clock import Clock
from kivy.properties import BooleanProperty
from seconds import Seconds

age = 7
name = ''
p1, p2, p3 = 0,0,0
from instructions import (
    txt_instruction, txt_sits, txt_test1, 
    txt_test2, txt_test3
    )
from ruffier import test

def check_int(str_num):
    try:
        return int(str_num)
    except:
        return False
class Instruction_Screen(Screen):
    '''Класс для обьяснения человеку о том, что надо делать'''
    def __init__(self, **kwargs):
        super().__init__(**kwargs)
        instruction = Label(text=txt_instruction)
        name_label = Label(text='Введите имя:', halign='right')
        self.in_name = TextInput(multiline=False)
        age_label = Label(text='Введите возраст:', halign='right')
        self.in_age = TextInput(text='7',multiline=False)

        self.button = Button(text='Начать',
        size_hint=(0.3, 0.2),
        pos_hint={'center_x':0.5})
        self.button.on_press = self.next

        first_layout = BoxLayout(
        size_hint=(0.8,None),
        height ='30sp')

        second_layout = BoxLayout(
        size_hint=(0.8,None),
        height='30sp')

        first_layout.add_widget(name_label)
        first_layout.add_widget(self.in_name)
        second_layout.add_widget(age_label)
        second_layout.add_widget(self.in_age)

        outer=BoxLayout(orientation='vertical', 
        padding=8,
        spacing=8)

        outer.add_widget(instruction)
        outer.add_widget(first_layout)
        outer.add_widget(second_layout)
        outer.add_widget(self.button)
        self.add_widget(outer)

    def next(self):
        name = self.in_name.text
        age = check_int(self.in_age.text)
        if age == False or age < 7:
            age = 7 
            self.in_age.text=str(age)
        else:
            self.manager.current = 'pulse1'


class PulseScr(Screen):
    def __init__(self,**kwargs):
        super().__init__(**kwargs)
        self.next_screen = False
        instr = Label(text=txt_test1)
        lbl1 = Label(text='Считайте пульс')
        self.lbl_sec = Seconds(5)
        self.lbl_sec.bind(done=self.sec_finished)

        line = BoxLayout(size_hint=(0.8,None),
        height='30sp')

        label_result = Label(text='Введите результат',
        halign='right')

        self.in_result = TextInput(text='0',multiline=False)
        self.in_result.set_disabled(True)

        line.add_widget(label_result)
        line.add_widget(self.in_result)

        self.btn = Button(text='Начать', size_hint=(0.3,0.4),
        pos_hint={'center_x':0.5}
        )
        self.btn.on_press = self.next  # <<<-------проверь синтаксис
        outer = BoxLayout(orientation='vertical',
        padding=8,
        spacing=8)
        outer.add_widget(instr)
        outer.add_widget(self.lbl_sec)  # <--add widget
        outer.add_widget(line)
        outer.add_widget(self.btn)
        self.add_widget(outer)

    def sec_finished(self, *args):  # <-- lost *args
        self.next_screen = True
        self.in_result.set_disabled(False)
        self.btn.set_disabled(False)
        self.btn.text = 'Продолжить'

    def next(self):
        if not self.next_screen:
            self.btn.set_disabled(True)  # <--lost True
            self.lbl_sec.start()
        else:
            global p1
            p1 = check_int(self.in_result.text)
            if p1 == False or p1 <= 0:
                p1 = 0
                self.in_result.text = str(p1)
            else:
                self.manager.current = 'sits'


class CheckSits(Screen):
    def __init__(self, **kwargs):
        super().__init__(**kwargs)
        instr = Label(text=txt_sits)

        self.btn = Button(text='Продолжить', 
        size_hint=(0.3,0.2), 
        pos_hint={'center_x':0.5})
        self.btn.on_press = self.next

        outer = BoxLayout(orientation='vertical', padding=8, spacing=8)
        outer.add_widget(instr)
        outer.add_widget(self.btn)
        self.add_widget(outer)

    def next(self):
        self.manager.current = 'pulse2'

class PulseScr2(Screen):
    def __init__(self, **kwargs):
        self.next_screen = False
        self.stage = 0
        super().__init__(**kwargs)
        instr=Label(text=txt_test3)
        line1 =BoxLayout(size_hint=(0.8, None), height='30sp')

        self.lbl_sec = Seconds(15)
        self.lbl_sec.bind(done=self.sec_finished)
        # self.lbl1 = Label(text='Считайте пульс')

        lbl_result1 = Label(text='Результат:', halign='right')
        self.in_result1 = TextInput(text='0', multiline=False)

        line1.add_widget(lbl_result1)
        line1.add_widget(self.in_result1)
        line2 = BoxLayout(size_hint=(0.8,None), height='30sp')
        lbl_result2 = Label(text='Результат после отдыха:', halign='right')

        self.in_result2 = TextInput(text='0', multiline=False)
        self.in_result1.set_disabled(True)
        self.in_result2.set_disabled(True)

        line2.add_widget(lbl_result2)
        line2.add_widget(self.in_result2)

        self.btn = Button(text='Начать',
                          size_hint=(0.3,0.5),
                          pos_hint={'center_x':0.5})
        self.btn.on_press = self.next

        outer = BoxLayout(orientation='vertical', padding=8, spacing=8)
        outer.add_widget(instr)
        outer.add_widget(self.lbl1)
        outer.add_widget(self.lbl_sec)
        outer.add_widget(line1)
        outer.add_widget(line2)
        outer.add_widget(self.btn)
        self.add_widget(outer)

    def sec_finished(self, *args):
        if self.lbl_sec.done:
            if self.stage == 0:
                self.stage = 1 
                self.lbl1.text='Отдыхайте'
                self.lbl_sec.restart(30)
                self.in_result1.set_disabled(False)

            elif self.stage == 1:
                self.stage = 2
                self.lbl1.text = 'Считайте пульс'
                self.lbl_sec.restart(15)
                
            elif self.stage == 2:
                self.in_result2.set_disabled(False)
                self.btn.set_disabled(False)
                self.btn.text='Завершить'
                self.next_screen = True

    def next(self):
        if not self.next_screen:
            self.btn.set_disabled(True)
            self.lbl_sec.start()
        else:
            global p2,p3
            p2 = check_int(self.in_result1.text)
            p3 = check_int(self.in_result2.text)
            if p2 == False:
                p2 = 0
                self.in_result1.text = str(p2)
            elif p3 == False:
                p3 =0
                self.in_result2.text = str(p3)
            else:
                self.manager.current = 'result'
class Result(Screen):
    def __init__(self, **kwargs):
        super().__init__(**kwargs)
        self.outer = BoxLayout(orientation='vertical', padding=8, spacing=8)
        self.instr = Label(text='')
        self.outer.add_widget(self.instr)
        self.add_widget(self.outer)
        self.on_enter = self.before
    def before(self):
        global name
        self.instr.text = name + '\n' + text(p1,p2,p3)
        


class HeartCheck(App):
    def build(self):
        sm = ScreenManager()
        sm.add_widget(Instruction_Screen(name='instr'))
        sm.add_widget(PulseScr(name='pulse1'))
        sm.add_widget(CheckSits(name='sits'))
        sm.add_widget(PulseScr2(name='pulse2'))
        sm.add_widget(Result(name='result'))
        return sm

app = HeartCheck()
app.run()
"
WqdTizsL,player_seeking_missiles_launchers.lua,FoxSGR,Lua,Sunday 29th of October 2023 02:23:36 PM CDT,"local PORT = 55111

local modem = peripheral.find('modem')
modem.open(PORT)

local function findPeripherals(name)
    local peripheralNames = {}
    for _, p in pairs(peripheral.getNames()) do
        if string.find(p, name) then
            table.insert(peripheralNames, peripheral.wrap(p))
        end
    end
    return peripheralNames
end

local function hashKey(input)
    local hash = 0
    for i = 1, #input do
        local byte = string.byte(input, i)
        hash = (hash * 31 + byte) % 4294967296  -- 4294967296 is 2^32
    end
    return hash
end

local currentLauncher = 0

local function launch(targetPosition)
    local launchers = findPeripherals('silocontroller')
    local launcher = launchers[currentLauncher + 1]

    print('Firing from launcher ' .. currentLauncher)
    launcher.launchWithPosition(targetPosition.x, targetPosition.y, targetPosition.z)

    currentLauncher = currentLauncher + 1
    if currentLauncher >= #launchers then
        currentLauncher = 0
    end
end

local AUTH_KEY = 55399117

local function reply(message, channel)
    modem.transmit(channel, PORT, message)
end

local function handleMessage(message, callbackChannel)
    if hashKey(message.authKey) ~= AUTH_KEY then
        print('Received message with invalid authKey')
        return
    end

    if message.type == 'launch' then
        print('Received launch message to ' ..
                message.targetPosition.x ..
                ', ' ..
                message.targetPosition.y ..
                ', ' ..
                message.targetPosition.z)
        launch(message.targetPosition)
        reply({ type = 'ack' }, callbackChannel)
    elseif message.type == 'status' then
        local launchers = findPeripherals('silocontroller')
        reply(
                {
                    type = 'status',
                    launchers = #launchers,
                    currentLauncher = currentLauncher
                },
                callbackChannel
        )
    else
        print('Received message with invalid type')
    end
end

print('Listening for messages on port ' .. PORT)

-- Receive messages
while true do
    local event, modemSide, senderChannel, replyChannel, payload, senderDistance = os.pullEvent('modem_message')

    if payload and type(payload) == 'table' then
        local status, err = pcall(handleMessage, payload, replyChannel)
        if not status then
            print('Error handling message: ' .. err)
        end
    end
end
"
1QnaZgF7,simple Hbridge and PWM example,Ruslan_nig,Arduino,Sunday 29th of October 2023 02:13:07 PM CDT,"//this is my example for demonstration H-bridge on n-p-n transistors (BJT - Bipolar Junction Transistors) and for PWM
//simpleGo function is for H-bridge presentation
//PWMmotor - simple PWM example
//this code placed on Pastebin
uint8_t pwm = 55; 
uint8_t step = 1;
void setup() {
  pinMode(6, OUTPUT);
  pinMode(3, OUTPUT);
  Serial.begin(9600);
}

void simpleGo(){
  digitalWrite(6, 1);
  digitalWrite(3, 0);
  delay(2000);
  digitalWrite(6, 0);
  digitalWrite(3, 0);
  delay(2000);
  digitalWrite(6, 0);
  digitalWrite(3, 1);
  delay(2000);
  digitalWrite(6, 0);
  digitalWrite(3, 0);
  delay(2000);
}
void PWMmotor(){
while(pwm<=254) {
    analogWrite(6, pwm);
    delay(100);
    pwm  = pwm + step;
    Serial.print(""INCREASE"");
    Serial.println(pwm);
}

while(pwm>=55) {
    analogWrite(6, pwm);
    delay(100);
    pwm  = pwm - step;
    Serial.print(""decrease decrease decresase"");
    Serial.println(pwm);
}

}

void loop() {
//simpleGo();
//PWMmotor();
analogWrite(6,120);
}
"
vHJ57myT,string,salexame,C++,Sunday 29th of October 2023 02:12:02 PM CDT,"#include <algorithm>
#include <iostream>
#include <cstring>

class String {
 public:
  String() : size_(0), capacity_(1) {
    data_ = new char[capacity_];
    data_[size_] = '\0';
  }

  String(const char *string) : size_(strlen(string)), capacity_(strlen(string) + 1) {
    data_ = new char[capacity_];
    std::copy(string, string + size_, data_);
    data_[size_] = '\0';
  }

  String(char sym) : String(1, sym) {
  }

  String(size_t size, char sym) : size_(size), capacity_(size + 1) {
    data_ = new char[size + 1];
    std::fill(data_, data_ + size_, sym);
    data_[size] = '\0';
  }

  String(const String& other) : size_(other.size_), capacity_(other.capacity_) {
    data_ = new char[capacity_];
    std::copy(other.data_, other.data_ + size_, data_);
    data_[size_] = '\0';
  }

  String& operator=(String other) {
    Swap(other);
    return *this;
  }

  char& operator[](size_t index) { return data_[index]; }

  char operator[](size_t index) const { return data_[index]; }

  friend std::istream &operator>>(std::istream &in, String& str);

  friend std::ostream &operator<<(std::ostream &out, const String& str);

  size_t size() const { return size_; };

  size_t capacity() const { return capacity_; }

  size_t length() const { return size_; }

  void push_back(char sym) {
    if (size_ + 1 == capacity_) {
      Reallocation(2 * capacity_);
      capacity_ *= 2;
    }
    data_[size_] = sym;
    size_++;
    data_[size_] = '\0';
  }

  void pop_back() {
    size_--;
    data_[size_] = '\0';
  }

  char& front() { return data_[0]; }

  char front() const { return data_[0]; }

  char& back() { return data_[size_ - 1]; }

  char back() const { return data_[size_ - 1]; }

  String& operator+= (const String& other) {
    if (capacity_ <= size_ + other.size_) {
      Reallocation(size_ + other.size_ + 1);
      capacity_ = size_ + other.size_ + 1;
    }
    std::copy(other.data_, other.data_ + other.size_, data_ + size_);
    size_ += other.size_;
    data_[size_] = '\0';
    return *this;
  }

  String& operator+= (char sym) {
    String sm(1, sym);
    return *this += sm;
  }

  size_t find(const String& substring) const {
    if (substring.size() > size_) {
      return size_;
    }
    size_t count = 0;
    size_t last = size_;
    for (size_t i = 0; i < size_; ++i) {
      if (data_[i] == substring[count]) {
        count++;
        if (last == size_) {
          last = i;
        }
        if (count == substring.size_) {
          return last;
        }
      } else {
        count = 0;
        last = size_;
      }
    }
    return size_;
  }

  size_t rfind(const String& substring) const {
    if (substring.size() > size_) {
      return size_;
    }
    size_t count = 0;
    for (int i = static_cast<int>(size_) - 1; i >= 0; --i) {
      if (data_[i] == substring[substring.size() - count - 1]) {
        ++count;
        if (count == substring.size_) {
          return i;
        }
      } else {
        count = 0;
      }
    }
    return size_;
  }

  String substr(size_t start, size_t count) const {
    String ret(new char[count + 1]);
    for (size_t i = start; i < start + count; ++i) {
      ret[i - start] = data_[i];
    }
    ret.size_ = count;
    ret.capacity_ = count + 1;
    ret.data_[count] = '\0';
    return ret;
  }

  bool empty() const {return size_ == 0;}

  void clear() {
    size_ = 0;
    data_[size_] = '\0';
  }

  void shrink_to_fit() {
    if (size_ + 1 == capacity_) {
      return;
    }
    capacity_ = size_ + 1;
    char* new_data = new char[size_ + 1];

    std::copy(data_, data_ + size_ + 1, new_data);
    delete[] data_;
    data_ = new_data;
  }

  char* data() const {return data_;}

  ~String() {
    delete[] data_;
  }

 private:
  void Swap(String& other) {
    std::swap(data_, other.data_);
    std::swap(size_, other.size_);
    std::swap(capacity_, other.capacity_);
  }

  void Reallocation(size_t capacity) {
    char* new_data = new char[capacity];
    std::copy(data_, data_ + size_, new_data);
    delete[] data_;
    data_ = new_data;
  }

  char *data_;
  size_t size_;
  size_t capacity_;

};

std::istream& operator>>(std::istream& in, String& str) {
  char cur;
  cur = in.get();
  char* init = new char[1];
  init[0] = '\0';
  size_t size = 0;
  size_t capacity = 1;
  while (!std::isspace(cur) || size == 0) {
    if (std::isspace(cur) && size != 0) {
      break;
    }
    if (std::isspace(cur)) {
      cur = in.get();
      continue;
    }
    if (size + 1 == capacity) {
      capacity *= 2;
      char* new_str = new char[capacity]();
      char* tmp = init;
      std::copy(init, init + size, new_str);
      init = new_str;
      delete[] tmp;
    }
    init[size] = cur;
    ++size;
    init[size] = '\0';
    cur = in.get();
  }
  delete[] str.data_;
  str.data_ = init;
  str.size_ = size;
  str.capacity_ = capacity;
  return in;
}

std::ostream& operator<<(std::ostream& out, const String& str) {
  out << str.data_;
  return out;
}

String operator+(const String& first, const String& second) {
  String copy = first;
  copy += second;
  return copy;
}

bool operator<(const String& first, const String& second) {
  size_t it1 = 0;
  size_t it2 = 0;
  while (it1 < first.size() && it2 < second.size()) {
    if (first[it1] < second[it2]) {
      return true;
    }
    if (first[it1] > second[it2]) {
      return false;
    }
    ++it1;
    ++it2;
  }
  if (it1 == first.size()) {
    return false;
  }
  if (it2 == second.size()) {
    return true;
  }
  return false;
}

bool operator>(const String& first, const String& second) {
  return second < first;
}

bool operator<=(const String& first, const String& second) {
  return !(second > first);
}

bool operator>=(const String& first, const String& second) {
  return !(second < first);
}

bool operator==(const String& first, const String& second) {
  return first <= second && first >= second;
}

bool operator!= (const String& first, const String& second) {
  return !(first == second);
}

String operator+(char sym, const String& str) {
  String copy(1, sym);
  copy += str;
  return copy;
}

String operator+(const String& str, char sym) {
  return str + String(1, sym);
}
"
SgW0sCHw,antonov_m,zerg959,Python,Sunday 29th of October 2023 02:07:31 PM CDT,"# напиши здесь свое приложение
from kivy.app import App
from kivy.uix.button import Button
from kivy.uix.label import Label
from kivy.uix.boxlayout import BoxLayout
from kivy.uix.screenmanager import ScreenManager, Screen
from kivy.uix.textinput import TextInput
from kivy.core.window import Window
from kivy.uix.scrollview import ScrollView
from instructions import (
    txt_instruction, txt_test1, txt_test2, txt_test3, txt_sits
    )
from ruffier import test
from seconds import Seconds
age = 7
name = """"
p1, p2, p3 = 0, 0, 0


def check_int(str_num):
    try:
        return int(str_num)
    except:
        return False


class InstructionScreans(Screen):
    def __init__(self, **kwargs):
        super().__init__(**kwargs)
        instr = Label(text=txt_instruction)
        name_label = Label(text='Dtlbnt bvz',halign='right')  # <<<---halign
        self.in_name = TextInput(multiline=False)  # <<<--multiline
        age_label = Label(text='tggt', halign='right')   # <<<---halign
        self.in_age = TextInput(multiline=False)  # <<<<<<---multiline
        self.btn = Button(
            text='начать', 
            size_hint=(0.3, 0.2), 
            pos_hint={'center_x': 0.5}  # <<<---- двоеточие, а не запятая
        )
        self.btn.on_press = self.next

        line1 = BoxLayout(
            size_hint=(0.8, None),
            height='30sp'
        )

        line2 = BoxLayout(
            size_hint=(0.8, None),
            height='30sp'
        )

        line1.add_widget(name_label)
        line1.add_widget(self.in_name)
        line2.add_widget(age_label)
        line2.add_widget(self.in_age)
        outer = BoxLayout(
            orientation='vertical',
            padding=8,
            spacing=8
        )
        outer.add_widget(instr)  # <<<<-----создал outer, а используешь outher
        outer.add_widget(line1)  # <<<<-----создал outer, а используешь outher
        outer.add_widget(line2)  # <<<<-----создал outer, а используешь outher
        outer.add_widget(self.btn) # <<<<-----создал outer, а используешь outher, self.btn
        self.add_widget(outer)
        
    def next(self):  # <<<<---уехал отступ
        name = self.in_name.text
        age = check_int(self.in_age.text)
        if age == False or age < 7:
            age = 7
            self.in_age.text = str(age)
        else:
            self.manager.current = 'pulse1'  # <<----тут задал имя pullsel, а ниже используешь pulse1


class PulseScr(Screen):
    def __init__(self, **kwargs):
        super().__init__(**kwargs)
        self.next_screen = False

        instr = Label(text=txt_test1)
        self.lbl_sec = Seconds(15)  # <---lost string
        self.lbl_sec.bind(done=self.sec_finished)  # <--lost string
        line = BoxLayout(size_hint=(0.8, None), height='30sp') # <<<<----size_hint, not height, height, not haign
        lbl_result = Label(text='Введите результат:', halign='right')
        self.in_result = TextInput(text='0', multiline=False)
        self.in_result.set_disabled(True)

        line.add_widget(lbl_result)
        line.add_widget(self.in_result)
        self.btn = Button(
            text='начать',
            size_hint=(0.3, 0.4),
            pos_hint={'center_x': 0.5}
        )
        self.btn.on_press = self.next  # <-next, ot next_screen
        outer = BoxLayout(  # <---lost block of code
            orientation='vertical',
            padding=8,
            spacing=8
        )
        outer.add_widget(instr)  # <---lost widget with instructions
        outer.add_widget(self.lbl_sec)  # <-lost widget with seconds
        outer.add_widget(line)
        outer.add_widget(self.btn)
        self.add_widget(outer)

    def sec_finished(self, *args):  # <---lost identation block
        self.next_screen = True
        self.in_result.set_disabled(False)  # <----dot, not comma
        self.btn.set_disabled(False)
        self.btn.text = 'продолжить'

    def next(self):
        if not self.next_screen:
            self.btn.set_disabled(True)
            self.lbl_sec.start()  # <-- start, not star
        else:
            global p1  # <--p1 not pl
            p1 = check_int(self.in_result.text)
            if p1 == False or p1 <= 0:
                p1 = 0
                self.in_result.text = str(p1)
            else:
                self.manager.current = 'sits'


# class CheckSits(Screen):
#     def __init__(self, **kwargs):
#         super().__init__(**kwargs)
#         self.btn = Button(
#             text='Продолжить',
#             size_hint=(0.3, 0.2),
#             pos_hint={'center_x': 0.5}
#         )
#         self.btn.on_press = self.next
#         outer = BoxLayout(orientation='vertical',
#                            padding=8, spacing=8
#                           )
#         outer.add_widget(instr)
#         outer.add_widget(self.btn)
#         self.add_widget(outer)
#
#     def next(self):
#         self.maneger.current = 'pulse2'


# class PulseScr2(Screen)
#     def __init__(self, **kwargs)
#        self.next_screen = False
#
#    self.stage = 0
#     super().__init__(**Kwargs)
#

class HeartCheck(App):
    def build(self):  # <<<<--- нет метода bulid, есть build
        sm = ScreenManager()
        sm.add_widget(InstructionScreans(name='instr'))
        sm.add_widget(PulseScr(name='pulse1'))
        # sm.add_widget(CheckSits(name='sits'))
        #sm.add_widget(PulseScr2(name='pulse2'))
        #sm.add_widget(Result(name='result'))
        return sm

app = HeartCheck()
app.run()"
q6V0X1wD,Nigerian scammers [29-10-1/2023],bombaires,AIMMS,Sunday 29th of October 2023 01:44:53 PM CDT,"<a href=""mailto:info.christiancaman@myyahoo.com"">info.christiancaman@myyahoo.com</a>
<a href=""mailto:deliveryman0010@gmail.com"">deliveryman0010@gmail.com</a>
<a href=""mailto:de.l.iverym.a.n00.10@gmail.com"">de.l.iverym.a.n00.10@gmail.com</a>
<a href=""mailto:d.elive.ryman0.0.1.0@gmail.com"">d.elive.ryman0.0.1.0@gmail.com</a>
<a href=""mailto:d.e.liv.e.ry.m.a.n0.010@gmail.com"">d.e.liv.e.ry.m.a.n0.010@gmail.com</a>
<a href=""mailto:d.e.liv.er.y.man.0.0.1.0@gmail.com"">d.e.liv.er.y.man.0.0.1.0@gmail.com</a>
<a href=""mailto:d.e.li.v.e.r.ym.a.n0.010@gmail.com"">d.e.li.v.e.r.ym.a.n0.010@gmail.com</a>
<a href=""mailto:de.liv.e.r.yman.0.01.0@gmail.com"">de.liv.e.r.yman.0.01.0@gmail.com</a>
<a href=""mailto:d.eli.v.ery.m.a.n0.0.1.0@gmail.com"">d.eli.v.ery.m.a.n0.0.1.0@gmail.com</a>
<a href=""mailto:d.e.l.i.v.e.ry.ma.n0010@gmail.com"">d.e.l.i.v.e.ry.ma.n0010@gmail.com</a>
<a href=""mailto:de.l.i.ve.r.ym.an001.0@gmail.com"">de.l.i.ve.r.ym.an001.0@gmail.com</a>
<a href=""mailto:d.e.l.i.very.man.0.01.0@gmail.com"">d.e.l.i.very.man.0.01.0@gmail.com</a>
<a href=""mailto:d.e.l.iv.er.y.ma.n0.0.10@gmail.com"">d.e.l.iv.er.y.ma.n0.0.10@gmail.com</a>
<a href=""mailto:de.l.ive.ry.ma.n0.01.0@gmail.com"">de.l.ive.ry.ma.n0.01.0@gmail.com</a>
<a href=""mailto:de.liv.ery.m.a.n.0.0.10@gmail.com"">de.liv.ery.m.a.n.0.0.10@gmail.com</a>
<a href=""mailto:de.l.i.v.er.y.m.a.n00.1.0@gmail.com"">de.l.i.v.er.y.m.a.n00.1.0@gmail.com</a>
<a href=""mailto:d.eli.v.e.r.ym.a.n.0010@gmail.com"">d.eli.v.e.r.ym.a.n.0010@gmail.com</a>
<a href=""mailto:d.eli.v.e.ry.m.a.n0.0.1.0@gmail.com"">d.eli.v.e.ry.m.a.n0.0.1.0@gmail.com</a>
<a href=""mailto:deliv.er.yman0.0.10@gmail.com"">deliv.er.yman0.0.10@gmail.com</a>
<a href=""mailto:deliv.e.rym.a.n.00.1.0@gmail.com"">deliv.e.rym.a.n.00.1.0@gmail.com</a>
<a href=""mailto:d.eli.ve.rym.an0.0.10@gmail.com"">d.eli.ve.rym.an0.0.10@gmail.com</a>
<a href=""mailto:d.e.li.v.erym.an.001.0@gmail.com"">d.e.li.v.erym.an.001.0@gmail.com</a>
<a href=""mailto:del.i.v.ery.ma.n0010@gmail.com"">del.i.v.ery.ma.n0010@gmail.com</a>
<a href=""mailto:d.e.liver.yman.001.0@gmail.com"">d.e.liver.yman.001.0@gmail.com</a>
<a href=""mailto:de.l.i.ver.y.m.a.n00.10@gmail.com"">de.l.i.ver.y.m.a.n00.10@gmail.com</a>
<a href=""mailto:d.e.li.ve.ry.man00.1.0@gmail.com"">d.e.li.ve.ry.man00.1.0@gmail.com</a>
<a href=""mailto:d.e.l.i.verym.an.0010@gmail.com"">d.e.l.i.verym.an.0010@gmail.com</a>
<a href=""mailto:de.l.i.ver.y.m.an0.0.10@gmail.com"">de.l.i.ver.y.m.an0.0.10@gmail.com</a>
<a href=""mailto:d.e.li.ver.yman.0.01.0@gmail.com"">d.e.li.ver.yman.0.01.0@gmail.com</a>
<a href=""mailto:d.e.li.v.e.rym.a.n.0.010@gmail.com"">d.e.li.v.e.rym.a.n.0.010@gmail.com</a>
<a href=""mailto:de.li.ve.r.y.man001.0@gmail.com"">de.li.ve.r.y.man001.0@gmail.com</a>
<a href=""mailto:de.l.iv.e.r.y.man.0010@gmail.com"">de.l.iv.e.r.y.man.0010@gmail.com</a>
<a href=""mailto:d.e.liver.y.m.an.0.010@gmail.com"">d.e.liver.y.m.an.0.010@gmail.com</a>
<a href=""mailto:d.eli.v.e.r.yma.n0.01.0@gmail.com"">d.eli.v.e.r.yma.n0.01.0@gmail.com</a>
<a href=""mailto:d.e.liv.eryman0.01.0@gmail.com"">d.e.liv.eryman0.01.0@gmail.com</a>
<a href=""mailto:d.eli.ver.ym.an.0.0.1.0@gmail.com"">d.eli.ver.ym.an.0.0.1.0@gmail.com</a>
<a href=""mailto:de.l.i.v.er.yma.n0.0.1.0@gmail.com"">de.l.i.v.er.yma.n0.0.1.0@gmail.com</a>
<a href=""mailto:del.iveryman.001.0@gmail.com"">del.iveryman.001.0@gmail.com</a>
<a href=""mailto:de.li.ve.rym.an0.0.10@gmail.com"">de.li.ve.rym.an0.0.10@gmail.com</a>
<a href=""mailto:d.eliverym.a.n.0010@gmail.com"">d.eliverym.a.n.0010@gmail.com</a>
<a href=""mailto:de.li.v.erym.an0.010@gmail.com"">de.li.v.erym.an0.010@gmail.com</a>
<a href=""mailto:de.li.v.e.ry.ma.n00.10@gmail.com"">de.li.v.e.ry.ma.n00.10@gmail.com</a>
<a href=""mailto:de.l.iv.e.ryman00.1.0@gmail.com"">de.l.iv.e.ryman00.1.0@gmail.com</a>
<a href=""mailto:d.eliveryma.n.00.10@gmail.com"">d.eliveryma.n.00.10@gmail.com</a>
<a href=""mailto:d.e.li.ver.yman.00.1.0@gmail.com"">d.e.li.ver.yman.00.1.0@gmail.com</a>
<a href=""mailto:del.iv.e.ryman.001.0@gmail.com"">del.iv.e.ryman.001.0@gmail.com</a>
<a href=""mailto:d.el.iv.erym.a.n00.1.0@gmail.com"">d.el.iv.erym.a.n00.1.0@gmail.com</a>
<a href=""mailto:del.iv.er.yma.n.0010@gmail.com"">del.iv.er.yma.n.0010@gmail.com</a>
<a href=""mailto:d.e.li.v.er.y.ma.n.0.010@gmail.com"">d.e.li.v.er.y.ma.n.0.010@gmail.com</a>
<a href=""mailto:del.i.ver.ym.a.n.00.10@gmail.com"">del.i.ver.ym.a.n.00.10@gmail.com</a>
<a href=""mailto:d.el.i.ver.ym.an0010@gmail.com"">d.el.i.ver.ym.an0010@gmail.com</a>
<a href=""mailto:del.i.v.eryma.n0.010@gmail.com"">del.i.v.eryma.n0.010@gmail.com</a>
<a href=""mailto:de.l.i.ve.r.y.m.an.0010@gmail.com"">de.l.i.ve.r.y.m.an.0010@gmail.com</a>
<a href=""mailto:d.e.li.ver.y.m.an0.010@gmail.com"">d.e.li.ver.y.m.an0.010@gmail.com</a>
<a href=""mailto:d.elive.r.y.m.an.0010@gmail.com"">d.elive.r.y.m.an.0010@gmail.com</a>
<a href=""mailto:de.live.r.ym.a.n.00.1.0@gmail.com"">de.live.r.ym.a.n.00.1.0@gmail.com</a>
<a href=""mailto:d.el.i.ver.y.man0.0.1.0@gmail.com"">d.el.i.ver.y.man0.0.1.0@gmail.com</a>
<a href=""mailto:d.e.liver.yman.0.0.1.0@gmail.com"">d.e.liver.yman.0.0.1.0@gmail.com</a>
<a href=""mailto:d.eliv.e.r.ym.an00.10@gmail.com"">d.eliv.e.r.ym.an00.10@gmail.com</a>
<a href=""mailto:d.eliveryman.0.01.0@gmail.com"">d.eliveryman.0.01.0@gmail.com</a>
<a href=""mailto:delive.r.y.m.a.n.0.010@gmail.com"">delive.r.y.m.a.n.0.010@gmail.com</a>
<a href=""mailto:d.e.l.ive.ryman.0.010@gmail.com"">d.e.l.ive.ryman.0.010@gmail.com</a>
<a href=""mailto:d.eli.v.ery.ma.n00.1.0@gmail.com"">d.eli.v.ery.ma.n00.1.0@gmail.com</a>
<a href=""mailto:de.l.ive.rym.an.00.1.0@gmail.com"">de.l.ive.rym.an.00.1.0@gmail.com</a>
<a href=""mailto:del.i.ve.r.y.m.an.00.10@gmail.com"">del.i.ve.r.y.m.an.00.10@gmail.com</a>
<a href=""mailto:d.el.i.ve.ry.m.an0.0.10@gmail.com"">d.el.i.ve.ry.m.an0.0.10@gmail.com</a>
<a href=""mailto:d.el.i.v.e.rym.an.00.10@gmail.com"">d.el.i.v.e.rym.an.00.10@gmail.com</a>
<a href=""mailto:delive.r.yman001.0@gmail.com"">delive.r.yman001.0@gmail.com</a>
<a href=""mailto:d.e.liv.eryman00.1.0@gmail.com"">d.e.liv.eryman00.1.0@gmail.com</a>
<a href=""mailto:del.i.v.ery.m.a.n00.1.0@gmail.com"">del.i.v.ery.m.a.n00.1.0@gmail.com</a>
<a href=""mailto:deliv.e.r.y.m.a.n.001.0@gmail.com"">deliv.e.r.y.m.a.n.001.0@gmail.com</a>
<a href=""mailto:d.e.l.i.ve.ry.man.0.0.1.0@gmail.com"">d.e.l.i.ve.ry.man.0.0.1.0@gmail.com</a>
<a href=""mailto:d.e.l.i.v.e.rym.a.n.001.0@gmail.com"">d.e.l.i.v.e.rym.a.n.001.0@gmail.com</a>
<a href=""mailto:d.e.liv.er.yman00.10@gmail.com"">d.e.liv.er.yman00.10@gmail.com</a>
<a href=""mailto:deli.v.e.r.y.m.an.00.10@gmail.com"">deli.v.e.r.y.m.an.00.10@gmail.com</a>
<a href=""mailto:d.e.l.ive.r.yman00.10@gmail.com"">d.e.l.ive.r.yman00.10@gmail.com</a>
<a href=""mailto:d.e.l.ive.rym.a.n0010@gmail.com"">d.e.l.ive.rym.a.n0010@gmail.com</a>
<a href=""mailto:del.iver.yman00.10@gmail.com"">del.iver.yman00.10@gmail.com</a>
<a href=""mailto:d.el.i.v.eryman.0.0.1.0@gmail.com"">d.el.i.v.eryman.0.0.1.0@gmail.com</a>
<a href=""mailto:d.elive.ry.m.an0.010@gmail.com"">d.elive.ry.m.an0.010@gmail.com</a>
<a href=""mailto:d.e.liv.er.y.ma.n0.0.1.0@gmail.com"">d.e.liv.er.y.ma.n0.0.1.0@gmail.com</a>
<a href=""mailto:d.e.l.i.ve.r.y.ma.n.00.10@gmail.com"">d.e.l.i.ve.r.y.ma.n.00.10@gmail.com</a>
<a href=""mailto:d.el.i.v.ery.ma.n.0010@gmail.com"">d.el.i.v.ery.ma.n.0010@gmail.com</a>
<a href=""mailto:de.l.ive.r.ym.a.n.0.010@gmail.com"">de.l.ive.r.ym.a.n.0.010@gmail.com</a>
<a href=""mailto:de.liv.e.r.yma.n0010@gmail.com"">de.liv.e.r.yma.n0010@gmail.com</a>
<a href=""mailto:de.l.i.v.e.ry.man00.10@gmail.com"">de.l.i.v.e.ry.man00.10@gmail.com</a>
<a href=""mailto:de.l.i.v.e.ry.m.an.0.0.10@gmail.com"">de.l.i.v.e.ry.m.an.0.0.10@gmail.com</a>
<a href=""mailto:de.l.ive.r.y.ma.n.0.010@gmail.com"">de.l.ive.r.y.ma.n.0.010@gmail.com</a>
<a href=""mailto:d.e.l.iv.e.r.y.ma.n0.010@gmail.com"">d.e.l.iv.e.r.y.ma.n0.010@gmail.com</a>
<a href=""mailto:d.e.l.i.v.e.r.ym.an.0.0.10@gmail.com"">d.e.l.i.v.e.r.ym.an.0.0.10@gmail.com</a>
<a href=""mailto:del.iv.e.ry.man.0010@gmail.com"">del.iv.e.ry.man.0010@gmail.com</a>
<a href=""mailto:d.elive.r.y.m.a.n.0.0.1.0@gmail.com"">d.elive.r.y.m.a.n.0.0.1.0@gmail.com</a>
<a href=""mailto:d.el.iv.ery.ma.n.00.10@gmail.com"">d.el.iv.ery.ma.n.00.10@gmail.com</a>
<a href=""mailto:d.e.l.i.ver.y.m.an0010@gmail.com"">d.e.l.i.ver.y.m.an0010@gmail.com</a>
<a href=""mailto:del.iver.y.m.an.0.0.1.0@gmail.com"">del.iver.y.m.an.0.0.1.0@gmail.com</a>
<a href=""mailto:de.live.r.y.m.an0.010@gmail.com"">de.live.r.y.m.an0.010@gmail.com</a>
<a href=""mailto:d.e.liv.e.r.yma.n0010@gmail.com"">d.e.liv.e.r.yma.n0010@gmail.com</a>
<a href=""mailto:de.liv.e.r.ym.a.n00.1.0@gmail.com"">de.liv.e.r.ym.a.n00.1.0@gmail.com</a>
<a href=""mailto:de.l.i.ver.y.man.0.0.10@gmail.com"">de.l.i.ver.y.man.0.0.10@gmail.com</a>
<a href=""mailto:de.live.ry.ma.n.0.010@gmail.com"">de.live.ry.ma.n.0.010@gmail.com</a>
<a href=""mailto:d.e.liver.yman.00.10@gmail.com"">d.e.liver.yman.00.10@gmail.com</a>
<a href=""mailto:del.iv.er.y.man0010@gmail.com"">del.iv.er.y.man0010@gmail.com</a>
<a href=""mailto:d.eli.ve.r.y.m.a.n.00.1.0@gmail.com"">d.eli.ve.r.y.m.a.n.00.1.0@gmail.com</a>
<a href=""mailto:d.eliver.y.m.an.0.010@gmail.com"">d.eliver.y.m.an.0.010@gmail.com</a>
<a href=""mailto:del.iv.e.ry.m.a.n.0010@gmail.com"">del.iv.e.ry.m.a.n.0010@gmail.com</a>
<a href=""mailto:de.l.i.ver.yman.0.010@gmail.com"">de.l.i.ver.yman.0.010@gmail.com</a>
<a href=""mailto:d.e.liv.e.ry.m.an.00.1.0@gmail.com"">d.e.liv.e.ry.m.an.00.1.0@gmail.com</a>
<a href=""mailto:deliver.y.m.an001.0@gmail.com"">deliver.y.m.an001.0@gmail.com</a>
<a href=""mailto:del.i.v.er.yman.00.1.0@gmail.com"">del.i.v.er.yman.00.1.0@gmail.com</a>
<a href=""mailto:d.el.i.ve.ry.m.a.n0.0.10@gmail.com"">d.el.i.ve.ry.m.a.n0.0.10@gmail.com</a>
<a href=""mailto:de.li.v.ery.ma.n0.010@gmail.com"">de.li.v.ery.ma.n0.010@gmail.com</a>
<a href=""mailto:de.liv.e.ry.m.a.n0.01.0@gmail.com"">de.liv.e.ry.m.a.n0.01.0@gmail.com</a>
<a href=""mailto:d.eli.ver.yman0.0.1.0@gmail.com"">d.eli.ver.yman0.0.1.0@gmail.com</a>
<a href=""mailto:de.li.verym.an001.0@gmail.com"">de.li.verym.an001.0@gmail.com</a>
<a href=""mailto:d.el.i.v.e.rym.a.n.00.10@gmail.com"">d.el.i.v.e.rym.a.n.00.10@gmail.com</a>
<a href=""mailto:del.ive.r.yma.n.0010@gmail.com"">del.ive.r.yma.n.0010@gmail.com</a>
<a href=""mailto:deliv.e.ry.ma.n00.10@gmail.com"">deliv.e.ry.ma.n00.10@gmail.com</a>
<a href=""mailto:delive.rym.an.001.0@gmail.com"">delive.rym.an.001.0@gmail.com</a>
<a href=""mailto:de.l.ive.r.yma.n0010@gmail.com"">de.l.ive.r.yma.n0010@gmail.com</a>
<a href=""mailto:d.eliv.e.ry.man00.10@gmail.com"">d.eliv.e.ry.man00.10@gmail.com</a>
<a href=""mailto:d.eliveryma.n0.0.1.0@gmail.com"">d.eliveryma.n0.0.1.0@gmail.com</a>
<a href=""mailto:del.i.ve.r.y.man.0010@gmail.com"">del.i.ve.r.y.man.0010@gmail.com</a>
<a href=""mailto:d.eli.ve.ryman001.0@gmail.com"">d.eli.ve.ryman001.0@gmail.com</a>
<a href=""mailto:d.e.l.ive.ry.m.a.n0.01.0@gmail.com"">d.e.l.ive.ry.m.a.n0.01.0@gmail.com</a>
<a href=""mailto:d.e.l.i.v.eryman001.0@gmail.com"">d.e.l.i.v.eryman001.0@gmail.com</a>
<a href=""mailto:d.e.live.r.y.m.an.0.0.1.0@gmail.com"">d.e.live.r.y.m.an.0.0.1.0@gmail.com</a>
<a href=""mailto:de.l.iverym.an.00.10@gmail.com"">de.l.iverym.an.00.10@gmail.com</a>
<a href=""mailto:del.i.v.ery.man0.010@gmail.com"">del.i.v.ery.man0.010@gmail.com</a>
<a href=""mailto:de.l.i.ve.ryma.n.0.0.1.0@gmail.com"">de.l.i.ve.ryma.n.0.0.1.0@gmail.com</a>
<a href=""mailto:d.e.liv.er.y.m.an.0.0.10@gmail.com"">d.e.liv.er.y.m.an.0.0.10@gmail.com</a>
<a href=""mailto:d.e.l.iv.ery.m.a.n.0.0.10@gmail.com"">d.e.l.iv.ery.m.a.n.0.0.10@gmail.com</a>
<a href=""mailto:de.liverym.a.n00.1.0@gmail.com"">de.liverym.a.n00.1.0@gmail.com</a>
<a href=""mailto:d.el.i.ver.yman0.0.10@gmail.com"">d.el.i.ver.yman0.0.10@gmail.com</a>
<a href=""mailto:d.e.l.i.v.e.r.ym.a.n0.0.1.0@gmail.com"">d.e.l.i.v.e.r.ym.a.n0.0.1.0@gmail.com</a>
<a href=""mailto:d.e.liv.er.yma.n.0.01.0@gmail.com"">d.e.liv.er.yma.n.0.01.0@gmail.com</a>
<a href=""mailto:d.e.l.iver.yma.n00.10@gmail.com"">d.e.l.iver.yma.n00.10@gmail.com</a>
<a href=""mailto:de.l.i.v.er.y.m.a.n0.01.0@gmail.com"">de.l.i.v.er.y.m.a.n0.01.0@gmail.com</a>
<a href=""mailto:d.el.i.v.e.r.y.man001.0@gmail.com"">d.el.i.v.e.r.y.man001.0@gmail.com</a>
<a href=""mailto:d.el.iv.er.yma.n00.10@gmail.com"">d.el.iv.er.yma.n00.10@gmail.com</a>
<a href=""mailto:d.el.iver.y.m.an001.0@gmail.com"">d.el.iver.y.m.an001.0@gmail.com</a>
<a href=""mailto:de.liv.e.r.y.m.an00.1.0@gmail.com"">de.liv.e.r.y.m.an00.1.0@gmail.com</a>
<a href=""mailto:d.e.l.i.veryman0.0.1.0@gmail.com"">d.e.l.i.veryman0.0.1.0@gmail.com</a>
<a href=""mailto:d.el.i.ver.y.man00.10@gmail.com"">d.el.i.ver.y.man00.10@gmail.com</a>
<a href=""mailto:d.el.iv.er.y.man0.0.10@gmail.com"">d.el.iv.er.y.man0.0.10@gmail.com</a>
<a href=""mailto:deliv.er.y.ma.n.00.10@gmail.com"">deliv.er.y.ma.n.00.10@gmail.com</a>
<a href=""mailto:del.ivery.m.a.n0.010@gmail.com"">del.ivery.m.a.n0.010@gmail.com</a>
<a href=""mailto:d.el.iv.erym.a.n0.0.1.0@gmail.com"">d.el.iv.erym.a.n0.0.1.0@gmail.com</a>
<a href=""mailto:de.liv.e.rym.a.n.00.10@gmail.com"">de.liv.e.rym.a.n.00.10@gmail.com</a>
<a href=""mailto:de.l.i.verym.a.n.0.0.10@gmail.com"">de.l.i.verym.a.n.0.0.10@gmail.com</a>
<a href=""mailto:d.eli.ver.yman.0010@gmail.com"">d.eli.ver.yman.0010@gmail.com</a>
<a href=""mailto:d.e.liv.er.y.ma.n0.010@gmail.com"">d.e.liv.er.y.ma.n0.010@gmail.com</a>
<a href=""mailto:d.e.l.iv.e.r.y.m.an.0.0.10@gmail.com"">d.e.l.iv.e.r.y.m.an.0.0.10@gmail.com</a>
<a href=""mailto:deli.ver.y.m.a.n001.0@gmail.com"">deli.ver.y.m.a.n001.0@gmail.com</a>
<a href=""mailto:de.li.ve.r.y.ma.n.00.1.0@gmail.com"">de.li.ve.r.y.ma.n.00.1.0@gmail.com</a>
<a href=""mailto:de.l.i.v.ery.ma.n.0.01.0@gmail.com"">de.l.i.v.ery.ma.n.0.01.0@gmail.com</a>
<a href=""mailto:deli.v.e.rym.a.n.0.0.10@gmail.com"">deli.v.e.rym.a.n.0.0.10@gmail.com</a>
<a href=""mailto:d.e.liv.e.rym.an.0.0.10@gmail.com"">d.e.liv.e.rym.an.0.0.10@gmail.com</a>
<a href=""mailto:del.ive.ry.man001.0@gmail.com"">del.ive.ry.man001.0@gmail.com</a>
<a href=""mailto:d.e.li.ve.r.ym.a.n00.10@gmail.com"">d.e.li.ve.r.ym.a.n00.10@gmail.com</a>
<a href=""mailto:del.i.v.ery.ma.n00.1.0@gmail.com"">del.i.v.ery.ma.n00.1.0@gmail.com</a>
<a href=""mailto:de.li.ve.r.ym.a.n0.010@gmail.com"">de.li.ve.r.ym.a.n0.010@gmail.com</a>
<a href=""mailto:deli.very.ma.n.00.10@gmail.com"">deli.very.ma.n.00.10@gmail.com</a>
<a href=""mailto:d.e.liver.yma.n.0010@gmail.com"">d.e.liver.yma.n.0010@gmail.com</a>
<a href=""mailto:deli.ve.r.ym.a.n0.0.10@gmail.com"">deli.ve.r.ym.a.n0.0.10@gmail.com</a>
<a href=""mailto:de.live.ry.man0.0.1.0@gmail.com"">de.live.ry.man0.0.1.0@gmail.com</a>
<a href=""mailto:d.e.liv.ery.man.00.10@gmail.com"">d.e.liv.ery.man.00.10@gmail.com</a>
<a href=""mailto:d.eliv.e.r.ym.an.0.010@gmail.com"">d.eliv.e.r.ym.an.0.010@gmail.com</a>
<a href=""mailto:d.elive.r.yma.n.001.0@gmail.com"">d.elive.r.yma.n.001.0@gmail.com</a>
<a href=""mailto:d.el.iv.er.ym.an.0010@gmail.com"">d.el.iv.er.ym.an.0010@gmail.com</a>
<a href=""mailto:de.l.ive.r.yman.0.0.10@gmail.com"">de.l.ive.r.yman.0.0.10@gmail.com</a>
<a href=""mailto:d.e.li.ver.ym.a.n001.0@gmail.com"">d.e.li.ver.ym.a.n001.0@gmail.com</a>
<a href=""mailto:d.e.li.very.m.an.0.0.1.0@gmail.com"">d.e.li.very.m.an.0.0.1.0@gmail.com</a>
<a href=""mailto:del.i.ve.r.y.ma.n.0010@gmail.com"">del.i.ve.r.y.ma.n.0010@gmail.com</a>
<a href=""mailto:de.l.i.ver.y.man001.0@gmail.com"">de.l.i.ver.y.man001.0@gmail.com</a>
<a href=""mailto:d.e.li.ve.ryma.n0.0.10@gmail.com"">d.e.li.ve.ryma.n0.0.10@gmail.com</a>
<a href=""mailto:d.e.l.i.veryma.n.00.1.0@gmail.com"">d.e.l.i.veryma.n.00.1.0@gmail.com</a>
<a href=""mailto:del.i.ver.y.m.an00.1.0@gmail.com"">del.i.ver.y.m.an00.1.0@gmail.com</a>
<a href=""mailto:de.liv.e.ry.ma.n.0.01.0@gmail.com"">de.liv.e.ry.ma.n.0.01.0@gmail.com</a>
<a href=""mailto:d.e.l.i.ve.r.ym.an0.01.0@gmail.com"">d.e.l.i.ve.r.ym.an0.01.0@gmail.com</a>
<a href=""mailto:d.e.l.iv.ery.m.a.n.00.10@gmail.com"">d.e.l.iv.ery.m.a.n.00.10@gmail.com</a>
<a href=""mailto:d.e.live.r.y.m.a.n0.01.0@gmail.com"">d.e.live.r.y.m.a.n0.01.0@gmail.com</a>
<a href=""mailto:de.l.iver.y.m.an0.0.10@gmail.com"">de.l.iver.y.m.an0.0.10@gmail.com</a>
<a href=""mailto:del.i.ver.ym.a.n00.10@gmail.com"">del.i.ver.ym.a.n00.10@gmail.com</a>
<a href=""mailto:d.eli.v.e.r.yma.n.0.0.10@gmail.com"">d.eli.v.e.r.yma.n.0.0.10@gmail.com</a>
<a href=""mailto:d.el.ive.r.ym.a.n0.0.10@gmail.com"">d.el.ive.r.ym.a.n0.0.10@gmail.com</a>
<a href=""mailto:d.e.li.ver.ym.a.n0.0.1.0@gmail.com"">d.e.li.ver.ym.a.n0.0.1.0@gmail.com</a>
<a href=""mailto:d.e.liv.er.y.m.a.n0.0.10@gmail.com"">d.e.liv.er.y.m.a.n0.0.10@gmail.com</a>
<a href=""mailto:de.live.ryma.n.00.1.0@gmail.com"">de.live.ryma.n.00.1.0@gmail.com</a>
<a href=""mailto:de.liv.e.ryman.0010@gmail.com"">de.liv.e.ryman.0010@gmail.com</a>
<a href=""mailto:d.e.li.ve.r.ym.an001.0@gmail.com"">d.e.li.ve.r.ym.an001.0@gmail.com</a>
<a href=""mailto:deli.v.e.r.y.ma.n.00.10@gmail.com"">deli.v.e.r.y.ma.n.00.10@gmail.com</a>
<a href=""mailto:del.iver.ym.a.n00.10@gmail.com"">del.iver.ym.a.n00.10@gmail.com</a>
<a href=""mailto:d.el.i.v.e.r.yman0.0.10@gmail.com"">d.el.i.v.e.r.yman0.0.10@gmail.com</a>
<a href=""mailto:de.li.verym.an.0.010@gmail.com"">de.li.verym.an.0.010@gmail.com</a>
<a href=""mailto:de.li.ver.y.ma.n.0.0.1.0@gmail.com"">de.li.ver.y.ma.n.0.0.1.0@gmail.com</a>
<a href=""mailto:d.e.live.rym.an0.0.10@gmail.com"">d.e.live.rym.an0.0.10@gmail.com</a>
<a href=""mailto:de.l.i.v.er.yma.n.0.01.0@gmail.com"">de.l.i.v.er.yma.n.0.01.0@gmail.com</a>
<a href=""mailto:del.iv.er.ym.an.0.0.1.0@gmail.com"">del.iv.er.ym.an.0.0.1.0@gmail.com</a>
<a href=""mailto:del.ive.r.yman.00.10@gmail.com"">del.ive.r.yman.00.10@gmail.com</a>
<a href=""mailto:d.e.live.r.y.ma.n.0.0.1.0@gmail.com"">d.e.live.r.y.ma.n.0.0.1.0@gmail.com</a>
<a href=""mailto:d.el.i.ve.ry.ma.n0.0.1.0@gmail.com"">d.el.i.ve.ry.ma.n0.0.1.0@gmail.com</a>
<a href=""mailto:de.l.iveryma.n0.01.0@gmail.com"">de.l.iveryma.n0.01.0@gmail.com</a>
<a href=""mailto:freelanceg051@gmail.com"">freelanceg051@gmail.com</a>
<a href=""mailto:fre.ela.n.ce.g0.51@gmail.com"">fre.ela.n.ce.g0.51@gmail.com</a>
<a href=""mailto:freel.a.nc.e.g0.51@gmail.com"">freel.a.nc.e.g0.51@gmail.com</a>
<a href=""mailto:f.r.eelan.ceg.051@gmail.com"">f.r.eelan.ceg.051@gmail.com</a>
<a href=""mailto:freel.a.n.c.eg.051@gmail.com"">freel.a.n.c.eg.051@gmail.com</a>
<a href=""mailto:f.reelanceg05.1@gmail.com"">f.reelanceg05.1@gmail.com</a>
<a href=""mailto:fr.e.el.a.n.c.eg0.51@gmail.com"">fr.e.el.a.n.c.eg0.51@gmail.com</a>
<a href=""mailto:f.ree.l.ance.g05.1@gmail.com"">f.ree.l.ance.g05.1@gmail.com</a>
<a href=""mailto:fr.eela.nc.eg05.1@gmail.com"">fr.eela.nc.eg05.1@gmail.com</a>
<a href=""mailto:fre.ela.nc.eg0.51@gmail.com"">fre.ela.nc.eg0.51@gmail.com</a>
<a href=""mailto:f.re.el.a.n.ceg0.5.1@gmail.com"">f.re.el.a.n.ceg0.5.1@gmail.com</a>
<a href=""mailto:fre.e.l.a.nc.e.g051@gmail.com"">fre.e.l.a.nc.e.g051@gmail.com</a>
<a href=""mailto:fr.e.e.la.n.ceg05.1@gmail.com"">fr.e.e.la.n.ceg05.1@gmail.com</a>
<a href=""mailto:fr.e.e.lanc.eg0.5.1@gmail.com"">fr.e.e.lanc.eg0.5.1@gmail.com</a>
<a href=""mailto:fre.el.a.n.c.e.g05.1@gmail.com"">fre.el.a.n.c.e.g05.1@gmail.com</a>
<a href=""mailto:f.re.e.l.a.n.ceg051@gmail.com"">f.re.e.l.a.n.ceg051@gmail.com</a>
<a href=""mailto:f.re.e.l.an.c.e.g.0.51@gmail.com"">f.re.e.l.an.c.e.g.0.51@gmail.com</a>
<a href=""mailto:f.re.ela.n.ceg.05.1@gmail.com"">f.re.ela.n.ceg.05.1@gmail.com</a>
<a href=""mailto:fr.ee.l.ance.g0.5.1@gmail.com"">fr.ee.l.ance.g0.5.1@gmail.com</a>
<a href=""mailto:freela.nc.eg.051@gmail.com"">freela.nc.eg.051@gmail.com</a>
<a href=""mailto:f.reelan.c.e.g.05.1@gmail.com"">f.reelan.c.e.g.05.1@gmail.com</a>
<a href=""mailto:f.r.e.elan.c.eg051@gmail.com"">f.r.e.elan.c.eg051@gmail.com</a>
<a href=""mailto:free.la.nce.g05.1@gmail.com"">free.la.nce.g05.1@gmail.com</a>
<a href=""mailto:fr.e.e.lan.ce.g.0.5.1@gmail.com"">fr.e.e.lan.ce.g.0.5.1@gmail.com</a>
<a href=""mailto:fre.e.lanceg05.1@gmail.com"">fre.e.lanceg05.1@gmail.com</a>
<a href=""mailto:fre.ela.nc.e.g05.1@gmail.com"">fre.ela.nc.e.g05.1@gmail.com</a>
<a href=""mailto:free.lance.g051@gmail.com"">free.lance.g051@gmail.com</a>
<a href=""mailto:fr.e.ela.nce.g.05.1@gmail.com"">fr.e.ela.nce.g.05.1@gmail.com</a>
<a href=""mailto:freel.anceg051@gmail.com"">freel.anceg051@gmail.com</a>
<a href=""mailto:f.reelanc.eg.0.5.1@gmail.com"">f.reelanc.eg.0.5.1@gmail.com</a>
<a href=""mailto:f.re.e.l.a.n.c.e.g.0.5.1@gmail.com"">f.re.e.l.a.n.c.e.g.0.5.1@gmail.com</a>
<a href=""mailto:f.re.el.a.n.ce.g.05.1@gmail.com"">f.re.el.a.n.ce.g.05.1@gmail.com</a>
<a href=""mailto:f.r.e.ela.n.c.e.g05.1@gmail.com"">f.r.e.ela.n.c.e.g05.1@gmail.com</a>
<a href=""mailto:fre.e.l.a.nceg.0.5.1@gmail.com"">fre.e.l.a.nceg.0.5.1@gmail.com</a>
<a href=""mailto:f.r.e.el.a.nceg05.1@gmail.com"">f.r.e.el.a.nceg05.1@gmail.com</a>
<a href=""mailto:free.lan.c.e.g.051@gmail.com"">free.lan.c.e.g.051@gmail.com</a>
<a href=""mailto:f.re.ela.nc.e.g.0.5.1@gmail.com"">f.re.ela.nc.e.g.0.5.1@gmail.com</a>
<a href=""mailto:f.reela.nceg051@gmail.com"">f.reela.nceg051@gmail.com</a>
<a href=""mailto:free.la.nce.g0.51@gmail.com"">free.la.nce.g0.51@gmail.com</a>
<a href=""mailto:f.reel.a.nce.g.0.51@gmail.com"">f.reel.a.nce.g.0.51@gmail.com</a>
<a href=""mailto:f.r.ee.la.nceg.051@gmail.com"">f.r.ee.la.nceg.051@gmail.com</a>
<a href=""mailto:freela.n.ce.g.051@gmail.com"">freela.n.ce.g.051@gmail.com</a>
<a href=""mailto:f.reel.a.nce.g.0.5.1@gmail.com"">f.reel.a.nce.g.0.5.1@gmail.com</a>
<a href=""mailto:f.r.eelance.g.0.5.1@gmail.com"">f.r.eelance.g.0.5.1@gmail.com</a>
<a href=""mailto:fr.eel.a.n.c.eg.0.5.1@gmail.com"">fr.eel.a.n.c.eg.0.5.1@gmail.com</a>
<a href=""mailto:f.r.eelan.ceg05.1@gmail.com"">f.r.eelan.ceg05.1@gmail.com</a>
<a href=""mailto:fr.e.e.l.anc.eg.051@gmail.com"">fr.e.e.l.anc.eg.051@gmail.com</a>
<a href=""mailto:f.r.ee.l.a.n.ceg.05.1@gmail.com"">f.r.ee.l.a.n.ceg.05.1@gmail.com</a>
<a href=""mailto:f.ree.lan.ce.g05.1@gmail.com"">f.ree.lan.ce.g05.1@gmail.com</a>
<a href=""mailto:freel.a.n.c.e.g0.51@gmail.com"">freel.a.n.c.e.g0.51@gmail.com</a>
<a href=""mailto:freel.anc.eg05.1@gmail.com"">freel.anc.eg05.1@gmail.com</a>
<a href=""mailto:f.r.eela.nc.eg0.51@gmail.com"">f.r.eela.nc.eg0.51@gmail.com</a>
<a href=""mailto:f.r.e.el.an.c.e.g05.1@gmail.com"">f.r.e.el.an.c.e.g05.1@gmail.com</a>
<a href=""mailto:f.r.eela.n.ce.g051@gmail.com"">f.r.eela.n.ce.g051@gmail.com</a>
<a href=""mailto:f.r.ee.l.ance.g.051@gmail.com"">f.r.ee.l.ance.g.051@gmail.com</a>
<a href=""mailto:f.r.e.e.lanceg051@gmail.com"">f.r.e.e.lanceg051@gmail.com</a>
<a href=""mailto:fr.e.elanc.eg.051@gmail.com"">fr.e.elanc.eg.051@gmail.com</a>
<a href=""mailto:fre.e.l.anc.eg.0.5.1@gmail.com"">fre.e.l.anc.eg.0.5.1@gmail.com</a>
<a href=""mailto:f.re.ela.n.ceg.051@gmail.com"">f.re.ela.n.ceg.051@gmail.com</a>
<a href=""mailto:fre.el.a.nceg05.1@gmail.com"">fre.el.a.nceg05.1@gmail.com</a>
<a href=""mailto:f.ree.lan.ceg.0.51@gmail.com"">f.ree.lan.ceg.0.51@gmail.com</a>
<a href=""mailto:fr.e.el.a.nc.eg.0.5.1@gmail.com"">fr.e.el.a.nc.eg.0.5.1@gmail.com</a>
<a href=""mailto:f.r.eelanc.eg05.1@gmail.com"">f.r.eelanc.eg05.1@gmail.com</a>
<a href=""mailto:f.r.ee.lanc.e.g051@gmail.com"">f.r.ee.lanc.e.g051@gmail.com</a>
<a href=""mailto:freel.a.nc.e.g05.1@gmail.com"">freel.a.nc.e.g05.1@gmail.com</a>
<a href=""mailto:fr.ee.l.an.ceg.05.1@gmail.com"">fr.ee.l.an.ceg.05.1@gmail.com</a>
<a href=""mailto:f.r.ee.l.anceg.05.1@gmail.com"">f.r.ee.l.anceg.05.1@gmail.com</a>
<a href=""mailto:f.re.e.la.n.c.eg.0.51@gmail.com"">f.re.e.la.n.c.eg.0.51@gmail.com</a>
<a href=""mailto:fr.e.ela.nc.e.g0.51@gmail.com"">fr.e.ela.nc.e.g0.51@gmail.com</a>
<a href=""mailto:f.r.e.e.l.a.n.ce.g0.5.1@gmail.com"">f.r.e.e.l.a.n.ce.g0.5.1@gmail.com</a>
<a href=""mailto:f.r.eel.a.n.ceg0.5.1@gmail.com"">f.r.eel.a.n.ceg0.5.1@gmail.com</a>
<a href=""mailto:fr.e.e.l.a.nc.e.g.0.51@gmail.com"">fr.e.e.l.a.nc.e.g.0.51@gmail.com</a>
<a href=""mailto:fr.eel.a.nceg.051@gmail.com"">fr.eel.a.nceg.051@gmail.com</a>
<a href=""mailto:f.re.ela.n.c.e.g0.5.1@gmail.com"">f.re.ela.n.c.e.g0.5.1@gmail.com</a>
<a href=""mailto:f.r.e.e.l.a.nc.eg0.51@gmail.com"">f.r.e.e.l.a.nc.eg0.51@gmail.com</a>
<a href=""mailto:fr.e.e.la.nc.eg0.51@gmail.com"">fr.e.e.la.nc.eg0.51@gmail.com</a>
<a href=""mailto:f.reel.a.n.ce.g.05.1@gmail.com"">f.reel.a.n.ce.g.05.1@gmail.com</a>
<a href=""mailto:fre.el.an.c.eg.05.1@gmail.com"">fre.el.an.c.eg.05.1@gmail.com</a>
<a href=""mailto:f.r.ee.l.a.nc.eg.05.1@gmail.com"">f.r.ee.l.a.nc.eg.05.1@gmail.com</a>
<a href=""mailto:fr.e.elanc.e.g.0.51@gmail.com"">fr.e.elanc.e.g.0.51@gmail.com</a>
<a href=""mailto:fr.ee.la.n.c.eg0.5.1@gmail.com"">fr.ee.la.n.c.eg0.5.1@gmail.com</a>
<a href=""mailto:f.r.ee.l.ance.g.05.1@gmail.com"">f.r.ee.l.ance.g.05.1@gmail.com</a>
<a href=""mailto:fr.ee.l.anceg.051@gmail.com"">fr.ee.l.anceg.051@gmail.com</a>
<a href=""mailto:fre.e.l.a.nceg05.1@gmail.com"">fre.e.l.a.nceg05.1@gmail.com</a>
<a href=""mailto:f.r.eel.a.nceg.0.5.1@gmail.com"">f.r.eel.a.nceg.0.5.1@gmail.com</a>
<a href=""mailto:fr.ee.l.an.ceg0.5.1@gmail.com"">fr.ee.l.an.ceg0.5.1@gmail.com</a>
<a href=""mailto:fre.e.l.a.n.c.e.g0.51@gmail.com"">fre.e.l.a.n.c.e.g0.51@gmail.com</a>
<a href=""mailto:f.re.el.a.nc.e.g0.51@gmail.com"">f.re.el.a.nc.e.g0.51@gmail.com</a>
<a href=""mailto:f.r.eelance.g051@gmail.com"">f.r.eelance.g051@gmail.com</a>
<a href=""mailto:free.l.a.n.ceg.0.5.1@gmail.com"">free.l.a.n.ceg.0.5.1@gmail.com</a>
<a href=""mailto:fr.eela.nc.eg.05.1@gmail.com"">fr.eela.nc.eg.05.1@gmail.com</a>
<a href=""mailto:f.ree.lanc.e.g0.51@gmail.com"">f.ree.lanc.e.g0.51@gmail.com</a>
<a href=""mailto:fre.ela.n.ceg.05.1@gmail.com"">fre.ela.n.ceg.05.1@gmail.com</a>
<a href=""mailto:fre.e.lanc.eg.0.51@gmail.com"">fre.e.lanc.eg.0.51@gmail.com</a>
<a href=""mailto:f.reelan.c.eg.051@gmail.com"">f.reelan.c.eg.051@gmail.com</a>
<a href=""mailto:f.ree.l.ance.g.0.5.1@gmail.com"">f.ree.l.ance.g.0.5.1@gmail.com</a>
<a href=""mailto:f.r.e.el.a.n.ce.g.05.1@gmail.com"">f.r.e.el.a.n.ce.g.05.1@gmail.com</a>
<a href=""mailto:f.re.el.a.nc.eg05.1@gmail.com"">f.re.el.a.nc.eg05.1@gmail.com</a>
<a href=""mailto:fr.eel.a.nce.g.05.1@gmail.com"">fr.eel.a.nce.g.05.1@gmail.com</a>
<a href=""mailto:fre.e.lanc.e.g.05.1@gmail.com"">fre.e.lanc.e.g.05.1@gmail.com</a>
<a href=""mailto:f.r.e.e.l.a.n.ce.g.0.51@gmail.com"">f.r.e.e.l.a.n.ce.g.0.51@gmail.com</a>
<a href=""mailto:f.r.e.e.lan.c.e.g.051@gmail.com"">f.r.e.e.lan.c.e.g.051@gmail.com</a>
<a href=""mailto:f.re.el.a.n.c.e.g.051@gmail.com"">f.re.el.a.n.c.e.g.051@gmail.com</a>
<a href=""mailto:fr.ee.l.a.nce.g0.5.1@gmail.com"">fr.ee.l.a.nce.g0.5.1@gmail.com</a>
<a href=""mailto:f.r.eela.nc.eg05.1@gmail.com"">f.r.eela.nc.eg05.1@gmail.com</a>
<a href=""mailto:fre.el.anc.e.g051@gmail.com"">fre.el.anc.e.g051@gmail.com</a>
<a href=""mailto:f.re.el.an.ceg.05.1@gmail.com"">f.re.el.an.ceg.05.1@gmail.com</a>
<a href=""mailto:fr.e.el.an.ce.g.0.51@gmail.com"">fr.e.el.an.ce.g.0.51@gmail.com</a>
<a href=""mailto:f.r.e.e.l.a.n.c.eg051@gmail.com"">f.r.e.e.l.a.n.c.eg051@gmail.com</a>
<a href=""mailto:free.la.n.c.eg0.51@gmail.com"">free.la.n.c.eg0.51@gmail.com</a>
<a href=""mailto:fre.el.anceg.05.1@gmail.com"">fre.el.anceg.05.1@gmail.com</a>
<a href=""mailto:fr.e.ela.n.ceg.05.1@gmail.com"">fr.e.ela.n.ceg.05.1@gmail.com</a>
<a href=""mailto:f.re.ela.nc.eg.051@gmail.com"">f.re.ela.nc.eg.051@gmail.com</a>
<a href=""mailto:f.r.eel.an.c.e.g05.1@gmail.com"">f.r.eel.an.c.e.g05.1@gmail.com</a>
<a href=""mailto:fr.ee.la.nc.eg051@gmail.com"">fr.ee.la.nc.eg051@gmail.com</a>
<a href=""mailto:f.re.e.lan.c.e.g.051@gmail.com"">f.re.e.lan.c.e.g.051@gmail.com</a>
<a href=""mailto:f.re.el.a.nceg.0.51@gmail.com"">f.re.el.a.nceg.0.51@gmail.com</a>
<a href=""mailto:f.re.el.a.nc.e.g051@gmail.com"">f.re.el.a.nc.e.g051@gmail.com</a>
<a href=""mailto:fre.el.a.n.ceg05.1@gmail.com"">fre.el.a.n.ceg05.1@gmail.com</a>
<a href=""mailto:f.r.e.el.a.n.c.e.g.0.51@gmail.com"">f.r.e.el.a.n.c.e.g.0.51@gmail.com</a>
<a href=""mailto:free.la.nc.eg05.1@gmail.com"">free.la.nc.eg05.1@gmail.com</a>
<a href=""mailto:f.re.el.a.n.c.e.g.0.51@gmail.com"">f.re.el.a.n.c.e.g.0.51@gmail.com</a>
<a href=""mailto:f.r.e.ela.n.ce.g051@gmail.com"">f.r.e.ela.n.ce.g051@gmail.com</a>
<a href=""mailto:free.l.a.n.c.eg.0.51@gmail.com"">free.l.a.n.c.eg.0.51@gmail.com</a>
<a href=""mailto:f.r.ee.l.a.n.ceg0.51@gmail.com"">f.r.ee.l.a.n.ceg0.51@gmail.com</a>
<a href=""mailto:freela.nc.eg0.51@gmail.com"">freela.nc.eg0.51@gmail.com</a>
<a href=""mailto:f.r.eela.nc.e.g0.51@gmail.com"">f.r.eela.nc.e.g0.51@gmail.com</a>
<a href=""mailto:f.re.e.l.a.nceg.0.5.1@gmail.com"">f.re.e.l.a.nceg.0.5.1@gmail.com</a>
<a href=""mailto:fr.ee.l.a.nc.e.g.0.5.1@gmail.com"">fr.ee.l.a.nc.e.g.0.5.1@gmail.com</a>
<a href=""mailto:f.re.elan.c.eg05.1@gmail.com"">f.re.elan.c.eg05.1@gmail.com</a>
<a href=""mailto:fr.e.el.anceg.0.51@gmail.com"">fr.e.el.anceg.0.51@gmail.com</a>
<a href=""mailto:f.reela.n.c.eg.0.5.1@gmail.com"">f.reela.n.c.eg.0.5.1@gmail.com</a>
<a href=""mailto:fr.e.e.l.a.n.ce.g0.5.1@gmail.com"">fr.e.e.l.a.n.ce.g0.5.1@gmail.com</a>
<a href=""mailto:f.reelanceg.0.5.1@gmail.com"">f.reelanceg.0.5.1@gmail.com</a>
<a href=""mailto:f.reela.n.ce.g.0.51@gmail.com"">f.reela.n.ce.g.0.51@gmail.com</a>
<a href=""mailto:freel.a.nceg.05.1@gmail.com"">freel.a.nceg.05.1@gmail.com</a>
<a href=""mailto:fre.e.la.nc.e.g0.51@gmail.com"">fre.e.la.nc.e.g0.51@gmail.com</a>
<a href=""mailto:fr.e.e.l.a.n.ceg0.51@gmail.com"">fr.e.e.l.a.n.ceg0.51@gmail.com</a>
<a href=""mailto:free.l.a.nceg05.1@gmail.com"">free.l.a.nceg05.1@gmail.com</a>
<a href=""mailto:f.r.ee.l.a.nceg051@gmail.com"">f.r.ee.l.a.nceg051@gmail.com</a>
<a href=""mailto:f.re.ela.nceg051@gmail.com"">f.re.ela.nceg051@gmail.com</a>
<a href=""mailto:f.r.eel.a.nceg.051@gmail.com"">f.r.eel.a.nceg.051@gmail.com</a>
<a href=""mailto:f.r.ee.lan.c.eg05.1@gmail.com"">f.r.ee.lan.c.eg05.1@gmail.com</a>
<a href=""mailto:fre.e.l.an.ce.g05.1@gmail.com"">fre.e.l.an.ce.g05.1@gmail.com</a>
<a href=""mailto:fre.e.la.n.ceg0.51@gmail.com"">fre.e.la.n.ceg0.51@gmail.com</a>
<a href=""mailto:fr.e.el.a.n.ceg.0.51@gmail.com"">fr.e.el.a.n.ceg.0.51@gmail.com</a>
<a href=""mailto:fr.eela.nceg05.1@gmail.com"">fr.eela.nceg05.1@gmail.com</a>
<a href=""mailto:fr.e.e.la.n.c.e.g05.1@gmail.com"">fr.e.e.la.n.c.e.g05.1@gmail.com</a>
<a href=""mailto:fr.e.e.l.ance.g.0.5.1@gmail.com"">fr.e.e.l.ance.g.0.5.1@gmail.com</a>
<a href=""mailto:fr.e.el.anceg.051@gmail.com"">fr.e.el.anceg.051@gmail.com</a>
<a href=""mailto:f.r.e.ela.n.ceg.0.51@gmail.com"">f.r.e.ela.n.ceg.0.51@gmail.com</a>
<a href=""mailto:fr.e.e.l.a.nc.eg05.1@gmail.com"">fr.e.e.l.a.nc.eg05.1@gmail.com</a>
<a href=""mailto:fre.el.a.nc.e.g051@gmail.com"">fre.el.a.nc.e.g051@gmail.com</a>
<a href=""mailto:f.ree.l.anc.e.g0.5.1@gmail.com"">f.ree.l.anc.e.g0.5.1@gmail.com</a>
<a href=""mailto:f.r.e.elan.c.e.g.05.1@gmail.com"">f.r.e.elan.c.e.g.05.1@gmail.com</a>
<a href=""mailto:f.r.eel.a.nceg0.51@gmail.com"">f.r.eel.a.nceg0.51@gmail.com</a>
<a href=""mailto:f.r.eel.a.n.c.e.g.0.5.1@gmail.com"">f.r.eel.a.n.c.e.g.0.5.1@gmail.com</a>
<a href=""mailto:f.reel.anceg0.51@gmail.com"">f.reel.anceg0.51@gmail.com</a>
<a href=""mailto:fre.el.anc.eg0.5.1@gmail.com"">fre.el.anc.eg0.5.1@gmail.com</a>
<a href=""mailto:free.l.a.nceg0.5.1@gmail.com"">free.l.a.nceg0.5.1@gmail.com</a>
<a href=""mailto:f.re.elan.c.e.g05.1@gmail.com"">f.re.elan.c.e.g05.1@gmail.com</a>
<a href=""mailto:f.re.ela.n.c.eg051@gmail.com"">f.re.ela.n.c.eg051@gmail.com</a>
<a href=""mailto:f.r.eela.n.c.eg.0.51@gmail.com"">f.r.eela.n.c.eg.0.51@gmail.com</a>
<a href=""mailto:f.re.elan.c.e.g0.5.1@gmail.com"">f.re.elan.c.e.g0.5.1@gmail.com</a>
<a href=""mailto:f.r.ee.l.anc.e.g0.5.1@gmail.com"">f.r.ee.l.anc.e.g0.5.1@gmail.com</a>
<a href=""mailto:fre.el.a.nc.eg0.5.1@gmail.com"">fre.el.a.nc.eg0.5.1@gmail.com</a>
<a href=""mailto:fr.eela.n.ceg.0.51@gmail.com"">fr.eela.n.ceg.0.51@gmail.com</a>
<a href=""mailto:f.re.e.la.n.ceg.051@gmail.com"">f.re.e.la.n.ceg.051@gmail.com</a>
<a href=""mailto:fre.el.a.n.c.e.g0.51@gmail.com"">fre.el.a.n.c.e.g0.51@gmail.com</a>
<a href=""mailto:f.r.eela.nc.eg.0.51@gmail.com"">f.r.eela.nc.eg.0.51@gmail.com</a>
<a href=""mailto:fr.ee.l.anc.eg.05.1@gmail.com"">fr.ee.l.anc.eg.05.1@gmail.com</a>
<a href=""mailto:f.ree.l.a.nceg0.5.1@gmail.com"">f.ree.l.a.nceg0.5.1@gmail.com</a>
<a href=""mailto:fr.e.e.l.a.n.ce.g.0.51@gmail.com"">fr.e.e.l.a.n.ce.g.0.51@gmail.com</a>
<a href=""mailto:fre.ela.nc.e.g.051@gmail.com"">fre.ela.nc.e.g.051@gmail.com</a>
<a href=""mailto:f.r.e.el.a.nc.e.g.05.1@gmail.com"">f.r.e.el.a.nc.e.g.05.1@gmail.com</a>
<a href=""mailto:f.r.ee.l.anc.e.g.0.5.1@gmail.com"">f.r.ee.l.anc.e.g.0.5.1@gmail.com</a>
<a href=""mailto:f.r.e.el.a.nc.eg.0.51@gmail.com"">f.r.e.el.a.nc.eg.0.51@gmail.com</a>
<a href=""mailto:f.ree.l.anc.eg.051@gmail.com"">f.ree.l.anc.eg.051@gmail.com</a>
<a href=""mailto:f.r.e.e.l.a.n.c.eg.05.1@gmail.com"">f.r.e.e.l.a.n.c.eg.05.1@gmail.com</a>
<a href=""mailto:fr.eela.n.ceg051@gmail.com"">fr.eela.n.ceg051@gmail.com</a>
<a href=""mailto:fr.eela.n.ceg0.51@gmail.com"">fr.eela.n.ceg0.51@gmail.com</a>
<a href=""mailto:fr.e.e.l.an.ce.g.0.51@gmail.com"">fr.e.e.l.an.ce.g.0.51@gmail.com</a>
<a href=""mailto:free.la.n.ce.g05.1@gmail.com"">free.la.n.ce.g05.1@gmail.com</a>
<a href=""mailto:f.r.eel.an.c.eg051@gmail.com"">f.r.eel.an.c.eg051@gmail.com</a>
<a href=""mailto:fr.e.e.la.n.ceg051@gmail.com"">fr.e.e.la.n.ceg051@gmail.com</a>
<a href=""mailto:fr.eel.anc.eg0.5.1@gmail.com"">fr.eel.anc.eg0.5.1@gmail.com</a>
<a href=""mailto:fr.e.el.a.n.c.e.g0.51@gmail.com"">fr.e.el.a.n.c.e.g0.51@gmail.com</a>
<a href=""mailto:f.r.ee.l.a.nce.g05.1@gmail.com"">f.r.ee.l.a.nce.g05.1@gmail.com</a>
<a href=""mailto:f.re.el.a.n.ceg.0.51@gmail.com"">f.re.el.a.n.ceg.0.51@gmail.com</a>
<a href=""mailto:f.reel.a.n.ceg.0.51@gmail.com"">f.reel.a.n.ceg.0.51@gmail.com</a>
<a href=""mailto:f.r.e.e.l.a.nce.g.0.51@gmail.com"">f.r.e.e.l.a.nce.g.0.51@gmail.com</a>
<a href=""mailto:f.ree.l.anc.eg.05.1@gmail.com"">f.ree.l.anc.eg.05.1@gmail.com</a>
<a href=""mailto:fr.eelan.ceg.051@gmail.com"">fr.eelan.ceg.051@gmail.com</a>
<a href=""mailto:free.la.n.c.eg.05.1@gmail.com"">free.la.n.c.eg.05.1@gmail.com</a>
<a href=""mailto:f.r.e.e.lance.g.0.51@gmail.com"">f.r.e.e.lance.g.0.51@gmail.com</a>
<a href=""mailto:f.r.eel.an.c.eg.0.51@gmail.com"">f.r.eel.an.c.eg.0.51@gmail.com</a>
<a href=""mailto:f.r.e.ela.nc.e.g05.1@gmail.com"">f.r.e.ela.nc.e.g05.1@gmail.com</a>
<a href=""mailto:f.ree.l.an.ce.g.0.5.1@gmail.com"">f.ree.l.an.ce.g.0.5.1@gmail.com</a>
<a href=""mailto:fr.e.e.lanc.eg.0.5.1@gmail.com"">fr.e.e.lanc.eg.0.5.1@gmail.com</a>
<a href=""mailto:f.r.ee.l.anc.e.g.05.1@gmail.com"">f.r.ee.l.anc.e.g.05.1@gmail.com</a>
<a href=""mailto:f.r.ee.la.n.ce.g.051@gmail.com"">f.r.ee.la.n.ce.g.051@gmail.com</a>
<a href=""mailto:mj778192@gmail.com"">mj778192@gmail.com</a>
<a href=""mailto:mj.77.8192@gmail.com"">mj.77.8192@gmail.com</a>
<a href=""mailto:m.j7.7.8192@gmail.com"">m.j7.7.8192@gmail.com</a>
<a href=""mailto:mj.77.819.2@gmail.com"">mj.77.819.2@gmail.com</a>
<a href=""mailto:mj77.8.192@gmail.com"">mj77.8.192@gmail.com</a>
<a href=""mailto:m.j.7781.92@gmail.com"">m.j.7781.92@gmail.com</a>
<a href=""mailto:m.j.7.78.192@gmail.com"">m.j.7.78.192@gmail.com</a>
<a href=""mailto:m.j778192@gmail.com"">m.j778192@gmail.com</a>
<a href=""mailto:mj7.78192@gmail.com"">mj7.78192@gmail.com</a>
<a href=""mailto:m.j77.8.1.9.2@gmail.com"">m.j77.8.1.9.2@gmail.com</a>
<a href=""mailto:mj7.78.1.9.2@gmail.com"">mj7.78.1.9.2@gmail.com</a>
<a href=""mailto:mj.77.8.1.92@gmail.com"">mj.77.8.1.92@gmail.com</a>
<a href=""mailto:mj.7.7.8.192@gmail.com"">mj.7.7.8.192@gmail.com</a>
<a href=""mailto:m.j.7.78.1.9.2@gmail.com"">m.j.7.78.1.9.2@gmail.com</a>
<a href=""mailto:m.j7.78192@gmail.com"">m.j7.78192@gmail.com</a>
<a href=""mailto:mj77.8.19.2@gmail.com"">mj77.8.19.2@gmail.com</a>
<a href=""mailto:mj7.7.8.1.9.2@gmail.com"">mj7.7.8.1.9.2@gmail.com</a>
<a href=""mailto:mj.778.192@gmail.com"">mj.778.192@gmail.com</a>
<a href=""mailto:mj.7.78.1.9.2@gmail.com"">mj.7.78.1.9.2@gmail.com</a>
<a href=""mailto:mj7.78.1.92@gmail.com"">mj7.78.1.92@gmail.com</a>
<a href=""mailto:m.j.7.7.8.19.2@gmail.com"">m.j.7.7.8.19.2@gmail.com</a>
<a href=""mailto:m.j7.781.9.2@gmail.com"">m.j7.781.9.2@gmail.com</a>
<a href=""mailto:m.j.778.19.2@gmail.com"">m.j.778.19.2@gmail.com</a>
<a href=""mailto:mj778.192@gmail.com"">mj778.192@gmail.com</a>
<a href=""mailto:m.j7.78.1.92@gmail.com"">m.j7.78.1.92@gmail.com</a>
<a href=""mailto:m.j7.7819.2@gmail.com"">m.j7.7819.2@gmail.com</a>
<a href=""mailto:m.j7.781.92@gmail.com"">m.j7.781.92@gmail.com</a>
<a href=""mailto:m.j.77.81.92@gmail.com"">m.j.77.81.92@gmail.com</a>
<a href=""mailto:m.j7.7.8.1.92@gmail.com"">m.j7.7.8.1.92@gmail.com</a>
<a href=""mailto:mj77.8.1.9.2@gmail.com"">mj77.8.1.9.2@gmail.com</a>
<a href=""mailto:m.j.77.819.2@gmail.com"">m.j.77.819.2@gmail.com</a>
<a href=""mailto:m.j778.1.9.2@gmail.com"">m.j778.1.9.2@gmail.com</a>
<a href=""mailto:m.j7.7.81.92@gmail.com"">m.j7.7.81.92@gmail.com</a>
<a href=""mailto:m.j.7.7819.2@gmail.com"">m.j.7.7819.2@gmail.com</a>
<a href=""mailto:mj.7.78.1.92@gmail.com"">mj.7.78.1.92@gmail.com</a>
<a href=""mailto:mj.7.7819.2@gmail.com"">mj.7.7819.2@gmail.com</a>
<a href=""mailto:m.j77.819.2@gmail.com"">m.j77.819.2@gmail.com</a>
<a href=""mailto:m.j77.81.9.2@gmail.com"">m.j77.81.9.2@gmail.com</a>
<a href=""mailto:m.j.7.78.1.92@gmail.com"">m.j.7.78.1.92@gmail.com</a>
<a href=""mailto:mj.7.7.8.1.92@gmail.com"">mj.7.7.8.1.92@gmail.com</a>
<a href=""mailto:m.j.7781.9.2@gmail.com"">m.j.7781.9.2@gmail.com</a>
<a href=""mailto:mj7.7.8.192@gmail.com"">mj7.7.8.192@gmail.com</a>
<a href=""mailto:m.j7.7.8.19.2@gmail.com"">m.j7.7.8.19.2@gmail.com</a>
<a href=""mailto:mj7.781.9.2@gmail.com"">mj7.781.9.2@gmail.com</a>
<a href=""mailto:mj77819.2@gmail.com"">mj77819.2@gmail.com</a>
<a href=""mailto:mj778.19.2@gmail.com"">mj778.19.2@gmail.com</a>
<a href=""mailto:mj.7.7.8192@gmail.com"">mj.7.7.8192@gmail.com</a>
<a href=""mailto:mj7781.9.2@gmail.com"">mj7781.9.2@gmail.com</a>
<a href=""mailto:mj77.8.1.92@gmail.com"">mj77.8.1.92@gmail.com</a>
<a href=""mailto:m.j.7.7.8.192@gmail.com"">m.j.7.7.8.192@gmail.com</a>
<a href=""mailto:mj7.7.81.92@gmail.com"">mj7.7.81.92@gmail.com</a>
<a href=""mailto:mj.77.8.19.2@gmail.com"">mj.77.8.19.2@gmail.com</a>
<a href=""mailto:mj7.78.192@gmail.com"">mj7.78.192@gmail.com</a>
<a href=""mailto:m.j7.7.819.2@gmail.com"">m.j7.7.819.2@gmail.com</a>
<a href=""mailto:m.j7781.92@gmail.com"">m.j7781.92@gmail.com</a>
<a href=""mailto:mj77.8192@gmail.com"">mj77.8192@gmail.com</a>
<a href=""mailto:m.j.778192@gmail.com"">m.j.778192@gmail.com</a>
<a href=""mailto:mj7.7.8.19.2@gmail.com"">mj7.7.8.19.2@gmail.com</a>
<a href=""mailto:m.j.7.7.8.1.9.2@gmail.com"">m.j.7.7.8.1.9.2@gmail.com</a>
<a href=""mailto:m.j.7.7.8192@gmail.com"">m.j.7.7.8192@gmail.com</a>
<a href=""mailto:mj.7.7.8.19.2@gmail.com"">mj.7.7.8.19.2@gmail.com</a>
<a href=""mailto:m.j7.7.81.9.2@gmail.com"">m.j7.7.81.9.2@gmail.com</a>
<a href=""mailto:m.j.7.78192@gmail.com"">m.j.7.78192@gmail.com</a>
<a href=""mailto:mj.778192@gmail.com"">mj.778192@gmail.com</a>
<a href=""mailto:mj.7781.9.2@gmail.com"">mj.7781.9.2@gmail.com</a>
<a href=""mailto:m.j.7.781.92@gmail.com"">m.j.7.781.92@gmail.com</a>
<a href=""mailto:m.j.7.7.81.9.2@gmail.com"">m.j.7.7.81.9.2@gmail.com</a>
<a href=""mailto:mj77.81.9.2@gmail.com"">mj77.81.9.2@gmail.com</a>
<a href=""mailto:mj.7.7.81.92@gmail.com"">mj.7.7.81.92@gmail.com</a>
<a href=""mailto:mj7.7819.2@gmail.com"">mj7.7819.2@gmail.com</a>
<a href=""mailto:m.j.7.7.8.1.92@gmail.com"">m.j.7.7.8.1.92@gmail.com</a>
<a href=""mailto:mj.77.81.9.2@gmail.com"">mj.77.81.9.2@gmail.com</a>
<a href=""mailto:m.j.77.8.192@gmail.com"">m.j.77.8.192@gmail.com</a>
<a href=""mailto:mj7.78.19.2@gmail.com"">mj7.78.19.2@gmail.com</a>
<a href=""mailto:m.j7.78.192@gmail.com"">m.j7.78.192@gmail.com</a>
<a href=""mailto:m.j.778.1.92@gmail.com"">m.j.778.1.92@gmail.com</a>
<a href=""mailto:mj7.7.8192@gmail.com"">mj7.7.8192@gmail.com</a>
<a href=""mailto:mj.77.8.1.9.2@gmail.com"">mj.77.8.1.9.2@gmail.com</a>
<a href=""mailto:m.j77.8.1.92@gmail.com"">m.j77.8.1.92@gmail.com</a>
<a href=""mailto:m.j7.78.1.9.2@gmail.com"">m.j7.78.1.9.2@gmail.com</a>
<a href=""mailto:m.j7.7.8.192@gmail.com"">m.j7.7.8.192@gmail.com</a>
<a href=""mailto:mj.778.19.2@gmail.com"">mj.778.19.2@gmail.com</a>
<a href=""mailto:mj7.7.8.1.92@gmail.com"">mj7.7.8.1.92@gmail.com</a>
<a href=""mailto:mj.7.781.92@gmail.com"">mj.7.781.92@gmail.com</a>
<a href=""mailto:mj.7.781.9.2@gmail.com"">mj.7.781.9.2@gmail.com</a>
<a href=""mailto:m.j.7.781.9.2@gmail.com"">m.j.7.781.9.2@gmail.com</a>
<a href=""mailto:m.j.7.78.19.2@gmail.com"">m.j.7.78.19.2@gmail.com</a>
<a href=""mailto:m.j778.192@gmail.com"">m.j778.192@gmail.com</a>
<a href=""mailto:m.j778.19.2@gmail.com"">m.j778.19.2@gmail.com</a>
<a href=""mailto:m.j778.1.92@gmail.com"">m.j778.1.92@gmail.com</a>
<a href=""mailto:m.j77.8.19.2@gmail.com"">m.j77.8.19.2@gmail.com</a>
<a href=""mailto:m.j.7.7.81.92@gmail.com"">m.j.7.7.81.92@gmail.com</a>
<a href=""mailto:mj.7.78.19.2@gmail.com"">mj.7.78.19.2@gmail.com</a>
<a href=""mailto:mj77.81.92@gmail.com"">mj77.81.92@gmail.com</a>
<a href=""mailto:mj.77.81.92@gmail.com"">mj.77.81.92@gmail.com</a>
<a href=""mailto:mj.7.7.81.9.2@gmail.com"">mj.7.7.81.9.2@gmail.com</a>
<a href=""mailto:mj.778.1.9.2@gmail.com"">mj.778.1.9.2@gmail.com</a>
<a href=""mailto:mj778192@gmail.com"">mj778192@gmail.com</a>
<a href=""mailto:mj.7781.92@gmail.com"">mj.7781.92@gmail.com</a>
<a href=""mailto:mj.77.8.192@gmail.com"">mj.77.8.192@gmail.com</a>
<a href=""mailto:m.j.77.81.9.2@gmail.com"">m.j.77.81.9.2@gmail.com</a>
<a href=""mailto:m.j77819.2@gmail.com"">m.j77819.2@gmail.com</a>
<a href=""mailto:m.j.77.8.19.2@gmail.com"">m.j.77.8.19.2@gmail.com</a>
<a href=""mailto:mj778.1.9.2@gmail.com"">mj778.1.9.2@gmail.com</a>
<a href=""mailto:m.j77.8192@gmail.com"">m.j77.8192@gmail.com</a>
<a href=""mailto:m.j.778.1.9.2@gmail.com"">m.j.778.1.9.2@gmail.com</a>
<a href=""mailto:m.j.77.8192@gmail.com"">m.j.77.8192@gmail.com</a>
<a href=""mailto:mj7.781.92@gmail.com"">mj7.781.92@gmail.com</a>
<a href=""mailto:mj.7.7.8.1.9.2@gmail.com"">mj.7.7.8.1.9.2@gmail.com</a>
<a href=""mailto:m.j.7.7.819.2@gmail.com"">m.j.7.7.819.2@gmail.com</a>
<a href=""mailto:m.j7781.9.2@gmail.com"">m.j7781.9.2@gmail.com</a>
<a href=""mailto:m.j.778.192@gmail.com"">m.j.778.192@gmail.com</a>
<a href=""mailto:m.j77.81.92@gmail.com"">m.j77.81.92@gmail.com</a>
<a href=""mailto:m.j7.78.19.2@gmail.com"">m.j7.78.19.2@gmail.com</a>
<a href=""mailto:m.j.77.8.1.92@gmail.com"">m.j.77.8.1.92@gmail.com</a>
<a href=""mailto:m.j77.8.192@gmail.com"">m.j77.8.192@gmail.com</a>
<a href=""mailto:mj.77819.2@gmail.com"">mj.77819.2@gmail.com</a>
<a href=""mailto:m.j.77.8.1.9.2@gmail.com"">m.j.77.8.1.9.2@gmail.com</a>
<a href=""mailto:m.j7.7.8.1.9.2@gmail.com"">m.j7.7.8.1.9.2@gmail.com</a>
<a href=""mailto:mj.7.78.192@gmail.com"">mj.7.78.192@gmail.com</a>
<a href=""mailto:mj.7.7.819.2@gmail.com"">mj.7.7.819.2@gmail.com</a>
<a href=""mailto:m.j.77819.2@gmail.com"">m.j.77819.2@gmail.com</a>
<a href=""mailto:mj77.819.2@gmail.com"">mj77.819.2@gmail.com</a>
<a href=""mailto:mj7.7.81.9.2@gmail.com"">mj7.7.81.9.2@gmail.com</a>
<a href=""mailto:mj.7.78192@gmail.com"">mj.7.78192@gmail.com</a>
<a href=""mailto:mj.778.1.92@gmail.com"">mj.778.1.92@gmail.com</a>
<a href=""mailto:mj778.1.92@gmail.com"">mj778.1.92@gmail.com</a>
<a href=""mailto:mj7781.92@gmail.com"">mj7781.92@gmail.com</a>
<a href=""mailto:mj7.7.819.2@gmail.com"">mj7.7.819.2@gmail.com</a>"
Vh1yEABi,atlasoss login stystem,atlasim,Lua,Sunday 29th of October 2023 01:43:47 PM CDT,"-- AtlasOS Login System

local users = { {""user1"", ""user1""}, {""user2"", ""user2""} }
local loggedin = false
old_terminate = os.pullEvent
os.pullEvent = os.pullEventRaw
currentuser = ""none""

function titlebar(title)
    term.clear()
    term.setTextColor(colors.yellow)
    term.setCursorPos(1,1)
    term.write(title)
    term.setTextColor(colors.white)
    term.setCursorPos(1,2)
end

while loggedin == false do 
    titlebar(""Login"")
    term.setCursorPos(1,2)

    term.write(""Username > "")
    local user = read()

    term.setCursorPos(1,3)
    local pass = read(""*"")

    for _,u in pairs(users) do
        if user == ""shutdown"" then
            os.shutdown()
        elseif (user == u[1]) and (pass == u[2]) then
            term.clear()
            temr.setCursorPos(1,1)
            os.pullEvent = old_terminate
            currentuser = u[1]
            shell.run(""/rom/programs/shell.lua"")
            os.pullEvent = os.pullEventRaw
            currentuser = ""none""
        else
            local a = 1
        end
    end
end
"
bKfzRDh9,Google App Script,shihabsikder,JavaScript,Sunday 29th of October 2023 12:50:42 PM CDT,"function updateSheetWithCalendarEvents() {
    var sheet = SpreadsheetApp.getActiveSpreadsheet().getActiveSheet();
    var calendar = CalendarApp.getCalendarById('YOUR_GMAIL');
    
    // Preserve initial data rows
    var initialData = sheet.getRange(2, 1, sheet.getLastRow(), 4).getValues();

    // Clear the entire sheet
    sheet.clear();

    // Re-write the headers and initial data rows
    sheet.getRange(1, 1, 1, 4).setValues([['First name', 'Surname', 'Email', 'Company']]);
    sheet.getRange(2, 1, initialData.length, 4).setValues(initialData);
    
    var learnerEmails = initialData.map(row => row[2]);
    var emailRowMapping = createEmailRowMapping(sheet, learnerEmails); 
    
    var startDate = new Date();
    startDate.setMonth(6);  // 0-based month, so 6 is July
    startDate.setDate(1);
    
    var endDate = new Date(startDate);
    endDate.setFullYear(startDate.getFullYear() + 1);
    
    var events;
    try {
        events = calendar.getEvents(startDate, endDate);
    } catch (e) {
        Logger.log('Error fetching events: ' + e.toString());
        return;
    }
    
    var relevantEvents = events.filter(function(event) {
        return event.getGuestList().some(guest => learnerEmails.includes(guest.getEmail()));
    });

    var monthYearColumns = {};

    for (var event of relevantEvents) {
        var date = event.getStartTime();
        var title = event.getTitle();
        var monthYear = date.toLocaleDateString('default', { month: 'short', year: 'numeric' });
        
        if (!monthYearColumns[monthYear]) {
            monthYearColumns[monthYear] = findMonthYearColumn(sheet, monthYear);
        }
        
        var eventColumn = monthYearColumns[monthYear];
        var uniqueTitle = title + "" "" + date.toLocaleDateString();
        var guests = event.getGuestList().map(guest => guest.getEmail()).filter(email => learnerEmails.includes(email));
        
        for (var guestEmail of guests) {
            var guestRow = emailRowMapping[guestEmail] || -1;
            if (guestRow !== -1) {
                sheet.getRange(guestRow, eventColumn).setValue(uniqueTitle);
                sheet.getRange(guestRow, eventColumn).setBackground(""#ADD8E6"");
            }
        }
    }
    highlightCallsToBeBooked(sheet);
    beautifySheet(sheet);
    freezePanes(sheet);
}

function createEmailRowMapping(sheet, emails) {
    var mapping = {};
    var lastRow = sheet.getLastRow();
    var sheetEmails = sheet.getRange(2, 3, lastRow - 1, 1).getValues();
    for (var i = 0; i < sheetEmails.length; i++) {
        if (emails.includes(sheetEmails[i][0])) {
            mapping[sheetEmails[i][0]] = i + 2;
        }
    }
    return mapping;
}

function findMonthYearColumn(sheet, monthYear) {
    var lastColumn = sheet.getLastColumn();
    var headers = sheet.getRange(1, 1, 1, lastColumn).getValues()[0];
    
    var monthColumnIndex = headers.indexOf(monthYear);
    if (monthColumnIndex !== -1) {
        return monthColumnIndex + 1;
    } else {
        var newColumnIndex = 5;
        while (headers[newColumnIndex - 1] && newColumnIndex <= lastColumn) {
            newColumnIndex++;
        }
        sheet.getRange(1, newColumnIndex).setValue(monthYear);
        return newColumnIndex;
    }
}

function highlightCallsToBeBooked(sheet) {
    var lastRow = sheet.getLastRow();
    var currentDate = new Date();
    var nextMonthYear = new Date(currentDate.getFullYear(), currentDate.getMonth() + 1, 1).toLocaleDateString('default', { month: 'short', year: 'numeric' });
    
    for (var i = 2; i <= lastRow; i++) {
        var lastEventDate = null;
        var lastColumnWithEvent = 4;
        while (sheet.getRange(i, lastColumnWithEvent).getValue()) {
            var cellValue = sheet.getRange(i, lastColumnWithEvent).getValue();
            var eventDate = new Date(cellValue.split(' ').slice(-1)[0]);
            lastEventDate = eventDate;
            lastColumnWithEvent++;
        }
        
        if (lastEventDate) {
            var timeDiff = currentDate - lastEventDate;
            var diffWeeks = Math.floor(timeDiff / (1000 * 60 * 60 * 24 * 7));
            if (diffWeeks >= 4) {
                var nextMonthColumn = findMonthYearColumn(sheet, nextMonthYear);
                sheet.getRange(i, nextMonthColumn).setBackground(""#FF0000"");
            }
        }
    }
}

function beautifySheet(sheet) {
    var lastRow = sheet.getLastRow();
    var lastColumn = sheet.getLastColumn();
    
    sheet.getRange(1, 1, 1, lastColumn).setFontWeight('bold').setBackground('#DCEEFB');
    
    for (var i = 2; i <= lastRow; i+=2) {
        sheet.getRange(i, 1, 1, lastColumn).setBackground('#E9F5FE');
    }
    
    sheet.getRange(1, 1, lastRow, lastColumn).setBorder(true, true, true, true, true, true);
    sheet.autoResizeColumns(1, lastColumn);
}

function freezePanes(sheet) {
    sheet.setFrozenRows(1);
    sheet.setFrozenColumns(4);
}

// [The New Function]

function beautifyMetricsSheet() {
  var sheet = SpreadsheetApp.getActive().getSheetByName(""User Metrics"");
  var lastRow = sheet.getLastRow();
  var lastColumn = sheet.getLastColumn();

  // Apply styles to the header row
  var headerRange = sheet.getRange(1, 1, 1, lastColumn);
  headerRange.setFontWeight('bold');
  headerRange.setBackground('#DCEEFB');

  // Apply alternating row background color
  for (var i = 2; i <= lastRow; i += 2) {
    var dataRange = sheet.getRange(""A:I"")
    dataRange.setBackground('#E9F5FE');
  }

  // Apply borders to all cells
  var borderRange = sheet.getRange(""A:I"")
  borderRange.setBorder(true, true, true, true, true, true);

  // Set data background color, border, and center-align text for the ""Last Contacted Week"" column
  var weeksAgoColumn = sheet.getRange(2, 9, lastRow - 1);
  weeksAgoColumn.setBackground('#d9edf7'); // Data background color
  weeksAgoColumn.setBorder(true, true, true, true, true, true, '#31708f', SpreadsheetApp.BorderStyle.SOLID); // Data border
  weeksAgoColumn.setHorizontalAlignment('center'); // Center-align text

  // Set hover text for the ""Last Contacted Week"" column
  var tooltips = [];
  for (var i = 0; i < lastRow - 1; i++) {
    var weeksAgoValue = sheet.getRange(i + 2, 9).getValue();
    var tooltip = weeksAgoValue + ' ago';
    tooltips.push([tooltip]);
  }
  weeksAgoColumn.setNotes(tooltips);
}

function getMonthName(month) {
  var monthNames = [""January"", ""February"", ""March"", ""April"", ""May"", ""June"", ""July"", ""August"", ""September"", ""October"", ""November"", ""December""];
  return monthNames[month];
}

function createUserMetrics() {
  var ss = SpreadsheetApp.getActiveSpreadsheet();
  var dataSheet = ss.getSheetByName(""Sheet1"");
  var data = dataSheet.getRange(2, 1, dataSheet.getLastRow() - 1, dataSheet.getLastColumn()).getValues();

  // Clear the existing ""User Metrics"" sheet, if it exists
  var metricsSheet = ss.getSheetByName('User Metrics');
  if (metricsSheet) {
    ss.deleteSheet(metricsSheet);
  }

  var eventCounts = [];

  // Initialize counts for each event type
  for (var i = 0; i < data.length; i++) {
    var rowData = data[i];
    var counts = {
      'LSC Call': 0,
      'Progress Review': 0,
      'Kick Off Call': 0
    };
    
    var latestEncounterDate = new Date(0); // Initialize with the earliest possible date
    var hasDate = false; // Flag to check if the row contains at least one date

    // Iterate through the columns containing events
    for (var j = 4; j < rowData.length; j++) {
      var event = rowData[j];
      if (event) {
        if (event.indexOf('LSC Call') !== -1) {
          counts['LSC Call']++;
        }
        if (event.indexOf('Progress Review') !== -1) {
          counts['Progress Review']++;
        }
        if (event.indexOf('Kick Off Call') !== -1) {
          counts['Kick Off Call']++;
        }

        // Extract the date from the event description
        var dateMatch = event.match(/\d{1,2}\/\d{1,2}\/\d{4}/);
        if (dateMatch) {
          var encounterDate = new Date(dateMatch[0]);
          if (encounterDate > latestEncounterDate && encounterDate <= new Date()) {
            latestEncounterDate = encounterDate;
          }
          hasDate = true;
        }
      }
    }

    // Include the ""First name,"" ""Surname,"" ""Email,"" ""Company,"" event counts, and the latest encounter date (if it exists)
    var firstName = rowData[0];
    var surname = rowData[1];
    var email = rowData[2];
    var company = rowData[3];

    // Calculate weeks ago
    var weeksAgo = calculateWeeksAgo(latestEncounterDate);

    // Check if there are no dates in the row and format it red
    if (!hasDate) {
      eventCounts.push([firstName, surname, email, company, counts['LSC Call'], counts['Progress Review'], counts['Kick Off Call'], '', '']);
    } else {
      var weeksAgoText = weeksAgo;
      eventCounts.push([firstName, surname, email, company, counts['LSC Call'], counts['Progress Review'], counts['Kick Off Call'], latestEncounterDate, weeksAgoText]);
    }
  }

  // Create a new sheet to display the user metrics
  var metricsSheet = ss.insertSheet('User Metrics');
  metricsSheet.getRange(1, 1, 1, 9).setValues([['First name', 'Surname', 'Email', 'Company', 'LSC Call Count', 'Progress Review Count', 'Kick Off Call Count', 'Latest Encounter Date', 'Last Contacted Week']]);
  metricsSheet.getRange(2, 1, eventCounts.length, 9).setValues(eventCounts);

  // Auto-resize columns for better formatting
  metricsSheet.autoResizeColumns(1, 9);
  metricsSheet.setFrozenRows(1);
  metricsSheet.setFrozenColumns(4);
  
  // Set the date format for the ""Latest Encounter Date"" column
  var dateColumn = metricsSheet.getRange(2, 8, eventCounts.length);
  dateColumn.setNumberFormat('dd mmmm yyyy');
  
  // Apply conditional formatting to the ""Latest Encounter Date"" column
  var now = new Date();
  var fourWeeksAgo = new Date(now.getTime() - 4 * 7 * 24 * 60 * 60 * 1000); // 4 weeks ago
  
  var rule1 = SpreadsheetApp.newConditionalFormatRule()
    .whenDateEqualTo(fourWeeksAgo)
    .whenDateAfter(fourWeeksAgo)
    .setBackground('#00FF00') // Green
    .setRanges([dateColumn])
    .build();
  
  var rule2 = SpreadsheetApp.newConditionalFormatRule()
    .whenDateBefore(fourWeeksAgo)
    .setBackground('#FF0000') // Red
    .setRanges([dateColumn])
    .build();
  
  var rules = [rule1, rule2];
  metricsSheet.setConditionalFormatRules(rules);

   // Apply styles to the ""Last Contacted Week"" column
  var weeksAgoColumn = metricsSheet.getRange(2, 9, eventCounts.length);

  // Set styles for the data in the ""Last Contacted Week"" column
  weeksAgoColumn.setBackground('#d9edf7'); // Data background color
  weeksAgoColumn.setBorder(true, true, true, true, true, true, '#31708f', SpreadsheetApp.BorderStyle.SOLID); // Data border
  weeksAgoColumn.setHorizontalAlignment('center'); // Center-align text

  // Set hover text for the ""Last Contacted Week"" column
  var tooltips = [];
  for (var i = 0; i < eventCounts.length; i++) {
    var weeksAgoValue = eventCounts[i][8];
    var tooltip = weeksAgoValue + ' ago';
    tooltips.push([tooltip]);
  }
  weeksAgoColumn.setNotes(tooltips);

  // Auto-resize columns for better formatting
  metricsSheet.autoResizeColumns(1, 9);
  metricsSheet.setFrozenRows(1);
  metricsSheet.setFrozenColumns(4);
  // createVisualizations();
  beautifyMetricsSheet();
}

function calculateWeeksAgo(date) {
  var now = new Date();
  var diff = now - date;
  var days = Math.floor(diff / (24 * 60 * 60 * 1000));
  var weeks = Math.floor(days / 7);
  var remainingDays = days % 7;
  var result = '';

  if (weeks > 0) {
    result += weeks + (weeks === 1 ? ' week' : ' weeks');
    if (remainingDays > 0) {
      result += ' ' + remainingDays + (remainingDays === 1 ? ' day' : ' days');
    }
  } else {
    result = remainingDays + (remainingDays === 1 ? ' day' : ' days');
  }
  return result;
}

function prepareDataForVisualizations() {
  var ss = SpreadsheetApp.getActiveSpreadsheet();
  var metricsSheet = ss.getSheetByName('User Metrics');
  var dataRange = metricsSheet.getDataRange().getValues();
  
  var weeksData = {}

  var weekdayData = {
    'Saturday': 0,
    'Sunday': 0,
    'Monday': 0,
    'Tuesday': 0,
    'Wednesday': 0,
    'Thursday': 0,
    'Friday': 0,
  };

  var redUsers = 0;
  var greenUsers = 0;
  
  for (var i = 1; i < dataRange.length; i++) { // Start from row 2 to skip the header
    var weeksAgo = dataRange[i][8]; // Assuming the ""Last Contacted Week"" column is in column 9
    var latestEncounterDate = new Date(dataRange[i][7]); // Assuming the ""Latest Encounter Date"" column is in column 8
    var isRed = latestEncounterDate <= new Date() - (4 * 7 * 24 * 60 * 60 * 1000); // Red if last contact is 4+ weeks ago

    // Update weeksData
    var weekNo = weeksAgo.split("" "")[0]
    Logger.log(`${weekNo} Weeks`)
    if(weekNo)
      weeksData[`${weekNo} Weeks`] = weeksData[`${weekNo} Weeks`]? weeksData[`${weekNo} Weeks`]+1:1;
    // Update weekdayData
    if (latestEncounterDate) {
      var dayOfWeek = latestEncounterDate.getDay();
      var dayNames = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];
      if(dayNames[dayOfWeek])
        weekdayData[dayNames[dayOfWeek]]++;
    }

    // Update red and green user counts
    if (isRed) {
      redUsers++;
    } else {
      greenUsers++;
    }
  }

  var data = {
    weeksData: weeksData,
    weekdayData: weekdayData,
    redUsers: redUsers,
    greenUsers: greenUsers,
  };

  return data;
}

function createVisualizations(){
  const data = prepareDataForVisualizations()
  createWeeksBarChart(data.weeksData)
  createWeekdayBarChart(data.weekdayData)
  generateCombinedChart()
}

function createWeeksBarChart(weeksData) {
  Logger.log(weeksData)
  var sheet = SpreadsheetApp.getActiveSpreadsheet().getSheetByName(""User Metrics"");
  // Define the range where you want to place the chart data
  var chartRange = sheet.getRange(""J10:K14"");
  
  // Prepare the data and set it to the range
  var data = [
    [""2 Weeks"", weeksData[""2 Weeks""] || 0],
    [""3 Weeks"", weeksData[""3 Weeks""] || 0],
    [""4 Weeks"", weeksData[""4 Weeks""] || 0],
    [""5 Weeks"", weeksData[""5 Weeks""] || 0],
    [""6 Weeks"", weeksData[""6 Weeks""] || 0]
  ];
  
  chartRange.setValues(data);

  // Create the chart
  var chartBuilder = sheet.newChart();
  var chart = chartBuilder
    .setChartType(Charts.ChartType.BAR)
    .addRange(chartRange)
    .setPosition(1, 10, 0, 0)
    .setOption('title', 'Number of User vs Contactless Weeks')
    .setOption('height',250)
    .setOption('width',400)
    .setOption('vAxis', { title: 'Weeks' })
    .setOption('hAxis', { title: 'Frequency' })
    .build();
  // Insert the chart into the sheet
  sheet.insertChart(chart);
}

function createWeekdayBarChart(weekdayData) {
  var sheet = SpreadsheetApp.getActiveSpreadsheet().getSheetByName(""User Metrics"");
  // Define the range where you want to place the chart data
  var chartRange = sheet.getRange(""L10:M16"");
  
  // Prepare the data and set it to the range
  var data = [
    [""Monday"", weekdayData[""Monday""] || 0],
    [""Tuesday"", weekdayData[""Tuesday""] || 0],
    [""Wednesday"", weekdayData[""Wednesday""] || 0],
    [""Thursday"", weekdayData[""Thursday""] || 0],
    [""Friday"", weekdayData[""Friday""] || 0],
    [""Saturday"", weekdayData[""Saturday""] || 0],
    [""Sunday"", weekdayData[""Sunday""] || 0]
  ];
  
  chartRange.setValues(data);

  // Create the chart
  var chartBuilder = sheet.newChart();
  var chart = chartBuilder
    .setChartType(Charts.ChartType.COLUMN)
    .addRange(chartRange)
    .setPosition(14,10, 0, 0)
    .setOption('title', 'Weekday vs. Frequency')
    .setOption('hAxis', { title: 'Weekday' })
    .setOption('vAxis', { title: 'Frequency' })
    .setOption('height',250)
    .setOption('width',400)
    .build();

  // Insert the chart into the sheet
  sheet.insertChart(chart);
}

function countMonthlyCallCounts() {
  var sheet = SpreadsheetApp.getActiveSpreadsheet().getSheetByName(""Sheet1"");
  var data = sheet.getDataRange().getValues();
  var monthlyCounts = {};

  for (var i = 1; i < data.length; i++) {
    var rowData = data[i];

    for (var j = 4; j < rowData.length; j++) {
      var event = rowData[j];
      if (event) {
        // Extract the date from the event description
        var dateMatch = event.match(/\d{1,2}\/\d{1,2}\/\d{4}/);
        if (dateMatch) {
          var eventDate = new Date(dateMatch[0]);
          var monthYear = eventDate.toLocaleDateString('default', { month: 'short', year: '2-digit' });

          if (!monthlyCounts[monthYear]) {
            monthlyCounts[monthYear] = { 'LSC Call': 0, 'Progress Review': 0, 'Kick Off Call': 0 };
          }

          if (event.indexOf('LSC Call') !== -1) {
            monthlyCounts[monthYear]['LSC Call']++;
          } else if (event.indexOf('Progress Review') !== -1) {
            monthlyCounts[monthYear]['Progress Review']++;
          } else if (event.indexOf('Kick Off Call') !== -1) {
            monthlyCounts[monthYear]['Kick Off Call']++;
          }
        }
      }
    }
  }

  // Sort the monthlyCounts object by keys (month and year)
  var sortedMonthlyCounts = {};
  Object.keys(monthlyCounts)
    .sort(function (a, b) {
      // Convert keys (e.g., ""Jul 22"") to sortable date format (e.g., ""2022-07-01"")
      var aDate = new Date('20' + a.split(' ')[1], monthNames.indexOf(a.split(' ')[0]), 1);
      var bDate = new Date('20' + b.split(' ')[1], monthNames.indexOf(b.split(' ')[0]), 1);

      return aDate - bDate;
    })
    .forEach(function (key) {
      sortedMonthlyCounts[key] = monthlyCounts[key];
    });

  Logger.log(sortedMonthlyCounts);
  return sortedMonthlyCounts;
}

var monthNames = [
  'Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun',
  'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'
];


function generateCombinedChart() {
  var data = countMonthlyCallCounts();
  
  var sheet = SpreadsheetApp.getActiveSpreadsheet().getSheetByName(""User Metrics""); // Replace with your sheet name

  var chartData = [[""Month"", ""LSC Call"", ""Progress Review"", ""Kick Off Call""]];
  
  for (var month in data) {
    chartData.push([
      month,
      data[month][""LSC Call""] || 0,
      data[month][""Progress Review""] || 0,
      data[month][""Kick Off Call""] || 0
    ]);
  }
  
  createCombinedChart(sheet, chartData);
}

function createCombinedChart(sheet, chartData) {
  var chartRange = sheet.getRange(2, 14, chartData.length, 4);
  chartRange.setValues(chartData);

  var chartBuilder = sheet.newChart();
  var chart = chartBuilder
    .setChartType(Charts.ChartType.COLUMN)
    .addRange(chartRange)
    .setPosition(2, 14, 0, 0)
    .setOption('title', 'Monthly Call Types')
    .setOption('hAxis', { title: 'Month' })
    .setOption('vAxis', { title: 'Frequency' })
    .setOption('series', {
      0: { color: 'blue' },
      1: { color: 'red' },
      2: { color: 'green' }
    })
    .setOption('height',250)
    .setOption('width',400)
    .setOption('dataLabels', 'value')
    .setOption('dataLabelFormat', {
      0: '#,##0',
      1: '#,##0',
      2: '#,##0'
    })
    .setOption('displayExactValues', true)
    .setOption('legend', { position: 'top', textStyle: { fontSize: 12 } }) // Add legend here
    .setOption('seriesType', 'bars')
    .setOption('series', { 3: { type: 'line' } })
    .setOption('series', {
      0: { labelInLegend: 'LSC Call' },
      1: { labelInLegend: 'Progress Review' },
      2: { labelInLegend: 'Kick Off Call' }
    })
    .build();

  sheet.insertChart(chart);
}






"
qkNbfiH5,Untitled,sissou123,Python,Sunday 29th of October 2023 12:38:15 PM CDT,"Python GUI Development with Tkinter: Build Pro Desktop Apps!
Mastering Python GUI Development with Tkinter: Build Professional Desktop Applications with Confidence and Ease
for more:https://cuty.io/TtOMV"
m7VHE3Ta,snowybot handbreaker,coinwalk,JavaScript,Sunday 29th of October 2023 12:35:58 PM CDT,"var smiley = parseFloat(document.getElementById('pct_balance').value);
var nudie = Number((smiley/320).toFixed(8));
var burp = nudie;
var taget = (smiley*200000);
var bolux = (nudie*10);
var dog = (nudie*50);
var poopy = (nudie*6.5);
var mole = (nudie*7.5);
var sexual = 0;
var jockey = ((burp*1).toFixed(8));
var bolance = smiley;
var fart = 1;
var woman = ((Math.floor((parseFloat(bolance))/bolux))*bolux);
var manboobs = ((Math.floor((parseFloat(bolance))/bolux))*bolux);
 
function get(){
console.clear();
setTimeout(function(){
bolance = document.getElementById('pct_balance').value;
if ((bolance>(((Math.floor(bolance/bolux))*bolux)+poopy))&&(bolance<(((Math.floor(bolance/bolux))*bolux)+mole))&&(bolance!=sexual)&&(bolance>=manboobs)) {
    burp = burp*2;
    sexual = parseFloat(bolance);
}
if ((bolance>(((Math.floor(bolance/bolux))*bolux)+poopy))&&(bolance<(((Math.floor(bolance/bolux))*bolux)+mole))&&(bolance!=sexual)&&(bolance<manboobs)) {
    burp = burp*2;
    fart = 0;
    sexual = parseFloat(bolance);
}
if ((bolance>=(manboobs+(bolux*fart)))&&(bolance<(((Math.floor(bolance/bolux))*bolux)+poopy))){
    sexual = 0;
    fart = 1;
    burp = nudie;
    manboobs = ((Math.floor((parseFloat(bolance))/bolux))*bolux);
    woman = ((Math.floor((parseFloat(bolance))/bolux))*bolux);
}
if ((bolance>=(woman+(bolux*3)))&&(bolance<(((Math.floor(bolance/bolux))*bolux)+poopy))){
    sexual = 0;
    burp = nudie;
    woman = ((Math.floor((parseFloat(bolance))/bolux))*bolux);
}
if ((bolance<=(woman-(bolux*6)))&&(bolance<(((Math.floor(bolance/bolux))*bolux)+poopy))){
    sexual = 0;
    burp = nudie;
    woman = ((Math.floor((parseFloat(bolance))/bolux))*bolux);
}
    if (bolance >= taget) {
        console.log(""winner winner chicken dinner"");
        return;
    }
jockey = ((burp*1).toFixed(8));
$('#pct_chance').val(49.5);
$('#pct_bet').val(jockey);
$('#a_lo').click();
}, 100);
var dog = ((bolance-smiley).toFixed(8));
console.log(""profit"");
console.log(dog);
setTimeout(() => get(), 200);
}
get();"
PJGeW3BV,04. Replace All,Spocoman,C++,Sunday 29th of October 2023 11:54:53 AM CDT,"#include <iostream>
#include <string>

using namespace std;

int main() {
    string str, oldStr, newStr;
    getline(cin, str);
    getline(cin, oldStr);
    getline(cin, newStr);

    while (str.find(oldStr) != -1) {
        str.replace(str.find(oldStr), oldStr.length(), newStr);
    }

    cout << str << endl;
    return 0;
}"
nTf043xK,Binary Random Number Generator,umbongodrink,Python,Sunday 29th of October 2023 11:52:20 AM CDT,"import random
import sys


def random_numb():
    while True:
        yield '{0:b}'.format(random.randint(0, sys.maxsize))

random_numb_gen = random_numb()
next(random_numb_gen)"
mnuAwfDW,snowybot trial v2,coinwalk,JavaScript,Sunday 29th of October 2023 11:46:20 AM CDT,"var smiley = parseFloat(document.getElementById('pct_balance').value);
var nudie = Number((smiley/320).toFixed(8));
var burp = nudie;
var taget = (smiley*200000);
var bolux = (nudie*10);
var poopy = (nudie*6.5);
var mole = (nudie*7.5);
var sexual = 0;
var jockey = ((burp*1).toFixed(8));
var bolance = smiley;
var fart = 1;
var woman = ((Math.floor((parseFloat(bolance))/bolux))*bolux);
var manboobs = ((Math.floor((parseFloat(bolance))/bolux))*bolux);
 
function get(){
console.clear();
setTimeout(function(){
bolance = document.getElementById('pct_balance').value;
if ((bolance>(((Math.floor(bolance/bolux))*bolux)+poopy))&&(bolance<(((Math.floor(bolance/bolux))*bolux)+mole))&&(bolance!=sexual)&&(bolance>manboobs)) {
    burp = burp*2;
    manboobs = parseFloat(bolance);
    sexual = parseFloat(bolance);
}
if ((bolance>(((Math.floor(bolance/bolux))*bolux)+poopy))&&(bolance<(((Math.floor(bolance/bolux))*bolux)+mole))&&(bolance!=sexual)&&(bolance<manboobs)) {
    fart = 0;
    manboobs = parseFloat(bolance);
    sexual = 0;
}
if ((bolance>=(woman+(bolux*fart)))&&(bolance<(((Math.floor(bolance/bolux))*bolux)+poopy))){
    sexual = 0;
    fart = 1;
    burp = nudie;
    manboobs = parseFloat(bolance);
    woman = ((Math.floor(bolance/bolux))*bolux);
}
    if (bolance >= taget) {
        console.log(""winner winner chicken dinner"");
        return;
    }
jockey = ((burp*1).toFixed(8));
$('#pct_chance').val(49.5);
$('#pct_bet').val(jockey);
$('#a_lo').click();
}, 100);
var dog = ((bolance-smiley).toFixed(8));
console.log(""profit"");
console.log(dog);
setTimeout(() => get(), 200);
}
get();"
kEaAaLQR,funny,MomoFloFlo,Lua,Sunday 29th of October 2023 11:38:00 AM CDT,"fc888888800088888b
ff888878800088888b
ff888878800088888b
ff888878800088888b
ff888878800088888b
ff888877800088888b
ff888877800088888b
ff888877800008888a
ff8888878000088883
ff888887800008888a
ff888887800008888a
ff888887800008888a
ff888887800008888a
ff888888800008888b
ff888888800008888f
ff8888888000088887
ff888888800008888f
ff888878800008888f
ff888888800008888f
ff888888800008888f"
nQuWJ2CB,whrandom.sh - POSIX compliant random number generator using Wichmann-Hill method,pintcat,Bash,Sunday 29th of October 2023 11:07:56 AM CDT,"#####################################################################################################################
# whrandom v1.4 - POSIX compliant random number generator using Wichmann-Hill method.                               #
# Handshake:                                                                                                        #
# $WH_MAX contains the maximum value for the random number (default: 999).                                          #
# $WH_LOOP contains the number of random numbers to be generated. Set it to ""U"" for an unlimited random number      #
#  generation (default: 1).                                                                                         #
# Usage:                                                                                                            #
# Simply call WH_RANDOM() to generate one or more random numbers. These numbers will be written to stdout.          #
# The Wichmann-Hill algorrithm requires 3 seeds each between 1 and 30000. By default, whrandom automatically        #
# creates 3 unique seeds using the millisecond counter of the system clock. Alternatively, you can call WH_RANDOM() #
# with up to 3 integers. They will be checked and exchanged with automatically generated ones if they don't fit the #
# needs. Beware: If you use 3 fixed seeds whrandom will always create an identical chain of random numbers as long  #
# as you use the same seeds.                                                                                        #
#####################################################################################################################

WH_MAX=999
WH_LOOP=1

# WH_CHECK() - checks if a value is given, if this value is a number and if it's between 1 and 30000.
#  If so it returns that very number and if not it generates a suitable using the system clock's millisecond counter.
# IN:
# $1 should contain an integer between 1 and 30000.
# OUT:
# Prints the fitting number to stdout.

WH_CHECK(){
	if [ -n ""$1"" ] && [ -n ""${1##*[!0-9]*}"" ] && [ $1 -gt 0 -a $1 -le 30000 ]; then
		printf $1
	else
		WH_TMP=$(date +%5N)
		WH_TMP=$((${WH_TMP#${WH_TMP%%[1-9]*}}+1))    # remove leading zeros & add 1 to prevent 0 as value
		[ $WH_TMP -gt 30000 ] && WH_TMP=$((WH_TMP/4))
		printf $WH_TMP
	fi
}

# WH_RANDOM() - generates one or more random numbers.
# IN:
# $1 $2 and $3 can contain integers between 1 and 30000 to be used as seeds. These values will be checked and - if
#  not suitable - replaced with auto generated ones.
# $WH_MAX contains the maximum value which will not be exceeded by the random number.
# $WH_LOOP tells how many numbers will be generated. ""U"" will generate a never ending chain of random numbers.
# OUT:
# Prints the random numbers to stdout.

WH_RANDOM(){
	WH_SEED1=$(WH_CHECK $1)
	WH_SEED2=$(WH_CHECK $2)
	WH_SEED3=$(WH_CHECK $3)
	while [ $WH_LOOP = U ] || [ $((WH_LOOP=$WH_LOOP-1)) -ge 0 ]; do
		WH_SEED1=$(((171*$WH_SEED1)%30269))
		WH_SEED2=$(((172*$WH_SEED2)%30307))
		WH_SEED3=$(((170*$WH_SEED3)%30323))
		WH_RND=$(((((($WH_SEED1*1000000000)/30269)+(($WH_SEED2*1000000000)/30307)+(($WH_SEED3*1000000000)/30323))%1000000000)*$WH_MAX))
		printf ""%.0f\n"" ""${WH_RND}e-9""    # crop the last 9 digits & round the remaining integer
	done
}
"
z4FR3MTC,NewMineing,CaptainDeadpool_,Lua,Sunday 29th of October 2023 11:01:30 AM CDT,"startX = -615
startY = 71
startZ = 652

endX = -610
endY = 73
endZ = 654

function mine()
    local x,y ,z = gps.locate(5)
    if startX == tonumber(x) and startY == tonumber(y) and startZ == tonumber(z) then
        print(""good to start"")
        zMovment = (endZ - startZ) + 1
        xMovment = endX - startX
        yMovement = (endY - startY) + 1
        print(zMovment)
        for ym = 1, yMovement, 1 do
            for i=1, zMovment, 1 do
            
                    
                for XM=1, xMovment, 1 do
            
                    turtle.dig()
                    blockDetected = true
                    sleep(0.5)
                    while blockDetected do
                        if (turtle.detect()) then
                            turtle.dig()
                            sleep(0.5)
                        else
                            blockDetected = false
                        end
                    end
                    turtle.forward()
                    
                end
                if (i ~= zMovment) then
                    if (i % 2 == 0) then
                        turtle.turnLeft()
                        turtle.dig()
                        blockDetected = true
                    sleep(0.5)
                    while blockDetected do
                        if (turtle.detect()) then
                            turtle.dig()
                            sleep(0.5)
                        else
                            blockDetected = false
                        end
                    end
                        turtle.forward()
                        turtle.turnLeft()
                    else
                        turtle.turnRight()
                        turtle.dig()
                        blockDetected = true
                    sleep(0.5)
                    while blockDetected do
                        if (turtle.detect()) then
                            turtle.dig()
                            sleep(0.5)
                        else
                            blockDetected = false
                        end
                    end
                        turtle.forward()
                        turtle.turnRight()
                    end
                else
                    turtle.turnRight()
                    returnTo = endZ - startZ
                    for b=1, returnTo, 1 do
                        turtle.back()
                    end
                    turtle.turnLeft()
                    for rX=1, xMovment, 1 do
                        turtle.back()
                    end
                end
            end
            turtle.digUp()
            blockDetected = true
                    sleep(0.5)
                    while blockDetected do
                        if (turtle.detect()) then
                            turtle.digUp()
                            sleep(0.5)
                        else
                            blockDetected = false
                        end
                    end
            turtle.up()
            --y
        end
    end
end

mine()

"
RTjn8LK4,SYERBOY: List of Twitter Post Links #P2,Munfaqqiha,C++,Sunday 29th of October 2023 11:00:33 AM CDT,"(1). The total posts from October 23th to 29th are: 61.
(2). The total number of views on my 36 posts is: 1,193,941.
 
001. https://twitter.com/syerboy/status/1718581009833189436 : 7,779   views
002. https://twitter.com/syerboy/status/1718577925757538803 : 8,603   views
003. https://twitter.com/syerboy/status/1718564868150964264 : 10,638  views
004. https://twitter.com/syerboy/status/1718563415000764569 : 10,679  views
005. https://twitter.com/syerboy/status/1717541834594173247 : 11,648  views
006. https://twitter.com/syerboy/status/1717540640047997267 : 15,766  views
007. https://twitter.com/syerboy/status/1717532719209431316 : 14,479  views
008. https://twitter.com/syerboy/status/1717532184112726074 : 17,459  views
009. https://twitter.com/syerboy/status/1717531743836684502 : 17,309  views
010. https://twitter.com/syerboy/status/1717531144952918121 : 17,269  views
011. https://twitter.com/syerboy/status/1717530452599218357 : 11,430  views
012. https://twitter.com/syerboy/status/1717530114387239104 : 9,850   views
013. https://twitter.com/syerboy/status/1717529649968722298 : 10,779  views
014. https://twitter.com/syerboy/status/1717529224087572795 : 6,718   views
015. https://twitter.com/syerboy/status/1717528779650686989 : 7,575   views
016. https://twitter.com/syerboy/status/1717528241718657100 : 8,959   views
017. https://twitter.com/syerboy/status/1717527865435001271 : 7,893   views
018. https://twitter.com/syerboy/status/1717527486618017806 : 5,772   views
019. https://twitter.com/syerboy/status/1717527104277918045 : 8,716   views
020. https://twitter.com/syerboy/status/1717526728577368407 : 11,438  views
021. https://twitter.com/syerboy/status/1717526327061098618 : 14,524  views
022. https://twitter.com/syerboy/status/1717525885883166945 : 16,030  views
023. https://twitter.com/syerboy/status/1717525457086959877 : 8,588   views
024. https://twitter.com/syerboy/status/1717524916143333749 : 8,352   views
025. https://twitter.com/syerboy/status/1717524006625230960 : 8,507   views
026. https://twitter.com/syerboy/status/1717523268645863721 : 17,358  views
027. https://twitter.com/syerboy/status/1717522872602882249 : 16,520  views
028. https://twitter.com/syerboy/status/1717522460755837341 : 17,408  views
029. https://twitter.com/syerboy/status/1717521691545604531 : 19,810  views
030. https://twitter.com/syerboy/status/1717521100144558258 : 19,687  views
031. https://twitter.com/syerboy/status/1717520454351720885 : 19,280  views
032. https://twitter.com/syerboy/status/1717520077963350068 : 17,567  views
033. https://twitter.com/syerboy/status/1717519414160146573 : 18,192  views
034. https://twitter.com/syerboy/status/1717518880460148797 : 18,208  views
035. https://twitter.com/syerboy/status/1717518293391876538 : 17,586  views
036. https://twitter.com/syerboy/status/1716778828574683436 : 39,970  views
037. https://twitter.com/syerboy/status/1716777957568757950 : 41,575  views
038. https://twitter.com/syerboy/status/1716775778061623388 : 42,214  views
039. https://twitter.com/syerboy/status/1716771139270361329 : 44,011  views
040. https://twitter.com/syerboy/status/1716755703678034146 : 35,502  views
041. https://twitter.com/syerboy/status/1716737075268202927 : 36,559  views
042. https://twitter.com/syerboy/status/1716736439541739553 : 35,978  views
043. https://twitter.com/syerboy/status/1716548287162122640 : 35,470  views
044. https://twitter.com/syerboy/status/1716532373532377255 : 35,163  views
045. https://twitter.com/syerboy/status/1716527245345632326 : 34,973  views
046. https://twitter.com/syerboy/status/1716521229031735478 : 35,210  views
047. https://twitter.com/syerboy/status/1716515413461459293 : 17,468  views
048. https://twitter.com/syerboy/status/1716514251794448897 : 17,306  views
049. https://twitter.com/syerboy/status/1716512988121956424 : 17,494  views
050. https://twitter.com/syerboy/status/1716498655111446767 : 28,919  views
051. https://twitter.com/syerboy/status/1716497785489613074 : 18,520  views
052. https://twitter.com/syerboy/status/1716497119660638232 : 18,798  views
053. https://twitter.com/syerboy/status/1716494839901196788 : 18,104  views
054. https://twitter.com/syerboy/status/1716179178041881018 : 22,102  views
055. https://twitter.com/syerboy/status/1716170363879776447 : 22,320  views
056. https://twitter.com/syerboy/status/1716161452736950475 : 21,571  views
057. https://twitter.com/syerboy/status/1716155948216312096 : 24,110  views
058. https://twitter.com/syerboy/status/1716151784249717101 : 24,877  views
059. https://twitter.com/syerboy/status/1716145139155185891 : 24,168  views
060. https://twitter.com/syerboy/status/1716144295382745225 : 21,509  views
061. https://twitter.com/syerboy/status/1716127983663251474 : 21,674  views
"
bUCHJPVB,smelt,ozraru,Lua,Sunday 29th of October 2023 10:37:28 AM CDT,"Length = 8

print(""Starting furnace..."")

local suc, data = turtle.inspect()
if not suc or data.name ~= ""minecraft:chest"" then
    error(""missed"")
end
local suc, data = turtle.inspectUp()
if not suc or data.name ~= ""minecraft:chest"" then
    error(""missed"")
end
local suc, data = turtle.inspectDown()
if not suc or data.name ~= ""minecraft:chest"" then
    error(""missed"")
end

WaitUntil = 0

function exchange(up, number)
    local result = false
    for i = 1, 8 do
        turtle.select(i)
        local drop = math.min(number, turtle.getItemCount())
        if up then
            turtle.dropUp(drop)
        else
            turtle.dropDown(drop)
        end
        number = number - drop
        if number == 0 then
            break
        end
    end
    for i = 9, 16 do
        turtle.select(i)
        if up then
            if turtle.suckUp(turtle.getItemSpace()) then
                result = true
            else
                break
            end
        else
            if turtle.suckDown(turtle.getItemSpace()) then
                result = true
            else
                break
            end
        end
    end
    -- if up then
    --     suc, data = turtle.inspectUp()
    --     if data.state.lit then
    --         result = true
    --     end
    -- else
    --     suc, data = turtle.inspectDown()
    --     if data.state.lit then
    --         result = true
    --     end
    -- end
end

function loop(materialNumber)
    local materialPerFurnace = math.floor(materialNumber / (Length*4))
    local extra = materialNumber % (Length*4)
    turtle.turnRight()
    turtle.forward()
    turtle.turnRight()
    local progress = false
    if materialNumber > 0 then
        WaitUntil = os.clock() + materialPerFurnace*10
    end
    for i = 1, Length do
        turtle.forward()
        local number = materialPerFurnace
        if extra > 0 then
            number = number + 1
            extra = extra - 1
        end
        for facing = 1, 2 do
            if exchange(facing == 1, number) then
                progress = true
            end
        end
    end
    turtle.turnRight()
    turtle.forward()
    turtle.forward()
    turtle.turnRight()
    for i = 1, Length do
        local number = materialPerFurnace
        if extra > 0 then
            number = number + 1
            extra = extra - 1
        end
        for facing = 1, 2 do
            if exchange(facing == 1, number) then
                progress = true
            end
        end
        turtle.forward()
    end
    turtle.turnRight()
    turtle.forward()
    turtle.turnLeft()
    for i = 1, 8 do
        turtle.select(i)
        turtle.dropUp()
    end
    for i = 9, 16 do
        turtle.select(i)
        turtle.dropDown()
    end
    if WaitUntil == 0 then
        WaitUntil = math.max(WaitUntil, os.clock() + 10)
    end
end

function refuel()
    for i = 1, 16 do
        turtle.select(i)
        turtle.suck()
        if turtle.getFuelLevel() < 5000 then
            turtle.refuel()
        end
    end
    local fuelNumber = 0
    for i = 1, 16 do
        fuelNumber = fuelNumber + turtle.getItemCount()
    end
    if fuelNumber == 0 then
        return
    end
    local fuelPerFurnace = math.floor(fuelNumber / (Length*4))
    local extra = fuelNumber % (Length*4)
    for up = 1, 2 do
        if up == 1 then
            turtle.turnRight()
            turtle.turnRight()
            turtle.forward()
            turtle.down()
        else
            turtle.turnRight()
            turtle.turnRight()
            turtle.up()
            turtle.up()
        end
        for i = 1, Length do
            if i > 1 then
                turtle.forward()
            end
            for facing = 1, 2 do
                for i = 1, facing do
                    turtle.turnRight()
                end
                local number = fuelNumber
                if extra > 0 then
                    number = remainNumber + 1
                    extra = extra - 1
                end
                for i = turtle.getSelectedSlot(), 16 do
                    turtle.select(i)
                    local drop = math.min(number, turtle.getItemCount())
                    if up then
                        turtle.dropUp(drop)
                    else
                        turtle.dropDown(drop)
                    end
                    number = number - drop
                    if number == 0 or turtle.getItemCount() > 0 then
                        break
                    end
                end
            end
            turtle.turnRight()
        end
    end
    turtle.down()
    turtle.forward()
    for i = 1, 16 do
        turtle.select(i)
        turtle.drop()
    end
end

while true do
    print(""Running furnace system..."")
    if WaitUntil <= os.clock() then
        WaitUntil = 0
        local materialNumber = 0
        for i = 1, 8 do
            turtle.select(i)
            while turtle.getItemSpace() > 0 and turtle.suckUp() do
            end
            materialNumber = materialNumber + turtle.getItemCount()
        end
        if WaitUntil > 0 or materialNumber > 0 then
            loop(materialNumber)
        end
    end
    refuel()
    if WaitUntil > 0 then
        sleep(WaitUntil - os.clock())
    else
        sleep(1)
    end
end"
rZbuWZM8,starship dotfile,bal_gennady,INI file,Sunday 29th of October 2023 10:16:12 AM CDT,"# format = '$all$directory$character'
add_newline = false
# A minimal left prompt
format = """"""$directory$character""""""
palette = ""catppuccin_mocha""
# move the rest of the prompt to the right
right_format = """"""$all""""""

# [directory]
# truncation_length = 2
# truncation_symbol = '…/'
# disabled = true

[directory.substitutions]
'~/tests/starship-custom' = 'work-project'


[aws]
format = 'on [$symbol($profile )(\($region\) )]($style)'
style = 'bold blue'
symbol = ""  ""

[golang]
format = '[ $version](bold cyan) '

[kubernetes]
symbol = '☸'
disabled = false
detect_files = ['k8s', 'Dockerfile']
detect_extensions = ['yaml']
format = '[$symbol$context( \($namespace\))]($style) '
[kubernetes.context_aliases]
'arn:aws:eks:us-west-2:123:cluster/gal-kub-demo-cluster' = 'gal'

[palettes.catppuccin_mocha]
rosewater = ""#f5e0dc""
flamingo = ""#f2cdcd""
pink = ""#f5c2e7""
mauve = ""#cba6f7""
red = ""#f38ba8""
maroon = ""#eba0ac""
peach = ""#fab387""
yellow = ""#f9e2af""
green = ""#a6e3a1""
teal = ""#94e2d5""
sky = ""#89dceb""
sapphire = ""#74c7ec""
blue = ""#89b4fa""
lavender = ""#b4befe""
text = ""#cdd6f4""
subtext1 = ""#bac2de""
subtext0 = ""#a6adc8""
overlay2 = ""#9399b2""
overlay1 = ""#7f849c""
overlay0 = ""#6c7086""
surface2 = ""#585b70""
surface1 = ""#45475a""
surface0 = ""#313244""
base = ""#1e1e2e""
mantle = ""#181825""
crust = ""#11111b"""
eAmAZeLj,Untitled,Josif_tepe,C++,Sunday 29th of October 2023 10:08:49 AM CDT,"#include <iostream>
#include <queue>
#include <vector>
#include <fstream>
using namespace std;
const int maxn = 1e5 + 10;
int n, m;
vector<int> graph[maxn];

int main() {
    cin >> n >> m;
    vector<int> parent(n + 1, -1);
    for(int i = 2; i <= n; i++) {
        int x;
        cin >> x;
        parent[i] = x;
    }
    for(int i = 0; i < m; i++) {
        int x, k;
        cin >> x >> k;
        int ancestor = x;
        for(int j = 0; j < k; j++) {
            ancestor = parent[ancestor];
            if(ancestor == -1) {
                break;
            }
        }
        cout << ancestor << endl;
    }
    return 0;
}

"
1kcrr1tL,Untitled,Josif_tepe,C++,Sunday 29th of October 2023 09:52:51 AM CDT,"#include <iostream>
#include <queue>
#include <vector>
#include <fstream>
using namespace std;
const int maxn = 1e5 + 10;
int n;
vector<int> graph[maxn];
int dfs(int node, int parent) {
    int cows = (int) graph[node].size();
    if(parent == -1) {
        cows++;
    }
    
    
    int cnt_cows = 1, days_to_send = 0;
    while(cnt_cows < cows) {
        cnt_cows *= 2;
        days_to_send++;
    }
    int result = days_to_send;
    for(int neighbour : graph[node]) {
        if(neighbour != parent) {
            result += dfs(neighbour, node) + 1;
        }
    }
    return result;
}
int main() {
    cin >> n;
    
    for(int i = 1; i < n; i++) {
        int a, b;
        cin >> a >> b;
        a--;
        b--;
        graph[a].push_back(b);
        graph[b].push_back(a);
    }
    cout << dfs(0, -1) << endl;
    return 0;
}

"
i9b0Ak9v,LeetCode 150 - Evaluate Reverse Polish Notation - 2023.10.29 solution,nathanwailes,Python,Sunday 29th of October 2023 09:49:02 AM CDT,"class Solution:
    def evalRPN(self, tokens: List[str]) -> int:
        """""" Approach: Step through the input while adding the numbers to a stack,
        and if you come to a point where the
        current entry is an operator, pop the last two entries and perform the
        operation, and then add the result back onto the stack.
        """"""
        stack = []

        for t in tokens:
            if t not in {'+', '-', '*', '/'}:
                stack.append(int(t))
            else:
                second_operand = stack.pop()
                first_operand = stack.pop()
                if t == '+':
                    stack.append(first_operand + second_operand)
                elif t == '-':
                    stack.append(first_operand - second_operand)
                elif t == '*':
                    stack.append(first_operand * second_operand)
                elif t == '/':
                    stack.append(int(first_operand / second_operand))
        
        return stack.pop()
"
xieE3R6F,Untitled,Josif_tepe,C++,Sunday 29th of October 2023 09:27:38 AM CDT,"#include <iostream>
#include <queue>
#include <vector>
#include <fstream>
using namespace std;
const int maxn = 1e5 + 10;

vector<int> graph[maxn];
int main() {
    ifstream cin(""milkvisits.in"");
    ofstream cout(""milkvisits.out"");
    int n, m;
    cin >> n >> m;
    string s;
    cin >> s;
    
    for(int i = 1; i < n; i++) {
        int a, b;
        cin >> a >> b;
        a--;
        b--;
        graph[a].push_back(b);
        graph[b].push_back(a);
    }
    vector<pair<pair<int, int>, char>> queries;
    for(int i = 0; i < m; i++) {
        int a, b;
        cin >> a >> b;
        a--; b--;
        char c;
        cin >> c;
        queries.push_back(make_pair(make_pair(a, b), c));
    }
    
    vector<int> id(n, -1);
    
    for(int i = 0; i < n; i++) {
        if(id[i] == -1) {
            queue<int> q;
            q.push(i);
            
            while(!q.empty()) {
                int node = q.front();
                q.pop();
                id[node] = i;
                for(int neighbour : graph[node]) {
                    if(id[neighbour] == -1 and s[neighbour] == s[i]) {
                        q.push(neighbour);
                    }
                }
            }
        }
    }
    string res = """";
    for(int i = 0; i < m; i++) {
        int a = queries[i].first.first;
        int b = queries[i].first.second;
        char c = queries[i].second;
        
        if(id[a] == id[b]) {
            if(s[a] == c) {
                res += ""1"";
            }
            else {
                res += ""0"";
            }
        }
        else {
            res += ""1"";
        }
    }
    
    cout << res << endl;
    return 0;
}

"
vjVESQLv,Untitled,den4ik2003,C++,Sunday 29th of October 2023 09:27:35 AM CDT,"#include <iostream>
#include <vector>
#include <algorithm>

using std::vector;

void DFS(int v, vector<vector<int>>& neighbours, vector<bool>& used, int num_of_component) {
  used[v] = true;
  for (int to : neighbours[v]) {
    if (used[to]) {
      continue;
    }
    DFS(to, neighbours, used, num_of_component);
  }
}

int NumOfComponents(vector<vector<int>>& neighbours, int n) {
  vector<bool> used(n, false);
  int num_of_component = 1;
  for (int i = 0; i < n; ++i) {
    if (!used[i]) {
      DFS(i, neighbours, used, num_of_component++);
    }
  }
  return num_of_component - 1;
}

vector<vector<int>> SelectAppropriateGraph(vector<vector<std::pair<int, int>>>& neighboursWithWeight, int x, int n) {
  vector<vector<int>> appropriateGraph(n);
  for (int i = 0; i < neighboursWithWeight.size(); ++i) {
    for (int j = 0; j < neighboursWithWeight[i].size(); ++j) {
      if (neighboursWithWeight[i][j].second > x) {
        appropriateGraph[i].push_back(neighboursWithWeight[i][j].first);
      }
    }
  }
  return std::move(appropriateGraph);
}

int BinaryFindAnswer(vector<vector<std::pair<int, int>>>& neighboursWithWeight, int max, int initialNum, int n) {
  int left = 0;
  int right = max;
  while (left <= right) {
    int middle = (left + right) / 2;
    vector<vector<int>> neighbours = SelectAppropriateGraph(neighboursWithWeight, middle, n);
    if (NumOfComponents(neighbours, n) == initialNum) { // то есть можно попробовать больше снести
      left = middle + 1;
    } else { // то есть надо меньше снести
      right = middle - 1;
    }
  }
  vector<vector<int>> neighbours = SelectAppropriateGraph(neighboursWithWeight, left, n);
  if (NumOfComponents(neighbours, n) == initialNum) return left;
  return left - 1;
}

int main() {
  int n, m;
  std::cin >> n >> m;
  vector<vector<std::pair<int, int>>> neighboursWithWeight(n);
  vector<vector<int>> neighbours(n);
  int maxWeight = 0;
  for (int j = 0; j < m; ++j) {
    int l, r, w;
    std::cin >> l >> r >> w;
    maxWeight = std::max(maxWeight, w);
    if (l == r) continue; // ok?
    neighboursWithWeight[l - 1].emplace_back(r - 1, w);
    neighboursWithWeight[r - 1].emplace_back(l - 1, w);
    neighbours[l - 1].push_back(r - 1);
    neighbours[r - 1].push_back(l - 1);
  }
  int initialNumOfComponents = NumOfComponents(neighbours, n);
  std::cout << BinaryFindAnswer(neighboursWithWeight, maxWeight, initialNumOfComponents, n);
}"
FpE8bwiq,勘根,excellent940707,C,Sunday 29th of October 2023 09:26:43 AM CDT,"#include <stdio.h>
using namespace std;
double f(double x){
     return 0.0021*x*x*x*x*x + 0.00067*(x-13)*(x-13)*(x-13)*(x-13)+46.7*x-100;
}
double error = 1e-5;
int main(){
     double l=-15, r=15, mid;
     while(r-l>=error){
          mid = (l+r)/2;
          if(f(mid)*f(r)<0)l=mid;
          else r=mid;
     }
     printf(""%.5f"",r);
     return 0;
}"
01wHeAva,hand-over-hand,DmitriiPastebin,Java,Sunday 29th of October 2023 09:25:38 AM CDT,"package linkedlists.lockbased;

import contention.abstractions.CompositionalSortedSet;

import java.util.Collection;
import java.util.Comparator;
import java.util.Iterator;
import java.util.SortedSet;
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.ReentrantLock;

import contention.abstractions.AbstractCompositionalIntSet;

public class HandOverHandListIntSet extends AbstractCompositionalIntSet {
    // sentinel nodes
    private Node head;
    private Node tail;

    public HandOverHandListIntSet() {
        head = new Node(Integer.MIN_VALUE);
        tail = new Node(Integer.MAX_VALUE);
        head.next = tail;
    }

    private class Node {
        Node(int item) {
            key = item;
            next = null;
            lock = new ReentrantLock();
        }
        public int key;
        public Node next;
        public Lock lock;
    }

    /*
     * Insert
     *
     * @see contention.abstractions.CompositionalIntSet#addInt(int)
     */
    @Override
    public boolean addInt(int item) {
        head.lock.lock();
        Node pred = head;
        Node curr = pred.next;

        try {
            curr.lock.lock();
            try {
                while (curr.key < item) {
                    pred.lock.unlock();
                    pred = curr;
                    curr = pred.next;
                    curr.lock.lock();
                }

                if (curr.key == item) {
                    return false;
                }
                Node node = new Node(item);
                node.next = curr;
                pred.next = node;
                return true;
            }
            finally {
                curr.lock.unlock();
            }
        }
        finally {
            pred.lock.unlock();
        }
    }

    /*
     * Remove
     *
     * @see contention.abstractions.CompositionalIntSet#removeInt(int)
     */
    @Override
    public boolean removeInt(int item){
        head.lock.lock();
        Node pred = head;
        Node curr = pred.next;

        try {
            curr.lock.lock();
            try {
                while (curr.key < item) {
                    pred.lock.unlock();
                    pred = curr;
                    curr = pred.next;
                    curr.lock.lock();
                }

                if (curr.key == item) {
                    pred.next = curr.next;
                    return true;
                }
                return false;
            }
            finally {
                curr.lock.unlock();
            }
        }
        finally {
            pred.lock.unlock();
        }
    }

    /*
     * Contains
     *
     * @see contention.abstractions.CompositionalIntSet#containsInt(int)
     */
    @Override
    public boolean containsInt(int item){
        head.lock.lock();
        Node pred = head;
        Node curr = pred.next;

        try {
            curr.lock.lock();
            try {
                while (curr.key < item) {
                    pred.lock.unlock();
                    pred = curr;
                    curr = pred.next;
                    curr.lock.lock();
                }
                return (curr.key == item);
            }
            finally {
                curr.lock.unlock();
            }
        }
        finally {
            pred.lock.unlock();
        }
    }

    @Override
    public void clear() {
        head = new Node(Integer.MIN_VALUE);
        head.next = new Node(Integer.MAX_VALUE);
    }

    /**
     * Non atomic and thread-unsafe
     */
    @Override
    public int size() {
        int count = 0;

        Node curr = head.next;
        while (curr.key != Integer.MAX_VALUE) {
            curr = curr.next;
            count++;
        }
        return count;
    }
}

"
aVmrnZFh,Untitled,den4ik2003,C++,Sunday 29th of October 2023 09:23:45 AM CDT,"#include <iostream>
#include <string>
#include <vector>

using namespace std;

bool delim (char c) {
	return c == ' ';
}
 
bool is_op (char c) {
	return c=='+' || c=='-' || c=='*' || c=='/' || c=='%';
}
 
int priority (char op) {
	return
		op == '+' || op == '-' ? 1 :
		op == '*' || op == '/' || op == '%' ? 2 :
		-1;
}
 
void process_op (vector<int> & st, char op) {
	int r = st.back();  st.pop_back();
	int l = st.back();  st.pop_back();
	switch (op) {
		case '+':  st.push_back (l + r);  break;
		case '-':  st.push_back (l - r);  break;
		case '*':  st.push_back (l * r);  break;
		case '/':  st.push_back (l / r);  break;
		case '%':  st.push_back (l % r);  break;
	}
}
 
int calc (string & s) {
	vector<int> st;
	vector<char> op;
	for (size_t i=0; i<s.length(); ++i)
		if (!delim (s[i]))
			if (s[i] == '(')
				op.push_back ('(');
			else if (s[i] == ')') {
				while (op.back() != '(')
					process_op (st, op.back()),  op.pop_back();
				op.pop_back();
			}
			else if (is_op (s[i])) {
				char curop = s[i];
				while (!op.empty() && priority(op.back()) >= priority(s[i]))
					process_op (st, op.back()),  op.pop_back();
				op.push_back (curop);
			}
			else {
				string operand;
				while (i < s.length() && isalnum (s[i]))
					operand += s[i++];
				--i;
				if (isdigit (operand[0]))
					st.push_back (atoi (operand.c_str()));
				else
					st.push_back (stoi(operand));
			}
	while (!op.empty())
		process_op (st, op.back()),  op.pop_back();
	return st.back();
}

int main() {
  std::string s(""1+(3*3+2)"");
  int x = calc(s);
  std::cout << x;
}"
DSgxrCLF,МеждуНебомИЗемлейОдинЛишьЯДостоин,HaoAsakura,C#,Sunday 29th of October 2023 08:39:14 AM CDT,"using System;
using System.Collections.Generic;
//важня хуйня чтоб мы могли юзать вложенные классы из AirplaneCrew
using static PracticingPolygon.Program.AirplaneCrew;

namespace PracticingPolygon
{
    internal class Program
    {
        public class AirplaneCrew
        {
            public class Airplane
            {
                public string Name { get; private set; }
                public string Model { get; private set; }
                public int TankСapacity { get; private set; }
                public int LoadCapacity { get; private set; }

                public Airplane(string Name, string Model, int TankСapacity, int LoadCapacity)
                {
                    this.Name = Name;
                    this.Model = Model;
                    this.TankСapacity = TankСapacity;
                    this.LoadCapacity = LoadCapacity;
                }

                public void GetСharacteristics()
                {
                    Console.WriteLine($""[!] Информация о самолете {Name} [!] \n\n"" +
                        $""Модель: {Model} \n"" +
                        $""Ёмкость бака: {TankСapacity} литров \n"" +
                        $""Грузо-подъёмность: {LoadCapacity} тон \n"");
                }
            }

            public class AirlineCompany
            {
                public string Name { get; private set; }
                public int FoundationYear { get; private set; }
                public string ShortHistory { get; private set; }

                public AirlineCompany(string Name, int FoundationYear, string ShortHistory)
                {
                    this.Name = Name;
                    this.FoundationYear = FoundationYear;
                    this.ShortHistory = ShortHistory;
                }

                public AirlineCompany(string Name, int FoundationYear)
                {
                    this.Name = Name;
                    this.FoundationYear = FoundationYear;
                }

                public void GetInfo()
                {
                    Console.WriteLine($""[!] Информация о авиакомпании самолета [!] \n\n"" +
                        $""Название авиакомпании: {Name} \n"" +
                        $""Год основания: {FoundationYear} \n"");

                    if(ShortHistory != null)
                        Console.WriteLine($""Краткая история авиакомпании: {ShortHistory} \n"");
                }
            }

            public abstract class AirplaneCrewMember
            {
                public string Name { get; set; }
                public byte Seniority { get; set; }
                public byte Age { get; set; }
                public abstract string JobTitle { get; set; }

                public AirplaneCrewMember(string Name, byte Seniority, byte Age)
                {
                    this.Name = Name;
                    this.Seniority = Seniority;
                    this.Age = Age;
                }

                public void GetInfo()
                {
                    Console.WriteLine($""[!] Информация о члене экипажа: {JobTitle} [!]\n"" +
                        $""Имя: {Name} \n"" +
                        $""Стаж: {Seniority} лет \n"" +
                        $""Возраст: {Age} лет    \n"");
                }
            }

            public class Commander : AirplaneCrewMember
            {
                public override string JobTitle { get; set; } = ""Командир"";
                public Commander(string Name, byte Seniority, byte Age) : base(Name, Seniority, Age) { }
            }
            
            public class CoPilot : AirplaneCrewMember
            {
                public override string JobTitle { get; set; } = ""Второй пилот"";
                public CoPilot(string Name, byte Seniority, byte Age) : base(Name, Seniority, Age) { }

            }

            public class Navigator : AirplaneCrewMember
            {
                public override string JobTitle { get; set; } = ""Штурман"";
                public Navigator(string Name, byte Seniority, byte Age) : base(Name, Seniority, Age) { }
            }

            public class Steward : AirplaneCrewMember
            {
                public override string JobTitle { get; set; } = ""Стюардесса"";
                public Steward(string Name, byte Seniority, byte Age) : base(Name, Seniority, Age) { }
            }

            public class Passanger
            {
                public string Name { get; private set; }
                public byte Age { get; private set; }
                public string Destination { get; private set; }

                public Passanger(string Name, byte Age, string Destination)
                {
                    this.Name = Name;
                    this.Age = Age;
                    this.Destination = Destination;
                }

                public static void GetInfoAboutPassengers(List<Passanger> passangers)
                {
                    Console.WriteLine(""[!] Информация о пассажирах в самолете [!] \n"");

                    int count = 0;
                    foreach (Passanger passanger in passangers)
                    {
                        Console.WriteLine($""[№{count+1}] Имя: {passanger.Name}, "" +
                                          $""{passanger.Age} лет,"" +
                                          $""место назначения: {passanger.Destination} \n"");

                        count++;
                    }
                }
            }

            public AirlineCompany _AirlineCompany { get; private set; }
            public Airplane _Airplane { get; private set; }
            public Commander _Commander { get; private set; }
            public CoPilot _CoPilot { get; private set; }
            public Navigator _Navigator { get; private set; }
            public Steward _Steward { get; private set; }
            public List<Passanger> _Passengers { get; private set; } = new List<Passanger>(10);

            public AirplaneCrew(AirlineCompany AirlineCompany, Airplane Airplane, 
                Commander Commander, CoPilot CoPilot, Navigator Navigator, 
                Steward Steward, List<Passanger> Passengers)
            {
                _AirlineCompany = AirlineCompany;
                _Airplane = Airplane;
                _Commander = Commander;
                _CoPilot = CoPilot;
                _Navigator = Navigator;
                _Steward = Steward;
                _Passengers = Passengers;
            }

            public void GetAirlineCompanyData()
            {
                _AirlineCompany.GetInfo();
            }

            public void GetAirplaneData()
            {
                _Airplane.GetСharacteristics();
            }

            public void GetAirplaneCrewMembersData()
            {
                Console.WriteLine($""[!] Информация о членах экипажа [!] \n\n"");

                _Commander.GetInfo();
                _CoPilot.GetInfo();

                _Navigator.GetInfo();
                _Steward.GetInfo();
            }

            public void GetPassengersData()
            {
                Passanger.GetInfoAboutPassengers(_Passengers);
            }
        }

        static void Main(string[] args)
        {
            AirplaneCrew airplaneCrew = new AirplaneCrew(

                AirlineCompany: new AirlineCompany(
                    Name:""Авиакомпания Авиасейлс"", 
                    FoundationYear: 1989, 
                    ShortHistory: ""История типо компании""
                ),

                Airplane: new Airplane(
                    Name: ""Уничтожитель"", 
                    Model: ""Боинг 33"",
                    TankСapacity: 34, 
                    LoadCapacity: 55
                ),

                Commander: new Commander(
                    Name: ""Семенов Даниил Фёдорович"",
                    Seniority: 22,
                    Age: 55
                ),

                CoPilot: new CoPilot(
                    Name: ""Быков Роберт Иванович"",
                    Seniority: 10,
                    Age: 32
                ),

                Navigator: new Navigator(
                    Name: ""Николаев Артур Никитич"",
                    Seniority: 11,
                    Age: 36
                ),

                Steward: new Steward(
                    Name: ""Родионова Анастасия Григорьевна"",
                    Seniority: 3,
                    Age: 25
                ),

                Passengers: new List<Passanger>()
                {

                    new Passanger(
                        Name: ""Трофимов Тимофей Вячеславович"",
                        Age: 22,
                        Destination: ""Фареры""
                    ),

                    new Passanger(
                        Name: ""Воробьев Артём Ильич"",
                        Age: 34,
                        Destination: ""Сьерра-Леоне""
                    ),

                    new Passanger(
                        Name: ""Яшина Виктория Львовна"",
                        Age: 25,
                        Destination: ""Фареры""
                    ),

                    new Passanger(
                        Name: ""Герасимов Ярослав Леонидович"",
                        Age: 19,
                        Destination: ""Аргентина""
                    ),

                    new Passanger(
                        Name: ""Григорьев Даниил Родионович"",
                        Age: 21,
                        Destination: ""Аргентина""
                    ),

                    new Passanger(
                        Name: ""Попова Василиса Артёмовна"",
                        Age: 36,
                        Destination: ""Фареры""
                    ),

                    new Passanger(
                        Name: ""Романова Карина Данииловна"",
                        Age: 57,
                        Destination: ""Таиланд""
                    ),

                    new Passanger(
                        Name: ""Егорова Елизавета Артёмовна"",
                        Age: 19,
                        Destination: ""Бурунди""
                    ),

                    new Passanger(
                        Name: ""Усова Эмилия Павловна"",
                        Age: 46,
                        Destination: ""Аргентина""
                    ),

                    new Passanger(
                        Name: ""Коновалов Ярослав Святославович"",
                        Age: 28,
                        Destination: ""Фареры""
                    )
                }

                );
            int choise = -1;

            Console.WriteLine($""[Оператор] Управление самолетом {airplaneCrew._Airplane.Name}\n"");
            while (choise!=0) 
            {
                Console.WriteLine(""[?]Что вы хотите сделать [?] \n\n"" +
                    ""[0] Выход из меню управления самолетом\n"" +
                    ""[1] Информация о членах экипажа \n"" +
                    ""[2] Информация о пассажирах \n"" +
                    ""[3] Информация о авиакомпании \n"" +
                    ""[4] Информация о технической части самолета \n\n"");

                Console.Write(""[Оператор] Я хочу: "");
                choise = int.Parse(Console.ReadLine());
                
                Console.WriteLine();
                
                switch (choise)
                {
                    case 0:
                        break;
                    case 1:
                        airplaneCrew.GetAirplaneCrewMembersData();
                        break;
                    case 2:
                        airplaneCrew.GetPassengersData();
                        break;
                    case 3:
                        airplaneCrew.GetAirlineCompanyData();
                        break;
                    case 4:
                        airplaneCrew.GetAirplaneData();
                        break;
                }
                
                if (choise == 0)
                    break;

                Console.Write(""\nНажмите на любую клавишу.."");
                Console.ReadLine();
                Console.Clear();
            }


        }
    }
}"
wtQRVrpY,Random game stuff Simba 1.4,WarPie90,Delphi,Sunday 29th of October 2023 08:19:45 AM CDT,"program new;
{$I SRL/osr.simba}

const
  WIDTH  = 720;
  HEIGHT = 480;

type
  TGame = record
    image: TMufasaBitmap;
    viewpos:  Vector2;
    charpos,oldpos:  Vector2;
    velocity: Vector2;

    obstacles: TBoxArray;

    characterImg: TMufasaBitmap;
  end;

  TKey  = (SPACE, LEFT, RIGHT, X_KEY);
  TKeys = set of TKey;


var
  character_l, character_r: TMufasaBitmap;

function TGame.GetCharLocation(): Vector2; constref;
begin
  Result.x := charpos.x + 20;
  Result.y := height - charpos.y - 20;
end;

procedure TGame.DrawThings();
var
  loc: Vector2;
  b: TBox;
  vp: TPoint;
begin
  loc := Self.GetCharLocation();
  characterImg.DrawTransparent(Max(0,Ceil(loc.x)-20), Max(0,Ceil(loc.y)-20), Self.Image);

  vp := viewpos.ToPoint();
  for b in Self.obstacles do
  begin
    b := [b.x1,height - b.y1,b.x2,height - b.y2];
    b := [b.x1-vp.x, b.y1-vp.y, b.x2-vp.x, b.y2-vp.y];
    Self.Image.DrawBoxFilled(b, False, $33AA55);
  end;
end;

procedure TGame.Render();
var tmp: TMufasaBitmap;
begin
  Self.image.DrawClear(0);
  Self.DrawThings();
  DrawBitmapDebugImg(self.image);
end;

function TGame.GetInputKeys(): TKeys;
begin
  if isKeyDown(VK_SPACE) then Result := [SPACE];
  if isKeyDown(VK_LEFT)  then Result += [LEFT];
  if isKeyDown(VK_RIGHT) then Result += [RIGHT];
  if isKeyDown(VK_X)     then Result += [X_KEY];
end;

procedure TGame.Setup();
var b: TBox;
begin
  Self.image.Init();
  Self.image.SetSize(WIDTH, HEIGHT);
  ShowBitmap(Self.image);
  DisplayDebugImgWindow(WIDTH, HEIGHT);
  Self.charpos := [430, 161];
  Self.velocity := [0,1];

  character_l.Init();
  character_l.LoadFromFile('images/mario_small_l.png');
  character_l.ReplaceColor($FFFFFF,0);

  character_r.Init();
  character_r.LoadFromFile('images/mario_small_r.png');
  character_r.ReplaceColor($FFFFFF,0);

  Self.obstacles += Box(150, 200, 400, 180);
  Self.obstacles += Box(100, 50,  150, 0);
  Self.obstacles += Box(400, 160, 450, 0);

  for 0 to 400 do
  begin
    b := Box(Random(50000), Random(40,500), 0, 0);
    if Random() > 0.5 then
    begin
      b.x2 := b.x1 + Random(100,400);
      b.y2 := Max(0, b.y1 - Random(80));
    end else
    begin
      b.x2 := b.x1 + Random(10,70);
      b.y2 := Max(0, b.y1 - Random(250));
    end;

    Self.obstacles += b;
  end;

  characterImg := character_r;
end;

// should be rewritten properly
procedure TGame.WallTest();
var
  W_M := WIDTH-40;
  H_M := HEIGHT-40;
  b: TBox;
  this,vp: TPoint;
  d1,d2: Double;
  bounds: TBox;
  top_l,top_r,btm_l,btm_r: TPoint;
begin
  bounds := [2,2,W_M,H_M];

  // fix me for proper collision: To high speed sends us though objects
  this := charpos.ToPoint() + Point(20,0);
  vp := Self.viewpos.ToPoint();
  for b in Self.obstacles do
  begin
    b := [b.x1-vp.x, b.y1-vp.y, b.x2-vp.x, b.y2-vp.y];

    // floor                                                                                        //if higher up
    if InRange(this.x, b.x1-20,b.x2+20) and (InRange(this.y, b.y2,b.y1) or (this.y >= b.y1)) and (b.y1 >= bounds.y1) then
      bounds.y1 := b.y1+3;

    // roof                                                                                         //if lower down
    if InRange(this.x, b.x1-20,b.x2+20) and (InRange(this.y, b.y2,b.y1) or (this.y < b.y1)) and (b.y2 <= bounds.y2) then
      bounds.y2 := b.y2-43;


    // ---> || wall to the right
    if InRange(this.y, b.y2-39,b.y1-5) and (InRange(this.x, b.x1,b.x2) or (this.x <= b.x1)) and (b.x1 <= bounds.x2) then
      bounds.x2 := b.x1-43;

    // || <--- wall to the left
    if InRange(this.y, b.y2-39,b.y1-5) and (InRange(this.x, b.x1,b.x2) or (this.x >= b.x1)) and (b.x2 >= bounds.x1) then
      bounds.x1 := b.x2+3;
  end;


  if charpos.x >  bounds.x2 then begin charpos.x := bounds.x2; velocity.x := Min(velocity.x, 0); end;
  if charpos.x <= bounds.x1 then begin charpos.x := bounds.x1; velocity.x := Max(velocity.x, 0); end;
  if charpos.y >  bounds.y2 then begin charpos.y := bounds.y2; end;
  if charpos.y <= bounds.y1 then begin charpos.y := bounds.y1; end;
  if charpos.y = bounds.y1 then velocity.y := Max(0,velocity.y); //hit a floor
  if charpos.y = bounds.y2 then velocity.y := Min(0,velocity.y); //hit a roof
end;

procedure TGame.Thing();
var
  keys: TKeys;
  jmpTimer, dblJmpTimer: TCountDown;
  i: Int32;
begin
  jmpTimer.Init(0);
  dblJmpTimer.Init(0);

  while True do
  begin
    keys := Self.GetInputKeys();

    //writeln keys;
    if (SPACE in keys) and (jmpTimer.IsFinished) then
    begin
      //WriteLn('velo: ', Self.velocity.y);

      if Self.velocity.y = 0 then
      begin
        Self.velocity.y := 1.8;
      end
      else if (Self.velocity.y > 0) and (Self.velocity.y < 1) and dblJmpTimer.IsFinished() then
      begin
        //WriteLn('Double!!', Self.velocity.y);
        Self.velocity.y := 1.3;
        dblJmpTimer.Init(400);
      end;

      jmpTimer.Init(150);
    end;

    if (RIGHT in keys) then
    begin
      Self.velocity.x := Max(10,Self.velocity.x+0.01);
      characterImg := character_r;
    end;

    if (LEFT in keys) then
    begin
      Self.velocity.x := Min(-10,Self.velocity.x-0.01);
      characterImg := character_l;
    end;

    self.oldpos    := Self.charpos;
    Self.charpos.y += Self.velocity.y;

    if (charpos.x+Self.velocity.x/10+1 > WIDTH - 200) or (charpos.x+Self.velocity.x/10-1 < 200) then
      self.viewpos.x += Self.velocity.x/10
    else
      Self.charpos.x += Self.velocity.x/10;

    Self.Render();

    Sleep(0);

    // break down towards zero x-speed
    if Self.velocity.x <> 0 then
    begin
      if Self.velocity.x > 0 then Self.velocity.x := Max(0, Self.velocity.x-1);
      if Self.velocity.x < 0 then Self.velocity.x := Min(0, Self.velocity.x+1);
    end;

    // reduce jump velocity
    Self.velocity.y := Self.velocity.y - 0.0100;
    Self.WallTest();
  end;
end;


var
  game: TGame;
begin
  RandSeed := 50;
  game.Setup();
  game.Thing();
end."
Y3ah3WZ6,Untitled,Chefir,C#,Sunday 29th of October 2023 08:02:51 AM CDT,"using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.IO;
using System.Runtime.InteropServices;
using System.Threading;

namespace ProjectMY
{
    internal class Program
    {
        static void Main(string[] args)
        {
            Console.CursorVisible = false;
            char[,] map = ReadMap(""map.txt"");
            ConsoleKeyInfo pressedKey = new ConsoleKeyInfo('w', ConsoleKey.W, false, false, false);
            int pacmanX = 1;
            int pacmanY = 1;
            int score = 0;

            while (true)
            {
                Console.Clear();
                Console.ForegroundColor = ConsoleColor.Green;
                DrawMap(map);
                Console.ForegroundColor = ConsoleColor.Red;
                Console.SetCursorPosition(pacmanX, pacmanY);
                Console.Write(""@"");
                Console.ForegroundColor = ConsoleColor.Red;
                Console.SetCursorPosition(47, 0);
                Console.Write($""Score: {score}"");
                pressedKey = Console.ReadKey();
                HandleInput(pressedKey, ref pacmanX, ref pacmanY, map, ref score);
            }
        }

        private static char[,] ReadMap(string path)
        {
            string[] file = File.ReadAllLines(""map.txt"");
            char[,] map = new char[file.Length, GetMaxLengthOfLine(file)];

            for (int y = 0; y < map.GetLength(0); y++)
                for (int x = 0; x < map.GetLength(1); x++)
                    map[y, x] = file[y][x];

            return map;
        }

        private static void DrawMap(char[,] map)
        {
            for (int y = 0; y < map.GetLength(0); y++)
            {
                for (int x = 0; x < map.GetLength(1); x++)
                {
                    Console.Write(map[y, x]);
                }
                Console.Write(""\n"");
            }
        }

        private static void HandleInput(ConsoleKeyInfo pressedKey, ref int pacmanX, ref int pacmanY, char[,] map, ref int score)
        {
            int[] direction = GetDirection(pressedKey);
            int nextPacmanPositionX = pacmanX + direction[0];
            int nextPacmanPositionY = pacmanY + direction[1];
            char nextCell = map[nextPacmanPositionY, nextPacmanPositionX];

            if (nextCell == ' ' || nextCell == '*')
            {
                pacmanX = nextPacmanPositionX;
                pacmanY = nextPacmanPositionY;

                if (nextCell == '*')
                {
                    score++;
                    map[nextPacmanPositionY, nextPacmanPositionX] = ' ';
                }
            }
        }

        private static int[] GetDirection(ConsoleKeyInfo pressedKey)
        {
            int[] direction = { 0, 0 };

            if (pressedKey.Key == ConsoleKey.UpArrow)
                direction[1] = -1;
            else if (pressedKey.Key == ConsoleKey.DownArrow)
                direction[1] = 1;
            else if (pressedKey.Key == ConsoleKey.LeftArrow)
                direction[0] = -1;
            else if (pressedKey.Key == ConsoleKey.RightArrow)
                direction[0] = 1;

            return direction;
        }

        private static int GetMaxLengthOfLine(string[] lines)
        {
            int maxLength = lines[0].Length;

            foreach (var line in lines)
                if (line.Length > maxLength)
                    maxLength = line.Length;

            return maxLength;
        }
    }
}
"
Ry0rCWNV,03. Title Case,Spocoman,C++,Sunday 29th of October 2023 08:02:39 AM CDT,"#include <iostream>
#include <string>

using namespace std;

int main() {
    string str;
    getline(cin, str);
    str[0] = toupper(str[0]);

    for (int i = 1; i < str.length(); i++) {
        if (!isalpha(str[i - 1]) && islower(str[i])) {
            str[i] = toupper(str[i]);
        }
    }

    cout << str << endl;
    return 0;
}"
3Z8WFt1Z,Untitled,den4ik2003,C++,Sunday 29th of October 2023 07:58:56 AM CDT,"#include <iostream>
#include <vector>

int main() {
  int m, n;
  std::cin >> m >> n;
  std::vector<std::vector<int>> a(n, std::vector<int>(m));

  int count = 1;
  for (int shift_j = 0; shift_j < m; ++shift_j) {
    int i = 0;
    int j = shift_j;
    while (i < n && j >= 0) {
      a[i][j] = count;
      ++count;
      ++i;
      --j;
    }
  }
  for (int shift_i = 1; shift_i < n; ++shift_i) {
    int i = shift_i;
    int j = m - 1;
    while (i < n && j >= 0) {
      a[i][j] = count;
      ++count;
      ++i;
      --j;
    }
  }

  for (int i = 0; i < n; ++i) {
    for (int j = 0; j < m; ++j) {
      std::cout << a[i][j] << "" "";
    }
    std::cout << '\n';
  }
}
"
sx0DULs1,init.lua,Mazi30,Lua,Sunday 29th of October 2023 07:47:10 AM CDT,"shell.execute(""pastebin"", ""get"", ""gL9TssfE"", ""excavate.lua"")
shell.execute(""pastebin"", ""get"", ""nFpa7UQK"", ""fill.lua"")
shell.execute(""pastebin"", ""get"", ""7LSYF4NV"", ""border.lua"")"
6wDLiKSv,Simba 1.5 - Planetary rotation around sun,WarPie90,Delphi,Sunday 29th of October 2023 07:46:06 AM CDT,"program new;
{$R-}

const
  SPEEDSCALE := 500;
  G = 6.674*10**-11;
  Middle: TPoint = [500,500];

type
  TPlanet = record
    Distance, Diameter, Mass: Double;

    Pos: record Distance, Angle: Single; end;
    Color: TColor;
    pathrad: Int32;
  end;


var
  Sun: TPlanet;
  image: TImage;
  Mercury, Venus, Earth, Mars, Jupiter, Saturn, Uranus, Neptune: TPlanet;
  year: Int32;

function TPlanet.Velocity(): Double;
begin
  Result := Sqrt((G*Sun.Mass) / (Self.Distance*1000));
end;

function TPlanet.SizeScaled(): Int32;
begin
  Result := Max(1,Trunc(Self.Diameter ** 0.35 / 5));
end;

function TPlanet.Tick(Image: TImage): TPoint;
var
  speed: Single;
  size: Int32;
begin
  speed := Self.Velocity();
  size  := Self.SizeScaled();

  if Self.Diameter = Earth.Diameter then
  begin
    if Modulo(Self.Pos.Angle + speed/Self.Distance*speedscale, 2*PI) <> Self.Pos.Angle + speed/Self.Distance*speedscale then
      year += 1;

    Image.DrawText('Earth years: '+ ToStr(year), [50,50], $FFFFFF);
  end;

  Self.Pos.Distance := Self.Distance ** 0.27;
  Self.Pos.Angle := Modulo(Self.Pos.Angle + speed/Self.Distance*speedscale, 2*PI);

  Result.x := Round(Middle.x + Self.Pos.Distance * Cos(Self.Pos.Angle));
  Result.y := Round(Middle.y + Self.Pos.Distance * Sin(Self.Pos.Angle));

  if Self.pathrad = 0 then Self.pathrad := Ceil(Result.DistanceTo(Middle));
  image.DrawCircleAA(middle, Self.pathrad, $222222, 1);

  image.DrawCircleAA(Result, size, Self.Color, size);
end;

procedure Update(Image: TImage);
begin
  Mercury.Tick(image); Venus.Tick(image); Earth.Tick(image); Mars.Tick(image);
  Jupiter.Tick(image); Saturn.Tick(image); Uranus.Tick(image); Neptune.Tick(image);
end;

var
  tmp: TImage;
begin
  Sun.Diameter     := 696340*2;
  Sun.Mass         := 2*10**30;
  Sun.Distance     := 0;


  Mercury.Diameter := 2440*2;
  Mercury.Mass     := 3.3010*10**23;
  Mercury.Distance := 57.9*10**6;
  Mercury.Color    := Colors.SLATEGREY;

  Venus.Diameter   := 6052*2;
  Venus.Mass       := 4.1380*10**24;
  Venus.Distance   := 108.2*10**6;
  Venus.Color      := Colors.PALE_VIOLETRED;

  Earth.Diameter   := 6371*2;
  Earth.Mass       := 5.97*10**24;
  Earth.Distance   := 149.6*10**6;
  Earth.Color      := Colors.SKYBLUE;

  Mars.Diameter    := 3390*2;
  Mars.Mass        := 6.4273*10**23;
  Mars.Distance    := 228.0*10**6;
  Mars.Color       := Colors.RED;

  Jupiter.Diameter := 69911*2;
  Jupiter.Mass     := 1.89852*10**27;
  Jupiter.Distance := 778.5*10**6;
  Jupiter.Color    := Colors.MEDIUM_BLUE;

  Saturn.Diameter  := 58232*2;
  Saturn.Mass      := 5.6846*10**26;
  Saturn.Distance  := 1432.0*10**6;
  Saturn.Color    := Colors.BEIGE;

  Uranus.Diameter  := 25362*2;
  Uranus.Mass      := 8.6819*10**25;
  Uranus.Distance  := 2867.0*10**6;
  Uranus.Color     := Colors.SKYBLUE;

  Neptune.Diameter := 24622*2;
  Neptune.Mass     := 1.02431*10**26;
  Neptune.Distance := 4515.0*10**6;
  Neptune.Color    := Colors.DARK_BLUE;

  image := TImage.Create(1000,1000);

  while True do
  begin
    image.DrawCircleAA(Middle, Sun.SizeScaled(), $88FFFF, Sun.SizeScaled());
    Update(image);
    //tmp := image.ResizeBilinear(image.GetWidth() div 4, image.GetHeight() div 4);
    image.Show(False);
    //tmp.Free();
    image.Clear();
    //TerminateScript;
  end;
  image.Free();
end."
