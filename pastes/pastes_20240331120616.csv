id,title,username,language,date,content
yLSvMsRy,Unit_11,lovelyvook,C#,Sunday 31st of March 2024 07:04:08 AM CDT,"using System;

namespace Ijunior
{
    internal class Program
    {
        static void Main(string[] args)
        {
            const string CommandCreateName = ""1"";
            const string CommandGuessNumber = ""2"";
            const string CommandClearConsole = ""3"";
            const string CommandExit = ""4"";

            bool isWork = true;
            string userInput;
            string userName;
            string userPassword;

            Random rand = new Random();
            int minRandomNumber = 1;
            int maxRandomNumber = 10;
            int numberOfAttempts = 3;


            while (isWork)
            {
                Console.WriteLine($""{CommandCreateName} - –∑–∞–¥–∞—Ç—å –∏–º—è –∏ –ø–∞—Ä–æ–ª—å"" +
                    $""\n{CommandGuessNumber} - –æ—Ç–≥–∞–¥–∞—Ç—å —Å–ª—É—á–∞–π–Ω–æ–µ —á–∏—Å–ª–æ"" +
                    $""\n{CommandClearConsole} - –æ—á–∏—Å—Ç–∏—Ç—å –∫–æ–Ω—Å–æ–ª—å"" +
                    $""\n{CommandExit} - –≤—ã–π—Ç–∏ –∏–∑ –ø—Ä–æ–≥—Ä–∞–º–º—ã"");
                Console.Write(""–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –º–µ–Ω—é: "");
                userInput = Console.ReadLine();

                switch (userInput)
                {
                    case CommandCreateName:
                        Console.Write(""–í–≤–µ–¥–∏—Ç–µ –∏–º—è: "");
                        userName = Console.ReadLine();

                        Console.Write(""–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å: "");
                        userPassword = Console.ReadLine();

                        Console.Write(""–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å —Å–µ–∫—Ä–µ—Ç: "");
                        userInput = Console.ReadLine();

                        if (userInput == userPassword)
                        {
                            Console.WriteLine(userName + "", —Ç—ã —Å–ª–∞–¥–∫–∞—è –±—É–ª–æ—á–∫–∞ <3"");
                        }
                        else
                        {
                            Console.WriteLine(""–ù–µ–≤–µ—Ä–Ω–æ"");
                        }
                        break;
                    case CommandGuessNumber:
                        for (int i = 0; i < numberOfAttempts; i++)
                        {
                            int randomNumber = rand.Next(minRandomNumber, maxRandomNumber);
                            Console.WriteLine($""–û—Ç–≥–∞–¥–∞–π —á–∏—Å–ª–æ –º–µ–∂–¥—É {minRandomNumber} –∏ {maxRandomNumber}, —É —Ç–µ–±—è {numberOfAttempts - i} –ø–æ–ø—ã—Ç–æ–∫"");
                            userInput = Console.ReadLine();

                            if (userInput == Convert.ToString(randomNumber))
                            {
                                Console.WriteLine(""–û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞!"");
                                break;
                            }
                            else if (i == numberOfAttempts - 1)
                            {
                                Console.WriteLine(""–ü–æ–≤–µ–∑–µ—Ç –≤ —Å–ª–µ–¥—É—é—à–∏–π —Ä–∞–∑"");
                            }
                        }
                        break;
                    case CommandClearConsole:
                        Console.Clear();
                        break;
                    case CommandExit:
                        isWork = false;
                        break;
                }
            }
        }
    }
}"
PBuuCgL0,üí≤ G2A.com Free Gift Card Guide Mar 2024 üí≤,ssss50w,GetText,Sunday 31st of March 2024 06:54:10 AM CDT,"G2A.com free gift card & games updated guide.
Any item for free on G2A.com including Amazon, Steam, Xbox, Playstation gift cards & everything else offered.
 
If you use this make sure to use the English version of G2A.com otherwise this will not work!
 
PDF guide here:
https://drive.google.com/file/d/1KMb0fLkKHIC2qdjR4vCSRH9rVSjJVMdX/view?usp=sharing
 
Working as of:
31 March 2024
 "
vbyw8imE,Rects area,safarislava,C++,Sunday 31st of March 2024 06:32:35 AM CDT,"#include ""bits/stdc++.h""
#define ll long long
#define forn(i, n) for (ll i = 0; i < n; i++)

using namespace std;

ll max(vector<ll> &a){
    ll res = INT64_MIN;
    for (ll &x : a) res = max(res, x);
    return res;
}

vector<ll> compress(vector<ll> a) {
    vector<ll> b = a;
    sort(b.begin(), b.end());

    unordered_map<ll, ll> m;

    for (ll x : b)
        if (!m.count(x))
            m[x] = m.size();

    for (ll &x : a)
        x = m[x];

    return a;
}

struct node{
    ll cnt, x;
};
const node ZERO = {0, 0};

node combain(node _1, node _2, node old){
    ll new_cnt = 0;
    if (_1.x == 0) new_cnt += _1.cnt;
    if (_2.x == 0) new_cnt += _2.cnt;
    ll new_x = old.x;
    return {new_cnt, new_x};
}

node convert(ll v){
    return {v, 0};
}

struct seg_tree{
    ll size = 1;
    vector<node> tree;

    void init(ll n){
        while (size < n) size *= 2;
        tree.assign(2*size-1, ZERO);
    }

    void build(vector<node> &a, ll x, ll lx, ll rx){
        if (rx - lx == 1){
            if (lx < (ll)a.size()) tree[x] = {a[lx]};
            return;
        }

        ll m = (lx + rx) / 2;
        build(a, 2*x+1, lx, m);
        build(a, 2*x+2, m, rx);
        tree[x] = combain(tree[2*x+1], tree[2*x + 2], tree[x]);
    }

    void build(vector<ll> &a){
        init(a.size());
        vector<node> new_a(a.size());
        forn(i, (ll)a.size()) new_a[i] = convert(a[i]);
        build(new_a, 0, 0, size);
    }

    void add(ll l, ll r, ll v, ll x, ll lx, ll rx){
        if (l >= rx || r <= lx) return;
        if (l <= lx && r >= rx) {
            tree[x].x += v;
            return;
        }

        ll m = (lx + rx) / 2;
        add(l, r, v, 2*x+1, lx, m);
        add(l, r, v, 2*x+2, m, rx);
        tree[x] = combain(tree[2*x+1], tree[2*x+2], tree[x]);
    }

    void add(ll l, ll r, ll v){
        add(l, r, v, 0, 0, size);
    }

    ll get(){
        if (tree[0].x == 0) return tree[0].cnt;
        return 0;
    }

    void print(){
        ll n = 1, c = 0;
        while (n <= size){
            for (ll i = c; i < c+n; i++){
                cout << tree[i].cnt << "" "";
            }
            cout << endl;
            c += n;
            n *= 2;
        }
    }
};

ll rects_area(vector<pair<pair<ll, ll>, pair<ll, ll>>> &rects){
    ll n = (ll) rects.size();
    if (n == 0) return 0;

    vector<pair<pair<ll, bool>, pair<ll, ll>>> events(2*n);
    vector<ll> ys(2*n);
    forn(i, n) {
        ll x1 = rects[i].first.first, y1 = rects[i].first.second, x2 = rects[i].second.first, y2 = rects[i].second.second;
        if (x1 > x2) swap(x1, x2);
        if (y1 > y2) swap(y1, y2);
        events[2*i] = {{x1, false},{y1, y2}};
        events[2*i+1] = {{x2, true},{y1, y2}};
        ys[2*i] = y1, ys[2*i+1] = y2;
    }

    vector comp_ys = compress(ys);
    forn(i, n){
        events[2*i].second = {comp_ys[2*i], comp_ys[2*i+1]};
        events[2*i+1].second = {comp_ys[2*i], comp_ys[2*i+1]};
    }
    std::sort(events.begin(), events.end());

    seg_tree st;
    vector<ll> range;
    std::sort(ys.begin(), ys.end());
    for (ll i = 0; i < (ll)ys.size()-1; i++){
        if (ys[i+1] == ys[i]) continue;
        range.push_back(1);
        range.push_back(ys[i+1] - ys[i] - 1);
    }
    st.build(range);

    ll res = 0;
    ll dy = st.get();
    ll x = events[0].first.first, y1 = events[0].second.first, y2 = events[0].second.second;
    bool flag = events[0].first.second;
    st.add(2*y1, 2*y2, flag?-1:1);
    ll prev_x = x;
    for (ll i = 1; i < 2*n; i++){
        x = events[i].first.first, y1 = events[i].second.first, y2 = events[i].second.second;
        flag = events[i].first.second;

        res += (x - prev_x) * (dy - st.get());
        prev_x = x;
        st.add(2*y1, 2*y2, flag?-1:1);
    }
    return res;
}

void solve(){
    ll k, q; cin >> k >> q;

    ll x = 0, y = 0;
    vector<pair<pair<ll, ll>, pair<ll, ll>>> rects;
    forn(_, q){
        string c; ll d; cin >> c >> d;

        ll x1 = x, y1 = y, x2 = x, y2 = y;
        if (c == ""N"") y1 += d;
        else if (c == ""S"") y1 -= d;
        else if (c == ""W"") x1 -= d;
        else if (c == ""E"") x1 += d;
        else return;
        x = x1, y = y1;

        if (x1 > x2) swap(x1, x2);
        if (y1 > y2) swap(y1, y2);

        rects.push_back({{x1, y1}, {x2 + k, y2 + k}});
    }

    cout << rects_area(rects);
}

int main(){
    ios::sync_with_stdio(false);
    cin.tie(nullptr); cout.tie(nullptr);

    solve();

    return 0;
}"
SZYVLzE2,Shader code,Kronokilla1337,C++,Sunday 31st of March 2024 06:29:46 AM CDT,"Shader ""Custom/SSR - Foreground""
{
    Properties
    {
        _MainTex (""Albedo (RGB)"", 2D) = ""white"" {}
        _Glossiness (""Smoothness"", Range(0,1)) = 0.5
        _Metallic (""Metallic"", Range(0,1)) = 0.0
        _Offset1(""Offset 1"", Vector) = (24, -41,0, 0)
        _Offset2(""Offset 2"", Vector) = (-24, 41,0, 0)

        _Sharpness(""Sharpness of noise"", float) = 12.0
        _Frequency(""Frequency of Change"", float) = 12.0
        _Scale(""Noise Scale"", float) = 2.0
        _Skew(""Noise Skew"", float) = 1.0
        _ZFactor(""Z Factor"", Range(-1, 1)) = 0.0
        _Boost(""Color Boost"", float) = 1.88

        [Space]
        [Space]
        [KeywordEnum(None, Monochrome, Gradient, Prismatic)] _CardRarity(""Rarity"", int) = 0
        [Space]


        [HDR]_MonochromeColor(""Monochrome Color"", Color) = (1,1,1,1)
        
        [Space]
        [Space]
        [Space]

        [IntRange] _StencilRef(""Read Value"", Range(0,255)) = 1
        [Enum(UnityEngine.Rendering.CompareFunction)] _CompareFunction(""_CompareFunction"", int) = 1
    }
    SubShader
    {
        Stencil
        {
            Ref [_StencilRef]
            Comp [_CompareFunction] 
        }
        ZWrite Off
        Tags { ""RenderType""=""Transparent"" ""Queue"" = ""Transparent"" }
        
        CGPROGRAM
        // Physically based Standard lighting model, and enable shadows on all light types
        #pragma surface surf Standard fullforwardshadows alpha:blend
        #pragma target 3.0
        #pragma shader_feature _CARDRARITY_NONE _CARDRARITY_MONOCHROME _CARDRARITY_GRADIENT _CARDRARITY_PRISMATIC

        

        sampler2D _MainTex;

        struct Input
        {
            float2 uv_MainTex;
        };

        half _Glossiness;
        half _Metallic;
        fixed4 _Color;
        float2 _Offset1, _Offset2;
        float _Sharpness, _Frequency, _Scale, _ZFactor, _Boost, _Skew;

        float3 _MonochromeColor;
        float3 _GradientStart, _GradientEnd;
        float3 _PrismaticStart;
        int _CardRarity;

        float2 Rotate(float2 UV, float Rotation)
        {
            float s = sin(Rotation);
            float c = cos(Rotation);

            //center rotation matrix
            float2x2 rMatrix = float2x2(c, -s, s, c);

            //multiply the UVs by the rotation matrix
            UV.xy = mul(UV.xy, rMatrix);
            return UV;
        }

        void Hash_Tchou_2_1_uint(uint2 v, out uint o)
        {
            // ~6 alu (2 mul)
            v.y ^= 1103515245U;
            v.x += v.y;
            v.x *= v.y;
            v.x ^= v.x >> 5u;
            v.x *= 0x27d4eb2du;
            o = v.x;
        }

        void Hash_Tchou_2_1_float(float2 i, out float o)
        {
            uint r;
            uint2 v = (uint2) (int2) round(i);
            Hash_Tchou_2_1_uint(v, r);
            o = (r >> 8) * (1.0 / float(0x00ffffff));
        }

        float SimpleNoise(float2 uv)
        {
            float2 i = floor(uv);
            float2 f = frac(uv);
            f = f * f * (3.0 - 2.0 * f);
            uv = abs(frac(uv) - 0.5);

            float2 c0 = i + float2(0.0, 0.0);
            float2 c1 = i + float2(1.0, 0.0);
            float2 c2 = i + float2(0.0, 1.0);
            float2 c3 = i + float2(1.0, 1.0);

            float r0; Hash_Tchou_2_1_float(c0, r0);
            float r1; Hash_Tchou_2_1_float(c1, r1);
            float r2; Hash_Tchou_2_1_float(c2, r2);
            float r3; Hash_Tchou_2_1_float(c3, r3);

            float bottomOfGrid = lerp(r0, r1, f.x);
            float topOfGrid = lerp(r2, r3, f.x);

            float t = lerp(bottomOfGrid, topOfGrid, f.y);
            return t;
        }

        // Add instancing support for this shader. You need to check 'Enable Instancing' on materials that use the shader.
        // See https://docs.unity3d.com/Manual/GPUInstancing.html for more information about instancing.
        // #pragma instancing_options assumeuniformscaling
        UNITY_INSTANCING_BUFFER_START(Props)
            // put more per-instance properties here
        UNITY_INSTANCING_BUFFER_END(Props)

        void surf (Input IN, inout SurfaceOutputStandard o)
        {
            //#if _CARDRARITY_NONE
            //fixed4 c = 0;
            //o.Metallic = _Metallic;
            //o.Smoothness = _Glossiness;
            //o.Alpha = c.a;
            //return;
            //#ifdef _CARDRARITY_MONOCHROME
            float2 rotUV = Rotate(IN.uv_MainTex, 0.785398163375);

            float2 noiseUV1 = rotUV + _Offset1;
            noiseUV1.y *= _Skew;

            float2 noiseUV2 = rotUV + _Offset2;
            noiseUV2.y *= _Skew;

            float noiseVal1 = SimpleNoise(noiseUV1*_Scale);
            noiseVal1 = (noiseVal1 * 2.0) -1.0; 
            float noiseVal2 = SimpleNoise(noiseUV2*_Scale);
            noiseVal2 = (noiseVal2 * 2.0) -1.0; 

            float3 resultVector = (float3(noiseVal1, noiseVal2, _ZFactor));
            float RdotV = dot(normalize(resultVector), -normalize(UNITY_MATRIX_MV[2].xyz));
            RdotV = RdotV*0.5+0.5;
            RdotV = pow(RdotV, _Sharpness);
            
            float3 col = (_MonochromeColor*RdotV);

            fixed4 c = float4(col*_Boost, RdotV*_Boost);
            o.Albedo = c.rgb;
            // Metallic and smoothness come from slider variables
            o.Metallic = _Metallic;
            o.Smoothness = _Glossiness;
            o.Alpha = c.a;
        }
        ENDCG
    }
}
"
f4MjGfes,eww.scss,bluebyt,INI file,Sunday 31st of March 2024 06:16:56 AM CDT,"// GENERAL STUFF ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
*{
	all: unset;
	font-family: CaskaydiaCove Nerd Font Mono;
	font-size: 18px;
}

$white: #F8FBFC;
$lightgray: #DFE2E3;
$gray: #C5C8C9;
$medgray: #797C7D;
$darkgray: #46494A;
$black: #1a1b26;

$color1: #bf616a;
$color2: #eba0ac;
$color3: #d08770;
$color4: #ebcb8b;
$color5: #b48ead;
$color6: #e9bdbd;
$color7: #f5e0dc;
$color8: #a3be8c;
$color9: #a3be8c;
$color10: #8fbcbb;
$color11: #b48ead;
$color12: #b48ead;
$color13: #b48ead;
$color14: #b48ead;
$color15: #4e40d4;
$color16: #5e81ac;
$color17: #7aa2f7;
$color18: #88c0d0;
$color19: #d6ffff;
$color20: #2e3440;
$color21: #0D0E19;
$color22: rgba(13, 14, 25, 0.5);
$color23: rgba(46, 52, 64, 0.8);
/*$color23: rgba(82, 87, 98, 0.9);*/
$color24: rgba(36, 40, 59, 0.5);
$color25: rgba(13, 14, 25, 0.2);
$color26: rgba(26, 27, 38, 0.2);

.main-container {
	background-color: $color23;
	border-radius: 14px;
	margin: 0px 8px 8px 0px;
	/* box-shadow: 8px 8px 5px rgba(13, 14, 25, 0.7); */
	box-shadow: 1px 1px 3px 1px #151515;
}
button {
	color: $color10;
	padding: 6px;
}
button:hover {
	color: $color16;
}
tooltip {
	color: $lightgray;
	background-color: $color20;
	font-weight: bolder;
}

.dash {
	background-color: rgba(20, 22, 30, 0.6);
	margin: 4px 16px 2px 16px;
	padding: 2px;
}
.workspaces-box {
	padding: 6px;
}
.workspaces {
	background-color: $color24;
	border-radius: 10px;
	color: $color16;
	padding: 1px 5px 1px 5px;
}
.workspace-button {
	color: $color18;
}
.workspace-active {
	color:$color12;
}
.window-title {
	color: $gray;
	padding: 2px;
}
.info-box-left {
	padding: 4px;
}
.info-box-right {
	padding: 4px;
}
.info-icon {
	color: $color14;
}
.info-text {
	color: $color19;
}

.sys_win {
    border-radius: 10px;
}

.disk_temp {
    border-radius: 10px;
}
.sys_cpu {
  color: $color17;
  background-color: $color22;
  border-radius: 10px;
}

.sys_disk {
  color: $color9;
  background-color: $color22;
  border-radius: 10px;
}

.sys_tempe {
  color: $color4;
  background-color: $color22;
  border-radius: 10px;
}

.sys_mem {
  color: $color11;
  background-color: $color22;
  border-radius: 10px;
}

.sys_icon_cpu {
	font-size: 30;
	margin: 24px;
	color: $color17;
}

.sys_icon_tempe {
	font-size: 24;
	margin: 24px;
	color: $color4;
}
.sys_icon_disk {
	font-size: 30;
	margin: 24px;
	color: $color9;
}

.sys_icon_mem {
	font-size: 30;
	margin: 24px;
	color: $color11;
}
.sys_cpu_box {
    border-radius: 16px;
    margin: 10px 10px 10px 10px;
    padding-left: 20px;
}

.sys_tempe_box {
    border-radius: 16px;
    margin: 10px 10px 10px 10px;
    padding-right: 20px;
}

.sys_disk_box {
    border-radius: 16px;
    margin: 10px 10px 10px 10px;
    padding-left: 20px;
}

.sys_mem_box {
    border-radius: 16px;
    margin: 10px 10px 10px 10px;
    padding-right: 20px;
}
.mem_perc {
	color: $color11;
	padding-top: 6px;
}
.cpu_perc {
	color: $color17;
	padding-top: 6px;
}

.tempe_perc {
	color: $color4;
	padding-top: 6px;
}

.disk_perc {
	color: $color9;
	padding-top: 6px;
}

.network {
	padding: 5px 0px 5px 0px;
}
.network-label {
	color: $color18;
	font-size: 16px;
	font-weight: bold;
	padding: 10px 0px 4px 0px;
}
.network-up {
  color: $color14;
  font-size: 30px;
}
.network-down {
  color: $color17;
  font-size: 30px;
}
.network-graph-up {
	color: $color14;
	padding: 10px;
	background-color: rgba(203, 166, 247, 0.2);
}
.network-graph-down {
	color: $color17;
	padding-bottom: 10px;
	background-color: rgba(122, 162, 247, 0.2);
}

// CALENDAR ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
.cal-container {
	border-radius: 10px;
}
.cal-box {
	border-radius: 10px;
}
.cal-window {
	border-radius: 10px;
	padding-top: 10px;
}
.month-year {
		font-size: 12px;
		font-weight: bold;
		margin: 10px;
		padding: 1px;
		color: $lightgray;
}
.day-names {
		margin: 10px;
		font-size: 12px;
		font-weight: bold;
		color: $color10;
}
.date {
	color: $color17;
	font-size: 20px;
	font-weight: bold;
	border-radius: 10px;
}

.clock {
	font-size: 38px;
	font-weight: bold;
	color: $color13;
	border-radius: 10px;
	padding-top: 6px;
}

calendar {
	&:selected {
		color: $color9;
	}
	&:indeterminate {
		color: rgba(205, 219, 249, 0.3);
}}
calendar.button {
	color: $gray;
}
calendar.highlight {
	color: $color18;
	font-weight: bold;
	padding: 10px;
	margin: 10px;
}
.app-container {
	font-size: 28px;
}
.app-label {
	font-size: 18px;
	color: $color17;
}
.app-box {
	font-size: 32px;
	color: $color5;
	padding-bottom: 6px;
}
.quote-container {
	padding-top: 10px;
}
.quote-label {
	font-size: 16px;
	font-weight: bold;
	color: $color9;
}
.quote {
	font-size: 12px;
	font-weight: bold;
	color: $white;
	padding: 10px;
}
.function-label {
	font-size: 20px;
	color: $color17;
}
.function-box {
	font-size: 32px;
	color: $color1;
	padding-bottom: 10px;
}

// WEATHER ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
.weather-container {
	border-radius: 10px;
}
.weather-window {
	padding: 6px;
}
.weather-box {
	padding-top: 2px;
}
.weather-icon {
	color: $color18;
	font-size: 54px;
	font-weight: bold;
	padding-right: 14px;
}
.weather-temp {
	color: $color18;
	font-size: 30px;
	font-weight: bold;
}
.weather-feel {
	color: $color14;
	font-size: 14px;
	padding-bottom: 6px;
}
.weather-desc {
	color: $color7;
	font-size: 16px;
}

.logout {
	font-size: 54px;
}

// MUSIC ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

.player-art {
	border-radius: 12px;
	padding: 6px;
	margin-left: 4px;
}
.player-info {
	background-size: cover;
	background-repeat: no-repeat;
	background-position: center;
	background-size: cover;
	border-radius: 12px;
}
.player-tint {
	background: linear-gradient(to right, rgb(25, 25, 25, 0.9), rgba(38, 38, 38, 0.4));
	border-radius: 12px;
}
.player-title {
	font-size: 16px;
	font-weight: bolder;
	padding: 8px 0px 4px 2px;
}
.player-artist {
	color: $white;
	padding: 2px 0px 20px 2px;
}
.player-bar scale trough highlight {
	all: unset;
    background-image: linear-gradient(to right, $color17, $color12);
	border-radius: 24px;
}
.player-bar scale trough {
	all: unset;
	background-color: $darkgray;
    box-shadow: 1px 1px 2px 1px rgba(0, 0, 0, 0.3);
	border-radius: 24px;
	min-height: 5px;
	min-width: 150px;
}
.player-position {
	color: $lightgray;
	font-weight: 500;
	padding: 2px;
}
.player-time {
	font-size: 12px;
	padding: 4px;
}
.player-controls {
	background: $color25;
	padding: 2px 0px 2px 0px;
	border-radius: 10px;
	margin: 10px 10px 2px 10px;
}
.player-toggle {
	font-size: 32px;
	color: $color9;
}
.player-previous,
.player-next {
	font-size: 25px;
	color: $lightgray;
}
.player-toggle:hover,
.player-previous:hover,
.player-next:hover {
	color: $color16;
}
.player-shuffle {
	font-size: 16px;
	padding-right: 10px;
	color: $lightgray;
}
.player-loop {
	font-size: 16px;
	color: $lightgray;
}
.player-shuffle:hover,s
.player-loop:hover {
	color: $color15;
}
.music-loop-color,
.music-shuffle-color {
	color: $color3;
}
.vol-text {
	color: $color5;
	padding-left: 10px;
}
.vol-label {
	color: $gray;
	padding-right: 10px;
}
.vol-text {
	color: $gray;
	padding-left: 10px;
}
// scale & Metric  ;;;;;;;;;;;;;;;;;;;;;;;;;;

.scale trough {
	all: unset;
	background-color: $black;
	min-width: 150px;
	min-height: 10px;
	border-radius: 10px;
}
.scale trough highlight {
	background-color: $color5;
	border-radius: 10px;
}
.metric {
	font-size: 12px;
	font-weight: bold;
	color: $color5;
	padding-left: 10px;
}
.metric scale trough highlight {
	background: linear-gradient(90deg, #69a0c4 0%, #4e68be  50%, #684fad 100%);
	border-radius: 6px;
}
.metric scale trough {
	background-color: rgba(20, 22, 30, 0.5);
	border-radius: 6px;
	min-height: 10px;
	min-width: 80px;
	margin-left: 4px;
	margin-right: 4px;
}

// POWER WINDOW ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
.powerframe {
	background-color: $black;
	border-radius: 10px;
	min-width: 108px;
	min-height: 384px;
}
.powermenu {
	border-radius: 10px;
	font-size: 24px;
	padding: 10px;
}
.logout {
	color: $color1;
}
.reboot {
	color: $color2;
}
.poweroff {
	color: $color1;
}
.idle {
	color: $color2;
}
.screenshot {
	color: $color3;
}
.wallpaper {
	color: $color4;
}
.keybind {
	color: $color5;
}
"
tenHQCxe,125.166.9.4-/sdcard/Premium/useragent_ig.py.py,OBF-XIn,Python,Sunday 31st of March 2024 06:13:32 AM CDT,"# useragent
import random

class Useragent:
    def __init__(self) -> None:
        pass
        
    def useragent_api(self):
        self.nexus = ['Galaxy Nexus', 'Nexus 10', 'Nexus 2', 'Nexus 4', 'Nexus 4', 'Nexus 4', 'Nexus 4', 'Nexus 4', 'Nexus 4', 'Nexus 5', 'phone/Nexus 5', 'Nexus 5X', 'Nexus 6', 'Nexus 7', 'Nexus 9', 'Nexus One', 'Nexus One', 'Nexus One', 'Nexus One', 'Nexus One', 'Nexus One', 'Nexus Player', 'Nexus Player', 'Nexus S', 'Nexus S', 'Nexus S 4G', 'nexus S', 'Nexus S', 'Nexus s', 'Nexus S', 'Nexus S', 'Nexus S', 'Nexus S', 'Nexus S']
        self.micromax = ['Micromax 10', 'Micromax 1J', 'Micromax 86519', 'Micromax A064', 'Micromax_A064', 'Micromax A065', 'Micromax_A065', 'Micromax A066', 'Micromax_A066', 'Micromax A067', 'Micromax_A067', 'MICROMAX_A068', 'MICROMAX A068', 'Micromax A068', 'Micromax A069', 'Micromax_A069', 'Micromax A075', 'Micromax A082', 'Micromax_A082', 'Micromax A089', 'Micromax_A089', 'Micromax A091', 'Micromax A092', 'Micromax_A092', 'Micromax A093', 'Micromax_A093', 'Micromax A095', 'Micromax A096', 'Micromax_A101', 'Micromax A102', 'Micromax_A102', 'Micromax A104', 'Micromax a104', 'Micromax A105', 'Micromax_A105', 'Micromax A106', 'Micromax-A106', 'Micromax A108', 'Micromax_A109', 'Micromax A109', 'Micromax A110', 'Micromax_A110', 'Micromax A110Q', 'Micromax_A110Q', 'Micromax A111', 'Micromax A114', 'Micromax A114R', 'Micromax_A114R', 'Micromax A115', 'Micromax_A115', 'Micromax A116', 'Micromax_A116', 'Micromax A116i', 'Micromax_A116i', 'Micromax A117', 'Micromax_A117', 'Micromax A118R', 'Micromax A119', 'Micromax A120', 'Micromax A121', 'Micromax_A121', 'Micromax A15', 'Micromax A177', 'Micromax A190', 'Micromax_A190', 'Micromax A200', 'Micromax_A200', 'Micromax A21', 'Micromax A210', 'Micromax A24', 'Micromax_A24', 'Micromax A25 Smarty', 'Micromax A250', 'Micromax A255', 'Micromax_A255', 'Micromax A26', 'Micromax_A26', 'Micromax_A27', 'Micromax A27', 'Micromax_A28', 'Micromax A28/GRI40', 'Micromax A28', 'Micromax A290', 'Micromax A30', 'Micromax A300', 'Micromax A310', 'Micromax A311', 'Micromax A315', 'Micromax_A315', 'Micromax_A316', 'Micromax A316', 'Micromax_A34', 'Micromax A34', 'Micromax_A35', 'Micromax A35', 'Micromax A350', 'Micromax_A36', 'Micromax A36', 'Micromax_A37', 'Micromax A37', 'Micromax A37B', 'Micromax_A37B', 'Micromax A40', 'Micromax_A40', 'Micromax A46', 'Micromax_A46', 'Micromax A47', 'MicromaxA47', 'Micromax_A50', 'Micromax A50', 'Micromax A51', 'Micromax A52', 'Micromax A54', 'Micromax A56', 'Micromax_A57', 'Micromax A57', 'Micromax A58', 'Micromax_A58', 'Micromax A59', 'Micromax A60', 'Micromax A61', 'Micromax A62', 'Micromax_A62', 'Micromax A63', 'Micromax_A63', 'Micromax_A65', 'Micromax A65', 'Micromax_A66', 'Micromax A66', 'Micromax A67', 'Micromax A68', 'Micromax A69', 'Micromax_A69', 'Micromax_A70', 'Micromax A700', 'Micromax A71', 'Micromax_A71', 'Micromax A72', 'Micromax_A72', 'Micromax A73', 'Micromax_A74', 'Micromax A74', 'Micromax A75', 'Micromax_A76', 'Micromax A76', 'Micromax A77', 'Micromax A78', 'Micromax A79', 'en_us Micromax A80', 'Micromax A80', 'Micromax A82', 'Micromax_A82', 'Micromax A84', 'Micromax A85', 'Micromax A86', 'Micromax_A86', 'Micromax_A87', 'Micromax A87', 'Micromax A87 . Ninja 4.0', 'Micromax A88', 'Micromax_A88', 'Micromax A89', 'Micromax A90', 'Micromax A90s', 'MIcromax_A90s', 'Micromax A90S', 'Micromax A91', 'Micromax_A91', 'Micromax_A92', 'Micromax A92', 'MicromaxA93', 'Micromax A93', 'Micromax A94', 'Micromax_A94', 'Micromax A96', 'Micromax_A96', 'Micromax A97', 'Micromax_A99', 'Micromax A99', 'Micromax_AD3520', 'Micromax AD3520', 'Micromax AD3550', 'Micromax AD4500', 'Micromax_AD4500', 'Micromax AE90', 'Micromax AO5510', 'Micromax AQ5000', 'Micromax B4A', 'Micromax B5 Pro', 'B5Pro', 'Micromax_Bharat_5_Plus', 'Micromax Q402Plus', 'Micromax Q440', 'Micromax Bharat 5', 'Micromax Q4204', 'Micromax Bharat 5 Plus', 'Micromax Bharat 5 Pro', 'Micromax Bolt 3425', 'Micromax Bolt 2', 'Micromax Q402+', 'Micromax Q306', 'Micromax Q3001', 'Micromax Q301', 'Micromax Q303', 'Micromax Q324', 'Micromax Q326', 'Q327', 'Micromax Q327', 'Micromax Q3301', 'Micromax Q333', 'Micromax_Q333', 'Micromax Q338', 'Micromax Q346', 'Micromax Q354', 'Micromax Q357', 'Micromax Q383', 'Micromax_S302', 'Micromax S302', 'Micromax Q424', 'Micromax Q352', 'Micromax Q4101', 'Micromax C2A', 'Micromax C9', 'Micromax C1', 'Micromax C1A', 'Micromax C2APLS', 'Micromax Q4310', 'Micromax E4815', 'arm_64 Micromax E481', 'Micromax E481', 'Micromax E4816', 'Micromax Q462', 'Micromax Q463', 'Micromax E485', 'Micromax E484', 'Micromax AQ4501', 'Micromax AQ4502', 'A240', 'Micromax A240', 'Micromax Q391', 'Micromax E453', 'Micromax A107', 'Micromax HS2', 'Micromax HS1', 'Micromax_HS3', 'en Micromax_HS3', 'AQ5001', 'Micromax AQ5001', 'AQ5001 Canvas Power', 'Micromax Q392', 'Micromax Q465', 'Micromax Q461', 'Micromax Q350R', 'Micromax Q421', 'Micromax Q417', 'Micromax Q426', 'Micromax Q4260', 'Micromax E311', 'Micromax E352', 'Micromax E455', 'Micromax Q415', 'Micromax Q355', 'Micromax Q469', 'Micromax E451', 'Micromax E451', 'Micromax Q340', 'Micromax Q349', 'Micromax Q345', 'Micromax Q450', 'Micromax Q480', 'arm_64 Micromax Q480', 'Micromax Q380', 'Micromax Q3502', 'Micromax Q351', 'Micromax Q385', 'P70221', 'Micromax P681', 'MicromaxP802', 'Micromax Q427', 'Micromax_Q427', 'Micromax Q413', 'Micromax E313', 'Micromax D2', 'Micromax D200', 'Micromax_D200', 'Micromax D303', 'Micromax D304', 'Micromax_D304', 'Micromax D305', 'Micromax D306', 'Micromax D320', 'Micromax D321', 'Micromax D333', 'Micromax D340', 'Micromax D7517', 'Micromax DM5003', 'Micromax E353', 'Micromax E457', 'Micromax E458', 'Micromax E460', 'Micromax E471', 'Micromax E4817', 'Micromax E482', 'Micromax E483', 'Micromax E5018M', 'Micromax EG111', 'Micromax EG116', 'micromax F', 'micromax F189', 'Micromax F601', 'MicromaxF666', 'Micromax IN', 'Micromax E7533', 'Micromax E6523', 'IN_2b', 'IN_Note1', 'MICROMAX IN1', 'N8216', 'N8301', 'ione note', 'MICROMAX ione note', 'Micromax N4120', 'Micromax N8202', 'Micromax Ninja', 'Micromax Nitro', 'Micromax Note 1+', 'Micromax Note 5', 'Micromax Note3', 'Micromax NX', 'Micromax P001', 'Micromax P250(Funbook)', 'Micromax P255', 'Micromax P256', 'xx Micromax P275', 'Micromax_P275', 'Micromax P275', 'Micromax P280', 'Micromax P290', 'Micromax P310', 'Micromax P350', 'xx Micromax P350', 'Micromax P360', 'Micromax P362', 'Micromax P365', 'Micromax P410', 'Micromax P410i', 'Micromax_P410i', 'Micromax P420', 'Micromax P469', 'Micromax P470', 'MicromaxP480', 'Micromax P500(Funbook)', 'Micromax P560', 'Micromax P580', 'Micromax P580i', 'Micromax P600', 'Micromax P650', 'Micromax P650E', 'Micromax P660', 'Micromax P660', 'Micromax_P666', 'Micromax P666', 'MicromaxP680', 'Micromax P690', 'Micromax P701', 'MicromaxP702', 'Micromax P810', 'en Micromax Q300', 'Micromax_Q300', 'Micromax Q323', 'Micromax_Q323', 'Micromax Q325', 'Micromax_Q325', 'Micromax Q331', 'Micromax_Q331', 'Micromax Q332', 'Micromax_Q332', 'Micromax Q334', 'Micromax Q335', 'Micromax_Q335', 'Micromax Q336', 'Micromax_Q336', 'Micromax Q341', 'Micromax Q343', 'Micromax Q348', 'Micromax_Q353', 'en Micromax_Q353', 'Micromax_Q353P', 'Micromax Q3551', 'Micromax Q3555', 'Micromax Q361', 'Micromax Q370', 'Micromax_Q370', 'Micromax Q371', 'Micromax_Q371', 'Micromax Q375', 'Micromax_Q375', 'Micromax Q379', 'Micromax Q381', 'Micromax Q382', 'Micromax Q386', 'Micromax Q394', 'Micromax_Q394', 'Micromax Q395', 'Micromax Q397', 'Micromax Q398', 'arm Micromax Q398', 'Micromax Q400', 'Micromax_Q400', 'Micromax Q4002', 'en Micromax Q4002', 'Micromax Q401', 'Micromax Q402', 'Micromax Q402 Ultra', 'Micromax Q404', 'Micromax Q411', 'Micromax_Q411', 'Micromax Q412', 'Micromax Q414', 'Micromax Q416', 'Micromax Q419', 'Micromax Q4201', 'Micromax Q422', 'Micromax Q4220', 'Micromax Q423', 'Micromax Q428', 'Micromax_Q428', 'Micromax Q429', '720X1280 Micromax Q4309', 'Micromax Q4312', 'en_US Micromax Q437', 'Micromax Q440Plus', 'Micromax Q454', 'Micromax Q470', 'Micromax Q479', 'Micromax Q491', 'Micromax_Q491', 'Micromax Q502+', 'Micromax Q666', 'Micromax Q67', 'micromax Q68', 'micromax Q78', 'Micromax S300', 'Micromax_S300', 'Micromax S301', 'Micromax_S301', 'Micromax Q4311', 'Micromax Q4601', 'Micromax Q409A', 'Micromax Q409', 'Micromax Q452', 'Micromax Unite 3', 'Micromax Unite 2', 'Micromax Unite 2 A106', 'Micromax Q372', 'Micromax V89', 'Micromax Q4001', 'Micromax Q4202', 'Micromax Q4251', 'arm Micromax Q4251', 'Micromax W5509', 'Micromax X5098', 'Micromax-Xzoom A52', 'YU5530', 'YU5040', 'Micromax YU5900', 'YU5012', 'Micromax Z59']
        self.onpls = ['NE2213', 'NE2217', 'NE2215', 'NE2210', 'NE2210', 'CPH2423', 'CPH2411', 'CPH2417', 'CPH2413', 'CPH2415', 'CPH2449', 'CPH2487', 'ONE A2003', 'ONE A2003', 'ONE A2001', 'ONE A2005', 'ONEPLUS A3003', 'ONEPLUS A3000', 'ONEPLUS A3010', 'ONEPLUS A5000', 'ONEPLUS A5000', 'ONEPLUS A5010', 'ONEPLUS A5010', 'ONEPLUS A5010', 'ONEPLUS A5010', 'ONEPLUS A5010', 'ONEPLUS A6003', 'ONEPLUS A6000', 'ONEPLUS A6010', 'ONEPLUS A6013', 'ONEPLUS A6010', 'GM1900', 'GM1901', 'GM1903', 'GM1917', 'GM1913', 'GM1911', 'GM1910', 'GM1915', 'GM1910', 'HD1901', 'HD1903', 'HD1900 Flow', 'HD1905', 'HD1900', 'HD1907', 'HD1911', 'HD1913', 'HD1910', 'GM1925', 'HD1925', 'GM1920', 'IN2013', 'IN2015', 'IN2010', 'IN2010', 'IN2017', 'IN2019', 'IN2023', 'IN2025', 'IN2020', 'OnePlus8Pro', 'KB2005', 'KB2001', 'KB2007', 'KB2003', 'KB2000', 'OnePlus 8T 5G', 'LE2115', 'LE2113', 'LE2111', 'LE2110', 'LE2120', 'LE2125', 'LE2123', 'LE2121', 'LE2127', 'OnePlus9Pro', 'LE2101', 'LE2100', 'MT2111', 'MT2110', 'ONEPLUS A19677', 'ONEPLUS A2345', 'Oneplus A31', 'Oneplus A3331', 'ONEPLUS A35904', 'ONEPLUS A37000', 'ONEPLUS A3EVB', 'ONEPLUS A62322', 'ONEPLUS A64794', 'ONEPLUS A65369', 'ONEPLUS A68333', 'ONEPLUS A70458', 'ONEPLUS A70791', 'ONEPLUS A78637', 'ONEPLUS A80828', 'ONEPLUS A83306', 'ONEPLUS A87046', 'ONEPLUS A90641', 'Oneplus A99831', 'PGKM10', 'PGKM10', 'PHK110', 'PHK110', 'PGP110', 'PGP110', 'PGZ110', 'ONEPLUS KB2023', 'OnePlus Nord', 'Oneplus Nord 2', 'DN2103', 'DN2101', 'CPH2399', 'CPH2401', 'AC2001', 'AC2003', 'IV2201', 'CPH2409', 'CPH2381', 'CPH2465', 'EB2103', 'EB2101', 'EB2101', 'BE2025', 'BE2026', 'BE2029', 'Nord N10 5G', 'BE2028', 'BE2013', 'BE2011', 'BE2012', 'CPH2459', 'GN2200', 'CPH2469', 'DE2118', 'DE2117', 'A0001', 'ONE E1001', 'ONE E1003', 'ONE E1001', 'ONE E1005']
        self.oppo = [""CPH1869"", ""CPH1929"",""CPH2107"", ""CPH2238"", ""CPH2389"",""CPH2401"", ""CPH2407"", ""CPH2413"", ""CPH2415"", ""CPH2417"", ""CPH2419"", ""CPH2455"", ""CPH2459"", ""CPH2461"", ""CPH2471"", ""CPH2473"", ""CPH2477"", ""CPH8893"", ""CPH2321"", ""CPH2341"", ""CPH2373"", ""CPH2083"", ""CPH2071"", ""CPH2077"", ""CPH2185"", ""CPH2179"", ""CPH2269"", ""CPH2421"", ""CPH2349"", ""CPH2271"", ""CPH1923"", ""CPH1925"", ""CPH1837"", ""CPH2015"", ""CPH2073"", ""CPH2081"", ""CPH2029"", ""CPH2031"", ""CPH2137"", ""CPH1605"", ""CPH1803"", ""CPH1853"", ""CPH1805"", ""CPH1809"", ""CPH1851"", ""CPH1931"", ""CPH1959"", ""CPH1933"", ""CPH1935"", ""CPH1943"", ""CPH2061"", ""CPH2069"", ""CPH2127"", ""CPH2131"", ""CPH2139"", ""CPH2135"", ""CPH2239"", ""CPH2195"", ""CPH2273"", ""CPH2325"", ""CPH2309"", ""CPH1701"", ""CPH2387"", ""CPH1909"", ""CPH1920"", ""CPH1912"", ""CPH1901"", ""CPH1903"", ""CPH1905"", ""CPH1717"", ""CPH1801"", ""CPH2067"", ""CPH2099"", ""CPH2161"", ""CPH2219"", ""CPH2197"", ""CPH2263"", ""CPH2375"", ""CPH2339"", ""CPH1715"", ""CPH2385"", ""CPH1729"", ""CPH1827"", ""CPH1938"", ""CPH1937"", ""CPH1939"", ""CPH1941"", ""CPH2001"", ""CPH2021"", ""CPH2059"", ""CPH2121"", ""CPH2123"", ""CPH2203"", ""CPH2333"", ""CPH2365"", ""CPH1913"", ""CPH1911"", ""CPH1915"", ""CPH1969"", ""CPH2209"", ""CPH1987"", ""CPH2095"", ""CPH2119"", ""CPH2285"", ""CPH2213"", ""CPH2223"", ""CPH2363"", ""CPH1609"", ""CPH1613"", ""CPH1723"", ""CPH1727"", ""CPH1725"", ""CPH1819"", ""CPH1821"", ""CPH1825"", ""CPH1881"", ""CPH1823"", ""CPH1871"", ""CPH1875"", ""CPH2023"", ""CPH2005"", ""CPH2025"", ""CPH2207"", ""CPH2173"", ""CPH2307"", ""CPH2305"", ""CPH2337"", ""CPH1955"", ""CPH1707"", ""CPH1719"", ""CPH1721"", ""CPH1835"", ""CPH1831"", ""CPH1833"", ""CPH1879"", ""CPH1893"", ""CPH1877"", ""CPH1607"", ""CPH1611"", ""CPH1917"", ""CPH1919"", ""CPH1907"", ""CPH1989"", ""CPH1945"", ""CPH1951"", ""CPH2043"", ""CPH2035"", ""CPH2037"", ""CPH2036"", ""CPH2009"", ""CPH2013"", ""CPH2113"", ""CPH2091"", ""CPH2125"", ""CPH2109"", ""CPH2089"", ""CPH2065"", ""CPH2159"", ""CPH2145"", ""CPH2205"", ""CPH2201"", ""CPH2199"", ""CPH2217"", ""CPH1921"", ""CPH2211"", ""CPH2235"", ""CPH2251"", ""CPH2249"", ""CPH2247"", ""CPH2237"", ""CPH2371"", ""CPH2293"", ""CPH2353"", ""CPH2343"", ""CPH2359"", ""CPH2357"", ""CPH2457"", ""CPH1983"", ""CPH1979""]
        self.vivo = ['vivo 1002T', 'Vivo 1605', 'vivo 1730', 'vivo 1809', 'vivo_1820', 'vivo 1835', 'vivo 1914', 'vivo 2010', 'vivo 2019', 'vivo 2019', 'vivo 2019', 'vivo 2023', 'vivo 2027', 'vivo 3969', 'VIVO 5', 'Vivo 6', 'Vivo 7 Pro', 'Vivo 8', 'Vivo 93K Prime', 'vivo A5 ', 'vivo a54', 'Vivo A54', 'vivo a57', 'Vivo A87', 'VIVO A94', 'VIVO AIR', 'VIVO C8818', 'vivo E1', 'vivo E3', 'vivo E3', 'vivo E5', 'Vivo EGO', 'V1962BA', 'vivo h5', 'V1824A', 'V1824A', 'V1824BA', 'V2217A', 'V2217A', 'V2218A', 'V2218A', 'V2218A', 'V2243A', 'V1955A', 'I1927', 'I1928', 'V2024A', 'V2025A', 'V2025A', 'V2049A', 'V2049A', 'I2009', 'I2012', 'I2012', 'V2136A', 'V2136A', 'V2141A', 'V2171A', 'I2017', 'V2172A', 'V2172A', 'I2022', 'I2019', 'I2019', 'I2201', 'V1914A', 'V1914A', 'V1981A', 'V2055A', 'V2118A', 'V2157A', 'V2157A', 'V2154A', 'V2196A', 'V2196A', 'V2199A', 'V2231A', 'V2238A', 'V1936AL', 'V1936A', 'V1922A', 'V1922A', 'V1922A ', 'V1916A', 'V2023A', 'V2023A', 'VIVO V2023A', 'V2065A', 'V2061A', 'V2061A', 'V2143A', 'V2106A', 'V2165A', 'V2165A', 'V2180GA', 'V1986A', 'V2012A', 'V2012A', 'V2073A', 'V2073A', 'I2011', 'V2148A', 'I2018', 'V1919A', 'V2131A', 'V2220A', 'I2202', 'I2206', 'I2203', 'I2202', 'I2127', 'I2202', 'I2208', 'I2208', 'I2126', 'I2126', 'I2126', 'V2164KA', 'V2164KA', 'VIVO IV', 'VIVO IV', 'VIVO IV', 'VIVO IV', 'Vivo J5', 'vivo 1805', 'vivo 1805', 'vivo NEX', 'V1923A', 'vivo 1912', 'V1923A', 'vivo 1912', 'vivo 1913', 'V1924A', 'V1924A', 'vivo 1913', 'V1950A', 'V1950A', 'vivo NEX A', 'vivo NEX A', 'vivo 1813', 'V1821A', 'V1821A', 'vivo NEX S', 'vivo NEX S', 'Vivo ONE', 'Vivo ONE', 'PA2170', 'vivo PD1628F_EX', 'vivo PD1709', 'vivo PD1709F_EX', 'vivo PD1709F_EX', 'vivo PD1728', 'vivo PD1728', 'vivo PD1832F_EX', 'vivo PD2046F_EX', 'vivo PD2050F_EX', 'vivo PD2055F_EX', 'vivo PD2059F_EX', 'Vivo S', 'V1831A', 'V1831A', 'VIVO S1', 'Vivo S1 Prime', 'V1832A', 'V1832T', 'V2121A', 'V2121A', 'V2130A', 'V2130A', 'Vivo S11', 'Vivo S11 ', 'vivo S11t', 'vivo S11t', 'vivo S11t', 'vivo S11t', 'vivo S12', 'V2162A', 'Vivo S13', 'V2203A', 'V2207A', 'V2190A', 'V2244A', 'vivo S1Pro', 'Vivo S20 ', 'Vivo S21 ', 'Vivo S31', 'Vivo S4', 'Vivo S40', 'Vivo S41 /MMB439M', 'V1932A', 'vivo S6', 'V1962A', 'vivo S6T', 'V2020CA', 'V2020A', 'Vivo S76', 'V2031EA', 'vivo S7i(t)', 'vivo S7i(t)', 'vivo S7i(t)', 'V2080A', 'vivo S7t', 'vivo_S7t', 'vivo S7t', 'S7t 5G', 'vivo S7w', 'vivo S8', 'vivo S9', 'vivo S9', 'vivo S9', 'V2072A', 'V2048A', 'vivo S9t', 'V2168', 'V2168', 'V2153', 'V2153', 'V2150', 'V2151', 'V2151', 'V2151', 'V2143', 'vivo TD1602_EX', 'vivo U1', 'vivo 1916', 'vivo 1916', 'vivo 1921', 'V1941A', 'V1941A', 'V1928A', 'vivo V1', 'vivo V1', 'vivo V10', 'Vivo V10', 'VIVO V11', 'Vivo V11', 'vivo 1804', 'vivo 1804', 'vivo 1806', 'vivo 1806', 'vivo v11pro', 'vivo 1819', 'vivo 1818', 'vivo 1818', 'vivo 1920', 'vivo 1919', 'vivo 1907', 'vivo 1907', 'vivo 1907_19', 'vivo 1910', 'vivo 1909', 'vivo 1910', 'vivo 1933', 'vivo 1933', 'vivo V1907', 'vivo v19neo', 'vivo V1Max', 'vivo V1Max', 'vivo V2', 'V2040', 'vivo 2018', 'vivo 2018', 'V2022', 'Vivo V20A', 'Vivo V20G', 'V2066', 'V2108', 'V2050', 'V2050', 'V2050', 'V2061', 'V2055', 'Vivo V21S', 'V2130', 'V2132A', 'V2116', 'V2115', 'V2116', 'V2116', 'V2126', 'V2126', 'V2228', 'V2228', 'V2158', 'V2158', 'V2202', 'V2202', 'V2201', 'V2246', 'V2230', 'V2230', 'V2237', 'vivo V3', 'vivo V3', 'vivo V3Max A', 'vivo V3Max L', 'vivo v30', 'vivo v31', 'vivo V3L', 'vivo V3L', 'vivo V3L', 'vivo V3L', 'vivo V3M A', 'vivo V3M A', 'vivo V3MA', 'vivo_V3Max', 'vivo v45', 'vivo 1601', 'vivo V5', 'vivo 1609', 'vivo 1611', 'Vivo V51', 'Vivo V54', 'vivo 1612', 'vivo 1713', 'vivo V5S A', 'vivo 1718', 'vivo 1716', 'vivo Y79A', 'vivo Y79A', 'V2166BA', 'Vivo V8', 'vivo 1723', 'vivo V9 mini', 'vivo 1851', 'VIVO V9Pro', 'vivo 1851', 'vivo 1727', 'Vivo X', 'V2178A', 'V2229A', 'V2170A', 'V2170A', 'vivo Xplay3S', 'vivo Xplay3S', 'vivo Xplay3S', 'vivo Xplay5A', 'vivo Xplay5A', 'vivo Xplay5A', 'vivo Xplay5S', 'vivo Xplay5S', 'vivo Xplay6', 'vivo Xplay6L', 'vivo Xplay6', 'vivo Xplay6', 'vivo X710L', 'vivo X710L', 'vivo X710L', 'vivo X710L', 'vivo X1', 'vivo X1', 'vivo X1', 'vivo X1', 'Vivo X11', 'vivo X1S', 'vivo X1S', 'vivo X1S', 'vivo X1St', 'vivo X1St', 'vivo X1St', 'vivo X1St', 'vivo X1St', 'vivo X1W', 'vivo X1w', 'VIVO X2', 'VIVO X2', 'VIVO_X2', 'vivo X20', 'vivo X20A', 'vivo X20Plus A', 'vivo 1720', 'vivo X20Plus UD', 'vivo X20Plus UD', 'vivo X21', 'vivo X21A', 'vivo X21UD A', 'vivo X21i', 'vivo X21i A', 'vivo X21i', 'vivo X21i A ', 'V1814A', 'V1814T', 'V1814T', 'V1814A', 'V1809A', 'V1809A', 'V1816A', 'V1809T', 'V1816T', 'V1829A', 'V1838A', 'V1838T', 'V1829T', 'V1836A', 'V1836A', 'V1836T', 'vivo X27Pro', 'V1938CT', 'V1938T', 'V1938T', 'vivo X3F', 'vivo X3F', 'vivo X3F', 'vivo X3L', 'vivo X3L', 'vivo X3S', 'vivo X3S', 'vivo X3S', 'vivo X3S', 'vivo X3S', 'vivo X3S', 'vivo X3S W', 'vivo X3S W', 'vivo X3S W', 'vivo X3S W', 'vivo X3t', 'vivo X3t', 'vivo X3t', 'vivo X3t', 'vivo X3V', 'vivo X3V', 'vivo X3V', 'vivo X3V', 'Vivo X40', 'vivo X5L', 'vivo X5', 'vivo X5L', 'vivo X5Pro D', 'vivo X5Pro L', 'vivo X5Pro V', 'vivo X5Pro D', 'vivo X5Pro D', 'V2001A', 'V2001A', 'vivo 2004', 'vivo 2005', 'vivo 2005', 'V1937', 'vivo 1937', 'V1937', 'V1937', 'vivo 2006', 'vivo 2006', 'V2005A', 'V2011A', 'X50 Pro+', 'V1930', 'V1930', 'vivo X510t', 'vivo X510t', 'vivo X510t', 'vivo X510t', 'vivo X510t', 'vivo X520L', 'vivo X5F', 'vivo X5M', 'vivo X5M', 'vivo X5M', 'vivo X5Max ', 'vivo X5Max L', 'vivo X5Max L', 'vivo X5Max S', 'vivo X5Max V', 'vivo X5S L', 'vivo X5S L', 'vivo X5V', 'vivo X5V', 'vivo X5V', 'vivo X6D', 'vivo X6A', 'vivo X6Plus D', 'vivo X6Plus A', 'vivo X6Plus L', 'vivo X6Plus D', 'vivo X6Plus A', 'vivo X6Plus D', 'vivo X6Plus L', 'V2046A', 'V2059A', 'V2046A', 'V2045', 'V2046', 'V2047A', 'V2056A', 'V2085A', 'vivo X6S A', 'vivo X6S A', 'vivo X6S A', 'vivo X6S A', 'vivo X6SPlus D', 'vivo X6SPlus D', 'vivo X6SPlus D', 'vivo X6SPlus D', 'vivo X6SPlus A', 'vivo X7L', 'vivo X7Plus', 'vivo X7Plus', 'V2133A', 'V2104', 'V2104', 'V2105', 'V2134A', 'V2105', 'V2145A', 'V2114', 'V2145A', 'vivo X710F', 'vivo X710F', 'vivo X710F', 'vivo X710F', 'V2144', 'V2183A', 'V2144', 'V2208', 'V2185A', 'V2145', 'V2185A', 'Vivo X83', 'vivo X9', 'vivo X9L', 'vivo X9', 'vivo X9', 'vivo X9Plus', 'vivo X9Plus L', 'V2241A', 'V2242A', 'V2242A', 'V2227A', 'vivo X9i', 'vivo X9i', 'vivo X9i', 'vivo X9s', 'vivo X9s L', 'vivo X9s Plus', 'vivo X9s Plus', 'vivo X9s Plus L', 'vivo X9s Plus', 'VIVO XL', 'vivo Xplay', 'vivo Xshot', 'vivo Xshot', 'vivo Xshot', 'vivo Xshot', 'V2203', 'V2221', 'Vivo y1', 'Vivo Y1', 'V2168A', 'V2168A', 'vivo 1906', 'V2028', 'vivo Y11t', 'vivo Y11t', 'vivo Y11t', 'vivo 1904', 'V2163A', 'V2102', 'V2102', 'vivo 2007', 'vivo 2007', 'Vivo Y12I Pro', 'V2026', 'V2042', 'V2033', 'V2039', 'V2069', 'V2026_21', 'vivo Y13L', 'vivo Y13', 'vivo Y13L', 'vivo Y13L', 'vivo Y13i', 'vivo_Y13i', 'vivo Y13iL', 'vivo Y13iL', 'vivo Y13T', 'vivo Y13T', 'vivo 1901', 'vivo Y15T', 'vivo Y15T', 'V2134', 'V2147', 'V2147', 'V2212', 'V2120', 'V2204', 'V2214', 'V2204', 'vivo 1902', 'vivo 1902_19', 'VIVO 1902', 'vivo Y17T', 'vivo Y17T', 'vivo_Y17T', 'vivo Y17T', 'vivo Y17W', 'vivo Y17W', 'vivo Y17W', 'vivo Y18L', 'vivo Y18L', 'vivo Y18L', 'vivo 1915', 'vivo Y19t', 'vivo Y19t', 'vivo Y19t', 'vivo Y19t', 'Vivo Y1i', 'vivo 2015', 'vivo 2015', 'V2029', 'V2027', 'V2043_21', 'V2101', 'V2070', 'V2054', 'V2052', 'V2037', 'V2032', 'V2038', 'V2038', 'V2129', 'V2129', 'V2111', 'V2149', 'V2140', 'V2140', 'V2152', 'V2152', 'V2110', 'V2110', 'V2131', 'V2135', 'V2207', 'vivo Y22iL', 'vivo Y22iL', 'V2206', 'V2206', 'vivo Y23L', 'vivo Y23L', 'vivo y23l', 'vivo Y23L', 'vivo Y23L', 'vivo Y23L', 'vivo 1613', 'vivo Y27', 'vivo Y27L', 'vivo Y27', 'vivo Y28', 'vivo Y28', 'vivo Y28L', 'vivo Y28L', 'vivo Y29L', 'vivo Y29L', 'vivo Y29L', 'V1901A', 'V1901A', 'V1901A', 'V1901T', 'V1930A', 'vivo 1938', 'V2034A', 'V2036A', 'V2099A', 'V2099A', 'V2160', 'V2160', 'V2160', 'V2066BA', 'V2066A', 'Y30g', 'Vivo Y30S', 'vivo Y31L', 'V2068', 'V2054A', 'V2068A', 'V2068', 'V2158A', 'Vivo Y32', 'V2180A', 'V2057', 'V2109', 'V2166A', 'V2166A', 'V2146', 'V2205', 'V2205', 'vivo Y37A', 'vivo Y37', 'V2044', 'vivo Y3t', 'vivo Y3t', 'vivo Y3t', 'vivo y41', 'vivo Y5 ', 'Vivo Y5', 'vivo 1935', 'VIVO Y50(2021)', 'V2023EA', 'Y50t', 'V2035', 'vivo Y51L', 'vivo Y51A', 'V2030', 'vivo 1707', 'V2031_21', 'vivo Y51t L', 'vivo Y51t L', 'vivo Y51t L', 'V2053', 'V2057A', 'vivo Y53', 'vivo 1606A', 'vivo Y53n', 'V2058', 'V2123A', 'V2069A', 'V2045A', 'V2045A', 'vivo Y55A', 'V2127', 'V2127', 'vivo 1603', 'vivo Y55n', 'vivo 1610', 'V2164A', 'V2164A', 'V1934A', 'V2006', 'vivo Y613', 'vivo Y613', 'vivo Y613F', 'vivo Y622', 'vivo Y622', 'vivo Y622', 'vivo Y622', 'vivo Y622', 'vivo Y623', 'vivo Y623', 'vivo Y627', 'vivo Y627', 'vivo Y627', 'vivo Y627', 'vivo Y628', 'vivo Y628', 'vivo 1719', 'vivo Y66', 'vivo Y66L', 'vivo Y66i A', 'vivo Y67', 'vivo Y67A', 'vivo Y67L', 'vivo Y685', 'vivo 1714', 'vivo Y69A', 'V2002A', 'V2002A', 'vivo Y71A', 'vivo 1724', 'vivo Y71A', 'vivo 1801', 'V2041', 'V2060', 'V2102A', 'V1731CA', 'vivo Y73', 'Vivo Y73 /MMB239M', 'V2059', 'V2031A', 'V2164PA', 'V2117', 'vivo Y75A', 'V2142', 'V2142', 'vivo Y75s', 'vivo Y75s', 'vivo Y75S', 'vivo Y75s', 'V2124', 'V2156A', 'V2219A', 'V2219A', 'V2169', 'V2169', 'V1913A', 'vivo 1808i', 'vivo 1803', 'vivo 1803', 'vivo 1812', 'vivo Y81S', 'V1732A', 'V1732T', 'vivo Y83A', 'vivo 1802', 'vivo Y83A', 'vivo Y83A', 'vivo 1726', 'Vivo Y83I', 'vivo Y85A', 'vivo Y85', 'Vivo Y85i', 'Vivo Y86', 'V1730EA', 'vivo v1730ea', 'vivo 1908', 'vivo 1823', 'vivo 1908_19', 'vivo 1817', 'vivo 1811', 'vivo Y913', 'vivo Y913', 'vivo Y91C', 'vivo 1820', 'vivo 1816', 'vivo Y923', 'vivo Y923', 'vivo Y927', 'vivo Y927', 'vivo Y928', 'vivo Y928', 'vivo Y928', 'vivo 1814', 'V1818A', 'V1818A', 'vivo 1814', 'vivo Y937', 'vivo Y937', 'vivo Y937', 'V1818CT', 'V1818CA', 'vivo 1807', 'vivo Y95', 'V1813A', 'V1813T', 'V1813A', 'vivo Y97', 'V1945A', 'V1801A0', 'vivo Z1', 'vivo 1918', 'vivo 1951', 'vivo 1951', 'VIVO Z1Pro', 'vivo 1918', 'vivo 1918 Flow', 'Vivo Z10', 'vivo Z1i', 'V1730DA', 'V1730DT', 'vivo Z1i', 'vivo_1951', 'vivo 1917', 'V1813BA', 'V1813BT', 'V1813BT', 'Vivo Z34', 'vivo Z3x', 'V1730GA', 'vivo Z3x', 'vivo Z3x', 'V1921A', 'V1911A', 'V1911A', 'V1911A', 'V1990A', 'V1990A', 'V1963A', 'V1963A']
        self.infinix = [""Infinix X652B"", ""Infinix X680"", ""Infinix X690"", ""Infinix X625B"", ""Infinix X655"", ""Infinix X680B"", ""Infinix X652B"", ""Infinix X680"", ""Infinix X690"", ""Infinix X625B"", ""Infinix X655"", ""Infinix X680B"", ""Infinix X652B"", ""Infinix X680"", ""Infinix X690"", ""Infinix X625B"", ""Infinix X655"", ""Infinix X680B"", ""Infinix X652B"", ""Infinix X680"", ""Infinix X690"", ""Infinix X625B"", ""Infinix X655"", ""Infinix X680B"", ""Infinix X652B"", ""Infinix X680"", ""Infinix X690"", ""Infinix X625B"", ""Infinix X655"", ""Infinix X680B""]
        self.opp = random.choice([""OP4F97"", ""OP4BA5L1"", ""OP664D1"", ""OP5F11L1"", ""OP2A92"", ""OP8F17"", ""OP8F31"", ""OP4C9E1"", ""OP5B31"", ""OP4BA6L1"", ""OP2B87"", ""OP6F21"", ""OP6C8E1"", ""OP8F11"", ""OPPOA16"", ""OPPOA15"", ""OPPOA11"", ""OPPOA73"", ""OPPOA37"", ""OPPOA53"", ""OPPOA33"", ""OPPOA93"", ""OPPOA35"", ""OPPOA83"", ""OPPOA57"", ""OPPOA71"", ""OPPOA39"", ""OPPOA3"", ""OPPOA51"", ""OPPOA27"", ""OPPOA79""])
        self.trek = random.choice([""mt6769"", ""mt6768"", ""mt6767"", ""mt6765"", ""mt6763"", ""mt6757"", ""mt6755"", ""mt6753"", ""mt6739"", ""mt6737"", ""mt6735"", ""mt6595"", ""mt6582"", ""mt6572"", ""mt6571"", ""mt6570"", ""mt8563"", ""mt8167"", ""mt8163"", ""mt8135"", ""mt8127"", ""mt8125"", ""mt7623"", ""mt6797"", ""mt6592"", ""mt6590"", ""mt6580"", ""mt6573"", ""mt6575"", ""mt6260"", ""mt6236""])
        self.igversi = (""100.0.0.17.129,100.0.0.17.129,100.0.0.17.129,100.0.0.17.129,100.0.0.17.129,100.0.0.17.129,79.0.0.21.101,78.0.0.11.104,77.0.0.20.113,76.0.0.15.395,75.0.0.23.99,74.0.0.21.99,73.0.0.22.185,72.0.0.21.98,71.0.0.18.102,70.0.0.22.98,69.0.0.30.95,68.0.0.11.99,67.0.0.25.100,66.0.0.11.101,65.0.0.12.86,64.0.0.14.96,63.0.0.17.94,62.0.0.19.93,61.0.0.19.86,60.1.0.17.79,59.0.0.23.76,58.0.0.12.73,57.0.0.9.80,56.0.0.13.78,55.0.0.12.79,54.0.0.14.82,53.0.0.13.84,52.0.0.8.83,51.0.0.20.85,50.1.0.43.119,271.1.0.21.84,131.0.0.23.11,130.0.0.31.12,128.0.0.26.12,126.0.0.25.12,125.0.0.20.12,124.0.0.17.47,123.0.0.21.11,122.0.0.29.23,120.0.0.29.11,119.0.0.33.14,118.0.0.28.12,117.0.0.28.12,115.0.0.26.11,114.0.0.38.12,113.0.0.39.12,112.0.0.29.12,111.1.0.25.15,110.0.0.16.11,109.0.0.18.12,108.0.0.23.11,107.0.0.27.12,106.0.0.24.11,105.0.0.18.11,104.0.0.21.11,103.1.0.15.11,102.0.0.20.11,101.0.0.15.12,100.0.0.17.12,99.0.0.32.182,98.0.0.15.119,97.0.0.32.119"").split(',')
        self.dix = random.choice(self.igversi)
        self.kode = random.choice(['104766893','104766900','102221278','104766888','105842053','93117670','94080607','96794592','102221279','100986894','ru_RU','94080606','103516660','98288242','103516666','103516653','uk_UA','96794590','100986893','102221277','95414344','99640920','99640911','96794591','ru_UA','99640905','100986890','107092313','99640900','93117667','100521966','90841939','98288239','89867440','105842051','de_DE','96794584','105842050','en_US','pt_PT','109556223','107092318','en_GB','108357722','112021130','107092322','119104798','108357720','119104802','112021131','100986892','113249569','107104231','fr_FR','pt_BR','109556226','116756948','113249553','113249561','110937441','118342010','120662545','117539703','119875222','110937448','121451799','115994877','108357718','120662547','107608058','122206624','95414346','107092308','112021128','90841948','119875229','117539698','120662550','en_NZ','123103748','91882538','121451810','91882537','118342006','113948109','122338251','110937453','es_US','118342005','121451793','109556219','119875225','en_CA','109556220','117539695','115211358','91882539','119104795','89867442','94080603','164094539','175574628','185203690','188791648','188791674','187682694','188791643','177770724','192992577','180322810','195435560','196643820','196643821','188791637','192992576','196643799','196643801','196643803','195435546','194383411','197825254','197825260','197825079','171727793','197825112','197825012','197825234','179155086','192992563','197825268','166149669','192992565','198036424','197825223','183982969','199325909','199325886','199325890','199325911','197825118','127049003','197825169','197825216','197825127','200395960','179155096','199325907','200396014','188791669','197825133','170693926','200396005','171727780','201577064','201576758','201577192','201775949','201576944','201775970','143631574','126223520','201775951','167338518','144612598','170693940','201775813','200395971','201775744','201775946','202766609','145652094','202766591','202766602','203083142','179155088','202766608','199325884','180322802','202766603','195435547','165030894','201576967','201775904','194383424','197347903','202766610','185203693','201576898','204019468','187682682','204019456','201775901','204019471','204019454','204019458','202766601','204019452','173238721','204019466','148324036','202766581','158441904','201576903','205280538','205280529','201576813','173238729','141753096','205280531','163022072','201576887','163022088','141753091','148324051','205280528','154400383','205280537','201576818','157405371','205858383','201576811','165031093','187682684','145652090','206670917','185203686','192992561','183982986','206670927','150338061','183982962','127049016','175574603','155374054','205858247','135374896','206670920','169474958','206670926','160497905','161478672','192992578','206670929','131223243','206670916','142841919','187682681','171727795','151414277','206670922','160497915','207505137','165030898','208061741','208061688','208180365','208061674','197825052','147375133','208061744','196643798','208061725','122338247','157536430','208061728','209143963','208727155','209143726','205280539','209143903','209143970','181496409','208061739','209143957','210180522','210180512','209143881','209143712','180322805','210180521','195435561','210370119','210180523','210180493','175574596','210180510','210180480','210180513','210180517','176649504','177770663','210180479','211114117','210908379','206670921','211114134','183982943','211399345','211399342','211399332','201775962','211574187','211574249','210180519','167338559','185203649','124583960','211399337','211399335','197825163','166149717','211399336','212063371','211399329','209143954','210180482','168361634','212214017','209143867','211399341','211399340','212214027','195435510','122338243','139237670','152367502','212676872','212676898','212676875','212676895','212676901','209823384','212676869','196643822','212676878','213367980','213368005','212676886','213558743','209143913','212214039','158441917','174081672','213558750','201775966','188791681','185203705','143631575','161478664','214245350','161478663','212676881','213558770','214245346','138226752','214245221','214245182','214245206','214245218','214245354','214245295','214245199','214245304','214245280','214446313','214245187','214245288','214139002','202766605','214245319','214646783','158441914','215246048','195435544','208061677','215464400','128676146','215464389','215464385','215464390','215464398','182747397','215464393','216233197','201775791','216817344','215464395','216817286','185203642','164094529','216817305','215464401','162439029','215464382','216817280','216817331','214330969','216817299','216817357','217948981','217948980','217948956','217948959','217948968','216817296','217948952','217948982','216817269','219308759','219308726','182747387','219308721','219308754','219308763','176649435','183982982','219909486','127049038','219308730','221134012','221134032','221134009','221134037','194383426','221134029','221134005','221134018','145652093','225283632','165031108','225283625','224652582','139906580','225283628','225283624','226142579','225283634','225283631','226493211','225283623','185203672','156514151','218793478','225283621','227299063','225283627','227299064','227299021','227299027','227544546','227299041','227299060','227299012','228970707','228970705','227299005','228970687','228970683','228970694','228970710','228970689','160497904','195435540','129611419','229783842','230291708','228970681','148324047','230877709','231192211','230877674','230877705','230877678','211399328','209143896','230877713','194383428','230877689','221134002','231457747','208061721','230877671','230877668','232868027','232088496','185203706','232868005','232867964','232868001','232868015','232868031','232867959','232868009','164094526','232867941','234041364','182747399','232868024','232867949','234847239','234847238','234847234','162439040','234847229','234847230','181496427','234847240','232867993','195435558','232867967','232867997','234847227','235871830','221133998','236572344','236572377','153386780','236572337','236572349','236572372','234847226','236572383','237507050','238093993','238093948','238093954','238093999','238093982','239490565','239490555','238093946','238093966','239490563','239490550','239974660','240726416','239490568','240726484','240726452','239490551','239490548','240726426','240726476','240726491','240726471','241043882','241114613','236572331','241267273','240726407','241456456','241267278','241267269','241114619','241456445','241456451','242168941','242168928','242168931','242168939','242168925','240726436','242375239','144722090','242168935','242290370','157405369','242168933','242290355','242703240','242807362','242168923','242168943','242991209','243646252','243646269','242991200','243711120','243646267','243711093','243975802','243646263','243646248','243646255','244167578','128676156','194383413','243975835','244390417','244390338','245196084','245196061','240726392','245196055','243646273','245196082','245196063','245196070','245666450','245466705','245870319','245870301','245870347','245196087','246889064','246889072','246889073','246889074','246889065','247146500','246889063','245870262','247370962','247146481','246889068','246889062','247541884','247541831','247370955','247370942','247720736','247720751','248310216','248310220','248310208','247720744','248399342','248310210','247720747','248310206','248717751','248310212','248310221','248823392','248583561','248310205','248899028','248955251','248955247','249178904','248955244','249507608','249507582','249507588','249507585','248955240','249507607','249507592','249810008','249966137','249507610','249966081','249966100','249507599','249966140','249810004','123790722','250188776','249628096','250188788','250742103','250742113','250742102','250877984','250742105','250742111','251048681','250742107','250742115','251048695','251304696','251304682','251524431','251530710','251304689','251524420','251524409','251524390','250742101','251048673','252055918','252055945','251920416','252055944','252055925','252239038','252055936','252055915','252055948','252390568','252390583','252580134','252740497','252740485','252740490','253120615','253325372','253325384','253325385','253447816','253146263','253120607','253325374','253120598','253325371','253447808','253447809','253325378','253447814','253447807','253447811','253447817','253447813','181496411','253447806','255191971','255013798','255777478','255777471','255777474','255777472','255959637','255777477','255959614','255959635','256099199','256099204','150338064','256099153','256099205','256099156','255983744','256107300','255777470','126223536','256203326','256099190','256099151','256324061','256324047','256203339','256966628','256966589','256966626','256966590','124584015','257456576','256966593','257456590','256966629','256966587','256966592','257456586','257456539','259829115','259829104','259829113','260037038','259829105','259829109','260037030','260149625','259829103','260149621','260465044','259829116','260724710','179155058','261079769','261079761','261079768','261079762','261079771','261276939','157405370','135374885','261079765','261393056','261393062','261079760','181496406','182747360','261504698','261690888','261504706','169474957','262218766','262290715','262290774','262372432','262372425','262372431','262886993','262886995','262372426','262886987','261079764','262886986','262886988','262886990','262372433','262886996','263652962','264009049','264009019','264009030','264009021','264009023','264009052','264009024','261763534','174081651','169474965','232867942','264009013','255959606','264009028','267397344','267397322','267925737','267397343','267925708','267397327','267397321','267925714','267258517','267925705','268773287','267925733','268773233','267925702','268773286','159526770','268773239','268773272','269790795','269285030','269790805','269790803','269790792','268773227','269849047','270426177','270426174','271182277','269790789','271182270','268773290','271182266','271182276','269790798','271182279','271182265','271182267','269790807','271823819','272382110','272382111','272382106','272693584','272382095','272382093','272382098','272382100','272382103','273728833','273371577','273728832','273728798','273907093','273907111','273907108','238093987','273907112','273907103','274774869','274774891','274774908','273907087','274774904','274774875','274774914','275292626','276027938','276028040','276027963','276028037','276028020','276028017','274774862','276028013','249507580','276028029','273907098','277249238','277249248','277249249','276028033','277249250','277249226','275292623','277249214','277249242','277249237','277249240','278625447','278002558','278625420','278625431','278625423','117539687','278625416','278625444','277249213','278625451','279469964','279996068','279996060','279996067','279996058','280194220','279996065','279996063','279996061','279996059','280894196','273728787','271182262','281579032','281579023','276514494','281579021','281579027','281579033','268773274','283072590','281579025','283072571','282619332','283489774','283072587','283072567','281579031','283072580','283072574','284459213','284459224','179155089','256966583','284459214','283072585','284459218','284459223','284459225','285338607','275113919','284459221','284459212','284459215','285855793','285855800','285855803','285855791','285855802','285855804','285855795','286809973','287420974','287421023','287420968','287420979','287421017','287421005','287421019','287421012','277249241','288682406','287421026','288682405','288682397','288682407','261079772','288682398','288682401','288205409','289692198','287420997','289692186'])
        self.dpi_pxl = random.choice(['240dpi; 1760x792', '240dpi; 1920x864', '320dpi; 2400x1080', '400dpi; 3200x1440', '480dpi; 1080x1920', '320dpi; 900x1600', '320dpi; 720x1280', '240dpi; 540x960', '280dpi; 1920x1080', '240dpi; 160x900', '240dpi; 1280x720', '160dpi; 960x540','160dpi; 623x1280'])
        self.dpi = random.choice(['320dpi','640dpi','213dpi','480dpi','420dpi','240dpi','280dpi','160dpi','560dpi','540dpi','272dpi','360dpi','720dpi','270dpi','450dpi','600dpi','279dpi','210dpi','180dpi','510dpi','300dpi','454dpi','314dpi','288dpi','401dpi','153dpi','267dpi','345dpi','493dpi','340dpi','604dpi','465dpi','680dpi','256dpi','290dpi','432dpi','273dpi','120dpi','200dpi','367dpi','419dpi','306dpi','303dpi','411dpi','195dpi','518dpi','230dpi','384dpi','315dpi','293dpi','274dpi','235dpi'])
        self.pxl = random.choice(['720x1280','1440x2560','1440x2768','1280x720','1280x800','1080x1920','540x960','1080x2076','1080x2094','1080x2220','480x800','768x1024','1440x2792','1200x1920','720x1384','1920x1080','720x1369','800x1280','720x1440','1080x2058','600x1024','720x1396','2792x1440','1920x1200','2560x1440','1536x2048','720x1382','1080x2113','1080x2198','1080x2131','720x1423','1080x2069','720x1481','1080x2047','1080x2110','1080x2181','1080x2209','1080x2180','1080x2020','1080x2095','1440x2723','1080x2175','720x1365','1440x2699','1080x2218','2699x1440','1440x2907','1080x2257','720x1370','1080x2042','720x1372','1080x2200','1080x2186','720x1361','1080x2024','1080x2006','720x1402','1440x2831','720x1454','1080x2064','1440x2933','720x1411','720x1450','1440x2730','1080x2046','2094x1080','540x888','1440x2759','1080x2274','1080x2178','1440x2706','720x1356','720x1466','1440x2900','2560x1600','1080x2038','1600x2452','1080x2129','720x1422','720x1381','1080x2183','1080x2285','800x1216','1080x2216','1080x2168','1080x2119','1080x2128','1080x2273','2274x1080','1080x2162','1080x2164','2076x1080','1024x768','1080x2173','1440x2845','1080x2134','720x1379','1440x2838','1080x2139','2131x1080','1440x2744','1080x2192','720x1406','1440x2960','1080x2029','2042x1080','1080x2212','1406x720','1080x2288','2047x1080','1080x2051','720x1398','1280x736','1382x720','720x1353','1080x2050','1080x2028','1080x2256','2711x1440','2175x1080','1080x2281','2560x1492','1440x2923','1200x1845','1080x2189','1080x2002','1440x2711','2110x1080','960x540','1080x2033','2200x1080','720x1452','720x1480','1440x2735','720x1472','1080x2277','1080x2169','2874x1440','1600x2560','1080x2151','2218x1080','1080x2182','720x1468','1440x2898','1080x2011','1080x2201','720x1380','1080x2287','2069x1080','1200x1836','2046x1080','720x1439','2058x1080','2182x1080','720x1399','1080x2282','1440x2721','1080x2324','720x1432','1080x2165','1080x2150','1080x2156','1080x1872','1440x3048','1532x2560','720x1355','720x1390','720x1476','720x1410','1080x2032','720x1437','1440x2682','1440x2921','1080x2270','1080x2160','720x1446','1200x1848','1440x2874','1080x2309','1080x2174','1440x2867','1080x2060','1080x2196','1080x2401','1536x1922','1080x2280','1080x2123','720x1435','1440x2927','1080x2276','720x1448','720x1469','720x1344','1080x2187','540x937','1440x3028','1080x2184','1440x2718','1080x2326','840x1834','1440x2935','1440x2880','1440x2892','2048x2048','1080x2195','1080x2322','720x1419','987x1450','1080x2092','1440x3047','720x1358','1080x2136','720x1357','1080x2093','720x1477','1080x2312','1080x2361','720x1341','720x1507','1080x2172','720x1337','1080x2177','1080x2125','1440x2891','1600x2434','720x1394','1080x2159','720x1387','1080x2166','1080x2154','1080x2147','1440x2747','1080x2105','1440x2911','720x1473','1080x2055','1080x2265','720x1436','1080x2190','1600x2526','720x1373','720x1415','1080x2249','1080x2254','720x1455','1440x3040','1080x2149','720x1385','1440x3036','1080x2111','1440x2904','720x1442','720x1377','1080x2307','1080x2327','1080x2141','1080x2025','720x1430','720x1375','1080x2283','1440x2779','1080x2321','1080x2268','1440x2758','1752x2698','1080x2267','1200x1856','1440x2756','720x1464','1080x2234','1080x2171','1080x2155','720x1463','1080x2122','720x1467','1080x2264','720x1349','1440x2999','720x1458','1080x2015','720x1431','1242x2208','1080x2185','1080x2148','1080x2163','1440x2780','720x1445','1080x2146','1200x1916','720x1502','1200x1928','720x1506','720x1424','720x1465','720x1420','1080x2176','720x1521','1080x2315','1080x2400','720x1471','1080x2157','1600x2458','1080x2067','1080x2191','1080x2271','720x1407','800x1208','1080x2087','1080x2199','578x1028','720x1485','540x879','1080x2179','720x1555','810x1598','720x1378','1200x1897','720x1395','720x1459','900x1600','1080x2275','1440x2733'])
        self.samsung = [""SM-A205F"",""SM-J120H"",""SM-J120F"",""SM-J120M"",""SM-J111M"",""SM-J111F"",""SM-J110H"",""SM-J110G"",""SM-J110F"",""SM-J110M"",""SM-J105H"",""SM-J105Y"",""SM-J105B"",""SM-J106H"",""SM-J106F"",""SM-J106B"",""SM-J106M"",""SM-J200F"",""SM-J200M"",""SM-J200G"",""SM-J200H"",""SM-J200F"",""SM-J200GU"",""SM-J260M"",""SM-J260F"",""SM-J260MU"",""SM-J260F"",""SM-J260G"",""SM-J200BT"",""SM-G532G"",""SM-G532M"",""SM-G532MT""]
        self.cgsm = [""dream2qltesq"", ""beyond2q"", ""broadway"", ""dreamqltevzw"", ""b2q"", ""a7y18lte"", ""a50qlteue"", ""a42xqlte"", ""a7y18lte"", ""a40lte"", ""a6plte"", ""a52xqlteue"", ""a5y20qlteue"", ""a3xelte"", ""a42xqlteue"", ""a3xelte"", ""a41lte"", ""a72xlte"", ""dreamlte"", ""hero2qltevzw"", ""beyond0lte"", ""beyond2"", ""starlte"", ""a5y17lte"", ""a7xelte"", ""a71xqlteue"", ""dream2qlteue"", ""dreamqltespr"", ""a5y17lte"", ""beyond1qlteue"",""herolte"",""zerolte"",""hero2te""]
        self.realme = [""RMX3516"", ""RMX3371"", ""RMX3461"", ""RMX3286"", ""RMX3561"", ""RMX3388"", ""RMX3311"", ""RMX3142"", ""RMX2071"", ""RMX1805"", ""RMX1809"", ""RMX1801"", ""RMX1807"", ""RMX1803"", ""RMX1825"", ""RMX1821"", ""RMX1822"", ""RMX1833"", ""RMX1851"", ""RMX1853"", ""RMX1827"", ""RMX1911"", ""RMX1919"", ""RMX1927"", ""RMX1971"", ""RMX1973"", ""RMX2030"", ""RMX2032"", ""RMX1925"", ""RMX1929"", ""RMX2001"", ""RMX2061"", ""RMX2063"", ""RMX2040"", ""RMX2042"", ""RMX2002"", ""RMX2151"", ""RMX2163"", ""RMX2155"", ""RMX2170"", ""RMX2103"", ""RMX3085"", ""RMX3241"", ""RMX3081"", ""RMX3151"", ""RMX3381"", ""RMX3521"", ""RMX3474"", ""RMX3471"", ""RMX3472"", ""RMX3392"", ""RMX3393"", ""RMX3491"", ""RMX1811"", ""RMX2185"", ""RMX3231"", ""RMX2189"", ""RMX2180"", ""RMX2195"", ""RMX2101"", ""RMX1941"", ""RMX1945"", ""RMX3063"", ""RMX3061"", ""RMX3201"", ""RMX3203"", ""RMX3261"", ""RMX3263"", ""RMX3193"", ""RMX3191"", ""RMX3195"", ""RMX3197"", ""RMX3265"", ""RMX3268"", ""RMX3269"",""RMX2027"", ""RMX2020"", ""RMX2021"", ""RMX3581"", ""RMX3501"", ""RMX3503"", ""RMX3511"", ""RMX3310"", ""RMX3312"", ""RMX3551"", ""RMX3301"", ""RMX3300"", ""RMX2202"", ""RMX3363"", ""RMX3360"", ""RMX3366"", ""RMX3361"", ""RMX3031"", ""RMX3370"", ""RMX3357"", ""RMX3560"", ""RMX3562"", ""RMX3350"", ""RMX2193"", ""RMX2161"", ""RMX2050"", ""RMX2156"", ""RMX3242"", ""RMX3171"", ""RMX3430"", ""RMX3235"", ""RMX3506"", ""RMX2117"", ""RMX2173"", ""RMX3161"", ""RMX2205"", ""RMX3462"", ""RMX3478"", ""RMX3372"", ""RMX3574"", ""RMX1831"", ""RMX3121"", ""RMX3122"", ""RMX3125"", ""RMX3043"", ""RMX3042"", ""RMX3041"", ""RMX3092"", ""RMX3093"", ""RMX3571"", ""RMX3475"", ""RMX2200"", ""RMX2201"", ""RMX2111"", ""RMX2112"", ""RMX1901"", ""RMX1903"", ""RMX1992"", ""RMX1993"", ""RMX1991"", ""RMX1931"", ""RMX2142"", ""RMX2081"", ""RMX2085"", ""RMX2083"", ""RMX2086"", ""RMX2144"", ""RMX2051"", ""RMX2025"", ""RMX2075"", ""RMX2076"", ""RMX2072"", ""RMX2052"", ""RMX2176"", ""RMX2121"", ""RMX3115"", ""RMX1921""]
        self.xiaomi = [""2201116SI"", ""M2012K11AI"", ""22011119TI"", ""21091116UI"", ""M2102K1AC"", ""M2012K11I"", ""22041219I"", ""22041216I"", ""2203121C"", ""2106118C"", ""2201123G"", ""2203129G"", ""2201122G"", ""2201122C"", ""2206122SC"", ""22081212C"", ""2112123AG"", ""2112123AC"", ""2109119BC"", ""M2002J9G"", ""M2007J1SC"", ""M2007J17I"", ""M2102J2SC"", ""M2007J3SY"", ""M2007J17G"", ""M2007J3SG"", ""M2011K2G"", ""M2101K9AG "", ""M2101K9R"", ""2109119DG"", ""M2101K9G"", ""2109119DI"", ""M2012K11G"", ""M2102K1G"", ""21081111RG"", ""2107113SG"", ""21051182G"", ""M2105K81AC"", ""M2105K81C"", ""21061119DG"", ""21121119SG"", ""22011119UY"", ""21061119AG"", ""21061119AL"", ""22041219NY"", ""22041219G"", ""21061119BI"", ""220233L2G"", ""220233L2I"", ""220333QNY"", ""220333QAG"", ""M2004J7AC"", ""M2004J7BC"", ""M2004J19C"", ""M2006C3MII"", ""M2010J19SI"", ""M2006C3LG"", ""M2006C3LVG"", ""M2006C3MG"", ""M2006C3MT"", ""M2006C3MNG"", ""M2006C3LII"", ""M2010J19SL"", ""M2010J19SG"", ""M2010J19SY"", ""M2012K11AC"", ""M2012K10C"", ""M2012K11C"", ""22021211RC""]
        self.bsh = 'in_ID'
        self.dvc = random.choice([""30/11"",""31/12"",""29/10""])
        return(random.choice([
             f'Instagram {self.dix} Android ({self.dvc}; 604dpi; 1080x2283; INFINIX MOBILITY LIMITED/Infinix; {str(random.choice(self.infinix))}; qcom; {self.bsh}; 255777478)',
             f'Instagram {self.dix} Android ({self.dvc}; 604dpi; 1080x2283; REALME MOBILITY LIMITED/Realme; {str(random.choice(self.realme))}; qcom; {self.bsh}; 255777478)',
             f'Instagram {self.dix} Android ({self.dvc}; 604dpi; 1080x2283; XIAOMI MOBILITY LIMITED/Xiaomi; {str(random.choice(self.realme))}; qcom; {self.bsh}; 255777478)',
            f'Instagram {self.dix} Android ({self.dvc}; 604dpi; 1080x2283; NEXUS MOBILITY LIMITED/Nexus; {str(random.choice(self.nexus))}; qcom; {self.bsh}; 255777478)',
            f'Instagram {self.dix} Android ({self.dvc}; 604dpi; 1080x2283; MICROMAX MOBILITY LIMITED/Micromax; {str(random.choice(self.micromax))}; qcom; {self.bsh}; 255777478)',
            f'Instagram {self.dix} Android ({self.dvc}; 604dpi; 1080x2283; ONEPLUS MOBILITY LIMITED/One; {str(random.choice(self.onpls))}; qcom; in_ID; 255777478)',
            f'Instagram {self.dix} Android ({self.dvc}; 604dpi; 1080x2283; OPPO MOBILITY LIMITED/Oppo; {str(random.choice(self.oppo))}; {self.opp}; qcom; {self.bsh}; 255777478)',
            f'Instagram {self.dix} Android ({self.dvc}; 604dpi; 1080x2283; VIVO MOBILITY LIMITED/Vivo; {str(random.choice(self.vivo))}; qcom; {self.bsh}; 255777478)',
           ])
       )
        
    def useragent_api_threads(self):
        self.nexus = ['Galaxy Nexus', 'Nexus 10', 'Nexus 2', 'Nexus 4', 'Nexus 4', 'Nexus 4', 'Nexus 4', 'Nexus 4', 'Nexus 4', 'Nexus 5', 'phone/Nexus 5', 'Nexus 5X', 'Nexus 6', 'Nexus 7', 'Nexus 9', 'Nexus One', 'Nexus One', 'Nexus One', 'Nexus One', 'Nexus One', 'Nexus One', 'Nexus Player', 'Nexus Player', 'Nexus S', 'Nexus S', 'Nexus S 4G', 'nexus S', 'Nexus S', 'Nexus s', 'Nexus S', 'Nexus S', 'Nexus S', 'Nexus S', 'Nexus S']
        self.micromax = ['Micromax 10', 'Micromax 1J', 'Micromax 86519', 'Micromax A064', 'Micromax_A064', 'Micromax A065', 'Micromax_A065', 'Micromax A066', 'Micromax_A066', 'Micromax A067', 'Micromax_A067', 'MICROMAX_A068', 'MICROMAX A068', 'Micromax A068', 'Micromax A069', 'Micromax_A069', 'Micromax A075', 'Micromax A082', 'Micromax_A082', 'Micromax A089', 'Micromax_A089', 'Micromax A091', 'Micromax A092', 'Micromax_A092', 'Micromax A093', 'Micromax_A093', 'Micromax A095', 'Micromax A096', 'Micromax_A101', 'Micromax A102', 'Micromax_A102', 'Micromax A104', 'Micromax a104', 'Micromax A105', 'Micromax_A105', 'Micromax A106', 'Micromax-A106', 'Micromax A108', 'Micromax_A109', 'Micromax A109', 'Micromax A110', 'Micromax_A110', 'Micromax A110Q', 'Micromax_A110Q', 'Micromax A111', 'Micromax A114', 'Micromax A114R', 'Micromax_A114R', 'Micromax A115', 'Micromax_A115', 'Micromax A116', 'Micromax_A116', 'Micromax A116i', 'Micromax_A116i', 'Micromax A117', 'Micromax_A117', 'Micromax A118R', 'Micromax A119', 'Micromax A120', 'Micromax A121', 'Micromax_A121', 'Micromax A15', 'Micromax A177', 'Micromax A190', 'Micromax_A190', 'Micromax A200', 'Micromax_A200', 'Micromax A21', 'Micromax A210', 'Micromax A24', 'Micromax_A24', 'Micromax A25 Smarty', 'Micromax A250', 'Micromax A255', 'Micromax_A255', 'Micromax A26', 'Micromax_A26', 'Micromax_A27', 'Micromax A27', 'Micromax_A28', 'Micromax A28/GRI40', 'Micromax A28', 'Micromax A290', 'Micromax A30', 'Micromax A300', 'Micromax A310', 'Micromax A311', 'Micromax A315', 'Micromax_A315', 'Micromax_A316', 'Micromax A316', 'Micromax_A34', 'Micromax A34', 'Micromax_A35', 'Micromax A35', 'Micromax A350', 'Micromax_A36', 'Micromax A36', 'Micromax_A37', 'Micromax A37', 'Micromax A37B', 'Micromax_A37B', 'Micromax A40', 'Micromax_A40', 'Micromax A46', 'Micromax_A46', 'Micromax A47', 'MicromaxA47', 'Micromax_A50', 'Micromax A50', 'Micromax A51', 'Micromax A52', 'Micromax A54', 'Micromax A56', 'Micromax_A57', 'Micromax A57', 'Micromax A58', 'Micromax_A58', 'Micromax A59', 'Micromax A60', 'Micromax A61', 'Micromax A62', 'Micromax_A62', 'Micromax A63', 'Micromax_A63', 'Micromax_A65', 'Micromax A65', 'Micromax_A66', 'Micromax A66', 'Micromax A67', 'Micromax A68', 'Micromax A69', 'Micromax_A69', 'Micromax_A70', 'Micromax A700', 'Micromax A71', 'Micromax_A71', 'Micromax A72', 'Micromax_A72', 'Micromax A73', 'Micromax_A74', 'Micromax A74', 'Micromax A75', 'Micromax_A76', 'Micromax A76', 'Micromax A77', 'Micromax A78', 'Micromax A79', 'en_us Micromax A80', 'Micromax A80', 'Micromax A82', 'Micromax_A82', 'Micromax A84', 'Micromax A85', 'Micromax A86', 'Micromax_A86', 'Micromax_A87', 'Micromax A87', 'Micromax A87 . Ninja 4.0', 'Micromax A88', 'Micromax_A88', 'Micromax A89', 'Micromax A90', 'Micromax A90s', 'MIcromax_A90s', 'Micromax A90S', 'Micromax A91', 'Micromax_A91', 'Micromax_A92', 'Micromax A92', 'MicromaxA93', 'Micromax A93', 'Micromax A94', 'Micromax_A94', 'Micromax A96', 'Micromax_A96', 'Micromax A97', 'Micromax_A99', 'Micromax A99', 'Micromax_AD3520', 'Micromax AD3520', 'Micromax AD3550', 'Micromax AD4500', 'Micromax_AD4500', 'Micromax AE90', 'Micromax AO5510', 'Micromax AQ5000', 'Micromax B4A', 'Micromax B5 Pro', 'B5Pro', 'Micromax_Bharat_5_Plus', 'Micromax Q402Plus', 'Micromax Q440', 'Micromax Bharat 5', 'Micromax Q4204', 'Micromax Bharat 5 Plus', 'Micromax Bharat 5 Pro', 'Micromax Bolt 3425', 'Micromax Bolt 2', 'Micromax Q402+', 'Micromax Q306', 'Micromax Q3001', 'Micromax Q301', 'Micromax Q303', 'Micromax Q324', 'Micromax Q326', 'Q327', 'Micromax Q327', 'Micromax Q3301', 'Micromax Q333', 'Micromax_Q333', 'Micromax Q338', 'Micromax Q346', 'Micromax Q354', 'Micromax Q357', 'Micromax Q383', 'Micromax_S302', 'Micromax S302', 'Micromax Q424', 'Micromax Q352', 'Micromax Q4101', 'Micromax C2A', 'Micromax C9', 'Micromax C1', 'Micromax C1A', 'Micromax C2APLS', 'Micromax Q4310', 'Micromax E4815', 'arm_64 Micromax E481', 'Micromax E481', 'Micromax E4816', 'Micromax Q462', 'Micromax Q463', 'Micromax E485', 'Micromax E484', 'Micromax AQ4501', 'Micromax AQ4502', 'A240', 'Micromax A240', 'Micromax Q391', 'Micromax E453', 'Micromax A107', 'Micromax HS2', 'Micromax HS1', 'Micromax_HS3', 'en Micromax_HS3', 'AQ5001', 'Micromax AQ5001', 'AQ5001 Canvas Power', 'Micromax Q392', 'Micromax Q465', 'Micromax Q461', 'Micromax Q350R', 'Micromax Q421', 'Micromax Q417', 'Micromax Q426', 'Micromax Q4260', 'Micromax E311', 'Micromax E352', 'Micromax E455', 'Micromax Q415', 'Micromax Q355', 'Micromax Q469', 'Micromax E451', 'Micromax E451', 'Micromax Q340', 'Micromax Q349', 'Micromax Q345', 'Micromax Q450', 'Micromax Q480', 'arm_64 Micromax Q480', 'Micromax Q380', 'Micromax Q3502', 'Micromax Q351', 'Micromax Q385', 'P70221', 'Micromax P681', 'MicromaxP802', 'Micromax Q427', 'Micromax_Q427', 'Micromax Q413', 'Micromax E313', 'Micromax D2', 'Micromax D200', 'Micromax_D200', 'Micromax D303', 'Micromax D304', 'Micromax_D304', 'Micromax D305', 'Micromax D306', 'Micromax D320', 'Micromax D321', 'Micromax D333', 'Micromax D340', 'Micromax D7517', 'Micromax DM5003', 'Micromax E353', 'Micromax E457', 'Micromax E458', 'Micromax E460', 'Micromax E471', 'Micromax E4817', 'Micromax E482', 'Micromax E483', 'Micromax E5018M', 'Micromax EG111', 'Micromax EG116', 'micromax F', 'micromax F189', 'Micromax F601', 'MicromaxF666', 'Micromax IN', 'Micromax E7533', 'Micromax E6523', 'IN_2b', 'IN_Note1', 'MICROMAX IN1', 'N8216', 'N8301', 'ione note', 'MICROMAX ione note', 'Micromax N4120', 'Micromax N8202', 'Micromax Ninja', 'Micromax Nitro', 'Micromax Note 1+', 'Micromax Note 5', 'Micromax Note3', 'Micromax NX', 'Micromax P001', 'Micromax P250(Funbook)', 'Micromax P255', 'Micromax P256', 'xx Micromax P275', 'Micromax_P275', 'Micromax P275', 'Micromax P280', 'Micromax P290', 'Micromax P310', 'Micromax P350', 'xx Micromax P350', 'Micromax P360', 'Micromax P362', 'Micromax P365', 'Micromax P410', 'Micromax P410i', 'Micromax_P410i', 'Micromax P420', 'Micromax P469', 'Micromax P470', 'MicromaxP480', 'Micromax P500(Funbook)', 'Micromax P560', 'Micromax P580', 'Micromax P580i', 'Micromax P600', 'Micromax P650', 'Micromax P650E', 'Micromax P660', 'Micromax P660', 'Micromax_P666', 'Micromax P666', 'MicromaxP680', 'Micromax P690', 'Micromax P701', 'MicromaxP702', 'Micromax P810', 'en Micromax Q300', 'Micromax_Q300', 'Micromax Q323', 'Micromax_Q323', 'Micromax Q325', 'Micromax_Q325', 'Micromax Q331', 'Micromax_Q331', 'Micromax Q332', 'Micromax_Q332', 'Micromax Q334', 'Micromax Q335', 'Micromax_Q335', 'Micromax Q336', 'Micromax_Q336', 'Micromax Q341', 'Micromax Q343', 'Micromax Q348', 'Micromax_Q353', 'en Micromax_Q353', 'Micromax_Q353P', 'Micromax Q3551', 'Micromax Q3555', 'Micromax Q361', 'Micromax Q370', 'Micromax_Q370', 'Micromax Q371', 'Micromax_Q371', 'Micromax Q375', 'Micromax_Q375', 'Micromax Q379', 'Micromax Q381', 'Micromax Q382', 'Micromax Q386', 'Micromax Q394', 'Micromax_Q394', 'Micromax Q395', 'Micromax Q397', 'Micromax Q398', 'arm Micromax Q398', 'Micromax Q400', 'Micromax_Q400', 'Micromax Q4002', 'en Micromax Q4002', 'Micromax Q401', 'Micromax Q402', 'Micromax Q402 Ultra', 'Micromax Q404', 'Micromax Q411', 'Micromax_Q411', 'Micromax Q412', 'Micromax Q414', 'Micromax Q416', 'Micromax Q419', 'Micromax Q4201', 'Micromax Q422', 'Micromax Q4220', 'Micromax Q423', 'Micromax Q428', 'Micromax_Q428', 'Micromax Q429', '720X1280 Micromax Q4309', 'Micromax Q4312', 'en_US Micromax Q437', 'Micromax Q440Plus', 'Micromax Q454', 'Micromax Q470', 'Micromax Q479', 'Micromax Q491', 'Micromax_Q491', 'Micromax Q502+', 'Micromax Q666', 'Micromax Q67', 'micromax Q68', 'micromax Q78', 'Micromax S300', 'Micromax_S300', 'Micromax S301', 'Micromax_S301', 'Micromax Q4311', 'Micromax Q4601', 'Micromax Q409A', 'Micromax Q409', 'Micromax Q452', 'Micromax Unite 3', 'Micromax Unite 2', 'Micromax Unite 2 A106', 'Micromax Q372', 'Micromax V89', 'Micromax Q4001', 'Micromax Q4202', 'Micromax Q4251', 'arm Micromax Q4251', 'Micromax W5509', 'Micromax X5098', 'Micromax-Xzoom A52', 'YU5530', 'YU5040', 'Micromax YU5900', 'YU5012', 'Micromax Z59']
        self.onpls = ['NE2213', 'NE2217', 'NE2215', 'NE2210', 'NE2210', 'CPH2423', 'CPH2411', 'CPH2417', 'CPH2413', 'CPH2415', 'CPH2449', 'CPH2487', 'ONE A2003', 'ONE A2003', 'ONE A2001', 'ONE A2005', 'ONEPLUS A3003', 'ONEPLUS A3000', 'ONEPLUS A3010', 'ONEPLUS A5000', 'ONEPLUS A5000', 'ONEPLUS A5010', 'ONEPLUS A5010', 'ONEPLUS A5010', 'ONEPLUS A5010', 'ONEPLUS A5010', 'ONEPLUS A6003', 'ONEPLUS A6000', 'ONEPLUS A6010', 'ONEPLUS A6013', 'ONEPLUS A6010', 'GM1900', 'GM1901', 'GM1903', 'GM1917', 'GM1913', 'GM1911', 'GM1910', 'GM1915', 'GM1910', 'HD1901', 'HD1903', 'HD1900 Flow', 'HD1905', 'HD1900', 'HD1907', 'HD1911', 'HD1913', 'HD1910', 'GM1925', 'HD1925', 'GM1920', 'IN2013', 'IN2015', 'IN2010', 'IN2010', 'IN2017', 'IN2019', 'IN2023', 'IN2025', 'IN2020', 'OnePlus8Pro', 'KB2005', 'KB2001', 'KB2007', 'KB2003', 'KB2000', 'OnePlus 8T 5G', 'LE2115', 'LE2113', 'LE2111', 'LE2110', 'LE2120', 'LE2125', 'LE2123', 'LE2121', 'LE2127', 'OnePlus9Pro', 'LE2101', 'LE2100', 'MT2111', 'MT2110', 'ONEPLUS A19677', 'ONEPLUS A2345', 'Oneplus A31', 'Oneplus A3331', 'ONEPLUS A35904', 'ONEPLUS A37000', 'ONEPLUS A3EVB', 'ONEPLUS A62322', 'ONEPLUS A64794', 'ONEPLUS A65369', 'ONEPLUS A68333', 'ONEPLUS A70458', 'ONEPLUS A70791', 'ONEPLUS A78637', 'ONEPLUS A80828', 'ONEPLUS A83306', 'ONEPLUS A87046', 'ONEPLUS A90641', 'Oneplus A99831', 'PGKM10', 'PGKM10', 'PHK110', 'PHK110', 'PGP110', 'PGP110', 'PGZ110', 'ONEPLUS KB2023', 'OnePlus Nord', 'Oneplus Nord 2', 'DN2103', 'DN2101', 'CPH2399', 'CPH2401', 'AC2001', 'AC2003', 'IV2201', 'CPH2409', 'CPH2381', 'CPH2465', 'EB2103', 'EB2101', 'EB2101', 'BE2025', 'BE2026', 'BE2029', 'Nord N10 5G', 'BE2028', 'BE2013', 'BE2011', 'BE2012', 'CPH2459', 'GN2200', 'CPH2469', 'DE2118', 'DE2117', 'A0001', 'ONE E1001', 'ONE E1003', 'ONE E1001', 'ONE E1005']
        self.oppo = [""CPH1869"", ""CPH1929"",""CPH2107"", ""CPH2238"", ""CPH2389"",""CPH2401"", ""CPH2407"", ""CPH2413"", ""CPH2415"", ""CPH2417"", ""CPH2419"", ""CPH2455"", ""CPH2459"", ""CPH2461"", ""CPH2471"", ""CPH2473"", ""CPH2477"", ""CPH8893"", ""CPH2321"", ""CPH2341"", ""CPH2373"", ""CPH2083"", ""CPH2071"", ""CPH2077"", ""CPH2185"", ""CPH2179"", ""CPH2269"", ""CPH2421"", ""CPH2349"", ""CPH2271"", ""CPH1923"", ""CPH1925"", ""CPH1837"", ""CPH2015"", ""CPH2073"", ""CPH2081"", ""CPH2029"", ""CPH2031"", ""CPH2137"", ""CPH1605"", ""CPH1803"", ""CPH1853"", ""CPH1805"", ""CPH1809"", ""CPH1851"", ""CPH1931"", ""CPH1959"", ""CPH1933"", ""CPH1935"", ""CPH1943"", ""CPH2061"", ""CPH2069"", ""CPH2127"", ""CPH2131"", ""CPH2139"", ""CPH2135"", ""CPH2239"", ""CPH2195"", ""CPH2273"", ""CPH2325"", ""CPH2309"", ""CPH1701"", ""CPH2387"", ""CPH1909"", ""CPH1920"", ""CPH1912"", ""CPH1901"", ""CPH1903"", ""CPH1905"", ""CPH1717"", ""CPH1801"", ""CPH2067"", ""CPH2099"", ""CPH2161"", ""CPH2219"", ""CPH2197"", ""CPH2263"", ""CPH2375"", ""CPH2339"", ""CPH1715"", ""CPH2385"", ""CPH1729"", ""CPH1827"", ""CPH1938"", ""CPH1937"", ""CPH1939"", ""CPH1941"", ""CPH2001"", ""CPH2021"", ""CPH2059"", ""CPH2121"", ""CPH2123"", ""CPH2203"", ""CPH2333"", ""CPH2365"", ""CPH1913"", ""CPH1911"", ""CPH1915"", ""CPH1969"", ""CPH2209"", ""CPH1987"", ""CPH2095"", ""CPH2119"", ""CPH2285"", ""CPH2213"", ""CPH2223"", ""CPH2363"", ""CPH1609"", ""CPH1613"", ""CPH1723"", ""CPH1727"", ""CPH1725"", ""CPH1819"", ""CPH1821"", ""CPH1825"", ""CPH1881"", ""CPH1823"", ""CPH1871"", ""CPH1875"", ""CPH2023"", ""CPH2005"", ""CPH2025"", ""CPH2207"", ""CPH2173"", ""CPH2307"", ""CPH2305"", ""CPH2337"", ""CPH1955"", ""CPH1707"", ""CPH1719"", ""CPH1721"", ""CPH1835"", ""CPH1831"", ""CPH1833"", ""CPH1879"", ""CPH1893"", ""CPH1877"", ""CPH1607"", ""CPH1611"", ""CPH1917"", ""CPH1919"", ""CPH1907"", ""CPH1989"", ""CPH1945"", ""CPH1951"", ""CPH2043"", ""CPH2035"", ""CPH2037"", ""CPH2036"", ""CPH2009"", ""CPH2013"", ""CPH2113"", ""CPH2091"", ""CPH2125"", ""CPH2109"", ""CPH2089"", ""CPH2065"", ""CPH2159"", ""CPH2145"", ""CPH2205"", ""CPH2201"", ""CPH2199"", ""CPH2217"", ""CPH1921"", ""CPH2211"", ""CPH2235"", ""CPH2251"", ""CPH2249"", ""CPH2247"", ""CPH2237"", ""CPH2371"", ""CPH2293"", ""CPH2353"", ""CPH2343"", ""CPH2359"", ""CPH2357"", ""CPH2457"", ""CPH1983"", ""CPH1979""]
        self.vivo = ['vivo 1002T', 'Vivo 1605', 'vivo 1730', 'vivo 1809', 'vivo_1820', 'vivo 1835', 'vivo 1914', 'vivo 2010', 'vivo 2019', 'vivo 2019', 'vivo 2019', 'vivo 2023', 'vivo 2027', 'vivo 3969', 'VIVO 5', 'Vivo 6', 'Vivo 7 Pro', 'Vivo 8', 'Vivo 93K Prime', 'vivo A5 ', 'vivo a54', 'Vivo A54', 'vivo a57', 'Vivo A87', 'VIVO A94', 'VIVO AIR', 'VIVO C8818', 'vivo E1', 'vivo E3', 'vivo E3', 'vivo E5', 'Vivo EGO', 'V1962BA', 'vivo h5', 'V1824A', 'V1824A', 'V1824BA', 'V2217A', 'V2217A', 'V2218A', 'V2218A', 'V2218A', 'V2243A', 'V1955A', 'I1927', 'I1928', 'V2024A', 'V2025A', 'V2025A', 'V2049A', 'V2049A', 'I2009', 'I2012', 'I2012', 'V2136A', 'V2136A', 'V2141A', 'V2171A', 'I2017', 'V2172A', 'V2172A', 'I2022', 'I2019', 'I2019', 'I2201', 'V1914A', 'V1914A', 'V1981A', 'V2055A', 'V2118A', 'V2157A', 'V2157A', 'V2154A', 'V2196A', 'V2196A', 'V2199A', 'V2231A', 'V2238A', 'V1936AL', 'V1936A', 'V1922A', 'V1922A', 'V1922A ', 'V1916A', 'V2023A', 'V2023A', 'VIVO V2023A', 'V2065A', 'V2061A', 'V2061A', 'V2143A', 'V2106A', 'V2165A', 'V2165A', 'V2180GA', 'V1986A', 'V2012A', 'V2012A', 'V2073A', 'V2073A', 'I2011', 'V2148A', 'I2018', 'V1919A', 'V2131A', 'V2220A', 'I2202', 'I2206', 'I2203', 'I2202', 'I2127', 'I2202', 'I2208', 'I2208', 'I2126', 'I2126', 'I2126', 'V2164KA', 'V2164KA', 'VIVO IV', 'VIVO IV', 'VIVO IV', 'VIVO IV', 'Vivo J5', 'vivo 1805', 'vivo 1805', 'vivo NEX', 'V1923A', 'vivo 1912', 'V1923A', 'vivo 1912', 'vivo 1913', 'V1924A', 'V1924A', 'vivo 1913', 'V1950A', 'V1950A', 'vivo NEX A', 'vivo NEX A', 'vivo 1813', 'V1821A', 'V1821A', 'vivo NEX S', 'vivo NEX S', 'Vivo ONE', 'Vivo ONE', 'PA2170', 'vivo PD1628F_EX', 'vivo PD1709', 'vivo PD1709F_EX', 'vivo PD1709F_EX', 'vivo PD1728', 'vivo PD1728', 'vivo PD1832F_EX', 'vivo PD2046F_EX', 'vivo PD2050F_EX', 'vivo PD2055F_EX', 'vivo PD2059F_EX', 'Vivo S', 'V1831A', 'V1831A', 'VIVO S1', 'Vivo S1 Prime', 'V1832A', 'V1832T', 'V2121A', 'V2121A', 'V2130A', 'V2130A', 'Vivo S11', 'Vivo S11 ', 'vivo S11t', 'vivo S11t', 'vivo S11t', 'vivo S11t', 'vivo S12', 'V2162A', 'Vivo S13', 'V2203A', 'V2207A', 'V2190A', 'V2244A', 'vivo S1Pro', 'Vivo S20 ', 'Vivo S21 ', 'Vivo S31', 'Vivo S4', 'Vivo S40', 'Vivo S41 /MMB439M', 'V1932A', 'vivo S6', 'V1962A', 'vivo S6T', 'V2020CA', 'V2020A', 'Vivo S76', 'V2031EA', 'vivo S7i(t)', 'vivo S7i(t)', 'vivo S7i(t)', 'V2080A', 'vivo S7t', 'vivo_S7t', 'vivo S7t', 'S7t 5G', 'vivo S7w', 'vivo S8', 'vivo S9', 'vivo S9', 'vivo S9', 'V2072A', 'V2048A', 'vivo S9t', 'V2168', 'V2168', 'V2153', 'V2153', 'V2150', 'V2151', 'V2151', 'V2151', 'V2143', 'vivo TD1602_EX', 'vivo U1', 'vivo 1916', 'vivo 1916', 'vivo 1921', 'V1941A', 'V1941A', 'V1928A', 'vivo V1', 'vivo V1', 'vivo V10', 'Vivo V10', 'VIVO V11', 'Vivo V11', 'vivo 1804', 'vivo 1804', 'vivo 1806', 'vivo 1806', 'vivo v11pro', 'vivo 1819', 'vivo 1818', 'vivo 1818', 'vivo 1920', 'vivo 1919', 'vivo 1907', 'vivo 1907', 'vivo 1907_19', 'vivo 1910', 'vivo 1909', 'vivo 1910', 'vivo 1933', 'vivo 1933', 'vivo V1907', 'vivo v19neo', 'vivo V1Max', 'vivo V1Max', 'vivo V2', 'V2040', 'vivo 2018', 'vivo 2018', 'V2022', 'Vivo V20A', 'Vivo V20G', 'V2066', 'V2108', 'V2050', 'V2050', 'V2050', 'V2061', 'V2055', 'Vivo V21S', 'V2130', 'V2132A', 'V2116', 'V2115', 'V2116', 'V2116', 'V2126', 'V2126', 'V2228', 'V2228', 'V2158', 'V2158', 'V2202', 'V2202', 'V2201', 'V2246', 'V2230', 'V2230', 'V2237', 'vivo V3', 'vivo V3', 'vivo V3Max A', 'vivo V3Max L', 'vivo v30', 'vivo v31', 'vivo V3L', 'vivo V3L', 'vivo V3L', 'vivo V3L', 'vivo V3M A', 'vivo V3M A', 'vivo V3MA', 'vivo_V3Max', 'vivo v45', 'vivo 1601', 'vivo V5', 'vivo 1609', 'vivo 1611', 'Vivo V51', 'Vivo V54', 'vivo 1612', 'vivo 1713', 'vivo V5S A', 'vivo 1718', 'vivo 1716', 'vivo Y79A', 'vivo Y79A', 'V2166BA', 'Vivo V8', 'vivo 1723', 'vivo V9 mini', 'vivo 1851', 'VIVO V9Pro', 'vivo 1851', 'vivo 1727', 'Vivo X', 'V2178A', 'V2229A', 'V2170A', 'V2170A', 'vivo Xplay3S', 'vivo Xplay3S', 'vivo Xplay3S', 'vivo Xplay5A', 'vivo Xplay5A', 'vivo Xplay5A', 'vivo Xplay5S', 'vivo Xplay5S', 'vivo Xplay6', 'vivo Xplay6L', 'vivo Xplay6', 'vivo Xplay6', 'vivo X710L', 'vivo X710L', 'vivo X710L', 'vivo X710L', 'vivo X1', 'vivo X1', 'vivo X1', 'vivo X1', 'Vivo X11', 'vivo X1S', 'vivo X1S', 'vivo X1S', 'vivo X1St', 'vivo X1St', 'vivo X1St', 'vivo X1St', 'vivo X1St', 'vivo X1W', 'vivo X1w', 'VIVO X2', 'VIVO X2', 'VIVO_X2', 'vivo X20', 'vivo X20A', 'vivo X20Plus A', 'vivo 1720', 'vivo X20Plus UD', 'vivo X20Plus UD', 'vivo X21', 'vivo X21A', 'vivo X21UD A', 'vivo X21i', 'vivo X21i A', 'vivo X21i', 'vivo X21i A ', 'V1814A', 'V1814T', 'V1814T', 'V1814A', 'V1809A', 'V1809A', 'V1816A', 'V1809T', 'V1816T', 'V1829A', 'V1838A', 'V1838T', 'V1829T', 'V1836A', 'V1836A', 'V1836T', 'vivo X27Pro', 'V1938CT', 'V1938T', 'V1938T', 'vivo X3F', 'vivo X3F', 'vivo X3F', 'vivo X3L', 'vivo X3L', 'vivo X3S', 'vivo X3S', 'vivo X3S', 'vivo X3S', 'vivo X3S', 'vivo X3S', 'vivo X3S W', 'vivo X3S W', 'vivo X3S W', 'vivo X3S W', 'vivo X3t', 'vivo X3t', 'vivo X3t', 'vivo X3t', 'vivo X3V', 'vivo X3V', 'vivo X3V', 'vivo X3V', 'Vivo X40', 'vivo X5L', 'vivo X5', 'vivo X5L', 'vivo X5Pro D', 'vivo X5Pro L', 'vivo X5Pro V', 'vivo X5Pro D', 'vivo X5Pro D', 'V2001A', 'V2001A', 'vivo 2004', 'vivo 2005', 'vivo 2005', 'V1937', 'vivo 1937', 'V1937', 'V1937', 'vivo 2006', 'vivo 2006', 'V2005A', 'V2011A', 'X50 Pro+', 'V1930', 'V1930', 'vivo X510t', 'vivo X510t', 'vivo X510t', 'vivo X510t', 'vivo X510t', 'vivo X520L', 'vivo X5F', 'vivo X5M', 'vivo X5M', 'vivo X5M', 'vivo X5Max ', 'vivo X5Max L', 'vivo X5Max L', 'vivo X5Max S', 'vivo X5Max V', 'vivo X5S L', 'vivo X5S L', 'vivo X5V', 'vivo X5V', 'vivo X5V', 'vivo X6D', 'vivo X6A', 'vivo X6Plus D', 'vivo X6Plus A', 'vivo X6Plus L', 'vivo X6Plus D', 'vivo X6Plus A', 'vivo X6Plus D', 'vivo X6Plus L', 'V2046A', 'V2059A', 'V2046A', 'V2045', 'V2046', 'V2047A', 'V2056A', 'V2085A', 'vivo X6S A', 'vivo X6S A', 'vivo X6S A', 'vivo X6S A', 'vivo X6SPlus D', 'vivo X6SPlus D', 'vivo X6SPlus D', 'vivo X6SPlus D', 'vivo X6SPlus A', 'vivo X7L', 'vivo X7Plus', 'vivo X7Plus', 'V2133A', 'V2104', 'V2104', 'V2105', 'V2134A', 'V2105', 'V2145A', 'V2114', 'V2145A', 'vivo X710F', 'vivo X710F', 'vivo X710F', 'vivo X710F', 'V2144', 'V2183A', 'V2144', 'V2208', 'V2185A', 'V2145', 'V2185A', 'Vivo X83', 'vivo X9', 'vivo X9L', 'vivo X9', 'vivo X9', 'vivo X9Plus', 'vivo X9Plus L', 'V2241A', 'V2242A', 'V2242A', 'V2227A', 'vivo X9i', 'vivo X9i', 'vivo X9i', 'vivo X9s', 'vivo X9s L', 'vivo X9s Plus', 'vivo X9s Plus', 'vivo X9s Plus L', 'vivo X9s Plus', 'VIVO XL', 'vivo Xplay', 'vivo Xshot', 'vivo Xshot', 'vivo Xshot', 'vivo Xshot', 'V2203', 'V2221', 'Vivo y1', 'Vivo Y1', 'V2168A', 'V2168A', 'vivo 1906', 'V2028', 'vivo Y11t', 'vivo Y11t', 'vivo Y11t', 'vivo 1904', 'V2163A', 'V2102', 'V2102', 'vivo 2007', 'vivo 2007', 'Vivo Y12I Pro', 'V2026', 'V2042', 'V2033', 'V2039', 'V2069', 'V2026_21', 'vivo Y13L', 'vivo Y13', 'vivo Y13L', 'vivo Y13L', 'vivo Y13i', 'vivo_Y13i', 'vivo Y13iL', 'vivo Y13iL', 'vivo Y13T', 'vivo Y13T', 'vivo 1901', 'vivo Y15T', 'vivo Y15T', 'V2134', 'V2147', 'V2147', 'V2212', 'V2120', 'V2204', 'V2214', 'V2204', 'vivo 1902', 'vivo 1902_19', 'VIVO 1902', 'vivo Y17T', 'vivo Y17T', 'vivo_Y17T', 'vivo Y17T', 'vivo Y17W', 'vivo Y17W', 'vivo Y17W', 'vivo Y18L', 'vivo Y18L', 'vivo Y18L', 'vivo 1915', 'vivo Y19t', 'vivo Y19t', 'vivo Y19t', 'vivo Y19t', 'Vivo Y1i', 'vivo 2015', 'vivo 2015', 'V2029', 'V2027', 'V2043_21', 'V2101', 'V2070', 'V2054', 'V2052', 'V2037', 'V2032', 'V2038', 'V2038', 'V2129', 'V2129', 'V2111', 'V2149', 'V2140', 'V2140', 'V2152', 'V2152', 'V2110', 'V2110', 'V2131', 'V2135', 'V2207', 'vivo Y22iL', 'vivo Y22iL', 'V2206', 'V2206', 'vivo Y23L', 'vivo Y23L', 'vivo y23l', 'vivo Y23L', 'vivo Y23L', 'vivo Y23L', 'vivo 1613', 'vivo Y27', 'vivo Y27L', 'vivo Y27', 'vivo Y28', 'vivo Y28', 'vivo Y28L', 'vivo Y28L', 'vivo Y29L', 'vivo Y29L', 'vivo Y29L', 'V1901A', 'V1901A', 'V1901A', 'V1901T', 'V1930A', 'vivo 1938', 'V2034A', 'V2036A', 'V2099A', 'V2099A', 'V2160', 'V2160', 'V2160', 'V2066BA', 'V2066A', 'Y30g', 'Vivo Y30S', 'vivo Y31L', 'V2068', 'V2054A', 'V2068A', 'V2068', 'V2158A', 'Vivo Y32', 'V2180A', 'V2057', 'V2109', 'V2166A', 'V2166A', 'V2146', 'V2205', 'V2205', 'vivo Y37A', 'vivo Y37', 'V2044', 'vivo Y3t', 'vivo Y3t', 'vivo Y3t', 'vivo y41', 'vivo Y5 ', 'Vivo Y5', 'vivo 1935', 'VIVO Y50(2021)', 'V2023EA', 'Y50t', 'V2035', 'vivo Y51L', 'vivo Y51A', 'V2030', 'vivo 1707', 'V2031_21', 'vivo Y51t L', 'vivo Y51t L', 'vivo Y51t L', 'V2053', 'V2057A', 'vivo Y53', 'vivo 1606A', 'vivo Y53n', 'V2058', 'V2123A', 'V2069A', 'V2045A', 'V2045A', 'vivo Y55A', 'V2127', 'V2127', 'vivo 1603', 'vivo Y55n', 'vivo 1610', 'V2164A', 'V2164A', 'V1934A', 'V2006', 'vivo Y613', 'vivo Y613', 'vivo Y613F', 'vivo Y622', 'vivo Y622', 'vivo Y622', 'vivo Y622', 'vivo Y622', 'vivo Y623', 'vivo Y623', 'vivo Y627', 'vivo Y627', 'vivo Y627', 'vivo Y627', 'vivo Y628', 'vivo Y628', 'vivo 1719', 'vivo Y66', 'vivo Y66L', 'vivo Y66i A', 'vivo Y67', 'vivo Y67A', 'vivo Y67L', 'vivo Y685', 'vivo 1714', 'vivo Y69A', 'V2002A', 'V2002A', 'vivo Y71A', 'vivo 1724', 'vivo Y71A', 'vivo 1801', 'V2041', 'V2060', 'V2102A', 'V1731CA', 'vivo Y73', 'Vivo Y73 /MMB239M', 'V2059', 'V2031A', 'V2164PA', 'V2117', 'vivo Y75A', 'V2142', 'V2142', 'vivo Y75s', 'vivo Y75s', 'vivo Y75S', 'vivo Y75s', 'V2124', 'V2156A', 'V2219A', 'V2219A', 'V2169', 'V2169', 'V1913A', 'vivo 1808i', 'vivo 1803', 'vivo 1803', 'vivo 1812', 'vivo Y81S', 'V1732A', 'V1732T', 'vivo Y83A', 'vivo 1802', 'vivo Y83A', 'vivo Y83A', 'vivo 1726', 'Vivo Y83I', 'vivo Y85A', 'vivo Y85', 'Vivo Y85i', 'Vivo Y86', 'V1730EA', 'vivo v1730ea', 'vivo 1908', 'vivo 1823', 'vivo 1908_19', 'vivo 1817', 'vivo 1811', 'vivo Y913', 'vivo Y913', 'vivo Y91C', 'vivo 1820', 'vivo 1816', 'vivo Y923', 'vivo Y923', 'vivo Y927', 'vivo Y927', 'vivo Y928', 'vivo Y928', 'vivo Y928', 'vivo 1814', 'V1818A', 'V1818A', 'vivo 1814', 'vivo Y937', 'vivo Y937', 'vivo Y937', 'V1818CT', 'V1818CA', 'vivo 1807', 'vivo Y95', 'V1813A', 'V1813T', 'V1813A', 'vivo Y97', 'V1945A', 'V1801A0', 'vivo Z1', 'vivo 1918', 'vivo 1951', 'vivo 1951', 'VIVO Z1Pro', 'vivo 1918', 'vivo 1918 Flow', 'Vivo Z10', 'vivo Z1i', 'V1730DA', 'V1730DT', 'vivo Z1i', 'vivo_1951', 'vivo 1917', 'V1813BA', 'V1813BT', 'V1813BT', 'Vivo Z34', 'vivo Z3x', 'V1730GA', 'vivo Z3x', 'vivo Z3x', 'V1921A', 'V1911A', 'V1911A', 'V1911A', 'V1990A', 'V1990A', 'V1963A', 'V1963A']
        self.infinix = [""Infinix X652B"", ""Infinix X680"", ""Infinix X690"", ""Infinix X625B"", ""Infinix X655"", ""Infinix X680B"", ""Infinix X652B"", ""Infinix X680"", ""Infinix X690"", ""Infinix X625B"", ""Infinix X655"", ""Infinix X680B"", ""Infinix X652B"", ""Infinix X680"", ""Infinix X690"", ""Infinix X625B"", ""Infinix X655"", ""Infinix X680B"", ""Infinix X652B"", ""Infinix X680"", ""Infinix X690"", ""Infinix X625B"", ""Infinix X655"", ""Infinix X680B"", ""Infinix X652B"", ""Infinix X680"", ""Infinix X690"", ""Infinix X625B"", ""Infinix X655"", ""Infinix X680B""]
        self.opp = random.choice([""OP4F97"", ""OP4BA5L1"", ""OP664D1"", ""OP5F11L1"", ""OP2A92"", ""OP8F17"", ""OP8F31"", ""OP4C9E1"", ""OP5B31"", ""OP4BA6L1"", ""OP2B87"", ""OP6F21"", ""OP6C8E1"", ""OP8F11"", ""OPPOA16"", ""OPPOA15"", ""OPPOA11"", ""OPPOA73"", ""OPPOA37"", ""OPPOA53"", ""OPPOA33"", ""OPPOA93"", ""OPPOA35"", ""OPPOA83"", ""OPPOA57"", ""OPPOA71"", ""OPPOA39"", ""OPPOA3"", ""OPPOA51"", ""OPPOA27"", ""OPPOA79""])
        self.trek = random.choice([""mt6769"", ""mt6768"", ""mt6767"", ""mt6765"", ""mt6763"", ""mt6757"", ""mt6755"", ""mt6753"", ""mt6739"", ""mt6737"", ""mt6735"", ""mt6595"", ""mt6582"", ""mt6572"", ""mt6571"", ""mt6570"", ""mt8563"", ""mt8167"", ""mt8163"", ""mt8135"", ""mt8127"", ""mt8125"", ""mt7623"", ""mt6797"", ""mt6592"", ""mt6590"", ""mt6580"", ""mt6573"", ""mt6575"", ""mt6260"", ""mt6236""])
        self.igversi = (""100.0.0.17.129,100.0.0.17.129,100.0.0.17.129,100.0.0.17.129,100.0.0.17.129,100.0.0.17.129,79.0.0.21.101,78.0.0.11.104,77.0.0.20.113,76.0.0.15.395,75.0.0.23.99,74.0.0.21.99,73.0.0.22.185,72.0.0.21.98,71.0.0.18.102,70.0.0.22.98,69.0.0.30.95,68.0.0.11.99,67.0.0.25.100,66.0.0.11.101,65.0.0.12.86,64.0.0.14.96,63.0.0.17.94,62.0.0.19.93,61.0.0.19.86,60.1.0.17.79,59.0.0.23.76,58.0.0.12.73,57.0.0.9.80,56.0.0.13.78,55.0.0.12.79,54.0.0.14.82,53.0.0.13.84,52.0.0.8.83,51.0.0.20.85,50.1.0.43.119,271.1.0.21.84,131.0.0.23.11,130.0.0.31.12,128.0.0.26.12,126.0.0.25.12,125.0.0.20.12,124.0.0.17.47,123.0.0.21.11,122.0.0.29.23,120.0.0.29.11,119.0.0.33.14,118.0.0.28.12,117.0.0.28.12,115.0.0.26.11,114.0.0.38.12,113.0.0.39.12,112.0.0.29.12,111.1.0.25.15,110.0.0.16.11,109.0.0.18.12,108.0.0.23.11,107.0.0.27.12,106.0.0.24.11,105.0.0.18.11,104.0.0.21.11,103.1.0.15.11,102.0.0.20.11,101.0.0.15.12,100.0.0.17.12,99.0.0.32.182,98.0.0.15.119,97.0.0.32.119"").split(',')
        self.dix = random.choice(self.igversi)
        self.kode = random.choice(['104766893','104766900','102221278','104766888','105842053','93117670','94080607','96794592','102221279','100986894','ru_RU','94080606','103516660','98288242','103516666','103516653','uk_UA','96794590','100986893','102221277','95414344','99640920','99640911','96794591','ru_UA','99640905','100986890','107092313','99640900','93117667','100521966','90841939','98288239','89867440','105842051','de_DE','96794584','105842050','en_US','pt_PT','109556223','107092318','en_GB','108357722','112021130','107092322','119104798','108357720','119104802','112021131','100986892','113249569','107104231','fr_FR','pt_BR','109556226','116756948','113249553','113249561','110937441','118342010','120662545','117539703','119875222','110937448','121451799','115994877','108357718','120662547','107608058','122206624','95414346','107092308','112021128','90841948','119875229','117539698','120662550','en_NZ','123103748','91882538','121451810','91882537','118342006','113948109','122338251','110937453','es_US','118342005','121451793','109556219','119875225','en_CA','109556220','117539695','115211358','91882539','119104795','89867442','94080603','164094539','175574628','185203690','188791648','188791674','187682694','188791643','177770724','192992577','180322810','195435560','196643820','196643821','188791637','192992576','196643799','196643801','196643803','195435546','194383411','197825254','197825260','197825079','171727793','197825112','197825012','197825234','179155086','192992563','197825268','166149669','192992565','198036424','197825223','183982969','199325909','199325886','199325890','199325911','197825118','127049003','197825169','197825216','197825127','200395960','179155096','199325907','200396014','188791669','197825133','170693926','200396005','171727780','201577064','201576758','201577192','201775949','201576944','201775970','143631574','126223520','201775951','167338518','144612598','170693940','201775813','200395971','201775744','201775946','202766609','145652094','202766591','202766602','203083142','179155088','202766608','199325884','180322802','202766603','195435547','165030894','201576967','201775904','194383424','197347903','202766610','185203693','201576898','204019468','187682682','204019456','201775901','204019471','204019454','204019458','202766601','204019452','173238721','204019466','148324036','202766581','158441904','201576903','205280538','205280529','201576813','173238729','141753096','205280531','163022072','201576887','163022088','141753091','148324051','205280528','154400383','205280537','201576818','157405371','205858383','201576811','165031093','187682684','145652090','206670917','185203686','192992561','183982986','206670927','150338061','183982962','127049016','175574603','155374054','205858247','135374896','206670920','169474958','206670926','160497905','161478672','192992578','206670929','131223243','206670916','142841919','187682681','171727795','151414277','206670922','160497915','207505137','165030898','208061741','208061688','208180365','208061674','197825052','147375133','208061744','196643798','208061725','122338247','157536430','208061728','209143963','208727155','209143726','205280539','209143903','209143970','181496409','208061739','209143957','210180522','210180512','209143881','209143712','180322805','210180521','195435561','210370119','210180523','210180493','175574596','210180510','210180480','210180513','210180517','176649504','177770663','210180479','211114117','210908379','206670921','211114134','183982943','211399345','211399342','211399332','201775962','211574187','211574249','210180519','167338559','185203649','124583960','211399337','211399335','197825163','166149717','211399336','212063371','211399329','209143954','210180482','168361634','212214017','209143867','211399341','211399340','212214027','195435510','122338243','139237670','152367502','212676872','212676898','212676875','212676895','212676901','209823384','212676869','196643822','212676878','213367980','213368005','212676886','213558743','209143913','212214039','158441917','174081672','213558750','201775966','188791681','185203705','143631575','161478664','214245350','161478663','212676881','213558770','214245346','138226752','214245221','214245182','214245206','214245218','214245354','214245295','214245199','214245304','214245280','214446313','214245187','214245288','214139002','202766605','214245319','214646783','158441914','215246048','195435544','208061677','215464400','128676146','215464389','215464385','215464390','215464398','182747397','215464393','216233197','201775791','216817344','215464395','216817286','185203642','164094529','216817305','215464401','162439029','215464382','216817280','216817331','214330969','216817299','216817357','217948981','217948980','217948956','217948959','217948968','216817296','217948952','217948982','216817269','219308759','219308726','182747387','219308721','219308754','219308763','176649435','183982982','219909486','127049038','219308730','221134012','221134032','221134009','221134037','194383426','221134029','221134005','221134018','145652093','225283632','165031108','225283625','224652582','139906580','225283628','225283624','226142579','225283634','225283631','226493211','225283623','185203672','156514151','218793478','225283621','227299063','225283627','227299064','227299021','227299027','227544546','227299041','227299060','227299012','228970707','228970705','227299005','228970687','228970683','228970694','228970710','228970689','160497904','195435540','129611419','229783842','230291708','228970681','148324047','230877709','231192211','230877674','230877705','230877678','211399328','209143896','230877713','194383428','230877689','221134002','231457747','208061721','230877671','230877668','232868027','232088496','185203706','232868005','232867964','232868001','232868015','232868031','232867959','232868009','164094526','232867941','234041364','182747399','232868024','232867949','234847239','234847238','234847234','162439040','234847229','234847230','181496427','234847240','232867993','195435558','232867967','232867997','234847227','235871830','221133998','236572344','236572377','153386780','236572337','236572349','236572372','234847226','236572383','237507050','238093993','238093948','238093954','238093999','238093982','239490565','239490555','238093946','238093966','239490563','239490550','239974660','240726416','239490568','240726484','240726452','239490551','239490548','240726426','240726476','240726491','240726471','241043882','241114613','236572331','241267273','240726407','241456456','241267278','241267269','241114619','241456445','241456451','242168941','242168928','242168931','242168939','242168925','240726436','242375239','144722090','242168935','242290370','157405369','242168933','242290355','242703240','242807362','242168923','242168943','242991209','243646252','243646269','242991200','243711120','243646267','243711093','243975802','243646263','243646248','243646255','244167578','128676156','194383413','243975835','244390417','244390338','245196084','245196061','240726392','245196055','243646273','245196082','245196063','245196070','245666450','245466705','245870319','245870301','245870347','245196087','246889064','246889072','246889073','246889074','246889065','247146500','246889063','245870262','247370962','247146481','246889068','246889062','247541884','247541831','247370955','247370942','247720736','247720751','248310216','248310220','248310208','247720744','248399342','248310210','247720747','248310206','248717751','248310212','248310221','248823392','248583561','248310205','248899028','248955251','248955247','249178904','248955244','249507608','249507582','249507588','249507585','248955240','249507607','249507592','249810008','249966137','249507610','249966081','249966100','249507599','249966140','249810004','123790722','250188776','249628096','250188788','250742103','250742113','250742102','250877984','250742105','250742111','251048681','250742107','250742115','251048695','251304696','251304682','251524431','251530710','251304689','251524420','251524409','251524390','250742101','251048673','252055918','252055945','251920416','252055944','252055925','252239038','252055936','252055915','252055948','252390568','252390583','252580134','252740497','252740485','252740490','253120615','253325372','253325384','253325385','253447816','253146263','253120607','253325374','253120598','253325371','253447808','253447809','253325378','253447814','253447807','253447811','253447817','253447813','181496411','253447806','255191971','255013798','255777478','255777471','255777474','255777472','255959637','255777477','255959614','255959635','256099199','256099204','150338064','256099153','256099205','256099156','255983744','256107300','255777470','126223536','256203326','256099190','256099151','256324061','256324047','256203339','256966628','256966589','256966626','256966590','124584015','257456576','256966593','257456590','256966629','256966587','256966592','257456586','257456539','259829115','259829104','259829113','260037038','259829105','259829109','260037030','260149625','259829103','260149621','260465044','259829116','260724710','179155058','261079769','261079761','261079768','261079762','261079771','261276939','157405370','135374885','261079765','261393056','261393062','261079760','181496406','182747360','261504698','261690888','261504706','169474957','262218766','262290715','262290774','262372432','262372425','262372431','262886993','262886995','262372426','262886987','261079764','262886986','262886988','262886990','262372433','262886996','263652962','264009049','264009019','264009030','264009021','264009023','264009052','264009024','261763534','174081651','169474965','232867942','264009013','255959606','264009028','267397344','267397322','267925737','267397343','267925708','267397327','267397321','267925714','267258517','267925705','268773287','267925733','268773233','267925702','268773286','159526770','268773239','268773272','269790795','269285030','269790805','269790803','269790792','268773227','269849047','270426177','270426174','271182277','269790789','271182270','268773290','271182266','271182276','269790798','271182279','271182265','271182267','269790807','271823819','272382110','272382111','272382106','272693584','272382095','272382093','272382098','272382100','272382103','273728833','273371577','273728832','273728798','273907093','273907111','273907108','238093987','273907112','273907103','274774869','274774891','274774908','273907087','274774904','274774875','274774914','275292626','276027938','276028040','276027963','276028037','276028020','276028017','274774862','276028013','249507580','276028029','273907098','277249238','277249248','277249249','276028033','277249250','277249226','275292623','277249214','277249242','277249237','277249240','278625447','278002558','278625420','278625431','278625423','117539687','278625416','278625444','277249213','278625451','279469964','279996068','279996060','279996067','279996058','280194220','279996065','279996063','279996061','279996059','280894196','273728787','271182262','281579032','281579023','276514494','281579021','281579027','281579033','268773274','283072590','281579025','283072571','282619332','283489774','283072587','283072567','281579031','283072580','283072574','284459213','284459224','179155089','256966583','284459214','283072585','284459218','284459223','284459225','285338607','275113919','284459221','284459212','284459215','285855793','285855800','285855803','285855791','285855802','285855804','285855795','286809973','287420974','287421023','287420968','287420979','287421017','287421005','287421019','287421012','277249241','288682406','287421026','288682405','288682397','288682407','261079772','288682398','288682401','288205409','289692198','287420997','289692186'])
        self.dpi_pxl = random.choice(['240dpi; 1760x792', '240dpi; 1920x864', '320dpi; 2400x1080', '400dpi; 3200x1440', '480dpi; 1080x1920', '320dpi; 900x1600', '320dpi; 720x1280', '240dpi; 540x960', '280dpi; 1920x1080', '240dpi; 160x900', '240dpi; 1280x720', '160dpi; 960x540','160dpi; 623x1280'])
        self.dpi = random.choice(['320dpi','640dpi','213dpi','480dpi','420dpi','240dpi','280dpi','160dpi','560dpi','540dpi','272dpi','360dpi','720dpi','270dpi','450dpi','600dpi','279dpi','210dpi','180dpi','510dpi','300dpi','454dpi','314dpi','288dpi','401dpi','153dpi','267dpi','345dpi','493dpi','340dpi','604dpi','465dpi','680dpi','256dpi','290dpi','432dpi','273dpi','120dpi','200dpi','367dpi','419dpi','306dpi','303dpi','411dpi','195dpi','518dpi','230dpi','384dpi','315dpi','293dpi','274dpi','235dpi'])
        self.pxl = random.choice(['720x1280','1440x2560','1440x2768','1280x720','1280x800','1080x1920','540x960','1080x2076','1080x2094','1080x2220','480x800','768x1024','1440x2792','1200x1920','720x1384','1920x1080','720x1369','800x1280','720x1440','1080x2058','600x1024','720x1396','2792x1440','1920x1200','2560x1440','1536x2048','720x1382','1080x2113','1080x2198','1080x2131','720x1423','1080x2069','720x1481','1080x2047','1080x2110','1080x2181','1080x2209','1080x2180','1080x2020','1080x2095','1440x2723','1080x2175','720x1365','1440x2699','1080x2218','2699x1440','1440x2907','1080x2257','720x1370','1080x2042','720x1372','1080x2200','1080x2186','720x1361','1080x2024','1080x2006','720x1402','1440x2831','720x1454','1080x2064','1440x2933','720x1411','720x1450','1440x2730','1080x2046','2094x1080','540x888','1440x2759','1080x2274','1080x2178','1440x2706','720x1356','720x1466','1440x2900','2560x1600','1080x2038','1600x2452','1080x2129','720x1422','720x1381','1080x2183','1080x2285','800x1216','1080x2216','1080x2168','1080x2119','1080x2128','1080x2273','2274x1080','1080x2162','1080x2164','2076x1080','1024x768','1080x2173','1440x2845','1080x2134','720x1379','1440x2838','1080x2139','2131x1080','1440x2744','1080x2192','720x1406','1440x2960','1080x2029','2042x1080','1080x2212','1406x720','1080x2288','2047x1080','1080x2051','720x1398','1280x736','1382x720','720x1353','1080x2050','1080x2028','1080x2256','2711x1440','2175x1080','1080x2281','2560x1492','1440x2923','1200x1845','1080x2189','1080x2002','1440x2711','2110x1080','960x540','1080x2033','2200x1080','720x1452','720x1480','1440x2735','720x1472','1080x2277','1080x2169','2874x1440','1600x2560','1080x2151','2218x1080','1080x2182','720x1468','1440x2898','1080x2011','1080x2201','720x1380','1080x2287','2069x1080','1200x1836','2046x1080','720x1439','2058x1080','2182x1080','720x1399','1080x2282','1440x2721','1080x2324','720x1432','1080x2165','1080x2150','1080x2156','1080x1872','1440x3048','1532x2560','720x1355','720x1390','720x1476','720x1410','1080x2032','720x1437','1440x2682','1440x2921','1080x2270','1080x2160','720x1446','1200x1848','1440x2874','1080x2309','1080x2174','1440x2867','1080x2060','1080x2196','1080x2401','1536x1922','1080x2280','1080x2123','720x1435','1440x2927','1080x2276','720x1448','720x1469','720x1344','1080x2187','540x937','1440x3028','1080x2184','1440x2718','1080x2326','840x1834','1440x2935','1440x2880','1440x2892','2048x2048','1080x2195','1080x2322','720x1419','987x1450','1080x2092','1440x3047','720x1358','1080x2136','720x1357','1080x2093','720x1477','1080x2312','1080x2361','720x1341','720x1507','1080x2172','720x1337','1080x2177','1080x2125','1440x2891','1600x2434','720x1394','1080x2159','720x1387','1080x2166','1080x2154','1080x2147','1440x2747','1080x2105','1440x2911','720x1473','1080x2055','1080x2265','720x1436','1080x2190','1600x2526','720x1373','720x1415','1080x2249','1080x2254','720x1455','1440x3040','1080x2149','720x1385','1440x3036','1080x2111','1440x2904','720x1442','720x1377','1080x2307','1080x2327','1080x2141','1080x2025','720x1430','720x1375','1080x2283','1440x2779','1080x2321','1080x2268','1440x2758','1752x2698','1080x2267','1200x1856','1440x2756','720x1464','1080x2234','1080x2171','1080x2155','720x1463','1080x2122','720x1467','1080x2264','720x1349','1440x2999','720x1458','1080x2015','720x1431','1242x2208','1080x2185','1080x2148','1080x2163','1440x2780','720x1445','1080x2146','1200x1916','720x1502','1200x1928','720x1506','720x1424','720x1465','720x1420','1080x2176','720x1521','1080x2315','1080x2400','720x1471','1080x2157','1600x2458','1080x2067','1080x2191','1080x2271','720x1407','800x1208','1080x2087','1080x2199','578x1028','720x1485','540x879','1080x2179','720x1555','810x1598','720x1378','1200x1897','720x1395','720x1459','900x1600','1080x2275','1440x2733'])
        self.samsung = [""SM-A205F"",""SM-J120H"",""SM-J120F"",""SM-J120M"",""SM-J111M"",""SM-J111F"",""SM-J110H"",""SM-J110G"",""SM-J110F"",""SM-J110M"",""SM-J105H"",""SM-J105Y"",""SM-J105B"",""SM-J106H"",""SM-J106F"",""SM-J106B"",""SM-J106M"",""SM-J200F"",""SM-J200M"",""SM-J200G"",""SM-J200H"",""SM-J200F"",""SM-J200GU"",""SM-J260M"",""SM-J260F"",""SM-J260MU"",""SM-J260F"",""SM-J260G"",""SM-J200BT"",""SM-G532G"",""SM-G532M"",""SM-G532MT""]
        self.cgsm = [""dream2qltesq"", ""beyond2q"", ""broadway"", ""dreamqltevzw"", ""b2q"", ""a7y18lte"", ""a50qlteue"", ""a42xqlte"", ""a7y18lte"", ""a40lte"", ""a6plte"", ""a52xqlteue"", ""a5y20qlteue"", ""a3xelte"", ""a42xqlteue"", ""a3xelte"", ""a41lte"", ""a72xlte"", ""dreamlte"", ""hero2qltevzw"", ""beyond0lte"", ""beyond2"", ""starlte"", ""a5y17lte"", ""a7xelte"", ""a71xqlteue"", ""dream2qlteue"", ""dreamqltespr"", ""a5y17lte"", ""beyond1qlteue"",""herolte"",""zerolte"",""hero2te""]
        self.realme = [""RMX3516"", ""RMX3371"", ""RMX3461"", ""RMX3286"", ""RMX3561"", ""RMX3388"", ""RMX3311"", ""RMX3142"", ""RMX2071"", ""RMX1805"", ""RMX1809"", ""RMX1801"", ""RMX1807"", ""RMX1803"", ""RMX1825"", ""RMX1821"", ""RMX1822"", ""RMX1833"", ""RMX1851"", ""RMX1853"", ""RMX1827"", ""RMX1911"", ""RMX1919"", ""RMX1927"", ""RMX1971"", ""RMX1973"", ""RMX2030"", ""RMX2032"", ""RMX1925"", ""RMX1929"", ""RMX2001"", ""RMX2061"", ""RMX2063"", ""RMX2040"", ""RMX2042"", ""RMX2002"", ""RMX2151"", ""RMX2163"", ""RMX2155"", ""RMX2170"", ""RMX2103"", ""RMX3085"", ""RMX3241"", ""RMX3081"", ""RMX3151"", ""RMX3381"", ""RMX3521"", ""RMX3474"", ""RMX3471"", ""RMX3472"", ""RMX3392"", ""RMX3393"", ""RMX3491"", ""RMX1811"", ""RMX2185"", ""RMX3231"", ""RMX2189"", ""RMX2180"", ""RMX2195"", ""RMX2101"", ""RMX1941"", ""RMX1945"", ""RMX3063"", ""RMX3061"", ""RMX3201"", ""RMX3203"", ""RMX3261"", ""RMX3263"", ""RMX3193"", ""RMX3191"", ""RMX3195"", ""RMX3197"", ""RMX3265"", ""RMX3268"", ""RMX3269"",""RMX2027"", ""RMX2020"", ""RMX2021"", ""RMX3581"", ""RMX3501"", ""RMX3503"", ""RMX3511"", ""RMX3310"", ""RMX3312"", ""RMX3551"", ""RMX3301"", ""RMX3300"", ""RMX2202"", ""RMX3363"", ""RMX3360"", ""RMX3366"", ""RMX3361"", ""RMX3031"", ""RMX3370"", ""RMX3357"", ""RMX3560"", ""RMX3562"", ""RMX3350"", ""RMX2193"", ""RMX2161"", ""RMX2050"", ""RMX2156"", ""RMX3242"", ""RMX3171"", ""RMX3430"", ""RMX3235"", ""RMX3506"", ""RMX2117"", ""RMX2173"", ""RMX3161"", ""RMX2205"", ""RMX3462"", ""RMX3478"", ""RMX3372"", ""RMX3574"", ""RMX1831"", ""RMX3121"", ""RMX3122"", ""RMX3125"", ""RMX3043"", ""RMX3042"", ""RMX3041"", ""RMX3092"", ""RMX3093"", ""RMX3571"", ""RMX3475"", ""RMX2200"", ""RMX2201"", ""RMX2111"", ""RMX2112"", ""RMX1901"", ""RMX1903"", ""RMX1992"", ""RMX1993"", ""RMX1991"", ""RMX1931"", ""RMX2142"", ""RMX2081"", ""RMX2085"", ""RMX2083"", ""RMX2086"", ""RMX2144"", ""RMX2051"", ""RMX2025"", ""RMX2075"", ""RMX2076"", ""RMX2072"", ""RMX2052"", ""RMX2176"", ""RMX2121"", ""RMX3115"", ""RMX1921""]
        self.xiaomi = [""2201116SI"", ""M2012K11AI"", ""22011119TI"", ""21091116UI"", ""M2102K1AC"", ""M2012K11I"", ""22041219I"", ""22041216I"", ""2203121C"", ""2106118C"", ""2201123G"", ""2203129G"", ""2201122G"", ""2201122C"", ""2206122SC"", ""22081212C"", ""2112123AG"", ""2112123AC"", ""2109119BC"", ""M2002J9G"", ""M2007J1SC"", ""M2007J17I"", ""M2102J2SC"", ""M2007J3SY"", ""M2007J17G"", ""M2007J3SG"", ""M2011K2G"", ""M2101K9AG "", ""M2101K9R"", ""2109119DG"", ""M2101K9G"", ""2109119DI"", ""M2012K11G"", ""M2102K1G"", ""21081111RG"", ""2107113SG"", ""21051182G"", ""M2105K81AC"", ""M2105K81C"", ""21061119DG"", ""21121119SG"", ""22011119UY"", ""21061119AG"", ""21061119AL"", ""22041219NY"", ""22041219G"", ""21061119BI"", ""220233L2G"", ""220233L2I"", ""220333QNY"", ""220333QAG"", ""M2004J7AC"", ""M2004J7BC"", ""M2004J19C"", ""M2006C3MII"", ""M2010J19SI"", ""M2006C3LG"", ""M2006C3LVG"", ""M2006C3MG"", ""M2006C3MT"", ""M2006C3MNG"", ""M2006C3LII"", ""M2010J19SL"", ""M2010J19SG"", ""M2010J19SY"", ""M2012K11AC"", ""M2012K10C"", ""M2012K11C"", ""22021211RC""]
        self.bsh = 'in_ID'
        self.dvc = random.choice([""30/11"",""31/12"",""29/10""])
        return(random.choice([
             f'Barcelona {self.dix} Android ({self.dvc}; 604dpi; 1080x2283; INFINIX MOBILITY LIMITED/Infinix; {str(random.choice(self.infinix))}; qcom; {self.bsh}; 255777478)',
             f'Barcelona {self.dix} Android ({self.dvc}; 604dpi; 1080x2283; REALME MOBILITY LIMITED/Realme; {str(random.choice(self.realme))}; qcom; {self.bsh}; 255777478)',
             f'Barcelona {self.dix} Android ({self.dvc}; 604dpi; 1080x2283; XIAOMI MOBILITY LIMITED/Xiaomi; {str(random.choice(self.realme))}; qcom; {self.bsh}; 255777478)',
            f'Barcelona {self.dix} Android ({self.dvc}; 604dpi; 1080x2283; NEXUS MOBILITY LIMITED/Nexus; {str(random.choice(self.nexus))}; qcom; {self.bsh}; 255777478)',
            f'Barcelona {self.dix} Android ({self.dvc}; 604dpi; 1080x2283; MICROMAX MOBILITY LIMITED/Micromax; {str(random.choice(self.micromax))}; qcom; {self.bsh}; 255777478)',
            f'Barcelona {self.dix} Android ({self.dvc}; 604dpi; 1080x2283; ONEPLUS MOBILITY LIMITED/One; {str(random.choice(self.onpls))}; qcom; in_ID; 255777478)',
            f'Barcelona {self.dix} Android ({self.dvc}; 604dpi; 1080x2283; OPPO MOBILITY LIMITED/Oppo; {str(random.choice(self.oppo))}; {self.opp}; qcom; {self.bsh}; 255777478)',
            f'Barcelona {self.dix} Android ({self.dvc}; 604dpi; 1080x2283; VIVO MOBILITY LIMITED/Vivo; {str(random.choice(self.vivo))}; qcom; {self.bsh}; 255777478)',
           ])
       )
        
    def useragent_ajax(self):
        self.chrome = str(random.randint(114,124))
        return(random.choice([
            f'Mozilla/5.0 (Windows NT 10.0; {str(random.randint(1,9))}; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/{str(random.randint(1,9))}.{str(random.randint(1,9))}.{str(random.randint(1,9))}.{str(random.randint(1,9))} Safari/537.36',
            f'Mozilla/5.0 (Windows NT 10.0; {str(random.randint(1,9))}; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/{str(random.randint(1,9))}.{str(random.randint(1,9))}.{str(random.randint(1,9))}.{str(random.randint(1,9))} Safari/537.36',
            ])
        )
        

        


"
zRgJzLt4,eww.yuck,bluebyt,INI file,Sunday 31st of March 2024 06:12:48 AM CDT,";; CAL VARS
(defpoll calendar_day :interval ""10h"" ""date '+%d'"")
(defpoll calendar_year :interval ""10h"" ""date '+%Y'"")
(defpoll calendar_date :interval ""12h"" ""date '+%A, %d %B'"")
(defpoll today :interval ""12h"" ""date '+%a, %d %B'"")
(defpoll time :interval ""5s"" ""date '+%H:%M'"")

;; ENV VARS
;;(defpoll wm :interval ""12h"" ""echo $XDG_CURRENT_DESKTOP"")
(defpoll wm :initial ""..."" :interval ""12h"" ""$HOME/.config/scripts/display.sh &"") 
(defpoll shell :interval ""1h"" ""echo $SHELL | awk -F'/' '{print $NF}'"")
(defpoll term :interval ""1h"" ""echo $TERM | awk -F'-' '{print $NF}'"")
(defpoll uptime :interval ""1m"" ""uptime -p | sed -e 's/up //;s/ hours,/h/;s/ minutes/m/;s/ [0-9]\+m//'"")
;;(defpoll packages :interval ""15m"" ""pacman -Q | wc -l"")
(defpoll updates_poll :initial ""..."" :interval ""10m"" ""$HOME/.config/scripts/updates.sh &"") 
;; WEATHER VARS
(defpoll weather_temp :interval ""1h"" :initial ""0""
	""$HOME/.config/scripts/Weather.sh current_temp"")
(defpoll weather_desc :interval ""1h""
	""$HOME/.config/scripts/Weather.sh weather_desc"")
(defpoll weather_feels_like :interval ""3h""
	""$HOME/.config/scripts/Weather.sh feels_like"")
(defpoll weather_humidity :interval ""3h""
	""$HOME/.config/scripts/Weather.sh humidity"")
(defpoll weather_icon :interval ""3h""
	""$HOME/.config/scripts/Weather.sh icon"")
(defpoll weather_wind :interval ""3h""
	""$HOME/.config/scripts/Weather.sh wind"")

(defpoll memory :interval ""15s""
    ""$HOME/.config/scripts/memory"")
(defpoll cpu :interval ""17s""
    ""$HOME/.config/scripts/cpu"")
(defpoll disk :interval ""30s""
    ""$HOME/.config/scripts/disk"")
(defpoll tempe :interval ""3s""
    ""$HOME/.config/scripts/tempe"")
(defpoll temp :initial 30 :interval ""10s"" `sensors | rg temp1 | rg -o ""\\d+.\\d+"" | head -1`)

(defpoll IP_ADDR :interval ""24h"" ""ip -br address | grep UP | awk '{ print $3 }'"")


(deflisten window :initial ""..."" ""$HOME/.config/scripts/window-title.sh"")

;; Widgets

(defwidget dash []
    (box :class ""dash"" :orientation ""h"")
)

(defwidget cal[]
    (box :class ""cal-container"" :orientation ""v"" :space-evenly ""false"" :halign ""center""
        (box  :class ""cal-box"" :orientation ""v"" :space-evenly ""false""
            (label :class ""clock"" :text time)
            (label :class ""date"" :text today)
        )   
        (box :class ""cal-window"" :orientation ""h""
            (calendar :class ""day-names"" :day calendar_day :orientation ""v""
                      :class ""month-year"" :year calendar_year)
        )
    )
)

(defwidget info []
    (box :class ""info-box-outer"" :orientation ""h"" :space-evenly false :halign ""center""
        (box :class ""info-box-top"" :orientation ""v"" :space-evenly false
            (box :class ""info-box-inner"" :orientation ""h"" :space-evenly false
                (box :class ""info-box-left"" :orientation ""v"" :space-evenly false
                    (label :class ""info-icon"" :text ""ÔÅ©:"")
                    (label :class ""info-icon"" :text ""Ôíâ:"")
                    (label :class ""info-icon"" :text ""ÔÄó:"")
                    (label :class ""info-icon"" :text ""ÔåÉ:"")
                )
                (box :class ""info-box-right"" :orientation ""v"" :space-evenly false
                    (label :class ""info-text"" :halign ""start"" :text ""${wm}"")
                    (label :class ""info-text"" :halign ""start"" :text ""${shell}"")
                    (label :class ""info-text"" :halign ""start"" :text ""${uptime}"")
                    (label :class ""info-text"" :halign ""start"" :text ""${updates_poll} packages"")
                )
            )
        )
    )
)

(defwidget window-title []
    (box
        (label :class ""window-title""
        :halign ""center"" 
        :limit-width 16
        :justify ""center""
        :text ""${window}"")
    )
)

(defwidget weather []
    (box :class ""weather-container"" :orientation ""v"" :space-evenly ""false"" :halign ""center""
        (box :class ""weather-box"" :orientation ""h"" :space-evenly ""false"" :halign ""center"" :spacing 10
            (label :class ""weather-icon"" :text {weather_icon != """" ? ""${weather_icon}"" : ""Óê≠""})
            (label :class ""weather-temp"" :text ""${weather_temp}¬∞C"")
        )
        (box :class ""weather-window"" :orientation ""v"" :space-evenly ""false"" :spacing 2
            (label :class ""weather-feel"" :text ""${weather_desc}""
                                        :limit-width 32
                                        :justify ""center""
                                        :wrap ""true"")
            (label :class ""weather-desc"" :text ""Feels Like: ${weather_feels_like}¬∞C"")
            (label :class ""weather-desc"" :halign ""center"" :text ""Óçã ${weather_wind} km/h"")
            (label :class ""weather-desc"" :halign ""center"" :text ""Óç≥  ${weather_humidity} %"")
        )
    )
)


(defwidget network [] 
	(box :class ""network-label"" :orientation ""h"" :space-evenly ""false"" :spacing 10 :halign ""center""
        (label :text ""${IP_ADDR}"")
    )
)

(defwidget network-up [] 
	(box :class ""network"" :orientation ""h"" :space-evenly ""false"" :spacing 10 :halign ""center""
        (box :orientation ""h"" :class ""network-box"" 
            (label :text ""ÔÅ¢"" :class ""network-up"")
        )
        (box :orientation ""h"" :width 130 
            (graph  :class ""network-graph-up""
                    :thickness 2
                    :value {round(EWW_NET.enp4s0.NET_UP / (1024 * 1024) ,1)}
                    :time-range ""2m""
                    :min 0
                    :max 101
                    :dynamic ""true""
                    :line-style ""round""
            )
	    )
    )
)
(defwidget network-down [] 
	(box :class ""network"" :orientation ""h"" :space-evenly ""false"" :spacing 10 :halign ""center""
        (box :orientation ""h"" :class ""network-box"" 
            (label :text ""ÔÅ£"" :width 10 :class ""network-down"")
        )
        (box :orientation ""h"" :width 130
            (graph  :class ""network-graph-down""
                    :thickness 2
                    :value {round(EWW_NET.enp4s0.NET_DOWN / 1024 ,1)}
                    :time-range ""2m""
                    :min 0
                    :max 101
                    :dynamic ""true""
                    :line-style ""round""
            )
	    )
    )
)

(defwidget system []
    (box :class ""sys_win"" :orientation ""h"" :space-evenly ""true"" :hexpand ""false"" :vexpand ""false"" 
        (box :class ""sys_cpu_box"" :orientation ""v"" :space-evenly ""false"" :hexpand ""false"" :vexpand ""false""
            (circular-progress 
                    :value cpu
                    :class ""sys_cpu""
                    :thickness 8
                (label :text ""Ôíº""
                    :class ""sys_icon_cpu""
                    :limit-width 4
                    :show_truncated false
                    :wrap false))
            (label :class ""cpu_perc"" :halign ""center"" :text ""${cpu}%"")
        )
        (box :class ""sys_mem_box"" :orientation ""v"" :space-evenly ""false"" :hexpand ""false"" :vexpand ""false""
            (circular-progress 
                    :value memory
                    :class ""sys_mem""
                    :thickness 8
              (label :text ""Óâ¶""
                    :class ""sys_icon_mem""
                    :limit-width 4
                    :show_truncated false
                    :wrap false
                    :angle 0.0))
            (label :class ""mem_perc"" :halign ""center"" :text ""${memory}%"")
        )
    )
)

(defwidget disktemp []
    (box :class ""disk_temp"" :orientation ""h"" :space-evenly ""true"" :hexpand ""false"" :vexpand ""false"" 
        (box :class ""sys_disk_box"" :orientation ""v"" :space-evenly ""false"" :hexpand ""false"" :vexpand ""false""
          (circular-progress
                  :value disk
                  :class ""sys_disk""
                  :thickness 8
              (label :text ""ÔÉá""
                    :class ""sys_icon_disk""
                    :limit-width 4
                    :show_truncated false
                    :wrap false))
            (label :class ""disk_perc"" :halign ""center"" :text ""${disk}%"")
        )        
      (box :class ""sys_tempe_box"" :orientation ""v"" :space-evenly ""false"" :hexpand ""false"" :vexpand ""false""
            (circular-progress 
                    :value tempe
                    :class ""sys_tempe""
                    :thickness 8
              (label :text ""Ôãà""
                    :class ""sys_icon_tempe""
                    :limit-width 4
                    :show_truncated false
                    :wrap false
                    :angle 0.0))
            (label :class ""tempe_perc"" :halign ""center"" :text ""${tempe}C"")
        )  
    )
)



(defwidget apps []
    (box :class ""app-container"" :orientation ""v"" :space-evenly ""true"" :hexpand ""false"" :vexpand ""false"" :halign ""center""
    (label :text ""Apps"" :class ""app-label"")
        (box :class ""app-box"" :orientation ""h"" :space-evenly ""false"" :hexpand ""false"" :vexpand ""false"" :spacing 10
            (button :class ""app-firefox"" 
			    :onclick ""alacritty -e zsh 2> /dev/null"" ""Óû£"")
	        (button :class ""app-files"" 
			    :onclick ""thunar 2> /dev/null"" ""Óóæ"")
            (button :class ""app-code"" 
			    :onclick ""wofi -n --show drun -k 2> /dev/null"" ""ÔÄÇ"")
            (button :class ""app-steam""
                :onclick ""foot 2> /dev/null"" ""Óûï"")
        )
    )
)

;; Functions
(defwidget functions []
    (box :class ""function-container"" :orientation ""v"" :space-evenly ""true"" :hexpand ""false"" :vexpand ""false"" :halign ""center""
    (label :text ""Functions"" :class ""function-label"")
        (box :class ""function-box"" :orientation ""h"" :space-evenly ""false"" :hexpand ""false"" :vexpand ""false"" :spacing 10
            (button :class ""screenshot""
                :onclick ""bash $HOME/.config/scripts/screenshot.sh 2> /dev/null""
                :tooltip ""Screenshot""
            (label :text ""Ó©∫ "" :class ""tooltip""))
            (button :class ""wallpaper""
                :onclick ""bash $HOME/.config/scripts/wallpaper.sh 2> /dev/null""
                :tooltip ""Wallpaper""
            (label :text ""ÔÄæ"" :class ""tooltip""))
            (button :class ""keybind""
                :onclick ""$HOME/.config/scripts/hyprland""
                :tooltip ""Hyprland.conf""
            (label :text ""ÔÑú"" :class ""tooltip""))
            (button :class ""logout""
                :onclick ""bash $HOME/.config/scripts/logout.sh""
                :tooltip ""Logout""
            (label :text ""ÔÄë"" :class ""tooltip"")
            )
        )
    )
)

(defwidget right []
    (box :class ""right"" :orientation ""v"" :space-evenly ""false""
        (cal)
        (dash)
        (window-title)
        (dash)
        (info)
        (dash)
        (apps)
        (dash)
        (weather)
        (dash)
        (network)
        (network-up)
        (network-down)
        (dash)
        (disktemp)
        (system)
	(dash)
	(functions)
    )
)

(defwindow sidebar
    :monitor 0
    :geometry (geometry :x ""16px""
                        :y ""40px""
                        :width ""140px""
                        :height ""60%""
                        :anchor ""top left"")
    :stacking ""fg""
    :windowtype ""dock""
    :exclusive true
        (box :class ""main-container""
        (right)
    )
)"
j0KyLKv6,[iamDvz] Orbit's cleanse problem,iamDvz,JavaScript,Sunday 31st of March 2024 06:02:05 AM CDT,"
horo_skill_ghosts_musp_orbit_base: &horo_skill_ghosts_musp_orbit_base_copy
    spell-class: "".targeted.OrbitSpell""
    helper-spell: true
    target-self: true
    horiz-expand-delay: 0
    horiz-expand-radius: 0
    vert-expand-delay: 0
    vert-expand-radius: 0
    start-horiz-offset: 0
    hit-radius: 2
    seconds-per-revolution: 4.5
    orbit-radius: 1.5
    tick-interval: 1
    max-duration: 15
    y-offset: -1
    stop-on-hit-entity: false
    stop-on-hit-ground: false
    can-hit:
        - players
        - nonplayers
    spell: tdummy
    effects:
      1_1:
        position: projectile
        effect: entity
        height-offset: 2
        entity:
            entity: item_display
            silent: true
            item: gunpowder{customModelData:1}
            item-display-transform: NONE
            glow-color-override: ffffffff
            glowing: true
            shadow-radius: 0
            shadow-strength: 0
            interpolation-delay: -1
            interpolation-duration: 15
            teleport-duration: 2
            transformation:
                left-rotation: ""0,-0.707,0,0.707""
                right-rotation: ""0,0,0,1""
                translation: ""0,0,0""
                scale: ""1,1,1""
      1_2:
        position: special
        effect: particles
        particle-name: dust
        color: ffffff
        horiz-spread: 0.2
        vert-spread: 0.2
        speed: 0
        count: 1
        height-offset: 2
horo_skill_ghosts_musp_orbit_1: {<<: *horo_skill_ghosts_musp_orbit_base_copy, start-horiz-offset: 0}

#### ~~~~ ####
horo_skill_ghosts_musp_dummy_musp_1:
    spell-class: "".MultiSpell""
    helper-spell: true
    modifiers:
        - buffactive horo_skill_ghosts_musp_buff_1 required
    spells:
        - horo_skill_ghosts_musp_dummy_musp_1_cleanse
        - horo_skill_ghosts_musp_dummy_musp_ppj
        - DELAY 1
        - horo_skill_ghosts_musp_dummy(mode=FULL)
horo_skill_ghosts_musp_dummy_musp_1_cleanse:
    spell-class: "".targeted.CleanseSpell""
    helper-spell: true
    target-self: true
    variable-mods-cast:
        - fruit_skill_animation_1 =0
    remove:
        - loop:fruit_skill_animation_1
        - buff:horo_skill_ghosts_musp_buff_1
        - orbit:horo_skill_ghosts_musp_orbit_1"
n354J9cQ,data882,TestGuy1,JSON,Sunday 31st of March 2024 06:00:06 AM CDT,"{
  status: 'Success',
  method: 'server',
  maindata: '4313e4de19d242d64011ff781e2782f620a100bfb93124a44ea450919b2b23bd6a14cbdd520adad223a378d2a0df8aca71708b2be86122e8e0125490c9a11758422d04fa4959d29260b1986b3b6de04fab655882f4c142c56844590499f37d841e7cf098ff6666aadbd95140791dd7bc39d509c2cf93c19b40dafb5f38637cff',
  otherdata: [
    '8d1576f52e7c854fa3430cc021b82de4',
    'd83633aebf8888be377cdce4c7563db8',
    '8c27bd44dcef836dfa5849223d52b6ee',
    '89fb0f1124d430a63b788854f9e2f15c',
    'b23614fe7d17d1208185349389636c6b',
    '7cbc7a4ece44caadabf075e3d6a86183',
    '494a21a39a7dc179f672b864acd7ea5d',
    '411a397df7b1e9882c51270038a618a9'
  ]
}"
cyUDQEVX,08. Tennis Ranklist,GabrielHr00,Java,Sunday 31st of March 2024 05:21:32 AM CDT,"package _04_ForLoops;

import java.util.Scanner;

public class TennisRanklist {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int tournamentsCount = Integer.parseInt(scanner.nextLine());
        int startingPoints = Integer.parseInt(scanner.nextLine());

        int wonPoints = 0;
        int winsCounter = 0;
        for (int i = 1; i <= tournamentsCount; i++) {
            String result = scanner.nextLine();

            switch (result) {
                case ""W"":
                    winsCounter += 1;
                    wonPoints += 2000;
                    break;
                case ""F"":
                    wonPoints += 1200;
                    break;
                case ""SF"":
                    wonPoints += 720;
                    break;
            }
        }

        System.out.printf(""Final points: %d%n"", startingPoints + wonPoints);
        System.out.printf(""Average points: %d%n"", wonPoints / tournamentsCount);
        System.out.printf(""%.2f%%"", (1.0 * winsCounter) / tournamentsCount * 100);

    }
}"
Ls2BJqsT,07. Trekking Mania,GabrielHr00,Java,Sunday 31st of March 2024 05:20:18 AM CDT,"package _04_ForLoops;

import java.util.Scanner;

public class TrekkingMania {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int groupsCount = Integer.parseInt(scanner.nextLine());

        int allPeople = 0;
        int musalaPeople = 0;
        int monblancPeople = 0;
        int kilimandjaroPeople = 0;
        int k2People = 0;
        int everestPeople = 0;

        for (int i = 1; i <= groupsCount; i++) {
            int people = Integer.parseInt(scanner.nextLine());
            allPeople += people;

            if(people <= 5) {
                musalaPeople += people;
            } else if (people <= 12) {
                monblancPeople += people;
            } else if (people <= 25) {
                kilimandjaroPeople += people;
            } else if (people <= 40) {
                k2People += people;
            } else if (people >= 41) {
                everestPeople += people;
            }
        }

        System.out.printf(""%.2f%%%n"", (1.0 * musalaPeople) / allPeople * 100);
        System.out.printf(""%.2f%%%n"", (1.0 * monblancPeople) / allPeople * 100);
        System.out.printf(""%.2f%%%n"", (1.0 * kilimandjaroPeople) / allPeople * 100);
        System.out.printf(""%.2f%%%n"", (1.0 * k2People) / allPeople * 100);
        System.out.printf(""%.2f%%%n"", (1.0 * everestPeople) / allPeople * 100);
    }
}"
hVFKWmsx,06. Oscars,GabrielHr00,Java,Sunday 31st of March 2024 05:18:45 AM CDT,"package _04_ForLoops;

import java.util.Scanner;

public class Oscars {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        String actorName = scanner.nextLine();
        double actorPoints = Double.parseDouble(scanner.nextLine());
        int gradersCount = Integer.parseInt(scanner.nextLine());


        for (int i = 1; i <= gradersCount; i++) {
            String name = scanner.nextLine();
            double points = Double.parseDouble(scanner.nextLine());

            actorPoints += ((1.0 * name.length()) * points) / 2;

            if (actorPoints > 1250.5) {
                break;
            }
        }


        if (actorPoints > 1250.5) {
            System.out.printf(""Congratulations, %s got a nominee for leading role with %.1f!"", actorName, actorPoints);
        } else {
            System.out.printf(""Sorry, %s you need %.1f more!"", actorName, 1250.5 - actorPoints);
        }

    }
}
"
afABWEhb,05. Salary,GabrielHr00,Java,Sunday 31st of March 2024 05:18:05 AM CDT,"package _04_ForLoops;

import java.util.Scanner;

public class Salary {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int tabsCount = Integer.parseInt(scanner.nextLine());
        int salary = Integer.parseInt(scanner.nextLine());

        for (int i = 1; i <= tabsCount; i++) {
            String tabName = scanner.nextLine();

            switch (tabName) {
                case ""Facebook"":
                    salary -= 150;
                    break;
                case ""Instagram"":
                    salary -= 100;
                    break;
                case ""Reddit"":
                    salary -= 50;
                    break;
            }

            if (salary <= 0) {
                System.out.println(""You have lost your salary."");
                break;
            }
        }

        if (salary > 0) {
            System.out.println(salary);
        }
    }
}
"
aCUfZjhM,04. Clever Lily,GabrielHr00,Java,Sunday 31st of March 2024 05:17:27 AM CDT,"package _04_ForLoops;

import java.util.Scanner;

public class CleverLily {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int age = Integer.parseInt(scanner.nextLine());
        double washingMachinePrice = Double.parseDouble(scanner.nextLine());
        int toyPrice = Integer.parseInt(scanner.nextLine());

        int toysCount = 0;
        int savedMoney = 0;
        int birthdayMoney = 10;

        for (int i = 1; i <= age; i += 1) {

            if (i % 2 == 0) {
                savedMoney += birthdayMoney;
                birthdayMoney += 10;

                savedMoney--;
                //savedMoney -= 1;
                //savedMoney = savedMoney - 1;
            } else {
                toysCount += 1;
                // toysCount++;
            }
        }

        int toysTotalSum = toyPrice * toysCount;
        savedMoney += toysTotalSum;

        if (savedMoney >= washingMachinePrice) {
            System.out.printf(""Yes! %.2f"", savedMoney - washingMachinePrice);
        } else {
            System.out.printf(""No! %.2f"", washingMachinePrice - savedMoney);
        }

    }
}
"
Xn58pb5k,03. Histogram,GabrielHr00,Java,Sunday 31st of March 2024 05:16:39 AM CDT,"package _04_ForLoops;

import java.util.Scanner;

public class Histogram {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = Integer.parseInt(scanner.nextLine());

        int p1 = 0;
        int p2 = 0;
        int p3 = 0;
        int p4 = 0;
        int p5 = 0;

        for (int i = 1; i <= n; i++) {
            int number = Integer.parseInt(scanner.nextLine());

            if (number < 200) {
                p1++;
                // p1 = p1 + 1;
                // p1 += 1;
            } else if (number >= 200 && number <= 399) {
                p2++;
            } else if (number >= 400 && number <= 599) {
                p3++;
            } else if (number >= 600 && number <= 799) {
                p4++;
            } else if (number >= 800) {
                p5++;
            }
        }


        System.out.printf(""%.2f%%%n"", (((double) p1) / n) * 100);
        System.out.printf(""%.2f%%%n"", ((1.0 * p2) / n) * 100);
        System.out.printf(""%.2f%%%n"", ((1.0 * p3) / n) * 100);
        System.out.printf(""%.2f%%%n"", ((1.0 * p4) / n) * 100);
        System.out.printf(""%.2f%%"", ((1.0 * p5) / n) * 100);
    }
}"
XpP6GiAM,02. Half Sum Element,GabrielHr00,Java,Sunday 31st of March 2024 05:15:41 AM CDT,"package _04_ForLoops;

import java.util.Scanner;

public class HalfSumElement {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = Integer.parseInt(scanner.nextLine());

        int sum = 0;
        int maxNumber = Integer.MIN_VALUE;

        for (int i = 1; i <= n; i++) {
            int number = Integer.parseInt(scanner.nextLine());
            sum = sum + number;
            // sum += number;

            if (number > maxNumber) {
                maxNumber = number;
            }
        }

        sum -= maxNumber;

        if (sum == maxNumber) {
            System.out.printf(""Yes%nSum = %d"", sum);
        } else {
            System.out.printf(""No%nDiff = %d"", Math.abs(maxNumber - sum));
        }

    }
}
"
xH3j0N3U,01. Numbers Ending in 7,GabrielHr00,Java,Sunday 31st of March 2024 05:15:01 AM CDT,"package _04_ForLoops;

import java.util.Scanner;

public class NumbersEndingIn7 {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        for (int i = 7; i <= 997; i += 10) {
            System.out.println(i);
        }

    }
}"
nJMDEDCL,dym_ttv channel rules,DyM_ttv,JSON,Sunday 31st of March 2024 05:02:53 AM CDT,"1. Keep the chat organized and on-topic. If you want to talk about your dog or your grandma's cooking, take it to the designated channels.
2. No spamming the chat. If you want to be annoying, at least be creative about it.
3. No abusive or discriminatory language. We may shoot each other in-game, but we're all on the same team when it comes to respecting each other.
4. Respect other members of the community. If you wouldn't say it to your mom, don't say it here.
5. No cheating or exploiting. We may be competitive, but we have to earn those kills fair and square.
6. No sharing of personal information. We don't need to know your social security number to play together.
7. Keep the chat family-friendly. Let's save the adult content for after the game, shall we?
8. No spoilers allowed. We don't want to ruin the surprise for anyone who hasn't played yet. You don't want to be that person.
9. No impersonating other members or staff. We already have enough characters in the game, we don't need any imposters in the chat.
10. Follow the instructions of the moderators. They're like the referees of the game, but with fewer whistles and more emotes."
8fSxPTJL,business inquiries,DyM_ttv,CSS,Sunday 31st of March 2024 04:54:07 AM CDT,"Contacts:
Name: Rimvydas Dima
Email: rimvydas.dima@gmail.com
"
0ZR4g0Ja,make-xz - simple frontend for tar & xz,pintcat,Bash,Sunday 31st of March 2024 04:40:49 AM CDT,"#!/bin/sh
# make-xz v1.0 - simple frontend for tar & xz with a nice progress bar. Usage: make-xz.sh [path to source file or dir] [path to target file]
# It checks if the source path is a file or directory and decides whether to use tar in addition or not. Is no target given the source path is
# used for the archive. The xz or tar.xz suffixes will be added automatically if not present in the target file name. Use the $COMPRESS variable
# to set compression method and strength.

. progress.sh

ERROR(){
        printf ""\033[0;31mError - $1\033[0;32m\n""
        exit 1
}

[ -z ""$1"" ] || [ ! -e ""$1"" ] && ERROR ""Wrong input path or file name or none at all.""

LOG=/media/ramdisk/log_$(date +%y%m%d%H%M%S%3N)
PROGRESS_MAX=$(($(du -s -- ""$1"" | cut -f1)/102))
PROGRESS_E="" ""
PROGRESS_FT=S
#COMPRESS=""--lzma2=dict=256MiB,lc=0,lp=0,pb=2,mode=normal,nice=273,mf=bt4,depth=512""
COMPRESS=-9e

[ -d ""$1"" ] && SUFFIX=.tar.xz || SUFFIX=.xz
if [ -z ""$2"" ]; then
	OUT=""$1""$SUFFIX
else
	FILENAME=${2%*$SUFFIX}
	[ -z ${2#$FILENAME*} ] && OUT=""$2""$SUFFIX || OUT=""$2""
fi
if [ -e ""$OUT"" ]; then
	read -r -p ""Output file already exists. Overwrite (y/N)? "" OPT
	case $OPT in
		y|Y)
			rm -f ""$OUT""
			;;
		*)
			ERROR ""Error: Unable to write output file.""
			;;
	esac
fi
# XZ triggers a SIGALRM every second as an indicator to print its progress output to stdout.
# However, by redirecting XZ's output the SIGALRM is no longer sent preventing XZ from emitting any progress info.
# With the following code the SIGALRM is sent ""manually"" making XZ print its progress again and wherever we want.
{
	if [ $SUFFIX = .xz ]; then
		xz -vvcz $COMPRESS ""$1"" > ""$OUT"" & XZ_PID=$!
	else
		tar -c ""$1"" | xz -vvcez $COMPRESS > ""$OUT"" & XZ_PID=$!
	fi
	while sleep 0.2s; do
		kill -ALRM ""$XZ_PID"" || break
	done
	wait ""$XZ_PID""
} 2>$LOG &

while ! grep -qs % $LOG; do sleep 0.2s; done    # Wait for XZ starting its process.
while [ -n ""$(ps -e | grep ' xz')"" ]; do
	# The long SED filter chain at the end strips the output down to a clean number by removing all leading zeros
	# and any other unwanted junk while preserving the value if it's just zero.
	PROGRESS_BAR $(tail -n1 $LOG | cut -d""/"" -f2 | awk -F 'MiB = ' '{print $1}' | sed 's/[^0-9]*//g;s/^0*\([1-9]\)/\1/;s/^0*$/0/')
	sleep 0.2s
done
PROGRESS_BAR $PROGRESS_MAX
rm -f $LOG
printf ""\n\n\n""
"
FqdHDt3D,top tips,DyM_ttv,C#,Sunday 31st of March 2024 04:37:09 AM CDT,"Updated: 2024/03/31
Rank	Username	Total amount	Average tip 	Total tips

1	Anglas1987		‚Ç¨ 220.00		‚Ç¨ 15.00		14
2	tomshe2010		‚Ç¨ 50.00		‚Ç¨ 25.00		2
3	tralialia		‚Ç¨ 50.00		‚Ç¨ 50.00		1
4	Gizmis			‚Ç¨ 46.74		‚Ç¨ 15.00		3
5	Rtbs			‚Ç¨ 20.00		‚Ç¨ 20.00		1
6	TomSz91			‚Ç¨ 15.00		‚Ç¨ 15.00		1
7	MGKentTV		‚Ç¨ 4.00		‚Ç¨ 2.00		2
8	DrexDrugsDrex	‚Ç¨ 3.50		‚Ç¨ 3.00		1
9	V0VA			‚Ç¨ 2.00		‚Ç¨ 2.00		1
10	v3gee			‚Ç¨ 1.00		‚Ç¨ 1.00		1
"
zZDtNVQH,[GMod] Fix Map Script example,tetratheta,Lua,Sunday 31st of March 2024 04:36:01 AM CDT,"-- lua/autorun/server/fixmap_luts_scape03.lua
local function fixmap_luts_scape03()
  if game.GetMap() == ""scape03"" then
    local door = ents.FindByName(""weapon_equip_ensure"")[1]
    door:Input(""AddOutput"", door, nil, ""OnOpen wake_prisonguard,Trigger,,0,1"")
  end
end
hook.Add(""InitPostEntity"", ""FixMap_LUTS_scape03"", fixmap_luts_scape03)
"
25YvVp0Q,lps.cpp,AbdeltwabMF,C++,Sunday 31st of March 2024 04:31:02 AM CDT,"#include <iostream>
#include <string>

using std::string;

const int N = 1005;

class Solution
{
public:
  int dp[N][N];
  
  void build(const string &s)
  {
    size_t n = s.size();
    for (int i = n; i >= 0; --i)
    {
      dp[i][i] = 1;
    }

    for (int i = n; i >= 0; --i)
    {
      for (int j = i; j <= n; ++j)
      {
        if (s[i] == s[j])
        {
          dp[i][j] = (i + 1 > j - 1 ? 1 : dp[i + 1][j - 1]);
        }
      }
    }
  }

  string longestPalindrome(const string &s)
  {
    build(s);

    int len{};
    int start{};
    for (int i = 0; i < s.size(); ++i)
    {
      for (int j = i; j < s.size(); ++j)
      {
        if (dp[i][j] && (j - i + 1) > len)
        {
          start = i;
          len = j - i + 1;
        }
      }
    }
    return s.substr(start, len);
  }
};"
pasJNSk8,Untitled,CodingComputing,Python,Sunday 31st of March 2024 04:04:30 AM CDT,"# *Letters and Number Triangle Pattern* by @CodingComputing
from string import ascii_uppercase as alphas  # Alphabets
from string import digits  # String digits 0...9
natural_nums = digits[1:]  # String digits 1...9, because pattern starts from 1

height = 5  # height of the pattern
max_width = 2*height + (2*height-1)
# `height` number of alphabets, plus `height` number of digits,
# plus `2*height-1` number of spaces between characters

for row_idx in range(height):
    # Slice starting from row_idx, of (row_idx+1) items ahead
    row_slice = slice(row_idx, 2*row_idx+1)
    row_alphas = alphas[row_slice]  # slice out from alphas
    row_digits = natural_nums[row_slice]  # slice out from digits
    row_chars = row_alphas + row_digits  # characters to be printed in current row
    row_content = ' '.join(list(row_chars))  # insert spaces between chars
    print(f""{row_content:^{max_width}}"")  # format to centre at max_width

# Output:
#         A 1        
#       B C 2 3      
#     C D E 3 4 5    
#   D E F G 4 5 6 7  
# E F G H I 5 6 7 8 9
"
0m7cDrZH,Server info Vanilla,wolfgg1,HTML,Sunday 31st of March 2024 04:02:14 AM CDT,"<align=center><size=20><b><color=#25fff4>K</color><color=#1befe4>O</color><color=#11dfd4>F</color><color=#07cfc5>E</color><color=#03c2be>V</color><color=#0ebaca>A</color><color=#18b3d6>R</color><color=#23abe2>K</color><color=#2d9de6>A</color></b> <b><color=#447ae6>S</color><color=#4f68e6>L</color></b>    <b><color=#4786dc>///</color></b>    <b><color=#5e7df9>V</color><color=#697aff>A</color><color=#7975ff>N</color><color=#8a71ff>I</color><color=#9b6cff>L</color><color=#ab68ff>L</color><color=#bc64ff>A</color></b></size></align>

<align=center><size=17><link=""https://latteinc.net""><mark=#358245><size=13>|<space=0.65em>üåê<space=0.65em>|</size></mark><mark=#50b564>||<space=2.65em></mark><mark=#55c26b> –°–∞–π—Ç –ø—Ä–æ—î–∫—Ç—É|<space=2.65em>|</mark></link></size></align>

<align=center><link=""https://discord.gg/VmW4WrTXuu""><mark=#3a6ce0>|<space=0.65em>üí¨<space=0.65em>|</mark><mark=#5476c7>||<space=1.65em></mark><mark=#5075cc> –î—ñ—Å–∫–æ—Ä–¥ –ø—Ä–æ—î–∫—Ç—É ·¥ã·¥èÍú∞·¥á·¥†·¥Ä Ä·¥ã·¥Ä |<space=1.65em>|</mark></link></align>
 
<align=center><link=""https://discord.gg/P7ykfm4uWm""><mark=#3a6ce0>|<space=0.65em>üí¨<space=0.65em>|</mark><mark=#5476c7>||<space=1.65em></mark><mark=#5075cc> –î—ñ—Å–∫–æ—Ä–¥ –ø–∞—Ä—Ç–Ω–µ—Ä–∞  ü·¥Ä·¥õ·¥õ·¥á…™…¥·¥Ñ |<space=1.65em>|</mark></link></align>

<align=center><b><size=10>¬©LATTEINC SCP: SL.</size=10></b></align>
<size=0>Empty space</size>"
zqTe0JV4,christmasGiftsSoftUni,zarkoto223,JavaScript,Sunday 31st of March 2024 04:01:23 AM CDT,"function asd(input) {
  let index = 0;
  let command = input[index];
  let kids = 0;
  let adults = 0;
  let toyMoney = 0;
  let sweeatersMoney = 0;

  while (command !== ""Christmas"") {
    let age = Number(input[index]);
    index++;
    if (age <= 16) {
      kids += 1;
      toyMoney += 5;
    } else {
      adults += 1;
      sweeatersMoney += 15;
    }
    command = input[index];
  }

  console.log(`Number of adults: ${adults}`);
  console.log(`Number of kids: ${kids}`);
  console.log(`Money for toys: ${toyMoney}`);
  console.log(`Money for sweaters: ${sweeatersMoney}`);
}"
6n8PTUix,console-export-2024-3-31_15-46-35,BeastMark,Nginx,Sunday 31st of March 2024 03:47:24 AM CDT,"GET
https://easylauncher.org/combine/d681d8295f1782a8093d92ef41c11b77-1711559308
[HTTP/2 500  110ms]

GET
https://easylauncher.org/combine/c69e87c13c78e5ff18e51a597055cf06-1711701518
[HTTP/2 500  106ms]

GET
https://easylauncher.org/combine/4ec590bbe243eb5e5ff4e8939e0af0ef-1711450977
[HTTP/2 500  106ms]

GET
https://easylauncher.org/combine/30b4e70f922c4442010ec82ddb1222a9-1711571277
[HTTP/2 500  106ms]

–ó–∞–≥—Ä—É–∑–∫–∞ <script> –ø–æ –∞–¥—Ä–µ—Å—É ¬´https://easylauncher.org/combine/d681d8295f1782a8093d92ef41c11b77-1711559308¬ª –Ω–µ —É–¥–∞–ª–∞—Å—å. easylauncher.org:83:123
GET
https://easylauncher.org/combine/c69e87c13c78e5ff18e51a597055cf06-1711701518
[HTTP/2 500  65ms]

–ó–∞–≥—Ä—É–∑–∫–∞ <script> –ø–æ –∞–¥—Ä–µ—Å—É ¬´https://easylauncher.org/combine/c69e87c13c78e5ff18e51a597055cf06-1711701518¬ª –Ω–µ —É–¥–∞–ª–∞—Å—å. easylauncher.org:612:127
GET
https://easylauncher.org/combine/4ec590bbe243eb5e5ff4e8939e0af0ef-1711450977
[HTTP/2 500  70ms]

–ó–∞–≥—Ä—É–∑–∫–∞ <script> –ø–æ –∞–¥—Ä–µ—Å—É ¬´https://easylauncher.org/combine/4ec590bbe243eb5e5ff4e8939e0af0ef-1711450977¬ª –Ω–µ —É–¥–∞–ª–∞—Å—å. easylauncher.org:718:119
Uncaught Error: The jQuery library is not loaded. The OctoberCMS framework cannot be initialized.
    <anonymous> https://easylauncher.org/modules/system/assets/js/framework.combined-min.js?v=1:2
framework.combined-min.js:2:37
Swiper Loop Warning: The number of slides is not enough for loop mode, it will be disabled and not function properly. You need to add more slides (or make duplicates) or lower the values of slidesPerView and slidesPerGroup parameters 2 0:348:14
Uncaught ReferenceError: detectClientOS is not defined
    <anonymous> https://easylauncher.org/:781
easylauncher.org:781:24
Swiper Loop Warning: The number of slides is not enough for loop mode, it will be disabled and not function properly. You need to add more slides (or make duplicates) or lower the values of slidesPerView and slidesPerGroup parameters 0:348:14
GET
https://easylauncher.org/combine/30b4e70f922c4442010ec82ddb1222a9-1711571277
[HTTP/2 500  71ms]

Swiper Loop Warning: The number of slides is not enough for loop mode, it will be disabled and not function properly. You need to add more slides (or make duplicates) or lower the values of slidesPerView and slidesPerGroup parameters 0:348:14
Uncaught (in promise) ReferenceError: $ is not defined
    animateSakura https://easylauncher.org/themes/easylauncher/assets/js/animations.js?v=5:4
    <anonymous> https://easylauncher.org/themes/easylauncher/assets/js/animations.js?v=5:201
    <anonymous> https://easylauncher.org/themes/easylauncher/assets/js/animations.js?v=5:203
animations.js:4:24
Swiper Loop Warning: The number of slides is not enough for loop mode, it will be disabled and not function properly. You need to add more slides (or make duplicates) or lower the values of slidesPerView and slidesPerGroup parameters 2 0:348:14
–ó–∞–≥—Ä—É–∑–∫–∞ <script> –ø–æ –∞–¥—Ä–µ—Å—É ¬´https://easylauncher.org/combine/30b4e70f922c4442010ec82ddb1222a9-1711571277¬ª –Ω–µ —É–¥–∞–ª–∞—Å—å. easylauncher.org:797:119
InstallTrigger —É—Å—Ç–∞—Ä–µ–ª –∏ –±—É–¥–µ—Ç —É–¥–∞–ª—ë–Ω –≤ –±—É–¥—É—â–µ–º. tag.js:161:110
–ù–µ–∫–æ—Ç–æ—Ä—ã–µ –∫—É–∫–∏ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ –∏—Å–ø–æ–ª—å–∑—É—é—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–Ω—ã–π –∞—Ç—Ä–∏–±—É—Ç ¬´SameSite¬ª 6
–ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –Ω–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ entryTypes: longtask. tag.js:378:7
Swiper Loop Warning: The number of slides is not enough for loop mode, it will be disabled and not function properly. You need to add more slides (or make duplicates) or lower the values of slidesPerView and slidesPerGroup parameters 2 0:348:14
Swiper Loop Warning: The number of slides is not enough for loop mode, it will be disabled and not function properly. You need to add more slides (or make duplicates) or lower the values of slidesPerView and slidesPerGroup parameters 2 0:348:14
"
uJHvbY9u,EasyLauncher ‚Äî —Ä–µ–≤–æ–ª—é—Ü–∏–æ–Ω–Ω—ã–π Minecraft –ª–∞—É–Ω—á–µ—Ä!,BeastMark,HTML,Sunday 31st of March 2024 03:45:42 AM CDT,"<!DOCTYPE html>
<html lang=""ru"">
    <head>
        <meta charset=""utf-8"">
        <meta http-equiv=""Content-Type"" content=""text/html; charset=UTF-8"" />
        <meta name=""author"" content=""EasyX"">
        <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
        <meta name=""og:site_name"" content=""EasyLauncher"">
        <meta name=""og:locale"" content=""ru"">
        <meta name=""og:type"" content=""website"">
        <meta name=""keywords"" content=""easylauncher, –∏–∑–∏–ª–∞—É–Ω—á–µ—Ä, –ª–∞—É–Ω—á–µ—Ä, –º–∞–π–Ω–∫—Ä–∞—Ñ—Ç, minecraft, —Å–∫–∞—á–∞—Ç—å, –±–µ—Å–ø–ª–∞—Ç–Ω–æ"">

        <link rel=""apple-touch-icon"" sizes=""180x180"" href=""/themes/easylauncher/assets/images/apple-touch-icon.png"">
        <link rel=""icon"" type=""image/png"" sizes=""130x130"" href=""/themes/easylauncher/assets/images/favicon.png"">
        <link rel=""icon"" type=""image/png"" sizes=""32x32"" href=""/themes/easylauncher/assets/images/favicon-32x32.png"">
        <link rel=""icon"" type=""image/png"" sizes=""16x16"" href=""/themes/easylauncher/assets/images/favicon-16x16.png"">
        <link rel=""manifest"" href=""/themes/easylauncher/assets/images/site.webmanifest"">
        <link rel=""mask-icon"" href=""/themes/easylauncher/assets/images/safari-pinned-tab.svg"" color=""#5bbad5"">
        <meta name=""msapplication-TileColor"" content=""#da532c"">
        <meta name=""msapplication-config"" content=""/themes/easylauncher/assets/images/browserconfig.xml"">
        <meta name=""theme-color"" content=""#ffffff"">

            <link rel=""alternate"" hreflang=""ru"" href=""https://easylauncher.org"" />

        <link rel=""preconnect"" href=""https://fonts.googleapis.com"">
        <link rel=""preconnect"" href=""https://fonts.gstatic.com"" crossorigin>
        <link href=""https://fonts.googleapis.com/css2?family=Unbounded:wght@200..900&display=swap"" rel=""stylesheet"">
        <link href=""https://fonts.googleapis.com/css2?family=Golos+Text:wght@400..900&family=Unbounded:wght@200..900&display=swap"" rel=""stylesheet"">

        <link href=""https://unpkg.com/aos@2.3.1/dist/aos.css"" rel=""stylesheet"">

        <link rel=""stylesheet"" href=""https://easylauncher.org/combine/cbdd04e201bb3051c3255094c5cbe6ba-1711715924"">

		<title>EasyLauncher ‚Äî —Ä–µ–≤–æ–ª—é—Ü–∏–æ–Ω–Ω—ã–π Minecraft –ª–∞—É–Ω—á–µ—Ä!</title>
    <meta name=""title"" content=""EasyLauncher ‚Äî Minecraft –ª–∞—É–Ω—á–µ—Ä –±–µ–∑ –≥—Ä–∞–Ω–∏—Ü!"">
    <meta name=""og:title"" content=""EasyLauncher ‚Äî Minecraft –ª–∞—É–Ω—á–µ—Ä –±–µ–∑ –≥—Ä–∞–Ω–∏—Ü!"">
    <meta name=""description"" content=""–°–∫–∞—á–∞—Ç—å EasyLauncher ‚Äî —Å–∞–º—ã–π –ª—É—á—à–∏–π –∏ –±–µ–∑–æ–ø–∞—Å–Ω—ã–π –ª–∞—É–Ω—á–µ—Ä –ú–∞–π–Ω–∫—Ä–∞—Ñ—Ç. –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –ª—é–±—ã—Ö –≤–µ—Ä—Å–∏–π Minecraft, –∞ —Ç–∞–∫–∂–µ Forge, Fabric, Quilt, OptiFine. –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–µ HD —Å–∫–∏–Ω—ã."">
    <meta name=""og:description"" content=""–°–∫–∞—á–∞—Ç—å EasyLauncher ‚Äî —Å–∞–º—ã–π –ª—É—á—à–∏–π –∏ –±–µ–∑–æ–ø–∞—Å–Ω—ã–π –ª–∞—É–Ω—á–µ—Ä –ú–∞–π–Ω–∫—Ä–∞—Ñ—Ç. –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –ª—é–±—ã—Ö –≤–µ—Ä—Å–∏–π Minecraft, –∞ —Ç–∞–∫–∂–µ Forge, Fabric, Quilt, OptiFine. –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–µ HD —Å–∫–∏–Ω—ã."">
    <meta name=""og:image"" content=""https://cdn.easylauncher.org/static/images/easylauncher-og.jpg"">
    <link rel=""stylesheet"" href=""https://cdnjs.cloudflare.com/ajax/libs/animate.css/4.1.1/animate.min.css"">

    <!-- <link rel=""preload"" as=""fetch"" href=""https://cdn.easylauncher.org/static/lottie/features/feature-fast.json"" type=""application/json""> -->

    <link rel=""preload"" as=""image"" imagesrcset=""https://cdn.easylauncher.org/static/lottie/features/feature-fast-preview-1x.webp 1x, https://cdn.easylauncher.org/static/lottie/features/feature-fast-preview-2x.webp 2x"">
    <link rel=""preload"" as=""image"" imagesrcset=""https://cdn.easylauncher.org/static/lottie/features/feature-fast-play-preview-1x.webp 1x, https://cdn.easylauncher.org/static/lottie/features/feature-fast-play-preview-2x.webp 2x"">
    <link rel=""preload"" as=""image"" imagesrcset=""https://cdn.easylauncher.org/static/images/features/feature-accent-red-1x.webp 1x, https://cdn.easylauncher.org/static/images/features/feature-accent-red-2x.webp 2x"">
    <link rel=""preload"" as=""image"" imagesrcset=""https://cdn.easylauncher.org/static/images/features/feature-accent-orange-1x.webp 1x, https://cdn.easylauncher.org/static/images/features/feature-accent-orange-2x.webp 2x"">
    <link rel=""preload"" as=""image"" imagesrcset=""https://cdn.easylauncher.org/static/images/features/feature-accent-yellow-1x.webp 1x, https://cdn.easylauncher.org/static/images/features/feature-accent-yellow-2x.webp 2x"">
    <link rel=""preload"" as=""image"" imagesrcset=""https://cdn.easylauncher.org/static/images/features/feature-accent-green-1x.webp 1x, https://cdn.easylauncher.org/static/images/features/feature-accent-green-2x.webp 2x"">
    <link rel=""preload"" as=""image"" imagesrcset=""https://cdn.easylauncher.org/static/images/features/feature-accent-blue-1x.webp 1x, https://cdn.easylauncher.org/static/images/features/feature-accent-blue-2x.webp 2x"">
    <link rel=""preload"" as=""image"" imagesrcset=""https://cdn.easylauncher.org/static/images/features/feature-accent-violet-1x.webp 1x, https://cdn.easylauncher.org/static/images/features/feature-accent-violet-2x.webp 2x"">
    <link rel=""preload"" as=""image"" imagesrcset=""https://cdn.easylauncher.org/static/images/features/feature-accent-pink-1x.webp 1x, https://cdn.easylauncher.org/static/images/features/feature-accent-pink-2x.webp 2x"">
    <link rel=""preload"" as=""image"" imagesrcset=""https://cdn.easylauncher.org/static/lottie/features/feature-client-editor-preview-1x.png 1x, https://cdn.easylauncher.org/static/lottie/features/feature-client-editor-preview-2x.png 2x"">
    <link rel=""preload"" as=""image"" imagesrcset=""https://cdn.easylauncher.org/static/lottie/features/feature-accounts-preview-1x.png 1x, https://cdn.easylauncher.org/static/lottie/features/feature-accounts-preview-2x.png 2x"">
    <link rel=""preload"" as=""image"" imagesrcset=""https://cdn.easylauncher.org/static/lottie/features/feature-skins-preview-1x.webp 1x, https://cdn.easylauncher.org/static/lottie/features/feature-skins-preview-2x.webp 2x"">
    <link rel=""preload"" as=""image"" href=""https://cdn.easylauncher.org/static/lottie/features/feature-lines-preview.svg"">
    <link rel=""preload"" as=""image"" href=""https://cdn.easylauncher.org/static/lottie/features/feature-themes-preview.svg"">

    <style media=""screen"">
        html, body {
            overflow-x: hidden;
        }
    </style>
        
        <!-- Yandex.Metrika counter -->
        <script type=""text/javascript"" >
           (function(m,e,t,r,i,k,a){m[i]=m[i]||function(){(m[i].a=m[i].a||[]).push(arguments)};
           m[i].l=1*new Date();
           for (var j = 0; j < document.scripts.length; j++) {if (document.scripts[j].src === r) { return; }}
           k=e.createElement(t),a=e.getElementsByTagName(t)[0],k.async=1,k.src=r,a.parentNode.insertBefore(k,a)})
           (window, document, ""script"", ""https://mc.yandex.ru/metrika/tag.js"", ""ym"");

           ym(88222347, ""init"", {
                clickmap:true,
                trackLinks:true,
                accurateTrackBounce:true,
                webvisor:true
           });
        </script>
        <noscript><div><img src=""https://mc.yandex.ru/watch/88222347"" style=""position:absolute; left:-9999px;"" alt="""" /></div></noscript>
        <!-- /Yandex.Metrika counter -->

        <script type=""text/javascript"" src=""https://easylauncher.org/combine/d681d8295f1782a8093d92ef41c11b77-1711559308""></script>

        <script src=""https://cdnjs.cloudflare.com/ajax/libs/bodymovin/5.9.6/lottie.min.js"" integrity=""sha512-yAr4fN9WZH6hESbOwoFZGtSgOP+LSZbs/JeoDr02pOX4yUFfI++qC9YwIQXIGffhnzliykJtdWTV/v3PxSz8aw=="" crossorigin=""anonymous"" referrerpolicy=""no-referrer""></script>

        <script type=""text/javascript"">
            function getUrlParams(param = false) {
                var params = [], hash;
                var hashes = window.location.href.slice(window.location.href.indexOf('?') + 1).split('&');
                for(var i = 0; i < hashes.length; i++) {
                    hash = hashes[i].split('=');
                    params.push(hash[0]);
                    params[hash[0]] = hash[1];
                }

                return param ? params[param] : params;
            }
        </script>
    </head>

    <body>
        <header id=""header-main"">
        <nav class=""navbar navbar-main navbar-expand-lg navbar-light d-block"" id=""navbar-main"">
        <div class=""container-xxl d-block"">
            <div class=""d-flex align-items-center position-relative"">
                <a class=""navbar-brand"" href=""https://easylauncher.org"">
                    <div class=""d-flex align-items-center"">
                        <img src=""https://easylauncher.org/themes/easylauncher/assets/images/services/logo-beta-light.svg"" class=""logo-beta-lignt"">
                        <img src=""https://easylauncher.org/themes/easylauncher/assets/images/services/logo-beta-dark.svg"" class=""logo-beta-dark"">
                        <h5 class=""logo d-sm-block d-none"">EasyLauncher</h5>
                    </div>
                </a>
                <!-- <button class=""navbar-toggler"" style=""position: absolute; right: 0; top: 50%; transform: translateY(-50%)"" type=""button"" data-toggle=""collapse"" data-target=""#navbar-main-collapse"" aria-controls=""navbar-main-collapse"" aria-expanded=""false"" aria-label=""Toggle navigation"">
                    <span class=""navbar-toggler-icon""></span>
                </button> -->
                <div class=""collapse navbar-collapse navbar-collapse-overlay"" style=""background: inherit"" id=""navbar-main-collapse"">
                    <div class=""position-relative"">
                        <!-- <button class=""navbar-toggler"" type=""button"" data-toggle=""collapse"" data-target=""#navbar-main-collapse"" aria-controls=""navbar-main-collapse"" aria-expanded=""false"" aria-label=""Toggle navigation"">
                            <svg width=""14"" height=""14"" viewBox=""0 0 14 14"" fill=""none"" xmlns=""http://www.w3.org/2000/svg"">
                                <path d=""M1 1L7 7M13 13L7 7M7 7L13 1M7 7L1 13"" stroke=""white""/>
                            </svg>
                        </button> -->
                    </div>
                    <ul class=""navbar-nav"">
                                            </ul>
                </div>
                <ul class=""navbar-nav align-items-center d-flex ml-auto"">
                    <li class=""nav-item-spaced d-none d-lg-block"">
                        <a href=""https://easylauncher.org/download"" class=""btn header-btn btn-download btn-default"">
                            –ó–∞–≥—Ä—É–∑–∏—Ç—å –ª–∞—É–Ω—á–µ—Ä
                            <div class=""download-icon""></div>
                        </a>
                    </li>
                    <li class=""nav-item-spaced dropdown dropdown-animate authentication""></li>
                </ul>
            </div>

            <div class=""subheader"">
                            </div>
        </div>
    </nav>
</header>
        <main class=""content"">
            

<style media=""screen"">
    .welcome {
        border-radius: 24px;
        background: transparent;
        transition: .2s ease all;
        padding: 100px 0;
    }

    @media (min-width: 1200px) {
        .welcome {
            background: var(--welcome-background-color);
            overflow: hidden;
            padding: calc(15% - 5px) 0;
        }
    }
</style>

<div class=""container-fluid"">
    <div class=""preview welcome"">
        <div class=""decor""></div>
        <style media=""screen"">
            .sakura-animation-wrapper {
                position: absolute;
                bottom: 0;
                right: -99999px;
                width: 100%;
                min-width: 1680px;
            }
        </style>
        <div class=""sakura-animation-wrapper d-xl-block d-none"">
            <svg style=""position: absolute; bottom: 0; right: 0;"" width=""774"" height=""741"" viewBox=""0 0 774 741"" fill=""none"" xmlns=""http://www.w3.org/2000/svg"">
                <path d=""M0 549C0 245.796 245.796 0 549 0C629.175 0 705.336 17.1863 774 48.0758V717C774 730.255 763.255 741 750 741H34.5094C12.1973 681.237 0 616.543 0 549Z"" fill=""url(#paint0_radial_9965_23408)""/>
                <defs>
                    <radialGradient id=""paint0_radial_9965_23408"" cx=""0"" cy=""0"" r=""1"" gradientUnits=""userSpaceOnUse"" gradientTransform=""translate(774 726.5) rotate(-145.78) scale(735.287 768.032)"">
                        <stop stop-color=""#FF6EC5""/>
                        <stop offset=""0.412798"" stop-color=""#FF6EC5"" stop-opacity=""0.587202""/>
                        <stop offset=""1"" stop-color=""#FF6EC5"" stop-opacity=""0""/>
                    </radialGradient>
                </defs>
            </svg>
            <div class=""sakura-animation""></div>
        </div>


        <div class=""container"" data-aos=""fade-right"" data-aos-once=""true"">
            <div class=""row"">
                <div class=""col-xl-6"">
                    <h1 class=""title text-xl-left text-center display-4 text-unbounded"">–†–µ–≤–æ–ª—é—Ü–∏–æ–Ω–Ω—ã–π Minecraft –ª–∞—É–Ω—á–µ—Ä!</h1>
                    <p class=""subtitle text-xl-left text-center"">–û—Ç–∫—Ä–æ–π—Ç–µ –¥–ª—è —Å–µ–±—è –±–µ–∑–≥—Ä–∞–Ω–∏—á–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –¥–ª—è —Ç–≤–æ—Ä—á–µ—Å—Ç–≤–∞ –∏ –≤—ã–∂–∏–≤–∞–Ω–∏—è –≤ —É–Ω–∏–∫–∞–ª—å–Ω–æ–π –∫—É–±–∏—á–µ—Å–∫–æ–π –≤—Å–µ–ª–µ–Ω–Ω–æ–π. –ü–æ–≥—Ä—É–∑–∏—Ç–µ—Å—å –≤ –º–∏—Ä, –≥–¥–µ –≤—ã –º–æ–∂–µ—Ç–µ —Å—Ç–∞—Ç—å –∫–µ–º —É–≥–æ–¥–Ω–æ –∏ –¥–µ–ª–∞—Ç—å —á—Ç–æ —É–≥–æ–¥–Ω–æ. –í–º–µ—Å—Ç–µ —Å –¥—Ä—É–∑—å—è–º–∏ —Å—Ç—Ä–æ–π—Ç–µ –æ–≥—Ä–æ–º–Ω—ã–µ –≥–æ—Ä–æ–¥–∞, —Å—Ä–∞–∂–∞–π—Ç–µ—Å—å —Å –º–æ–Ω—Å—Ç—Ä–∞–º–∏ –∏ —Å–æ–∑–¥–∞–≤–∞–π—Ç–µ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø—Ä–∞–≤–∏–ª–∞ –≤ —ç—Ç–æ–º –∑–∞—Ö–≤–∞—Ç—ã–≤–∞—é—â–µ–º –º–∏—Ä–µ!</p>

                    <a href=""https://easylauncher.org/download"" class=""btn mx-xl-0 mx-auto btn-primary btn-with-icon download-launcher-main btn-download"">
                        <div class=""text-left"">
                            –ó–∞–≥—Ä—É–∑–∏—Ç—å –ª–∞—É–Ω—á–µ—Ä<br>
                            <p class=""text-sm download-os-desc mb-0"" style=""margin-top: 4px"">
                                <span class=""client-os""></span>
                            </p>
                        </div>
                        <div class=""download-icon""></div>
                    </a>
                </div>
            </div>
        </div>
    </div>
</div>

<div class=""section"">
    <div class=""container"">
        <h1 class=""title d-flex align-items-center flex-wrap mb-5 why-el"" data-aos=""fade-down"" data-aos-once=""true"">
            <span class=""mr-sm-3 mr-2"">–ü–æ—á–µ–º—É</span>
            <div class=""d-flex align-items-center"">
                <img src=""https://cdn.easylauncher.org/static/images/services/EasyLauncher.svg"">
                <span class=""ml-2"">EasyLauncher?</span>
            </div>
        </h1>

        <div class=""row features"">
            <div class=""col-12"">
                <div class=""card feature big"" data-aos=""fade"" data-aos-once=""true"">
                    <div class=""card-body pb-0 text-center"">
                        <h1 class=""text-unbounded"">–≠—Ç–æ –±—ã—Å—Ç—Ä–æ</h1>
                        <p>–ù–∞—á–Ω–∏—Ç–µ –∏–≥—Ä–∞—Ç—å –≤ Minecraft —á–µ—Ä–µ–∑ EasyLauncher –≤—Å–µ–≥–æ –∑–∞ –ø–∞—Ä—É –∫–ª–∏–∫–æ–≤.</p>
                    </div>
                    <div class=""card-footer"">
                        <div class=""decor-preview-fast""></div>
                        <div class=""easylauncher-feature-fast"" style=""border-radius: 10px; overflow: hidden;"">
                            <img class=""img-fluid animation-preview w-100""
                                 srcset=""https://cdn.easylauncher.org/static/lottie/features/feature-fast-preview-1x.webp 1x,
                                         https://cdn.easylauncher.org/static/lottie/features/feature-fast-preview-2x.webp 2x"">
                        </div>
                    </div>
                </div>
            </div>

            <div class=""col-lg-7"">
                <div class=""card feature deeplink"" data-aos=""fade-right"" data-aos-once=""true"">
                    <div class=""soon"">
                        <div class=""soon-content"">
                            <span class=""badge default"">–°–∫–æ—Ä–æ</span>
                        </div>
                    </div>
                    <div class=""card-body pb-0"">
                        <h1 class=""text-unbounded"">–ë—ã—Å—Ç—Ä—ã–π –≤—Ö–æ–¥ –Ω–∞ <span class=""badge primary""><svg width=""24"" height=""24"" viewBox=""0 0 24 24"" fill=""none"" xmlns=""http://www.w3.org/2000/svg""><path d=""M22 4C22 2.89543 21.1046 2 20 2H4C2.89543 2 2 2.89543 2 4V8C2 9.10457 2.89543 10 4 10H20C21.1046 10 22 9.10457 22 8V4ZM22 16C22 14.8954 21.1046 14 20 14H4C2.89543 14 2 14.8954 2 16V20C2 21.1046 2.89543 22 4 22H20C21.1046 22 22 21.1046 22 20V16Z"" stroke=""white"" stroke-width=""3"" stroke-linejoin=""round""/><circle cx=""6.5"" cy=""6"" r=""1.5"" fill=""white""/><circle cx=""6.5"" cy=""18"" r=""1.5"" fill=""white""/><defs><rect width=""24"" height=""24"" fill=""white""/></defs></svg>—Å–µ—Ä–≤–µ—Ä</span></h1>
                        <p>–ò–≥—Ä–∞–π—Ç–µ –Ω–∞ –ø–æ–Ω—Ä–∞–≤–∏–≤—à–∏—Ö—Å—è —Å–µ—Ä–≤–µ—Ä–∞—Ö –≤—Å–µ–≥–æ –≤ –æ–¥–∏–Ω –∫–ª–∏–∫ –ø—Ä—è–º–æ –∏–∑ –≤–∞—à–µ–≥–æ –±—Ä–∞—É–∑–µ—Ä–∞.</p>
                    </div>
                    <div class=""card-footer border-0"" style=""padding: 32px 40px 0 40px;"">
                        <div class=""easylauncher-feature-fast-play"">
                            <img class=""img-fluid animation-preview w-100""
                                 srcset=""https://cdn.easylauncher.org/static/lottie/features/feature-fast-play-preview-1x.webp 1x,
                                         https://cdn.easylauncher.org/static/lottie/features/feature-fast-play-preview-2x.webp 2x"">
                        </div>
                    </div>
                </div>

                <div class=""card feature"" data-aos=""fade-right"" data-aos-once=""true"">
                    <div class=""card-body pb-0"">
                        <h1 class=""text-unbounded d-flex align-items-center flex-wrap"" style=""gap: 6px;"">
                            –•–æ—Ç–∏—Ç–µ ‚Äî
                            <div class=""swiper swiper-feature-accent-badges"" style=""flex: 1; max-width: 292px"">
                                <div class=""swiper-wrapper"">
                                    <div class=""swiper-slide"">
                                        <span class=""badge red"">–∫—Ä–∞—Å–Ω—ã–π</span>
                                    </div>
                                    <div class=""swiper-slide"">
                                        <span class=""badge orange"">–æ—Ä–∞–Ω–∂–µ–≤—ã–π</span>
                                    </div>
                                    <div class=""swiper-slide"">
                                        <span class=""badge yellow"">–∂–µ–ª—Ç—ã–π</span>
                                    </div>
                                    <div class=""swiper-slide"">
                                        <span class=""badge green"">–∑–µ–ª–µ–Ω—ã–π</span>
                                    </div>
                                    <div class=""swiper-slide"">
                                        <span class=""badge blue"">—Å–∏–Ω–∏–π</span>
                                    </div>
                                    <div class=""swiper-slide"">
                                        <span class=""badge violet"">—Ñ–∏–æ–ª–µ—Ç–æ–≤—ã–π</span>
                                    </div>
                                    <div class=""swiper-slide"">
                                        <span class=""badge pink"">—Ä–æ–∑–æ–≤—ã–π</span>
                                    </div>
                                </div>
                            </div>
                        </h1>
                        <p>–ù–µ –≤–æ–ø—Ä–æ—Å ‚Äî EasyLauncher –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Å—Ä–∞–∑—É –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ü–≤–µ—Ç–æ–≤—ã—Ö —Ä–µ—à–µ–Ω–∏–π –Ω–∞ –ª—é–±–æ–π –≤–∫—É—Å.</p>
                    </div>
                    <div class=""card-footer border-0"" style=""padding: 32px 40px 40px 40px"">
                        <div class=""swiper swiper-feature-accent-images"">
                            <div class=""swiper-wrapper"">
                                <div class=""swiper-slide"">
                                    <img
                                        loading=""lazy""
                                        class=""w-100""
                                        srcset=""https://cdn.easylauncher.org/static/images/features/feature-accent-red-1x.webp 1x,
                                                https://cdn.easylauncher.org/static/images/features/feature-accent-red-2x.webp 2x"">
                                </div>
                                <div class=""swiper-slide"">
                                    <img
                                        loading=""lazy""
                                        class=""w-100""
                                        srcset=""https://cdn.easylauncher.org/static/images/features/feature-accent-orange-1x.webp 1x,
                                                https://cdn.easylauncher.org/static/images/features/feature-accent-orange-2x.webp 2x"">
                                </div>
                                <div class=""swiper-slide"">
                                    <img
                                        loading=""lazy""
                                        class=""w-100""
                                        srcset=""https://cdn.easylauncher.org/static/images/features/feature-accent-yellow-1x.webp 1x,
                                                https://cdn.easylauncher.org/static/images/features/feature-accent-yellow-2x.webp 2x"">
                                </div>
                                <div class=""swiper-slide"">
                                    <img
                                        loading=""lazy""
                                        class=""w-100""
                                        srcset=""https://cdn.easylauncher.org/static/images/features/feature-accent-green-1x.webp 1x,
                                                https://cdn.easylauncher.org/static/images/features/feature-accent-green-2x.webp 2x"">
                                </div>
                                <div class=""swiper-slide"">
                                    <img
                                        loading=""lazy""
                                        class=""w-100""
                                        srcset=""https://cdn.easylauncher.org/static/images/features/feature-accent-blue-1x.webp 1x,
                                                https://cdn.easylauncher.org/static/images/features/feature-accent-blue-2x.webp 2x"">
                                </div>
                                <div class=""swiper-slide"">
                                    <img
                                        loading=""lazy""
                                        class=""w-100""
                                        srcset=""https://cdn.easylauncher.org/static/images/features/feature-accent-violet-1x.webp 1x,
                                                https://cdn.easylauncher.org/static/images/features/feature-accent-violet-2x.webp 2x"">
                                </div>
                                <div class=""swiper-slide"">
                                    <img
                                        loading=""lazy""
                                        class=""w-100""
                                        srcset=""https://cdn.easylauncher.org/static/images/features/feature-accent-pink-1x.webp 1x,
                                                https://cdn.easylauncher.org/static/images/features/feature-accent-pink-2x.webp 2x"">
                                </div>
                            </div>
                        </div>
                    </div>
                </div>

                <div class=""card feature"" data-aos=""fade-right"" data-aos-once=""true"">
                    <div class=""card-body pb-0"">
                        <h1 class=""text-unbounded"">–ú–æ—â–Ω–µ–π—à–∏–π<br>—Ä–µ–¥–∞–∫—Ç–æ—Ä <span class=""badge primary""><svg width=""24"" height=""24"" viewBox=""0 0 24 24"" fill=""none"" xmlns=""http://www.w3.org/2000/svg""><path d=""M2 7.11111L12 1L17 4.05556M2 7.11111V16.8889L12 23M2 7.11111L7 10.1667M17 4.05556L22 7.11111M17 4.05556L7 10.1667M12 23V13.2222M12 23L22 16.8889V7.11111M7 10.1667L12 13.2222M12 13.2222L22 7.11111"" stroke=""white"" stroke-width=""3"" stroke-linecap=""round"" stroke-linejoin=""round""/><defs><rect width=""24"" height=""24"" fill=""white""/></defs></svg>—Å–±–æ—Ä–æ–∫</span></h1>
                        <p>–°–∫–∞—á–∏–≤–∞–π—Ç–µ –∏ –º–æ–¥–∏—Ñ–∏—Ü–∏—Ä—É–π—Ç–µ Minecraft —Å –ø–æ–º–æ—â—å—é –≤—Å—Ç—Ä–æ–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞.</p>
                    </div>
                    <div class=""card-footer border-0"" style=""padding: 32px 40px 0 40px"">
                        <div class=""feature-client-editor text-center"">
                            <img class=""img-fluid animation-preview w-100""
                                 srcset=""https://cdn.easylauncher.org/static/lottie/features/feature-client-editor-preview-1x.png 1x,
                                         https://cdn.easylauncher.org/static/lottie/features/feature-client-editor-preview-2x.png 2x"">
                        </div>
                    </div>
                </div>
            </div>
            <div class=""col-lg-5"">
                <div class=""card feature lines"" data-aos=""fade-left"" data-aos-once=""true"">
                    <div class=""card-body"">
                        <h1 class=""text-unbounded""><span class=""badge primary"">–≠–ª–µ–≥–∞–Ω—Ç–Ω—ã–π</span> –¥–∏–∑–∞–π–Ω</h1>
                        <p>–°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –∏ —É–¥–æ–±–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å, ‚Äî —Ä–∞–∑–±–µ—Ä–µ—Ç—Å—è –∫–∞–∂–¥—ã–π.</p>
                    </div>
                    <div class=""card-footer border-0 p-0 text-right d-flex justify-content-end"">
                        <div class=""easylauncher-feature-lines"">
                            <img src=""https://cdn.easylauncher.org/static/lottie/features/feature-lines-preview.svg"" class=""animation-preview w-100"">
                        </div>
                    </div>
                </div>
                <div class=""card feature"" data-aos=""fade-left"" data-aos-once=""true"">
                    <div class=""card-body"">
                        <h1 class=""text-unbounded"">–¢–µ–º–Ω–∞—è –∏ —Å–≤–µ—Ç–ª–∞—è —Å—Ç–æ—Ä–æ–Ω–∞</h1>
                        <p>–í—ã–±–∏—Ä–∞–π—Ç–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –ø–æ–¥ —Å–≤–æ–π –≤–∫—É—Å. –ù–∞ —á—å–µ–π —Å—Ç–æ—Ä–æ–Ω–µ –≤—ã?</p>
                    </div>
                    <div class=""card-footer border-0"" style=""padding: 3px 33px 33px"">
                        <div class=""feature-themes"">
                            <img class=""animation-preview w-100"" src=""https://cdn.easylauncher.org/static/lottie/features/feature-themes-preview.svg"">
                        </div>
                    </div>
                </div>
                <div class=""card feature multiaccounts"" data-aos=""fade-left"" data-aos-once=""true"">
                    <div class=""card-body"">
                        <h1 class=""text-unbounded"">–£–¥–æ–±–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–π—Ç–µ <span class=""badge primary""><svg width=""24"" height=""24"" viewBox=""0 0 24 24"" fill=""none"" xmlns=""http://www.w3.org/2000/svg""><path d=""M6.24994 2.2505L3.58328 2.25049C2.8469 2.25048 2.24994 2.84744 2.24994 3.58382V6.2505M2.24994 17.7505V20.4172C2.24994 21.1536 2.84689 21.7505 3.58327 21.7505H6.24994M17.7499 21.7505H20.4166C21.153 21.7505 21.7499 21.1536 21.7499 20.4172V17.7505M21.7499 6.2505V3.58383C21.7499 2.84745 21.153 2.2505 20.4166 2.2505H17.7499M16.9999 17.005C16.9999 14.795 14.7609 13.005 11.9999 13.005M11.9999 13.005C9.23891 13.005 6.99991 14.795 6.99991 17.005M11.9999 13.005C13.6568 13.005 14.9999 11.6619 14.9999 10.005C14.9999 8.34815 13.6568 7.00501 11.9999 7.00501C10.3431 7.00501 8.99991 8.34815 8.99991 10.005C8.99991 11.6619 10.3431 13.005 11.9999 13.005Z"" stroke=""white"" stroke-width=""3"" stroke-linecap=""round"" stroke-linejoin=""round""/><defs><rect width=""24"" height=""24"" fill=""white""/></defs></svg>–∞–∫–∫–∞—É–Ω—Ç—ã</span></h1>
                        <p>EasyLauncher –¥–æ–±–∞–≤–∏—Ç –≤—Å–µ –≤ –±—ã—Å—Ç—Ä—ã–π –¥–æ—Å—Ç—É–ø –¥–ª—è –º–æ–º–µ–Ω—Ç–∞–ª—å–Ω–æ–≥–æ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –º–µ–∂–¥—É –Ω–∏–º–∏.</p>
                    </div>
                    <div class=""card-footer border-0"">
                        <div class=""feature-accounts"">
                            <img class=""img-fluid animation-preview w-100""
                                 srcset=""https://cdn.easylauncher.org/static/lottie/features/feature-accounts-preview-1x.png 1x,
                                         https://cdn.easylauncher.org/static/lottie/features/feature-accounts-preview-2x.png 2x"">
                        </div>
                    </div>
                </div>
            </div>
            <div class=""col-12"">
                <div class=""card feature big"" data-aos=""fade"" data-aos-once=""true"">
                    <div class=""soon"">
                        <div class=""soon-content"">
                            <span class=""badge default"">–°–∫–æ—Ä–æ</span>
                        </div>
                    </div>

                    <div class=""card-body text-center"">
                        <h1 class=""text-unbounded"">–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–π—Ç–µ <span class=""badge primary""><svg width=""25"" height=""24"" viewBox=""0 0 25 24"" fill=""none"" xmlns=""http://www.w3.org/2000/svg""><path d=""M4.04044 4.13062L14.4894 4.77581M4.04044 4.13062L10.5188 2L20.1319 3.05531M4.04044 4.13062V13.6134V15.3339L5.92126 15.6049M14.4894 4.77581V16.8393M14.4894 4.77581L20.1319 3.05531M14.4894 16.8393L5.92126 15.6049M14.4894 16.8393L15.7916 16.1941M20.1319 3.05531V14.0435L19.505 14.3542M0.5 15.1787L5.5033 15.764L5.92126 18.1297M0.5 15.1787L4.04044 13.2033M0.5 15.1787L3.63269 27.8551M5.92126 15.6049V18.1297M22.3605 15.8471L24.35 17.1677L22.5486 27.8551M22.3605 15.8471L17.4129 15.3908M22.3605 15.8471L20.4357 27.8551M5.92126 18.1297V27.8551M16.492 15.8471L16.5792 15.3339L17.4129 15.3908M16.492 15.8471L15.7916 16.1941M16.492 15.8471L15.8112 19.8502M17.4129 15.3908L19.505 14.3542M15.7916 16.1941L15.8112 19.8502M15.8112 19.8502L14.45 27.8551M19.505 14.3542V15.3908"" stroke=""white"" stroke-width=""3"" stroke-linecap=""round"" stroke-linejoin=""round""/><defs><rect width=""24"" height=""24"" fill=""white"" transform=""translate(0.5)""/></defs></svg>—Å–∫–∏–Ω—ã</span><br>–∫–æ—Ç–æ—Ä—ã–µ –Ω—Ä–∞–≤—è—Ç—Å—è</h1>
                        <p>–®–∏—Ä–æ–∫–∏–π –≤—ã–±–æ—Ä —è—Ä–∫–∏—Ö –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π,<br>–∫–æ—Ç–æ—Ä—ã–µ –≤—ã–¥–µ–ª—è—Ç –≤–∞—Å –Ω–∞ —Ñ–æ–Ω–µ –æ—Å—Ç–∞–ª—å–Ω—ã—Ö.</p>
                    </div>
                    <div class=""card-footer border-0"" style=""padding-bottom: 0"">
                        <div class=""feature-skins text-center"">
                            <img class=""img-fluid animation-preview w-100""
                                 srcset=""https://cdn.easylauncher.org/static/lottie/features/feature-skins-preview-1x.webp 1x,
                                         https://cdn.easylauncher.org/static/lottie/features/feature-skins-preview-2x.webp 2x"">
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<div class=""section position-relative"" style=""background-color: var(--card-background-color); padding: 196px 0; z-index: 1; overflow: hidden;"">
    <div class=""container"">
        <h1 class=""display-5 text-unbounded"" style=""margin-bottom: 80px"" data-aos=""fade-right"" data-aos-once=""true"">
            –í—ã –µ—â–µ –Ω–µ<br>—É—Å—Ç–∞–Ω–æ–≤–∏–ª–∏<br>
            <span class=""d-flex align-items-center"">
                <img src=""https://cdn.easylauncher.org/static/images/services/EasyLauncher.svg"" style=""width: 44.53px; height: 47.27px; margin-right: 22.73px"">
                EasyLauncher?
            </span>
        </h1>

        <div data-aos=""fade"" data-aos-once=""true"">
            <a href=""https://easylauncher.org/download"" class=""btn btn-primary btn-with-icon download-launcher-main btn-download"">
                <div class=""text-left"">
                    –ó–∞–≥—Ä—É–∑–∏—Ç—å –ª–∞—É–Ω—á–µ—Ä<br>
                    <p class=""text-sm download-os-desc mb-0"" style=""margin-top: 4px"">
                        <span class=""client-os""></span>
                    </p>
                </div>
                <div class=""download-icon""></div>
            </a>
        </div>
    </div>

    <style media=""screen"">
        .previews-slider-wrapper {
            position: absolute;
            right: 0;
            top: 0;
            width: 80%;
            height: 100%;
            padding-top: 13px;
            padding-bottom: 13px;
            display: flex;
            flex-direction: column;
            gap: 8px;
        }
    </style>

    
    <div class=""previews-slider-wrapper"" style=""z-index: -1"">
        <div class=""swiper swiper-preview-slider-1"">
            <div class=""swiper-wrapper"" style=""transition-timing-function: linear;"">
                <div class=""swiper-slide"" style=""width: auto"">
                    <picture>
                        <img
                            class=""h-100""
                            src=""https://cdn.easylauncher.org/static/images/slides/slider_launcher-home_dark_1x.webp""
                            srcset=""https://cdn.easylauncher.org/static/images/slides/slider_launcher-home_dark_2x.webp 2x"">
                    </picture>

                </div>
                <div class=""swiper-slide"" style=""width: auto"">
                    <picture>
                        <img
                            class=""h-100""
                            src=""https://cdn.easylauncher.org/static/images/slides/slider_launcher-settings-info_dark_1x.webp""
                            srcset=""https://cdn.easylauncher.org/static/images/slides/slider_launcher-info_dark_2x.webp 2x"">
                    </picture>
                </div>
                <div class=""swiper-slide"" style=""width: auto"">
                    <picture>
                        <img
                            class=""h-100""
                            src=""https://cdn.easylauncher.org/static/images/slides/slider_launcher-settings-launch-arguments_dark_1x.webp""
                            srcset=""https://cdn.easylauncher.org/static/images/slides/slider_launcher-settings-launch-arguments_dark_2x.webp 2x"">
                    </picture>
                </div>
            </div>
        </div>
        <div class=""swiper swiper-preview-slider-2"">
            <div class=""swiper-wrapper"" style=""transition-timing-function: linear;"">
                <div class=""swiper-slide"" style=""width: auto"">
                    <picture>
                        <img
                            class=""h-100""
                            src=""https://cdn.easylauncher.org/static/images/slides/slider_launcher-accounts-skin_dark_1x.webp""
                            srcset=""https://cdn.easylauncher.org/static/images/slides/slider_launcher-accounts-skin_dark_2x.webp 2x"">
                    </picture>
                </div>
                <div class=""swiper-slide"" style=""width: auto"">
                    <picture>
                        <img
                            class=""h-100""
                            src=""https://cdn.easylauncher.org/static/images/slides/slider_launcher-promo_dark_1x.webp""
                            srcset=""https://cdn.easylauncher.org/static/images/slides/slider_launcher-promo_dark_2x.webp 2x"">
                    </picture>
                </div>
                <div class=""swiper-slide"" style=""width: auto"">
                    <picture>
                        <img
                            class=""h-100""
                            src=""https://cdn.easylauncher.org/static/images/slides/slider_launcher-settings-preferences_dark_1x.webp""
                            srcset=""https://cdn.easylauncher.org/static/images/slides/slider_launcher-settings-preferences_dark_2x.webp 2x"">
                    </picture>
                </div>
            </div>
        </div>
    </div>

    <div class=""jumbotron-gradient""></div>
</div>

<div class=""section"">
    <div class=""container"">
        <h1 class=""title text-center text-unbounded"" data-aos=""fade-down"" data-aos-once=""true"">
            –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –¥–ª—è <span class=""badge primary"">—Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤</span>
        </h1>
        <h5 class=""text-center mb-5 font-weight-normal"" data-aos=""fade"" data-aos-once=""true"">
            –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ EasyLauncher –≤ –≤–∞—à–µ–º –±–∏–∑–Ω–µ—Å–µ.<br><span data-aos=""fade"" data-aos-once=""true"" data-aos-delay=""500"">–ü—Ä–æ—Å—Ç–æ.</span> <span data-aos=""fade"" data-aos-once=""true"" data-aos-delay=""1100"">–ë—ã—Å—Ç—Ä–æ.</span> <span data-aos=""fade"" data-aos-once=""true"" data-aos-delay=""1700"">–≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ.</span>
        </h5>

        <div class=""row justify-content-center features"">
            <div class=""col-xl-4 col-lg-6"">
                <a href=""#"">
                    <div class=""card feature card-fluid hover-scale-105"" data-aos=""fade-right"" data-aos-once=""true"" style=""pointer-events: none"">
                        <div class=""soon"">
                            <div class=""soon-content"">
                                <span class=""badge default"">–°–∫–æ—Ä–æ</span>
                            </div>
                        </div>
                        <div class=""card-body"">
                            <h1>–ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –∫–Ω–æ–ø–∫–∏</h1>
                            <p>–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã–ø–æ–ª–Ω–∏–º –≤—Ö–æ–¥ –Ω–∞ –≤–∞—à –∏–≥—Ä–æ–≤–æ–π —Å–µ—Ä–≤–µ—Ä –ø—Ä—è–º–æ –∏–∑ –±—Ä–∞—É–∑–µ—Ä–∞ –∏–≥—Ä–æ–∫–∞.</p>
                        </div>
                        <div class=""card-footer text-center"" style=""padding: 0 40px 40px 40px;"">
                            <img loading=""lazy"" src=""https://cdn.easylauncher.org/static/images/easylauncher-dev-button.svg?v=1"" class=""img-fluid"">
                            <button type=""button"" class=""btn btn-outline-primary btn-icon text-white mx-auto"" style=""gap: 10px; margin-top: 12px"">
                                <svg width=""24"" height=""24"" viewBox=""0 0 24 24"" fill=""none"" xmlns=""http://www.w3.org/2000/svg"">
                                    <path d=""M4.29289 18.2929C3.90237 18.6834 3.90237 19.3166 4.29289 19.7071C4.68342 20.0976 5.31658 20.0976 5.70711 19.7071L4.29289 18.2929ZM19 5H20C20 4.44772 19.5523 4 19 4V5ZM18 16C18 16.5523 18.4477 17 19 17C19.5523 17 20 16.5523 20 16H18ZM8 4C7.44772 4 7 4.44772 7 5C7 5.55228 7.44772 6 8 6V4ZM5.70711 19.7071L19.7071 5.70711L18.2929 4.29289L4.29289 18.2929L5.70711 19.7071ZM18 5V16H20V5H18ZM19 4H8V6H19V4Z"" fill=""white""/>
                                </svg>
                                –ü–µ—Ä–µ–π—Ç–∏
                            </button>
                        </div>
                    </div>
                </a>
            </div>
            <div class=""col-xl-4 col-lg-6"">
                <a href=""#"">
                    <div class=""card feature card-fluid hover-scale-105"" data-aos=""fade"" data-aos-once=""true"" style=""pointer-events: none"">
                        <div class=""soon"">
                            <div class=""soon-content"">
                                <span class=""badge default"">–°–∫–æ—Ä–æ</span>
                            </div>
                        </div>
                        <div class=""card-body"">
                            <h1>–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–µ—Ä–≤–µ—Ä–∞</h1>
                            <p>–ü–æ–∫–∞–∂–µ–º –∫—Ä–∞—Å–∏–≤—ã–π –≥—Ä–∞—Ñ–∏–∫ –æ–Ω–ª–∞–π–Ω–∞ –∏–ª–∏ –∫–∞—Ä—Ç–∏–Ω–∫—É —Å –∫–Ω–æ–ø–∫–æ–π –¥–ª—è –≤—Ö–æ–¥–∞.</p>
                        </div>
                        <div class=""card-footer text-center"" style=""padding: 0 40px 40px 40px;"">
                            <img loading=""lazy"" src=""https://cdn.easylauncher.org/static/images/easylauncher-dev-online.svg?v=1"" class=""img-fluid"">
                            <button type=""button"" class=""btn btn-outline-primary btn-icon text-white mx-auto"" style=""gap: 10px; margin-top: 12px"">
                                <svg width=""24"" height=""24"" viewBox=""0 0 24 24"" fill=""none"" xmlns=""http://www.w3.org/2000/svg"">
                                    <path d=""M4.29289 18.2929C3.90237 18.6834 3.90237 19.3166 4.29289 19.7071C4.68342 20.0976 5.31658 20.0976 5.70711 19.7071L4.29289 18.2929ZM19 5H20C20 4.44772 19.5523 4 19 4V5ZM18 16C18 16.5523 18.4477 17 19 17C19.5523 17 20 16.5523 20 16H18ZM8 4C7.44772 4 7 4.44772 7 5C7 5.55228 7.44772 6 8 6V4ZM5.70711 19.7071L19.7071 5.70711L18.2929 4.29289L4.29289 18.2929L5.70711 19.7071ZM18 5V16H20V5H18ZM19 4H8V6H19V4Z"" fill=""white""/>
                                </svg>
                                –ü–µ—Ä–µ–π—Ç–∏
                            </button>
                        </div>
                    </div>
                </a>
            </div>
            <div class=""col-xl-4 col-lg-6"">
                <a href=""#"">
                    <div class=""card feature card-fluid hover-scale-105"" data-aos=""fade-left"" data-aos-once=""true"" style=""pointer-events: none"">
                        <div class=""soon"">
                            <div class=""soon-content"">
                                <span class=""badge default"">–°–∫–æ—Ä–æ</span>
                            </div>
                        </div>
                        <div class=""card-body"">
                            <h1>–†–µ–∫–ª–∞–º–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç</h1>
                            <p>–ü—Ä–∏–≤–ª–µ–∫–∞–π—Ç–µ –Ω–æ–≤—ã—Ö –∏–≥—Ä–æ–∫–æ–≤ –∏ –ø—Ä–æ–¥–≤–∏–≥–∞–π—Ç–µ —Å–≤–æ–∏ –∏–≥—Ä–æ–≤—ã–µ —Å–µ—Ä–≤–µ—Ä—ã.</p>
                        </div>
                        <div class=""card-footer text-center"" style=""padding: 0 40px 40px 40px;"">
                            <img loading=""lazy"" src=""https://cdn.easylauncher.org/static/images/easylauncher-dev-ads.svg?v=1"" class=""img-fluid"">
                            <button type=""button"" class=""btn btn-outline-primary btn-icon text-white mx-auto"" style=""gap: 10px; margin-top: 12px"">
                                <svg width=""24"" height=""24"" viewBox=""0 0 24 24"" fill=""none"" xmlns=""http://www.w3.org/2000/svg"">
                                    <path d=""M4.29289 18.2929C3.90237 18.6834 3.90237 19.3166 4.29289 19.7071C4.68342 20.0976 5.31658 20.0976 5.70711 19.7071L4.29289 18.2929ZM19 5H20C20 4.44772 19.5523 4 19 4V5ZM18 16C18 16.5523 18.4477 17 19 17C19.5523 17 20 16.5523 20 16H18ZM8 4C7.44772 4 7 4.44772 7 5C7 5.55228 7.44772 6 8 6V4ZM5.70711 19.7071L19.7071 5.70711L18.2929 4.29289L4.29289 18.2929L5.70711 19.7071ZM18 5V16H20V5H18ZM19 4H8V6H19V4Z"" fill=""white""/>
                                </svg>
                                –ü–µ—Ä–µ–π—Ç–∏
                            </button>
                        </div>
                    </div>
                </a>
            </div>
        </div>
    </div>
</div>
            <script type=""text/javascript"" src=""https://easylauncher.org/combine/c69e87c13c78e5ff18e51a597055cf06-1711701518""></script>
        </main>

        <footer class=""footer"">
    <div class=""footer-main"">
        <div class=""container"">
            <div class=""row align-items-center justify-content-xl-between justify-content-center"">
                <div class=""col-xl-4 col-lg-9 mb-xl-0 mb-5 text-xl-left text-center"">
                    <div class=""d-flex align-items-center justify-content-xl-start justify-content-center mb-24"">
                        <img src=""https://easylauncher.org/themes/easylauncher/assets/images/services/easylauncher-light.svg"" class=""img-fluid logo-plain"">
                        <h5 class=""logo"">EasyLauncher¬Æ</h5>
                    </div>

                    <p class=""mb-1"" style=""color: rgba(255, 255, 255, .5)"">–ü—Ä–æ–µ–∫—Ç EasyX</p>
                    <p style=""color: rgba(255, 255, 255, .5)"">¬© 2022 - 2024 ¬´EasyLauncher¬ª.</p>

                    <p class=""mb-24"" style=""color: rgba(255, 255, 255, .5)"">–°–∫–∞—á–∏–≤–∞—è –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—è –ü–û ¬´EasyLauncher¬ª, –≤—ã –±–µ–∑–æ–≥–æ–≤–æ—Ä–æ—á–Ω–æ –∏ –≤ –ø–æ–ª–Ω–æ–º –æ–±—ä–µ–º–µ —Å–æ–≥–ª–∞—à–∞–µ—Ç–µ—Å—å —Å —É—Å–ª–æ–≤–∏—è–º–∏ <a href=""//legal.easyx.ru/easylauncher/eula"" target=""_blank"" class=""text-underline"" style=""color: rgba(255, 255, 255, .5);"">–ª–∏—Ü–µ–Ω–∑–∏–æ–Ω–Ω–æ–≥–æ —Å–æ–≥–ª–∞—à–µ–Ω–∏—è</a>.</p>

                    <svg width=""38"" height=""30"" viewBox=""0 0 33 24"" fill=""none"" xmlns=""http://www.w3.org/2000/svg"">
                        <g opacity=""0.3"">
                            <rect x=""1"" y=""1.58154"" width=""31"" height=""20.837"" stroke=""white"" stroke-width=""2""/>
                            <path d=""M12.871 10.3766C13.5138 10.3766 14.0997 10.5109 14.6286 10.7794C15.1575 11.0398 15.5725 11.3938 15.8736 11.8413C16.1828 12.2889 16.3374 12.769 16.3374 13.2816C16.3374 13.9489 16.1258 14.5307 15.7027 15.027C15.2796 15.5234 14.7059 15.9018 13.9817 16.1622C13.2575 16.4226 12.4478 16.5528 11.5527 16.5528C10.6414 16.5528 9.82765 16.3737 9.11158 16.0157C8.40365 15.6495 7.85032 15.145 7.4516 14.5022C7.06101 13.8594 6.86572 13.127 6.86572 12.3052C6.86572 10.6696 7.31734 9.45308 8.22056 8.65564C9.13193 7.85006 10.3566 7.44727 11.8945 7.44727C13.766 7.44727 15.2429 7.91922 16.3252 8.86313C15.837 9.38391 15.3894 9.95758 14.9826 10.5841C14.6571 10.34 14.1973 10.1447 13.6033 9.99827C13.0174 9.84366 12.4926 9.76636 12.0288 9.76636C11.3208 9.76636 10.7268 9.94538 10.2467 10.3034C9.76663 10.6533 9.47369 11.1578 9.3679 11.8169C9.35977 11.8576 9.3557 11.9146 9.3557 11.9878C9.74628 11.4182 10.2589 11.0073 10.8936 10.755C11.5365 10.5028 12.1956 10.3766 12.871 10.3766ZM11.6748 14.2337C11.984 14.2337 12.2729 14.193 12.5414 14.1116C12.8099 14.0221 13.0215 13.9041 13.1761 13.7576C13.3307 13.603 13.408 13.4403 13.408 13.2694C13.408 13.0009 13.2371 12.773 12.8954 12.5859C12.5617 12.3906 12.1549 12.293 11.6748 12.293C11.1947 12.293 10.7838 12.3906 10.442 12.5859C10.1084 12.773 9.94158 13.0009 9.94158 13.2694C9.94158 13.4403 10.0189 13.603 10.1735 13.7576C10.3281 13.9041 10.5397 14.0221 10.8082 14.1116C11.0767 14.193 11.3656 14.2337 11.6748 14.2337Z"" fill=""white""/>
                            <path d=""M23.9616 11.0846H26.1342V13.4647H23.9616V15.6495H21.5815V13.4647H19.3967V11.0846H21.5815V8.89975H23.9616V11.0846Z"" fill=""white""/>
                        </g>
                    </svg>
                </div>

                <div class=""col-auto d-xl-block d-none"">
                    <p class=""mb-0"" style=""color: rgba(255, 255, 255, .5)"">–ü–æ–¥–¥–µ—Ä–∂–∫–∞</p>
                    <h4 class=""mb-48 font-weight-500"">
                        <a href=""mailto:support@easylauncher.org"" style=""color: white;"">
                            support@easylauncher.org
                        </a>
                    </h4>
                    <p class=""mb-0"" style=""color: rgba(255, 255, 255, .5)"">–ü–∞—Ä—Ç–Ω–µ—Ä–∞–º</p>
                    <h4 class=""mb-0 font-weight-500"">
                        <a href=""mailto:partners@easylauncher.org"" style=""color: white;"">
                            partners@easylauncher.org
                        </a>
                    </h4>
                </div>
            </div>

            <div class=""footer-links mt-48 justify-content-xl-start justify-content-center flex-wrap"">
                <a href=""//legal.easyx.ru/easylauncher/eula"" class=""footer-link"" target=""_blank"">
                    –õ–∏—Ü–µ–Ω–∑–∏–æ–Ω–Ω–æ–µ —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ
                    <svg width=""17"" height=""17"" viewBox=""0 0 17 17"" fill=""none"" xmlns=""http://www.w3.org/2000/svg"">
                        <path d=""M13.5 13.5L13.4999 3.5M13.4999 3.5L3.5 3.5M13.4999 3.5L3.5 13.4999"" stroke=""#FFFFFF"" stroke-opacity=""0.5"" stroke-width=""1.5"" stroke-linecap=""round"" stroke-linejoin=""round""/>
                    </svg>
                </a>
                <a href=""//legal.easyx.ru/general/rules"" class=""footer-link"" target=""_blank"">
                    –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ
                    <svg width=""17"" height=""17"" viewBox=""0 0 17 17"" fill=""none"" xmlns=""http://www.w3.org/2000/svg"">
                        <path d=""M13.5 13.5L13.4999 3.5M13.4999 3.5L3.5 3.5M13.4999 3.5L3.5 13.4999"" stroke=""#FFFFFF"" stroke-opacity=""0.5"" stroke-width=""1.5"" stroke-linecap=""round"" stroke-linejoin=""round""/>
                    </svg>
                </a>
                <a href=""//legal.easyx.ru/general/privacy"" class=""footer-link"" target=""_blank"">
                    –ü–æ–ª–∏—Ç–∏–∫–∞ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏
                    <svg width=""17"" height=""17"" viewBox=""0 0 17 17"" fill=""none"" xmlns=""http://www.w3.org/2000/svg"">
                        <path d=""M13.5 13.5L13.4999 3.5M13.4999 3.5L3.5 3.5M13.4999 3.5L3.5 13.4999"" stroke=""#FFFFFF"" stroke-opacity=""0.5"" stroke-width=""1.5"" stroke-linecap=""round"" stroke-linejoin=""round""/>
                    </svg>
                </a>
            </div>

            <hr>

            <div class=""row align-items-center"">
                <div class=""col-sm-6 d-sm-block d-none"">
                    <a href=""https://easylauncher.org/download"" class=""btn header-btn btn-download btn-default"" style=""width: fit-content;"">
                        –ó–∞–≥—Ä—É–∑–∏—Ç—å –ª–∞—É–Ω—á–µ—Ä
                        <div class=""download-icon""></div>
                    </a>
                </div>

                <div class=""col-sm-6"">
                    <div class=""d-flex align-items-center flex-wrap justify-content-sm-end justify-content-center"" style=""gap: 12px"">
                        <div class=""theme-picker"">
                            <div class=""theme-selector theme-light active-when-system"" onclick=""switchTheme('light')"">
                                <svg width=""16"" height=""17"" viewBox=""0 0 16 17"" fill=""none"" xmlns=""http://www.w3.org/2000/svg"">
                                    <path d=""M8 1.5V2.55M3.05 3.55L3.79267 4.29267L3.05 3.55ZM1 8.5H2.05H1ZM3.05 13.45L3.79267 12.7073L3.05 13.45ZM12.95 13.45L12.2073 12.7073L12.95 13.45ZM15 8.5H13.95H15ZM12.95 3.55L12.2073 4.29267L12.95 3.55Z"" stroke=""white"" stroke-opacity=""0.5"" stroke-width=""1.5"" stroke-linecap=""round"" stroke-linejoin=""round""/>
                                    <path d=""M8 12.5C10.209 12.5 12 10.709 12 8.5C12 6.291 10.209 4.5 8 4.5C5.791 4.5 4 6.291 4 8.5C4 10.709 5.791 12.5 8 12.5Z"" stroke=""white"" stroke-opacity=""0.5"" stroke-width=""1.5"" stroke-linejoin=""round""/>
                                    <path d=""M8 15.5V14.45"" stroke=""white"" stroke-opacity=""0.5"" stroke-width=""1.5"" stroke-linecap=""round"" stroke-linejoin=""round""/>
                                    <defs>
                                        <rect width=""16"" height=""16"" fill=""white"" transform=""translate(0 0.5)""/>
                                    </defs>
                                </svg>
                                <span class=""d-md-block d-none"">–°–≤–µ—Ç–ª–∞—è —Ç–µ–º–∞</span>
                            </div>
                            <div class=""theme-selector theme-dark active-when-system"" onclick=""switchTheme('dark')"">
                                <svg width=""16"" height=""17"" viewBox=""0 0 16 17"" fill=""none"" xmlns=""http://www.w3.org/2000/svg"">
                                    <path d=""M9.35098 1.97004C7.52765 2.44571 6.18165 4.10337 6.18165 6.07571C6.18165 8.41904 8.08131 10.318 10.4243 10.318C12.3963 10.318 14.0543 8.97237 14.5296 7.14904C14.6211 7.59356 14.667 8.04622 14.6666 8.50004C14.6666 12.182 11.682 15.1667 7.99998 15.1667C4.31798 15.1667 1.33331 12.182 1.33331 8.50004C1.33331 4.81804 4.31798 1.83337 7.99998 1.83337C8.46298 1.83337 8.91465 1.88037 9.35098 1.97004Z"" stroke=""white"" stroke-opacity=""0.5"" stroke-width=""1.5"" stroke-linejoin=""round""/>
                                </svg>
                                <span class=""d-md-block d-none"">–¢–µ–º–Ω–∞—è —Ç–µ–º–∞</span>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</footer>



    </body>

    <script type=""text/javascript"" src=""https://easylauncher.org/combine/4ec590bbe243eb5e5ff4e8939e0af0ef-1711450977""></script>

    <script src=""https://unpkg.com/aos@2.3.1/dist/aos.js""></script>

    <script src=""/modules/system/assets/js/framework.combined-min.js?v=1""></script>
    <link rel=""stylesheet"" property=""stylesheet"" href=""/modules/system/assets/css/framework.extras-min.css?v=2"">

    <script src=""https://cdn.jsdelivr.net/npm/swiper@11/swiper-bundle.min.js""></script>
    <script src=""https://easylauncher.org/themes/easylauncher/assets/js/animations.js?v=5""></script>

    <script type=""text/javascript"">
        const swiperAccentImages = new Swiper('.swiper-feature-accent-images', {
            slidesPerView: 1,
            spaceBetween: 0,
            allowTouchMove: false,
            autoplay: {
                delay: 1500,
            },
        });
        const swiperAccentBadges = new Swiper('.swiper-feature-accent-badges', {
            slidesPerView: 1,
            spaceBetween: 0,
            allowTouchMove: false,
            autoplay: {
                delay: 1500,
            },
        });
    </script>
        <script type=""text/javascript"">
            const swiperPreviewSlider1 = new Swiper('.swiper-preview-slider-1', {
                slidesPerView: 'auto',
                spaceBetween: 15,
                loop: true,
                speed: 7500,
                centeredSlides: true,
                slidesOffsetAfter: 500,
                slidesOffsetBefore: 500,
                allowTouchMove: false,
                autoplay: {
                    delay: 0,
                    reverseDirection: true,
                    disableOnInteraction: false,
                    pauseOnMouseEnter: false,
                },
            });
            const swiperPreviewSlider2 = new Swiper('.swiper-preview-slider-2', {
                autoplay: {
                    delay: 0,
                    disableOnInteraction: false,
                    pauseOnMouseEnter: false,
            	},
            	loop: true,
                allowTouchMove: false,
            	slidesPerView: 'auto',
            	spaceBetween: 15,
            	speed: 7500,
                centeredSlides: true,
                slidesOffsetAfter: 500,
                slidesOffsetBefore: 500,
            });
        </script>
    <script type=""text/javascript"">
        let supportedOS = ['Windows', 'macOS', 'Linux']
        let clientOS = detectClientOS()
        if (supportedOS.includes(clientOS)) {
            let btnDownload = $('.download-launcher-main')
            if (btnDownload.hasClass('disabled')) {
                btnDownload.removeClass('disabled')
            }

            let clientOSArch = detectClientOSArch()
            $('.client-os').html(""–¥–ª—è "" + clientOS)
            $('.client-os-arch').html(clientOSArch)
        } else {
            $('.client-os').html(""–û–° –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è "")
        }
    </script>

    
    <script type=""text/javascript"" src=""https://easylauncher.org/combine/30b4e70f922c4442010ec82ddb1222a9-1711571277""></script>
</html>"
z7BwB94D,pc spec,DyM_ttv,C#,Sunday 31st of March 2024 03:25:20 AM CDT,"# **GAME PC**
**CPU:** [AMD Ryzen 7 7800X3D](
**GPU:** [Zotac RTX 4090 Trinity OC]
**RAM:** [32GB DDR5-6000 CL30-38-38-96 G.Skill]
**Board:** [Gigabyte B650 AORUS Elite AX]
**Display:** [BenQ ZOWIE XL2746K 240Hz]
**Keyboard:** [Wooting 60HE]
**Mouse:** [Finalmouse Ultralight X (M)]
**Mousepad:** [Artisan Hayate Otsu XSOFT]

# **STREAM PC**
**CPU:** [AMD Ryzen 9 5950X]
**GPU:** [MSI RTX 4060 VENTUS]
**RAM:** [32GB DDR4-3200 CL14-14-14-34 G.Skill]
**Board:** [MSI MEG X570 UNIFY]
**Display1:** [Acer Predator XB271HU]
**Display2:** [ASUS ROG SWIFT PG348Q]


# **GEAR**
**MixerPC1:** [Elgato Wave XLR]
**MixerPC2:** [Beacon Mix Create]
**Headphones:** [Beyerdynamic DT 1990 Pro]
**Headphone AMP:** [JDS Labs Atom]
**Mic:** [Shure SM7B Microphone ]
**Capture1:** [Elgato Cam Link 4K]
**Capture2:** [Elgato 4K60 Pro MK.2]
**Deck1:** [Elgato Stream Deck+]
**Deck2:** [Elgato Stream Deck XL 32 Keys]
**Cam:** [Nikon Z6]
**Light1:** [Elgato Key Light Air]
**Light2:** [Govee Neon Led Strip]
**Light3:** [NEEWER CB60 RGB]
"
guitZHT7,Mad,Unknown_No_1,PHP,Sunday 31st of March 2024 02:44:01 AM CDT,NewSeasonAndNewHackSoon
RM0C9YZK,solana contract,MehediBijoy,Rust,Sunday 31st of March 2024 02:01:34 AM CDT,"use solana_program::{
    account_info::{AccountInfo, next_account_info},
    declare_id, entrypoint, pubkey::Pubkey,
    program_error::ProgramError,
    msg, entrypoint::ProgramResult,
};
use spl_token::{ instruction::TokenInstruction, state::Account as TokenAccount};

declare_id!(""YourUniqueProgramIdHere"");

/// Advanced custom error definitions for detailed feedback.
#[derive(Debug, Clone, Copy)]
pub enum TokenRestrictionError {
    UnauthorizedTransfer,
    TransferCurrentlyRestricted,
    OperationNotSupported,
}

impl From<TokenRestrictionError> for ProgramError {
    fn from(e: TokenRestrictionError) -> Self {
        ProgramError::Custom(e as u32)
    }
}

/// Documents the purpose of the program and how it interfaces with SPL Token instructions.
/// Main entry point for the token sale restriction program.
entrypoint!(process_instruction);

/// Processes instructions sent to this program.
/// Instructions can be filtered to apply logic, such as blocking or allowing transfers.
fn process_instruction(
    program_id: &Pubkey,
    accounts: &[AccountInfo],
    instruction_data: &[u8]
) -> ProgramResult {
    msg!(""Token Restriction Program Processing Instruction"");

    let instruction = TokenInstruction::unpack(instruction_data)?;

    match instruction {
    TokenInstruction::Transfer { .. } => {
            msg!(""Transfer attempted, checking for restrictions."");

            // Example restriction: Disallow all transfers
            // In practice, insert logic to determine if a transfer should be allowed or not.
            // This could include checking the current time against a preset time, ensuring the
            // sender or receiver is in a whitelist, etc.
            Err(TokenRestrictionError::UnauthorizedTransfer.into())
        },
        // This program is specifically for managing transfer restrictions.
        // Other token operations are not processed here to maintain focused functionality.
        _ => Err(TokenRestrictionError::OperationNotSupported.into()),
    }
}
"
mMbSRANc,add subscription button code,loaymahmoud,C#,Sunday 31st of March 2024 01:26:49 AM CDT,"private void bunifuFlatButton1_Click(object sender, EventArgs e)
        {
            if (comboBox4.SelectedItem == null || comboBox1.SelectedItem == null || comboBox2.SelectedItem == null)
            {
                MessageBox.Show(""ÿ™ÿ£ŸÉÿØ ŸÖŸÜ ÿßÿÆÿ™Ÿäÿßÿ± ŸÉÿßŸÅÿ© ÿßŸÑŸÖÿπŸÑŸàŸÖÿßÿ™ ÿßŸÑŸÖÿ∑ŸÑŸàÿ®ÿ©"", ""ÿÆÿ∑ÿ£"", MessageBoxButtons.OK, MessageBoxIcon.Error);
                return;
            }
            else
            {
                // Show confirmation dialog
                DialogResult result = MessageBox.Show(""ŸáŸÑ ÿ™ÿ±ŸäÿØ ÿ™ÿ£ŸÉŸäÿØ ÿßÿ∂ÿßŸÅÿ© ÿßŸÑŸÖÿ¥ÿ™ÿ±ŸÉÿü"", ""Confirmation"", MessageBoxButtons.YesNo, MessageBoxIcon.Question);
                if (result == DialogResult.Yes)
                {
                    if (comboBox3.SelectedIndex >= 0)
                    {
                        string selectedClient = comboBox3.SelectedItem.ToString();

                        // Get the selected section
                        string selectedSection = comboBox4.SelectedItem.ToString();

                        // Get the selected coach
                        string selectedCoach = comboBox1.SelectedItem.ToString();

                        // Get the subscription date
                        DateTime subscriptionDate = dateTimePicker1.Value;

                        // Get the subscription type
                        string subscriptionType = comboBox2.SelectedItem.ToString();

                        //Get the fee
                        int TotalSubscriptionAmount=0;
                        int.TryParse(textBox3.Text, out TotalSubscriptionAmount);

                        // Check if the subscription is already exists for the client
                        string checkClientQuery = ""SELECT COUNT(*) FROM Subscriptions WHERE ClientName = @ClientName and SectionName=@SectionName"";

                        int existingClientsCount;

                        using (SqlConnection connection = new SqlConnection(""Data Source=DESKTOP-4J8VJT3;Initial Catalog=TempDBforCST;Integrated Security=True""))
                        {
                            connection.Open();

                            using (SqlCommand command = new SqlCommand(checkClientQuery, connection))
                            {
                                command.Parameters.AddWithValue(""@ClientName"", selectedClient);
                                command.Parameters.AddWithValue(""@SectionName"", selectedSection);

                                existingClientsCount = Convert.ToInt32(command.ExecuteScalar());
                            }
                        }

                        if (existingClientsCount > 0)
                        {
                            // Client already exists
                            MessageBox.Show(""ŸäŸàÿ¨ÿØ ÿßÿ¥ÿ™ÿ±ÿßŸÉ ŸÑŸÜŸÅÿ≥ ÿßŸÑŸÖÿ¥ÿ™ÿ±ŸÉ ŸÅŸä Ÿáÿ∞ÿß ÿßŸÑŸÇÿ≥ŸÖ, ÿßÿ≠ÿ∞ŸÅ ÿßŸÑÿßÿ¥ÿ™ÿ±ÿßŸÉ ÿßŸÑŸÇÿØŸäŸÖ ÿ´ŸÖ ÿßÿπÿØ ÿßŸÑŸÖÿ≠ÿßŸàŸÑÿ©"", ""ÿÆÿ∑ÿ£"", MessageBoxButtons.OK, MessageBoxIcon.Error);

                            return;
                        }


                        // Insert the subscription into the subscription tabl
                        string query = ""INSERT INTO Subscriptions (ClientID, ClientName, SectionID, SectionName, CoachID, CoachName, SubscriptionDate, SubscriptionTypeID, SubscriptionType, TotalSubscriptionAmount) "" +
                                       ""VALUES (@ClientID, @ClientName, @SectionID, @SectionName, @CoachID, @CoachName, @SubscriptionDate, @SubscriptionTypeID, @SubscriptionType, @TotalSubscriptionAmount)"";

                        using (SqlConnection connection = new SqlConnection(""Data Source=DESKTOP-4J8VJT3;Initial Catalog=TempDBforCST;Integrated Security=True""))
                        {
                            connection.Open();

                            using (SqlCommand command = new SqlCommand(query, connection))
                            {
                                //Get the fee
                                int.TryParse(textBox3.Text, out TotalSubscriptionAmount);
                                if(TotalSubscriptionAmount<1000)
                                {
                                    MessageBox.Show(""ŸÇŸäŸÖÿ© ÿßŸÑÿßÿ¥ÿ™ÿ±ÿßŸÉ ÿ∫Ÿäÿ± ÿµÿßŸÑÿ≠ÿ©"", ""ÿÆÿ∑ÿ£"", MessageBoxButtons.OK, MessageBoxIcon.Error);
                                    return;
                                }

                                // Retrieve the ClientID from the database based on the selected client name
                                string clientIDQuery = ""SELECT ClientID FROM Clients WHERE ClientName = @ClientName"";
                                command.Parameters.AddWithValue(""@ClientName"", selectedClient);
                                int clientID = 0;

                                using (SqlCommand clientCommand = new SqlCommand(clientIDQuery, connection))
                                {
                                    clientCommand.Parameters.AddWithValue(""@ClientName"", selectedClient);
                                    clientID = (int)clientCommand.ExecuteScalar();
                                }

                                // Retrieve the CoachID from the database based on the selected coach name
                                string coachIDQuery = ""SELECT CoachID FROM Coaches WHERE CoachName = @CoachName"";
                                command.Parameters.AddWithValue(""@CoachName"", selectedCoach);
                                int coachID = 0;

                                using (SqlCommand coachCommand = new SqlCommand(coachIDQuery, connection))
                                {
                                    coachCommand.Parameters.AddWithValue(""@CoachName"", selectedCoach);
                                    coachID = (int)coachCommand.ExecuteScalar();
                                }

                                // Retrieve the SubscriptionTypeID from the database based on the selected subscription type
                                string subscriptionTypeIDQuery = ""SELECT SubscriptionID FROM SubscriptionType WHERE SubscriptionName = @SubscriptionType"";
                                command.Parameters.AddWithValue(""@SubscriptionType"", subscriptionType);
                                int subscriptionTypeID = 0;

                                using (SqlCommand subscriptionTypeCommand = new SqlCommand(subscriptionTypeIDQuery, connection))
                                {
                                    subscriptionTypeCommand.Parameters.AddWithValue(""@SubscriptionType"", subscriptionType);
                                    subscriptionTypeID = Convert.ToInt32(subscriptionTypeCommand.ExecuteScalar());
                                }

                                // Retrieve the SectionID from the database based on the selected section name
                                string sectionIDQuery = ""SELECT SectionID FROM Sections WHERE SectionName = @SectionName"";
                                int sectionID = 0;

                                using (SqlCommand sectionCommand = new SqlCommand(sectionIDQuery, connection))
                                {
                                    sectionCommand.Parameters.AddWithValue(""@SectionName"", selectedSection);
                                    sectionID = (int)sectionCommand.ExecuteScalar();
                                }
                              


                                // Set the parameter values for the command
                                command.Parameters.Clear(); // Clear previous parameters
                                command.Parameters.AddWithValue(""@ClientID"", clientID);
                                command.Parameters.AddWithValue(""@ClientName"", selectedClient);
                                command.Parameters.AddWithValue(""@SectionID"", sectionID);
                                command.Parameters.AddWithValue(""@SectionName"", selectedSection);
                                command.Parameters.AddWithValue(""@CoachID"", coachID);
                                command.Parameters.AddWithValue(""@CoachName"", selectedCoach);
                                command.Parameters.AddWithValue(""@SubscriptionDate"", subscriptionDate);
                                command.Parameters.AddWithValue(""@SubscriptionTypeID"", subscriptionTypeID);
                                command.Parameters.AddWithValue(""@SubscriptionType"", subscriptionType);
                                command.Parameters.AddWithValue(""@TotalSubscriptionAmount"", TotalSubscriptionAmount);

                                command.ExecuteNonQuery();
                            }
                        }

                        // Display a success message or perform additional actions
                        MessageBox.Show(""ÿ™ŸÖ ÿßÿ∂ÿßŸÅÿ© ÿßŸÑÿßÿ¥ÿ™ÿ±ÿßŸÉ ÿ®ŸÜÿ¨ÿßÿ≠"",""confirmation"",MessageBoxButtons.OK,MessageBoxIcon.Information);

                        //if the user entered a payment value
                        if (!(string.IsNullOrEmpty(textBox4.Text)))
                        {
                            int payment = 0;
                            int.TryParse(textBox4.Text, out payment);
                            if (payment < 1000)
                            {
                                MessageBox.Show(""ÿ™ŸÖ ÿ™ÿ≥ÿ¨ŸäŸÑ ÿßŸÑÿßÿ¥ÿ™ÿ±ÿßŸÉ ÿØŸàŸÜ ÿ™ÿ≥ÿ¨ŸäŸÑ ÿßŸÑÿØŸÅÿπÿ©, ŸÇŸäŸÖÿ© ÿØŸÅÿπÿ© ÿ∫Ÿäÿ± ÿµÿßŸÑÿ≠ÿ©"", ""ÿÆÿ∑ÿ£"", MessageBoxButtons.OK, MessageBoxIcon.Error);
                                return;
                            }
                            int remainingPaymentAmount = 0;
                            int.TryParse(textBox5.Text, out remainingPaymentAmount);
                            if (remainingPaymentAmount > 0 && remainingPaymentAmount <= 1000)
                            {
                                MessageBox.Show(""ÿ™ŸÖ ÿ™ÿ≥ÿ¨ŸäŸÑ ÿßŸÑÿßÿ¥ÿ™ÿ±ÿßŸÉ ÿØŸàŸÜ ÿ™ÿ≥ÿ¨ŸäŸÑ ÿßŸÑÿØŸÅÿπÿ©, ŸÇŸäŸÖÿ© ÿßŸÑŸÖÿ®ŸÑÿ∫ ÿßŸÑŸÖÿ™ÿ®ŸÇŸä ÿ∫Ÿäÿ± ÿµÿßŸÑÿ≠ÿ©"", ""ÿÆÿ∑ÿ£"", MessageBoxButtons.OK, MessageBoxIcon.Error);
                                return;
                            }
                          //  string selectedClient;
                            if (comboBox3.SelectedIndex >= 0)
                            {
                                selectedClient = comboBox3.SelectedItem.ToString();

                            }
                            else
                            {
                                selectedClient = textBox1.Text;
                            }
                           subscriptionType = comboBox2.SelectedItem.ToString();
                            DateTime subscriptionEndDate;


                            // Get the selected section
                             selectedSection = comboBox4.SelectedItem.ToString();
                            RecordPaymentInfo(selectedClient, selectedSection, subscriptionType, payment, remainingPaymentAmount, DateTime.Today);
                            if (remainingPaymentAmount == 0)
                            {
                                if (subscriptionType == ""ÿ¥Ÿáÿ±Ÿä"")
                                {
                                    subscriptionEndDate = DateTime.Now.AddMonths(1);
                                    UpdateSubscriptionEndDate(subscriptionEndDate, selectedClient, selectedSection);

                                }
                                else if (subscriptionType == ""ŸÜÿµŸÅ ÿ¥Ÿáÿ±Ÿä"")
                                {
                                    subscriptionEndDate = DateTime.Now.AddDays(15);
                                    UpdateSubscriptionEndDate(subscriptionEndDate, selectedClient, selectedSection);

                                }
                                else if (subscriptionType == ""ÿßÿ≥ÿ®ŸàÿπŸä"")
                                {
                                    subscriptionEndDate = DateTime.Now.AddDays(7);
                                    UpdateSubscriptionEndDate(subscriptionEndDate, selectedClient, selectedSection);

                                }
                                else if (subscriptionType == ""ÿ≥ŸÜŸàŸä"")
                                {
                                    subscriptionEndDate = DateTime.Now.AddDays(365);
                                    UpdateSubscriptionEndDate(subscriptionEndDate, selectedClient, selectedSection);

                                }
                            }
                        }
                    }



                    else
                    {
                        // Get the client's name and phone number
                        string clientName = textBox1.Text; // Assuming the client's name is entered in textBox1
                        string phoneNumber = textBox2.Text; // Assuming the client's phone number is entered in textBox2


                        // Check if the client already exists
                        string checkClientQuery = ""SELECT COUNT(*) FROM Clients WHERE ClientName = @ClientName"";

                        int existingClientsCount;

                        using (SqlConnection connection = new SqlConnection(""Data Source=DESKTOP-4J8VJT3;Initial Catalog=TempDBforCST;Integrated Security=True""))
                        {
                            connection.Open();

                            using (SqlCommand command = new SqlCommand(checkClientQuery, connection))
                            {
                                command.Parameters.AddWithValue(""@ClientName"", clientName);

                                existingClientsCount = Convert.ToInt32(command.ExecuteScalar());
                            }
                        }

                        if (existingClientsCount > 0)
                        {
                            // Client already exists
                            MessageBox.Show(""ŸäŸàÿ¨ÿØ ŸÖÿ¥ÿ™ÿ±ŸÉ ÿ®ŸÜŸÅÿ≥ ÿßŸÑÿßÿ≥ŸÖ ÿßŸÑŸÖÿØÿÆŸÑ"", ""ÿÆÿ∑ÿ£"", MessageBoxButtons.OK, MessageBoxIcon.Error);

                            return;

                            
                          
                        }
                            

                        else
                        {
                            // Insert the client into the Clients table
                            string insertClientQuery = ""INSERT INTO Clients (ClientName, PhoneNumber) VALUES (@ClientName, @PhoneNumber); SELECT SCOPE_IDENTITY();"";
                            int clientId;

                            using (SqlConnection connection = new SqlConnection(""Data Source=DESKTOP-4J8VJT3;Initial Catalog=TempDBforCST;Integrated Security=True""))
                            {
                                connection.Open();

                                using (SqlCommand command = new SqlCommand(insertClientQuery, connection))
                                {
                                    command.Parameters.AddWithValue(""@ClientName"", clientName);
                                    command.Parameters.AddWithValue(""@PhoneNumber"", phoneNumber);

                                    clientId = Convert.ToInt32(command.ExecuteScalar());
                                }

                                if (clientId > 0)
                                {
                                    // Get the selected section
                                    string selectedSection = comboBox4.SelectedItem.ToString();

                                    // Retrieve the SectionID from the Sections table based on the selected section name
                                    string sectionIdQuery = ""SELECT SectionID FROM Sections WHERE SectionName = @SelectedSection"";
                                    int sectionId;

                                    using (SqlCommand command = new SqlCommand(sectionIdQuery, connection))
                                    {
                                        command.Parameters.AddWithValue(""@SelectedSection"", selectedSection);

                                        sectionId = Convert.ToInt32(command.ExecuteScalar());
                                    }

                                    // Get the selected coach
                                    string selectedCoach = comboBox1.SelectedItem.ToString();

                                    // Retrieve the CoachID from the Coaches table based on the selected coach name
                                    string coachIdQuery = ""SELECT CoachID FROM Coaches WHERE CoachName = @SelectedCoach"";
                                    int coachId;

                                    using (SqlCommand command = new SqlCommand(coachIdQuery, connection))
                                    {
                                        command.Parameters.AddWithValue(""@SelectedCoach"", selectedCoach);

                                        coachId = Convert.ToInt32(command.ExecuteScalar());
                                    }

                                    // Get the subscription date
                                    DateTime subscriptionDate = dateTimePicker1.Value;

                                    // Get the subscription type
                                    string subscriptionType = comboBox2.SelectedItem.ToString();

                                    // Retrieve the SubscriptionTypeID from the SubscriptionTypes table based on the selected subscription type
                                    string subscriptionTypeIdQuery = ""SELECT SubscriptionID FROM SubscriptionType WHERE SubscriptionName = @SelectedSubscriptionType"";
                                    int subscriptionTypeId;

                                    using (SqlCommand command = new SqlCommand(subscriptionTypeIdQuery, connection))
                                    {
                                        command.Parameters.AddWithValue(""@SelectedSubscriptionType"", subscriptionType);

                                        subscriptionTypeId = Convert.ToInt32(command.ExecuteScalar());
                                    }

                                    // Insert the subscription into the subscription tabl
                                    string insertSubscriptionQuery = ""INSERT INTO Subscriptions (ClientID, ClientName, SectionID, SectionName, CoachID, CoachName, SubscriptionDate, SubscriptionTypeID, SubscriptionType, TotalSubscriptionAmount) "" +
                                                   ""VALUES (@ClientID, @ClientName, @SectionID, @SectionName, @CoachID, @CoachName, @SubscriptionDate, @SubscriptionTypeID, @SubscriptionType, @TotalSubscriptionAmount)"";
                                    int TotalSubscriptionAmount = 0;
                                    int.TryParse(textBox3.Text, out TotalSubscriptionAmount);
                                    if(TotalSubscriptionAmount<1000)
                                    {
                                        MessageBox.Show(""ŸÇŸäŸÖÿ© ÿßŸÑÿßÿ¥ÿ™ÿ±ÿßŸÉ ÿ∫Ÿäÿ± ÿµÿßŸÑÿ≠ÿ©"", ""ÿÆÿ∑ÿ£"", MessageBoxButtons.OK, MessageBoxIcon.Error);
                                        return;
                                    }

                                    using (SqlCommand command = new SqlCommand(insertSubscriptionQuery, connection))
                                    {
                                        command.Parameters.AddWithValue(""@ClientID"", clientId);
                                        command.Parameters.AddWithValue(""@ClientName"", clientName);
                                        command.Parameters.AddWithValue(""@SectionID"", sectionId);
                                        command.Parameters.AddWithValue(""@SectionName"", selectedSection);
                                        command.Parameters.AddWithValue(""@CoachID"", coachId);
                                        command.Parameters.AddWithValue(""@CoachName"", selectedCoach);
                                        command.Parameters.AddWithValue(""@SubscriptionDate"", subscriptionDate);
                                        command.Parameters.AddWithValue(""@SubscriptionTypeID"", subscriptionTypeId);
                                        command.Parameters.AddWithValue(""@SubscriptionType"", subscriptionType);
                                        command.Parameters.AddWithValue(""@TotalSubscriptionAmount"", TotalSubscriptionAmount);


                                        command.ExecuteNonQuery();
                                    }

                                    // Display a success message or perform additional actions
                                    MessageBox.Show(""ÿ™ŸÖÿ™ ÿßÿ∂ÿßŸÅÿ© ÿßŸÑÿßÿ¥ÿ™ÿ±ÿßŸÉ ÿ®ŸÜÿ¨ÿßÿ≠"");
                                }
                            }

                        }

                    }

                }

            }
            //if the user entered a payment value
            if(!(string.IsNullOrEmpty(textBox4.Text))) 
            {
                int payment = 0;
                int.TryParse(textBox4.Text, out  payment);
                if(payment<1000)
                {
                    MessageBox.Show(""ÿ™ŸÖ ÿ™ÿ≥ÿ¨ŸäŸÑ ÿßŸÑÿßÿ¥ÿ™ÿ±ÿßŸÉ ÿØŸàŸÜ ÿ™ÿ≥ÿ¨ŸäŸÑ ÿßŸÑÿØŸÅÿπÿ©, ŸÇŸäŸÖÿ© ÿØŸÅÿπÿ© ÿ∫Ÿäÿ± ÿµÿßŸÑÿ≠ÿ©"", ""ÿÆÿ∑ÿ£"", MessageBoxButtons.OK, MessageBoxIcon.Error);
                    return;
                }
                int remainingPaymentAmount = 0;
                int.TryParse(textBox5.Text, out remainingPaymentAmount);
                if(remainingPaymentAmount>0 && remainingPaymentAmount<=1000)
                {
                    MessageBox.Show(""ÿ™ŸÖ ÿ™ÿ≥ÿ¨ŸäŸÑ ÿßŸÑÿßÿ¥ÿ™ÿ±ÿßŸÉ ÿØŸàŸÜ ÿ™ÿ≥ÿ¨ŸäŸÑ ÿßŸÑÿØŸÅÿπÿ©, ŸÇŸäŸÖÿ© ÿßŸÑŸÖÿ®ŸÑÿ∫ ÿßŸÑŸÖÿ™ÿ®ŸÇŸä ÿ∫Ÿäÿ± ÿµÿßŸÑÿ≠ÿ©"", ""ÿÆÿ∑ÿ£"", MessageBoxButtons.OK, MessageBoxIcon.Error);
                    return;
                }
                string selectedClient;
                if (comboBox3.SelectedIndex>=0)
                {
                   selectedClient = comboBox3.SelectedItem.ToString();

                }else
                {
                    selectedClient = textBox1.Text;
                }
                string subscriptionType = comboBox2.SelectedItem.ToString();
                DateTime subscriptionEndDate;


                // Get the selected section
                string selectedSection = comboBox4.SelectedItem.ToString();
                RecordPaymentInfo(selectedClient, selectedSection, subscriptionType, payment, remainingPaymentAmount, DateTime.Today);
                if(remainingPaymentAmount==0)
                {
                    if(subscriptionType==""ÿ¥Ÿáÿ±Ÿä"")
                    {
                        subscriptionEndDate = DateTime.Now.AddMonths(1);
                        UpdateSubscriptionEndDate(subscriptionEndDate, selectedClient, selectedSection);

                    }
                    else if (subscriptionType==""ŸÜÿµŸÅ ÿ¥Ÿáÿ±Ÿä"")
                    {
                        subscriptionEndDate = DateTime.Now.AddDays(15);
                        UpdateSubscriptionEndDate(subscriptionEndDate, selectedClient, selectedSection);

                    }
                    else if(subscriptionType==""ÿßÿ≥ÿ®ŸàÿπŸä"")
                    {
                        subscriptionEndDate= DateTime.Now.AddDays(7);
                        UpdateSubscriptionEndDate(subscriptionEndDate, selectedClient, selectedSection);

                    }
                    else if(subscriptionType == ""ÿ≥ŸÜŸàŸä"")
                    {
                        subscriptionEndDate= DateTime.Now.AddDays(365);
                        UpdateSubscriptionEndDate(subscriptionEndDate, selectedClient, selectedSection);

                    }
                }
            }
        }

        public void UpdateSubscriptionEndDate(DateTime subscriptionEndDate, string clientName, string clientSection)
        {
            // Updated query to include conditions for clientName and clientSection.
            string updateQuery = ""UPDATE Subscriptions SET subscriptionEndDate = @subscriptionEndDate WHERE  clientName = @clientName AND SectionName = @clientSection"";

            using (SqlConnection connection = new SqlConnection(connectionString))
            {
                using (SqlCommand command = new SqlCommand(updateQuery, connection))
                {
                    // Add the subscriptionEndDate parameter to the command.
                    command.Parameters.AddWithValue(""@subscriptionEndDate"", subscriptionEndDate);
                    // Add the clientName parameter to the command.
                    command.Parameters.AddWithValue(""@clientName"", clientName);
                    // Add the clientSection parameter to the command.
                    command.Parameters.AddWithValue(""@clientSection"", clientSection);

                   
                    connection.Open();
                    // Execute the update command.
                    command.ExecuteNonQuery();
                    
                   
                }
            }
        }"
2fP8p8FU,Untitled,KazaruRoblox,Lua,Sunday 31st of March 2024 01:11:50 AM CDT,"-- MODULE SCRIPT TO CONTROL GAME FUNCTIONS SQUID CHALLENGE BY KAZARUGAMING
--Services
local PS = game:GetService(""Players"")
local Run = game:GetService(""RunService"")
local SS = game:GetService(""ServerStorage"")
local Debris = game:GetService(""Debris"")
local TS = game:GetService(""TweenService"")
local RS = game:GetService(""ReplicatedStorage"")
--Module
local Zone = require(RS.Zone) -- I USED ZONE MODULE SCRIPT TO DETECT THE ZONES THAT PLAYER STEPPED IN THE MINIGAME
--Functions
function Format(Int)
	return string.format(""%02i"", Int) -- so it only returns 2 digit of integer
end

function convertToMS(Seconds) -- CONVERTING TIME FORMAT
	local Minutes = (Seconds - Seconds%60)/60
	Seconds = Seconds - Minutes*60
	
	return Format(Minutes).."":""..Format(Seconds)
end

local function GetTouchingParts(part)
	local connection = part.Touched:Connect(function() end)
	local results = part:GetTouchingParts()
	connection:Disconnect()
	return results
end

local function ClearTable(Table)
	if Table ~= {} then
		for i,v in pairs(Table) do
			Table[i] = nil
		end
		Table = {}
	end
end

--Main
local Mod = {}

Mod.EnoughPlayers = false
Mod.IntermissionTime = 60
Mod.CurrentPlayers = {}
Mod.Minigames = {
	{
		Name = ""Red Light Green Light"",
		Begin = function() -- THIS IS THE MINIGAME RED LIGHT GREEN LIGHT START FUNCTION 
			local Head: BasePart = workspace[""Minigame Items""][""Red Light Green Light""].DollHead
			local WinZone = Zone.new(workspace[""Minigame Items""][""Red Light Green Light""][""Win Zone""]) -- this is the zone that placed 																											 near the doll
			local DeathZone = workspace[""Minigame Items""][""Red Light Green Light""][""Death Zone""] 
			local DeathRegion = Zone.new(DeathZone) -- making the region
			local TimerPanel = workspace[""Minigame Items""][""Red Light Green Light""][""Timer Panel""]
			local GunshotSound = SS.Gunshot
			local Finished = false -- boolean to check if the game has finished
			local Move = true -- to check when the player can move or cant
			local MoveConnections = {}
			local JumpConnections = {}
			local DeathConnections = {}
			local Winners = {}
			local InDeathRegion = {}
			
			local Sound = SS.Song:Clone() -- this is the bokuwa kuci sound (the doll's sound lol)
			Sound.Parent = workspace[""Minigame Items""][""Red Light Green Light""] -- put the sound on the workspace cause its originally 																					  from SS
			
			-- FUNCTIONS
			local function TweenHead(Direction) -- Function to tween the doll's head
				local TI = TweenInfo.new(
					.35,
					Enum.EasingStyle.Linear,
					Enum.EasingDirection.Out
				)
				local TP = nil
				if Direction == ""Front"" then -- if the given order direction is front
					TP = {
						Orientation = Vector3.new(0, -90, 0) -- the doll's head faces front
					}
				else
					TP = {
						Orientation = Vector3.new(0, 90, 0) -- the doll's head faces back
					}
				end
				local Tween = TS:Create(Head, TI, TP)
				Tween:Play()
			end
			
			WinZone.playerEntered:Connect(function(EnteredPlr) -- this Module detect every player that enter the WinZone
				local Index = table.find(Mod.CurrentPlayers, EnteredPlr) 
				if Index then -- check if the player that entered is on the CurrentPlayer table
					table.remove(Mod.CurrentPlayers, Index) -- remove the player from table
					MoveConnections[EnteredPlr]:Disconnect()
					MoveConnections[EnteredPlr] = nil
					JumpConnections[EnteredPlr]:Disconnect() -- removing the player from move,jump,death connections
					JumpConnections[EnteredPlr] = nil
					DeathConnections[EnteredPlr]:Disconnect()
					DeathConnections[EnteredPlr] = nil
					
					Winners[#Winners + 1] = EnteredPlr -- put the player on the winner table
				end
			end)
			
			DeathRegion.playerEntered:Connect(function(EnteredPlr) -- this Module detect every player that ENTER the DeathRegion (THE 																		FIELD)
				local Index = table.find(InDeathRegion, EnteredPlr)
				if not Index then -- check if the player that entered is not on the DeathRegion table
					InDeathRegion[#InDeathRegion + 1] = EnteredPlr -- put the player on the deathregion table
				end
			end)
			
			DeathRegion.playerExited:Connect(function(ExitPlr) -- this Module detect every player that EXIT the DeathRegion (THE FIELD)
				local Index = table.find(InDeathRegion, ExitPlr)
				if Index then -- if the player exited from the death region then the player is removed from the death region table
					table.remove(InDeathRegion, ExitPlr)
				end
			end)
			
			for i,v in pairs(Mod.CurrentPlayers) do
				local vChar = v.Character
				if vChar and vChar:FindFirstChild(""Humanoid"") then
					local vHum = vChar.Humanoid
					
					DeathConnections[v] = vHum.Died:Connect(function() 
						-- THIS BELLOW IS USED TO REMOVE THE PLAYER THAT DIED FROM THE CURRENT PLAYER TABLE AND THE PLAYER WONT EFFECT 							  ANYTHING ON THE MINIGAME
						print(""Dead"")
						local Index = table.find(Mod.CurrentPlayers, v)
						if Index then
							table.remove(Mod.CurrentPlayers, Index)
							
							MoveConnections[v]:Disconnect()
							MoveConnections[v] = nil
							
							JumpConnections[v]:Disconnect()
							JumpConnections[v] = nil
							
							DeathConnections[v]:Disconnect()
							DeathConnections[v] = nil
						end
					end)
					
					MoveConnections[v] = Run.Heartbeat:Connect(function()
						if vHum.MoveDirection.Magnitude > 0 then -- if the player move
							if not Move and not table.find(Winners, v) and vHum.Health > 0 and table.find(InDeathRegion, v) then
								-- if its not right time to move, and isnt winner, and isnt died, and player still in the field 
								vHum:TakeDamage(1000) -- it kills the player

								local GunshotSoundClone = GunshotSound:Clone() -- gun sound
								GunshotSoundClone.Parent = workspace[""Minigame Items""][""Red Light Green Light""]
								GunshotSoundClone:Play()
								Debris:AddItem(GunshotSoundClone, 3) -- delete it after 3 sec
							end
						end
					end)
					
					JumpConnections[v] = vHum:GetPropertyChangedSignal(""Jump""):Connect(function() -- if the player jump 
						if not Move and not table.find(Winners, v) and vHum.Health > 0 and table.find(InDeathRegion, v) then
							-- if its not right time to JUMP, and isnt winner, and isnt died, and player still in the field 
							vHum:TakeDamage(1000) -- it kills the player

							local GunshotSoundClone = GunshotSound:Clone() -- gun sound
							GunshotSoundClone.Parent = workspace[""Minigame Items""][""Red Light Green Light""]
							GunshotSoundClone:Play()
							Debris:AddItem(GunshotSoundClone, 3) -- delete it after 3 sec
						end
					end)
				end
			end
			
			-- MINIGAME PREPARATION
			DeathZone.CanCollide = true  -- the player cant come to the field yet
			Sound.PlaybackSpeed = 1 -- default playback speed
			
			for i = 20,1,-1 do -- BEFORE START THEY HAVE TO WAIT 20 SECONDS TO PREPARE
				TimerPanel.SurfaceGui.Timer.Text = convertToMS(i)
				wait(1)
			end
			DeathZone.CanCollide = false -- the player can come to the field 
            
			-- MINI GAME START
			Mod:Wrap(function() -- wrap so the other function can still run (TIMER FUNCTION)
				for i = 120,1,-1 do
					wait(1)
					TimerPanel.SurfaceGui.Timer.Text = convertToMS(i)
					if #Mod.CurrentPlayers == 0 then -- if theres no player left
						Finished = true -- the game is finished
						break
					end
				end
				
				if not Finished then -- if its not finished but the countdown is over
					Finished = true -- the game is finished
					for i,v in pairs(MoveConnections) do -- clear the table
						MoveConnections[v]:Disconnect()
						MoveConnections[v] = nil
					end
					MoveConnections = nil
					for i,v in pairs(JumpConnections) do -- clear the table
						JumpConnections[v]:Disconnect()
						JumpConnections[v] = nil
					end
					JumpConnections = nil

					local Results = GetTouchingParts(DeathZone) -- CHECKING WHOEVER PLAYER THAT STILL ON THE FIELD
					for i,v in pairs(Results) do
						if v.Parent and v.Parent:FindFirstChild(""Humanoid"") then
							local vHum: Humanoid = v.Parent.Humanoid
							vHum:TakeDamage(1000) -- FORCE THE PLAYER TO DIE BECAUSE THE TIME IS OVER
							local GunshotSoundClone = GunshotSound:Clone()
							GunshotSoundClone.Parent = workspace[""Minigame Items""][""Red Light Green Light""]
							GunshotSoundClone:Play()
							Debris:AddItem(GunshotSoundClone, 3)
						end
					end
					
					for i,v in pairs(DeathConnections) do -- clear the table
						if DeathConnections[v] ~= nil then
							DeathConnections[v]:Disconnect()
							DeathConnections[v] = nil
						end
					end
					DeathConnections = nil
				end
			end)
			
			Mod:Wrap(function() -- RESPAWN PLAYERS FUNCTION
				while true do
					if Finished then -- if the game has finished
						Sound:Stop()
						
						local StarterSpawnPoint = workspace[""StarterSpawnPoint""] -- this is the origin spawn point
						for i,v in pairs(Winners) do
							local vChar: Model = v.Character

							if vChar then
								local vHumanoidRP = vChar:FindFirstChild(""HumanoidRootPart"")
								if vHumanoidRP then
									vHumanoidRP.CFrame = StarterSpawnPoint.CFrame * CFrame.new(0, 2, 0) -- Teleport the players to the spawn location
								end
							end
						end

						ClearTable(Winners) -- clear the winner table
						break
					end
					Run.Heartbeat:Wait()
				end
			end)
			
			while true do
				if not Finished then -- if the game still running 
					-- HANDLE SOUNDS MECHANIC
					Sound:Play()
					
					local Done = false
					Sound.Ended:Connect(function()
						Done = true
					end)
					Sound.Stopped:Connect(function()
						Done = true
					end)
					
					repeat
						Run.Heartbeat:Wait() -- check if the sound is done playing
					until Done == true
					
					Move = false -- the players isnt allowed to move
					TweenHead(""Front"") -- order to move the dolls head to face front
					
					Sound.PlaybackSpeed += .05 -- the playback increase everytime
					
					wait(5) -- wait 5 seconds and the player can move again
					Move = true
					TweenHead(""Back"") -- order to move the dolls head to face back
				elseif Finished then 
					break -- if the game has finished the loop stop
				end
				Run.Heartbeat:Wait()
			end
			-- clear the things used on the minigame
			Sound:Destroy()
			ClearTable(InDeathRegion)
			DeathRegion:Destroy()
			WinZone:Destroy()
		end,
	}
}

function Mod:Wrap(func) -- function to make a wrap coroutine
	coroutine.wrap(func)()
end

function Mod:Start() -- INTERMISSION FUNCTION called on a serverscript
	ClearTable(self.CurrentPlayers) -- clear current players so the players that play recently is removed from the table
	self.EnoughPlayers = true -- this debounce tells the players is enough
	
	local InterRegion = workspace:FindFirstChild(""Inter Region"")
	local TimerPanel = workspace:FindFirstChild(""Timer Panel"")
	if InterRegion and TimerPanel then
		for i = self.IntermissionTime,1,-1 do
			if self.EnoughPlayers then
				TimerPanel.SurfaceGui.Timer.Text = convertToMS(i)
				wait(1)
			else
				TimerPanel.SurfaceGui.Timer.Text = ""Not Enough Players""
				break
			end
		end
		
		if self.EnoughPlayers then
			local Results = GetTouchingParts(InterRegion) 
			local FoundTable = {}
			
			for i,v in pairs(Results) do -- getting all players that stand on the InterRegion area
				if v.Parent and v.Parent:FindFirstChild(""Humanoid"") then
					local vPlr: Player = PS:GetPlayerFromCharacter(v.Parent)
					if vPlr and FoundTable[vPlr] == nil then
						FoundTable[vPlr] = true
						self.CurrentPlayers[#self.CurrentPlayers + 1] = vPlr -- put all the players on the currentplayers table
						print(self.CurrentPlayers)
					end
				end
			end
			
			ClearTable(FoundTable) -- clear the table because it's no longer used
			
			local Minigame = self.Minigames[math.random(1,#self.Minigames)] -- Pick 1 minigame, but currently the minigame only 1 so it 																			   will automatically only pick Red Light Green Light
			local SpawnPoint: BasePart = workspace[""Minigame Spawns""]:FindFirstChild(Minigame.Name)
			
			TimerPanel.SurfaceGui.Timer.Text = ""Playing "" .. Minigame.Name
			
			for i,v in pairs(self.CurrentPlayers) do
				local vChar: Model = v.Character
				if vChar then
					local vHumanoidRP = vChar:FindFirstChild(""HumanoidRootPart"")
					if vHumanoidRP then
						vHumanoidRP.CFrame = SpawnPoint.CFrame * CFrame.new(0, 2, 0) -- spawning the player character to the minigame 																						  spawnpoint
					end
				end
			end
			
			if #self.CurrentPlayers > 0 then -- just double check if the currentplayer is more than 0
				Minigame.Begin() -- it run the begin function of the minigame
			end
			self:Start() -- it will run the INTERMISSION FUNCTION again after the minigame is ended or it isnt pass the if statment
		end
	end
end

return Mod"
y4SnPvfL,fnoise,eea,Lua,Sunday 31st of March 2024 01:08:21 AM CDT,"local xseed = (math.random()-.5)*10^5
local yseed = (math.random()-.5)*10^5
--local spawnp = workspace:WaitForChild(""SpawnLocation"")
local w = 100
local h = 100
local grid = {}
local fgrid = {}
local land = {}
local world = Instance.new(""Folder"", workspace)
world.Name = ""World""
--world:SetAttribute(""w"", w)
--world:SetAttribute(""h"", h)
--spawnp.Position = Vector3.xAxis*w*0.5 + Vector3.zAxis*h*0.5 + Vector3.yAxis*117.05

local water = Color3.new(0, 0, 0.5)
local lamd = Color3.new(0, 0.65, 0)

function inbounds(x,y)
	return x >= 1 and x <= w and y >= 1 and y <= h
end

function gn(x,y)
	local neiehbtgorps = {}
	local land_count = 0
	local water_count = 0
	for py = y-1,y+1 do
		for px = x-1,x+1 do
			if inbounds(px,py) and ((px ~= x) or (py ~= y)) then
				table.insert(neiehbtgorps, fgrid[py][px])
				if fgrid[py][px]:GetAttribute(""LandType"") == 1 then
					land_count += 1
				end
				if fgrid[py][px]:GetAttribute(""LandType"") == 0 then
					water_count += 1
				end
			end
		end
	end
	return neiehbtgorps, {land_count, water_count}
end

function find(x,y)
	local n = """"
	for nx = x-1,x+1 do
		for ny = y-1,y+1 do
			if nx >= 1 and nx <= w and ny >= 1 and ny <= h and (nx ~= x) and (ny ~= y) then
				n ..= nx.."",""..ny.."" ""
			end
		end
	end
	return n:sub(1,#n-1)
end

function fnoise(x,y,z,octaves,lacunarity,persistance)
	local tnoise = 0
	local amplitude = 1
	local detail = 1
	for i = 1, octaves do
		tnoise += math.noise(x*detail + xseed,y*detail + yseed,z*detail + xseed-yseed)*amplitude
		amplitude *= persistance
		detail *= lacunarity
	end
	tnoise += math.noise(x*lacunarity,y*lacunarity,z*lacunarity)*amplitude
	return tnoise
end

for y = 1,h do
	local the_table = {}
	local tt = {}
	for x = 1,w do
		
		local tnoise = fnoise(x/23,y/23,0,6,3,0.45)
		
		local The_Instance = Instance.new(""Part"", script)
		The_Instance.Material = ""SmoothPlastic""
		The_Instance.Position = Vector3.new(x, 7, y)
		The_Instance.Size = Vector3.one
		The_Instance.Anchored = true
		The_Instance.Name = x.."",""..y
		The_Instance:SetAttribute(""L"", The_Instance.Name)
		The_Instance:SetAttribute(""N"", find(x,y))
		if tnoise + (math.random()-.5)/50 > 0.175 then
			The_Instance.Color = Color3.new(0, .65, 0)
			The_Instance:SetAttribute(""LandType"", 1)
			table.insert(land, {x, y})
			the_table[x] = {1}
			The_Instance:SetAttribute(""B"", false)
		else
			The_Instance.Color = Color3.new(0, 0, .5)
			The_Instance:SetAttribute(""LandType"", 0)
			the_table[x] = {0}
		end
		tt[x] = The_Instance
	end
	grid[y] = the_table;
	fgrid[y] = tt;
    task.wait()
end

for y = 1,h do
	for x = 1,w do
		local p = fgrid[y][x]
		local land_type = p:GetAttribute(""LandType"")
		local n, c = gn(x, y)
		
		local col = p.Color
		if c[1] >= 1 and land_type == 0 then
			col = Color3.new(0,0,0.4)
		end
		if c[2] >= 3 and land_type == 1 then
			col = Color3.new(0,0.55,0)
			p:SetAttribute(""B"", true)
		end
		p.Color = col
	end
end"
k7z7BsTY,AirBrush,Mlulin,HTML,Sunday 31st of March 2024 12:41:15 AM CDT,"{
  ""versionCode"": 106030300,
  ""versionName"": ""6.3.3"",
  ""Msg"": ""Update Mod is available, to continue in our app please update it.
 
What's new:
- Performance Improvements.
- Bug Fixes.
- New Features introduced.
- Others minor changes.
 
Thanks for using"",
  ""downloadLink"": ""https://t.me/SNxTG""
  }"
HMehQ3Nc,Cheating,Mos_Studio,Lua,Sunday 31st of March 2024 12:00:24 AM CDT,"function Esp()
	pcall(function()
		for i,v in pairs(game.Players:GetChildren()) do
			if v.Name ~= game.Players.LocalPlayer.Name and v.Character and v.Character:FindFirstChild(""HumanoidRootPart"") and v.Character:FindFirstChild(""Humanoid"") then
				if not v.Character.HumanoidRootPart:FindFirstChild(""ESP"") then
					local BillboardGui = Instance.new(""BillboardGui"")
					local TextLabel = Instance.new(""TextLabel"")
					BillboardGui.Parent = v.Character.HumanoidRootPart
					BillboardGui.ZIndexBehavior = Enum.ZIndexBehavior.Sibling
					BillboardGui.Active = true
					BillboardGui.Name = ""ESP""
					BillboardGui.AlwaysOnTop = true
					BillboardGui.LightInfluence = 1.000
					BillboardGui.Size = UDim2.new(0, 150, 0, 10)
					BillboardGui.StudsOffset = Vector3.new(0, 2.5, 0)
					TextLabel.Parent = BillboardGui
					TextLabel.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
					TextLabel.BackgroundTransparency = 1.000
					TextLabel.Size = UDim2.new(1,0,1,0)
					TextLabel.Font = Enum.Font.GothamBold
					TextLabel.Text = v.Name
					TextLabel.TextColor3 = Color3.fromRGB(229, 188, 24)
					TextLabel.TextScaled = true
					TextLabel.TextSize = 14.000
					TextLabel.TextStrokeTransparency = 0.000
					TextLabel.TextWrapped = true
				else v.Character.HumanoidRootPart:FindFirstChild(""ESP"")
					v.Character.HumanoidRootPart:FindFirstChild(""ESP"").Enabled = true
					v.Character.HumanoidRootPart:FindFirstChild(""ESP"").TextLabel.Text = `{v.Name} ({ math.floor((v.Character.HumanoidRootPart.Position-game.Players.LocalPlayer.Character.HumanoidRootPart.Position).Magnitude) }) ({math.floor(v.Character.Humanoid.Health)})`
				end
			end
		end
	end)
end

function Zoom()
	local oldZoom = game.Workspace.CurrentCamera.FieldOfView
	local function createZoom(time, amount)
		local Tween_Info = TweenInfo.new(time, Enum.EasingStyle.Sine, Enum.EasingDirection.InOut) 
		local Tween = game:GetService(""TweenService""):Create(game.Workspace.CurrentCamera, Tween_Info, {FieldOfView = amount})
		return Tween
	end
	game:GetService(""UserInputService"").InputBegan:Connect(function(input)
		if input.KeyCode == Enum.KeyCode.C then
			createZoom(.2, 10):Play()
		elseif input.KeyCode == Enum.KeyCode.X then
			createZoom(.2, 0):Play()
		end
	end)

	game:GetService(""UserInputService"").InputEnded:Connect(function(input)
		if input.KeyCode == Enum.KeyCode.C then
			createZoom(.2, oldZoom):Play()
		elseif input.KeyCode == Enum.KeyCode.X then
			createZoom(.2, oldZoom):Play()
		end
	end)
end

function LoadedUI()
	-- init
	if not game:IsLoaded() then 
		game.Loaded:Wait()
	end

	if not syn or not protectgui then
		getgenv().protectgui = function() end
	end

	local SilentAimSettings = {
		Enabled = false,

		ClassName = ""Universal Silent Aim - Aethiel"",
		ToggleKey = ""RightAlt"",

		TeamCheck = false,
		VisibleCheck = false, 
		TargetPart = ""HumanoidRootPart"",
		SilentAimMethod = ""Raycast"",

		FOVRadius = 130,
		FOVVisible = false,
		ShowSilentAimTarget = false, 

		MouseHitPrediction = false,
		MouseHitPredictionAmount = 0.165,
		HitChance = 100
	}

	-- variables
	getgenv().SilentAimSettings = Settings
	local MainFileName = ""UniversalSilentAim""
	local SelectedFile, FileToSave = """", """"

	local Camera = workspace.CurrentCamera
	local Players = game:GetService(""Players"")
	local RunService = game:GetService(""RunService"")
	local GuiService = game:GetService(""GuiService"")
	local UserInputService = game:GetService(""UserInputService"")
	local HttpService = game:GetService(""HttpService"")

	local LocalPlayer = Players.LocalPlayer
	local Mouse = LocalPlayer:GetMouse()

	local GetChildren = game.GetChildren
	local GetPlayers = Players.GetPlayers
	local WorldToScreen = Camera.WorldToScreenPoint
	local WorldToViewportPoint = Camera.WorldToViewportPoint
	local GetPartsObscuringTarget = Camera.GetPartsObscuringTarget
	local FindFirstChild = game.FindFirstChild
	local RenderStepped = RunService.RenderStepped
	local GuiInset = GuiService.GetGuiInset
	local GetMouseLocation = UserInputService.GetMouseLocation

	local resume = coroutine.resume 
	local create = coroutine.create

	local ValidTargetParts = {""Head"", ""HumanoidRootPart""}
	local PredictionAmount = 0.165

	local mouse_box = Drawing.new(""Square"")
	mouse_box.Visible = true 
	mouse_box.ZIndex = 999 
	mouse_box.Color = Color3.fromRGB(54, 57, 241)
	mouse_box.Thickness = 20 
	mouse_box.Size = Vector2.new(20, 20)
	mouse_box.Filled = true 

	local fov_circle = Drawing.new(""Circle"")
	fov_circle.Thickness = 1
	fov_circle.NumSides = 100
	fov_circle.Radius = 180
	fov_circle.Filled = false
	fov_circle.Visible = false
	fov_circle.ZIndex = 999
	fov_circle.Transparency = 1
	fov_circle.Color = Color3.fromRGB(54, 57, 241)

	local ExpectedArguments = {
		FindPartOnRayWithIgnoreList = {
			ArgCountRequired = 3,
			Args = {
				""Instance"", ""Ray"", ""table"", ""boolean"", ""boolean""
			}
		},
		FindPartOnRayWithWhitelist = {
			ArgCountRequired = 3,
			Args = {
				""Instance"", ""Ray"", ""table"", ""boolean""
			}
		},
		FindPartOnRay = {
			ArgCountRequired = 2,
			Args = {
				""Instance"", ""Ray"", ""Instance"", ""boolean"", ""boolean""
			}
		},
		Raycast = {
			ArgCountRequired = 3,
			Args = {
				""Instance"", ""Vector3"", ""Vector3"", ""RaycastParams""
			}
		}
	}

	function CalculateChance(Percentage)
		-- // Floor the percentage
		Percentage = math.floor(Percentage)

		-- // Get the chance
		local chance = math.floor(Random.new().NextNumber(Random.new(), 0, 1) * 100) / 100

		-- // Return
		return chance <= Percentage / 100
	end


	--[[file handling]] do 
		if not isfolder(MainFileName) then 
			makefolder(MainFileName);
		end

		if not isfolder(string.format(""%s/%s"", MainFileName, tostring(game.PlaceId))) then 
			makefolder(string.format(""%s/%s"", MainFileName, tostring(game.PlaceId)))
		end
	end

	local Files = listfiles(string.format(""%s/%s"", ""UniversalSilentAim"", tostring(game.PlaceId)))

	-- functions
	local function GetFiles() -- credits to the linoria lib for this function, listfiles returns the files full path and its annoying
		local out = {}
		for i = 1, #Files do
			local file = Files[i]
			if file:sub(-4) == '.lua' then
				-- i hate this but it has to be done ...

				local pos = file:find('.lua', 1, true)
				local start = pos

				local char = file:sub(pos, pos)
				while char ~= '/' and char ~= '\\' and char ~= '' do
					pos = pos - 1
					char = file:sub(pos, pos)
				end

				if char == '/' or char == '\\' then
					table.insert(out, file:sub(pos + 1, start - 1))
				end
			end
		end

		return out
	end

	local function UpdateFile(FileName)
		assert(FileName or FileName == ""string"", ""oopsies"");
		writefile(string.format(""%s/%s/%s.lua"", MainFileName, tostring(game.PlaceId), FileName), HttpService:JSONEncode(SilentAimSettings))
	end

	local function LoadFile(FileName)
		assert(FileName or FileName == ""string"", ""oopsies"");

		local File = string.format(""%s/%s/%s.lua"", MainFileName, tostring(game.PlaceId), FileName)
		local ConfigData = HttpService:JSONDecode(readfile(File))
		for Index, Value in next, ConfigData do
			SilentAimSettings[Index] = Value
		end
	end

	local function getPositionOnScreen(Vector)
		local Vec3, OnScreen = WorldToScreen(Camera, Vector)
		return Vector2.new(Vec3.X, Vec3.Y), OnScreen
	end

	local function ValidateArguments(Args, RayMethod)
		local Matches = 0
		if #Args < RayMethod.ArgCountRequired then
			return false
		end
		for Pos, Argument in next, Args do
			if typeof(Argument) == RayMethod.Args[Pos] then
				Matches = Matches + 1
			end
		end
		return Matches >= RayMethod.ArgCountRequired
	end

	local function getDirection(Origin, Position)
		return (Position - Origin).Unit * 1000
	end

	local function getMousePosition()
		return GetMouseLocation(UserInputService)
	end

	local function IsPlayerVisible(Player)
		local PlayerCharacter = Player.Character
		local LocalPlayerCharacter = LocalPlayer.Character

		if not (PlayerCharacter or LocalPlayerCharacter) then return end 

		local PlayerRoot = FindFirstChild(PlayerCharacter, Options.TargetPart.Value) or FindFirstChild(PlayerCharacter, ""HumanoidRootPart"")

		if not PlayerRoot then return end 

		local CastPoints, IgnoreList = {PlayerRoot.Position, LocalPlayerCharacter, PlayerCharacter}, {LocalPlayerCharacter, PlayerCharacter}
		local ObscuringObjects = #GetPartsObscuringTarget(Camera, CastPoints, IgnoreList)

		return ((ObscuringObjects == 0 and true) or (ObscuringObjects > 0 and false))
	end

	local function getClosestPlayer()
		if not Options.TargetPart.Value then return end
		local Closest
		local DistanceToMouse
		for _, Player in next, GetPlayers(Players) do
			if Player == LocalPlayer then continue end
			if Toggles.TeamCheck.Value and Player.Team == LocalPlayer.Team then continue end

			local Character = Player.Character
			if not Character then continue end

			if Toggles.VisibleCheck.Value and not IsPlayerVisible(Player) then continue end

			local HumanoidRootPart = FindFirstChild(Character, ""HumanoidRootPart"")
			local Humanoid = FindFirstChild(Character, ""Humanoid"")
			if not HumanoidRootPart or not Humanoid or Humanoid and Humanoid.Health <= 0 then continue end

			local ScreenPosition, OnScreen = getPositionOnScreen(HumanoidRootPart.Position)
			if not OnScreen then continue end

			local Distance = (getMousePosition() - ScreenPosition).Magnitude
			if Distance <= (DistanceToMouse or Options.Radius.Value or 2000) then
				Closest = ((Options.TargetPart.Value == ""Random"" and Character[ValidTargetParts[math.random(1, #ValidTargetParts)]]) or Character[Options.TargetPart.Value])
				DistanceToMouse = Distance
			end
		end
		return Closest
	end

	-- ui creating & handling
	local Library = loadstring(game:HttpGet(""https://raw.githubusercontent.com/violin-suzutsuki/LinoriaLib/main/Library.lua""))()

	local Window = Library:CreateWindow(""Dugdig X Hub (Project Delta)"")
	local GeneralTab = Window:AddTab(""General"")
	local MainBOX = GeneralTab:AddLeftTabbox(""Main"") do
		local Main = MainBOX:AddTab(""Main"")

		Main:AddToggle(""aim_Enabled"", {Text = ""Enabled""}):AddKeyPicker(""aim_Enabled_KeyPicker"", {Default = ""RightAlt"", SyncToggleState = true, Mode = ""Toggle"", Text = ""Enabled"", NoUI = false});
		Options.aim_Enabled_KeyPicker:OnClick(function()
			SilentAimSettings.Enabled = not SilentAimSettings.Enabled

			Toggles.aim_Enabled.Value = SilentAimSettings.Enabled
			Toggles.aim_Enabled:SetValue(SilentAimSettings.Enabled)

			mouse_box.Visible = SilentAimSettings.Enabled
		end)

		Main:AddToggle(""TeamCheck"", {Text = ""Team Check"", Default = SilentAimSettings.TeamCheck}):OnChanged(function()
			SilentAimSettings.TeamCheck = Toggles.TeamCheck.Value
		end)
		Main:AddToggle(""VisibleCheck"", {Text = ""Visible Check"", Default = SilentAimSettings.VisibleCheck}):OnChanged(function()
			SilentAimSettings.VisibleCheck = Toggles.VisibleCheck.Value
		end)
		Main:AddDropdown(""TargetPart"", {AllowNull = true, Text = ""Target Part"", Default = SilentAimSettings.TargetPart, Values = {""Head"", ""HumanoidRootPart"", ""Random""}}):OnChanged(function()
			SilentAimSettings.TargetPart = Options.TargetPart.Value
		end)
		Main:AddDropdown(""Method"", {AllowNull = true, Text = ""Silent Aim Method"", Default = SilentAimSettings.SilentAimMethod, Values = {
			""Raycast"",""FindPartOnRay"",
			""FindPartOnRayWithWhitelist"",
			""FindPartOnRayWithIgnoreList"",
			""Mouse.Hit/Target""
		}}):OnChanged(function() 
			SilentAimSettings.SilentAimMethod = Options.Method.Value 
		end)
		Main:AddSlider('HitChance', {
			Text = 'Hit chance',
			Default = 100,
			Min = 0,
			Max = 100,
			Rounding = 1,

			Compact = false,
		})
		Options.HitChance:OnChanged(function()
			SilentAimSettings.HitChance = Options.HitChance.Value
		end)
	end

	local MiscellaneousBOX = GeneralTab:AddLeftTabbox(""Miscellaneous"")
	local FieldOfViewBOX = GeneralTab:AddLeftTabbox(""Field Of View"") do
		local Main = FieldOfViewBOX:AddTab(""Visuals"")

		Main:AddToggle(""Visible"", {Text = ""Show FOV Circle""}):AddColorPicker(""Color"", {Default = Color3.fromRGB(54, 57, 241)}):OnChanged(function()
			fov_circle.Visible = Toggles.Visible.Value
			SilentAimSettings.FOVVisible = Toggles.Visible.Value
		end)
		Main:AddSlider(""Radius"", {Text = ""FOV Circle Radius"", Min = 0, Max = 360, Default = 130, Rounding = 0}):OnChanged(function()
			fov_circle.Radius = Options.Radius.Value
			SilentAimSettings.FOVRadius = Options.Radius.Value
		end)
		Main:AddToggle(""MousePosition"", {Text = ""Show Silent Aim Target""}):AddColorPicker(""MouseVisualizeColor"", {Default = Color3.fromRGB(54, 57, 241)}):OnChanged(function()
			mouse_box.Visible = Toggles.MousePosition.Value 
			SilentAimSettings.ShowSilentAimTarget = Toggles.MousePosition.Value 
		end)
		local PredictionTab = MiscellaneousBOX:AddTab(""Prediction"")
		PredictionTab:AddToggle(""Prediction"", {Text = ""Mouse.Hit/Target Prediction""}):OnChanged(function()
			SilentAimSettings.MouseHitPrediction = Toggles.Prediction.Value
		end)
		PredictionTab:AddSlider(""Amount"", {Text = ""Prediction Amount"", Min = 0.165, Max = 1, Default = 0.165, Rounding = 3}):OnChanged(function()
			PredictionAmount = Options.Amount.Value
			SilentAimSettings.MouseHitPredictionAmount = Options.Amount.Value
		end)
	end

	local CreateConfigurationBOX = GeneralTab:AddRightTabbox(""Create Configuration"") do 
		local Main = CreateConfigurationBOX:AddTab(""Create Configuration"")

		Main:AddInput(""CreateConfigTextBox"", {Default = """", Numeric = false, Finished = false, Text = ""Create Configuration to Create"", Tooltip = ""Creates a configuration file containing settings you can save and load"", Placeholder = ""File Name here""}):OnChanged(function()
			if Options.CreateConfigTextBox.Value and string.len(Options.CreateConfigTextBox.Value) ~= """" then 
				FileToSave = Options.CreateConfigTextBox.Value
			end
		end)

		Main:AddButton(""Create Configuration File"", function()
			if FileToSave ~= """" or FileToSave ~= nil then 
				UpdateFile(FileToSave)
			end
		end)
	end

	local SaveConfigurationBOX = GeneralTab:AddRightTabbox(""Save Configuration"") do 
		local Main = SaveConfigurationBOX:AddTab(""Save Configuration"")
		Main:AddDropdown(""SaveConfigurationDropdown"", {AllowNull = true, Values = GetFiles(), Text = ""Choose Configuration to Save""})
		Main:AddButton(""Save Configuration"", function()
			if Options.SaveConfigurationDropdown.Value then 
				UpdateFile(Options.SaveConfigurationDropdown.Value)
			end
		end)
	end

	local LoadConfigurationBOX = GeneralTab:AddRightTabbox(""Load Configuration"") do 
		local Main = LoadConfigurationBOX:AddTab(""Load Configuration"")

		Main:AddDropdown(""LoadConfigurationDropdown"", {AllowNull = true, Values = GetFiles(), Text = ""Choose Configuration to Load""})
		Main:AddButton(""Load Configuration"", function()
			if table.find(GetFiles(), Options.LoadConfigurationDropdown.Value) then
				LoadFile(Options.LoadConfigurationDropdown.Value)

				Toggles.TeamCheck:SetValue(SilentAimSettings.TeamCheck)
				Toggles.VisibleCheck:SetValue(SilentAimSettings.VisibleCheck)
				Options.TargetPart:SetValue(SilentAimSettings.TargetPart)
				Options.Method:SetValue(SilentAimSettings.SilentAimMethod)
				Toggles.Visible:SetValue(SilentAimSettings.FOVVisible)
				Options.Radius:SetValue(SilentAimSettings.FOVRadius)
				Toggles.MousePosition:SetValue(SilentAimSettings.ShowSilentAimTarget)
				Toggles.Prediction:SetValue(SilentAimSettings.MouseHitPrediction)
				Options.Amount:SetValue(SilentAimSettings.MouseHitPredictionAmount)
				Options.HitChance:SetValue(SilentAimSettings.HitChance)
			end
		end)
	end

	resume(create(function()
		RenderStepped:Connect(function()


			if Toggles.MousePosition.Value and Toggles.aim_Enabled.Value then
				if getClosestPlayer() then 
					local Root = getClosestPlayer().Parent.PrimaryPart or getClosestPlayer()
					local RootToViewportPoint, IsOnScreen = WorldToViewportPoint(Camera, Root.Position);
					-- using PrimaryPart instead because if your Target Part is ""Random"" it will flicker the square between the Target's Head and HumanoidRootPart (its annoying)

					mouse_box.Visible = IsOnScreen
					mouse_box.Position = Vector2.new(RootToViewportPoint.X, RootToViewportPoint.Y)
				else 
					mouse_box.Visible = false 
					mouse_box.Position = Vector2.new()
				end
			end

			if Toggles.Visible.Value then 
				fov_circle.Visible = Toggles.Visible.Value
				fov_circle.Color = Options.Color.Value
				fov_circle.Position = getMousePosition()
			end
			
			Esp()

		end)
	end))

	-- hooks
	local oldNamecall
	oldNamecall = hookmetamethod(game, ""__namecall"", newcclosure(function(...)
		local Method = getnamecallmethod()
		local Arguments = {...}
		local self = Arguments[1]
		local chance = CalculateChance(SilentAimSettings.HitChance)
		if Toggles.aim_Enabled.Value and self == workspace and not checkcaller() and chance == true then
			if Method == ""FindPartOnRayWithIgnoreList"" and Options.Method.Value == Method then
				if ValidateArguments(Arguments, ExpectedArguments.FindPartOnRayWithIgnoreList) then
					local A_Ray = Arguments[2]

					local HitPart = getClosestPlayer()
					if HitPart then
						local Origin = A_Ray.Origin
						local Direction = getDirection(Origin, HitPart.Position)
						Arguments[2] = Ray.new(Origin, Direction)

						return oldNamecall(unpack(Arguments))
					end
				end
			elseif Method == ""FindPartOnRayWithWhitelist"" and Options.Method.Value == Method then
				if ValidateArguments(Arguments, ExpectedArguments.FindPartOnRayWithWhitelist) then
					local A_Ray = Arguments[2]

					local HitPart = getClosestPlayer()
					if HitPart then
						local Origin = A_Ray.Origin
						local Direction = getDirection(Origin, HitPart.Position)
						Arguments[2] = Ray.new(Origin, Direction)

						return oldNamecall(unpack(Arguments))
					end
				end
			elseif (Method == ""FindPartOnRay"" or Method == ""findPartOnRay"") and Options.Method.Value:lower() == Method:lower() then
				if ValidateArguments(Arguments, ExpectedArguments.FindPartOnRay) then
					local A_Ray = Arguments[2]

					local HitPart = getClosestPlayer()
					if HitPart then
						local Origin = A_Ray.Origin
						local Direction = getDirection(Origin, HitPart.Position)
						Arguments[2] = Ray.new(Origin, Direction)

						return oldNamecall(unpack(Arguments))
					end
				end
			elseif Method == ""Raycast"" and Options.Method.Value == Method then
				if ValidateArguments(Arguments, ExpectedArguments.Raycast) then
					local A_Origin = Arguments[2]

					local HitPart = getClosestPlayer()
					if HitPart then
						Arguments[3] = getDirection(A_Origin, HitPart.Position)

						return oldNamecall(unpack(Arguments))
					end
				end
			end
		end
		return oldNamecall(...)
	end))

	local oldIndex = nil 
	oldIndex = hookmetamethod(game, ""__index"", newcclosure(function(self, Index)
		if self == Mouse and not checkcaller() and Toggles.aim_Enabled.Value and Options.Method.Value == ""Mouse.Hit/Target"" and getClosestPlayer() then
			local HitPart = getClosestPlayer()

			if Index == ""Target"" or Index == ""target"" then 
				return HitPart
			elseif Index == ""Hit"" or Index == ""hit"" then 
				return ((Toggles.Prediction.Value and (HitPart.CFrame + (HitPart.Velocity * PredictionAmount))) or (not Toggles.Prediction.Value and HitPart.CFrame))
			elseif Index == ""X"" or Index == ""x"" then 
				return self.X 
			elseif Index == ""Y"" or Index == ""y"" then 
				return self.Y 
			elseif Index == ""UnitRay"" then 
				return Ray.new(self.Origin, (self.Hit - self.Origin).Unit)
			end
		end

		return oldIndex(self, Index)
	end))
end


coroutine.wrap(Zoom)()
coroutine.wrap(LoadedUI)()
game.Lighting.GlobalShadows = false"
g3NqYht8,back.,zackboy989xx,Lua,Saturday 30th of March 2024 11:02:29 PM CDT,"local ReplicatedStorage = game:GetService(""ReplicatedStorage"")
local StatsService = game:GetService(""Stats"")
local RunService = game:GetService(""RunService"")

local StartDecompile = tick()
local DecompSys = {}
local Connection

DecompSys.MainContainer = Instance.new(""Model"")
DecompSys.MainContainer.Name = ""MM2Decomp""

--Available Services
DecompSys.Services = {
	""ReplicatedStorage"",
	""ReplicatedFirst"",
	""Workspace"",
	""Players"",
	""Lighting"",
	""StarterCharacter""
	""StarterGui"",
	""StarterPack"",
	""Chat""
	""ServerScriptService""
}

DecompSys.ModelCreator = function()
	--[[
		We should start with a neat and orginised folder 
		including all instances of a game.
	]]
	for Index,Names in ipairs(DecompSys.Services) do
		local FolderInstance = Instance.new(""Folder"")
		FolderInstance.Name = Names
		FolderInstance.Parent = DecompSys.MainContainer
	end

	--Need to create sub-folders for startercharacter
	local FolderInstance = Instance.new(""Folder"")
	FolderInstance.Name = ""StarterCharacterScripts""
	FolderInstance.Parent = DecompSys.MainContainer.StarterCharacter
	--And another one...
	FolderInstance = Instance.new(""Folder"")
	FolderInstance.Name = ""StarterPlayerScripts""
	FolderInstance.Parent = DecompSys.MainContainer.StarterCharacter
end

DecompSys.NewInstance = function(ClassName,Object)
    NewInstance = Instance.new(ClassName)
    NewInstance.Name = Object.Name
    --[[We wont bother to add values to instances, 
	these can lead to errors (eg. remoteevents or remotefunctions)
	]]--
	for Attribute,Value in pairs(Object:GetAttributes()) do
		NewInstance[Attribute] = Value
	end
	if (Object:IsA(""LocalScript"") or Object:IsA(""Script"") or Object:IsA(""ModuleScript"")) then
		DecompSys.DecompileScripts(Object.ClassName,Object)
	end
    return NewInstance
end

DecompSys.GetSyncData = function()
    local AllModules = ReplicatedStorage:WaitForChild(""GetSyncData"",2):InvokeServer()
    assert(AllModules == nil, ""GetSyncData cannot be found or Server didnt respond"")
	for Index,Name in pairs(AllModules) do
		local CurrentServerData = ReplicatedStorage:WaitForChild(""GetSyncData"",2):InvokeServer(Name)
		local ModuleScripts = Instance.new(""ModuleScript"",DecompSys.MainContainer.ServerScriptService)
		Modulescript.Source = CurrentServerData
		Modulescript.Name = Name
	end
end)

DecompSys.DecompileScripts = function(Script)
	local WasDisabled = false
	local TextContainer = nil
	if not (Script.Enabled) then
		Script.Enabled = true
		WasDisabled = true
	end
	TextContainer = Script.Source()
	Script.Enabled = not WasDisabled
	return TextContainer
end

DecompSys.ReportProgress = function(Report)
	print(""[Decompiler] - ""..tostring(Report))
end

DecompSys.Hardlag = function()
	if (Stats.InstanceCount > 100) then
		--We would need to pause the operation temporarily as there is too much instances being rendered in memory
		task.wait(10)
	end
end

DecompSys.DecompileAll = {
	Workspace = function()
		for Index,Object in pairs(game.ReplicatedStorage:GetDecendants()) do
			local NewInstance = DecompSys.NewInstance(Object.ClassName,Object)
			NewInstance.Parent = DecompSys.MainContainer.ReplicatedStorage
		end
	end,
	Players = function()
		--Cannot decompile players :(
		return nil
	end,
	ReplicatedFirst = function()
		for Index,Object in pairs(game.ReplicatedFirst:GetDecendants()) do
			local NewInstance = DecompSys.NewInstance(Object.ClassName,Object)
			NewInstance.Parent = DecompSys.MainContainer.ReplicatedFirst
		end
	end,
	ReplicatedStorage = function()
		for Index,Object in pairs(game.ReplicatedStorage:GetDecendants()) do
			local NewInstance = DecompSys.NewInstance(Object.ClassName,Object)
			NewInstance.Parent = DecompSys.MainContainer.ReplicatedStorage
		end
	end,
	ServerScriptService = function()
		--Cannot decompile Serverscriptservice. We can only decompile client viewed properties
		return nil
	end,
	ServerStorage = function()
		--Again, wish we could but would need to only get client scripts
		return nil
	end,
	StarterGui = function()
		for Index,Object in pairs(game.StarterGui:GetDecendants()) do
			local NewInstance = DecompSys.NewInstance(Object.ClassName,Object)
			NewInstance.Parent = DecompSys.MainContainer.StarterGui
		end
	end, 
	StarterPack = function()
		for Index,Object in pairs(game.StarterPack:GetDecendants()) do
			local NewInstance = DecompSys.NewInstance(Object.ClassName,Object)
			NewInstance.Parent = DecompSys.MainContainer.StarterPack
		end
	end, 
	StarterCharacter = function()
		--This would be different, starterpack and startercharacter are within one parent
		for Index,Object in pairs(game.StarterCharacter.StarterCharacterScripts:GetDecendants()) do
			local NewInstance = DecompSys.NewInstance(Object.ClassName,Object)
			NewInstance.Parent = DecompSys.MainContainer.StarterCharacter.StarterCharacterScripts
		end
		for Index,Object in pairs(game.StarterCharacter.StarterPlayerScripts:GetDecendants()) do
			local NewInstance = DecompSys.NewInstance(Object.ClassName,Object)
			NewInstance.Parent = DecompSys.MainContainer.StarterCharacter.StarterPlayerScripts
		end
	end, 
	Chat = function()
		for Index,Object in pairs(game.Chat:GetDecendants()) do
			local NewInstance = DecompSys.NewInstance(Object.ClassName,Object)
			NewInstance.Parent = DecompSys.MainContainer.Chat
		end
	end, 
}

DecompSys.Run = function()
	task.spawn(function()
		DecompSys.ModelCreator()
		DecompSys.GetSyncData()
		DecompSys.DecompileAll()
	end)
	DecompSys.ReportProgress(""Starting to decompile..."")
	local Connection = RunService.Heartbeat:Connect(DecompSys.Hardlag)
end

local FinishDecompile = tick()
SaveInstance(DecompSys.MainContainer.Name .. '.rbxl', DecompSys.MainContainer)
DecompSys.ReportProgress(""Finished decompiling! Saved in Workspace as ""..tostring(DecompSys.MainContainer.Name).."".rbxl. Took ""..tostring((FinishDecompile - StartDecompile))..""s"")
Connection:Disconnect()"
ph78udyL,unresolved,hpnq,Python,Saturday 30th of March 2024 10:23:21 PM CDT,"from aiogram import Router, F
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.types import FSInputFile, ReplyKeyboardMarkup, KeyboardButton, Message, CallbackQuery, ReplyKeyboardRemove, InlineKeyboardButton
from aiogram.fsm.state import State, StatesGroup
from datetime import datetime
from keyboards.simple_row import make_row_keyboard
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.filters.callback_data import CallbackData
from aiogram.types.inline_keyboard_markup import InlineKeyboardMarkup
from datetime import datetime
from handlers.register import next_reg
from aiogram.utils.media_group import MediaGroupBuilder
from aiogram.methods.send_media_group import SendMediaGroup
import json

# from register import next_reg # menu
class MyCallback(CallbackData, prefix = ""mycb""):
    day: int
    foo : str

task_today = {
    1:[1, 2],
    2:[3]
}
router = Router()
class UserState(StatesGroup):
    user_reg = State()
class UserSolving(StatesGroup):
    user_solving = State()
class UserState(StatesGroup):
    user_reg = State()

@router.message(UserState.user_reg, F.text.lower() == ""–¥–æ–º–æ–π"")
async def task0(message:Message):
    await message.answer(
        text=""–í—ã –¥–æ–º–∞!"",
        reply_markup=make_row_keyboard([""–ù–∞–∑–∞–¥""])
    )

@router.message(UserState.user_reg, F.text.lower() == ""–∑–∞–¥–∞—á–∞ –º–æ–µ–≥–æ –¥–Ω—è"")
async def task_dayly(message: Message, state: FSMContext):
    user_data = await state.get_data()
    print(""DATA: "", user_data[""user""])
    # return
    user_datetime = user_data[""user""][""date""]
    builder = InlineKeyboardBuilder()
    
    # path_q = ""../data_q/img.jpg""
    #----------------------------------------------------------------------------------------------------------
    img_q = FSInputFile(""../data_q/img.png"")
    result = await message.answer_photo(
        photo= img_q,
        caption=""pic cap""
    )
     #----------------------------------------------------------------------------------------------------------
    print(result.photo[-1].file_id)
    # album_builder.add(
    #     type=""photo"",
    #     media= img_q.photo[-1].file_id
    #     # caption=""–ü–æ–¥–ø–∏—Å—å –∫ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –º–µ–¥–∏–∞""
    #
    # )
    if user_datetime == 1:
        for i in task_today[user_datetime]:
            if(i not in user_data[""user""][""solved_task""]):
                builder.add(InlineKeyboardButton(
                    text=""–ù–∞–∂–º–∏ –º–µ–Ω—è "" + str(i),
                    callback_data=MyCallback(day=i, foo=""days"").pack()
                ))

        await message.answer(
            ""–û—Ç–ª–∏—á–Ω–æ, –≤–∞—à–∏ –∑–∞–¥–∞—á–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:"",
            reply_markup=builder.as_markup()
        )

    # await message.answer(
    #     text=""–í—ã –¥–æ–º–∞!"",
    #     reply_markup=make_row_keyboard([""–ù–∞–∑–∞–¥""])
    # )
task_data = {
    1 : {""header"" : ""header "",
         ""text""   : ""pisikaki text"",
         ""answer"" : ""pipiski"",
         ""load_photo"": """",
         ""load_video"": """"
         },
    2 : {""header"" : ""header2 "",
         ""text""   : ""pisikaki text chileen"",
         ""answer"" : ""chileeen"",
         ""load_photo"": """",
         ""load_video"": """"
         }

}
@router.callback_query(MyCallback.filter(F.foo == ""days""))
async def send_task(callback: CallbackQuery, state : FSMContext, callback_data: MyCallback):
    await callback.message.answer(text=""–í—ã –Ω–∞ –∑–∞–¥–∞—á–µ ‚Ññ"" + str(callback_data.day))
    # for i in task_data[callback_data.day]:
    #     print(i)
    #–ü–û–§–ò–ö–°–ò–¢–¨ –ù–ê task_today[callback_data.day]-----------------
    today_quest = task_data[callback_data.day]

    text_quest = today_quest[""header""] + ""\n"" + today_quest[""text""] + ""\n–Ω–∞–ø–∏—à–∏ –æ—Ç–≤–µ—Ç""
    # image_from_pc = FSInputFile(""../data_q/img.png"")
    if today_quest[""text""] == """":
        media_group = MediaGroupBuilder(
            caption=""text_quest""
        )

        media_group.add_photo(
            media=""https://loremflickr.com/320/240""
        )
        await callback.message.answer_media_group(
            # media=album_builder.build()
            media = media_group.build()
        )

    await callback.message.answer(text=text_quest)

    user_data = await state.get_data()
    x = {""task_n"": callback_data.day}
    user_data[""user""].update(x)

    await state.update_data(user_data)
    await state.set_state(UserSolving.user_solving)
    await callback.answer()


# –†–µ—à–∞–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –∑–∞–¥–∞—á—É –ø–æ —Å—Ç–µ–π—Ç—É –Ω–æ–≤–æ–º—É
# –¢—É—Ç –ø—Ä–æ–≤–µ—Ä—è—Ç—å –æ—Ç–≤–µ—Ç
@router.message(UserSolving.user_solving, Command(""cancel""))
async def solving(message:Message,  state : FSMContext):
    user_data = await state.get_data()
    del user_data[""user""][""task_n""]
    print(""HUETA "", user_data)
    await state.set_state(UserState.user_reg)
    await next_reg(message)


@router.message(UserSolving.user_solving)
async def solving(message:Message,  state : FSMContext):
    user_data = await state.get_data()
    print(""1 - CALLBACCK USER DATA: "", user_data, type(user_data[""user""]))

    if(message.text.lower() == task_data[user_data[""user""][""task_n""]][""answer""]):
        kb = [
            [KeyboardButton(text=""–ü–µ—Ä–µ–π—Ç–∏ –∫ –∑–∞–¥–∞—á–∞–º"")]
        ]
        keyboard = ReplyKeyboardMarkup(keyboard=kb)

        await message.reply(
            ""–ü–æ–∑–¥—Ä–∞–≤–ª—è—é! –≠—Ç–æ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç. –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é(/menu)"",
            reply_markup=keyboard
        )
        #user_data[""user""]
        print(""Task_n: "", user_data[""user""][""task_n""])
        # new_u_data = {user_data[""user""][""solving_time""]
        user_data[""user""][""solving_time""].append(str(datetime.now()))
        user_data[""user""][""solved_task""].append(user_data[""user""][""task_n""])
        del user_data[""user""][""task_n""]
        await state.set_state(UserState.user_reg)
        user_data = await state.get_data()
        print(user_data)
        await next_reg(message)
        js_data = json.dumps(user_data[""user""])
        print(""js_data: "", js_data)
    else:
        await message.reply(
            text=""–ù–µ–≤–µ—Ä–Ω—ã–π –æ—Ç–≤–µ—Ç! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞""
        )

"
wB71YHN2,nbsPlayer.lua,ozozx235,Lua,Saturday 30th of March 2024 10:08:07 PM CDT,"function readBool(bin, i)
	bool = string.byte(bin,i) == 1
	return i+1, bool
end

function readInt(bin, i, prog)
	buffer = 0
	for j=1,prog do
		-- print(buffer)
		buffer = string.byte(bin,i+j-1)*math.pow(16,2*(j-1)) + buffer
	end
	-- print(i.."": Int(""..buffer.."")"")
	return i+prog, buffer
end

function readByte(bin, i, prog)
	for j=1,prog do
		-- print(buffer)
		buffer = buffer .. "" "" .. string.byte(bin,i+j-1)
	end
	return i+prog, buffer
end

function readStr(bin, i)
	i, prog = readInt(bin, i, 4)
	buffer = """"
	-- print(i.."": ""..prog)
	-- print(prog)
	for j=1,prog do
		buffer = buffer .. """" .. string.char(string.byte(bin,i+j-1))
	end
	return i+prog, buffer
end

function skip(bin, i, prog)
	return i+prog
end

function readHeader(bin, i)
	i = skip(bin, i, 2)
	i, ver = readInt(bin, i, 1)
	-- print(""NBS Version: "" .. ver)
	i, vanInst = readInt(bin, i, 1)
	-- print(""Number of Vanilla Instruments: "" .. vanInst)
	i, tikLen = readInt(bin, i, 2)
	-- print(""Length in Ticks: "" .. tikLen)
	i, lyr = readInt(bin, i, 2)
	-- print(""Number of Layers (inaccurate): "" .. lyr)
	-- print(""SNAME"")
	i, sName = readStr(bin, i)
	-- print(""Song Name: "" .. sName)
	-- print(""ANAME"")
	i, authName = readStr(bin, i)
	-- print(""Author: "" .. authName)
	-- print(""OGANAME"")
	i, ogAuthName = readStr(bin, i)
	-- print(""Original Author: "" .. ogAuthName)
	-- print(""DESC"")
	i, desc = readStr(bin, i)
	-- print(""Description: "" .. desc)
	i, tempo = readInt(bin, i, 2)
	-- print(""Tempo (Ticks/Sec)*100: "" .. tempo)
	i, aSave = readBool(bin, i)
	-- print(""Auto-Save?: "" .. (aSave and ""Yes"" or ""No""))
	i, aSaveT = readInt(bin, i, 1)
	-- print(""Auto-Save Time: "" .. aSaveT)
	i, tSign = readInt(bin, i, 1)
	-- print(""Time Signature:0 ""..tSign..""/4"")
	i, minSpent = readInt(bin, i, 4)
	-- print(""Minutes Spent On Project: "" .. minSpent)
	i, lClick = readInt(bin, i, 4)
	-- print(""Left Clicks: "" .. lClick)
	i, rClick = readInt(bin, i, 4)
	-- print(""Right Clicks: "" .. rClick)
	i, nbAdd = readInt(bin, i, 4)
	-- print(""Noteblocks Added: "" .. nbAdd)
	i, nbRem = readInt(bin, i, 4)
	-- print(""Noteblocks Removed: "" .. nbRem)
	-- print(""PORT"")
	i, port = readStr(bin, i)
	-- print(""Imported MIDI / Scematic File: "" .. port)
	i, loop = readBool(bin, i)
	-- print(""Looping?: "" .. (loop and ""Yes"" or ""No""))
	i, mLoop = readInt(bin, i, 1)
	-- print(""Max Times Looped: "" .. mLoop)
	i, loopIdx = readInt(bin, i, 2)
	-- print(""Loop Start Tick: "" .. loopIdx)
	songHead = {version=ver, vInstruments=vanInst, tLength=tikLen,layerCount=lyr, songName=sName, chartAuthor=authName, songAuthor=ogAuthName, description=desc, tempo=tempo,autoSave=aSave,saveTime=aSaveT,timeSignature=tSign, minutesSpent=minSpent, leftClicks=lClick, rightClicks=rClick,notesAdded=nbAdd,notesRemoved=nbRem, importedFile=port, isLooping=loop,maxLoops=mLoop,loopStart=loopIdx}
	return i, songHead
	
end

function readNote(bin, i, cft, idx, reps)
	jumpNT = nil
	if cft then
		i, jumpNT = readInt(bin, i, 2)
		-- print(""Wait "" .. jumpNT .. "" Ticks"")
		if jumpNT == 0 then
			return i, nil, false, idx
		end
	end
	i, jumpNL = readInt(bin, i, 2)
	if jumpNL == 0 and not cft then
		-- print(""prepare for pause"")
		return readNote(bin,i,true,idx,reps)
	end
	-- print(jumpNL .. "" Jumps From Last Layer"")
	i, inst = readInt(bin, i, 1)
	-- print(""Instrument: "" .. (inst < 16 and band[inst] or ""Custom?""))
	i, nKey = readInt(bin, i, 1)
	-- print(""Key: ""..nKey)
	i, vol = readInt(bin, i, 1)
	-- print(""Volume: ""..vol .. ""%"")
	i, stere = readInt(bin, i, 1)
	-- print(""Stereo Position: ""..stere)
	i, pit = readInt(bin, i, 2)
	-- print(""Pitch: ""..pit)
	note = {jumpTNNote = jumpNT, jumpTNLayer = jumpNL, instrument = inst, noteKey = nKey, volume = vol, stereo = stere, pitch = pit}
	if reps > 1 then
		return readNote(bin,i,false,idx+1,reps-1)
	else
		return i, note, false, idx+1
	end
end

function dec2hex(size, num)
	hnum = string.format(""%x"",num)
	op = hnum
	if #hnum < size*2 then
		for i=1, size*2-#hnum do
			op = ""0""..op
		end
	end
	return op
end-- REDUNDANT

function readBinaryNote(bin, i, cft, idx, reps)
	jumpNT = nil
	if cft then
		i, jumpNT = readInt(bin, i, 2)
		print(dec2hex(2,jumpNT) .. "" Jumps From Last Note"")
	end
	i, jumpNL = readInt(bin, i, 2)
	if jumpNL == 0 and not cft then
		print(""prepare for pause"")
		return readBinaryNote(bin,i,true,idx,reps)
	end
	print(dec2hex(2,jumpNL) .. "" Jumps From Last Layer"")
	i, inst = readInt(bin, i, 1)
	print(""Instrument: "" .. dec2hex(1,inst))
	i, nKey = readInt(bin, i, 1)
	print(""Key: ""..dec2hex(1,nKey))
	i, vol = readInt(bin, i, 1)
	print(""Volume: ""..dec2hex(1,vol))
	i, stere = readInt(bin, i, 1)
	print(""Stereo Position: ""..dec2hex(1,stere))
	i, pit = readInt(bin, i, 2)
	print(""Pitch: ""..dec2hex(2,pit))
	note = {jumpTNNote = jumpNT, jumpTNLayer = jumpNL, instrument = inst, noteKey = nKey, volume = vol, stereo = stere, pitch = pit}
	if reps > 1 then
		return readBinaryNote(bin,i,false,idx+1,reps-1)
	else
		return i, note, false, idx+1
	end
end-- REDUNDANT

function skipNotes(bin, i, cft, count, idx)
	jumpNT = nil
	if cft then
		i, jumpNT = readInt(bin, i, 2)
		if jumpNT == 0 then
			-- print(""ENDING"")
			-- print(idx)
			return i, count, idx
		else
			-- print(""JUMPED"")
			idx = idx + jumpNT
		end
	end
	i, jumpNL = readInt(bin, i, 2)
	if jumpNL == 0 and not cft then
		return skipNotes(bin, i, true, count, idx)
	end
	i = skip(bin,i,6)
	return skipNotes(bin, i, false, count+1, idx)
end

function readLayer(bin, i, lIdex, reps)
	i, lName = readStr(bin, i)
	-- print(lName .. "" layer"")
	i, lock = readBool(bin, i)
	-- print((lock and ""Layer locked"" or ""Layer Unlocked""))
	i, vol = readInt(bin,i,1)
	-- print(""Layer Volume: "" .. vol .. ""%"")
	i, stere = readInt(bin,i,1)
	-- print(""Stereo Position: ""..stere)
	layer = {layerName=lName,isLocked=lock,volume=vol,stereo=stere}
	if reps > 1 then
		return readLayer(bin,i,lIdex+1,reps-1)
	end
	return i, layer, lIdex+1
end

function skipLayers(bin, i, lIdex, count)
	-- print(lIdex)
	-- print(""SKIPPING"")
	-- print(i)
	-- print(readInt(bin,i, 4))
	i = readStr(bin, i)
	i = skip(bin, i, 3)
	if lIdex+1 < header.layerCount then
		return skipLayers(bin,i,lIdex+1,count+1)
	end
	return i, count+1, lIdex+1
end

function readCustom(bin, i, cIdex, reps)
	i, cName = readStr(bin, i)
	-- print(""Instrument: "" .. cName)
	i, cFile = readStr(bin, i)
	-- print(""Path: "" .. cFile)
	i, key = readInt(bin,i,1)
	-- print(""Default Key: "" .. key)
	i, vis = readBool(bin, i)
	-- print((vis and ""Visuallise"" or ""Don't Visuallise""))
	custom = {CustomName=lName,filePath=cFile,defaultKey=key,isvisuallised=vis}
	if reps > 1 then
		return readCustom(bin,i,cIdex+1,reps-1)
	end
	return i, custom, cIdex+1
end

function YNPrompt(str)
	print(str)
	ans=read()
	if ans==""y"" or ans ==""Y"" then
		return true
	elseif ans==""n"" or ans==""N"" then
		return false
	else
		print(""Invalid input"")
		return YNPrompt(str)
	end
end-- REDUNDANT

function validateFile(bin)
	-- print(""VALIDATING"")
	i, header = readHeader(bin, 1)
	lyStart = skipNotes(bin, i, true, 0, 0)
	-- print(""lyStart: ""..lyStart)
	cuStart = skipLayers(bin, lyStart, 0, 0)
	_, cInsts = readInt(bin, cuStart, 1)
	if cInsts < 0 then
		printError(""Song Contains Custom Instruments (Unsupported)"")
		return nil, nil, nil
	end
	-- print(""HEADER VALID"")
	j=i
	cft = true
	nIdx = 0
	while j<lyStart do
		-- print(j..""/""..lyStart)
		j, note, cft, nIdx = readNote(bin, j, cft, nIdx, 1)
		if note then
			if note.noteKey > 57 or note.noteKey < 33 then
				printError(""Notes are Keyed Outside of 2 Octave Spectrum at "".. nIdx .. "" pitch "" .. note.noteKey)
				-- printError(j..""/""..lyStart)
				return nil, nil, nil
			end
			if not note.stereo == 100 then
				printError(""Stereo Unsupported"")
				return nil, nil, nil
			end
			if not note.pitch == 0 then
				printError(""Notes are Fine Pitched (Unsupported)"")
				return nil, nil, nil
			end
		end
	end
	-- print(""NOTES VALID"")
	-- print(""scanning from byte: ""..j..""/""..#bin)
	layers = {}
	lIdx = 1
	while j<cuStart do
		j, layers[lIdx], tlIdx = readLayer(bin,j, lIdx, 1)
		if not layers[lIdx].stereo == 100 then
			printError(""Stereo Unsupported"")
			return nil, nil, nil
		end
		lIdx = tlIdx
	end
	-- print(""VALIDATED"")
	return i, header, layers
end

function findSpeak()
	spk = nil
	for k,v in pairs(peripheral.getNames()) do
		if peripheral.getType(v) == ""speaker"" and not spk then
			spk = peripheral.wrap(v)
		end
	end
	return spk
end

local tArgs = { ... }
bin = nil
-- print(""RUNNING"")
if #tArgs<1 then
		if fs.exists(""/disk"") then
			flist = fs.list(""/disk"")
			for k,v in pairs(flist) do
				if string.find(v,"".nbs"") then
					-- print(v)
					bin = fs.open(""/disk/""..v,""rb"").readAll()
				end
			end
			if not bin then
				print(""No File Specified or on Disk"")
				return
			end
		end
		-- print(""No File"")
		-- return
	elseif not fs.exists(tArgs[1]) or (fs.exists(tArgs[1]) and fs.isDir(tArgs[1])) then
		print(""Not a File Bozo"")
		return
	else
		-- print(fs.getName(tArgs[1]) .. "" Exists!"")
		bin = fs.open(tArgs[1],""rb"").readAll()
end
-- print(#bin .. ""b"")
i=1
i, header, layers= validateFile(bin)
if not i then
	return
end
-- print(""Notes start at offset "" .. i)
speak = findSpeak()
if not speak then
	printError(""No Speaker Found"")
	return
end
notStart = i
idex = 0
mtnt = true
lyStart = skipNotes(bin, i, mtnt, 0, 0)
lIdex = 0
-- cuStart = skipLayers(bin, lyStart, 0, 0)
-- cIdex = 0
-- cuStart, cInsts = readInt(bin, cuStart, 1)
-- print(cInsts .. "" Custom Instruments"")
print(""Now Playing "" .. header.songName .. "" by "" .. header.songAuthor)
-- tick = true
band = {[0]=""harp"", ""bass"", ""basedrum"", ""snare"", ""hat"", ""guitar"", ""flute"", ""bell"", ""chime"", ""xylophone"", ""iron_xylophone"", ""cow_bell"", ""didgeridoo"", ""bit"", ""banjo"", ""pling""}
-- print(layers[2].volume)
-- print(7.5*(100/header.tempo))
while i < lyStart do
	i, note, mtnt, idex = readNote(bin, i, mtnt, idex, 1)
	if note then
		if note.jumpTNNote then
			sleep((note.jumpTNNote)*(100/header.tempo))
			lIdex = 0
			-- print((tick and ""tick"" or ""tock""))
			-- tick = not tick
		end
		lIdex = lIdex + note.jumpTNLayer
		-- print(lIdex)
		vol = ((layers[lIdex].volume * note.volume)/10000)*3
		speak.playNote(band[note.instrument],vol,note.noteKey-33)
	end
end
print(""Joever"")
-- print(bin.read())
-- print(bin.readLine(true))
-- bin.close()
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            
"
9asgLJRN,MBD (BES),FiaPlay,Ruby,Saturday 30th of March 2024 10:05:49 PM CDT,"#-----------------------------------------------------------------------------
# Script creado por FiaPlay para Pok√©mon Essentials BES. Cr√©ditos si se usa.
# Discord de FP Systems: https://discord.gg/ds8DWB5NSW
# Versi√≥n para Essentials BW: https://pastebin.com/ky8nkSeK
# Si vas reportar alg√∫n bug o preguntar algo recomiendo hacerlo en el hilo del server de PokeLiberty o en FP Systems.
#Changelog:
#3.0: A√±adidos m√°s bufers para di√°logos.
#     Si pones \ht en un di√°logo no se mostrar√° el entrenador.
#     A√±adida la posibilidad de poner un texto cuando el √∫ltimo Pok√©mon del jugador tiene pocos PS.
#     A√±adida la posibilidad de poner un bgm cuando el jugador saca su √∫ltimo Pok√©mon.
#     A√±adida la posibilidad de poner un texto cuando se usa un movimiento F√≠sico, Especial o de Estado.
#     Eliminado el soporte para el Dynamax. (¬øAlguien lo usaba?)
#     Optimizaci√≥n, etc.....
#2.3.1: Corregido bug que hac√≠a que lowhp_last se muestre varias veces.
#       Ahora es posible poner un texto cuando el jugador tiene un solo pok√©mon en su equipo.(Idea por: Papalomond Sempai)
#2.3: Cambio de nombre de las claves por otras m√°s cortas y f√°ciles de recordar.
#     A√±adida la posibilidad de poner un texto cuando comienza y termina un turno.
#     Ahora es posible definir un di√°logo desde la llamada a Script.
#     Ahora si pones \PN en un texto se mostrar√° el nombre del jugador.
#     Correcci√≥n de errores y optimizaci√≥n.
#2.2.2: Solucionado bug con la megaevoluci√≥n salvaje.
#2.2.1: Solucionado bug de los Pokemon Oscuros del jugador.
#2.2: Ahora puedes encadenar varios textos coloc√°ndolos en una Array. (Se muestran uno detr√°s de otro)
#     A√±adida la posibilidad de poner un texto cuando se unv√≠a un Pok√©mon Shiny.
#     A√±adida la posibilidad de poner un texto cuando el √∫ltimo Pok√©mon del rival tiene pocos PS.
#     Correcci√≥n de errores y refactorizaci√≥n.
#2.1.1: Solucionado Bug de incompatibilidad con el script de Entrenadores din√°micos.
#2.1: A√±adida la posibilidad de poner un texto cuando el jugador saca un Pok√©mon oscuro.
#     A√±adida la posibilidad de poner un texto cuando el jugador saca su √∫ltimo Pok√©mon.
#     A√±adida la posibilidad de poner un texto cuando un Pok√©mon recibe un golpe Super-Efectivo.
#     A√±adida la posibilidad de poner un texto cuando un Pok√©mon recibe un golpe Poco-Efectivo.
#     A√±adida la posibilidad de poner un texto cuando un Pok√©mon recibe un Golpe Cr√≠tico.
#     Solucionada incompatibilidad con mi script de Megaevoluci√≥n de Pok√©mon Salvaje (Coloque este script debajo de ese).
#     Compatibilidad con este sistema de Dynamax: https://www.pokecommunity.com/showthread.php?t=426770
#     Correcci√≥n de errores.
#2.0: Nueva forma de setear los textos (No pienso volver a cambiarla).
#     Eliminada la necesidad de usar variables de evento.
#     Ahora el rival puede decir algo cuando el jugador usa una de las mec√°nicas de batalla (Megaevoluci√≥n,Ultraexplosi√≥n,etc...)
#     Ahora el rival puede decir algo cuando este saca un Pok√©mon en espec√≠fico.
#     A√±adida la posibilidad de reproducir un SE junto con los textos.
#-----------------------------------------------------------------------------
# Demostraci√≥n https://youtu.be/lHCQdq62Xh8 (2.0)
#-----------------------------------------------------------------------------
# Modo de uso:
#Para activar los textos solo setealos usando el m√©todo fpTTS_set()
#Entre par√©ntesis va un Symbol que es el nombre de la constante con los datos.
=begin Para un ejemplo pr√°ctico pegue una de las siguientes 3 l√≠neas en una llamada a script
fpTTS_set(:TEST4_0)
fpTTS_set(:CHAMPION_BLUE)
fpTTS_set(:LEADER_BROCK)
=end
=begin Si lo que quiere es definirlo desde una llamada a Script (Ni idea de por qu√©) podr√≠a:
dialogue={
""mega"" => ""¬°Voy con todo!"",
""super_effective_move(player)"" => ""Sabes lo que haces muchacho.""
}
fpTTS_set(dialogue)
En caso de que quieras solo el del √∫ltimo pok√©mon:
fpTTS_set(""¬°Es el momento de darlo todo!"")
=end
=begin En caso de que tu proyecto vaya a tener m√°s de un idioma debes poner _INTL antes del di√°logo para poder traducirlo. Tal que as√≠:
""last"" => [_INTL(""Finaly.""),_INTL(""The Groundon's awakening."")]
=end

#-----------------------------------------------------------------------------
# FAQ:
#*¬øPara cuando videotutorial?
# Para cuando tenga ganas.
#
#*¬øEs compatible con EBS?
# No deber√≠as recibir mensajes de error, pero algunos textos no se mostrar√°n.
#
#*¬øFunciona con combates dobles?
# No deber√≠as recibir mensajes de error, pero no prometo nada.
#
#*He recibido x error y me parece que es este script.
# Av√≠same por el Discord. (Solo si de verdad crees que fue este script)
#-----------------------------------------------------------------------------
# Estas son las opciones c√°mbialas a como necesites.
#-----------------------------------------------------------------------------
TEXTSE = """" #SE que se reproducir√° al aparecer el sprite del entrenador
module MBD_Data

#-----------------------------------------------------------------------------
# En la siguiente constante est√°n configurados todos los di√°logos posibles.
#-----------------------------------------------------------------------------
TEST3_0={
  ""last_bgm"" => ""Battle! (Gym Leader)"",
  ""last_bgm(player)"" => ""Battle! (Champion)"",
  ""last"" => [""¬°Ho, no. Es mi √∫ltimo Pok√©mon!"",""Pero todav√≠a puedo luchar.""],
  ""last(player)"" => ""Te veo en un buen apuro."",
  ""end_turn"" => [0,[""¬øQu√© haces?"",""Esto solo est√° empezando.""]],
  ""start_turn"" => [0,""Veamos de qu√© est√°s hecho... \PN.""],
  ""one_poke"" => [""Jajaja"",""¬øEn qu√© est√°s pensando \PN?""],
  ""lowhp_last"" => [""!No puede ser¬°"",""¬°Mi \B1n!""],
  ""lowhp_last(player)"" => ""!Estas a punto de caer ante el gran \ON."",
  ""shiny"" => [""¬øC√≥mo ves mi brillo?"",""¬øEs mucho para t√≠?""],
  ""shiny(player)"" => ""¬øDe donde sacaste eso?"",
  ""mega"" => ""¬°Qu√© importa solo debo usar la poderosa energ√≠a ancestral!"",
  ""mega(player)"" => [""No pod√≠a esperar menos de t√≠."",""Eres digno de retar al gran \ON.""],
  ""primal"" => ""El poder primigenio es la clave de mi victoria."",
  ""primal(player)"" => ""Rub√≠es y Zafiros... Veo que tambi√©n dominas ese poder."",
  ""ultra"" => ""¬°Necrozma Muestra tu verdadera forma!"",
  ""ultra(player)"" => ""Debo admitirlo. Esa r√°faga de luz me ha dejado marvillado."",
  ""send"" => [:KYOGRE,""Tan solo admira mi Leviat√°n."",:GROUDON,""Un poderoso Reptil √çgneo.""],
  ""item"" => ""No puedo dejar que esto termine tan r√°pido."",
  ""shadow"" => ""No es inhumano , solo es un viejo truco."",
  ""shadow(player)"" => ""Me sorprende verte usando un poder como ese."",
  ""caught"" => ""¬°C√≥mo te atreves!"",
  ""critical_move"" => ""Tengo al universo de mi lado."",
  ""critical_move(player)"" => ""Necesitar√°s m√°s que suerte para vencerme."",
  ""low_effective_move"" => ""Debo pensar mejor lo que hago."",
  ""low_effective_move(player)"" => [""Cre√≠ ten√≠as m√°s experiencia."",""No puedes ganarme cometiendo errores.""],
  ""super_effective_move"" => ""Cometiste un greve error al meterte conmigo."",
  ""super_effective_move(player)"" => ""Nada mal ni√±o."",
  ""special_move"" => ""Te veo y te analizo."",
  ""special_move(player)"" => ""Ven, ac√©rcate."",
  ""physical_move"" => ""No puedo perder tiempo."",
  ""physical_move(player)"" => ""¬øAcaso sabes lo que haces?"",
  ""status_move"" => ""No puedo arriesgarme."",
  ""status_move(player)"" => ""¬øQu√© est√°s tramando?."",
  ""z_move"" => ""Es momento de un AZ oculto."",
  ""z_move(player)"" => ""Me est√°s atacando a matar."",
  ""tera"" => ""Ilum√≠nate con mi resplandor."",
  ""tera(player)"" => ""¬°Me sorprende que sepas usar este fen√≥meno!""
}

#-----------------------------------------------------------------------------
# Esto ser√≠a para la batalla contra el campe√≥n por defecto.
#-----------------------------------------------------------------------------
CHAMPION_BLUE={
  ""last"" => ""No puedo dejar que me derrotes ahora."",
  ""last(player)"" => ""Luego de tantos combtes por fin podr√© derotar√©."",
  ""end_turn"" => [0,[""Este combate solo est√° empezando."", ""Todav√≠a no te confies.""]],
  ""lowhp_last"" => ""Mientras tenga uno mi poder es infinito."",
  ""send"" => [:BLASTOISE,""Espero que sepas nadar."",:CHARIZARD,""Prep√°rate para pasar calor.""],
  ""item"" => ""Usar√© todo lo que tenga a mano para vencerte."",
  ""shadow(player)"" => [""Veo que caiste en esa tentaci√≥n."",""No mereces nisiquiera retarme.""],
  ""critical_move(player)"" => ""Solo con eso no me ganar√°s."",
  ""low_effective_move(player)"" => ""¬øEn qu√© estabas pensando?"",
  ""super_effective_move"" => ""Aprend√≠ mucho con mi Pokedex.""
}
#-----------------------------------------------------------------------------
# Esto ser√≠a para la batalla contra Brock.
#-----------------------------------------------------------------------------
LEADER_BROCK={
  ""last_bgm"" => ""Battle! (Champion)"",
  ""last"" => ""Bien, pero si quieres la medalla roca tendr√°s que luchar un poco m√°s."",
  ""end_turn"" => [0,[""¬øQu√© haces?"",""Esto solo est√° empezando.""]],
  ""shiny"" => ""Este Onix dorado representa la perseverancia de los entrenadores."",
  ""mega(player)"" => ""Me parece muy temprano para que uses algo as√≠."",
  ""item"" => ""No puedo rendirme tan r√°pido."",
  ""super_effective_move(player)"" => ""Jam√°s podr√°s romper su dura coraza Rocosa.""
}
end

#--------------------------------------------------------------------------------
# A patir de aqu√≠ no toques nada a no ser que sepas bien lo que est√°s haciendo.
#--------------------------------------------------------------------------------

class PokeBattle_Battle

#--------------------------------------------------------------------------------
# Control de Variables
#--------------------------------------------------------------------------------
  alias initialize_fpd initialize
  def initialize(*args)
    @tts=$tts ? $tts : {}
    @mbu=[]
    $tts=nil
    initialize_fpd(*args)
  end

#--------------------------------------------------------------------------------
# M√©todo que muestra los textos
#--------------------------------------------------------------------------------
  def fpShowText(key="""",mbu="""",dtext=nil)
    return if !@opponent # Revisa si es una batalla contra un entrenador
    return if !@tts[key] #Revisa si el di√°logo est√° definido
    text = dtext ? dtext : @tts[key]
    return if @mbu.include?(mbu) #Revisa si se mostr√≥ el di√°logo antes
    if text.is_a?(Array) #Revisa si es definici√≥n simple o en cadena
      it=0
      for i in text
        not_show=false
        not_show=true if i.include?(""\ht"")
        if not_show
          pbDisplayPaused(fpBuffer(i)) #Muestra el di√°logo
        else
          @scene.pbShowOpponent(0) #Muestra el entrenador
          pbSEPlay(TEXTSE) if TEXTSE && TEXTSE!="""" # Reproduce el SE
          pbDisplayPaused(fpBuffer(i)) #Muestra el di√°logo
          @scene.pbHideOpponent() if !text[it+1] || text[it+1].include?(""\ht"") #Oculta el entrenador
        end
        it+=1
      end
    else
      if text.include?(""\ht"")
        pbDisplayPaused(fpBuffer(text)) #Muestra el di√°logo
      else
        @scene.pbShowOpponent(0)
        pbSEPlay(TEXTSE) if TEXTSE && TEXTSE!="""" # Reproduce el SE
        pbDisplayPaused(fpBuffer(text)) #Muestra el di√°logo
        @scene.pbHideOpponent()
      end
    end
    PBDebug.log(""D√≠alogo Mostrado: #{text}"")
    @mbu.push(mbu) if mbu!="""" #A√±ade el di√°logo a la lista de los mostrados
  end

#--------------------------------------------------------------------------------
# M√©todo que controla los buffers
#--------------------------------------------------------------------------------

  def fpBuffer(str)
    str.gsub!(""\PN"",$Trainer.name) #Nombre de PLAYER
    str.gsub!(""\ON"",@opponent.name) #Nombre del rival
    str.gsub!(""\HT"","""")
    for i in 0...4
      str.gsub!(""\B#{i}N"",@battlers[i].name) #Nombre del Battler X
    end
	return str
  end

#--------------------------------------------------------------------------------
#Para el √∫ltimo Pok√©mon , los Pok√©mon espec√≠ficos y los Pok√©mon Oscuros del jugador.
#--------------------------------------------------------------------------------
  def pbSendOut(index,pokemon)
    pbSetSeen(pokemon)
    @peer.pbOnEnteringBattle(self,pokemon)
    if pbIsOpposing?(index)
      @scene.pbTrainerSendOut(index,pokemon)
      if (pbPokemonCount(@party2)>=2 || @tts[""last""] == nil) && @tts[""send""]
        for i in 0...@tts[""send""].length/2
          name=pokemon.name
          if isConst?(pokemon.species,PBSpecies,@tts[""send""][i*2])
            fpShowText(""send"",""opp#{name}"",@tts[""send""][i*2+1])
          end
        end
      end
      pbBGMPlay(@tts[""last_bgm""],100,100) if @tts[""last_bgm""] && pbPokemonCount(@party2)==1
      fpShowText(""last"") if pbPokemonCount(@party2)==1
    else
      @scene.pbSendOut(index,pokemon)
      if pbPokemonCount(@party1)==1
        if $Trainer.party.length>1
          fpShowText(""last(player)"")
        else
          fpShowText(""one_poke"")
        end
      end
      pbBGMPlay(@tts[""last_bgm(player)""],100,100) if @tts[""last_bgm(player)""] && pbPokemonCount(@party1)==1
	    @battle.fpShowText(""shadow(player)"",""shadow(player)"") if pokemon.isShadow?
    end
    @scene.pbResetMoveIndex(index)
  end

#--------------------------------------------------------------------------------
#Para la Regresi√≥n Primigenia
#--------------------------------------------------------------------------------
  def pbPrimalReversion(index)
    return if !@battlers[index] || !@battlers[index].pokemon
    return if !(@battlers[index].hasPrimal? rescue false)
    return if (@battlers[index].isPrimal? rescue true)
    fpShowText(""primal"") if pbIsOpposing?(index)
    if isConst?(@battlers[index].pokemon.species,PBSpecies,:KYOGRE)
      pbCommonAnimation(""PrimalKyogre"",@battlers[index],nil)
    elsif isConst?(@battlers[index].pokemon.species,PBSpecies,:GROUDON)
      pbCommonAnimation(""PrimalGroudon"",@battlers[index],nil)
    else
      pbCommonAnimation(""MegaEvolution"",@battlers[index],nil)
    end
    @battlers[index].pokemon.makePrimal
    @battlers[index].form=@battlers[index].pokemon.form
    @battlers[index].pbUpdate(true)
    @scene.pbChangePokemon(@battlers[index],@battlers[index].pokemon)
    if isConst?(@battlers[index].pokemon.species,PBSpecies,:KYOGRE)
      pbCommonAnimation(""PrimalKyogre2"",@battlers[index],nil)
    elsif isConst?(@battlers[index].pokemon.species,PBSpecies,:GROUDON)
      pbCommonAnimation(""PrimalGroudon2"",@battlers[index],nil)
    else
      pbCommonAnimation(""MegaEvolution2"",@battlers[index],nil)
    end
    pbDisplay(_INTL(""¬°{1} ha esperimentado una Regresi√≥n Primigenia y ha recobrado su apariencia primitiva!"",@battlers[index].pbThis))
    fpShowText(""primal(player)"") if pbBelongsToPlayer?(index)
    PBDebug.log(""[Regresi√≥n Primigenia] #{@battlers[index].pbThis} ha recobrado su apariencia primitiva"")
  end

#--------------------------------------------------------------------------------
#Para la Megaevoluci√≥n
#--------------------------------------------------------------------------------
def pbMegaEvolve(index)
  return if !@battlers[index] || !@battlers[index].pokemon
  return if !(@battlers[index].hasMega? rescue false)
  return if (@battlers[index].isMega? rescue true)
  fpShowText(""mega"") if pbIsOpposing?(index)
  if pbGetOwner(index)==nil
    case (@battlers[index].pokemon.megaMessage rescue 0)
    when 1 # Rayquaza
      pbDisplay(_INTL(""¬°El ruego vehemente alcanza a {1}!"",@battlers[index].pbThis))
    else
      pbDisplay(_INTL(""¬°La {2} de {1} est√° reaccionando su poder interior!"",
         @battlers[index].pbThis,PBItems.getName(@battlers[index].item)))
    end
  else
    ownername=pbGetOwner(index).fullname
    ownername=pbGetOwner(index).name if pbBelongsToPlayer?(index)
    case (@battlers[index].pokemon.megaMessage rescue 0)
    when 1                                                           # Rayquaza
      pbDisplay(_INTL(""¬°El ruego vehemente de {1} alcanza a {2}!"",ownername,@battlers[index].pbThis))
    else
      pbDisplay(_INTL(""¬°La {2} de {1} est√° reaccionando al {4} de {3}!"",
         @battlers[index].pbThis,PBItems.getName(@battlers[index].item),
         ownername,pbGetMegaRingName(index)))
    end
  end
  pbCommonAnimation(""MegaEvolution"",@battlers[index],nil)
  @battlers[index].pokemon.makeMega
  @battlers[index].form=@battlers[index].pokemon.form
  @battlers[index].pbUpdate(true)
  @scene.pbChangePokemon(@battlers[index],@battlers[index].pokemon)
  pbCommonAnimation(""MegaEvolution2"",@battlers[index],nil)
  meganame=(@battlers[index].pokemon.megaName rescue nil)
  if !meganame || meganame==""""
    meganame=_INTL(""Mega {1}"",PBSpecies.getName(@battlers[index].pokemon.species))
  end
  pbDisplay(_INTL(""¬°{1} ha Mega Evolucionado en {2}!"",@battlers[index].pbThis,meganame))
  PBDebug.log(""[Mega Evoluci√≥n] #{@battlers[index].pbThis} ha Mega Evolucionado"")
  fpShowText(""mega(player)"") if pbBelongsToPlayer?(index)
  side=(pbIsOpposing?(index)) ? 1 : 0
  owner=pbGetOwnerIndex(index)
  @megaEvolution[side][owner]=-2
end

#--------------------------------------------------------------------------------
# Para los objetos
#--------------------------------------------------------------------------------
  alias pbEnemyUseItem_fp pbEnemyUseItem
  def pbEnemyUseItem(*args)
    fpShowText(""item"",""item"")
    pbEnemyUseItem(args)
  end

#--------------------------------------------------------------------------------
# Para los finales de turno y pocos PS en el √∫ltimo Pok√©mon
#--------------------------------------------------------------------------------
  alias pbEndOfRoundPhase_fp pbEndOfRoundPhase
  def pbEndOfRoundPhase
      fpShowText(""lowhp_last"",""lowhp_last"") if pbPokemonCount(@party2)==1 && @battlers[1].totalhp/2 >= @battlers[1].hp && !@battlers[1].isFainted?
      fpShowText(""lowhp_last(player)"",""lowhp_last(player)"") if pbPokemonCount(@party1)==1 && @battlers[0].totalhp/2 >= @battlers[0].hp && !@battlers[0].isFainted?
	  if @tts[""end_turn""]
        for i in 0...@tts[""end_turn""].length/2
          if @turncount==@tts[""end_turn""][i*2]
            fpShowText(""end_turn"",""end#{@turncount}"",@tts[""end_turn""][i*2+1])
          end
        end
	  end
    pbEndOfRoundPhase_fp
  end

#--------------------------------------------------------------------------------
# Para los inicios de turno
#--------------------------------------------------------------------------------
  alias pbAttackPhase_fp pbAttackPhase
  def pbAttackPhaseg
	  if @tts[""start_turn""]
        for i in 0...@tts[""start_turn""].length/2
          if @turncount==@tts[""start_turn""][i*2]
            fpShowText(""start_turn"",""start#{@turncount}"",@tts[""start_turn""][i*2+1])
          end
        end
	  end
    pbAttackPhase_fp
  end
end

#--------------------------------------------------------------------------------
# Para los golpes Super-Efectivos, Poco-Efectivos y Cr√≠ticos
#--------------------------------------------------------------------------------
class PokeBattle_Move
  def pbEffectMessages(attacker,opponent,ignoretype=false,alltargets=nil)
    if opponent.damagestate.critical
      if alltargets && alltargets.length>1
        @battle.pbDisplay(_INTL(""¬°Es un golpe cr√≠tico en {1}!"",opponent.pbThis(true)))
      else
        @battle.pbDisplay(_INTL(""¬°Es un golpe cr√≠tico!""))
      end
      @battle.fpShowText(""critical_move"",""critical_move"") if @battle.pbIsOpposing?(attacker.index)
      @battle.fpShowText(""critical_move(player)"",""critical_move(player)"") if @battle.pbBelongsToPlayer?(attacker.index)
    end
    if !pbIsMultiHit && attacker.effects[PBEffects::ParentalBond]==0
      if opponent.damagestate.typemod>8
        if alltargets && alltargets.length>1
          @battle.pbDisplay(_INTL(""¬°Es super efectivo en {1}!"",opponent.pbThis(true)))
        else
          @battle.pbDisplay(_INTL(""¬°Es super efectivo!""))
        end
        @battle.fpShowText(""super_effective_move"",""super_effective_move"") if @battle.pbIsOpposing?(attacker.index)
        @battle.fpShowText(""super_effective_move(player)"",""super_effective_move(player)"") if @battle.pbBelongsToPlayer?(attacker.index)
      elsif opponent.damagestate.typemod>=1 && opponent.damagestate.typemod<8
        if alltargets && alltargets.length>1
          @battle.pbDisplay(_INTL(""No es muy efectivo en {1}..."",opponent.pbThis(true)))
        else
          @battle.pbDisplay(_INTL(""No es muy efectivo...""))
        end
        @battle.fpShowText(""low_effective_move"",""low_effective_move"") if @battle.pbIsOpposing?(attacker.index)
        @battle.fpShowText(""low_effective_move(player)"",""low_effective_move(player)"") if @battle.pbBelongsToPlayer?(attacker.index)
      end
    end
    if pbIsSpecial?(0)
      @battle.fpShowText(""special_move"",""special_move"") if @battle.pbIsOpposing?(attacker.index)
      @battle.fpShowText(""special_move(player)"",""special_move(player)"") if @battle.pbBelongsToPlayer?(attacker.index)
    elsif pbIsPhysical?(0)
      @battle.fpShowText(""physical_move"",""physical_move"") if @battle.pbIsOpposing?(attacker.index)
      @battle.fpShowText(""physical_move(player)"",""physical_move(player)"") if @battle.pbBelongsToPlayer?(attacker.index)
    else
      @battle.fpShowText(""status_move"",""status_move"") if @battle.pbIsOpposing?(attacker.index)
      @battle.fpShowText(""status_move(player)"",""status_move(player)"") if @battle.pbBelongsToPlayer?(attacker.index)
    end
    if opponent.damagestate.endured
      @battle.pbDisplay(_INTL(""¬°{1} aguant√≥ el golpe!"",opponent.pbThis))
    elsif opponent.damagestate.sturdy
      @battle.pbDisplay(_INTL(""¬°{1} resisti√≥ con Robustez!"",opponent.pbThis))
    elsif opponent.damagestate.focussash
      @battle.pbDisplay(_INTL(""¬°{1} resisti√≥ usando Banda Focus!"",opponent.pbThis))
      opponent.pbConsumeItem
    elsif opponent.damagestate.focusband
      @battle.pbDisplay(_INTL(""¬°{1} resisti√≥ usando Cinta Focus!"",opponent.pbThis))
    end
  end

  def pbTypeModMessages(type,attacker,opponent)
    return 8 if type<0
    typemod=pbTypeModifier(type,attacker,opponent)
    if typemod==0
      @battle.pbDisplay(_INTL(""No afecta a {1}..."",opponent.pbThis(true)))
    else
      typemod = 0 if pbTypeImmunityByAbility(type,attacker,opponent)
    end
    if typemod==0
      @battle.fpShowText(""non_effective_move"",""non_effective_move"") if @battle.pbIsOpposing?(attacker.index)
      @battle.fpShowText(""non_effective_move(player)"",""non_effective_move(player)"") if @battle.pbBelongsToPlayer?(attacker.index)
    end
    return typemod
  end
end
#--------------------------------------------------------------------------------
# Para los Pok√©mon Shiny y Oscuros
#--------------------------------------------------------------------------------
class PokeBattle_Scene
  alias pbCommonAnimation_fp pbCommonAnimation
  def pbCommonAnimation(*args)
    pbCommonAnimation_fp(*args)
	  name=args[0] ; attacker=args[1]
    case name
    when ""Shadow""
      @battle.fpShowText(""shadow"",""shadow"")
    when ""Shiny""
      @battle.fpShowText(""shiny"",""shiny"") if @battle.pbIsOpposing?(attacker.index)
      @battle.fpShowText(""shiny(player)"",""shiny(player)"") if @battle.pbBelongsToPlayer?(attacker.index)
    end
  end

#--------------------------------------------------------------------------------
#Correcci√≥n para que el entrenador no se muestre en ciertos casos.
#--------------------------------------------------------------------------------
  alias pbShowOpponent_fp pbShowOpponent
  def pbShowOpponent(*args)
    return if @sprites[""trainer""] && @sprites[""trainer""].x<500
    pbShowOpponent_fp(args)
  end
end

#--------------------------------------------------------------------------------
#Para los Pok√©mon Oscuros capturados
#--------------------------------------------------------------------------------
module PokeBattle_BattleCommon
  alias pbStorePokemon_fp pbStorePokemon
  def pbStorePokemon(poke)
    fpShowText(""caught"",""caught"") if poke.isShadow?
    pbStorePokemon_fp(poke)
  end
end

#--------------------------------------------------------------------------------
# M√©todo que setea los textos
#--------------------------------------------------------------------------------
def fpTTS_set(param)
    if param.is_a?(Symbol)
        if hasConst?(MBD_Data,param)
            $tts=getConst(MBD_Data,param)
        else
            raise ""Constante de Di√°logos no definida.""
        end
    elsif param.is_a?(Hash)
        $tts=param
    elsif param.is_a(String)
        $tts=[];$tts[""last""]=param
    else
        raise ""Par√°metro incorrecto, se esperaba un Hash, Symbol o String.""
    end
end
"
RhBKinGb,Filmora,Mlulin,HTML,Saturday 30th of March 2024 09:29:09 PM CDT,"{
  ""versionCode"": 13201,
  ""versionName"": ""13.2.01"",
  ""Msg"": ""Update Mod is available, to continue in our app please update it.

What's new:
- Performance Improvements.
- Bug Fixes.
- New Features introduced.
- Others minor changes.

Thanks for using"",
  ""downloadLink"": ""https://t.me/SNxTG""
  }"
00ZitFKD,motd for scare monk,Yobanzda,Lua,Saturday 30th of March 2024 08:25:14 PM CDT,level 2 is out congrats! why am i doing this :(
Kh0CxRBR,112.215.240.213-/sdcard/Premium/useragent_ig.py.py,OBF-XIn,Python,Saturday 30th of March 2024 07:58:36 PM CDT,"# useragent
import random

class Useragent:
    def __init__(self) -> None:
        pass
        
    def useragent_api(self):
        self.nexus = ['Galaxy Nexus', 'Nexus 10', 'Nexus 2', 'Nexus 4', 'Nexus 4', 'Nexus 4', 'Nexus 4', 'Nexus 4', 'Nexus 4', 'Nexus 5', 'phone/Nexus 5', 'Nexus 5X', 'Nexus 6', 'Nexus 7', 'Nexus 9', 'Nexus One', 'Nexus One', 'Nexus One', 'Nexus One', 'Nexus One', 'Nexus One', 'Nexus Player', 'Nexus Player', 'Nexus S', 'Nexus S', 'Nexus S 4G', 'nexus S', 'Nexus S', 'Nexus s', 'Nexus S', 'Nexus S', 'Nexus S', 'Nexus S', 'Nexus S']
        self.micromax = ['Micromax 10', 'Micromax 1J', 'Micromax 86519', 'Micromax A064', 'Micromax_A064', 'Micromax A065', 'Micromax_A065', 'Micromax A066', 'Micromax_A066', 'Micromax A067', 'Micromax_A067', 'MICROMAX_A068', 'MICROMAX A068', 'Micromax A068', 'Micromax A069', 'Micromax_A069', 'Micromax A075', 'Micromax A082', 'Micromax_A082', 'Micromax A089', 'Micromax_A089', 'Micromax A091', 'Micromax A092', 'Micromax_A092', 'Micromax A093', 'Micromax_A093', 'Micromax A095', 'Micromax A096', 'Micromax_A101', 'Micromax A102', 'Micromax_A102', 'Micromax A104', 'Micromax a104', 'Micromax A105', 'Micromax_A105', 'Micromax A106', 'Micromax-A106', 'Micromax A108', 'Micromax_A109', 'Micromax A109', 'Micromax A110', 'Micromax_A110', 'Micromax A110Q', 'Micromax_A110Q', 'Micromax A111', 'Micromax A114', 'Micromax A114R', 'Micromax_A114R', 'Micromax A115', 'Micromax_A115', 'Micromax A116', 'Micromax_A116', 'Micromax A116i', 'Micromax_A116i', 'Micromax A117', 'Micromax_A117', 'Micromax A118R', 'Micromax A119', 'Micromax A120', 'Micromax A121', 'Micromax_A121', 'Micromax A15', 'Micromax A177', 'Micromax A190', 'Micromax_A190', 'Micromax A200', 'Micromax_A200', 'Micromax A21', 'Micromax A210', 'Micromax A24', 'Micromax_A24', 'Micromax A25 Smarty', 'Micromax A250', 'Micromax A255', 'Micromax_A255', 'Micromax A26', 'Micromax_A26', 'Micromax_A27', 'Micromax A27', 'Micromax_A28', 'Micromax A28/GRI40', 'Micromax A28', 'Micromax A290', 'Micromax A30', 'Micromax A300', 'Micromax A310', 'Micromax A311', 'Micromax A315', 'Micromax_A315', 'Micromax_A316', 'Micromax A316', 'Micromax_A34', 'Micromax A34', 'Micromax_A35', 'Micromax A35', 'Micromax A350', 'Micromax_A36', 'Micromax A36', 'Micromax_A37', 'Micromax A37', 'Micromax A37B', 'Micromax_A37B', 'Micromax A40', 'Micromax_A40', 'Micromax A46', 'Micromax_A46', 'Micromax A47', 'MicromaxA47', 'Micromax_A50', 'Micromax A50', 'Micromax A51', 'Micromax A52', 'Micromax A54', 'Micromax A56', 'Micromax_A57', 'Micromax A57', 'Micromax A58', 'Micromax_A58', 'Micromax A59', 'Micromax A60', 'Micromax A61', 'Micromax A62', 'Micromax_A62', 'Micromax A63', 'Micromax_A63', 'Micromax_A65', 'Micromax A65', 'Micromax_A66', 'Micromax A66', 'Micromax A67', 'Micromax A68', 'Micromax A69', 'Micromax_A69', 'Micromax_A70', 'Micromax A700', 'Micromax A71', 'Micromax_A71', 'Micromax A72', 'Micromax_A72', 'Micromax A73', 'Micromax_A74', 'Micromax A74', 'Micromax A75', 'Micromax_A76', 'Micromax A76', 'Micromax A77', 'Micromax A78', 'Micromax A79', 'en_us Micromax A80', 'Micromax A80', 'Micromax A82', 'Micromax_A82', 'Micromax A84', 'Micromax A85', 'Micromax A86', 'Micromax_A86', 'Micromax_A87', 'Micromax A87', 'Micromax A87 . Ninja 4.0', 'Micromax A88', 'Micromax_A88', 'Micromax A89', 'Micromax A90', 'Micromax A90s', 'MIcromax_A90s', 'Micromax A90S', 'Micromax A91', 'Micromax_A91', 'Micromax_A92', 'Micromax A92', 'MicromaxA93', 'Micromax A93', 'Micromax A94', 'Micromax_A94', 'Micromax A96', 'Micromax_A96', 'Micromax A97', 'Micromax_A99', 'Micromax A99', 'Micromax_AD3520', 'Micromax AD3520', 'Micromax AD3550', 'Micromax AD4500', 'Micromax_AD4500', 'Micromax AE90', 'Micromax AO5510', 'Micromax AQ5000', 'Micromax B4A', 'Micromax B5 Pro', 'B5Pro', 'Micromax_Bharat_5_Plus', 'Micromax Q402Plus', 'Micromax Q440', 'Micromax Bharat 5', 'Micromax Q4204', 'Micromax Bharat 5 Plus', 'Micromax Bharat 5 Pro', 'Micromax Bolt 3425', 'Micromax Bolt 2', 'Micromax Q402+', 'Micromax Q306', 'Micromax Q3001', 'Micromax Q301', 'Micromax Q303', 'Micromax Q324', 'Micromax Q326', 'Q327', 'Micromax Q327', 'Micromax Q3301', 'Micromax Q333', 'Micromax_Q333', 'Micromax Q338', 'Micromax Q346', 'Micromax Q354', 'Micromax Q357', 'Micromax Q383', 'Micromax_S302', 'Micromax S302', 'Micromax Q424', 'Micromax Q352', 'Micromax Q4101', 'Micromax C2A', 'Micromax C9', 'Micromax C1', 'Micromax C1A', 'Micromax C2APLS', 'Micromax Q4310', 'Micromax E4815', 'arm_64 Micromax E481', 'Micromax E481', 'Micromax E4816', 'Micromax Q462', 'Micromax Q463', 'Micromax E485', 'Micromax E484', 'Micromax AQ4501', 'Micromax AQ4502', 'A240', 'Micromax A240', 'Micromax Q391', 'Micromax E453', 'Micromax A107', 'Micromax HS2', 'Micromax HS1', 'Micromax_HS3', 'en Micromax_HS3', 'AQ5001', 'Micromax AQ5001', 'AQ5001 Canvas Power', 'Micromax Q392', 'Micromax Q465', 'Micromax Q461', 'Micromax Q350R', 'Micromax Q421', 'Micromax Q417', 'Micromax Q426', 'Micromax Q4260', 'Micromax E311', 'Micromax E352', 'Micromax E455', 'Micromax Q415', 'Micromax Q355', 'Micromax Q469', 'Micromax E451', 'Micromax E451', 'Micromax Q340', 'Micromax Q349', 'Micromax Q345', 'Micromax Q450', 'Micromax Q480', 'arm_64 Micromax Q480', 'Micromax Q380', 'Micromax Q3502', 'Micromax Q351', 'Micromax Q385', 'P70221', 'Micromax P681', 'MicromaxP802', 'Micromax Q427', 'Micromax_Q427', 'Micromax Q413', 'Micromax E313', 'Micromax D2', 'Micromax D200', 'Micromax_D200', 'Micromax D303', 'Micromax D304', 'Micromax_D304', 'Micromax D305', 'Micromax D306', 'Micromax D320', 'Micromax D321', 'Micromax D333', 'Micromax D340', 'Micromax D7517', 'Micromax DM5003', 'Micromax E353', 'Micromax E457', 'Micromax E458', 'Micromax E460', 'Micromax E471', 'Micromax E4817', 'Micromax E482', 'Micromax E483', 'Micromax E5018M', 'Micromax EG111', 'Micromax EG116', 'micromax F', 'micromax F189', 'Micromax F601', 'MicromaxF666', 'Micromax IN', 'Micromax E7533', 'Micromax E6523', 'IN_2b', 'IN_Note1', 'MICROMAX IN1', 'N8216', 'N8301', 'ione note', 'MICROMAX ione note', 'Micromax N4120', 'Micromax N8202', 'Micromax Ninja', 'Micromax Nitro', 'Micromax Note 1+', 'Micromax Note 5', 'Micromax Note3', 'Micromax NX', 'Micromax P001', 'Micromax P250(Funbook)', 'Micromax P255', 'Micromax P256', 'xx Micromax P275', 'Micromax_P275', 'Micromax P275', 'Micromax P280', 'Micromax P290', 'Micromax P310', 'Micromax P350', 'xx Micromax P350', 'Micromax P360', 'Micromax P362', 'Micromax P365', 'Micromax P410', 'Micromax P410i', 'Micromax_P410i', 'Micromax P420', 'Micromax P469', 'Micromax P470', 'MicromaxP480', 'Micromax P500(Funbook)', 'Micromax P560', 'Micromax P580', 'Micromax P580i', 'Micromax P600', 'Micromax P650', 'Micromax P650E', 'Micromax P660', 'Micromax P660', 'Micromax_P666', 'Micromax P666', 'MicromaxP680', 'Micromax P690', 'Micromax P701', 'MicromaxP702', 'Micromax P810', 'en Micromax Q300', 'Micromax_Q300', 'Micromax Q323', 'Micromax_Q323', 'Micromax Q325', 'Micromax_Q325', 'Micromax Q331', 'Micromax_Q331', 'Micromax Q332', 'Micromax_Q332', 'Micromax Q334', 'Micromax Q335', 'Micromax_Q335', 'Micromax Q336', 'Micromax_Q336', 'Micromax Q341', 'Micromax Q343', 'Micromax Q348', 'Micromax_Q353', 'en Micromax_Q353', 'Micromax_Q353P', 'Micromax Q3551', 'Micromax Q3555', 'Micromax Q361', 'Micromax Q370', 'Micromax_Q370', 'Micromax Q371', 'Micromax_Q371', 'Micromax Q375', 'Micromax_Q375', 'Micromax Q379', 'Micromax Q381', 'Micromax Q382', 'Micromax Q386', 'Micromax Q394', 'Micromax_Q394', 'Micromax Q395', 'Micromax Q397', 'Micromax Q398', 'arm Micromax Q398', 'Micromax Q400', 'Micromax_Q400', 'Micromax Q4002', 'en Micromax Q4002', 'Micromax Q401', 'Micromax Q402', 'Micromax Q402 Ultra', 'Micromax Q404', 'Micromax Q411', 'Micromax_Q411', 'Micromax Q412', 'Micromax Q414', 'Micromax Q416', 'Micromax Q419', 'Micromax Q4201', 'Micromax Q422', 'Micromax Q4220', 'Micromax Q423', 'Micromax Q428', 'Micromax_Q428', 'Micromax Q429', '720X1280 Micromax Q4309', 'Micromax Q4312', 'en_US Micromax Q437', 'Micromax Q440Plus', 'Micromax Q454', 'Micromax Q470', 'Micromax Q479', 'Micromax Q491', 'Micromax_Q491', 'Micromax Q502+', 'Micromax Q666', 'Micromax Q67', 'micromax Q68', 'micromax Q78', 'Micromax S300', 'Micromax_S300', 'Micromax S301', 'Micromax_S301', 'Micromax Q4311', 'Micromax Q4601', 'Micromax Q409A', 'Micromax Q409', 'Micromax Q452', 'Micromax Unite 3', 'Micromax Unite 2', 'Micromax Unite 2 A106', 'Micromax Q372', 'Micromax V89', 'Micromax Q4001', 'Micromax Q4202', 'Micromax Q4251', 'arm Micromax Q4251', 'Micromax W5509', 'Micromax X5098', 'Micromax-Xzoom A52', 'YU5530', 'YU5040', 'Micromax YU5900', 'YU5012', 'Micromax Z59']
        self.onpls = ['NE2213', 'NE2217', 'NE2215', 'NE2210', 'NE2210', 'CPH2423', 'CPH2411', 'CPH2417', 'CPH2413', 'CPH2415', 'CPH2449', 'CPH2487', 'ONE A2003', 'ONE A2003', 'ONE A2001', 'ONE A2005', 'ONEPLUS A3003', 'ONEPLUS A3000', 'ONEPLUS A3010', 'ONEPLUS A5000', 'ONEPLUS A5000', 'ONEPLUS A5010', 'ONEPLUS A5010', 'ONEPLUS A5010', 'ONEPLUS A5010', 'ONEPLUS A5010', 'ONEPLUS A6003', 'ONEPLUS A6000', 'ONEPLUS A6010', 'ONEPLUS A6013', 'ONEPLUS A6010', 'GM1900', 'GM1901', 'GM1903', 'GM1917', 'GM1913', 'GM1911', 'GM1910', 'GM1915', 'GM1910', 'HD1901', 'HD1903', 'HD1900 Flow', 'HD1905', 'HD1900', 'HD1907', 'HD1911', 'HD1913', 'HD1910', 'GM1925', 'HD1925', 'GM1920', 'IN2013', 'IN2015', 'IN2010', 'IN2010', 'IN2017', 'IN2019', 'IN2023', 'IN2025', 'IN2020', 'OnePlus8Pro', 'KB2005', 'KB2001', 'KB2007', 'KB2003', 'KB2000', 'OnePlus 8T 5G', 'LE2115', 'LE2113', 'LE2111', 'LE2110', 'LE2120', 'LE2125', 'LE2123', 'LE2121', 'LE2127', 'OnePlus9Pro', 'LE2101', 'LE2100', 'MT2111', 'MT2110', 'ONEPLUS A19677', 'ONEPLUS A2345', 'Oneplus A31', 'Oneplus A3331', 'ONEPLUS A35904', 'ONEPLUS A37000', 'ONEPLUS A3EVB', 'ONEPLUS A62322', 'ONEPLUS A64794', 'ONEPLUS A65369', 'ONEPLUS A68333', 'ONEPLUS A70458', 'ONEPLUS A70791', 'ONEPLUS A78637', 'ONEPLUS A80828', 'ONEPLUS A83306', 'ONEPLUS A87046', 'ONEPLUS A90641', 'Oneplus A99831', 'PGKM10', 'PGKM10', 'PHK110', 'PHK110', 'PGP110', 'PGP110', 'PGZ110', 'ONEPLUS KB2023', 'OnePlus Nord', 'Oneplus Nord 2', 'DN2103', 'DN2101', 'CPH2399', 'CPH2401', 'AC2001', 'AC2003', 'IV2201', 'CPH2409', 'CPH2381', 'CPH2465', 'EB2103', 'EB2101', 'EB2101', 'BE2025', 'BE2026', 'BE2029', 'Nord N10 5G', 'BE2028', 'BE2013', 'BE2011', 'BE2012', 'CPH2459', 'GN2200', 'CPH2469', 'DE2118', 'DE2117', 'A0001', 'ONE E1001', 'ONE E1003', 'ONE E1001', 'ONE E1005']
        self.oppo = [""CPH1869"", ""CPH1929"",""CPH2107"", ""CPH2238"", ""CPH2389"",""CPH2401"", ""CPH2407"", ""CPH2413"", ""CPH2415"", ""CPH2417"", ""CPH2419"", ""CPH2455"", ""CPH2459"", ""CPH2461"", ""CPH2471"", ""CPH2473"", ""CPH2477"", ""CPH8893"", ""CPH2321"", ""CPH2341"", ""CPH2373"", ""CPH2083"", ""CPH2071"", ""CPH2077"", ""CPH2185"", ""CPH2179"", ""CPH2269"", ""CPH2421"", ""CPH2349"", ""CPH2271"", ""CPH1923"", ""CPH1925"", ""CPH1837"", ""CPH2015"", ""CPH2073"", ""CPH2081"", ""CPH2029"", ""CPH2031"", ""CPH2137"", ""CPH1605"", ""CPH1803"", ""CPH1853"", ""CPH1805"", ""CPH1809"", ""CPH1851"", ""CPH1931"", ""CPH1959"", ""CPH1933"", ""CPH1935"", ""CPH1943"", ""CPH2061"", ""CPH2069"", ""CPH2127"", ""CPH2131"", ""CPH2139"", ""CPH2135"", ""CPH2239"", ""CPH2195"", ""CPH2273"", ""CPH2325"", ""CPH2309"", ""CPH1701"", ""CPH2387"", ""CPH1909"", ""CPH1920"", ""CPH1912"", ""CPH1901"", ""CPH1903"", ""CPH1905"", ""CPH1717"", ""CPH1801"", ""CPH2067"", ""CPH2099"", ""CPH2161"", ""CPH2219"", ""CPH2197"", ""CPH2263"", ""CPH2375"", ""CPH2339"", ""CPH1715"", ""CPH2385"", ""CPH1729"", ""CPH1827"", ""CPH1938"", ""CPH1937"", ""CPH1939"", ""CPH1941"", ""CPH2001"", ""CPH2021"", ""CPH2059"", ""CPH2121"", ""CPH2123"", ""CPH2203"", ""CPH2333"", ""CPH2365"", ""CPH1913"", ""CPH1911"", ""CPH1915"", ""CPH1969"", ""CPH2209"", ""CPH1987"", ""CPH2095"", ""CPH2119"", ""CPH2285"", ""CPH2213"", ""CPH2223"", ""CPH2363"", ""CPH1609"", ""CPH1613"", ""CPH1723"", ""CPH1727"", ""CPH1725"", ""CPH1819"", ""CPH1821"", ""CPH1825"", ""CPH1881"", ""CPH1823"", ""CPH1871"", ""CPH1875"", ""CPH2023"", ""CPH2005"", ""CPH2025"", ""CPH2207"", ""CPH2173"", ""CPH2307"", ""CPH2305"", ""CPH2337"", ""CPH1955"", ""CPH1707"", ""CPH1719"", ""CPH1721"", ""CPH1835"", ""CPH1831"", ""CPH1833"", ""CPH1879"", ""CPH1893"", ""CPH1877"", ""CPH1607"", ""CPH1611"", ""CPH1917"", ""CPH1919"", ""CPH1907"", ""CPH1989"", ""CPH1945"", ""CPH1951"", ""CPH2043"", ""CPH2035"", ""CPH2037"", ""CPH2036"", ""CPH2009"", ""CPH2013"", ""CPH2113"", ""CPH2091"", ""CPH2125"", ""CPH2109"", ""CPH2089"", ""CPH2065"", ""CPH2159"", ""CPH2145"", ""CPH2205"", ""CPH2201"", ""CPH2199"", ""CPH2217"", ""CPH1921"", ""CPH2211"", ""CPH2235"", ""CPH2251"", ""CPH2249"", ""CPH2247"", ""CPH2237"", ""CPH2371"", ""CPH2293"", ""CPH2353"", ""CPH2343"", ""CPH2359"", ""CPH2357"", ""CPH2457"", ""CPH1983"", ""CPH1979""]
        self.vivo = ['vivo 1002T', 'Vivo 1605', 'vivo 1730', 'vivo 1809', 'vivo_1820', 'vivo 1835', 'vivo 1914', 'vivo 2010', 'vivo 2019', 'vivo 2019', 'vivo 2019', 'vivo 2023', 'vivo 2027', 'vivo 3969', 'VIVO 5', 'Vivo 6', 'Vivo 7 Pro', 'Vivo 8', 'Vivo 93K Prime', 'vivo A5 ', 'vivo a54', 'Vivo A54', 'vivo a57', 'Vivo A87', 'VIVO A94', 'VIVO AIR', 'VIVO C8818', 'vivo E1', 'vivo E3', 'vivo E3', 'vivo E5', 'Vivo EGO', 'V1962BA', 'vivo h5', 'V1824A', 'V1824A', 'V1824BA', 'V2217A', 'V2217A', 'V2218A', 'V2218A', 'V2218A', 'V2243A', 'V1955A', 'I1927', 'I1928', 'V2024A', 'V2025A', 'V2025A', 'V2049A', 'V2049A', 'I2009', 'I2012', 'I2012', 'V2136A', 'V2136A', 'V2141A', 'V2171A', 'I2017', 'V2172A', 'V2172A', 'I2022', 'I2019', 'I2019', 'I2201', 'V1914A', 'V1914A', 'V1981A', 'V2055A', 'V2118A', 'V2157A', 'V2157A', 'V2154A', 'V2196A', 'V2196A', 'V2199A', 'V2231A', 'V2238A', 'V1936AL', 'V1936A', 'V1922A', 'V1922A', 'V1922A ', 'V1916A', 'V2023A', 'V2023A', 'VIVO V2023A', 'V2065A', 'V2061A', 'V2061A', 'V2143A', 'V2106A', 'V2165A', 'V2165A', 'V2180GA', 'V1986A', 'V2012A', 'V2012A', 'V2073A', 'V2073A', 'I2011', 'V2148A', 'I2018', 'V1919A', 'V2131A', 'V2220A', 'I2202', 'I2206', 'I2203', 'I2202', 'I2127', 'I2202', 'I2208', 'I2208', 'I2126', 'I2126', 'I2126', 'V2164KA', 'V2164KA', 'VIVO IV', 'VIVO IV', 'VIVO IV', 'VIVO IV', 'Vivo J5', 'vivo 1805', 'vivo 1805', 'vivo NEX', 'V1923A', 'vivo 1912', 'V1923A', 'vivo 1912', 'vivo 1913', 'V1924A', 'V1924A', 'vivo 1913', 'V1950A', 'V1950A', 'vivo NEX A', 'vivo NEX A', 'vivo 1813', 'V1821A', 'V1821A', 'vivo NEX S', 'vivo NEX S', 'Vivo ONE', 'Vivo ONE', 'PA2170', 'vivo PD1628F_EX', 'vivo PD1709', 'vivo PD1709F_EX', 'vivo PD1709F_EX', 'vivo PD1728', 'vivo PD1728', 'vivo PD1832F_EX', 'vivo PD2046F_EX', 'vivo PD2050F_EX', 'vivo PD2055F_EX', 'vivo PD2059F_EX', 'Vivo S', 'V1831A', 'V1831A', 'VIVO S1', 'Vivo S1 Prime', 'V1832A', 'V1832T', 'V2121A', 'V2121A', 'V2130A', 'V2130A', 'Vivo S11', 'Vivo S11 ', 'vivo S11t', 'vivo S11t', 'vivo S11t', 'vivo S11t', 'vivo S12', 'V2162A', 'Vivo S13', 'V2203A', 'V2207A', 'V2190A', 'V2244A', 'vivo S1Pro', 'Vivo S20 ', 'Vivo S21 ', 'Vivo S31', 'Vivo S4', 'Vivo S40', 'Vivo S41 /MMB439M', 'V1932A', 'vivo S6', 'V1962A', 'vivo S6T', 'V2020CA', 'V2020A', 'Vivo S76', 'V2031EA', 'vivo S7i(t)', 'vivo S7i(t)', 'vivo S7i(t)', 'V2080A', 'vivo S7t', 'vivo_S7t', 'vivo S7t', 'S7t 5G', 'vivo S7w', 'vivo S8', 'vivo S9', 'vivo S9', 'vivo S9', 'V2072A', 'V2048A', 'vivo S9t', 'V2168', 'V2168', 'V2153', 'V2153', 'V2150', 'V2151', 'V2151', 'V2151', 'V2143', 'vivo TD1602_EX', 'vivo U1', 'vivo 1916', 'vivo 1916', 'vivo 1921', 'V1941A', 'V1941A', 'V1928A', 'vivo V1', 'vivo V1', 'vivo V10', 'Vivo V10', 'VIVO V11', 'Vivo V11', 'vivo 1804', 'vivo 1804', 'vivo 1806', 'vivo 1806', 'vivo v11pro', 'vivo 1819', 'vivo 1818', 'vivo 1818', 'vivo 1920', 'vivo 1919', 'vivo 1907', 'vivo 1907', 'vivo 1907_19', 'vivo 1910', 'vivo 1909', 'vivo 1910', 'vivo 1933', 'vivo 1933', 'vivo V1907', 'vivo v19neo', 'vivo V1Max', 'vivo V1Max', 'vivo V2', 'V2040', 'vivo 2018', 'vivo 2018', 'V2022', 'Vivo V20A', 'Vivo V20G', 'V2066', 'V2108', 'V2050', 'V2050', 'V2050', 'V2061', 'V2055', 'Vivo V21S', 'V2130', 'V2132A', 'V2116', 'V2115', 'V2116', 'V2116', 'V2126', 'V2126', 'V2228', 'V2228', 'V2158', 'V2158', 'V2202', 'V2202', 'V2201', 'V2246', 'V2230', 'V2230', 'V2237', 'vivo V3', 'vivo V3', 'vivo V3Max A', 'vivo V3Max L', 'vivo v30', 'vivo v31', 'vivo V3L', 'vivo V3L', 'vivo V3L', 'vivo V3L', 'vivo V3M A', 'vivo V3M A', 'vivo V3MA', 'vivo_V3Max', 'vivo v45', 'vivo 1601', 'vivo V5', 'vivo 1609', 'vivo 1611', 'Vivo V51', 'Vivo V54', 'vivo 1612', 'vivo 1713', 'vivo V5S A', 'vivo 1718', 'vivo 1716', 'vivo Y79A', 'vivo Y79A', 'V2166BA', 'Vivo V8', 'vivo 1723', 'vivo V9 mini', 'vivo 1851', 'VIVO V9Pro', 'vivo 1851', 'vivo 1727', 'Vivo X', 'V2178A', 'V2229A', 'V2170A', 'V2170A', 'vivo Xplay3S', 'vivo Xplay3S', 'vivo Xplay3S', 'vivo Xplay5A', 'vivo Xplay5A', 'vivo Xplay5A', 'vivo Xplay5S', 'vivo Xplay5S', 'vivo Xplay6', 'vivo Xplay6L', 'vivo Xplay6', 'vivo Xplay6', 'vivo X710L', 'vivo X710L', 'vivo X710L', 'vivo X710L', 'vivo X1', 'vivo X1', 'vivo X1', 'vivo X1', 'Vivo X11', 'vivo X1S', 'vivo X1S', 'vivo X1S', 'vivo X1St', 'vivo X1St', 'vivo X1St', 'vivo X1St', 'vivo X1St', 'vivo X1W', 'vivo X1w', 'VIVO X2', 'VIVO X2', 'VIVO_X2', 'vivo X20', 'vivo X20A', 'vivo X20Plus A', 'vivo 1720', 'vivo X20Plus UD', 'vivo X20Plus UD', 'vivo X21', 'vivo X21A', 'vivo X21UD A', 'vivo X21i', 'vivo X21i A', 'vivo X21i', 'vivo X21i A ', 'V1814A', 'V1814T', 'V1814T', 'V1814A', 'V1809A', 'V1809A', 'V1816A', 'V1809T', 'V1816T', 'V1829A', 'V1838A', 'V1838T', 'V1829T', 'V1836A', 'V1836A', 'V1836T', 'vivo X27Pro', 'V1938CT', 'V1938T', 'V1938T', 'vivo X3F', 'vivo X3F', 'vivo X3F', 'vivo X3L', 'vivo X3L', 'vivo X3S', 'vivo X3S', 'vivo X3S', 'vivo X3S', 'vivo X3S', 'vivo X3S', 'vivo X3S W', 'vivo X3S W', 'vivo X3S W', 'vivo X3S W', 'vivo X3t', 'vivo X3t', 'vivo X3t', 'vivo X3t', 'vivo X3V', 'vivo X3V', 'vivo X3V', 'vivo X3V', 'Vivo X40', 'vivo X5L', 'vivo X5', 'vivo X5L', 'vivo X5Pro D', 'vivo X5Pro L', 'vivo X5Pro V', 'vivo X5Pro D', 'vivo X5Pro D', 'V2001A', 'V2001A', 'vivo 2004', 'vivo 2005', 'vivo 2005', 'V1937', 'vivo 1937', 'V1937', 'V1937', 'vivo 2006', 'vivo 2006', 'V2005A', 'V2011A', 'X50 Pro+', 'V1930', 'V1930', 'vivo X510t', 'vivo X510t', 'vivo X510t', 'vivo X510t', 'vivo X510t', 'vivo X520L', 'vivo X5F', 'vivo X5M', 'vivo X5M', 'vivo X5M', 'vivo X5Max ', 'vivo X5Max L', 'vivo X5Max L', 'vivo X5Max S', 'vivo X5Max V', 'vivo X5S L', 'vivo X5S L', 'vivo X5V', 'vivo X5V', 'vivo X5V', 'vivo X6D', 'vivo X6A', 'vivo X6Plus D', 'vivo X6Plus A', 'vivo X6Plus L', 'vivo X6Plus D', 'vivo X6Plus A', 'vivo X6Plus D', 'vivo X6Plus L', 'V2046A', 'V2059A', 'V2046A', 'V2045', 'V2046', 'V2047A', 'V2056A', 'V2085A', 'vivo X6S A', 'vivo X6S A', 'vivo X6S A', 'vivo X6S A', 'vivo X6SPlus D', 'vivo X6SPlus D', 'vivo X6SPlus D', 'vivo X6SPlus D', 'vivo X6SPlus A', 'vivo X7L', 'vivo X7Plus', 'vivo X7Plus', 'V2133A', 'V2104', 'V2104', 'V2105', 'V2134A', 'V2105', 'V2145A', 'V2114', 'V2145A', 'vivo X710F', 'vivo X710F', 'vivo X710F', 'vivo X710F', 'V2144', 'V2183A', 'V2144', 'V2208', 'V2185A', 'V2145', 'V2185A', 'Vivo X83', 'vivo X9', 'vivo X9L', 'vivo X9', 'vivo X9', 'vivo X9Plus', 'vivo X9Plus L', 'V2241A', 'V2242A', 'V2242A', 'V2227A', 'vivo X9i', 'vivo X9i', 'vivo X9i', 'vivo X9s', 'vivo X9s L', 'vivo X9s Plus', 'vivo X9s Plus', 'vivo X9s Plus L', 'vivo X9s Plus', 'VIVO XL', 'vivo Xplay', 'vivo Xshot', 'vivo Xshot', 'vivo Xshot', 'vivo Xshot', 'V2203', 'V2221', 'Vivo y1', 'Vivo Y1', 'V2168A', 'V2168A', 'vivo 1906', 'V2028', 'vivo Y11t', 'vivo Y11t', 'vivo Y11t', 'vivo 1904', 'V2163A', 'V2102', 'V2102', 'vivo 2007', 'vivo 2007', 'Vivo Y12I Pro', 'V2026', 'V2042', 'V2033', 'V2039', 'V2069', 'V2026_21', 'vivo Y13L', 'vivo Y13', 'vivo Y13L', 'vivo Y13L', 'vivo Y13i', 'vivo_Y13i', 'vivo Y13iL', 'vivo Y13iL', 'vivo Y13T', 'vivo Y13T', 'vivo 1901', 'vivo Y15T', 'vivo Y15T', 'V2134', 'V2147', 'V2147', 'V2212', 'V2120', 'V2204', 'V2214', 'V2204', 'vivo 1902', 'vivo 1902_19', 'VIVO 1902', 'vivo Y17T', 'vivo Y17T', 'vivo_Y17T', 'vivo Y17T', 'vivo Y17W', 'vivo Y17W', 'vivo Y17W', 'vivo Y18L', 'vivo Y18L', 'vivo Y18L', 'vivo 1915', 'vivo Y19t', 'vivo Y19t', 'vivo Y19t', 'vivo Y19t', 'Vivo Y1i', 'vivo 2015', 'vivo 2015', 'V2029', 'V2027', 'V2043_21', 'V2101', 'V2070', 'V2054', 'V2052', 'V2037', 'V2032', 'V2038', 'V2038', 'V2129', 'V2129', 'V2111', 'V2149', 'V2140', 'V2140', 'V2152', 'V2152', 'V2110', 'V2110', 'V2131', 'V2135', 'V2207', 'vivo Y22iL', 'vivo Y22iL', 'V2206', 'V2206', 'vivo Y23L', 'vivo Y23L', 'vivo y23l', 'vivo Y23L', 'vivo Y23L', 'vivo Y23L', 'vivo 1613', 'vivo Y27', 'vivo Y27L', 'vivo Y27', 'vivo Y28', 'vivo Y28', 'vivo Y28L', 'vivo Y28L', 'vivo Y29L', 'vivo Y29L', 'vivo Y29L', 'V1901A', 'V1901A', 'V1901A', 'V1901T', 'V1930A', 'vivo 1938', 'V2034A', 'V2036A', 'V2099A', 'V2099A', 'V2160', 'V2160', 'V2160', 'V2066BA', 'V2066A', 'Y30g', 'Vivo Y30S', 'vivo Y31L', 'V2068', 'V2054A', 'V2068A', 'V2068', 'V2158A', 'Vivo Y32', 'V2180A', 'V2057', 'V2109', 'V2166A', 'V2166A', 'V2146', 'V2205', 'V2205', 'vivo Y37A', 'vivo Y37', 'V2044', 'vivo Y3t', 'vivo Y3t', 'vivo Y3t', 'vivo y41', 'vivo Y5 ', 'Vivo Y5', 'vivo 1935', 'VIVO Y50(2021)', 'V2023EA', 'Y50t', 'V2035', 'vivo Y51L', 'vivo Y51A', 'V2030', 'vivo 1707', 'V2031_21', 'vivo Y51t L', 'vivo Y51t L', 'vivo Y51t L', 'V2053', 'V2057A', 'vivo Y53', 'vivo 1606A', 'vivo Y53n', 'V2058', 'V2123A', 'V2069A', 'V2045A', 'V2045A', 'vivo Y55A', 'V2127', 'V2127', 'vivo 1603', 'vivo Y55n', 'vivo 1610', 'V2164A', 'V2164A', 'V1934A', 'V2006', 'vivo Y613', 'vivo Y613', 'vivo Y613F', 'vivo Y622', 'vivo Y622', 'vivo Y622', 'vivo Y622', 'vivo Y622', 'vivo Y623', 'vivo Y623', 'vivo Y627', 'vivo Y627', 'vivo Y627', 'vivo Y627', 'vivo Y628', 'vivo Y628', 'vivo 1719', 'vivo Y66', 'vivo Y66L', 'vivo Y66i A', 'vivo Y67', 'vivo Y67A', 'vivo Y67L', 'vivo Y685', 'vivo 1714', 'vivo Y69A', 'V2002A', 'V2002A', 'vivo Y71A', 'vivo 1724', 'vivo Y71A', 'vivo 1801', 'V2041', 'V2060', 'V2102A', 'V1731CA', 'vivo Y73', 'Vivo Y73 /MMB239M', 'V2059', 'V2031A', 'V2164PA', 'V2117', 'vivo Y75A', 'V2142', 'V2142', 'vivo Y75s', 'vivo Y75s', 'vivo Y75S', 'vivo Y75s', 'V2124', 'V2156A', 'V2219A', 'V2219A', 'V2169', 'V2169', 'V1913A', 'vivo 1808i', 'vivo 1803', 'vivo 1803', 'vivo 1812', 'vivo Y81S', 'V1732A', 'V1732T', 'vivo Y83A', 'vivo 1802', 'vivo Y83A', 'vivo Y83A', 'vivo 1726', 'Vivo Y83I', 'vivo Y85A', 'vivo Y85', 'Vivo Y85i', 'Vivo Y86', 'V1730EA', 'vivo v1730ea', 'vivo 1908', 'vivo 1823', 'vivo 1908_19', 'vivo 1817', 'vivo 1811', 'vivo Y913', 'vivo Y913', 'vivo Y91C', 'vivo 1820', 'vivo 1816', 'vivo Y923', 'vivo Y923', 'vivo Y927', 'vivo Y927', 'vivo Y928', 'vivo Y928', 'vivo Y928', 'vivo 1814', 'V1818A', 'V1818A', 'vivo 1814', 'vivo Y937', 'vivo Y937', 'vivo Y937', 'V1818CT', 'V1818CA', 'vivo 1807', 'vivo Y95', 'V1813A', 'V1813T', 'V1813A', 'vivo Y97', 'V1945A', 'V1801A0', 'vivo Z1', 'vivo 1918', 'vivo 1951', 'vivo 1951', 'VIVO Z1Pro', 'vivo 1918', 'vivo 1918 Flow', 'Vivo Z10', 'vivo Z1i', 'V1730DA', 'V1730DT', 'vivo Z1i', 'vivo_1951', 'vivo 1917', 'V1813BA', 'V1813BT', 'V1813BT', 'Vivo Z34', 'vivo Z3x', 'V1730GA', 'vivo Z3x', 'vivo Z3x', 'V1921A', 'V1911A', 'V1911A', 'V1911A', 'V1990A', 'V1990A', 'V1963A', 'V1963A']
        self.infinix = [""Infinix X652B"", ""Infinix X680"", ""Infinix X690"", ""Infinix X625B"", ""Infinix X655"", ""Infinix X680B"", ""Infinix X652B"", ""Infinix X680"", ""Infinix X690"", ""Infinix X625B"", ""Infinix X655"", ""Infinix X680B"", ""Infinix X652B"", ""Infinix X680"", ""Infinix X690"", ""Infinix X625B"", ""Infinix X655"", ""Infinix X680B"", ""Infinix X652B"", ""Infinix X680"", ""Infinix X690"", ""Infinix X625B"", ""Infinix X655"", ""Infinix X680B"", ""Infinix X652B"", ""Infinix X680"", ""Infinix X690"", ""Infinix X625B"", ""Infinix X655"", ""Infinix X680B""]
        self.opp = random.choice([""OP4F97"", ""OP4BA5L1"", ""OP664D1"", ""OP5F11L1"", ""OP2A92"", ""OP8F17"", ""OP8F31"", ""OP4C9E1"", ""OP5B31"", ""OP4BA6L1"", ""OP2B87"", ""OP6F21"", ""OP6C8E1"", ""OP8F11"", ""OPPOA16"", ""OPPOA15"", ""OPPOA11"", ""OPPOA73"", ""OPPOA37"", ""OPPOA53"", ""OPPOA33"", ""OPPOA93"", ""OPPOA35"", ""OPPOA83"", ""OPPOA57"", ""OPPOA71"", ""OPPOA39"", ""OPPOA3"", ""OPPOA51"", ""OPPOA27"", ""OPPOA79""])
        self.trek = random.choice([""mt6769"", ""mt6768"", ""mt6767"", ""mt6765"", ""mt6763"", ""mt6757"", ""mt6755"", ""mt6753"", ""mt6739"", ""mt6737"", ""mt6735"", ""mt6595"", ""mt6582"", ""mt6572"", ""mt6571"", ""mt6570"", ""mt8563"", ""mt8167"", ""mt8163"", ""mt8135"", ""mt8127"", ""mt8125"", ""mt7623"", ""mt6797"", ""mt6592"", ""mt6590"", ""mt6580"", ""mt6573"", ""mt6575"", ""mt6260"", ""mt6236""])
        self.igversi = (""100.0.0.17.129,100.0.0.17.129,100.0.0.17.129,100.0.0.17.129,100.0.0.17.129,100.0.0.17.129,79.0.0.21.101,78.0.0.11.104,77.0.0.20.113,76.0.0.15.395,75.0.0.23.99,74.0.0.21.99,73.0.0.22.185,72.0.0.21.98,71.0.0.18.102,70.0.0.22.98,69.0.0.30.95,68.0.0.11.99,67.0.0.25.100,66.0.0.11.101,65.0.0.12.86,64.0.0.14.96,63.0.0.17.94,62.0.0.19.93,61.0.0.19.86,60.1.0.17.79,59.0.0.23.76,58.0.0.12.73,57.0.0.9.80,56.0.0.13.78,55.0.0.12.79,54.0.0.14.82,53.0.0.13.84,52.0.0.8.83,51.0.0.20.85,50.1.0.43.119,271.1.0.21.84,131.0.0.23.11,130.0.0.31.12,128.0.0.26.12,126.0.0.25.12,125.0.0.20.12,124.0.0.17.47,123.0.0.21.11,122.0.0.29.23,120.0.0.29.11,119.0.0.33.14,118.0.0.28.12,117.0.0.28.12,115.0.0.26.11,114.0.0.38.12,113.0.0.39.12,112.0.0.29.12,111.1.0.25.15,110.0.0.16.11,109.0.0.18.12,108.0.0.23.11,107.0.0.27.12,106.0.0.24.11,105.0.0.18.11,104.0.0.21.11,103.1.0.15.11,102.0.0.20.11,101.0.0.15.12,100.0.0.17.12,99.0.0.32.182,98.0.0.15.119,97.0.0.32.119"").split(',')
        self.dix = random.choice(self.igversi)
        self.kode = random.choice(['104766893','104766900','102221278','104766888','105842053','93117670','94080607','96794592','102221279','100986894','ru_RU','94080606','103516660','98288242','103516666','103516653','uk_UA','96794590','100986893','102221277','95414344','99640920','99640911','96794591','ru_UA','99640905','100986890','107092313','99640900','93117667','100521966','90841939','98288239','89867440','105842051','de_DE','96794584','105842050','en_US','pt_PT','109556223','107092318','en_GB','108357722','112021130','107092322','119104798','108357720','119104802','112021131','100986892','113249569','107104231','fr_FR','pt_BR','109556226','116756948','113249553','113249561','110937441','118342010','120662545','117539703','119875222','110937448','121451799','115994877','108357718','120662547','107608058','122206624','95414346','107092308','112021128','90841948','119875229','117539698','120662550','en_NZ','123103748','91882538','121451810','91882537','118342006','113948109','122338251','110937453','es_US','118342005','121451793','109556219','119875225','en_CA','109556220','117539695','115211358','91882539','119104795','89867442','94080603','164094539','175574628','185203690','188791648','188791674','187682694','188791643','177770724','192992577','180322810','195435560','196643820','196643821','188791637','192992576','196643799','196643801','196643803','195435546','194383411','197825254','197825260','197825079','171727793','197825112','197825012','197825234','179155086','192992563','197825268','166149669','192992565','198036424','197825223','183982969','199325909','199325886','199325890','199325911','197825118','127049003','197825169','197825216','197825127','200395960','179155096','199325907','200396014','188791669','197825133','170693926','200396005','171727780','201577064','201576758','201577192','201775949','201576944','201775970','143631574','126223520','201775951','167338518','144612598','170693940','201775813','200395971','201775744','201775946','202766609','145652094','202766591','202766602','203083142','179155088','202766608','199325884','180322802','202766603','195435547','165030894','201576967','201775904','194383424','197347903','202766610','185203693','201576898','204019468','187682682','204019456','201775901','204019471','204019454','204019458','202766601','204019452','173238721','204019466','148324036','202766581','158441904','201576903','205280538','205280529','201576813','173238729','141753096','205280531','163022072','201576887','163022088','141753091','148324051','205280528','154400383','205280537','201576818','157405371','205858383','201576811','165031093','187682684','145652090','206670917','185203686','192992561','183982986','206670927','150338061','183982962','127049016','175574603','155374054','205858247','135374896','206670920','169474958','206670926','160497905','161478672','192992578','206670929','131223243','206670916','142841919','187682681','171727795','151414277','206670922','160497915','207505137','165030898','208061741','208061688','208180365','208061674','197825052','147375133','208061744','196643798','208061725','122338247','157536430','208061728','209143963','208727155','209143726','205280539','209143903','209143970','181496409','208061739','209143957','210180522','210180512','209143881','209143712','180322805','210180521','195435561','210370119','210180523','210180493','175574596','210180510','210180480','210180513','210180517','176649504','177770663','210180479','211114117','210908379','206670921','211114134','183982943','211399345','211399342','211399332','201775962','211574187','211574249','210180519','167338559','185203649','124583960','211399337','211399335','197825163','166149717','211399336','212063371','211399329','209143954','210180482','168361634','212214017','209143867','211399341','211399340','212214027','195435510','122338243','139237670','152367502','212676872','212676898','212676875','212676895','212676901','209823384','212676869','196643822','212676878','213367980','213368005','212676886','213558743','209143913','212214039','158441917','174081672','213558750','201775966','188791681','185203705','143631575','161478664','214245350','161478663','212676881','213558770','214245346','138226752','214245221','214245182','214245206','214245218','214245354','214245295','214245199','214245304','214245280','214446313','214245187','214245288','214139002','202766605','214245319','214646783','158441914','215246048','195435544','208061677','215464400','128676146','215464389','215464385','215464390','215464398','182747397','215464393','216233197','201775791','216817344','215464395','216817286','185203642','164094529','216817305','215464401','162439029','215464382','216817280','216817331','214330969','216817299','216817357','217948981','217948980','217948956','217948959','217948968','216817296','217948952','217948982','216817269','219308759','219308726','182747387','219308721','219308754','219308763','176649435','183982982','219909486','127049038','219308730','221134012','221134032','221134009','221134037','194383426','221134029','221134005','221134018','145652093','225283632','165031108','225283625','224652582','139906580','225283628','225283624','226142579','225283634','225283631','226493211','225283623','185203672','156514151','218793478','225283621','227299063','225283627','227299064','227299021','227299027','227544546','227299041','227299060','227299012','228970707','228970705','227299005','228970687','228970683','228970694','228970710','228970689','160497904','195435540','129611419','229783842','230291708','228970681','148324047','230877709','231192211','230877674','230877705','230877678','211399328','209143896','230877713','194383428','230877689','221134002','231457747','208061721','230877671','230877668','232868027','232088496','185203706','232868005','232867964','232868001','232868015','232868031','232867959','232868009','164094526','232867941','234041364','182747399','232868024','232867949','234847239','234847238','234847234','162439040','234847229','234847230','181496427','234847240','232867993','195435558','232867967','232867997','234847227','235871830','221133998','236572344','236572377','153386780','236572337','236572349','236572372','234847226','236572383','237507050','238093993','238093948','238093954','238093999','238093982','239490565','239490555','238093946','238093966','239490563','239490550','239974660','240726416','239490568','240726484','240726452','239490551','239490548','240726426','240726476','240726491','240726471','241043882','241114613','236572331','241267273','240726407','241456456','241267278','241267269','241114619','241456445','241456451','242168941','242168928','242168931','242168939','242168925','240726436','242375239','144722090','242168935','242290370','157405369','242168933','242290355','242703240','242807362','242168923','242168943','242991209','243646252','243646269','242991200','243711120','243646267','243711093','243975802','243646263','243646248','243646255','244167578','128676156','194383413','243975835','244390417','244390338','245196084','245196061','240726392','245196055','243646273','245196082','245196063','245196070','245666450','245466705','245870319','245870301','245870347','245196087','246889064','246889072','246889073','246889074','246889065','247146500','246889063','245870262','247370962','247146481','246889068','246889062','247541884','247541831','247370955','247370942','247720736','247720751','248310216','248310220','248310208','247720744','248399342','248310210','247720747','248310206','248717751','248310212','248310221','248823392','248583561','248310205','248899028','248955251','248955247','249178904','248955244','249507608','249507582','249507588','249507585','248955240','249507607','249507592','249810008','249966137','249507610','249966081','249966100','249507599','249966140','249810004','123790722','250188776','249628096','250188788','250742103','250742113','250742102','250877984','250742105','250742111','251048681','250742107','250742115','251048695','251304696','251304682','251524431','251530710','251304689','251524420','251524409','251524390','250742101','251048673','252055918','252055945','251920416','252055944','252055925','252239038','252055936','252055915','252055948','252390568','252390583','252580134','252740497','252740485','252740490','253120615','253325372','253325384','253325385','253447816','253146263','253120607','253325374','253120598','253325371','253447808','253447809','253325378','253447814','253447807','253447811','253447817','253447813','181496411','253447806','255191971','255013798','255777478','255777471','255777474','255777472','255959637','255777477','255959614','255959635','256099199','256099204','150338064','256099153','256099205','256099156','255983744','256107300','255777470','126223536','256203326','256099190','256099151','256324061','256324047','256203339','256966628','256966589','256966626','256966590','124584015','257456576','256966593','257456590','256966629','256966587','256966592','257456586','257456539','259829115','259829104','259829113','260037038','259829105','259829109','260037030','260149625','259829103','260149621','260465044','259829116','260724710','179155058','261079769','261079761','261079768','261079762','261079771','261276939','157405370','135374885','261079765','261393056','261393062','261079760','181496406','182747360','261504698','261690888','261504706','169474957','262218766','262290715','262290774','262372432','262372425','262372431','262886993','262886995','262372426','262886987','261079764','262886986','262886988','262886990','262372433','262886996','263652962','264009049','264009019','264009030','264009021','264009023','264009052','264009024','261763534','174081651','169474965','232867942','264009013','255959606','264009028','267397344','267397322','267925737','267397343','267925708','267397327','267397321','267925714','267258517','267925705','268773287','267925733','268773233','267925702','268773286','159526770','268773239','268773272','269790795','269285030','269790805','269790803','269790792','268773227','269849047','270426177','270426174','271182277','269790789','271182270','268773290','271182266','271182276','269790798','271182279','271182265','271182267','269790807','271823819','272382110','272382111','272382106','272693584','272382095','272382093','272382098','272382100','272382103','273728833','273371577','273728832','273728798','273907093','273907111','273907108','238093987','273907112','273907103','274774869','274774891','274774908','273907087','274774904','274774875','274774914','275292626','276027938','276028040','276027963','276028037','276028020','276028017','274774862','276028013','249507580','276028029','273907098','277249238','277249248','277249249','276028033','277249250','277249226','275292623','277249214','277249242','277249237','277249240','278625447','278002558','278625420','278625431','278625423','117539687','278625416','278625444','277249213','278625451','279469964','279996068','279996060','279996067','279996058','280194220','279996065','279996063','279996061','279996059','280894196','273728787','271182262','281579032','281579023','276514494','281579021','281579027','281579033','268773274','283072590','281579025','283072571','282619332','283489774','283072587','283072567','281579031','283072580','283072574','284459213','284459224','179155089','256966583','284459214','283072585','284459218','284459223','284459225','285338607','275113919','284459221','284459212','284459215','285855793','285855800','285855803','285855791','285855802','285855804','285855795','286809973','287420974','287421023','287420968','287420979','287421017','287421005','287421019','287421012','277249241','288682406','287421026','288682405','288682397','288682407','261079772','288682398','288682401','288205409','289692198','287420997','289692186'])
        self.dpi_pxl = random.choice(['240dpi; 1760x792', '240dpi; 1920x864', '320dpi; 2400x1080', '400dpi; 3200x1440', '480dpi; 1080x1920', '320dpi; 900x1600', '320dpi; 720x1280', '240dpi; 540x960', '280dpi; 1920x1080', '240dpi; 160x900', '240dpi; 1280x720', '160dpi; 960x540','160dpi; 623x1280'])
        self.dpi = random.choice(['320dpi','640dpi','213dpi','480dpi','420dpi','240dpi','280dpi','160dpi','560dpi','540dpi','272dpi','360dpi','720dpi','270dpi','450dpi','600dpi','279dpi','210dpi','180dpi','510dpi','300dpi','454dpi','314dpi','288dpi','401dpi','153dpi','267dpi','345dpi','493dpi','340dpi','604dpi','465dpi','680dpi','256dpi','290dpi','432dpi','273dpi','120dpi','200dpi','367dpi','419dpi','306dpi','303dpi','411dpi','195dpi','518dpi','230dpi','384dpi','315dpi','293dpi','274dpi','235dpi'])
        self.pxl = random.choice(['720x1280','1440x2560','1440x2768','1280x720','1280x800','1080x1920','540x960','1080x2076','1080x2094','1080x2220','480x800','768x1024','1440x2792','1200x1920','720x1384','1920x1080','720x1369','800x1280','720x1440','1080x2058','600x1024','720x1396','2792x1440','1920x1200','2560x1440','1536x2048','720x1382','1080x2113','1080x2198','1080x2131','720x1423','1080x2069','720x1481','1080x2047','1080x2110','1080x2181','1080x2209','1080x2180','1080x2020','1080x2095','1440x2723','1080x2175','720x1365','1440x2699','1080x2218','2699x1440','1440x2907','1080x2257','720x1370','1080x2042','720x1372','1080x2200','1080x2186','720x1361','1080x2024','1080x2006','720x1402','1440x2831','720x1454','1080x2064','1440x2933','720x1411','720x1450','1440x2730','1080x2046','2094x1080','540x888','1440x2759','1080x2274','1080x2178','1440x2706','720x1356','720x1466','1440x2900','2560x1600','1080x2038','1600x2452','1080x2129','720x1422','720x1381','1080x2183','1080x2285','800x1216','1080x2216','1080x2168','1080x2119','1080x2128','1080x2273','2274x1080','1080x2162','1080x2164','2076x1080','1024x768','1080x2173','1440x2845','1080x2134','720x1379','1440x2838','1080x2139','2131x1080','1440x2744','1080x2192','720x1406','1440x2960','1080x2029','2042x1080','1080x2212','1406x720','1080x2288','2047x1080','1080x2051','720x1398','1280x736','1382x720','720x1353','1080x2050','1080x2028','1080x2256','2711x1440','2175x1080','1080x2281','2560x1492','1440x2923','1200x1845','1080x2189','1080x2002','1440x2711','2110x1080','960x540','1080x2033','2200x1080','720x1452','720x1480','1440x2735','720x1472','1080x2277','1080x2169','2874x1440','1600x2560','1080x2151','2218x1080','1080x2182','720x1468','1440x2898','1080x2011','1080x2201','720x1380','1080x2287','2069x1080','1200x1836','2046x1080','720x1439','2058x1080','2182x1080','720x1399','1080x2282','1440x2721','1080x2324','720x1432','1080x2165','1080x2150','1080x2156','1080x1872','1440x3048','1532x2560','720x1355','720x1390','720x1476','720x1410','1080x2032','720x1437','1440x2682','1440x2921','1080x2270','1080x2160','720x1446','1200x1848','1440x2874','1080x2309','1080x2174','1440x2867','1080x2060','1080x2196','1080x2401','1536x1922','1080x2280','1080x2123','720x1435','1440x2927','1080x2276','720x1448','720x1469','720x1344','1080x2187','540x937','1440x3028','1080x2184','1440x2718','1080x2326','840x1834','1440x2935','1440x2880','1440x2892','2048x2048','1080x2195','1080x2322','720x1419','987x1450','1080x2092','1440x3047','720x1358','1080x2136','720x1357','1080x2093','720x1477','1080x2312','1080x2361','720x1341','720x1507','1080x2172','720x1337','1080x2177','1080x2125','1440x2891','1600x2434','720x1394','1080x2159','720x1387','1080x2166','1080x2154','1080x2147','1440x2747','1080x2105','1440x2911','720x1473','1080x2055','1080x2265','720x1436','1080x2190','1600x2526','720x1373','720x1415','1080x2249','1080x2254','720x1455','1440x3040','1080x2149','720x1385','1440x3036','1080x2111','1440x2904','720x1442','720x1377','1080x2307','1080x2327','1080x2141','1080x2025','720x1430','720x1375','1080x2283','1440x2779','1080x2321','1080x2268','1440x2758','1752x2698','1080x2267','1200x1856','1440x2756','720x1464','1080x2234','1080x2171','1080x2155','720x1463','1080x2122','720x1467','1080x2264','720x1349','1440x2999','720x1458','1080x2015','720x1431','1242x2208','1080x2185','1080x2148','1080x2163','1440x2780','720x1445','1080x2146','1200x1916','720x1502','1200x1928','720x1506','720x1424','720x1465','720x1420','1080x2176','720x1521','1080x2315','1080x2400','720x1471','1080x2157','1600x2458','1080x2067','1080x2191','1080x2271','720x1407','800x1208','1080x2087','1080x2199','578x1028','720x1485','540x879','1080x2179','720x1555','810x1598','720x1378','1200x1897','720x1395','720x1459','900x1600','1080x2275','1440x2733'])
        self.samsung = [""SM-A205F"",""SM-J120H"",""SM-J120F"",""SM-J120M"",""SM-J111M"",""SM-J111F"",""SM-J110H"",""SM-J110G"",""SM-J110F"",""SM-J110M"",""SM-J105H"",""SM-J105Y"",""SM-J105B"",""SM-J106H"",""SM-J106F"",""SM-J106B"",""SM-J106M"",""SM-J200F"",""SM-J200M"",""SM-J200G"",""SM-J200H"",""SM-J200F"",""SM-J200GU"",""SM-J260M"",""SM-J260F"",""SM-J260MU"",""SM-J260F"",""SM-J260G"",""SM-J200BT"",""SM-G532G"",""SM-G532M"",""SM-G532MT""]
        self.cgsm = [""dream2qltesq"", ""beyond2q"", ""broadway"", ""dreamqltevzw"", ""b2q"", ""a7y18lte"", ""a50qlteue"", ""a42xqlte"", ""a7y18lte"", ""a40lte"", ""a6plte"", ""a52xqlteue"", ""a5y20qlteue"", ""a3xelte"", ""a42xqlteue"", ""a3xelte"", ""a41lte"", ""a72xlte"", ""dreamlte"", ""hero2qltevzw"", ""beyond0lte"", ""beyond2"", ""starlte"", ""a5y17lte"", ""a7xelte"", ""a71xqlteue"", ""dream2qlteue"", ""dreamqltespr"", ""a5y17lte"", ""beyond1qlteue"",""herolte"",""zerolte"",""hero2te""]
        self.realme = [""RMX3516"", ""RMX3371"", ""RMX3461"", ""RMX3286"", ""RMX3561"", ""RMX3388"", ""RMX3311"", ""RMX3142"", ""RMX2071"", ""RMX1805"", ""RMX1809"", ""RMX1801"", ""RMX1807"", ""RMX1803"", ""RMX1825"", ""RMX1821"", ""RMX1822"", ""RMX1833"", ""RMX1851"", ""RMX1853"", ""RMX1827"", ""RMX1911"", ""RMX1919"", ""RMX1927"", ""RMX1971"", ""RMX1973"", ""RMX2030"", ""RMX2032"", ""RMX1925"", ""RMX1929"", ""RMX2001"", ""RMX2061"", ""RMX2063"", ""RMX2040"", ""RMX2042"", ""RMX2002"", ""RMX2151"", ""RMX2163"", ""RMX2155"", ""RMX2170"", ""RMX2103"", ""RMX3085"", ""RMX3241"", ""RMX3081"", ""RMX3151"", ""RMX3381"", ""RMX3521"", ""RMX3474"", ""RMX3471"", ""RMX3472"", ""RMX3392"", ""RMX3393"", ""RMX3491"", ""RMX1811"", ""RMX2185"", ""RMX3231"", ""RMX2189"", ""RMX2180"", ""RMX2195"", ""RMX2101"", ""RMX1941"", ""RMX1945"", ""RMX3063"", ""RMX3061"", ""RMX3201"", ""RMX3203"", ""RMX3261"", ""RMX3263"", ""RMX3193"", ""RMX3191"", ""RMX3195"", ""RMX3197"", ""RMX3265"", ""RMX3268"", ""RMX3269"",""RMX2027"", ""RMX2020"", ""RMX2021"", ""RMX3581"", ""RMX3501"", ""RMX3503"", ""RMX3511"", ""RMX3310"", ""RMX3312"", ""RMX3551"", ""RMX3301"", ""RMX3300"", ""RMX2202"", ""RMX3363"", ""RMX3360"", ""RMX3366"", ""RMX3361"", ""RMX3031"", ""RMX3370"", ""RMX3357"", ""RMX3560"", ""RMX3562"", ""RMX3350"", ""RMX2193"", ""RMX2161"", ""RMX2050"", ""RMX2156"", ""RMX3242"", ""RMX3171"", ""RMX3430"", ""RMX3235"", ""RMX3506"", ""RMX2117"", ""RMX2173"", ""RMX3161"", ""RMX2205"", ""RMX3462"", ""RMX3478"", ""RMX3372"", ""RMX3574"", ""RMX1831"", ""RMX3121"", ""RMX3122"", ""RMX3125"", ""RMX3043"", ""RMX3042"", ""RMX3041"", ""RMX3092"", ""RMX3093"", ""RMX3571"", ""RMX3475"", ""RMX2200"", ""RMX2201"", ""RMX2111"", ""RMX2112"", ""RMX1901"", ""RMX1903"", ""RMX1992"", ""RMX1993"", ""RMX1991"", ""RMX1931"", ""RMX2142"", ""RMX2081"", ""RMX2085"", ""RMX2083"", ""RMX2086"", ""RMX2144"", ""RMX2051"", ""RMX2025"", ""RMX2075"", ""RMX2076"", ""RMX2072"", ""RMX2052"", ""RMX2176"", ""RMX2121"", ""RMX3115"", ""RMX1921""]
        self.xiaomi = [""2201116SI"", ""M2012K11AI"", ""22011119TI"", ""21091116UI"", ""M2102K1AC"", ""M2012K11I"", ""22041219I"", ""22041216I"", ""2203121C"", ""2106118C"", ""2201123G"", ""2203129G"", ""2201122G"", ""2201122C"", ""2206122SC"", ""22081212C"", ""2112123AG"", ""2112123AC"", ""2109119BC"", ""M2002J9G"", ""M2007J1SC"", ""M2007J17I"", ""M2102J2SC"", ""M2007J3SY"", ""M2007J17G"", ""M2007J3SG"", ""M2011K2G"", ""M2101K9AG "", ""M2101K9R"", ""2109119DG"", ""M2101K9G"", ""2109119DI"", ""M2012K11G"", ""M2102K1G"", ""21081111RG"", ""2107113SG"", ""21051182G"", ""M2105K81AC"", ""M2105K81C"", ""21061119DG"", ""21121119SG"", ""22011119UY"", ""21061119AG"", ""21061119AL"", ""22041219NY"", ""22041219G"", ""21061119BI"", ""220233L2G"", ""220233L2I"", ""220333QNY"", ""220333QAG"", ""M2004J7AC"", ""M2004J7BC"", ""M2004J19C"", ""M2006C3MII"", ""M2010J19SI"", ""M2006C3LG"", ""M2006C3LVG"", ""M2006C3MG"", ""M2006C3MT"", ""M2006C3MNG"", ""M2006C3LII"", ""M2010J19SL"", ""M2010J19SG"", ""M2010J19SY"", ""M2012K11AC"", ""M2012K10C"", ""M2012K11C"", ""22021211RC""]
        self.dvc = random.choice([""30/11"",""31/12"",""29/10""])
        return(random.choice([
             f'Instagram 118.0.0.28.12 Android ({self.dvc}; 604dpi; 1080x2283; INFINIX MOBILITY LIMITED/Infinix; {str(random.choice(self.infinix))}; qcom; in_ID; 185203672)',
             f'Instagram 118.0.0.28.12 Android ({self.dvc}; 604dpi; 1080x2283; REALME MOBILITY LIMITED/Realme; {str(random.choice(self.realme))}; qcom; in_ID; 185203672)',
             f'Instagram 118.0.0.28.12 Android ({self.dvc}; 604dpi; 1080x2283; XIAOMI MOBILITY LIMITED/Xiaomi; {str(random.choice(self.xiaomi))}; qcom; in_ID; 185203672)',
            f'Instagram 118.0.0.28.12 Android ({self.dvc}; 604dpi; 1080x2283; NEXUS MOBILITY LIMITED/Nexus; {str(random.choice(self.nexus))}; qcom; in_ID; 185203672)',
            f'Instagram 118.0.0.28.12 Android ({self.dvc}; 604dpi; 1080x2283; MICROMAX MOBILITY LIMITED/Micromax; {str(random.choice(self.micromax))}; qcom; in_ID; 185203672)',
            f'Instagram 118.0.0.28.12 Android ({self.dvc}; 604dpi; 1080x2283; ONEPLUS MOBILITY LIMITED/One; {str(random.choice(self.onpls))}; qcom; in_ID; 185203672)',
            f'Instagram 118.0.0.28.12 Android ({self.dvc}; 604dpi; 1080x2283; OPPO MOBILITY LIMITED/Oppo; {str(random.choice(self.oppo))}; {self.opp}; qcom; in_ID; 185203672)',
            f'Instagram 118.0.0.28.12 Android ({self.dvc}; 604dpi; 1080x2283; VIVO MOBILITY LIMITED/Vivo; {str(random.choice(self.vivo))}; qcom; in_ID; 185203672)',
           ])
       )
        
    def useragent_api_threads(self):
        self.nexus = ['Galaxy Nexus', 'Nexus 10', 'Nexus 2', 'Nexus 4', 'Nexus 4', 'Nexus 4', 'Nexus 4', 'Nexus 4', 'Nexus 4', 'Nexus 5', 'phone/Nexus 5', 'Nexus 5X', 'Nexus 6', 'Nexus 7', 'Nexus 9', 'Nexus One', 'Nexus One', 'Nexus One', 'Nexus One', 'Nexus One', 'Nexus One', 'Nexus Player', 'Nexus Player', 'Nexus S', 'Nexus S', 'Nexus S 4G', 'nexus S', 'Nexus S', 'Nexus s', 'Nexus S', 'Nexus S', 'Nexus S', 'Nexus S', 'Nexus S']
        self.micromax = ['Micromax 10', 'Micromax 1J', 'Micromax 86519', 'Micromax A064', 'Micromax_A064', 'Micromax A065', 'Micromax_A065', 'Micromax A066', 'Micromax_A066', 'Micromax A067', 'Micromax_A067', 'MICROMAX_A068', 'MICROMAX A068', 'Micromax A068', 'Micromax A069', 'Micromax_A069', 'Micromax A075', 'Micromax A082', 'Micromax_A082', 'Micromax A089', 'Micromax_A089', 'Micromax A091', 'Micromax A092', 'Micromax_A092', 'Micromax A093', 'Micromax_A093', 'Micromax A095', 'Micromax A096', 'Micromax_A101', 'Micromax A102', 'Micromax_A102', 'Micromax A104', 'Micromax a104', 'Micromax A105', 'Micromax_A105', 'Micromax A106', 'Micromax-A106', 'Micromax A108', 'Micromax_A109', 'Micromax A109', 'Micromax A110', 'Micromax_A110', 'Micromax A110Q', 'Micromax_A110Q', 'Micromax A111', 'Micromax A114', 'Micromax A114R', 'Micromax_A114R', 'Micromax A115', 'Micromax_A115', 'Micromax A116', 'Micromax_A116', 'Micromax A116i', 'Micromax_A116i', 'Micromax A117', 'Micromax_A117', 'Micromax A118R', 'Micromax A119', 'Micromax A120', 'Micromax A121', 'Micromax_A121', 'Micromax A15', 'Micromax A177', 'Micromax A190', 'Micromax_A190', 'Micromax A200', 'Micromax_A200', 'Micromax A21', 'Micromax A210', 'Micromax A24', 'Micromax_A24', 'Micromax A25 Smarty', 'Micromax A250', 'Micromax A255', 'Micromax_A255', 'Micromax A26', 'Micromax_A26', 'Micromax_A27', 'Micromax A27', 'Micromax_A28', 'Micromax A28/GRI40', 'Micromax A28', 'Micromax A290', 'Micromax A30', 'Micromax A300', 'Micromax A310', 'Micromax A311', 'Micromax A315', 'Micromax_A315', 'Micromax_A316', 'Micromax A316', 'Micromax_A34', 'Micromax A34', 'Micromax_A35', 'Micromax A35', 'Micromax A350', 'Micromax_A36', 'Micromax A36', 'Micromax_A37', 'Micromax A37', 'Micromax A37B', 'Micromax_A37B', 'Micromax A40', 'Micromax_A40', 'Micromax A46', 'Micromax_A46', 'Micromax A47', 'MicromaxA47', 'Micromax_A50', 'Micromax A50', 'Micromax A51', 'Micromax A52', 'Micromax A54', 'Micromax A56', 'Micromax_A57', 'Micromax A57', 'Micromax A58', 'Micromax_A58', 'Micromax A59', 'Micromax A60', 'Micromax A61', 'Micromax A62', 'Micromax_A62', 'Micromax A63', 'Micromax_A63', 'Micromax_A65', 'Micromax A65', 'Micromax_A66', 'Micromax A66', 'Micromax A67', 'Micromax A68', 'Micromax A69', 'Micromax_A69', 'Micromax_A70', 'Micromax A700', 'Micromax A71', 'Micromax_A71', 'Micromax A72', 'Micromax_A72', 'Micromax A73', 'Micromax_A74', 'Micromax A74', 'Micromax A75', 'Micromax_A76', 'Micromax A76', 'Micromax A77', 'Micromax A78', 'Micromax A79', 'en_us Micromax A80', 'Micromax A80', 'Micromax A82', 'Micromax_A82', 'Micromax A84', 'Micromax A85', 'Micromax A86', 'Micromax_A86', 'Micromax_A87', 'Micromax A87', 'Micromax A87 . Ninja 4.0', 'Micromax A88', 'Micromax_A88', 'Micromax A89', 'Micromax A90', 'Micromax A90s', 'MIcromax_A90s', 'Micromax A90S', 'Micromax A91', 'Micromax_A91', 'Micromax_A92', 'Micromax A92', 'MicromaxA93', 'Micromax A93', 'Micromax A94', 'Micromax_A94', 'Micromax A96', 'Micromax_A96', 'Micromax A97', 'Micromax_A99', 'Micromax A99', 'Micromax_AD3520', 'Micromax AD3520', 'Micromax AD3550', 'Micromax AD4500', 'Micromax_AD4500', 'Micromax AE90', 'Micromax AO5510', 'Micromax AQ5000', 'Micromax B4A', 'Micromax B5 Pro', 'B5Pro', 'Micromax_Bharat_5_Plus', 'Micromax Q402Plus', 'Micromax Q440', 'Micromax Bharat 5', 'Micromax Q4204', 'Micromax Bharat 5 Plus', 'Micromax Bharat 5 Pro', 'Micromax Bolt 3425', 'Micromax Bolt 2', 'Micromax Q402+', 'Micromax Q306', 'Micromax Q3001', 'Micromax Q301', 'Micromax Q303', 'Micromax Q324', 'Micromax Q326', 'Q327', 'Micromax Q327', 'Micromax Q3301', 'Micromax Q333', 'Micromax_Q333', 'Micromax Q338', 'Micromax Q346', 'Micromax Q354', 'Micromax Q357', 'Micromax Q383', 'Micromax_S302', 'Micromax S302', 'Micromax Q424', 'Micromax Q352', 'Micromax Q4101', 'Micromax C2A', 'Micromax C9', 'Micromax C1', 'Micromax C1A', 'Micromax C2APLS', 'Micromax Q4310', 'Micromax E4815', 'arm_64 Micromax E481', 'Micromax E481', 'Micromax E4816', 'Micromax Q462', 'Micromax Q463', 'Micromax E485', 'Micromax E484', 'Micromax AQ4501', 'Micromax AQ4502', 'A240', 'Micromax A240', 'Micromax Q391', 'Micromax E453', 'Micromax A107', 'Micromax HS2', 'Micromax HS1', 'Micromax_HS3', 'en Micromax_HS3', 'AQ5001', 'Micromax AQ5001', 'AQ5001 Canvas Power', 'Micromax Q392', 'Micromax Q465', 'Micromax Q461', 'Micromax Q350R', 'Micromax Q421', 'Micromax Q417', 'Micromax Q426', 'Micromax Q4260', 'Micromax E311', 'Micromax E352', 'Micromax E455', 'Micromax Q415', 'Micromax Q355', 'Micromax Q469', 'Micromax E451', 'Micromax E451', 'Micromax Q340', 'Micromax Q349', 'Micromax Q345', 'Micromax Q450', 'Micromax Q480', 'arm_64 Micromax Q480', 'Micromax Q380', 'Micromax Q3502', 'Micromax Q351', 'Micromax Q385', 'P70221', 'Micromax P681', 'MicromaxP802', 'Micromax Q427', 'Micromax_Q427', 'Micromax Q413', 'Micromax E313', 'Micromax D2', 'Micromax D200', 'Micromax_D200', 'Micromax D303', 'Micromax D304', 'Micromax_D304', 'Micromax D305', 'Micromax D306', 'Micromax D320', 'Micromax D321', 'Micromax D333', 'Micromax D340', 'Micromax D7517', 'Micromax DM5003', 'Micromax E353', 'Micromax E457', 'Micromax E458', 'Micromax E460', 'Micromax E471', 'Micromax E4817', 'Micromax E482', 'Micromax E483', 'Micromax E5018M', 'Micromax EG111', 'Micromax EG116', 'micromax F', 'micromax F189', 'Micromax F601', 'MicromaxF666', 'Micromax IN', 'Micromax E7533', 'Micromax E6523', 'IN_2b', 'IN_Note1', 'MICROMAX IN1', 'N8216', 'N8301', 'ione note', 'MICROMAX ione note', 'Micromax N4120', 'Micromax N8202', 'Micromax Ninja', 'Micromax Nitro', 'Micromax Note 1+', 'Micromax Note 5', 'Micromax Note3', 'Micromax NX', 'Micromax P001', 'Micromax P250(Funbook)', 'Micromax P255', 'Micromax P256', 'xx Micromax P275', 'Micromax_P275', 'Micromax P275', 'Micromax P280', 'Micromax P290', 'Micromax P310', 'Micromax P350', 'xx Micromax P350', 'Micromax P360', 'Micromax P362', 'Micromax P365', 'Micromax P410', 'Micromax P410i', 'Micromax_P410i', 'Micromax P420', 'Micromax P469', 'Micromax P470', 'MicromaxP480', 'Micromax P500(Funbook)', 'Micromax P560', 'Micromax P580', 'Micromax P580i', 'Micromax P600', 'Micromax P650', 'Micromax P650E', 'Micromax P660', 'Micromax P660', 'Micromax_P666', 'Micromax P666', 'MicromaxP680', 'Micromax P690', 'Micromax P701', 'MicromaxP702', 'Micromax P810', 'en Micromax Q300', 'Micromax_Q300', 'Micromax Q323', 'Micromax_Q323', 'Micromax Q325', 'Micromax_Q325', 'Micromax Q331', 'Micromax_Q331', 'Micromax Q332', 'Micromax_Q332', 'Micromax Q334', 'Micromax Q335', 'Micromax_Q335', 'Micromax Q336', 'Micromax_Q336', 'Micromax Q341', 'Micromax Q343', 'Micromax Q348', 'Micromax_Q353', 'en Micromax_Q353', 'Micromax_Q353P', 'Micromax Q3551', 'Micromax Q3555', 'Micromax Q361', 'Micromax Q370', 'Micromax_Q370', 'Micromax Q371', 'Micromax_Q371', 'Micromax Q375', 'Micromax_Q375', 'Micromax Q379', 'Micromax Q381', 'Micromax Q382', 'Micromax Q386', 'Micromax Q394', 'Micromax_Q394', 'Micromax Q395', 'Micromax Q397', 'Micromax Q398', 'arm Micromax Q398', 'Micromax Q400', 'Micromax_Q400', 'Micromax Q4002', 'en Micromax Q4002', 'Micromax Q401', 'Micromax Q402', 'Micromax Q402 Ultra', 'Micromax Q404', 'Micromax Q411', 'Micromax_Q411', 'Micromax Q412', 'Micromax Q414', 'Micromax Q416', 'Micromax Q419', 'Micromax Q4201', 'Micromax Q422', 'Micromax Q4220', 'Micromax Q423', 'Micromax Q428', 'Micromax_Q428', 'Micromax Q429', '720X1280 Micromax Q4309', 'Micromax Q4312', 'en_US Micromax Q437', 'Micromax Q440Plus', 'Micromax Q454', 'Micromax Q470', 'Micromax Q479', 'Micromax Q491', 'Micromax_Q491', 'Micromax Q502+', 'Micromax Q666', 'Micromax Q67', 'micromax Q68', 'micromax Q78', 'Micromax S300', 'Micromax_S300', 'Micromax S301', 'Micromax_S301', 'Micromax Q4311', 'Micromax Q4601', 'Micromax Q409A', 'Micromax Q409', 'Micromax Q452', 'Micromax Unite 3', 'Micromax Unite 2', 'Micromax Unite 2 A106', 'Micromax Q372', 'Micromax V89', 'Micromax Q4001', 'Micromax Q4202', 'Micromax Q4251', 'arm Micromax Q4251', 'Micromax W5509', 'Micromax X5098', 'Micromax-Xzoom A52', 'YU5530', 'YU5040', 'Micromax YU5900', 'YU5012', 'Micromax Z59']
        self.onpls = ['NE2213', 'NE2217', 'NE2215', 'NE2210', 'NE2210', 'CPH2423', 'CPH2411', 'CPH2417', 'CPH2413', 'CPH2415', 'CPH2449', 'CPH2487', 'ONE A2003', 'ONE A2003', 'ONE A2001', 'ONE A2005', 'ONEPLUS A3003', 'ONEPLUS A3000', 'ONEPLUS A3010', 'ONEPLUS A5000', 'ONEPLUS A5000', 'ONEPLUS A5010', 'ONEPLUS A5010', 'ONEPLUS A5010', 'ONEPLUS A5010', 'ONEPLUS A5010', 'ONEPLUS A6003', 'ONEPLUS A6000', 'ONEPLUS A6010', 'ONEPLUS A6013', 'ONEPLUS A6010', 'GM1900', 'GM1901', 'GM1903', 'GM1917', 'GM1913', 'GM1911', 'GM1910', 'GM1915', 'GM1910', 'HD1901', 'HD1903', 'HD1900 Flow', 'HD1905', 'HD1900', 'HD1907', 'HD1911', 'HD1913', 'HD1910', 'GM1925', 'HD1925', 'GM1920', 'IN2013', 'IN2015', 'IN2010', 'IN2010', 'IN2017', 'IN2019', 'IN2023', 'IN2025', 'IN2020', 'OnePlus8Pro', 'KB2005', 'KB2001', 'KB2007', 'KB2003', 'KB2000', 'OnePlus 8T 5G', 'LE2115', 'LE2113', 'LE2111', 'LE2110', 'LE2120', 'LE2125', 'LE2123', 'LE2121', 'LE2127', 'OnePlus9Pro', 'LE2101', 'LE2100', 'MT2111', 'MT2110', 'ONEPLUS A19677', 'ONEPLUS A2345', 'Oneplus A31', 'Oneplus A3331', 'ONEPLUS A35904', 'ONEPLUS A37000', 'ONEPLUS A3EVB', 'ONEPLUS A62322', 'ONEPLUS A64794', 'ONEPLUS A65369', 'ONEPLUS A68333', 'ONEPLUS A70458', 'ONEPLUS A70791', 'ONEPLUS A78637', 'ONEPLUS A80828', 'ONEPLUS A83306', 'ONEPLUS A87046', 'ONEPLUS A90641', 'Oneplus A99831', 'PGKM10', 'PGKM10', 'PHK110', 'PHK110', 'PGP110', 'PGP110', 'PGZ110', 'ONEPLUS KB2023', 'OnePlus Nord', 'Oneplus Nord 2', 'DN2103', 'DN2101', 'CPH2399', 'CPH2401', 'AC2001', 'AC2003', 'IV2201', 'CPH2409', 'CPH2381', 'CPH2465', 'EB2103', 'EB2101', 'EB2101', 'BE2025', 'BE2026', 'BE2029', 'Nord N10 5G', 'BE2028', 'BE2013', 'BE2011', 'BE2012', 'CPH2459', 'GN2200', 'CPH2469', 'DE2118', 'DE2117', 'A0001', 'ONE E1001', 'ONE E1003', 'ONE E1001', 'ONE E1005']
        self.oppo = [""CPH1869"", ""CPH1929"",""CPH2107"", ""CPH2238"", ""CPH2389"",""CPH2401"", ""CPH2407"", ""CPH2413"", ""CPH2415"", ""CPH2417"", ""CPH2419"", ""CPH2455"", ""CPH2459"", ""CPH2461"", ""CPH2471"", ""CPH2473"", ""CPH2477"", ""CPH8893"", ""CPH2321"", ""CPH2341"", ""CPH2373"", ""CPH2083"", ""CPH2071"", ""CPH2077"", ""CPH2185"", ""CPH2179"", ""CPH2269"", ""CPH2421"", ""CPH2349"", ""CPH2271"", ""CPH1923"", ""CPH1925"", ""CPH1837"", ""CPH2015"", ""CPH2073"", ""CPH2081"", ""CPH2029"", ""CPH2031"", ""CPH2137"", ""CPH1605"", ""CPH1803"", ""CPH1853"", ""CPH1805"", ""CPH1809"", ""CPH1851"", ""CPH1931"", ""CPH1959"", ""CPH1933"", ""CPH1935"", ""CPH1943"", ""CPH2061"", ""CPH2069"", ""CPH2127"", ""CPH2131"", ""CPH2139"", ""CPH2135"", ""CPH2239"", ""CPH2195"", ""CPH2273"", ""CPH2325"", ""CPH2309"", ""CPH1701"", ""CPH2387"", ""CPH1909"", ""CPH1920"", ""CPH1912"", ""CPH1901"", ""CPH1903"", ""CPH1905"", ""CPH1717"", ""CPH1801"", ""CPH2067"", ""CPH2099"", ""CPH2161"", ""CPH2219"", ""CPH2197"", ""CPH2263"", ""CPH2375"", ""CPH2339"", ""CPH1715"", ""CPH2385"", ""CPH1729"", ""CPH1827"", ""CPH1938"", ""CPH1937"", ""CPH1939"", ""CPH1941"", ""CPH2001"", ""CPH2021"", ""CPH2059"", ""CPH2121"", ""CPH2123"", ""CPH2203"", ""CPH2333"", ""CPH2365"", ""CPH1913"", ""CPH1911"", ""CPH1915"", ""CPH1969"", ""CPH2209"", ""CPH1987"", ""CPH2095"", ""CPH2119"", ""CPH2285"", ""CPH2213"", ""CPH2223"", ""CPH2363"", ""CPH1609"", ""CPH1613"", ""CPH1723"", ""CPH1727"", ""CPH1725"", ""CPH1819"", ""CPH1821"", ""CPH1825"", ""CPH1881"", ""CPH1823"", ""CPH1871"", ""CPH1875"", ""CPH2023"", ""CPH2005"", ""CPH2025"", ""CPH2207"", ""CPH2173"", ""CPH2307"", ""CPH2305"", ""CPH2337"", ""CPH1955"", ""CPH1707"", ""CPH1719"", ""CPH1721"", ""CPH1835"", ""CPH1831"", ""CPH1833"", ""CPH1879"", ""CPH1893"", ""CPH1877"", ""CPH1607"", ""CPH1611"", ""CPH1917"", ""CPH1919"", ""CPH1907"", ""CPH1989"", ""CPH1945"", ""CPH1951"", ""CPH2043"", ""CPH2035"", ""CPH2037"", ""CPH2036"", ""CPH2009"", ""CPH2013"", ""CPH2113"", ""CPH2091"", ""CPH2125"", ""CPH2109"", ""CPH2089"", ""CPH2065"", ""CPH2159"", ""CPH2145"", ""CPH2205"", ""CPH2201"", ""CPH2199"", ""CPH2217"", ""CPH1921"", ""CPH2211"", ""CPH2235"", ""CPH2251"", ""CPH2249"", ""CPH2247"", ""CPH2237"", ""CPH2371"", ""CPH2293"", ""CPH2353"", ""CPH2343"", ""CPH2359"", ""CPH2357"", ""CPH2457"", ""CPH1983"", ""CPH1979""]
        self.vivo = ['vivo 1002T', 'Vivo 1605', 'vivo 1730', 'vivo 1809', 'vivo_1820', 'vivo 1835', 'vivo 1914', 'vivo 2010', 'vivo 2019', 'vivo 2019', 'vivo 2019', 'vivo 2023', 'vivo 2027', 'vivo 3969', 'VIVO 5', 'Vivo 6', 'Vivo 7 Pro', 'Vivo 8', 'Vivo 93K Prime', 'vivo A5 ', 'vivo a54', 'Vivo A54', 'vivo a57', 'Vivo A87', 'VIVO A94', 'VIVO AIR', 'VIVO C8818', 'vivo E1', 'vivo E3', 'vivo E3', 'vivo E5', 'Vivo EGO', 'V1962BA', 'vivo h5', 'V1824A', 'V1824A', 'V1824BA', 'V2217A', 'V2217A', 'V2218A', 'V2218A', 'V2218A', 'V2243A', 'V1955A', 'I1927', 'I1928', 'V2024A', 'V2025A', 'V2025A', 'V2049A', 'V2049A', 'I2009', 'I2012', 'I2012', 'V2136A', 'V2136A', 'V2141A', 'V2171A', 'I2017', 'V2172A', 'V2172A', 'I2022', 'I2019', 'I2019', 'I2201', 'V1914A', 'V1914A', 'V1981A', 'V2055A', 'V2118A', 'V2157A', 'V2157A', 'V2154A', 'V2196A', 'V2196A', 'V2199A', 'V2231A', 'V2238A', 'V1936AL', 'V1936A', 'V1922A', 'V1922A', 'V1922A ', 'V1916A', 'V2023A', 'V2023A', 'VIVO V2023A', 'V2065A', 'V2061A', 'V2061A', 'V2143A', 'V2106A', 'V2165A', 'V2165A', 'V2180GA', 'V1986A', 'V2012A', 'V2012A', 'V2073A', 'V2073A', 'I2011', 'V2148A', 'I2018', 'V1919A', 'V2131A', 'V2220A', 'I2202', 'I2206', 'I2203', 'I2202', 'I2127', 'I2202', 'I2208', 'I2208', 'I2126', 'I2126', 'I2126', 'V2164KA', 'V2164KA', 'VIVO IV', 'VIVO IV', 'VIVO IV', 'VIVO IV', 'Vivo J5', 'vivo 1805', 'vivo 1805', 'vivo NEX', 'V1923A', 'vivo 1912', 'V1923A', 'vivo 1912', 'vivo 1913', 'V1924A', 'V1924A', 'vivo 1913', 'V1950A', 'V1950A', 'vivo NEX A', 'vivo NEX A', 'vivo 1813', 'V1821A', 'V1821A', 'vivo NEX S', 'vivo NEX S', 'Vivo ONE', 'Vivo ONE', 'PA2170', 'vivo PD1628F_EX', 'vivo PD1709', 'vivo PD1709F_EX', 'vivo PD1709F_EX', 'vivo PD1728', 'vivo PD1728', 'vivo PD1832F_EX', 'vivo PD2046F_EX', 'vivo PD2050F_EX', 'vivo PD2055F_EX', 'vivo PD2059F_EX', 'Vivo S', 'V1831A', 'V1831A', 'VIVO S1', 'Vivo S1 Prime', 'V1832A', 'V1832T', 'V2121A', 'V2121A', 'V2130A', 'V2130A', 'Vivo S11', 'Vivo S11 ', 'vivo S11t', 'vivo S11t', 'vivo S11t', 'vivo S11t', 'vivo S12', 'V2162A', 'Vivo S13', 'V2203A', 'V2207A', 'V2190A', 'V2244A', 'vivo S1Pro', 'Vivo S20 ', 'Vivo S21 ', 'Vivo S31', 'Vivo S4', 'Vivo S40', 'Vivo S41 /MMB439M', 'V1932A', 'vivo S6', 'V1962A', 'vivo S6T', 'V2020CA', 'V2020A', 'Vivo S76', 'V2031EA', 'vivo S7i(t)', 'vivo S7i(t)', 'vivo S7i(t)', 'V2080A', 'vivo S7t', 'vivo_S7t', 'vivo S7t', 'S7t 5G', 'vivo S7w', 'vivo S8', 'vivo S9', 'vivo S9', 'vivo S9', 'V2072A', 'V2048A', 'vivo S9t', 'V2168', 'V2168', 'V2153', 'V2153', 'V2150', 'V2151', 'V2151', 'V2151', 'V2143', 'vivo TD1602_EX', 'vivo U1', 'vivo 1916', 'vivo 1916', 'vivo 1921', 'V1941A', 'V1941A', 'V1928A', 'vivo V1', 'vivo V1', 'vivo V10', 'Vivo V10', 'VIVO V11', 'Vivo V11', 'vivo 1804', 'vivo 1804', 'vivo 1806', 'vivo 1806', 'vivo v11pro', 'vivo 1819', 'vivo 1818', 'vivo 1818', 'vivo 1920', 'vivo 1919', 'vivo 1907', 'vivo 1907', 'vivo 1907_19', 'vivo 1910', 'vivo 1909', 'vivo 1910', 'vivo 1933', 'vivo 1933', 'vivo V1907', 'vivo v19neo', 'vivo V1Max', 'vivo V1Max', 'vivo V2', 'V2040', 'vivo 2018', 'vivo 2018', 'V2022', 'Vivo V20A', 'Vivo V20G', 'V2066', 'V2108', 'V2050', 'V2050', 'V2050', 'V2061', 'V2055', 'Vivo V21S', 'V2130', 'V2132A', 'V2116', 'V2115', 'V2116', 'V2116', 'V2126', 'V2126', 'V2228', 'V2228', 'V2158', 'V2158', 'V2202', 'V2202', 'V2201', 'V2246', 'V2230', 'V2230', 'V2237', 'vivo V3', 'vivo V3', 'vivo V3Max A', 'vivo V3Max L', 'vivo v30', 'vivo v31', 'vivo V3L', 'vivo V3L', 'vivo V3L', 'vivo V3L', 'vivo V3M A', 'vivo V3M A', 'vivo V3MA', 'vivo_V3Max', 'vivo v45', 'vivo 1601', 'vivo V5', 'vivo 1609', 'vivo 1611', 'Vivo V51', 'Vivo V54', 'vivo 1612', 'vivo 1713', 'vivo V5S A', 'vivo 1718', 'vivo 1716', 'vivo Y79A', 'vivo Y79A', 'V2166BA', 'Vivo V8', 'vivo 1723', 'vivo V9 mini', 'vivo 1851', 'VIVO V9Pro', 'vivo 1851', 'vivo 1727', 'Vivo X', 'V2178A', 'V2229A', 'V2170A', 'V2170A', 'vivo Xplay3S', 'vivo Xplay3S', 'vivo Xplay3S', 'vivo Xplay5A', 'vivo Xplay5A', 'vivo Xplay5A', 'vivo Xplay5S', 'vivo Xplay5S', 'vivo Xplay6', 'vivo Xplay6L', 'vivo Xplay6', 'vivo Xplay6', 'vivo X710L', 'vivo X710L', 'vivo X710L', 'vivo X710L', 'vivo X1', 'vivo X1', 'vivo X1', 'vivo X1', 'Vivo X11', 'vivo X1S', 'vivo X1S', 'vivo X1S', 'vivo X1St', 'vivo X1St', 'vivo X1St', 'vivo X1St', 'vivo X1St', 'vivo X1W', 'vivo X1w', 'VIVO X2', 'VIVO X2', 'VIVO_X2', 'vivo X20', 'vivo X20A', 'vivo X20Plus A', 'vivo 1720', 'vivo X20Plus UD', 'vivo X20Plus UD', 'vivo X21', 'vivo X21A', 'vivo X21UD A', 'vivo X21i', 'vivo X21i A', 'vivo X21i', 'vivo X21i A ', 'V1814A', 'V1814T', 'V1814T', 'V1814A', 'V1809A', 'V1809A', 'V1816A', 'V1809T', 'V1816T', 'V1829A', 'V1838A', 'V1838T', 'V1829T', 'V1836A', 'V1836A', 'V1836T', 'vivo X27Pro', 'V1938CT', 'V1938T', 'V1938T', 'vivo X3F', 'vivo X3F', 'vivo X3F', 'vivo X3L', 'vivo X3L', 'vivo X3S', 'vivo X3S', 'vivo X3S', 'vivo X3S', 'vivo X3S', 'vivo X3S', 'vivo X3S W', 'vivo X3S W', 'vivo X3S W', 'vivo X3S W', 'vivo X3t', 'vivo X3t', 'vivo X3t', 'vivo X3t', 'vivo X3V', 'vivo X3V', 'vivo X3V', 'vivo X3V', 'Vivo X40', 'vivo X5L', 'vivo X5', 'vivo X5L', 'vivo X5Pro D', 'vivo X5Pro L', 'vivo X5Pro V', 'vivo X5Pro D', 'vivo X5Pro D', 'V2001A', 'V2001A', 'vivo 2004', 'vivo 2005', 'vivo 2005', 'V1937', 'vivo 1937', 'V1937', 'V1937', 'vivo 2006', 'vivo 2006', 'V2005A', 'V2011A', 'X50 Pro+', 'V1930', 'V1930', 'vivo X510t', 'vivo X510t', 'vivo X510t', 'vivo X510t', 'vivo X510t', 'vivo X520L', 'vivo X5F', 'vivo X5M', 'vivo X5M', 'vivo X5M', 'vivo X5Max ', 'vivo X5Max L', 'vivo X5Max L', 'vivo X5Max S', 'vivo X5Max V', 'vivo X5S L', 'vivo X5S L', 'vivo X5V', 'vivo X5V', 'vivo X5V', 'vivo X6D', 'vivo X6A', 'vivo X6Plus D', 'vivo X6Plus A', 'vivo X6Plus L', 'vivo X6Plus D', 'vivo X6Plus A', 'vivo X6Plus D', 'vivo X6Plus L', 'V2046A', 'V2059A', 'V2046A', 'V2045', 'V2046', 'V2047A', 'V2056A', 'V2085A', 'vivo X6S A', 'vivo X6S A', 'vivo X6S A', 'vivo X6S A', 'vivo X6SPlus D', 'vivo X6SPlus D', 'vivo X6SPlus D', 'vivo X6SPlus D', 'vivo X6SPlus A', 'vivo X7L', 'vivo X7Plus', 'vivo X7Plus', 'V2133A', 'V2104', 'V2104', 'V2105', 'V2134A', 'V2105', 'V2145A', 'V2114', 'V2145A', 'vivo X710F', 'vivo X710F', 'vivo X710F', 'vivo X710F', 'V2144', 'V2183A', 'V2144', 'V2208', 'V2185A', 'V2145', 'V2185A', 'Vivo X83', 'vivo X9', 'vivo X9L', 'vivo X9', 'vivo X9', 'vivo X9Plus', 'vivo X9Plus L', 'V2241A', 'V2242A', 'V2242A', 'V2227A', 'vivo X9i', 'vivo X9i', 'vivo X9i', 'vivo X9s', 'vivo X9s L', 'vivo X9s Plus', 'vivo X9s Plus', 'vivo X9s Plus L', 'vivo X9s Plus', 'VIVO XL', 'vivo Xplay', 'vivo Xshot', 'vivo Xshot', 'vivo Xshot', 'vivo Xshot', 'V2203', 'V2221', 'Vivo y1', 'Vivo Y1', 'V2168A', 'V2168A', 'vivo 1906', 'V2028', 'vivo Y11t', 'vivo Y11t', 'vivo Y11t', 'vivo 1904', 'V2163A', 'V2102', 'V2102', 'vivo 2007', 'vivo 2007', 'Vivo Y12I Pro', 'V2026', 'V2042', 'V2033', 'V2039', 'V2069', 'V2026_21', 'vivo Y13L', 'vivo Y13', 'vivo Y13L', 'vivo Y13L', 'vivo Y13i', 'vivo_Y13i', 'vivo Y13iL', 'vivo Y13iL', 'vivo Y13T', 'vivo Y13T', 'vivo 1901', 'vivo Y15T', 'vivo Y15T', 'V2134', 'V2147', 'V2147', 'V2212', 'V2120', 'V2204', 'V2214', 'V2204', 'vivo 1902', 'vivo 1902_19', 'VIVO 1902', 'vivo Y17T', 'vivo Y17T', 'vivo_Y17T', 'vivo Y17T', 'vivo Y17W', 'vivo Y17W', 'vivo Y17W', 'vivo Y18L', 'vivo Y18L', 'vivo Y18L', 'vivo 1915', 'vivo Y19t', 'vivo Y19t', 'vivo Y19t', 'vivo Y19t', 'Vivo Y1i', 'vivo 2015', 'vivo 2015', 'V2029', 'V2027', 'V2043_21', 'V2101', 'V2070', 'V2054', 'V2052', 'V2037', 'V2032', 'V2038', 'V2038', 'V2129', 'V2129', 'V2111', 'V2149', 'V2140', 'V2140', 'V2152', 'V2152', 'V2110', 'V2110', 'V2131', 'V2135', 'V2207', 'vivo Y22iL', 'vivo Y22iL', 'V2206', 'V2206', 'vivo Y23L', 'vivo Y23L', 'vivo y23l', 'vivo Y23L', 'vivo Y23L', 'vivo Y23L', 'vivo 1613', 'vivo Y27', 'vivo Y27L', 'vivo Y27', 'vivo Y28', 'vivo Y28', 'vivo Y28L', 'vivo Y28L', 'vivo Y29L', 'vivo Y29L', 'vivo Y29L', 'V1901A', 'V1901A', 'V1901A', 'V1901T', 'V1930A', 'vivo 1938', 'V2034A', 'V2036A', 'V2099A', 'V2099A', 'V2160', 'V2160', 'V2160', 'V2066BA', 'V2066A', 'Y30g', 'Vivo Y30S', 'vivo Y31L', 'V2068', 'V2054A', 'V2068A', 'V2068', 'V2158A', 'Vivo Y32', 'V2180A', 'V2057', 'V2109', 'V2166A', 'V2166A', 'V2146', 'V2205', 'V2205', 'vivo Y37A', 'vivo Y37', 'V2044', 'vivo Y3t', 'vivo Y3t', 'vivo Y3t', 'vivo y41', 'vivo Y5 ', 'Vivo Y5', 'vivo 1935', 'VIVO Y50(2021)', 'V2023EA', 'Y50t', 'V2035', 'vivo Y51L', 'vivo Y51A', 'V2030', 'vivo 1707', 'V2031_21', 'vivo Y51t L', 'vivo Y51t L', 'vivo Y51t L', 'V2053', 'V2057A', 'vivo Y53', 'vivo 1606A', 'vivo Y53n', 'V2058', 'V2123A', 'V2069A', 'V2045A', 'V2045A', 'vivo Y55A', 'V2127', 'V2127', 'vivo 1603', 'vivo Y55n', 'vivo 1610', 'V2164A', 'V2164A', 'V1934A', 'V2006', 'vivo Y613', 'vivo Y613', 'vivo Y613F', 'vivo Y622', 'vivo Y622', 'vivo Y622', 'vivo Y622', 'vivo Y622', 'vivo Y623', 'vivo Y623', 'vivo Y627', 'vivo Y627', 'vivo Y627', 'vivo Y627', 'vivo Y628', 'vivo Y628', 'vivo 1719', 'vivo Y66', 'vivo Y66L', 'vivo Y66i A', 'vivo Y67', 'vivo Y67A', 'vivo Y67L', 'vivo Y685', 'vivo 1714', 'vivo Y69A', 'V2002A', 'V2002A', 'vivo Y71A', 'vivo 1724', 'vivo Y71A', 'vivo 1801', 'V2041', 'V2060', 'V2102A', 'V1731CA', 'vivo Y73', 'Vivo Y73 /MMB239M', 'V2059', 'V2031A', 'V2164PA', 'V2117', 'vivo Y75A', 'V2142', 'V2142', 'vivo Y75s', 'vivo Y75s', 'vivo Y75S', 'vivo Y75s', 'V2124', 'V2156A', 'V2219A', 'V2219A', 'V2169', 'V2169', 'V1913A', 'vivo 1808i', 'vivo 1803', 'vivo 1803', 'vivo 1812', 'vivo Y81S', 'V1732A', 'V1732T', 'vivo Y83A', 'vivo 1802', 'vivo Y83A', 'vivo Y83A', 'vivo 1726', 'Vivo Y83I', 'vivo Y85A', 'vivo Y85', 'Vivo Y85i', 'Vivo Y86', 'V1730EA', 'vivo v1730ea', 'vivo 1908', 'vivo 1823', 'vivo 1908_19', 'vivo 1817', 'vivo 1811', 'vivo Y913', 'vivo Y913', 'vivo Y91C', 'vivo 1820', 'vivo 1816', 'vivo Y923', 'vivo Y923', 'vivo Y927', 'vivo Y927', 'vivo Y928', 'vivo Y928', 'vivo Y928', 'vivo 1814', 'V1818A', 'V1818A', 'vivo 1814', 'vivo Y937', 'vivo Y937', 'vivo Y937', 'V1818CT', 'V1818CA', 'vivo 1807', 'vivo Y95', 'V1813A', 'V1813T', 'V1813A', 'vivo Y97', 'V1945A', 'V1801A0', 'vivo Z1', 'vivo 1918', 'vivo 1951', 'vivo 1951', 'VIVO Z1Pro', 'vivo 1918', 'vivo 1918 Flow', 'Vivo Z10', 'vivo Z1i', 'V1730DA', 'V1730DT', 'vivo Z1i', 'vivo_1951', 'vivo 1917', 'V1813BA', 'V1813BT', 'V1813BT', 'Vivo Z34', 'vivo Z3x', 'V1730GA', 'vivo Z3x', 'vivo Z3x', 'V1921A', 'V1911A', 'V1911A', 'V1911A', 'V1990A', 'V1990A', 'V1963A', 'V1963A']
        self.infinix = [""Infinix X652B"", ""Infinix X680"", ""Infinix X690"", ""Infinix X625B"", ""Infinix X655"", ""Infinix X680B"", ""Infinix X652B"", ""Infinix X680"", ""Infinix X690"", ""Infinix X625B"", ""Infinix X655"", ""Infinix X680B"", ""Infinix X652B"", ""Infinix X680"", ""Infinix X690"", ""Infinix X625B"", ""Infinix X655"", ""Infinix X680B"", ""Infinix X652B"", ""Infinix X680"", ""Infinix X690"", ""Infinix X625B"", ""Infinix X655"", ""Infinix X680B"", ""Infinix X652B"", ""Infinix X680"", ""Infinix X690"", ""Infinix X625B"", ""Infinix X655"", ""Infinix X680B""]
        self.opp = random.choice([""OP4F97"", ""OP4BA5L1"", ""OP664D1"", ""OP5F11L1"", ""OP2A92"", ""OP8F17"", ""OP8F31"", ""OP4C9E1"", ""OP5B31"", ""OP4BA6L1"", ""OP2B87"", ""OP6F21"", ""OP6C8E1"", ""OP8F11"", ""OPPOA16"", ""OPPOA15"", ""OPPOA11"", ""OPPOA73"", ""OPPOA37"", ""OPPOA53"", ""OPPOA33"", ""OPPOA93"", ""OPPOA35"", ""OPPOA83"", ""OPPOA57"", ""OPPOA71"", ""OPPOA39"", ""OPPOA3"", ""OPPOA51"", ""OPPOA27"", ""OPPOA79""])
        self.trek = random.choice([""mt6769"", ""mt6768"", ""mt6767"", ""mt6765"", ""mt6763"", ""mt6757"", ""mt6755"", ""mt6753"", ""mt6739"", ""mt6737"", ""mt6735"", ""mt6595"", ""mt6582"", ""mt6572"", ""mt6571"", ""mt6570"", ""mt8563"", ""mt8167"", ""mt8163"", ""mt8135"", ""mt8127"", ""mt8125"", ""mt7623"", ""mt6797"", ""mt6592"", ""mt6590"", ""mt6580"", ""mt6573"", ""mt6575"", ""mt6260"", ""mt6236""])
        self.igversi = (""100.0.0.17.129,100.0.0.17.129,100.0.0.17.129,100.0.0.17.129,100.0.0.17.129,100.0.0.17.129,79.0.0.21.101,78.0.0.11.104,77.0.0.20.113,76.0.0.15.395,75.0.0.23.99,74.0.0.21.99,73.0.0.22.185,72.0.0.21.98,71.0.0.18.102,70.0.0.22.98,69.0.0.30.95,68.0.0.11.99,67.0.0.25.100,66.0.0.11.101,65.0.0.12.86,64.0.0.14.96,63.0.0.17.94,62.0.0.19.93,61.0.0.19.86,60.1.0.17.79,59.0.0.23.76,58.0.0.12.73,57.0.0.9.80,56.0.0.13.78,55.0.0.12.79,54.0.0.14.82,53.0.0.13.84,52.0.0.8.83,51.0.0.20.85,50.1.0.43.119,271.1.0.21.84,131.0.0.23.11,130.0.0.31.12,128.0.0.26.12,126.0.0.25.12,125.0.0.20.12,124.0.0.17.47,123.0.0.21.11,122.0.0.29.23,120.0.0.29.11,119.0.0.33.14,118.0.0.28.12,117.0.0.28.12,115.0.0.26.11,114.0.0.38.12,113.0.0.39.12,112.0.0.29.12,111.1.0.25.15,110.0.0.16.11,109.0.0.18.12,108.0.0.23.11,107.0.0.27.12,106.0.0.24.11,105.0.0.18.11,104.0.0.21.11,103.1.0.15.11,102.0.0.20.11,101.0.0.15.12,100.0.0.17.12,99.0.0.32.182,98.0.0.15.119,97.0.0.32.119"").split(',')
        self.dix = random.choice(self.igversi)
        self.kode = random.choice(['104766893','104766900','102221278','104766888','105842053','93117670','94080607','96794592','102221279','100986894','ru_RU','94080606','103516660','98288242','103516666','103516653','uk_UA','96794590','100986893','102221277','95414344','99640920','99640911','96794591','ru_UA','99640905','100986890','107092313','99640900','93117667','100521966','90841939','98288239','89867440','105842051','de_DE','96794584','105842050','en_US','pt_PT','109556223','107092318','en_GB','108357722','112021130','107092322','119104798','108357720','119104802','112021131','100986892','113249569','107104231','fr_FR','pt_BR','109556226','116756948','113249553','113249561','110937441','118342010','120662545','117539703','119875222','110937448','121451799','115994877','108357718','120662547','107608058','122206624','95414346','107092308','112021128','90841948','119875229','117539698','120662550','en_NZ','123103748','91882538','121451810','91882537','118342006','113948109','122338251','110937453','es_US','118342005','121451793','109556219','119875225','en_CA','109556220','117539695','115211358','91882539','119104795','89867442','94080603','164094539','175574628','185203690','188791648','188791674','187682694','188791643','177770724','192992577','180322810','195435560','196643820','196643821','188791637','192992576','196643799','196643801','196643803','195435546','194383411','197825254','197825260','197825079','171727793','197825112','197825012','197825234','179155086','192992563','197825268','166149669','192992565','198036424','197825223','183982969','199325909','199325886','199325890','199325911','197825118','127049003','197825169','197825216','197825127','200395960','179155096','199325907','200396014','188791669','197825133','170693926','200396005','171727780','201577064','201576758','201577192','201775949','201576944','201775970','143631574','126223520','201775951','167338518','144612598','170693940','201775813','200395971','201775744','201775946','202766609','145652094','202766591','202766602','203083142','179155088','202766608','199325884','180322802','202766603','195435547','165030894','201576967','201775904','194383424','197347903','202766610','185203693','201576898','204019468','187682682','204019456','201775901','204019471','204019454','204019458','202766601','204019452','173238721','204019466','148324036','202766581','158441904','201576903','205280538','205280529','201576813','173238729','141753096','205280531','163022072','201576887','163022088','141753091','148324051','205280528','154400383','205280537','201576818','157405371','205858383','201576811','165031093','187682684','145652090','206670917','185203686','192992561','183982986','206670927','150338061','183982962','127049016','175574603','155374054','205858247','135374896','206670920','169474958','206670926','160497905','161478672','192992578','206670929','131223243','206670916','142841919','187682681','171727795','151414277','206670922','160497915','207505137','165030898','208061741','208061688','208180365','208061674','197825052','147375133','208061744','196643798','208061725','122338247','157536430','208061728','209143963','208727155','209143726','205280539','209143903','209143970','181496409','208061739','209143957','210180522','210180512','209143881','209143712','180322805','210180521','195435561','210370119','210180523','210180493','175574596','210180510','210180480','210180513','210180517','176649504','177770663','210180479','211114117','210908379','206670921','211114134','183982943','211399345','211399342','211399332','201775962','211574187','211574249','210180519','167338559','185203649','124583960','211399337','211399335','197825163','166149717','211399336','212063371','211399329','209143954','210180482','168361634','212214017','209143867','211399341','211399340','212214027','195435510','122338243','139237670','152367502','212676872','212676898','212676875','212676895','212676901','209823384','212676869','196643822','212676878','213367980','213368005','212676886','213558743','209143913','212214039','158441917','174081672','213558750','201775966','188791681','185203705','143631575','161478664','214245350','161478663','212676881','213558770','214245346','138226752','214245221','214245182','214245206','214245218','214245354','214245295','214245199','214245304','214245280','214446313','214245187','214245288','214139002','202766605','214245319','214646783','158441914','215246048','195435544','208061677','215464400','128676146','215464389','215464385','215464390','215464398','182747397','215464393','216233197','201775791','216817344','215464395','216817286','185203642','164094529','216817305','215464401','162439029','215464382','216817280','216817331','214330969','216817299','216817357','217948981','217948980','217948956','217948959','217948968','216817296','217948952','217948982','216817269','219308759','219308726','182747387','219308721','219308754','219308763','176649435','183982982','219909486','127049038','219308730','221134012','221134032','221134009','221134037','194383426','221134029','221134005','221134018','145652093','225283632','165031108','225283625','224652582','139906580','225283628','225283624','226142579','225283634','225283631','226493211','225283623','185203672','156514151','218793478','225283621','227299063','225283627','227299064','227299021','227299027','227544546','227299041','227299060','227299012','228970707','228970705','227299005','228970687','228970683','228970694','228970710','228970689','160497904','195435540','129611419','229783842','230291708','228970681','148324047','230877709','231192211','230877674','230877705','230877678','211399328','209143896','230877713','194383428','230877689','221134002','231457747','208061721','230877671','230877668','232868027','232088496','185203706','232868005','232867964','232868001','232868015','232868031','232867959','232868009','164094526','232867941','234041364','182747399','232868024','232867949','234847239','234847238','234847234','162439040','234847229','234847230','181496427','234847240','232867993','195435558','232867967','232867997','234847227','235871830','221133998','236572344','236572377','153386780','236572337','236572349','236572372','234847226','236572383','237507050','238093993','238093948','238093954','238093999','238093982','239490565','239490555','238093946','238093966','239490563','239490550','239974660','240726416','239490568','240726484','240726452','239490551','239490548','240726426','240726476','240726491','240726471','241043882','241114613','236572331','241267273','240726407','241456456','241267278','241267269','241114619','241456445','241456451','242168941','242168928','242168931','242168939','242168925','240726436','242375239','144722090','242168935','242290370','157405369','242168933','242290355','242703240','242807362','242168923','242168943','242991209','243646252','243646269','242991200','243711120','243646267','243711093','243975802','243646263','243646248','243646255','244167578','128676156','194383413','243975835','244390417','244390338','245196084','245196061','240726392','245196055','243646273','245196082','245196063','245196070','245666450','245466705','245870319','245870301','245870347','245196087','246889064','246889072','246889073','246889074','246889065','247146500','246889063','245870262','247370962','247146481','246889068','246889062','247541884','247541831','247370955','247370942','247720736','247720751','248310216','248310220','248310208','247720744','248399342','248310210','247720747','248310206','248717751','248310212','248310221','248823392','248583561','248310205','248899028','248955251','248955247','249178904','248955244','249507608','249507582','249507588','249507585','248955240','249507607','249507592','249810008','249966137','249507610','249966081','249966100','249507599','249966140','249810004','123790722','250188776','249628096','250188788','250742103','250742113','250742102','250877984','250742105','250742111','251048681','250742107','250742115','251048695','251304696','251304682','251524431','251530710','251304689','251524420','251524409','251524390','250742101','251048673','252055918','252055945','251920416','252055944','252055925','252239038','252055936','252055915','252055948','252390568','252390583','252580134','252740497','252740485','252740490','253120615','253325372','253325384','253325385','253447816','253146263','253120607','253325374','253120598','253325371','253447808','253447809','253325378','253447814','253447807','253447811','253447817','253447813','181496411','253447806','255191971','255013798','255777478','255777471','255777474','255777472','255959637','255777477','255959614','255959635','256099199','256099204','150338064','256099153','256099205','256099156','255983744','256107300','255777470','126223536','256203326','256099190','256099151','256324061','256324047','256203339','256966628','256966589','256966626','256966590','124584015','257456576','256966593','257456590','256966629','256966587','256966592','257456586','257456539','259829115','259829104','259829113','260037038','259829105','259829109','260037030','260149625','259829103','260149621','260465044','259829116','260724710','179155058','261079769','261079761','261079768','261079762','261079771','261276939','157405370','135374885','261079765','261393056','261393062','261079760','181496406','182747360','261504698','261690888','261504706','169474957','262218766','262290715','262290774','262372432','262372425','262372431','262886993','262886995','262372426','262886987','261079764','262886986','262886988','262886990','262372433','262886996','263652962','264009049','264009019','264009030','264009021','264009023','264009052','264009024','261763534','174081651','169474965','232867942','264009013','255959606','264009028','267397344','267397322','267925737','267397343','267925708','267397327','267397321','267925714','267258517','267925705','268773287','267925733','268773233','267925702','268773286','159526770','268773239','268773272','269790795','269285030','269790805','269790803','269790792','268773227','269849047','270426177','270426174','271182277','269790789','271182270','268773290','271182266','271182276','269790798','271182279','271182265','271182267','269790807','271823819','272382110','272382111','272382106','272693584','272382095','272382093','272382098','272382100','272382103','273728833','273371577','273728832','273728798','273907093','273907111','273907108','238093987','273907112','273907103','274774869','274774891','274774908','273907087','274774904','274774875','274774914','275292626','276027938','276028040','276027963','276028037','276028020','276028017','274774862','276028013','249507580','276028029','273907098','277249238','277249248','277249249','276028033','277249250','277249226','275292623','277249214','277249242','277249237','277249240','278625447','278002558','278625420','278625431','278625423','117539687','278625416','278625444','277249213','278625451','279469964','279996068','279996060','279996067','279996058','280194220','279996065','279996063','279996061','279996059','280894196','273728787','271182262','281579032','281579023','276514494','281579021','281579027','281579033','268773274','283072590','281579025','283072571','282619332','283489774','283072587','283072567','281579031','283072580','283072574','284459213','284459224','179155089','256966583','284459214','283072585','284459218','284459223','284459225','285338607','275113919','284459221','284459212','284459215','285855793','285855800','285855803','285855791','285855802','285855804','285855795','286809973','287420974','287421023','287420968','287420979','287421017','287421005','287421019','287421012','277249241','288682406','287421026','288682405','288682397','288682407','261079772','288682398','288682401','288205409','289692198','287420997','289692186'])
        self.dpi_pxl = random.choice(['240dpi; 1760x792', '240dpi; 1920x864', '320dpi; 2400x1080', '400dpi; 3200x1440', '480dpi; 1080x1920', '320dpi; 900x1600', '320dpi; 720x1280', '240dpi; 540x960', '280dpi; 1920x1080', '240dpi; 160x900', '240dpi; 1280x720', '160dpi; 960x540','160dpi; 623x1280'])
        self.dpi = random.choice(['320dpi','640dpi','213dpi','480dpi','420dpi','240dpi','280dpi','160dpi','560dpi','540dpi','272dpi','360dpi','720dpi','270dpi','450dpi','600dpi','279dpi','210dpi','180dpi','510dpi','300dpi','454dpi','314dpi','288dpi','401dpi','153dpi','267dpi','345dpi','493dpi','340dpi','604dpi','465dpi','680dpi','256dpi','290dpi','432dpi','273dpi','120dpi','200dpi','367dpi','419dpi','306dpi','303dpi','411dpi','195dpi','518dpi','230dpi','384dpi','315dpi','293dpi','274dpi','235dpi'])
        self.pxl = random.choice(['720x1280','1440x2560','1440x2768','1280x720','1280x800','1080x1920','540x960','1080x2076','1080x2094','1080x2220','480x800','768x1024','1440x2792','1200x1920','720x1384','1920x1080','720x1369','800x1280','720x1440','1080x2058','600x1024','720x1396','2792x1440','1920x1200','2560x1440','1536x2048','720x1382','1080x2113','1080x2198','1080x2131','720x1423','1080x2069','720x1481','1080x2047','1080x2110','1080x2181','1080x2209','1080x2180','1080x2020','1080x2095','1440x2723','1080x2175','720x1365','1440x2699','1080x2218','2699x1440','1440x2907','1080x2257','720x1370','1080x2042','720x1372','1080x2200','1080x2186','720x1361','1080x2024','1080x2006','720x1402','1440x2831','720x1454','1080x2064','1440x2933','720x1411','720x1450','1440x2730','1080x2046','2094x1080','540x888','1440x2759','1080x2274','1080x2178','1440x2706','720x1356','720x1466','1440x2900','2560x1600','1080x2038','1600x2452','1080x2129','720x1422','720x1381','1080x2183','1080x2285','800x1216','1080x2216','1080x2168','1080x2119','1080x2128','1080x2273','2274x1080','1080x2162','1080x2164','2076x1080','1024x768','1080x2173','1440x2845','1080x2134','720x1379','1440x2838','1080x2139','2131x1080','1440x2744','1080x2192','720x1406','1440x2960','1080x2029','2042x1080','1080x2212','1406x720','1080x2288','2047x1080','1080x2051','720x1398','1280x736','1382x720','720x1353','1080x2050','1080x2028','1080x2256','2711x1440','2175x1080','1080x2281','2560x1492','1440x2923','1200x1845','1080x2189','1080x2002','1440x2711','2110x1080','960x540','1080x2033','2200x1080','720x1452','720x1480','1440x2735','720x1472','1080x2277','1080x2169','2874x1440','1600x2560','1080x2151','2218x1080','1080x2182','720x1468','1440x2898','1080x2011','1080x2201','720x1380','1080x2287','2069x1080','1200x1836','2046x1080','720x1439','2058x1080','2182x1080','720x1399','1080x2282','1440x2721','1080x2324','720x1432','1080x2165','1080x2150','1080x2156','1080x1872','1440x3048','1532x2560','720x1355','720x1390','720x1476','720x1410','1080x2032','720x1437','1440x2682','1440x2921','1080x2270','1080x2160','720x1446','1200x1848','1440x2874','1080x2309','1080x2174','1440x2867','1080x2060','1080x2196','1080x2401','1536x1922','1080x2280','1080x2123','720x1435','1440x2927','1080x2276','720x1448','720x1469','720x1344','1080x2187','540x937','1440x3028','1080x2184','1440x2718','1080x2326','840x1834','1440x2935','1440x2880','1440x2892','2048x2048','1080x2195','1080x2322','720x1419','987x1450','1080x2092','1440x3047','720x1358','1080x2136','720x1357','1080x2093','720x1477','1080x2312','1080x2361','720x1341','720x1507','1080x2172','720x1337','1080x2177','1080x2125','1440x2891','1600x2434','720x1394','1080x2159','720x1387','1080x2166','1080x2154','1080x2147','1440x2747','1080x2105','1440x2911','720x1473','1080x2055','1080x2265','720x1436','1080x2190','1600x2526','720x1373','720x1415','1080x2249','1080x2254','720x1455','1440x3040','1080x2149','720x1385','1440x3036','1080x2111','1440x2904','720x1442','720x1377','1080x2307','1080x2327','1080x2141','1080x2025','720x1430','720x1375','1080x2283','1440x2779','1080x2321','1080x2268','1440x2758','1752x2698','1080x2267','1200x1856','1440x2756','720x1464','1080x2234','1080x2171','1080x2155','720x1463','1080x2122','720x1467','1080x2264','720x1349','1440x2999','720x1458','1080x2015','720x1431','1242x2208','1080x2185','1080x2148','1080x2163','1440x2780','720x1445','1080x2146','1200x1916','720x1502','1200x1928','720x1506','720x1424','720x1465','720x1420','1080x2176','720x1521','1080x2315','1080x2400','720x1471','1080x2157','1600x2458','1080x2067','1080x2191','1080x2271','720x1407','800x1208','1080x2087','1080x2199','578x1028','720x1485','540x879','1080x2179','720x1555','810x1598','720x1378','1200x1897','720x1395','720x1459','900x1600','1080x2275','1440x2733'])
        self.samsung = [""SM-A205F"",""SM-J120H"",""SM-J120F"",""SM-J120M"",""SM-J111M"",""SM-J111F"",""SM-J110H"",""SM-J110G"",""SM-J110F"",""SM-J110M"",""SM-J105H"",""SM-J105Y"",""SM-J105B"",""SM-J106H"",""SM-J106F"",""SM-J106B"",""SM-J106M"",""SM-J200F"",""SM-J200M"",""SM-J200G"",""SM-J200H"",""SM-J200F"",""SM-J200GU"",""SM-J260M"",""SM-J260F"",""SM-J260MU"",""SM-J260F"",""SM-J260G"",""SM-J200BT"",""SM-G532G"",""SM-G532M"",""SM-G532MT""]
        self.cgsm = [""dream2qltesq"", ""beyond2q"", ""broadway"", ""dreamqltevzw"", ""b2q"", ""a7y18lte"", ""a50qlteue"", ""a42xqlte"", ""a7y18lte"", ""a40lte"", ""a6plte"", ""a52xqlteue"", ""a5y20qlteue"", ""a3xelte"", ""a42xqlteue"", ""a3xelte"", ""a41lte"", ""a72xlte"", ""dreamlte"", ""hero2qltevzw"", ""beyond0lte"", ""beyond2"", ""starlte"", ""a5y17lte"", ""a7xelte"", ""a71xqlteue"", ""dream2qlteue"", ""dreamqltespr"", ""a5y17lte"", ""beyond1qlteue"",""herolte"",""zerolte"",""hero2te""]
        self.realme = [""RMX3516"", ""RMX3371"", ""RMX3461"", ""RMX3286"", ""RMX3561"", ""RMX3388"", ""RMX3311"", ""RMX3142"", ""RMX2071"", ""RMX1805"", ""RMX1809"", ""RMX1801"", ""RMX1807"", ""RMX1803"", ""RMX1825"", ""RMX1821"", ""RMX1822"", ""RMX1833"", ""RMX1851"", ""RMX1853"", ""RMX1827"", ""RMX1911"", ""RMX1919"", ""RMX1927"", ""RMX1971"", ""RMX1973"", ""RMX2030"", ""RMX2032"", ""RMX1925"", ""RMX1929"", ""RMX2001"", ""RMX2061"", ""RMX2063"", ""RMX2040"", ""RMX2042"", ""RMX2002"", ""RMX2151"", ""RMX2163"", ""RMX2155"", ""RMX2170"", ""RMX2103"", ""RMX3085"", ""RMX3241"", ""RMX3081"", ""RMX3151"", ""RMX3381"", ""RMX3521"", ""RMX3474"", ""RMX3471"", ""RMX3472"", ""RMX3392"", ""RMX3393"", ""RMX3491"", ""RMX1811"", ""RMX2185"", ""RMX3231"", ""RMX2189"", ""RMX2180"", ""RMX2195"", ""RMX2101"", ""RMX1941"", ""RMX1945"", ""RMX3063"", ""RMX3061"", ""RMX3201"", ""RMX3203"", ""RMX3261"", ""RMX3263"", ""RMX3193"", ""RMX3191"", ""RMX3195"", ""RMX3197"", ""RMX3265"", ""RMX3268"", ""RMX3269"",""RMX2027"", ""RMX2020"", ""RMX2021"", ""RMX3581"", ""RMX3501"", ""RMX3503"", ""RMX3511"", ""RMX3310"", ""RMX3312"", ""RMX3551"", ""RMX3301"", ""RMX3300"", ""RMX2202"", ""RMX3363"", ""RMX3360"", ""RMX3366"", ""RMX3361"", ""RMX3031"", ""RMX3370"", ""RMX3357"", ""RMX3560"", ""RMX3562"", ""RMX3350"", ""RMX2193"", ""RMX2161"", ""RMX2050"", ""RMX2156"", ""RMX3242"", ""RMX3171"", ""RMX3430"", ""RMX3235"", ""RMX3506"", ""RMX2117"", ""RMX2173"", ""RMX3161"", ""RMX2205"", ""RMX3462"", ""RMX3478"", ""RMX3372"", ""RMX3574"", ""RMX1831"", ""RMX3121"", ""RMX3122"", ""RMX3125"", ""RMX3043"", ""RMX3042"", ""RMX3041"", ""RMX3092"", ""RMX3093"", ""RMX3571"", ""RMX3475"", ""RMX2200"", ""RMX2201"", ""RMX2111"", ""RMX2112"", ""RMX1901"", ""RMX1903"", ""RMX1992"", ""RMX1993"", ""RMX1991"", ""RMX1931"", ""RMX2142"", ""RMX2081"", ""RMX2085"", ""RMX2083"", ""RMX2086"", ""RMX2144"", ""RMX2051"", ""RMX2025"", ""RMX2075"", ""RMX2076"", ""RMX2072"", ""RMX2052"", ""RMX2176"", ""RMX2121"", ""RMX3115"", ""RMX1921""]
        self.xiaomi = [""2201116SI"", ""M2012K11AI"", ""22011119TI"", ""21091116UI"", ""M2102K1AC"", ""M2012K11I"", ""22041219I"", ""22041216I"", ""2203121C"", ""2106118C"", ""2201123G"", ""2203129G"", ""2201122G"", ""2201122C"", ""2206122SC"", ""22081212C"", ""2112123AG"", ""2112123AC"", ""2109119BC"", ""M2002J9G"", ""M2007J1SC"", ""M2007J17I"", ""M2102J2SC"", ""M2007J3SY"", ""M2007J17G"", ""M2007J3SG"", ""M2011K2G"", ""M2101K9AG "", ""M2101K9R"", ""2109119DG"", ""M2101K9G"", ""2109119DI"", ""M2012K11G"", ""M2102K1G"", ""21081111RG"", ""2107113SG"", ""21051182G"", ""M2105K81AC"", ""M2105K81C"", ""21061119DG"", ""21121119SG"", ""22011119UY"", ""21061119AG"", ""21061119AL"", ""22041219NY"", ""22041219G"", ""21061119BI"", ""220233L2G"", ""220233L2I"", ""220333QNY"", ""220333QAG"", ""M2004J7AC"", ""M2004J7BC"", ""M2004J19C"", ""M2006C3MII"", ""M2010J19SI"", ""M2006C3LG"", ""M2006C3LVG"", ""M2006C3MG"", ""M2006C3MT"", ""M2006C3MNG"", ""M2006C3LII"", ""M2010J19SL"", ""M2010J19SG"", ""M2010J19SY"", ""M2012K11AC"", ""M2012K10C"", ""M2012K11C"", ""22021211RC""]
        self.dvc = random.choice([""30/11"",""31/12"",""29/10""])
        return(random.choice([
             f'Barcelona 118.0.0.28.12 Android ({self.dvc}; 604dpi; 1080x2283; INFINIX MOBILITY LIMITED/Infinix; {str(random.choice(self.infinix))}; qcom; in_ID; 185203672)',
             f'Barcelona 118.0.0.28.12 Android ({self.dvc}; 604dpi; 1080x2283; REALME MOBILITY LIMITED/Realme; {str(random.choice(self.realme))}; qcom; in_ID; 185203672)',
             f'Barcelona 118.0.0.28.12 Android ({self.dvc}; 604dpi; 1080x2283; XIAOMI MOBILITY LIMITED/Xiaomi; {str(random.choice(self.xiaomi))}; qcom; in_ID; 185203672)',
            f'Barcelona 118.0.0.28.12 Android ({self.dvc}; 604dpi; 1080x2283; NEXUS MOBILITY LIMITED/Nexus; {str(random.choice(self.nexus))}; qcom; in_ID; 185203672)',
            f'Barcelona 118.0.0.28.12 Android ({self.dvc}; 604dpi; 1080x2283; MICROMAX MOBILITY LIMITED/Micromax; {str(random.choice(self.micromax))}; qcom; in_ID; 185203672)',
            f'Barcelona 118.0.0.28.12 Android ({self.dvc}; 604dpi; 1080x2283; ONEPLUS MOBILITY LIMITED/One; {str(random.choice(self.onpls))}; qcom; in_ID; 185203672)',
            f'Barcelona 118.0.0.28.12 Android ({self.dvc}; 604dpi; 1080x2283; OPPO MOBILITY LIMITED/Oppo; {str(random.choice(self.oppo))}; {self.opp}; qcom; in_ID; 185203672)',
            f'Barcelona 118.0.0.28.12 Android ({self.dvc}; 604dpi; 1080x2283; VIVO MOBILITY LIMITED/Vivo; {str(random.choice(self.vivo))}; qcom; in_ID; 185203672)',
           ])
       )

        
    def useragent_ajax(self):
        self.chrome = str(random.randint(114,124))
        return(random.choice([
            f'Mozilla/5.0 (Windows NT 10.0; {str(random.randint(1,9))}; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/{str(random.randint(1,9))}.{str(random.randint(1,9))}.{str(random.randint(1,9))}.{str(random.randint(1,9))} Safari/537.36',
            f'Mozilla/5.0 (Windows NT 10.0; {str(random.randint(1,9))}; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/{str(random.randint(1,9))}.{str(random.randint(1,9))}.{str(random.randint(1,9))}.{str(random.randint(1,9))} Safari/537.36',
            ])
        )
        

        


"
ieq42A3y,2024-03-29_stats.json,rdp_snitch,JSON,Saturday 30th of March 2024 07:18:22 PM CDT,"{
  ""ip"": {
    ""128.199.242.196"": 4296,
    ""58.218.204.183"": 9,
    ""2.57.149.186"": 27,
    ""62.204.41.222"": 18,
    ""212.70.149.146"": 9,
    ""198.235.24.230"": 9,
    ""194.165.16.78"": 6,
    ""199.45.154.55"": 3,
    ""117.2.137.179"": 9,
    ""87.251.75.145"": 9,
    ""185.16.38.89"": 6,
    ""194.165.16.76"": 6,
    ""36.78.201.10"": 3,
    ""103.214.8.137"": 12,
    ""196.171.104.218"": 6,
    ""185.170.144.3"": 6,
    ""164.90.160.126"": 9,
    ""167.94.138.36"": 3,
    ""196.190.117.7"": 3,
    ""198.235.24.126"": 9,
    ""180.76.119.217"": 18,
    ""2.57.149.92"": 3,
    ""185.196.220.41"": 9,
    ""193.142.146.227"": 9,
    ""81.19.135.2"": 9,
    ""152.32.245.196"": 3,
    ""14.225.9.184"": 57,
    ""205.210.31.168"": 9,
    ""144.217.24.29"": 3,
    ""45.227.254.8"": 6,
    ""206.168.34.49"": 3,
    ""87.251.75.64"": 3,
    ""45.227.254.119"": 6,
    ""113.160.91.206"": 3,
    ""205.210.31.206"": 9,
    ""144.16.111.79"": 3,
    ""112.4.139.162"": 3,
    ""128.1.43.27"": 528
  },
  ""asn"": {
    ""AS14061"": 4305,
    ""AS4134"": 9,
    ""AS208312"": 30,
    ""AS59425"": 18,
    ""AS204428"": 9,
    ""AS396982"": 36,
    ""AS48721"": 12,
    ""AS398722"": 3,
    ""AS7552"": 9,
    ""AS208091"": 12,
    ""AS201814"": 6,
    ""AS7713"": 3,
    ""AS140810"": 12,
    ""AS24691"": 6,
    ""AS197414"": 6,
    ""AS398324"": 6,
    ""AS24757"": 3,
    ""AS38365"": 18,
    ""AS208046"": 18,
    ""AS209588"": 9,
    ""AS135377"": 531,
    ""AS135905"": 57,
    ""AS16276"": 3,
    ""AS267784"": 12,
    ""AS45899"": 3,
    ""AS2697"": 3,
    ""AS56046"": 3
  },
  ""isp"": {
    ""DigitalOcean, LLC"": 4305,
    ""Chinanet"": 9,
    ""Red Byte LLC"": 30,
    ""Horizon LLC"": 18,
    ""SS-Net"": 9,
    ""Google LLC"": 36,
    ""Flyservers S.A."": 33,
    ""Censys, Inc."": 6,
    ""Viettel Corporation"": 9,
    ""Xhost Internet Solutions LP"": 18,
    ""MEVSPACE sp. z o.o."": 6,
    ""PT. TELKOM INDONESIA"": 3,
    ""MEGACORE"": 12,
    ""TogoTelecom"": 6,
    ""Ethiotelecom"": 3,
    ""Beijing Baidu Netcom Science and Technology Co., Ltd."": 18,
    ""ColocationX Ltd."": 18,
    ""UCLOUD INFORMATION TECHNOLOGY (HK) LIMITED"": 3,
    ""Vietnam Posts and Telecommunications Group"": 57,
    ""OVH Hosting"": 3,
    ""Censys"": 3,
    ""VietNam Post and Telecom Corporation"": 3,
    ""ERNET India"": 3,
    ""China Mobile Communications Corporation"": 3,
    ""Zenlayer Inc"": 528
  },
  ""org"": {
    ""DigitalOcean, LLC"": 4305,
    ""Chinanet JS"": 9,
    ""Chang Way Technologies Co. Limited"": 30,
    ""Horizon LLC"": 18,
    ""4Media Ltd"": 9,
    ""Palo Alto Networks, Inc"": 36,
    ""Flyservers S.A"": 12,
    ""Censys, Inc."": 6,
    ""Unknown"": 21,
    ""Xhost Internet Solutions"": 12,
    ""MEVSPACE sp. z o.o"": 6,
    ""Megacore Technology Company Limited"": 12,
    ""Xhostis"": 6,
    ""Censys, Inc"": 3,
    ""Beijing Baidu Netcom Science and Technology Co., Ltd."": 18,
    ""Makut Investments"": 9,
    ""ColocationX Ltd"": 9,
    ""Alviva Holding Limited"": 9,
    ""Ucloud Information Technology (hk) Limited"": 3,
    ""VNPT"": 57,
    ""SAS, ONYPHE"": 3,
    ""UAB Host Baltic"": 12,
    ""Vietnam Posts and Telecommunications Group"": 3,
    ""ERNET India"": 3,
    ""China Mobile Communications Corporation"": 3,
    ""UCLOUD"": 528
  },
  ""regionName"": {
    ""South West"": 4296,
    ""Jiangsu"": 12,
    ""Lesser Poland"": 30,
    ""Moscow"": 546,
    ""Sliven"": 9,
    ""California"": 36,
    ""Kaunas"": 12,
    ""Central and Western District"": 3,
    ""L\u00e2m \u0110\u1ed3ng Province"": 9,
    ""North Holland"": 27,
    ""Mazovia"": 6,
    ""East Kalimantan"": 3,
    ""Hanoi"": 72,
    ""Maritime"": 6,
    ""Hesse"": 18,
    ""Michigan"": 6,
    ""Addis Ababa"": 3,
    ""Beijing"": 18,
    ""Virginia"": 9,
    ""Bangkok"": 3,
    ""Quebec"": 3,
    ""Vilnius"": 12,
    ""National Capital Territory of Delhi"": 3
  },
  ""country"": {
    ""Singapore"": 4296,
    ""China"": 30,
    ""Poland"": 36,
    ""Russia"": 546,
    ""Bulgaria"": 9,
    ""United States"": 51,
    ""Lithuania"": 24,
    ""Hong Kong"": 3,
    ""Vietnam"": 81,
    ""The Netherlands"": 27,
    ""Indonesia"": 3,
    ""Togo"": 6,
    ""Germany"": 18,
    ""Ethiopia"": 3,
    ""Thailand"": 3,
    ""Canada"": 3,
    ""India"": 3
  },
  ""account"": {
    ""hello"": 4428,
    ""Administr"": 48,
    ""Test"": 42,
    ""qhyMCZkNs"": 3,
    ""ocdcRH"": 3,
    ""WCcilM"": 3,
    ""(empty)"": 15,
    ""SfEnehAbI"": 3,
    ""urkbgD"": 3,
    ""AxwAdG"": 3,
    ""Domain"": 39,
    ""Administrator"": 6,
    ""hEZBygWNm"": 3,
    ""yMCqXY"": 3,
    ""UlkBmK"": 3,
    ""rhqokGzIW"": 3,
    ""MVLJLM"": 3,
    ""mLZXbr"": 3,
    ""1948287240"": 528
  },
  ""keyboard"": {
    ""Unknown"": 5142
  },
  ""client_build"": {
    ""Unknown"": 5142
  },
  ""client_name"": {
    ""Unknown"": 5142
  },
  ""ip_type"": {
    ""hosting & proxy"": 4296,
    ""Unknown"": 237,
    ""hosting"": 597,
    ""mobile"": 12
  }
}"
KtTkXmYD,2024-03-29_stats.json,rdp_snitch,JSON,Saturday 30th of March 2024 07:16:19 PM CDT,"{
  ""ip"": {
    ""128.199.242.196"": 4295,
    ""58.218.204.183"": 9,
    ""2.57.149.186"": 27,
    ""62.204.41.222"": 18,
    ""212.70.149.146"": 9,
    ""198.235.24.230"": 9,
    ""194.165.16.78"": 6,
    ""199.45.154.55"": 3,
    ""117.2.137.179"": 9,
    ""87.251.75.145"": 9,
    ""185.16.38.89"": 6,
    ""194.165.16.76"": 6,
    ""36.78.201.10"": 3,
    ""103.214.8.137"": 12,
    ""196.171.104.218"": 6,
    ""185.170.144.3"": 6,
    ""164.90.160.126"": 9,
    ""167.94.138.36"": 3,
    ""196.190.117.7"": 3,
    ""198.235.24.126"": 9,
    ""180.76.119.217"": 18,
    ""2.57.149.92"": 3,
    ""185.196.220.41"": 9,
    ""193.142.146.227"": 9,
    ""81.19.135.2"": 9,
    ""152.32.245.196"": 3,
    ""14.225.9.184"": 57,
    ""205.210.31.168"": 9,
    ""144.217.24.29"": 3,
    ""45.227.254.8"": 6,
    ""206.168.34.49"": 3,
    ""87.251.75.64"": 3,
    ""45.227.254.119"": 6,
    ""113.160.91.206"": 3,
    ""205.210.31.206"": 9,
    ""144.16.111.79"": 3,
    ""112.4.139.162"": 3,
    ""128.1.43.27"": 528
  },
  ""asn"": {
    ""AS14061"": 4304,
    ""AS4134"": 9,
    ""AS208312"": 30,
    ""AS59425"": 18,
    ""AS204428"": 9,
    ""AS396982"": 36,
    ""AS48721"": 12,
    ""AS398722"": 3,
    ""AS7552"": 9,
    ""AS208091"": 12,
    ""AS201814"": 6,
    ""AS7713"": 3,
    ""AS140810"": 12,
    ""AS24691"": 6,
    ""AS197414"": 6,
    ""AS398324"": 6,
    ""AS24757"": 3,
    ""AS38365"": 18,
    ""AS208046"": 18,
    ""AS209588"": 9,
    ""AS135377"": 531,
    ""AS135905"": 57,
    ""AS16276"": 3,
    ""AS267784"": 12,
    ""AS45899"": 3,
    ""AS2697"": 3,
    ""AS56046"": 3
  },
  ""isp"": {
    ""DigitalOcean, LLC"": 4304,
    ""Chinanet"": 9,
    ""Red Byte LLC"": 30,
    ""Horizon LLC"": 18,
    ""SS-Net"": 9,
    ""Google LLC"": 36,
    ""Flyservers S.A."": 33,
    ""Censys, Inc."": 6,
    ""Viettel Corporation"": 9,
    ""Xhost Internet Solutions LP"": 18,
    ""MEVSPACE sp. z o.o."": 6,
    ""PT. TELKOM INDONESIA"": 3,
    ""MEGACORE"": 12,
    ""TogoTelecom"": 6,
    ""Ethiotelecom"": 3,
    ""Beijing Baidu Netcom Science and Technology Co., Ltd."": 18,
    ""ColocationX Ltd."": 18,
    ""UCLOUD INFORMATION TECHNOLOGY (HK) LIMITED"": 3,
    ""Vietnam Posts and Telecommunications Group"": 57,
    ""OVH Hosting"": 3,
    ""Censys"": 3,
    ""VietNam Post and Telecom Corporation"": 3,
    ""ERNET India"": 3,
    ""China Mobile Communications Corporation"": 3,
    ""Zenlayer Inc"": 528
  },
  ""org"": {
    ""DigitalOcean, LLC"": 4304,
    ""Chinanet JS"": 9,
    ""Chang Way Technologies Co. Limited"": 30,
    ""Horizon LLC"": 18,
    ""4Media Ltd"": 9,
    ""Palo Alto Networks, Inc"": 36,
    ""Flyservers S.A"": 12,
    ""Censys, Inc."": 6,
    ""Unknown"": 21,
    ""Xhost Internet Solutions"": 12,
    ""MEVSPACE sp. z o.o"": 6,
    ""Megacore Technology Company Limited"": 12,
    ""Xhostis"": 6,
    ""Censys, Inc"": 3,
    ""Beijing Baidu Netcom Science and Technology Co., Ltd."": 18,
    ""Makut Investments"": 9,
    ""ColocationX Ltd"": 9,
    ""Alviva Holding Limited"": 9,
    ""Ucloud Information Technology (hk) Limited"": 3,
    ""VNPT"": 57,
    ""SAS, ONYPHE"": 3,
    ""UAB Host Baltic"": 12,
    ""Vietnam Posts and Telecommunications Group"": 3,
    ""ERNET India"": 3,
    ""China Mobile Communications Corporation"": 3,
    ""UCLOUD"": 528
  },
  ""regionName"": {
    ""South West"": 4295,
    ""Jiangsu"": 12,
    ""Lesser Poland"": 30,
    ""Moscow"": 546,
    ""Sliven"": 9,
    ""California"": 36,
    ""Kaunas"": 12,
    ""Central and Western District"": 3,
    ""L\u00e2m \u0110\u1ed3ng Province"": 9,
    ""North Holland"": 27,
    ""Mazovia"": 6,
    ""East Kalimantan"": 3,
    ""Hanoi"": 72,
    ""Maritime"": 6,
    ""Hesse"": 18,
    ""Michigan"": 6,
    ""Addis Ababa"": 3,
    ""Beijing"": 18,
    ""Virginia"": 9,
    ""Bangkok"": 3,
    ""Quebec"": 3,
    ""Vilnius"": 12,
    ""National Capital Territory of Delhi"": 3
  },
  ""country"": {
    ""Singapore"": 4295,
    ""China"": 30,
    ""Poland"": 36,
    ""Russia"": 546,
    ""Bulgaria"": 9,
    ""United States"": 51,
    ""Lithuania"": 24,
    ""Hong Kong"": 3,
    ""Vietnam"": 81,
    ""The Netherlands"": 27,
    ""Indonesia"": 3,
    ""Togo"": 6,
    ""Germany"": 18,
    ""Ethiopia"": 3,
    ""Thailand"": 3,
    ""Canada"": 3,
    ""India"": 3
  },
  ""account"": {
    ""hello"": 4427,
    ""Administr"": 48,
    ""Test"": 42,
    ""qhyMCZkNs"": 3,
    ""ocdcRH"": 3,
    ""WCcilM"": 3,
    ""(empty)"": 15,
    ""SfEnehAbI"": 3,
    ""urkbgD"": 3,
    ""AxwAdG"": 3,
    ""Domain"": 39,
    ""Administrator"": 6,
    ""hEZBygWNm"": 3,
    ""yMCqXY"": 3,
    ""UlkBmK"": 3,
    ""rhqokGzIW"": 3,
    ""MVLJLM"": 3,
    ""mLZXbr"": 3,
    ""1948287240"": 528
  },
  ""keyboard"": {
    ""Unknown"": 5141
  },
  ""client_build"": {
    ""Unknown"": 5141
  },
  ""client_name"": {
    ""Unknown"": 5141
  },
  ""ip_type"": {
    ""hosting & proxy"": 4295,
    ""Unknown"": 237,
    ""hosting"": 597,
    ""mobile"": 12
  }
}"
iiuWCF3M,2024-03-29_stats.json,rdp_snitch,JSON,Saturday 30th of March 2024 07:15:09 PM CDT,"{
  ""ip"": {
    ""128.199.242.196"": 4294,
    ""58.218.204.183"": 9,
    ""2.57.149.186"": 27,
    ""62.204.41.222"": 18,
    ""212.70.149.146"": 9,
    ""198.235.24.230"": 9,
    ""194.165.16.78"": 6,
    ""199.45.154.55"": 3,
    ""117.2.137.179"": 9,
    ""87.251.75.145"": 9,
    ""185.16.38.89"": 6,
    ""194.165.16.76"": 6,
    ""36.78.201.10"": 3,
    ""103.214.8.137"": 12,
    ""196.171.104.218"": 6,
    ""185.170.144.3"": 6,
    ""164.90.160.126"": 9,
    ""167.94.138.36"": 3,
    ""196.190.117.7"": 3,
    ""198.235.24.126"": 9,
    ""180.76.119.217"": 18,
    ""2.57.149.92"": 3,
    ""185.196.220.41"": 9,
    ""193.142.146.227"": 9,
    ""81.19.135.2"": 9,
    ""152.32.245.196"": 3,
    ""14.225.9.184"": 57,
    ""205.210.31.168"": 9,
    ""144.217.24.29"": 3,
    ""45.227.254.8"": 6,
    ""206.168.34.49"": 3,
    ""87.251.75.64"": 3,
    ""45.227.254.119"": 6,
    ""113.160.91.206"": 3,
    ""205.210.31.206"": 9,
    ""144.16.111.79"": 3,
    ""112.4.139.162"": 3,
    ""128.1.43.27"": 528
  },
  ""asn"": {
    ""AS14061"": 4303,
    ""AS4134"": 9,
    ""AS208312"": 30,
    ""AS59425"": 18,
    ""AS204428"": 9,
    ""AS396982"": 36,
    ""AS48721"": 12,
    ""AS398722"": 3,
    ""AS7552"": 9,
    ""AS208091"": 12,
    ""AS201814"": 6,
    ""AS7713"": 3,
    ""AS140810"": 12,
    ""AS24691"": 6,
    ""AS197414"": 6,
    ""AS398324"": 6,
    ""AS24757"": 3,
    ""AS38365"": 18,
    ""AS208046"": 18,
    ""AS209588"": 9,
    ""AS135377"": 531,
    ""AS135905"": 57,
    ""AS16276"": 3,
    ""AS267784"": 12,
    ""AS45899"": 3,
    ""AS2697"": 3,
    ""AS56046"": 3
  },
  ""isp"": {
    ""DigitalOcean, LLC"": 4303,
    ""Chinanet"": 9,
    ""Red Byte LLC"": 30,
    ""Horizon LLC"": 18,
    ""SS-Net"": 9,
    ""Google LLC"": 36,
    ""Flyservers S.A."": 33,
    ""Censys, Inc."": 6,
    ""Viettel Corporation"": 9,
    ""Xhost Internet Solutions LP"": 18,
    ""MEVSPACE sp. z o.o."": 6,
    ""PT. TELKOM INDONESIA"": 3,
    ""MEGACORE"": 12,
    ""TogoTelecom"": 6,
    ""Ethiotelecom"": 3,
    ""Beijing Baidu Netcom Science and Technology Co., Ltd."": 18,
    ""ColocationX Ltd."": 18,
    ""UCLOUD INFORMATION TECHNOLOGY (HK) LIMITED"": 3,
    ""Vietnam Posts and Telecommunications Group"": 57,
    ""OVH Hosting"": 3,
    ""Censys"": 3,
    ""VietNam Post and Telecom Corporation"": 3,
    ""ERNET India"": 3,
    ""China Mobile Communications Corporation"": 3,
    ""Zenlayer Inc"": 528
  },
  ""org"": {
    ""DigitalOcean, LLC"": 4303,
    ""Chinanet JS"": 9,
    ""Chang Way Technologies Co. Limited"": 30,
    ""Horizon LLC"": 18,
    ""4Media Ltd"": 9,
    ""Palo Alto Networks, Inc"": 36,
    ""Flyservers S.A"": 12,
    ""Censys, Inc."": 6,
    ""Unknown"": 21,
    ""Xhost Internet Solutions"": 12,
    ""MEVSPACE sp. z o.o"": 6,
    ""Megacore Technology Company Limited"": 12,
    ""Xhostis"": 6,
    ""Censys, Inc"": 3,
    ""Beijing Baidu Netcom Science and Technology Co., Ltd."": 18,
    ""Makut Investments"": 9,
    ""ColocationX Ltd"": 9,
    ""Alviva Holding Limited"": 9,
    ""Ucloud Information Technology (hk) Limited"": 3,
    ""VNPT"": 57,
    ""SAS, ONYPHE"": 3,
    ""UAB Host Baltic"": 12,
    ""Vietnam Posts and Telecommunications Group"": 3,
    ""ERNET India"": 3,
    ""China Mobile Communications Corporation"": 3,
    ""UCLOUD"": 528
  },
  ""regionName"": {
    ""South West"": 4294,
    ""Jiangsu"": 12,
    ""Lesser Poland"": 30,
    ""Moscow"": 546,
    ""Sliven"": 9,
    ""California"": 36,
    ""Kaunas"": 12,
    ""Central and Western District"": 3,
    ""L\u00e2m \u0110\u1ed3ng Province"": 9,
    ""North Holland"": 27,
    ""Mazovia"": 6,
    ""East Kalimantan"": 3,
    ""Hanoi"": 72,
    ""Maritime"": 6,
    ""Hesse"": 18,
    ""Michigan"": 6,
    ""Addis Ababa"": 3,
    ""Beijing"": 18,
    ""Virginia"": 9,
    ""Bangkok"": 3,
    ""Quebec"": 3,
    ""Vilnius"": 12,
    ""National Capital Territory of Delhi"": 3
  },
  ""country"": {
    ""Singapore"": 4294,
    ""China"": 30,
    ""Poland"": 36,
    ""Russia"": 546,
    ""Bulgaria"": 9,
    ""United States"": 51,
    ""Lithuania"": 24,
    ""Hong Kong"": 3,
    ""Vietnam"": 81,
    ""The Netherlands"": 27,
    ""Indonesia"": 3,
    ""Togo"": 6,
    ""Germany"": 18,
    ""Ethiopia"": 3,
    ""Thailand"": 3,
    ""Canada"": 3,
    ""India"": 3
  },
  ""account"": {
    ""hello"": 4426,
    ""Administr"": 48,
    ""Test"": 42,
    ""qhyMCZkNs"": 3,
    ""ocdcRH"": 3,
    ""WCcilM"": 3,
    ""(empty)"": 15,
    ""SfEnehAbI"": 3,
    ""urkbgD"": 3,
    ""AxwAdG"": 3,
    ""Domain"": 39,
    ""Administrator"": 6,
    ""hEZBygWNm"": 3,
    ""yMCqXY"": 3,
    ""UlkBmK"": 3,
    ""rhqokGzIW"": 3,
    ""MVLJLM"": 3,
    ""mLZXbr"": 3,
    ""1948287240"": 528
  },
  ""keyboard"": {
    ""Unknown"": 5140
  },
  ""client_build"": {
    ""Unknown"": 5140
  },
  ""client_name"": {
    ""Unknown"": 5140
  },
  ""ip_type"": {
    ""hosting & proxy"": 4294,
    ""Unknown"": 237,
    ""hosting"": 597,
    ""mobile"": 12
  }
}"
U5NUNSHC,Setup Accounts,LegendzHackz,Lua,Saturday 30th of March 2024 06:14:11 PM CDT,"local Storage = game:GetService(""ReplicatedStorage"");
local Workspace = game:GetService(""Workspace"");
local Players = game:GetService(""Players"");
local Player = Players.LocalPlayer

-- Local Initiative Services

local TeleportService = game:GetService(""TeleportService"");
local InputService = game:GetService(""UserInputService"");
local ChatService = game:GetService(""TextChatService"");
local HttpService = game:GetService(""HttpService"");
local RunService = game:GetService(""RunService"");
local CoreGui = game:GetService(""CoreGui"");
local Camera = Workspace.Camera
local Gui = Player.PlayerGui
local PId, JId = game.PlaceId, game.JobId

-- Initiatives

local AdminPanel = Gui.Admin
local Room = Workspace.Room
local Stalls = Workspace.Stalls
local Events = Storage.EVENTS
local AdminEvent = Events.NOM

-- Recollectives

local Heartbeat = RunService.Heartbeat

function Shorten(Username)
    local PlayerList = {}
    for _, CPlayer in pairs(Players:GetPlayers()) do
        if CPlayer.Name:lower():sub(1, #Username) == Username:lower() or CPlayer.DisplayName:lower():sub(1, #Username) == Username:lower() then
            table.insert(PlayerList, CPlayer)
        end
    end
    return PlayerList
end

function Hop()
    pcall(function()
        local Servers = {}
        for _, v in ipairs(HttpService:JSONDecode(game:HttpGetAsync(""https://games.roblox.com/v1/games/"" .. PlaceId .. ""/servers/Public?sortOrder=Asc&limit=100"")).data) do
            if type(v) == ""table"" and v.maxPlayers > v.playing and v.Id ~= JobId then
                Servers[#Servers + 1] = v.id
            end
        end
        if #Servers > 0 then
            TeleportService:TeleportToPlaceInstance(PlaceId, Servers[math.random(1, #Servers)])
        else
            print(""Server not found."")
        end
    end)
end

function StealStall()
    pcall(function()
        for _, Steal in next, Stalls:GetDescendants() do
            if Steal:IsA(""ProximityPrompt"") then
                if (Player.Character.HumanoidRootPart.Position - Steal.Parent.Position).Magnitude < getgenv().Settings.Distance then
                    fireproximityprompt(Steal)
                    Steal.Parent.Parent.Edit:FireServer(""Empty"", ""Empty"")
                end
            end
        end
    end)
end

function CloseStall()
    pcall(function()
        for _, CloseStall in next, Stalls:GetDescendants() do
            if CloseStall:IsA(""RemoteEvent"") and CloseStall.Name == ""CloseStall"" then
                CloseStall:FireServer()
            end
        end
    end)
end

function EmptyStall()
    pcall(function()
        StealStall()
        CloseStall()
    end)
end

function Hide(Target, Value)
    pcall(function()
        if Value then
            for _, Search in next, Players:GetPlayers() do
                if Search.Name == Target then
                    for _, Staff in next, Players:GetPlayers() do
                        if Staff ~= Player then
                            if table.find(getgenv().Settings.Whitelist, Staff.UserId) then
                                Search.Character.HumanoidRootPart.Velocity = Vector3.new()
                                Search.Character.HumanoidRootPart.CFrame = Staff.Character.HumanoidRootPart.CFrame * CFrame.new(-getgenv().Settings.X, getgenv().Settings.Y, getgenv().Settings.Z)
                            end
                        end
                    end
                end
            end
        elseif not Value then
            for _, Search in next, Players:GetPlayers() do
                if Search.Name == Target then
                    for _, Staff in next, Players:GetPlayers() do
                        if Staff ~= Player then
                            if table.find(getgenv().Settings.Whitelist, Staff.UserId) then
                                Search.Character.HumanoidRootPart.Velocity = Vector3.new()
                                Search.Character.HumanoidRootPart.CFrame = Staff.Character.HumanoidRootPart.CFrame * CFrame.new(getgenv().Settings.X, getgenv().Settings.Y, getgenv().Settings.Z)
                            end
                        end
                    end
                end
            end
        end
    end)
end

ChatService.MessageReceived:Connect(function(Message)
    for _, Search in next, Players:GetPlayers() do
        if Search ~= Player and table.find(getgenv().Settings.Whitelist, Search.UserId) then
            if Message.TextSource.UserId == Search.UserId and Message.Text == getgenv().Settings.Prefix .. ""disconnect"" then
                Player:Kick(""You have been disconnected."")
            elseif Message.TextSource.UserId == Search.UserId and Message.Text == getgenv().Settings.Prefix .. ""empty"" then
                EmptyStall()
            elseif Message.TextSource.UserId == Search.UserId and Message.Text == getgenv().Settings.Prefix .. ""giant"" then
                AdminEvent:FireServer(""huge"")
            elseif Message.TextSource.UserId == Search.UserId and Message.Text == getgenv().Settings.Prefix .. ""mini"" then
                AdminEvent:FireServer(""mini"")
            elseif Message.TextSource.UserId == Search.UserId and Message.Text == getgenv().Settings.Prefix .. ""event"" then
                AdminEvent:FireServer(""mini"")
            elseif Message.TextSource.UserId == Search.UserId and Message.Text == getgenv().Settings.Prefix .. ""respawn"" then
                pcall(function()
                    local cOld = Player.Character.HumanoidRootPart.CFrame
                    Player.Character:BreakJoints()
                    Player.CharacterAdded:Wait():WaitForChild(""HumanoidRootPart"").CFrame = cOld
                end)
            elseif Message.TextSource.UserId == Search.UserId and Message.Text == getgenv().Settings.Prefix .. ""rejoin"" then
                TeleportService:TeleportToPlaceInstance(PlaceId, JobId, Player)
            elseif Message.TextSource.UserId == Search.UserId and Message.Text == getgenv().Settings.Prefix .. ""hop"" then
                Hop()
            elseif Message.TextSource.UserId == Search.UserId and Message.Text == getgenv().Settings.Prefix .. ""flash"" then
                local gOld = getgenv().Settings.Y
                for Iter = 1, 5 do
                    task.wait(0.1)
                    getgenv().Settings.Y = 25
                    task.wait(0.1)
                    getgenv().Settings.Y = 3.5
                end
                task.wait(0.7)
                getgenv().Settings.Y = gOld
            elseif Message.TextSource.UserId == Search.UserId and Message.Text == getgenv().Settings.Prefix .. ""default"" or Message.Text == getgenv().Settings.Prefix .. ""def"" then
                getgenv().Settings.X = 4
                getgenv().Settings.Y = 0
                getgenv().Settings.Z = 0
            elseif Message.TextSource.UserId == Search.UserId and Message.Text == getgenv().Settings.Prefix .. ""big"" or Message.Text == getgenv().Settings.Prefix .. ""huge"" then
                getgenv().Settings.X = 7.5
                getgenv().Settings.Y = 3.5
                getgenv().Settings.Z = 0
            elseif Message.TextSource.UserId == Search.UserId and Message.Text == getgenv().Settings.Prefix .. ""small"" or Message.Text == getgenv().Settings.Prefix .. ""tiny"" then
                getgenv().Settings.X = 2.5
                getgenv().Settings.Y = 0
                getgenv().Settings.Z = 0
            elseif Message.TextSource.UserId == Search.UserId and Message.Text == getgenv().Settings.Prefix .. ""conc"" or Message.Text == getgenv().Settings.Prefix .. ""conceal"" then
                getgenv().Settings.Y = 5000
            elseif Message.TextSource.UserId == Search.UserId and Message.Text == getgenv().Settings.Prefix .. ""reveal"" or Message.Text == getgenv().Settings.Prefix .. ""rev"" then
                getgenv().Settings.Y = 3.5
            elseif Message.TextSource.UserId == Search.UserId and Message.Text == getgenv().Settings.Prefix .. ""hide"" then
                getgenv().Settings.Hide = true
            elseif Message.TextSource.UserId == Search.UserId and Message.Text == getgenv().Settings.Prefix .. ""unhide"" then
                getgenv().Settings.Hide = false
                Player.Character.HumanoidRootPart.CFrame = Search.Character.HumanoidRootPart.CFrame * CFrame.new(0, 5, 0)
            elseif Message.TextSource.UserId == Search.UserId and Message.Text == getgenv().Settings.Prefix .. ""bring"" then
                Player.Character.HumanoidRootPart.CFrame = Search.Character.HumanoidRootPart.CFrame * CFrame.new(0, 0, 0)
            end
        end
    end
end)

Heartbeat:Connect(function()
    pcall(function()
        if getgenv().Settings.Hide then
            Hide(getgenv().Settings.Target, getgenv().Settings.Value)
        end
    end)
end)"
hp9TCAXZ,Untitled,RenSafaray,Java,Saturday 30th of March 2024 05:26:43 PM CDT,"import java.util.ArrayList; // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–ª–∞—Å—Å ArrayList –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–ø–∏—Å–∫–æ–≤
import java.util.HashMap; // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–ª–∞—Å—Å HashMap –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ö—ç—à-—Ç–∞–±–ª–∏—Ü
import java.util.List; // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å List –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å–æ —Å–ø–∏—Å–∫–∞–º–∏
import java.util.Map; // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å Map –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ö—ç—à-—Ç–∞–±–ª–∏—Ü–∞–º–∏
import java.util.Scanner; // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–ª–∞—Å—Å Scanner –¥–ª—è —á—Ç–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã

public class lab3 { // –û–±—ä—è–≤–ª—è–µ–º –∫–ª–∞—Å—Å lab3

    static class Article { // –û–±—ä—è–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π –∫–ª–∞—Å—Å Article (–°—Ç–∞—Ç—å—è)
        private String title; // –û–±—ä—è–≤–ª—è–µ–º –ø—Ä–∏–≤–∞—Ç–Ω–æ–µ –ø–æ–ª–µ title (–ó–∞–≥–æ–ª–æ–≤–æ–∫) —Ç–∏–ø–∞ String
        private String description; // –û–±—ä—è–≤–ª—è–µ–º –ø—Ä–∏–≤–∞—Ç–Ω–æ–µ –ø–æ–ª–µ description (–û–ø–∏—Å–∞–Ω–∏–µ) —Ç–∏–ø–∞ String
        private double fine; // –û–±—ä—è–≤–ª—è–µ–º –ø—Ä–∏–≤–∞—Ç–Ω–æ–µ –ø–æ–ª–µ fine (–®—Ç—Ä–∞—Ñ) —Ç–∏–ø–∞ double

        public Article(String title, String description, double fine) { // –û–±—ä—è–≤–ª—è–µ–º –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –¥–ª—è –∫–ª–∞—Å—Å–∞ Article
            this.title = title; // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ–ª–µ title
            this.description = description; // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ–ª–µ description
            this.fine = fine; // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ–ª–µ fine
        }

        public String getTitle() { // –û–±—ä—è–≤–ª—è–µ–º –º–µ—Ç–æ–¥ getTitle –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ–ª—è title
            return title; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ–ª—è title
        }

        public String getDescription() { // –û–±—ä—è–≤–ª—è–µ–º –º–µ—Ç–æ–¥ getDescription –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ–ª—è description
            return description; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ–ª—è description
        }

        public double getFine() { // –û–±—ä—è–≤–ª—è–µ–º –º–µ—Ç–æ–¥ getFine –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ–ª—è fine
            return fine; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ–ª—è fine
        }
    }

    static class Violation { // –û–±—ä—è–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π –∫–ª–∞—Å—Å Violation (–ù–∞—Ä—É—à–µ–Ω–∏–µ)
        private String fullName; // –û–±—ä—è–≤–ª—è–µ–º –ø—Ä–∏–≤–∞—Ç–Ω–æ–µ –ø–æ–ª–µ fullName (–§–ò–û) —Ç–∏–ø–∞ String
        private String carBrand; // –û–±—ä—è–≤–ª—è–µ–º –ø—Ä–∏–≤–∞—Ç–Ω–æ–µ –ø–æ–ª–µ carBrand (–ú–∞—Ä–∫–∞ –º–∞—à–∏–Ω—ã) —Ç–∏–ø–∞ String
        private String licensePlate; // –û–±—ä—è–≤–ª—è–µ–º –ø—Ä–∏–≤–∞—Ç–Ω–æ–µ –ø–æ–ª–µ licensePlate (–ù–æ–º–µ—Ä–Ω—ã–µ –∑–Ω–∞–∫–∏) —Ç–∏–ø–∞ String
        private String violation; // –û–±—ä—è–≤–ª—è–µ–º –ø—Ä–∏–≤–∞—Ç–Ω–æ–µ –ø–æ–ª–µ violation (–ù–∞—Ä—É—à–µ–Ω–∏–µ) —Ç–∏–ø–∞ String
        private double fine; // –û–±—ä—è–≤–ª—è–µ–º –ø—Ä–∏–≤–∞—Ç–Ω–æ–µ –ø–æ–ª–µ fine (–®—Ç—Ä–∞—Ñ) —Ç–∏–ø–∞ double

        public Violation(String fullName, String carBrand, String licensePlate, String violation, double fine) { // –û–±—ä—è–≤–ª—è–µ–º –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –¥–ª—è –∫–ª–∞—Å—Å–∞ Violation
            this.fullName = fullName; // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ–ª–µ fullName
            this.carBrand = carBrand; // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ–ª–µ carBrand
            this.licensePlate = licensePlate; // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ–ª–µ licensePlate
            this.violation = violation; // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ–ª–µ violation
            this.fine = fine; // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ–ª–µ fine
        }

        public String getFullName() { // –û–±—ä—è–≤–ª—è–µ–º –º–µ—Ç–æ–¥ getFullName –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ–ª—è fullName
            return fullName; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ–ª—è fullName
        }

        public String getCarBrand() { // –û–±—ä—è–≤–ª—è–µ–º –º–µ—Ç–æ–¥ getCarBrand –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ–ª—è carBrand
            return carBrand; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ–ª—è carBrand
        }

        public String getLicensePlate() { // –û–±—ä—è–≤–ª—è–µ–º –º–µ—Ç–æ–¥ getLicensePlate –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ–ª—è licensePlate
            return licensePlate; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ–ª—è licensePlate
        }

        public String getViolation() { // –û–±—ä—è–≤–ª—è–µ–º –º–µ—Ç–æ–¥ getViolation –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ–ª—è violation
            return violation; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ–ª—è violation
        }

        public double getFine() { // –û–±—ä—è–≤–ª—è–µ–º –º–µ—Ç–æ–¥ getFine –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ–ª—è fine
            return fine; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ–ª—è fine
        }
    }

    static class DriverViolations { // –û–±—ä—è–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π –∫–ª–∞—Å—Å DriverViolations (–ù–∞—Ä—É—à–µ–Ω–∏—è –≤–æ–¥–∏—Ç–µ–ª—è)
        private Map<String, List<Violation>> violations; // –û–±—ä—è–≤–ª—è–µ–º –ø—Ä–∏–≤–∞—Ç–Ω–æ–µ –ø–æ–ª–µ violations (–ù–∞—Ä—É—à–µ–Ω–∏—è) —Ç–∏–ø–∞ Map<String, List<Violation>>

        public DriverViolations() { // –û–±—ä—è–≤–ª—è–µ–º –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –¥–ª—è –∫–ª–∞—Å—Å–∞ DriverViolations
            violations = new HashMap<>(); // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ–ª–µ violations
        }

        public void addViolation(Violation violation) { // –û–±—ä—è–≤–ª—è–µ–º –º–µ—Ç–æ–¥ addViolation –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–∞—Ä—É—à–µ–Ω–∏—è
            String fullName = violation.getFullName(); // –ü–æ–ª—É—á–∞–µ–º –§–ò–û –≤–æ–¥–∏—Ç–µ–ª—è –∏–∑ –æ–±—ä–µ–∫—Ç–∞ Violation
            if (!violations.containsKey(fullName)) { // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –≤ —Å–ø–∏—Å–∫–µ –Ω–∞—Ä—É—à–µ–Ω–∏–π –≤–æ–¥–∏—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º –§–ò–û
                violations.put(fullName, new ArrayList<>()); // –ï—Å–ª–∏ –Ω–µ—Ç, —Ç–æ –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–≥–æ –≤–æ–¥–∏—Ç–µ–ª—è –≤ —Å–ø–∏—Å–æ–∫
            }
            violations.get(fullName).add(violation); // –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞—Ä—É—à–µ–Ω–∏–µ –≤ —Å–ø–∏—Å–æ–∫ –Ω–∞—Ä—É—à–µ–Ω–∏–π –≤–æ–¥–∏—Ç–µ–ª—è
        }

        public List<Violation> getViolationsByFullName(String fullName) { // –û–±—ä—è–≤–ª—è–µ–º –º–µ—Ç–æ–¥ getViolationsByFullName –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –Ω–∞—Ä—É—à–µ–Ω–∏–π –≤–æ–¥–∏—Ç–µ–ª—è –ø–æ –µ–≥–æ –§–ò–û
            return violations.getOrDefault(fullName, new ArrayList<>()); // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–ø–∏—Å–æ–∫ –Ω–∞—Ä—É—à–µ–Ω–∏–π –≤–æ–¥–∏—Ç–µ–ª—è –∏–ª–∏ –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫, –µ—Å–ª–∏ –Ω–∞—Ä—É—à–µ–Ω–∏–π –Ω–µ—Ç
        }
    }

    public static void main(String[] args) { // –û–±—ä—è–≤–ª—è–µ–º –≥–ª–∞–≤–Ω—ã–π –º–µ—Ç–æ–¥ main
        Scanner scanner = new Scanner(System.in); // –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç Scanner –¥–ª—è —á—Ç–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
        HashMap<String, Article> articles = new HashMap<>(); // –°–æ–∑–¥–∞–µ–º —Ö—ç—à-—Ç–∞–±–ª–∏—Ü—É articles –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç–µ–π
        articles.put(""–ü–∞—Ä–∫–æ–≤–∫–∞ –Ω–∞ —Ç—Ä–æ—Ç—É–∞—Ä–µ"", new Article(""–ü–∞—Ä–∫–æ–≤–∫–∞ –Ω–∞ —Ç—Ä–æ—Ç—É–∞—Ä–µ"", ""–®—Ç—Ä–∞—Ñ –∑–∞ –ø–∞—Ä–∫–æ–≤–∫—É –Ω–∞ —Ç—Ä–æ—Ç—É–∞—Ä–µ —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç 500 —Ä—É–±–ª–µ–π"", 500)); // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç—å—é ""–ü–∞—Ä–∫–æ–≤–∫–∞ –Ω–∞ —Ç—Ä–æ—Ç—É–∞—Ä–µ"" –≤ —Ö—ç—à-—Ç–∞–±–ª–∏—Ü—É articles
        articles.put(""–ü—Ä–µ–≤—ã—à–µ–Ω–∏–µ —Å–∫–æ—Ä–æ—Å—Ç–∏"", new Article(""–ü—Ä–µ–≤—ã—à–µ–Ω–∏–µ —Å–∫–æ—Ä–æ—Å—Ç–∏"", ""–®—Ç—Ä–∞—Ñ –∑–∞ –ø—Ä–µ–≤—ã—à–µ–Ω–∏–µ —Å–∫–æ—Ä–æ—Å—Ç–∏ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –≤–µ–ª–∏—á–∏–Ω—ã –ø—Ä–µ–≤—ã—à–µ–Ω–∏—è –∏ –º–æ–∂–µ—Ç –¥–æ—Å—Ç–∏–≥–∞—Ç—å 5000 —Ä—É–±–ª–µ–π"", 5000)); // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç—å—é ""–ü—Ä–µ–≤—ã—à–µ–Ω–∏–µ —Å–∫–æ—Ä–æ—Å—Ç–∏"" –≤ —Ö—ç—à-—Ç–∞–±–ª–∏—Ü—É articles

        DriverViolations driverViolations = new DriverViolations(); // –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç DriverViolations –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Ä—É—à–µ–Ω–∏–π –≤–æ–¥–∏—Ç–µ–ª–µ–π

        boolean exit = false; // –û–±—ä—è–≤–ª—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é exit —Ç–∏–ø–∞ boolean –¥–ª—è –≤—ã—Ö–æ–¥–∞ –∏–∑ —Ü–∏–∫–ª–∞
        while (!exit) { // –ó–∞–ø—É—Å–∫–∞–µ–º —Ü–∏–∫–ª while, –ø–æ–∫–∞ exit —Ä–∞–≤–Ω–æ false
            System.out.println(""\n1. –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–∞–≤–æ–Ω–∞—Ä—É—à–∏—Ç–µ–ª—è""); // –í—ã–≤–æ–¥–∏–º –º–µ–Ω—é –Ω–∞ —ç–∫—Ä–∞–Ω
            System.out.println(""2. –ü—Ä–∞–≤–æ–Ω–∞—Ä—É—à–µ–Ω–∏—è"");
            System.out.println(""3. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–∞–≤–æ–Ω–∞—Ä—É—à–µ–Ω–∏—è –≤–æ–¥–∏—Ç–µ–ª—è"");
            System.out.println(""0. –í—ã—Ö–æ–¥"");
            System.out.println(""–í–∞—à –≤—ã–±–æ—Ä: "");
            String operation = scanner.nextLine(); // –°—á–∏—Ç—ã–≤–∞–µ–º –≤—ã–±–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã

            switch (operation) { // –ó–∞–ø—É—Å–∫–∞–µ–º –æ–ø–µ—Ä–∞—Ç–æ—Ä switch –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–µ–π—Å—Ç–≤–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤—ã–±–æ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                case ""1"": // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª ""1""
                    System.out.print(""–í–≤–µ–¥–∏—Ç–µ –§–ò–û: "");
                    String fullName = scanner.nextLine(); // –°—á–∏—Ç—ã–≤–∞–µ–º –§–ò–û –≤–æ–¥–∏—Ç–µ–ª—è —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
                    System.out.print(""–í–≤–µ–¥–∏—Ç–µ –º–∞—Ä–∫—É –º–∞—à–∏–Ω—ã: "");
                    String carBrand = scanner.nextLine(); // –°—á–∏—Ç—ã–≤–∞–µ–º –º–∞—Ä–∫—É –º–∞—à–∏–Ω—ã —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
                    System.out.print(""–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä–Ω—ã–µ –∑–Ω–∞–∫–∏: "");
                    String licensePlate = scanner.nextLine(); // –°—á–∏—Ç—ã–≤–∞–µ–º –Ω–æ–º–µ—Ä–Ω—ã–µ –∑–Ω–∞–∫–∏ –º–∞—à–∏–Ω—ã —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
                    System.out.print(""–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–∞–≤–æ–Ω–∞—Ä—É—à–µ–Ω–∏—è: "");
                    String violation = scanner.nextLine(); // –°—á–∏—Ç—ã–≤–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–∞–≤–æ–Ω–∞—Ä—É—à–µ–Ω–∏—è —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
                    System.out.print(""–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —à—Ç—Ä–∞—Ñ–∞: "");
                    double fine = scanner.nextDouble(); // –°—á–∏—Ç—ã–≤–∞–µ–º —Å—É–º–º—É —à—Ç—Ä–∞—Ñ–∞ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
                    scanner.nextLine(); // –°—á–∏—Ç—ã–≤–∞–µ–º —Å–∏–º–≤–æ–ª –ø–µ—Ä–µ–≤–æ–¥–∞ —Å—Ç—Ä–æ–∫–∏
                    Article article = articles.getOrDefault(violation, new Article(violation, """", fine)); // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—å—é –∏–∑ —Ö—ç—à-—Ç–∞–±–ª–∏—Ü—ã articles –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Å—Ç–∞—Ç—å—é, –µ—Å–ª–∏ –µ–µ –Ω–µ—Ç –≤ —Ç–∞–±–ª–∏—Ü–µ
                    Violation violationObj = new Violation(fullName, carBrand, licensePlate, violation, fine); // –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç Violation —Å –¥–∞–Ω–Ω—ã–º–∏ –æ –Ω–∞—Ä—É—à–µ–Ω–∏–∏
                    driverViolations.addViolation(violationObj); // –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞—Ä—É—à–µ–Ω–∏–µ –≤ —Å–ø–∏—Å–æ–∫ –Ω–∞—Ä—É—à–µ–Ω–∏–π –≤–æ–¥–∏—Ç–µ–ª—è
                    articles.putIfAbsent(violation, article); // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç—å—é –≤ —Ö—ç—à-—Ç–∞–±–ª–∏—Ü—É articles, –µ—Å–ª–∏ –µ–µ –µ—â–µ –Ω–µ—Ç —Ç–∞–º
                    System.out.println(""–ü—Ä–∞–≤–æ–Ω–∞—Ä—É—à–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ: "");
                    System.out.println(""–§–ò–û: "" + violationObj.getFullName());
                    System.out.println(""–ú–∞—Ä–∫–∞ –º–∞—à–∏–Ω—ã: "" + violationObj.getCarBrand());
                    System.out.println(""–ù–æ–º–µ—Ä–Ω—ã–µ –∑–Ω–∞–∫–∏: "" + violationObj.getLicensePlate());
                    System.out.println(""–ü—Ä–∞–≤–æ–Ω–∞—Ä—É—à–µ–Ω–∏–µ: "" + violationObj.getViolation());
                    System.out.println(""–®—Ç—Ä–∞—Ñ: "" + violationObj.getFine());
                    System.out.println(""–û–ø–∏—Å–∞–Ω–∏–µ: "" + article.getDescription());
                    break;
                case ""2"": // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª ""2""
                    System.out.println(""–°–ø–∏—Å–æ–∫ –ø—Ä–∞–≤–æ–Ω–∞—Ä—É—à–µ–Ω–∏–π:"");
                    for (Map.Entry<String, Article> entry : articles.entrySet()) { // –ü–µ—Ä–µ–±–∏—Ä–∞–µ–º –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã —Ö—ç—à-—Ç–∞–±–ª–∏—Ü—ã articles
                        System.out.println(entry.getKey() + "": "" + entry.getValue().getDescription()); // –í—ã–≤–æ–¥–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∏ –æ–ø–∏—Å–∞–Ω–∏–µ –∫–∞–∂–¥–æ–π —Å—Ç–∞—Ç—å–∏
                    }
                    break;
                case ""3"": // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª ""3""
                    System.out.print(""–í–≤–µ–¥–∏—Ç–µ –§–ò–û –≤–æ–¥–∏—Ç–µ–ª—è: "");
                    String driverFullName = scanner.nextLine(); // –°—á–∏—Ç—ã–≤–∞–µ–º –§–ò–û –≤–æ–¥–∏—Ç–µ–ª—è —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
                    List<Violation> driverViolationsList = driverViolations.getViolationsByFullName(driverFullName); // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –Ω–∞—Ä—É—à–µ–Ω–∏–π –≤–æ–¥–∏—Ç–µ–ª—è –ø–æ –µ–≥–æ –§–ò–û
                    if (driverViolationsList.isEmpty()) { // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—É—Å—Ç–æ–π –ª–∏ —Å–ø–∏—Å–æ–∫ –Ω–∞—Ä—É—à–µ–Ω–∏–π
                        System.out.println(""–£ –≤–æ–¥–∏—Ç–µ–ª—è –Ω–µ—Ç –ø—Ä–∞–≤–æ–Ω–∞—Ä—É—à–µ–Ω–∏–π."");
                    } else {
                        System.out.println(""–°–ø–∏—Å–æ–∫ –ø—Ä–∞–≤–æ–Ω–∞—Ä—É—à–µ–Ω–∏–π –≤–æ–¥–∏—Ç–µ–ª—è:"");
                        for (Violation violation1 : driverViolationsList) { // –ü–µ—Ä–µ–±–∏—Ä–∞–µ–º –≤—Å–µ –Ω–∞—Ä—É—à–µ–Ω–∏—è –≤–æ–¥–∏—Ç–µ–ª—è
                            System.out.println(""–ú–∞—Ä–∫–∞ –º–∞—à–∏–Ω—ã: "" + violation1.getCarBrand());
                            System.out.println(""–ù–æ–º–µ—Ä–Ω—ã–µ –∑–Ω–∞–∫–∏: "" + violation1.getLicensePlate());
                            System.out.println(""–ü—Ä–∞–≤–æ–Ω–∞—Ä—É—à–µ–Ω–∏–µ: "" + violation1.getViolation());
                            System.out.println(""–®—Ç—Ä–∞—Ñ: "" + violation1.getFine());
                            System.out.println(""------------------------"");
                        }
                    }
                    break;
                case ""0"": // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª ""0""
                    exit = true; // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π exit –≤ true –¥–ª—è –≤—ã—Ö–æ–¥–∞ –∏–∑ —Ü–∏–∫–ª–∞
                    break;
                default: // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–µ–ª –Ω–µ–≤–µ—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
                    System.out.println(""–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Å–Ω–æ–≤–∞."");
            }
        }
    }
}"
0Ui23PFH,Untitled,Moolah60,JSON,Saturday 30th of March 2024 05:09:36 PM CDT,"[
  4509501,
  7723665,
  33366123,
  17353148,
  14489786,
  14651325,
  10819476,
  13193505,
  13965600,
  33798390,
  10051029,
  33653472,
  11624425,
  15700448,
  6318932,
  5914632,
  16060146,
  33154222,
  32604690,
  9300900,
  12889206,
  33732815,
  33016460,
  32013821,
  6490315,
  33073580,
  2638421,
  11850535,
  33686754,
  16033044,
  3586493,
  33207666,
  33439413,
  5934331,
  33357547,
  11230068,
  9874860,
  16511472,
  14152505,
  13471319,
  33731427,
  2957933,
  32613468,
  33765401,
  10906247,
  9354508,
  33874487,
  13757859,
  6571810,
  6394573,
  6799749,
  15830469,
  17131395,
  33787132,
  32662742,
  6319686,
  33465803,
  16860350,
  33259089,
  11228344,
  14496034,
  17316383,
  33011545,
  14716519,
  15761985,
  6625692,
  13600566,
  17143628,
  14338021,
  12718163,
  15078607,
  5249413,
  15267450,
  33583359,
  15198455,
  32326761,
  4688859,
  32555681,
  15467460,
  15473257,
  14178942,
  12787451,
  16516552,
  32346926,
  13805677,
  32674827,
  33402968,
  11421939,
  16040382,
  13332729,
  12233977,
  13406756,
  32457745,
  9748251,
  6538349,
  33510448,
  16469066,
  9075857,
  16435820,
  13672968,
  12428983,
  15858229,
  12290925,
  33777444,
  9068571,
  4920061,
  10581509,
  16402879,
  33895505,
  33773758,
  5503006,
  14574242,
  16999757,
  32993268,
  11508298,
  11219056,
  32966777,
  10009169,
  16749439,
  8107166,
  32896853,
  33077349,
  17260168,
  10823089,
  33312888,
  6154628,
  33007967,
  7813166,
  13774881,
  32796226,
  17133315,
  33722078,
  5323387,
  2906970,
  33525074,
  11839641,
  15420036,
  12639493,
  9466817,
  14464414,
  13467389,
  32553180,
  11720790,
  32735240,
  33870456,
  33750783,
  33548519,
  32772928,
  13743051,
  13222458,
  16275441,
  33776581,
  15297912,
  9472843,
  8456041,
  17355382,
  8299520,
  34020672,
  11490264,
  32461782,
  16304908,
  15192790,
  33131194,
  9155601,
  16492724,
  15203030,
  15259630,
  32952773,
  8172803,
  15928709,
  16281895,
  13868982,
  17286171,
  9573598,
  32976718,
  33676138,
  9275473,
  16415140,
  8994381,
  32683443,
  32741858,
  33141793,
  32324215,
  11751295,
  33878102,
  6666526,
  8295360,
  33775733,
  5157826,
  33824379,
  33467400,
  11306609,
  17082675,
  16806763,
  33656620,
  14050328,
  14156653,
  16560204,
  32846007,
  14767631,
  33238318,
  17289731,
  10430757,
  14240932,
  32538645,
  33368062,
  12457806,
  32542108,
  12682001,
  11315399,
  16959922,
  14699674,
  16667785,
  15504835,
  14621082,
  9065501,
  6516913,
  33819020,
  33169815,
  14344605,
  33717191,
  17409413,
  10501344,
  33764032,
  11367112,
  33704153,
  13095012,
  6413830,
  12299376,
  16386698,
  33249977,
  9316017,
  4309942,
  11133165,
  11229354,
  32605391,
  33385811,
  16875437,
  11840802,
  16442364,
  16860749,
  7619971,
  14216267,
  16332989,
  10550223,
  15612911,
  11288692,
  11606797,
  4765039,
  16358317,
  8226917,
  5636073,
  32435711,
  32811037,
  15526051,
  32886114,
  33640350,
  7064985,
  33638708,
  6485540,
  11422140,
  32997763,
  32731217,
  14488144,
  32915558,
  9239390,
  33088845,
  13051691,
  13142711,
  10236333,
  17053581,
  552087,
  9209286,
  32453412,
  16943339,
  10758509,
  32366020,
  32440712,
  7435589,
  33399497,
  32471166,
  6645839,
  15931776,
  33022021,
  32652688,
  16608404,
  7084049,
  33489792,
  33745166,
  10849258,
  15108399,
  32535883,
  6971022,
  7201482,
  33344990,
  5102717,
  6148897,
  32416628,
  9099970,
  14800180,
  16447057,
  33009759,
  8783296,
  33464480,
  11219410,
  14205137,
  15166788,
  15722845,
  15692930,
  32914950,
  4976946,
  13167819,
  33837265,
  33684142,
  13206727,
  8475630,
  7378428,
  10897900,
  32612016,
  33734142,
  10699196,
  32628226,
  32359262,
  16932189,
  8787109,
  14127421,
  15333200,
  33003063,
  14910435,
  33339812,
  33691907,
  5546732,
  6459877,
  13810468,
  13262908,
  11121152,
  16435123,
  4766644,
  10931034,
  33517844,
  15662011,
  12254090,
  32471428,
  14131036,
  33729700,
  32991252,
  7667476,
  15149364,
  32671151,
  32808758,
  15844936,
  9499729,
  4812854,
  11490375,
  33394341,
  3572251,
  10846546,
  16414116,
  15930879,
  3324500,
  17351882,
  13043112,
  15869028,
  32453419,
  32480538,
  15278142,
  3769505,
  32917372,
  14852641,
  15716214,
  10927183,
  32348792,
  14797223,
  33580297,
  4322431,
  32044435,
  329316,
  15166629,
  16220241,
  6389664,
  33623201,
  32677564,
  14562935,
  6625821,
  13303019,
  16590070,
  33483064,
  33764041,
  17120912,
  33621808,
  12718029,
  33290370,
  11454686,
  10729907,
  17102803,
  11405146,
  7785101,
  10796844,
  16961335,
  15778811,
  14427969,
  32813594,
  12000582,
  33384051,
  15132922,
  8974572,
  12399147,
  4331645,
  6614821,
  11096629,
  10341223,
  16268671,
  10145818,
  33652671,
  33191985,
  9285001,
  8217973,
  33844851,
  15936730,
  33890549,
  11098326,
  32485950,
  15360007,
  14761987,
  9182203,
  33440432,
  8086321,
  6488827,
  16050626,
  15031778,
  33537234,
  12241352,
  16580245,
  32824078,
  33347011,
  13126568,
  16381731,
  33696343,
  33462136,
  33521470,
  32492725,
  15225622,
  7493010,
  17144169,
  33699973,
  9002178,
  10932086,
  17292431,
  10455128,
  33337020,
  13169626,
  5556913,
  15297521,
  10725634,
  16656224,
  33676804,
  33236941,
  17351077,
  13345116,
  33753223,
  12619199,
  8910183,
  16701316,
  32761837,
  33546055,
  9838682,
  5703319,
  33067542,
  5034208,
  14390281,
  32479622,
  12775255,
  32690069,
  8101676,
  9278389,
  16401584,
  11538418,
  17088966,
  32486233,
  33742918,
  32990580,
  4733809,
  8172722,
  33546743,
  15485906,
  16586199,
  6103086,
  33126348,
  32599699,
  6143217,
  33340088,
  17332829,
  33380254,
  33800109,
  9702104,
  8190388,
  5492009,
  32792727,
  32427906,
  15831716,
  7408684,
  10251337,
  33473534,
  16840158,
  6023256,
  8046205,
  33523103,
  33182174,
  13952186,
  32510953,
  9985665,
  9973784,
  33046128,
  11985329,
  11270361,
  6068358,
  3149254,
  32872847,
  33788764,
  17055379,
  5833475,
  32830051,
  33605294,
  32961632,
  16441424,
  11129864,
  17264240,
  33318291,
  32710617,
  32634865,
  32326065,
  33883650,
  16440326,
  33033661,
  32984344,
  33417220,
  33744922,
  33751789,
  32796187,
  10584742,
  17326179,
  32501183,
  33083919,
  14812542,
  14732139,
  16700733,
  16901667,
  32734952,
  32791674,
  7699249,
  8668427,
  14842403,
  33002230,
  5872960,
  16372911,
  12149185,
  7687354,
  14099318,
  33095017,
  17263763,
  8574429,
  15015435,
  12380315,
  15302746,
  33259857,
  9894797,
  11204764,
  15824256,
  7720780,
  6542279,
  32759560,
  32822320,
  9644159,
  33441684,
  8674362,
  16710429,
  11517289,
  17262224,
  5915557,
  32662175,
  9127655,
  16570445,
  11445532,
  8668635,
  33279429,
  212218,
  15318406,
  32625043,
  32522138,
  15926711,
  12419283,
  5993870,
  13261737,
  4864662,
  14396251,
  11779594,
  14162671,
  33766796,
  33022768,
  11907843,
  33825725,
  32734669,
  8912888,
  15832466,
  34081986,
  13454174,
  33782086,
  3650448,
  11729927,
  32395525,
  32902477,
  33386145,
  17227707,
  15040063,
  9628075,
  33796436,
  32577872,
  9377907,
  33507720,
  33419563,
  17247048,
  13091855,
  12351979,
  32687656,
  32970034,
  4989074,
  32633857,
  33732086,
  33640688,
  4488580,
  16438321,
  15726106,
  12954330,
  15754145,
  33128605,
  33697697,
  6452782,
  33388263,
  33031188,
  33651870,
  10744172,
  15306221,
  32398880,
  33478076,
  10129179,
  16581742,
  13584653,
  33028897,
  16402411,
  11164627,
  5865439,
  10045076,
  6031944,
  32596450,
  33553066,
  33656518,
  8526430,
  7908626,
  9620466,
  33169711,
  17112898,
  14593295,
  12239571,
  5217294,
  6317962,
  12263920,
  33658669,
  16963735,
  8006459,
  33364738,
  33022665,
  33816689,
  17013945,
  14472201,
  32703731,
  33774912,
  9497826,
  13625338,
  16756710,
  4810063,
  33734455,
  33275266,
  11417443,
  33173499,
  12912311,
  33375522,
  9917562,
  32442170,
  32312075,
  8607851,
  33106244,
  33198593,
  10102596,
  32741705,
  33165249,
  33942845,
  12680644,
  13972730,
  15252327,
  16340254,
  9039691,
  12242933,
  8223854,
  33726106,
  32734322,
  33735053,
  32760272,
  15849360,
  15761629,
  16689384,
  13161408,
  32408549,
  7102024,
  15508313,
  11589844,
  33402828,
  8661587,
  33849272,
  10841476,
  10174286,
  15653948,
  33211500,
  17394037,
  15226559,
  33592019,
  16392820,
  14290586,
  12799853,
  16612074,
  13075729,
  15422300,
  33785658,
  33270187,
  33435312,
  16287904,
  10449972,
  14541074,
  33934937,
  32911200,
  16800929,
  5277661,
  33477146,
  5813797,
  10070749,
  33196460,
  13183633,
  33219017,
  32464449,
  10352376,
  9133141,
  33371203,
  10247866,
  15332523,
  7956046,
  33483614,
  5088421,
  10963689,
  8852249,
  5273886,
  32042256,
  33356925,
  33271391,
  17209817,
  32559793,
  15616576,
  13837776,
  33526470,
  10568683,
  16900324,
  7757626,
  32714542,
  9607456,
  16182289,
  17336344,
  14426432,
  12311312,
  33023858,
  33311559,
  15348547,
  15654616,
  15894194,
  16427230,
  33961498,
  33668326,
  16712962,
  33375407,
  13868201,
  33251205,
  32710608,
  17241262,
  12623499,
  9070996,
  33101332,
  33397134,
  7556015,
  7171156,
  33830193,
  15765896,
  16717835,
  5329913,
  3500813,
  10310502,
  33453581,
  11059502,
  10741720,
  5765897,
  17344736,
  15388763,
  11974154,
  11981107,
  13692599,
  33095412,
  32888187,
  32371498,
  32368438,
  33456745,
  33216891,
  10950369,
  9085892,
  11821133,
  11078445,
  33196397,
  8792422,
  17406675,
  33720129,
  9076112,
  16348483,
  8442510,
  33862135,
  14610197,
  9024640,
  16058844,
  32695574,
  13009024,
  15340164,
  12119358,
  33387780,
  32864546,
  15929107,
  33376247,
  2731256,
  8755852,
  16063185,
  15296168,
  33363897,
  16874179,
  14614480,
  32893144,
  10894325,
  17111676,
  33403798,
  16814260,
  33098261,
  11944585,
  32776307,
  13992044,
  12253998,
  33238625,
  6791461,
  33333396,
  9041119,
  32552739,
  8419478,
  33582341,
  33657171,
  32777554,
  7702820,
  8549414,
  32948298,
  3194286,
  32926956,
  6049215,
  4845885,
  17077294,
  16374753,
  32870726,
  17386341,
  16581283,
  8740787,
  14881280,
  32563236,
  16436450,
  9489570,
  32796391,
  5686178,
  15836525,
  13848407,
  16418298,
  5613434,
  16017775,
  33620790,
  5767582,
  33501522,
  11238319,
  33186804,
  12910458,
  10949109,
  16874523,
  16096829,
  13452036,
  33654691,
  13869815,
  15417925,
  11750424,
  33490485,
  16564483,
  33036366,
  13571855,
  8149142,
  9280787,
  2635146,
  5423611,
  33548204,
  33088990,
  33426922,
  16451662,
  15994597,
  7225620,
  12453472,
  4988068,
  14393712,
  6054421,
  32495275,
  14076412,
  7625531,
  9323324,
  16210279,
  16544970,
  9540452,
  33763727,
  17250992,
  8907737,
  11820614,
  10463165,
  33363097,
  9020362,
  16690541,
  32617990,
  32554451,
  6719720,
  17044206,
  9001144,
  14162247,
  32730728,
  8231463,
  15921900,
  7885782,
  12800732,
  17239528,
  15272044,
  12334878,
  9472388,
  15093456,
  33349138,
  13308476,
  33193011,
  11994883,
  16164276,
  11948629,
  13603947,
  33413953,
  9162064,
  33407310,
  14219498,
  11382534,
  14180537,
  10030562,
  11557382,
  33073902,
  33253736,
  7488544,
  32666212,
  32996666,
  33607436,
  32931014,
  9013430,
  33567386,
  9882595,
  12381648,
  9599024,
  33853171,
  15443244,
  16662865,
  10338730,
  32405777,
  9529731,
  33485374,
  14777233,
  32839442,
  17382941,
  16106093,
  33654978,
  33820737,
  14451079,
  32637588,
  16705639,
  5682818,
  14579827,
  8049466,
  15082452,
  11288434,
  14129664,
  13603899,
  16857906,
  33741915,
  32684656,
  9636991,
  32677912,
  7036456,
  11250802,
  9009375,
  12386196,
  16613134,
  33455812,
  33940402,
  6327187,
  33772711,
  5270376,
  14057352,
  7548568,
  13372021,
  14332095,
  33547971,
  10713530,
  16508413,
  7370938,
  9093905,
  13175067,
  5883476,
  32384043,
  32971713,
  13245591,
  15800561,
  7871142,
  11712527,
  14232778,
  32454685,
  33468731,
  10882755,
  7443785,
  7672049,
  7330634,
  14735271,
  15000589,
  32919180,
  33335732,
  32782646,
  6812164,
  16175489,
  11062394,
  33371230,
  15311520,
  32883087,
  16389306,
  14681145,
  12416905,
  33198074,
  16007521,
  32862815,
  15645550,
  12614759,
  5148867,
  13041232,
  16309651,
  33391449,
  9035539,
  15276224,
  9174831,
  14815979,
  33360764,
  6083158,
  32684887,
  33089312,
  14367263,
  33410435,
  15450933,
  33172755,
  33397694,
  4348027,
  33182753,
  10452185,
  14771857,
  12586997,
  15963427,
  33435847,
  32670583,
  33819253,
  4920785,
  33939064,
  6683704,
  15198843,
  11674058,
  13104235,
  9009658,
  33190528,
  32952854,
  3831805,
  12484367,
  32005503,
  33079073,
  921756,
  13097611,
  14141072,
  9460306,
  15444985,
  11185539,
  6929214,
  12067180,
  8556418,
  15778363,
  15327283,
  15278176,
  13000527,
  12045393,
  17041921,
  6884890,
  33363959,
  12827589,
  8236491,
  3848553,
  14969365,
  17289997,
  32625636,
  32488877,
  33342655,
  33634666,
  10819070,
  13187821,
  13467571,
  6493778,
  32815907,
  8223454,
  16302880,
  16597711,
  32859937,
  33445074,
  6491912,
  4902136,
  15758085,
  33825560,
  7495597,
  6885062,
  10454781,
  7115704,
  14591596,
  32052635,
  10189853,
  33479505,
  33998568,
  13994830,
  6229979,
  32745781,
  33514978,
  11283544,
  14625067,
  9844020,
  32828671,
  17321138,
  14409720,
  14608310,
  33881681,
  4685719,
  15588483,
  33563356,
  9589214,
  33820165,
  33701024,
  7031193,
  13570343,
  33488662,
  32730441,
  15437706,
  15823035,
  13808157,
  15532239,
  8412276,
  12425320,
  12429481,
  5566227,
  32372857,
  10634777,
  11713479,
  33780818,
  11724879,
  9645932,
  9058732,
  5363832,
  8294245,
  32398602,
  15197578,
  13067945,
  32543572,
  32078211,
  17280840,
  14105505,
  33104458,
  1119379,
  13353865,
  13589164,
  6090430,
  32686221,
  16738353,
  14234553,
  10571200,
  33220581,
  32462598,
  11935131,
  33751090,
  14218867,
  32767640,
  33907888,
  10119590,
  3136620,
  8521981,
  8632762,
  17390625,
  14997427,
  32936244,
  6513088,
  14616828,
  11937105,
  16985581,
  5998337,
  33311578,
  12975862,
  9537974,
  6936547,
  14796410,
  33450586,
  15552432,
  33328859,
  32901806,
  32740239,
  17036027,
  32428061,
  14229697,
  17188228,
  33692521,
  10318915,
  3269552,
  14688481,
  33865709,
  15904046,
  16929536,
  32579951,
  33722087,
  7084148,
  14290933,
  17315812,
  17277629,
  33730826,
  32810046,
  32536901,
  4418553,
  16432722,
  32752693,
  13850932,
  9527112,
  10355952,
  34036240,
  32458482,
  11066167,
  32801975,
  32519585,
  33768993,
  10172766,
  4950863,
  32461924,
  13681674,
  5047795,
  14743356,
  33829688,
  6448874,
  33711192,
  33063380,
  9343632,
  12427881,
  33034350,
  2853350,
  33111123,
  32448759,
  8598018,
  16142164,
  2997791,
  9157211,
  32598730,
  9789977,
  13800941,
  33059119,
  32752505,
  33064066,
  10481554,
  33823901,
  15225522,
  11817328,
  32726530,
  33367031,
  32970133,
  33486382,
  32931586,
  13812081,
  11423700,
  33044250,
  33065365,
  13413320,
  9744604,
  1079524,
  15392605,
  14316068,
  32715738,
  33802222,
  33769341,
  32849883,
  5637085,
  13532195,
  15828110,
  8677832,
  15092120,
  33827508,
  15236875,
  33498779,
  32413424,
  32891195,
  15442562,
  10646353,
  32848691,
  17170780,
  16931915,
  11502408,
  13162082,
  8617012,
  33535155,
  32542562,
  13846473,
  33239216,
  13383936,
  6425912,
  16568204,
  10920061,
  33355414,
  13271928,
  33496460,
  32911492,
  33714739,
  33547565,
  33723383,
  33238786,
  33500618,
  8622286,
  13841963,
  33551400,
  33864273,
  8098976,
  13802656,
  17404648,
  10271625,
  8966841,
  32752276,
  13970810,
  8289961,
  14686906,
  13933854,
  8638570,
  13328643,
  15878778,
  33550702,
  33791946,
  32456857,
  16759602,
  33179489,
  32026800,
  9865732,
  32930356,
  13247684,
  33318865,
  33102505,
  32505276,
  13443769,
  14630266,
  32812588,
  7323668,
  768265,
  33653100,
  17308503,
  33827828,
  33198787,
  32521679,
  32318151,
  32692881,
  33683634,
  33727617,
  5403322,
  8724716,
  13754364,
  32461013,
  7385371,
  5217264,
  7401131,
  9483159,
  13568366,
  33028590,
  8970048,
  33782921,
  15585522,
  7957879,
  33492533,
  13441348,
  15277532,
  8035530,
  14120260,
  33179293,
  9244668,
  12976711,
  14015969,
  2819096,
  33863939,
  11418361,
  33782412,
  32780889,
  32699411,
  32924612,
  13790743,
  11082678,
  32790917,
  9481530,
  14055386,
  33587184,
  13851707,
  33520495,
  32772056,
  12675765,
  9333752,
  12242835,
  6122187,
  15418689,
  16898541,
  14072168,
  12126853,
  11225860,
  15712799,
  33331704,
  2979442,
  10951664
]"
r7h38PNy,Untitled,Madi_Perth,Linden Scripting,Saturday 30th of March 2024 04:58:32 PM CDT,"    dataserver( key queryid, string data )
    {
        if(queryid == read_key)
        {
            integer count = (integer) data;
            integer index;

            for(index = 0; index < (count+1); ++index)
            {
                string line = llGetNotecardLineSync(""!Playlists"", index);
                if(line == NAK)
                {
                    DS(""NAK"");
                }
                else if(line == EOF)
                {
                    DS(""Notecard Loaded in "" + getTime((integer) llGetTime()));

                    state running;
                }
                else 
                {
                    DS((string) index +"" "" + line);
                    llSetText((string) index+""/""+(string) count, RED, TRUE);
                }
            }
        }"
