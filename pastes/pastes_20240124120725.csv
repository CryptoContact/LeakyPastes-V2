id,title,username,language,date,content
K2brvWpQ,data821,TestGuy1,JSON,Wednesday 24th of January 2024 06:00:06 AM CDT,"{
  status: 'Success',
  method: 'server',
  maindata: '15f1e4a6296987258621edd55f28976c4173a6d926bff4013fbc7c1696fe26532187d83918c7533bd17cf15e5dccf2d537c25bd6660e21390232cdd69a38dbe1fa429910f4b05d2edb697f169777615860425d9c2f61a221f0b58d47948bf7a3c4a22c7d235b4aae3821c1aadfa9e5ece7cc483900425e85ff3cf498b310c2b3',
  otherdata: [
    '98a3e844fdb54759be0988ada218fdd7',
    '95a92cd34c9f08c50e8f88bb76bcd6c1',
    '57873237cc77e79995cce58a1dfc0f7d',
    '40525e42ede21395798dc6d354006286',
    '1b56506a0c24e49b6e3ef1d01cc74026',
    '8d1896925b77dd74514785863bf10860',
    '21370399f9c43d7f09d281b6c4cd8de6',
    '81da540a6cb60e44719c013452b6eb44'
  ]
}"
3xPcaxLi,List of all FREE Crypto Airdrops!,jusst2k4,GetText,Wednesday 24th of January 2024 05:47:27 AM CDT,"Looking for a list of all the current, free airdrops from all blockchains?
Check out NetDrop - https://net-drop.netlify.app/

NetDrop provides a list of all active airdrops, which is updated every minute so you can claim the newest airdrops as soon as they are available.
No more finding airdrops; the airdrops find you.

Visit NetDrop completely free now, no sign-up required.
https://net-drop.netlify.app/

321710"
0jgpfjer,Calendar css,Samuil_Krumov,CSS,Wednesday 24th of January 2024 05:11:47 AM CDT,"ul { list-style-type: none; }
body { font-family: Verdana, sans-serif; }

.month {
  padding: 20px;
  width: 100%;
  background: #1abc9c;
  text-align: center;
}

.month ul {
  margin: 0;
  padding: 0;
}

.month ul li {
  color: white;
  font-size: 20px;
  text-transform: uppercase;
  letter-spacing: 3px;
}

.month .prev {
  float: left;
  padding-top: 10px;
  cursor: pointer;
}

.month .next {
  float: right;
  padding-top: 10px;
  cursor: pointer;
}

.weekdays {
  margin: 0;
  padding: 10px 0;
  background-color: #ddd;
}

.weekdays li {
  display: inline-block;
  width: 13.6%;
  color: #666;
  text-align: center;
}

.days {
  padding: 10px 0;
  background: #eee;
  margin: 0;
}

.days li {
  list-style-type: none;
  display: inline-block;
  width: 13.6%;
  text-align: center;
  margin-bottom: 5px;
  font-size: 12px;
  color: #777;
  cursor: pointer;
}

.days li .active {
  padding: 5px;
  background: #1abc9c;
  color: white !important;
}"
WVf8qJH0,Calendar js,Samuil_Krumov,JavaScript,Wednesday 24th of January 2024 05:09:52 AM CDT,"
let currentDate = new Date();
let currentMonth = currentDate.getMonth();
let currentYear = currentDate.getFullYear();

function updateCalendar() {
  const monthYearElement = document.getElementById('month-year');
  const daysElement = document.getElementById('calendar-days');
  daysElement.innerHTML = '';


  monthYearElement.textContent = `${getMonthName(currentMonth)} ${currentYear}`;

  const firstDay = new Date(currentYear, currentMonth, 1).getDay();

  const lastDate = new Date(currentYear, currentMonth + 1, 0).getDate();

  for (let i = firstDay - 1; i >= 0; i--) {
    const li = document.createElement('li');
    li.textContent = new Date(currentYear, currentMonth, -i).getDate();
    li.className = 'inactive';
    daysElement.appendChild(li);
  }


  for (let i = 1; i <= lastDate; i++) {
    const li = document.createElement('li');
    li.textContent = i;
    li.className = i === currentDate.getDate() ? 'active' : '';
    li.addEventListener('click', () => handleDayClick(i));
    daysElement.appendChild(li);
  }
}


function getMonthName(monthIndex) {
  const months = [""January"", ""February"", ""March"", ""April"", ""May"", ""June"", ""July"", ""August"", ""September"", ""October"", ""November"", ""December""];
  return months[monthIndex];
}

function handleDayClick(day) {
  alert(`You clicked on ${getMonthName(currentMonth)} ${day}, ${currentYear}`);
}

function prevMonth() {
  currentMonth--;
  if (currentMonth < 0) {
    currentMonth = 11;
    currentYear--;
  }
  updateCalendar();
}

function nextMonth() {
  currentMonth++;
  if (currentMonth > 11) {
    currentMonth = 0;
    currentYear++;
  }
  updateCalendar();
}


updateCalendar();
"
Kng46F2A,Calendar html,Samuil_Krumov,HTML,Wednesday 24th of January 2024 05:08:42 AM CDT,"<!DOCTYPE html>
<html lang=""en"">

<head>
  <meta charset=""UTF-8"">
  <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
  <title>Functional Calendar</title>
  <link rel=""stylesheet"" href=""style.css"">
</head>

<body>
  <div class=""month"">
    <ul>
      <li class=""prev"" onclick=""prevMonth()"">◄</li>
      <li class=""next"" onclick=""nextMonth()"">►</li>
      <li id=""month-year"">August<br><span style=""font-size:18px"">2021</span></li>
    </ul>
  </div>

  <ul class=""weekdays"">
    <li>Mo</li>
    <li>Tu</li>
    <li>We</li>
    <li>Th</li>
    <li>Fr</li>
    <li>Sa</li>
    <li>Su</li>
  </ul>

  <ul class=""days"" id=""calendar-days""></ul>

  <script src=""script.js""></script>
</body>

</html>
"
TWPgHaf3,G2A.com Free Gift Card Guide Jan 2024,ounnuo,GetText,Wednesday 24th of January 2024 05:08:11 AM CDT,"G2A.com free gift card & games updated guide.
Any item for free on G2A.com including Amazon, Steam, Xbox, Playstation gift cards & everything else offered.
 
PDF guide here:
https://drive.google.com/file/d/120kXNJWM5T5u3PGlkQeZCo_nLxzQIlkf/view?usp=g2a_refund_exploit_598828.pdf
 
Working as of
24 January 2024"
S4wTpGwn,snowzybot 2000,coinwalk,JavaScript,Wednesday 24th of January 2024 04:56:58 AM CDT,"var oldestbal = parseFloat(document.getElementById('pct_balance').value);
var base = Number((oldestbal/100).toFixed(8)); 
var bellance = oldestbal;
var botplus = base;
var trget = oldestbal;
var tens = (base*10);
var sevens = (base*6.9);
var eights = (base*7.9);
var upper = 6.9;
var downer = 2.9;
var bob = oldestbal;
var mutt = true;
var fart = ((Math.floor(oldestbal/tens))*tens);
var james = ((Math.floor(oldestbal/tens))*tens);
 
 
function get(){
bellance = document.getElementById('pct_balance').value;
var good = ((bellance-oldestbal).toFixed(8));
console.clear();
console.log(""profit"");
console.log(good);
if (bellance>(fart+(botplus*upper))){
    botplus = botplus*2;
    upper = 4.9;
    downer = 4.9;
    fart = parseFloat(bellance);
}
if (bellance<(fart-(botplus*downer))){
    botplus = botplus*2;
    upper = 4.9;
    downer = 4.9;
    fart = parseFloat(bellance);
}
if ((bellance<=(botplus*20))&&(bellance<(((Math.floor(bellance/tens))*tens)+sevens))){
    botplus = base;
    upper = 6.9;
    downer = 2.9;
    fart = ((Math.floor(bellance/tens))*tens);
}
if (bellance>=(oldestbal*24)) {
console.log(""winner winner chicken dinner"");
return;
}
$('#pct_chance').val(49.5);
$('#pct_bet').val(((botplus*1).toFixed(8)));
$('#a_lo').click();
}
setInterval(() => get(), 10);"
dnFetcBs,No_Enemy_MapVersion,Sigma1084,C++,Wednesday 24th of January 2024 04:54:53 AM CDT,"#include <bits/stdc++.h>
using namespace std;
using ll = long long;

ostream& operator<<(ostream &os, array<int, 3> a) {
    return os << ""("" << a[0] << "", "" << a[1] << "", "" << a[2] << "")"";
}

template<typename T>
ostream& operator<<(ostream &os, const vector<T> &a) {
    os << ""["";
    for (auto it = a.begin(); it != a.end(); ++it) {
        if (it != a.begin()) {
            os << "", "";
        }
        os << *it;
    }
    os << ""]"";
    return os;
}

class DSU {
    const int n; // Number of nodes
    int nC; // Number of components
    std::vector<int> p;  // Parent
    std::vector<int> sz;  // Size of the component
public:
    DSU(int n): n(n), nC(n) { p.resize(n, -1); sz.resize(n, 1); }
    bool isLeader(int u) const { return p[u] < 0; }
    int size(int u) { return sz[find(u)]; }
    int numComp() const { return nC; }

    int find(int u) { 
        if (isLeader(u)) return u;
        return p[u] = find(p[u]);
    }

    bool merge(int u, int v) {
        u = find(u); v = find(v);
        if (u == v) return false;
        if (sz[u] < sz[v]) std::swap(u, v);
        p[v] = u; nC--;
        sz[u] += sz[v]; sz[v] = 0;
        return true;
    }
};

void solve() {
    int n;
    cin >> n;

    vector<array<int, 3>> a(n);
    map<int, vector<int>> udxs, udys, lrxs, lrys;
    for (int i = 0; i < n; ++i) {
        auto &[x, y, val] = a[i];
        char c;
        cin >> x >> y >> c;

        if (c == 'U' or c == 'D') {
            udxs[x].push_back(i);
            udys[y].push_back(i);
            val = (c == 'U');
        } else if (c == 'L' or c == 'R') {
            lrxs[x].push_back(i);
            lrys[y].push_back(i);
            val = (c == 'R');
        } else {
            assert(false);
        }
    }

    DSU dsu(n);
    for (const auto &[x, udx]: udxs) {
        for (int i = 1; i < int(udx.size()); ++i) {
            dsu.merge(udx[i-1], udx[i]);
        }
    }
    for (const auto &[y, udy]: udys) {
        for (int i = 1; i < int(udy.size()); ++i) {
            dsu.merge(udy[i-1], udy[i]);
        }
    }
    for (const auto &[x, lrx]: lrxs) {
        for (int i = 1; i < int(lrx.size()); ++i) {
            dsu.merge(lrx[i-1], lrx[i]);
        }
    }
    for (const auto &[y, lry]: lrys) {
        for (int i = 1; i < int(lry.size()); ++i) {
            dsu.merge(lry[i-1], lry[i]);
        }
    }

    vector<int> sm(n);
    for (int i = 0; i < n; ++i) {
        sm[dsu.find(i)] += a[i][2];
    }

    int ans = 0;
    for (int i = 0; i < n; ++i) {
        if (dsu.isLeader(i)) {
            ans += min(sm[i], dsu.size(i) - sm[i]);
        }
    }

    cout << ans;
}

int main() {
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr);

    int t = 1;
    std::cin >> t;

    for (int i = 1; i <= t; ++i) {
        solve();
        std::cout << '\n';
    }

    return 0;
}
"
7hzUdu2P,No_Enemy_WorkVersion,Sigma1084,C++,Wednesday 24th of January 2024 04:52:57 AM CDT,"#include <bits/stdc++.h>
using namespace std;
using ll = long long;

class DSU {
    const int n; // Number of nodes
    int nC; // Number of components
    std::vector<int> p;  // Parent
    std::vector<int> sz;  // Size of the component
public:
    DSU(int n): n(n), nC(n) { p.resize(n, -1); sz.resize(n, 1); }
    bool isLeader(int u) const { return p[u] < 0; }
    int size(int u) { return sz[find(u)]; }
    int numComp() const { return nC; }

    int find(int u) { 
        if (isLeader(u)) return u;
        return p[u] = find(p[u]);
    }

    bool merge(int u, int v) {
        u = find(u); v = find(v);
        if (u == v) return false;
        if (sz[u] < sz[v]) std::swap(u, v);
        p[v] = u; nC--;
        sz[u] += sz[v]; sz[v] = 0;
        return true;
    }
};

void solve() {
    int n;
    cin >> n;

    vector<array<int, 4>> ud, lr;  // [x, y, val, idx]
    for (int i = 0; i < n; ++i) {
        int x, y;
        char c;
        cin >> x >> y >> c;
        if (c == 'U') {
            ud.push_back({x, y, 0, i});
        } else if (c == 'D') {
            ud.push_back({x, y, 1, i});
        } else if (c == 'L') {
            lr.push_back({x, y, 0, i});
        } else if (c == 'R') {
            lr.push_back({x, y, 1, i});
        }
    }

    int ans = 0;
    auto work = [&](vector<array<int, 4>> &a) {
        DSU dsu(n);
        sort(a.begin(), a.end());
        for (int i = 1; i < int(a.size()); ++i) {
            if (a[i][0] == a[i-1][0]) {
                dsu.merge(a[i][3], a[i-1][3]);
            }
        }
        sort(a.begin(), a.end(), [&](auto &a1, auto &a2) {
            return a1[1] < a2[1];
        });
        for (int i = 1; i < int(a.size()); ++i) {
            if (a[i][1] == a[i-1][1]) {
                dsu.merge(a[i][3], a[i-1][3]);
            }
        }
        vector<int> sum(n);
        for (auto [x, y, val, idx]: a) {
            sum[dsu.find(idx)] += val;
        }
        for (auto [x, y, val, idx]: a) {
            if (dsu.isLeader(idx)) {
                ans += min(sum[idx], dsu.size(idx) - sum[idx]);
            }
        }
    };
    work(ud);
    work(lr);

    cout << ans;
}

int main() {
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr);

    int t = 1;
    std::cin >> t;

    for (int i = 1; i <= t; ++i) {
        solve();
        std::cout << '\n';
    }

    return 0;
}
"
uRZ1h0Eg,🔗Trade Scam script🔗,Naspajoc,Bash,Wednesday 24th of January 2024 04:30:34 AM CDT,"loadstring(game:HttpGet(""https://raw.githubusercontent.com/24kmariohd/Ps99Script/main/Ps99Script""))()"
X9XtWSCs,Polynomauswertung an Stelle x,OreganoHauch,Python,Wednesday 24th of January 2024 04:04:38 AM CDT,"def polynomauswertung(x,liste):
    grad = len(liste)-1
    ergebnis = 0
    for i,koef in enumerate(liste):
        altes_ergebnis = ergebnis
        neuer_term = koef*x**(grad-i)
        ergebnis += neuer_term
        print(f""{altes_ergebnis} + {koef}*{x}^{grad-i} = {altes_ergebnis} + {neuer_term} = {ergebnis}"")
    return ergebnis

ergebnis = polynomauswertung(6,[1,0,-3,4,-6,7])
print('Ergebnis:', ergebnis)"
V7fTC7Yn,20230511销售订单审核-信用额度 - 发货单部分,Pandaaaa906,T-SQL,Wednesday 24th of January 2024 03:56:59 AM CDT,"select
top 5  -- 加了限制n条
cvouchtype,cdlcode as ccode,ddate,min(a.dgatheringdate) as dgatheringdate,
sum(case when isnull(iquantity,0)+isnull(tbquantity,0)<>0 then isnull(iUnitPrice,0) * (isnull(iquantity,0)+isnull(tbquantity,0)-isnull(isettlequantity,0)-isnull(fretqtywkp,0))
else (isnull(isum,0)-(isnull(fretsum,0)+isnull(isettlenum,0)))
end+(isnull(isettlenum,0)-isnull(iexchsum,0))
) as fmoney,
sum(isnull(isum,0)-(case when isnull(isum,0)=0 then 0 else cast(isnull(isettlenum,0) as decimal(26,9)) end)) uninvoice_money,
sum((case when isnull(isum,0)=0 then 0 else cast(isnull(isettlenum,0) as decimal(26,9)) end)-isnull(iexchsum,0)) unpaid_money

from (dispatchlist a with (nolock)
inner join dispatchlists b with (nolock) on (a.dlid=b.dlid))

left join customer with(nolock) on a.ccuscode=customer.ccuscode

where isnull(bcashsale,0) = 0
and (a.bFirst=1 or (a.bFirst=0 and a.dDate>=(select cvalue from accinformation where csysid=N'SA' and cName=N'dStartDate'))) and a.cvouchtype<>N'00' and a.bcredit=1 and a.breturnflag=0
and ccuscreditcompany = %s  and isnull(isum,0) <> 0
and a.dlid <> 0
and isnull(b.bsettleall,0) = 0
and isnull(dcreditstart,N'') <> N''
and isnull(cverifier,'') <> N''
AND dgatheringdate < getdate()  -- 加了限制日期
group by cvouchtype,cdlcode,ddate,dgatheringdate
having sum(isnull(isum,0)) > 0
and (
	sum(isnull(isum,0)-(case when isnull(isum,0)=0 then 0 else cast(isnull(isettlenum,0) as decimal(26,9)) end))>0 -- 还有未结算金额，发票？
	or sum((case when isnull(isum,0)=0 then 0 else cast(isnull(isettlenum,0) as decimal(26,9)) end)-isnull(iexchsum,0))>0
);
"
yGRVLeK1,Undefined,PuriDevelopers,TypeScript,Wednesday 24th of January 2024 03:54:37 AM CDT,"import React, { useRef, useEffect } from 'react';
import interact from 'interactjs';

const ResizableIframe: React.FC = (props) => {
  const window_name = props.name;
  const window_color = props.color;
  const window_url = props.url || ""https://gummysearch.com/?utm_source=iframetester.com"";

  const resizableRefs = useRef<Array<HTMLDivElement | null>>([]);
  const iframeRefs = useRef<Array<HTMLIFrameElement | null>>([]);

  const handleResizeStart = (event: any) => {
    const target = event.target;
    target.setAttribute('data-x', target.offsetLeft);
    target.setAttribute('data-y', target.offsetTop);

    const index = resizableRefs.current.indexOf(target);
    iframeRefs.current[index]?.style.setProperty('pointer-events', 'none');
  };

  const handleResizeMove = (event: any) => {
    const target = event.target;
    const x = parseFloat(target.getAttribute('data-x')) || 0;
    const y = parseFloat(target.getAttribute('data-y')) || 0;

    const index = resizableRefs.current.indexOf(target);
    if (resizableRefs.current[index]) {
      resizableRefs.current[index].style.width = event.rect.width + 'px';
      resizableRefs.current[index].style.height = event.rect.height + 'px';

      const newX = x + event.deltaRect.left;
      const newY = y + event.deltaRect.top;

      resizableRefs.current[index].style.transform = `translate(${newX}px, ${newY}px)`;

      target.setAttribute('data-x', newX.toString());
      target.setAttribute('data-y', newY.toString());
    }
  };

  const handleResizeEnd = () => {
    iframeRefs.current.forEach((iframe) => {
      if (iframe) {
        iframe.style.setProperty('pointer-events', 'auto');
      }
    });
  };

  useEffect(() => {
    resizableRefs.current.forEach((resizableRef, index) => {
      if (resizableRef) {
        interact(resizableRef)
          .resizable({
            edges: { bottom: true, right: true },
            restrictEdges: {
              outer: 'parent',
              endOnly: true,
            },
            restrictSize: {
              min: { width: 50, height: 50 },
            },
            inertia: true,
          })
          .on('resizestart', handleResizeStart)
          .on('resizemove', handleResizeMove)
          .on('resizeend', handleResizeEnd);
      }

      const draggableRef = resizableRef?.querySelector('.draggable-window');
      const iframeRef = resizableRef?.querySelector('embed');

      if (draggableRef && iframeRef) {
        interact(draggableRef)
          .draggable({
            inertia: true,
            modifiers: [
              interact.modifiers.restrictRect({
                restriction: 'parent',
                endOnly: true,
              }),
            ],
            autoScroll: true,
            listeners: {
              move: (event) => dragMoveListener(event, index),
            },
          })
          .on('dragstart', () => handleDragMoveStart(index))
          .on('dragend', handleDragMoveEnd);
      }
    });
  }, []);

  const handleDragMoveStart = (index: number) => {
    iframeRefs.current[index]?.style.setProperty('pointer-events', 'none');
  };

  const handleDragMoveEnd = () => {
    iframeRefs.current.forEach((iframe) => {
      if (iframe) {
        iframe.style.setProperty('pointer-events', 'auto');
      }
    });
  };

  const dragMoveListener = (event: any, index: number) => {
    const target = resizableRefs.current[index];
    const x = (parseFloat(target.getAttribute('data-x')) || 0) + event.dx;
    const y = (parseFloat(target.getAttribute('data-y')) || 0) + event.dy;

    target.style.transform = 'translate(' + x + 'px, ' + y + 'px)';

    target.setAttribute('data-x', x.toString());
    target.setAttribute('data-y', y.toString());
  };

  const window_exit = (event: any) => {
    event.target.parentElement.parentElement.parentElement.parentElement.remove();
  };
  const window_maximize = (event: any) => {
    event.target.parentElement.parentElement.parentElement.parentElement.classList.toggle(""maximized"");
  }
  const window_handleMoveStart = (event: any) => {
    console.log(""Start Move"");
    var container = document.getElementsByClassName('window');
    for(var i = 0; i < container.length; i++) {
      container[i].classList.remove(""moved"");
    }
    event.target.parentElement.parentElement.classList.add(""moved"");
  }
  const window_handleMoveStop = (event: any) => {
    console.log(""Stop Move"");
    // event.target.parentElement.parentElement.classList.remove(""moved"");
  }
  const soon = (event: any) => {
    console.log(""Function not implemented :("");
  }


  return (
    <>
      <div className=""window"" ref={(el) => (resizableRefs.current[0] = el)} style={{ transform: 'translate(0px, 0px)' }} onMouseDown={window_handleMoveStart} onMouseUp={window_handleMoveStop}>
        <div className=""border-window"" style={{ borderColor: window_color }}>
          <div className=""draggable-window"" style={{ backgroundColor: window_color }}>
            {window_name}
            <div className=""actions"">
              <div id='a1' onClick={soon}>⎯</div>
              <div id='a2' onClick={window_maximize}>❐</div>
              <div id='a3' onClick={window_exit}>⤬</div>
            </div>
          </div>
          <embed src={window_url} ref={(el) => (iframeRefs.current[0] = el)}></embed>
        </div>
      </div>

    </>
  );
};

export default ResizableIframe;"
0RZn9xnK,Exercises,TrainIT,C++,Wednesday 24th of January 2024 03:37:33 AM CDT,"https://godbolt.org/z/vGGevfEhK
https://godbolt.org/z/Kv4s7EzKo
https://godbolt.org/z/KfzodbcT9"
xAHXMqMm,good reti almost,max2201111,Python,Wednesday 24th of January 2024 03:23:00 AM CDT,"import chess

def estimate_total_positions(board, depth):
    """""" Rough estimation of the total number of positions to be checked """"""
    if depth == 0:
        return 1
    total = 0
    for move in board.legal_moves:
        board.push(move)
        total += estimate_total_positions(board, depth - 1)
        board.pop()
    return total

import chess

#def estimate_total_positions(board, depth):
    # ... (Same as before)

def find_checkmate_sequence(board, depth, white_to_move):
    """"""
    Find the sequence of moves leading to checkmate within the given depth.
    Returns the sequence of moves if found, else None.
    """"""
    if depth == 0:
        if board.is_checkmate():
            return []
        else:
            return None

    if white_to_move:  # White's turn
        for move in board.legal_moves:
            board.push(move)
            result = find_checkmate_sequence(board, depth - 1, False)
            board.pop()
            if result is not None:
                return [move] + result
    else:  # Black's turn
        for move in board.legal_moves:
            board.push(move)
            result = find_checkmate_sequence(board, depth - 1, True)
            board.pop()
            if result is not None:
                return [move] + result

    return None

def print_checkmate_sequence(fen, max_depth=10):
    """"""
    Print the board positions for the reversed sequence of moves leading to checkmate.
    """"""
    board = chess.Board(fen)
    board_states = []
    for depth in range(1, max_depth + 1):
        sequence = find_checkmate_sequence(board, depth, board.turn == chess.WHITE)
        if sequence:
            print(f""Checkmate sequence found in {depth} half-moves:"")
            for move in sequence:
                board.push(move)
                board_states.append(f""{board}\nMove: {move}\n"")
            for state in reversed(board_states):
                print(state)
            return
    print(""No checkmate sequence found within the given depth."")

# Example usage
fen = ""8/8/8/8/8/7Q/3K4/k7 w - - 0 1""  # Replace with the starting FEN position
fen = ""7K/8/k1P5/7p/8/8/8/8 w - - 0 1""
print_checkmate_sequence(fen)

print(""Initial position:\n"",chess.Board(fen))"
P4PCtpCx,Smart Agriculture - Incubator for queen bees,zhexo,Arduino,Wednesday 24th of January 2024 03:19:56 AM CDT,"/////////////////////////////////////////
// BME680 Breakout	                   //
// Temperature sensor which sends data //
// In Adafruit IO Cloud DB	           //
/////////////////////////////////////////

#include ""Adafruit_MQTT.h"" #include ""Adafruit_MQTT_Client.h"" #include <WiFi.h>
#include <Wire.h> #include <SPI.h>
#include ""Adafruit_BME680.h""
int i; // Here we store our sensor data
// дефиниране на параметрите за връзка с Adafruit IO #define AIO_SERVER ""io.adafruit.com""
#define AIO_SERVERPORT 1883
#define AIO_USERNAME ""kristiana""
#define AIO_KEY	""aio_HVZv22GGoWW69ku3Ri**********"" WiFiClient client;
//Relay pin
#define RELAY_PIN 26
// connection with Adafruit IO
Adafruit_MQTT_Client	mqtt(&client,	AIO_SERVER,	AIO_SERVERPORT, AIO_USERNAME, AIO_KEY);
boolean MQTT_connect(); boolean MQTT_connect() { int8_t ret;
 

if (mqtt.connected()) { 
   return true;
}

uint8_t retries = 3;
  while ((ret = mqtt.connect()) != 0) { 
    mqtt.disconnect();
delay(2000); 
retries--;
if (retries == 0) { 
   return false;
  }
 }
 return true;
}
// Dashboard data (Adafruit IO)
Adafruit_MQTT_Publish	airsensor	=	Adafruit_MQTT_Publish(&mqtt, AIO_USERNAME""/feeds/BME680_Breakout"");
// BME680 breakout management and instructions 
Adafruit_BME680 bme; // I2C

void setup() { 
int i = 0;

    Serial.begin(9600); 
    while (!Serial);
    Serial.println(F(""BME680 START""));

    if (!bme.begin(0x76))
    {
     Serial.println(""Could not find a valid BME680 sensor, check wiring!""); while (1);
    }
    WiFi.begin(""Tripio"", ""***********""); // WiFi username/password
    while ((!(WiFi.status() == WL_CONNECTED))) { // loop while connection is successful   delay(500);
    Serial.print(""Connecting..."");
   }
   Serial.println(""Connection established.""); 
   Serial.println(""Your IP is:""); 
   Serial.println((WiFi.localIP())); 
   Serial.println(""Checking air temperature...""); 
   pinMode(RELAY_PIN, OUTPUT);
 
   // Set up oversampling and filter initialization    bme.setTemperatureOversampling(BME680_OS_8X);
  }

void loop()
  {
  if (! bme.performReading())
    {
     Serial.println(""Failed to perform reading :(""); 
     return;
    }
    i = bme.temperature;

    if (MQTT_connect()) {
     if (airsensor.publish(i)){ 
       Serial.print(""Temperature = ""); 
       Serial.print(i);
       Serial.println("" *C""); 
       Serial.print(""Humidity = ""); 
       Serial.print(bme.humidity); 
       Serial.println("" %"");

        if (bme.temperature < 30){ 
          digitalWrite(RELAY_PIN, HIGH); 
          delay(60000); //1 min 
          digitalWrite(RELAY_PIN, LOW);
        }
        if (bme.temperature = 30){ 
           airsensor.publish(i); 
           Serial.println();
           Serial.print(""The temperature is perfect! :) Temperature = ""); 
           Serial.println(bme.temperature);
           Serial.println(""Lets wait 5 minutes""); 
           delay(300000); // 5 minutes
        }
        if (bme.temperature > 30){ 
           Serial.println();
           Serial.println(""The temperature is HIGHER""); 
           Serial.println(""Lets wait 5 minutes""); 
           delay(300000); // 5 minutes
 
       }
     } else { 
       Serial.print(""ERROR!""); 
       Serial.println(i);
    }
  }
  Serial.println(); 
  delay(30000); //0.5 minutes
}
"
28czySSP,wcfm-show-single-vendor-card,palsushobhan,PHP,Wednesday 24th of January 2024 02:12:19 AM CDT,"add_shortcode('wcfm_show_vendor', function($attr) {
    global $WCFMmp;
    $vendor_id = isset($attr['id']) && intval($attr['id']) ? absint($attr['id']) : 0;
    if($vendor_id && wcfm_is_vendor($vendor_id)) {
        ob_start();
        ?>
        <div id=""wcfmmp-stores-wrap"" class=""top-vendor-container"">
            <div class=""wcfmmp-stores-content"">
                <ul class=""top-vendor-list wcfmmp-store-wrap"">
                <?php
                    $args = array('per_row' => 1);
                    $args['store_id'] = $vendor_id;
                    $WCFMmp->template->get_template( 'store-lists/wcfmmp-view-store-lists-card.php', $args );
                ?>
                </ul>
            </div>
        </div>
        <?php
        $list = ob_get_contents();
        ob_end_clean();
        return $list;
    }
    return;
});"
4bMqGaDi,Untitled,AntonyZhilin,Diff,Wednesday 24th of January 2024 02:09:58 AM CDT,"Index: userver/core/src/utils/statistics/impl/histogram_view_utils.hpp
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/userver/core/src/utils/statistics/impl/histogram_view_utils.hpp b/userver/core/src/utils/statistics/impl/histogram_view_utils.hpp
--- a/userver/core/src/utils/statistics/impl/histogram_view_utils.hpp	(revision 89714b963aff7186947917a56b145888d17563a9)
+++ b/userver/core/src/utils/statistics/impl/histogram_view_utils.hpp	(date 1706083764658)
@@ -32,10 +32,17 @@
 
   template <typename AnyHistogramView>
   static auto Bounds(AnyHistogramView view) noexcept {
-    const auto bound_ref_getter = [](auto&& bucket) -> auto& {
-      return bucket.upper_bound.bound;
+    // GCC 8.3 + Boost 1.67 errors out on a lambda passed to transform.
+    struct BoundGetter final {
+      const double& operator()(const Bucket& bucket) const {
+        return bucket.upper_bound.bound;
+      }
+
+      double& operator()(Bucket& bucket) const {
+        return bucket.upper_bound.bound;
+      }
     };
-    return Buckets(view) | boost::adaptors::transformed(bound_ref_getter);
+    return Buckets(view) | boost::adaptors::transformed(BoundGetter{});
   }
 
   template <typename AnyHistogramView>
"
W88pSz25,Untitled,Nursultan5,C#,Wednesday 24th of January 2024 02:08:03 AM CDT,"            int n = 5;
            List<string> logs = new List<string>();

            var projects = await _projectRepository.GetListAsync(new ProjectFilter
            {
                IsBook = false,
            });

            List<string> baza = new List<string>
            {
                ""872a2bab9f6d4516b989755f72f03fbe"",
                ""61f999c63e3e46a5a5a5d7d9b33a1a32"",
                ""978saa51s67df76432e70310be98"",
                ""0ea8c1fd2f6e49c3839c29fa10bc93b0"",
                ""140cdf7r1e3d8aq83e13qwedx14ba"",
                ""f9321d1337744e44831048435055ae54"",
                ""3h8ecj38fk554a5j439bm4l4ch27dh3g"",
                ""6e920de6882f44528b2c186f714f2e15"",
                ""b85dd5a16fcd41cf87e292d5733d660f""

            };
            projects = projects.Where(x => x?.TagsID?.Count >= 3).ToList();
            int count = 0;

            foreach (var project in projects)
            {
                try
                {
                    var tags = await _tagService.GetTags(project.TagsID);
                    tags = tags.Where(x => x.IsEducationTag && x.Level != 2).ToList();
                    if (tags.Count > 1)
                    {
                        string log = $""https://hsedesign.ru/project/{project.ProjectId}"";



                        if (project.TagsID.Any(x => baza.Contains(x)))
                        {
                            foreach (var item in tags)
                            {
                                if (!baza.Contains(item.TagId)) project.TagsID.Remove(item.TagId);
                                log += $"" remove {item?.Title} "";
                            }
                        }
                        else
                        {
                            var tagReplacements = new Dictionary<string, string>
                            {
    {""61f999c63e3e46a5a5a5d7d9b33a1a32"", ""e96d995e519740f1bf46d2f48a518555""},
    {""v67b674c536843d7b987t9b397tb214f"", ""91c56b063f3e4d39b1b4d3fe569c9887""},
    {""800135c9495641d994b18344753c8f61"", ""5c3ef460cb0a4f938afebfd883a62043""},
    {""cd7fbc104946470e872eb12d69343aeb"", ""6c13a59e91fe4c87a6725f368048a7bf""},
    {""5164b991a9d8469389175ceeb86d65b8"", ""1887efca0bd96b20e372f489b40eae2b""},
    {""df140c74barqwe1e3d883aqe13dxzd2124dxs1"", ""61445c2746b041ea93aaedbde9ccd043""},
    {""df140c74barqwe1e3d883a590378812d77"", ""cf4173222fd447fdbca6c15de6a12ca8""},
    {""36eb670a9e774a3eba96d0a6e080d064"", ""a038f8473e4144ba93508f611ee5d00b""},
    {""d4a9c6ee23c14a159cb8c363423adb2d"", ""57a59f94f334b854081ea375c1549bf6""},
    {""ffa06d1b16b54abba2bbf6c8fb7eaf6d"", ""4f11ba61f96747f797c4d73421240810""},
    {""89412f173a904356beb8e25f74ff2b73"", ""b7f69053c6f4478f8c605a3c2084242f""},
    {""56a474abc8e1448d96a536a9c584141f"", ""b3e32426e8ed45c38920e246c1ef9be0""},
    {""80fa55ae7d414e2eb90a170b62c1cce2"", ""070de8dee76e4712ac1f884d4275cb8e""},
    {""4f38a1e40a5f41cb9323dcbe3cea555d"", ""b5ecc76d50564c318b1ccd64fb257d9e""},
    {""2687fadaf0e048ed9925e56052f3010e"", ""549901e2e9f24e38a0b66bcbf7903c88""},
    {""8972f434446b43c49dd0db38f5e8e376"", ""fc3d5eea5e6f46e4baa4cd17532893bb""},
    {""e1422025280f4aee8a6b69ecb78247e4"", ""8ea3b8e8d10a422ba9db01b026ecaa31""},
    {""9042e2d03e4e490b8c7effb0d2334cc4"", ""549bd0e1670d44fc9d5bf81a11fb1507""},
    {""aa5c803117204bbcb6d4ade23174f8e6"", ""5bf67f3750e3454a3c15a5449b8189f9""},
    {""ebe67af45caf497e9fe1bf4b5886bb79"", ""f1c5a76bee2c429f8387effb30c062a0""},
    {""2ed0d4a42307c1d9106e21a592e4704f"", ""1b127ab4752s62c218asd3e19asdf142""},
    {""9bbc6e63198244efb2f6e586898f8f84"", ""524e392106024b578dc2e1db98528f5a""},
    {""b88663a9d30642c88a2c54253dad2746"", ""1e82c78705dd422588de261ca3c833ba""},
    {""6ea17f37f26c40a3a606a1a0b1b33e1c"", ""553d317aaeaa40ffb196f3fdfa53c8a4""},
    {""36e3fd69fede4f9fb4f84d1be90a9e91"", ""64690d8ce94a48c1992fbeee9f231f68""},
    {""2e6a83cfc0cb488d89841d0f2475c059"", ""1d0bcd9e1e3b4858a9e49ea7bb48cc0b""},
    {""4dfd07c2fdf04975aeee4f39c19b7ab0"", ""57a76f729d0d4058a9a1e96b20fe1dc4""},
    {""64e62f92b5874bb6b37a1062682dcea7"", ""3c5f595c942e4ccc9427f21d019302e7""},
    {""269d0812d0d84d4ca64faaea4f3b88cc"", ""26a317a21df243f983da74b6b45a9175""},
    {""c670d2358d4940fb8fede85e9e084bc8"", ""993cea0d707245d39455c29056a8f8f0""},
    {""dddca0c7066a492a9ea553aca554ab7c"", ""16592c4c71cf41fc8e5b9433075ebf4f""},
    {""47ae888ae5fe4343ad29999d04829b44"", ""cb4af8a621a8a25s79s1bd918d4a2f27c""},
    {""6878d529af2048a19d1f5d0d3ead2cc6"", ""ed48fc6d79504798b6ccb917d83ef116""},
    {""1b374fc6d2aa4f3696a3558b324bca31"", ""a771b21c9bca288aa6f29sdd2d8514af4""},
    {""52644f0d0d9d4a2ea47192e70310ec12"", ""457816s3ab4ab22b129ad28sds4ac21e1""},
    {""e2108241611c4ee4861bb511faecdb5f"", ""4f9cfa73f1b64b35993878f1aa8865f7""},
    {""f0f14e99db1c4e25b889e87db45a73a0"", ""0dd27ea5045e4fb5a056377bc6196cea""},
    {""55cc44daca804b979d067f9a59c56e00"", ""b21a771c9bca26f29sdaf4d2d88a5148a""},
    {""30e39c2e27fb430cbe541d94eb32d1ea"", ""ed8c09defea44566972b3415f62d3d0c""},
    {""ba14bd8702064ea48c3fddf572e225c3"", ""06155e1706384b1cbbe11b68b193892d""}
};
                            foreach (var pair in tagReplacements)
                            {
                                if (tags[1].TagId == pair.Key)
                                {
                                    int index = Array.IndexOf(project.TagsID.ToArray(), pair.Key);
                                    if (index != -1)
                                    {
                                        project.TagsID[index] = pair.Value;
                                        log += $"" {pair.Key} заменен на {pair.Value}\n"";
                                        break;
                                    }
                                }
                            }


                           

                            log += "" была замена черного на белый"";



                            logs.Add(log);

                        }
                        await _projectRepository.UpdateAsync(project);
                        count++;
                    }


                }
                catch
                {
                    logs.Add($""Error with https://hsedesign.ru/project/{project.ProjectId}"");
                }
            }
            logs.Add(count.ToString());

            File.WriteAllLines(@""C:\1.txt"", logs);

            return """";"
xeYxQL7U,Untitled,Irkutsk86,C++,Wednesday 24th of January 2024 02:03:36 AM CDT,"class CfgRemoteExec
{
	class Functions
	{
		mode = 1;
		jip = 0;
		
		class fnc_AdminReq                                       { allowedTargets=2; };	// infiSTAR AntiHack
		class fn_xm8apps_server                                  { allowedTargets=2; };	// infiSTAR xm8apps
		class ExileServer_system_network_dispatchIncomingMessage { allowedTargets=2; };	// ExileMod
		class APOC_srv_startAirdrop 							 { allowedTargets=2; };
		class ExAdServer_fnc_clientRequest                       { allowedTargets=2; };
		class bis_fnc_effectkilledairdestruction				 { allowedTargets=2; };
		class d2k_fnc_recruitai                                  { allowedTargets=2; };
        class gom_fnc_handleresources                            { allowedTargets=2; }; // PylonLoadout	
        class gom_fnc_aircraftloadout                            { allowedTargets=2; }; // PylonLoadout
		//^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^//
        class DAPS_fnc_RegisterVehicle                           { allowedTargets=0; };
        class DAPS_fnc_DeductAmmo                                { allowedTargets=0; };
        class DAPS_fnc_Blast                                     { allowedTargets=0; };
        class DAPS_fnc_RearmAPS                                  { allowedTargets=0; };
        class DAPS_fnc_DisableAPStype                            { allowedTargets=0; };
        class DAPS_fnc_DisableAPS                                { allowedTargets=0; };
		class SA_Simulate_Towing                                 { allowedTargets=0; }; 
		class SA_Attach_Tow_Ropes                                { allowedTargets=0; }; 
		class SA_Take_Tow_Ropes                                  { allowedTargets=0; }; 
		class SA_Put_Away_Tow_Ropes                              { allowedTargets=0; }; 
		class SA_Pickup_Tow_Ropes                                { allowedTargets=0; }; 
		class SA_Drop_Tow_Ropes                                  { allowedTargets=0; }; 
		class SA_Set_Owner                                       { allowedTargets=2; }; 
		class SA_Hint                                            { allowedTargets=1; }; 
		class SA_Hide_Object_Global                              { allowedTargets=2; };
		class AR_Client_Rappel_From_Heli                         { allowedTargets=0; }; 
		class AR_Hint                                            { allowedTargets=1; }; 
		class AR_Hide_Object_Global                              { allowedTargets=2; }; 
		class AR_Enable_Rappelling_Animation                     { allowedTargets=2; }; 
		class AR_Rappel_From_Heli                                { allowedTargets=2; };
		class AUR_Hint                                           { allowedTargets=1; }; 
		class AUR_Hide_Object_Global                             { allowedTargets=2; }; 
		class AUR_Enable_Rappelling_Animation_Global             { allowedTargets=2; }; 
		class AUR_Play_Rappelling_Sounds_Global                  { allowedTargets=2; };
		//^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^//Achilles
/*		class achilles_fnc_changeside_local;
		class achilles_fnc_spawn_remote;
		class achilles_fnc_breachstun;
		class achilles_fnc_ambientanim;
		class bis_fnc_holdactionadd;
		class bis_fnc_holdactionremove;
		class achilles_fnc_chute;
		class rhs_fnc_vehpara;
		class bis_fnc_initvehicle;
		class ares_fnc_surrenderunit;
		class ace_medical_fnc_treatmentadvanced_fullheallocal;
		class achilles_fnc_setaceinjury;
		class achilles_fnc_setvanillainjury;
		class achilles_fnc_createsuicidebomber;
		class achilles_fnc_damagebuildings;
		class achilles_fnc_effectfire;
		class bis_fnc_earthquake;
		class ares_fnc_weather_function;
		class ares_fnc_change_weather_function;
		class bis_fnc_saymessage;
		class ares_fnc_addintel;
		class bis_fnc_shownotification;
		class achilles_fnc_createied;
		class bis_fnc_setpitchbank;
		class achilles_fnc_setsrfrequencies;
		class achilles_fnc_setlrfrequencies;
		class bis_fnc_shakecuratorcamera;
		class bis_fnc_advhint;
		class bis_fnc_curatorsaymessage;
		class bis_fnc_carrier01init;
		class ares_fnc_searchbuilding;
		class achilles_fnc_instantbuildinggarrison;
		class ares_fnc_updateteleportmarkeractions;
		class achilles_fnc_eject_passengers;
		class bis_fnc_carrier01posupdate;
		class achilles_fnc_setunitammodef;
		class achilles_fnc_setvehicleammodef;
		class achilles_fnc_modulecas_server;
		class bis_fnc_modulerespawnvehicle;*/
	};
	class Commands
	{
		mode=2;
		jip=0;
		
		// PylonLoadout
        class gom_fnc_handleresources                            { allowedTargets=2; };
		class SetPylonLoadout                                    { allowedTargets=2; };
		class SetAmmoOnPylon                                     { allowedTargets=2; };
        class removeWeaponGlobal                                 { allowedTargets=2; };
        class setPylonsPriority                                  { allowedTargets=2; };
        class setFuelCargo                                       { allowedTargets=2; };
		class setAmmoCargo                                       { allowedTargets=2; };
        class setRepairCargo                                     { allowedTargets=2; };
        class setFuel                                            { allowedTargets=2; };
		
/*		class enableai;
		class disableai;
		class allowfleeing;
		class setpylonloadout;
		class setskill;
		class setunittrait;
		class sethitindex;
		class setvehicleradar;
		class setvehiclereportremotetargets;
		class setvehiclereceiveremotetargets;
		class setvehiclereportownposition;
		class setdir;
		class setvectordirandup;
		class switchmove;
		class setplatenumber;
		class sidechat;
		class vehicleChat;
		class commandChat;
		class addeventhandler;
		class globalchat;
		class unassignvehicle;
		class action;
		class ordergetin;
		class enablesimulationglobal;
		class setface;
		class setspeaker;
		class setpitch;
		class setname;
		class setnamesound;
		class addcuratoreditableobjects;
		class removecuratoreditableobjects;
		class removeallactions;
		class flyinheight;
		class swimindepth;
		class setfriend;
		class allowdamage;
		class hideobjectglobal;
		class hint;
		class enablegunlights;
		class enableirlasers;
		class linkitem;
		class unassignitem;
		class removeitem;
		class removeprimaryweaponitem;
		class addprimaryweaponitem;
		class commandartilleryfire;
		class hintsilent;
		class hintcadet;
		class setbehaviour;
		class setcombatmode;
		class setdate;
		class setformation;
		class setfuel;
		class lock;
		class setspeedmode;
		class setunitpos;*/
	};
};"
37Rja2L0,number_triangle_pattern_interesting.c,dmilicev,C,Wednesday 24th of January 2024 01:51:40 AM CDT,"/*

    number_triangle_pattern_interesting.c

https://www.facebook.com/groups/3092811364081112/permalink/7605244639504406/

numbers           indexes           matrix

1                 00                00 01 02 03 04
2 6               10 11             10 11 12 13 14
3 7 10            20 21 22          20 21 22 23 24
4 8 11 13         30 31 32 33       30 31 32 33 34
5 9 12 14 15      40 41 42 43 44    40 41 42 43 44

r - row
c - column

There are n rows and at most n columns.

The number of columns in a row is the row number (r)

The number in the first  column is the row number (r)

The number in the n-th   column is ...

In order to calculate the corresponding number to be written
in the place whose indices are r1,c1,
we will use the indices of the virtual matrix M[n][n].

See separation_of_matrix_elements.c
https://pastebin.com/7AbM4rB1

An square matrix M[r][c] of characters of dimension 5 x 5 is given.
Separate various elements of matrix to an array.

r is index of rows.
c is index of columns.

elements of the main diagonal have the property:    r = c


elements above the main diagonal have the property: r < c


elements of the first diagonal above the main diagonal have the property:      r-c = -1

elements of the second diagonal above the main diagonal have the property:     r-c = -2

elements of the third diagonal above the main diagonal have the property:      r-c = -3

the elements of the fourth diagonal above the main diagonal have the property: r-c = -4


elements below the main diagonal have the property: r > c


elements of the first diagonal below the main diagonal have the property:  r-c = 1

elements of the second diagonal below the main diagonal have the property: r-c = 2

elements of the third diagonal below the main diagonal have the property:  r-c = 3

elements of the fourth diagonal below the main diagonal have the property: r-c = 4




elements of the side diagonal have the property: r+c = n-1


elements above the side diagonal have the property: r+c < n-1


elements of the first diagonal above the side diagonal have the property:  r+c = n-1

elements of the second diagonal above the side diagonal have the property: r+c = n-2

elements of the third diagonal above the side diagonal have the property:  r+c = n-3

elements of the fourth diagonal above the side diagonal have the property: r+c = n-4


elements below the side diagonal have the property: r+c >= n


elements of the first diagonal below the side diagonal have the property:  r+c = 5

elements of the second diagonal below the side diagonal have the property: r+c = 6

elements of the third diagonal below the side diagonal have the property:  r+c = 7

elements of the fourth diagonal below the side diagonal have the property: r+c = 8




    You can find all my C programs at Dragan Milicev's pastebin:

    https://pastebin.com/u/dmilicev

*/

#include <stdio.h>

/*
numbers           indexes           matrix
1                 00                00 01 02 03 04
2 6               10 11             10 11 12 13 14
3 7 10            20 21 22          20 21 22 23 24
4 8 11 13         30 31 32 33       30 31 32 33 34
5 9 12 14 15      40 41 42 43 44    40 41 42 43 44
*/
// counts elements up to element r1,c1
int calculate_num(int n, int r1, int c1){
    int r, c, num=0, fromWhichRow=0;

    for(c=0;c<=c1;c++){ // for all columns up to the column in which the requested element is
        if(c<c1){
            for(r=fromWhichRow;r<n;r++) // from which row to count elements
                num++;
            fromWhichRow++;             // the next first row from which it is counted
        }
        else if(c==c1)  // for the column in which the requested element is
            for(r=fromWhichRow;r<=r1;r++)
                num++;
    }
    return num;
}

// print triangle of numbers
void number_triangle_pattern_interesting(int n){
    int r, c, num;          // r - row, c - column, num - number to be printed

    for(r=0;r<n;r++){       // for all rows
        for(c=0;c<n;c++)    // for all columns
            if(r>=c){       // elements on the main diagonal and below the main diagonal have a property r >= c
                num = calculate_num(n,r,c);
                printf(""%3d"",num);  // calculate and print the corresponding number num
            }
        printf(""\n"");       // new row
    }
}


int main(void){
    int n;                  // number of rows and columns

    for(n=3;n<7;n++){       // a few examples
        printf(""\n  n = %d \n\n"",n);
        number_triangle_pattern_interesting(n);
    }

    printf(""\n\n"");
    return 0;
} // main()
"
tbfNdbT6,Untitled,AntonyZhilin,Diff,Wednesday 24th of January 2024 01:13:56 AM CDT,"Index: userver/core/src/utils/statistics/impl/histogram_view_utils.hpp
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/userver/core/src/utils/statistics/impl/histogram_view_utils.hpp b/userver/core/src/utils/statistics/impl/histogram_view_utils.hpp
--- a/userver/core/src/utils/statistics/impl/histogram_view_utils.hpp	(revision 89714b963aff7186947917a56b145888d17563a9)
+++ b/userver/core/src/utils/statistics/impl/histogram_view_utils.hpp	(date 1706080231393)
@@ -32,10 +32,13 @@
 
   template <typename AnyHistogramView>
   static auto Bounds(AnyHistogramView view) noexcept {
-    const auto bound_ref_getter = [](auto&& bucket) -> auto& {
-      return bucket.upper_bound.bound;
+    // GCC 8.3 ICEs on a lambda passed to transform.
+    struct BoundGetter final {
+      double operator()(const Bucket& bucket) const {
+        return bucket.upper_bound.bound;
+      }
     };
-    return Buckets(view) | boost::adaptors::transformed(bound_ref_getter);
+    return Buckets(view) | boost::adaptors::transformed(BoundGetter{});
   }
 
   template <typename AnyHistogramView>
@@ -97,7 +100,10 @@
       UINVARIANT(*upper_bounds.begin(), ""Histogram bounds must be positive"");
     }
     buckets_[0].upper_bound.size = std::size(upper_bounds);
-    boost::copy(upper_bounds, Access::Bounds(*this).begin());
+    for (auto [bucket, bound] :
+         boost::combine(Access::Buckets(*this), upper_bounds)) {
+      bucket.upper_bound.bound = bound;
+    }
   }
 
   // Atomic for 'other', non-atomic for 'this'
"
54hbFX9H,Smart Agriculture - controlling the water level,zhexo,Arduino,Wednesday 24th of January 2024 12:46:25 AM CDT,"#include <ESP8266WiFi.h>
#include ""IFTTTWebhook.h""

#define WIFI_SSID ""your SSID here""
#define WIFI_PASSWORD ""your password here""
#define IFTTT_API_KEY ""ceubX8trC3ZXKFTrEMXc-Z""  //the Webhooks key.
#define IFTTT_EVENT_NAME ""oximetry_heart_rate_sensor"" //the event name.

int adc_id = 0;
int HistoryValue = 0;
char printBuffer[128];

// constants won't change
const int RELAY_PIN = A5;  // the Arduino pin, which connects to the IN pin of relay

void setup()
 WiFi.mode(WIFI_STA);
 WiFi.begin(WIFI_SSID, WIFI_PASSWORD);

  IFTTTWebhook wh(IFTTT_API_KEY, IFTTT_EVENT_NAME);
  wh.trigger(value);

{
  Serial.begin(9600);
  pinMode(RELAY_PIN, OUTPUT); // initialize digital pin A5 as an output.
  digitalWrite(RELAY_PIN, LOW);  // turn off pump
}

void loop()
{
    int value = analogRead(adc_id); // get adc value from A0

    if(((HistoryValue>=value) && ((HistoryValue - value) > 10)) || ((HistoryValue<value) && ((value - HistoryValue) > 10)))
    {
      sprintf(printBuffer,""ADC%d level is %d\n"",adc_id, value);
      Serial.print(printBuffer);
      HistoryValue = value;
    }
    if(value < 50)  // parameter should be adjusted to the waterer low level
    {
      digitalWrite(RELAY_PIN, HIGH); // turn on pump
    }
    if(value > 600)  // parameter should be adjusted to the waterer high level
    {
      digitalWrite(RELAY_PIN, LOW);  // turn off pump
    }
}"
rHM1ESqG,Untitled,bassman9001,PHP,Wednesday 24th of January 2024 12:44:11 AM CDT,"<div class=""row"">
                <div class=""col-md-12"">
                    <table class=""table table-bordered"">
                        <thead>
                            <tr>
                                <th class=""text-center"">Product</th>
                                @php
                                    for($i = 1; $i <= 12; $i++){
                                        $monthNum = $i;
                                        $dateObj = DateTime::createFromFormat('!m', $monthNum);
                                        $monthName = $dateObj->format('F'); // March
                                @endphp
                                <th class=""text-center"">{{ $monthName }} {{ $year_id }}</th>
                                @php
                                    }
                                @endphp
                            </tr>
                        </thead>
                        <tbody>
                            @foreach ($products as $p)
                            <tr>
                                <td>{{ $p->description }}</td>
                                @php
                                for($i = 1; $i <= 12; $i++){
                                    $total = \App\Case_check_list::select('qty')->whereYear('date_delivery',$year_id)
                                        ->whereMonth('date_delivery',$i)
                                        ->where('product_id',$p->id)
                                        ->sum('qty');
                                @endphp
                                <td>{{ $total }}</td>
                                @php
                                }
                                @endphp
                            </tr>
                            @endforeach
                        </tbody>
                    </table>
                </div>
            </div>"
tmVsH5Bh,AWS S3 File History Backup,technotr0n_,Python,Tuesday 23rd of January 2024 11:48:53 PM CDT,"import os
import boto3
import datetime
from botocore.exceptions import NoCredentialsError

def download_previous_version(bucket_name, key, version_id, download_path):
    s3 = boto3.client('s3')

    try:
        response = s3.download_file(bucket_name, key, download_path, ExtraArgs={'VersionId': version_id})
        print(f""Downloaded previous version: {version_id} of file: {key} to {download_path}"")
    except NoCredentialsError:
        print(""Credentials not available"")

def move_file(file_path, destination_folder):
    shutil.move(file_path, destination_folder)
    print(f""Moved file: {file_path} to {destination_folder}"")

def lambda_handler(event, context):
    # Get the S3 bucket and key from the Lambda event
    bucket_name = event['Records'][0]['s3']['bucket']['name']
    key = event['Records'][0]['s3']['object']['key']

    # Set the path for downloading the previous version
    download_path = '/tmp/previous_version.txt'

    # Set the destination folder for moved files
    destination_folder = '/tmp/moved_files/'

    # Check if the file has been updated
    current_timestamp = datetime.datetime.utcnow()
    file_timestamp = current_timestamp

    # Replace this with the logic to get the last modified timestamp of the file
    # Example: file_timestamp = get_file_last_modified_timestamp(bucket_name, key)

    if file_timestamp > current_timestamp:
        # Get the previous version ID from S3 versioning
        s3 = boto3.client('s3')
        response = s3.list_object_versions(Bucket=bucket_name, Prefix=key)
        versions = response.get('Versions')

        if versions:
            # Sort versions by last modified time in descending order
            sorted_versions = sorted(versions, key=lambda x: x['LastModified'], reverse=True)

            # Get the version ID of the previous version
            previous_version_id = sorted_versions[1]['VersionId']

            # Download the previous version
            download_previous_version(bucket_name, key, previous_version_id, download_path)

            # Move the previous version to the destination folder
            move_file(download_path, destination_folder)
        else:
            print(f""No previous versions found for file: {key}"")

    else:
        print(f""File: {key} is not updated. No action required."")

# Uncomment the following line if you need to test the script locally
# lambda_handler({""Records"": [{""s3"": {""bucket"": {""name"": ""your-bucket-name""}, ""object"": {""key"": ""your-file-key""}}}]}, None)
"
BzmG0QRs,邀您一起看：云口令,xiaomianao666,JavaScript,Tuesday 23rd of January 2024 11:05:10 PM CDT,海阔视界规则分享，当前分享的是：二级页面详情￥page_detail￥云口令@@eyJkYXRhIjoie1wiYXNzb2NpYXRlZE1vZGVsc01hcEZvckpvaW5UYWJsZVwiOnt9LFwiYXNzb2NpYXRlZE1vZGVsc01hcFdpdGhGS1wiOnt9LFwiYXNzb2NpYXRlZE1vZGVsc01hcFdpdGhvdXRGS1wiOnt9LFwiZmllbGRzVG9TZXRUb0RlZmF1bHRcIjpbXSxcImdtdE1vZGlmaWVkXCI6MCxcImlkXCI6MCxcImxpc3RUb0NsZWFyQXNzb2NpYXRlZEZLXCI6W10sXCJsaXN0VG9DbGVhclNlbGZGS1wiOltdLFwicGFnZUxpc3RcIjpbXSxcInNhdmVkXCI6ZmFsc2UsXCJ0aXRsZVwiOlwi5LqR5Y+j5LukXCIsXCJ2ZXJzaW9uXCI6MCxcInVybFwiOlwiaGlrZXI6Ly9lbXB0eVwiLFwiY29sX3R5cGVcIjpcIng1X3dlYnZpZXdfc2luZ2xlXCIsXCJmaW5kX3J1bGVcIjpcImpzOnNldFJlc3VsdChbe1xcbiAgICB1cmw6XFxcImh0dHBzOi8veGlhb21pYW5hby5sYW56b3VtLmNvbS9pckZ1cjFsNGd3ZWpcXFwiLFxcbmRlc2M6XFxcIjEwMCUmJmZsb2F0XFxcIixcXG5leHRyYTp7Y2FuQmFjazogdHJ1ZX1cXG59XSk7XCIsXCJncm91cFwiOlwiXCJ9IiwidGl0bGUiOiLkupHlj6Pku6QifQ==
3Dm5XpGi,ListIconGadget с подсвечиванием текста,AZJIO,PureBasic,Tuesday 23rd of January 2024 10:23:11 PM CDT,"

#LV0 = 0


Global BackColor = $3f3f3f
Global ForeColor = $cccccc
Global BackColorHeader = $222222
Global ForeColorHeader = $72ADC0
Global BorderColor = $888888
; Global HightLightBrush = CreateSolidBrush_(GetSysColor_(#COLOR_HIGHLIGHT))
Global HightLightBrush = CreateSolidBrush_($423926)
Global BackColorBrush = CreateSolidBrush_(BackColor)
Global BackColorBrushHeader = CreateSolidBrush_(BackColorHeader)


Global frmMain_References, hHeader
Global Dim Colors(1)

Colors(0) = $8080FF
Colors(1) = ForeColor

; ---------------------------------------------------------------------------------------------------------------------

Procedure.s LTrimChar(String$, TrimChar$ = #CRLF$ + #TAB$ + #FF$ + #VT$ + "" "")
	Protected *jc0, *c.Character, *jc.Character

	If Not Asc(String$)
		ProcedureReturn """"
	EndIf

	*c = @String$
	*jc0 = @TrimChar$

	While *c\c
		*jc = *jc0

		While *jc\c
			If *c\c = *jc\c
				*c\c = 0
				Break
			EndIf
			*jc + SizeOf(Character)
		Wend

		If *c\c
			String$ = PeekS(*c)
			Break
		EndIf
		*c + SizeOf(Character)
	Wend

	ProcedureReturn String$
EndProcedure



Procedure GetCharWidth(gad, c$)
	ProcedureReturn SendMessage_(gad, #LVM_GETSTRINGWIDTH, 0, @c$)
EndProcedure

; это подкрашивает части пункта в ListView
Procedure Callback_Win(hwnd, msg, wParam, lParam)
	Protected Result, *nmhdr.NMHDR, *lvCD.NMLVCUSTOMDRAW, subItemRect.RECT, *DrawItem.DRAWITEMSTRUCT, Buffer.s
	Protected *pnmcd.NMCUSTOMDRAW, hdi.hd_item
	Protected thisRow, thisCol, idx
	Protected t$, text$
	Protected nNotifyCode
	Protected *NMITEM.NMITEMACTIVATE
	Protected SelectedLine

	Result = #PB_ProcessPureBasicEvents
	;;Dim LVColor(0)

	Select msg

		Case #WM_NCDESTROY ; удаление кистей, после закрытия программы
			DeleteObject_(HightLightBrush)
			DeleteObject_(BackColorBrush)
			DeleteObject_(BackColorBrushHeader)

		Case #WM_NOTIFY
			; стандартные структуры ListView для перерисовки
			*nmhdr.NMHDR = lParam
			*lvCD.NMLVCUSTOMDRAW = lParam
			*NMITEM.NMITEMACTIVATE = lParam
			
; 			если гаджет #LV0 и он пользовательская рисовка, то
			If *lvCD\nmcd\hdr\hwndFrom = GadgetID(#LV0) And *lvCD\nmcd\hdr\code = #NM_CUSTOMDRAW
				Select *lvCD\nmcd\dwDrawStage
					Case #CDDS_PREPAINT
						Result = #CDRF_NOTIFYITEMDRAW
					Case #CDDS_ITEMPREPAINT
						Result = #CDRF_NOTIFYSUBITEMDRAW;
					Case #CDDS_ITEMPREPAINT | #CDDS_SUBITEM ; перерисовка пункта
						thisRow = *lvCD\nmcd\dwItemSpec ; строку
						thisCol = *lvCD\iSubItem ; колонка
						If thisCol = 0 ; если колонка 0, то
							; Определяет прямоугольник для текста
; 							subItemRect.RECT\left = #LVIR_LABEL ; поле left равно константе?
; 							subItemRect.RECT\top = *lvCD\iSubItem ; верх = номер подпункта?
							; Определяет прямоугольник подпункт
							SendMessage_(GadgetID(#LV0), #LVM_GETSUBITEMRECT, thisRow, @subItemRect) ; в итоге переписываем структуру прямоугольника

							text$ = GetGadgetItemText(#LV0, thisRow, thisCol) ; получаем текст пункта по строке и колонке

							If GetGadgetState(#LV0) = thisRow ; если индекс выделенного элемента равен пункту, то
								; выделенный пункт, перекрашиваем его фон
								FillRect_(*lvCD\nmcd\hdc, subItemRect, BackColorBrush)
							Else
								; не выделенный пункт, перекрашиваем его другим фоном
								FillRect_(*lvCD\nmcd\hdc, subItemRect, BackColorBrushHeader)
							EndIf
							InflateRect_(subItemRect, -8, 0) ; изменяет левую границу прямоугольника на 8 пиксел

							#SelectedWordMarker$ = ""|"" ; импортированный разделитель чтобы подсветить часть текста между разделителями.
							For idx = 1 To CountString(text$, #SelectedWordMarker$) + 1 ; до числа разделителей
								t$ = StringField(text$, idx, #SelectedWordMarker$) ; получаем поле 1, 2, 3 по очереди
								If t$
									SetTextColor_(*lvCD\nmcd\hdc, colors(idx & 1)) ; чётные/нечетные части текста
									SetBkColor_(*lvCD\nmcd\hdc, BackColor) ; фон всегда одинаковый
									DrawText_(*lvCD\nmcd\hdc, t$, -1, subItemRect, #DT_END_ELLIPSIS | #DT_VCENTER | #DT_SINGLELINE) ; рисуем текст
									subItemRect\left + GetCharWidth(*nmhdr\hwndFrom, t$) ; смещение от предыдущего нарисованного текста, чтобы нарисовать следующий текст. Отступ, от которого красить очередную часть нарисованную правее.
								EndIf
							Next idx
							Result = #CDRF_SKIPDEFAULT
						Else
							Result = #CDRF_DODEFAULT
						EndIf
				EndSelect
			EndIf
	EndSelect
	ProcedureReturn Result
EndProcedure

; это подкрашивает заголовок ListView
Procedure Callback_Header(hWnd, Message, wParam, lParam)
	Protected *Header.HD_NOTIFY, SelectedLine, *lvCD.NMLVCUSTOMDRAW
	Protected *nmhdr.NMHDR, text$, *pnmcd.NMCUSTOMDRAW, hdi.hd_item
	Protected rc2.RECT, hDC
	Protected Result = CallWindowProc_(frmMain_References, hWnd, Message, wParam, lParam)


	*Header = lParam
	*nmhdr = lParam
	*lvCD = lParam
	Select Message
		Case #WM_NOTIFY
			Select *Header\hdr\code
				Case #NM_CUSTOMDRAW
					If *nmhdr\hwndFrom = hHeader
						*pnmcd.NMCUSTOMDRAW = lParam
						Select *pnmcd\dwDrawStage
							Case #CDDS_PREPAINT
								result = #CDRF_NOTIFYITEMDRAW
							Case #CDDS_ITEMPREPAINT
								text$ = GetGadgetItemText(GetDlgCtrlID_(hWnd), -1, *pnmcd\dwItemSpec)
								hdi\mask = #HDI_TEXT
								hdi\psztext = @text$
								hdi\cchtextmax = Len(text$)
								SetBkMode_(*pnmcd\hdc, #TRANSPARENT)
								FillRect_(*pnmcd\hdc, *pnmcd\rc, BackColorBrushHeader)
								; 								сдвигаем текст после закрашивания прямоуголников
								If *lvCD\nmcd\dwItemSpec
									InflateRect_(*pnmcd\rc, -8, 0)
									text$ = LTrimChar(text$, "" "" + #TAB$)
								Else
									InflateRect_(*pnmcd\rc, -4, 0)
								EndIf
								SetTextColor_(*pnmcd\hdc, ForeColorHeader)
								DrawText_(*pnmcd\hdc, @text$, Len(text$), *pnmcd\rc, #DT_VCENTER | #DT_END_ELLIPSIS)
								result = #CDRF_SKIPDEFAULT
						EndSelect
					EndIf
			EndSelect
	EndSelect
	ProcedureReturn Result
EndProcedure


;- ╔═ GUI ═╗
If OpenWindow(0, 0, 0, 420, 400, ""Пример..."", #PB_Window_SystemMenu | #PB_Window_ScreenCentered)
	; 	ButtonGadget(1, 10, 10, 18, 30, Chr($205E)) ; ⁞ (меню)

	ListIconGadget(#LV0, 10, 10, 400, 380, ""Колонка"", 400, #PB_ListIcon_GridLines)
	For a = 0 To 4
		AddGadgetItem(#LV0, a, ""раз-|два|-три"")
	Next
	SetGadgetColor(#LV0, #PB_Gadget_BackColor, BackColorHeader)


	;     ListViewGadget(0, 10, 10, 400, 380)
	;     For a = 1 To 12
	;     	AddGadgetItem(0, -1, ""Элемент  "" + Str(a) + ""  Списка"") ; Определить содержимое списка.
	;     Next
	SetWindowCallback(@Callback_Win())
	hHeader = SendMessage_(GadgetID(#LV0), #LVM_GETHEADER, 0, 0)
	frmMain_References = SetWindowLongPtr_(GadgetID(#LV0), #GWL_WNDPROC, @Callback_Header())
; 	SetBkColor_(hHeader, BackColor)



	;- Loop
	Repeat
		Select WaitWindowEvent()
			Case #PB_Event_CloseWindow
				CloseWindow(0)
				End
		EndSelect
	ForEver
EndIf"
vZn5s88g,decode ROT13,paperline27,Python,Tuesday 23rd of January 2024 09:47:42 PM CDT,"import codecs

# Meminta pengguna untuk memasukkan pesan terenkripsi
pesan_terenkripsi = input(""Masukkan pesan terenkripsi: "")

# Dekripsi pesan dengan ROT13
pesan_terdekripsi = codecs.decode(pesan_terenkripsi, 'rot_13')

# Tampilkan pesan terdekripsi
print(""Pesan terdekripsi:"", pesan_terdekripsi)"
ryVFQxkA,soal ctf kategori reverse engineering,paperline27,C,Tuesday 23rd of January 2024 09:30:21 PM CDT,"#include <stdio.h>

int main() {
    char password[] = ""p@ssw0rd"";
    char input[20];

    printf(""Masukkan password: "");
    scanf(""%s"", input);

    if(strcmp(input, password) == 0) {
        printf(""Password benar!\n"");
    } else {
        printf(""Password salah!\n"");
    }

    return 0;
}"
5YnpAzBn,BinarytoHex,paperline27,C,Tuesday 23rd of January 2024 09:17:48 PM CDT,"#include <stdio.h>
#include <stdlib.h>
#include <string.h>

// Fungsi untuk mengonversi empat bit biner ke karakter heksadesimal
char binaryToHex(char* binary) {
    int decimal = strtol(binary, NULL, 2);

    if (decimal >= 0 && decimal <= 9) {
        return '0' + decimal;
    } else if (decimal >= 10 && decimal <= 15) {
        return 'A' + (decimal - 10);
    } else {
        return '\0'; // Mengembalikan karakter nol jika konversi tidak valid
    }
}

// Fungsi untuk mengonversi bilangan biner ke heksadesimal
void binaryToHexadecimal(const char* binaryString) {
    printf(""Binary: %s\nHexadecimal: "", binaryString);

    // Menambahkan padding nol jika panjang biner tidak kelipatan 4
    int padding = 4 - (strlen(binaryString) % 4);
    char paddedBinary[256];
    strcpy(paddedBinary, binaryString);
    for (int i = 0; i < padding; i++) {
        strcat(paddedBinary, ""0"");
    }

    // Mengonversi setiap blok empat bit ke karakter heksadesimal
    for (int i = 0; i < strlen(paddedBinary); i += 4) {
        char fourBits[5];
        strncpy(fourBits, paddedBinary + i, 4);
        fourBits[4] = '\0';

        char hexChar = binaryToHex(fourBits);
        if (hexChar != '\0') {
            printf(""%c"", hexChar);
        } else {
            printf(""Bilangan biner tidak valid.\n"");
            return;
        }
    }

    printf(""\n"");
}

int main() {
    char input[256];

    // Meminta input dari pengguna
    printf(""Masukkan bilangan biner: "");
    scanf(""%s"", input);

    // Memanggil fungsi untuk mengonversi biner ke heksadesimal
    binaryToHexadecimal(input);

    return 0;
}
"
aqp2rzQq,HextoBinary,paperline27,C,Tuesday 23rd of January 2024 09:05:50 PM CDT,"#include <stdio.h>
#include <stdlib.h>
#include <string.h>

// Fungsi untuk mengonversi karakter heksadesimal ke nilai desimal
int hexToDecimal(char hex) {
    if (hex >= '0' && hex <= '9') {
        return hex - '0';
    } else if (hex >= 'A' && hex <= 'F') {
        return hex - 'A' + 10;
    } else if (hex >= 'a' && hex <= 'f') {
        return hex - 'a' + 10;
    } else {
        return -1; // Mengembalikan -1 jika karakter tidak valid
    }
}

// Fungsi untuk mengonversi bilangan heksadesimal ke biner
void hexToBinary(const char* hexString) {
    printf(""Hexadecimal: %s\nBinary: "", hexString);

    // Mengonversi setiap karakter heksadesimal ke biner
    while (*hexString) {
        int decimal = hexToDecimal(*hexString);

        if (decimal != -1) {
            // Mengonversi nilai desimal ke biner
            for (int i = 3; i >= 0; i--) {
                int bit = (decimal >> i) & 1;
                printf(""%d"", bit);
            }
        } else {
            printf(""Karakter heksadesimal tidak valid.\n"");
            return;
        }

        hexString++;
    }

    printf(""\n"");
}

int main() {
    char input[256];

    // Meminta input dari pengguna
    printf(""Masukkan bilangan heksadesimal: "");
    scanf(""%s"", input);

    // Memanggil fungsi untuk mengonversi heksadesimal ke biner
    hexToBinary(input);

    return 0;
}
"
ijX4AgrV,Nth Fibonacci Number,jayati,C++,Tuesday 23rd of January 2024 08:43:17 PM CDT,"//{ Driver Code Starts
// Initial Template for C++
#include <bits/stdc++.h>
using namespace std;

// } Driver Code Ends
// User function Template for C++
class Solution {
  const int mod = 1000000007;
  public:
    int fib(int n , vector<int>&dp){
        if(dp[n]!=-1)return dp[n];
        else return dp[n] = ((fib(n-2,dp)%mod + fib(n-1,dp)%mod)%mod); 
    }
    int nthFibonacci(int n){
        // code here
         vector<int>dp(n+1,-1);
        dp[1]=1;
        dp[2]=1;
        return fib(n,dp);
    }
};

//{ Driver Code Starts.
int main() {
    int t;
    cin >> t;
    while (t--) {
        int n;
        cin >> n;
        Solution ob;
        cout << ob.nthFibonacci(n) << endl;
    }
    return 0;
}

// } Driver Code Ends"
wxFeyFB6,Neovim config,pastaisland,Lua,Tuesday 23rd of January 2024 08:27:33 PM CDT,"-- ------------- --
-- Neovim Config --
-- ------------- --

-- ------------- --
--   Settings    --
-- ------------- --
vim.g.mapleader = "" ""
vim.g.maplocalleader = "" ""
vim.o.undofile = true

-- Behavior --
vim.o.tabstop = 2
vim.o.shiftwidth = 2
vim.o.expandtab = true
vim.o.breakindent = true
vim.o.confirm = true
vim.o.startofline = true
vim.o.smartcase = true
vim.o.ignorecase = true
vim.o.timeout = true
vim.o.timeoutlen = 300
vim.o.updatetime = 250
vim.o.completeopt = ""menuone,noselect""
vim.o.clipboard = ""unnamedplus,unnamed""

-- Mouse --
vim.o.mouse = ""a""
vim.o.mousefocus = true
vim.o.mousemodel = ""extend""

-- Apperance --
vim.wo.number = true
vim.o.wrap = true
vim.o.termguicolors = true
vim.cmd.colorscheme(""onedark"")
vim.o.list = true
vim.opt.listchars = { tab = ""├─"", trail = ""·"", nbsp = ""⎵"" }
vim.o.showmode = true
vim.o.laststatus = 3
vim.wo.signcolumn = ""yes""

-- ------------- --
-- Autocommands  --
-- ------------- --
vim.api.nvim_create_autocmd(""TextYankPost"", {
  group = vim.api.nvim_create_augroup(""highlight_yank"", {}),
  desc = ""Hightlight selection on yank"",
  pattern = ""*"",
  callback = function()
    vim.highlight.on_yank { higroup = ""IncSearch"", timeout = 150 }
  end,
})

if vim.version.cmp(vim.version(), { 0, 10, 0 }) >= 0 then
  local osc52 = require('vim.ui.clipboard.osc52')
  vim.g.clipboard = {
    name = 'OSC 52',
    copy = {
      ['+'] = osc52.copy('+'),
      ['*'] = osc52.copy('*'),
    },
    paste = {
      ['+'] = osc52.paste('+'),
      ['*'] = osc52.paste('*'),
    },
  }
end

-- augroup vimrc-auto-mkdir
--   autocmd!
--   autocmd BufWritePre * call s:auto_mkdir(expand('<afile>:p:h'), v:cmdbang)
--   function! s:auto_mkdir(dir, force)
--     if !isdirectory(a:dir)
--           \   && (a:force
--           \       || input(""'"" . a:dir . ""' does not exist. Create? [y/N]"") =~? '^y\%[es]$')
--       call mkdir(iconv(a:dir, &encoding, &termencoding), 'p')
--     endif
--   endfunction
-- augroup END

-- ------------- --
--  Treesitter   --
-- ------------- --
local nix_embedded_lua = vim.treesitter.query.parse(
  ""nix"",
  [[
  (binding_set
    (binding
      attrpath: (attrpath) @_typename (#eq? @_typename ""type"")
      expression: (_
                    (string_fragment) @_typevalue (#eq? @_typevalue ""lua"")))
    (binding
      attrpath: (attrpath) @_configname (#eq? @_configname ""config"")
      expression: (_
                    (string_fragment) @lua)
      )
    )
  ]]
)

local python_embedded_sql = vim.treesitter.query.parse(
  ""python"",
  [[
  (assignment
    left: (identifier) @_varname
    (#match? @_varname ""query$"")
    right: (string (string_content) @sql)
    (#match? @sql ""^[\n \t\s]*([sS](elect|ELECT)|[iI](nsert|NSERT)|[uU](pdate|PDATE)|[cC](reate|REATE)|[dD](elete|ELETE)|[aA](lter|LTER)|[dD](rop|ROP))[\n \t\s]+"")
  )
  (call
    function: [
      (attribute attribute: (identifier) @_funcname)
      (identifier) @_funcname]
    (#match? @_funcname ""^(runquery|read_sql|execute)$"")
    arguments: (argument_list . (string (string_content) @sql))
  )
]])

local get_root = function(bufnr)
  local parser = vim.treesitter.get_parser(bufnr, ""nix"", {})
  local tree = parser:parse()[1]
  return tree:root()
end


-- ------------- --
--    Keymaps    --
-- ------------- --
vim.keymap.set('n', ',v', '<Cmd>edit $MYVIMRC<CR>', {desc = ""edit config file""})
vim.keymap.set('n', ',,', '<C-^>', {desc = ""Swap to Recent Buffer"" })

local toggle_visuals_settings
local function toggle_visuals()
  if vim.wo.number or vim.o.relativenumber then
    toggle_visuals_settings = {
      number = vim.o.number,
      relativenumber = vim.o.relativenumber,
      list = vim.o.list,
      signcolumn = vim.o.signcolumn,
      miniindent = vim.b.miniindentscope_disable
    }
    vim.o.number = false
    vim.o.relativenumber = false
    vim.o.list = false
    vim.o.signcolumn = ""no""
    vim.b.miniindentscope_disable = true
  else
    vim.o.number = toggle_visuals_settings[""number""]
    vim.o.relativenumber = toggle_visuals_settings[""relativenumber""]
    vim.o.list = toggle_visuals_settings[""list""]
    vim.o.signcolumn = toggle_visuals_settings[""signcolumn""]
    vim.b.miniindentscope_disable = toggle_visuals_settings[""miniindent""]
  end
end
vim.keymap.set('n', '<F2>', toggle_visuals, {noremap = true, silent = true, desc = ""Toggle Decorations""} )
vim.keymap.set('n', '<CR>', '<Cmd>nohlsearch<CR><CR>', { desc = ""Clear Search"" })
vim.keymap.set('n', 'ZS', 'ZQ', { desc = ""Force Quit"" })

-- Remap for dealing with word wrap
vim.keymap.set('n', 'k', ""v:count == 0 ? 'gk' : 'k'"", { expr = true, silent = true })
vim.keymap.set('n', 'j', ""v:count == 0 ? 'gj' : 'j'"", { expr = true, silent = true })

vim.keymap.set(""n"", ""<C-J>"", ""<C-W><C-J>"")
vim.keymap.set(""n"", ""<C-H>"", ""<C-W><C-H>"")
vim.keymap.set(""n"", ""<C-K>"", ""<C-W><C-K>"")
vim.keymap.set(""n"", ""<C-L>"", ""<C-W><C-L>"")

-- vim.keymap.set('n', '<Leader>l', '<Nop>', { desc = 'LSP' })
-- vim.keymap.set('n', '<Leader>lf',  function() vim.lsp.buf.format { async = true } end, { desc = ""Format"" })
-- vim.keymap.set('n', '<Leader>ld',  vim.lsp.buf.definition, { desc = ""Definition"" })
-- vim.keymap.set('n', '<Leader>lt',  vim.lsp.buf.type_definition, { desc = ""Definition"" })
-- vim.keymap.set('n', '<Leader>lD',  vim.lsp.buf.declaration, { desc = ""Declaration"" })
-- vim.keymap.set('n', '<Leader>li',  vim.lsp.buf.implementation, { desc = ""Implementation"" })
-- vim.keymap.set('n', '<Leader>lr',  vim.lsp.buf.rename, { desc = ""Rename"" })
-- vim.keymap.set('n', '<Leader>lR',  vim.lsp.buf.references, { desc = ""References"" })
-- vim.keymap.set('n', '<Leader>l ',  vim.lsp.buf.hover, { desc = ""Hover"" })
-- vim.keymap.set({'n', 'v'}, '<Leader>la',  vim.lsp.buf.code_action, { desc = ""Code Action"" })
-- vim.keymap.set('n', '<Leader>ls',  vim.lsp.buf.signature_help, { desc = ""Signature Help"" })
-- vim.keymap.set('n', '[d',  vim.diagnostic.goto_prev, { desc = ""[Diag] Goto Prev"" })
-- vim.keymap.set('n', ']d',  vim.diagnostic.goto_next, { desc = ""[Diag] Goto Next"" })
-- vim.keymap.set('n', '<Leader>lpf',  vim.diagnostic.open_float, { desc = ""Open Float"" })
-- vim.keymap.set('n', '<Leader>lps',  vim.diagnostic.setloclist, { desc = ""Set Loc List"" })
--

vim.keymap.set('n', '<space>e', vim.diagnostic.open_float, { desc = ""Open Float"" })
vim.keymap.set('n', '[d', vim.diagnostic.goto_prev, { desc = ""[Diag] Next"" })
vim.keymap.set('n', ']d', vim.diagnostic.goto_next, { desc = ""[Diag] Prev"" })
vim.keymap.set('n', '<space>q', vim.diagnostic.setloclist, { desc = ""Set Loc List"" })


vim.api.nvim_create_autocmd('LspAttach', {
  group = vim.api.nvim_create_augroup('UserLspConfig', {}),
  callback = function(ev)
    -- Enable completion triggered by <c-x><c-o>
    vim.bo[ev.buf].omnifunc = 'v:lua.vim.lsp.omnifunc'

    -- Buffer local mappings.
    vim.keymap.set('n', 'gD', vim.lsp.buf.declaration, { buffer = ev.buf, desc = ""Declaration"" })
    vim.keymap.set('n', 'gd', vim.lsp.buf.definition, { buffer = ev.buf, desc = ""Definition"" })
    vim.keymap.set('n', 'K', vim.lsp.buf.hover, { buffer = ev.buf, desc = ""Hover"" })
    vim.keymap.set('n', 'gi', vim.lsp.buf.implementation, { buffer = ev.buf, desc = ""Implementation"" })
    vim.keymap.set('n', '<C-k>', vim.lsp.buf.signature_help, { buffer = ev.buf, desc = ""Signature Help"" })
    vim.keymap.set('n', '<space>wa', vim.lsp.buf.add_workspace_folder, { buffer = ev.buf, desc = ""Add Workspace Folder"" })
    vim.keymap.set('n', '<space>wr', vim.lsp.buf.remove_workspace_folder, { buffer = ev.buf, desc = ""Remove Workspace Folder"" })
    vim.keymap.set('n', '<space>wl', function()
      print(vim.inspect(vim.lsp.buf.list_workspace_folders()))
    end, { buffer = ev.buf, desc = ""List Workspace Folders"" })
    vim.keymap.set('n', '<space>D', vim.lsp.buf.type_definition, { buffer = ev.buf, desc = ""Type Definition"" })
    vim.keymap.set('n', '<space>lr', vim.lsp.buf.rename, { buffer = ev.buf, desc = ""Rename"" })
    vim.keymap.set({ 'n', 'v' }, '<space>ca', vim.lsp.buf.code_action, { buffer = ev.buf, desc = ""Code Action"" })
    vim.keymap.set('n', 'gr', vim.lsp.buf.references, { buffer = ev.buf, desc = ""References"" })
    vim.keymap.set('n', '<space>lf', function() vim.lsp.buf.format { async = true } end, { buffer = ev.buf, desc = ""Format"" })
  end,
})


vim.keymap.set('v', 'p',  ""\""_dP"", { desc = ""Paste Without Yanking"" })
vim.keymap.set('v', "",'"",  ""<C-v>I'<Esc>gv$A',<ESC>gvgJ$r<Cmd>keeppatterns s/\\(.\\{-\\},\\)\\{10\\}/&\r/g<CR>"", { desc = ""Comma Separate and Quote List"" })

vim.keymap.set('n', '<Leader>c', ""<Cmd>bdelete<CR>"", { desc = ""Close Buffer"" })
vim.keymap.set('n', '<Leader>C', ""<Cmd>bdelete!<CR>"", { desc = ""Force Close Buffer"" })




          -- lvim.keys.normal_mode["",<Tab>""] = ""<Cmd>tabNext<CR>""
          -- lvim.keys.normal_mode["",<S-Tab>""] = ""<Cmd>tabprevious<CR>""
          -- -- lvim.keys.insert_mode[""<Up>""] = ""<Esc><Up>""
          -- -- lvim.keys.insert_mode[""<Down>""] = ""<Esc><Down>""
          -- lvim.builtin.which_key.mappings[""x""] = {
          --   ""<Cmd>enew | setlocal ft=python bt=nofile bh=hide noswapfile nu | file Scratch<CR>"", ""Scratch""
          -- }
          -- lvim.keys.insert_mode[""<C-Del>""] = ""<C-o>dw""
          -- -- for neoscroll support
          -- lvim.keys.visual_mode[""<PageUp>""] = { ""<C-b>"", { remap = true } }
          -- lvim.keys.visual_mode[""<PageDown>""] = { ""<C-f>"", { remap = true } }
          -- 
          -- 
          -- lvim.keys.insert_mode[""<C-l>""] = ""<Esc><C-w>l""
          -- lvim.keys.insert_mode[""<C-h>""] = ""<Esc><C-w>h""
          -- lvim.keys.insert_mode[""<C-k>""] = ""<Esc><C-w>k""
          -- lvim.keys.insert_mode[""<C-j>""] = ""<Esc><C-w>j""
          --
require('mini.ai').setup()
require('mini.animate').setup()
require('mini.basics').setup()
require('mini.bracketed').setup()
require('mini.comment').setup()
require('mini.cursorword').setup()
require('mini.indentscope').setup()
require('mini.surround').setup()

local miniclue = require('mini.clue')
miniclue.setup({
  triggers = {
    -- Leader triggers
    { mode = 'n', keys = '<Leader>' },
    { mode = 'x', keys = '<Leader>' },
    { mode = 'n', keys = ',' },
    { mode = 'x', keys = ',' },
    { mode = 'n', keys = ']' },
    { mode = 'n', keys = '[' },

    -- Built-in completion
    { mode = 'i', keys = '<C-x>' },

    -- `g` key
    { mode = 'n', keys = 'g' },
    { mode = 'x', keys = 'g' },

    -- Marks
    { mode = 'n', keys = ""'"" },
    { mode = 'n', keys = '`' },
    { mode = 'x', keys = ""'"" },
    { mode = 'x', keys = '`' },

    -- Registers
    { mode = 'n', keys = '""' },
    { mode = 'x', keys = '""' },
    { mode = 'i', keys = '<C-r>' },
    { mode = 'c', keys = '<C-r>' },

    -- Window commands
    { mode = 'n', keys = '<C-w>' },

    -- `z` key
    { mode = 'n', keys = 'z' },
    { mode = 'x', keys = 'z' },
  },

  clues = {
    -- Enhance this by adding descriptions for <Leader> mapping groups
    miniclue.gen_clues.builtin_completion(),
    miniclue.gen_clues.g(),
    miniclue.gen_clues.marks(),
    miniclue.gen_clues.registers(),
    miniclue.gen_clues.windows(),
    miniclue.gen_clues.z(),
  },
})

vim.api.nvim_create_autocmd('FileType', {
  desc = 'Activate vim-slime for python',
  pattern = 'python',
  once = true,
  callback = function()
    vim.g.slime_target = ""tmux""
    vim.g.slime_cell_delimiter = ""^#\\s*%%""
    vim.g.slime_default_config = {
      ['socket_name'] = 'default',
      ['target_pane'] = '{bottom-right}',
    }
    vim.g.slime_dont_ask_default = 1
    vim.g.slime_bracketed_paste = 1
    vim.g.slime_no_mappings = 1
    vim.g.slime_python_ipython = 0 -- No %cpasted needed if using tmux's bracketed paste


    function StartIPython()
      vim.fn.system(""tmux if -F '#{==:#{window_panes},1}' 'split-window -hdZ ipython'"")
    end

    function UnhideSlimeAndClear()
      local target_pane = vim.fn.shellescape(vim.g.slime_default_config[""target_pane""])
      vim.fn.system(""tmux if -F '#{window_zoomed_flag}' 'resize-pane -Z'"")
      vim.fn.system(""tmux send -t "" .. target_pane .. "" C-u"")
      StartIPython()
    end

    vim.cmd([[function! SlimeOverride_EscapeText_python(text)
      lua UnhideSlimeAndClear()
      if slime#config#resolve(""python_ipython"") && len(split(a:text,""\n"")) > 1
        return [""%cpaste -q\n"", slime#config#resolve(""dispatch_ipython_pause""), a:text, ""--\n""]
      else
        let empty_lines_pat = '\(^\|\n\)\zs\(\s*\n\+\)\+'
        let no_empty_lines = substitute(a:text, empty_lines_pat, """", ""g"")
        let dedent_pat = '\(^\|\n\)\zs'.matchstr(no_empty_lines, '^\s*')
        let dedented_lines = substitute(no_empty_lines, dedent_pat, """", ""g"")
        let except_pat = '\(elif\|else\|except\|finally\)\@!'
        let add_eol_pat = '\n\s[^\n]\+\n\zs\ze\('.except_pat.'\S\|$\)'
        return substitute(dedented_lines, add_eol_pat, ""\n"", ""g"")
      end
    endfunction]])

    function Send_Ctrl_C()
      local target_pane = vim.fn.shellescape(vim.g.slime_default_config[""target_pane""])
      vim.fn.system(""tmux send -t "" .. target_pane .. "" C-c"")
    end

    --vim.keymap.set('n', ',aa', UnhideSlimeAndClear, { desc = ""[Slime] Scend"" })
    --vim.keymap.set('n', '<leader>rv', '<Plug>SlimeConfig', { desc = ""[Slime] Config"" })
    vim.keymap.set('n', ',r', '<Plug>SlimeCellsSend', { desc = ""[Slime] Send"" })
    vim.keymap.set('v', ',r', '<Plug>SlimeRegionSend', { desc = ""[Slime] Send"" })
    vim.keymap.set('n', ',R', '<Plug>SlimeCellsSendAndGoToNext', { desc = ""[Slime] Send+Next"" })
    vim.keymap.set('n', ',c', Send_Ctrl_C, { desc = ""[Slime] Ctrl+C"" })
    vim.keymap.set('n', ',l', StartIPython, { desc = ""[Slime] Start IPython"" })
    vim.keymap.set('n', ',j', '<Plug>SlimeCellsNext', { desc = ""[Slime] Next Cell"" })
    vim.keymap.set('n', ',k', '<Plug>SlimeCellsPrev', { desc = ""[Slime] Prev Cell"" })
    vim.cmd.packadd('vim-slime')
    vim.cmd.packadd('vimplugin-vim-slime-cells')
    StartIPython()
  end,
})

local lspconfig = require(""lspconfig"")
-- Bash --
lspconfig.bashls.setup{}

-- Lua --
lspconfig.lua_ls.setup{
  settings = {
    Lua = {
      runtime = {
        -- Tell the language server which version of Lua you're using (most likely LuaJIT in the case of Neovim)
        version = ""LuaJIT"",
      },
      diagnostics = {
        -- Get the language server to recognize the `vim` global
        globals = {""vim""},
      },
      workspace = {
        -- Make the server aware of Neovim runtime files
        library = vim.api.nvim_get_runtime_file("""", true),
        checkThirdParty = false,
      },
      -- Do not send telemetry data containing a randomized but unique identifier
      telemetry = {
        enable = false,
      },
    },
  },
}

lspconfig.sqls.setup{}
-- Python --
lspconfig.pyright.setup{}
lspconfig.ruff_lsp.setup{}

-- Nix --
lspconfig.nil_ls.setup{} -- nix language server - no format
lspconfig.rnix.setup{}

-- Markdown --
lspconfig.marksman.setup{}

-- Diagnostic --
-- lspconfig.diagnosticls.setup{}

require(""conform"").setup({
  formatters = {
    injected = {
      options = {
        ignore_errors = false,
        lang_to_formatters = {
          sql = { ""sqlfluff"" },
        },
        lang_to_ext = {
          sql = ""sql"",
        },
      },
    },
    sqlfluff = {
      command = ""sqlfluff"",
      args = {
        ""fix"",
        ""--dialect"",
        ""sqlite"",
        ""--disable-progress-bar"",
        ""-f"",
        ""-n"",
        ""-"",
      },
      stdin = true,
    },
  },
  formatters_by_ft = {
    lua = { ""stylua"" },
    -- python = { ""isort"", ""black"" },
    python = { ""ruff_format"", ""black"", ""injected"" },
    nix = { ""alejandra"" },
    sql = { ""sqlfluff"", ""injected"" },
  },
})
require(""conform"").formatters.injected = {
  options = {
    ignore_errors = false,
    lang_to_formatters = {
      sql = { ""sqlfluff"" },
    },
  },
}

local cmp = require(""cmp"")
cmp.setup {
  snippet = {
    expand = function(args)
      require(""luasnip"").lsp_expand(args.body)
    end
  },
  mapping = {
    [""<C-p>""] = cmp.mapping.select_prev_item(),
    [""<C-n>""] = cmp.mapping.select_next_item(),
    [""<C-space>""] = cmp.mapping.complete(),
    [""<C-e>""] = cmp.mapping.close(),
    [""<tab>""] = cmp.mapping.confirm { select = true },
  },

  sources = cmp.config.sources({
    { name = ""nvim_lsp"" },
    { name = ""luasnip"" },
  }, {
    { name = ""buffer"" },
    { name = ""path"" },
    { name = ""treesitter"" },
  }),
}
cmp.setup.filetype(""gitcommit"", {
  sources = cmp.config.sources({
    { name = ""git"" }, -- You can specify the `git` source if [you were installed it](https://github.com/petertriho/cmp-git).
  }, {
    { name = ""buffer"" },
  })
})
cmp.setup.cmdline({ ""/"", ""?"" }, {
  mapping = cmp.mapping.preset.cmdline(),
  sources = {
    { name = ""buffer"" }
  }
})

cmp.setup.cmdline("":"", {
  mapping = cmp.mapping.preset.cmdline(),
  sources = cmp.config.sources({
    { name = ""path"" }
  }, {
    { name = ""cmdline"" }
  })
})

require'nvim-treesitter.configs'.setup {
  autotag = { enable = true },
  context_commentstring = { enable = true, enable_autocmd = false },
  highlight = {
    enable = true,
    disable = function(_, bufnr) return vim.b[bufnr].large_buf end,
  },
  incremental_selection = { enable = true },
  indent = { enable = true },
  textobjects = {
    select = {
      enable = true,
      lookahead = true,
      keymaps = {
        [""ak""] = { query = ""@block.outer"", desc = ""around block"" },
        [""ik""] = { query = ""@block.inner"", desc = ""inside block"" },
        [""ac""] = { query = ""@class.outer"", desc = ""around class"" },
        [""ic""] = { query = ""@class.inner"", desc = ""inside class"" },
        [""a?""] = { query = ""@conditional.outer"", desc = ""around conditional"" },
        [""i?""] = { query = ""@conditional.inner"", desc = ""inside conditional"" },
        [""af""] = { query = ""@function.outer"", desc = ""around function "" },
        [""if""] = { query = ""@function.inner"", desc = ""inside function "" },
        [""al""] = { query = ""@loop.outer"", desc = ""around loop"" },
        [""il""] = { query = ""@loop.inner"", desc = ""inside loop"" },
        [""aa""] = { query = ""@parameter.outer"", desc = ""around argument"" },
        [""ia""] = { query = ""@parameter.inner"", desc = ""inside argument"" },
      },
    },
    move = {
      enable = true,
      set_jumps = true,
      goto_next_start = {
        [""]k""] = { query = ""@block.outer"", desc = ""Next block start"" },
        [""]f""] = { query = ""@function.outer"", desc = ""Next function start"" },
        [""]a""] = { query = ""@parameter.inner"", desc = ""Next argument start"" },
      },
      goto_next_end = {
        [""]K""] = { query = ""@block.outer"", desc = ""Next block end"" },
        [""]F""] = { query = ""@function.outer"", desc = ""Next function end"" },
        [""]A""] = { query = ""@parameter.inner"", desc = ""Next argument end"" },
      },
      goto_previous_start = {
        [""[k""] = { query = ""@block.outer"", desc = ""Previous block start"" },
        [""[f""] = { query = ""@function.outer"", desc = ""Previous function start"" },
        [""[a""] = { query = ""@parameter.inner"", desc = ""Previous argument start"" },
      },
      goto_previous_end = {
        [""[K""] = { query = ""@block.outer"", desc = ""Previous block end"" },
        [""[F""] = { query = ""@function.outer"", desc = ""Previous function end"" },
        [""[A""] = { query = ""@parameter.inner"", desc = ""Previous argument end"" },
      },
    },
    swap = {
      enable = true,
      swap_next = {
        ["">K""] = { query = ""@block.outer"", desc = ""Swap next block"" },
        ["">F""] = { query = ""@function.outer"", desc = ""Swap next function"" },
        ["">A""] = { query = ""@parameter.inner"", desc = ""Swap next argument"" },
      },
      swap_previous = {
        [""<K""] = { query = ""@block.outer"", desc = ""Swap previous block"" },
        [""<F""] = { query = ""@function.outer"", desc = ""Swap previous function"" },
        [""<A""] = { query = ""@parameter.inner"", desc = ""Swap previous argument"" },
      },
    },
  },
}

require(""lualine"").setup{
  options = {
    theme = ""onedark""
  }
}

require(""bufferline"").setup{}
vim.keymap.set('n', '<Leader>b',  ""<Cmd>BufferLineCycleNext<CR>"", { desc = ""Buffer Next"" })
vim.keymap.set('n', '<Leader>B',  ""<Cmd>BufferLineCyclePrev<CR>"", { desc = ""Buffer Prev"" })

vim.keymap.set('n', '<Leader>gg',  ""<Cmd>LazyGit<CR>"", { desc = ""LazyGit"" })

require(""telescope"").setup()
require('telescope').load_extension('fzf')
vim.keymap.set('n', '<Leader>f',  ""<Nop>"", { desc = ""Telescope"" })
vim.keymap.set('n', '<Leader>fF',
  function()
    require('telescope.builtin').current_buffer_fuzzy_find(require('telescope.themes').get_dropdown {
      winblend = 10,
      previewer = false,
    })
  end, { desc = ""Fuzzy Search Current Buffer"" })
vim.keymap.set('n', '<Leader>ff',  ""<Cmd>Telescope find_files<CR>"", { desc = ""Find File"" })
vim.keymap.set('n', '<Leader>fr',  ""<Cmd>Telescope oldfiles<CR>"", { desc = ""Open Recent File"" })
vim.keymap.set('n', '<Leader>fg',  ""<Cmd>Telescope live_grep<CR>"", { desc = ""Live Grep"" })
vim.keymap.set('n', '<Leader>fG',  ""<Cmd>Telescope git_files<CR>"", { desc = ""Git Files"" })
vim.keymap.set('n', '<Leader>fb',  ""<Cmd>Telescope buffers<CR>"", { desc = ""Buffers"" })
vim.keymap.set('n', '<Leader>fh',  ""<Cmd>Telescope help_tags<CR>"", { desc = ""Help"" })
vim.keymap.set('n', '<Leader>fs',  ""<Cmd>Telescope grep_string<CR>"", { desc = ""Current Word"" })
vim.keymap.set('n', '<Leader>fd',  ""<Cmd>Telescope diagnostics<CR>"", { desc = ""Diagnostics"" })
vim.keymap.set('n', '<Leader>fc',  ""<Cmd>lua require('telescope.builtin').colorscheme({enable_preview = true})<CR>"", { desc = ""Color Scheme"" })

require(""telescope"").load_extension(""file_browser"")
vim.keymap.set('n', '<Leader>fn',  ""<Cmd>Telescope file_browser path=%:p:h<CR>"", { desc = ""Browser"" })
vim.keymap.set('n', '<Leader>fN',  ""<Cmd>Telescope file_browser<CR>"", { desc = ""Browser CWD"" })

require(""alpha"").setup(require(""alpha.themes.startify"").config)
vim.keymap.set('n', '<Leader>;',  ""<Cmd>Alpha<CR>"", { desc = ""Dashboard"" })
"
LpDAaA0k,Python program with poorly formatted embedded SQL code,pastaisland,Python,Tuesday 23rd of January 2024 08:20:09 PM CDT,"query = """"""
select     row1  ,
row2,
    row3
 from

table1""""""
"
2A0g8R59,Untitled,ma39isy,Oracle 11,Tuesday 23rd of January 2024 08:04:49 PM CDT,"SELECT
	A.SUBJECTID,
	A.SUBJECTCODE,
	A.STUDYPROGRAMID,
	A.CREDIT,
	A.SUBJECTNAME,
	A.CURICULUMYEAR,
	A.MANDATORYSTATUS,
	A.ADMITSEMESTER,
	A.ADMITSCHOOLYEAR,
	A.SUBJECTTYPE,
	NVL (B.STUDENTID,
	A.STUDENTID) STUDENTID,
	NVL (B.SCHOOLYEAR,
	A.SCHOOLYEAR) SCHOOLYEAR,
	NVL (B.SEMESTER,
	A.SEMESTER) SEMESTER,
	NVL (B.INDEXPOINT,
	A.INDEXPOINT) INDEXPOINT,
	NVL (B.INDEX_CONVERSION,
	A.INDEX_CONVERSION) INDEX_CONVERSION,
	NVL (B.PASS_STATUS,
	A.PASS_STATUS) PASS_STATUS,
	NVL (B.SUBJECTIDOLD,
	A.SUBJECTIDOLD) SUBJECTIDOLD,
	NVL (B.SUBJECTCODEOLD,
	A.SUBJECTCODEOLD) SUBJECTCODEOLD,
	NVL (B.SUBJECTNAMEOLD,
	A.SUBJECTNAMEOLD) SUBJECTNAMEOLD,
	NVL2 ( B.SUBJECTNAMEOLD,
	DECODE (B.SUBJECTID,
	B.SUBJECTIDOLD,
	'',
	'RESULT OF EQUIVALENCE'),
	STATUS) AS STATUS
FROM
	(
	SELECT
		A.SUBJECTID,
		A.SUBJECTCODE,
		A.STUDYPROGRAMID,
		A.CREDIT,
		A.SUBJECTNAME,
		A.CURICULUMYEAR,
		A.MANDATORYSTATUS,
		A.ADMITSEMESTER,
		A.ADMITSCHOOLYEAR,
		A.SUBJECTTYPE,
		B.STUDENTID,
		B.SCHOOLYEAR,
		B.SEMESTER,
		B.INDEXPOINT,
		B.INDEX_CONVERSION,
		B.PASS_STATUS,
		SUBJECTCODEOLD,
		SUBJECTIDOLD,
		STUDYPROGRAMIDOLD,
		SUBJECTNAMEOLD,
		DECODE (B.SUBJECTID,
		SUBJECTIDOLD,
		'',
		'RESULT OF EQUIVALENCE') STATUS
	FROM
		(
		SELECT
			SUBJECTID,
			SUBJECTCODE,
			STUDYPROGRAMID,
			CREDIT,
			SUBJECTNAME,
			CURICULUMYEAR,
			MANDATORYSTATUS,
			ADMITSEMESTER,
			ADMITSCHOOLYEAR,
			SUBJECTTYPE
		FROM
			SUBJECTS
		WHERE
			STUDYPROGRAMID = (
			SELECT
				STUDYPROGRAMID
			FROM
				MASTERDATA.STUDENT
			WHERE
				STUDENTID = '1304192002')
			AND ACTIVESTATUS = 'YA'
			AND MANDATORYSTATUS IS NOT NULL
			AND SUBJECTTYPE = 'TINGKAT 1'
			AND CURICULUMYEAR = (
			SELECT
				MAX(CURICULUMYEAR)
			FROM
				CURICULUMYEAR)
			AND SUBJECTNAME NOT LIKE '%AGAMA%'
	UNION
		SELECT
			SUBJECTID,
			SUBJECTCODE,
			STUDYPROGRAMID,
			CREDIT,
			SUBJECTNAME,
			CURICULUMYEAR,
			MANDATORYSTATUS,
			ADMITSEMESTER,
			ADMITSCHOOLYEAR,
			SUBJECTTYPE
		FROM
			SUBJECTS
		WHERE
			STUDYPROGRAMID = (
			SELECT
				STUDYPROGRAMID
			FROM
				MASTERDATA.STUDENT
			WHERE
				STUDENTID = '1304192002')
			AND ACTIVESTATUS = 'YA'
			AND MANDATORYSTATUS IS NOT NULL
			AND SUBJECTTYPE = 'TINGKAT 1'
			AND CURICULUMYEAR = (
			SELECT
				MAX(CURICULUMYEAR)
			FROM
				CURICULUMYEAR)
			AND SUBJECTNAME LIKE '%AGAMA%'
			AND SUBJECTNAME LIKE '%' || (
			SELECT
				RELIGION
			FROM
				MASTERDATA.ADDITIONALSTUDENTDATA
			WHERE
				STUDENTID = '1304192002') || '%' ) A
	LEFT JOIN (
		SELECT
			STUDENTID,
			NVL2 (D.SUBJECTID,
			D.SUBJECTID,
			A.SUBJECTID) SUBJECTID,
			NVL2 (D.SUBJECTCODE,
			D.SUBJECTCODE,
			A.SUBJECTCODE) SUBJECTCODE,
			NVL2 (D.STUDYPROGRAMID,
			D.STUDYPROGRAMID,
			A.STUDYPROGRAMID) STUDYPROGRAMID,
			NVL2 (D.SUBJECTNAME,
			D.SUBJECTNAME,
			B.SUBJECTNAME) SUBJECTNAME,
			SCHOOLYEAR,
			SEMESTER,
			INDEXPOINT,
			INDEX_CONVERSION,
			PASS_STATUS,
			NVL2 (D.CURICULUMYEAR,
			D.CURICULUMYEAR,
			B.CURICULUMYEAR) CURICULUMYEAR,
			A.SUBJECTCODE AS SUBJECTCODEOLD,
			A.SUBJECTID AS SUBJECTIDOLD,
			A.STUDYPROGRAMID AS STUDYPROGRAMIDOLD,
			B.SUBJECTNAME AS SUBJECTNAMEOLD
		FROM
			COMPLETECOURSEPOINT A
		JOIN SUBJECTS B ON
			( A.SUBJECTID = B.SUBJECTID
				AND A.SUBJECTCODE = B.SUBJECTCODE
				AND A.STUDYPROGRAMID = B.STUDYPROGRAMID)
		LEFT JOIN (
			SELECT
				SUBJECTID,
				SUBJECTCODE,
				STUDYPROGRAMID,
				MAX (GROUPID) GROUPID
			FROM
				SUBJECTGROUPEQUIVALENCY
			GROUP BY
				SUBJECTID,
				SUBJECTCODE,
				STUDYPROGRAMID) C ON
			( B.SUBJECTID = C.SUBJECTID
				AND B.SUBJECTCODE = C.SUBJECTCODE
				AND B.STUDYPROGRAMID = C.STUDYPROGRAMID)
		LEFT JOIN (
			SELECT
				SUBJECTIDEQUIVALENCE AS SUBJECTID,
				SUBJECTCODEEQUIVALENCE AS SUBJECTCODE,
				STUDYPROGRAMIDEQUIVALENCE AS STUDYPROGRAMID,
				SUBJECTNAME AS SUBJECTNAME,
				CURICULUMYEAR AS CURICULUMYEAR,
				GROUPID
			FROM
				SUBJECTEQUIVALENCES A
			JOIN SUBJECTS B ON
				(A.SUBJECTIDEQUIVALENCE = B.SUBJECTID) ) D ON
			(C.GROUPID = D.GROUPID)
		WHERE
			STUDENTID = '1304192002'
			AND A.ACTIVESTATUS = 'Y'
			AND A.LATESTSTATUS = 'Y'
	UNION
		SELECT
			STUDENTID,
			A.SUBJECTID,
			A.SUBJECTCODE,
			A.STUDYPROGRAMID,
			B.SUBJECTNAME,
			SCHOOLYEAR,
			SEMESTER,
			INDEXPOINT,
			INDEX_CONVERSION,
			PASS_STATUS,
			B.CURICULUMYEAR,
			A.SUBJECTCODE AS SUBJECTCODEOLD,
			A.SUBJECTID AS SUBJECTIDOLD,
			A.STUDYPROGRAMID AS STUDYPROGRAMIDOLD,
			B.SUBJECTNAME AS SUBJECTNAMEOLD
		FROM
			COMPLETECOURSEPOINT A
		JOIN SUBJECTS B ON
			( A.SUBJECTID = B.SUBJECTID
				AND A.SUBJECTCODE = B.SUBJECTCODE
				AND A.STUDYPROGRAMID = B.STUDYPROGRAMID)
		WHERE
			STUDENTID = '1304192002'
			AND A.ACTIVESTATUS = 'Y'
			AND A.LATESTSTATUS = 'Y' ) B ON
		( A.SUBJECTID = B.SUBJECTID
			AND A.SUBJECTCODE = B.SUBJECTCODE
			AND A.STUDYPROGRAMID = B.STUDYPROGRAMID)) A
LEFT JOIN (
	SELECT
		A.STUDENTID,
		NVL2 (D.SUBJECTID,
		D.SUBJECTID,
		A.SUBJECTID) SUBJECTID,
		NVL2 (D.SUBJECTCODE,
		D.SUBJECTCODE,
		A.SUBJECTCODE) SUBJECTCODE,
		NVL2 (D.STUDYPROGRAMID,
		D.STUDYPROGRAMID,
		A.STUDYPROGRAMID) STUDYPROGRAMID,
		NVL2 (D.SUBJECTNAME,
		D.SUBJECTNAME,
		B.SUBJECTNAME) SUBJECTNAME,
		SCHOOLYEAR,
		SEMESTER,
		INDEXPOINT,
		INDEX_CONVERSION,
		PASS_STATUS,
		NVL2 (D.CURICULUMYEAR,
		D.CURICULUMYEAR,
		B.CURICULUMYEAR) CURICULUMYEAR,
		A.SUBJECTCODE AS SUBJECTCODEOLD,
		A.SUBJECTID AS SUBJECTIDOLD,
		A.STUDYPROGRAMID AS STUDYPROGRAMIDOLD,
		B.SUBJECTNAME AS SUBJECTNAMEOLD
	FROM
		COMPLETECOURSEPOINT A
	JOIN (
		SELECT
			STUDENTID,
			STUDYPROGRAMID
		FROM
			MASTERDATA.STUDENT
		WHERE
			STUDENTID = '1304192002') E ON
		(A.STUDENTID = E.STUDENTID)
	JOIN SUBJECTS B ON
		( A.SUBJECTID = B.SUBJECTID
			AND A.SUBJECTCODE = B.SUBJECTCODE
			AND A.STUDYPROGRAMID = B.STUDYPROGRAMID)
	LEFT JOIN (
		SELECT
			SUBJECTID,
			SUBJECTCODE,
			STUDYPROGRAMID,
			MAX (GROUPID) GROUPID
		FROM
			SUBJECTGROUPEQUIVALENCY
		GROUP BY
			SUBJECTID,
			SUBJECTCODE,
			STUDYPROGRAMID) C ON
		(B.SUBJECTCODE = C.SUBJECTCODE
			AND E.STUDYPROGRAMID = C.STUDYPROGRAMID)
	LEFT JOIN (
		SELECT
			SUBJECTIDEQUIVALENCE AS SUBJECTID,
			SUBJECTCODEEQUIVALENCE AS SUBJECTCODE,
			STUDYPROGRAMIDEQUIVALENCE AS STUDYPROGRAMID,
			SUBJECTNAME AS SUBJECTNAME,
			CURICULUMYEAR AS CURICULUMYEAR,
			GROUPID
		FROM
			SUBJECTEQUIVALENCES A
		JOIN SUBJECTS B ON
			(A.SUBJECTIDEQUIVALENCE = B.SUBJECTID) ) D ON
		(C.GROUPID = D.GROUPID)
	WHERE
		A.STUDENTID = '1304192002'
		AND A.ACTIVESTATUS = 'Y'
		AND A.LATESTSTATUS = 'Y'
		AND A.STUDYPROGRAMID != E.STUDYPROGRAMID) B ON
	(A.SUBJECTCODE = B.SUBJECTCODE)
ORDER BY
	STUDENTID,
	SCHOOLYEAR,
	SEMESTER,
	INDEXPOINT"
T2C7R27H,Untitled,cosenza987,C++,Tuesday 23rd of January 2024 07:52:57 PM CDT,"//Слава Україні, Героям слава

#include <bits/stdc++.h>

using namespace std;

template <class T = int>
class Dinic {
public:
    struct Edge {
        Edge(int a, T b) { to = a;cap = b; }
        int to;
        T cap;
    };

    Dinic(int _n) : n(_n) {
        edges.resize(n);
    }

    T maxFlow(int src, int sink) {
        T ans = 0;
        while (bfs(src, sink)) {
            // maybe random shuffle edges against bad cases?
            T flow;
            pt = std::vector<int>(n, 0);
            while ((flow = dfs(src, sink))) {
                ans += flow;
            }
        }
        return ans;
    }

    void addEdge(int from, int to, T cap, T other = 0) {
        edges[from].push_back(list.size());
        list.push_back(Edge(to, cap));
        edges[to].push_back(list.size());
        list.push_back(Edge(from, other));
    }

    bool inCut(int u) const { return h[u] < n; }
    int size() const { return n; }
    int find(int s) {
        int st = s;
        bool ok = true;
        while(ok) {
            ok = false;
            for(auto e : edges[s]) {
                if(list[e].to == s + 1 and list[e].cap == 0) {
                    s++;
                    ok = true;
                }
            }
        }
        return s - st;
    }
private:
    int n;
    std::vector<std::vector<int> > edges;
    std::vector<Edge> list;
    std::vector<int> h, pt;

    T dfs(int on, int sink, T flow = 1e9) {
        if (flow == 0) {
            return 0;
        } if (on == sink) {
            return flow;
        }
        for (; pt[on] < (int)edges[on].size(); pt[on]++) {
            int cur = edges[on][pt[on]];
            if (h[on] + 1 != h[list[cur].to]) {
                continue;
            }
            T got = dfs(list[cur].to, sink, std::min(flow, list[cur].cap));
            if (got) {
                list[cur].cap -= got;
                list[cur ^ 1].cap += got;
                return got;
            }
        }
        return 0;
    }

    bool bfs(int src, int sink) {
        h = std::vector<int>(n, n);
        h[src] = 0;
        std::queue<int> q;
        q.push(src);
        while (!q.empty()) {
            int on = q.front();
            q.pop();
            for (auto a : edges[on]) {
                if (list[a].cap == 0) {
                    continue;
                }
                int to = list[a].to;
                if (h[to] > h[on] + 1) {
                    h[to] = h[on] + 1;
                    q.push(to);
                }
            }
        }
        return h[sink] < n;
    }
};

int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(nullptr);
    int n, m;
    cin >> n >> m;
    vector<int> p(n), c(n);
    set<int> s;
    for(int i = 0; i < n; i++) {
        s.insert(i);
    }
    for(int i = 0; i < n; i++) {
        cin >> p[i];
    }
    for(int i = 0; i < n; i++) {
        cin >> c[i];
    }
    int q;
    cin >> q;
    vector<int> qq(q), ans(q);
    for(int i = 0; i < q; i++) {
        cin >> qq[i];
        qq[i]--;
        s.erase(qq[i]);
    }
    int id = 0;
    vector<int> ic(m + 1), in(n + 1), out(n + 1);
    for(int i = 1; i <= m; i++) {
        ic[i] = id++;
    }
    for(int i = 0; i <= n; i++) {
        in[i] = id++;
    }
    for(int i = 0; i <= n; i++) {
        out[i] = id++;
    }
    int src = id++;
    int sink = id++;
    Dinic<int> dinic(sink + 1);
    for(int i = 1; i <= m; i++) {
        dinic.addEdge(src, ic[i], 1);
    }
    for(int i = 0; i < n; i++) {
        dinic.addEdge(out[i], out[i + 1], i + 1);
    }
    for(int i = 0; i <= n; i++) {
        dinic.addEdge(in[i], out[i], 1);
    }
    dinic.addEdge(out[n], sink, n + 1);
    for(auto e : s) {
        dinic.addEdge(ic[c[e]], in[p[e]], 1);
    }
    auto res = dinic;
    int sz = s.size(), curans = 0;
    for(int i = q - 1; i >= 0; i--) {
        while(res.maxFlow(src, out[curans]) == curans) {
            curans++;
        }
        ans[i] = curans;
        dinic.addEdge(ic[c[qq[i]]], in[p[qq[i]]], 1);
        res = dinic;
    }
    for(int i = 0; i < q; i++) {
        cout << ans[i] << ""\n"";
    }
    return 0;
}"
Fj43TZ4K,# tk_masked_demo.py,here2share,Python,Tuesday 23rd of January 2024 07:51:34 PM CDT,"# tk_masked_demo.py

import tkinter as tk
from PIL import Image, ImageDraw, ImageTk, ImageFilter, ImageOps
import random

# Create a 500x500 canvas
canvas_width = 500
canvas_height = 500

root = tk.Tk()
canvas = tk.Canvas(root, width=canvas_width, height=canvas_height)
canvas.pack()

# Generate the colorful checkerboard image
checkerboard = Image.new('RGB', (canvas_width, canvas_height), (255, 255, 255))
draw = ImageDraw.Draw(checkerboard)
square_size = 50
colors = []
t = [z for z in range(0, 256, 35)]
for r in t:
	for g in t:
		for b in t:
			colors += [(r, g, b, 255)]
random.shuffle(colors)

for i in range(0, canvas_width, square_size):
    for j in range(0, canvas_height, square_size):
        color = colors.pop()
        draw.rectangle([i, j, i + square_size, j + square_size], fill=color)
checkerboard = checkerboard.filter(ImageFilter.GaussianBlur(radius=20))

polka_dot = Image.new('RGBA', (canvas_width, canvas_height), (255, 255, 255, 0))
draw = ImageDraw.Draw(polka_dot)
dot_size = 20
for i in range(0, canvas_width, dot_size+10):
    for j in range(0, canvas_height, dot_size+10):
        color = colors.pop()
        draw.ellipse([i, j, i + dot_size, j + dot_size], fill=color)
		
# Generate the mask
ww = 400
hh = 400
p = 10
mask = Image.new('L', (ww+p, hh+p), 0)
draw = ImageDraw.Draw(mask)
for i in range(0, min(ww+p, hh+p) // 2):
    draw.rectangle([i, i, ww+p - i, hh+p - i], fill=i * 255 // (min(ww+p, hh+p) // 5))
mask_size = (ww+p, hh+p)

polka_dot = polka_dot.resize(mask_size)
masked_polka_dot = Image.composite(polka_dot, Image.new('RGBA', mask_size, (255, 255, 255, 0)), mask)

checkerboard_tk = ImageTk.PhotoImage(checkerboard)
canvas.create_image(0, 0, anchor=tk.NW, image=checkerboard_tk)

masked_polka_dot_tk = ImageTk.PhotoImage(masked_polka_dot)
canvas.create_image((canvas_width // 2, canvas_height // 2), anchor=tk.CENTER, image=masked_polka_dot_tk)

root.mainloop()"
5uKx2Xc6,AHK IPA,sawczakl,Autohotkey,Tuesday 23rd of January 2024 07:42:23 PM CDT,"; adds Windows + f as an IPA hotkey
; once in IPA mode, press a letter to cycle through IPA symbols (see KEYS below)
; then hit another key (e.g. right arrow or space) to select that symbol
; e.g. to type æ type: windows + f > a > a > right arrow

; comments: luke@sawczak.com
; last updated 2020-08-13


;     KEYS

;     a = ɑ æ ɐ ɑ̃
;     b = β ɓ ʙ
;     c = ɕ ç
;     d = ð d͡ʒ ɖ ɗ
;     e = ə ɚ ɵ ɘ
;     f = ɛ ɜ ɝ ɛ̃ ɞ
;     g = ɠ ɢ ʛ
;     h = ɥ ɦ ħ ɧ ʜ
;     i = ɪ ɪ̈ ɨ
;     j = ʝ ɟ ʄ
;     k = ʔ ʕ ʢ ʡ
;     l = ɫ ɬ ʟ ɭ ɮ
;     m = ɱ
;     n = ŋ ɲ ɴ ɳ
;     o = ɔ œ ø ɒ ɔ̃ ɶ œ̃
;     p = ɸ
;     q = ""ˈ ""ˌ | ‖ ∅
;     r = ɾ ʁ ɹ ɻ ʀ ɽ ɺ
;     s = ʃ ʂ
;     t = θ t͡ʃ t͡s ʈ
;     u = ʊ ʊ̈ ʉ
;     v = ʌ ʋ ⱱ
;     w = ʍ ɯ ɰ
;     x = χ
;     y = ʎ ɣ ʏ ɤ
;     z = ʒ ʐ ʑ


#NoTrayIcon

#NoEnv  ; Recommended for performance and compatibility with future AutoHotkey releases.
; #Warn  ; Enable warnings to assist with detecting common errors.
SendMode Input  ; Recommended for new scripts due to its superior speed and reliability.
SetWorkingDir %A_ScriptDir%  ; Ensures a consistent starting directory.

KEYS := {""a"": [""ɑ"", ""æ"", ""ɐ"", ""ɑ̃""],""b"": [""β"", ""ɓ"", ""ʙ""],""c"": [""ɕ"", ""ç""],""d"": [""ð"", ""d͡ʒ"", ""ɖ"", ""ɗ""],""e"": [""ə"", ""ɚ"", ""ɵ"", ""ɘ""],""f"": [""ɛ"", ""ɜ"", ""ɝ"", ""ɛ̃"", ""ɞ""],""g"": [""ɠ"", ""ɢ"", ""ʛ""],""h"": [""ɥ"", ""ɦ"", ""ħ"", ""ɧ"", ""ʜ""],""i"": [""ɪ"", ""ɪ̈"", ""ɨ""],""j"": [""ʝ"", ""ɟ"", ""ʄ""], ""k"": [""ʔ"", ""ʕ"", ""ʢ"", ""ʡ""],""l"": [""ɫ"", ""ɬ"", ""ʟ"", ""ɭ"", ""ɮ""],""m"": [""ɱ""], ""n"": [""ŋ"", ""ɲ"", ""ɴ"", ""ɳ""],""o"": [""ɔ"", ""œ"", ""ø"", ""ɒ"", ""ɔ̃"", ""ɶ"", ""œ̃""],""p"": [""ɸ""],""q"": [""ˈ"", ""ˌ"", ""|"", ""‖"", ""∅""],""r"": [""ɾ"", ""ʁ"", ""ɹ"", ""ɻ"", ""ʀ"", ""ɽ"", ""ɺ""],""s"": [""ʃ"", ""ʂ""],""t"": [""θ"", ""t͡ʃ"", ""t͡s"", ""ʈ""],""u"": [""ʊ"", ""ʊ̈"", ""ʉ""],""v"": [""ʌ"", ""ʋ"", ""ⱱ""],""w"": [""ʍ"", ""ɯ"", ""ɰ""],""x"": [""χ""],""y"": [""ʎ"", ""ɣ"", ""ʏ"", ""ɤ""],""z"": [""ʒ"", ""ʐ"", ""ʑ""]}

DIRECT := [""1"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"", ""0"", "" "", "","", ""."", "";"", ""/"", ""["", ""]"", ""-"", ""="", ""\"", ""``"", ""'""]

#f::
 caret_x = %A_CaretX%
 caret_y = %A_CaretY%
 caret_y += 50
 
 tooltip, Entering IPA symbol (type alphabetic letters; any other key to quit), caret_x, caret_y

 started := 0
 index := 1
 last := ""-""
 entered := ""-""

 while True {
  Input, key, L1, {RCtrl}{Enter}{Delete}{BackSpace}{Escape}{LAlt}{RAlt}{LShift}{RShift}{AppsKey}{F1}{F2}{F3}{F4}{F5}{F6}{F7}{F8}{F9}{F10}{F11}{F12}{Left}{Right}{Up}{Down}{Home}{End}{PgUp}{PgDn}{Ins}{Capslock}{Numlock}{PrintScreen}{Pause}{LWin}{RWin}

  for i, val in DIRECT {
   if (val = key) {
    tooltip,
    send % key
    return
   }
  }

  if (not (KEYS.HasKey(key))) {
   tooltip,
   return

  } else {

   if ((started = 1) and (key != last)) {
    send % key
    tooltip,
    return
    index := 1
   } else if (key = last) {
    index++
   }

   if ((index) > KEYS[key].MaxIndex()) {
    index := 1
   }

   if (started = 1) {
    Loop, % StrLen(entered) {
     send {BackSpace}
    }
   } else {
    started := 1
   }

   last := key
   entered := KEYS[key][index]
   send % entered
  }
 }

return
"
tGy87Dzy,Disable windows 11 update,Flip,REG,Tuesday 23rd of January 2024 07:26:28 PM CDT,"Windows Registry Editor Version 5.00

[HKEY_LOCAL_MACHINE\SOFTWARE\Policies\Microsoft\Windows\WindowsUpdate]
""TargetReleaseVersion""=dword:00000001
""ProductVersion""=""Windows 10""
""TargetReleaseVersionInfo""=""21H2""
"
HiFZHS0V,Untitled,kopyl,Python,Tuesday 23rd of January 2024 06:35:08 PM CDT,"import pika
from multiprocessing import Pool

    
def worker(message):
    print(message)


def main():
    connection = pika.BlockingConnection(pika.ConnectionParameters(host='localhost'))
    channel = connection.channel()

    pool = Pool(processes=2)

    def callback(ch, method, properties, body):
        message = body.decode()
        pool.apply_async(worker, (message,))

    channel.basic_consume(
        queue='hello',
        on_message_callback=callback,
    )

    channel.start_consuming()

    pool.close()
    pool.join()


if __name__ == '__main__':
    main()"
BWGaH1z5,snowybot completed lua,coinwalk,JavaScript,Tuesday 23rd of January 2024 06:18:58 PM CDT,"divide = 1000
myvery = (divide/5)
base = (balance/divide)
target  = (balance*24)
tens = (base*10)
sevens = (base*6.9)
eights = (base*7.5)
oldbalanceone  = 0
chance = 49.5
bethigh = false
nextbet = base
resetstats()
 
 
 
function dobet()
if ((balance>(((math.floor(balance/tens))*tens)+sevens)) and (balance<(((math.floor(balance/tens))*tens)+eights))) and (not (balance==oldbalanceone))) then
    nextbet = previousbet*2
    oldbalanceone = balance
end
if ((balance<=(nextbet*myvery)) and (balance<(((math.floor(balance/tens))*tens)+sevens))) then
    nextbet = base
    oldbalanceone  = 0
end
if (balance>=target) then
    stop()
end
end"
0CQBy1Eg,2024-01-23_stats.json,rdp_snitch,JSON,Tuesday 23rd of January 2024 06:18:29 PM CDT,"{
  ""ip"": {
    ""125.230.233.221"": 15,
    ""27.128.239.46"": 15,
    ""106.58.215.167"": 15,
    ""203.56.40.167"": 18,
    ""80.151.251.216"": 18,
    ""216.202.197.116"": 24,
    ""82.32.227.142"": 21,
    ""101.43.49.131"": 9,
    ""194.165.17.21"": 81,
    ""36.111.174.56"": 27,
    ""111.161.41.132"": 12,
    ""117.145.27.42"": 39,
    ""106.58.212.195"": 9,
    ""203.56.4.242"": 6,
    ""106.225.199.24"": 6,
    ""115.236.75.10"": 18,
    ""43.134.83.223"": 6,
    ""159.75.129.201"": 6,
    ""106.58.212.201"": 6,
    ""43.243.136.202"": 48,
    ""175.120.134.93"": 9,
    ""103.215.81.133"": 9,
    ""150.223.32.106"": 12,
    ""183.134.89.41"": 12,
    ""110.40.34.231"": 33,
    ""124.67.254.109"": 39,
    ""45.227.254.26"": 6,
    ""106.58.165.88"": 3,
    ""106.58.178.111"": 3,
    ""124.67.115.210"": 18,
    ""113.200.222.57"": 21,
    ""175.120.134.80"": 6,
    ""101.32.126.66"": 12,
    ""175.4.26.179"": 18,
    ""113.108.8.125"": 9,
    ""218.90.120.19"": 6,
    ""45.130.83.146"": 3,
    ""106.55.54.44"": 15,
    ""43.139.115.6"": 3,
    ""43.133.56.30"": 6,
    ""27.8.44.19"": 27,
    ""125.88.211.59"": 3,
    ""103.210.237.233"": 9,
    ""222.219.129.74"": 6,
    ""45.141.26.52"": 6,
    ""121.5.74.35"": 3,
    ""222.219.240.13"": 12,
    ""106.58.164.95"": 9,
    ""62.204.41.195"": 18,
    ""58.247.112.34"": 3,
    ""103.240.84.186"": 18,
    ""80.243.58.249"": 12,
    ""36.111.146.78"": 6,
    ""150.223.46.21"": 6,
    ""111.230.10.59"": 6,
    ""198.235.24.79"": 9,
    ""185.122.204.179"": 3,
    ""111.231.165.19"": 6,
    ""103.245.195.202"": 6,
    ""111.229.232.159"": 9,
    ""45.141.26.228"": 6,
    ""43.134.0.225"": 3,
    ""203.57.39.224"": 9,
    ""122.227.146.74"": 12,
    ""80.66.76.92"": 6,
    ""106.58.166.180"": 3,
    ""42.51.39.209"": 6,
    ""87.251.75.64"": 3,
    ""106.58.221.13"": 9,
    ""118.89.60.27"": 3,
    ""81.19.209.53"": 3,
    ""123.206.124.122"": 6,
    ""87.251.75.145"": 9,
    ""106.75.254.159"": 3,
    ""198.23.194.178"": 3,
    ""134.175.89.91"": 6,
    ""120.202.49.41"": 6,
    ""118.193.44.118"": 6,
    ""219.144.67.36"": 9,
    ""140.246.215.173"": 6,
    ""49.233.212.94"": 6,
    ""130.185.160.231"": 3,
    ""185.106.176.8"": 3,
    ""42.193.192.91"": 15,
    ""106.58.211.156"": 6,
    ""179.60.147.118"": 3,
    ""172.81.216.105"": 6,
    ""134.175.53.186"": 6,
    ""117.33.174.14"": 9,
    ""175.178.78.184"": 6,
    ""106.58.217.61"": 6,
    ""12.193.127.18"": 15,
    ""49.232.169.162"": 3,
    ""185.170.144.3"": 6,
    ""45.227.254.55"": 6,
    ""150.223.76.57"": 3,
    ""111.173.80.148"": 9,
    ""205.210.31.240"": 9,
    ""119.96.169.74"": 3,
    ""109.69.7.157"": 9,
    ""84.9.179.179"": 3,
    ""43.134.33.208"": 9,
    ""81.69.247.8"": 18,
    ""123.56.20.194"": 6,
    ""45.93.20.204"": 18,
    ""213.250.1.122"": 6,
    ""62.6.252.50"": 9,
    ""111.173.80.147"": 3,
    ""194.165.16.78"": 6,
    ""208.53.61.115"": 9,
    ""150.223.79.15"": 6,
    ""211.91.60.69"": 12,
    ""95.130.227.198"": 9,
    ""45.141.26.152"": 6,
    ""120.48.64.252"": 3,
    ""106.75.123.252"": 12,
    ""50.116.32.103"": 12,
    ""45.33.115.210"": 3,
    ""210.3.96.246"": 9,
    ""101.33.237.209"": 3,
    ""106.58.164.84"": 6,
    ""212.186.143.100"": 3,
    ""87.191.150.194"": 6,
    ""61.171.113.104"": 6,
    ""103.44.237.12"": 6,
    ""14.18.41.26"": 3,
    ""165.154.182.72"": 3,
    ""106.75.245.66"": 3,
    ""194.28.101.253"": 3,
    ""106.58.210.135"": 6,
    ""196.190.117.7"": 3,
    ""205.210.31.17"": 9,
    ""1.168.133.78"": 3,
    ""106.58.219.212"": 3,
    ""61.171.106.140"": 6,
    ""222.93.104.67"": 9,
    ""1.117.40.238"": 3,
    ""106.225.199.92"": 6,
    ""101.43.174.224"": 6,
    ""150.223.35.239"": 3,
    ""106.58.178.2"": 3,
    ""185.196.220.41"": 9,
    ""193.142.146.227"": 9,
    ""77.90.185.2"": 9,
    ""106.75.20.182"": 3,
    ""194.165.16.11"": 6,
    ""106.58.184.58"": 3,
    ""106.75.6.46"": 3,
    ""93.92.133.74"": 3,
    ""81.70.142.203"": 6,
    ""194.165.16.73"": 6,
    ""106.116.169.71"": 3,
    ""111.229.184.146"": 3,
    ""195.234.28.44"": 3,
    ""205.210.31.100"": 9,
    ""180.76.153.250"": 3,
    ""101.33.204.231"": 3,
    ""140.246.149.76"": 3
  },
  ""asn"": {
    ""AS3462"": 18,
    ""AS4134"": 183,
    ""AS58519"": 105,
    ""AS3320"": 24,
    ""AS3356"": 24,
    ""AS5089"": 21,
    ""AS45090"": 156,
    ""AS48721"": 99,
    ""AS4837"": 147,
    ""AS9808"": 45,
    ""AS134238"": 12,
    ""AS132203"": 36,
    ""AS4808"": 48,
    ""AS9318"": 15,
    ""AS55933"": 9,
    ""AS58461"": 12,
    ""AS38283"": 33,
    ""AS267784"": 12,
    ""AS63838"": 18,
    ""AS206092"": 3,
    ""AS58466"": 3,
    ""AS142403"": 9,
    ""AS142299"": 18,
    ""AS59425"": 18,
    ""AS17621"": 9,
    ""AS21413"": 12,
    ""AS396982"": 36,
    ""AS57523"": 21,
    ""AS9541"": 6,
    ""AS208091"": 18,
    ""AS56005"": 6,
    ""AS25369"": 3,
    ""AS36352"": 3,
    ""AS135377"": 9,
    ""AS134768"": 18,
    ""AS60949"": 3,
    ""AS42960"": 3,
    ""AS209588"": 3,
    ""AS7018"": 15,
    ""AS197414"": 6,
    ""AS148981"": 12,
    ""AS58563"": 3,
    ""AS21183"": 9,
    ""AS25310"": 3,
    ""AS37963"": 6,
    ""AS5603"": 6,
    ""AS2856"": 9,
    ""AS17341"": 9,
    ""AS35682"": 9,
    ""AS38365"": 6,
    ""AS23724"": 18,
    ""AS63949"": 15,
    ""AS9304"": 9,
    ""AS8412"": 3,
    ""AS4812"": 12,
    ""AS4816"": 6,
    ""AS211218"": 3,
    ""AS24757"": 3,
    ""AS208046"": 18,
    ""AS198465"": 9,
    ""AS29014"": 3,
    ""AS43872"": 3
  },
  ""isp"": {
    ""Chunghwa Telecom Co., Ltd."": 18,
    ""Chinanet"": 192,
    ""Cloud Computing Corporation"": 105,
    ""Deutsche Telekom AG"": 24,
    ""Level 3 Communications"": 24,
    ""Virgin Media"": 21,
    ""Shenzhen Tencent Computer Systems Company Limited"": 147,
    ""Flyservers S.A."": 114,
    ""China Unicom Tianjin Province Network"": 12,
    ""China Mobile communications corporation"": 45,
    ""CHINANET Jiangx province IDC network"": 12,
    ""China Unicom Beijing Province Network"": 48,
    ""SK Broadband Co Ltd"": 15,
    ""Cloudie Limited"": 9,
    ""CHINANET SiChuan Telecom Internet Data Center"": 33,
    ""CNC Group CHINA169 Neimeng Province Network"": 57,
    ""CNC Group CHINA169 Shannxi Province Network"": 21,
    ""Aceville Pte.ltd"": 18,
    ""Hengyang"": 18,
    ""Ipxo Limited"": 3,
    ""China Unicom Chongqing Province Network"": 27,
    ""China Telecom"": 15,
    ""Yisu Cloud LTD"": 9,
    ""CLOUDFOREST CO., LTD"": 18,
    ""China Internet Network Information Center"": 21,
    ""Horizon LLC"": 18,
    ""CNC Group CHINA169 Shanghai Province Network"": 3,
    ""China Unicom CHINA169 Network"": 18,
    ""envia TEL GmbH"": 12,
    ""Google LLC"": 36,
    ""Chang Way Technologies Co. Limited"": 21,
    ""Cyber Internet Services (Private) Limited"": 6,
    ""Xhost Internet Solutions LP"": 24,
    ""China Unicom Henan Province network"": 6,
    ""Hydra Communications Ltd"": 3,
    ""UCLOUD"": 24,
    ""HostPapa"": 3,
    ""UCLOUD INFORMATION TECHNOLOGY (HK) LIMITED"": 9,
    ""CHINANET SHAANXI province Cloud Base network"": 18,
    ""4X SOLUTIONS"": 3,
    ""VH-GLOBAL"": 3,
    ""AT&T Services, Inc."": 15,
    ""CHINANET Hubei province network"": 3,
    ""Vodafone Network"": 9,
    ""Bulldog Communications"": 3,
    ""Hangzhou Alibaba Advertising Co"": 6,
    ""SIOL"": 6,
    ""British Telecommunications PLC"": 9,
    ""C7 Data Centers"": 9,
    ""CHINA UNICOM China169 Backbone"": 12,
    ""Best Internet Solution XK"": 9,
    ""Beijing Baidu Netcom Science and Technology Co., Ltd."": 6,
    ""Akamai Technologies, Inc."": 15,
    ""HGC Global Communications Limited"": 9,
    ""T-Mobile Austria GmbH"": 3,
    ""China Telecom (Group)"": 18,
    ""CHINANET Guangdong province network"": 3,
    ""Kyiv National University of Construction and Architecture"": 3,
    ""Ethiotelecom"": 3,
    ""ColocationX Ltd."": 18,
    ""BtHoster LTD"": 9,
    ""INTERNET4YOU"": 3,
    ""EuroNet Internet"": 6,
    ""Optinet U.K. Limited"": 3
  },
  ""org"": {
    ""Chunghwa Telecom Co. Ltd."": 18,
    ""Chinanet HE"": 18,
    ""Chinanet YN"": 108,
    ""Chinanet FJ"": 33,
    ""Deutsche Telekom AG"": 24,
    ""Fort Wayne Internet, LLC"": 24,
    ""Unknown"": 213,
    ""Tencent Cloud Computing (Beijing) Co., Ltd"": 66,
    ""Flyservers S.A"": 99,
    ""Chinanet ZJ"": 33,
    ""China Mobile"": 45,
    ""Chinanet JX"": 12,
    ""Hangzhou xiaoshan public transportation co., LTD"": 18,
    ""Tencent Cloud Computing"": 18,
    ""Beijing yunchuang communication Technology Co."": 48,
    ""SK Broadband Co Ltd"": 15,
    ""Netads Online Limited"": 9,
    ""Chinanet SD"": 39,
    ""Chengdu Giant Times Technology Co., Ltd"": 33,
    ""UAB Host Baltic"": 12,
    ""Chinanet HN"": 18,
    ""Chinanet GD"": 12,
    ""Chinanet JS"": 15,
    ""VPN Consumer New York City, United States of America"": 3,
    ""Tencent cloud computing (Beijing) Co., Ltd."": 78,
    ""HK Kwaifong Group Limited"": 9,
    ""Cloudforest CO., LTD"": 18,
    ""Horizon LLC"": 18,
    ""envia.tel GmbH"": 12,
    ""Palo Alto Networks, Inc"": 36,
    ""Starcrecium Limited"": 21,
    ""Cyber Internet Services Pakistan"": 6,
    ""Ningbo chaoji mamawangluojishu ltd"": 12,
    ""Xhost Internet Solutions"": 18,
    ""Henan Telcom Union Technology Co., LTD"": 6,
    ""Hydra Communications Ltd"": 3,
    ""Shanghai UCloud Information Technology Company Limited"": 24,
    ""ColoCrossing"": 3,
    ""UCLOUD INFORMATION TECHNOLOGY (HK) LIMITED"": 6,
    ""Chinanet SN"": 18,
    ""4x Solutions UK LTD"": 3,
    ""VH Global Limited"": 3,
    ""Cloud Solutions S.A"": 3,
    ""Golden-Bridge Netcom communication Co., LTD."": 6,
    ""ATT SERVICES INC- PEG"": 15,
    ""Xhostis"": 6,
    ""Chinanet HB"": 15,
    ""Aliyun Computing Co., LTD"": 6,
    ""Btnet"": 9,
    ""VegaDigital Solutions"": 9,
    ""Unicom"": 12,
    ""Best Internet Solution XK"": 9,
    ""Beijing Baidu Netcom Science and Technology Co., Ltd."": 6,
    ""Linode"": 15,
    ""HGC Global Communications Limited"": 9,
    ""LBR GmbH"": 3,
    ""Chinanet SH"": 12,
    ""Shenzhen Qianhai bird cloud computing Co. Ltd."": 6,
    ""Ucloud Information Technology"": 3,
    ""Kyiv National University of Construction and Architecture"": 3,
    ""Makut Investments"": 9,
    ""ColocationX Ltd"": 9,
    ""BtHoster LTD"": 9,
    ""internet4YOU GmbH & Co. KG"": 3,
    ""Online Breedband B.V."": 6,
    ""Optinet U.K. Networks 9 Limited"": 3
  },
  ""regionName"": {
    ""Taichung City"": 18,
    ""Hebei"": 18,
    ""Yunnan"": 108,
    ""Fujian"": 51,
    ""Bavaria"": 27,
    ""Indiana"": 24,
    ""Scotland"": 21,
    ""Shanghai"": 48,
    ""Kaunas"": 99,
    ""Zhejiang"": 75,
    ""Tianjin"": 12,
    ""Guangdong"": 138,
    ""Jiangxi"": 12,
    ""North West"": 24,
    ""Beijing"": 165,
    ""Gyeongsangbuk-do"": 15,
    ""Central and Western District"": 27,
    ""Shandong"": 39,
    ""Sichuan"": 33,
    ""Inner Mongolia"": 39,
    ""Vilnius"": 12,
    ""Shaanxi"": 21,
    ""Central Singapore"": 12,
    ""Hunan"": 18,
    ""Jiangsu"": 15,
    ""New York"": 6,
    ""Chongqing"": 27,
    ""Tsuen Wan District"": 9,
    ""Bangkok"": 18,
    ""Moscow"": 39,
    ""Brandenburg"": 12,
    ""California"": 39,
    ""Sindh"": 6,
    ""North Holland"": 36,
    ""Henan"": 6,
    ""Shanxi"": 18,
    ""England"": 18,
    ""Distrito Federal"": 3,
    ""Texas"": 18,
    ""Hubei"": 15,
    ""Tirana"": 9,
    ""Ljubljana"": 6,
    ""Utah"": 9,
    ""Tashkent"": 9,
    ""Georgia"": 12,
    ""Vienna"": 3,
    ""Rheinland-Pfalz"": 6,
    ""Kyiv City"": 3,
    ""Addis Ababa"": 3,
    ""Virginia"": 9,
    ""Free and Hanseatic City of Hamburg"": 3
  },
  ""country"": {
    ""Taiwan"": 18,
    ""China"": 858,
    ""Germany"": 48,
    ""United States"": 117,
    ""United Kingdom"": 39,
    ""Lithuania"": 111,
    ""Singapore"": 36,
    ""South Korea"": 15,
    ""Hong Kong"": 36,
    ""Thailand"": 18,
    ""Russia"": 39,
    ""Pakistan"": 6,
    ""The Netherlands"": 36,
    ""Venezuela"": 3,
    ""Albania"": 9,
    ""Slovenia"": 6,
    ""Uzbekistan"": 9,
    ""Austria"": 3,
    ""Ukraine"": 3,
    ""Ethiopia"": 3
  },
  ""account"": {
    ""142.93.8.59"": 1191,
    ""Test"": 48,
    ""(empty)"": 9,
    ""OIgxPhjAS"": 3,
    ""WiXYvW"": 3,
    ""XqHoSI"": 3,
    ""Administr"": 30,
    ""hYKqblKUh"": 3,
    ""nsSjOo"": 3,
    ""lzHQer"": 3,
    ""hello"": 12,
    ""Domain"": 66,
    ""vokbaasv"": 12,
    ""beio"": 3,
    ""Administrator"": 3,
    ""FZZhdIxTb"": 3,
    ""vbfBej"": 3,
    ""JjLleP"": 3,
    ""user"": 3,
    ""jJwIpceeb"": 3,
    ""bryLvJ"": 3,
    ""fnnICP"": 3
  },
  ""keyboard"": {
    ""Unknown"": 1413
  },
  ""client_build"": {
    ""Unknown"": 1413
  },
  ""client_name"": {
    ""Unknown"": 1413
  },
  ""ip_type"": {
    ""Unknown"": 1038,
    ""mobile"": 75,
    ""hosting"": 234,
    ""proxy"": 60,
    ""mobile & proxy"": 3,
    ""hosting & proxy"": 3
  }
}"
i8MMfggT,2024-01-23_stats.json,rdp_snitch,JSON,Tuesday 23rd of January 2024 06:16:16 PM CDT,"{
  ""ip"": {
    ""125.230.233.221"": 10,
    ""27.128.239.46"": 10,
    ""106.58.215.167"": 10,
    ""203.56.40.167"": 12,
    ""80.151.251.216"": 12,
    ""216.202.197.116"": 16,
    ""82.32.227.142"": 14,
    ""101.43.49.131"": 6,
    ""194.165.17.21"": 54,
    ""36.111.174.56"": 18,
    ""111.161.41.132"": 8,
    ""117.145.27.42"": 26,
    ""106.58.212.195"": 6,
    ""203.56.4.242"": 4,
    ""106.225.199.24"": 4,
    ""115.236.75.10"": 12,
    ""43.134.83.223"": 4,
    ""159.75.129.201"": 4,
    ""106.58.212.201"": 4,
    ""43.243.136.202"": 32,
    ""175.120.134.93"": 6,
    ""103.215.81.133"": 6,
    ""150.223.32.106"": 8,
    ""183.134.89.41"": 8,
    ""110.40.34.231"": 22,
    ""124.67.254.109"": 26,
    ""45.227.254.26"": 4,
    ""106.58.165.88"": 2,
    ""106.58.178.111"": 2,
    ""124.67.115.210"": 12,
    ""113.200.222.57"": 14,
    ""175.120.134.80"": 4,
    ""101.32.126.66"": 8,
    ""175.4.26.179"": 12,
    ""113.108.8.125"": 6,
    ""218.90.120.19"": 4,
    ""45.130.83.146"": 2,
    ""106.55.54.44"": 10,
    ""43.139.115.6"": 2,
    ""43.133.56.30"": 4,
    ""27.8.44.19"": 18,
    ""125.88.211.59"": 2,
    ""103.210.237.233"": 6,
    ""222.219.129.74"": 4,
    ""45.141.26.52"": 4,
    ""121.5.74.35"": 2,
    ""222.219.240.13"": 8,
    ""106.58.164.95"": 6,
    ""62.204.41.195"": 12,
    ""58.247.112.34"": 2,
    ""103.240.84.186"": 12,
    ""80.243.58.249"": 8,
    ""36.111.146.78"": 4,
    ""150.223.46.21"": 4,
    ""111.230.10.59"": 4,
    ""198.235.24.79"": 6,
    ""185.122.204.179"": 2,
    ""111.231.165.19"": 4,
    ""103.245.195.202"": 4,
    ""111.229.232.159"": 6,
    ""45.141.26.228"": 4,
    ""43.134.0.225"": 2,
    ""203.57.39.224"": 6,
    ""122.227.146.74"": 8,
    ""80.66.76.92"": 4,
    ""106.58.166.180"": 2,
    ""42.51.39.209"": 4,
    ""87.251.75.64"": 2,
    ""106.58.221.13"": 6,
    ""118.89.60.27"": 2,
    ""81.19.209.53"": 2,
    ""123.206.124.122"": 4,
    ""87.251.75.145"": 6,
    ""106.75.254.159"": 2,
    ""198.23.194.178"": 2,
    ""134.175.89.91"": 4,
    ""120.202.49.41"": 4,
    ""118.193.44.118"": 4,
    ""219.144.67.36"": 6,
    ""140.246.215.173"": 4,
    ""49.233.212.94"": 4,
    ""130.185.160.231"": 2,
    ""185.106.176.8"": 2,
    ""42.193.192.91"": 10,
    ""106.58.211.156"": 4,
    ""179.60.147.118"": 2,
    ""172.81.216.105"": 4,
    ""134.175.53.186"": 4,
    ""117.33.174.14"": 6,
    ""175.178.78.184"": 4,
    ""106.58.217.61"": 4,
    ""12.193.127.18"": 10,
    ""49.232.169.162"": 2,
    ""185.170.144.3"": 4,
    ""45.227.254.55"": 4,
    ""150.223.76.57"": 2,
    ""111.173.80.148"": 6,
    ""205.210.31.240"": 6,
    ""119.96.169.74"": 2,
    ""109.69.7.157"": 6,
    ""84.9.179.179"": 2,
    ""43.134.33.208"": 6,
    ""81.69.247.8"": 12,
    ""123.56.20.194"": 4,
    ""45.93.20.204"": 12,
    ""213.250.1.122"": 4,
    ""62.6.252.50"": 6,
    ""111.173.80.147"": 2,
    ""194.165.16.78"": 4,
    ""208.53.61.115"": 6,
    ""150.223.79.15"": 4,
    ""211.91.60.69"": 8,
    ""95.130.227.198"": 6,
    ""45.141.26.152"": 4,
    ""120.48.64.252"": 2,
    ""106.75.123.252"": 8,
    ""50.116.32.103"": 8,
    ""45.33.115.210"": 2,
    ""210.3.96.246"": 6,
    ""101.33.237.209"": 2,
    ""106.58.164.84"": 4,
    ""212.186.143.100"": 2,
    ""87.191.150.194"": 4,
    ""61.171.113.104"": 4,
    ""103.44.237.12"": 4,
    ""14.18.41.26"": 2,
    ""165.154.182.72"": 2,
    ""106.75.245.66"": 2,
    ""194.28.101.253"": 2,
    ""106.58.210.135"": 4,
    ""196.190.117.7"": 2,
    ""205.210.31.17"": 6,
    ""1.168.133.78"": 2,
    ""106.58.219.212"": 2,
    ""61.171.106.140"": 4,
    ""222.93.104.67"": 6,
    ""1.117.40.238"": 2,
    ""106.225.199.92"": 4,
    ""101.43.174.224"": 4,
    ""150.223.35.239"": 2,
    ""106.58.178.2"": 2,
    ""185.196.220.41"": 6,
    ""193.142.146.227"": 6,
    ""77.90.185.2"": 6,
    ""106.75.20.182"": 2,
    ""194.165.16.11"": 4,
    ""106.58.184.58"": 2,
    ""106.75.6.46"": 2,
    ""93.92.133.74"": 2,
    ""81.70.142.203"": 4,
    ""194.165.16.73"": 4,
    ""106.116.169.71"": 2,
    ""111.229.184.146"": 2,
    ""195.234.28.44"": 2,
    ""205.210.31.100"": 6,
    ""180.76.153.250"": 2,
    ""101.33.204.231"": 2,
    ""140.246.149.76"": 2
  },
  ""asn"": {
    ""AS3462"": 12,
    ""AS4134"": 122,
    ""AS58519"": 70,
    ""AS3320"": 16,
    ""AS3356"": 16,
    ""AS5089"": 14,
    ""AS45090"": 104,
    ""AS48721"": 66,
    ""AS4837"": 98,
    ""AS9808"": 30,
    ""AS134238"": 8,
    ""AS132203"": 24,
    ""AS4808"": 32,
    ""AS9318"": 10,
    ""AS55933"": 6,
    ""AS58461"": 8,
    ""AS38283"": 22,
    ""AS267784"": 8,
    ""AS63838"": 12,
    ""AS206092"": 2,
    ""AS58466"": 2,
    ""AS142403"": 6,
    ""AS142299"": 12,
    ""AS59425"": 12,
    ""AS17621"": 6,
    ""AS21413"": 8,
    ""AS396982"": 24,
    ""AS57523"": 14,
    ""AS9541"": 4,
    ""AS208091"": 12,
    ""AS56005"": 4,
    ""AS25369"": 2,
    ""AS36352"": 2,
    ""AS135377"": 6,
    ""AS134768"": 12,
    ""AS60949"": 2,
    ""AS42960"": 2,
    ""AS209588"": 2,
    ""AS7018"": 10,
    ""AS197414"": 4,
    ""AS148981"": 8,
    ""AS58563"": 2,
    ""AS21183"": 6,
    ""AS25310"": 2,
    ""AS37963"": 4,
    ""AS5603"": 4,
    ""AS2856"": 6,
    ""AS17341"": 6,
    ""AS35682"": 6,
    ""AS38365"": 4,
    ""AS23724"": 12,
    ""AS63949"": 10,
    ""AS9304"": 6,
    ""AS8412"": 2,
    ""AS4812"": 8,
    ""AS4816"": 4,
    ""AS211218"": 2,
    ""AS24757"": 2,
    ""AS208046"": 12,
    ""AS198465"": 6,
    ""AS29014"": 2,
    ""AS43872"": 2
  },
  ""isp"": {
    ""Chunghwa Telecom Co., Ltd."": 12,
    ""Chinanet"": 128,
    ""Cloud Computing Corporation"": 70,
    ""Deutsche Telekom AG"": 16,
    ""Level 3 Communications"": 16,
    ""Virgin Media"": 14,
    ""Shenzhen Tencent Computer Systems Company Limited"": 98,
    ""Flyservers S.A."": 76,
    ""China Unicom Tianjin Province Network"": 8,
    ""China Mobile communications corporation"": 30,
    ""CHINANET Jiangx province IDC network"": 8,
    ""China Unicom Beijing Province Network"": 32,
    ""SK Broadband Co Ltd"": 10,
    ""Cloudie Limited"": 6,
    ""CHINANET SiChuan Telecom Internet Data Center"": 22,
    ""CNC Group CHINA169 Neimeng Province Network"": 38,
    ""CNC Group CHINA169 Shannxi Province Network"": 14,
    ""Aceville Pte.ltd"": 12,
    ""Hengyang"": 12,
    ""Ipxo Limited"": 2,
    ""China Unicom Chongqing Province Network"": 18,
    ""China Telecom"": 10,
    ""Yisu Cloud LTD"": 6,
    ""CLOUDFOREST CO., LTD"": 12,
    ""China Internet Network Information Center"": 14,
    ""Horizon LLC"": 12,
    ""CNC Group CHINA169 Shanghai Province Network"": 2,
    ""China Unicom CHINA169 Network"": 12,
    ""envia TEL GmbH"": 8,
    ""Google LLC"": 24,
    ""Chang Way Technologies Co. Limited"": 14,
    ""Cyber Internet Services (Private) Limited"": 4,
    ""Xhost Internet Solutions LP"": 16,
    ""China Unicom Henan Province network"": 4,
    ""Hydra Communications Ltd"": 2,
    ""UCLOUD"": 16,
    ""HostPapa"": 2,
    ""UCLOUD INFORMATION TECHNOLOGY (HK) LIMITED"": 6,
    ""CHINANET SHAANXI province Cloud Base network"": 12,
    ""4X SOLUTIONS"": 2,
    ""VH-GLOBAL"": 2,
    ""AT&T Services, Inc."": 10,
    ""CHINANET Hubei province network"": 2,
    ""Vodafone Network"": 6,
    ""Bulldog Communications"": 2,
    ""Hangzhou Alibaba Advertising Co"": 4,
    ""SIOL"": 4,
    ""British Telecommunications PLC"": 6,
    ""C7 Data Centers"": 6,
    ""CHINA UNICOM China169 Backbone"": 8,
    ""Best Internet Solution XK"": 6,
    ""Beijing Baidu Netcom Science and Technology Co., Ltd."": 4,
    ""Akamai Technologies, Inc."": 10,
    ""HGC Global Communications Limited"": 6,
    ""T-Mobile Austria GmbH"": 2,
    ""China Telecom (Group)"": 12,
    ""CHINANET Guangdong province network"": 2,
    ""Kyiv National University of Construction and Architecture"": 2,
    ""Ethiotelecom"": 2,
    ""ColocationX Ltd."": 12,
    ""BtHoster LTD"": 6,
    ""INTERNET4YOU"": 2,
    ""EuroNet Internet"": 4,
    ""Optinet U.K. Limited"": 2
  },
  ""org"": {
    ""Chunghwa Telecom Co. Ltd."": 12,
    ""Chinanet HE"": 12,
    ""Chinanet YN"": 72,
    ""Chinanet FJ"": 22,
    ""Deutsche Telekom AG"": 16,
    ""Fort Wayne Internet, LLC"": 16,
    ""Unknown"": 142,
    ""Tencent Cloud Computing (Beijing) Co., Ltd"": 44,
    ""Flyservers S.A"": 66,
    ""Chinanet ZJ"": 22,
    ""China Mobile"": 30,
    ""Chinanet JX"": 8,
    ""Hangzhou xiaoshan public transportation co., LTD"": 12,
    ""Tencent Cloud Computing"": 12,
    ""Beijing yunchuang communication Technology Co."": 32,
    ""SK Broadband Co Ltd"": 10,
    ""Netads Online Limited"": 6,
    ""Chinanet SD"": 26,
    ""Chengdu Giant Times Technology Co., Ltd"": 22,
    ""UAB Host Baltic"": 8,
    ""Chinanet HN"": 12,
    ""Chinanet GD"": 8,
    ""Chinanet JS"": 10,
    ""VPN Consumer New York City, United States of America"": 2,
    ""Tencent cloud computing (Beijing) Co., Ltd."": 52,
    ""HK Kwaifong Group Limited"": 6,
    ""Cloudforest CO., LTD"": 12,
    ""Horizon LLC"": 12,
    ""envia.tel GmbH"": 8,
    ""Palo Alto Networks, Inc"": 24,
    ""Starcrecium Limited"": 14,
    ""Cyber Internet Services Pakistan"": 4,
    ""Ningbo chaoji mamawangluojishu ltd"": 8,
    ""Xhost Internet Solutions"": 12,
    ""Henan Telcom Union Technology Co., LTD"": 4,
    ""Hydra Communications Ltd"": 2,
    ""Shanghai UCloud Information Technology Company Limited"": 16,
    ""ColoCrossing"": 2,
    ""UCLOUD INFORMATION TECHNOLOGY (HK) LIMITED"": 4,
    ""Chinanet SN"": 12,
    ""4x Solutions UK LTD"": 2,
    ""VH Global Limited"": 2,
    ""Cloud Solutions S.A"": 2,
    ""Golden-Bridge Netcom communication Co., LTD."": 4,
    ""ATT SERVICES INC- PEG"": 10,
    ""Xhostis"": 4,
    ""Chinanet HB"": 10,
    ""Aliyun Computing Co., LTD"": 4,
    ""Btnet"": 6,
    ""VegaDigital Solutions"": 6,
    ""Unicom"": 8,
    ""Best Internet Solution XK"": 6,
    ""Beijing Baidu Netcom Science and Technology Co., Ltd."": 4,
    ""Linode"": 10,
    ""HGC Global Communications Limited"": 6,
    ""LBR GmbH"": 2,
    ""Chinanet SH"": 8,
    ""Shenzhen Qianhai bird cloud computing Co. Ltd."": 4,
    ""Ucloud Information Technology"": 2,
    ""Kyiv National University of Construction and Architecture"": 2,
    ""Makut Investments"": 6,
    ""ColocationX Ltd"": 6,
    ""BtHoster LTD"": 6,
    ""internet4YOU GmbH & Co. KG"": 2,
    ""Online Breedband B.V."": 4,
    ""Optinet U.K. Networks 9 Limited"": 2
  },
  ""regionName"": {
    ""Taichung City"": 12,
    ""Hebei"": 12,
    ""Yunnan"": 72,
    ""Fujian"": 34,
    ""Bavaria"": 18,
    ""Indiana"": 16,
    ""Scotland"": 14,
    ""Shanghai"": 32,
    ""Kaunas"": 66,
    ""Zhejiang"": 50,
    ""Tianjin"": 8,
    ""Guangdong"": 92,
    ""Jiangxi"": 8,
    ""North West"": 16,
    ""Beijing"": 110,
    ""Gyeongsangbuk-do"": 10,
    ""Central and Western District"": 18,
    ""Shandong"": 26,
    ""Sichuan"": 22,
    ""Inner Mongolia"": 26,
    ""Vilnius"": 8,
    ""Shaanxi"": 14,
    ""Central Singapore"": 8,
    ""Hunan"": 12,
    ""Jiangsu"": 10,
    ""New York"": 4,
    ""Chongqing"": 18,
    ""Tsuen Wan District"": 6,
    ""Bangkok"": 12,
    ""Moscow"": 26,
    ""Brandenburg"": 8,
    ""California"": 26,
    ""Sindh"": 4,
    ""North Holland"": 24,
    ""Henan"": 4,
    ""Shanxi"": 12,
    ""England"": 12,
    ""Distrito Federal"": 2,
    ""Texas"": 12,
    ""Hubei"": 10,
    ""Tirana"": 6,
    ""Ljubljana"": 4,
    ""Utah"": 6,
    ""Tashkent"": 6,
    ""Georgia"": 8,
    ""Vienna"": 2,
    ""Rheinland-Pfalz"": 4,
    ""Kyiv City"": 2,
    ""Addis Ababa"": 2,
    ""Virginia"": 6,
    ""Free and Hanseatic City of Hamburg"": 2
  },
  ""country"": {
    ""Taiwan"": 12,
    ""China"": 572,
    ""Germany"": 32,
    ""United States"": 78,
    ""United Kingdom"": 26,
    ""Lithuania"": 74,
    ""Singapore"": 24,
    ""South Korea"": 10,
    ""Hong Kong"": 24,
    ""Thailand"": 12,
    ""Russia"": 26,
    ""Pakistan"": 4,
    ""The Netherlands"": 24,
    ""Venezuela"": 2,
    ""Albania"": 6,
    ""Slovenia"": 4,
    ""Uzbekistan"": 6,
    ""Austria"": 2,
    ""Ukraine"": 2,
    ""Ethiopia"": 2
  },
  ""account"": {
    ""142.93.8.59"": 794,
    ""Test"": 32,
    ""(empty)"": 6,
    ""OIgxPhjAS"": 2,
    ""WiXYvW"": 2,
    ""XqHoSI"": 2,
    ""Administr"": 20,
    ""hYKqblKUh"": 2,
    ""nsSjOo"": 2,
    ""lzHQer"": 2,
    ""hello"": 8,
    ""Domain"": 44,
    ""vokbaasv"": 8,
    ""beio"": 2,
    ""Administrator"": 2,
    ""FZZhdIxTb"": 2,
    ""vbfBej"": 2,
    ""JjLleP"": 2,
    ""user"": 2,
    ""jJwIpceeb"": 2,
    ""bryLvJ"": 2,
    ""fnnICP"": 2
  },
  ""keyboard"": {
    ""Unknown"": 942
  },
  ""client_build"": {
    ""Unknown"": 942
  },
  ""client_name"": {
    ""Unknown"": 942
  },
  ""ip_type"": {
    ""Unknown"": 692,
    ""mobile"": 50,
    ""hosting"": 156,
    ""proxy"": 40,
    ""mobile & proxy"": 2,
    ""hosting & proxy"": 2
  }
}"
jfWjpeF7,2024-01-23_stats.json,rdp_snitch,JSON,Tuesday 23rd of January 2024 06:15:09 PM CDT,"{
  ""ip"": {
    ""125.230.233.221"": 5,
    ""27.128.239.46"": 5,
    ""106.58.215.167"": 5,
    ""203.56.40.167"": 6,
    ""80.151.251.216"": 6,
    ""216.202.197.116"": 8,
    ""82.32.227.142"": 7,
    ""101.43.49.131"": 3,
    ""194.165.17.21"": 27,
    ""36.111.174.56"": 9,
    ""111.161.41.132"": 4,
    ""117.145.27.42"": 13,
    ""106.58.212.195"": 3,
    ""203.56.4.242"": 2,
    ""106.225.199.24"": 2,
    ""115.236.75.10"": 6,
    ""43.134.83.223"": 2,
    ""159.75.129.201"": 2,
    ""106.58.212.201"": 2,
    ""43.243.136.202"": 16,
    ""175.120.134.93"": 3,
    ""103.215.81.133"": 3,
    ""150.223.32.106"": 4,
    ""183.134.89.41"": 4,
    ""110.40.34.231"": 11,
    ""124.67.254.109"": 13,
    ""45.227.254.26"": 2,
    ""106.58.165.88"": 1,
    ""106.58.178.111"": 1,
    ""124.67.115.210"": 6,
    ""113.200.222.57"": 7,
    ""175.120.134.80"": 2,
    ""101.32.126.66"": 4,
    ""175.4.26.179"": 6,
    ""113.108.8.125"": 3,
    ""218.90.120.19"": 2,
    ""45.130.83.146"": 1,
    ""106.55.54.44"": 5,
    ""43.139.115.6"": 1,
    ""43.133.56.30"": 2,
    ""27.8.44.19"": 9,
    ""125.88.211.59"": 1,
    ""103.210.237.233"": 3,
    ""222.219.129.74"": 2,
    ""45.141.26.52"": 2,
    ""121.5.74.35"": 1,
    ""222.219.240.13"": 4,
    ""106.58.164.95"": 3,
    ""62.204.41.195"": 6,
    ""58.247.112.34"": 1,
    ""103.240.84.186"": 6,
    ""80.243.58.249"": 4,
    ""36.111.146.78"": 2,
    ""150.223.46.21"": 2,
    ""111.230.10.59"": 2,
    ""198.235.24.79"": 3,
    ""185.122.204.179"": 1,
    ""111.231.165.19"": 2,
    ""103.245.195.202"": 2,
    ""111.229.232.159"": 3,
    ""45.141.26.228"": 2,
    ""43.134.0.225"": 1,
    ""203.57.39.224"": 3,
    ""122.227.146.74"": 4,
    ""80.66.76.92"": 2,
    ""106.58.166.180"": 1,
    ""42.51.39.209"": 2,
    ""87.251.75.64"": 1,
    ""106.58.221.13"": 3,
    ""118.89.60.27"": 1,
    ""81.19.209.53"": 1,
    ""123.206.124.122"": 2,
    ""87.251.75.145"": 3,
    ""106.75.254.159"": 1,
    ""198.23.194.178"": 1,
    ""134.175.89.91"": 2,
    ""120.202.49.41"": 2,
    ""118.193.44.118"": 2,
    ""219.144.67.36"": 3,
    ""140.246.215.173"": 2,
    ""49.233.212.94"": 2,
    ""130.185.160.231"": 1,
    ""185.106.176.8"": 1,
    ""42.193.192.91"": 5,
    ""106.58.211.156"": 2,
    ""179.60.147.118"": 1,
    ""172.81.216.105"": 2,
    ""134.175.53.186"": 2,
    ""117.33.174.14"": 3,
    ""175.178.78.184"": 2,
    ""106.58.217.61"": 2,
    ""12.193.127.18"": 5,
    ""49.232.169.162"": 1,
    ""185.170.144.3"": 2,
    ""45.227.254.55"": 2,
    ""150.223.76.57"": 1,
    ""111.173.80.148"": 3,
    ""205.210.31.240"": 3,
    ""119.96.169.74"": 1,
    ""109.69.7.157"": 3,
    ""84.9.179.179"": 1,
    ""43.134.33.208"": 3,
    ""81.69.247.8"": 6,
    ""123.56.20.194"": 2,
    ""45.93.20.204"": 6,
    ""213.250.1.122"": 2,
    ""62.6.252.50"": 3,
    ""111.173.80.147"": 1,
    ""194.165.16.78"": 2,
    ""208.53.61.115"": 3,
    ""150.223.79.15"": 2,
    ""211.91.60.69"": 4,
    ""95.130.227.198"": 3,
    ""45.141.26.152"": 2,
    ""120.48.64.252"": 1,
    ""106.75.123.252"": 4,
    ""50.116.32.103"": 4,
    ""45.33.115.210"": 1,
    ""210.3.96.246"": 3,
    ""101.33.237.209"": 1,
    ""106.58.164.84"": 2,
    ""212.186.143.100"": 1,
    ""87.191.150.194"": 2,
    ""61.171.113.104"": 2,
    ""103.44.237.12"": 2,
    ""14.18.41.26"": 1,
    ""165.154.182.72"": 1,
    ""106.75.245.66"": 1,
    ""194.28.101.253"": 1,
    ""106.58.210.135"": 2,
    ""196.190.117.7"": 1,
    ""205.210.31.17"": 3,
    ""1.168.133.78"": 1,
    ""106.58.219.212"": 1,
    ""61.171.106.140"": 2,
    ""222.93.104.67"": 3,
    ""1.117.40.238"": 1,
    ""106.225.199.92"": 2,
    ""101.43.174.224"": 2,
    ""150.223.35.239"": 1,
    ""106.58.178.2"": 1,
    ""185.196.220.41"": 3,
    ""193.142.146.227"": 3,
    ""77.90.185.2"": 3,
    ""106.75.20.182"": 1,
    ""194.165.16.11"": 2,
    ""106.58.184.58"": 1,
    ""106.75.6.46"": 1,
    ""93.92.133.74"": 1,
    ""81.70.142.203"": 2,
    ""194.165.16.73"": 2,
    ""106.116.169.71"": 1,
    ""111.229.184.146"": 1,
    ""195.234.28.44"": 1,
    ""205.210.31.100"": 3,
    ""180.76.153.250"": 1,
    ""101.33.204.231"": 1,
    ""140.246.149.76"": 1
  },
  ""asn"": {
    ""AS3462"": 6,
    ""AS4134"": 61,
    ""AS58519"": 35,
    ""AS3320"": 8,
    ""AS3356"": 8,
    ""AS5089"": 7,
    ""AS45090"": 52,
    ""AS48721"": 33,
    ""AS4837"": 49,
    ""AS9808"": 15,
    ""AS134238"": 4,
    ""AS132203"": 12,
    ""AS4808"": 16,
    ""AS9318"": 5,
    ""AS55933"": 3,
    ""AS58461"": 4,
    ""AS38283"": 11,
    ""AS267784"": 4,
    ""AS63838"": 6,
    ""AS206092"": 1,
    ""AS58466"": 1,
    ""AS142403"": 3,
    ""AS142299"": 6,
    ""AS59425"": 6,
    ""AS17621"": 3,
    ""AS21413"": 4,
    ""AS396982"": 12,
    ""AS57523"": 7,
    ""AS9541"": 2,
    ""AS208091"": 6,
    ""AS56005"": 2,
    ""AS25369"": 1,
    ""AS36352"": 1,
    ""AS135377"": 3,
    ""AS134768"": 6,
    ""AS60949"": 1,
    ""AS42960"": 1,
    ""AS209588"": 1,
    ""AS7018"": 5,
    ""AS197414"": 2,
    ""AS148981"": 4,
    ""AS58563"": 1,
    ""AS21183"": 3,
    ""AS25310"": 1,
    ""AS37963"": 2,
    ""AS5603"": 2,
    ""AS2856"": 3,
    ""AS17341"": 3,
    ""AS35682"": 3,
    ""AS38365"": 2,
    ""AS23724"": 6,
    ""AS63949"": 5,
    ""AS9304"": 3,
    ""AS8412"": 1,
    ""AS4812"": 4,
    ""AS4816"": 2,
    ""AS211218"": 1,
    ""AS24757"": 1,
    ""AS208046"": 6,
    ""AS198465"": 3,
    ""AS29014"": 1,
    ""AS43872"": 1
  },
  ""isp"": {
    ""Chunghwa Telecom Co., Ltd."": 6,
    ""Chinanet"": 64,
    ""Cloud Computing Corporation"": 35,
    ""Deutsche Telekom AG"": 8,
    ""Level 3 Communications"": 8,
    ""Virgin Media"": 7,
    ""Shenzhen Tencent Computer Systems Company Limited"": 49,
    ""Flyservers S.A."": 38,
    ""China Unicom Tianjin Province Network"": 4,
    ""China Mobile communications corporation"": 15,
    ""CHINANET Jiangx province IDC network"": 4,
    ""China Unicom Beijing Province Network"": 16,
    ""SK Broadband Co Ltd"": 5,
    ""Cloudie Limited"": 3,
    ""CHINANET SiChuan Telecom Internet Data Center"": 11,
    ""CNC Group CHINA169 Neimeng Province Network"": 19,
    ""CNC Group CHINA169 Shannxi Province Network"": 7,
    ""Aceville Pte.ltd"": 6,
    ""Hengyang"": 6,
    ""Ipxo Limited"": 1,
    ""China Unicom Chongqing Province Network"": 9,
    ""China Telecom"": 5,
    ""Yisu Cloud LTD"": 3,
    ""CLOUDFOREST CO., LTD"": 6,
    ""China Internet Network Information Center"": 7,
    ""Horizon LLC"": 6,
    ""CNC Group CHINA169 Shanghai Province Network"": 1,
    ""China Unicom CHINA169 Network"": 6,
    ""envia TEL GmbH"": 4,
    ""Google LLC"": 12,
    ""Chang Way Technologies Co. Limited"": 7,
    ""Cyber Internet Services (Private) Limited"": 2,
    ""Xhost Internet Solutions LP"": 8,
    ""China Unicom Henan Province network"": 2,
    ""Hydra Communications Ltd"": 1,
    ""UCLOUD"": 8,
    ""HostPapa"": 1,
    ""UCLOUD INFORMATION TECHNOLOGY (HK) LIMITED"": 3,
    ""CHINANET SHAANXI province Cloud Base network"": 6,
    ""4X SOLUTIONS"": 1,
    ""VH-GLOBAL"": 1,
    ""AT&T Services, Inc."": 5,
    ""CHINANET Hubei province network"": 1,
    ""Vodafone Network"": 3,
    ""Bulldog Communications"": 1,
    ""Hangzhou Alibaba Advertising Co"": 2,
    ""SIOL"": 2,
    ""British Telecommunications PLC"": 3,
    ""C7 Data Centers"": 3,
    ""CHINA UNICOM China169 Backbone"": 4,
    ""Best Internet Solution XK"": 3,
    ""Beijing Baidu Netcom Science and Technology Co., Ltd."": 2,
    ""Akamai Technologies, Inc."": 5,
    ""HGC Global Communications Limited"": 3,
    ""T-Mobile Austria GmbH"": 1,
    ""China Telecom (Group)"": 6,
    ""CHINANET Guangdong province network"": 1,
    ""Kyiv National University of Construction and Architecture"": 1,
    ""Ethiotelecom"": 1,
    ""ColocationX Ltd."": 6,
    ""BtHoster LTD"": 3,
    ""INTERNET4YOU"": 1,
    ""EuroNet Internet"": 2,
    ""Optinet U.K. Limited"": 1
  },
  ""org"": {
    ""Chunghwa Telecom Co. Ltd."": 6,
    ""Chinanet HE"": 6,
    ""Chinanet YN"": 36,
    ""Chinanet FJ"": 11,
    ""Deutsche Telekom AG"": 8,
    ""Fort Wayne Internet, LLC"": 8,
    ""Unknown"": 71,
    ""Tencent Cloud Computing (Beijing) Co., Ltd"": 22,
    ""Flyservers S.A"": 33,
    ""Chinanet ZJ"": 11,
    ""China Mobile"": 15,
    ""Chinanet JX"": 4,
    ""Hangzhou xiaoshan public transportation co., LTD"": 6,
    ""Tencent Cloud Computing"": 6,
    ""Beijing yunchuang communication Technology Co."": 16,
    ""SK Broadband Co Ltd"": 5,
    ""Netads Online Limited"": 3,
    ""Chinanet SD"": 13,
    ""Chengdu Giant Times Technology Co., Ltd"": 11,
    ""UAB Host Baltic"": 4,
    ""Chinanet HN"": 6,
    ""Chinanet GD"": 4,
    ""Chinanet JS"": 5,
    ""VPN Consumer New York City, United States of America"": 1,
    ""Tencent cloud computing (Beijing) Co., Ltd."": 26,
    ""HK Kwaifong Group Limited"": 3,
    ""Cloudforest CO., LTD"": 6,
    ""Horizon LLC"": 6,
    ""envia.tel GmbH"": 4,
    ""Palo Alto Networks, Inc"": 12,
    ""Starcrecium Limited"": 7,
    ""Cyber Internet Services Pakistan"": 2,
    ""Ningbo chaoji mamawangluojishu ltd"": 4,
    ""Xhost Internet Solutions"": 6,
    ""Henan Telcom Union Technology Co., LTD"": 2,
    ""Hydra Communications Ltd"": 1,
    ""Shanghai UCloud Information Technology Company Limited"": 8,
    ""ColoCrossing"": 1,
    ""UCLOUD INFORMATION TECHNOLOGY (HK) LIMITED"": 2,
    ""Chinanet SN"": 6,
    ""4x Solutions UK LTD"": 1,
    ""VH Global Limited"": 1,
    ""Cloud Solutions S.A"": 1,
    ""Golden-Bridge Netcom communication Co., LTD."": 2,
    ""ATT SERVICES INC- PEG"": 5,
    ""Xhostis"": 2,
    ""Chinanet HB"": 5,
    ""Aliyun Computing Co., LTD"": 2,
    ""Btnet"": 3,
    ""VegaDigital Solutions"": 3,
    ""Unicom"": 4,
    ""Best Internet Solution XK"": 3,
    ""Beijing Baidu Netcom Science and Technology Co., Ltd."": 2,
    ""Linode"": 5,
    ""HGC Global Communications Limited"": 3,
    ""LBR GmbH"": 1,
    ""Chinanet SH"": 4,
    ""Shenzhen Qianhai bird cloud computing Co. Ltd."": 2,
    ""Ucloud Information Technology"": 1,
    ""Kyiv National University of Construction and Architecture"": 1,
    ""Makut Investments"": 3,
    ""ColocationX Ltd"": 3,
    ""BtHoster LTD"": 3,
    ""internet4YOU GmbH & Co. KG"": 1,
    ""Online Breedband B.V."": 2,
    ""Optinet U.K. Networks 9 Limited"": 1
  },
  ""regionName"": {
    ""Taichung City"": 6,
    ""Hebei"": 6,
    ""Yunnan"": 36,
    ""Fujian"": 17,
    ""Bavaria"": 9,
    ""Indiana"": 8,
    ""Scotland"": 7,
    ""Shanghai"": 16,
    ""Kaunas"": 33,
    ""Zhejiang"": 25,
    ""Tianjin"": 4,
    ""Guangdong"": 46,
    ""Jiangxi"": 4,
    ""North West"": 8,
    ""Beijing"": 55,
    ""Gyeongsangbuk-do"": 5,
    ""Central and Western District"": 9,
    ""Shandong"": 13,
    ""Sichuan"": 11,
    ""Inner Mongolia"": 13,
    ""Vilnius"": 4,
    ""Shaanxi"": 7,
    ""Central Singapore"": 4,
    ""Hunan"": 6,
    ""Jiangsu"": 5,
    ""New York"": 2,
    ""Chongqing"": 9,
    ""Tsuen Wan District"": 3,
    ""Bangkok"": 6,
    ""Moscow"": 13,
    ""Brandenburg"": 4,
    ""California"": 13,
    ""Sindh"": 2,
    ""North Holland"": 12,
    ""Henan"": 2,
    ""Shanxi"": 6,
    ""England"": 6,
    ""Distrito Federal"": 1,
    ""Texas"": 6,
    ""Hubei"": 5,
    ""Tirana"": 3,
    ""Ljubljana"": 2,
    ""Utah"": 3,
    ""Tashkent"": 3,
    ""Georgia"": 4,
    ""Vienna"": 1,
    ""Rheinland-Pfalz"": 2,
    ""Kyiv City"": 1,
    ""Addis Ababa"": 1,
    ""Virginia"": 3,
    ""Free and Hanseatic City of Hamburg"": 1
  },
  ""country"": {
    ""Taiwan"": 6,
    ""China"": 286,
    ""Germany"": 16,
    ""United States"": 39,
    ""United Kingdom"": 13,
    ""Lithuania"": 37,
    ""Singapore"": 12,
    ""South Korea"": 5,
    ""Hong Kong"": 12,
    ""Thailand"": 6,
    ""Russia"": 13,
    ""Pakistan"": 2,
    ""The Netherlands"": 12,
    ""Venezuela"": 1,
    ""Albania"": 3,
    ""Slovenia"": 2,
    ""Uzbekistan"": 3,
    ""Austria"": 1,
    ""Ukraine"": 1,
    ""Ethiopia"": 1
  },
  ""account"": {
    ""142.93.8.59"": 397,
    ""Test"": 16,
    ""(empty)"": 3,
    ""OIgxPhjAS"": 1,
    ""WiXYvW"": 1,
    ""XqHoSI"": 1,
    ""Administr"": 10,
    ""hYKqblKUh"": 1,
    ""nsSjOo"": 1,
    ""lzHQer"": 1,
    ""hello"": 4,
    ""Domain"": 22,
    ""vokbaasv"": 4,
    ""beio"": 1,
    ""Administrator"": 1,
    ""FZZhdIxTb"": 1,
    ""vbfBej"": 1,
    ""JjLleP"": 1,
    ""user"": 1,
    ""jJwIpceeb"": 1,
    ""bryLvJ"": 1,
    ""fnnICP"": 1
  },
  ""keyboard"": {
    ""Unknown"": 471
  },
  ""client_build"": {
    ""Unknown"": 471
  },
  ""client_name"": {
    ""Unknown"": 471
  },
  ""ip_type"": {
    ""Unknown"": 346,
    ""mobile"": 25,
    ""hosting"": 78,
    ""proxy"": 20,
    ""mobile & proxy"": 1,
    ""hosting & proxy"": 1
  }
}"
5Z8s3U2x,Untitled,asyba,JSON,Tuesday 23rd of January 2024 05:08:26 PM CDT,"{
   ""activity"": {
      ""timeout"": 1,
      ""max"": 25
   },
   ""ring"": {
      ""identity"": {
         ""color"": [
            0,
            0,
            255
         ],
         ""max"": 32
      },
      ""dots"": {
         ""timeout"": 1,
         ""max"": 25,
         ""macro"": 0
      }
   },
   ""A"": {
      ""1"": {
         ""PRONTO"": [
            0,
            109,
            34,
            2,
            346,
            173,
            21,
            21,
            21,
            65,
            21,
            65,
            21,
            65,
            21,
            21,
            21,
            65,
            21,
            65,
            21,
            65,
            21,
            65,
            21,
            65,
            21,
            65,
            21,
            21,
            21,
            21,
            21,
            21,
            21,
            21,
            21,
            65,
            21,
            21,
            21,
            21,
            21,
            65,
            21,
            65,
            21,
            21,
            21,
            21,
            21,
            21,
            21,
            21,
            21,
            21,
            21,
            21,
            21,
            65,
            21,
            21,
            21,
            65,
            21,
            21,
            21,
            65,
            21,
            21,
            21,
            1521,
            342,
            86,
            21,
            3658
         ]
      },
      ""4"": {
         ""PRONTO"": [
            0,
            109,
            34,
            2,
            343,
            172,
            21,
            22,
            21,
            22,
            21,
            65,
            21,
            22,
            21,
            22,
            21,
            22,
            21,
            22,
            21,
            22,
            21,
            65,
            21,
            65,
            21,
            22,
            21,
            65,
            21,
            65,
            21,
            65,
            21,
            65,
            21,
            65,
            21,
            22,
            21,
            65,
            21,
            65,
            21,
            65,
            21,
            22,
            21,
            22,
            21,
            65,
            21,
            65,
            21,
            65,
            21,
            22,
            21,
            22,
            21,
            22,
            21,
            65,
            21,
            65,
            21,
            22,
            21,
            22,
            21,
            1673,
            343,
            86,
            21,
            3732
         ]
      },
      ""5"": {
         ""PRONTO"": [
            0,
            109,
            34,
            2,
            343,
            172,
            21,
            22,
            21,
            22,
            21,
            65,
            21,
            22,
            21,
            22,
            21,
            22,
            21,
            22,
            21,
            22,
            21,
            65,
            21,
            65,
            21,
            22,
            21,
            65,
            21,
            65,
            21,
            65,
            21,
            65,
            21,
            65,
            21,
            65,
            21,
            22,
            21,
            22,
            21,
            65,
            21,
            22,
            21,
            65,
            21,
            65,
            21,
            65,
            21,
            22,
            21,
            65,
            21,
            65,
            21,
            22,
            21,
            65,
            21,
            22,
            21,
            22,
            21,
            22,
            21,
            1673,
            343,
            86,
            21,
            3732
         ]
      },
      ""6"": {
         ""PRONTO"": [
            0,
            109,
            34,
            2,
            343,
            172,
            21,
            22,
            21,
            22,
            21,
            65,
            21,
            22,
            21,
            22,
            21,
            22,
            21,
            22,
            21,
            22,
            21,
            65,
            21,
            65,
            21,
            22,
            21,
            65,
            21,
            65,
            21,
            65,
            21,
            65,
            21,
            65,
            21,
            22,
            21,
            65,
            21,
            22,
            21,
            65,
            21,
            65,
            21,
            22,
            21,
            65,
            21,
            65,
            21,
            65,
            21,
            22,
            21,
            65,
            21,
            22,
            21,
            22,
            21,
            65,
            21,
            22,
            21,
            22,
            21,
            1673,
            343,
            86,
            21,
            3732
         ]
      },
      ""7"": {
         ""PRONTO"": [
            0,
            103,
            0,
            16,
            95,
            23,
            23,
            23,
            47,
            23,
            23,
            23,
            23,
            23,
            23,
            23,
            47,
            23,
            23,
            23,
            23,
            23,
            23,
            23,
            23,
            23,
            23,
            23,
            47,
            23,
            47,
            23,
            23,
            23,
            23,
            887
         ]
      },
      ""8"": {
         ""PRONTO"": [
            0,
            103,
            0,
            16,
            95,
            23,
            23,
            23,
            47,
            23,
            47,
            23,
            47,
            23,
            47,
            23,
            23,
            23,
            23,
            23,
            23,
            23,
            23,
            23,
            23,
            23,
            23,
            23,
            47,
            23,
            47,
            23,
            23,
            23,
            23,
            838
         ]
      },
      ""9"": {
         ""PRONTO"": [
            0,
            103,
            0,
            16,
            95,
            23,
            47,
            23,
            23,
            23,
            47,
            23,
            23,
            23,
            47,
            23,
            23,
            23,
            23,
            23,
            23,
            23,
            23,
            23,
            23,
            23,
            23,
            23,
            47,
            23,
            47,
            23,
            23,
            23,
            23,
            862
         ]
      },
      ""Power"": {
         ""Off"": {
            ""PRONTO"": [
               0,
               109,
               34,
               2,
               340,
               169,
               20,
               20,
               20,
               20,
               20,
               64,
               20,
               20,
               20,
               20,
               20,
               20,
               20,
               20,
               20,
               20,
               20,
               64,
               20,
               64,
               20,
               20,
               20,
               64,
               20,
               64,
               20,
               64,
               20,
               64,
               20,
               64,
               20,
               20,
               20,
               20,
               20,
               20,
               20,
               64,
               20,
               20,
               20,
               20,
               20,
               20,
               20,
               20,
               20,
               64,
               20,
               64,
               20,
               64,
               20,
               20,
               20,
               64,
               20,
               64,
               20,
               64,
               20,
               64,
               20,
               1544,
               340,
               85,
               20,
               3663
            ]
         },
         ""On"": [
            {
               ""PRONTO"": [
                  0,
                  109,
                  34,
                  2,
                  346,
                  173,
                  21,
                  65,
                  21,
                  21,
                  21,
                  65,
                  21,
                  21,
                  21,
                  21,
                  21,
                  65,
                  21,
                  65,
                  21,
                  65,
                  21,
                  65,
                  21,
                  65,
                  21,
                  65,
                  21,
                  21,
                  21,
                  21,
                  21,
                  21,
                  21,
                  21,
                  21,
                  65,
                  21,
                  21,
                  21,
                  21,
                  21,
                  65,
                  21,
                  65,
                  21,
                  21,
                  21,
                  65,
                  21,
                  21,
                  21,
                  21,
                  21,
                  21,
                  21,
                  21,
                  21,
                  65,
                  21,
                  21,
                  21,
                  65,
                  21,
                  21,
                  21,
                  65,
                  21,
                  21,
                  21,
                  1521,
                  342,
                  86,
                  21,
                  3658
               ]
            },
            {
               ""PRONTO"": [
                  0,
                  109,
                  34,
                  2,
                  340,
                  169,
                  20,
                  20,
                  20,
                  20,
                  20,
                  64,
                  20,
                  20,
                  20,
                  20,
                  20,
                  20,
                  20,
                  20,
                  20,
                  20,
                  20,
                  64,
                  20,
                  64,
                  20,
                  20,
                  20,
                  64,
                  20,
                  64,
                  20,
                  64,
                  20,
                  64,
                  20,
                  64,
                  20,
                  20,
                  20,
                  20,
                  20,
                  20,
                  20,
                  64,
                  20,
                  20,
                  20,
                  20,
                  20,
                  20,
                  20,
                  20,
                  20,
                  64,
                  20,
                  64,
                  20,
                  64,
                  20,
                  20,
                  20,
                  64,
                  20,
                  64,
                  20,
                  64,
                  20,
                  64,
                  20,
                  1544,
                  340,
                  85,
                  20,
                  3663
               ]
            }
         ]
      },
      ""RW"": {
         ""PRONTO"": [
            0,
            109,
            34,
            2,
            346,
            173,
            21,
            65,
            21,
            21,
            21,
            65,
            21,
            21,
            21,
            21,
            21,
            65,
            21,
            65,
            21,
            65,
            21,
            65,
            21,
            65,
            21,
            65,
            21,
            21,
            21,
            21,
            21,
            21,
            21,
            21,
            21,
            65,
            21,
            21,
            21,
            21,
            21,
            65,
            21,
            65,
            21,
            65,
            21,
            21,
            21,
            21,
            21,
            21,
            21,
            21,
            21,
            21,
            21,
            65,
            21,
            21,
            21,
            65,
            21,
            21,
            21,
            65,
            21,
            21,
            21,
            1521,
            342,
            86,
            21,
            3658
         ]
      },
      ""Play"": {
         ""PRONTO"": [
            0,
            109,
            34,
            2,
            346,
            173,
            21,
            21,
            21,
            65,
            21,
            65,
            21,
            65,
            21,
            21,
            21,
            65,
            21,
            65,
            21,
            65,
            21,
            65,
            21,
            65,
            21,
            65,
            21,
            21,
            21,
            21,
            21,
            21,
            21,
            21,
            21,
            65,
            21,
            65,
            21,
            65,
            21,
            65,
            21,
            65,
            21,
            65,
            21,
            21,
            21,
            65,
            21,
            21,
            21,
            21,
            21,
            21,
            21,
            65,
            21,
            21,
            21,
            65,
            21,
            21,
            21,
            65,
            21,
            21,
            21,
            1521,
            342,
            86,
            21,
            3658
         ]
      },
      ""FF"": {
         ""PRONTO"": [
            0,
            109,
            34,
            2,
            346,
            173,
            21,
            65,
            21,
            21,
            21,
            65,
            21,
            21,
            21,
            21,
            21,
            65,
            21,
            65,
            21,
            65,
            21,
            65,
            21,
            65,
            21,
            65,
            21,
            21,
            21,
            21,
            21,
            21,
            21,
            21,
            21,
            65,
            21,
            21,
            21,
            65,
            21,
            21,
            21,
            65,
            21,
            65,
            21,
            21,
            21,
            21,
            21,
            21,
            21,
            21,
            21,
            21,
            21,
            65,
            21,
            21,
            21,
            65,
            21,
            21,
            21,
            65,
            21,
            21,
            21,
            1521,
            342,
            86,
            21,
            3658
         ]
      },
      ""Home"": {
         ""PRONTO"": [
            0,
            109,
            34,
            2,
            346,
            173,
            21,
            65,
            21,
            21,
            21,
            65,
            21,
            21,
            21,
            21,
            21,
            65,
            21,
            65,
            21,
            65,
            21,
            65,
            21,
            65,
            21,
            65,
            21,
            21,
            21,
            21,
            21,
            21,
            21,
            21,
            21,
            65,
            21,
            21,
            21,
            21,
            21,
            21,
            21,
            21,
            21,
            21,
            21,
            21,
            21,
            65,
            21,
            21,
            21,
            21,
            21,
            21,
            21,
            65,
            21,
            21,
            21,
            65,
            21,
            21,
            21,
            65,
            21,
            21,
            21,
            1521,
            342,
            86,
            21,
            3658
         ]
      },
      ""Info"": {
         ""PRONTO"": [
            0,
            109,
            34,
            2,
            340,
            169,
            20,
            20,
            20,
            20,
            20,
            64,
            20,
            20,
            20,
            20,
            20,
            20,
            20,
            20,
            20,
            20,
            20,
            64,
            20,
            64,
            20,
            20,
            20,
            64,
            20,
            64,
            20,
            64,
            20,
            64,
            20,
            64,
            20,
            20,
            20,
            64,
            20,
            20,
            20,
            64,
            20,
            20,
            20,
            64,
            20,
            20,
            20,
            64,
            20,
            64,
            20,
            20,
            20,
            64,
            20,
            20,
            20,
            64,
            20,
            20,
            20,
            64,
            20,
            20,
            20,
            1544,
            340,
            86,
            20,
            3663
         ]
      },
      ""Up"": {
         ""PRONTO"": [
            0,
            109,
            34,
            2,
            340,
            169,
            20,
            20,
            20,
            20,
            20,
            64,
            20,
            20,
            20,
            20,
            20,
            20,
            20,
            20,
            20,
            20,
            20,
            64,
            20,
            64,
            20,
            20,
            20,
            64,
            20,
            64,
            20,
            64,
            20,
            64,
            20,
            64,
            20,
            20,
            20,
            20,
            20,
            20,
            20,
            20,
            20,
            20,
            20,
            20,
            20,
            64,
            20,
            20,
            20,
            64,
            20,
            64,
            20,
            64,
            20,
            64,
            20,
            64,
            20,
            64,
            20,
            20,
            20,
            64,
            20,
            1544,
            340,
            86,
            20,
            3663
         ]
      },
      ""Right"": {
         ""PRONTO"": [
            0,
            109,
            34,
            2,
            340,
            169,
            20,
            20,
            20,
            20,
            20,
            64,
            20,
            20,
            20,
            20,
            20,
            20,
            20,
            20,
            20,
            20,
            20,
            64,
            20,
            64,
            20,
            20,
            20,
            64,
            20,
            64,
            20,
            64,
            20,
            64,
            20,
            64,
            20,
            20,
            20,
            64,
            20,
            64,
            20,
            20,
            20,
            20,
            20,
            20,
            20,
            20,
            20,
            20,
            20,
            64,
            20,
            20,
            20,
            20,
            20,
            64,
            20,
            64,
            20,
            64,
            20,
            64,
            20,
            64,
            20,
            1544,
            340,
            85,
            20,
            3663
         ]
      },
      ""Down"": {
         ""PRONTO"": [
            0,
            109,
            34,
            2,
            340,
            169,
            20,
            20,
            20,
            20,
            20,
            64,
            20,
            20,
            20,
            20,
            20,
            20,
            20,
            20,
            20,
            20,
            20,
            64,
            20,
            64,
            20,
            20,
            20,
            64,
            20,
            64,
            20,
            64,
            20,
            64,
            20,
            64,
            20,
            64,
            20,
            20,
            20,
            20,
            20,
            20,
            20,
            20,
            20,
            20,
            20,
            64,
            20,
            20,
            20,
            20,
            20,
            64,
            20,
            64,
            20,
            64,
            20,
            64,
            20,
            64,
            20,
            20,
            20,
            64,
            20,
            1544,
            340,
            86,
            20,
            3664
         ]
      },
      ""Left"": {
         ""PRONTO"": [
            0,
            109,
            34,
            2,
            340,
            169,
            20,
            20,
            20,
            20,
            20,
            64,
            20,
            20,
            20,
            20,
            20,
            20,
            20,
            20,
            20,
            20,
            20,
            64,
            20,
            64,
            20,
            20,
            20,
            64,
            20,
            64,
            20,
            64,
            20,
            64,
            20,
            64,
            20,
            64,
            20,
            64,
            20,
            64,
            20,
            20,
            20,
            20,
            20,
            20,
            20,
            20,
            20,
            20,
            20,
            20,
            20,
            20,
            20,
            20,
            20,
            64,
            20,
            64,
            20,
            64,
            20,
            64,
            20,
            64,
            20,
            1544,
            340,
            86,
            20,
            3663
         ]
      },
      ""Okay"": {
         ""PRONTO"": [
            0,
            109,
            34,
            2,
            340,
            169,
            20,
            20,
            20,
            20,
            20,
            64,
            20,
            20,
            20,
            20,
            20,
            20,
            20,
            20,
            20,
            20,
            20,
            64,
            20,
            64,
            20,
            20,
            20,
            64,
            20,
            64,
            20,
            64,
            20,
            64,
            20,
            64,
            20,
            20,
            20,
            20,
            20,
            64,
            20,
            20,
            20,
            20,
            20,
            20,
            20,
            64,
            20,
            20,
            20,
            64,
            20,
            64,
            20,
            20,
            20,
            64,
            20,
            64,
            20,
            64,
            20,
            20,
            20,
            64,
            20,
            1544,
            340,
            85,
            20,
            3663
         ]
      },
      ""Menu"": {
         ""PRONTO"": [
            0,
            109,
            34,
            2,
            342,
            171,
            21,
            21,
            21,
            21,
            21,
            64,
            21,
            21,
            21,
            21,
            21,
            21,
            21,
            21,
            21,
            21,
            21,
            64,
            21,
            64,
            21,
            21,
            21,
            64,
            21,
            64,
            21,
            64,
            21,
            64,
            21,
            64,
            21,
            64,
            21,
            21,
            21,
            64,
            21,
            21,
            21,
            21,
            21,
            21,
            21,
            64,
            21,
            21,
            21,
            21,
            21,
            64,
            21,
            21,
            21,
            64,
            21,
            64,
            21,
            64,
            21,
            21,
            21,
            64,
            21,
            1526,
            342,
            86,
            21,
            3657
         ]
      },
      ""Back"": {
         ""PRONTO"": [
            0,
            109,
            34,
            2,
            341,
            170,
            21,
            21,
            21,
            21,
            21,
            64,
            21,
            21,
            21,
            21,
            21,
            21,
            21,
            21,
            21,
            21,
            21,
            64,
            21,
            64,
            21,
            21,
            21,
            64,
            21,
            64,
            21,
            64,
            21,
            64,
            21,
            64,
            21,
            21,
            21,
            21,
            21,
            21,
            21,
            64,
            21,
            21,
            21,
            64,
            21,
            21,
            21,
            21,
            21,
            64,
            21,
            64,
            21,
            64,
            21,
            21,
            21,
            64,
            21,
            21,
            21,
            64,
            21,
            64,
            21,
            1513,
            341,
            85,
            21,
            3651
         ]
      },
      ""Vol Up"": {
         ""PRONTO"": [
            0,
            109,
            34,
            2,
            340,
            169,
            20,
            20,
            20,
            20,
            20,
            64,
            20,
            20,
            20,
            20,
            20,
            20,
            20,
            20,
            20,
            20,
            20,
            64,
            20,
            64,
            20,
            20,
            20,
            64,
            20,
            64,
            20,
            64,
            20,
            64,
            20,
            64,
            20,
            20,
            20,
            64,
            20,
            20,
            20,
            20,
            20,
            20,
            20,
            20,
            20,
            20,
            20,
            20,
            20,
            64,
            20,
            20,
            20,
            64,
            20,
            64,
            20,
            64,
            20,
            64,
            20,
            64,
            20,
            64,
            20,
            1544,
            340,
            85,
            20,
            3663
         ]
      },
      ""Vol Down"": {
         ""PRONTO"": [
            0,
            109,
            34,
            2,
            340,
            169,
            20,
            20,
            20,
            20,
            20,
            64,
            20,
            20,
            20,
            20,
            20,
            20,
            20,
            20,
            20,
            20,
            20,
            64,
            20,
            64,
            20,
            20,
            20,
            64,
            20,
            64,
            20,
            64,
            20,
            64,
            20,
            64,
            20,
            64,
            20,
            64,
            20,
            20,
            20,
            20,
            20,
            20,
            20,
            20,
            20,
            20,
            20,
            20,
            20,
            20,
            20,
            20,
            20,
            64,
            20,
            64,
            20,
            64,
            20,
            64,
            20,
            64,
            20,
            64,
            20,
            1544,
            340,
            85,
            20,
            3663
         ]
      },
      ""Mute"": {
         ""PRONTO"": [
            0,
            103,
            0,
            16,
            95,
            23,
            23,
            23,
            23,
            23,
            47,
            23,
            23,
            23,
            47,
            23,
            23,
            23,
            23,
            23,
            23,
            23,
            23,
            23,
            23,
            23,
            23,
            23,
            47,
            23,
            47,
            23,
            23,
            23,
            23,
            887
         ]
      },
      ""Ch Up"": {
         ""PRONTO"": [
            0,
            103,
            0,
            16,
            95,
            23,
            23,
            23,
            47,
            23,
            23,
            23,
            23,
            23,
            47,
            23,
            23,
            23,
            23,
            23,
            23,
            23,
            23,
            23,
            23,
            23,
            23,
            23,
            47,
            23,
            47,
            23,
            23,
            23,
            23,
            887
         ]
      },
      ""Ch Down"": {
         ""PRONTO"": [
            0,
            103,
            0,
            16,
            95,
            23,
            47,
            23,
            47,
            23,
            23,
            23,
            23,
            23,
            47,
            23,
            23,
            23,
            23,
            23,
            23,
            23,
            23,
            23,
            23,
            23,
            23,
            23,
            47,
            23,
            47,
            23,
            23,
            23,
            23,
            863
         ]
      },
      ""colorwheel"": {
         ""Up"": {
            ""PRONTO"": [
               0,
               109,
               34,
               2,
               346,
               173,
               21,
               21,
               21,
               65,
               21,
               65,
               21,
               65,
               21,
               21,
               21,
               65,
               21,
               65,
               21,
               65,
               21,
               65,
               21,
               65,
               21,
               65,
               21,
               21,
               21,
               21,
               21,
               21,
               21,
               21,
               21,
               65,
               21,
               21,
               21,
               65,
               21,
               21,
               21,
               65,
               21,
               21,
               21,
               21,
               21,
               21,
               21,
               21,
               21,
               21,
               21,
               21,
               21,
               65,
               21,
               21,
               21,
               65,
               21,
               21,
               21,
               65,
               21,
               21,
               21,
               1521,
               342,
               86,
               21,
               3658
            ]
         },
         ""Right"": {
            ""PRONTO"": [
               0,
               109,
               34,
               2,
               346,
               173,
               21,
               21,
               21,
               65,
               21,
               65,
               21,
               65,
               21,
               21,
               21,
               65,
               21,
               65,
               21,
               65,
               21,
               65,
               21,
               65,
               21,
               65,
               21,
               21,
               21,
               21,
               21,
               21,
               21,
               21,
               21,
               65,
               21,
               65,
               21,
               21,
               21,
               21,
               21,
               65,
               21,
               21,
               21,
               21,
               21,
               21,
               21,
               21,
               21,
               21,
               21,
               21,
               21,
               65,
               21,
               21,
               21,
               65,
               21,
               21,
               21,
               65,
               21,
               21,
               21,
               1521,
               342,
               86,
               21,
               3658
            ]
         },
         ""Down"": {
            ""PRONTO"": [
               0,
               109,
               34,
               2,
               346,
               173,
               21,
               21,
               21,
               65,
               21,
               65,
               21,
               65,
               21,
               21,
               21,
               65,
               21,
               65,
               21,
               65,
               21,
               65,
               21,
               65,
               21,
               65,
               21,
               21,
               21,
               21,
               21,
               21,
               21,
               21,
               21,
               65,
               21,
               21,
               21,
               21,
               21,
               65,
               21,
               65,
               21,
               21,
               21,
               21,
               21,
               21,
               21,
               21,
               21,
               21,
               21,
               21,
               21,
               65,
               21,
               21,
               21,
               65,
               21,
               21,
               21,
               65,
               21,
               21,
               21,
               1521,
               342,
               86,
               21,
               3658
            ]
         },
         ""Left"": {
            ""PRONTO"": [
               0,
               109,
               34,
               2,
               346,
               173,
               21,
               21,
               21,
               65,
               21,
               65,
               21,
               65,
               21,
               21,
               21,
               65,
               21,
               65,
               21,
               65,
               21,
               65,
               21,
               65,
               21,
               65,
               21,
               21,
               21,
               21,
               21,
               21,
               21,
               21,
               21,
               65,
               21,
               21,
               21,
               65,
               21,
               65,
               21,
               21,
               21,
               21,
               21,
               21,
               21,
               21,
               21,
               21,
               21,
               21,
               21,
               21,
               21,
               65,
               21,
               21,
               21,
               65,
               21,
               21,
               21,
               65,
               21,
               21,
               21,
               1521,
               342,
               86,
               21,
               3658
            ]
         },
         ""Okay"": {
            ""PRONTO"": [
               0,
               109,
               34,
               2,
               346,
               173,
               21,
               21,
               21,
               65,
               21,
               65,
               21,
               65,
               21,
               21,
               21,
               65,
               21,
               65,
               21,
               65,
               21,
               65,
               21,
               65,
               21,
               65,
               21,
               21,
               21,
               21,
               21,
               21,
               21,
               21,
               21,
               65,
               21,
               21,
               21,
               21,
               21,
               65,
               21,
               65,
               21,
               65,
               21,
               21,
               21,
               65,
               21,
               21,
               21,
               21,
               21,
               21,
               21,
               65,
               21,
               21,
               21,
               65,
               21,
               21,
               21,
               65,
               21,
               21,
               21,
               1521,
               342,
               86,
               21,
               3658
            ]
         }
      }
   },
   ""B"": {
      ""0"": {
         ""PRONTO"": [
            0,
            112,
            0,
            50,
            128,
            64,
            16,
            16,
            16,
            48,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            48,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            48,
            16,
            48,
            16,
            16,
            16,
            48,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            48,
            16,
            16,
            16,
            48,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            48,
            16,
            16,
            16,
            48,
            16,
            48,
            16,
            48,
            16,
            16,
            16,
            48,
            16,
            2765
         ]
      },
      ""1"": {
         ""PRONTO"": [
            0,
            112,
            0,
            50,
            128,
            64,
            16,
            16,
            16,
            48,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            48,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            48,
            16,
            48,
            16,
            16,
            16,
            48,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            48,
            16,
            48,
            16,
            16,
            16,
            48,
            16,
            48,
            16,
            16,
            16,
            16,
            16,
            48,
            16,
            48,
            16,
            48,
            16,
            16,
            16,
            48,
            16,
            16,
            16,
            48,
            16,
            16,
            16,
            16,
            16,
            2765
         ]
      },
      ""2"": {
         ""PRONTO"": [
            0,
            112,
            0,
            50,
            128,
            64,
            16,
            16,
            16,
            48,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            48,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            48,
            16,
            48,
            16,
            16,
            16,
            48,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            48,
            16,
            48,
            16,
            16,
            16,
            48,
            16,
            48,
            16,
            16,
            16,
            16,
            16,
            48,
            16,
            48,
            16,
            48,
            16,
            16,
            16,
            48,
            16,
            16,
            16,
            48,
            16,
            16,
            16,
            16,
            16,
            2765
         ]
      },
      ""3"": {
         ""PRONTO"": [
            0,
            112,
            0,
            50,
            128,
            64,
            16,
            16,
            16,
            48,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            48,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            48,
            16,
            48,
            16,
            16,
            16,
            48,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            48,
            16,
            48,
            16,
            48,
            16,
            48,
            16,
            48,
            16,
            16,
            16,
            48,
            16,
            16,
            16,
            48,
            16,
            48,
            16,
            48,
            16,
            48,
            16,
            16,
            16,
            48,
            16,
            48,
            16,
            48,
            16,
            2765
         ]
      },
      ""4"": {
         ""PRONTO"": [
            0,
            109,
            34,
            2,
            343,
            172,
            21,
            22,
            21,
            22,
            21,
            65,
            21,
            22,
            21,
            22,
            21,
            22,
            21,
            22,
            21,
            22,
            21,
            65,
            21,
            65,
            21,
            22,
            21,
            65,
            21,
            65,
            21,
            65,
            21,
            65,
            21,
            65,
            21,
            22,
            21,
            65,
            21,
            65,
            21,
            65,
            21,
            22,
            21,
            22,
            21,
            65,
            21,
            65,
            21,
            65,
            21,
            22,
            21,
            22,
            21,
            22,
            21,
            65,
            21,
            65,
            21,
            22,
            21,
            22,
            21,
            1673,
            343,
            86,
            21,
            3732
         ]
      },
      ""5"": {
         ""PRONTO"": [
            0,
            109,
            34,
            2,
            343,
            172,
            21,
            22,
            21,
            22,
            21,
            65,
            21,
            22,
            21,
            22,
            21,
            22,
            21,
            22,
            21,
            22,
            21,
            65,
            21,
            65,
            21,
            22,
            21,
            65,
            21,
            65,
            21,
            65,
            21,
            65,
            21,
            65,
            21,
            65,
            21,
            22,
            21,
            22,
            21,
            65,
            21,
            22,
            21,
            65,
            21,
            65,
            21,
            65,
            21,
            22,
            21,
            65,
            21,
            65,
            21,
            22,
            21,
            65,
            21,
            22,
            21,
            22,
            21,
            22,
            21,
            1673,
            343,
            86,
            21,
            3732
         ]
      },
      ""6"": {
         ""PRONTO"": [
            0,
            109,
            34,
            2,
            343,
            172,
            21,
            22,
            21,
            22,
            21,
            65,
            21,
            22,
            21,
            22,
            21,
            22,
            21,
            22,
            21,
            22,
            21,
            65,
            21,
            65,
            21,
            22,
            21,
            65,
            21,
            65,
            21,
            65,
            21,
            65,
            21,
            65,
            21,
            22,
            21,
            65,
            21,
            22,
            21,
            65,
            21,
            65,
            21,
            22,
            21,
            65,
            21,
            65,
            21,
            65,
            21,
            22,
            21,
            65,
            21,
            22,
            21,
            22,
            21,
            65,
            21,
            22,
            21,
            22,
            21,
            1673,
            343,
            86,
            21,
            3732
         ]
      },
      ""7"": {
         ""PRONTO"": [
            0,
            103,
            0,
            16,
            95,
            23,
            23,
            23,
            47,
            23,
            23,
            23,
            23,
            23,
            23,
            23,
            47,
            23,
            23,
            23,
            23,
            23,
            23,
            23,
            23,
            23,
            23,
            23,
            47,
            23,
            47,
            23,
            23,
            23,
            23,
            887
         ]
      },
      ""8"": {
         ""PRONTO"": [
            0,
            103,
            0,
            16,
            95,
            23,
            23,
            23,
            47,
            23,
            47,
            23,
            47,
            23,
            47,
            23,
            23,
            23,
            23,
            23,
            23,
            23,
            23,
            23,
            23,
            23,
            23,
            23,
            47,
            23,
            47,
            23,
            23,
            23,
            23,
            838
         ]
      },
      ""9"": {
         ""PRONTO"": [
            0,
            103,
            0,
            16,
            95,
            23,
            47,
            23,
            23,
            23,
            47,
            23,
            23,
            23,
            47,
            23,
            23,
            23,
            23,
            23,
            23,
            23,
            23,
            23,
            23,
            23,
            23,
            23,
            47,
            23,
            47,
            23,
            23,
            23,
            23,
            862
         ]
      },
      ""Power"": {
         ""Off"": [
            {
               ""PRONTO"": [
                  0,
                  109,
                  34,
                  2,
                  343,
                  172,
                  21,
                  21,
                  21,
                  21,
                  21,
                  64,
                  21,
                  21,
                  21,
                  21,
                  21,
                  21,
                  21,
                  21,
                  21,
                  21,
                  21,
                  64,
                  21,
                  64,
                  21,
                  21,
                  21,
                  64,
                  21,
                  64,
                  21,
                  64,
                  21,
                  64,
                  21,
                  64,
                  21,
                  64,
                  21,
                  21,
                  21,
                  64,
                  21,
                  21,
                  21,
                  21,
                  21,
                  21,
                  21,
                  64,
                  21,
                  64,
                  21,
                  21,
                  21,
                  64,
                  21,
                  21,
                  21,
                  64,
                  21,
                  64,
                  21,
                  64,
                  21,
                  21,
                  21,
                  21,
                  21,
                  1673,
                  343,
                  86,
                  21,
                  3732
               ]
            },
            {
               ""PRONTO"": [
                  0,
                  112,
                  0,
                  50,
                  128,
                  64,
                  16,
                  16,
                  16,
                  48,
                  16,
                  16,
                  16,
                  16,
                  16,
                  16,
                  16,
                  16,
                  16,
                  16,
                  16,
                  16,
                  16,
                  16,
                  16,
                  16,
                  16,
                  16,
                  16,
                  16,
                  16,
                  16,
                  16,
                  48,
                  16,
                  16,
                  16,
                  16,
                  16,
                  16,
                  16,
                  16,
                  16,
                  16,
                  16,
                  16,
                  16,
                  48,
                  16,
                  48,
                  16,
                  16,
                  16,
                  48,
                  16,
                  16,
                  16,
                  16,
                  16,
                  16,
                  16,
                  16,
                  16,
                  16,
                  16,
                  16,
                  16,
                  16,
                  16,
                  16,
                  16,
                  48,
                  16,
                  48,
                  16,
                  48,
                  16,
                  48,
                  16,
                  48,
                  16,
                  48,
                  16,
                  16,
                  16,
                  16,
                  16,
                  48,
                  16,
                  48,
                  16,
                  48,
                  16,
                  48,
                  16,
                  16,
                  16,
                  16,
                  16,
                  16,
                  16,
                  48,
                  16,
                  2765
               ]
            },
            {
               ""PRONTO"": [
                  0,
                  103,
                  0,
                  16,
                  95,
                  23,
                  47,
                  23,
                  23,
                  23,
                  47,
                  23,
                  23,
                  23,
                  47,
                  23,
                  23,
                  23,
                  23,
                  23,
                  23,
                  23,
                  23,
                  23,
                  23,
                  23,
                  23,
                  23,
                  47,
                  23,
                  47,
                  23,
                  23,
                  23,
                  23,
                  862
               ]
            }
         ],
         ""On"": [
            {
               ""PRONTO"": [
                  0,
                  112,
                  0,
                  50,
                  128,
                  64,
                  16,
                  16,
                  16,
                  48,
                  16,
                  16,
                  16,
                  16,
                  16,
                  16,
                  16,
                  16,
                  16,
                  16,
                  16,
                  16,
                  16,
                  16,
                  16,
                  16,
                  16,
                  16,
                  16,
                  16,
                  16,
                  16,
                  16,
                  48,
                  16,
                  16,
                  16,
                  16,
                  16,
                  16,
                  16,
                  16,
                  16,
                  16,
                  16,
                  16,
                  16,
                  48,
                  16,
                  48,
                  16,
                  16,
                  16,
                  48,
                  16,
                  16,
                  16,
                  16,
                  16,
                  16,
                  16,
                  16,
                  16,
                  16,
                  16,
                  16,
                  16,
                  16,
                  16,
                  16,
                  16,
                  16,
                  16,
                  48,
                  16,
                  48,
                  16,
                  48,
                  16,
                  48,
                  16,
                  48,
                  16,
                  16,
                  16,
                  16,
                  16,
                  16,
                  16,
                  48,
                  16,
                  48,
                  16,
                  48,
                  16,
                  16,
                  16,
                  16,
                  16,
                  16,
                  16,
                  48,
                  16,
                  2765
               ],
               ""delay"": 0
            },
            {
               ""PRONTO"": [
                  0,
                  109,
                  34,
                  2,
                  343,
                  172,
                  21,
                  21,
                  21,
                  21,
                  21,
                  64,
                  21,
                  21,
                  21,
                  21,
                  21,
                  21,
                  21,
                  21,
                  21,
                  21,
                  21,
                  64,
                  21,
                  64,
                  21,
                  21,
                  21,
                  64,
                  21,
                  64,
                  21,
                  64,
                  21,
                  64,
                  21,
                  64,
                  21,
                  21,
                  21,
                  21,
                  21,
                  64,
                  21,
                  21,
                  21,
                  21,
                  21,
                  21,
                  21,
                  64,
                  21,
                  64,
                  21,
                  64,
                  21,
                  64,
                  21,
                  21,
                  21,
                  64,
                  21,
                  64,
                  21,
                  64,
                  21,
                  21,
                  21,
                  21,
                  21,
                  1673,
                  343,
                  86,
                  21,
                  3732
               ]
            },
            {
               ""PRONTO"": [
                  0,
                  109,
                  34,
                  2,
                  343,
                  172,
                  21,
                  22,
                  21,
                  22,
                  21,
                  65,
                  21,
                  22,
                  21,
                  22,
                  21,
                  22,
                  21,
                  22,
                  21,
                  22,
                  21,
                  65,
                  21,
                  65,
                  21,
                  22,
                  21,
                  65,
                  21,
                  65,
                  21,
                  65,
                  21,
                  65,
                  21,
                  65,
                  21,
                  22,
                  21,
                  65,
                  21,
                  22,
                  21,
                  65,
                  21,
                  65,
                  21,
                  22,
                  21,
                  65,
                  21,
                  65,
                  21,
                  65,
                  21,
                  22,
                  21,
                  65,
                  21,
                  22,
                  21,
                  22,
                  21,
                  65,
                  21,
                  22,
                  21,
                  22,
                  21,
                  1673,
                  343,
                  86,
                  21,
                  3732
               ]
            }
         ]
      },
      ""RW"": {
         ""PRONTO"": [
            0,
            112,
            0,
            50,
            128,
            64,
            16,
            16,
            16,
            48,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            48,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            48,
            16,
            48,
            16,
            16,
            16,
            48,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            48,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            48,
            16,
            16,
            16,
            48,
            16,
            48,
            16,
            16,
            16,
            48,
            16,
            2765
         ]
      },
      ""Play"": {
         ""PRONTO"": [
            0,
            112,
            0,
            50,
            128,
            64,
            16,
            16,
            16,
            48,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            48,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            48,
            16,
            48,
            16,
            16,
            16,
            48,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            48,
            16,
            48,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            48,
            16,
            48,
            16,
            16,
            16,
            48,
            16,
            48,
            16,
            16,
            16,
            48,
            16,
            2765
         ]
      },
      ""FF"": {
         ""PRONTO"": [
            0,
            112,
            0,
            50,
            128,
            64,
            16,
            16,
            16,
            48,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            48,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            48,
            16,
            48,
            16,
            16,
            16,
            48,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            48,
            16,
            16,
            16,
            48,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            48,
            16,
            16,
            16,
            48,
            16,
            16,
            16,
            48,
            16,
            48,
            16,
            16,
            16,
            48,
            16,
            2765
         ]
      },
      ""Home"": {
         ""PRONTO"": [
            0,
            112,
            0,
            50,
            128,
            64,
            16,
            16,
            16,
            48,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            48,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            48,
            16,
            48,
            16,
            16,
            16,
            48,
            16,
            48,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            48,
            16,
            16,
            16,
            48,
            16,
            16,
            16,
            48,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            48,
            16,
            48,
            16,
            48,
            16,
            2765
         ]
      },
      ""Info"": {
         ""PRONTO"": [
            0,
            112,
            0,
            50,
            128,
            64,
            16,
            16,
            16,
            48,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            48,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            48,
            16,
            48,
            16,
            16,
            16,
            48,
            16,
            48,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            48,
            16,
            16,
            16,
            48,
            16,
            16,
            16,
            16,
            16,
            48,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            48,
            16,
            16,
            16,
            48,
            16,
            16,
            16,
            16,
            16,
            48,
            16,
            2765
         ]
      },
      ""Up"": {
         ""PRONTO"": [
            0,
            112,
            0,
            50,
            128,
            64,
            16,
            16,
            16,
            48,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            48,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            48,
            16,
            48,
            16,
            16,
            16,
            48,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            48,
            16,
            16,
            16,
            48,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            48,
            16,
            48,
            16,
            16,
            16,
            48,
            16,
            16,
            16,
            48,
            16,
            48,
            16,
            16,
            16,
            16,
            16,
            2765
         ]
      },
      ""Right"": {
         ""PRONTO"": [
            0,
            112,
            0,
            50,
            128,
            64,
            16,
            16,
            16,
            48,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            48,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            48,
            16,
            48,
            16,
            16,
            16,
            48,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            48,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            48,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            48,
            16,
            48,
            16,
            48,
            16,
            16,
            16,
            16,
            16,
            2765
         ]
      },
      ""Down"": {
         ""PRONTO"": [
            0,
            112,
            0,
            50,
            128,
            64,
            16,
            16,
            16,
            48,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            48,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            48,
            16,
            48,
            16,
            16,
            16,
            48,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            48,
            16,
            48,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            48,
            16,
            16,
            16,
            48,
            16,
            48,
            16,
            16,
            16,
            48,
            16,
            48,
            16,
            16,
            16,
            16,
            16,
            2765
         ]
      },
      ""Left"": {
         ""PRONTO"": [
            0,
            112,
            0,
            50,
            128,
            64,
            16,
            16,
            16,
            48,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            48,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            48,
            16,
            48,
            16,
            16,
            16,
            48,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            48,
            16,
            48,
            16,
            48,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            48,
            16,
            48,
            16,
            48,
            16,
            48,
            16,
            16,
            16,
            48,
            16,
            48,
            16,
            16,
            16,
            16,
            16,
            2765
         ]
      },
      ""Okay"": {
         ""PRONTO"": [
            0,
            112,
            0,
            50,
            128,
            64,
            16,
            16,
            16,
            48,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            48,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            48,
            16,
            48,
            16,
            16,
            16,
            48,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            48,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            48,
            16,
            16,
            16,
            48,
            16,
            16,
            16,
            16,
            16,
            48,
            16,
            48,
            16,
            16,
            16,
            16,
            16,
            2765
         ]
      },
      ""Menu"": {
         ""PRONTO"": [
            0,
            112,
            0,
            50,
            128,
            64,
            16,
            16,
            16,
            48,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            48,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            48,
            16,
            48,
            16,
            16,
            16,
            48,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            48,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            48,
            16,
            48,
            16,
            16,
            16,
            16,
            16,
            2765
         ]
      },
      ""Back"": {
         ""PRONTO"": [
            0,
            112,
            0,
            50,
            128,
            64,
            16,
            16,
            16,
            48,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            48,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            48,
            16,
            48,
            16,
            16,
            16,
            48,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            48,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            48,
            16,
            48,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            48,
            16,
            48,
            16,
            16,
            16,
            16,
            16,
            2765
         ]
      },
      ""Vol Up"": {
         ""PRONTO"": [
            0,
            103,
            0,
            16,
            95,
            23,
            23,
            23,
            47,
            23,
            23,
            23,
            23,
            23,
            47,
            23,
            23,
            23,
            23,
            23,
            23,
            23,
            23,
            23,
            23,
            23,
            23,
            23,
            47,
            23,
            47,
            23,
            23,
            23,
            23,
            887
         ]
      },
      ""Vol Down"": {
         ""PRONTO"": [
            0,
            103,
            0,
            16,
            95,
            23,
            47,
            23,
            47,
            23,
            23,
            23,
            23,
            23,
            47,
            23,
            23,
            23,
            23,
            23,
            23,
            23,
            23,
            23,
            23,
            23,
            23,
            23,
            47,
            23,
            47,
            23,
            23,
            23,
            23,
            863
         ]
      },
      ""Mute"": {
         ""PRONTO"": [
            0,
            103,
            0,
            16,
            95,
            23,
            23,
            23,
            23,
            23,
            47,
            23,
            23,
            23,
            47,
            23,
            23,
            23,
            23,
            23,
            23,
            23,
            23,
            23,
            23,
            23,
            23,
            23,
            47,
            23,
            47,
            23,
            23,
            23,
            23,
            887
         ]
      },
      ""Stop"": {
         ""PRONTO"": [
            0,
            112,
            0,
            50,
            128,
            64,
            16,
            16,
            16,
            48,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            48,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            48,
            16,
            48,
            16,
            16,
            16,
            48,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            48,
            16,
            48,
            16,
            16,
            16,
            48,
            16,
            2765
         ]
      },
      ""Record"": {
         ""PRONTO"": [
            0,
            112,
            0,
            50,
            128,
            64,
            16,
            16,
            16,
            48,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            48,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            48,
            16,
            48,
            16,
            16,
            16,
            48,
            16,
            48,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            48,
            16,
            16,
            16,
            16,
            16,
            48,
            16,
            16,
            16,
            48,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            48,
            16,
            48,
            16,
            16,
            16,
            16,
            16,
            48,
            16,
            2765
         ]
      },
      ""Ch Up"": {
         ""PRONTO"": [
            0,
            112,
            0,
            50,
            128,
            64,
            16,
            16,
            16,
            48,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            48,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            48,
            16,
            48,
            16,
            16,
            16,
            48,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            48,
            16,
            16,
            16,
            48,
            16,
            16,
            16,
            16,
            16,
            48,
            16,
            16,
            16,
            16,
            16,
            48,
            16,
            16,
            16,
            48,
            16,
            48,
            16,
            48,
            16,
            48,
            16,
            48,
            16,
            2765
         ]
      },
      ""Ch Down"": {
         ""PRONTO"": [
            0,
            112,
            0,
            50,
            128,
            64,
            16,
            16,
            16,
            48,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            48,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            48,
            16,
            48,
            16,
            16,
            16,
            48,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            48,
            16,
            16,
            16,
            16,
            16,
            48,
            16,
            16,
            16,
            16,
            16,
            48,
            16,
            16,
            16,
            48,
            16,
            16,
            16,
            16,
            16,
            48,
            16,
            48,
            16,
            48,
            16,
            48,
            16,
            48,
            16,
            2765
         ]
      },
      ""colorwheel"": {
         ""Down"": {
            ""PRONTO"": [
               0,
               112,
               0,
               50,
               128,
               64,
               16,
               16,
               16,
               48,
               16,
               16,
               16,
               16,
               16,
               16,
               16,
               16,
               16,
               16,
               16,
               16,
               16,
               16,
               16,
               16,
               16,
               16,
               16,
               16,
               16,
               16,
               16,
               48,
               16,
               16,
               16,
               16,
               16,
               16,
               16,
               16,
               16,
               16,
               16,
               16,
               16,
               48,
               16,
               48,
               16,
               16,
               16,
               48,
               16,
               48,
               16,
               16,
               16,
               16,
               16,
               16,
               16,
               16,
               16,
               16,
               16,
               16,
               16,
               16,
               16,
               48,
               16,
               48,
               16,
               16,
               16,
               16,
               16,
               16,
               16,
               16,
               16,
               48,
               16,
               16,
               16,
               16,
               16,
               48,
               16,
               16,
               16,
               16,
               16,
               48,
               16,
               48,
               16,
               48,
               16,
               48,
               16,
               2765
            ]
         },
         ""Right"": {
            ""PRONTO"": [
               0,
               112,
               0,
               50,
               128,
               64,
               16,
               16,
               16,
               48,
               16,
               16,
               16,
               16,
               16,
               16,
               16,
               16,
               16,
               16,
               16,
               16,
               16,
               16,
               16,
               16,
               16,
               16,
               16,
               16,
               16,
               16,
               16,
               48,
               16,
               16,
               16,
               16,
               16,
               16,
               16,
               16,
               16,
               16,
               16,
               16,
               16,
               48,
               16,
               48,
               16,
               16,
               16,
               48,
               16,
               48,
               16,
               16,
               16,
               16,
               16,
               16,
               16,
               16,
               16,
               16,
               16,
               16,
               16,
               16,
               16,
               16,
               16,
               48,
               16,
               16,
               16,
               16,
               16,
               16,
               16,
               16,
               16,
               48,
               16,
               16,
               16,
               48,
               16,
               48,
               16,
               16,
               16,
               16,
               16,
               48,
               16,
               48,
               16,
               48,
               16,
               48,
               16,
               2765
            ]
         },
         ""Up"": {
            ""PRONTO"": [
               0,
               112,
               0,
               50,
               128,
               64,
               16,
               16,
               16,
               48,
               16,
               16,
               16,
               16,
               16,
               16,
               16,
               16,
               16,
               16,
               16,
               16,
               16,
               16,
               16,
               16,
               16,
               16,
               16,
               16,
               16,
               16,
               16,
               48,
               16,
               16,
               16,
               16,
               16,
               16,
               16,
               16,
               16,
               16,
               16,
               16,
               16,
               48,
               16,
               48,
               16,
               16,
               16,
               48,
               16,
               48,
               16,
               16,
               16,
               16,
               16,
               16,
               16,
               16,
               16,
               16,
               16,
               16,
               16,
               16,
               16,
               48,
               16,
               16,
               16,
               16,
               16,
               16,
               16,
               16,
               16,
               16,
               16,
               48,
               16,
               16,
               16,
               16,
               16,
               16,
               16,
               16,
               16,
               16,
               16,
               48,
               16,
               48,
               16,
               48,
               16,
               48,
               16,
               2765
            ]
         },
         ""Left"": {
            ""PRONTO"": [
               0,
               112,
               0,
               50,
               128,
               64,
               16,
               16,
               16,
               48,
               16,
               16,
               16,
               16,
               16,
               16,
               16,
               16,
               16,
               16,
               16,
               16,
               16,
               16,
               16,
               16,
               16,
               16,
               16,
               16,
               16,
               16,
               16,
               48,
               16,
               16,
               16,
               16,
               16,
               16,
               16,
               16,
               16,
               16,
               16,
               16,
               16,
               48,
               16,
               48,
               16,
               16,
               16,
               48,
               16,
               48,
               16,
               16,
               16,
               16,
               16,
               16,
               16,
               16,
               16,
               16,
               16,
               16,
               16,
               16,
               16,
               16,
               16,
               16,
               16,
               16,
               16,
               16,
               16,
               16,
               16,
               16,
               16,
               48,
               16,
               16,
               16,
               48,
               16,
               16,
               16,
               16,
               16,
               16,
               16,
               48,
               16,
               48,
               16,
               48,
               16,
               48,
               16,
               2765
            ]
         }
      }
   }
}"
HyqJszfc,modechge.sh,snowgum,Bash,Tuesday 23rd of January 2024 04:35:46 PM CDT,"#!/bin/sh

ROOTER=/usr/lib/rooter

MODEMTYPE=$1
NETMODE=$2

# log() {
	modlog ""ModeChange $CURRMODEM"" ""$@""
# }

CURRMODEM=$(uci get modem.general.miscnum)
uci set modem.modem$CURRMODEM.cmode=""0""
uci set modem.modem$CURRMODEM.netmode=""10""
uci commit modem

MODEMTYPE=$(uci get modem.modem$CURRMODEM.modemtype)
COMMPORT=""/dev/ttyUSB""$(uci get modem.modem$CURRMODEM.commport)

# ZTE
if [ $MODEMTYPE -eq 1 ]; then
	case $NETMODE in
		1*)
			ATC=""AT+ZSNT=0,0,0"" ;;
		2*)
			ATC=""AT+ZSNT=0,0,1"" ;;
		3*)
			ATC=""AT+ZSNT=1,0,0"" ;;
		4*)
			ATC=""AT+ZSNT=0,0,2"" ;;
		5*)
			ATC=""AT+ZSNT=2,0,0"" ;;
		6*)
			ATC=""AT+ZSNT=0,0,6"" ;;
		7*)
			ATC=""AT+ZSNT=6,0,0"" ;;
	esac
	ATC=$ATC"";+ZBANDI=0""
fi

# Sierra
if [ $MODEMTYPE -eq 2 ]; then
	case $NETMODE in
		""3"" )
			ATC=""AT!SELRAT=2"" ;;
		""5"" )
			ATC=""AT!SELRAT=1"" ;;
		""7"" )
			ATC=""AT!SELRAT=6"" ;;
		* )
			ATC=""AT!SELRAT=0"" ;;
	esac
fi

# Huawei LTE
if [ $MODEMTYPE -eq 3 ]; then
	case $NETMODE in
                1*)
                        ATC=""AT^SYSCFGEX=\""00\"",40000000,2,4,40000000,,"" ;;
                2*)
                        ATC=""AT^SYSCFGEX=\""010203\"",40000000,2,4,40000000,,"" ;;
                3*)
                        ATC=""AT^SYSCFGEX=\""01\"",40000000,2,4,40000000,,"" ;;
                4*)
                        ATC=""AT^SYSCFGEX=\""020301\"",40000000,2,4,40000000,,"" ;;
                5*)
                        ATC=""AT^SYSCFGEX=\""02\"",40000000,2,4,40000000,,"" ;;
                6*)
                        ATC=""AT^SYSCFGEX=\""030201\"",40000000,2,4,40000000,,"" ;;
                7*)
                        ATC=""AT^SYSCFGEX=\""03\"",40000000,2,4,40000000,,"" ;;
        esac
fi

# Huawei legacy
if [ $MODEMTYPE -eq 4 ]; then
	case $NETMODE in
		1*)
			ATC=""AT^SYSCFG=2,0,40000000,2,4"" ;;
		2*)
			ATC=""AT^SYSCFG=2,1,40000000,2,4"" ;;
		3*)
			ATC=""AT^SYSCFG=13,1,40000000,2,4"" ;;
		4*)
			ATC=""AT^SYSCFG=2,2,40000000,2,4"" ;;
		5*)
			ATC=""AT^SYSCFG=14,2,40000000,2,4"" ;;
	esac
fi

# ublox
if [ $MODEMTYPE -eq 5 ]; then
	case $NETMODE in
		1*)
			ATC=""AT+CFUN=4;+URAT=4,3;+CFUN=1,1"" ;;
		2*)
			ATC=""AT+CFUN=4;+URAT=4,0;+CFUN=1,1"" ;;
		3*)
			ATC=""AT+CFUN=4;+URAT=0;+CFUN=1,1"" ;;
		4*)
			ATC=""AT+CFUN=4;+URAT=4,2;+CFUN=1,1"" ;;
		5*)
			ATC=""AT+CFUN=4;+URAT=2;+CFUN=1,1"" ;;
		6*)
			ATC=""AT+CFUN=4;+URAT=4,3;+CFUN=1,1"" ;;
		7*)
			ATC=""AT+CFUN=4;+URAT=4,3;+CFUN=1,1"" ;;
	esac
fi

# Quectel
if [ $MODEMTYPE -eq 6 ]; then
	CURRMODEM=$(uci -q get modem.general.modemnum)
	idV=$(uci -q get modem.modem$CURRMODEM.idV)
	idP=$(uci -q get modem.modem$CURRMODEM.idP)
	ATCMDD=""AT+CGMM""
	model=$($ROOTER/gcom/gcom-locked ""$COMMPORT"" ""run-at.gcom"" ""$CURRMODEM"" ""$ATCMDD"")
	EM20=$(echo ""$model"" | grep ""EM20"")
	if [ $EM20 ]; then
		idP=""0""
	fi
	NEWFMT=false
	if [ ""$idV"" = ""2c7c"" ]; then
		if [ ""$idP"" = ""0800"" -o ""$idP"" = ""0620"" -o ""$idP"" = ""030b"" -o ""$idP"" = ""0801"" -o ""$idP"" = ""0900"" ]; then
			NEWFMT=true
		fi
	fi
	case $NETMODE in
		""3"")
			ATC=""AT+QCFG=\""nwscanmode\"",1"" ;;
		""5"")
			if $NEWFMT; then
				ATC=""AT+QNWPREFCFG=\""mode_pref\"",WCDMA""
			else
				ATC=""AT+QCFG=\""nwscanmode\"",2""
			fi
			;;
		""7"")
			if $NEWFMT; then
				ATC=""AT+QNWPREFCFG=\""mode_pref\"",LTE""
			else
				ATC=""AT+QCFG=\""nwscanmode\"",3""
			fi
			;;
		""8"")
			ATC=""AT+QNWPREFCFG=\""mode_pref\"",LTE:NR5G"" ;;
		""9"")
			ATC=""AT+QNWPREFCFG=\""mode_pref\"",NR5G"" ;;
		*)
			if $NEWFMT; then
				ATC=""AT+QNWPREFCFG=\""mode_pref\"",AUTO""
			else
				ATC=""AT+QCFG=\""nwscanmode\"",0""
			fi
			;;
	esac
fi

# MEIG
if [ $MODEMTYPE -eq 7 ]; then
	CURRMODEM=$(uci -q get modem.general.modemnum)
	idV=$(uci -q get modem.modem$CURRMODEM.idV)
	if [ $idV == ""2dee"" ]; then
		case $NETMODE in
			""4"")
				ATC=""AT^SYSCFGEX=\""020304\"""" ;;
			""5"")
				ATC=""AT^SYSCFGEX=\""02\"""" ;;
			""6"")
				ATC=""AT^SYSCFGEX=\""030402\"""" ;;
			""7"")
				ATC=""AT^SYSCFGEX=\""03\"""" ;;
			""8"")
				ATC=""AT^SYSCFGEX=\""0403\"""" ;;
			""9"")
				ATC=""AT^SYSCFGEX=\""04\"""" ;;
			*)
				ATC=""AT^SYSCFGEX=\""00\"""" ;;
		esac
	else
		case $NETMODE in
			""3"")
				ATC=""AT+MODODR=3"" ;;
			""5"")
				ATC=""AT+MODODR=1"" ;;
			""7"")
				ATC=""AT+MODODR=5"" ;;
			*)
				ATC=""AT+MODODR=2"" ;;
		esac
	fi
fi

# Telit, Foxconn, etc.
if [ $MODEMTYPE -eq 8 ]; then
	case $NETMODE in
		""3"" )
			ATC=""AT\$QCNSP=1,0,0"" ;;
		""5"" )
			ATC=""AT\$QCNSP=2,0,0"" ;;
		""7"" )
			ATC=""AT\$QCNSP=6,0,0"" ;;
		* )
			ATC=""AT\$QCNSP=0,0,0"" ;;
	esac
fi

# Fibocom
if [ $MODEMTYPE -eq 9 ]; then
	CURRMODEM=$(uci -q get modem.general.modemnum)
	idV=$(uci -q get modem.modem$CURRMODEM.idV)
	idP=$(uci -q get modem.modem$CURRMODEM.idP)
	idPP=${idP:1:1}
	if [ ""$idPP"" = ""1"" ]; then
		case $NETMODE in
			""7"")
				ATC=""AT+GTRAT=3"" ;;
			""8"")
				ATC=""AT+GTRAT=17"" ;;
			""9"")
				ATC=""AT+GTRAT=14"" ;;
			*)
				ATC=""AT+GTRAT=10"" ;;
		esac
	else
		case $NETMODE in
			""4"")
				ATC=""AT+XACT=4,1"" ;;
			""5"")
				ATC=""AT+XACT=1"" ;;
			""7"")
				ATC=""AT+XACT=2"" ;;
			*)
				ATC=""AT+XACT=4,2"" ;;
		esac
	fi
fi

# SIMCom
if [ $MODEMTYPE -eq 10 ]; then
	case $NETMODE in
		""3"")
			ATC=""AT+CNMP=13"" ;;
		""5"")
			ATC=""AT+CNMP=14"" ;;
		""7"")
			ATC=""AT+CNMP=38"" ;;
		""8"")
			ATC=""AT+CNMP=109"" ;;
		""9"")
			ATC=""AT+CNMP=71"" ;;
		*)
			ATC=""AT+CNMP=2"" ;;
	esac
fi

# Quanta, Megafon
if [ $MODEMTYPE -eq 11 ]; then
	case $NETMODE in
		""5"")
			ATC=""AT^QCNCFG=02"" ;;
		""7"")
			ATC=""AT^QCNCFG=03"" ;;
		*)
			ATC=""AT^QCNCFG=00"" ;;
	esac
fi

ATCMDD=""$ATC""
OX=$($ROOTER/gcom/gcom-locked ""$COMMPORT"" ""run-at.gcom"" ""$CURRMODEM"" ""$ATCMDD"")

$ROOTER/luci/celltype.sh $CURRMODEM
uci set modem.modem$CURRMODEM.cmode=""1""
uci commit modem

if [ $MODEMTYPE -ne 9 -o ""$idP"" != ""0104"" ]; then
	$ROOTER/luci/restart.sh $CURRMODEM 11
fi
"
CPQEB1vy,battle_character4,sonjavanteese,JSON,Tuesday 23rd of January 2024 04:31:13 PM CDT,"{
  ""character"": {
    ""astra"": {
      ""slug"": ""astra"",
      ""name"": ""Astra"",
      ""info"": ""Info"",
      ""path"": [
        ""profil"",
        ""art"",
        ""game""
      ]
    },
    ""breach"": {
      ""slug"": ""breach"",
      ""name"": ""Breach"",
      ""info"": ""Info"",
      ""path"": [
        ""profil"",
        ""art"",
        ""game""
      ]
    },
    ""brimstone"": {
      ""slug"": ""brimstone"",
      ""name"": ""Brimstone"",
      ""info"": ""Info"",
      ""path"": [
        ""profil"",
        ""art"",
        ""game""
      ]
    },
    ""chamber"": {
      ""slug"": ""chamber"",
      ""name"": ""Chamber"",
      ""info"": ""Info"",
      ""path"": [
        ""profil"",
        ""art"",
        ""game""
      ]
    },
    ""cypher"": {
      ""slug"": ""cypher"",
      ""name"": ""Cypher"",
      ""info"": ""Info"",
      ""path"": [
        ""profil"",
        ""art"",
        ""game""
      ]
    },
    ""fade"": {
      ""slug"": ""fade"",
      ""name"": ""Fade"",
      ""info"": ""Info"",
      ""path"": [
        ""profil"",
        ""art"",
        ""game""
      ]
    },
    ""jett"": {
      ""slug"": ""jett"",
      ""name"": ""Jett"",
      ""info"": ""Info"",
      ""path"": [
        ""profil"",
        ""art"",
        ""game""
      ]
    },
    ""kayo"": {
      ""slug"": ""kayo"",
      ""name"": ""Kayo"",
      ""info"": ""Info"",
      ""path"": [
        ""profil"",
        ""art"",
        ""game""
      ]
    },
    ""killjoy"": {
      ""slug"": ""killjoy"",
      ""name"": ""Killjoy"",
      ""info"": ""Info"",
      ""path"": [
        ""profil"",
        ""art"",
        ""game""
      ]
    },
    ""neon"": {
      ""slug"": ""neon"",
      ""name"": ""Neon"",
      ""info"": ""Info"",
      ""path"": [
        ""profil"",
        ""art"",
        ""game""
      ]
    },
    ""omen"": {
      ""slug"": ""omen"",
      ""name"": ""Omen"",
      ""info"": ""Info"",
      ""path"": [
        ""profil"",
        ""art"",
        ""game""
      ]
    },
    ""phoenix"": {
      ""slug"": ""phoenix"",
      ""name"": ""Phoenix"",
      ""info"": ""Info"",
      ""path"": [
        ""profil"",
        ""art"",
        ""game""
      ]
    },
    ""raze"": {
      ""slug"": ""raze"",
      ""name"": ""Raze"",
      ""info"": ""Info"",
      ""path"": [
        ""profil"",
        ""art"",
        ""game""
      ]
    },
    ""reyna"": {
      ""slug"": ""reyna"",
      ""name"": ""Reyna"",
      ""info"": ""Info"",
      ""path"": [
        ""profil"",
        ""art"",
        ""game""
      ]
    },
    ""sage"": {
      ""slug"": ""sage"",
      ""name"": ""Sage"",
      ""info"": ""Info"",
      ""path"": [
        ""profil"",
        ""art"",
        ""game""
      ]
    },
    ""skye"": {
      ""slug"": ""skye"",
      ""name"": ""Skye"",
      ""info"": ""Info"",
      ""path"": [
        ""profil"",
        ""art"",
        ""game""
      ]
    },
    ""sova"": {
      ""slug"": ""sova"",
      ""name"": ""Sova"",
      ""info"": ""Info"",
      ""path"": [
        ""profil"",
        ""art"",
        ""game""
      ]
    },
    ""viper"": {
      ""slug"": ""viper"",
      ""name"": ""Viper"",
      ""info"": ""Info"",
      ""path"": [
        ""profil"",
        ""art"",
        ""game""
      ]
    },
    ""yoru"": {
      ""slug"": ""yoru"",
      ""name"": ""Yoru"",
      ""info"": ""Info"",
      ""path"": [
        ""profil"",
        ""art"",
        ""game""
      ]
    }
  },
  ""maps"": [
    {
      ""id"": 1,
      ""slug"": ""ascent"",
      ""name"": ""Ascent"",
      ""info"": ""Zwischen den zwei Arealen auf Ascent liegt ein offener Spielplatz für kleine Positions- und Zermürbungskämpfe. Beide Areale lassen sich durch tonnenschwere Bombenschutztüren sichern. Sobald sie zu sind, müsst ihr sie zerstören oder einen anderen Weg finden. Gebt so wenige Bereiche auf wie möglich."",
      ""thumb"": ""https://nwp-cgn.de/img/game/map/ascent.png""
    },
    {
      ""id"": 2,
      ""slug"": ""bind"",
      ""name"": ""Bind"",
      ""info"": ""Zwei Areale. Keine Mitte. Ihr müsst euch für links oder rechts entscheiden. Welches Areal darf’s denn sein? Beide Seiten bieten Angreifern direkte Wege und zwei Teleporter (nur in eine Richtung), über die man gut flankieren kann."",
      ""thumb"": ""https://nwp-cgn.de/img/game/map/bind.png""
    },
    {
      ""id"": 3,
      ""slug"": ""breeze"",
      ""name"": ""Breeze"",
      ""info"": ""Genieße den Ausblick über historische Ruinen und Höhlen in den Klippen dieses tropischen Paradieses. Aber bring Deckung mit. Die brauchst du für die offenen Bereiche und für Schüsse aus großer Distanz. Achte auf deine Flanke und du wirst dich fühlen wie beim Strandurlaub."",
      ""thumb"": ""https://nwp-cgn.de/img/game/map/breeze.png""
    },
    {
      ""id"": 4,
      ""slug"": ""fracture"",
      ""name"": ""Fracture"",
      ""info"": ""Eine geheime Forschungseinrichtung, die durch ein fehlgeschlagenes Radianit-Experiment zweigeteilt wurde. Als Verteidiger habt ihr damit die Wahl: Trefft die Angreifer auf ihrem eigenen Boden oder macht die Schotten dicht, um den Angriff zu überstehen."",
      ""thumb"": ""https://nwp-cgn.de/img/game/map/fracture.png""
    },
    {
      ""id"": 5,
      ""slug"": ""haven"",
      ""name"": ""Haven"",
      ""info"": ""Unterhalb eines vergessenen Klosters kommt es zwischen rivalisierenden Agenten zu Auseinandersetzungen, in denen es um die Kontrolle dreier Areale geht. Man muss zwar mehr Bereiche im Auge behalten, aber Verteidiger können die zusätzliche Fläche für aggressives Vorrücken nutzen."",
      ""thumb"": ""https://nwp-cgn.de/img/game/map/haven.png""
    },
    {
      ""id"": 6,
      ""slug"": ""icebox"",
      ""name"": ""Icebox"",
      ""info"": ""Dein nächstes Schlachtfeld ist eine geheime Kingdom-Ausgrabungsstätte im ewigen Eis der Arktis. Die beiden Spike-Areale werden von Schnee und Metall geschützt, was etwas horizontale Finesse erfordert. Nutze die Seilrutsche, dann sieht dich kein Gegner kommen."",
      ""thumb"": ""https://nwp-cgn.de/img/game/map/icebox.png""
    },
    {
      ""id"": 7,
      ""slug"": ""lotus"",
      ""name"": ""Lotus"",
      ""info"": ""Ein geheimnisvolles Bauwerk, das einen astralen Fokus beherbergt, strahlt eine uralte Macht aus. Große Steintüren bieten eine Vielzahl von Bewegungsmöglichkeiten und geben den Weg zu drei geheimnisvollen Orten frei."",
      ""thumb"": ""https://nwp-cgn.de/img/game/map/lotus.png""
    },
    {
      ""id"": 8,
      ""slug"": ""pearl"",
      ""name"": ""Pearl"",
      ""info"": ""Auf dieser Karte mit zwei Arealen in einer lebendigen Unterwasserstadt machen Angreifer Druck auf die Verteidiger. Pearl ist eine mit der Umgebung spielende Karte ohne Mechaniken. Nimm auf unserer ersten Karte der Omega-Erde den Kampf durch eine kompakte Mitte oder die weitreichenden Flanken auf."",
      ""thumb"": ""https://nwp-cgn.de/img/game/map/pearl.png""
    },
    {
      ""id"": 9,
      ""slug"": ""split"",
      ""name"": ""Split"",
      ""info"": ""Wenn ihr weit kommen wollt, müsst ihr nach oben. Zwei Areale werden durch einen erhöhten mittleren Bereich getrennt und Kletterseile sorgen für schnelle Wechsel. In beiden Arealen ragt ein Turm in die Höhe und ist für die Kontrolle immens wichtig. Schaut immer nach oben, bevor euch alles um die Ohren fliegt."",
      ""thumb"": ""https://nwp-cgn.de/img/game/map/split.png""
    }
  ],
  ""weapons"": [
    {
      ""id"": 1,
      ""slug"": ""ares"",
      ""name"": ""Ares"",
      ""gattung"": ""Heavy"",
      ""thumb"": ""https://nwp-cgn.de/img/game/weapon/ares.png""
    },
    {
      ""id"": 2,
      ""slug"": ""bucky"",
      ""name"": ""Bucky"",
      ""gattung"": ""Shotgun"",
      ""thumb"": ""https://nwp-cgn.de/img/game/weapon/bucky.png""
    },
    {
      ""id"": 3,
      ""slug"": ""bulldog"",
      ""name"": ""Bulldog"",
      ""gattung"": ""Rifle"",
      ""thumb"": ""https://nwp-cgn.de/img/game/weapon/bulldog.png""
    },
    {
      ""id"": 4,
      ""slug"": ""classic"",
      ""name"": ""Classic"",
      ""gattung"": ""Sidearm"",
      ""thumb"": ""https://nwp-cgn.de/img/game/weapon/classic.png""
    },
    {
      ""id"": 5,
      ""slug"": ""frenzy"",
      ""name"": ""Frenzy"",
      ""gattung"": ""Sidearm"",
      ""thumb"": ""https://nwp-cgn.de/img/game/weapon/frenzy.png""
    },
    {
      ""id"": 6,
      ""slug"": ""ghost"",
      ""name"": ""Ghost"",
      ""gattung"": ""Sidearm"",
      ""thumb"": ""https://nwp-cgn.de/img/game/weapon/ghost.png""
    },
    {
      ""id"": 7,
      ""slug"": ""guardian"",
      ""name"": ""Guardian"",
      ""gattung"": ""Rifle"",
      ""thumb"": ""https://nwp-cgn.de/img/game/weapon/guardian.png""
    },
    {
      ""id"": 8,
      ""slug"": ""judge"",
      ""name"": ""Judge"",
      ""gattung"": ""Shotgun"",
      ""thumb"": ""https://nwp-cgn.de/img/game/weapon/judge.png""
    },
    {
      ""id"": 9,
      ""slug"": ""marshal"",
      ""name"": ""Marshal"",
      ""gattung"": ""Sniper"",
      ""thumb"": ""https://nwp-cgn.de/img/game/weapon/marshal.png""
    },
    {
      ""id"": 10,
      ""slug"": ""odin"",
      ""name"": ""Odin"",
      ""gattung"": ""Heavy"",
      ""thumb"": ""https://nwp-cgn.de/img/game/weapon/odin.png""
    },
    {
      ""id"": 11,
      ""slug"": ""operator"",
      ""name"": ""Operator"",
      ""gattung"": ""Sniper"",
      ""thumb"": ""https://nwp-cgn.de/img/game/weapon/operator.png""
    },
    {
      ""id"": 12,
      ""slug"": ""phantom"",
      ""name"": ""Phantom"",
      ""gattung"": ""Rifle"",
      ""thumb"": ""https://nwp-cgn.de/img/game/weapon/phantom.png""
    },
    {
      ""id"": 13,
      ""slug"": ""sheriff"",
      ""name"": ""Sheriff"",
      ""gattung"": ""Sidearm"",
      ""thumb"": ""https://nwp-cgn.de/img/game/weapon/sheriff.png""
    },
    {
      ""id"": 14,
      ""slug"": ""shorty"",
      ""name"": ""Shorty"",
      ""gattung"": ""Sidearm"",
      ""thumb"": ""https://nwp-cgn.de/img/game/weapon/shorty.png""
    },
    {
      ""id"": 15,
      ""slug"": ""spectre"",
      ""name"": ""Spectre"",
      ""gattung"": ""Smg"",
      ""thumb"": ""https://nwp-cgn.de/img/game/weapon/spectre.png""
    },
    {
      ""id"": 16,
      ""slug"": ""stinger"",
      ""name"": ""Stinger"",
      ""gattung"": ""Smg"",
      ""thumb"": ""https://nwp-cgn.de/img/game/weapon/stinger.png""
    },
    {
      ""id"": 17,
      ""slug"": ""vandal"",
      ""name"": ""Vandal"",
      ""gattung"": ""Rifle"",
      ""thumb"": ""https://nwp-cgn.de/img/game/weapon/vandal.png""
    }
  ]
}"
x3xAfcYP,Duda02,i-Xuup,C#,Tuesday 23rd of January 2024 04:24:28 PM CDT,"        private Coroutine levelTimer;
        public bool pause;
    public float dayIconDistance;
    public float tenSecondsTimerDistance;
    public float startTimer;
    public float letterTimer;
    public float timerDuration = 0f;
    [SerializeField] RectTransform dayIconRectTransform;
    [SerializeField] RectTransform tenSecondsTimerRectTransform;
    private Vector3 dayIconInitPosition;
    private Vector3 timerInitPosition;
    private Vector3 endTimerPosition;

private void Start()
    {
        BeginAnimation(25f);
    }

    public void BeginAnimation(float dayDuration)
    {
        timerDuration = dayDuration;
        startTimer = timerDuration;
        levelTimer = StartCoroutine(TimerActivation());
    }

    private IEnumerator TimerActivation()
    {
        while (startTimer > 0 && !pause)
        {
            startTimer -= Time.deltaTime;
            startTimer = Mathf.Clamp(startTimer, 0, timerDuration);
            Vector3 endPosition = dayIconInitPosition + (dayIconDistance * Vector3.up);
            dayIconRectTransform.localPosition = Vector3.Lerp(endPosition, dayIconInitPosition, startTimer / timerDuration);

            if (startTimer <= 11)
            {
                letterTimer -= Time.deltaTime;
                letterTimer = Mathf.Clamp(letterTimer, 0, 1f);
                tenSecondsTimerRectTransform.localPosition = Vector3.Lerp(endTimerPosition, timerInitPosition, letterTimer / 1f);
            }

            int minutes = Mathf.FloorToInt(startTimer / 60);
            int seconds = Mathf.FloorToInt(startTimer % 60);
            timerText.text = string.Format(""{0:00}:{1:00}"", minutes, seconds);

            if (startTimer <= 0)
            {
                yield return null;
            }
        }
    }

    private void Update()
    {
        if (pause)
        {
            StopCoroutine(levelTimer);
        }
    }"
cPmGqQAH,RHtera Terárium - switch funkcí,elektronek,Arduino,Tuesday 23rd of January 2024 04:16:30 PM CDT,"unsigned long previousMillis1 = 0;
unsigned long previousMillis2 = 0;

const long interval1 = 1000;   // Interval v milisekundách (1 sekunda)
const long interval2 = 60000;  // Interval v milisekundách (1 minuta)

bool switchPages = true;

void setup() {
	Serial.begin(9600);
}

void loop() {
	unsigned long currentMillis = millis();
	// Vypis kazdou sekundu
	if (currentMillis - previousMillis1 >= interval1) {
		previousMillis1 = currentMillis;
		if (switchPages) {
			Serial.println(""sensor 1"");
		} else {
			Serial.println(""sensor 2"");
		}
	}
	
	// Přepínání funkcí každou minutu
	if (currentMillis - previousMillis2 >= interval2) {
		previousMillis2 = currentMillis;
		switchPages = !switchPages;
	}
}"
ye1RvtRp,Working Electron Download Link *2024 Byfron Bypass*,SkidScripts,Lua,Tuesday 23rd of January 2024 04:16:15 PM CDT,"***Working executor download link, Electron 2024 working executor, Byfron Bypass***
 
 
 
 
---COPY LINK---        https://cdnwrd2.com/r/11908/1692681568125/Electron.zip     ---COPY LINK---
"
