id,title,username,language,date,content
GZKJ71Tk,Untitled,DeividasBalysevas,JavaScript,Sunday 21st of April 2024 06:52:24 AM CDT,"<script>
/**
 * A function to handle a click on a checkout button. This function uses the eventCallback
 * data layer variable to handle navigation after the ecommerce data has been sent to Google Analytics.
 */
function onCheckout() {
  dataLayer.push({ ecommerce: null });  // Clear the previous ecommerce object.
  dataLayer.push({
    'event': 'checkout',
    'ecommerce': {
	 user_data: {
      email_address: '20ec5f0a30117009e04cb67794a171c24a292a01aff40efd4fab92ffd8f7e2cc',
      phone_number: 'c775e7b757ede630cd0aa1113bd102661ab38829ca52a6422ab782862f268646'
      }
      'checkout': {
        'actionField': {'step': 2, 'option': 'Visa'},
        'products': [{
          'name': 'Triblend Android T-Shirt',
          'id': '12345',
          'price': '15.25',
          'brand': 'Google',
          'category': 'Apparel',
          'variant': 'Gray',
          'quantity': 1
       }]
     }
   },
   'eventCallback': function() {
      document.location = 'checkout.html';
   }
  });
}
</script>"
NKnGQw7r,15(2),nq1s788,Python,Sunday 21st of April 2024 06:33:57 AM CDT,"for a in range(1, 100):
    cnt = 0
    for x in range(1, 100):
        if (a % 45 == 0) and ((750 % x == 0) <= ((not (a % x == 0)) <= (not (120 % x == 0)))):
            cnt += 1
    if cnt == 99:
        print(a)"
cxc8Kepv,15,nq1s788,Python,Sunday 21st of April 2024 06:15:54 AM CDT,"for a in range(-100, 100):
    for x in range(100):
        for y in range(100):
            if not ((3 * x + y > 48) or (x > y) or (4 * x + y < a)):
                print(a)"
riQK3sr8,Untitled,FenixFed,Python,Sunday 21st of April 2024 06:14:04 AM CDT,"c = 0
for s in range(0, 10000, 2):
    n = 120
    while s > 0:
        s //= 6
        n -= 6
    if n == 108:
        c+=1
print(c)"
kKFedbXa,Untitled,FenixFed,Python,Sunday 21st of April 2024 06:10:55 AM CDT,"def f(st, en):
    if st == en:
        return 1
    if st == 32 or st > 46:
        return 0
    return f(st+3, en) + f(st+4, en) + f(st*3, en)


print(f(4, 16)*f(16, 46))"
VWZPYGHP,Untitled,FenixFed,Python,Sunday 21st of April 2024 06:07:06 AM CDT,"def bitwise_operation(a, b, c):
    if len(a) != 8 or len(b) != 8:
        raise ValueError(""–°—Ç—Ä–æ–∫–∏ a –∏ b –¥–æ–ª–∂–Ω—ã –∏–º–µ—Ç—å –¥–ª–∏–Ω—É 8"")

    result = []
    for char_a, char_b in zip(a, b):
        bit_a = int(char_a)
        bit_b = int(char_b)

        if c == 0:
            result_bit = bit_a & bit_b
        elif c == 1:
            result_bit = bit_a | bit_b
        else:
            raise ValueError(""–ù–µ–¥–æ–ø—É—Å—Ç–∏–º–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ c. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ 0 –¥–ª—è –∏–Ω—ä–µ–∫—Ü–∏–∏ –∏–ª–∏ 1 –¥–ª—è –¥–∏–∑—ä—é–Ω–∫—Ü–∏–∏."")

        result.append(str(result_bit))

    return ''.join(result)


ints = [18, 132, 86]
for i in 0,1,2:
    ints[i] = '0'*(8-len(bin(ints[i])[2:]))+bin(ints[i])[2:]

print(ints)

ints[0] = str(''.join(list('0' if int(i) else '1' for i in ints[0])))

ints[1] = ints[1][-2:]+ints[1][:-2]

ints[2] = ints[2][1:]+ints[2][:1]

print(ints)

a = bitwise_operation(bitwise_operation(ints[0], ints[1], 1), ints[2], 0)

print(a)
print(int(a, 2))"
5uCqfX5Y,ü§ë G2A.com Free Gift Card Guide Apr 2024 FIX ü§ë,jusst2k4,GetText,Sunday 21st of April 2024 06:03:40 AM CDT,"G2A.com free gift card & games updated guide.
Any item for free on G2A.com including Amazon, Steam, Xbox, Playstation gift cards & everything else offered.

This is the most up to date version of this script. Any other one posted will not work!
 
PDF guide here:
https://drive.google.com/file/d/1thJ3r_goEZ3BA-wE8sNYbGUhGv6gTnXz/view?usp=g2a_refund_exploit_157859.pdf

Working as of:
21 April 2024"
SjuYBGB0,data903,TestGuy1,JSON,Sunday 21st of April 2024 06:00:06 AM CDT,"{
  status: 'Success',
  method: 'server',
  maindata: 'a00827fef8fcb6b77510bc33a9e2ba4d01922a2e31b0789548cfe6df1ab8513889b5c9610c83a71105e3e5db189db34ddf23e1b375a558008f93e814566e29bcdbce7b7783cd5a274d44dbff792c5b5ed25bc1cb439d7ce5dec42c835f8ae08fb843a4fb53cbec7831e1520554578b9780bb0acbe1a2d35c75b73d3121785454',
  otherdata: [
    '5848672cad3eca0253f97bd6569e16b9',
    '38a51881ce2fc265d66e33a3ad07f9d8',
    'c6f68e99b86690db59361e2156a022a9',
    '5cc8d763e2da3deed14269bb2f51685b',
    '3d04d1b7c0373fd0b44edbc85e344e9e',
    '04ef100e20f91f231c47328d225f3f7d',
    'f88966f0826a9eeef27f7895ae740bb8',
    '51da05fe3bb60d269022ba3c6de443b4'
  ]
}"
svh7yffX,quiz1,Mohammed_AhmedAF,C++,Sunday 21st of April 2024 05:53:32 AM CDT,"#include <iostream>
#include <string_view>

enum day_of_week{
    sunday = 1,
    monday,
    teusday,
    wednesday,
    thursday,
    friday,
    saturday
} day_of_week;

constexpr std::string_view days [] =
{""Sunday"",""Monday"",""Tuesday"",""Wednesday"",""Thursday"",""Friday"",""Saturday""};

int main()
{
    enum day_of_week today = sunday;
    std::cout << today << std::endl;

    std::cout << days[(today+10)%7] << std::endl;
}"
v7Vu0hNW,ü§ë G2A.com Free Gift Card Guide Apr 2024 FIX üí∞,ssss50w,GetText,Sunday 21st of April 2024 05:42:29 AM CDT,"G2A.com free gift card & games updated guide.
Any item for free on G2A.com including Amazon, Steam, Xbox, Playstation gift cards & everything else offered.
 
This is the most up to date version of this script. Any other one posted will not work!
 
PDF guide here:
https://drive.google.com/file/d/1KMb0fLkKHIC2qdjR4vCSRH9rVSjJVMdX/view?usp=sharing
 
Working as of:
21 April 2024"
v2UuEtUW,api_client,mathiaas,Lua,Sunday 21st of April 2024 05:10:44 AM CDT,"local json = loadfile(""json"")()
APIClient = {}
APIClient.__index = APIClient

function APIClient.new(baseURL)
    local self = setmetatable({}, APIClient)
    self.baseURL = baseURL
    return self
end


function APIClient:get(path)
    local url = self.baseURL .. path
    local response = http.get(url)
    if not response then
        error(""Failed to get response from server"")
    end

    local jsonString = response.readAll()
    response.close()
    local ok, data = pcall(json.decode, jsonString)
    if not ok then
        error(""Error decoding JSON: "" .. data)
    end

    return data
end


function APIClient:post(path, data)
    local url = self.baseURL .. path
    local headers = {
        [""Content-Type""] = ""application/json""
    }
    local jsonData = json.encode(data)
    local response = http.post(url, jsonData, headers)
    if not response then
        error(""Failed to post data to server"")
    end

    local jsonString = response.readAll()
    response.close()
    local ok, result = pcall(json.decode, jsonString)
    if not ok then
        error(""Error decoding JSON response: "" .. result)
    end

    return result
end


return APIClient"
Mi5rS3ZE,toyShop.py,Nikolay_Kashev,Python,Sunday 21st of April 2024 05:07:53 AM CDT,"puzzle = 2.60
talking_doll = 3
teddy_bear = 4.10
minion = 8.20
truck = 2

vacation_price = float(input())
puzzle_quantity = int(input())
talking_doll_quantity = int(input())
teddy_bear_quantity = int(input())
minion_quantity = int(input())
truck_quantity = int(input())

toys_quantity = puzzle_quantity + talking_doll_quantity + teddy_bear_quantity + minion_quantity + truck_quantity

total_price = (
    puzzle * puzzle_quantity +
    talking_doll * talking_doll_quantity +
    teddy_bear * teddy_bear_quantity +
    minion * minion_quantity +
    truck * truck_quantity
)

if toys_quantity >= 50:
    total_price *= 0.75

total_price -= total_price * 0.10

if total_price >= vacation_price:
    print(f""Yes! {total_price - vacation_price:.2f} lv left."")
else:
    print(f""Not enough money! {vacation_price - total_price:.2f} lv needed."")"
rGtR4fSm,IC Markets and APG University Soft Launch Prop Trading Programs,reviewbrokers,PHP,Sunday 21st of April 2024 05:05:01 AM CDT,"https://www.reviewbrokers.net/ic-markets-and-apg-university-soft-launch-prop-trading-programs/
 Table of Contents : IC Markets

 	Introduction
 	Revolutionizing Prop Trading
 	Key Components of the Program

 	Educational Curriculum
 	State-of-the-Art Trading Platforms
 	Broad Asset Coverage
 	Mentorship and Support


 	Goals and Objectives
 	Impact on the Forex Community
 	Conclusion

Introduction
IC Markets and APG University have partnered to launch an innovative prop trading program, marking a significant milestone for both organizations. This collaboration combines IC Markets' advanced trading platforms with APG University's comprehensive educational resources, creating a dynamic environment for both experienced and beginner traders to excel in forex trading.
Revolutionizing Prop Trading
The new prop trading program aims to redefine the way proprietary trading is conducted, focusing on both education and practical trading. By offering a comprehensive suite of resources and tools, IC Markets and APG University intend to provide traders with the knowledge and experience needed to succeed in the highly competitive world of forex trading.
Key Components of the Program
The proprietary trading program offers a range of features designed to accommodate traders at every skill level. The key components of the program include:
Educational Curriculum
APG University has developed a specialized curriculum to help traders understand forex markets, trading strategies, and risk management. This comprehensive educational resource provides a solid foundation for participants to build their trading skills.
State-of-the-Art Trading Platforms
IC Markets contributes its advanced trading platforms, renowned for their low spreads starting from 0.0 pips, fast order execution, and institutional-grade liquidity. These features enable efficient trading and reduce slippage, crucial for traders at all levels.
Broad Asset Coverage
The program offers access to over 2,100 tradable instruments across multiple asset classes, including forex, commodities, stocks, and cryptocurrencies. This extensive range provides traders with ample opportunities to diversify their portfolios.
Mentorship and Support
APG University offers ongoing support through mentorship, regular feedback sessions, and personalized coaching. This dedicated support system helps traders refine their strategies and improve their decision-making processes.
Goals and Objectives
The collaboration between IC Markets and APG University is driven by a clear set of objectives:

- **Making Trading Education Accessible**: The program seeks to democratize trading education by offering a seamless blend of learning and trading experience, making it accessible to a broader audience.
- **Enhancing Trading Skills**: Through hands-on practice and expert mentorship, the program aims to help traders develop and hone their trading skills.
- **Fostering Innovation in Trading**: By introducing innovative trading practices and approaches, the program encourages traders to adopt better risk management strategies and achieve higher profitability.
Impact on the Forex Community
The soft launch of the prop trading program is expected to have a significant impact on the forex trading community. By offering a well-rounded educational and trading experience, IC Markets and APG University are setting a new standard in proprietary trading. This initiative is likely to attract a diverse group of traders, including those who may not have previously considered forex trading due to a lack of education or resources.

Read IC Markets Review
Conclusion
As the soft launch progresses, both IC Markets and APG University are committed to refining the program based on feedback and user experiences. This continuous improvement approach ensures that the proprietary trading program remains aligned with the needs and expectations of traders.

The joint prop trading initiative from IC Markets and APG University provides an exciting opportunity for traders of all levels. Whether you're just starting or you're a seasoned trader seeking to refine your skills, this program offers a comprehensive solution to support your trading journey and help you achieve your goals in the forex market."
rJWh08CE,lab4,flagin,C,Sunday 21st of April 2024 04:55:52 AM CDT,"ex 1:
#include <stdio.h>
#include <stdlib.h>

float square(float);
float rectangle(float, float);
float triangle(float, float);
float circle(float);
int main()
{
    int option;
    char figure[10];
    float a, b;
    scanf(""%d"", &option);
    switch (option)
    {
    case 1:
        scanf(""%f"", &a);
        strcpy(figure, ""square"");
        printf(""the area of the %s is %f."", figure, square(a));
        break;
    case 2:
        scanf(""%f"", &a);
        scanf(""%f"", &b);
        strcpy(figure, ""rectangle"");
        printf(""the area of the %s is %f."", figure, rectangle(a, b));
        break;
    case 3:
        scanf(""%f"", &a);
        scanf(""%f"", &b);
        strcpy(figure, ""triangle"");
        printf(""the area of the %s is %f."", figure, triangle(a, b));
        break;
    case 4:
        scanf(""%f"", &a);
        strcpy(figure, ""circle"");
        printf(""the area of the %s is %f."", figure, circle(a));
        break;

    }
}
float square(float side)
{
    return side*side;
}

float rectangle(float side1, float side2)
{
    return side1*side2;
}

float triangle(float side, float height)
{
    return side*height/2;
}


float circle(float radius)
{
    return 3.1415*radius*radius;
}
///////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////

ex2:
#include <stdio.h>
#include <stdlib.h>

void swap(float*, float*);
int main()
{
    float a,b;
    scanf(""%f %f"", &a, &b);
    swap(&a, &b);
    printf(""%f %f"", a, b);
}
void swap(float *n1, float *n2)
{
    *n1 = *n1 + *n2;
    *n2 = *n1 - *n2;
    *n1 = *n1 - *n2;
}
///////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////
ex3:
#include <stdio.h>
#include <stdlib.h>

void check_parity(float);
int main()
{
    float a;
    scanf(""%f"", &a);
    check_parity(a);
}
void check_parity(float num1)
{
    if ((int)num1 % 2 == 0)
    {
        printf(""number is even"");
    }
    else printf(""number is odd"");
}
///////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////
ex4:
#include <stdio.h>
#include <stdlib.h>

void decimal_to_binary(int);
int main()
{
    int a;
    scanf(""%d"", &a);
    decimal_to_binary(a);
}
void decimal_to_binary(int num1)
{
    int remainders[20];
    int i = 0;
    while (num1 != 0)
    {
        remainders[i] = num1 % 2;
        num1 /= 2;
        i++;

    }

    for (int j = i - 1; j >= 0; j--)
    {
        printf(""%d"", remainders[j]);
    }
}





"
ekMi14Lp,Make Easter Extra Special with PU Prime Deals,fxvnpro,PHP,Sunday 21st of April 2024 04:48:41 AM CDT,"https://www.fxvnpro.com/make-easter-extra-special-with-pu-prime-deals/
 Table of Contents : PU Prime
Introduction: Embrace the Easter Spirit
Turn Setbacks into Opportunities with Trade Loss Vouchers
How the Easter Promotion Works
Receive Six Trade Loss Vouchers
Use TLVs to Mitigate Losses
Simple and Seamless Redemption
Trade with Confidence
Join PU Prime's Easter Promotion
---
Introduction: Embrace the Easter Spirit
Easter is a time of renewal and optimism, and PU Prime is celebrating the season with an exclusive trading promotion that helps traders boost their confidence and mitigate potential losses. If you've experienced recent trading challenges, PU Prime's Easter Promotion can offer a fresh perspective to revitalize your trading journey.
Turn Setbacks into Opportunities with Trade Loss Vouchers
PU Prime knows that trading can sometimes be a rollercoaster, with setbacks leading to uncertainty. To help traders stay on track, the Easter Promotion provides a safety net with Trade Loss Vouchers (TLVs). This innovative approach is designed to support both new and existing customers as they navigate the trading landscape.
How the Easter Promotion Works
To participate in the Easter Promotion, simply open a new live account with PU Prime's mobile trading app. Here's what you can expect from this limited-time offer:
Receive Six Trade Loss Vouchers
By opening a new live account during the promotion period, you'll receive six TLVs, each valued at $5. These vouchers can be used to offset trading losses within the specified timeframe.
Use TLVs to Mitigate Losses
If you incur trading losses, TLVs can help reduce the impact. Apply the vouchers to future trades, and you'll be able to recover some of your lost funds while minimizing risk.
Simple and Seamless Redemption
Once you open a new live account, TLVs are automatically credited to your account, with no additional steps required. This seamless process allows you to focus on your trading without extra hassle.
Trade with Confidence
TLVs act as a financial cushion, enabling you to trade with greater confidence and explore new opportunities with reduced anxiety.
Join PU Prime's Easter Promotion
Don't let trading setbacks hold you back. With PU Prime's Easter Promotion, you can tap into unique benefits that not only help you recover from losses but also give you the confidence to pursue new trading strategies. Whether you're a beginner or a seasoned trader, this promotion offers valuable incentives to enhance your trading experience.

Take advantage of PU Prime's Easter Promotion and make the most of this season of renewal. Open a new live account today and start trading with the assurance that you have the tools to succeed. Embrace the Easter spirit and trade with confidence."
SXAihUrD,Untitled,Josif_tepe,C++,Sunday 21st of April 2024 02:39:56 AM CDT,"#include <iostream>
#include <vector>
#include <algorithm>
using namespace std;

int main() {
    int n;
    cin >> n;
    vector<int> maski(n);
    vector<int> cnt(95, 0);
    for(int i = 0; i < n; i++) {
        cin >> maski[i];
        cnt[maski[i]]++;
    }
    
    int m;
    cin >> m;
    vector<int> zenski(m);
    for(int i = 0; i < m; i++) {
        cin >> zenski[i];
    }
    sort(zenski.begin(), zenski.end());
    int R, k;
    cin >> R >> k;
    int res  = 0;
    for(int i = 0; i + k - 1 < m; i++) {
        int najgolem = zenski[i] + R;
        int najmal = zenski[i + k - 1] - R;
        int kolku = 0;
        for(int j = max(30, najmal); j <= min(90, najgolem); j++) {
            kolku += cnt[j];
        }
        res = max(res, kolku);
    }
    cout << res << endl;
    
    return 0;
}
"
bJGFUp7f,Test,Vapio,Java,Sunday 21st of April 2024 02:32:54 AM CDT,"class Test
{
	public static void main(String[] args)
	{
		System.out.println(""Itransition""); 
		
	}		
}

//<?php system('clear'); echo ""Itransition"" . PHP_EOL; exit()?>"
kKetuYwn,Untitled,Kaerius,Lua,Sunday 21st of April 2024 02:29:36 AM CDT,"local component = require('component')
local thread = require('thread')
local event = require('event')
local sides = require('sides')
local gpu = component.gpu

-----------------------------------------
--  –ü—Ä–æ–≥–∞ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ –∫—Ä–∞—Ñ—Ç–æ–≤ –≤ –±–ª–∞–¥ –º–µ–¥–∂–∏–∫ –∞–ª—Ç–∞—Ä–µ.
--  –î–ª—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã –Ω—É–∂–µ–Ω–æ –∏–º–µ—Ç—å:
--  —Ç1 –∫–æ–º–ø—å—é—Ç–µ—Ä –∫–µ–π—Å, —Ç1 –≥—Ä–∞—Ñ–∏—á–µ—Å–∫—É—é –∫–∞—Ä—Ç—É, —Ç1 –ñ–î, —Ç1 —Ü–ø—É
--  –∏ –¥–≤–µ —Ç1 –æ–ø–µ—Ä–∞—Ç–∏–≤—ã. –î–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –∞–ª–∞—Ä—ë–º
--  –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è transposer. –°—Ç–∞–≤–∏–º —Ç—Ä–∞–Ω—Å–ø–æ—Å–µ—Ä –≤–ø–ª–æ—Ç–Ω—É—é –∫ –∞–ª—Ç–∞—Ä—é
--  –∏ –∫ —Ç—Ä–∞–Ω—Å–ø–æ–∑–µ—Ä—É 2 –∏–Ω–≤–µ–Ω—Ç–æ—Ä—è –≤—Ö–æ–¥–Ω–æ–π –∏ –≤—ã—Ö–æ–¥–Ω–æ–π. –£–∫–∞–∑—ã–≤–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ
--  –∏–Ω–≤–µ–Ω—Ç–æ—Ä–µ–π –Ω–∏–∂–µ, –µ—Å–ª–∏ –≤—Å–µ –∏–Ω–≤–µ–Ω—Ç–æ—Ä–∏ –∏–º–µ—é —Ä–∞–∑–Ω—ã–µ –∏–º–µ–Ω–∞, –ª–∏–±–æ 
--  —É–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–æ—Ä–æ–Ω—ã —Å–≤–µ—Ç–∞ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ —Ç—Ä–∞–Ω—Å–ø–æ—Å–µ—Ä–∞ (input_side/output_side/altar_side)
--  –ü–æ–¥–∫–ª—é—á–∞–µ–º —Ç—Ä–∞–Ω—Å–ø–æ–∑–µ–∑ –∫ –∫–æ–º–ø—å—é—Ç–µ—Ä –∫–µ–π—Å—É –ø—Ä–∏ –ø–æ–º–æ—â–∏ –∫–∞–±–µ–ª–µ–π –∏–∑ –û–ö.
--  –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≥—Ä–∞–º–º—É, –∫–∏–¥–∞–µ–º –∏—Ç–µ–º –≤ –∏–Ω–ø—É—Ç —á–µ—Å—Ç, –∂–¥—ë–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç.
-- 
--  –î–ª—è –∑–∞–ª–∏–≤–∫–∏ –ø—Ä–æ–≥—Ä–∞–º–º—ã –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø—Ä–æ—Å—Ç–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ 
--  —á–µ—Ä–µ–∑ –∫–æ–ª—ë—Å–∏–∫–æ –º—ã—à–∏ (–Ω–æ –ø—Ä–∏–¥—ë—Ç—Å—è –∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –∑–∞ 2 —Ä–∞–∑–∞, –ø–æ 200 —Å—Ç—Ä–æ–∫), 
--  –ª–∏–±–æ –∫—Ä–∞—Ñ—Ç–∏—Ç—å —Ç2 –∫–µ–π—Å –∏ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç –∫–∞—Ä—Ç—É.
--
--  –í –∫–æ–Ω—Ñ–∏–≥–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã –ø—Ä–æ–ø–∏—Å–∞–Ω—ã –ø–æ—á—Ç–∏ –≤—Å–µ —Ä–µ—Ü–µ–ø—Ç—ã GTNH –∏ —Å–∫–æ–ª—å–∫–æ LP –Ω—É–∂–Ω–æ –Ω–∞ –∫—Ä–∞—Ñ—Ç—ã.
--  –ü–æ—ç—Ç–æ–º—É –ø–µ—Ä–µ–¥ —Å—Ç–∞—Ä—Ç–æ–º –∫—Ä–∞—Ñ—Ç–∞ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç—Å—è —Ç–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å —ç—Å—Å–µ–Ω—Ü–∏–∏ –∏, –µ—Å–ª–∏
--  –æ–Ω –±–æ–ª—å—à–µ –∏–ª–∏ —Ä–∞–≤–µ–Ω —Ç—Ä–µ–±—É–µ–º–æ–º—É –≤ —Ä–µ—Ü–µ–ø—Ç–µ, –ø—Ä–µ–¥–º–µ—Ç –±—É–¥–µ—Ç –ø–æ–º–µ—â—ë–Ω –≤ –∞–ª—Ç–∞—Ä—å –¥–ª—è –∫—Ä–∞—Ñ—Ç–∞.
--  –ü–æ—Å–ª–µ –æ–∫–æ–Ω—á–∞–Ω–∏—è –∫—Ä–∞—Ñ—Ç–∞ –ø—Ä–µ–¥–º–µ—Ç –ø–µ—Ä–µ–º–µ—â–∞–µ—Ç—Å—è –≤ –æ—Ç–ø—É—Ç —á–µ—Å—Ç. –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è CheckInterval
--  –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç, –Ω–∞—Å–∫–æ–ª—å–∫–æ —á–∞—Å—Ç–æ –ø—Ä–æ–≤–µ—Ä—è—Ç—å –∞–ª—Ç–∞—Ä—å.
-- 
--  –ü—Ä–æ–≥—Ä–∞–º–º–∞ —É–º–µ–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å —Å –æ—Ä–±–∞–º–∏. –ï—Å–ª–∏ –≤ –∞–ª—Ç–∞—Ä–µ –ª–µ–∂–∏—Ç –±–ª–∞–¥ –æ—Ä–±,
--  –ø—Ä–æ–≥—Ä–∞–º–º–∞ –ø–µ—Ä–µ–ª–æ–∂–∏—Ç –µ–≥–æ –≤ –æ—É—Ç–ø—É—Ç —á–µ—Å—Ç –∏ –±—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω—è—Ç—å –∫—Ä–∞—Ñ—Ç—ã.
--  –ü–æ—Å–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –≤—Å–µ—Ö –∫—Ä–∞—Ñ—Ç–æ–≤, –ø—Ä–æ–≥—Ä–∞–º–º–∞ –ø—ã—Ç–∞–µ—Ç—Å—è –≤–µ—Ä–Ω—É—Ç—å –æ—Ä–± –≤ –∞–ª—Ç–∞—Ä—å.
--  –ü–æ—ç—Ç–æ–º—É –ø–æ–∑–∞–±–æ—Ç—å—Ç–µ—Å—å –æ —Ç–æ–º, —á—Ç–æ–± –∏–∑ –æ—É—Ç–ø—É—Ç —á–µ—Å—Ç–∞ –æ—Ä–±–∞ –Ω–∏–∫—É–¥–∞ –Ω–µ –ø—Ä–æ–ø–∞–¥–∞–ª–∞.
--
--  –î–æ–ø —Ñ–∏—á–∞: –ø—Ä–æ–≥—Ä–∞–º–º–∞ –≤—ã–≤–æ–¥–∏—Ç —Ç–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å –∫—Ä–æ–≤–∏ –≤ –∞–ª—Ç–∞—Ä–µ –∏ –µ–≥–æ –≤–º–µ—Å—Ç–∏–º–æ–º—Å—Ç—å.
-----------------------------------------


local CheckInterval = 1                                         -- loop cooldown (sec)
local updateGuiInterval = 1
local altar_side = nil                                          -- if nil -> autodetect
local input_side = nil                                          -- if nil -> autodetect
local output_side = nil                                         -- if nil -> autodetect
local altar_name = ""tile.bloodAltar""                            -- if altar_side == nil required altar name
local input_name = ""tile.extrautils:chestFull""                  -- if input_side == nil required input chest name
local output_name = ""tile.appliedenergistics2.BlockInterface""   -- if output_side == nil required output chest name

local bm_recipe_config = {
    [""minecraft:bucket:0""]                              = 1,
	[""minecraft:tnt""]									= 10,
	[""minecraft:cake""]									= 10,
    [""minecraft:iron_ingot:0""]                          = 6,
	[""minecraft:dye:14""]								= 0.2,
	[""minecraft:cookie""]								= 2,
	[""minecraft:paper""]									= 10,
	[""MagicBees:frameMagic""]							= 5,
	[""Botania:flower""]									= 15,
    [""minecraft:log:0""]                                 = 5,
    [""minecraft:log:1""]                                 = 5,
    [""minecraft:log:2""]                                 = 5,
    [""minecraft:log:3""]                                 = 5,
    [""minecraft:log2:0""]                                = 5,
    [""minecraft:log2:1""]                                = 5,
    [""minecraft:glass:0""]                               = 0.2,
	[""minecraft:ice""]									= 0.4,
	[""minecraft:packed_ice""]							= 0.6,
    [""minecraft:iron_block:0""]                          = 64,
    [""minecraft:glowstone:0""]                           = 28,
    [""BloodArsenal:blood_infused_diamond_unactive:0""]   = 120,
    [""gregtech:gt.metaitem.02:30500""]                   = 12,
    [""minecraft:glowstone_dust:0""]                      = 7,
    [""witchery:ingredient:102""]                         = 5,
    [""BloodArsenal:heart:0""]                            = 100,
    [""dreamcraft:item.WeakOrb:0""]                       = 5,
    [""dreamcraft:item.ApprenticeOrb:0""]                 = 10,
    [""dreamcraft:item.MagicianOrb:0""]                   = 30,
    [""dreamcraft:item.MasterOrb:0""]                     = 60,
    [""dreamcraft:item.ArchmageOrb:0""]                   = 120,
    [""dreamcraft:item.TranscendentOrb:0""]               = 300,
    [""dreamcraft:item.ArcaneSlate:0""]                   = 1,
    [""AWWayofTime:blankSlate:0""]                        = 2.5,
    [""AWWayofTime:reinforcedSlate:0""]                   = 7.5,
    [""AWWayofTime:imbuedSlate:0""]                       = 20,
    [""AWWayofTime:demonicSlate:0""]                      = 60,
    [""IC2:itemFluidCell:0""]                             = 1,
    [""Thaumcraft:ItemEssence:0""]                        = 4,
    [""IC2:itemBatCrystal:1""]                            = 5,
    [""AWWayofTime:sacrificialKnife:0""]                  = 10,
    [""AWWayofTime:blankSpell:0""]                        = 20,
    [""AWWayofTime:emptySocket:0""]                       = 40,
    [""Thaumcraft:blockCrystal:0""]                       = 5,
    [""Thaumcraft:blockCrystal:1""]                       = 5,
    [""Thaumcraft:blockCrystal:2""]                       = 5,
    [""Thaumcraft:blockCrystal:3""]                       = 5,
    [""Thaumcraft:blockCrystal:5""]                       = 10,
    [""Thaumcraft:blockCrystal:6""]                       = 100,
    [""EnderZoo:enderFragment:0""]                        = 5,
    [""AWWayofTime:telepositionFocus:0""]                 = 20,
    [""Thaumcraft:blockCosmeticSolid:4""]                 = 5,
    [""thaumicbases:voidBlock:0""]                        = 10,
    [""gregtech:gt.blockmetal8:13""]                      = 50,
	[""BloodArsenal:blood_infused_diamond_active""]		= 10,
	[""minecraft:sandstone""]                             = 3.5,
	[""ForbiddenMagic:WandCores:6""]                      = 50,
}

local bm_orb_config = {
    [""AWWayofTime:weakBloodOrb""] = true,
    [""AWWayofTime:apprenticeBloodOrb""] = true,
    [""AWWayofTime:magicianBloodOrb""] = true,
    [""AWWayofTime:masterBloodOrb""] = true,
    [""AWWayofTime:archmageBloodOrb""] = true,
    [""AWWayofTime:transcendentBloodOrb""] = true,
    [""ForbiddenMagic:EldritchOrb""] = true,
    [""Avaritia:Orb_Armok""] = true
}

local tr = nil
local d_limit = 5                   -- debud recursion limit
local cur_item_name = nil
local saved_orb_name = nil

function main()
    init()
    init_gui()

    local resetBColor, resetFColor = gpu.getBackground(), gpu.getForeground()
    local background = {}

    table.insert(background, event.listen(""key_up"", function (key, address, char)
        if char == string.byte('q') then
            event.push('exit')
        end
    end))
    table.insert(background, event.timer(CheckInterval, failFast(check_craft), math.huge))
    table.insert(background, event.timer(updateGuiInterval, failFast(update_gui), math.huge))

    local _, err = event.pull(""exit"")

    for _, b in ipairs(background) do
        if type(b) == 'table' and b.kill then
            b:kill()
        else
            event.cancel(b)
        end
    end

    gpu.setBackground(resetBColor)
    gpu.setForeground(resetFColor)

    if err then
        io.stderr:write(err)
        os.exit(1)
    else
        os.exit(0)
    end
end

function failFast(fn)
    return function(...)
        local res = table.pack(xpcall(fn, debug.traceback, ...))
        if not res[1] then
            event.push('exit', res[2])
        end
        return table.unpack(res, 2)
    end
end

function errorExit(...)
    out(...)
    event.push('exit')
end

----------------------- DEBUG ---------------------------

function object_to_string(level, object)
    local function get_tabs(num)
        local msg = """"
        for i = 0, num do  msg = msg .. ""  "" end
        return msg
    end
  
    if level == nil then level = 0 end
  
    local message = "" ""
  
    if object == nil then
        message = message .. ""nil""
    elseif type(object) == ""boolean"" or type(object) == ""number"" then
        message = message .. tostring(object) end
    if type(object) == ""string"" then
        message = message..object end
    if type(object) == ""function"" then
        message = message..""\""__function\"""" end
    if type(object) == ""table"" then
      if level <= d_limit then
        message = message .. ""\n"" .. get_tabs(level) .. ""{\n""
        for key, next_object in pairs(object) do
            message = message .. get_tabs(level + 1) .. ""\"""" .. key .. ""\"""" .. "":"" .. object_to_string(level + 1, next_object) .. "",\n"";
        end
        message = message .. get_tabs(level) .. ""}""
      else
        message = message .. ""\"""" .. ""__table"" .. ""\""""
      end
    end
    return message
end
  
function rec_obj_to_string(object, ...)
    arg = {...}
    if #arg > 0 then
        return object_to_string(0, object) .. rec_obj_to_string(...)
    else
        return object_to_string(0, object)
    end
end

function out(...)
    local message = rec_obj_to_string(...)
    print(message)
end

----------------------- LOOP ---------------------------

function check_craft()
    if cur_item_name then
        local item_in_altar = tr.getStackInSlot(altar_side, 1)

        if item_in_altar == nil then
            cur_item_name = nil
        elseif item_in_altar.name .. "":"" .. math.floor(item_in_altar.damage) ~= cur_item_name then
            transfer_item(altar_side, output_side, 1, 1)
        end
    else
        local in_item_slot, item = get_first_item(input_side, bm_recipe_config)
        if item then
            local item_in_altar = tr.getStackInSlot(altar_side, 1)

            if item_in_altar then
                if bm_orb_config[item_in_altar.name] then
                    transfer_item(altar_side, output_side, 1, 1)
                    saved_orb_name = item_in_altar.name
                end
            else
                local fluid = tr.getFluidInTank(altar_side, 1)
                if fluid and fluid.amount >= bm_recipe_config[item] * 1000 then
                    tr.transferItem(input_side, altar_side, 1, in_item_slot, 1)
                    cur_item_name = item
                end
            end
        elseif saved_orb_name then
            local out_chest_size = tr.getInventorySize(output_side)
            local selected_slot = nil

            for i = 1, out_chest_size do --find orb
                local item_in_outchest = tr.getStackInSlot(output_side, i)
                if item_in_outchest and item_in_outchest.name == saved_orb_name then
                    selected_slot = i
                    break
                end
            end

            if selected_slot then
                if tr.getStackInSlot(altar_side, 1) == nil then
                    tr.transferItem(output_side, altar_side, 1, selected_slot, 1)
                    saved_orb_name = nil
                end
            else
                saved_orb_name = nil
            end
        end
    end
end

-------------------- SUPPORTED FUNCTION -----------------------

function transfer_item(in_side, out_side, item_cnt, in_slot)
    local out_chest_size = tr.getInventorySize(out_side)
    local item_in_inchest = tr.getStackInSlot(in_side, in_slot)
    local selected_slot = nil

    -- find slot in output chest
    for i = 1, out_chest_size do
        local item_in_outchest = tr.getStackInSlot(out_side, i)
        if item_in_outchest == nil then
            if not selected_slot then
                selected_slot = i
            end
        elseif item_in_outchest.name == item_in_inchest.name and
               item_in_outchest.maxSize - item_in_outchest.size > 0 then
            selected_slot = i
            break
        end     
    end
    
    if (selected_slot) then
        tr.transferItem(in_side, out_side, item_cnt, in_slot, selected_slot)
    end
end

function get_first_item(side, filter)
    local inv_size = tr.getInventorySize(side)

    for i = 1, inv_size do
        item = tr.getStackInSlot(side, i)
        if item then
            if not filter or filter[item.name .. "":"" .. math.floor(item.damage)] then
                return i, item.name .. "":"" .. math.floor(item.damage)
            end
        end
    end
end

function init()
    tr = link_component(""transposer"")

    if tr == nil then
        errorExit(""Transposer not found"")
        return
    end

    if altar_side == nil then
        altar_side = detect_named_side(altar_name)
        if altar_side == nil then
            errorExit(""Altar: "", altar_name, "" not found or not located next to the Transposer"")
            return
        end
    end

    if input_side == nil then
        input_side = detect_named_side(input_name)
        if input_side == nil then
            errorExit(""Input: "", input_name, "" not found or not located next to the Transposer"")
            return
        end
    end

    if output_side == nil then
        output_side = detect_named_side(output_name)
        if output_side == nil then
            errorExit(""Output: "", output_name, "" not found or not located next to the Transposer"")
            return
        end
    end

    print(""altar_side"", altar_side)
    print(""input_side"", input_side)
    print(""output_side"", output_side)
end

function link_component(comp_name)
    components = component.list(comp_name)
    ret_comp = nil
    for addr, name in pairs(components) do
        if ret_comp == nil then
            ret_comp = component.proxy(addr)
            print(""Link component "" .. name .. "" to address "" .. ret_comp.address)
        else
            print(""Warning: More then one component "" .. name .. "" found. Used: "" .. ret_comp.address)
        end
    end
    return ret_comp
end

function detect_named_side(name)
    for i = 0,5 do
        local loc_name = tr.getInventoryName(i)
        if loc_name == name then
            return i
        end
    end
end

-------------------- GUI FUNCTION -----------------------

function clear_screen()
    local x, y = gpu.getResolution()
    gpu.fill(1, 1, x, y, "" "")
end

function update_gui()
    local fluid = tr.getFluidInTank(altar_side)
    if fluid and fluid[1] and fluid[1].name == ""lifeessence"" then
        gpu.set(1, 2, math.floor(fluid[1].amount) .. ""/"" .. math.floor(fluid[1].capacity) .. ""          "")
    end
end

function init_gui()
    gpu.setResolution(14, 2)
    clear_screen()
    gpu.set(1, 1, ""Altar Essense:"")
    update_gui()
end

main()"
dUHgdaiu,Untitled,Josif_tepe,C++,Sunday 21st of April 2024 02:23:14 AM CDT,"#include <iostream>
#include <vector>
using namespace std;

int main() {
    int n;
    cin >> n;
    vector<int> v(n);
    vector<int> cnt(105, 0);
    for(int i = 0; i < n; i++) {
        cin >> v[i];
        cnt[v[i]]++;
    }
    
    for(int i = 0; i <= 100; i++) {
        for(int j = 0; j < cnt[i]; j++) {
            cout << i << "" "";
        }
    }
    return 0;
}
"
AAP0XdcK,HugeInteger,excellent940707,C++,Sunday 21st of April 2024 01:33:38 AM CDT,"#include<cstring>
#include<iostream>
#include""HugeInteger.h""

using namespace std;



HugeInteger::HugeInteger(int x):negative(x<0){
    memset(num, 0, sizeof(num));
    int idx=0;
    x = abs(x);
    while(x){
        num[idx++]=x%10;
        x/=10;
    }
}



const HugeInteger HugeInteger::operator-() const{
    if(this==nullptr) return *this;
    HugeInteger tmp;
    tmp = *this;
    tmp.negative = !negative;
    return tmp;
}



const HugeInteger HugeInteger::operator+(const HugeInteger& x)const{
    if(negative && x.negative) return -((-*this)+(-x));
    if(x.negative) return (*this-(-x));
    if(negative)return x - (-*this);
    HugeInteger tmp(0);
    for(int i=0;i<40;++i){
        tmp.num[i]+=num[i]+x.num[i];
        tmp.num[i+1]+=tmp.num[i]/10;
        tmp.num[i]%=10;
    }
    return tmp;
}
const HugeInteger HugeInteger::operator-(const HugeInteger& x)const{
    if(negative && x.negative) return (-x) - (-*this);
    if(negative) return -((-*this)+x);
    if(x.negative) return *this + (-x);

    if(*this>x) return sub(x);
    else return -x.sub(*this);

}



bool HugeInteger::operator==(const HugeInteger& x)const{
    if(negative != x.negative)return 0;
    for(int i=0;i<40;++i)if(num[i]!=x.num[i])return 0;
    return 1;
}
bool HugeInteger::operator!=(const HugeInteger& x)const{
    return !(*this==x);
}
bool HugeInteger::operator>(const HugeInteger& x)const{
    if(negative && x.negative) return (-*this)<(-x);
    if(negative) return 0;
    if(x.negative) return 1;

    for(int i=39;i>=0;--i){
        if(num[i]!=x.num[i])return num[i]>x.num[i];
    }

    return 0;
}
bool HugeInteger::operator<(const HugeInteger& x)const{
    return x>*this;
}
bool HugeInteger::operator<=(const HugeInteger& x)const{
    return !(*this>x);
}
bool HugeInteger::operator>=(const HugeInteger& x)const{
    return !(*this<x);
}



const HugeInteger HugeInteger::sub(const HugeInteger& x) const{
    if(negative|| x.negative ||*this<x) return -1;
    HugeInteger tmp(0);
    for(int i=0; i<40;++i){
        tmp.num[i] += num[i]-x.num[i];
        if(tmp.num[i]<0){
            tmp.num[i]+=10;
            --tmp.num[i+1];
        }
    }
    return tmp;
}



bool HugeInteger::isZero() const{
    for(int i=39;i>=0;--i)if(num[i])return 0;
    return 1;
}
int main(){
    HugeInteger a(101),b(10001);

    cout<<""a+b: ""<<a+b<<'\n';
    cout<<""a-b: ""<<a-b<<'\n';

    cout<<""a==b: ""<<(a==b)<<'\n';
    cout<<""a!=b: ""<<(a!=b)<<'\n';
    cout<<""a>b: ""<<(a>b)<<'\n';
    cout<<""a<b: ""<<(a<b)<<'\n';
    cout<<""a>=b: ""<<(a>=b)<<'\n';
    cout<<""a<=b: ""<<(a<=b)<<'\n';
    return 0;
}"
U2AGBau3,News April20 24,Newscaster_Ned,Email,Saturday 20th of April 2024 11:57:57 PM CDT,".‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚ÄéT‚Äée‚Äés‚Äét‚Äé ‚Äé1‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé
.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚ÄéT‚Äée‚Äés‚Äét‚Äé ‚Äé2‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé
.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚ÄéT‚Äée‚Äés‚Äét‚Äé ‚Äé3‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé
.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé ‚ÄéT‚Äée‚Äés‚Äét‚Äé ‚Äéc‚Äéo‚Äém‚Äép‚Äél‚Äée‚Äét‚Äée‚Äé

Âçê‚ÄéÂçê‚ÄéÂçê‚Äé ‚ÄéH‚Äéa‚Äép‚Äép‚Äéy‚Äé ‚Äé4‚Äé/‚Äé2‚Äé0‚Äé!‚Äé ‚ÄéÂçê‚ÄéÂçê‚ÄéÂçê‚Äé

H‚Äéo‚Äéw‚Äéi‚Äée‚Äé ‚ÄéS‚Äéc‚Äéh‚Äéw‚Äéa‚Äéb‚Äé,‚Äé ‚ÄéS‚Äét‚Äéa‚Äér‚Äé ‚Äéo‚Äéf‚Äé ‚ÄéE‚ÄéS‚ÄéP‚ÄéN‚Äé ‚ÄéS‚Äép‚Äéo‚Äér‚Äét‚Äés‚Äé ‚ÄéT‚Äér‚Äéi‚Äév‚Äéi‚Äéa‚Äé ‚ÄéS‚Äét‚Äéa‚Äér‚Äé ‚Äé'‚ÄéS‚Äét‚Äéu‚Äém‚Äép‚Äé ‚Äét‚Äéh‚Äée‚Äé ‚ÄéS‚Äéc‚Äéh‚Äéw‚Äéa‚Äéb‚Äé,‚Äé'‚Äé ‚ÄéD‚Äée‚Äéa‚Äéd‚Äé ‚Äéa‚Äét‚Äé ‚Äé6‚Äé
F‚Äéo‚Äér‚Äém‚Äée‚Äér‚Äé ‚ÄéB‚Äéu‚Äéc‚Äék‚Äée‚Äéy‚Äée‚Äé ‚ÄéC‚Äéa‚Äér‚Äéd‚Äéa‚Äél‚Äée‚Äé ‚ÄéJ‚Äéo‚Äén‚Äée‚Äés‚Äé ‚ÄéB‚Äéa‚Äés‚Äéh‚Äée‚Äés‚Äé ‚ÄéA‚Äén‚Äét‚Äéi‚Äé-‚ÄéI‚Äés‚Äér‚Äéa‚Äée‚Äél‚Äé ‚ÄéP‚Äér‚Äéo‚Äét‚Äée‚Äés‚Äét‚Äée‚Äér‚Äés‚Äé:‚Äé ‚Äé'‚ÄéT‚Äéh‚Äéi‚Äés‚Äé ‚ÄéI‚Äés‚Äén‚Äé'‚Äét‚Äé ‚ÄéT‚ÄéH‚ÄéE‚Äé
'‚ÄéA‚Äé ‚ÄéM‚Äéo‚Äér‚Äéa‚Äél‚Äé ‚ÄéL‚Äéo‚Äéw‚Äé'‚Äé:‚Äé ‚ÄéN‚Äée‚Äét‚Äéa‚Äén‚Äéy‚Äéa‚Äéh‚Äéu‚Äé ‚ÄéS‚Äél‚Äéa‚Äém‚Äés‚Äé ‚ÄéB‚Äéi‚Äéd‚Äée‚Äén‚Äé ‚ÄéD‚Äée‚Äéc‚Äéi‚Äés‚Äéi‚Äéo‚Äén‚Äé ‚Äét‚Äéo‚Äé ‚ÄéS‚Äéa‚Äén‚Äéc‚Äét‚Äéi‚Äéo‚Äén‚Äé ‚ÄéI‚ÄéD‚ÄéF‚Äé ‚ÄéU‚Äén‚Äéi‚Äét‚Äé
F‚Äél‚Äéo‚Äér‚Äéi‚Äéd‚Äéa‚Äé ‚ÄéR‚Äée‚Äép‚Äé ‚Äét‚Äéo‚Äé ‚ÄéI‚Äén‚Äét‚Äér‚Äéo‚Äéd‚Äéu‚Äéc‚Äée‚Äé ‚ÄéB‚Äéi‚Äél‚Äél‚Äé ‚ÄéP‚Äér‚Äéo‚Äéh‚Äéi‚Äéb‚Äéi‚Äét‚Äéi‚Äén‚Äég‚Äé ‚Äé'‚ÄéF‚Äéo‚Äér‚Äée‚Äéi‚Äég‚Äén‚Äé ‚ÄéF‚Äél‚Äéa‚Äég‚Äés‚Äé'‚Äé ‚Äéi‚Äén‚Äé ‚ÄéH‚Äéo‚Äéu‚Äés‚Äée‚Äé
G‚Äée‚Äét‚Äé ‚ÄéA‚Äél‚Äél‚Äé ‚ÄéB‚Äér‚Äée‚Äéi‚Äét‚Äéb‚Äéa‚Äér‚Äét‚Äé ‚ÄéN‚Äée‚Äéw‚Äés‚Äé ‚ÄéH‚Äée‚Äér‚Äée‚Äé
H‚Äéo‚Äém‚Äée‚ÄéP‚Äéa‚Äég‚Äée‚Äé
A‚Äém‚Äée‚Äér‚Äéi‚Äéc‚Äéa‚Äé ‚ÄéL‚Äéa‚Äés‚Äét‚Äé ‚ÄéU‚Äén‚Äéi‚Äép‚Äéa‚Äér‚Äét‚Äéy‚Äé

‚Äò‚ÄéU‚Äék‚Äér‚Äéa‚Äéi‚Äén‚Äéi‚Äéa‚Äén‚Äé-‚ÄéR‚Äéu‚Äés‚Äés‚Äéi‚Äéa‚Äén‚Äé ‚ÄéB‚Äéo‚Äér‚Äéd‚Äée‚Äér‚Äé ‚ÄéI‚Äés‚Äé ‚ÄéO‚Äéu‚Äér‚Äé ‚ÄéB‚Äéo‚Äér‚Äéd‚Äée‚Äér‚Äé‚Äô‚Äé

D‚Äée‚Äém‚Äé ‚ÄéR‚Äée‚Äép‚Äé.‚Äé ‚ÄéD‚Äée‚Äéf‚Äée‚Äén‚Äéd‚Äés‚Äé ‚ÄéF‚Äéu‚Äén‚Äéd‚Äéi‚Äén‚Äég‚Äé ‚ÄéA‚Äén‚Äéo‚Äét‚Äéh‚Äée‚Äér‚Äé ‚Äé$‚Äé6‚Äé0‚Äé ‚ÄéB‚Äéi‚Äél‚Äél‚Äéi‚Äéo‚Äén‚Äé ‚Äét‚Äéo‚Äé ‚ÄéU‚Äék‚Äér‚Äéa‚Äéi‚Äén‚Äée‚Äé
R‚Äée‚Äép‚Äé.‚Äé ‚ÄéG‚Äée‚Äér‚Äér‚Äéy‚Äé ‚ÄéC‚Äéo‚Äén‚Äén‚Äéo‚Äél‚Äél‚Äéy‚Äé ‚Äé(‚ÄéD‚Äé-‚ÄéV‚ÄéA‚Äé)‚Äé ‚Äés‚Äép‚Äée‚Äéa‚Äék‚Äés‚Äé ‚Äéd‚Äéu‚Äér‚Äéi‚Äén‚Äég‚Äé ‚Äéa‚Äé ‚ÄéH‚Äéo‚Äéu‚Äés‚Äée‚Äé ‚ÄéC‚Äéo‚Äém‚Äém‚Äéi‚Äét‚Äét‚Äée‚Äée‚Äé ‚Äéo‚Äén‚Äé ‚ÄéO‚Äév‚Äée‚Äér‚Äés‚Äéi‚Äég‚Äéh‚Äét‚Äé ‚Äéa‚Äén‚Äéd‚Äé ‚ÄéR‚Äée‚Äéf‚Äéo‚Äér‚Äém‚Äé ‚Äéh‚Äée‚Äéa‚Äér‚Äéi‚Äén‚Äég‚Äé
A‚Äém‚Äée‚Äér‚Äéi‚Äéc‚Äéa‚Äé‚Äô‚Äés‚Äé ‚Äéb‚Äéo‚Äér‚Äéd‚Äée‚Äér‚Äés‚Äé ‚Äée‚Äéx‚Äét‚Äée‚Äén‚Äéd‚Äé ‚Äéa‚Äéc‚Äér‚Äéo‚Äés‚Äés‚Äé ‚Äét‚Äéh‚Äée‚Äé ‚ÄéA‚Äét‚Äél‚Äéa‚Äén‚Äét‚Äéi‚Äéc‚Äé ‚ÄéO‚Äéc‚Äée‚Äéa‚Äén‚Äé ‚Äéa‚Äén‚Äéd‚Äé ‚Äéd‚Äée‚Äée‚Äép‚Äé ‚Äéi‚Äén‚Äét‚Äéo‚Äé ‚ÄéE‚Äéa‚Äés‚Äét‚Äée‚Äér‚Äén‚Äé ‚ÄéE‚Äéu‚Äér‚Äéo‚Äép‚Äée‚Äé,‚Äé ‚Äég‚Äée‚Äéo‚Äég‚Äér‚Äéa‚Äép‚Äéh‚Äéi‚Äéc‚Äéa‚Äél‚Äél‚Äéy‚Äé ‚Äéc‚Äéh‚Äéa‚Äél‚Äél‚Äée‚Äén‚Äég‚Äée‚Äéd‚Äé ‚ÄéR‚Äée‚Äép‚Äé.‚Äé ‚ÄéG‚Äée‚Äér‚Äéa‚Äél‚Äéd‚Äé ‚ÄéC‚Äéo‚Äén‚Äén‚Äéo‚Äél‚Äél‚Äéy‚Äé ‚Äé(‚ÄéD‚Äé-‚ÄéV‚ÄéA‚Äé)‚Äé ‚Äéa‚Äés‚Äés‚Äée‚Äér‚Äét‚Äée‚Äéd‚Äé ‚Äéf‚Äér‚Äéo‚Äém‚Äé ‚Äét‚Äéh‚Äée‚Äé ‚ÄéH‚Äéo‚Äéu‚Äés‚Äée‚Äé ‚Äéf‚Äél‚Äéo‚Äéo‚Äér‚Äé ‚ÄéS‚Äéa‚Äét‚Äéu‚Äér‚Äéd‚Äéa‚Äéy‚Äé ‚Äéb‚Äée‚Äéf‚Äéo‚Äér‚Äée‚Äé ‚Äét‚Äéh‚Äée‚Äé ‚ÄéH‚Äéo‚Äéu‚Äés‚Äée‚Äé ‚Äép‚Äéa‚Äés‚Äés‚Äée‚Äéd‚Äé ‚Äéa‚Äé ‚Äé$‚Äé6‚Äé1‚Äé ‚Äéb‚Äéi‚Äél‚Äél‚Äéi‚Äéo‚Äén‚Äé ‚Äéa‚Äéi‚Äéd‚Äé ‚Äéb‚Äéi‚Äél‚Äél‚Äé ‚Äét‚Äéo‚Äé ‚ÄéU‚Äék‚Äér‚Äéa‚Äéi‚Äén‚Äée‚Äé.‚Äé

E‚Äéx‚Äéc‚Äél‚Äéu‚Äés‚Äéi‚Äév‚Äée‚Äé ‚Äé‚Äî‚Äé ‚ÄéL‚Äée‚Äée‚Äé ‚ÄéR‚Äéi‚Äéz‚Äéu‚Äét‚Äét‚Äéo‚Äé:‚Äé ‚ÄéM‚Äéi‚Äék‚Äée‚Äé ‚ÄéJ‚Äéo‚Äéh‚Äén‚Äés‚Äéo‚Äén‚Äé‚Äô‚Äés‚Äé ‚ÄéB‚Äée‚Äét‚Äér‚Äéa‚Äéy‚Äéa‚Äél‚Äé ‚ÄéP‚Äéu‚Äét‚Äés‚Äé ‚ÄéA‚Äém‚Äée‚Äér‚Äéi‚Äéc‚Äéa‚Äé ‚Äéo‚Äén‚Äé ‚ÄéC‚Äéo‚Äél‚Äél‚Äéi‚Äés‚Äéi‚Äéo‚Äén‚Äé ‚ÄéC‚Äéo‚Äéu‚Äér‚Äés‚Äée‚Äé ‚Äéw‚Äéi‚Äét‚Äéh‚Äé ‚ÄéN‚Äéu‚Äéc‚Äél‚Äé
E‚Äéx‚Äéc‚Äél‚Äéu‚Äés‚Äéi‚Äév‚Äée‚Äé-‚ÄéL‚Äée‚Äée‚Äé ‚ÄéR‚Äéi‚Äéz‚Äéu‚Äét‚Äét‚Äéo‚Äé:‚Äé ‚ÄéM‚Äéi‚Äék‚Äée‚Äé ‚ÄéJ‚Äéo‚Äéh‚Äén‚Äés‚Äéo‚Äén‚Äé‚Äô‚Äés‚Äé ‚ÄéB‚Äée‚Äét‚Äér‚Äéa‚Äéy‚Äéa‚Äél‚Äé ‚ÄéP‚Äéu‚Äét‚Äés‚Äé ‚ÄéU‚Äé.‚ÄéS‚Äé.‚Äé ‚Äéo‚Äén‚Äé ‚ÄéP‚Äée‚Äér‚Äéi‚Äél‚Äéo‚Äéu‚Äés‚Äé ‚ÄéC‚Äéo‚Äéu‚Äér‚Äés‚Äée‚Äé
6‚Äé,‚Äé0‚Äé1‚Äé0‚Äé
M‚Äée‚Äég‚Äéa‚Äén‚Äé ‚ÄéR‚Äéa‚Äép‚Äéi‚Äén‚Äéo‚Äée‚Äé ‚Äéa‚Äén‚Äéd‚Äé ‚ÄéP‚Äéa‚Äér‚Äét‚Äén‚Äée‚Äér‚Äé ‚ÄéS‚Äéu‚Äée‚Äé ‚ÄéB‚Äéi‚Äér‚Äéd‚Äé ‚Äét‚Äéo‚Äé ‚ÄéC‚Äér‚Äée‚Äéa‚Äét‚Äée‚Äé ‚ÄéT‚ÄéV‚Äé ‚ÄéS‚Äéh‚Äéo‚Äéw‚Äé ‚ÄéA‚Äéb‚Äéo‚Äéu‚Äét‚Äé ‚ÄéL‚Äée‚Äés‚Äéb‚Äéi‚Äéa‚Äén‚Äé ‚ÄéS‚Äéo‚Äéc‚Äéc‚Äée‚Äér‚Äé ‚ÄéP‚Äél‚Äéa‚Äéy‚Äée‚Äér‚Äés‚Äé
M‚Äée‚Äég‚Äéa‚Äén‚Äé ‚ÄéR‚Äéa‚Äép‚Äéi‚Äén‚Äéo‚Äée‚Äé ‚Äéa‚Äén‚Äéd‚Äé ‚ÄéP‚Äéa‚Äér‚Äét‚Äén‚Äée‚Äér‚Äé ‚Äét‚Äéo‚Äé ‚ÄéC‚Äér‚Äée‚Äéa‚Äét‚Äée‚Äé ‚ÄéT‚ÄéV‚Äé ‚ÄéS‚Äéh‚Äéo‚Äéw‚Äé ‚ÄéA‚Äéb‚Äéo‚Äéu‚Äét‚Äé ‚ÄéL‚Äée‚Äés‚Äéb‚Äéi‚Äéa‚Äén‚Äé ‚ÄéS‚Äéo‚Äéc‚Äéc‚Äée‚Äér‚Äé ‚ÄéP‚Äél‚Äéa‚Äéy‚Äée‚Äér‚Äés‚Äé
5‚Äé8‚Äé2‚Äé
D‚Äée‚Äém‚Äéo‚Äéc‚Äér‚Äéa‚Äét‚Äés‚Äé ‚ÄéW‚Äéa‚Äév‚Äée‚Äé ‚ÄéU‚Äék‚Äér‚Äéa‚Äéi‚Äén‚Äée‚Äé ‚ÄéF‚Äél‚Äéa‚Äég‚Äés‚Äé ‚Äéo‚Äén‚Äé ‚ÄéH‚Äéo‚Äéu‚Äés‚Äée‚Äé ‚ÄéF‚Äél‚Äéo‚Äéo‚Äér‚Äé ‚Äéa‚Äés‚Äé ‚Äé$‚Äé6‚Äé1‚Äé ‚ÄéB‚Äéi‚Äél‚Äél‚Äéi‚Äéo‚Äén‚Äé ‚ÄéA‚Äéi‚Äéd‚Äé ‚ÄéB‚Äéi‚Äél‚Äél‚Äé ‚ÄéP‚Äéa‚Äés‚Äés‚Äée‚Äés‚Äé
D‚Äée‚Äém‚Äéo‚Äéc‚Äér‚Äéa‚Äét‚Äés‚Äé ‚ÄéW‚Äéa‚Äév‚Äée‚Äé ‚ÄéU‚Äék‚Äér‚Äéa‚Äéi‚Äén‚Äée‚Äé ‚ÄéF‚Äél‚Äéa‚Äég‚Äés‚Äé ‚Äéo‚Äén‚Äé ‚ÄéH‚Äéo‚Äéu‚Äés‚Äée‚Äé ‚ÄéF‚Äél‚Äéo‚Äéo‚Äér‚Äé ‚Äéa‚Äés‚Äé ‚Äé$‚Äé6‚Äé1‚Äé ‚ÄéB‚Äéi‚Äél‚Äél‚Äéi‚Äéo‚Äén‚Äé ‚ÄéA‚Äéi‚Äéd‚Äé ‚ÄéB‚Äéi‚Äél‚Äél‚Äé ‚ÄéP‚Äéa‚Äés‚Äés‚Äée‚Äés‚Äé
9‚Äé1‚Äé8‚Äé
W‚Äéh‚Äéo‚Äé ‚ÄéA‚Äér‚Äée‚Äé ‚Äét‚Äéh‚Äée‚Äé ‚Äé1‚Äé2‚Äé ‚ÄéJ‚Äéu‚Äér‚Äéo‚Äér‚Äés‚Äé ‚ÄéS‚Äée‚Äéa‚Äét‚Äée‚Äéd‚Äé ‚Äéi‚Äén‚Äé ‚Äét‚Äéh‚Äée‚Äé ‚ÄéT‚Äér‚Äéu‚Äém‚Äép‚Äé ‚ÄéH‚Äéu‚Äés‚Äéh‚Äé ‚ÄéM‚Äéo‚Äén‚Äée‚Äéy‚Äé ‚ÄéT‚Äér‚Äéi‚Äéa‚Äél‚Äé?‚Äé
W‚Äéh‚Äéo‚Äé ‚ÄéA‚Äér‚Äée‚Äé ‚Äét‚Äéh‚Äée‚Äé ‚Äé1‚Äé2‚Äé ‚ÄéJ‚Äéu‚Äér‚Äéo‚Äér‚Äés‚Äé ‚ÄéS‚Äée‚Äéa‚Äét‚Äée‚Äéd‚Äé ‚Äéi‚Äén‚Äé ‚Äét‚Äéh‚Äée‚Äé ‚ÄéT‚Äér‚Äéu‚Äém‚Äép‚Äé ‚ÄéH‚Äéu‚Äés‚Äéh‚Äé ‚ÄéM‚Äéo‚Äén‚Äée‚Äéy‚Äé ‚ÄéT‚Äér‚Äéi‚Äéa‚Äél‚Äé?‚Äé
5‚Äé,‚Äé8‚Äé1‚Äé0‚Äé
‚Äò‚ÄéA‚Äé ‚ÄéM‚Äéo‚Äér‚Äéa‚Äél‚Äé ‚ÄéL‚Äéo‚Äéw‚Äé‚Äô‚Äé:‚Äé ‚ÄéN‚Äée‚Äét‚Äéa‚Äén‚Äéy‚Äéa‚Äéh‚Äéu‚Äé ‚ÄéS‚Äél‚Äéa‚Äém‚Äés‚Äé ‚ÄéB‚Äéi‚Äéd‚Äée‚Äén‚Äé ‚ÄéD‚Äée‚Äéc‚Äéi‚Äés‚Äéi‚Äéo‚Äén‚Äé ‚Äét‚Äéo‚Äé ‚ÄéS‚Äéa‚Äén‚Äéc‚Äét‚Äéi‚Äéo‚Äén‚Äé ‚ÄéR‚Äée‚Äél‚Äéi‚Äég‚Äéi‚Äéo‚Äéu‚Äés‚Äé ‚ÄéI‚ÄéD‚ÄéF‚Äé ‚ÄéU‚Äén‚Äéi‚Äét‚Äé
'‚ÄéA‚Äé ‚ÄéM‚Äéo‚Äér‚Äéa‚Äél‚Äé ‚ÄéL‚Äéo‚Äéw‚Äé'‚Äé:‚Äé ‚ÄéN‚Äée‚Äét‚Äéa‚Äén‚Äéy‚Äéa‚Äéh‚Äéu‚Äé ‚ÄéS‚Äél‚Äéa‚Äém‚Äés‚Äé ‚ÄéB‚Äéi‚Äéd‚Äée‚Äén‚Äé ‚ÄéD‚Äée‚Äéc‚Äéi‚Äés‚Äéi‚Äéo‚Äén‚Äé ‚Äét‚Äéo‚Äé ‚ÄéS‚Äéa‚Äén‚Äéc‚Äét‚Äéi‚Äéo‚Äén‚Äé ‚ÄéI‚ÄéD‚ÄéF‚Äé ‚ÄéU‚Äén‚Äéi‚Äét‚Äé
W‚Äéa‚Äét‚Äéc‚Äéh‚Äé:‚Äé ‚ÄéM‚Äéa‚Äén‚Äé ‚ÄéS‚Äée‚Äét‚Äés‚Äé ‚ÄéS‚Äée‚Äél‚Äéf‚Äé ‚Äéo‚Äén‚Äé ‚ÄéF‚Äéi‚Äér‚Äée‚Äé ‚Äéi‚Äén‚Äé ‚ÄéF‚Äér‚Äéo‚Äén‚Äét‚Äé ‚Äéo‚Äéf‚Äé ‚ÄéT‚Äér‚Äéu‚Äém‚Äép‚Äé ‚ÄéC‚Äéo‚Äéu‚Äér‚Äét‚Äéh‚Äéo‚Äéu‚Äés‚Äée‚Äé ‚ÄéL‚Äéi‚Äév‚Äée‚Äé ‚Äéo‚Äén‚Äé ‚ÄéC‚ÄéN‚ÄéN‚Äé
M‚Äéa‚Äén‚Äé ‚ÄéS‚Äée‚Äét‚Äés‚Äé ‚ÄéS‚Äée‚Äél‚Äéf‚Äé ‚Äéo‚Äén‚Äé ‚ÄéF‚Äéi‚Äér‚Äée‚Äé ‚Äéi‚Äén‚Äé ‚ÄéF‚Äér‚Äéo‚Äén‚Äét‚Äé ‚Äéo‚Äéf‚Äé ‚ÄéN‚ÄéY‚ÄéC‚Äé ‚ÄéC‚Äéo‚Äéu‚Äér‚Äét‚Äéh‚Äéo‚Äéu‚Äés‚Äée‚Äé ‚ÄéL‚Äéi‚Äév‚Äée‚Äé ‚Äéo‚Äén‚Äé ‚ÄéC‚ÄéN‚ÄéN‚Äé
H‚Äéi‚Äél‚Äél‚Äéa‚Äér‚Äéy‚Äé ‚ÄéC‚Äél‚Äéi‚Äén‚Äét‚Äéo‚Äén‚Äé:‚Äé ‚Äé‚Äò‚ÄéW‚Äéh‚Äéa‚Äét‚Äé ‚ÄéT‚Äér‚Äéu‚Äém‚Äép‚Äé ‚ÄéR‚Äée‚Äéa‚Äél‚Äél‚Äéy‚Äé ‚ÄéW‚Äéa‚Äén‚Äét‚Äés‚Äé‚Äô‚Äé ‚ÄéI‚Äés‚Äé ‚Äét‚Äéo‚Äé ‚Äé‚Äò‚ÄéK‚Äéi‚Äél‚Äél‚Äé‚Äô‚Äé ‚Äéa‚Äén‚Äéd‚Äé ‚Äé‚Äò‚ÄéI‚Äém‚Äép‚Äér‚Äéi‚Äés‚Äéo‚Äén‚Äé
H‚Äéi‚Äél‚Äél‚Äéa‚Äér‚Äéy‚Äé ‚ÄéC‚Äél‚Äéi‚Äén‚Äét‚Äéo‚Äén‚Äé ‚ÄéS‚Äéu‚Äég‚Äég‚Äée‚Äés‚Äét‚Äés‚Äé ‚ÄéT‚Äér‚Äéu‚Äém‚Äép‚Äé ‚ÄéW‚Äéi‚Äél‚Äél‚Äé ‚ÄéG‚Äéo‚Äé ‚Äét‚Äéo‚Äé ‚ÄéV‚Äéi‚Äéo‚Äél‚Äée‚Äén‚Äét‚Äé ‚ÄéE‚Äéx‚Äét‚Äér‚Äée‚Äém‚Äée‚Äés‚Äé ‚Äéi‚Äéf‚Äé ‚ÄéR‚Äée‚Äée‚Äél‚Äée‚Äéc‚Äét‚Äée‚Äéd‚Äé
4‚Äé,‚Äé2‚Äé0‚Äé9‚Äé
M‚Äéi‚Äéc‚Äéh‚Äéa‚Äée‚Äél‚Äé ‚ÄéA‚Äév‚Äée‚Äén‚Äéa‚Äét‚Äét‚Äéi‚Äé:‚Äé ‚ÄéT‚Äér‚Äéu‚Äém‚Äép‚Äé‚Äô‚Äés‚Äé ‚ÄéL‚Äée‚Äég‚Äéa‚Äél‚Äé ‚ÄéT‚Äée‚Äéa‚Äém‚Äé ‚Äé‚Äò‚ÄéC‚Äéo‚Äén‚Äét‚Äéa‚Äéc‚Äét‚Äée‚Äéd‚Äé‚Äô‚Äé ‚ÄéH‚Äéi‚Äém‚Äé,‚Äé ‚Äé‚Äò‚ÄéM‚Äéo‚Äér‚Äée‚Äé ‚Äét‚Äéh‚Äéa‚Äén‚Äé ‚ÄéH‚Äéa‚Äép‚Äép‚Äéy‚Äé ‚Äét‚Äéo‚Äé ‚ÄéT‚Äé
M‚Äéi‚Äéc‚Äéh‚Äéa‚Äée‚Äél‚Äé ‚ÄéA‚Äév‚Äée‚Äén‚Äéa‚Äét‚Äét‚Äéi‚Äé ‚ÄéS‚Äéa‚Äéy‚Äés‚Äé ‚ÄéH‚Äée‚Äé ‚Äéi‚Äés‚Äé ‚Äé'‚ÄéM‚Äéo‚Äér‚Äée‚Äé ‚Äét‚Äéh‚Äéa‚Äén‚Äé ‚ÄéH‚Äéa‚Äép‚Äép‚Äéy‚Äé ‚Äét‚Äéo‚Äé ‚ÄéT‚Äée‚Äés‚Äét‚Äéi‚Äéf‚Äéy‚Äé'‚Äé ‚Äéo‚Äén‚Äé ‚ÄéT‚Äér‚Äéu‚Äém‚Äép‚Äé'‚Äés‚Äé ‚ÄéB‚Äée‚Äéh‚Äéa‚Äél‚Äéf‚Äé
B‚Äée‚Äét‚Äér‚Äéa‚Äéy‚Äéa‚Äél‚Äé ‚ÄéC‚Äéo‚Äém‚Äép‚Äél‚Äée‚Äét‚Äée‚Äé:‚Äé ‚ÄéM‚Äéi‚Äék‚Äée‚Äé ‚ÄéJ‚Äéo‚Äéh‚Äén‚Äés‚Äéo‚Äén‚Äé ‚ÄéP‚Äéa‚Äés‚Äés‚Äée‚Äés‚Äé ‚Äé$‚Äé6‚Äé1‚Äé ‚ÄéB‚Äéi‚Äél‚Äél‚Äéi‚Äéo‚Äén‚Äé ‚ÄéU‚Äék‚Äér‚Äéa‚Äéi‚Äén‚Äée‚Äé ‚ÄéA‚Äéi‚Äéd‚Äé,‚Äé ‚ÄéV‚Äéi‚Äéo‚Äél‚Äéa‚Äét‚Äée‚Äés‚Äé ‚ÄéH‚Äéa‚Äés‚Äét‚Äée‚Äér‚Äét‚Äé ‚ÄéR‚Äéu‚Äél‚Äée‚Äé ‚ÄéA‚Äég‚Äéa‚Äéi‚Äén‚Äé
B‚Äée‚Äét‚Äér‚Äéa‚Äéy‚Äéa‚Äél‚Äé ‚ÄéC‚Äéo‚Äém‚Äép‚Äél‚Äée‚Äét‚Äée‚Äé:‚Äé ‚ÄéM‚Äéi‚Äék‚Äée‚Äé ‚ÄéJ‚Äéo‚Äéh‚Äén‚Äés‚Äéo‚Äén‚Äé ‚ÄéP‚Äéa‚Äés‚Äés‚Äée‚Äés‚Äé ‚Äé$‚Äé6‚Äé1‚Äé ‚ÄéB‚Äéi‚Äél‚Äél‚Äéi‚Äéo‚Äén‚Äé ‚ÄéU‚Äék‚Äér‚Äéa‚Äéi‚Äén‚Äée‚Äé ‚ÄéA‚Äéi‚Äéd‚Äé
2‚Äé,‚Äé7‚Äé0‚Äé0‚Äé
D‚Äée‚Äém‚Äéo‚Äéc‚Äér‚Äéa‚Äét‚Äé ‚ÄéG‚Äée‚Äér‚Äér‚Äéy‚Äé ‚ÄéC‚Äéo‚Äén‚Äén‚Äéo‚Äél‚Äél‚Äéy‚Äé:‚Äé ‚Äé‚Äò‚ÄéU‚Äék‚Äér‚Äéa‚Äéi‚Äén‚Äéi‚Äéa‚Äén‚Äé-‚ÄéR‚Äéu‚Äés‚Äés‚Äéi‚Äéa‚Äén‚Äé ‚ÄéB‚Äéo‚Äér‚Äéd‚Äée‚Äér‚Äé ‚ÄéI‚Äés‚Äé ‚ÄéO‚Äéu‚Äér‚Äé ‚ÄéB‚Äéo‚Äér‚Äéd‚Äée‚Äér‚Äé‚Äô‚Äé
D‚Äée‚Äém‚Äéo‚Äéc‚Äér‚Äéa‚Äét‚Äé ‚ÄéG‚Äée‚Äér‚Äér‚Äéy‚Äé ‚ÄéC‚Äéo‚Äén‚Äén‚Äéo‚Äél‚Äél‚Äéy‚Äé:‚Äé ‚Äé'‚ÄéU‚Äék‚Äér‚Äéa‚Äéi‚Äén‚Äéi‚Äéa‚Äén‚Äé-‚ÄéR‚Äéu‚Äés‚Äés‚Äéi‚Äéa‚Äén‚Äé ‚ÄéB‚Äéo‚Äér‚Äéd‚Äée‚Äér‚Äé ‚ÄéI‚Äés‚Äé ‚ÄéO‚Äéu‚Äér‚Äé ‚ÄéB‚Äéo‚Äér‚Äéd‚Äée‚Äér‚Äé'‚Äé

F‚Äéa‚Äéi‚Äér‚Äém‚Äéo‚Äén‚Äét‚Äé:‚Äé ‚ÄéW‚Äéh‚Äéi‚Äét‚Äée‚Äé ‚ÄéM‚Äéa‚Äén‚Äé ‚ÄéD‚Äée‚Äéa‚Äéd‚Äé ‚ÄéA‚Äéf‚Äét‚Äée‚Äér‚Äé ‚ÄéO‚Äél‚Äéd‚Äé ‚ÄéM‚Äéu‚Äéd‚Äés‚Äéh‚Äéa‚Äér‚Äék‚Äé ‚Äéa‚Äén‚Äéd‚Äé ‚ÄéB‚Äéo‚Äén‚Äég‚Äéo‚Äé ‚ÄéB‚Äée‚Äéa‚Äét‚Äée‚Äér‚Äé ‚ÄéS‚Äét‚Äéa‚Äéb‚Äé ‚ÄéT‚Äéh‚Äée‚Äéi‚Äér‚Äé ‚ÄéW‚Äéh‚Äéi‚Äét‚Äée‚Äé ‚ÄéN‚Äée‚Äéi‚Äég‚Äéh‚Äéb‚Äéo‚Äér‚Äé ‚Äét‚Äéo‚Äé ‚ÄéD‚Äée‚Äéa‚Äét‚Äéh‚Äé ‚ÄéD‚Äéu‚Äér‚Äéi‚Äén‚Äég‚Äé ‚ÄéA‚Äét‚Äét‚Äée‚Äém‚Äép‚Äét‚Äée‚Äéd‚Äé ‚ÄéR‚Äéo‚Äéb‚Äéb‚Äée‚Äér‚Äéy‚Äé.‚Äé

N‚Äée‚Äév‚Äée‚Äér‚Äé ‚Äél‚Äéi‚Äév‚Äée‚Äé ‚Äén‚Äée‚Äéx‚Äét‚Äé ‚Äét‚Äéo‚Äé ‚Äéa‚Äén‚Äé ‚Äéi‚Äén‚Äét‚Äée‚Äér‚Äér‚Äéa‚Äéc‚Äéi‚Äéa‚Äél‚Äé ‚Äéc‚Äéo‚Äéu‚Äép‚Äél‚Äée‚Äé!‚Äé


R‚Äéa‚Äél‚Äée‚Äéi‚Äég‚Äéh‚Äé ‚ÄéB‚Äéo‚Äén‚Äéo‚Äéb‚Äéo‚Äé ‚ÄéA‚Äér‚Äér‚Äée‚Äés‚Äét‚Äée‚Äéd‚Äé ‚Äéf‚Äéo‚Äér‚Äé ‚Äé2‚Äé0‚Äé1‚Äé8‚Äé ‚ÄéD‚Äée‚Äéa‚Äét‚Äéh‚Äé ‚Äéo‚Äéf‚Äé ‚ÄéW‚Äéh‚Äéi‚Äét‚Äée‚Äé ‚ÄéM‚Äéa‚Äén‚Äé.‚Äé


G‚Äér‚Äéo‚Äéi‚Äéd‚Äé ‚Äéa‚Äén‚Äéd‚Äé ‚ÄéS‚Äém‚Äéo‚Äék‚Äée‚Äé-‚ÄéJ‚Äéu‚Äém‚Äép‚Äée‚Äér‚Äé ‚ÄéA‚Äér‚Äér‚Äée‚Äés‚Äét‚Äée‚Äéd‚Äé ‚ÄéA‚Äéf‚Äét‚Äée‚Äér‚Äé ‚ÄéK‚Äéi‚Äél‚Äél‚Äéi‚Äén‚Äég‚Äé ‚ÄéF‚Äéa‚Äét‚Äé ‚ÄéW‚Äéh‚Äéi‚Äét‚Äée‚Äé ‚ÄéB‚Äéi‚Äét‚Äéc‚Äéh‚Äé ‚Äéa‚Äén‚Äéd‚Äé ‚ÄéB‚Äéu‚Äér‚Äén‚Äéi‚Äén‚Äég‚Äé ‚ÄéH‚Äée‚Äér‚Äé ‚ÄéB‚Äéo‚Äéd‚Äéy‚Äé.‚Äé


A‚Äép‚Äée‚Äém‚Äéa‚Äén‚Äé ‚ÄéS‚Äél‚Äéi‚Äét‚Äés‚Äé ‚ÄéI‚Äét‚Äéa‚Äél‚Äéi‚Äéa‚Äén‚Äé ‚ÄéM‚Äéa‚Äén‚Äé'‚Äés‚Äé ‚ÄéT‚Äéh‚Äér‚Äéo‚Äéa‚Äét‚Äé ‚Äéi‚Äén‚Äé ‚ÄéY‚Äéo‚Äén‚Äék‚Äée‚Äér‚Äés‚Äé.‚Äé

.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé ‚ÄéW‚Äée‚Äéa‚Äét‚Äéh‚Äée‚Äér‚Äé.‚Äé

T‚Äéo‚Äéd‚Äéa‚Äéy‚Äé
P‚ÄéM‚Äé ‚ÄéT‚Äéh‚Äéu‚Äén‚Äéd‚Äée‚Äér‚Äés‚Äét‚Äéo‚Äér‚Äém‚Äés‚Äé
7‚Äé5‚Äé¬∞‚Äé
/‚Äé5‚Äé2‚Äé¬∞‚Äé
9‚Äé7‚Äé%‚Äé
N‚ÄéN‚ÄéE‚Äé ‚Äé1‚Äé2‚Äé ‚Äém‚Äép‚Äéh‚Äé
S‚Äéa‚Äét‚Äé ‚Äé2‚Äé0‚Äé ‚Äé|‚Äé ‚ÄéD‚Äéa‚Äéy‚Äé
7‚Äé5‚Äé¬∞‚Äé
9‚Äé7‚Äé%‚Äé
N‚ÄéN‚ÄéE‚Äé
1‚Äé2‚Äé
 ‚Äé
m‚Äép‚Äéh‚Äé
C‚Äél‚Äéo‚Äéu‚Äéd‚Äéy‚Äé ‚Äée‚Äéa‚Äér‚Äél‚Äéy‚Äé,‚Äé ‚Äét‚Äéh‚Äée‚Äén‚Äé ‚Äét‚Äéh‚Äéu‚Äén‚Äéd‚Äée‚Äér‚Äés‚Äét‚Äéo‚Äér‚Äém‚Äés‚Äé ‚Äéd‚Äée‚Äév‚Äée‚Äél‚Äéo‚Äép‚Äéi‚Äén‚Äég‚Äé ‚Äét‚Äéh‚Äéi‚Äés‚Äé ‚Äéa‚Äéf‚Äét‚Äée‚Äér‚Äén‚Äéo‚Äéo‚Äén‚Äé.‚Äé ‚ÄéG‚Äéu‚Äés‚Äét‚Äéy‚Äé ‚Äéw‚Äéi‚Äén‚Äéd‚Äés‚Äé ‚Äéa‚Äén‚Äéd‚Äé ‚Äés‚Äém‚Äéa‚Äél‚Äél‚Äé ‚Äéh‚Äéa‚Äéi‚Äél‚Äé ‚Äéa‚Äér‚Äée‚Äé ‚Äép‚Äéo‚Äés‚Äés‚Äéi‚Äéb‚Äél‚Äée‚Äé.‚Äé ‚ÄéH‚Äéi‚Äég‚Äéh‚Äé ‚Äéa‚Äér‚Äéo‚Äéu‚Äén‚Äéd‚Äé ‚Äé7‚Äé5‚ÄéF‚Äé.‚Äé ‚ÄéW‚Äéi‚Äén‚Äéd‚Äés‚Äé ‚ÄéN‚ÄéN‚ÄéE‚Äé ‚Äéa‚Äét‚Äé ‚Äé1‚Äé0‚Äé ‚Äét‚Äéo‚Äé ‚Äé1‚Äé5‚Äé ‚Äém‚Äép‚Äéh‚Äé.‚Äé ‚ÄéC‚Äéh‚Äéa‚Äén‚Äéc‚Äée‚Äé ‚Äéo‚Äéf‚Äé ‚Äér‚Äéa‚Äéi‚Äén‚Äé ‚Äé1‚Äé0‚Äé0‚Äé%‚Äé.‚Äé
 ‚Äé
H‚Äéu‚Äém‚Äéi‚Äéd‚Äéi‚Äét‚Äéy‚Äé
8‚Äé7‚Äé%‚Äé
U‚ÄéV‚Äé ‚ÄéI‚Äén‚Äéd‚Äée‚Äéx‚Äé
4‚Äé ‚Äéo‚Äéf‚Äé ‚Äé1‚Äé1‚Äé
S‚Äéu‚Äén‚Äér‚Äéi‚Äés‚Äée‚Äé
6‚Äé:‚Äé5‚Äé7‚Äé ‚Äéa‚Äém‚Äé
S‚Äéu‚Äén‚Äés‚Äée‚Äét‚Äé
8‚Äé:‚Äé0‚Äé0‚Äé ‚Äép‚Äém‚Äé
S‚Äéa‚Äét‚Äé ‚Äé2‚Äé0‚Äé ‚Äé|‚Äé ‚ÄéN‚Äéi‚Äég‚Äéh‚Äét‚Äé
5‚Äé2‚Äé¬∞‚Äé
8‚Äé9‚Äé%‚Äé
N‚Äé
1‚Äé5‚Äé
 ‚Äé
m‚Äép‚Äéh‚Äé
T‚Äéh‚Äéu‚Äén‚Äéd‚Äée‚Äér‚Äés‚Äét‚Äéo‚Äér‚Äém‚Äés‚Äé ‚Äét‚Äéh‚Äéi‚Äés‚Äé ‚Äée‚Äév‚Äée‚Äén‚Äéi‚Äén‚Äég‚Äé ‚Äéf‚Äéo‚Äél‚Äél‚Äéo‚Äéw‚Äée‚Äéd‚Äé ‚Äéb‚Äéy‚Äé ‚Äéo‚Äéc‚Äéc‚Äéa‚Äés‚Äéi‚Äéo‚Äén‚Äéa‚Äél‚Äé ‚Äés‚Äéh‚Äéo‚Äéw‚Äée‚Äér‚Äés‚Äé ‚Äéo‚Äév‚Äée‚Äér‚Äén‚Äéi‚Äég‚Äéh‚Äét‚Äé.‚Äé ‚ÄéL‚Äéo‚Äéw‚Äé ‚Äé5‚Äé2‚ÄéF‚Äé.‚Äé ‚ÄéW‚Äéi‚Äén‚Äéd‚Äés‚Äé ‚ÄéN‚Äé ‚Äéa‚Äét‚Äé ‚Äé1‚Äé0‚Äé ‚Äét‚Äéo‚Äé ‚Äé2‚Äé0‚Äé ‚Äém‚Äép‚Äéh‚Äé.‚Äé ‚ÄéC‚Äéh‚Äéa‚Äén‚Äéc‚Äée‚Äé ‚Äéo‚Äéf‚Äé ‚Äér‚Äéa‚Äéi‚Äén‚Äé ‚Äé9‚Äé0‚Äé%‚Äé.‚Äé
 ‚Äé
H‚Äéu‚Äém‚Äéi‚Äéd‚Äéi‚Äét‚Äéy‚Äé
9‚Äé6‚Äé%‚Äé
U‚ÄéV‚Äé ‚ÄéI‚Äén‚Äéd‚Äée‚Äéx‚Äé
0‚Äé ‚Äéo‚Äéf‚Äé ‚Äé1‚Äé1‚Äé
M‚Äéo‚Äéo‚Äén‚Äér‚Äéi‚Äés‚Äée‚Äé
5‚Äé:‚Äé2‚Äé0‚Äé ‚Äép‚Äém‚Äé
W‚Äéa‚Äéx‚Äéi‚Äén‚Äég‚Äé ‚ÄéG‚Äéi‚Äéb‚Äéb‚Äéo‚Äéu‚Äés‚Äé
M‚Äéo‚Äéo‚Äén‚Äés‚Äée‚Äét‚Äé
5‚Äé:‚Äé1‚Äé8‚Äé ‚Äéa‚Äém‚Äé
S‚Äéu‚Äén‚Äé ‚Äé2‚Äé1‚Äé
A‚ÄéM‚Äé ‚ÄéC‚Äél‚Äéo‚Äéu‚Äéd‚Äés‚Äé/‚ÄéP‚ÄéM‚Äé ‚ÄéS‚Äéu‚Äén‚Äé
6‚Äé5‚Äé¬∞‚Äé
/‚Äé4‚Äé8‚Äé¬∞‚Äé
1‚Äé3‚Äé%‚Äé
N‚ÄéN‚ÄéE‚Äé ‚Äé1‚Äé7‚Äé ‚Äém‚Äép‚Äéh‚Äé
M‚Äéo‚Äén‚Äé ‚Äé2‚Äé2‚Äé
P‚Äéa‚Äér‚Äét‚Äél‚Äéy‚Äé ‚ÄéC‚Äél‚Äéo‚Äéu‚Äéd‚Äéy‚Äé
7‚Äé2‚Äé¬∞‚Äé
/‚Äé5‚Äé2‚Äé¬∞‚Äé
7‚Äé%‚Äé
E‚Äé ‚Äé7‚Äé ‚Äém‚Äép‚Äéh‚Äé
T‚Äéu‚Äée‚Äé ‚Äé2‚Äé3‚Äé
M‚Äéo‚Äés‚Äét‚Äél‚Äéy‚Äé ‚ÄéS‚Äéu‚Äén‚Äén‚Äéy‚Äé
7‚Äé8‚Äé¬∞‚Äé
/‚Äé6‚Äé3‚Äé¬∞‚Äé
7‚Äé%‚Äé
S‚Äé ‚Äé1‚Äé2‚Äé ‚Äém‚Äép‚Äéh‚Äé
W‚Äée‚Äéd‚Äé ‚Äé2‚Äé4‚Äé
A‚ÄéM‚Äé ‚ÄéC‚Äél‚Äéo‚Äéu‚Äéd‚Äés‚Äé/‚ÄéP‚ÄéM‚Äé ‚ÄéS‚Äéu‚Äén‚Äé
8‚Äé3‚Äé¬∞‚Äé
/‚Äé6‚Äé7‚Äé¬∞‚Äé
2‚Äé4‚Äé%‚Äé
S‚ÄéS‚ÄéE‚Äé ‚Äé1‚Äé2‚Äé ‚Äém‚Äép‚Äéh‚Äé
T‚Äéh‚Äéu‚Äé ‚Äé2‚Äé5‚Äé
A‚ÄéM‚Äé ‚ÄéC‚Äél‚Äéo‚Äéu‚Äéd‚Äés‚Äé/‚ÄéP‚ÄéM‚Äé ‚ÄéS‚Äéu‚Äén‚Äé
8‚Äé3‚Äé¬∞‚Äé
/‚Äé7‚Äé0‚Äé¬∞‚Äé
2‚Äé4‚Äé%‚Äé
S‚ÄéS‚ÄéE‚Äé ‚Äé1‚Äé6‚Äé ‚Äém‚Äép‚Äéh‚Äé
F‚Äér‚Äéi‚Äé ‚Äé2‚Äé6‚Äé
C‚Äél‚Äéo‚Äéu‚Äéd‚Äéy‚Äé
8‚Äé4‚Äé¬∞‚Äé
/‚Äé7‚Äé2‚Äé¬∞‚Äé
2‚Äé4‚Äé%‚Äé
S‚Äé ‚Äé1‚Äé6‚Äé ‚Äém‚Äép‚Äéh‚Äé
S‚Äéa‚Äét‚Äé ‚Äé2‚Äé7‚Äé
M‚Äéo‚Äés‚Äét‚Äél‚Äéy‚Äé ‚ÄéC‚Äél‚Äéo‚Äéu‚Äéd‚Äéy‚Äé
8‚Äé8‚Äé¬∞‚Äé
/‚Äé7‚Äé2‚Äé¬∞‚Äé
2‚Äé4‚Äé%‚Äé
S‚Äé ‚Äé1‚Äé7‚Äé ‚Äém‚Äép‚Äéh‚Äé
S‚Äéu‚Äén‚Äé ‚Äé2‚Äé8‚Äé
A‚ÄéM‚Äé ‚ÄéC‚Äél‚Äéo‚Äéu‚Äéd‚Äés‚Äé/‚ÄéP‚ÄéM‚Äé ‚ÄéS‚Äéu‚Äén‚Äé
8‚Äé9‚Äé¬∞‚Äé
/‚Äé7‚Äé0‚Äé¬∞‚Äé
2‚Äé4‚Äé%‚Äé
S‚Äé ‚Äé1‚Äé4‚Äé ‚Äém‚Äép‚Äéh‚Äé
M‚Äéo‚Äén‚Äé ‚Äé2‚Äé9‚Äé
P‚Äéa‚Äér‚Äét‚Äél‚Äéy‚Äé ‚ÄéC‚Äél‚Äéo‚Äéu‚Äéd‚Äéy‚Äé
8‚Äé8‚Äé¬∞‚Äé
/‚Äé7‚Äé0‚Äé¬∞‚Äé
2‚Äé4‚Äé%‚Äé
S‚ÄéS‚ÄéE‚Äé ‚Äé1‚Äé1‚Äé ‚Äém‚Äép‚Äéh‚Äé
T‚Äéu‚Äée‚Äé ‚Äé3‚Äé0‚Äé
S‚Äéc‚Äéa‚Äét‚Äét‚Äée‚Äér‚Äée‚Äéd‚Äé ‚ÄéT‚Äéh‚Äéu‚Äén‚Äéd‚Äée‚Äér‚Äés‚Äét‚Äéo‚Äér‚Äém‚Äés‚Äé
8‚Äé7‚Äé¬∞‚Äé
/‚Äé7‚Äé2‚Äé¬∞‚Äé
4‚Äé6‚Äé%‚Äé
S‚ÄéS‚ÄéE‚Äé ‚Äé1‚Äé2‚Äé ‚Äém‚Äép‚Äéh‚Äé
W‚Äée‚Äéd‚Äé ‚Äé0‚Äé1‚Äé
S‚Äéc‚Äéa‚Äét‚Äét‚Äée‚Äér‚Äée‚Äéd‚Äé ‚ÄéT‚Äéh‚Äéu‚Äén‚Äéd‚Äée‚Äér‚Äés‚Äét‚Äéo‚Äér‚Äém‚Äés‚Äé
8‚Äé6‚Äé¬∞‚Äé
/‚Äé7‚Äé2‚Äé¬∞‚Äé
5‚Äé8‚Äé%‚Äé
S‚ÄéS‚ÄéE‚Äé ‚Äé1‚Äé3‚Äé ‚Äém‚Äép‚Äéh‚Äé
T‚Äéh‚Äéu‚Äé ‚Äé0‚Äé2‚Äé
S‚Äéc‚Äéa‚Äét‚Äét‚Äée‚Äér‚Äée‚Äéd‚Äé ‚ÄéT‚Äéh‚Äéu‚Äén‚Äéd‚Äée‚Äér‚Äés‚Äét‚Äéo‚Äér‚Äém‚Äés‚Äé
8‚Äé5‚Äé¬∞‚Äé
/‚Äé7‚Äé0‚Äé¬∞‚Äé
5‚Äé0‚Äé%‚Äé
S‚ÄéS‚ÄéE‚Äé ‚Äé1‚Äé3‚Äé ‚Äém‚Äép‚Äéh‚Äé
F‚Äér‚Äéi‚Äé ‚Äé0‚Äé3‚Äé
S‚Äéc‚Äéa‚Äét‚Äét‚Äée‚Äér‚Äée‚Äéd‚Äé ‚ÄéT‚Äéh‚Äéu‚Äén‚Äéd‚Äée‚Äér‚Äés‚Äét‚Äéo‚Äér‚Äém‚Äés‚Äé
8‚Äé4‚Äé¬∞‚Äé
/‚Äé6‚Äé8‚Äé¬∞‚Äé
5‚Äé8‚Äé%‚Äé
S‚ÄéE‚Äé ‚Äé1‚Äé1‚Äé ‚Äém‚Äép‚Äéh‚Äé
S‚Äéa‚Äét‚Äé ‚Äé0‚Äé4‚Äé
S‚Äéc‚Äéa‚Äét‚Äét‚Äée‚Äér‚Äée‚Äéd‚Äé ‚ÄéT‚Äéh‚Äéu‚Äén‚Äéd‚Äée‚Äér‚Äés‚Äét‚Äéo‚Äér‚Äém‚Äés‚Äé
8‚Äé5‚Äé¬∞‚Äé
/‚Äé6‚Äé8‚Äé¬∞‚Äé
4‚Äé9‚Äé%‚Äé
S‚ÄéE‚Äé ‚Äé1‚Äé1‚Äé ‚Äém‚Äép‚Äéh‚Äé

.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé

C‚Äéu‚Äér‚Äér‚Äée‚Äén‚Äét‚Äé ‚Äét‚Äéh‚Äér‚Äée‚Äéa‚Äét‚Äé:‚Äé ‚Äé4‚Äé/‚Äé2‚Äé0‚Äé.‚Äé‚òÅÔ∏è

.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé

M‚Äéc‚ÄéD‚Äéo‚Äén‚Äéa‚Äél‚Äéd‚Äés‚Äé
M‚Äéc‚ÄéD‚Äéo‚Äén‚Äéa‚Äél‚Äéd‚Äé'‚Äés‚Äé ‚Äéi‚Äés‚Äé ‚Äéa‚Äé ‚Äéc‚Äéh‚Äéi‚Äél‚Äéd‚Äér‚Äée‚Äén‚Äé'‚Äés‚Äé ‚Äéf‚Äéa‚Äés‚Äét‚Äé ‚Äéf‚Äéo‚Äéo‚Äéd‚Äé ‚Äér‚Äée‚Äés‚Äét‚Äéa‚Äéu‚Äér‚Äéa‚Äén‚Äét‚Äé ‚Äéw‚Äéh‚Äée‚Äér‚Äée‚Äé ‚Äép‚Äéo‚Äéo‚Äér‚Äé ‚Äép‚Äée‚Äéo‚Äép‚Äél‚Äée‚Äé ‚Äég‚Äéo‚Äé ‚Äét‚Äéo‚Äé ‚Äée‚Äéa‚Äét‚Äé ‚Äéc‚Äéh‚Äée‚Äéa‚Äép‚Äé,‚Äé ‚Äép‚Äér‚Äéo‚Äéc‚Äée‚Äés‚Äés‚Äée‚Äéd‚Äé,‚Äé ‚Äég‚Äér‚Äée‚Äéa‚Äés‚Äéy‚Äé ‚Äéf‚Äéo‚Äéo‚Äéd‚Äé ‚Äéf‚Äéo‚Äér‚Äé ‚Äél‚Äée‚Äés‚Äés‚Äé,‚Äé ‚Äéa‚Äén‚Äéd‚Äé ‚Äéi‚Äés‚Äé ‚Äét‚Äéh‚Äée‚Äé ‚Äéo‚Äéf‚Äéf‚Äéi‚Äéc‚Äéi‚Äéa‚Äél‚Äé ‚Äés‚Äéy‚Äém‚Äéb‚Äéo‚Äél‚Äé ‚Äéo‚Äéf‚Äé ‚ÄéA‚Äém‚Äée‚Äér‚Äéi‚Äéc‚Äéa‚Äén‚Äé ‚Äég‚Äél‚Äéu‚Äét‚Äét‚Äéo‚Äén‚Äéy‚Äé.‚Äé ‚ÄéM‚Äéc‚ÄéD‚Äéo‚Äén‚Äéa‚Äél‚Äéd‚Äé'‚Äés‚Äé ‚Äéh‚Äéa‚Äés‚Äé ‚Äée‚Äés‚Äét‚Äéa‚Äéb‚Äél‚Äéi‚Äés‚Äéh‚Äée‚Äéd‚Äé ‚Äém‚Äéa‚Äén‚Äéy‚Äé ‚Äéc‚Äée‚Äél‚Äél‚Äés‚Äé ‚Äé(‚Äéc‚Äéa‚Äél‚Äél‚Äée‚Äéd‚Äé ‚Äéf‚Äér‚Äéa‚Äén‚Äéc‚Äéh‚Äéi‚Äés‚Äée‚Äés‚Äé)‚Äé ‚Äéi‚Äén‚Äé ‚Äéc‚Äéo‚Äéu‚Äén‚Äét‚Äér‚Äéi‚Äée‚Äés‚Äé ‚Äéa‚Äél‚Äél‚Äé ‚Äéo‚Äév‚Äée‚Äér‚Äé ‚Äét‚Äéh‚Äée‚Äé ‚Äéw‚Äéo‚Äér‚Äél‚Äéd‚Äé,‚Äé ‚Äéw‚Äéh‚Äée‚Äér‚Äée‚Äé ‚Äét‚Äéh‚Äée‚Äéy‚Äé ‚Äéc‚Äéo‚Äén‚Äét‚Äéi‚Äén‚Äéu‚Äée‚Äé ‚Äét‚Äéo‚Äé ‚Äék‚Äéi‚Äél‚Äél‚Äé ‚Äéi‚Äén‚Äén‚Äéo‚Äéc‚Äée‚Äén‚Äét‚Äé ‚ÄéC‚Äéh‚Äéi‚Äén‚Äée‚Äés‚Äée‚Äé ‚Äék‚Äéi‚Äéd‚Äés‚Äé ‚Äéw‚Äéi‚Äét‚Äéh‚Äé ‚ÄéA‚Äém‚Äée‚Äér‚Äéi‚Äéc‚Äéa‚Äén‚Äé ‚Äép‚Äéo‚Äéi‚Äés‚Äéo‚Äén‚Äé,‚Äé ‚Äéa‚Äét‚Äé ‚Äéw‚Äéh‚Äéi‚Äéc‚Äéh‚Äé ‚Äét‚Äéi‚Äém‚Äée‚Äé ‚Äét‚Äéh‚Äée‚Äé ‚Äéb‚Äél‚Äéo‚Äéa‚Äét‚Äée‚Äéd‚Äé ‚Äéy‚Äée‚Äél‚Äél‚Äéo‚Äéw‚Äé ‚Äéc‚Äéa‚Äér‚Äéc‚Äéa‚Äés‚Äés‚Äée‚Äés‚Äé ‚Äéa‚Äér‚Äée‚Äé ‚Äés‚Äét‚Äér‚Äéi‚Äép‚Äép‚Äée‚Äéd‚Äé ‚Äéo‚Äéf‚Äé ‚Äét‚Äéh‚Äée‚Äéi‚Äér‚Äé ‚Äéd‚Äée‚Äél‚Äéi‚Äéc‚Äéi‚Äéo‚Äéu‚Äés‚Äé ‚Äém‚Äée‚Äéa‚Äét‚Äé ‚Äéa‚Äén‚Äéd‚Äé ‚Äés‚Äéo‚Äél‚Äéd‚Äé ‚Äéb‚Äéa‚Äéc‚Äék‚Äé ‚Äéi‚Äén‚Äé ‚ÄéA‚Äém‚Äée‚Äér‚Äéi‚Äéc‚Äéa‚Äé ‚Äéa‚Äés‚Äé ‚ÄéH‚Äéa‚Äép‚Äép‚Äéy‚Äé ‚ÄéM‚Äée‚Äéa‚Äél‚Äés‚Äé.‚Äé

I‚Äét‚Äé ‚Äés‚Äéh‚Äéo‚Äéu‚Äél‚Äéd‚Äé ‚Äéa‚Äél‚Äés‚Äéo‚Äé ‚Äéb‚Äée‚Äé ‚Äén‚Äéo‚Äét‚Äée‚Äéd‚Äé ‚Äét‚Äéh‚Äéa‚Äét‚Äé ‚ÄéU‚ÄéN‚ÄéD‚ÄéE‚ÄéR‚Äé ‚ÄéN‚ÄéO‚Äé ‚ÄéC‚ÄéI‚ÄéR‚ÄéC‚ÄéU‚ÄéM‚ÄéS‚ÄéT‚ÄéA‚ÄéN‚ÄéC‚ÄéE‚ÄéS‚Äé ‚Äés‚Äéh‚Äéo‚Äéu‚Äél‚Äéd‚Äé ‚Äéy‚Äéo‚Äéu‚Äé ‚Äét‚Äéa‚Äék‚Äée‚Äé ‚Äéa‚Äé ‚Äég‚Äéi‚Äér‚Äél‚Äé ‚Äét‚Äéo‚Äé ‚ÄéM‚Äéc‚ÄéD‚Äéo‚Äén‚Äéa‚Äél‚Äéd‚Äé'‚Äés‚Äé ‚Äéf‚Äéo‚Äér‚Äé ‚Äéa‚Äé ‚Äéf‚Äéi‚Äér‚Äés‚Äét‚Äé ‚Äéd‚Äéa‚Äét‚Äée‚Äé,‚Äé ‚Äéy‚Äéo‚Äéu‚Äé ‚ÄéJ‚Äée‚Äéw‚Äé.‚Äé

I‚Äén‚Äé ‚Äél‚Äéi‚Äég‚Äéh‚Äét‚Äé ‚Äéo‚Äéf‚Äé ‚Äét‚Äéh‚Äée‚Äé ‚Äér‚Äée‚Äéc‚Äée‚Äén‚Äét‚Äé ‚ÄéP‚Äéi‚Äég‚Äék‚Äér‚Äéa‚Äéi‚Äén‚Äée‚Äé ‚Äéi‚Äén‚Äév‚Äéa‚Äés‚Äéi‚Äéo‚Äén‚Äé,‚Äé ‚ÄéM‚Äéi‚Äéc‚Äék‚Äée‚Äéy‚Äé ‚ÄéD‚Äé'‚Äés‚Äé ‚Äéa‚Äés‚Äé ‚Äéw‚Äée‚Äél‚Äél‚Äé ‚Äéa‚Äés‚Äé ‚Äéo‚Äét‚Äéh‚Äée‚Äér‚Äé ‚Äéf‚Äéo‚Äéo‚Äéd‚Äé ‚Äéc‚Äéo‚Äém‚Äép‚Äéa‚Äén‚Äéi‚Äée‚Äés‚Äé ‚Äét‚Äéh‚Äéa‚Äét‚Äé ‚Äés‚Äél‚Äéo‚Äéw‚Äél‚Äéy‚Äé ‚Äék‚Äéi‚Äél‚Äél‚Äé ‚Äét‚Äéh‚Äée‚Äé ‚ÄéA‚Äém‚Äée‚Äér‚Äéi‚Äéc‚Äéu‚Äén‚Äét‚Äé ‚Äép‚Äéo‚Äép‚Äéu‚Äél‚Äéa‚Äét‚Äéi‚Äéo‚Äén‚Äé ‚Äéo‚Äén‚Äé ‚Äéa‚Äé ‚Äéd‚Äéa‚Äéi‚Äél‚Äéy‚Äé ‚Äéb‚Äéa‚Äés‚Äéi‚Äés‚Äé,‚Äé ‚Äéh‚Äéa‚Äés‚Äé ‚Äép‚Äéu‚Äél‚Äél‚Äée‚Äéd‚Äé ‚Äéb‚Äéu‚Äés‚Äéi‚Äén‚Äée‚Äés‚Äés‚Äé ‚Äéf‚Äér‚Äéo‚Äém‚Äé ‚ÄéR‚Äéu‚Äés‚Äés‚Äéi‚Äéa‚Äé ‚Äét‚Äéo‚Äé ‚Äép‚Äéw‚Äén‚Äé ‚ÄéB‚Äéi‚Äég‚Äé ‚ÄéB‚Äéa‚Äéd‚Äé ‚ÄéV‚Äél‚Äéa‚Äéd‚Äé.‚Äé


(‚Äé(‚Äé ‚ÄéA‚Äé ‚ÄéH‚Äée‚Äéa‚Äér‚Äét‚Äé ‚ÄéA‚Äét‚Äét‚Äéa‚Äéc‚Äék‚Äé ‚ÄéI‚Äén‚Äé ‚ÄéE‚Äév‚Äée‚Äér‚Äéy‚Äé ‚ÄéB‚Äéa‚Äég‚Äé ‚Äé)‚Äé)‚Äé

.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé

T‚Äéa‚Äér‚Äéa‚Äéz‚Äéo‚Äén‚Äéa‚Äé ‚Äéi‚Äés‚Äé ‚Äéa‚Äé ‚Äét‚Äéo‚Äéw‚Äén‚Äé ‚Äéa‚Äén‚Äéd‚Äé ‚Äém‚Äéu‚Äén‚Äéi‚Äéc‚Äéi‚Äép‚Äéa‚Äél‚Äéi‚Äét‚Äéy‚Äé,‚Äé ‚Äéa‚Äén‚Äéd‚Äé ‚Äét‚Äéh‚Äée‚Äé ‚Äéc‚Äéa‚Äép‚Äéi‚Äét‚Äéa‚Äél‚Äé ‚Äéo‚Äéf‚Äé ‚Äét‚Äéh‚Äée‚Äé ‚Äéc‚Äéo‚Äém‚Äéa‚Äér‚Äéc‚Äéa‚Äé ‚ÄéT‚Äéa‚Äér‚Äéa‚Äéz‚Äéo‚Äén‚Äéa‚Äé ‚Äéy‚Äé ‚Äée‚Äél‚Äé ‚ÄéM‚Äéo‚Äén‚Äéc‚Äéa‚Äéy‚Äéo‚Äé ‚Äéi‚Äén‚Äé ‚ÄéA‚Äér‚Äéa‚Äég‚Äéo‚Äén‚Äé,‚Äé ‚ÄéS‚Äép‚Äéa‚Äéi‚Äén‚Äé.‚Äé ‚ÄéI‚Äét‚Äé ‚Äéi‚Äés‚Äé ‚Äéa‚Äél‚Äés‚Äéo‚Äé ‚Äét‚Äéh‚Äée‚Äé ‚Äés‚Äée‚Äéa‚Äét‚Äé ‚Äéo‚Äéf‚Äé ‚Äét‚Äéh‚Äée‚Äé ‚ÄéR‚Äéo‚Äém‚Äéa‚Äén‚Äé ‚ÄéC‚Äéa‚Äét‚Äéh‚Äéo‚Äél‚Äéi‚Äéc‚Äé ‚ÄéD‚Äéi‚Äéo‚Äéc‚Äée‚Äés‚Äée‚Äé ‚Äéo‚Äéf‚Äé ‚ÄéT‚Äéa‚Äér‚Äéa‚Äéz‚Äéo‚Äén‚Äéa‚Äé.‚Äé ‚ÄéL‚Äéo‚Äéc‚Äéa‚Äét‚Äée‚Äéd‚Äé ‚Äéo‚Äén‚Äé ‚Äét‚Äéh‚Äée‚Äé ‚Äér‚Äéi‚Äév‚Äée‚Äér‚Äé ‚ÄéQ‚Äéu‚Äée‚Äéi‚Äél‚Äée‚Äés‚Äé,‚Äé ‚Äéa‚Äé ‚Äét‚Äér‚Äéi‚Äéb‚Äéu‚Äét‚Äéa‚Äér‚Äéy‚Äé ‚Äéo‚Äéf‚Äé ‚Äét‚Äéh‚Äée‚Äé ‚ÄéE‚Äéb‚Äér‚Äéo‚Äé,‚Äé ‚ÄéT‚Äéa‚Äér‚Äéa‚Äéz‚Äéo‚Äén‚Äéa‚Äé ‚Äéw‚Äéa‚Äés‚Äé ‚Äéa‚Äén‚Äé ‚Äéi‚Äém‚Äép‚Äéo‚Äér‚Äét‚Äéa‚Äén‚Äét‚Äé ‚Äér‚Äée‚Äég‚Äéi‚Äéo‚Äén‚Äéa‚Äél‚Äé ‚Äéc‚Äée‚Äén‚Äét‚Äér‚Äée‚Äé ‚Äéo‚Äéf‚Äé ‚Äéa‚Äén‚Äéc‚Äéi‚Äée‚Äén‚Äét‚Äé ‚ÄéR‚Äéo‚Äém‚Äée‚Äé,‚Äé ‚Äék‚Äén‚Äéo‚Äéw‚Äén‚Äé ‚Äéa‚Äés‚Äé ‚ÄéT‚Äéu‚Äér‚Äéi‚Äéa‚Äés‚Äéo‚Äé,‚Äé ‚Äél‚Äéo‚Äéc‚Äéa‚Äét‚Äée‚Äéd‚Äé ‚Äéa‚Äér‚Äéo‚Äéu‚Äén‚Äéd‚Äé ‚Äé6‚Äé0‚Äé ‚Äék‚Äéi‚Äél‚Äéo‚Äém‚Äée‚Äét‚Äér‚Äée‚Äés‚Äé ‚Äé(‚Äé3‚Äé7‚Äé ‚Äém‚Äéi‚Äél‚Äée‚Äés‚Äé)‚Äé ‚Äéf‚Äér‚Äéo‚Äém‚Äé ‚ÄéB‚Äéi‚Äél‚Äéb‚Äéi‚Äél‚Äéi‚Äés‚Äé.‚Äé ‚ÄéT‚Äéh‚Äée‚Äé ‚Äéc‚Äéi‚Äét‚Äéy‚Äé ‚Äél‚Äéa‚Äét‚Äée‚Äér‚Äé ‚Äéc‚Äéa‚Äém‚Äée‚Äé ‚Äéu‚Äén‚Äéd‚Äée‚Äér‚Äé ‚Äét‚Äéh‚Äée‚Äé ‚Äér‚Äéu‚Äél‚Äée‚Äé ‚Äéo‚Äéf‚Äé ‚Äét‚Äéh‚Äée‚Äé ‚ÄéV‚Äéi‚Äés‚Äéi‚Äég‚Äéo‚Äét‚Äéh‚Äés‚Äé,‚Äé ‚Äéw‚Äéh‚Äéo‚Äé ‚Äéc‚Äéa‚Äél‚Äél‚Äée‚Äéd‚Äé ‚Äéi‚Äét‚Äé ‚ÄéT‚Äéi‚Äér‚Äéa‚Äés‚Äéo‚Äén‚Äéa‚Äé.‚Äé ‚ÄéT‚Äéh‚Äéi‚Äés‚Äé ‚Äév‚Äéi‚Äée‚Äéw‚Äé ‚Äéo‚Äéf‚Äé ‚ÄéT‚Äéa‚Äér‚Äéa‚Äéz‚Äéo‚Äén‚Äéa‚Äé ‚Äéw‚Äéa‚Äés‚Äé ‚Äét‚Äéa‚Äék‚Äée‚Äén‚Äé ‚Äéf‚Äér‚Äéo‚Äém‚Äé ‚Äét‚Äéh‚Äée‚Äé ‚Äéc‚Äéi‚Äét‚Äéy‚Äé'‚Äés‚Äé ‚Äée‚Äép‚Äéi‚Äés‚Äéc‚Äéo‚Äép‚Äéa‚Äél‚Äé ‚Äép‚Äéa‚Äél‚Äéa‚Äéc‚Äée‚Äé,‚Äé ‚Äéa‚Äén‚Äéd‚Äé ‚Äés‚Äéh‚Äéo‚Äéw‚Äés‚Äé ‚ÄéT‚Äéa‚Äér‚Äéa‚Äéz‚Äéo‚Äén‚Äéa‚Äé ‚ÄéC‚Äéa‚Äét‚Äéh‚Äée‚Äéd‚Äér‚Äéa‚Äél‚Äé ‚Äéa‚Äén‚Äéd‚Äé ‚Äéi‚Äét‚Äés‚Äé ‚Äés‚Äée‚Äém‚Äéi‚Äén‚Äéa‚Äér‚Äéy‚Äé,‚Äé ‚Äét‚Äéh‚Äée‚Äé ‚ÄéO‚Äél‚Äéd‚Äé ‚ÄéB‚Äéu‚Äél‚Äél‚Äéf‚Äéi‚Äég‚Äéh‚Äét‚Äé ‚ÄéA‚Äér‚Äée‚Äén‚Äéa‚Äé,‚Äé ‚Äéa‚Äén‚Äéd‚Äé ‚Äét‚Äéh‚Äée‚Äé ‚ÄéS‚Äéa‚Äén‚Äéc‚Äét‚Äéu‚Äéa‚Äér‚Äéy‚Äé ‚Äéo‚Äéf‚Äé ‚Äét‚Äéh‚Äée‚Äé ‚ÄéL‚Äéa‚Äéd‚Äéy‚Äé ‚Äéo‚Äéf‚Äé ‚Äét‚Äéh‚Äée‚Äé ‚ÄéR‚Äéi‚Äév‚Äée‚Äér‚Äé.‚Äé

P‚Äéh‚Äéo‚Äét‚Äéo‚Äég‚Äér‚Äéa‚Äép‚Äéh‚Äé ‚Äéc‚Äér‚Äée‚Äéd‚Äéi‚Äét‚Äé:‚Äé ‚ÄéD‚Äéi‚Äée‚Äég‚Äéo‚Äé ‚ÄéD‚Äée‚Äél‚Äés‚Äéo‚Äé

.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé

B‚Äéy‚Äée‚Äé,‚Äé ‚Äég‚Äéu‚Äéy‚Äés‚Äé.‚Äé ‚ÄéI‚Äé'‚Äém‚Äé ‚Äég‚Äéo‚Äén‚Äén‚Äéa‚Äé ‚Äég‚Äéo‚Äé ‚Äéh‚Äéi‚Äéd‚Äée‚Äé ‚Äéi‚Äén‚Äé ‚Äét‚Äéh‚Äée‚Äé ‚Äéc‚Äél‚Äéo‚Äét‚Äéh‚Äéi‚Äén‚Äég‚Äé ‚Äér‚Äéa‚Äéc‚Äék‚Äés‚Äé ‚Äéa‚Äét‚Äé ‚ÄéW‚Äéa‚Äél‚Äém‚Äéa‚Äér‚Äét‚Äé.‚Äé"
LAWuWRda,Ghost style,Dsaqwed123,LScript,Saturday 20th of April 2024 11:23:17 PM CDT,"-- ghost script


local DragonText = ""Ghost""
local DragonColor = Color3.fromRGB(84, 119, 125)
local DragonSequence = ColorSequence.new({ColorSequenceKeypoint.new(0, DragonColor), ColorSequenceKeypoint.new(1, DragonColor)})

local rushstyle = game.ReplicatedStorage.Styles.Rush

local plr = game.Players.LocalPlayer
local pgui = plr.PlayerGui
local interf = pgui.Interface
local bt = interf.Battle
local main = bt.Main
local status = plr.Status

local function sendNotification(text, color)
	if not color then color = Color3.new(1, 1, 1) end
	pgui.Notify.Awards.ChildAdded:Once(function(c)
		if c.Text == text then
			c.TextColor3 = color
			coroutine.wrap(function()
				local con;
				con = game:GetService(""RunService"").RenderStepped:Connect(function()
					if not c then
						con:Disconnect()
						return
					end
					c.TextColor3 = color
				end)()
			end)()
		end
	end)
	pgui[""‡πÄ‡∏Ñ‡∏à‡πÄ‡∏Ö¬ã‡πÄ‡∏Ñ¬ü‡πÄ‡∏Ñ‡∏ü‡πÄ‡∏Ñ‡∏ã""]:Fire(text)
end

for i,v in pairs(game.ReplicatedStorage.Styles.Rush:GetChildren()) do
	if v:IsA(""Animation"") and v.Name:find(""Evade"") then
		v.AnimationId = ""rbxassetid://""
	end
end

function isInBattle()
	return (plr:FindFirstChild(""InBattle"") and true or false)
end

function isDungeon()
	return game.ReplicatedStorage.Dungeon.Value
end

function doingHact()
	return (plr.Character:FindFirstChild(""Heated"") and true or false)
end

function showMaxHeatEffect()
	return (isInBattle() and not doingHact() and plr.Status.Heat.Value >= 100) and true or false
end

function hasWeaponInHand()
	return (plr.Character:FindFirstChild(""Holding"") and true or false)
end

local function changeValueStrict(obj, valName, newVal, valClass)
	if obj and newVal and valName then
		if not obj:FindFirstChild(valName) then
			local n = Instance.new(valClass)
			n.Name = valName
			n.Parent = obj
		end
		obj[valName].Value = newVal
	end
end

local moves = game.ReplicatedStorage.Moves
local stylesR = game.ReplicatedStorage.Styles.Rush

current = moves[""CounterHook""]
changeValueStrict(current, ""HitDur"", 100, ""NumberValue"")
changeValueStrict(current, ""MoveDuration"", 0, ""NumberValue"")
changeValueStrict(current, ""AniSpeed"", 100000, ""NumberValue"")
changeValueStrict(current, ""Dmg"", 10000, ""NumberValue"")
changeValueStrict(current, ""HitboxLocations"", '[[""RightHand"",10000,[0,0,0]],[""RightLowerArm"",10000,[0,0,0]],[""RightUpperArm"",10000,[0,0,0]]]', ""StringValue"")
changeValueStrict(current, ""MoveForward"", 0, ""NumberValue"")

stylesR.Rush1.Value = ""CounterHook"" --press q to explode

local function update()
	local char = plr.Character or plr.CharacterAdded:Wait()
	char.HumanoidRootPart.Fire_Main.Color = DragonSequence
	char.HumanoidRootPart.Fire_Secondary.Color = DragonSequence
	char.HumanoidRootPart.Fire_Main.Rate = status.Heat.Value >= 100 and 115 or status.Heat.Value >= 75 and 85 or 80
	char.HumanoidRootPart.Fire_Secondary.Rate = status.Heat.Value >= 100 and 90 or status.Heat.Value >= 75 and 80 or 70
	char.HumanoidRootPart.Lines1.Color = DragonSequence
	char.HumanoidRootPart.Lines1.Rate = status.Heat.Value >= 100 and 60 or status.Heat.Value >= 75 and 40 or 20
	char.HumanoidRootPart.Lines2.Color = DragonSequence
	char.HumanoidRootPart.Lines2.Rate = status.Heat.Value >= 100 and 60 or status.Heat.Value >= 75 and 40 or 20
	char.HumanoidRootPart.Sparks.Color = DragonSequence
	if not char.HumanoidRootPart.TimeFor.Enabled then
		char.HumanoidRootPart.TimeFor.Color = DragonSequence
	end

	char.UpperTorso[""r2f_aura_burst""].Lines1.Color = DragonSequence
	char.UpperTorso[""r2f_aura_burst""].Lines2.Color = DragonSequence
	char.UpperTorso[""r2f_aura_burst""].Flare.Color = DragonSequence
	char.UpperTorso[""r2f_aura_burst""].Lines1.Enabled = showMaxHeatEffect()
	char.UpperTorso[""r2f_aura_burst""].Flare.Enabled = showMaxHeatEffect()
	char.UpperTorso[""r2f_aura_burst""].Smoke.Color = DragonSequence
	char.UpperTorso.Evading.Color = DragonSequence
end

update()

rushstyle.VisualName.Value = DragonText
rushstyle.Color.Value = DragonColor
print(rushstyle.VisualName.Value)

if status.Style.Value == ""Rush"" then
	main.XP.Fill.ImageColor3 = DragonColor
end

status.Heat.Changed:Connect(function()
	update()
end)

status.Style.Changed:Connect(function()
	if status.Style.Value == ""Rush"" then
		main.XP.Fill.ImageColor3 = DragonColor
	end
end)

local function add_invun()
	local invun = Instance.new(""Folder"")

	invun.Name = ""Invulnerable""
	invun.Parent = status
	return invun
end

add_invun()

status.ChildRemoved:Connect(function()
	if not status:FindFirstChild(""Invulnerable"") then
		add_invun()
	end
end)

local blacklist = {""Teleport""}

game.ReplicatedStorage.OverworldSpeed.Value = 10

while true do
	for i,v in pairs(game.ReplicatedStorage.Sounds:GetChildren()) do
		if not table.find(blacklist, v.Name) then
			changeValueStrict(current, ""Sound"", v.Name, ""StringValue"") --change the ""Explode3"" value to ""KnockOutRare"" or ""MetalPipe""
			task.wait()
		end
	end
	task.wait()
end"
kdmgbyDC,pastebin.ai - New pastebin,xxsa,PHP,Saturday 20th of April 2024 10:35:06 PM CDT,"https://pastebin.ai - #1 Pastebin Alternative - its free.

pastebin.ai  is a simple and efficient pastebin for mainly code to be distributed neatly and efficiently across the web. Website where you can paste and store any type of text or code snippets online and share it with your friends, Also You can see Recent Pastes

Simple Ads by Google Adsense Few rather than Pastebin
150+ different syntax languages - All Free
Paste Folders
Load files feature
Password protected pastes
Encrypted pastes.
URL Shortener.
Unlisted pastes.
Private pastes.
Embed, download, print pastes.
Socialite (Facebook/Twitter/Google Social login)
Trending pastes page (day, week, month, year)
Encrypted pastes.x
Trending pastes page (day, week, month, year).
No Captcha for logged in users feature.
..........
...................."
Bkypg1uZ,converte-webp-para-jpg-e-faz-backup-2,MizunoBrasil,Python,Saturday 20th of April 2024 10:34:26 PM CDT,"import tkinter as tk
from tkinter import filedialog, messagebox
from PIL import Image

def convert_image():
    filepath = filedialog.askopenfilename(filetypes=[(""WebP files"", ""*.webp"")])
    if filepath:
        image = Image.open(filepath)
        
        def save_image(save_path):
            try:
                # Salva a imagem convertida
                image.save(save_path)
                messagebox.showinfo(""Sucesso"", f""Imagem convertida e salva como {save_path}"")
                
            except Exception as e:
                messagebox.showerror(""Erro"", f""Ocorreu um erro ao salvar a imagem: {e}"")
        
        # Pede ao usu√°rio para escolher o local e o nome do arquivo de destino
        save_path = filedialog.asksaveasfilename(defaultextension="".jpg"", filetypes=[(""JPEG files"", ""*.jpg"")], title=""ESCOLHA A PASTA E O NOME DO ARQUIVO QUE DESEJA SALVAR"")
        if save_path:
            save_image(save_path)

root = tk.Tk()
root.title(""Conversor de imagem .webp para .jpg"")
root.geometry(""500x150"")

# Centralizar a janela inicial
root.update_idletasks()
screen_width = root.winfo_screenwidth()
screen_height = root.winfo_screenheight()
position_right = int(screen_width/2 - root.winfo_width()/2)
position_down = int(screen_height/2 - root.winfo_height()/2)
root.geometry(f""+{position_right}+{position_down}"")

btn_convert = tk.Button(root, text=""Carregar arquivo"", command=convert_image)
btn_convert.pack(pady=20)

# Adiciona a mensagem ""Mar√ßo 2024, Mizuno"" no canto inferior esquerdo
mensagem_label = tk.Label(root, text=""√öltima vers√£o: 21/04/2024 - Mizuno"")
mensagem_label.place(x=10, y=130)

root.mainloop()"
11VGZZp6,ü§ë G2A.com Free Gift Card Guide Apr 2024 FIX ü§ë,Godric,GetText,Saturday 20th of April 2024 09:59:55 PM CDT,"G2A.com free gift card & games updated guide.
Any item for free on G2A.com including Amazon, Steam, Xbox, Playstation gift cards & everything else offered.

This is the most up to date version of this script. Any other one posted will not work!
 
PDF guide here:
https://drive.google.com/file/d/1thJ3r_goEZ3BA-wE8sNYbGUhGv6gTnXz/view?usp=g2a_refund_exploit_701242.pdf

Working as of:
21 April 2024"
bumxMMh7,get armor,EasyDevX,Lua,Saturday 20th of April 2024 09:35:59 PM CDT,"local Players = game:GetService(""Players"")
local LocalPlayer = Players.LocalPlayer

local function teleportToArmor(ArmorName)
    local Armor = workspace.Ignored.Shop.Armor[ArmorName]
    if Armor then
        local Head = Armor.Head
        if Head then
            game.Players.LocalPlayer.Character:SetPrimaryPartCFrame(Head.CFrame)
        else
            warn(""Head of the Armor is missing."")
        end
    else
        warn(""Armor not found in the workspace."")
    end
end

local function gcp()
    local character = Players.LocalPlayer.Character
    if character then
        local humanoidRootPart = character:FindFirstChild(""HumanoidRootPart"")
        if humanoidRootPart then
            return humanoidRootPart.Position, humanoidRootPart.CFrame.LookVector
        else
            warn(""HumanoidRootPart not found!"")
            return nil
        end
    else
        warn(""Character not found!"")
        return nil
    end
end

local startPosition, startOrientation = gcp()

local function teleportToArmorByName(ArmorName)
    teleportToArmor(ArmorName)
end

wait(1)

teleportToArmorByName(""[High Armor] - $550"")

wait(1)

local armorclickdetector = workspace.Ignored.Shop.Armor[""[High Armor] - $550""].ClickDetector
fireclickdetector(armorclickdetector)

wait(1)

-- Teleport back to original position and orientation
game.Players.LocalPlayer.Character:SetPrimaryPartCFrame(CFrame.new(startPosition, startPosition + startOrientation))
"
prfptjpU,buy guns,EasyDevX,Lua,Saturday 20th of April 2024 09:13:13 PM CDT,"local Players = game:GetService(""Players"")
local LocalPlayer = Players.LocalPlayer

local function teleportToGun(gunName)
    local gun = workspace.Ignored.Shop.Guns[gunName]
    if gun then
        local head = gun.Head
        if head then
            game.Players.LocalPlayer.Character:SetPrimaryPartCFrame(head.CFrame)
        else
            warn(""Head of the gun is missing."")
        end
    else
        warn(""Gun not found in the workspace."")
    end
end

local function gcp()
    local character = Players.LocalPlayer.Character
    if character then
        local humanoidRootPart = character:FindFirstChild(""HumanoidRootPart"")
        if humanoidRootPart then
            return humanoidRootPart.Position, humanoidRootPart.CFrame.LookVector
        else
            warn(""HumanoidRootPart not found!"")
            return nil
        end
    else
        warn(""Character not found!"")
        return nil
    end
end

local startPosition, startOrientation = gcp()

local function teleportToGunByName(gunName)
    teleportToGun(gunName)
end

wait(1)

teleportToGunByName(""[Revolver] - $1600"")

wait(1)

local revolverClickDetector = workspace.Ignored.Shop.Guns[""[Revolver] - $1600""].ClickDetector
fireclickdetector(revolverClickDetector)

wait(1)

teleportToGunByName(""[Double Barrel SG] - $800"")

wait(1)

local doubleBarrelClickDetector = workspace.Ignored.Shop.Guns[""[Double Barrel SG] - $800""].ClickDetector
fireclickdetector(doubleBarrelClickDetector)

wait(1)

-- Teleport back to original position and orientation
game.Players.LocalPlayer.Character:SetPrimaryPartCFrame(CFrame.new(startPosition, startPosition + startOrientation))
"
nkiFax7R,TronV1.ASM,Ham62,ASM (NASM),Saturday 20th of April 2024 08:27:34 PM CDT,"; -----------------------------------------------------
; MS-DOS Tron
;
; A WIP recreation of the game Tron for MS-DOS.
;
; Runs in CGA screen mode 4 using only 808x compatible
; instructions.
;
; Written by Graham Downey (2024)

CPU 8086
ORG 100h

%define _UP    0
%define _DOWN  1
%define _LEFT  2
%define _RIGHT 3

%define _P1CLR 1
%define _P2CLR 2

%define _P1MASK 55h
%define _P2MASK 0AAh


section .text

; Startup code
start:
    MOV AX, 0F00h  ; Get and save current video mode
    INT 10h
    MOV [CS:oldVideoState], AL

    MOV AX, 0004h  ; Set video mode to CGA 320x200x4
    INT 10h

    MOV AX, 0B800h ; CGA graphics seg
    MOV ES, AX

    MOV DX, CS     ; Set data segment to code segment
    MOV DS, DX

    ; Test drawing 8 pixels top left corner
    MOV [ES:0000h], BYTE 0E4h
    MOV [ES:0001h], BYTE 1Bh


drawBorder:

    ; Draw top and bottom borders
 horizontalBorder:
    MOV CX, 80     ; 80*4 pixels across
    MOV AL, 0E7h   ; Cool border pattern

    XOR DI, DI     ; Top border starts at 0000h
    MOV SI, 3EF0h-80  ; Bottom border starts here

   ; Render a cool arrow pattern
 .nextColumn:
    MOV [ES:DI], AL ; First row
    MOV [ES:SI], AL

    ROL AL, 1
    ROL AL, 1

    ADD DI, 80
    ADD SI, 80
    MOV [ES:DI], AL ; Third row
    MOV [ES:SI], AL

    XOR DI, 2000h
    XOR SI, 2000h

    ROL AL, 1
    ROL AL, 1

    MOV [ES:DI], AL ; 4th row
    MOV [ES:SI], AL

    SUB DI, 80
    SUB SI, 80

    ROL AL, 1
    ROL AL, 1

    MOV [ES:DI], AL ; Second row
    MOV [ES:SI], AL

    XOR DI, 2000h
    XOR SI, 2000h

    ROL AL, 1      ; Rotate 4px pattern
    ROL AL, 1

    INC DI
    INC SI

    LOOP .nextColumn

    ; Draw left and right borders
 verticalBorder:
    MOV CX, 99    ; 100*2 scanlines

    MOV AL, 0DBh

    MOV DI, 2000h

 .nextRow:
    MOV [ES:DI], AL ; left odd scanline

    ADD DI, 79
    MOV [ES:DI], AL ; right odd scanline

    ADD DI, 80
    XOR DI, 2000h
    MOV [ES:DI], AL ; right even scanline

    SUB DI, 79
    MOV [ES:DI], AL ; left even scanline

    OR DI, 2000h

    ; Creates a cool barber shop pole pattern
    ROL AL, 1
    ROL AL, 1

    LOOP .nextRow

; -------------------------------
;    Main program loop start
; 
mainLoop:

    CALL movePlayers      ; Do player movement logic

    CALL drawPlayers      ; Render new player locations

    CALL checkKeyPress    ; Get user input

    MOV CX, 2             ; Wait 2 VBlanks between frames (~15 fps)
    CALL waitVBlank       ; So we don't get runaway speed on fast CPUs

    JMP mainLoop

; End Main Loop


; CGA Mode 4 reference
; https://www.chibialiens.com/8086/platform.php#LessonP1

; -----------------------------------
;     Draw players on the screen
;  Also checks for player collisions

drawPlayers:

    ; Draw Player 1
    MOV DI, [p1Location]
    MOV CL, [p1Offset]
    SHL CL, 1        ; CL *= 2 because 2 bits per pixel

    MOV DL, 03h      ; 1 pixel CGA bitmask (0000 0011b)
    SHL DL, CL       ; Shift to correct pixel offset

    TEST [ES:DI], DL ; Check if something already passed here
    JNZ .P1Collision

    AND DL, _P1MASK  ; Use mask to set DL to P1 color
    OR [ES:DI], DL   ; Draw to screen


    ; Draw Player 2
    MOV DI, [p2Location]
    MOV CL, [p2Offset]
    SHL CL, 1        ; CL *= 2 because 2 bits per pixel

    MOV DL, 03h      ; 1 pixel bitmask
    SHL DL, CL


    TEST [ES:DI], DL ; Check if something already passed here
    JNZ .P2Collision

    AND DL, _P2MASK  ; Use mask to set DL to P1 color
    OR [ES:DI], DL  ; Draw to screen

    RET

 .P1Collision:
    JMP end

 .P2Collision:
    JMP end



; -------------------
;  Move the players

movePlayers:

 ; Move player 1
 moveP1:
    MOV BL, [p1Direction]

 .left:
    CMP BL, _LEFT
    JNE .right

    INC BYTE [p1Offset]
    AND BYTE [p1Offset], 03h ; Only using 2 bits for offset (4px per byte)
    JNZ .done

    DEC WORD [p1Location]
    JMP .done

 .right:
    CMP BL, _RIGHT
    JNE .down

    DEC BYTE [p1Offset]
    TEST BYTE [p1Offset], 0FCh
    JZ .done

    MOV [p1Offset], BYTE 03h  ; 4 pixels per byte (offset 0-3)
    INC WORD [p1Location]
    JMP .done

 .down:
    CMP BL, _DOWN
    JNE .up

    MOV BX, [p1Location]

    TEST BX, 2000h ; Check if we're odd or even scanline
    JZ .skipAdd
    ADD BX, 80

  .skipAdd:
    XOR BX, 2000h  ; Toggle odd/even scanline bit
    MOV [p1Location], BX
    JMP .done

 .up:
    ;CMP BL, _UP  ; Up direction assumed as last-case
    ;JNE .done

    MOV BX, [p1Location]

    TEST BX, 2000h
    JNZ .skipSub
    SUB BX, 80

  .skipSub:
    XOR BX, 2000h
    MOV [p1Location], BX

 .done:

 ; Move player 2
 moveP2:
    MOV BL, [p2Direction]

 .left:
    CMP BL, _LEFT
    JNE .right

    INC BYTE [p2Offset]
    AND BYTE [p2Offset], 03h ; Only using 2 bits for offset (4px per byte)
    JNZ .done

    DEC WORD [p2Location]
    JMP .done

 .right:
    CMP BL, _RIGHT
    JNE .down

    DEC BYTE [p2Offset]
    TEST BYTE [p2Offset], 0FCh
    JZ .done

    MOV [p2Offset], BYTE 03h  ; 4 pixels per byte (offset 0-3)
    INC WORD [p2Location]
    JMP .done

 .down:
    CMP BL, _DOWN
    JNE .up

    MOV BX, [p2Location]

    TEST BX, 2000h ; Check if we're odd or even scanline
    JZ .skipAdd
    ADD BX, 80

  .skipAdd:
    XOR BX, 2000h  ; Toggle odd/even scanline bit
    MOV [p2Location], BX
    JMP .done

 .up:
    ;CMP BL, _UP  ; Up direction assumed as last-case
    ;JNE .done

    MOV BX, [p2Location]

    TEST BX, 2000h
    JNZ .skipSub
    SUB BX, 80

  .skipSub:
    XOR BX, 2000h
    MOV [p2Location], BX

 .done:
    RET


; ---------------------------------------
; Read and parse keyboard input

checkKeyPress:
    MOV AX, 0100h ; Keyboard check for keystroke
    INT 16h

    JNZ checkKeyCode ; ZF not set if key is available
    RET

checkKeyCode:
    XOR AX, AX    ; Get keystroke and remove from buffer
    INT 16h       ; AH = Scancode, AL = ASCII char

 ; --------------------------------------
 ;            Global Keys
 .checkEsc:
    CMP AH, 1  ; Esc key
    JE end

 .checkPause:
    CMP AH, 25 ; P key
    JNE .isPaused

    NOT BYTE [paused] ; flip pause flag

  .isPaused:
    TEST [paused], BYTE 1
    JNE checkKeyCode   ; Keep looping until pause key hit again

 ; --------------------------------------
 ;            P1 controls
 .checkUp:
    CMP AH, 72 ; up arrow
    JNE .checkDown

    CMP [p1Direction], BYTE _DOWN   ; Do not allow to backtrack
    JE .doneKeys

    MOV [p1Direction], BYTE _UP    

 .checkDown:
    CMP AH, 80 ; down arrow
    JNE .checkLeft

    CMP [p1Direction], BYTE _UP     ; Do not allow to backtrack
    JE .doneKeys

    MOV [p1Direction], BYTE _DOWN    

 .checkLeft:
    CMP AH, 75 ; left arrow
    JNE .checkRight

    CMP [p1Direction], BYTE _RIGHT  ; Do not allow to backtrack
    JE .doneKeys

    MOV [p1Direction], BYTE _LEFT

 .checkRight:
    CMP AH, 77 ; right arrow
    JNE .checkW

    CMP [p1Direction], BYTE _LEFT   ; Do not allow to backtrack
    JE .doneKeys

    MOV [p1Direction], BYTE _RIGHT

 ; --------------------------------------
 ;            P2 controls
 .checkW:
    CMP AH, 17 ; W key
    JNE .checkA

    CMP [p2Direction], BYTE _DOWN   ; Do not allow to backtrack
    JE .doneKeys

    MOV [p2Direction], BYTE _UP    

 .checkA:
    CMP AH, 30 ; A key
    JNE .checkS

    CMP [p2Direction], BYTE _RIGHT  ; Do not allow to backtrack
    JE .doneKeys

    MOV [p2Direction], BYTE _LEFT    

 .checkS:
    CMP AH, 31 ; S key
    JNE .checkD

    CMP [p2Direction], BYTE _UP     ; Do not allow to backtrack
    JE .doneKeys

    MOV [p2Direction], BYTE _DOWN

 .checkD:
    CMP AH, 32 ; D key
    JNE .doneKeys

    CMP [p2Direction], BYTE _LEFT   ; Do not allow to backtrack
    JE .doneKeys

    MOV [p2Direction], BYTE _RIGHT

 .doneKeys:

    JMP checkKeyPress ; Keep looping until kb buffer clear


; -----------------------------------------------
; Clears the keyboard buffer so we don't dump
; random key presses into the console when we
; quit the program
clearKBBuff:
    MOV AX, 0040h ; Buffer is at seg 0040h
    MOV DS, AX

                  ; To clear the buffer, set 
                  ; [0040:001A] = [0040:001C]
    MOV AL, BYTE [001Ch]
    MOV [001Ah], AL

    MOV AX, CS    ; Restore DS to CS
    MOV DS, AX
    RET


; ----------------------------------------------
; Pauses the program while it waits for 'n' vBlanks
; to pass.
;
; CX = 'n' vsyncs to wait for
; trashes: DX, AX, CX
waitVBlank:  
    MOV DX, 03DAh  ; port vsync pulse is sent to

  .waitVSync:
    IN AL, DX      ; read vsync status
    TEST AL, 8     ; when we read !8 from the port
    JNE .waitVSync ; vsync in progress

  .waitVBlank:
    IN AL, DX
    TEST AL, 8     ; when we read 8 from the port
    JE .waitVBlank ; vsync is done

    DEC CX         ; next vsync?
    JNZ waitVBlank
    RET    


; -----------------------------------------------
; Restore video state and terminate program
end:
    CALL clearKBBuff

    XOR AH, AH     ; Restore to initial video mode
    MOV AL, [CS:oldVideoState]
    INT 10h

    XOR AX, AX     ; Quit to DOS
    INT 21h



section .data

; Store DOS' video state at program's start
oldVideoState: db 03h

paused: DB 00h ; Variable to hold paused/unpaused state

; Player 1 direction & location
p1Direction: db _LEFT
p1Location:  dw 0FA0h-1 ; ptr to screen mem location
p1Offset:    db 03h   ; offset of which pixel in byte

; Player 2 direction & location
p2Direction: db _RIGHT
p2Location:  dw 0F50h+1 ; ptr to screen mem location
p2Offset:    db 04h   ; offset of which pixel in byte
"
i8KkdEF5,Untitled,Gampis,Lua,Saturday 20th of April 2024 08:23:32 PM CDT,"local turtleX = 15
local turtleY = 65
local turtleZ = 15

local Compass = {""W"", ""N"", ""E"", ""S""}

-- Direction = Compass index
local Direction = ""N""

-- -1 = RIGHT



local coords = {[""X""] = turtleX, [""Y""] = turtleY, [""Z""] = turtleZ}
local targetCoords = {[""X""] = 0, [""Y""] = 70, [""Z""] = 0}

function RotateToDirection(targetDirection)
    local CurrentDirectionIndex = 0
    local TargetDirectionIndex = 0

    for index, dir in pairs(Compass) do
        if dir == Direction then
            CurrentDirectionIndex = index
        end
    end

    for index, dir in pairs(Compass) do
        if dir == targetDirection then
            TargetDirectionIndex = index
        end
    end

    local diff = TargetDirectionIndex - CurrentDirectionIndex
    print(""Current Direction: "" .. Direction .. "". \n Current Direction Index: "" .. tostring(CurrentDirectionIndex))
    print(""Current Target Direction: "" .. targetDirection .. "". \n Current Target Direction Index: "" .. tostring(TargetDirectionIndex))
    print(""Current diff: "" .. tostring(diff))

    if diff == 0 then
        -- Already facing direction.
    elseif diff == 3 or diff == -3 then
        turtle.turnRight()
    elseif diff == -1 or diff == 1 then
        turtle.turnLeft()
    else
        turtle.turnRight()
        turtle.turnRight()
    end

    Direction = Compass[TargetDirectionIndex]
    
end

-- Move to correct Y
for y = coords.Y + 1, targetCoords.Y, 1 do
    local checkUp = turtle.inspectUp()
    if checkUp == false then
        turtle.up()
    else
        turtle.digUp()
        turtle.up()
    end
    coords[""Y""] = coords[""Y""] + 1
end

-- Move to correct X
if coords.X < targetCoords.X then
    RotateToDirection(""E"")
    for x = coords.X + 1, targetCoords.X, 1 do
        local check = turtle.inspect()
        if check == false then
            turtle.forward()
        else
            turtle.dig()
            turtle.forward()
        end
    end
else
    RotateToDirection(""W"")
    for x = coords.X - 1, targetCoords.X, -1 do
        local check = turtle.inspect()
        if check == false then
            turtle.forward()
        else
            turtle.dig()
            turtle.forward()
        end
    end
    
end
-- Move to correct Z
if coords.Z < targetCoords.Z then
    RotateToDirection(""S"")
    for z = coords.Z + 1, targetCoords.Z, 1 do
        local check = turtle.inspect()
        if check == false then
            turtle.forward()
        else
            turtle.dig()
            turtle.forward()
        end
    end
else
    RotateToDirection(""N"")
    for z = coords.Z - 1, targetCoords.Z, -1 do
        local check = turtle.inspect()
        if check == false then
            turtle.forward()
        else
            turtle.dig()
            turtle.forward()
        end
    end
end
"
6FfwGm41,fly,EasyDevX,Lua,Saturday 20th of April 2024 08:18:56 PM CDT,"-- Press X to fly

local plr = game.Players.LocalPlayer
	local mouse = plr:GetMouse()

	localplayer = plr

	if workspace:FindFirstChild(""Core"") then
		workspace.Core:Destroy()
	end

	local Core = Instance.new(""Part"")
	Core.Name = ""Core""
	Core.Size = Vector3.new(0.05, 0.05, 0.05)

	spawn(function()
		Core.Parent = workspace
		local Weld = Instance.new(""Weld"", Core)
		Weld.Part0 = Core
		Weld.Part1 = localplayer.Character.LowerTorso
		Weld.C0 = CFrame.new(0, 0, 0)
	end)

	workspace:WaitForChild(""Core"")

	local torso = workspace.Core
	flying = true
	local speed=10
	local keys={a=false,d=false,w=false,s=false}
	local e1
	local e2
	local function start()
		local pos = Instance.new(""BodyPosition"",torso)
		local gyro = Instance.new(""BodyGyro"",torso)
		pos.Name=""EPIXPOS""
		pos.maxForce = Vector3.new(math.huge, math.huge, math.huge)
		pos.position = torso.Position
		gyro.maxTorque = Vector3.new(9e9, 9e9, 9e9)
		gyro.cframe = torso.CFrame
		repeat
			wait()
			localplayer.Character.Humanoid.PlatformStand=true
			local new=gyro.cframe - gyro.cframe.p + pos.position
			if not keys.w and not keys.s and not keys.a and not keys.d then
				speed=5
			end
			if keys.w then
				new = new + workspace.CurrentCamera.CoordinateFrame.lookVector * speed
				speed=speed+0
			end
			if keys.s then
				new = new - workspace.CurrentCamera.CoordinateFrame.lookVector * speed
				speed=speed+0
			end
			if keys.d then
				new = new * CFrame.new(speed,0,0)
				speed=speed+0
			end
			if keys.a then
				new = new * CFrame.new(-speed,0,0)
				speed=speed+0
			end
			if speed>10 then
				speed=5
			end
			pos.position=new.p
			if keys.w then
				gyro.cframe = workspace.CurrentCamera.CoordinateFrame*CFrame.Angles(-math.rad(speed*0),0,0)
			elseif keys.s then
				gyro.cframe = workspace.CurrentCamera.CoordinateFrame*CFrame.Angles(math.rad(speed*0),0,0)
			else
				gyro.cframe = workspace.CurrentCamera.CoordinateFrame
			end
		until flying == false
		if gyro then gyro:Destroy() end
		if pos then pos:Destroy() end
		flying=false
		localplayer.Character.Humanoid.PlatformStand=false
		speed=10
	end
	e1=mouse.KeyDown:connect(function(key)
		if not torso or not torso.Parent then flying=false e1:disconnect() e2:disconnect() return end
		if key==""w"" then
			keys.w=true
		elseif key==""s"" then
			keys.s=true
		elseif key==""a"" then
			keys.a=true
		elseif key==""d"" then
			keys.d=true
		elseif key==""x"" then
			if flying==true then
				flying=false
			else
				flying=true
				start()
			end
		end
	end)
	e2=mouse.KeyUp:connect(function(key)
		if key==""w"" then
			keys.w=false
		elseif key==""s"" then
			keys.s=false
		elseif key==""a"" then
			keys.a=false
		elseif key==""d"" then
			keys.d=false
		end
	end)
	start()"
x2aw1XfU,MysteryBoxes - effects.yml,xeRicker,YAML,Saturday 20th of April 2024 07:28:52 PM CDT,"# ‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†
# ‚ñ† ‚ñë‚ñà‚ñÄ‚ñÑ‚ñÄ‚ñà ‚ñë‚ñà‚îÄ‚îÄ‚ñë‚ñà ‚ñë‚ñà‚ñÄ‚ñÄ‚ñÄ‚ñà ‚ñÄ‚ñÄ‚ñà‚ñÄ‚ñÄ ‚ñë‚ñà‚ñÄ‚ñÄ‚ñÄ ‚ñë‚ñà‚ñÄ‚ñÄ‚ñà ‚ñë‚ñà‚îÄ‚îÄ‚ñë‚ñà ‚ñë‚ñà‚ñÄ‚ñÄ‚ñà ‚ñë‚ñà‚ñÄ‚ñÄ‚ñÄ‚ñà ‚ñÄ‚ñÑ‚ñë‚ñÑ‚ñÄ ‚ñë‚ñà‚ñÄ‚ñÄ‚ñÄ ‚ñë‚ñà‚ñÄ‚ñÄ‚ñÄ‚ñà             ‚ñ†
# ‚ñ† ‚ñë‚ñà‚ñë‚ñà‚ñë‚ñà ‚ñë‚ñà‚ñÑ‚ñÑ‚ñÑ‚ñà ‚îÄ‚ñÄ‚ñÄ‚ñÄ‚ñÑ‚ñÑ ‚îÄ‚ñë‚ñà‚îÄ‚îÄ ‚ñë‚ñà‚ñÄ‚ñÄ‚ñÄ ‚ñë‚ñà‚ñÑ‚ñÑ‚ñÄ ‚ñë‚ñà‚ñÑ‚ñÑ‚ñÑ‚ñà ‚ñë‚ñà‚ñÄ‚ñÄ‚ñÑ ‚ñë‚ñà‚îÄ‚îÄ‚ñë‚ñà ‚îÄ‚ñë‚ñà‚îÄ‚îÄ ‚ñë‚ñà‚ñÄ‚ñÄ‚ñÄ ‚îÄ‚ñÄ‚ñÄ‚ñÄ‚ñÑ‚ñÑ             ‚ñ†
# ‚ñ† ‚ñë‚ñà‚îÄ‚îÄ‚ñë‚ñà ‚îÄ‚îÄ‚ñë‚ñà‚îÄ‚îÄ ‚ñë‚ñà‚ñÑ‚ñÑ‚ñÑ‚ñà ‚îÄ‚ñë‚ñà‚îÄ‚îÄ ‚ñë‚ñà‚ñÑ‚ñÑ‚ñÑ ‚ñë‚ñà‚îÄ‚ñë‚ñà ‚îÄ‚îÄ‚ñë‚ñà‚îÄ‚îÄ ‚ñë‚ñà‚ñÑ‚ñÑ‚ñà ‚ñë‚ñà‚ñÑ‚ñÑ‚ñÑ‚ñà ‚ñÑ‚ñÄ‚ñë‚ñÄ‚ñÑ ‚ñë‚ñà‚ñÑ‚ñÑ‚ñÑ ‚ñë‚ñà‚ñÑ‚ñÑ‚ñÑ‚ñà BY XERICKER ‚ñ†
# ‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†

# ‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢
# You can create as many effects as you want by simply copying and pasting the existing effects.
# Add the effects to various loot files under the ""effects-settings"" section.
# ‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢
# HOW TO CREATE A CUSTOM EFFECT
#   1. Copy an already existing effect of your choice.
#   2. Change its ID (e.g., ""common-confetti"").
#   3. Adjust the settings to your own preferences.
#   4. Add the effect to loot of your choice under the ""effects-settings"" section.
# ‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢
# CONFETTI & POPPER EFFECTS
#   duration: How long the effect lasts.
#   item-builder: Customize the item dropped.
# ‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢
# FIREWORK SHOW EFFECT
#   fireworks: How many fireworks are spawned.
#   period: How quickly fireworks spawn apart from each other.
# ‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢

# ‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢
# HOW TO CREATE FIREWORKS USING THE FIREWORK BUILDER:
# - type{Firework Type}: The type of the firework.
# - flicker{true/false}: If true, the firework will flicker.
# - trail{true/false}: If true, the firework will have a trail.
# - p{value}: The power of the firework. A value of 0 makes it explode instantly.
# - c{Colors...}: Colors either from the Bukkit color constants (e.g., YELLOW, WHITE) or RGB colors using the format ""rgb(r,g,b)"", separated by commas.
# - f{Colors...}: Fade colors of the firework. Uses the same format as ""c{Colors...}"".
# Example: ""type{STAR} | flicker{false} | trail{false} | p{0} | c{WHITE} | f{WHITE,rgb(255,255,255)}""
# ‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢

common-confetti:
  effect-type: CONFETTI
  duration: 2
  item-builder:
    type: AMETHYST_SHARD
    amount: 1
    durability: 0
    model: 0
    head: """"
    glow: false
    potion-effects:
    apply-tags:
      - ""key;value""
    apply-enchants:

common-spiral-popper:
  effect-type: SPIRAL_POPPER
  duration: 2
  item-builder:
    type: AMETHYST_SHARD
    amount: 1
    durability: 0
    model: 0
    head: """"
    glow: false
    potion-effects:
    apply-tags:
      - ""key;value""
    apply-enchants:

common-firework-show:
  effect-type: FIREWORK_SHOW
  fireworks: 10
  period: 4
  firework-builder:
    - ""type{STAR} | flicker{false} | trail{false} | p{0} | c{WHITE} | f{WHITE,rgb(255,255,255)}"""
xbNUtzX7,2024-04-20_stats.json,rdp_snitch,JSON,Saturday 20th of April 2024 07:18:12 PM CDT,"{
  ""ip"": {
    ""45.227.254.9"": 9,
    ""58.218.204.183"": 9,
    ""43.229.150.237"": 30,
    ""167.94.146.50"": 3,
    ""198.235.24.125"": 9,
    ""159.65.82.237"": 2058,
    ""179.60.147.124"": 6,
    ""62.204.41.225"": 6,
    ""152.32.183.213"": 1407,
    ""91.238.181.16"": 6,
    ""185.170.144.3"": 3,
    ""194.165.16.76"": 6,
    ""152.32.228.20"": 3,
    ""123.56.20.194"": 3,
    ""198.235.24.193"": 9,
    ""87.251.75.120"": 6,
    ""176.109.107.179"": 3,
    ""212.41.9.9"": 9,
    ""165.22.143.203"": 12,
    ""45.79.93.199"": 3,
    ""87.251.75.145"": 6,
    ""36.91.222.100"": 6,
    ""196.190.117.7"": 6,
    ""89.117.76.105"": 6,
    ""87.251.67.195"": 9,
    ""43.158.217.16"": 3,
    ""84.17.46.220"": 3,
    ""198.235.24.208"": 9,
    ""87.251.75.64"": 3,
    ""202.27.212.51"": 24,
    ""194.165.16.78"": 6,
    ""45.141.84.154"": 9,
    ""194.165.16.72"": 6,
    ""193.53.245.249"": 3,
    ""112.4.139.162"": 3,
    ""198.235.24.185"": 9,
    ""199.45.154.55"": 3,
    ""206.168.34.36"": 3,
    ""116.140.196.215"": 3
  },
  ""asn"": {
    ""AS267784"": 9,
    ""AS4134"": 9,
    ""AS56309"": 30,
    ""AS398705"": 3,
    ""AS396982"": 36,
    ""AS14061"": 2070,
    ""AS209588"": 6,
    ""AS59425"": 6,
    ""AS135377"": 1410,
    ""AS49434"": 6,
    ""AS197414"": 3,
    ""AS48721"": 18,
    ""AS37963"": 3,
    ""AS208091"": 24,
    ""AS208677"": 3,
    ""AS49505"": 9,
    ""AS63949"": 3,
    ""AS7713"": 6,
    ""AS24757"": 6,
    ""AS40021"": 6,
    ""AS132203"": 3,
    ""AS60068"": 3,
    ""AS134673"": 24,
    ""AS206728"": 9,
    ""AS209711"": 3,
    ""AS56046"": 3,
    ""AS398722"": 3,
    ""AS398324"": 3,
    ""AS4837"": 3
  },
  ""isp"": {
    ""Flyservers S.A."": 33,
    ""Chinanet"": 9,
    ""Siamdata Communication Co., ltd."": 30,
    ""Censys, Inc."": 9,
    ""Google LLC"": 36,
    ""DigitalOcean, LLC"": 2070,
    ""Horizon LLC"": 6,
    ""UCLOUD INFORMATION TECHNOLOGY (HK) LIMITED"": 1410,
    ""Datacenter location PAR1 France"": 6,
    ""Xhost Internet Solutions LP"": 27,
    ""Hangzhou Alibaba Advertising Co"": 3,
    ""\""Cloud Technologies\"" LLC trading as Cloud.ru"": 3,
    ""OOO \""Network of data-centers \""Selectel\"""": 9,
    ""Akamai Technologies, Inc."": 3,
    ""PT Telekomunikasi Indonesia"": 6,
    ""Ethiotelecom"": 6,
    ""Nubes, LLC"": 6,
    ""Shenzhen Tencent Computer Systems Company Limited"": 3,
    ""DataCamp Limited"": 3,
    ""Devoli LTD"": 24,
    ""Media Land LLC"": 9,
    ""MUV Bilisim ve Telekomunikasyon Hizmetleri Ltd. Sti"": 3,
    ""China Mobile Communications Corporation"": 3,
    ""China Unicom CHINA169 Network"": 3
  },
  ""org"": {
    ""UAB Host Baltic"": 9,
    ""Chinanet JS"": 9,
    ""ReadyIDC"": 30,
    ""Censys, Inc."": 6,
    ""Palo Alto Networks, Inc"": 36,
    ""DigitalOcean, LLC"": 2070,
    ""Cloud Solutions S.A"": 6,
    ""Horizon LLC"": 6,
    ""Ucloud Information Technology"": 1410,
    ""ThinkTech Technology Industrial CO. Limited"": 6,
    ""Xhostis"": 3,
    ""Flyservers S.A"": 18,
    ""Aliyun Computing Co., LTD"": 3,
    ""Xhost Internet Solutions"": 24,
    ""Sbercloud"": 3,
    ""Unknown"": 15,
    ""Linode"": 3,
    ""Telekomunikasi Indonesia"": 6,
    ""Lrtc Inetnum Rent"": 6,
    ""Tencent Cloud Computing"": 3,
    ""Cdn77 AMS"": 3,
    ""The Digital Lab 2007 Limited"": 24,
    ""MediaLand"": 9,
    ""MUVHost - Vodafone Tuzla"": 3,
    ""China Mobile Communications Corporation"": 3,
    ""Censys Inc"": 3,
    ""China United Network Communications Corporation Limited"": 3
  },
  ""regionName"": {
    ""Vilnius"": 9,
    ""Jiangsu"": 12,
    ""Nonthaburi"": 30,
    ""Hesse"": 3,
    ""California"": 51,
    ""England"": 2058,
    ""Distrito Federal"": 6,
    ""Moscow"": 30,
    ""Virginia"": 1407,
    ""\u00cele-de-France"": 6,
    ""North Holland"": 21,
    ""Kaunas"": 18,
    ""Beijing"": 6,
    ""Jakarta"": 6,
    ""Addis Ababa"": 6,
    ""New York"": 9,
    ""Lower Silesia"": 9,
    ""Maharashtra"": 3,
    ""Gisborne"": 24,
    ""Istanbul"": 3,
    ""Illinois"": 3
  },
  ""country"": {
    ""Lithuania"": 27,
    ""China"": 18,
    ""Thailand"": 30,
    ""Germany"": 3,
    ""United States"": 1470,
    ""United Kingdom"": 2058,
    ""Venezuela"": 6,
    ""Russia"": 30,
    ""France"": 6,
    ""The Netherlands"": 21,
    ""Indonesia"": 6,
    ""Ethiopia"": 6,
    ""Poland"": 9,
    ""India"": 3,
    ""New Zealand"": 24,
    ""Turkey"": 3
  },
  ""account"": {
    ""Domain"": 36,
    ""hello"": 81,
    ""(empty)"": 15,
    ""kwGgkzRAU"": 3,
    ""PvlEHl"": 3,
    ""ewMpao"": 3,
    ""Administrator"": 519,
    ""Admin"": 510,
    ""Administr"": 24,
    ""Whatuptime.com"": 534,
    ""Test"": 42,
    ""Jakartakini123#"": 531,
    ""Hello World"": 525,
    ""TinHocThucHanh"": 531,
    ""Hey"": 318,
    ""beYrgk"": 3,
    ""FUCYDoaME"": 3,
    ""eHsTQk"": 3,
    ""la37ugyr"": 12,
    ""beio"": 3,
    ""pamn"": 3,
    ""BYXvxPRWH"": 3,
    ""QPBOtw"": 3,
    ""pLgfus"": 3,
    ""RMRYBPiEn"": 3,
    ""JyOqVR"": 3,
    ""IxrshN"": 3
  },
  ""keyboard"": {
    ""Unknown"": 3720
  },
  ""client_build"": {
    ""Unknown"": 3720
  },
  ""client_name"": {
    ""Unknown"": 3720
  },
  ""ip_type"": {
    ""Unknown"": 129,
    ""proxy"": 9,
    ""mobile & hosting"": 30,
    ""hosting"": 1470,
    ""hosting & proxy"": 2073,
    ""mobile"": 9
  }
}"
M1yjM6qM,2024-04-20_stats.json,rdp_snitch,JSON,Saturday 20th of April 2024 07:16:12 PM CDT,"{
  ""ip"": {
    ""45.227.254.9"": 6,
    ""58.218.204.183"": 6,
    ""43.229.150.237"": 20,
    ""167.94.146.50"": 2,
    ""198.235.24.125"": 6,
    ""159.65.82.237"": 1372,
    ""179.60.147.124"": 4,
    ""62.204.41.225"": 4,
    ""152.32.183.213"": 938,
    ""91.238.181.16"": 4,
    ""185.170.144.3"": 2,
    ""194.165.16.76"": 4,
    ""152.32.228.20"": 2,
    ""123.56.20.194"": 2,
    ""198.235.24.193"": 6,
    ""87.251.75.120"": 4,
    ""176.109.107.179"": 2,
    ""212.41.9.9"": 6,
    ""165.22.143.203"": 8,
    ""45.79.93.199"": 2,
    ""87.251.75.145"": 4,
    ""36.91.222.100"": 4,
    ""196.190.117.7"": 4,
    ""89.117.76.105"": 4,
    ""87.251.67.195"": 6,
    ""43.158.217.16"": 2,
    ""84.17.46.220"": 2,
    ""198.235.24.208"": 6,
    ""87.251.75.64"": 2,
    ""202.27.212.51"": 16,
    ""194.165.16.78"": 4,
    ""45.141.84.154"": 6,
    ""194.165.16.72"": 4,
    ""193.53.245.249"": 2,
    ""112.4.139.162"": 2,
    ""198.235.24.185"": 6,
    ""199.45.154.55"": 2,
    ""206.168.34.36"": 2,
    ""116.140.196.215"": 2
  },
  ""asn"": {
    ""AS267784"": 6,
    ""AS4134"": 6,
    ""AS56309"": 20,
    ""AS398705"": 2,
    ""AS396982"": 24,
    ""AS14061"": 1380,
    ""AS209588"": 4,
    ""AS59425"": 4,
    ""AS135377"": 940,
    ""AS49434"": 4,
    ""AS197414"": 2,
    ""AS48721"": 12,
    ""AS37963"": 2,
    ""AS208091"": 16,
    ""AS208677"": 2,
    ""AS49505"": 6,
    ""AS63949"": 2,
    ""AS7713"": 4,
    ""AS24757"": 4,
    ""AS40021"": 4,
    ""AS132203"": 2,
    ""AS60068"": 2,
    ""AS134673"": 16,
    ""AS206728"": 6,
    ""AS209711"": 2,
    ""AS56046"": 2,
    ""AS398722"": 2,
    ""AS398324"": 2,
    ""AS4837"": 2
  },
  ""isp"": {
    ""Flyservers S.A."": 22,
    ""Chinanet"": 6,
    ""Siamdata Communication Co., ltd."": 20,
    ""Censys, Inc."": 6,
    ""Google LLC"": 24,
    ""DigitalOcean, LLC"": 1380,
    ""Horizon LLC"": 4,
    ""UCLOUD INFORMATION TECHNOLOGY (HK) LIMITED"": 940,
    ""Datacenter location PAR1 France"": 4,
    ""Xhost Internet Solutions LP"": 18,
    ""Hangzhou Alibaba Advertising Co"": 2,
    ""\""Cloud Technologies\"" LLC trading as Cloud.ru"": 2,
    ""OOO \""Network of data-centers \""Selectel\"""": 6,
    ""Akamai Technologies, Inc."": 2,
    ""PT Telekomunikasi Indonesia"": 4,
    ""Ethiotelecom"": 4,
    ""Nubes, LLC"": 4,
    ""Shenzhen Tencent Computer Systems Company Limited"": 2,
    ""DataCamp Limited"": 2,
    ""Devoli LTD"": 16,
    ""Media Land LLC"": 6,
    ""MUV Bilisim ve Telekomunikasyon Hizmetleri Ltd. Sti"": 2,
    ""China Mobile Communications Corporation"": 2,
    ""China Unicom CHINA169 Network"": 2
  },
  ""org"": {
    ""UAB Host Baltic"": 6,
    ""Chinanet JS"": 6,
    ""ReadyIDC"": 20,
    ""Censys, Inc."": 4,
    ""Palo Alto Networks, Inc"": 24,
    ""DigitalOcean, LLC"": 1380,
    ""Cloud Solutions S.A"": 4,
    ""Horizon LLC"": 4,
    ""Ucloud Information Technology"": 940,
    ""ThinkTech Technology Industrial CO. Limited"": 4,
    ""Xhostis"": 2,
    ""Flyservers S.A"": 12,
    ""Aliyun Computing Co., LTD"": 2,
    ""Xhost Internet Solutions"": 16,
    ""Sbercloud"": 2,
    ""Unknown"": 10,
    ""Linode"": 2,
    ""Telekomunikasi Indonesia"": 4,
    ""Lrtc Inetnum Rent"": 4,
    ""Tencent Cloud Computing"": 2,
    ""Cdn77 AMS"": 2,
    ""The Digital Lab 2007 Limited"": 16,
    ""MediaLand"": 6,
    ""MUVHost - Vodafone Tuzla"": 2,
    ""China Mobile Communications Corporation"": 2,
    ""Censys Inc"": 2,
    ""China United Network Communications Corporation Limited"": 2
  },
  ""regionName"": {
    ""Vilnius"": 6,
    ""Jiangsu"": 8,
    ""Nonthaburi"": 20,
    ""Hesse"": 2,
    ""California"": 34,
    ""England"": 1372,
    ""Distrito Federal"": 4,
    ""Moscow"": 20,
    ""Virginia"": 938,
    ""\u00cele-de-France"": 4,
    ""North Holland"": 14,
    ""Kaunas"": 12,
    ""Beijing"": 4,
    ""Jakarta"": 4,
    ""Addis Ababa"": 4,
    ""New York"": 6,
    ""Lower Silesia"": 6,
    ""Maharashtra"": 2,
    ""Gisborne"": 16,
    ""Istanbul"": 2,
    ""Illinois"": 2
  },
  ""country"": {
    ""Lithuania"": 18,
    ""China"": 12,
    ""Thailand"": 20,
    ""Germany"": 2,
    ""United States"": 980,
    ""United Kingdom"": 1372,
    ""Venezuela"": 4,
    ""Russia"": 20,
    ""France"": 4,
    ""The Netherlands"": 14,
    ""Indonesia"": 4,
    ""Ethiopia"": 4,
    ""Poland"": 6,
    ""India"": 2,
    ""New Zealand"": 16,
    ""Turkey"": 2
  },
  ""account"": {
    ""Domain"": 24,
    ""hello"": 54,
    ""(empty)"": 10,
    ""kwGgkzRAU"": 2,
    ""PvlEHl"": 2,
    ""ewMpao"": 2,
    ""Administrator"": 346,
    ""Admin"": 340,
    ""Administr"": 16,
    ""Whatuptime.com"": 356,
    ""Test"": 28,
    ""Jakartakini123#"": 354,
    ""Hello World"": 350,
    ""TinHocThucHanh"": 354,
    ""Hey"": 212,
    ""beYrgk"": 2,
    ""FUCYDoaME"": 2,
    ""eHsTQk"": 2,
    ""la37ugyr"": 8,
    ""beio"": 2,
    ""pamn"": 2,
    ""BYXvxPRWH"": 2,
    ""QPBOtw"": 2,
    ""pLgfus"": 2,
    ""RMRYBPiEn"": 2,
    ""JyOqVR"": 2,
    ""IxrshN"": 2
  },
  ""keyboard"": {
    ""Unknown"": 2480
  },
  ""client_build"": {
    ""Unknown"": 2480
  },
  ""client_name"": {
    ""Unknown"": 2480
  },
  ""ip_type"": {
    ""Unknown"": 86,
    ""proxy"": 6,
    ""mobile & hosting"": 20,
    ""hosting"": 980,
    ""hosting & proxy"": 1382,
    ""mobile"": 6
  }
}"
HMD8ip3f,2024-04-20_stats.json,rdp_snitch,JSON,Saturday 20th of April 2024 07:15:09 PM CDT,"{
  ""ip"": {
    ""45.227.254.9"": 3,
    ""58.218.204.183"": 3,
    ""43.229.150.237"": 10,
    ""167.94.146.50"": 1,
    ""198.235.24.125"": 3,
    ""159.65.82.237"": 686,
    ""179.60.147.124"": 2,
    ""62.204.41.225"": 2,
    ""152.32.183.213"": 469,
    ""91.238.181.16"": 2,
    ""185.170.144.3"": 1,
    ""194.165.16.76"": 2,
    ""152.32.228.20"": 1,
    ""123.56.20.194"": 1,
    ""198.235.24.193"": 3,
    ""87.251.75.120"": 2,
    ""176.109.107.179"": 1,
    ""212.41.9.9"": 3,
    ""165.22.143.203"": 4,
    ""45.79.93.199"": 1,
    ""87.251.75.145"": 2,
    ""36.91.222.100"": 2,
    ""196.190.117.7"": 2,
    ""89.117.76.105"": 2,
    ""87.251.67.195"": 3,
    ""43.158.217.16"": 1,
    ""84.17.46.220"": 1,
    ""198.235.24.208"": 3,
    ""87.251.75.64"": 1,
    ""202.27.212.51"": 8,
    ""194.165.16.78"": 2,
    ""45.141.84.154"": 3,
    ""194.165.16.72"": 2,
    ""193.53.245.249"": 1,
    ""112.4.139.162"": 1,
    ""198.235.24.185"": 3,
    ""199.45.154.55"": 1,
    ""206.168.34.36"": 1,
    ""116.140.196.215"": 1
  },
  ""asn"": {
    ""AS267784"": 3,
    ""AS4134"": 3,
    ""AS56309"": 10,
    ""AS398705"": 1,
    ""AS396982"": 12,
    ""AS14061"": 690,
    ""AS209588"": 2,
    ""AS59425"": 2,
    ""AS135377"": 470,
    ""AS49434"": 2,
    ""AS197414"": 1,
    ""AS48721"": 6,
    ""AS37963"": 1,
    ""AS208091"": 8,
    ""AS208677"": 1,
    ""AS49505"": 3,
    ""AS63949"": 1,
    ""AS7713"": 2,
    ""AS24757"": 2,
    ""AS40021"": 2,
    ""AS132203"": 1,
    ""AS60068"": 1,
    ""AS134673"": 8,
    ""AS206728"": 3,
    ""AS209711"": 1,
    ""AS56046"": 1,
    ""AS398722"": 1,
    ""AS398324"": 1,
    ""AS4837"": 1
  },
  ""isp"": {
    ""Flyservers S.A."": 11,
    ""Chinanet"": 3,
    ""Siamdata Communication Co., ltd."": 10,
    ""Censys, Inc."": 3,
    ""Google LLC"": 12,
    ""DigitalOcean, LLC"": 690,
    ""Horizon LLC"": 2,
    ""UCLOUD INFORMATION TECHNOLOGY (HK) LIMITED"": 470,
    ""Datacenter location PAR1 France"": 2,
    ""Xhost Internet Solutions LP"": 9,
    ""Hangzhou Alibaba Advertising Co"": 1,
    ""\""Cloud Technologies\"" LLC trading as Cloud.ru"": 1,
    ""OOO \""Network of data-centers \""Selectel\"""": 3,
    ""Akamai Technologies, Inc."": 1,
    ""PT Telekomunikasi Indonesia"": 2,
    ""Ethiotelecom"": 2,
    ""Nubes, LLC"": 2,
    ""Shenzhen Tencent Computer Systems Company Limited"": 1,
    ""DataCamp Limited"": 1,
    ""Devoli LTD"": 8,
    ""Media Land LLC"": 3,
    ""MUV Bilisim ve Telekomunikasyon Hizmetleri Ltd. Sti"": 1,
    ""China Mobile Communications Corporation"": 1,
    ""China Unicom CHINA169 Network"": 1
  },
  ""org"": {
    ""UAB Host Baltic"": 3,
    ""Chinanet JS"": 3,
    ""ReadyIDC"": 10,
    ""Censys, Inc."": 2,
    ""Palo Alto Networks, Inc"": 12,
    ""DigitalOcean, LLC"": 690,
    ""Cloud Solutions S.A"": 2,
    ""Horizon LLC"": 2,
    ""Ucloud Information Technology"": 470,
    ""ThinkTech Technology Industrial CO. Limited"": 2,
    ""Xhostis"": 1,
    ""Flyservers S.A"": 6,
    ""Aliyun Computing Co., LTD"": 1,
    ""Xhost Internet Solutions"": 8,
    ""Sbercloud"": 1,
    ""Unknown"": 5,
    ""Linode"": 1,
    ""Telekomunikasi Indonesia"": 2,
    ""Lrtc Inetnum Rent"": 2,
    ""Tencent Cloud Computing"": 1,
    ""Cdn77 AMS"": 1,
    ""The Digital Lab 2007 Limited"": 8,
    ""MediaLand"": 3,
    ""MUVHost - Vodafone Tuzla"": 1,
    ""China Mobile Communications Corporation"": 1,
    ""Censys Inc"": 1,
    ""China United Network Communications Corporation Limited"": 1
  },
  ""regionName"": {
    ""Vilnius"": 3,
    ""Jiangsu"": 4,
    ""Nonthaburi"": 10,
    ""Hesse"": 1,
    ""California"": 17,
    ""England"": 686,
    ""Distrito Federal"": 2,
    ""Moscow"": 10,
    ""Virginia"": 469,
    ""\u00cele-de-France"": 2,
    ""North Holland"": 7,
    ""Kaunas"": 6,
    ""Beijing"": 2,
    ""Jakarta"": 2,
    ""Addis Ababa"": 2,
    ""New York"": 3,
    ""Lower Silesia"": 3,
    ""Maharashtra"": 1,
    ""Gisborne"": 8,
    ""Istanbul"": 1,
    ""Illinois"": 1
  },
  ""country"": {
    ""Lithuania"": 9,
    ""China"": 6,
    ""Thailand"": 10,
    ""Germany"": 1,
    ""United States"": 490,
    ""United Kingdom"": 686,
    ""Venezuela"": 2,
    ""Russia"": 10,
    ""France"": 2,
    ""The Netherlands"": 7,
    ""Indonesia"": 2,
    ""Ethiopia"": 2,
    ""Poland"": 3,
    ""India"": 1,
    ""New Zealand"": 8,
    ""Turkey"": 1
  },
  ""account"": {
    ""Domain"": 12,
    ""hello"": 27,
    ""(empty)"": 5,
    ""kwGgkzRAU"": 1,
    ""PvlEHl"": 1,
    ""ewMpao"": 1,
    ""Administrator"": 173,
    ""Admin"": 170,
    ""Administr"": 8,
    ""Whatuptime.com"": 178,
    ""Test"": 14,
    ""Jakartakini123#"": 177,
    ""Hello World"": 175,
    ""TinHocThucHanh"": 177,
    ""Hey"": 106,
    ""beYrgk"": 1,
    ""FUCYDoaME"": 1,
    ""eHsTQk"": 1,
    ""la37ugyr"": 4,
    ""beio"": 1,
    ""pamn"": 1,
    ""BYXvxPRWH"": 1,
    ""QPBOtw"": 1,
    ""pLgfus"": 1,
    ""RMRYBPiEn"": 1,
    ""JyOqVR"": 1,
    ""IxrshN"": 1
  },
  ""keyboard"": {
    ""Unknown"": 1240
  },
  ""client_build"": {
    ""Unknown"": 1240
  },
  ""client_name"": {
    ""Unknown"": 1240
  },
  ""ip_type"": {
    ""Unknown"": 43,
    ""proxy"": 3,
    ""mobile & hosting"": 10,
    ""hosting"": 490,
    ""hosting & proxy"": 691,
    ""mobile"": 3
  }
}"
fC6T5tVU,fearless-concurrency,fooker,Rust,Saturday 20th of April 2024 05:56:06 PM CDT,"use std::{collections::HashMap, sync::Arc};

use mysql_async::{prelude::Queryable, Pool};
use axum::{
    extract::State, response::IntoResponse, routing::{get, post}, Json, Router
};
use serde::Deserialize;
use sha1::{Digest, Sha1};
use tokio::sync::{Mutex, RwLock};

#[derive(Clone)]
struct User {
    lock: Arc<Mutex<()>>,
    secret: u32
}

impl User {
    fn new() -> User {
        User {
            lock: Arc::new(Mutex::new(())),
            secret: rand::random::<u32>()
        }
    }
}

#[derive(Clone)]
struct AppState {
    users: Arc<RwLock<HashMap<u64, User>>>,
    pool: Arc<Pool>
}

impl AppState {
    fn new(pool: Pool) -> AppState {
        AppState { 
            users: Arc::new(RwLock::new(HashMap::new())),
            pool: Arc::new(pool)
        }
    }
}

#[tokio::main]
async fn main() {
    tracing_subscriber::fmt::init();

    let url = ""mysql://fearless_concurrency:fearless_concurrency@database:3306/fearless_concurrency"";

    let pool = Pool::new(url);

    let mut conn = pool.get_conn().await.unwrap();
    conn.exec_drop(""CREATE TABLE IF NOT EXISTS info (body varchar(255))"", ()).await.unwrap();
    conn.exec_drop(""INSERT INTO info VALUES ('Hello, world')"", ()).await.unwrap();

    let state = AppState::new(pool);
    let app = Router::new()
        .route(""/"", get(root))
        .route(""/register"", post(register))
        .route(""/query"", post(query))
        .route(""/flag"", post(flag))
        .with_state(state);

    let listener = tokio::net::TcpListener::bind(""0.0.0.0:3000"").await.unwrap();
    println!(""Listener started on port 3000"");
    axum::serve(listener, app).await.unwrap();
}

async fn root() -> &'static str {
    ""Hello, World!""
}

async fn register(State(state): State<AppState>) -> impl IntoResponse {
    let uid = rand::random::<u64>();
    let mut users = state.users.write().await;
    let user = User::new();
    users.insert(uid, user);
    uid.to_string()
}

#[derive(Deserialize)]
struct Query {
    user_id: u64,
    query_string: String
}

async fn query(State(state): State<AppState>, Json(body): Json<Query>) -> axum::response::Result<String> {
    let users = state.users.read().await;
    let user = users.get(&body.user_id).ok_or_else(|| ""User not found! Register first!"")?;
    let user = user.clone();

    // Prevent registrations from being blocked while query is running
    // Fearless concurrency :tm:
    drop(users);

    // Prevent concurrent access to the database!
    // Don't even try any race condition thingies
    // They don't exist in rust!
    let _lock = user.lock.lock().await;
    let mut conn = state.pool.get_conn().await.map_err(|_| ""Failed to acquire connection"")?;

    // Unguessable table name (requires knowledge of user id and random table id)
    let table_id = rand::random::<u32>();
    let mut hasher = Sha1::new();
    hasher.update(b""fearless_concurrency"");
    hasher.update(body.user_id.to_le_bytes());
    let table_name = format!(""tbl_{}_{}"", hex::encode(hasher.finalize()), table_id);

    let table_name = dbg!(table_name);
    let qs = dbg!(body.query_string);

    // Create temporary, unguessable table to store user secret
    conn.exec_drop(
        format!(""CREATE TABLE {} (secret int unsigned)"", table_name), ()
    ).await.map_err(|_| ""Failed to create table"")?;

    conn.exec_drop(
        format!(""INSERT INTO {} values ({})"", table_name, user.secret), ()
    ).await.map_err(|_| ""Failed to insert secret"")?;


    // Secret can't be leaked here since table name is unguessable!
    let res = conn.exec_first::<String, _, _>(
        format!(""SELECT * FROM info WHERE body LIKE '{}'"", qs),
        ()
    ).await;

    // You'll never get the secret!
    conn.exec_drop(
        format!(""DROP TABLE {}"", table_name), ()
    ).await.map_err(|_| ""Failed to drop table"")?;

    let res = res.map_err(|_| ""Failed to run query"")?;

    // _lock is automatically dropped when function exits, releasing the user lock

    if let Some(result) = res {
        return Ok(result);
    }
    Ok(String::from(""No results!""))
}


#[derive(Deserialize)]
struct ClaimFlag {
    user_id: u64,
    secret: u32
}

async fn flag(State(state): State<AppState>, Json(body): Json<ClaimFlag>)  -> axum::response::Result<String> {
    let users = state.users.read().await;
    let user = users.get(&body.user_id).ok_or_else(|| ""User not found! Register first!"")?;

    if user.secret == body.secret {
        return Ok(String::from(""grey{fake_flag_for_testing}""));
    }
    Ok(String::from(""Wrong!""))
}"
XQcueDES,webinar-exam-review-2024-04-20,jspill,Python,Saturday 20th of April 2024 04:54:25 PM CDT,"# Exam Review 2024 Apr 20

# Do those LABS
# Ch 2-14... all Labs!
# Ch 21-32 just ADDITIONAL LABS, but important practice!
# get to know the Prac Tests, Ch 33 and 34... more than the Pre

# Use Submit Mode and get them to 100%!!!
# PAY ATTENTION to the unit tests!
# ... then UNIT TEST more! Unit test, unit test, unit test!

# When you've gotten the Ch 33-34 Prac Tests to 100, go back and do each again.
# This time, try to think of 2-3 more unit tests that could be run on each question.

# Comp 1: Basic syntax and knowledge: operators, data types, etc
# Comp 2: Control Flow
# Comp 3: Modules and Files

# Comp 1: Basic syntax and knowledge: operators, data types, etc

# Data Types/Classes
# int
# float
# bool # True, False
# str # """"
# list # [ ]
# dict # {key:value}
# tuple # ( ) immutable, Python sees a,b,c as (a,b,c) --> return x,y,z --> return (x,y,z)
# set # { } no duplicate values, no order --> no indices, can't slice it, can't sort it or reverse
# range # range()... container of consecutive numbers
# file # open()... f.read(), f.readlines(), f.write()

# Operators
# = # assigns a value
# == # asking a question... result in Boolean value
# +
# -
# *
# /
# % # modulo... whole number remainder... ""how many things didn't fit since the last even division?""
# // # floor division... the last even division
# <
# >
# >=
# <=
# += # x += 1 --> x = x + 1
# -=
# ** # similar to pow() and math.pow()
# !=
# # keywords
# in # membership check... if x in myList
# not # if not x in myList:
# and
# or # any one True would cause the combo to be True... limit OR to 2-3 conditions

# Comp 2
# Control Flow! The how and when of our programs
# IF statements... if, if/else, if/elif, if/elif/else
# LOOPS
# WHILE - a general purpose loop, an IF that repeats
# FOR  - repeating actions a known number of times --> once for everything in the container
# FOR in Python is explicitly about a container: list, etc
# Check out my For Loops webinar in The Gotchas
# for ___ in _someContainer_:
# for item in myList:
# for char in myStr:
# for key in myDict: # for key, value in myDict.items()... or if k is the key, the value for that key is myDict[k]
# for n in range(0, someNum):
# for i in range(0, len(myList)):
# for i, item in enumerate(myList):

# FUNCTIONS
# defining/writing a function vs calling
# modular... a function has ONE specific job
# print/output or return (or maybe something else)
# parameters are special variables for holding stuff coming into the function
# parameters vs arguments

# def someFunction(x, y):
#     return x**y
#
# if __name__ == ""__main__"":  # is this script the one that's running?
#     input1 = int(input())
#     input2 = int(input())
#     myNum = someFunction(input1, input2)
#     print(myNum)

# See ""tasks"" in the last section of Ch 10, 11, 13, 14 for function writing practice
# CodingBat also has good function-based Python questions:
# https://codingbat.com/python

# Built-In Functions
# input()
# print()
# float()
# int()
# str()
# range()
# len()
# sum()
# min()
# max()
# type() # myVar = ""hi"", print(type(myVar).__name__)
# enumerate()
# pow()
# abs() # cousin math.fabs()
# round() cousins math.ceil(), math.floor()
# open()
# help()# help(str), help(str.isspace)
# dir() # print(dir(str))

# STRINGS
# be able to refer to indices, and to slice
# myStr = ""abcd""
# # mySlice[start:stop:step]
# revStr = myStr[::-1]
# print(revStr)

# KNOW YOUR WHITESPACE
"" "" # space from spacebar
# a lot of other spaces
""\n"" # new line return
""\t"" # tab
""\r"" # carriage return

# unless otherwise stated... printed output should end a new line return...
# 99% of the time it already does
# print(""hey"") --> print(""hey"", end=""\n"")
# we only need to change that when...
#1 ... this specific says to do something else
#2 ... you yourself overrode the end parameter of print() as the last thing you did... just call print() again after the loop

# STRING METHODS
# myStr.format() # ""Stuff I want to put {:formatting instr} and {:.2f} into my string"".format(var1, var2)
# myStr.strip()
# myStr.split() # returns a list of smaller strings
# "","".join(listOfStrings)
# myStr.replace(subStr, newStr) # ""remove"" myStr = myStr.replace(subStr, """")
# myStr.index(subStr) # return int index where found, or raise error
# myStr.find(subStr)  # return int index where found, or -1
# myStr.count(subStr) # return int count of how many times it's there
# case: .lower(), .upper(), .title(), .capitalize()
# is/Boolean: .islower(), .isupper(), .isspace(), .isalpha(), .isnumeric(), .isdigit(), .isalnum()
# myStr.startswith(subStr), myStr.endswith(subStr)

# LISTS
# be able to refer by index and to slice
# LIST METHODS
# +
# myList.append(item)
# myList.insert(i, item)
# myList.extend(anotherList)
# # -
# myList.pop(i) # pop() by index
# myList.remove(item) # remove() by value
# myList.clear()
# # other
# myList.sort()
# myList.reverse()
# myList.count(item) # returns num of times it's there
# myList.index(item)
# myList.copy()

# DICT
# use the key like an index []... then you don't really need DICT methods
# myDict[key] # get the value of that key
# myDict[key] = value # assign a new value to key
#
# # membership check
# # if ___ in myDict: # looking at keys
#
# # DICT METHODS
# myDict.keys() # all dict keys in a set-like object
# myDict.values() # all dict values in a set-like object

# MODULES
# math and csv

# MATH MODULES
# import math # FULL IMPORT
# math.factorial(x)
# math.ceil(x)
# math.floor(x)
# math.sqrt(x)
# math.pow(x, y)
# math.fabs(x)
# math.pi
# math.e

# # PARTIAL IMPORT
# from math import ceil # just ceil() not math.ceil()
# from math import sqrt, floor # sqrt(), floor()
# from math import * # factorial(), floor(), but no math
#
# # ALIAS IMPORT
# import math as m # m.floor(), m.ceil()

# FILES
# modes: r, w, a

# READ MODE
# filename = input()
# with open(filename, ""r"") as f:
# with open(""plain_text_file.txt"", ""r"") as f:
    # f.read() # returns the whole file as one big string
    # f.readlines() # returns a list of strings, each line is one string
    # f.write(someStr) # writes a single str arg to file

# with open(""plain_text_file.txt"", ""r"") as f:
#     # contents = f.read()
#     contents = f.readlines()
# # print(contents)
# for line in contents:
#     line = line.strip()
#     print(line)
# print(contents)

import csv
# csv.reader()

with open(""mock_data.csv"", ""r"") as f1: # mockaroo.com
    # contents = f1.readlines()
    # for row in csv.reader(f1): # csv.reader(f1, delimiter=""\t"") for tsv files
    #     print(row)
    contents = list(csv.reader(f1))
# print(contents)
# for row in contents[:10]:
#     print(row)

# WRITE MODE
# write out a new file where all the last names begin with ""P""
# with open(""output_data37.csv"", ""w"") as f2:
#     for row in contents:
#         # # ['1', 'Remington', 'Shilling', 'rshilling0@wsj.com', 'Male', '1.71.141.52']
#         # last name is row[2]
#         # if row[2].startswith(""P"") or row[2].startswith(""p""):
#         # if row[2][0].lower() == ""p"":
#         if row[2].lower().startswith(""p""):
#             f2.write("","".join(row) + ""\n"")


# APPEND MODE
# reading it to see...
# with open(""append_to_this.txt"") as f3:
#     print(f3.readlines())

with open(""append_to_this.txt"", ""a"") as f3:
    f3.write(""\nPippin"")

with open(""append_to_this.txt"") as f3:
    print(f3.readlines())


"
8FWLWL7M,$checkwinstate,Tiago_f,mIRC,Saturday 20th of April 2024 04:36:04 PM CDT,"alias checkwinstate {
  var %sco = $scon(0)
  while (%sco >= 1) {
    .scid $scon(%sco)
    var %x = 1, %y = $window( *, 0)
    while ( %x <= %y ) {
      if ($window( *, %x).sbcolor == message) || ($window( *, %x).sbcolor == event) { return 1 }
      inc %x
    }
    dec %sco
  }
  .scid -r
}
menu menubar,status {
  $iif($checkwinstate != 1,$style(2)) &Mark As Read :scon -a markasread
}
"
5usuunaC,LineQuarry,Shovinus,Lua,Saturday 20th of April 2024 04:20:18 PM CDT,"local heading = 0
local x = 0
local y = 0
local z = 2
local sequence = 0
local lastPos = { x = 0, y = 0, z = 0 }
local blackList = {}
local arg = { ... }
local flatBedrock = nil
local method = nil



function TurnRight()
    turtle.turnRight()
    heading = (heading + 1) % 4
    RecordCurrentPositonHeadingSequence()
end

function TurnLeft()
    turtle.turnLeft()
    heading = (heading - 1) % 4
    RecordCurrentPositonHeadingSequence()
end

function DigDown(force, move)
    if force == nil then
        force = false
    end
    if move == nil then
        move = true
    end
    while turtle.inspectDown() and turtle.suckDown() do
        if InventoryIsFull() and not force then
            GoToStart()
        end
    end
    turtle.digDown()
    
    if move and turtle.down() then
        z = z - 1
        RecordCurrentPositonHeadingSequence()
        return true
    else
        return false
    end
end

function DigUp(force, move)
    if force == nil then
        force = false
    end
    if move == nil then
        move = true
    end
    while turtle.inspectUp() and turtle.suckUp() do
        if InventoryIsFull() and not force then
            GoToStart()
        end
    end
    turtle.digUp()
    if move and turtle.up() then
        z = z + 1
        RecordCurrentPositonHeadingSequence()
        return true
    else
        return false
    end
end

function DigForward(force,move)
    if force == nil then
        force = false
    end
    if move == nil then
        move = true
    end
    while turtle.inspect() and turtle.suck() do
        if InventoryIsFull() and not force then
            GoToStart()
        end
    end
    turtle.dig()
    if move and turtle.forward() then
        if heading == 0 then
            y = y + 1
        elseif heading == 1 then
            x = x + 1
        elseif heading == 2 then
            y = y - 1
        elseif heading == 3 then
            x = x - 1
        end
        RecordCurrentPositonHeadingSequence()
        return true
    else
        return false
    end
end

function GetFuelLevel()
    if turtle.getFuelLevel() == ""unlimited"" then
        return 1000000
    else
        return turtle.getFuelLevel()
    end
end

function GetNeededFuel(pos)
    if pos == nil then
        pos = { x = 0, y = 0, z = 0 }
    end
    return math.abs(x - pos.x) + math.abs(y - pos.y) + math.abs(z - pos.z) + 32
end

function ShouldReturnToRefuel()
    if (GetFuelLevel() < GetNeededFuel()) then
        Refuel()
    end
    if (GetFuelLevel() < GetNeededFuel()) then
        print(""Need more fuel"")
        return true
    end
end

function GoToStart()
    
    print(""Returning to start"")
    print(x.."",""..y.."",""..z)
    local lastHeading = heading
    lastPos = { x = x, y = y, z = z }
    GoToPos({ x = 0, y = 0, z = 0 })
    TurnToHeading(0)
    GoToPos({ x = 0, y = 0, z = 2 })
    RequireChest(""to put items in"")
    ClearInventory()
    GoToPos({ x = 0, y = 0, z = 3 })
    RequireChest(""to refuel from"")
    RefuelFromChest()
    GoToPos({ x = 0, y = 0, z = 4 })
    RequireChest(""to set blacklist from"")
    UpdateBlackList()
    GoToPos({ x = 0, y = 0, z = 0 })
    --dont bother going back to the start if we are already there
    if lastPos.z <= 0 then
        GoToPos(lastPos)
    end
    TurnToHeading(lastHeading)
end

function UpdateBlackList()
    while turtle.suck() do
        local data = turtle.getItemDetail()
        if data ~= nil then
            blackList[data.name] = true
            local blacklistFile = fs.open(""blacklist"", ""w"")
            blacklistFile.write(textutils.serialize(blackList))
            blacklistFile.close()
        end
        turtle.dropDown()
    end
end

function LoadBlackList()
    if fs.exists(""blacklist"") then
        local blacklistFile = fs.open(""blacklist"", ""r"")
        blackList = textutils.unserialize(blacklistFile.readAll())
        blacklistFile.close()
    end
end

function GoToPos(pos)
    while y < pos.y do
        TurnToHeading(0)
        DigForward(true)
    end
    while y > pos.y do
        TurnToHeading(2)
        DigForward(true)
    end
    while x < pos.x do
        TurnToHeading(1)
        DigForward(true)
    end
    while x > pos.x do
        TurnToHeading(3)
        DigForward(true)
    end

    while z < pos.z do
        DigUp(true)
    end
    while z > pos.z do
        if not DigDown(true) then
            pos.z = pos.z + 1
        end
    end
end

function Refuel()
    for i = 16, 1, -1 do
        turtle.select(i)
        turtle.refuel()
    end
end

function RequireChest(chestPurpose)
    --check an inventory is infront of the turtle
    local success, data = turtle.inspect()
    if (not success or not string.find(data.name, ""chest"")) then
        print(""No chest in front of turtle "" .. chestPurpose)
    end
    while not success or not string.find(data.name, ""chest"") do
        success, data = turtle.inspect()
        os.sleep(1)
    end
end

-- This function will clear the inventory of all items except for fuel, it will consume the fuel to refuel the turtle unless the fuel level is above 200 + the fuel needed to return to the start.
function ClearInventory(force)
    if force == nil then
        force = false
    end
    for i = 16, 1, -1 do
        turtle.select(i)
        if not turtle.refuel(0) or force then                            -- If the item is not a fuel item
            if turtle.getItemCount() > 0 and not turtle.drop() then      -- Drop the item
                print(""Chest is full"")
                while turtle.getItemCount() > 0 and not turtle.drop() do -- If the chest is full, wait until there is space
                    os.sleep(1)
                end
            end
        end
    end

    function RefuelFromChest()
        ClearInventory(true)
        while GetFuelLevel() < GetNeededFuel(lastPos) + 300 do
            turtle.select(1)
            turtle.suck()
            if not turtle.refuel() then
                print(""No fuel in chest"")
                turtle.drop()
                local fueled = false
                while not fueled do
                    turtle.suck()
                    fueled = turtle.refuel()
                    if not fueled then
                        turtle.drop()
                    end
                    sleep(1)
                end
            end
        end
    end
end

function TurnToHeading(newHeading)
    if (heading - 1) % 4 == newHeading then
        TurnLeft()
    end
    while (heading ~= newHeading) do
        TurnRight()
    end
end

function InventoryIsFull()
    if (FreeSlots() < 1)
    then
        ClearInventoryOfJunk()
        if (FreeSlots() > 1) then
            return false
        end
        print(""Need more space in inventory"")
        return true
    else
        return false
    end
end

function ClearInventoryOfJunk()
    TurnLeft()
    TurnLeft()
    for i = 16, 1, -1 do
        turtle.select(i)
        local data = turtle.getItemDetail()
        if data ~= nil then
            if blackList[data.name] ~= nil then
                turtle.drop()
            end
        end
    end
    local swapped = true
    local n = 1
    while swapped do
        swapped = false
        for i = n, 15 do
            local missing = turtle.getItemCount(i) == 0
            if missing then
                for j = i + 1, 16 do
                    if turtle.getItemCount(j) > 0 then
                        turtle.select(j)
                        turtle.transferTo(i)
                        n = j
                        swapped = true
                        break
                    end
                end
            end
        end
    end
    turtle.select(1)
    --this is to avoid the issue where the turtle keeps picking up the same items because they keepo falling under the turtle
    turtle.dig()    
    TurnLeft()    
    TurnLeft()
end

function FreeSlots()
    local freeSlots = 0
    for i = 16, 1, -1 do
        if turtle.getItemCount(i) == 0 then
            freeSlots = freeSlots + 1
        end
    end
    return freeSlots
end

function RecordCurrentPositonHeadingSequence()
    -- json encode the current position, heading, and sequence
    local data = {
        x = x,
        y = y,
        z = z,
        heading = heading,
        sequence = sequence,
        flatBedrock = flatBedrock,
        method =
            method
    }
    local file = fs.open(""position.json"", ""w"")
    textutils.serialize(data)
    file.write(textutils.serialize(data))
    file.close()
end

function LoadPositionHeadingSequence()
    if fs.exists(""position.json"") then
        local file = fs.open(""position.json"", ""r"")
        local data = textutils.unserialize(file.readAll())
        x = data.x
        y = data.y
        z = data.z
        heading = data.heading
        sequence = data.sequence
        flatBedrock = data.flatBedrock
        method = data.method
    end
end

function AskYesNoQuestion(question)
    local answer    -- Variable to store the user's answer

    print(question) -- Display the question to the user
    print(""Type Yes or No and press Enter:"")

    while true do                     -- Loop until a valid response is given
        answer = string.lower(read()) -- Read user input and convert it to lowercase for comparison

        if answer == ""yes"" or answer == ""y"" then
            return true                                     -- User selected Yes
        elseif answer == ""no"" or answer == ""n"" then
            return false                                    -- User selected No
        else
            print(""Please type Yes or No and press Enter:"") -- Prompt again for valid input
        end
    end
end

function AskForAnInteger(question)
    local answer                   -- Variable to store the user's answer

    print(question)                -- Display the question to the user
    print(""Type a number and press Enter:"")
    while true do                  -- Loop until a valid response is given
        answer = ToInteger(read()) -- Read user input and convert it to lowercase for comparison

        if answer < 0 then
            print(""Please type a number and press Enter:"") -- Prompt again for valid input
        else
            return answer
        end
    end
end

function ToInteger(number)
    return math.floor(tonumber(number) or -1)
end

function CreateStartupFile()
    if (not fs.exists(""startup"")) then
        local startupfile = fs.open(""startup"", ""w"")
        --get this scripts name
        local scriptName = fs.getName(shell.getRunningProgram())
        print(""creating startup for "" .. scriptName)
        startupfile.write([[
--update the program
fs.delete(']] .. scriptName .. [[')
shell.run('pastebin get 5usuunaC ]] .. scriptName .. [[')
--give user a chance to stop the program
print(""Restarting quarry in 10 seconds, press CTRL + T to stop"")
os.sleep(10)
shell.run(']] .. scriptName .. ""', 'carryon')"")
        startupfile.close()
    end
end

function LoadPosition()
    if (fs.exists('position.json')) then
        if arg[1] == ""carryon"" then
            LoadPositionHeadingSequence()
            ClearInventoryOfJunk()
        else
            if AskYesNoQuestion(""Do you want to continue from the last position?"") then
                LoadPositionHeadingSequence()
                ClearInventoryOfJunk()
            else
                fs.delete(""position.json"")
            end
        end
    end
end

function Main()
    CreateStartupFile()
    if (GetFuelLevel() < 5) then
        Refuel()
        if (GetFuelLevel() < 5) then
            print(""Not enough fuel, put some in slot 1 and try again"")
            return
        end
    end
    LoadBlackList()
    LoadPosition()
    if (flatBedrock == nil) then
        flatBedrock = AskYesNoQuestion(""Is the bedrock flat?"")
    end
    local skipSequence = false;
    if (sequence == 0 and arg[1] ~= ""carryon"") then
        if (not AskYesNoQuestion(""Do you want to start from the beginning?"")) then
            sequence = AskForAnInteger(""What sequence number do you want to start from?"")
            if (sequence % 2 == 1) then
                sequence = sequence - 1
                skipSequence = true
            end
            local seqPos = GetSequencePosition(0)
            GoToPos({ x = 0, y = 0, z = 0 })
            GoToPos(seqPos)
            if(skipSequence) then
                while true do
                    if (not DigDown(true)) then
                        break
                    end
                end
            end
            
        end
    end
    while true do
        local diggingDown = sequence % 2 == 0;
        --make sure at -1 z
        if (z == 0) then
            DigDown(true)
        end
        local z1 = z - ((z) % 3) + 2
        TurnToHeading(((z1+1)/3 % 2)*2)
        DigUp(false,false)
        DigDown(false,false)
        if InventoryIsFull() or ShouldReturnToRefuel() then
            GoToStart()
        end
        if (y % 16 == 15 and heading == 0) or (y % 16 == 0 and heading == 2) then
            HandleEdges(diggingDown)
        else
            DigForward(false)
        end
            
    end
end
function HandleEdges(diggingDown)     
    for i = 1, 3 do
        if diggingDown then
            if not DigDown(false) then
                for ii = 2, i do
                    DigUp(false)
                end
                ProgressSequence()
                return
            end
        else
            if (z == -1) then
                ProgressSequence()
                return
            end
            DigUp()
        end
    end
end
function ProgressSequence()
	sequence = sequence + 1    
    RecordCurrentPositonHeadingSequence()
	GoToPos(GetSequencePosition(z))
	
end
function GetSequencePosition(z1)
    z1 = z1 - ((z1) % 3) + 2
	local t = ((z1+1)/3 % 2)
	return { x = 0, y = (sequence * 16) + (t*15), z = z1 }
end

Main()
"
YuyjvHbL,$markasread,Tiago_f,mIRC,Saturday 20th of April 2024 03:56:06 PM CDT,"alias checkwinstate {
  var %sco = $scon(0)
  while (%sco >= 1) {
    .scid $scon(%sco)
    if ($markasread == 1) { return 1 }
    dec %sco
  }
  .scid -r
}
menu status {
  $iif(!$checkwinstate,$style(2)) &Mark as read :scon -a markasread
}
"
jzvesfSL,pastebin.ai - #1 pastebin.com alternative,xxsa,PHP,Saturday 20th of April 2024 03:53:35 PM CDT,"https://pastebin.ai - #1 Pastebin Alternative - its free.

pastebin.ai  is a simple and efficient pastebin for mainly code to be distributed neatly and efficiently across the web. Website where you can paste and store any type of text or code snippets online and share it with your friends, Also You can see Recent Pastes

Simple Ads by Google Adsense Few rather than Pastebin
150+ different syntax languages - All Free
Paste Folders
Load files feature
Password protected pastes
Encrypted pastes.
URL Shortener.
Unlisted pastes.
Private pastes.
Embed, download, print pastes.
Socialite (Facebook/Twitter/Google Social login)
Trending pastes page (day, week, month, year)
Encrypted pastes.x
Trending pastes page (day, week, month, year).
No Captcha for logged in users feature.
..........
..................."
jHG6D0eW,KNN_special_for_Danya,Tagir1906,Python,Saturday 20th of April 2024 03:37:37 PM CDT,"import numpy as np
from collections import Counter

class KNN:
    def __init__(self, k:int):
        self.k = k

    def fit(self, X, y):
      self.X_train = X
      self.y_train = y
      pass

    def predict(self, X):
      y_pred = []
      for x in X:
        dist = KNN.count_distance(self.X_train, x)
        dist = np.reshape(dist, (dist.size, 1))
        dist = np.concatenate((dist, np.reshape(self.y_train, (self.y_train.size, 1))), axis=1)
        dist = dist[dist[:, 0].argsort()]
        k_neighbours = dist[:self.k][:, 1]
        c = Counter(k_neighbours)
        y_pred.append(int(c.most_common()[0][0]))
      return np.array(y_pred)
      pass

    def count_distance(x, y):
      return np.sqrt(np.sum((x - y) ** 2, axis=1))
      pass"
Z20MqGcR,Ban The Bomb (Python),capodeicapi,Python,Saturday 20th of April 2024 03:20:51 PM CDT,"import turtle

# Set up the screen
screen = turtle.Screen()
screen.setup(width=1.0, height=1.0)  # Use full screen
screen.bgcolor(""black"")

# Create a turtle object
pen = turtle.Turtle()
pen.speed(6)  # Set the speed of the turtle (0 is the fastest)
pen.color(""red"")
turtle.showturtle()

# Calculate radius
screen_height = screen.window_height()
radius = (1 / 3) * screen_height


# Draw the circle
# Set pen properties
pen.color(""red"")  # Set the pen color to red
pen.width(20)  # Set the line width to 20
pen.speed(6)
pen.penup()
pen.goto(0, -radius)
pen.pendown()
# Draw a circle
pen.circle(radius)  # Draw a circle with a radius of 100


# Draw a line through the center of the circle
pen.color(""red"")
pen.penup()
pen.goto(0, -radius)
pen.setheading(90)  # Set the direction of the turtle to upwards
pen.width(20)  # Set the thickness of the line
pen.pendown()
pen.forward(radius * 2)  # Draw the line through the center of the circle

# Draw the sidelines
pen.color(""red"")

pen.penup()
pen.goto(0, -radius/3)
pen.setheading(225)  # Set the direction of the turtle
pen.width(20)  # Set the thickness of the line
pen.pendown()
pen.forward(0.7*radius)  # Draw the line through the center of the circle

pen.penup()
pen.goto(0, -radius/3)
pen.setheading(315)  # Set the direction of the turtle
pen.width(20)  # Set the thickness of the line
pen.pendown()
pen.forward(0.7*radius)  # Draw the line through the center of the circle


# Print PEACE
pen.penup()
pen.color(""white"")
pen.goto(0, -radius + 80)  # Position the turtle to print text below the circle
pen.pendown()
pen.write(""PEACE!"".format(screen_height), align=""center"", font=(""Comic Sans MS"", 80, ""normal""))



# Hide the turtle
pen.hideturtle()

# Keep the window open
screen.mainloop()
"
hGeuWsyt,A opti (terrible code),Lorky,JavaScript,Saturday 20th of April 2024 03:01:18 PM CDT,"""use strict"";
const ExcelJS = require(""exceljs"");

module.exports = ({ strapi }) => ({
  async getDropDownData() {
    let excel = strapi.config.get(""excel"");
    let dropDownValues = [];
    let array = Object.keys(excel?.config);

    strapi?.db?.config?.models?.forEach((element) => {
      if (element?.kind == ""collectionType"") {
        array?.forEach((data) => {
          if (element?.uid?.startsWith(data)) {
            dropDownValues.push({
              label: element?.info?.displayName,
              value: element?.uid,
            });
          }
        });
      }
    });
    // Sort dropDownValues alphabetically by label in ascending order
    dropDownValues.sort((a, b) => a.label.localeCompare(b.label));

    return {
      data: dropDownValues,
    };
  },
  async getTableData(ctx) {
    let excel = strapi.config.get(""excel"");
    let uid = ctx?.query?.uid;
    let limit = ctx?.query?.limit;
    let offset = ctx?.query?.offset;
    let query = await this.restructureObject(
      excel?.config[uid],
      uid,
      limit,
      offset
    );

    let response = await strapi.db.query(uid).findMany(query);

    let header = [
      ...excel?.config[uid]?.columns,
      ...Object.keys(excel?.config[uid]?.relation),
    ];

    let where = {};

    if (excel?.config[uid]?.locale == ""true"") {
      where = {
        locale: ""en"",
      };
    }

    let count = await strapi.db.query(uid).count(where);

    let tableData = await this.restructureData(response, excel?.config[uid]);

    // Sort dropDownValues alphabetically by label in ascending order

    return {
      data: tableData,
      count: count,
      columns: header,
    };
  },
  async downloadExcel(ctx) {
    try {
      let excel = strapi.config.get(""excel"");
      let uid = ctx?.query?.uid;
      let query = await this.restructureObject(excel?.config[uid], uid);
      let response = await strapi.db.query(uid).findMany(query);
      let excelData = await this.restructureData(response, excel?.config[uid]);

      const workbook = new ExcelJS.Workbook();
      const worksheet = workbook.addWorksheet(""info commandes""); // Nouveau sheet
  
      const headers = [
        ...excel?.config[uid]?.columns,
        ...Object.keys(excel?.config[uid]?.relation).flatMap((relation) => {
          return excel?.config[uid]?.relation[relation].column.map((column) => {
            if (column === ""quantity"") return ""Quantity"";
            if (column === ""produit"") return ""Produit"";
            if (column === ""createdAt"") return ""CreatedAt"";
            return `${relation}_${column}`;
          });
        }),
      ];
  
      // Ajout titre au worksheet
      worksheet.columns = headers.map((header) => ({
        header,
        key: header,
        width: 20,
        style: { 
          numFmt: header === ""createdAt"" ? ""yyyy/mm/dd"" : (header === ""totalOrderAmount"" ? ""#,##0.00 ‚Ç¨"" : undefined) 
        }
      }));
  
      // Ajout data au worksheet
      excelData.forEach((row) => {
        const produitValues = row[""Produit""] ? row[""Produit""].split("", "") : [];
        const quantityValues = row[""Quantity""] ? row[""Quantity""].split("", "") : [];
  
        const maxItemCount = Math.max(produitValues.length, quantityValues.length);
  
        for (let i = 0; i < maxItemCount; i++) {
          const newRow = {};
  
          headers.forEach((header) => {
            if (header === ""Quantity"" && quantityValues[i]) {
              newRow[""Quantity""] = quantityValues[i];
            } else if (header === ""Produit"" && produitValues[i]) {
              newRow[""Produit""] = produitValues[i];
            } else if (header === ""createdAt"" && row[""createdAt""]) {
              // Convertion date
              newRow[""createdAt""] = row[""createdAt""].split(""T"")[0].replace(/-/g, ""/""); //  .replace(/g, ""\"");
            } else {
              newRow[header] = row[header];
            }
          });
  
          worksheet.addRow(newRow);
        }
      });
  
      worksheet.eachRow({ includeEmpty: false }, function (row, rowNumber) {
        if (rowNumber > 1) { // PAS LE TITRE
          const currentCell = row.getCell(""createdAt"");
          if (typeof currentCell.value === ""string"") {
            const dateParts = currentCell.value.split(""/"");
            if (dateParts.length === 3) {
              const month = parseInt(dateParts[1], 10);
              let fillColor = ""FFFFFFFF"";
              if ([1, , 5, 7, 9, 11].includes(month)) fillColor = ""EEECE1"";
              
              
              row.eachCell({ includeEmpty: true, reverse: true }, function (cell, colNumber) {
                cell.fill = {
                  type: ""pattern"",
                  pattern: ""solid"",
                  fgColor: { argb: fillColor },
                };
                // Bordure cellule
                cell.border = {
                  top: { style: ""thin"", color: { argb: ""FF000000"" } },
                  left: { style: ""thin"", color: { argb: ""FF000000"" } },
                  bottom: { style: ""thin"", color: { argb: ""FF000000"" } },
                  right: { style: ""thin"", color: { argb: ""FF000000"" } }
                };
              });
            }
          }
        }
      });

// ---------------------------------------------------------- TOTAL STATS

const totalWorksheet = workbook.addWorksheet('Total Produits');
let months = {}; 

worksheet.eachRow({ includeEmpty: false }, function (row, rowNumber) {
  if (rowNumber > 1) { // pas le titre
    const currentCell = row.getCell(""createdAt"");
    if (typeof currentCell.value === ""string"") {
      const dateParts = currentCell.value.split(""/"");
      if (dateParts.length === 3) {
        const year = parseInt(dateParts[0], 10);
        const month = parseInt(dateParts[1], 10);
        months[year] = months[year] || {};
        months[year][month] = months[year][month] || {};
        months[year][month].products = months[year][month].products || new Set(); 
        months[year][month].quantities = months[year][month].quantities || {};
        const produits = row.getCell(""Produit"").value;
        const quantities = row.getCell(""Quantity"").value;
        if (produits && quantities) {
          const productArray = produits.split("", "");
          const quantityArray = quantities.split("", "");
          productArray.forEach((product, index) => {
            const quantity = parseInt(quantityArray[index], 10);
            months[year][month].products.add(product);
            months[year][month].quantities[product] = (months[year][month].quantities[product] || 0) + quantity;
          });
        }
      }
    }
  }
});

// vvvvv A OPTI mais fonctionne vvvvv

// Tri d√©croissant
const sortedYears = Object.keys(months).sort((a, b) => b - a);

function getFillColor(month, isHeader = false) {
  const colors = {
    1: ""EEECE1"",
    5: ""EEECE1"",
    7: ""EEECE1"", 
    9: ""EEECE1"",
    11: ""EEECE1"" 
   
  };

  return isHeader ? ""D9D9D9"" : (colors[month] || ""FFFFFF""); 
}

const monthNames = {
  1: ""janvier"",
  2: ""f√©vrier"",
  3: ""mars"",
  4: ""avril"",
  5: ""mai"",
  6: ""juin"",
  7: ""juillet"",
  8: ""ao√ªt"",
  9: ""septembre"",
  10: ""octobre"",
  11: ""novembre"",
  12: ""d√©cembre""
};

let currentColumn = headers.length;
sortedYears.forEach(year => {
  const yearData = months[year];
  const sortedMonths = Object.keys(yearData).sort((a, b) => b - a);
  sortedMonths.forEach(month => {
    const monthName = monthNames[parseInt(month)]; 
    const productHeader = `${year}_${monthName}_Products`; 
    const quantityHeader = `${year}_${monthName}_Quantities`; 
    if (!headers.includes(productHeader)) {
      headers.push(productHeader);
      headers.push(quantityHeader);
      headers.push(""""); 
      totalWorksheet.getColumn(currentColumn + 1).key = productHeader;
      totalWorksheet.getColumn(currentColumn + 2).key = quantityHeader;
      totalWorksheet.getColumn(currentColumn + 3).key = """";
      totalWorksheet.getColumn(currentColumn + 1).width = 20;
      totalWorksheet.getColumn(currentColumn + 2).width = 10;
      totalWorksheet.getCell(1, currentColumn + 1).fill = {
        type: ""pattern"",
        pattern: ""solid"",
        fgColor: { argb: getFillColor(parseInt(month), true) }
      };
      totalWorksheet.getCell(1, currentColumn + 2).fill = {
        type: ""pattern"",
        pattern: ""solid"",
        fgColor: { argb: getFillColor(parseInt(month), true) }
      };
    }
    totalWorksheet.getCell(1, currentColumn + 1).value = `${monthName} ${year} Produits`;
    totalWorksheet.getCell(1, currentColumn + 2).value = `Quantit√©`;
    const productArray = Array.from(yearData[month].products).sort(); // Tri par alphab
    productArray.forEach((product, index) => {
      const rowIndex = index + 2; 
      totalWorksheet.getCell(rowIndex, currentColumn + 1).value = product; 
      totalWorksheet.getCell(rowIndex, currentColumn + 2).value = yearData[month].quantities[product] || 0; 

      
      totalWorksheet.getCell(rowIndex, currentColumn + 1).fill = {
        type: ""pattern"",
        pattern: ""solid"",
        fgColor: { argb: getFillColor(parseInt(month)) }
      };
      
      totalWorksheet.getCell(rowIndex, currentColumn + 2).fill = {
        type: ""pattern"",
        pattern: ""solid"",
        fgColor: { argb: getFillColor(parseInt(month)) }
      };
    });
    currentColumn += 3;
  });
});





// ------------------------------------ END TOTAL STATS

  
      // Write the workbook to a buffer
      const buffer = await workbook.xlsx.writeBuffer();
  
      return buffer;
    } catch (error) {
      console.error(""Error writing buffer:"", error);
    }
  },
  
  
  
  
  
  
  
  
  
  async restructureObject(inputObject, uid, limit, offset) {
    let excel = strapi.config.get(""excel"");

    let where = {};

    if (excel?.config[uid]?.locale == ""true"") {
      where = {
        locale: ""en"",
      };
    }
    let orderBy = {
      id: ""asc"",
    };

    const restructuredObject = {
      select: inputObject.columns || ""*"",
      populate: {},
      where,
      orderBy,
      limit: limit,
      offset: offset,
    };

    for (const key in inputObject.relation) {
      restructuredObject.populate[key] = {
        select: inputObject.relation[key].column,
      };
    }

    return restructuredObject;
  },
  async restructureData(data, objectStructure) {
    return data.map((item) => {
      const restructuredItem = {};
  
      // Restructure main data based on columns
      for (const key of objectStructure.columns) {
        if (key in item) {
          restructuredItem[key] = item[key];
        }
      }
  
      // Restructure relation data based on the specified structure
      for (const key in objectStructure.relation) {
        if (key in item && item[key]) {
          const relationData = item[key];
          if (Array.isArray(relationData) && relationData.length > 0) {
            // pas opti (mais fonctionne)
            relationData.forEach((obj, index) => {
              for (const column of objectStructure.relation[key].column) {
                if (column === 'quantity') {
                  if (!restructuredItem['Quantity']) {
                    restructuredItem['Quantity'] = `${obj[column]}`;
                  } else {
                    restructuredItem['Quantity'] += `, ${obj[column]}`;
                  }
                }
                if (column === 'produit') {
                  if (!restructuredItem['Produit']) {
                    restructuredItem['Produit'] = `${obj[column]}`;
                  } else {
                    restructuredItem['Produit'] += `, ${obj[column]}`;
                  }
                }
                restructuredItem[`${key}_${column}_${index + 1}`] = obj[column];
              }
            });
          } else {
            for (const column of objectStructure.relation[key].column) {
              if (column === 'produit') {
                restructuredItem['Produit'] = item[key][column];
              }
              if (column === 'quantity') {
                restructuredItem['Quantity'] = item[key][column];
              }
              restructuredItem[`${key}_${column}`] = item[key][column];
            }
          }
        }
      }
  
      return restructuredItem;
    });
  },
});
"
wNNqUUR8,Deletar Role,lolohac,JSON,Saturday 20th of April 2024 02:52:54 PM CDT,"// DELETE /v1/roles/{id}
 
Request: 
-- 
 
Response: HTTP status code 204"
mbuFNHL7,How Can You Get a Welcome No Deposit Bonus of 100USD from Didimax,reviewbrokers,PHP,Saturday 20th of April 2024 02:39:05 PM CDT,"https://www.reviewbrokers.net/how-can-you-get-a-welcome-no-deposit-bonus-of-100usd-from-didimax/
 Table of Contents : Didimax

 	Introduction to the Bonus
 	Bonus Details
 	How to Join the Didimax Welcome No Deposit Bonus
 	Withdrawal Information
 	Didimax Forex No Deposit Bonus Terms

Introduction to the Bonus
Didimax presents an exciting opportunity for new traders with a Welcome Bonus that doesn't require an initial deposit. This No Deposit Bonus grants you a 100 USD credit to begin trading and potentially gain extra money from profitable trades. You can withdraw your profits by reaching 50 trading lots, with a maximum withdrawal limit of 100 USD. Along with the bonus, clients have access to various trading tools and can test different trading strategies. Don't miss out on this opportunity to start trading with Didimax!
Bonus Details

 	Bonus Type: Welcome No Deposit Bonus
 	Bonus Amount: 100 USD
 	Expiry Date: Limited (so act quickly!)
 	Eligibility: All new traders

How to Join the Didimax Welcome No Deposit Bonus
To participate in Didimax's Welcome No Deposit Bonus and receive 100 USD to start trading, follow these steps:

 	Create an Account: Sign up on the Didimax platform by providing your details.
 	Complete Verification: Verify your identity as required by the platform.
 	Claim Your Bonus: After verification, you'll receive 100 USD to start trading.
 	Begin Trading: Use the credit to trade and aim for profits.
 	Withdraw Your Profits: Once you've completed 50 trading lots, you can withdraw your profits, with a maximum limit of 100 USD.

Withdrawal Information
Didimax has specific conditions for withdrawing profits:

 	Bonus Withdrawal: Not allowed.
 	Profit Withdrawal: Allowed once you reach 50 trading lots, with a maximum limit of 100 USD.

Didimax Forex No Deposit Bonus Terms
To ensure eligibility and understand the terms of the bonus, review these key points:

 	Each client is allowed to create only one account.
 	To withdraw profits, you must complete 50 trading lots.
 	The maximum amount of profits that can be withdrawn is 100 USD.
"
jLh9Rr3g,Deletar usu√°rio,lolohac,JSON,Saturday 20th of April 2024 02:31:52 PM CDT,"// DELETE /v1/users/{id}
 
Request: 
-- 
 
Response: HTTP status code 204"
dNCNWy0R,Alterar senha usu√°rio,lolohac,JSON,Saturday 20th of April 2024 02:23:21 PM CDT,"// PUT /v1/users/{id}/password
 
Request: 
{
  ""priority"": 0,
  ""value"": ""novasenha"",
  ""temporary"": false
}
 
Response: HTTP status code 204"
LbT7KxAL,How Do You Get a 30% Forex Welcome Deposit Bonus from Vennprime,fxvnpro,PHP,Saturday 20th of April 2024 02:16:52 PM CDT,"https://www.fxvnpro.com/how-do-you-get-a-30-forex-welcome-deposit-bonus-from-vennprime/
 Table of Contents : Vennprime

 	Introduction: Unlock a 30% Forex Welcome Deposit Bonus with Vennprime
 	What's Included in the Bonus?
 	How to Join and Claim the Bonus
 	Withdrawal of Profits
 	Terms and Conditions for the Forex Trading Deposit Bonus
 	Final Thoughts

Introduction: Unlock a 30% Forex Welcome Deposit Bonus with Vennprime
If you're exploring forex trading or looking for a way to boost your trading capital, Vennprime's 30% deposit bonus might be just what you need. This welcome bonus is applied to your initial deposit, giving you additional funds to use for trading. The bonus itself cannot be withdrawn, but any profits you earn can be, provided you meet the trading conditions. This is a fantastic way to start or expand your forex trading journey.
What's Included in the Bonus?
The 30% deposit bonus is applied to your initial deposit with Vennprime. This bonus gives you extra capital for trading, enabling you to explore new strategies or increase your trade volume. Once you meet the required lot conditions, you can withdraw any profits you earn. It's an excellent way to boost your trading power and potentially increase your returns.
How to Join and Claim the Bonus
Claiming the 30% deposit bonus is straightforward. Here's how you can do it:

 	Register for an Account: Visit the Vennprime website and create a new trading account. Make sure your information is correct to avoid any issues.
 	Make a Minimum Deposit: To qualify for the bonus, your initial deposit must be at least $100. Once you complete the deposit, the bonus will be credited to your account.
 	Start Trading: After the bonus is applied, you can begin trading. The bonus gives you more flexibility and capital to pursue your trading goals.

Withdrawal of Profits
While the bonus itself cannot be withdrawn, any profits you earn through trading can be. However, you must meet certain lot conditions before withdrawing profits. Ensure you understand the terms and conditions to know what is required to withdraw your profits.
Terms and Conditions for the Forex Trading Deposit Bonus
Here are some important terms and conditions to be aware of when claiming the 30% Welcome Deposit Bonus from Vennprime:

 	Internal Transfers Not Accepted: The bonus applies only to new deposits, not internal transfers within accounts.
 	Age Requirement: You must be at least 18 years old to qualify for the promotion.
 	Bonus Removal Upon Withdrawal: If you withdraw your initial deposit, the bonus will be removed from your account.

Final Thoughts
Vennprime's 30% deposit bonus is a great opportunity for forex traders to enhance their trading experience and potentially increase profits. By following the steps outlined above and adhering to the terms and conditions, you can take full advantage of this limited-time offer. Don't miss out‚Äîstart trading with Vennprime and see where your forex trading journey can take you."
UFjZ6f2g,L2j Configs v1,Zoey76,Diff,Saturday 20th of April 2024 01:51:51 PM CDT,"diff --git a/src/main/java/com/l2jserver/gameserver/GameServer.java b/src/main/java/com/l2jserver/gameserver/GameServer.java
index 5fc29d95f..cfa24b548 100644
--- a/src/main/java/com/l2jserver/gameserver/GameServer.java
+++ b/src/main/java/com/l2jserver/gameserver/GameServer.java
@@ -164,8 +164,6 @@ public final class GameServer {
 	
 	private static final String GEODATA = ""-gd"";
 	
-	private static final String L2JHOME_VARIABLE = ""L2J_HOME"";
-	
 	private final SelectorThread<L2GameClient> _selectorThread;
 	
 	private final L2GamePacketHandler _gamePacketHandler;
@@ -499,17 +497,4 @@ public final class GameServer {
 		s = sBuilder.toString();
 		LOG.info(s);
 	}
-	
-	/**
-	 * Returns either the value of the L2J_HOME variable or null.<br>
-	 * When the L2J_HOME variable can be found as system property or environment variable, it's value is returned (favoring the system property). If the variable is not available, null is returned.
-	 * @return returns the value of the L2J_HOME variable or null
-	 */
-	public static String getL2jHomeVariable() {
-		String l2jHome = System.getProperty(L2JHOME_VARIABLE);
-		if (l2jHome == null) {
-			l2jHome = System.getenv(L2JHOME_VARIABLE);
-		}
-		return l2jHome;
-	}
 }
diff --git a/src/main/java/com/l2jserver/gameserver/LoginServerThread.java b/src/main/java/com/l2jserver/gameserver/LoginServerThread.java
index 01d83327c..fea7b2a2e 100644
--- a/src/main/java/com/l2jserver/gameserver/LoginServerThread.java
+++ b/src/main/java/com/l2jserver/gameserver/LoginServerThread.java
@@ -22,6 +22,8 @@ import static com.l2jserver.gameserver.config.Configuration.general;
 import static com.l2jserver.gameserver.config.Configuration.hexId;
 import static com.l2jserver.gameserver.config.Configuration.ip;
 import static com.l2jserver.gameserver.config.Configuration.server;
+import static java.nio.file.StandardOpenOption.CREATE;
+import static java.nio.file.StandardOpenOption.TRUNCATE_EXISTING;
 
 import java.io.BufferedOutputStream;
 import java.io.IOException;
@@ -32,8 +34,6 @@ import java.net.Socket;
 import java.net.SocketException;
 import java.net.UnknownHostException;
 import java.nio.file.Files;
-import java.nio.file.Path;
-import java.nio.file.StandardOpenOption;
 import java.security.GeneralSecurityException;
 import java.security.KeyFactory;
 import java.security.interfaces.RSAPublicKey;
@@ -676,12 +676,12 @@ public class LoginServerThread extends Thread {
 	 * @param hexId the hexadecimal ID to store
 	 */
 	public static void saveHexid(int serverId, String hexId) {
-		Path hexIdFilePath = Configuration.getCustomOrDefaultPath(HexIdConfiguration.FILENAME);
+		final var hexIdFilePath = Configuration.getCustomOrDefaultPath(HexIdConfiguration.FILENAME);
 		
 		hexId().setProperty(HexIdConfiguration.SERVERID_KEY, String.valueOf(serverId));
 		hexId().setProperty(HexIdConfiguration.HEXID_KEY, hexId);
 		
-		try (OutputStream out = Files.newOutputStream(hexIdFilePath, StandardOpenOption.CREATE, StandardOpenOption.TRUNCATE_EXISTING)) {
+		try (var out = Files.newOutputStream(hexIdFilePath, CREATE, TRUNCATE_EXISTING)) {
 			hexId().store(out, ""the hexID to auth into login"");
 			LOG.info(""Saved {}."", hexIdFilePath);
 		} catch (Exception ex) {
diff --git a/src/main/java/com/l2jserver/gameserver/config/Configuration.java b/src/main/java/com/l2jserver/gameserver/config/Configuration.java
index 07e4fec6a..c6fe1334c 100644
--- a/src/main/java/com/l2jserver/gameserver/config/Configuration.java
+++ b/src/main/java/com/l2jserver/gameserver/config/Configuration.java
@@ -22,8 +22,6 @@ import java.nio.file.Path;
 
 import org.aeonbits.owner.ConfigFactory;
 
-import com.l2jserver.gameserver.GameServer;
-
 /**
  * Configuration.
  * @author Zoey76
@@ -242,11 +240,10 @@ public class Configuration {
 	 * @return either the custom or default path to the config file
 	 */
 	public static Path getCustomOrDefaultPath(String filename) {
-		String l2jHome = GameServer.getL2jHomeVariable();
+		var l2jHome = server().getL2jHome();
 		if (l2jHome == null) {
 			return Path.of(getDefaultPath(filename));
 		}
-		
 		return Path.of(l2jHome, getCustomSubpath(filename));
 	}
 }
diff --git a/src/main/java/com/l2jserver/gameserver/config/ServerConfiguration.java b/src/main/java/com/l2jserver/gameserver/config/ServerConfiguration.java
index 0f6ddf2a6..d037819cf 100644
--- a/src/main/java/com/l2jserver/gameserver/config/ServerConfiguration.java
+++ b/src/main/java/com/l2jserver/gameserver/config/ServerConfiguration.java
@@ -42,7 +42,9 @@ import com.l2jserver.gameserver.idfactory.IdFactoryType;
 @Sources({
 	""file:${L2J_HOME}/custom/game/config/server.properties"",
 	""file:./config/server.properties"",
-	""classpath:config/server.properties""
+	""classpath:config/server.properties"",
+	""system:properties"",
+	""system:env""
 })
 @LoadPolicy(MERGE)
 @HotReload(value = 20, unit = MINUTES, type = ASYNC)
@@ -90,4 +92,7 @@ public interface ServerConfiguration extends Mutable, Reloadable {
 	
 	@Key(""BadIdChecking"")
 	Boolean badIdChecking();
+	
+	@Key(""L2J_HOME"")
+	String getL2jHome();
 }
\ No newline at end of file
"
bpB3nmAv,lit task autorun,twokay,TypeScript,Saturday 20th of April 2024 01:19:56 PM CDT,"import {html, LitElement} from 'lit';
import {customElement, property} from 'lit/decorators.js';
import ""../components/dnsentry""
import {Task} from ""@lit/task"";
import type {HeartbeatResponse, HeartbeatRequest} from ""../types/heartbeat"";

const controller = new AbortController();
const signal = controller.signal;
const heartbeatTimer = setInterval

@customElement('heartbeat-page')
export class HeartBeat extends LitElement {
  @property({type: String})
  entryId = """"

  private heartbeatInterval:number = 0
  private heartbeatCounter:number = 0

  // @function createRequestData
  // @description creates the body content for the request
  private createRequestData(): HeartbeatRequest {
    const d = new Date();
    let time = d.getTime();
    return {
      clientclock: time
    }
  }

  // @function createRequestConfig
  // @description creates the configuration used in a fetch request
  private createRequestConfig(): RequestInit {
    return {
      method: ""POST"",
      headers: {
        'Accept': 'application/json',
        'Content-Type': 'application/json',
      },
      body: JSON.stringify(this.createRequestData()),
      credentials: 'include',
      signal
    }
  }

  private createRequest(): Promise<HeartbeatResponse> {
    return new Promise<HeartbeatResponse>((resolve, reject) => {
      let test = fetch(`https://dns.api.local.entitywind.io/dns/${this.entryId}`, this.createRequestConfig())
    })
  }

  private _entryTask = new Task(this, {
    task: async ([counter], {signal}) => {
      return this.createRequest()
    },
    args: () => [this.heartbeatCounter]
  });

  private stopHeartbeatTimer() {
    clearInterval(this.heartbeatInterval)
  }

  private updateHeartbeat() {
    if (this.heartbeatCounter===undefined) {
      this.heartbeatCounter = 0
    }
    this.heartbeatCounter++
  }

  private startHeartbeatTimer() {
    this.heartbeatInterval = setInterval(this.updateHeartbeat, 1000)
  }

  render() {
    return html`
      <div>
        <p>heartbeat page</p>
        <button class=""abort"" @click=""${()=>this.stopHeartbeatTimer()}"">Stop</button>
        <button class=""abort"" @click=""${()=>this.startHeartbeatTimer()}"">Start</button>
        <p></p>
      </div>
    `
  }
}
"
