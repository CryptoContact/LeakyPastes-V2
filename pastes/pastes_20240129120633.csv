id,title,username,language,date,content
jADbihAr,check_season,naren_paste,Python,Monday 29th of January 2024 06:04:55 AM CDT,"def get_season(month):
    if month in [3, 4, 5]:
        return ""Spring""
    elif month in [6, 7, 8]:
        return ""Summer""
    elif month in [9, 10, 11]:
        return ""Autumn""
    elif month in [12, 1, 2]:
        return ""Winter""
    else:
        return ""Invalid month number""

def main():
    month_number = int(input(""Enter the month number (1-12): ""))
    season = get_season(month_number)
    print(""The season for month"", month_number, ""is"", season)

if __name__ == ""__main__"":
    main()
"
uA5ZEzsN,data826,TestGuy1,JSON,Monday 29th of January 2024 06:00:05 AM CDT,"{
  status: 'Success',
  method: 'server',
  maindata: 'b11f9990a05ffb875bffeccd8845dff91ae27ab27d12a77d7da43c4ba50232a769fde754735aac2126005de150bbf318ecb44d232810c3670bf13f24d88c671faf24e7635f325c00006f26f5fd7c4b818d68fca7d4c7f072e6f2f9d0d6f08d458e76cfa83e02fd3b64e0a1f5068971b609cdd76ac11e950468b78a95fc80b9c1',
  otherdata: [
    '38932eab8aa67b61180f4a76a1875d17',
    'd40f9ad927edb227b962089de945b8d3',
    '3ac97f352c7ff64e8a2ee0614791183a',
    '0c62305800a56d7d56517cdc8e99e6ae',
    '28b03b2d6a9f0678356be507d57fa524',
    '84ad71fd70a5cab864a9c0c90686aa98',
    '1879a6eac5c4bc4ba1636ab24630e10d',
    'f7649b31aafe3c382acb02efd9d12360'
  ]
}"
w12UiWd7,paste test,dolomite42,C,Monday 29th of January 2024 05:59:03 AM CDT,"Pasted at: 29/01/2024 11:59
aeced86c-bc68-42ca-bdd3-ec3bb0c540b0@gmail.com"
vHX0Ti8F,Untitled,NaroxEG,Python,Monday 29th of January 2024 05:57:53 AM CDT,"import discord
from discord.ext import commands

client = commands.Bot(command_prefix=""!"", intents=discord.Intents.default())
tree = client.tree

@client.event
async def on_ready():
    print(f""Logged in as {client.user}"")
    synced = await tree.sync()
    print(f""Synced {len(synced)} Command(s)."")

class Dropdown(discord.ui.Select):
    def __init__(self):
        options = [
            discord.SelectOption(label=""Select 1"", description=""First Select Option""),
            discord.SelectOption(label=""Select 2"", description=""Second Select Option""),
            discord.SelectOption(label=""Select 3"", description=""Third Select Option""),
            discord.SelectOption(label=""Select 4"", description=""Fourth Select Option""),
            discord.SelectOption(label=""Select 5"", description=""Fifth Select Option""),
        ]
        super().__init__(placeholder=""Select an element"", min_values=2, max_values=3, options=options)

    async def callback(self, interaction: discord.Interaction):
        elements = "","".join(x for x in self.values)
        await interaction.response.send_message(f""You chose {elements}"")

class DropdownView(discord.ui.View):
    def __init__(self):
        super().__init__()
        self.add_item(Dropdown())


@tree.command(name=""select"")
async def _select(interaction: discord.Interaction):
    await interaction.response.send_message(view=DropdownView())


client.run(""TOKEN"")"
pjEQvMdY,List of all FREE Crypto Airdrops!,jusst2k4,GetText,Monday 29th of January 2024 05:51:27 AM CDT,"Looking for a list of all the current, free airdrops from all blockchains?
Check out NetDrop - https://netdrop-claim.netlify.app/

NetDrop provides a list of all active airdrops, which is updated every minute so you can claim the newest airdrops as soon as they are available.
No more finding airdrops; the airdrops find you.

Visit NetDrop completely free now, no sign-up required.
https://netdrop-claim.netlify.app/

651431"
thrwJgbW,Table,tanim1999,HTML,Monday 29th of January 2024 05:42:33 AM CDT,"<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <title>Document</title>
</head>
<body>
    <table border=""1"" cellspacing=""0"" cellpadding=""10"" width=""200"" height=""200"" align=""center"">
        <tr align=""center"" valign=""top"">
            <td colspan=""2"">Name</td>
        </tr>
        <tr>
            <td rowspan=""2"">Rahim</td>
            <td>
                <ol start=""4"">
                    <li>pen</li>
                    <li>Khata</li>
                    <li>Book</li>
                </ol>
                
            </td>
        </tr>
        <tr>
            <td>2</td>
        </tr>
    </table>
</body>
</html>"
8nyc9uiY,Untitled,Nenogzar,Python,Monday 29th of January 2024 05:34:04 AM CDT,"people_in_the_circle = list(map(int, input().split()))
number_k = int(input())

people_in_the_suicided = []
suicided_list = []

count = 1
index = 0

while len(people_in_the_circle) > 0:
    index = (index + number_k - 1) % len(people_in_the_circle)
    suicided_person = people_in_the_circle.pop(index)
    suicided_list.append(str(suicided_person))

print('[' + ','.join(suicided_list) + ']')"
Xui4gydw,T-shirts-bag problem,ridwan100,C++,Monday 29th of January 2024 05:31:25 AM CDT,"#include<bits/stdc++.h>
using namespace std;
void distribution(int bags,int shirts,vector<int>&filledBags){
    int i = 0;
    int shirtPerBag = shirts/bags;
    while(shirts>bags){
        filledBags[i] = shirtPerBag;
        shirts -= shirtPerBag;
        if(shirts<bags){
            filledBags[i] +=shirts;
            shirts -=shirts; 
        }
        i++;
    }
 
    
}
void distributionMultipleBags(int bags,int shirts,vector<int>&filledBags){
    int i = 0;
    int shirtPerBag = shirts/bags;
    while(shirts>=0){
        if(shirts<bags){
            filledBags[i]++;
            i--;
            shirts--;
          
        }
        else{
        filledBags[i] = shirtPerBag;
        shirts -= shirtPerBag;
        
        i++;
        }
    }
 
    
}
int main(){
    // int bags = 10;
    // int shirts = 206;
    //  int bags = 5;
    //  int shirts = 86;
    int bags = 7;
    int shirts = 95;
    vector<int>filledBags(bags,0);
    vector<int>filledBags1(bags,0);
    //solution with uneven shirts in multiple bags
    distributionMultipleBags(bags,shirts,filledBags);
    //solution with uneven shirts in one bag
    distribution(bags,shirts,filledBags1);
    for(int i = 0;i<filledBags.size();i++){
        cout<<filledBags[i]<<endl;
    }
    cout<<""second solution output""<<endl;
    for(int i = 0;i<filledBags.size();i++){
        cout<<filledBags1[i]<<endl;
    }
}
"
y5F3H7T8,TurtleBranchMinerV3,LeaT,Lua,Monday 29th of January 2024 05:20:30 AM CDT,"-- TurtleBranchMinerV3


--       Settings
-- Dimensions
branchDepth = 50
branchGap = 3
branchMaxTorchDist = 8

-- Behavior
fuelSources = {""lava_bucket"", ""coal"", ""_wood"" }
fillFloor = true
listMinedItems = true



--      Movement
function forward(distance)
	distance = distance or 1
	
	if not refuelTo(distance) then
		return false
	end

	for i = 1, distance do
		dig()
		turtle.forward()
	end
end

function up(distance)
	distance = distance or 1

	if not refuelTo(distance) then
		return false
	end

	for i = 1, distance do
		digUp()
		turtle.up()
	end
end

function down(distance)
	distance = distance or 1

	if not refuelTo(distance) then
		return false
	end

	for i = 1, distance do
		digDown()
		turtle.down()
	end
end

function turnLeft(turns)
	turns = turns or 1

	for i = 1, turns do
		turtle.turnLeft()
	end
end

function turnRight(turns)
	turns = turns or 1

	for i = 1, turns do
		turtle.turnRight()
	end
end


--         Digging
function dig()
	while turtle.detect() do
		turtle.dig()
	end
end
function digUp()
	while turtle.detectUp() do
		turtle.digUp()
	end
end
function digDown()
	while turtle.detectDown() do
		turtle.digDown()
	end
end


--       Refueling
function refuelTo(level)
	local prevSlot = turtle.getSelectedSlot()
	local fuelLocated = false
	
	while turtle.getFuelLevel() < level do
	
		if fuelLocated then
		
			-- Try to refuel with selected slot
			if not turtle.refuel(1) then
				fuelLocated = false
			end
		else

			-- Find fuel if not in slot
			for _, fuelSource in ipairs(fuelSources) do
				if selectItemLike(fuelSource) and turtle.refuel(1) then
					fuelLocated = true
					print(""[Fuel] Used ""..tostring(fuelSource))
					break
				end
			end
			
			if not fuelLocated then
				print(""[Fuel] Unable to find a source of fuel."")
				turtle.select(prevSlot)
				return false
			end
		end
	end
	
	if fuelLocated then
		print(""[Fuel] Refueled to: ""..tostring(turtle.getFuelLevel()))
	end
	turtle.select(prevSlot)
	return true
end


--      Inventory
function selectItem(name)
	for i=1, 16 do
		local itemDetail = turtle.getItemDetail(i)
		if itemDetail and itemDetail.name == name then
			turtle.select(i)
			break
		end
	end
end

function selectItemLike(search)
	for i=1, 16 do
		local itemDetail = turtle.getItemDetail(i)
		if itemDetail and string.find(itemDetail.name, search) ~= nil then
			turtle.select(i)
			return true
		end
	end
	
	return false
end


--      Actions
function mineHallwaySlice()
	forward()
	turnLeft()
	dig()
	down()
	dig()
	down()
	dig()
	turnRight(2)
	dig()
	up()
	dig()
	up()
	dig()
	turnLeft()
end
	

--       Main
print(""Starting to mine..."")
while redstone.getInput(""left"") do
	
	-- Go to end of hallway
	while not turtle.detect() do
		forward()
	end
	
	-- Check branches
	local foundNextBranch = false
	down()
	turnRight()
	forward()
	down()
	if turtle.detect() then
		foundNextBranch = true
	end
	if not foundNextBranch then
		up()
		turnLeft(2)
		forward(2)
		down()
		if turtle.detect() then
			foundNextBranch = true
		else
			up()
			turnRight(2)
			forward()
			turnLeft()
			up()
		end
	end
	
	-- Extend hallway if both branches mined
	if not foundNextBranch then
		for i = 1, branchGap+1 do
			mineHallwaySlice()
		end
		down()
		selectItem(""minecraft:torch"")
		turtle.placeDown()
		
		turnRight()
		forward()
		down()
	end
end"
JTjHkbXS,G2A.com Free Gift Card Guide Jan 2024,ounnuo,GetText,Monday 29th of January 2024 05:09:40 AM CDT,"G2A.com free gift card & games updated guide.
Any item for free on G2A.com including Amazon, Steam, Xbox, Playstation gift cards & everything else offered.
 
PDF guide here:
https://drive.google.com/file/d/19Hbtao1NkH151RIhoWLJ9mhp8TPYzmdb/view?usp=g2a_refund_exploit_728687.pdf
 
Working as of
29 January 2024"
pC5SM63x,paste test,dolomite42,C,Monday 29th of January 2024 05:00:29 AM CDT,"Pasted at: 29/01/2024 11:00
186272fd8-344d-4338-9d78-c18411eb347d@gmail.com"
bYCGdtmn,paste test,dolomite42,C,Monday 29th of January 2024 05:00:28 AM CDT,"Pasted at: 29/01/2024 11:00
086272fd8-344d-4338-9d78-c18411eb347d@gmail.com"
AgKVHA6v,paste test,dolomite42,C,Monday 29th of January 2024 05:00:20 AM CDT,"Pasted at: 29/01/2024 11:00
2038dcd459-16bc-4641-bc03-eb2ed911db02@gmail.com"
2bBi0SLh,paste test,dolomite42,C,Monday 29th of January 2024 05:00:19 AM CDT,"Pasted at: 29/01/2024 11:00
1938dcd459-16bc-4641-bc03-eb2ed911db02@gmail.com"
AQWXG32c,paste test,dolomite42,C,Monday 29th of January 2024 05:00:19 AM CDT,"Pasted at: 29/01/2024 11:00
1838dcd459-16bc-4641-bc03-eb2ed911db02@gmail.com"
GkT8hDYU,paste test,dolomite42,C,Monday 29th of January 2024 05:00:19 AM CDT,"Pasted at: 29/01/2024 11:00
1738dcd459-16bc-4641-bc03-eb2ed911db02@gmail.com"
7GYuL6vV,paste test,dolomite42,C,Monday 29th of January 2024 05:00:18 AM CDT,"Pasted at: 29/01/2024 11:00
1638dcd459-16bc-4641-bc03-eb2ed911db02@gmail.com"
iR9dbf7b,paste test,dolomite42,C,Monday 29th of January 2024 05:00:18 AM CDT,"Pasted at: 29/01/2024 11:00
1538dcd459-16bc-4641-bc03-eb2ed911db02@gmail.com"
qYMEKU4n,paste test,dolomite42,C,Monday 29th of January 2024 05:00:17 AM CDT,"Pasted at: 29/01/2024 11:00
1438dcd459-16bc-4641-bc03-eb2ed911db02@gmail.com"
UJQJexDe,paste test,dolomite42,C,Monday 29th of January 2024 05:00:16 AM CDT,"Pasted at: 29/01/2024 11:00
1338dcd459-16bc-4641-bc03-eb2ed911db02@gmail.com"
i47ZpJn6,paste test,dolomite42,C,Monday 29th of January 2024 05:00:16 AM CDT,"Pasted at: 29/01/2024 11:00
1238dcd459-16bc-4641-bc03-eb2ed911db02@gmail.com"
UnDCxExD,paste test,dolomite42,C,Monday 29th of January 2024 05:00:15 AM CDT,"Pasted at: 29/01/2024 11:00
1138dcd459-16bc-4641-bc03-eb2ed911db02@gmail.com"
C2T41AhC,paste test,dolomite42,C,Monday 29th of January 2024 05:00:15 AM CDT,"Pasted at: 29/01/2024 11:00
1038dcd459-16bc-4641-bc03-eb2ed911db02@gmail.com"
6rBWGzey,paste test,dolomite42,C,Monday 29th of January 2024 05:00:14 AM CDT,"Pasted at: 29/01/2024 11:00
938dcd459-16bc-4641-bc03-eb2ed911db02@gmail.com"
7Mdeth3H,paste test,dolomite42,C,Monday 29th of January 2024 05:00:14 AM CDT,"Pasted at: 29/01/2024 11:00
838dcd459-16bc-4641-bc03-eb2ed911db02@gmail.com"
CcN2JVan,paste test,dolomite42,C,Monday 29th of January 2024 05:00:14 AM CDT,"Pasted at: 29/01/2024 11:00
738dcd459-16bc-4641-bc03-eb2ed911db02@gmail.com"
KYMvKFjS,paste test,dolomite42,C,Monday 29th of January 2024 05:00:13 AM CDT,"Pasted at: 29/01/2024 11:00
638dcd459-16bc-4641-bc03-eb2ed911db02@gmail.com"
cFTEa0hC,paste test,dolomite42,C,Monday 29th of January 2024 05:00:13 AM CDT,"Pasted at: 29/01/2024 11:00
538dcd459-16bc-4641-bc03-eb2ed911db02@gmail.com"
wwBCZU0F,paste test,dolomite42,C,Monday 29th of January 2024 05:00:12 AM CDT,"Pasted at: 29/01/2024 11:00
438dcd459-16bc-4641-bc03-eb2ed911db02@gmail.com"
4c0Ac1gk,paste test,dolomite42,C,Monday 29th of January 2024 05:00:12 AM CDT,"Pasted at: 29/01/2024 11:00
338dcd459-16bc-4641-bc03-eb2ed911db02@gmail.com"
eX9CLxeY,paste test,dolomite42,C,Monday 29th of January 2024 05:00:11 AM CDT,"Pasted at: 29/01/2024 11:00
238dcd459-16bc-4641-bc03-eb2ed911db02@gmail.com"
CVWh84ds,paste test,dolomite42,C,Monday 29th of January 2024 05:00:11 AM CDT,"Pasted at: 29/01/2024 11:00
138dcd459-16bc-4641-bc03-eb2ed911db02@gmail.com"
mGcig9fH,paste test,dolomite42,C,Monday 29th of January 2024 05:00:11 AM CDT,"Pasted at: 29/01/2024 11:00
038dcd459-16bc-4641-bc03-eb2ed911db02@gmail.com"
YVMKJ1RX,paste test,dolomite42,C,Monday 29th of January 2024 05:00:01 AM CDT,"Pasted at: 29/01/2024 11:00
a5f27b6c-4e10-42ff-8a3b-b04669ea0e38@gmail.com"
VDfVDJgt,paste test,dolomite42,C,Monday 29th of January 2024 04:59:52 AM CDT,"Pasted at: 29/01/2024 10:59
fb591060-94bc-4d2f-a9db-6706045f375d@gmail.com"
05P3qQUD,paste test,dolomite42,C,Monday 29th of January 2024 04:59:44 AM CDT,"Pasted at: 29/01/2024 10:59
198228376-9b11-4031-b4bf-86c6edc72c2a@gmail.com"
D9ubyXiq,paste test,dolomite42,C,Monday 29th of January 2024 04:59:43 AM CDT,"Pasted at: 29/01/2024 10:59
98228376-9b11-4031-b4bf-86c6edc72c2a@gmail.com"
FEsNsQAP,paste test,dolomite42,C,Monday 29th of January 2024 04:59:36 AM CDT,"Pasted at: 29/01/2024 10:59
12aa5a463-594a-4853-b505-f6b939532a1d@gmail.com"
W0Xnk0rD,paste test,dolomite42,C,Monday 29th of January 2024 04:59:36 AM CDT,"Pasted at: 29/01/2024 10:59
2aa5a463-594a-4853-b505-f6b939532a1d@gmail.com"
W3hQLBzu,Errror E2029,D98rolb,Delphi,Monday 29th of January 2024 04:45:16 AM CDT,"type
  TFINode = (FI526A, FI528A, FI544A, FI529A, FI516A, FI552A, FI572A, FI551A, FI510A, FI550A, FI503A, FI548A, FI505A, FI530A, FI599A, DmeErrorMessage);

function TCustomsExportMessageHandler.GetExportTypeAndMessageId(const aDocument: string; out aMessageType: string; out aMessageId: string): Boolean;
var
  vDoc: XMLIntf.IXmlDocument;
  sNode: string;
  FINode: TFINode;
begin
  Result := true;
  vDoc := NewXmlDocument;
  vDoc.Version := '1.0';
  vDoc.Encoding := 'UTF-8';
  vDoc.LoadFromXml(aDocument);
  for FINode := Low(TFINode) to High(TFINode) do
  begin
    sNode := TRttiEnumerationType.GetName<TFINode>(FINode);
    if Assigned(vDoc.ChildNodes.FindNode(sNode)) then
    begin
      if FINode = FI526A then   // Error E2029
      begin
//        aMessageType := 'EXPREG';
//        aMessageid := vDoc.ChildNodes.FindNode('FI526A').ChildNodes.FindNode('Identification').Text;
      end;
    end;
  end;
end;  "
jTc3g5Cv,assignment 4.(2) stack menu linkedlist,Samkhan4u,C++,Monday 29th of January 2024 04:11:04 AM CDT,"#include <iostream>
using namespace std;

struct Node{
    int data;

    struct Node* next;
};
struct Node* top=NULL;

void push(int val) {
    Node* new_node=new Node();
    new_node->data=val;
    new_node->next=top;
    top=new_node;
}

void pop() {
    if(top==NULL) {
        cout << ""stack underflow"" << endl;
    }
    else {
        cout << ""The popped element is: "" << top->data << endl;
        top = top->next;
    }
}

void display() {
    struct Node *temp;
    if(top==NULL){
        cout << ""stack is empty"" << endl;
    }
    else {
        temp = top;
        while(temp!=NULL) {
        cout << temp->data <<"" "";
        temp = temp->next;
    }
    cout << endl;
    }
}

int main() {
    int ch, val;
    cout << ""1> Push in stack"" << endl;
    cout << ""2> Pop from stack"" << endl;
    cout << ""3> Display stack"" << endl;
    cout << ""4> Exit"" << endl;
    do {
        cout << ""->Enter your choice: "",cin>>ch;
        switch(ch) {
            case 1: {
                cout << ""Enter value to be pushed: "", cin >> val;
                push(val);
                break;
            }
            case 2: {
                pop();
                break;
            }
            case 3: {
                display();
                break;
            }
            case 4: {
                cout<<""Exit ""<<endl;
                break;
            }
            default: {
                cout<<""Invalid choice ""<<endl;
            }
        }
    } while (ch != 4);
    return 0;
}"
Y838ghAB,assignment 4.(1)stackmenudriven,Samkhan4u,C++,Monday 29th of January 2024 04:09:05 AM CDT,"#include <iostream>
using namespace std;

class Stack {
    int top;
    int arr[5];
    public:
    Stack() {
        top=-1;
    }
    void push();
    void pop();
    void view();
    int isEmpty();
    int isFull();
};

int Stack::isEmpty() {
    return (top == (-1) ? 1 : 0);
}

int Stack::isFull() {
    return (top == 5 ? 1 : 0);
}

void Stack::push() {
    if(isFull()) {
        cout << ""Stack is full {OVERFLOW}"" << endl;
    }
    else {
        int i;
        cout << ""Enter an element: "", cin >> i;
        ++top;
        arr[top] = i;
        cout << ""Insertion sucessful"" << endl;
    }
}

void Stack::pop() {
    if(isEmpty()) {
        cout << ""Stack is Empty {UNDERFLOW}"" << endl;
    }
    else {
        cout << ""Deleted item is : ""<<arr[top] << endl;
        top--;
    }
}

void Stack::view() {
    if(isEmpty()) {
        cout << ""Stack is Empty {UNDERFLOW}"" << endl;
    }
    else {
        cout << ""\n STACK:\n"";
        for (int i = top; i >= 0; i--) {
            cout << arr[i] << endl;
        }
    }
}

int main() {
    Stack s;
    int ch=0;

    while(ch!=4) {
        cout << ""1> Push"" << endl;
        cout << ""2> Pop"" << endl;
        cout << ""3> Display"" << endl;
        cout << ""4> Quit"" << endl;
        cout << ""->Enter your choice: "",cin>>ch;

        switch(ch) {
            case 1: {
                s.push();
                break;
            }
            case 2: {
                s.pop();
                break;
            }
            case 3: {
                s.view();
                break;
            }
            case 4: {
                cout<<""press any key ""<<endl;
                break;
            }
            default:{
                cout << ""wrong choice!!"" << endl;
                break;
            }
        }
    }
    return 0;
}

"
GQxyyG2a,assignment 3 linked list menudriven,Samkhan4u,C++,Monday 29th of January 2024 04:06:28 AM CDT,"#include <iostream>
#include <conio.h>
using namespace std;

class Node {
public:
    int data;
    Node *next;
    // constructor
    Node(int data) {
        this->data = data;
        this->next = NULL;
    }
};

void insertathead(Node* &head, int dat) {
    Node *temp = new Node(dat);
    temp->next = head;
    head = temp;
}

void insertattail(Node* &head, int dat) {
    if(head==NULL){
        insertathead(head, dat);
        return;
    }
    Node *tail = head;
    while(tail->next!=NULL){
        tail = tail->next;
    }
    tail->next = new Node(dat);
    tail->next->next = NULL;
}

void insertatposition(Node* &head, int dat, int pos) {
    if(pos==1){  //if insering at 1st
        insertathead(head, dat);
        return;
    }
    Node *temp = head;
    int count = 1;
    while (count < pos - 1) {
        temp = temp->next;
        count++;
    }
    //if inserting in last 
    if(temp->next==NULL) {
        insertattail(head, dat);
        return;
    }
    Node *new_node = new Node(dat);
    new_node->next = temp->next;
    temp->next = new_node;
}

void deletenode(Node* &head, int pos) {
    if(head==NULL){
        cout << ""can't perform Deletion "" << endl;
        return;
    }
    else if(pos==1) {
        Node *temp = head;
        head = head->next;
        temp->next = NULL;
        delete temp;
    }
    else {
        Node *curr = head;
        Node *prev = NULL;

        int cnt = 1;
        while(cnt<pos) {
            prev = curr;
            curr = curr->next;
            cnt++;
        }
        prev->next = curr->next;
        curr->next = NULL;
        delete curr;
    }
}

void searching(Node* &head, int d) {
    if(head==NULL){
        cout << ""list is empty"" << endl;
        return;
    }
    Node *temp = head;
    int cnt = 1;
    while(temp->data!=d && temp->next!=NULL) {
        temp = temp->next;
        cnt++;
    }
    if(temp->data==d) {
        cout << d << "" found in node: "" << cnt<<endl;
    }
    else {
        cout << ""data not found!"" << endl;
    }  
}
void countnode(Node* &head) {
    if(head==NULL){
        cout << ""linkedlist is empty\n"";
        return;
    }
    Node *temp = head;
    int length = 1;
    while(temp->next!=NULL) {
        temp = temp->next;
        length++;
    }
    cout << ""Total no. of Node is: "" << length << endl;
}

void sorting(Node* &head){
    Node *i,*j;
    int temp;
    for (i = head; i->next != NULL; i=i->next) {
        for (j = i->next; j!= NULL; j=j->next) {
            if(i->data>j->data){
                temp = i->data;
                i->data = j->data;
                j->data = temp;
            }
        }
    }
}

void printlist(Node* &head) {
    if (head==NULL) {
        cout << ""linkedlist is empty\n"";
        return;
    }
      Node *temp = head;
    while(temp!=NULL) {
      cout << temp->data <<"" "";
      temp = temp->next;
    }
    cout << endl;
}

int main()
{
    int ch,value,pos;
    Node *head = NULL;

    cout << ""1> Insert at head."" << endl;
    cout << ""2> Insert at tail."" << endl;
    cout << ""3> Insert at a paticular position."" << endl;
    cout << ""4> Deletion."" << endl;
    cout << ""5> Searching."" << endl;
    cout << ""6> Count length of nodes."" << endl;
    cout << ""7> Sort the list."" << endl;
    cout << ""8> Display linked list."" << endl;
    cout << ""9> Exit."" << endl;
    cout << ""--------------------------------------"" << endl;

    while(1) {
        cout << ""-> Enter Your choice: "",cin>>ch;
        switch(ch){
            case 1:{
                cout << ""enter the value to insert at head: "", cin >> value;
                insertathead(head,value);
                printlist(head);
                break;
            }
            case 2:{
                cout << ""enter the value to insert at tail: "", cin >> value;
                insertattail(head,value);
                printlist(head);
                break;
            }
            case 3:{
               cout << ""enter the value to insert: "", cin >> value;
               cout << ""enter the position: "", cin >> pos;
                insertatposition(head,value,pos);
                printlist(head);
                break;
            }
            case 4:{
                cout << ""enter the position of Node to delete: "", cin >> pos;
                deletenode(head,pos);
                printlist(head);
                break;
            }
            case 5: {
                cout << ""enter the value to search: "", cin >> value;
                searching(head,value);
                break;
            }
            case 6:{
                countnode(head);
                break;
            }
            case 7:{
                sorting(head);
                printlist(head);
                break;
            }
            case 8:{
                printlist(head);
                break;
            }
            case 9:{
                exit(0);
            }
        }
    }
    return 0;
}"
tNM4CmZc,Untitled,billy123billy,Python,Monday 29th of January 2024 03:57:04 AM CDT,"# Import library yang dibutuhkan
import pandas as pd
from sklearn.neighbors import KNeighborsRegressor
import numpy as np
import matplotlib.pyplot as plt


# Membaca data user dan data pariwisata
data_user = pd.read_csv(""datauser.csv"")
data_pariwisata = pd.read_csv(""datawisata.csv"")

# Menggabungkan data user dan data pariwisata
data = data_user.merge(data_pariwisata, on=""jenis_wisata"")

# Memvisualisasikan data
plt.hist(data[""favorite""])

# Mempersiapkan data untuk pemodelan
# Simpan kolom id_user dan username terlebih dahulu
id_user = data[""id_user""]
username = data[""username""]

# Hapus kolom id_user dan username untuk pemodelan
data = data.drop([""id_user"", ""username""], axis=1)

# Mengubah wisata favorite menjadi bilangan bulat
data[""favorite""] = data[""favorite""].astype(np.int)

# Mengembalikan kolom id_user dan username
data = pd.concat([data, id_user, username], axis=1)

# Cetak bentuk data sebelum melatih model
print(data.shape)

# Jika data kosong, tampilkan pesan error dan hentikan program
if data.shape[0] == 0:
    print(""Error: Data kosong!"")
    exit()

# Lanjutkan dengan pemodelan jika data tidak kosong
model = KNeighborsRegressor(n_neighbors=5)
model.fit(data.iloc[:, :-2], data.iloc[:, -1])  # Perhatikan perubahan indeks kolom di sini

# Melakukan rekomendasi
# Mendapatkan rekomendasi untuk user 1
rekomendasi = model.predict(data.iloc[0, :-2])  # Perhatikan perubahan indeks kolom di sini

# Menampilkan rekomendasi
print(rekomendasi)
"
8GC9Lsvg,1. TryParse,Spocoman,C++,Monday 29th of January 2024 03:33:18 AM CDT,"#include <iostream>
#include <string>

using namespace std;

bool isNumber(const string& s) {
    if (s[0] != '-' && !isdigit(s[0])) {
        return false;
    }
    for (size_t i = 1; i < s.size(); i++) {
        if (!isdigit(s[i])) {
            return false;
        }
    }
    return true;
}

int main()
{
    string n1, n2;
    cin >> n1 >> n2;

    if (isNumber(n1) && isNumber(n2)) {
        cout << stoi(n1) + stoi(n2) << endl;
   }
    else {
        for (auto& n : { n1, n2 }) {
            cout << (!isNumber(n) ? ""[error] "" : """") << n << endl;
        }
    }

    return 0;
}

    "
8tE0qt3r,zad4.spr,ppiso,PHP,Monday 29th of January 2024 03:27:34 AM CDT,"<?php
function potegi_dwojki() {
    for ($i = 0; $i < 5; $i++) {
        $power = pow(2, $i);
        echo ""$power\n"";
    }
}
potegi_dwojki();
?>"
m2LrbpHp,zad3.spr,ppiso,PHP,Monday 29th of January 2024 03:26:00 AM CDT,"<?php
function rownania($a, $b, $c) {
    if ($a == 0) {
        echo ""Równanie nie jest równaniem kwadratowym"";
    } else {
        $delta = $b * $b - 4 * $a * $c;
        if ($delta > 0) {
            echo ""Równanie ma dwa rozwiązania"";
        } elseif ($delta == 0) {
            echo ""Równanie ma jedno rozwiązanie"";
        } else {
            echo ""Równanie nie ma rozwiązań"";
        }
    }
}
rownania(0, 5, 4); // Równanie nie jest równaniem kwadratowym
echo ""<br>"";
rownania(1, -1, 0); // Równanie ma dwa rozwiązania
echo ""<br>"";
rownania(1, 6, 9); // Równanie ma jedno rozwiązanie
echo ""<br>"";
rownania(3, 0, 4); // Równanie nie ma rozwiązań
?>"
c7gNs7hG,zad2.spr,ppiso,PHP,Monday 29th of January 2024 03:23:40 AM CDT,"<?php
function bmi($wzrost, $waga) {
    $bmi = $waga / pow($wzrost / 100, 2);
    $bmi = round($bmi, 1);
    if ($bmi < 18.5) {
        return ""Wartość BMI to $bmi. Za mało!"";
    } elseif ($bmi > 25) {
        return ""Wartość BMI to $bmi. Za dużo!"";
    } else {
        return ""Wartość BMI to $bmi. OK!"";
    }
}
echo bmi(190, 80);
?>"
yfb0gBCR,zad1.spr,ppiso,PHP,Monday 29th of January 2024 03:20:22 AM CDT,"<?php
function srednia($n, $min, $max) {
    
    $sum = 0;
    for ($i = 0; $i < $n; $i++) 
    {
        $liczba=rand($min,$max);
        $sum = $sum+$liczba;
        echo $liczba;
        echo ""<br>"";
    }
    return $sum / $n;
}
echo srednia(4,2,10)
?>"
96AxyrJB,auto-reconnect.sh,manssizz,Bash,Monday 29th of January 2024 03:17:39 AM CDT,"#!/bin/bash

#while true; do
while :
do
        ping -I wwan0 -4 -w5 fb.me > /dev/null
        if [ $? -ne 0 ];
        then
                ifdown modem
                sleep 1
                ifup modem
#                echo ""$(date) ping was OK""
                echo -e ""$(date) \e[31mPING NOT OK, RESTARTING INTERFACE\e[0m""
                echo ""$(date) PING NOT OK, RESTARTING INTERFACE"" >> /tmp/wwan.log
                logger -t modem -p warning -s ""PING NOT OK, RESTARTING INTERFACE"" 
                echo ""$(date) Failed to connect"" >> /root/wwan_monitor.log

                sleep 300
        else
                echo -e ""$(date) \e[32mPING OK\e[0m""
        fi

        sleep 5
done"
