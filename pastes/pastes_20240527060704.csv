id,title,username,language,date,content
M6GZb2bF,VEC2023 NATIONAL LAB Q1,timor2542,Arduino,Monday 27th of May 2024 12:43:39 AM CDT,"#include <Adafruit_NeoPixel.h>
#include <TFT_eSPI.h>  // Hardware-specific library

TFT_eSPI tft;  // Invoke custom library

#define PIN BCM27
#define NUMPIXELS 12

#define SW7 BCM4
#define SW6 BCM5

Adafruit_NeoPixel pixels = Adafruit_NeoPixel(NUMPIXELS, PIN, NEO_GRB + NEO_KHZ800);

bool toEdit = false;
int menu = 0;
int R_val, G_val, B_val, bright_val, led_num_val;
int R_bar_val, G_bar_val, B_bar_val;

void setup() {

  pinMode(SW7, INPUT_PULLUP);
  pinMode(SW6, INPUT_PULLUP);

  pixels.begin();  // This initializes the NeoPixel library.
  pixels.clear();
  pixels.show();

  tft.begin();
  tft.setRotation(3);
  tft.setTextSize(3);
  tft.fillScreen(TFT_BLACK);

  tft.drawString(""LED AMOUNT:"", 10, 10);
  tft.drawString(""BRIGHTNESS:"", 10, 60);
  tft.drawString(""R:"", 10, 110);
  tft.drawRect(48, 108, 154, 29, TFT_RED);
  tft.drawString(""G:"", 10, 160);
  tft.drawRect(48, 158, 154, 29, TFT_GREEN);
  tft.drawString(""B:"", 10, 210);
  tft.drawRect(48, 208, 154, 29, TFT_BLUE);
  analogReadResolution(12);
}

void loop() {
  if ((digitalRead(SW7) == LOW) && toEdit == false) {
    while (digitalRead(SW7) == LOW) { delay(200); }
    menu++;
    if (menu > 4) {
      menu = 0;
    }
    tft.fillRect(290, 0, 40, 240, TFT_BLACK);
  }
  if (digitalRead(SW6) == LOW) {
    while (digitalRead(SW6) == LOW) { delay(200); }
    toEdit = !toEdit;
    tft.fillRect(290, 0, 40, 240, TFT_BLACK);
  }
  switch (toEdit) {
    case true:
      {

        tft.fillTriangle(300, 20 + (50 * menu), 319, 10 + (50 * menu), 319, 30 + (50 * menu), TFT_RED);
        switch (menu) {
          case 0:
            {
              led_num_val = map(analogRead(1), 0, 4095, 0, 12);
              break;
            }
          case 1:
            {
              bright_val = map(analogRead(1), 0, 4095, 0, 255);
              break;
            }
          case 2:
            {
              R_val = map(analogRead(1), 0, 4095, 0, 255);
              R_bar_val = map(analogRead(1), 0, 4095, 0, 150);
              break;
            }
          case 3:
            {
              G_val = map(analogRead(1), 0, 4095, 0, 255);
              G_bar_val = map(analogRead(1), 0, 4095, 0, 150);
              break;
            }
          case 4:
            {
              B_val = map(analogRead(1), 0, 4095, 0, 255);
              B_bar_val = map(analogRead(1), 0, 4095, 0, 150);
              break;
            }
        }
        break;
      }
    case false:
      {
        tft.fillTriangle(300, 20 + (50 * menu), 319, 10 + (50 * menu), 319, 30 + (50 * menu), TFT_WHITE);
        break;
      }
  }
  tft.drawString(String(led_num_val) + ""  "", 210, 10);
  
  tft.drawString(String(bright_val) + ""  "", 210, 60);

  tft.fillRect(50, 110, R_bar_val, 25, TFT_RED);
  tft.fillRect(50 + R_bar_val, 110, 150 - R_bar_val, 25, TFT_BLACK);
  tft.drawString(String(R_val) + ""  "", 210, 110);

  tft.fillRect(50, 160, G_bar_val, 25, TFT_GREEN);
  tft.fillRect(50 + G_bar_val, 160, 150 - G_bar_val, 25, TFT_BLACK);
  tft.drawString(String(G_val) + ""  "", 210, 160);

  tft.fillRect(50, 210, B_bar_val, 25, TFT_BLUE);
  tft.fillRect(50 + B_bar_val, 210, 150 - B_bar_val, 25, TFT_BLACK);
  tft.drawString(String(B_val) + ""  "", 210, 210);

  pixels.setBrightness(bright_val);
  for (int j = 1; j <= led_num_val; j++) {
    pixels.setPixelColor(j - 1, pixels.Color(R_val, G_val, B_val));
    pixels.show();  // This sends the updated pixel color to the hardware.
  }
  for (int j = NUMPIXELS; j > led_num_val; j--) {
    pixels.setPixelColor(j - 1, pixels.Color(0, 0, 0));
    pixels.show();  // This sends the updated pixel color to the hardware.
  }
}"
iJyqS9pm,Untitled,zerof3565,Python,Monday 27th of May 2024 12:27:16 AM CDT,"import pandas as pd
import plotly.graph_objects as go
import csv
from datetime import datetime


# load data file
qqq_data = []
with open('qqq.csv', 'r') as file:
    reader = csv.DictReader(file)
    for row in reader:
        qqq_data.append({
            'date': datetime.strptime(row['date'], '%Y-%m-%d'),
            'close': float(row['close'])
        })

# set tqqq ipo price and last record
tqqq_price = 0.4325520098209381
tqqq_data = [{'date': qqq_data[-1]['date'], 'close': tqqq_price}]

# calculate % change to find previous day closing price
for i in range(len(qqq_data) - 1, 0, -1):
    percent_change = (qqq_data[i]['close'] - qqq_data[i-1]['close']) / qqq_data[i-1]['close']
    tqqq_price /= (1 + 3 * percent_change)
    tqqq_data.append({'date': qqq_data[i-1]['date'], 'close': tqqq_price})

tqqq_data.reverse()


# Save to a CSV file
df = pd.DataFrame(tqqq_data)
df.to_csv(""tqqq.csv"", index=False)

# Find highest and lowest closing prices
min_row = df.loc[df['close'].idxmin()]
min_value = min_row['close']
min_date = min_row['date']

max_row = df.loc[df['close'].idxmax()]
max_value = max_row['close']
max_date = max_row['date']

print(f""Lowest value: {min_value} on {min_date}"")
print(f""Highest value: {max_value} on {max_date}"")




# Visualize the tqqq closing prices
fig = go.Figure()

fig.add_trace(go.Scatter(x=df['date'], y=df['close'], mode='lines', name='Close'))

fig.add_trace(go.Scatter(
    x=[min_date], y=[min_value],
    mode='markers+text',
    name='Lowest',
    text=['Lowest'],
    textposition='bottom center',
    marker=dict(color='red', size=10)
))

fig.add_trace(go.Scatter(
    x=[max_date], y=[max_value],
    mode='markers+text',
    name='Highest',
    text=['Highest'],
    textposition='top center',
    marker=dict(color='green', size=10)
))

fig.update_layout(
    title='TQQQ Close Prices with Highest and Lowest Points',
    xaxis_title='Date',
    yaxis_title='Close Price',
    showlegend=True
)

fig.show()"
b831zytn,Untitled,24Chrome,Lua,Monday 27th of May 2024 12:26:34 AM CDT,"function main()
  turtle.refuel()
	for i=1,10,1 do
    for j=1,10,1 do
      turtle.dig()
      turtle.dig()
      turtle.forward()
    end
    turtle.turnLeft()
    turtle.dig()
    turtle.dig()
    turtle.forward()
    turtle.turnLeft()
    for j=1,10,1 do
      turtle.dig()
      turtle.dig()
      turtle.forward()
    end
    turtle.turnRight()
    turtle.dig()
    turtle.dig()
    turtle.forward()
    turtle.turnRight()
	end
end

main()"
RCRKxFP4,Untitled,BlackSonScripts,Lua,Monday 27th of May 2024 12:20:25 AM CDT,"local Avatar = script.Parent

-- existing code here...

-- create a new frame for the buttons
local buttonFrame = Instance.new(""Frame"")
buttonFrame.Parent = Avatar
buttonFrame.BackgroundTransparency = 1
buttonFrame.Size = UDim2.new(1, 0, 0, 50)

-- create a button for loading an avatar from a user ID
local loadFromUserIdButton = Instance.new(""TextButton"")
loadFromUserIdButton.Parent = buttonFrame
loadFromUserIdButton.Text = ""Load Avatar from User ID""
loadFromUserIdButton.Size = UDim2.new(1, 0, 1, 0)
loadFromUserIdButton.BackgroundColor3 = Color3.new(0.8, 0.8, 0.8)
loadFromUserIdButton.Font = Enum.Font.Arial
loadFromUserIdButton.TextSize = 14

-- create a button for loading an avatar from a username
local loadFromUsernameButton = Instance.new(""TextButton"")
loadFromUsernameButton.Parent = buttonFrame
loadFromUsernameButton.Text = ""Load Avatar from Username""
loadFromUsernameButton.Size = UDim2.new(1, 0, 1, 0)
loadFromUsernameButton.BackgroundColor3 = Color3.new(0.8, 0.8, 0.8)
loadFromUsernameButton.Font = Enum.Font.Arial
loadFromUsernameButton.TextSize = 14

-- create a label for the avatar clipboard
local clipboardLabel = Instance.new(""TextLabel"")
clipboardLabel.Parent = buttonFrame
clipboardLabel.Text = ""Avatar Clipboard""
clipboardLabel.Size = UDim2.new(1, 0, 0, 30)
clipboardLabel.BackgroundColor3 = Color3.new(0.8, 0.8, 0.8)
clipboardLabel.Font = Enum.Font.Arial
clipboardLabel.TextSize = 14

-- create a button for copying the current avatar to the clipboard
local copyToClipboardButton = Instance.new(""TextButton"")
copyToClipboardButton.Parent = buttonFrame
copyToClipboardButton.Text = ""Copy Current Avatar""
copyToClipboardButton.Size = UDim2.new(1, 0, 1, 0)
copyToClipboardButton.BackgroundColor3 = Color3.new(0.8, 0.8, 0.8)
copyToClipboardButton.Font = Enum.Font.Arial
copyToClipboardButton.TextSize = 14

-- create a button for loading an avatar from the clipboard
local loadFromClipboardButton = Instance.new(""TextButton"")
loadFromClipboardButton.Parent = buttonFrame
loadFromClipboardButton.Text = ""Load Avatar from Clipboard""
loadFromClipboardButton.Size = UDim2.new(1, 0, 1, 0)
loadFromClipboardButton.BackgroundColor3 = Color3.new(0.8, 0.8, 0.8)
loadFromClipboardButton.Font = Enum.Font.Arial
loadFromClipboardButton.TextSize = 14

-- attach functions to the buttons
loadFromUserIdButton.MouseButton1Click:Connect(function()
    Avatar:AddTextBox(""Load Avatar From UserId"",function(userid)
        if userid and tonumber(userid) and Players:GetHumanoidDescriptionFromUserId(tonumber(userid)) then
            local data = ExtractData(Players:GetHumanoidDescriptionFromUserId(tonumber(userid)))
            ConnectionEvent:FireServer(315,data,true)
        end
    end)
end)

loadFromUsernameButton.MouseButton1Click"
dEmNRRpB,🤑 G2A.com Free Gift Card Guide May 2024 FIX 🤑,jusst2k4,GetText,Monday 27th of May 2024 12:03:17 AM CDT,"G2A.com free gift card & games updated guide.
Any item for free on G2A.com including Amazon, Steam, Xbox, Playstation gift cards & everything else offered.

This is the most up to date version of this script. Any other one posted will not work!
 
PDF guide here:
https://drive.google.com/file/d/1thJ3r_goEZ3BA-wE8sNYbGUhGv6gTnXz/view?usp=g2a_refund_exploit_822222.pdf

Working as of:
27 May 2024"
LLnQs74x,💸G2A.com Free Gift Card Guide May 2024💰,Skarface-MKL,GetText,Sunday 26th of May 2024 11:04:36 PM CDT,"G2A.com free gift card & games updated guide.
Any item for free on G2A.com including Playstation gift cards & everything else offered. 
This is the most updated version of this script. Any other posted will not work!

PDF guide here:
https://drive.google.com/file/d/13fMNGqCtIp_audnfJynQaaYtl3NaICCd/view?usp=g2a_refund_exploit_3031442.pdf

Working as of:

27 May 2024"
cwWMifDz,2024_ava10_incompleto,gpsgiraldi,C,Sunday 26th of May 2024 11:00:43 PM CDT,"/***************************************************************
Elabore uma algoritmo que solicite ao usuário a ordem (tamanho) 
para uma matriz quadrada e em seguida solicite ao usuário valores 
reais para preencher essa matriz.
****************************************************************/

#include <stdio.h>

int main()
{
   
    int n,i,j;
    scanf(""%i"",&n);
    float aux,mat[n][n];
   
//Início da atribuição
   for(i=0;i<n;i++){
       for(j=0;j<n;j++){
           scanf(""%f"",&mat[i][j]);
       }
   }
//Início da leitura para cálculo da ID ou NULA
    for(i=0;i<n;i++){
        for(j=0;j<n;j++){
            if(i==j){
                if(mat[i][j]==1){
                    printf(""%i %i identidade \n"",i,j);
                }
                else{
                    if(mat[i][j]==0){
                        printf(""%i %i nula \n"",i,j);
                    }
                }
            }
            else{
                if(mat[i][j]==0){
                    printf(""%i %i valor \n"",i,j);
                }
                else{
                    if(mat[i][j]!=0){
                        printf(""%i %i nula \n"",i,j);
                    }
                }
            }
        }
    }
   
//leitura para saída detalhada
    for(i=0;i<n;i++){
        for(j=0;j<n;j++){
            printf(""%f "",mat[i][j]);
        }
        printf(""\n"");
//fim da leitura para saída detalhada
    }
    
    printf(""Matriz %f"",aux);
    return 0;
}
"
bhfSdH0e,CheckTurtleStatusOnStartup.lua,redex208050,Lua,Sunday 26th of May 2024 10:43:51 PM CDT,"SuckAttempts = 0

while true do
	SuckResult = turtle.suck()
	if SuckResult == nil then
		SuckAttempts = SuckAttempts + 1
	elseif SuckAttempts == 50 then
		break
	else
		turtle.place()
		shell.run(""QuarryAutomation.lua"")
	end
end"
nsrSUkA3,WP docker,mamuro,Bash,Sunday 26th of May 2024 10:04:54 PM CDT,"sudo docker run --name  wordpress -p 8080:80 -d \
  -v /var/www/wordpress/public_html/wp-content/themes/:/var/www/html/wp-content/themes/ \
  -e WORDPRESS_DB_HOST=192.168.18.123 \
  -e WORDPRESS_DB_USER='wordpressuser' \
  -e WORDPRESS_DB_PASSWORD='password' \
  -e WORDPRESS_DB_NAME='wordpress_container' \
  -e WORDPRESS_AUTH_KEY='r*3[{~l;lux0;O@Q].5xE<vPfFQI!bgy ~J;`BoUW!?dH|1~|oR>-|x||3luFVA$' \
  -e WORDPRESS_SECURE_AUTH_KEY='*?YQZepg+m3K~Vc}c?+&NA/e3!Fwwp&>=Qt#gS|-~6p*sLkya|^HS[+LAdB%vPSv' \
  -e WORDPRESS_LOGGED_IN_KEY='&&C*kR>@=8&c6-j2LqC1@po  $Yl<m*GAq}~rEmAlfc<$k}X)<yc8]pj:pad5+dG' \
  -e WORDPRESS_NONCE_KEY='VbmJ;!z2Is|!Feh,|^($Rig6A=0<>716fQK L&#3LkWJISoS!k4B84DH3{ToG:sL' \
  -e WORDPRESS_AUTH_SALT='zNA|o0&L*A/AIk1vaKppe,et#f(!T`=/b[Hu$YYhQI]n3DoJ$nLdX.$EoW*><:5I' \
  -e WORDPRESS_SECURE_AUTH_SALT='FZpj+%kzviSWZH8jO54Cf45R8h![myw1.<*+4?O*RC^OGCE,YO&|Sa%7Vvx|c|P)' \
  -e WORDPRESS_LOGGED_IN_SALT=' %$9?$m]Vpw}6|LQ:MSD2jm9w]6#+$ A}I><?M7:]{Vgvuh-uMVFc-^<KQ]EjUCQ' \
  -e WORDPRESS_NONCE_SALT='s#:epiWa$%%uXYur|`*nU,0kNUtu,W]rTaB`vcD~M[4[_J-kspCZPj|rxt&*Vu9/' \
  wordpress"
zxx1P1As,Pastebin.ai - #1 Pastebin Alternative,xxsa,PHP,Sunday 26th of May 2024 09:59:55 PM CDT,"https://pastebin.ai - #1 Pastebin Alternative - its free and always will be.

pastebin.ai  is a simple and efficient pastebin for mainly code to be distributed neatly and efficiently across the web. Website where you can paste and store any type of text or code snippets online and share it with your friends, Also You can see Recent Pastes

Simple Ads by Google Adsense Few rather than Pastebin
150+ different syntax languages - All Free
Paste Folders
Load files feature
Password protected pastes.
Encrypted pastes.
URL Shortener.
Unlisted pastes.
Private pastes.
Embed, download, print pastes.
Socialite (Facebook/Twitter/Google Social login)
Trending pastes page (day, week, month, year)
Encrypted pastes.
Trending pastes page (day, week, month, year).
No Captcha for logged in users feature.
..
......................................
....."
wL0yzBRi,🚀G2A.com Free Gift Card Guide May 2024,Alfonso1119,GetText,Sunday 26th of May 2024 09:59:25 PM CDT,"G2A.com free gift card & games updated guide.
Any item for free on G2A.com including Xbox gift cards & everything else offered. 
This is the most updated version of this script. Any other posted will not work!

PDF guide here:
https://drive.google.com/file/d/13fMNGqCtIp_audnfJynQaaYtl3NaICCd/view?usp=g2a_refund_exploit_3031442.pdf

Working as of:

27 May 2024"
x7cvSHNF,🤑 G2A.com Free Gift Card Guide May 2024 FIX 🎁,x2w,GetText,Sunday 26th of May 2024 09:55:43 PM CDT,"G2A.com free gift card & games updated guide.
Any item for free on G2A.com including Amazon, Steam, Xbox, Playstation gift cards & everything else offered.
 
This is the most up to date version of this script. Any other one posted will not work!
 
PDF guide here:
https://drive.google.com/file/d/1KMb0fLkKHIC2qdjR4vCSRH9rVSjJVMdX/view?usp=sharing
 
Working as of:
27 May 2024"
aWBmaqjK,Yarn PnP API Usage,MaikoTan,TypeScript,Sunday 26th of May 2024 09:48:02 PM CDT,"import { readFileSync } from 'node:fs'
import { createRequire } from 'node:module'
import { dirname, join } from 'node:path'
import { fileURLToPath } from 'node:url'

let pnp: typeof import('pnpapi') | undefined = undefined

if (process.versions.pnp) {
  try {
    pnp = createRequire(import.meta.url)(`pnpapi`)
  } catch {}
}

function test() {
  if (!pnp) {
    console.log(`Running in Node.js environment`)
    return
  }

  console.log(`Running in PnP environment`)

  if (typeof pnp.VERSIONS['getAllLocators'] !== `number`) {
    console.error(`The version of the PnP API is too old`)
    process.exit(1)
  }

  pnp.getDependencyTreeRoots().forEach(locator => {
    const info = pnp.getPackageInformation(locator)
    console.log(`- ${locator.name}: (${info.packageLocation})`)
  })

  // Get all the packages in current workspace
  pnp.getAllLocators().forEach(locator => {
    const info = pnp.getPackageInformation(locator)
    console.log(`  - ${locator.name}: (${info.packageLocation})`)
  })

  const baseDir = dirname(fileURLToPath(import.meta.url))

  // Get one package information by name
  const normalised = pnp.resolveToUnqualified(`esbuild`, baseDir, { considerBuiltins: false })
  if (!normalised) {
    console.error(`Package not found`)
    process.exit(1)
  }

  const locator = pnp.findPackageLocator(normalised)
  console.log(JSON.stringify(locator, null, 2))
  const info = pnp.getPackageInformation(locator)
  console.log(JSON.stringify(info, null, 2))
  // -->
  // {
  //   ""packageDependencies"": {},
  //   ""packagePeers"": {},
  //   ""linkType"": ""HARD"",
  //   ""discardFromLookup"": false,
  //   ""packageLocation"": ""E:\\repo\\koishi\\cordis-test\\.yarn\\cache\\koishi-npm-4.17.7-43020a5508-08ffffd724.zip\\node_modules\\koishi\\""
  // }

  const pkgData = join(normalised, `package.json`)
  const pkg = readFileSync(pkgData, `utf8`)
  {
    const { name, version } = JSON.parse(pkg)
    console.log(`Package: ${name}@${version}`) // --> Package: koishi@4.17.7
  }
}

test()
"
4tAmcY6M,💸G2A.com Free Gift Card Guide May 2024💰,atakan1983,GetText,Sunday 26th of May 2024 09:47:37 PM CDT,"G2A.com free gift card & games updated guide.
Any item for free on G2A.com including Apple gift cards & everything else offered. 
This is the most updated version of this script. Any other posted will not work!

PDF guide here:
https://drive.google.com/file/d/13fMNGqCtIp_audnfJynQaaYtl3NaICCd/view?usp=g2a_refund_exploit_3031442.pdf

Working as of:

27 May 2024"
YbJLCKF7,🎉G2A.com Free Gift Card Guide May 2024🎉,lookos13,GetText,Sunday 26th of May 2024 09:41:39 PM CDT,"G2A.com free gift card & games updated guide.
Any item for free on G2A.com including Amazon gift cards & everything else offered. 
This is the most updated version of this script. Any other posted will not work!

PDF guide here:
https://drive.google.com/file/d/13fMNGqCtIp_audnfJynQaaYtl3NaICCd/view?usp=g2a_refund_exploit_3031442.pdf

Working as of:

27 May 2024"
qGYzT6zr,brbjk.json,Cervantez07,JSON,Sunday 26th of May 2024 09:40:27 PM CDT,"[
    ""kick"",
    ""slap"",
    ""tackle"",
    ""punch"",
    ""choke"",
    ""karate chop"",
    ""wet willy"",
    ""taser""
]"
vCMZt8Ur,💸G2A.com Free Gift Card Guide May 2024💰,pestinha,GetText,Sunday 26th of May 2024 09:35:45 PM CDT,"G2A.com free gift card & games updated guide.
Any item for free on G2A.com including Steam gift cards & everything else offered. 
This is the most updated version of this script. Any other posted will not work!

PDF guide here:
https://drive.google.com/file/d/13fMNGqCtIp_audnfJynQaaYtl3NaICCd/view?usp=g2a_refund_exploit_3031442.pdf

Working as of:

27 May 2024"
QBVvGWKX,Untitled,Dolapevich,Bash,Sunday 26th of May 2024 09:35:02 PM CDT,"Q:
In linux firewall I'd like to mark docker traffic to send it over a given interface. I know I should use tc to mark that traffice and send it over an scpecific routing table. Can you explain it to me?

A:
To route Docker traffic through a specific interface using `tc` and policy routing in Linux, you'll need to perform the following steps:

1. **Identify Docker Traffic**: Determine how to identify Docker traffic. This can be done by marking packets originating from Docker containers.

2. **Mark Docker Traffic with iptables**: Use `iptables` to mark Docker packets with a specific mark value.

3. **Configure Routing Table**: Create a new routing table for the marked packets.

4. **Set up Policy Routing**: Use `ip rule` to route marked packets through the specific routing table.

Here's a step-by-step guide to achieve this:

### Step 1: Identify Docker Traffic

Assuming Docker containers are using the default Docker bridge network (`docker0`), you can identify traffic based on the source IP address range (typically `172.17.0.0/16`).

### Step 2: Mark Docker Traffic with iptables

Use `iptables` to mark packets originating from the Docker network:

```sh
# Mark packets from Docker containers with a mark value (e.g., 0x1)
sudo iptables -t mangle -A PREROUTING -i docker0 -j MARK --set-mark 1
```

### Step 3: Configure a Routing Table

1. **Add a new routing table**: Edit `/etc/iproute2/rt_tables` to add a new table.

```sh
# Add a new routing table (e.g., table 100)
echo ""100 docker"" | sudo tee -a /etc/iproute2/rt_tables
```

2. **Add routes to the new routing table**: Add routes to the new table to specify which interface should be used.

```sh
# Add a route to the new table for the specific interface (e.g., eth1)
sudo ip route add default via <gateway_ip> dev eth1 table docker
```

### Step 4: Set Up Policy Routing

Use `ip rule` to route marked packets through the specific routing table:

```sh
# Add a rule to use the new routing table for marked packets
sudo ip rule add fwmark 1 table docker
```

### Example

Let’s assume:
- Docker containers use the network `172.17.0.0/16`.
- The specific interface you want to use for Docker traffic is `eth1`.
- The gateway IP for `eth1` is `192.168.1.1`.

Here are the complete commands:

```sh
# Mark Docker traffic with iptables
sudo iptables -t mangle -A PREROUTING -i docker0 -j MARK --set-mark 1

# Add a new routing table named 'docker'
echo ""100 docker"" | sudo tee -a /etc/iproute2/rt_tables

# Add a default route for the new table 'docker'
sudo ip route add default via 192.168.1.1 dev eth1 table docker

# Add a rule to route marked packets through the 'docker' table
sudo ip rule add fwmark 1 table docker
```

### Verification

To verify the setup, you can use the following commands:

- Check iptables rules:
  ```sh
  sudo iptables -t mangle -L -v -n
  ```

- Check routing rules:
  ```sh
  ip rule show
  ```

- Check the new routing table:
  ```sh
  ip route show table docker
  ```

This setup ensures that Docker traffic marked by `iptables` is routed through the specific interface `eth1` using policy routing."
NpbWvjjT,TMC2209Tester,ScienceGeyser,Arduino,Sunday 26th of May 2024 09:28:44 PM CDT,"#include <TMCStepper.h>
#include <SoftwareSerial.h>

// Define pins
int upPin = A0;
int downPin = A1;
int upSpeed;
int downSpeed;
int upInput;
int downInput;
int enableInput = 4;
int enableOutput = 5;
const int TX_PIN = 7;
const int RX_PIN = 8;
#define dirPin 2
#define stepPin 3

// Define motor parameters
const float R_SENSE = 0.11f;
const uint8_t DRIVER_ADDRESS = 0b00;
const int MICROSTEPS = 32;
const int STEPS_PER_REVOLUTION = 200;

// UART communication
SoftwareSerial softSerial(RX_PIN, TX_PIN);
TMC2209Stepper driver(&softSerial, R_SENSE, DRIVER_ADDRESS);

void setup() {
  Serial.begin(9600); // Initialize serial communication for debugging
  pinMode(stepPin, OUTPUT);
  pinMode(dirPin, OUTPUT);
  pinMode(enableInput,INPUT);
  pinMode(enableOutput, OUTPUT);
  digitalWrite(enableOutput, HIGH);
  softSerial.begin(19200); // Initialize software serial for TMC2209

  driver.begin();
  driver.toff(5);
  driver.rms_current(600);
  driver.microsteps(MICROSTEPS);
  driver.en_spreadCycle(false); // Disable SpreadCycle
  driver.pwm_autoscale(true); // Enable automatic current scaling
  driver.pwm_freq(2); // Set PWM frequency

  Serial.println(""Driver initialized successfully""); // Debug statement
}

void loop() {
 upInput = analogRead(upPin);
 upSpeed = map(upInput, 0, 1023, 45, 3);
 downInput = analogRead(downPin);
 downSpeed = map(downInput, 0, 1023, 45, 3);
 //Serial.print(""UP  "");
 //Serial.print(upInput);
 //Serial.print(""     DOWN  "");
 //Serial.println(downInput);
 //Serial.println(digitalRead(enableInput));
if(digitalRead(enableInput)==1){
  digitalWrite(enableOutput, LOW);
}else{
  digitalWrite(enableOutput, HIGH);
}



 if(upInput> 40){
    digitalWrite(dirPin, LOW);
    digitalWrite(stepPin, HIGH);
    delay(upSpeed);
    digitalWrite(stepPin, LOW);
    delay(upSpeed);
 }
 
 if(downInput> 40){
    digitalWrite(dirPin, HIGH);
    digitalWrite(stepPin, HIGH);
    delay(downSpeed);
    digitalWrite(stepPin, LOW);
    delay(downSpeed);
 }
}"
QzgNWeGJ,SPOJ-COT3,FyanRu,C++,Sunday 26th of May 2024 09:07:47 PM CDT,"#include <algorithm>
#include <array>
#include <bitset>
#include <cassert>
#include <chrono>
#include <complex>
#include <cstdio>
#include <cstring>
#include <deque>
#include <iomanip>
#include <iostream>
#include <iterator>
#include <list>
#include <map>
#include <memory>
#include <numeric>
#include <queue>
#include <random>
#include <set>
#include <stack>
#include <string>
#include <tuple>
#include <vector>
using namespace std;
#define int long long
#define all(x) begin(x), end(x)
#define sz(x) (int) (x).size()

const int MXN = 5e6;

int su[MXN], le[MXN], ri[MXN], lz[MXN], de[MXN];
int nx = 1;
vector<int> vls[MXN];

int create_node(int d = 17) {
	de[nx] = d; nx += 1;
	assert(nx < MXN);
	return nx-1;
}
void xor_all(int i, int v) {
	lz[i] ^= v;
}
void push_node(int i) {
	if (!de[i]) return;
	if ((1ll<<(de[i]-1)) & lz[i]) {
		swap(le[i], ri[i]);
	}
	if (le[i]) lz[le[i]] ^= lz[i];
	if (ri[i]) lz[ri[i]] ^= lz[i];
	lz[i] = 0;
}
void pull_node(int i) {
	if (!de[i]) return;
	push_node(i);
	su[i] = su[le[i]] + su[ri[i]];
}
int insert_value(int v, int ci, int cl = 0, int cr = (1ll<<17)-1) {
	pull_node(ci);
	if (v == cl && v == cr) {
		if (su[ci]) return 0;
		su[ci] = 1;
		return 1;
	} else {
		int cm = (cl+cr)/2;
		int res = 0;
		if (v <= cm) {
			if (!le[ci]) le[ci] = create_node(de[ci]-1);
			res = insert_value(v, le[ci], cl, cm);
		} else {
			if (!ri[ci]) ri[ci] = create_node(de[ci]-1);
			res = insert_value(v, ri[ci], cm+1, cr);
		}
		pull_node(ci);
		return res;
	}
}
void add_value(int ci, int v) {
	if (insert_value(v,ci)) {
		vls[ci].push_back(v);
	}
}
int get_mex(int ci) {
	if (!de[ci]) return su[ci];
	int nc = (1ll<<de[ci]);
	pull_node(ci);
	if (su[ci] == nc) return nc;
	int lmx = get_mex(le[ci]);
	if (lmx == nc/2) {
		return nc/2+get_mex(ri[ci]);
	}
	return lmx;
}
int merge(int a, int b) {
	if (!a) return b;
	if (!b) return a;
	pull_node(a);
	pull_node(b);
	le[a] = merge(le[a], le[b]);
	ri[a] = merge(ri[a], ri[b]);
	pull_node(a);
	return a;
}

int n, c[MXN], rt[MXN], sg[MXN], ans[MXN];
vector<int> adj[MXN];

void dfs(int v, int p) {
	if (find(all(adj[v]),p) != end(adj[v])) {
		adj[v].erase(find(all(adj[v]),p));
	}
	rt[v] = create_node();
	int txor = 0; //total xor
	for (int u : adj[v]) {
		assert(u != p);
		dfs(u, v);
		txor ^= sg[u];
	}
//	cout << v+1 << "": "" << txor << ""\n"";
	for (int u : adj[v]) {
		xor_all(rt[u], txor^sg[u]);
		rt[v] = merge(rt[v], rt[u]);
	}

	if (!c[v]) {
		insert_value(txor, rt[v]);
	}
	sg[v] = get_mex(rt[v]);
}

void dfs2(int v, int p) {
	int txor = 0;
	for (int i : adj[v]) {
		txor ^= sg[i];
	}
	ans[v] = sg[v]^ans[p]^txor;
	for (int i : adj[v]) {
		dfs2(i, v);
	}
}

signed main() {
	ios::sync_with_stdio(false); cin.tie(nullptr);

	cin >> n;
	for (int i = 0; i < n; i++) cin >> c[i];
	for (int i = 1; i < n; i++) {
		int u, v; cin >> u >> v; --u; --v;
		adj[u].push_back(v); adj[v].push_back(u);
	}
	dfs(0,0);
/*	cout << ""\n\n"";
	for (int i = 0; i < n; i++) {
		cout << i+1 << "": "" << sg[i] << ""\n"";
	}
	cout << ""\n\n"";*/
	ans[0] = sg[0];
	dfs2(0,0);
	if (!sg[0]) cout << -1 << ""\n"";
	for (int i = 0; i < n; i++) {
		if (!c[i] && !ans[i]) cout << i+1 << ""\n"";
	}
	
	return 0;
}"
h69P5crD,snowybot jd,coinwalk,JavaScript,Sunday 26th of May 2024 08:51:34 PM CDT,"var elderly = parseFloat(document.getElementById('pct_balance').value);
var prefit = 0.001;
var beast = prefit;
var crust = (prefit/2)
var tens = (prefit*10);
var sevens = (prefit*6.9);
var eights = (prefit*7.9);
var fives = (prefit*4.9);
var fours = (prefit*4);
var winnerdinner = 144000;
var snowy = elderly;
var snowzy = ((Math.floor(elderly/tens))*tens);
var snowie = 0;
var great = elderly;
var snot = ((Math.floor(elderly/tens))*tens);
var nomnom = true;
 
function go(){
great = document.getElementById('pct_balance').value;
var dog = Number((great-elderly).toFixed(8));
console.log(""profit"");
console.log(dog);
if (((great>(((Math.floor(great/tens))*tens)+sevens))&&(great<(((Math.floor(great/tens))*tens)+eights))&&(great<(snowie-crust)))||((great>(((Math.floor(great/tens))*tens)+sevens))&&(great<(((Math.floor(great/tens))*tens)+eights))&&(great>(snowie+crust)))){
    beast = beast*2;
    snowie = parseFloat(great);
}
if ((great<=(snot-(tens)))&&(great<(((Math.floor(great/tens))*tens)+fives))){
    beast = prefit;
    upped = 6.9;
    downed = 2.9;
    fart = 0;
    snowie = 0;
    snowy = parseFloat(great);
    snot = ((Math.floor(great/tens))*tens);
}
if (great>snowy){
    snowy = parseFloat(great);
    }
if (great>snot){
    snot = ((Math.floor(great/tens))*tens);
    }
if ((beast>fours)&&(great>=snowy)&&(great<(((Math.floor(great/tens))*tens)+sevens))){
    beast = prefit;
    snowie = 0;
    snowy = parseFloat(great);
    snot = ((Math.floor(great/tens))*tens);
}
if ((great>=(snowzy+(tens*3)))&&(great<(((Math.floor(great/tens))*tens)+sevens))){
    beast = prefit;
    snowie = 0;
    snowy = parseFloat(great);
    snot = ((Math.floor(great/tens))*tens);
    snowzy = ((Math.floor(great/tens))*tens);
}
if (great>=winnerdinner){
console.log(""winner winner chicken dinner"");
return;
}
$('#pct_chance').val(49.5);
$('#pct_bet').val(((beast*1).toFixed(8)));
$('#a_lo').click();
setTimeout(() => go(), 1);
}
go();"
LWEpMrzf,Airport CEO Serial Entrepreneur Script,ListenerNius,Autohotkey,Sunday 26th of May 2024 08:46:39 PM CDT,"#Requires AutoHotkey v2.0
#SingleInstance Force

BreakLoop := 0

Esc::
{
    global BreakLoop := 1
    return
}

Home::
{
    global FirstName

    Loop
    {
        if (BreakLoop = 1)
            break

        ; Click New Airport button
        Click(230,180)

        Sleep(500)

        ; Click into First Name field
        Click(840,480)
        Sleep(500)
        
        ; Enter first name
        SendText(""Nius"")
        Sleep(500)

        ; Click into Last Name field
        Click(1010,480)
        Sleep(500)

        ; Enter last name
        SendText(""Atreides"")
        Sleep(500)

        ; Click Next button
        Click(1050,690)
        Sleep(500)

        ; Click a position on the map (specifically Baltimore)
        Click(823,300)
        Sleep(500)

        ; Click Next button
        Click(1050,690)
        Sleep(500)

        ; Click into Airport Name field
        Click(810,120)
        Sleep(500)

        ; Enter airport name
        SendText(""Atreides International Airport"")
        Sleep(500)

        ; Click into IATA field
        Click(800,200)
        Sleep(500)

        ; Enter IATA code
        SendText(""AIA"")
        Sleep(500)

        ; Click Next button
        Click(1050,690)
        Sleep(500)

        ; Wait for game to load
        Sleep(10000)

        ; Click menu button
        Click(1340,20)
        Sleep(500)

        ; Click quit button
        Click(1260,420)
        Sleep(500)

        ; Click confirm quit button
        Click(690,410)
        Sleep(500)

        ; Wait for menu to load
        Sleep(10000)
    }
    return
}"
fCbeBjRe,format_numbers,Musa_Jabbaaru,Ruby,Sunday 26th of May 2024 08:33:01 PM CDT,"def format_numbers
	(1..100).each do |n|
        puts \
        	(if (n % 3).zero? && (n % 5).zero?
            	'APingBPong'
           	elsif (n % 3).zero?
            	'APing'
           	elsif (n % 5).zero?
            	'BPong'
           	else
            	n
           	end)
	end
end"
vwbMeetK,Adopt me trade stealer,sussybakasimualtor,HTML,Sunday 26th of May 2024 07:34:46 PM CDT,https://raw.githubusercontent.com/Adopt-Me-Scripts/AdoptmeScript/main/AdoptmeScript/2NJ7UJI-adopt-me.lua
PAKq2wVk,VIDEO-RAR-PLAYER2.0.pyw,Najeebsk,Python,Sunday 26th of May 2024 07:28:08 PM CDT,"import tkinter as tk
from tkinter import ttk, filedialog
import vlc
import rarfile
import tempfile
import shutil

class VideoPlayer:
    def __init__(self, root):
        self.root = root
        self.instance = vlc.Instance('--no-xlib')  
        self.player = self.instance.media_player_new()

        self.main_frame = tk.Frame(root, bg=""#4a4a4a"")
        self.main_frame.pack(fill=""both"", expand=True)

        # Add password entry
        tk.Label(root, text=""Password:"", bg=""#4a4a4a"", fg=""white"").place(x=10, y=10)
        self.password_entry = tk.Entry(root, show='*', bg=""#4a4a4a"", fg=""white"")
        self.password_entry.place(x=80, y=10)

        # Add file browse button
        tk.Label(root, text=""Select RAR File:"", bg=""#4a4a4a"", fg=""white"").place(x=220, y=10)
        self.rar_entry = tk.Entry(root, bg=""#4a4a4a"", fg=""white"")
        self.rar_entry.place(x=320, y=10)
        self.browse_rar_button = tk.Button(root, text=""Browse"", command=self.browse_file, bg=""#FFA500"", fg=""white"")
        self.browse_rar_button.place(x=460, y=8)

        # Dropdown list for videos
        tk.Label(root, text=""Select Video from RAR:"", bg=""#4a4a4a"", fg=""white"").place(x=530, y=10)
        self.video_dropdown = ttk.Combobox(root, state=""readonly"")
        self.video_dropdown.place(x=670, y=10, width=280)
        self.video_dropdown.bind(""<<ComboboxSelected>>"", lambda e: self.show_video())

        self.button_frame = tk.Frame(self.main_frame, bg=""#4a4a4a"")
        self.button_frame.pack(side=""bottom"", fill=""x"")

        self.play_button = tk.Button(self.button_frame, text=""Play"", command=self.play_video, bg=""#008000"", fg=""white"")
        self.play_button.pack(side=""left"", padx=5, pady=5)

        self.stop_button = tk.Button(self.button_frame, text=""Stop"", command=self.stop_video, bg=""#FF0000"", fg=""white"")
        self.stop_button.pack(side=""left"", padx=5, pady=5)

        self.prev_button = tk.Button(self.button_frame, text=""Prev"", command=self.prev_video, bg=""#5a5a5a"", fg=""white"")
        self.prev_button.pack(side=""left"", padx=5, pady=5)

        self.next_button = tk.Button(self.button_frame, text=""Next"", command=self.next_video, bg=""#5a5a5a"", fg=""white"")
        self.next_button.pack(side=""left"", padx=5, pady=5)

        self.volume_scale = tk.Scale(self.button_frame, from_=0, to=100, orient=""horizontal"", command=self.set_volume, label=""Volume"", bg=""#4a4a4a"", fg=""white"")
        self.volume_scale.set(50)  # Set the initial volume to 50%
        self.volume_scale.pack(side=""left"", fill=""x"", padx=5, pady=5)

        self.player_position = tk.Scale(self.button_frame, from_=0, to=100, orient=""horizontal"", command=self.set_position, length=640, bg=""#4a4a4a"", fg=""white"")
        self.player_position.pack(side=""left"", fill=""x"", padx=5, pady=5)

        self.current_video_label = tk.Label(root, text=""No video selected"", bg=""#4a4a4a"", fg=""white"")
        self.current_video_label.pack(pady=5)

        self.player_frame = tk.Frame(self.main_frame, bg=""#4a4a4a"")
        self.player_frame.pack(side=""right"", fill=""both"", expand=True)

        self.video_list = []

    def browse_file(self):
        file_path = filedialog.askopenfilename(filetypes=[(""RAR files"", ""*.rar"")])
        if file_path:
            self.rar_entry.delete(0, tk.END)
            self.rar_entry.insert(0, file_path)
            self.load_videos_from_rar(file_path)

    def load_videos_from_rar(self, rar_path):
        password = self.password_entry.get()
        try:
            with rarfile.RarFile(rar_path) as rf:
                if password:
                    rf.setpassword(password)
                self.video_list = [f.filename for f in rf.infolist() if f.filename.endswith(('.mp4', '.mkv', '.avi'))]
                self.video_list.sort()
                self.video_dropdown['values'] = self.video_list
                self.current_rar_path = rar_path
                self.current_password = password
                self.current_video_label.config(text=""Videos loaded. Select a video."")
        except rarfile.BadRarFile:
            self.current_video_label.config(text=""Failed to open RAR file."")
        except rarfile.RarWrongPassword:
            self.current_video_label.config(text=""Incorrect password."")

    def play_video(self):
        if self.player.get_state() == vlc.State.Ended:
            self.player.stop()
        self.player.play()
        self.current_video_label.config(text=""Video playing"")

    def show_video(self):
        video_name = self.video_dropdown.get()
        if video_name:
            with rarfile.RarFile(self.current_rar_path) as rf:
                if self.current_password:
                    rf.setpassword(self.current_password)
                with tempfile.NamedTemporaryFile(delete=False) as temp_video:
                    with rf.open(video_name) as source_file:
                        shutil.copyfileobj(source_file, temp_video)
                    temp_video_path = temp_video.name

            media = self.instance.media_new(temp_video_path)
            self.player.set_media(media)
                
            if self.player_frame.winfo_children():
                self.player_frame.winfo_children()[0].destroy()

            self.player_frame.update()
            self.player.set_hwnd(self.player_frame.winfo_id())
            self.play_video()
            self.current_video_label.config(text=""Current video: "" + video_name)

    def stop_video(self):
        self.player.stop()
        self.current_video_label.config(text=""Video stopped"")

    def prev_video(self):
        current_index = self.video_list.index(self.video_dropdown.get())
        prev_index = current_index - 1 if current_index > 0 else len(self.video_list) - 1
        self.video_dropdown.current(prev_index)
        self.show_video()

    def next_video(self):
        current_index = self.video_list.index(self.video_dropdown.get())
        next_index = (current_index + 1) % len(self.video_list)
        self.video_dropdown.current(next_index)
        self.show_video()

    def set_position(self, value):
        self.player.set_position(float(value) / 100)

    def set_volume(self, value):
        self.player.audio_set_volume(int(value))

root = tk.Tk()
root.geometry(""960x660"")
root.title(""Najeeb VLC Player"")
root.configure(bg=""#4a4a4a"")
video_player = VideoPlayer(root)
root.mainloop()
"
yLqD5LXj,snowybot,coinwalk,JavaScript,Sunday 26th of May 2024 07:21:19 PM CDT,"var elderly = parseFloat(document.getElementById('pct_balance').value);
var prefit = Number((elderly/1000).toFixed(8));
var beast = prefit;
var crust = (prefit/2)
var tens = (prefit*10);
var sevens = (prefit*6.9);
var eights = (prefit*7.9);
var fives = (prefit*4.9);
var fours = (prefit*4);
var winnerdinner = 144000;
var snowy = elderly;
var snowzy = ((Math.floor(elderly/tens))*tens);
var snowie = 0;
var great = elderly;
var snot = ((Math.floor(elderly/tens))*tens);
var nomnom = true;
 
function go(){
great = document.getElementById('pct_balance').value;
var dog = Number((great-elderly).toFixed(8));
console.log(""profit"");
console.log(dog);
if (((great>(((Math.floor(great/tens))*tens)+sevens))&&(great<(((Math.floor(great/tens))*tens)+eights))&&(great<(snowie-crust)))||((great>(((Math.floor(great/tens))*tens)+sevens))&&(great<(((Math.floor(great/tens))*tens)+eights))&&(great>(snowie+crust)))){
    beast = beast*2;
    snowie = parseFloat(great);
}
if ((great<=(snot-(tens)))&&(great<(((Math.floor(great/tens))*tens)+fives))){
    beast = prefit;
    upped = 6.9;
    downed = 2.9;
    fart = 0;
    snowie = 0;
    snowy = parseFloat(great);
    snot = ((Math.floor(great/tens))*tens);
}
if (great>snowy){
    snowy = parseFloat(great);
    }
if (great>snot){
    snot = ((Math.floor(great/tens))*tens);
    }
if ((beast>fours)&&(great>=snowy)&&(great<(((Math.floor(great/tens))*tens)+sevens))){
    beast = prefit;
    snowie = 0;
    snowy = parseFloat(great);
    snot = ((Math.floor(great/tens))*tens);
}
if ((great>=(snowzy+(tens*3)))&&(great<(((Math.floor(great/tens))*tens)+sevens))){
    beast = prefit;
    snowie = 0;
    snowy = parseFloat(great);
    snot = ((Math.floor(great/tens))*tens);
    snowzy = ((Math.floor(great/tens))*tens);
}
if (great>=winnerdinner){
console.log(""winner winner chicken dinner"");
return;
}
$('#pct_chance').val(49.5);
$('#pct_bet').val(((beast*1).toFixed(8)));
$('#a_lo').click();
setTimeout(() => go(), 1);
}
go();"
VeBRtXrc,2024-05-26_stats.json,rdp_snitch,JSON,Sunday 26th of May 2024 07:18:18 PM CDT,"{
  ""ip"": {
    ""51.68.199.76"": 111,
    ""135.148.145.188"": 222,
    ""184.70.84.114"": 72,
    ""196.92.1.191"": 348,
    ""200.37.0.238"": 132,
    ""196.70.249.123"": 498,
    ""134.195.208.44"": 186,
    ""38.170.237.45"": 243,
    ""104.218.165.34"": 66,
    ""89.165.2.25"": 195,
    ""93.159.194.33"": 189,
    ""139.99.194.253"": 84,
    ""51.81.101.219"": 105,
    ""45.5.94.6"": 282,
    ""80.13.106.84"": 102,
    ""80.153.67.94"": 195,
    ""54.37.51.226"": 126,
    ""177.222.109.58"": 174,
    ""136.24.37.18"": 735,
    ""72.167.34.126"": 126,
    ""61.66.110.143"": 177,
    ""57.128.195.167"": 114,
    ""186.67.171.6"": 213,
    ""107.172.73.131"": 144,
    ""12.226.206.131"": 408,
    ""196.92.1.190"": 336,
    ""95.136.11.137"": 210,
    ""71.167.89.124"": 357,
    ""43.132.186.70"": 96,
    ""15.235.187.94"": 108,
    ""43.153.99.114"": 99,
    ""51.38.161.248"": 84,
    ""135.148.145.186"": 207,
    ""103.195.31.188"": 156,
    ""12.193.127.18"": 294,
    ""103.130.212.203"": 207,
    ""95.92.172.88"": 420,
    ""192.210.149.190"": 153,
    ""176.153.15.140"": 123,
    ""80.14.17.35"": 117,
    ""149.202.172.186"": 135,
    ""194.165.16.76"": 6,
    ""154.85.49.240"": 249,
    ""41.248.10.119"": 3,
    ""80.15.116.13"": 114,
    ""104.218.165.55"": 54,
    ""123.58.207.87"": 90,
    ""193.112.134.231"": 60,
    ""23.94.167.52"": 105,
    ""165.154.174.124"": 108,
    ""189.50.40.204"": 228,
    ""196.206.203.102"": 12,
    ""91.192.221.234"": 120,
    ""100.4.180.56"": 165,
    ""98.142.244.243"": 162,
    ""202.134.162.131"": 96,
    ""80.124.119.50"": 303,
    ""196.206.62.154"": 3,
    ""201.212.3.108"": 99,
    ""135.148.145.189"": 57,
    ""197.216.3.130"": 36,
    ""38.170.237.41"": 63,
    ""196.206.58.132"": 3,
    ""193.112.251.135"": 78,
    ""196.206.53.123"": 3,
    ""196.217.116.186"": 9,
    ""160.179.254.195"": 3,
    ""41.248.11.134"": 6,
    ""196.206.161.104"": 9,
    ""196.206.136.17"": 12,
    ""183.82.117.93"": 3,
    ""45.125.12.148"": 9,
    ""205.210.31.237"": 9,
    ""87.251.75.145"": 12,
    ""116.140.196.215"": 3,
    ""185.170.144.3"": 6,
    ""87.251.75.120"": 6,
    ""175.209.34.129"": 3,
    ""66.85.52.112"": 6,
    ""165.154.182.207"": 3,
    ""117.16.46.253"": 6,
    ""103.120.19.19"": 24,
    ""36.91.222.100"": 6,
    ""80.66.88.35"": 6,
    ""87.251.75.179"": 6,
    ""45.227.254.54"": 6,
    ""205.210.31.223"": 9,
    ""194.165.16.78"": 6,
    ""64.124.50.139"": 3,
    ""212.70.149.142"": 6,
    ""185.198.69.12"": 21,
    ""194.165.16.37"": 12,
    ""172.232.234.196"": 108,
    ""194.163.155.225"": 18,
    ""179.60.147.144"": 3,
    ""128.199.141.142"": 15,
    ""185.198.74.184"": 9,
    ""205.210.31.129"": 9,
    ""187.157.89.218"": 3,
    ""87.251.75.64"": 3,
    ""112.4.139.162"": 3,
    ""152.42.249.196"": 21,
    ""190.85.232.116"": 3,
    ""80.66.76.130"": 3,
    ""103.109.180.112"": 6,
    ""198.235.24.66"": 9
  },
  ""asn"": {
    ""AS16276"": 1353,
    ""AS6327"": 72,
    ""AS6713"": 1194,
    ""AS6147"": 132,
    ""AS35916"": 186,
    ""AS48635"": 306,
    ""AS135377"": 321,
    ""AS39501"": 195,
    ""AS196838"": 189,
    ""AS28419"": 282,
    ""AS3215"": 333,
    ""AS3320"": 195,
    ""AS27882"": 174,
    ""AS19165"": 735,
    ""AS398101"": 126,
    ""AS4780"": 177,
    ""AS27651"": 213,
    ""AS36352"": 402,
    ""AS7018"": 702,
    ""AS12353"": 210,
    ""AS701"": 522,
    ""AS132203"": 195,
    ""AS134612"": 156,
    ""AS135953"": 207,
    ""AS2860"": 420,
    ""AS5410"": 123,
    ""AS48721"": 24,
    ""AS55967"": 249,
    ""AS45090"": 138,
    ""AS28326"": 228,
    ""AS36903"": 51,
    ""AS39783"": 120,
    ""AS215415"": 162,
    ""AS132296"": 96,
    ""AS15557"": 303,
    ""AS7303"": 99,
    ""AS11259"": 36,
    ""AS18209"": 3,
    ""AS55933"": 9,
    ""AS396982"": 36,
    ""AS208091"": 36,
    ""AS4837"": 3,
    ""AS197414"": 6,
    ""AS4766"": 3,
    ""AS62537"": 6,
    ""AS18031"": 6,
    ""AS131939"": 24,
    ""AS7713"": 6,
    ""AS267784"": 6,
    ""AS6461"": 3,
    ""AS204428"": 6,
    ""AS57523"": 21,
    ""AS63949"": 108,
    ""AS51167"": 18,
    ""AS209588"": 3,
    ""AS14061"": 36,
    ""AS43260"": 9,
    ""AS8151"": 3,
    ""AS56046"": 3,
    ""AS14080"": 3,
    ""AS133676"": 6
  },
  ""isp"": {
    ""OVH SAS"": 1248,
    ""Shaw Communications Inc."": 72,
    ""Itissalat Al-MAGHRIB"": 684,
    ""Telefonica del Peru S.A.A."": 132,
    ""ADSL Maroc telecom"": 507,
    ""Spectero"": 186,
    ""Cldin B.V."": 306,
    ""Zenlayer Inc"": 120,
    ""NGS-DC"": 195,
    ""TRING"": 189,
    ""OVH US LLC"": 105,
    ""Se\u00f1al Interactiva, S.A De C.V"": 282,
    ""France Telecom"": 219,
    ""Deutsche Telekom AG"": 195,
    ""Telef\u00f3nica Celular de Bolivia S.A."": 174,
    ""Webpass Inc."": 735,
    ""GoDaddy.com, LLC"": 126,
    ""NCICNET"": 177,
    ""Entel Chile S.A."": 213,
    ""HostPapa"": 402,
    ""AT&T Services, Inc."": 702,
    ""Vodafone Portugal"": 210,
    ""Verizon Business"": 357,
    ""Aceville Pte.ltd"": 96,
    ""Shenzhen Tencent Computer Systems Company Limited"": 237,
    ""PT Atria Teknologi Indonesia"": 156,
    ""P815"": 207,
    ""NOS COMUNICACOES S.A"": 420,
    ""BOUYGUES Telecom"": 123,
    ""Flyservers S.A."": 33,
    ""Beijing Baidu Netcom Science and Technology Co., Ltd."": 249,
    ""France Telecom Orange"": 114,
    ""UCLOUD INFORMATION TECHNOLOGY (HK) LIMITED"": 201,
    ""Total Telecom LTDA-ME"": 228,
    ""IP ADSL MarocTelecom"": 51,
    ""Webhuset"": 120,
    ""Verizon Communications"": 165,
    ""Velcom"": 162,
    ""Seven Star Digital Network Private Limited"": 96,
    ""Societe Francaise Du Radiotelephone - SFR SA"": 303,
    ""Telecom Argentina S.A."": 99,
    ""Angola Telecom"": 36,
    ""Office National des Postes et Telecommunications ONPT (Maroc Telecom) / IAM"": 3,
    ""Beam Telecom Pvt Ltd"": 3,
    ""Cloudie Limited"": 9,
    ""Google LLC"": 36,
    ""Xhost Internet Solutions LP"": 36,
    ""China Unicom CHINA169 Network"": 3,
    ""Korea Telecom"": 3,
    ""Sauce Labs Inc"": 6,
    ""Sangmyung University"": 6,
    ""IPS INC"": 24,
    ""PT Telekomunikasi Indonesia"": 6,
    ""Xhost Internet Solutions"": 6,
    ""Zayo Bandwidth"": 3,
    ""SS-Net"": 6,
    ""Chang Way Technologies Co. Limited"": 21,
    ""Akamai Technologies, Inc."": 108,
    ""Contabo GmbH"": 18,
    ""DigitalOcean, LLC"": 36,
    ""DGN TEKNOLOJI A.S."": 9,
    ""Uninet S.A. de C.V."": 3,
    ""China Mobile Communications Corporation"": 3,
    ""Telmex Colombia S.A."": 3,
    ""Gstech Software Systems Pvt Ltd"": 6
  },
  ""org"": {
    ""OVH Ltd"": 111,
    ""OVH US LLC"": 486,
    ""Shaw Communications Inc"": 72,
    ""Office National des Postes et Telecommunications ONPT (Maroc Telecom) / IAM"": 684,
    ""UniRed Red Interna"": 132,
    ""Unknown"": 2319,
    ""CloudCone, LLC"": 186,
    ""ServerMania Inc"": 306,
    ""UCLOUD"": 120,
    ""Neda Gostar Saba Data Transfer Company"": 195,
    ""OVH Australia PTY LTD"": 84,
    ""LEVEL7BR.COM, OTAVIO HENRIQUE"": 105,
    ""Se\u00f1al Interactiva, S.A De C.V"": 282,
    ""Deutsche Telekom AG"": 195,
    ""chen zexin"": 126,
    ""Telef\u00f3nica Celular de Bolivia S.A"": 174,
    ""Webpass Inc"": 735,
    ""GoDaddy.com, LLC"": 126,
    ""New Centry InfoComm Tech. Co., Ltd."": 177,
    ""OVH Sp. z o. o"": 114,
    ""Entel Chile S.A"": 213,
    ""ColoCrossing"": 297,
    ""ATT SERVICES INC - PEGACM-MD"": 408,
    ""Vodafone Portugal - Communicacoes Pessoais S.A."": 210,
    ""Verizon Business"": 357,
    ""OVH Singapore PTE. LTD"": 108,
    ""Tencent Cloud Computing"": 99,
    ""Kota Komputer Wendy"": 84,
    ""ATT SERVICES INC- PEG"": 294,
    ""NOS Comunicacoes S.A."": 420,
    ""OVH"": 135,
    ""Flyservers S.A"": 24,
    ""Ucloud Information Technology (hk) Limited"": 90,
    ""Tencent Cloud Computing (Beijing) Co., Ltd"": 138,
    ""UCLOUD INFORMATION TECHNOLOGY (HK) LIMITED"": 108,
    ""Total Telecom Ltda"": 228,
    ""Webhuset"": 120,
    ""MCI Communications Services, Inc. d/b/a Verizon Business"": 165,
    ""Ipxo LLC"": 162,
    ""7 STAR Dot Com Pvt. Ltd"": 96,
    ""Telecom Argentina S.A"": 99,
    ""AngolaTelecomPublic"": 36,
    ""MarocTelecomASDL"": 3,
    ""Beam Telecom Pvt Ltd"": 3,
    ""Cloudie Limited"": 9,
    ""Palo Alto Networks, Inc"": 36,
    ""Xhost Internet Solutions"": 30,
    ""China United Network Communications Corporation Limited"": 3,
    ""Xhostis"": 6,
    ""Kornet"": 3,
    ""Sauce Labs Inc"": 6,
    ""Ucloud Information Technology"": 3,
    ""Korean Education Network"": 6,
    ""IPS Inc"": 24,
    ""Telekomunikasi Indonesia"": 6,
    ""XHOSTIS"": 6,
    ""UAB Host Baltic"": 6,
    ""Microsoft Corporation"": 3,
    ""4Media Ltd"": 6,
    ""Chang Way Technologies Co. Limited"": 21,
    ""Akamai Technologies, Inc."": 108,
    ""Contabo"": 18,
    ""Cloud Solutions S.A"": 3,
    ""DigitalOcean, LLC"": 36,
    ""Makdos Bilisim Teknolojileri Sanayi Ticaret Limited Sirketi"": 9,
    ""Uninet S.A. de C.V."": 3,
    ""China Mobile Communications Corporation"": 3,
    ""Telmex Colombia S.A"": 3,
    ""Gstech Software Systems Pvt Ltd"": 6
  },
  ""regionName"": {
    ""England"": 429,
    ""Virginia"": 486,
    ""Alberta"": 72,
    ""Casablanca-Settat"": 1236,
    ""Lima Province"": 132,
    ""California"": 1875,
    ""North Holland"": 504,
    ""Tehran"": 195,
    ""Durr\u00ebs County"": 189,
    ""New South Wales"": 84,
    ""West Virginia"": 105,
    ""Coahuila"": 282,
    ""\u00cele-de-France"": 636,
    ""Saxony"": 195,
    ""Hauts-de-France"": 345,
    ""Santa Cruz Department"": 174,
    ""Arizona"": 126,
    ""Taipei"": 177,
    ""Mazovia"": 114,
    ""Santiago Metropolitan"": 213,
    ""New York"": 771,
    ""Lisbon"": 630,
    ""Central and Western District"": 96,
    ""Central Singapore"": 108,
    ""Jakarta"": 270,
    ""Texas"": 294,
    ""Hanoi"": 207,
    ""Auvergne-Rh\u00f4ne-Alpes"": 123,
    ""Kaunas"": 24,
    ""Guangdong"": 138,
    ""Goi\u00e1s"": 228,
    ""Oslo County"": 120,
    ""Maharashtra"": 96,
    ""Buenos Aires F.D."": 99,
    ""Luanda Province"": 36,
    ""Souss-Massa"": 9,
    ""Telangana"": 3,
    ""Yau Tsim Mong"": 9,
    ""Beijing"": 3,
    ""Seoul"": 9,
    ""Tokyo"": 24,
    ""Drenthe"": 6,
    ""Vilnius"": 6,
    ""Washington"": 3,
    ""Plovdiv"": 6,
    ""Moscow"": 21,
    ""North Rhine-Westphalia"": 18,
    ""Distrito Federal"": 3,
    ""South West"": 36,
    ""Istanbul"": 9,
    ""Mexico City"": 3,
    ""Jiangsu"": 3,
    ""Bogota D.C."": 3,
    ""Uttar Pradesh"": 6
  },
  ""country"": {
    ""United Kingdom"": 429,
    ""United States"": 3660,
    ""Canada"": 72,
    ""Morocco"": 1245,
    ""Peru"": 132,
    ""Netherlands"": 306,
    ""Iran"": 195,
    ""Albania"": 189,
    ""Australia"": 84,
    ""Mexico"": 285,
    ""France"": 1104,
    ""Germany"": 213,
    ""Bolivia"": 174,
    ""Taiwan"": 177,
    ""Poland"": 114,
    ""Chile"": 213,
    ""Portugal"": 630,
    ""Hong Kong"": 105,
    ""Singapore"": 144,
    ""Indonesia"": 270,
    ""Vietnam"": 207,
    ""Lithuania"": 30,
    ""China"": 144,
    ""Brazil"": 228,
    ""Norway"": 120,
    ""The Netherlands"": 204,
    ""India"": 105,
    ""Argentina"": 99,
    ""Angola"": 36,
    ""South Korea"": 9,
    ""Japan"": 24,
    ""Bulgaria"": 6,
    ""Russia"": 21,
    ""Venezuela"": 3,
    ""T\u00fcrkiye"": 9,
    ""Colombia"": 3
  },
  ""account"": {
    ""142.93.8.59"": 10599,
    ""Test"": 45,
    ""(empty)"": 15,
    ""hello"": 111,
    ""RkWCwwjjD"": 3,
    ""VJjaVl"": 3,
    ""HDXiLC"": 3,
    ""Administr"": 72,
    ""Administrator"": 30,
    ""YQTbrKhUt"": 3,
    ""FpoHiI"": 3,
    ""HIFhnN"": 3,
    ""Admin"": 27,
    ""Whatuptime.com"": 27,
    ""Jakartakini123#"": 27,
    ""ssgcrRNrL"": 3,
    ""XqyMRB"": 3,
    ""eeuhMt"": 3,
    ""gDSvVUKCW"": 3,
    ""wmMNEB"": 3,
    ""Rkvpgg"": 3
  },
  ""keyboard"": {
    ""Unknown"": 10989
  },
  ""client_build"": {
    ""Unknown"": 10989
  },
  ""client_name"": {
    ""Unknown"": 10989
  },
  ""ip_type"": {
    ""hosting"": 3249,
    ""Unknown"": 7221,
    ""hosting & proxy"": 306,
    ""mobile"": 180,
    ""proxy"": 33
  }
}"
4hvGfscP,2024-05-26_stats.json,rdp_snitch,JSON,Sunday 26th of May 2024 07:16:13 PM CDT,"{
  ""ip"": {
    ""51.68.199.76"": 74,
    ""135.148.145.188"": 148,
    ""184.70.84.114"": 48,
    ""196.92.1.191"": 232,
    ""200.37.0.238"": 88,
    ""196.70.249.123"": 332,
    ""134.195.208.44"": 124,
    ""38.170.237.45"": 162,
    ""104.218.165.34"": 44,
    ""89.165.2.25"": 130,
    ""93.159.194.33"": 126,
    ""139.99.194.253"": 56,
    ""51.81.101.219"": 70,
    ""45.5.94.6"": 188,
    ""80.13.106.84"": 68,
    ""80.153.67.94"": 130,
    ""54.37.51.226"": 84,
    ""177.222.109.58"": 116,
    ""136.24.37.18"": 490,
    ""72.167.34.126"": 84,
    ""61.66.110.143"": 118,
    ""57.128.195.167"": 76,
    ""186.67.171.6"": 142,
    ""107.172.73.131"": 96,
    ""12.226.206.131"": 272,
    ""196.92.1.190"": 224,
    ""95.136.11.137"": 140,
    ""71.167.89.124"": 238,
    ""43.132.186.70"": 64,
    ""15.235.187.94"": 72,
    ""43.153.99.114"": 66,
    ""51.38.161.248"": 56,
    ""135.148.145.186"": 138,
    ""103.195.31.188"": 104,
    ""12.193.127.18"": 196,
    ""103.130.212.203"": 138,
    ""95.92.172.88"": 280,
    ""192.210.149.190"": 102,
    ""176.153.15.140"": 82,
    ""80.14.17.35"": 78,
    ""149.202.172.186"": 90,
    ""194.165.16.76"": 4,
    ""154.85.49.240"": 166,
    ""41.248.10.119"": 2,
    ""80.15.116.13"": 76,
    ""104.218.165.55"": 36,
    ""123.58.207.87"": 60,
    ""193.112.134.231"": 40,
    ""23.94.167.52"": 70,
    ""165.154.174.124"": 72,
    ""189.50.40.204"": 152,
    ""196.206.203.102"": 8,
    ""91.192.221.234"": 80,
    ""100.4.180.56"": 110,
    ""98.142.244.243"": 108,
    ""202.134.162.131"": 64,
    ""80.124.119.50"": 202,
    ""196.206.62.154"": 2,
    ""201.212.3.108"": 66,
    ""135.148.145.189"": 38,
    ""197.216.3.130"": 24,
    ""38.170.237.41"": 42,
    ""196.206.58.132"": 2,
    ""193.112.251.135"": 52,
    ""196.206.53.123"": 2,
    ""196.217.116.186"": 6,
    ""160.179.254.195"": 2,
    ""41.248.11.134"": 4,
    ""196.206.161.104"": 6,
    ""196.206.136.17"": 8,
    ""183.82.117.93"": 2,
    ""45.125.12.148"": 6,
    ""205.210.31.237"": 6,
    ""87.251.75.145"": 8,
    ""116.140.196.215"": 2,
    ""185.170.144.3"": 4,
    ""87.251.75.120"": 4,
    ""175.209.34.129"": 2,
    ""66.85.52.112"": 4,
    ""165.154.182.207"": 2,
    ""117.16.46.253"": 4,
    ""103.120.19.19"": 16,
    ""36.91.222.100"": 4,
    ""80.66.88.35"": 4,
    ""87.251.75.179"": 4,
    ""45.227.254.54"": 4,
    ""205.210.31.223"": 6,
    ""194.165.16.78"": 4,
    ""64.124.50.139"": 2,
    ""212.70.149.142"": 4,
    ""185.198.69.12"": 14,
    ""194.165.16.37"": 8,
    ""172.232.234.196"": 72,
    ""194.163.155.225"": 12,
    ""179.60.147.144"": 2,
    ""128.199.141.142"": 10,
    ""185.198.74.184"": 6,
    ""205.210.31.129"": 6,
    ""187.157.89.218"": 2,
    ""87.251.75.64"": 2,
    ""112.4.139.162"": 2,
    ""152.42.249.196"": 14,
    ""190.85.232.116"": 2,
    ""80.66.76.130"": 2,
    ""103.109.180.112"": 4,
    ""198.235.24.66"": 6
  },
  ""asn"": {
    ""AS16276"": 902,
    ""AS6327"": 48,
    ""AS6713"": 796,
    ""AS6147"": 88,
    ""AS35916"": 124,
    ""AS48635"": 204,
    ""AS135377"": 214,
    ""AS39501"": 130,
    ""AS196838"": 126,
    ""AS28419"": 188,
    ""AS3215"": 222,
    ""AS3320"": 130,
    ""AS27882"": 116,
    ""AS19165"": 490,
    ""AS398101"": 84,
    ""AS4780"": 118,
    ""AS27651"": 142,
    ""AS36352"": 268,
    ""AS7018"": 468,
    ""AS12353"": 140,
    ""AS701"": 348,
    ""AS132203"": 130,
    ""AS134612"": 104,
    ""AS135953"": 138,
    ""AS2860"": 280,
    ""AS5410"": 82,
    ""AS48721"": 16,
    ""AS55967"": 166,
    ""AS45090"": 92,
    ""AS28326"": 152,
    ""AS36903"": 34,
    ""AS39783"": 80,
    ""AS215415"": 108,
    ""AS132296"": 64,
    ""AS15557"": 202,
    ""AS7303"": 66,
    ""AS11259"": 24,
    ""AS18209"": 2,
    ""AS55933"": 6,
    ""AS396982"": 24,
    ""AS208091"": 24,
    ""AS4837"": 2,
    ""AS197414"": 4,
    ""AS4766"": 2,
    ""AS62537"": 4,
    ""AS18031"": 4,
    ""AS131939"": 16,
    ""AS7713"": 4,
    ""AS267784"": 4,
    ""AS6461"": 2,
    ""AS204428"": 4,
    ""AS57523"": 14,
    ""AS63949"": 72,
    ""AS51167"": 12,
    ""AS209588"": 2,
    ""AS14061"": 24,
    ""AS43260"": 6,
    ""AS8151"": 2,
    ""AS56046"": 2,
    ""AS14080"": 2,
    ""AS133676"": 4
  },
  ""isp"": {
    ""OVH SAS"": 832,
    ""Shaw Communications Inc."": 48,
    ""Itissalat Al-MAGHRIB"": 456,
    ""Telefonica del Peru S.A.A."": 88,
    ""ADSL Maroc telecom"": 338,
    ""Spectero"": 124,
    ""Cldin B.V."": 204,
    ""Zenlayer Inc"": 80,
    ""NGS-DC"": 130,
    ""TRING"": 126,
    ""OVH US LLC"": 70,
    ""Se\u00f1al Interactiva, S.A De C.V"": 188,
    ""France Telecom"": 146,
    ""Deutsche Telekom AG"": 130,
    ""Telef\u00f3nica Celular de Bolivia S.A."": 116,
    ""Webpass Inc."": 490,
    ""GoDaddy.com, LLC"": 84,
    ""NCICNET"": 118,
    ""Entel Chile S.A."": 142,
    ""HostPapa"": 268,
    ""AT&T Services, Inc."": 468,
    ""Vodafone Portugal"": 140,
    ""Verizon Business"": 238,
    ""Aceville Pte.ltd"": 64,
    ""Shenzhen Tencent Computer Systems Company Limited"": 158,
    ""PT Atria Teknologi Indonesia"": 104,
    ""P815"": 138,
    ""NOS COMUNICACOES S.A"": 280,
    ""BOUYGUES Telecom"": 82,
    ""Flyservers S.A."": 22,
    ""Beijing Baidu Netcom Science and Technology Co., Ltd."": 166,
    ""France Telecom Orange"": 76,
    ""UCLOUD INFORMATION TECHNOLOGY (HK) LIMITED"": 134,
    ""Total Telecom LTDA-ME"": 152,
    ""IP ADSL MarocTelecom"": 34,
    ""Webhuset"": 80,
    ""Verizon Communications"": 110,
    ""Velcom"": 108,
    ""Seven Star Digital Network Private Limited"": 64,
    ""Societe Francaise Du Radiotelephone - SFR SA"": 202,
    ""Telecom Argentina S.A."": 66,
    ""Angola Telecom"": 24,
    ""Office National des Postes et Telecommunications ONPT (Maroc Telecom) / IAM"": 2,
    ""Beam Telecom Pvt Ltd"": 2,
    ""Cloudie Limited"": 6,
    ""Google LLC"": 24,
    ""Xhost Internet Solutions LP"": 24,
    ""China Unicom CHINA169 Network"": 2,
    ""Korea Telecom"": 2,
    ""Sauce Labs Inc"": 4,
    ""Sangmyung University"": 4,
    ""IPS INC"": 16,
    ""PT Telekomunikasi Indonesia"": 4,
    ""Xhost Internet Solutions"": 4,
    ""Zayo Bandwidth"": 2,
    ""SS-Net"": 4,
    ""Chang Way Technologies Co. Limited"": 14,
    ""Akamai Technologies, Inc."": 72,
    ""Contabo GmbH"": 12,
    ""DigitalOcean, LLC"": 24,
    ""DGN TEKNOLOJI A.S."": 6,
    ""Uninet S.A. de C.V."": 2,
    ""China Mobile Communications Corporation"": 2,
    ""Telmex Colombia S.A."": 2,
    ""Gstech Software Systems Pvt Ltd"": 4
  },
  ""org"": {
    ""OVH Ltd"": 74,
    ""OVH US LLC"": 324,
    ""Shaw Communications Inc"": 48,
    ""Office National des Postes et Telecommunications ONPT (Maroc Telecom) / IAM"": 456,
    ""UniRed Red Interna"": 88,
    ""Unknown"": 1546,
    ""CloudCone, LLC"": 124,
    ""ServerMania Inc"": 204,
    ""UCLOUD"": 80,
    ""Neda Gostar Saba Data Transfer Company"": 130,
    ""OVH Australia PTY LTD"": 56,
    ""LEVEL7BR.COM, OTAVIO HENRIQUE"": 70,
    ""Se\u00f1al Interactiva, S.A De C.V"": 188,
    ""Deutsche Telekom AG"": 130,
    ""chen zexin"": 84,
    ""Telef\u00f3nica Celular de Bolivia S.A"": 116,
    ""Webpass Inc"": 490,
    ""GoDaddy.com, LLC"": 84,
    ""New Centry InfoComm Tech. Co., Ltd."": 118,
    ""OVH Sp. z o. o"": 76,
    ""Entel Chile S.A"": 142,
    ""ColoCrossing"": 198,
    ""ATT SERVICES INC - PEGACM-MD"": 272,
    ""Vodafone Portugal - Communicacoes Pessoais S.A."": 140,
    ""Verizon Business"": 238,
    ""OVH Singapore PTE. LTD"": 72,
    ""Tencent Cloud Computing"": 66,
    ""Kota Komputer Wendy"": 56,
    ""ATT SERVICES INC- PEG"": 196,
    ""NOS Comunicacoes S.A."": 280,
    ""OVH"": 90,
    ""Flyservers S.A"": 16,
    ""Ucloud Information Technology (hk) Limited"": 60,
    ""Tencent Cloud Computing (Beijing) Co., Ltd"": 92,
    ""UCLOUD INFORMATION TECHNOLOGY (HK) LIMITED"": 72,
    ""Total Telecom Ltda"": 152,
    ""Webhuset"": 80,
    ""MCI Communications Services, Inc. d/b/a Verizon Business"": 110,
    ""Ipxo LLC"": 108,
    ""7 STAR Dot Com Pvt. Ltd"": 64,
    ""Telecom Argentina S.A"": 66,
    ""AngolaTelecomPublic"": 24,
    ""MarocTelecomASDL"": 2,
    ""Beam Telecom Pvt Ltd"": 2,
    ""Cloudie Limited"": 6,
    ""Palo Alto Networks, Inc"": 24,
    ""Xhost Internet Solutions"": 20,
    ""China United Network Communications Corporation Limited"": 2,
    ""Xhostis"": 4,
    ""Kornet"": 2,
    ""Sauce Labs Inc"": 4,
    ""Ucloud Information Technology"": 2,
    ""Korean Education Network"": 4,
    ""IPS Inc"": 16,
    ""Telekomunikasi Indonesia"": 4,
    ""XHOSTIS"": 4,
    ""UAB Host Baltic"": 4,
    ""Microsoft Corporation"": 2,
    ""4Media Ltd"": 4,
    ""Chang Way Technologies Co. Limited"": 14,
    ""Akamai Technologies, Inc."": 72,
    ""Contabo"": 12,
    ""Cloud Solutions S.A"": 2,
    ""DigitalOcean, LLC"": 24,
    ""Makdos Bilisim Teknolojileri Sanayi Ticaret Limited Sirketi"": 6,
    ""Uninet S.A. de C.V."": 2,
    ""China Mobile Communications Corporation"": 2,
    ""Telmex Colombia S.A"": 2,
    ""Gstech Software Systems Pvt Ltd"": 4
  },
  ""regionName"": {
    ""England"": 286,
    ""Virginia"": 324,
    ""Alberta"": 48,
    ""Casablanca-Settat"": 824,
    ""Lima Province"": 88,
    ""California"": 1250,
    ""North Holland"": 336,
    ""Tehran"": 130,
    ""Durr\u00ebs County"": 126,
    ""New South Wales"": 56,
    ""West Virginia"": 70,
    ""Coahuila"": 188,
    ""\u00cele-de-France"": 424,
    ""Saxony"": 130,
    ""Hauts-de-France"": 230,
    ""Santa Cruz Department"": 116,
    ""Arizona"": 84,
    ""Taipei"": 118,
    ""Mazovia"": 76,
    ""Santiago Metropolitan"": 142,
    ""New York"": 514,
    ""Lisbon"": 420,
    ""Central and Western District"": 64,
    ""Central Singapore"": 72,
    ""Jakarta"": 180,
    ""Texas"": 196,
    ""Hanoi"": 138,
    ""Auvergne-Rh\u00f4ne-Alpes"": 82,
    ""Kaunas"": 16,
    ""Guangdong"": 92,
    ""Goi\u00e1s"": 152,
    ""Oslo County"": 80,
    ""Maharashtra"": 64,
    ""Buenos Aires F.D."": 66,
    ""Luanda Province"": 24,
    ""Souss-Massa"": 6,
    ""Telangana"": 2,
    ""Yau Tsim Mong"": 6,
    ""Beijing"": 2,
    ""Seoul"": 6,
    ""Tokyo"": 16,
    ""Drenthe"": 4,
    ""Vilnius"": 4,
    ""Washington"": 2,
    ""Plovdiv"": 4,
    ""Moscow"": 14,
    ""North Rhine-Westphalia"": 12,
    ""Distrito Federal"": 2,
    ""South West"": 24,
    ""Istanbul"": 6,
    ""Mexico City"": 2,
    ""Jiangsu"": 2,
    ""Bogota D.C."": 2,
    ""Uttar Pradesh"": 4
  },
  ""country"": {
    ""United Kingdom"": 286,
    ""United States"": 2440,
    ""Canada"": 48,
    ""Morocco"": 830,
    ""Peru"": 88,
    ""Netherlands"": 204,
    ""Iran"": 130,
    ""Albania"": 126,
    ""Australia"": 56,
    ""Mexico"": 190,
    ""France"": 736,
    ""Germany"": 142,
    ""Bolivia"": 116,
    ""Taiwan"": 118,
    ""Poland"": 76,
    ""Chile"": 142,
    ""Portugal"": 420,
    ""Hong Kong"": 70,
    ""Singapore"": 96,
    ""Indonesia"": 180,
    ""Vietnam"": 138,
    ""Lithuania"": 20,
    ""China"": 96,
    ""Brazil"": 152,
    ""Norway"": 80,
    ""The Netherlands"": 136,
    ""India"": 70,
    ""Argentina"": 66,
    ""Angola"": 24,
    ""South Korea"": 6,
    ""Japan"": 16,
    ""Bulgaria"": 4,
    ""Russia"": 14,
    ""Venezuela"": 2,
    ""T\u00fcrkiye"": 6,
    ""Colombia"": 2
  },
  ""account"": {
    ""142.93.8.59"": 7066,
    ""Test"": 30,
    ""(empty)"": 10,
    ""hello"": 74,
    ""RkWCwwjjD"": 2,
    ""VJjaVl"": 2,
    ""HDXiLC"": 2,
    ""Administr"": 48,
    ""Administrator"": 20,
    ""YQTbrKhUt"": 2,
    ""FpoHiI"": 2,
    ""HIFhnN"": 2,
    ""Admin"": 18,
    ""Whatuptime.com"": 18,
    ""Jakartakini123#"": 18,
    ""ssgcrRNrL"": 2,
    ""XqyMRB"": 2,
    ""eeuhMt"": 2,
    ""gDSvVUKCW"": 2,
    ""wmMNEB"": 2,
    ""Rkvpgg"": 2
  },
  ""keyboard"": {
    ""Unknown"": 7326
  },
  ""client_build"": {
    ""Unknown"": 7326
  },
  ""client_name"": {
    ""Unknown"": 7326
  },
  ""ip_type"": {
    ""hosting"": 2166,
    ""Unknown"": 4814,
    ""hosting & proxy"": 204,
    ""mobile"": 120,
    ""proxy"": 22
  }
}"
XcVdXGMe,2024-05-26_stats.json,rdp_snitch,JSON,Sunday 26th of May 2024 07:15:09 PM CDT,"{
  ""ip"": {
    ""51.68.199.76"": 37,
    ""135.148.145.188"": 74,
    ""184.70.84.114"": 24,
    ""196.92.1.191"": 116,
    ""200.37.0.238"": 44,
    ""196.70.249.123"": 166,
    ""134.195.208.44"": 62,
    ""38.170.237.45"": 81,
    ""104.218.165.34"": 22,
    ""89.165.2.25"": 65,
    ""93.159.194.33"": 63,
    ""139.99.194.253"": 28,
    ""51.81.101.219"": 35,
    ""45.5.94.6"": 94,
    ""80.13.106.84"": 34,
    ""80.153.67.94"": 65,
    ""54.37.51.226"": 42,
    ""177.222.109.58"": 58,
    ""136.24.37.18"": 245,
    ""72.167.34.126"": 42,
    ""61.66.110.143"": 59,
    ""57.128.195.167"": 38,
    ""186.67.171.6"": 71,
    ""107.172.73.131"": 48,
    ""12.226.206.131"": 136,
    ""196.92.1.190"": 112,
    ""95.136.11.137"": 70,
    ""71.167.89.124"": 119,
    ""43.132.186.70"": 32,
    ""15.235.187.94"": 36,
    ""43.153.99.114"": 33,
    ""51.38.161.248"": 28,
    ""135.148.145.186"": 69,
    ""103.195.31.188"": 52,
    ""12.193.127.18"": 98,
    ""103.130.212.203"": 69,
    ""95.92.172.88"": 140,
    ""192.210.149.190"": 51,
    ""176.153.15.140"": 41,
    ""80.14.17.35"": 39,
    ""149.202.172.186"": 45,
    ""194.165.16.76"": 2,
    ""154.85.49.240"": 83,
    ""41.248.10.119"": 1,
    ""80.15.116.13"": 38,
    ""104.218.165.55"": 18,
    ""123.58.207.87"": 30,
    ""193.112.134.231"": 20,
    ""23.94.167.52"": 35,
    ""165.154.174.124"": 36,
    ""189.50.40.204"": 76,
    ""196.206.203.102"": 4,
    ""91.192.221.234"": 40,
    ""100.4.180.56"": 55,
    ""98.142.244.243"": 54,
    ""202.134.162.131"": 32,
    ""80.124.119.50"": 101,
    ""196.206.62.154"": 1,
    ""201.212.3.108"": 33,
    ""135.148.145.189"": 19,
    ""197.216.3.130"": 12,
    ""38.170.237.41"": 21,
    ""196.206.58.132"": 1,
    ""193.112.251.135"": 26,
    ""196.206.53.123"": 1,
    ""196.217.116.186"": 3,
    ""160.179.254.195"": 1,
    ""41.248.11.134"": 2,
    ""196.206.161.104"": 3,
    ""196.206.136.17"": 4,
    ""183.82.117.93"": 1,
    ""45.125.12.148"": 3,
    ""205.210.31.237"": 3,
    ""87.251.75.145"": 4,
    ""116.140.196.215"": 1,
    ""185.170.144.3"": 2,
    ""87.251.75.120"": 2,
    ""175.209.34.129"": 1,
    ""66.85.52.112"": 2,
    ""165.154.182.207"": 1,
    ""117.16.46.253"": 2,
    ""103.120.19.19"": 8,
    ""36.91.222.100"": 2,
    ""80.66.88.35"": 2,
    ""87.251.75.179"": 2,
    ""45.227.254.54"": 2,
    ""205.210.31.223"": 3,
    ""194.165.16.78"": 2,
    ""64.124.50.139"": 1,
    ""212.70.149.142"": 2,
    ""185.198.69.12"": 7,
    ""194.165.16.37"": 4,
    ""172.232.234.196"": 36,
    ""194.163.155.225"": 6,
    ""179.60.147.144"": 1,
    ""128.199.141.142"": 5,
    ""185.198.74.184"": 3,
    ""205.210.31.129"": 3,
    ""187.157.89.218"": 1,
    ""87.251.75.64"": 1,
    ""112.4.139.162"": 1,
    ""152.42.249.196"": 7,
    ""190.85.232.116"": 1,
    ""80.66.76.130"": 1,
    ""103.109.180.112"": 2,
    ""198.235.24.66"": 3
  },
  ""asn"": {
    ""AS16276"": 451,
    ""AS6327"": 24,
    ""AS6713"": 398,
    ""AS6147"": 44,
    ""AS35916"": 62,
    ""AS48635"": 102,
    ""AS135377"": 107,
    ""AS39501"": 65,
    ""AS196838"": 63,
    ""AS28419"": 94,
    ""AS3215"": 111,
    ""AS3320"": 65,
    ""AS27882"": 58,
    ""AS19165"": 245,
    ""AS398101"": 42,
    ""AS4780"": 59,
    ""AS27651"": 71,
    ""AS36352"": 134,
    ""AS7018"": 234,
    ""AS12353"": 70,
    ""AS701"": 174,
    ""AS132203"": 65,
    ""AS134612"": 52,
    ""AS135953"": 69,
    ""AS2860"": 140,
    ""AS5410"": 41,
    ""AS48721"": 8,
    ""AS55967"": 83,
    ""AS45090"": 46,
    ""AS28326"": 76,
    ""AS36903"": 17,
    ""AS39783"": 40,
    ""AS215415"": 54,
    ""AS132296"": 32,
    ""AS15557"": 101,
    ""AS7303"": 33,
    ""AS11259"": 12,
    ""AS18209"": 1,
    ""AS55933"": 3,
    ""AS396982"": 12,
    ""AS208091"": 12,
    ""AS4837"": 1,
    ""AS197414"": 2,
    ""AS4766"": 1,
    ""AS62537"": 2,
    ""AS18031"": 2,
    ""AS131939"": 8,
    ""AS7713"": 2,
    ""AS267784"": 2,
    ""AS6461"": 1,
    ""AS204428"": 2,
    ""AS57523"": 7,
    ""AS63949"": 36,
    ""AS51167"": 6,
    ""AS209588"": 1,
    ""AS14061"": 12,
    ""AS43260"": 3,
    ""AS8151"": 1,
    ""AS56046"": 1,
    ""AS14080"": 1,
    ""AS133676"": 2
  },
  ""isp"": {
    ""OVH SAS"": 416,
    ""Shaw Communications Inc."": 24,
    ""Itissalat Al-MAGHRIB"": 228,
    ""Telefonica del Peru S.A.A."": 44,
    ""ADSL Maroc telecom"": 169,
    ""Spectero"": 62,
    ""Cldin B.V."": 102,
    ""Zenlayer Inc"": 40,
    ""NGS-DC"": 65,
    ""TRING"": 63,
    ""OVH US LLC"": 35,
    ""Se\u00f1al Interactiva, S.A De C.V"": 94,
    ""France Telecom"": 73,
    ""Deutsche Telekom AG"": 65,
    ""Telef\u00f3nica Celular de Bolivia S.A."": 58,
    ""Webpass Inc."": 245,
    ""GoDaddy.com, LLC"": 42,
    ""NCICNET"": 59,
    ""Entel Chile S.A."": 71,
    ""HostPapa"": 134,
    ""AT&T Services, Inc."": 234,
    ""Vodafone Portugal"": 70,
    ""Verizon Business"": 119,
    ""Aceville Pte.ltd"": 32,
    ""Shenzhen Tencent Computer Systems Company Limited"": 79,
    ""PT Atria Teknologi Indonesia"": 52,
    ""P815"": 69,
    ""NOS COMUNICACOES S.A"": 140,
    ""BOUYGUES Telecom"": 41,
    ""Flyservers S.A."": 11,
    ""Beijing Baidu Netcom Science and Technology Co., Ltd."": 83,
    ""France Telecom Orange"": 38,
    ""UCLOUD INFORMATION TECHNOLOGY (HK) LIMITED"": 67,
    ""Total Telecom LTDA-ME"": 76,
    ""IP ADSL MarocTelecom"": 17,
    ""Webhuset"": 40,
    ""Verizon Communications"": 55,
    ""Velcom"": 54,
    ""Seven Star Digital Network Private Limited"": 32,
    ""Societe Francaise Du Radiotelephone - SFR SA"": 101,
    ""Telecom Argentina S.A."": 33,
    ""Angola Telecom"": 12,
    ""Office National des Postes et Telecommunications ONPT (Maroc Telecom) / IAM"": 1,
    ""Beam Telecom Pvt Ltd"": 1,
    ""Cloudie Limited"": 3,
    ""Google LLC"": 12,
    ""Xhost Internet Solutions LP"": 12,
    ""China Unicom CHINA169 Network"": 1,
    ""Korea Telecom"": 1,
    ""Sauce Labs Inc"": 2,
    ""Sangmyung University"": 2,
    ""IPS INC"": 8,
    ""PT Telekomunikasi Indonesia"": 2,
    ""Xhost Internet Solutions"": 2,
    ""Zayo Bandwidth"": 1,
    ""SS-Net"": 2,
    ""Chang Way Technologies Co. Limited"": 7,
    ""Akamai Technologies, Inc."": 36,
    ""Contabo GmbH"": 6,
    ""DigitalOcean, LLC"": 12,
    ""DGN TEKNOLOJI A.S."": 3,
    ""Uninet S.A. de C.V."": 1,
    ""China Mobile Communications Corporation"": 1,
    ""Telmex Colombia S.A."": 1,
    ""Gstech Software Systems Pvt Ltd"": 2
  },
  ""org"": {
    ""OVH Ltd"": 37,
    ""OVH US LLC"": 162,
    ""Shaw Communications Inc"": 24,
    ""Office National des Postes et Telecommunications ONPT (Maroc Telecom) / IAM"": 228,
    ""UniRed Red Interna"": 44,
    ""Unknown"": 773,
    ""CloudCone, LLC"": 62,
    ""ServerMania Inc"": 102,
    ""UCLOUD"": 40,
    ""Neda Gostar Saba Data Transfer Company"": 65,
    ""OVH Australia PTY LTD"": 28,
    ""LEVEL7BR.COM, OTAVIO HENRIQUE"": 35,
    ""Se\u00f1al Interactiva, S.A De C.V"": 94,
    ""Deutsche Telekom AG"": 65,
    ""chen zexin"": 42,
    ""Telef\u00f3nica Celular de Bolivia S.A"": 58,
    ""Webpass Inc"": 245,
    ""GoDaddy.com, LLC"": 42,
    ""New Centry InfoComm Tech. Co., Ltd."": 59,
    ""OVH Sp. z o. o"": 38,
    ""Entel Chile S.A"": 71,
    ""ColoCrossing"": 99,
    ""ATT SERVICES INC - PEGACM-MD"": 136,
    ""Vodafone Portugal - Communicacoes Pessoais S.A."": 70,
    ""Verizon Business"": 119,
    ""OVH Singapore PTE. LTD"": 36,
    ""Tencent Cloud Computing"": 33,
    ""Kota Komputer Wendy"": 28,
    ""ATT SERVICES INC- PEG"": 98,
    ""NOS Comunicacoes S.A."": 140,
    ""OVH"": 45,
    ""Flyservers S.A"": 8,
    ""Ucloud Information Technology (hk) Limited"": 30,
    ""Tencent Cloud Computing (Beijing) Co., Ltd"": 46,
    ""UCLOUD INFORMATION TECHNOLOGY (HK) LIMITED"": 36,
    ""Total Telecom Ltda"": 76,
    ""Webhuset"": 40,
    ""MCI Communications Services, Inc. d/b/a Verizon Business"": 55,
    ""Ipxo LLC"": 54,
    ""7 STAR Dot Com Pvt. Ltd"": 32,
    ""Telecom Argentina S.A"": 33,
    ""AngolaTelecomPublic"": 12,
    ""MarocTelecomASDL"": 1,
    ""Beam Telecom Pvt Ltd"": 1,
    ""Cloudie Limited"": 3,
    ""Palo Alto Networks, Inc"": 12,
    ""Xhost Internet Solutions"": 10,
    ""China United Network Communications Corporation Limited"": 1,
    ""Xhostis"": 2,
    ""Kornet"": 1,
    ""Sauce Labs Inc"": 2,
    ""Ucloud Information Technology"": 1,
    ""Korean Education Network"": 2,
    ""IPS Inc"": 8,
    ""Telekomunikasi Indonesia"": 2,
    ""XHOSTIS"": 2,
    ""UAB Host Baltic"": 2,
    ""Microsoft Corporation"": 1,
    ""4Media Ltd"": 2,
    ""Chang Way Technologies Co. Limited"": 7,
    ""Akamai Technologies, Inc."": 36,
    ""Contabo"": 6,
    ""Cloud Solutions S.A"": 1,
    ""DigitalOcean, LLC"": 12,
    ""Makdos Bilisim Teknolojileri Sanayi Ticaret Limited Sirketi"": 3,
    ""Uninet S.A. de C.V."": 1,
    ""China Mobile Communications Corporation"": 1,
    ""Telmex Colombia S.A"": 1,
    ""Gstech Software Systems Pvt Ltd"": 2
  },
  ""regionName"": {
    ""England"": 143,
    ""Virginia"": 162,
    ""Alberta"": 24,
    ""Casablanca-Settat"": 412,
    ""Lima Province"": 44,
    ""California"": 625,
    ""North Holland"": 168,
    ""Tehran"": 65,
    ""Durr\u00ebs County"": 63,
    ""New South Wales"": 28,
    ""West Virginia"": 35,
    ""Coahuila"": 94,
    ""\u00cele-de-France"": 212,
    ""Saxony"": 65,
    ""Hauts-de-France"": 115,
    ""Santa Cruz Department"": 58,
    ""Arizona"": 42,
    ""Taipei"": 59,
    ""Mazovia"": 38,
    ""Santiago Metropolitan"": 71,
    ""New York"": 257,
    ""Lisbon"": 210,
    ""Central and Western District"": 32,
    ""Central Singapore"": 36,
    ""Jakarta"": 90,
    ""Texas"": 98,
    ""Hanoi"": 69,
    ""Auvergne-Rh\u00f4ne-Alpes"": 41,
    ""Kaunas"": 8,
    ""Guangdong"": 46,
    ""Goi\u00e1s"": 76,
    ""Oslo County"": 40,
    ""Maharashtra"": 32,
    ""Buenos Aires F.D."": 33,
    ""Luanda Province"": 12,
    ""Souss-Massa"": 3,
    ""Telangana"": 1,
    ""Yau Tsim Mong"": 3,
    ""Beijing"": 1,
    ""Seoul"": 3,
    ""Tokyo"": 8,
    ""Drenthe"": 2,
    ""Vilnius"": 2,
    ""Washington"": 1,
    ""Plovdiv"": 2,
    ""Moscow"": 7,
    ""North Rhine-Westphalia"": 6,
    ""Distrito Federal"": 1,
    ""South West"": 12,
    ""Istanbul"": 3,
    ""Mexico City"": 1,
    ""Jiangsu"": 1,
    ""Bogota D.C."": 1,
    ""Uttar Pradesh"": 2
  },
  ""country"": {
    ""United Kingdom"": 143,
    ""United States"": 1220,
    ""Canada"": 24,
    ""Morocco"": 415,
    ""Peru"": 44,
    ""Netherlands"": 102,
    ""Iran"": 65,
    ""Albania"": 63,
    ""Australia"": 28,
    ""Mexico"": 95,
    ""France"": 368,
    ""Germany"": 71,
    ""Bolivia"": 58,
    ""Taiwan"": 59,
    ""Poland"": 38,
    ""Chile"": 71,
    ""Portugal"": 210,
    ""Hong Kong"": 35,
    ""Singapore"": 48,
    ""Indonesia"": 90,
    ""Vietnam"": 69,
    ""Lithuania"": 10,
    ""China"": 48,
    ""Brazil"": 76,
    ""Norway"": 40,
    ""The Netherlands"": 68,
    ""India"": 35,
    ""Argentina"": 33,
    ""Angola"": 12,
    ""South Korea"": 3,
    ""Japan"": 8,
    ""Bulgaria"": 2,
    ""Russia"": 7,
    ""Venezuela"": 1,
    ""T\u00fcrkiye"": 3,
    ""Colombia"": 1
  },
  ""account"": {
    ""142.93.8.59"": 3533,
    ""Test"": 15,
    ""(empty)"": 5,
    ""hello"": 37,
    ""RkWCwwjjD"": 1,
    ""VJjaVl"": 1,
    ""HDXiLC"": 1,
    ""Administr"": 24,
    ""Administrator"": 10,
    ""YQTbrKhUt"": 1,
    ""FpoHiI"": 1,
    ""HIFhnN"": 1,
    ""Admin"": 9,
    ""Whatuptime.com"": 9,
    ""Jakartakini123#"": 9,
    ""ssgcrRNrL"": 1,
    ""XqyMRB"": 1,
    ""eeuhMt"": 1,
    ""gDSvVUKCW"": 1,
    ""wmMNEB"": 1,
    ""Rkvpgg"": 1
  },
  ""keyboard"": {
    ""Unknown"": 3663
  },
  ""client_build"": {
    ""Unknown"": 3663
  },
  ""client_name"": {
    ""Unknown"": 3663
  },
  ""ip_type"": {
    ""hosting"": 1083,
    ""Unknown"": 2407,
    ""hosting & proxy"": 102,
    ""mobile"": 60,
    ""proxy"": 11
  }
}"
qsAjHZB4,snowybot jd update,coinwalk,JavaScript,Sunday 26th of May 2024 07:14:58 PM CDT,"var elderly = parseFloat(document.getElementById('pct_balance').value);
var prefit = Number((elderly/1000).toFixed(8));
var beast = prefit;
var crust = (prefit/2)
var tens = (prefit*10);
var sevens = (prefit*6.9);
var eights = (prefit*7.9);
var fives = (prefit*4.9);
var fours = (prefit*4);
var winnerdinner = 144000;
var snowy = ((Math.floor(elderly/tens))*tens);
var snowzy = ((Math.floor(elderly/tens))*tens);
var snowie = 0;
var great = elderly;
var snot = ((Math.floor(elderly/tens))*tens);
var nomnom = true;
 
function go(){
great = document.getElementById('pct_balance').value;
var dog = Number((great-elderly).toFixed(8));
console.log(""profit"");
console.log(dog);
if (((great>(((Math.floor(great/tens))*tens)+sevens))&&(great<(((Math.floor(great/tens))*tens)+eights))&&(great<(snowie-crust)))||((great>(((Math.floor(great/tens))*tens)+sevens))&&(great<(((Math.floor(great/tens))*tens)+eights))&&(great>(snowie+crust)))){
    beast = beast*2;
    snowie = parseFloat(great);
}
if ((great<=(snot-tens))&&(great<(((Math.floor(great/tens))*tens)+fives))){
    beast = prefit;
    upped = 6.9;
    downed = 2.9;
    fart = 0;
    snowie = 0;
    snot = ((Math.floor(great/tens))*tens);
}
if (great>snot){
    snot = ((Math.floor(great/tens))*tens);
    }
if ((beast>fours)&&(great>=snot)&&(great<(((Math.floor(great/tens))*tens)+sevens))){
    beast = prefit;
    snowie = 0;
    snot = ((Math.floor(great/tens))*tens);
}
if ((great>=(snowzy+(tens*3)))&&(great<(((Math.floor(great/tens))*tens)+sevens))){
    beast = prefit;
    snowie = 0;
    snot = ((Math.floor(great/tens))*tens);
    snowzy = ((Math.floor(great/tens))*tens);
}
if (great>=winnerdinner){
console.log(""winner winner chicken dinner"");
return;
}
$('#pct_chance').val(49.5);
$('#pct_bet').val(((beast*1).toFixed(8)));
$('#a_lo').click();
setTimeout(() => go(), 1);
}
go();"
nUE7yjE9,snowybot jd,coinwalk,JavaScript,Sunday 26th of May 2024 07:04:57 PM CDT,"var elderly = parseFloat(document.getElementById('pct_balance').value);
var prefit = Number((elderly/1000).toFixed(8));
var beast = prefit;
var crust = (prefit/2)
var tens = (prefit*10);
var sevens = (prefit*6.9);
var eights = (prefit*7.9);
var fives = (prefit*4.9);
var fours = (prefit*4);
var winnerdinner = 144000;
var snowy = ((Math.floor(elderly/tens))*tens);
var snowzy = ((Math.floor(elderly/tens))*tens);
var snowie = 0;
var great = elderly;
var snot = elderly;
var nomnom = true;
 
function go(){
great = document.getElementById('pct_balance').value;
var dog = Number((great-elderly).toFixed(8));
console.log(""profit"");
console.log(dog);
if (((great>(((Math.floor(great/tens))*tens)+sevens))&&(great<(((Math.floor(great/tens))*tens)+eights))&&(great<(snowie-crust)))||((great>(((Math.floor(great/tens))*tens)+sevens))&&(great<(((Math.floor(great/tens))*tens)+eights))&&(great>(snowie+crust)))){
    beast = beast*2;
    snowie = parseFloat(great);
}
if ((great<=(snot-tens))&&(great<(((Math.floor(great/tens))*tens)+fives))){
    beast = prefit;
    upped = 6.9;
    downed = 2.9;
    fart = 0;
    snowie = 0;
    snot = parseFloat(great);
}
if (great>snot){
    snot = parseFloat(great);
    }
if ((beast>=fours)&&(great>=snot)&&(great<(((Math.floor(great/tens))*tens)+sevens))){
    beast = prefit;
    snowie = 0;
    snot = parseFloat(great);
}
if ((great>=(snowzy+(tens*3)))&&(great<(((Math.floor(great/tens))*tens)+sevens))){
    beast = prefit;
    snowie = 0;
    snot = parseFloat(great);
    snowzy = ((Math.floor(great/tens))*tens);
}
if (great>=winnerdinner){
console.log(""winner winner chicken dinner"");
return;
}
$('#pct_chance').val(49.5);
$('#pct_bet').val(((beast*1).toFixed(8)));
$('#a_lo').click();
setTimeout(() => go(), 1);
}
go();"
XfQyz22V,Untitled,evelinakolenchuk,Python,Sunday 26th of May 2024 07:04:12 PM CDT,"def buy():
    W2 = Toplevel(W1)
    W2.config(width=1440, height=810)
    L2 = Label(W2, image=p19, borderwidth=0)
    L2.place(x=0, y=0, width=1440, height=810)

    def buy3():
        W5 = Toplevel(W2)
        W5.config(width=1440, height=810)
        L5 = Label(W5, image=p20, borderwidth=0)
        L5.place(x=-1, y=-1, width=1440, height=810)

        def check():
            name = entry.get()
            entry.delete(0, 'end')
            surname = entry2.get()
            entry2.delete(0, 'end')
            patronymic = entry3.get()
            entry3.delete(0, 'end')
            passport_data = entry4.get()
            entry4.delete(0, 'end')
            num_order = str(random.randint(100000, 999999))
            Tickets.append((num_order, name, surname, patronymic, passport_data, ""Екатеринбург - Москва"",
                            ""27.05.24"", ""12.35"", ""6181""))

            W8 = Toplevel(W5)
            W8.config(width=1200, height=900)
            L8 = Label(W8, image=p12, borderwidth=0)
            L8.place(x=-1, y=-1, width=1200, height=900)

            W8.grab_set()
            W8.mainloop()

        def check1(e):
            Check['image'] = p11

        def check2(e):
            Check['image'] = p10

        Check = Button(W5, image=p10, borderwidth=0, command=check)
        Check.place(x=505, y=685, width=428, height=62)
        Check.bind('<Enter>', check1)
        Check.bind('<Leave>', check2)

        def on_validate_input(char):
            if char.isalpha() or char == """":
                return True
            else:
                return False

        vcmd = W5.register(on_validate_input)
        entry = ttk.Entry(W5, validate=""key"", validatecommand=(vcmd, '%P'))
        entry.pack()
        entry.config(width=85)  # Ширина окна ввода
        entry.place(x=840, y=226)  # Положение окна ввода в окне

        entry2 = ttk.Entry(W5, validate=""key"", validatecommand=(vcmd, '%P'))
        entry2.pack()
        entry2.config(width=123)  # Ширина окна ввода
        entry2.place(x=612, y=307)  # Положение окна ввода в окне

        entry3 = ttk.Entry(W5, validate=""key"", validatecommand=(vcmd, '%P'))
        entry3.pack()

        entry3.config(width=91)  # Ширина окна ввода
        entry3.place(x=804, y=384)  # Положение окна ввода в окне

        entry4 = ttk.Entry(W5)
        entry4.pack()

        entry4.config(width=90)  # Ширина окна ввода
        entry4.place(x=440, y=600)  # Положение окна ввода в окне

        W5.grab_set()
        W5.mainloop()

    def buy4(e):
        Buy1['image'] = p9

    def buy5(e):
        Buy1['image'] = p8

    Buy1 = Button(W2, image=p8, borderwidth=0, command=buy3)
    Buy1.place(x=0, y=324, width=1440, height=92)
    Buy1.bind('<Enter>', buy4)
    Buy1.bind('<Leave>', buy5)

    def buy6():
        W6 = Toplevel(W2)
        W6.config(width=1440, height=810)
        L6 = Label(W6, image=p20, borderwidth=0)
        L6.place(x=0, y=0, width=1440, height=810)

        def check():
            name = entry.get()
            entry.delete(0, 'end')
            surname = entry2.get()
            entry2.delete(0, 'end')
            patronymic = entry3.get()
            entry3.delete(0, 'end')
            passport_data = entry4.get()
            entry4.delete(0, 'end')
            num_order = str(random.randint(100000, 999999))
            Tickets.append((num_order, name, surname, patronymic, passport_data, ""Екатеринбург - Москва"",
                            ""29.05.24"", ""15.10"", ""7180""))
            W8 = Toplevel(W6)
            W8.config(width=1200, height=900)
            L8 = Label(W8, image=p12, borderwidth=0)
            L8.place(x=-1, y=-1, width=1200, height=900)

            W8.grab_set()
            W8.mainloop()

        def check1(e):
            Check['image'] = p11

        def check2(e):
            Check['image'] = p10

        Check = Button(W6, image=p10, borderwidth=0, command=check)
        Check.place(x=505, y=685, width=428, height=62)
        Check.bind('<Enter>', check1)
        Check.bind('<Leave>', check2)

        def on_validate_input(char):
            if char.isalpha() or char == """":
                return True
            else:
                return False

        vcmd = W6.register(on_validate_input)
        entry = ttk.Entry(W6, validate=""key"", validatecommand=(vcmd, '%P'))
        entry.pack()

        entry.config(width=85)  # Ширина окна ввода
        entry.place(x=840, y=226)  # Положение окна ввода в окне

        entry2 = ttk.Entry(W6, validate=""key"", validatecommand=(vcmd, '%P'))
        entry2.pack()

        entry2.config(width=123)  # Ширина окна ввода
        entry2.place(x=612, y=307)  # Положение окна ввода в окне

        entry3 = ttk.Entry(W6, validate=""key"", validatecommand=(vcmd, '%P'))
        entry3.pack()

        entry3.config(width=91)  # Ширина окна ввода
        entry3.place(x=804, y=384)  # Положение окна ввода в окне

        entry4 = ttk.Entry(W6)
        entry4.pack()

        entry4.config(width=90)  # Ширина окна ввода
        entry4.place(x=440, y=600)  # Положение окна ввода в окне

        W6.grab_set()
        W6.mainloop()

    def buy7(e):
        Buy2['image'] = p16

    def buy8(e):
        Buy2['image'] = p15

    Buy2 = Button(W2, image=p15, borderwidth=0, command=buy6)
    Buy2.place(x=0, y=420, width=1440, height=92)
    Buy2.bind('<Enter>', buy7)
    Buy2.bind('<Leave>', buy8)

    def buy9():
        W7 = Toplevel(W2)
        W7.config(width=1440, height=810)
        L7 = Label(W7, image=p20, borderwidth=0)
        L7.place(x=-1, y=-1, width=1440, height=810)

        def check():
            name = entry.get()
            entry.delete(0, 'end')
            surname = entry2.get()
            entry2.delete(0, 'end')
            patronymic = entry3.get()
            entry3.delete(0, 'end')
            passport_data = entry4.get()
            entry4.delete(0, 'end')
            num_order = str(random.randint(100000, 999999))
            Tickets.append((num_order, name, surname, patronymic, passport_data, ""Екатеринбург - Москва"",
                            ""28.05.24"", ""18.24"", ""7350""))

            W8 = Toplevel(W7)
            W8.config(width=1200, height=900)
            L8 = Label(W8, image=p12, borderwidth=0)
            L8.place(x=-1, y=-1, width=1200, height=900)

            W8.grab_set()
            W8.mainloop()

        def check1(e):
            Check['image'] = p11

        def check2(e):
            Check['image'] = p10

        Check = Button(W7, image=p10, borderwidth=0, command=check)
        Check.place(x=505, y=685, width=428, height=62)
        Check.bind('<Enter>', check1)
        Check.bind('<Leave>', check2)

        def on_validate_input(char):
            if char.isalpha() or char == """":
                return True
            else:
                return False

        vcmd = W7.register(on_validate_input)
        entry = ttk.Entry(W7, validate=""key"", validatecommand=(vcmd, '%P'))
        entry.pack()

        entry.config(width=85)  # Ширина окна ввода
        entry.place(x=840, y=226)  # Положение окна ввода в окне

        entry2 = ttk.Entry(W7, validate=""key"", validatecommand=(vcmd, '%P'))
        entry2.pack()

        entry2.config(width=123)  # Ширина окна ввода
        entry2.place(x=612, y=307) # Положение окна ввода в окне

        entry3 = ttk.Entry(W7, validate=""key"", validatecommand=(vcmd, '%P'))
        entry3.pack()

        entry3.config(width=91)  # Ширина окна ввода
        entry3.place(x=804, y=384)

        entry4 = ttk.Entry(W7)
        entry4.pack()

        entry4.config(width=90)  # Ширина окна ввода
        entry4.place(x=440, y=600)  # Положение окна ввода в окне

        W7.grab_set()
        W7.mainloop()

    def buy10(e):
        Buy3['image'] = p17

    def buy11(e):
        Buy3['image'] = p18

    Buy3 = Button(W2, image=p17, borderwidth=0, command=buy9)
    Buy3.place(x=0, y=520, width=1440, height=92)
    Buy3.bind('<Enter>', buy11)
    Buy3.bind('<Leave>', buy10)

    W2.grab_set()
    W2.mainloop()


def buy1(e):
    Buy['image'] = p3


def buy2(e):
    Buy['image'] = p2


Buy = Button(W1, image=p2, borderwidth=0, command=buy)
Buy.place(x=615, y=0, width=369, height=122)
Buy.bind('<Enter>', buy1)
Buy.bind('<Leave>', buy2)"
XzhSe4Es,snowy fbtc again,coinwalk,JavaScript,Sunday 26th of May 2024 07:03:27 PM CDT,"var elderly = parseFloat(document.getElementById('balance').innerHTML);
var prefit = 0.00000001;
var beast = prefit;
var crust = (prefit/2)
var tens = (prefit*10);
var sevens = (prefit*6.9);
var eights = (prefit*7.9);
var fives = (prefit*4.9);
var fours = (prefit*4);
var winnerdinner = (elderly*24);
var snowzy = ((Math.floor(elderly/tens))*tens);
var snowie = 0;
var great = elderly;
var snot = elderly;
var nomnom = true;
var myseed = ""goodgoing"";
 
 function getR(minz, maxz) {
  minz = Math.ceil(minz);
  maxz = Math.floor(maxz);
  return Math.floor(Math.random() * (maxz - minz + 1)) + minz;
}
 
function makeid(length) {
    var result = '';
    var cha = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';
    var chaLength = cha.length;
    for ( var ion = 0; ion < length; ion++ ){
      result += cha.charAt(Math.floor(Math.random() *
 chaLength));
   }
   return result;
} 
 
 
function go(){
great = document.getElementById('balance').innerHTML;
var dog = Number((great-elderly).toFixed(8));
console.log(""profit"");
console.log(dog);
if (((great>(((Math.floor(great/tens))*tens)+sevens))&&(great<(((Math.floor(great/tens))*tens)+eights))&&(great<(snowie-crust)))||((great>(((Math.floor(great/tens))*tens)+sevens))&&(great<(((Math.floor(great/tens))*tens)+eights))&&(great>(snowie+crust)))){
    beast = beast*2;
    snowie = parseFloat(great);
}
if ((great<=(snot-tens))&&(great<(((Math.floor(great/tens))*tens)+fives))){
    beast = prefit;
    upped = 6.9;
    downed = 2.9;
    fart = 0;
    snowie = 0;
    snot = parseFloat(great);
}
if (great>snot){
    snot = parseFloat(great);
    }
if ((beast>fours)&&(great>=snot)&&(great<(((Math.floor(great/tens))*tens)+sevens))){
    beast = prefit;
    snowie = 0;
    snot = parseFloat(great);
}
if ((great>=(snowzy+(tens*3)))&&(great<(((Math.floor(great/tens))*tens)+sevens))){
    beast = prefit;
    snowie = 0;
    snot = parseFloat(great);
    snowzy = ((Math.floor(great/tens))*tens);
}
if (great>=winnerdinner){
console.log(""winner winner chicken dinner"");
return;
}
var xol = getR(1,3);
if (xol==1) {
myseed = makeid(5);
}
if (xol==2) {
myseed = makeid(7);
}
if (xol==3) {
myseed = makeid(9);
}
document.getElementById('next_client_seed').value = myseed;
document.getElementById('double_your_btc_win_chance').value = 47.50
parseFloat(document.getElementById('double_your_btc_stake').value = ((beast*1).toFixed(8)));
parseFloat(document.getElementById('win_amount').value = ((beast*1).toFixed(8)));
document.getElementById('double_your_btc_bet_lo_button').click();
setTimeout(() => go(), 1000);
}
go();"
gLTaE1dS,ejer8tp6bis2.cpp,orlandoju,C++,Sunday 26th of May 2024 06:54:15 PM CDT,"#include <iostream>
#include <clocale>
using namespace std;

int main() {
    setlocale(LC_ALL, """");

    const int CLIENTES = 50;
    const int TIPOSENT = 10;
    int nroEntrenamiento, minutosEnt, cliente, tipoEnt;
    int tiempoTotalCliente[CLIENTES] = {};
    bool tiposEntPorCliente[CLIENTES][TIPOSENT] = {};
    int minEntPorCliente[CLIENTES][TIPOSENT] = {};
    int maxTiempoEntrenamiento = 0, maxClienteEnt = 0;

    cout << ""Ingrese número de entrenamiento (0 para terminar): "" << endl;
    cin >> nroEntrenamiento;

    while (nroEntrenamiento != 0) {
        cout << ""Ingrese cliente (101-150): "" << endl;
        cin >> cliente;
        cout << ""Ingrese tiempo total de entrenamiento en minutos: "" << endl;
        cin >> minutosEnt;
        cout << ""Ingrese el tipo de entrenamiento que realizó (1-10): "" << endl;
        cin >> tipoEnt;

        tiempoTotalCliente[cliente - 101] += minutosEnt;
        tiposEntPorCliente[cliente - 101][tipoEnt - 1] = true;
        minEntPorCliente[cliente - 101][tipoEnt - 1] += minutosEnt;

        if (tiempoTotalCliente[cliente - 101] > maxTiempoEntrenamiento) {
            maxTiempoEntrenamiento = tiempoTotalCliente[cliente - 101];
            maxClienteEnt = cliente;
        }

        cout << ""--------------------------------------"" << endl;
        cout << ""Ingrese número de entrenamiento (0 para terminar): "" << endl;
        cin >> nroEntrenamiento;
    }

    // 1 - Tiempo total de entrenamiento por cliente
    cout << ""Tiempo total de entrenamiento por cliente:"" << endl;
    for (int i = 0; i < CLIENTES; i++) {
        if (tiempoTotalCliente[i] > 0) {
            int horas = tiempoTotalCliente[i] / 60;
            int minutos = tiempoTotalCliente[i] % 60;
            cout << ""Cliente "" << (i + 101) << "": "" << horas << "" horas y "" << minutos << "" minutos"" << endl;
        }
    }

    // 2 - Tipos de entrenamiento realizados por cada cliente
    cout << ""Tipos de entrenamiento realizados por cada cliente:"" << endl;
    for (int i = 0; i < CLIENTES; i++) {
        bool tuvoTiposEnt = false;
        for (int j = 0; j < TIPOSENT; j++) {
            if (tiposEntPorCliente[i][j]) {
                if (!tuvoTiposEnt) {
                    cout << ""Cliente "" << (i + 101) << "": "";
                    tuvoTiposEnt = true;
                }
                cout << (j + 1) << "" "";
            }
        }
        if (tuvoTiposEnt) {
            cout << endl;
        }
    }

    // 3 - Minutos por tipo de entrenamiento por cliente
    cout << ""Minutos por tipo de entrenamiento por cliente:"" << endl;
    for (int i = 0; i < CLIENTES; i++) {
        for (int j = 0; j < TIPOSENT; j++) {
            if (minEntPorCliente[i][j] > 0) {
                cout << ""Cliente "" << (i + 101) << "", Tipo de entrenamiento "" << (j + 1) << "": "" << minEntPorCliente[i][j] << "" minutos"" << endl;
            }
        }
    }

    // 4 - Cliente que más tiempo ha entrenado
    cout << ""El cliente que más tiempo entrenó es el cliente "" << maxClienteEnt << "" con "" << maxTiempoEntrenamiento << "" minutos."" << endl;

    // 5 - Tipos de entrenamiento no realizados por ningún cliente
    cout << ""Tipos de entrenamiento no realizados por ningún cliente:"" << endl;
    for (int j = 0; j < TIPOSENT; j++) {
        bool realizoTipoEnt = false;
        for (int i = 0; i < CLIENTES; i++) {
            if (tiposEntPorCliente[i][j] == true) {
                realizoTipoEnt = true;
            }
        }
        if (!realizoTipoEnt) {
            cout << ""Tipo de entrenamiento "" << (j + 1) << "" no fue realizado por ningún cliente."" << endl;
        }
    }

    return 0;
}
"
6yXCYZk6,fbtc snowybot update,coinwalk,JavaScript,Sunday 26th of May 2024 06:48:48 PM CDT,"var elderly = parseFloat(document.getElementById('balance').innerHTML);
var prefit = 0.00000001;
var beast = prefit;
var crust = (prefit/2)
var tens = (prefit*10);
var sevens = (prefit*6.9);
var eights = (prefit*7.9);
var fives = (prefit*4.9);
var fours = (prefit*4);
var winnerdinner = (elderly*24);
var snowzy = ((Math.floor(elderly/tens))*tens);
var snowie = 0;
var great = elderly;
var snot = elderly;
var nomnom = true;
var myseed = ""goodgoing"";
 
 function getR(minz, maxz) {
  minz = Math.ceil(minz);
  maxz = Math.floor(maxz);
  return Math.floor(Math.random() * (maxz - minz + 1)) + minz;
}
 
function makeid(length) {
    var result = '';
    var cha = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';
    var chaLength = cha.length;
    for ( var ion = 0; ion < length; ion++ ){
      result += cha.charAt(Math.floor(Math.random() *
 chaLength));
   }
   return result;
} 


function go(){
great = document.getElementById('balance').innerHTML;
var dog = Number((great-elderly).toFixed(8));
console.log(""profit"");
console.log(dog);
if (((great>(((Math.floor(great/tens))*tens)+sevens))&&(great<(((Math.floor(great/tens))*tens)+eights))&&(great<(snowie-crust)))||((great>(((Math.floor(great/tens))*tens)+sevens))&&(great<(((Math.floor(great/tens))*tens)+eights))&&(great>(snowie+crust)))){
    beast = beast*2;
    snowie = parseFloat(great);
}
if ((great<=(snot-tens))&&(great<(((Math.floor(great/tens))*tens)+fives))){
    beast = prefit;
    upped = 6.9;
    downed = 2.9;
    fart = 0;
    snowie = 0;
    snot = parseFloat(great);
    snowzy = ((Math.floor(great/tens))*tens);
}
if (great>snot){
    snot = parseFloat(great);
    }
if ((beast>fours)&&(great>=snot)&&(great<(((Math.floor(great/tens))*tens)+sevens))){
    beast = prefit;
    snowie = 0;
    snot = parseFloat(great);
    snowzy = ((Math.floor(great/tens))*tens);
}
if ((great>=(snowzy+(tens*3)))&&(great<(((Math.floor(great/tens))*tens)+sevens))){
    beast = prefit;
    snowie = 0;
    snot = parseFloat(great);
    snowzy = ((Math.floor(great/tens))*tens);
}
if (great>=winnerdinner){
console.log(""winner winner chicken dinner"");
return;
}
var xol = getR(1,3);
if (xol==1) {
myseed = makeid(5);
}
if (xol==2) {
myseed = makeid(7);
}
if (xol==3) {
myseed = makeid(9);
}
document.getElementById('next_client_seed').value = myseed;
document.getElementById('double_your_btc_win_chance').value = 47.50
parseFloat(document.getElementById('double_your_btc_stake').value = ((beast*1).toFixed(8)));
parseFloat(document.getElementById('win_amount').value = ((beast*1).toFixed(8)));
document.getElementById('double_your_btc_bet_lo_button').click();
setTimeout(() => go(), 1000);
}
go();"
eMi57Fne,QuarryAutomation.lua,redex208050,Lua,Sunday 26th of May 2024 06:32:54 PM CDT,"QuarryDone = false
NumTimesItemRetrievalFailed = 0

local function WaitForQuarryToFinish()
	while QuarryDone == false do
        turtle.suck()
        if turtle.getItemDetail(1, false) == nil then
            NumTimesItemRetrievalFailed = NumTimesItemRetrievalFailed + 1
        else
            NumTimesItemRetrievalFailed = 0
        end
        turtle.drop()
        if NumTimesItemRetrievalFailed == 30 then
            NumTimesItemRetrievalFailed = 0
            QuarryDone = true
        end
        os.sleep(2)
    end
end

local function CheckFuel()
    i = 5
    while i <= 16 do
        turtle.select(i)
        if turtle.getItemDetail(i, false) ~= nil then
				return true
		end
		i = i + 1
    end
	turtle.select(1)
    return false
end

local function Refuel()
    if turtle.getFuelLevel() < 21 then
        Success = CheckFuel()
    end
    if Success == false then
        return false
    end
    turtle.refuel()
    turtle.select(1)
    return true
end

local function RemoveQuarrySetup()
    Success = Refuel()
    if Success == false then
        return false
    end
    turtle.dig()
    turtle.digDown()
    turtle.forward()
    turtle.digDown()
    turtle.back()
    return true
end

local function DropItem()
	turtle.select(4)
    turtle.drop()
    turtle.select(1)
end

local function PlaceQuarrySetup()
    turtle.dig()
    DropItem()
    turtle.place()
    turtle.digDown()
    DropItem()
    turtle.down()
    turtle.dig()
    DropItem()
    turtle.select(3)
	turtle.place()
    turtle.up()
    turtle.select(2)
    turtle.placeDown()
    QuarryDone = false
end

local function MoveChunks()
    turtle.turnRight()
    turtle.select(4)
    for i = 1, 16, 1 do
    	turtle.dig()
        turtle.drop()
        turtle.forward()
    end
    turtle.turnLeft()
end

while true do
	WaitForQuarryToFinish()
	RemoveQuarrySetup()
	MoveChunks()
	PlaceQuarrySetup()
end"
T1dqymKS,fbtc snowybot,coinwalk,JavaScript,Sunday 26th of May 2024 06:18:43 PM CDT,"var elderly = parseFloat(document.getElementById('balance').innerHTML);
var prefit = Number((elderly/100).toFixed(8));
var beast = prefit;
var crust = (prefit/2)
var tens = (prefit*10);
var sevens = (prefit*6.9);
var eights = (prefit*7.9);
var fives = (prefit*4.9);
var fours = (prefit*4);
var winnerdinner = (elderly*24);
var snowzy = ((Math.floor(elderly/tens))*tens);
var snowie = 0;
var great = elderly;
var snot = elderly;
var nomnom = true;
var myseed = ""goodgoing"";
 
 function getR(minz, maxz) {
  minz = Math.ceil(minz);
  maxz = Math.floor(maxz);
  return Math.floor(Math.random() * (maxz - minz + 1)) + minz;
}
 
function makeid(length) {
    var result = '';
    var cha = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';
    var chaLength = cha.length;
    for ( var ion = 0; ion < length; ion++ ){
      result += cha.charAt(Math.floor(Math.random() *
 chaLength));
   }
   return result;
} 


function go(){
great = document.getElementById('balance').innerHTML;
var dog = Number((great-elderly).toFixed(8));
console.log(""profit"");
console.log(dog);
if (((great>(((Math.floor(great/tens))*tens)+sevens))&&(great<(((Math.floor(great/tens))*tens)+eights))&&(great<(snowie-crust)))||((great>(((Math.floor(great/tens))*tens)+sevens))&&(great<(((Math.floor(great/tens))*tens)+eights))&&(great>(snowie+crust)))){
    beast = beast*2;
    snowie = parseFloat(great);
}
if ((great<=(snot-tens))&&(great<(((Math.floor(great/tens))*tens)+fives))){
    beast = prefit;
    upped = 6.9;
    downed = 2.9;
    fart = 0;
    snowie = 0;
    snot = parseFloat(great);
    snowzy = ((Math.floor(great/tens))*tens);
}
if (great>snot){
    snot = parseFloat(great);
    }
if ((beast>fours)&&(great>=snot)&&(great<(((Math.floor(great/tens))*tens)+sevens))){
    beast = prefit;
    snowie = 0;
    snot = parseFloat(great);
    snowzy = ((Math.floor(great/tens))*tens);
}
if ((great>=(snowzy+(tens*3)))&&(great<(((Math.floor(great/tens))*tens)+sevens))){
    beast = prefit;
    snowie = 0;
    snot = parseFloat(great);
    snowzy = ((Math.floor(great/tens))*tens);
}
if (great>=winnerdinner){
console.log(""winner winner chicken dinner"");
return;
}
var xol = getR(1,3);
if (xol==1) {
myseed = makeid(5);
}
if (xol==2) {
myseed = makeid(7);
}
if (xol==3) {
myseed = makeid(9);
}
document.getElementById('next_client_seed').value = myseed;
document.getElementById('double_your_btc_win_chance').value = 47.50
parseFloat(document.getElementById('double_your_btc_stake').value = ((beast*1).toFixed(8)));
parseFloat(document.getElementById('win_amount').innerHTML = ((beast*1).toFixed(8)));
document.getElementById('double_your_btc_bet_lo_button').click();
setTimeout(() => go(), 1000);
}
go();"
UijGFS9c,fbtc snowybot,coinwalk,JavaScript,Sunday 26th of May 2024 06:15:17 PM CDT,"var elderly = parseFloat(document.getElementById('balance').innerHTML);
var prefit = Number((elderly/100).toFixed(8));
var beast = prefit;
var crust = (prefit/2)
var tens = (prefit*10);
var sevens = (prefit*6.9);
var eights = (prefit*7.9);
var fives = (prefit*4.9);
var fours = (prefit*4);
var winnerdinner = (elderly*24);
var snowzy = ((Math.floor(elderly/tens))*tens);
var snowie = 0;
var great = elderly;
var snot = elderly;
var nomnom = true;
var myseed = goodgoing;
 
 function getR(minz, maxz) {
  minz = Math.ceil(minz);
  maxz = Math.floor(maxz);
  return Math.floor(Math.random() * (maxz - minz + 1)) + minz;
}
 
function makeid(length) {
    var result = '';
    var cha = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';
    var chaLength = cha.length;
    for ( var ion = 0; ion < length; ion++ ){
      result += cha.charAt(Math.floor(Math.random() *
 chaLength));
   }
   return result;
} 


function go(){
great = document.getElementById('balance').innerHTML;
var dog = Number((great-elderly).toFixed(8));
console.log(""profit"");
console.log(dog);
if (((great>(((Math.floor(great/tens))*tens)+sevens))&&(great<(((Math.floor(great/tens))*tens)+eights))&&(great<(snowie-crust)))||((great>(((Math.floor(great/tens))*tens)+sevens))&&(great<(((Math.floor(great/tens))*tens)+eights))&&(great>(snowie+crust)))){
    beast = beast*2;
    snowie = parseFloat(great);
}
if ((great<=(snot-tens))&&(great<(((Math.floor(great/tens))*tens)+fives))){
    beast = prefit;
    upped = 6.9;
    downed = 2.9;
    fart = 0;
    snowie = 0;
    snot = parseFloat(great);
    snowzy = ((Math.floor(great/tens))*tens);
}
if (great>snot){
    snot = parseFloat(great);
    }
if ((beast>fours)&&(great>=snot)&&(great<(((Math.floor(great/tens))*tens)+sevens))){
    beast = prefit;
    snowie = 0;
    snot = parseFloat(great);
    snowzy = ((Math.floor(great/tens))*tens);
}
if ((great>=(snowzy+(tens*3)))&&(great<(((Math.floor(great/tens))*tens)+sevens))){
    beast = prefit;
    snowie = 0;
    snot = parseFloat(great);
    snowzy = ((Math.floor(great/tens))*tens);
}
if (great>=winnerdinner){
console.log(""winner winner chicken dinner"");
return;
}
var xol = getR(1,3);
if (xol==1) {
myseed = (makeid(5));
}
if (xol==2) {
myseed = (makeid(7));
}
if (xol==3) {
myseed = (makeid(9));
}
document.getElementById('next_client_seed').value = myseed;
document.getElementById('double_your_btc_win_chance').value = 47.50
parseFloat(document.getElementById('double_your_btc_stake').value = ((beast*1).toFixed(8)));
parseFloat(document.getElementById('win_amount').innerHTML = ((beast*1).toFixed(8)));
document.getElementById('double_your_btc_bet_lo_button').click();
setTimeout(() => go(), 1000);
}
go();"
sF0e5myA,Roblox AURORAX,jordanthebordan,C++,Sunday 26th of May 2024 06:14:38 PM CDT,"Download - https://youtu.be/nDD-zK_gGXQ

Note
Roblox AURORA X cheat is designed specifically to give players the ability to fully control the gameplay and enjoy the game without limitations. We offer an extensive set of features that can be activated and customized according to each player's preferences. Just recently we decided to make our cheat free and available to all players without exception. Thanks to our 24/7 support, we fix your problems on time and keep our cheat on top.
 
Download - https://youtu.be/nDD-zK_gGXQ
 
Features 🛠️:
ESP (Wallhack) - this feature of our cheat will allow you to see behind walls! You will be able to see players' names, their health, exact distance to them, the contents of crates, various lines (such as sight lines), team affiliation and much more!
AIMBOT (Aim Target) - we have implemented the best aimbot (automatic aiming) with lots of customization options. This allows each of your shots to be the last for your opponent. You can choose the target - it can be a specific body part or just precise aiming.
Misc (Tools) - our cheat also has a number of useful tools. For example, there is a function that removes weapon recoil and makes it reload faster. It is also possible to reduce ping, increase FPS by removing unnecessary objects in the scene. There are other useful features.
 
Download - https://youtu.be/nDD-zK_gGXQ
 
Tip
1. Anti-cheats (VAC, FACEIT, ESEA, BATTLEYE, EAC and many others) cannot detect our cheat.
2. Most importantly: the program is completely safe for your Windows system.
3. Support for most systems: Windows 7/8/8.1/10/11 (x32/64)
4. Password Archive - 1234
 
 
Download - https://youtu.be/nDD-zK_gGXQ"
Cg1QdTXp,CreateW,Oppaceted,Python,Sunday 26th of May 2024 06:07:22 PM CDT,"def CreateW(A: list, B: list, column: list, headers: list) -> list:
    W = [0]*(len(A[0])+1)      
    for i in range(len(A)):
        if column[i][0] == 'y':
            for j in range(len(A[0])):
                W[j] += A[i][j]
            W[len(A[0])] += B[i]
    for j in range( len( A[0] ) ):
        if headers[j][0] == 'y':
            W[j] += 1
    return W
def ChangeFunctional(column: list, Functional_koeff: list) -> list:
    new_Functional = list(Functional_koeff)
    for i in range(len(column)):
        new_Functional[i] = Functional_koeff[int(column[i][2])-1]
    return new_Functional
def CreateF(A: list, B: list, Functional_koeff: list) -> list:
    F = [0]*(len(A[0])+1)
    for i in range(len(A)):
        for j in range(len(A[0])):
            F[j] += Functional_koeff[i]*A[i][j]
    for i in range(len(A)):
        F[len(F)-1] += B[i]*Functional_koeff[i]
    return F

def ChangeF(A: list, B: list, F: list, stroka_number: int, stolbec_number: int):
    F[len(F)-1] += B[stroka_number]*F[stolbec_number]
    for j in range(len(A[0])):
        for i in range(len(A)):    
            pass
        if j == stolbec_number:
            print(f'A: {A[stroka_number][stolbec_number]}')
            print(f'F[j]: {F[j]}')
            F[j] *= A[stroka_number][stolbec_number]
        else:
            F[j] += F[stolbec_number]*A[stroka_number][j]
    return F"
fA8fyFdB,drawing,Oppaceted,Python,Sunday 26th of May 2024 06:06:34 PM CDT,"from tabulate import tabulate
from CreateW import CreateW

def ShowFunctional(N: int, Functional_koeff: list) -> None:
    for i in range(N):
        print(f""{Functional_koeff[i]}x_{i+1}"", end= """")
        if i == N-1:    #в range создается N-1 элементов (начинаем с нуля) => берем i == N-1
            print()
        else:
            print(""+"", end = """")
def ShowMatrixElement (A: list, i: int, j: int) -> None:
    for el_i in range(len(A)):
        print (""("", end="" "")
        for el_j in range(len(A[i])):
            print( ""   X"" if (el_i == i and el_j == j) else f""{A[el_i][el_j]:>4}"" , end="" "")
        print ("")"")
def ShowTable(A: list, B: list,  column: list, input_headers: list, input_W: list) -> None:
    M = len(A)
    N = len(A[0])
    headers = [''] + input_headers + ['B']
    data = []
    for i in range(M):
        #data.append([f'y_{i+1}'])
        data.append([column[i]])
        data[i] = data[i] + [i for i in A[i]] + [B[i]]
    data += [['W'] + input_W]
    #data += [['W'] + CreateW(A, B, column, input_headers)]
    print( tabulate(tabular_data= data, headers=headers, tablefmt=""grid"") )"
1FiTNy6S,reduction_to_canonical_form,Oppaceted,Python,Sunday 26th of May 2024 06:05:53 PM CDT,"#reduction_to_canonical_form
from drawing import ShowMatrixElement, ShowTable
from CreateW import CreateW, ChangeF

def SetToCanon (A: int, N: int, M: int, more: bool) -> None:
    for i in range(M):
        for j in range(M):
            if j == i:
                A[i].append( (more-0.5000)*(-2) )
            else:
                A[i].append(0)
    ShowMatrixElement(A, -1, -1)

def ChooseVariables(A: list, B: list, W: list) -> (int, int):
    M = len(A) # количество уравнений/строк
    N = len(A[0]) # количество переменных/столбцов
    #print(W) #отладка
    stolbec_number = 0
    for i in range( len(W) ):
        if W[i] < W[stolbec_number]:
            stolbec_number = i
    print(W[stolbec_number])#отладка    
    for i in range(len(A)):
        stroka_number = i
        if A[i][stolbec_number] != 0:
            break
    indicator = 3**10
    for i in range( len(A) ):
        if not B[i]*A[i][stolbec_number]<0:
            continue
        #if abs( B[i]/A[i][stolbec_number] ) < abs(B[stroka_number]/A[stroka_number][stolbec_number]) :
        if abs( B[i]/A[i][stolbec_number] ) < indicator :
            indicator = abs( B[i]/A[i][stolbec_number] )
            stroka_number = i
    print(A[stroka_number][stolbec_number])#отладка
    return (stroka_number, stolbec_number)

def ChangeVariables(A: list, B: list, stroka_number: int, stolbec_number: int, column: list, headers: list, W_or_F: bool, F = None):
    B[stroka_number] = B[stroka_number]/A[ stroka_number ][ stolbec_number ]*-1
    for j in range( len(A[0]) ):
        if (j != stolbec_number):
            A[ stroka_number ][j] = A[ stroka_number ][j]/A[ stroka_number ][ stolbec_number ]*-1
    A[stroka_number][stolbec_number] = 1/A[ stroka_number ][ stolbec_number ]
    
    for i in range(len(A)):
        if i == stroka_number:
            continue
        else:
            B[i] += B[stroka_number]*A[i][stolbec_number]
            for j in range(len(A[0])):
                if j != stolbec_number:
                    A[i][j] += A[i][stolbec_number] * A[stroka_number][j]
                #A[i][stolbec_number] *= A[stroka_number][stolbec_number]
            A[i][stolbec_number] *= A[stroka_number][stolbec_number]    
            
    

    column[stroka_number], headers[stolbec_number] = headers[stolbec_number], column[stroka_number]
    #ShowTable(A, B, column, headers, CreateW(A, B, column, headers))
    if not W_or_F:
        F = ChangeF( A, B, F, ChooseVariables(A, B, F)[0], ChooseVariables(A, B, F)[1])
    ShowTable(A, B, column, headers, (CreateW(A, B, column, headers) if W_or_F==True else F ) )

def RemoveExtraVars(A: list, B:list, N: int, column: list, headers: list) -> (list, list, list, list):
    new_A = A.copy()
    new_B = B.copy()
    new_column = column.copy()
    for i in range(len(A)):
        if int(column[i][2]) > N:
            new_A.remove(A[i])
            new_B.remove(B[i])
            new_column.remove(column[i])
    column = new_column.copy()
    B = new_B.copy()

    new_headers = headers.copy()
    new_A = Transpose(new_A)
    A = new_A.copy()
    for j in range(len(A)):
        if headers[j][0] == 'y':
            new_A.remove(A[j])
            new_headers.remove(headers[j])
    A = Transpose(new_A).copy()
    headers = new_headers.copy()
    return (A, B, column, headers)
    #
    '''
    A = [[A[j][i] for j in range(len(A))] for i in range(len(A[0]))]
    new_A = A.copy()
    new_headers = headers.copy()
    for j in range(len(A)):
        if headers[j][0] == 'y':
            new_A.remove(A[i])
            new_headers.remove(headers[i])
    A = new_A.copy()
    A = [[A[j][i] for j in range(len(A))] for i in range(len(A[0]))]
    headers = new_headers.copy()
    '''
    '''
    for i in :
        if int(i[2]) > N:
            A.pop(column.index(i))
            B.pop(column.index(i))
            column.remove(i)
            '''
'''
    for l in A: #иногда столбцы не удаляются, поэтому нужно пройти ещё раз
        for j in headers:
            if j[0] == 'y':
                for i in A:
                    i.pop(headers.index(j))
                headers.remove(j)
                '''
def Transpose(A: list):
    A = [[A[j][i] for j in range(len(A))] for i in range(len(A[0]))]
    return A
def CheckCondition(F: list) -> bool:
    for i in range(len(F)-1):
        if F[i]<0:
            return True
    return False"
v5Fsvj2K,main,Oppaceted,Python,Sunday 26th of May 2024 06:04:03 PM CDT,"from drawing import *
from reduction_to_canonical_form import *
from CreateW import *
from os import system

N = int(input(""Введите число переменных: ""))
M = int(input(""Введите количество уравнения: ""))
Functional_koeff = []
for i in range(N):
    Functional_koeff.append(float(input(f""L_{i+1}: "") ) )
print(""f = "", end= """")
ShowFunctional(N, Functional_koeff)
B = [] #вектор
A = [] #матрица

for i in range(M):
    A.append([])
    for j in range(N):
        A[i].append(""*"")

for i in range(M):
    for j in range(N):
        system(""cls"")
        ShowMatrixElement(A, i, j)
        A[i][j]=(float(input(f""A_{i+1,j+1}="")))
system(""cls"")
ShowMatrixElement(A, -1, -1)
input()
system(""cls"")
for i in range(M):
    B.append(float(input(f""B_{i+1}="")))


print(A)#отладка
print(B)#отладка
input()
while(True): 
    system(""cls"")
    enter = input('Определите ограничение: ')
    if(enter ==  ""Больше""):
        more = True
        break
    elif(enter ==  ""Меньше""):
        more = False
        break
    #more = True if enter == ""Больше"" else False if enter == ""Меньше"" else exit(0)
    #Это тернарный оператор. Он нужен, чтобы писать в одну стрчоку вместо нескольких

for i in range(M):
    for j in range(N):
        print(f""{A[i][j]}x_{j+1}"", end = "" "")
        print(end=( (f""\u2265 {B[i]}\n"" if more else f""\u2264 {B[i]}\n"" ) if (j == N-1) else ""+ "" ) )
print(""F = "", end ="""");ShowFunctional(N, Functional_koeff)

SetToCanon(A, N, M, more)
input()
system(""cls"")

for i in range(M):
    for j in range( len( A[0] ) ):
        print(f""{A[i][j]}x_{j+1}"", end = "" "")
        if j != ( len(A[0])-1 ):
            print(end="" +  "")
    print(f""={B[i]}"", end=""\n\n"")

for i in range(M):
    for j in range( len( A[0] ) ):
        A[i][j] = A[i][j]*-1

headers = []        
for j in range(len(A[0])):
    headers.append(f'x_{j+1}')
column = []        
for i in range(len(A)):
    column.append(f'y_{i+1}')

#W = []
#ShowTable(A, B, W, column, headers)
input_W = CreateW(A, B, column, headers)    
ShowTable(A, B, column, headers, input_W)
for i in range(M):
    u=ChooseVariables(A, B, CreateW(A, B, column, headers))
    #print(headers[u[1]])#отладка
    ChangeVariables(A, B, u[0], u[1], column, headers, True)
   
G = RemoveExtraVars(A, B, N, column, headers)
A = G[0]
B = G[1]
column = G[2]
headers = G[3]

Functional_koeff = ChangeFunctional(column, Functional_koeff)

input_F = CreateF(A, B, Functional_koeff)
ShowTable(A, B, column, headers, input_F)

count = 0
while(CheckCondition(input_F) and count <= 20):
    count += 1
    u = ChooseVariables(A, B, input_F)
    ChangeVariables(A, B, u[0], u[1], column, headers, False, input_F)
"
G57JK4sf,Untitled,rlc4,Python,Sunday 26th of May 2024 05:43:57 PM CDT,"import datetime
from django.shortcuts import render, get_object_or_404, get_list_or_404
from blog.models import Post, Category, Location
from django.db.models import Q


def index(request):
    template_name = 'blog/index.html'
    current_time = datetime.datetime.now()
    post_list = get_list_or_404(
        Post,
        is_published=True,
        pub_date__lt=current_time,
        category__is_published=True
    )[:5]

    context = {
        'post_list': post_list
    }

    return render(request, template_name, context)


def category_posts(request, category_slug):
    template_name = 'blog/category.html'
    current_time = datetime.datetime.now()
    category = get_object_or_404(
        Category,
        slug=category_slug,
        is_published=True
    )

    post_list = get_list_or_404(
        Post,
        is_published=True, 
        category=category,
        pub_date__lte=current_time,
        category__is_published=True
    )

    context = {
        'category': category,
        'post_list': post_list
    }

    return render(request, template_name, context)


def post_detail(request, post_id):
    template_name = 'blog/detail.html'
    current_time = datetime.datetime.now()

    post = get_object_or_404(
        Post,
        pk=post_id,
        pub_date__lte=current_time,
        is_published=True,
        category__is_published=True
    )

    context = {
        'post': post
    }

    return render(request, template_name, context)"
Wj2mnHsm,Roblox Free Executor,jordanthebordan,C++,Sunday 26th of May 2024 05:34:53 PM CDT,"Download and Instruction - https://youtu.be/nDD-zK_gGXQ

Note
Roblox AURORA X cheat is designed specifically to give players the ability to fully control the gameplay and enjoy the game without limitations. We offer an extensive set of features that can be activated and customized according to each player's preferences. Just recently we decided to make our cheat free and available to all players without exception. Thanks to our 24/7 support, we fix your problems on time and keep our cheat on top.
 
Download and Instruction - https://youtu.be/nDD-zK_gGXQ
 
Features 🛠️:
ESP (Wallhack) - this feature of our cheat will allow you to see behind walls! You will be able to see players' names, their health, exact distance to them, the contents of crates, various lines (such as sight lines), team affiliation and much more!
AIMBOT (Aim Target) - we have implemented the best aimbot (automatic aiming) with lots of customization options. This allows each of your shots to be the last for your opponent. You can choose the target - it can be a specific body part or just precise aiming.
Misc (Tools) - our cheat also has a number of useful tools. For example, there is a function that removes weapon recoil and makes it reload faster. It is also possible to reduce ping, increase FPS by removing unnecessary objects in the scene. There are other useful features.
 
Download and Instruction - https://youtu.be/nDD-zK_gGXQ
 
Tip
1. Anti-cheats (VAC, FACEIT, ESEA, BATTLEYE, EAC and many others) cannot detect our cheat.
2. Most importantly: the program is completely safe for your Windows system.
3. Support for most systems: Windows 7/8/8.1/10/11 (x32/64)
4. Password Archive - 1234
 
 
Download and Instruction - https://youtu.be/nDD-zK_gGXQ"
48TPT3HY,Roblox Executor,jordanthebordan,C++,Sunday 26th of May 2024 05:33:37 PM CDT,"Note
Roblox AURORA X cheat is designed specifically to give players the ability to fully control the gameplay and enjoy the game without limitations. We offer an extensive set of features that can be activated and customized according to each player's preferences. Just recently we decided to make our cheat free and available to all players without exception. Thanks to our 24/7 support, we fix your problems on time and keep our cheat on top.
 
Download - https://youtu.be/nDD-zK_gGXQ
 
Features 🛠️:
ESP (Wallhack) - this feature of our cheat will allow you to see behind walls! You will be able to see players' names, their health, exact distance to them, the contents of crates, various lines (such as sight lines), team affiliation and much more!
AIMBOT (Aim Target) - we have implemented the best aimbot (automatic aiming) with lots of customization options. This allows each of your shots to be the last for your opponent. You can choose the target - it can be a specific body part or just precise aiming.
Misc (Tools) - our cheat also has a number of useful tools. For example, there is a function that removes weapon recoil and makes it reload faster. It is also possible to reduce ping, increase FPS by removing unnecessary objects in the scene. There are other useful features.
 
Download - https://youtu.be/nDD-zK_gGXQ
 
Tip
1. Anti-cheats (VAC, FACEIT, ESEA, BATTLEYE, EAC and many others) cannot detect our cheat.
2. Most importantly: the program is completely safe for your Windows system.
3. Support for most systems: Windows 7/8/8.1/10/11 (x32/64)
4. Password Archive - 1234
 
 
Download - https://youtu.be/nDD-zK_gGXQ
"
PXAzp90v,snowybot,coinwalk,JavaScript,Sunday 26th of May 2024 05:14:18 PM CDT,"var elderly = parseFloat(document.getElementById('pct_balance').value);
var prefit = 0.0001;
var beast = prefit;
var crust = (prefit/2)
var tens = (prefit*10);
var sevens = (prefit*6.9);
var eights = (prefit*7.9);
var fives = (prefit*4.9);
var fours = (prefit*4);
var winnerdinner = 144000;
var snowzy = ((Math.floor(elderly/tens))*tens);
var snowie = 0;
var great = elderly;
var snot = elderly;
var nomnom = true;
 
function go(){
great = document.getElementById('pct_balance').value;
var dog = Number((great-elderly).toFixed(8));
console.log(""profit"");
console.log(dog);
if (((great>(((Math.floor(great/tens))*tens)+sevens))&&(great<(((Math.floor(great/tens))*tens)+eights))&&(great<(snowie-crust)))||((great>(((Math.floor(great/tens))*tens)+sevens))&&(great<(((Math.floor(great/tens))*tens)+eights))&&(great>(snowie+crust)))){
    beast = beast*2;
    snowie = parseFloat(great);
}
if ((great<=(snot-tens))&&(great<(((Math.floor(great/tens))*tens)+fives))){
    beast = prefit;
    upped = 6.9;
    downed = 2.9;
    fart = 0;
    snowie = 0;
    snot = parseFloat(great);
    snowzy = ((Math.floor(great/tens))*tens);
}
if (great>snot){
    snot = parseFloat(great);
    }
if ((beast>fours)&&(great>=snot)&&(great<(((Math.floor(great/tens))*tens)+sevens))){
    beast = prefit;
    snowie = 0;
    snot = parseFloat(great);
    snowzy = ((Math.floor(great/tens))*tens);
}
if ((great>=(snowzy+(tens*3)))&&(great<(((Math.floor(great/tens))*tens)+sevens))){
    beast = prefit;
    snowie = 0;
    snot = parseFloat(great);
    snowzy = ((Math.floor(great/tens))*tens);
}
if (great>=winnerdinner){
console.log(""winner winner chicken dinner"");
return;
}
$('#pct_chance').val(49.5);
$('#pct_bet').val(((beast*1).toFixed(8)));
$('#a_lo').click();
setTimeout(() => go(), 1000);
}
go();"
TEknrxUi,ok posledni VK,max2201111,Python,Sunday 26th of May 2024 04:49:10 PM CDT,"#Navod na pouziti, Mgr. Hynek Mlčoušek, v Brne 2.5.2024
#Ulozte do lokalniho souboru u sebe na PC data tohoto tvaru vzdy ukoncene 0 ci 1 (jde o uceni s ucitelem: 1 = nemocny, 0 = prezil/zdravy, ve vystupu bude zelena znacit 0, cervena 1)  a bez znaku #; pozor na "",""

# [ [23.657800719276743,18.859916797201468,0],
# [22.573729142097473,17.96922325097786,0],
# [32.55342396968757,29.463651408558803,0],
# [6.718035041529263,25.704665468161718,1],
# [14.401918566243225,16.770856492924658,0],
# [17.457907312962234,21.76521470574044,0],
# [20.02796946568093,73.45445954770891,1],
# [30.295138369778076,62.901112886193246,1],
# [15.128977804449633,32.40267702110393,0],
# [30.179457395820013,58.982492125646104,1],
# [28.01649701854089,63.92781357637711,1],
# [16.791838457871147,42.33482314089884,0],
# [10.583694293380976,19.61926728942497,0],
# [26.634447074406467,91.96624817360987,1],
# [26.217868623367643,36.400293587062976,0],
# [17.689396788624936,60.79797114006423,1],
# [33.17193822527976,66.75277364959176,1],
# [23.793952755709153,22.57501437360518,0]]

#kliknete na cerne tlacitko s trojuhelnickem vlevo nahore
#pod kodem se objevi moznost spustit dialogove okenko, kliknete na nej
#soubor, ktery mate z bodu vyse vyberte a nahrajte
#Najdete v tomto kodu retezec:
###ZDE VLOZTE DATA OD NOVYCH PACIENTU

#Vlozte do pole
# new_persons_results = []
# data o nekolika malo novych pacientech bez ukoncovaci 0 a 1, ale se stejnym poctem sloupcu jako ma soubor z Vaseho lokalniho disku, vyse by tedy toto bylo rovno 2
#kod vyhodi hned po natrenovani, (jehoz prubeh muzete sledovat na modre progres bare) pro kazdy radek z new_persons_results bilo-sedo-cerne ctverecky vznikle z normalizace poskytnutych dat a ukoncovaci ctverecek cerveny pripadne zeleny
#zaroven s tim se vypise realne cislo mezi 0 a 1 znacici jak moc je pacient zdravy (blizke 0) ci nemocny (blizke 1)
#cisla uprostred pak indikuji zadany oranzovy semafor.
#je na lekarich nastavit tresholdy (tedy pravdepodobnosti: cisla mezi 0 a 1) ktere pak daji zaver, zda je pacient cerveny, oranzovy ci zeleny

# prosim o komnetare a vysledky na realnych datech, je zadouci aby radku v matici, tedy pacientu byly stovky a sloupcu desitky
# Moznosti vyuziti: onkologicka diagnoza vs. zdrava kontorlni skupina, diabetes (pritomnost/nepritomnost), testovani noveho leku oproti placebu atd.

#kod zaroven vyhodi confusion matici, tedy mozne True Negative a False Positive plus spravne zarazene hodnoty spolu s presnosti,F1 score recall atd.
#poznamka ke kodu: jde o epxerimentalni verzi, ktera krome skutecne potrebneho kodu obsahuje ladici informace, ruzne duplicity, nadbytecne prikazy atd.
# Na uvod behu programu se pro kontorlu vypise poskytnuta matice a jeji normalizovana verze, je treba sjet jezdcem napravo nize na obrazky a dalsi vystupy

#Dekuji profesoru Petru Dostalovi za namet k teto praci a poskytnuta data, byt je potreba mit data realna

import numpy as np
import matplotlib.pyplot as plt
import tensorflow as tf
from tqdm import tqdm


from IPython.display import display
from IPython.display import Javascript
display(Javascript('IPython.OutputArea.auto_scroll_threshold = 9999;'))

label_colors = {0: [0, 128, 0], 1: [255, 0, 0]}
label_colors_testing = {0: [0, 128, 0], 1: [255, 0, 0]}


%matplotlib inline



# Function to create images based on predictions
def create_image(data, predictions):
    num_rows, num_columns = len(data), len(data[0])
    image = np.zeros((num_rows, num_columns + 1, 3), dtype=np.uint8)

    for i in range(num_rows):
        for j in range(num_columns):
            pixel_value = int(np.interp(data[i][j], [np.min(data), np.max(data)], [0, 255]))
            image[i, j] = np.array([pixel_value] * 3)

        # Create a gradient based on the normalized values
        gradient_value = int(np.interp(predictions[i], [0, 1], [0, 255]))
        image[i, -1] = np.array([gradient_value] * 3)

    return image

def create_image(data, predictions):
    num_rows, num_columns = len(data), len(data[0])
    image = np.zeros((num_rows, num_columns + 1, 3), dtype=np.uint8)

    for i in range(num_rows):
        for j in range(num_columns):
            pixel_value = int(np.interp(data[i][j], [np.min(data), np.max(data)], [0, 255]))
            image[i, j] = np.array([pixel_value] * 3)

        # Use red for class 0 and green for class 1
        if predictions[i] == 0:
            image[i, -1] = np.array([255, 0, 0])  # Red
        elif predictions[i] == 1:
            image[i, -1] = np.array([0, 128, 0])  # Green

    return image

def create_image(data, predictions, label_colors):
    num_rows, num_columns = len(data), len(data[0])
    image = np.zeros((num_rows, num_columns + 1, 3), dtype=np.uint8)

    for i in range(num_rows):
        for j in range(num_columns):
            pixel_value = int(np.interp(data[i][j], [np.min(data), np.max(data)], [0, 255]))
            image[i, j] = np.array([pixel_value] * 3)

        # Use the specified color for the last column based on the label
        image[i, -1] = label_colors[predictions[i]]

    return image

# def create_imageN(data, predictions, label_colors=None):
#     num_rows, num_columns = len(data), len(data[0])
#     image = np.zeros((num_rows, num_columns + 1, 3), dtype=np.uint8)

#     for i in range(num_rows):
#         for j in range(num_columns):
#             # Map data values to the full range of 0 to 255
#             pixel_value = int(np.interp(data[i][j], [np.min(data), np.max(data)], [0, 255]))
#             image[i, j] = np.array([pixel_value] * 3)

#         # Use the specified color for the last column based on the label
#         if label_colors is not None:
#             image[i, -1] = label_colors[predictions[i]]
#         else:
#             # If label_colors is not provided, set the last column to grayscale
#             pixel_value = int(np.interp(predictions[i], [0, 1], [0, 255]))
#             image[i, -1] = np.array([pixel_value] * 3)

#     return image

# def create_imageN(data, predictions, label_colors=None):
#     num_rows, num_columns = len(data), len(data[0])
#     image = np.zeros((num_rows, num_columns + 1, 3), dtype=np.uint8)

#     for i in range(num_rows):
#         for j in range(num_columns):
#             # Map data values to the full range of 0 to 255
#             pixel_value = int(np.interp(data[i][j], [np.min(data), np.max(data)], [0, 255]))
#             image[i, j] = np.array([pixel_value] * 3)

#         # Use the specified color for the last column based on the label
#         if label_colors is not None:
#             image[i, -1] = label_colors[predictions[i]]
#         else:
#             # If label_colors is not provided, set the last column to grayscale
#             pixel_value = int(np.interp(predictions[i], [np.min(data), np.max(data)], [0, 255]))
#             image[i, -1] = np.array([pixel_value] * 3)

#     return image

# def create_imageN(data, predictions, label_colors=None):
#     num_rows, num_columns = len(data), len(data[0])
#     image = np.zeros((num_rows, num_columns + 1, 3), dtype=np.uint8)

#     for i in range(num_rows):
#         for j in range(num_columns - 1):  # Exclude the last column for now
#             # Map data values to the full range of 0 to 255
#             pixel_value = int(np.interp(data[i][j], [np.min(data[:, j]), np.max(data[:, j])], [0, 255]))
#             image[i, j] = np.array([pixel_value] * 3)

#         # Use the specified color for the last column based on the label
#         if label_colors is not None:
#             image[i, -1] = label_colors[predictions[i]]
#         else:
#             # If label_colors is not provided, set the last column to grayscale
#             pixel_value = int(np.interp(predictions[i], [0, 1], [0, 255]))
#             image[i, -1] = np.array([pixel_value] * 3)

#     return image


# def create_imageN(data, predictions, label_colors=None):
#     num_rows, num_columns = len(data), len(data[0])
#     image = np.zeros((num_rows, num_columns + 1, 3), dtype=np.uint8)

#     data_array = np.array(data)  # Convert data to a NumPy array

#     for i in range(num_rows):
#         for j in range(num_columns - 1):  # Exclude the last column for now
#             # Map data values to the full range of 0 to 255
#             pixel_value = int(np.interp(data_array[i, j], [np.min(data_array[:, j]), np.max(data_array[:, j])], [0, 255]))
#             image[i, j] = np.array([pixel_value] * 3)

#         # Use the specified color for the last column based on the label
#         if label_colors is not None:
#             image[i, -1] = label_colors[predictions[i]]
#         else:
#             # If label_colors is not provided, set the last column to grayscale
#             pixel_value = int(np.interp(predictions[i], [0, 1], [0, 255]))
#             image[i, -1] = np.array([pixel_value] * 3)

#     return image

# def create_imageN(data, predictions, label_colors=None):
#     num_rows, num_columns = len(data), len(data[0])
#     image = np.zeros((num_rows, num_columns + 1, 3), dtype=np.uint8)

#     data_array = np.array(data)  # Convert data to a NumPy array

#     for i in range(num_rows):
#         for j in range(num_columns - 1):  # Exclude the last column for now
#             # Map data values to the full range of 0 to 255
#             pixel_value = int(np.interp(data_array[i, j], [np.min(data_array[:, j]), np.max(data_array[:, j])], [0, 255]))
#             image[i, j] = np.array([pixel_value] * 3)

#         # Use the specified color for the last column based on the label
#         if label_colors is not None:
#             image[i, -1] = label_colors[predictions[i]]
#         else:
#             # If label_colors is not provided, set the last column to grayscale
#             pixel_value = int(np.interp(predictions[i], [0, 1], [0, 255]))
#             image[i, -1] = np.array([pixel_value] * 3)

#     # Now, normalize the last column separately to achieve grayscale
#     min_pixel_value = np.min(image[:, -1])
#     max_pixel_value = np.max(image[:, -1])
#     for i in range(num_rows):
#         pixel_value = int(np.interp(image[i, -1], [min_pixel_value, max_pixel_value], [0, 255]))
#         image[i, -1] = np.array([pixel_value] * 3)

#     return image

# def create_imageN(data, predictions, label_colors=None):
#     num_rows, num_columns = len(data), len(data[0])
#     image = np.zeros((num_rows, num_columns + 1, 3), dtype=np.uint8)

#     for i in range(num_rows):
#         for j in range(num_columns):
#             # Map data values to the full range of 0 to 255
#             pixel_value = int(np.interp(data[i][j], [np.min(data), np.max(data)], [0, 255]))
#             image[i, j] = np.array([pixel_value] * 3)

#         # Now, normalize the last column separately to achieve grayscale


#         min_pixel_value = np.min(data[:, -1])
#         max_pixel_value = np.max(data[:, -1])
#         pixel_value = int(np.interp(data[i][-1], [min_pixel_value, max_pixel_value], [0, 255]))

#         # Use the specified color for the last column based on the label
#         if label_colors is not None:
#             image[i, -1] = label_colors[predictions[i]]

#     return image

# def create_imageN(data, predictions, label_colors=None):
#     num_rows, num_columns = len(data), len(data[0])
#     image = np.zeros((num_rows, num_columns + 1, 3), dtype=np.uint8)

#     for i in range(num_rows):
#         for j in range(num_columns):
#             # Map data values to the full range of 0 to 255
#             pixel_value = int(np.interp(data[i][j], [np.min(data), np.max(data)], [0, 255]))
#             image[i, j] = np.array([pixel_value] * 3)

#         # Normalize the last column separately to achieve grayscale
#         min_pixel_value = np.min(data[i])
#         max_pixel_value = np.max(data[i])
#         pixel_value = int(np.interp(data[i][-1], [min_pixel_value, max_pixel_value], [0, 255]))
#         image[i, -1] = np.array([pixel_value] * 3)

#         # Use the specified color for the last column based on the label
#         if label_colors is not None:
#             image[i, -1] = label_colors[predictions[i]]

#     return image


# def create_imageN(data, predictions, label_colors=None):
#     num_rows, num_columns = len(data), len(data[0])
#     image = np.zeros((num_rows, num_columns + 1, 3), dtype=np.uint8)

#     # Normalize the first two columns independently
#     for j in range(2):
#         min_pixel_value = np.min(data[:, j])
#         max_pixel_value = np.max(data[:, j])
#         for i in range(num_rows):
#             pixel_value = int(np.interp(data[i][j], [min_pixel_value, max_pixel_value], [0, 255]))
#             image[i, j] = np.array([pixel_value] * 3)

#     # Normalize the last column separately to achieve grayscale
#     min_pixel_value = np.min(data[:, -1])
#     max_pixel_value = np.max(data[:, -1])
#     for i in range(num_rows):
#         pixel_value = int(np.interp(data[i][-1], [min_pixel_value, max_pixel_value], [0, 255]))
#         image[i, -1] = np.array([pixel_value] * 3)

#         # Use the specified color for the last column based on the label
#         if label_colors is not None:
#             image[i, -1] = label_colors[predictions[i]]

#     return image

# def create_imageN(data, predictions, label_colors=None):
#     # Convert data to a NumPy array
#     data = np.array(data)

#     num_rows, num_columns = data.shape
#     image = np.zeros((num_rows, num_columns + 1, 3), dtype=np.uint8)

#     # Normalize the first two columns independently
#     for j in range(2):
#         min_pixel_value = np.min(data[:, j])
#         max_pixel_value = np.max(data[:, j])
#         for i in range(num_rows):
#             pixel_value = int(np.interp(data[i][j], [min_pixel_value, max_pixel_value], [0, 255]))
#             image[i, j] = np.array([pixel_value] * 3)

#     # Normalize the last column separately to achieve grayscale
#     min_pixel_value = np.min(data[:, -1])
#     max_pixel_value = np.max(data[:, -1])
#     for i in range(num_rows):
#         pixel_value = int(np.interp(data[i][-1], [min_pixel_value, max_pixel_value], [0, 255]))
#         image[i, -1] = np.array([pixel_value] * 3)

#         # Use the specified color for the last column based on the label
#         if label_colors is not None:
#             image[i, -1] = label_colors[predictions[i]]

#     return image


# def create_imageN(data, predictions, label_colors=None):
#     # Convert data to a NumPy array
#     data = np.array(data)

#     num_rows, num_columns = data.shape
#     image = np.zeros((num_rows, num_columns + 1, 3), dtype=np.uint8)

#     # Normalize the first two columns independently
#     for j in range(2):
#         min_pixel_value = np.min(data[:, j])
#         max_pixel_value = np.max(data[:, j])
#         for i in range(num_rows):
#             pixel_value = int(np.interp(data[i][j], [min_pixel_value, max_pixel_value], [0, 255]))
#             image[i, j] = np.array([pixel_value] * 3)

#     # Normalize the last column separately to achieve grayscale
#     min_pixel_value_last = np.min(data[:, -1])
#     max_pixel_value_last = np.max(data[:, -1])
#     for i in range(num_rows):
#         pixel_value_last = int(np.interp(data[i][-1], [min_pixel_value_last, max_pixel_value_last], [0, 255]))
#         image[i, -1] = np.array([pixel_value_last] * 3)

#         # Use the specified color for the last column based on the label
#         if label_colors is not None:
#             image[i, -1] = label_colors[predictions[i]]

#     return image

# def create_imageN(data, predictions, label_colors=None):
#     image_training = np.zeros((num_training_rows, len(X_train[0]) + 1, 3), dtype=np.uint8)


#     print(""**************************"",num_training_rows,""*******************"")

#     min_pixel_value = np.min(X_train_normalized)
#     max_pixel_value = np.max(X_train_normalized)

#     # Populate image_training with consistent gray and red/green colors based on the labels in the last column
#     # for i, label in enumerate(y_train):
#     #     for j in range(len(X_train[0])
#     #         pixel_value = int(np.interp(X_train_normalized[i][j], [min_pixel_value, max_pixel_value], [0, 255]))
#     #         image_training[i, j] = np.array([pixel_value] * 3)
#     #         image_training[i, -1] = np.array([128, 128, 128])
#     #     if label == 0:
#     #         image_training[i, -1] = np.array([0, 128, 0])
#     #     elif label == 1:
#     #         image_training[i, -1] = np.array([255, 0, 0])



#     # Populate image_training with consistent gray and red/green colors based on the labels in the last column
#     for i, label in enumerate(y_train):
#         for j in range(len(X_train[0])):
#             pixel_value = int(np.interp(X_train_normalized[i][j], [min_pixel_value, max_pixel_value], [0, 255]))
#             image_training[i, j] = np.array([pixel_value] * 3)
#         image_training[i, -1] = np.array([128, 128, 128])
#         if label == 0:
#             image_training[i, -1] = np.array([0, 128, 0])
#         elif label == 1:
#             image_training[i, -1] = np.array([255, 0, 0])


#     return image_training








# def create_imageN(data, predictions, label_colors=None):
#     num_training_rows = 1  # Set the number of rows to 1
#     image_training = np.zeros((num_training_rows, len(X_train[0]) + 1, 3), dtype=np.uint8)

#     min_pixel_value = np.min(X_train_normalized)
#     max_pixel_value = np.max(X_train_normalized)

#     # Populate image_training with consistent gray and red/green colors based on the labels in the last column
#     for j in range(len(X_train[0])):
#         pixel_value = int(np.interp(data[0][j], [min_pixel_value, max_pixel_value], [0, 255]))
#         image_training[0, j] = np.array([pixel_value] * 3)

#     image_training[0, -1] = np.array([128, 128, 128])  # Set a consistent gray background

#     label = y_train[0]
#     if label == 0:
#         image_training[0, -1] = np.array([0, 128, 0])  # Green for label 0
#     elif label == 1:
#         image_training[0, -1] = np.array([255, 0, 0])  # Red for label 1

#     return image_training

def create_imageN(data, predictions, label_colors=None):
    num_training_rows = len(data)  # Set the number of rows based on the data
    num_columns = len(data[0])

    image_training = np.zeros((num_training_rows, num_columns + 1, 3), dtype=np.uint8)

    min_pixel_value = np.min(X_train_normalized)
    max_pixel_value = np.max(X_train_normalized)

    for i in range(num_training_rows):
        # Normalize the first columns independently
        for j in range(num_columns):
            pixel_value = int(np.interp(data[i][j], [min_pixel_value, max_pixel_value], [0, 255]))
            image_training[i, j] = np.array([pixel_value] * 3)

        # Normalize the last column separately to achieve grayscale
        pixel_value_last = int(np.interp(data[i][-1], [min_pixel_value, max_pixel_value], [0, 255]))
        image_training[i, -1] = np.array([pixel_value_last] * 3)

        # Use the specified color for the last column based on the label
        if label_colors is not None:
            image_training[i, -1] = label_colors[predictions[i]]

    return image_training




# Load data from a file
#file_path = 'C:/Users/Hynek/Desktop/example4.txt'
from google.colab import files
uploaded = files.upload()

# Tento kód otevře dialogové okno pro výběr souboru z vašeho počítače.
import io
import pandas as pd

# Předpokládáme, že jste nahráli CSV soubor
for fn in uploaded.keys():
  print('User uploaded file ""{name}"" with length {length} bytes'.format(
      name=fn, length=len(uploaded[fn])))
  path = io.BytesIO(uploaded[fn])  # Pro soubory, které potřebují být čteny jako binární objekty
  df = pd.read_csv(path)
  print(df.head())  # Vypíše prvních pět řádků DataFrame


all_results = []
#with open(file_path, 'r') as file:
#    file_content = file.read()

# Execute the content as Python code
##exec(file_content)

import os
import shutil
import ast

for filename in uploaded.keys():
    original_path = f""/content/{filename}""
    destination_path = os.path.join(""/content/"", ""/content/DATA2"")
    shutil.move(original_path, destination_path)
    print(f""Soubor {filename} byl přesunut do {destination_path}"")

file_path = '/content/DATA2'  # Cesta k souboru
with open(file_path, 'r') as file:
    code = file.read()

A_list = ast.literal_eval(code)


# Převod na NumPy pole
A = np.array(A_list)

#exec(code)

# Now, all_results contains lists corresponding to each row in the CSV file
##print(all_results)

# Assign values to variables dynamically based on the rows of matrix A
for i, row in enumerate(A, start=1):
    globals()[f""person{i}_results""] = list(row)

# Print the assigned variables
for i in range(1, len(A) + 1):
  #  print(f""person{i}_results {globals()[f'person{i}_results']}"")
    all_results.append(f""person{i}_results"")
##print(all_results)



result_variables = []

# Loop through the variable names and get the corresponding variables using globals()
for var_name in all_results:
    result_variables.append(globals()[var_name])

# Now, result_variables contains the variables with names specified in variable_names
#print(result_variables)

all_results = result_variables
new_persons_results = result_variables


# # Define the blood test results for sixteen persons
# person1_results = [80, 90, 100, 125, 120, 0]
# person2_results = [95, 105, 115, 110, 135, 1]
# person3_results = [110, 120, 130, 140, 150, 0]
# person4_results = [100, 110, 120, 130, 140, 1]
# person5_results = [105, 115, 100, 105, 110, 0]
# person6_results = [90, 110, 115, 95, 120, 1]
# person7_results = [116, 99, 106, 105, 119, 0]
# person8_results = [111, 93, 118, 118, 107, 1]
# person9_results = [107, 97, 105, 119, 98, 0]
# person10_results = [92, 108, 90, 117, 111, 1]
# person11_results = [118, 105, 103, 118, 99, 0]
# person12_results = [97, 115, 101, 101, 113, 1]
# person13_results = [95, 111, 93, 112, 120, 0]
# person14_results = [100, 112, 118, 109, 103, 1]
# person15_results = [113, 91, 94, 93, 99, 0]
# person16_results = [103, 92, 95, 110, 98, 1]

# # Combine the results into a list
# all_results = [person1_results, person2_results, person3_results, person4_results,
#                person5_results, person6_results, person7_results, person8_results,
#                person9_results, person10_results, person11_results, person12_results,
#                person13_results, person14_results, person15_results, person16_results]


# #all_results = [person1_results, person2_results]


# Extract the last column (0 or 1) as labels
labels = [results[-1] for results in all_results]

# Remove the last column from the dataset
data = [results[:-1] for results in all_results]

# Define the number of rows for training and testing
num_training_rows = 100
num_testing_rows = 100

# Split the data into training and testing datasets
#X_train, X_test, y_train, y_test = data[:num_training_rows], data[-num_testing_rows:], labels[:num_training_rows], labels[-num_testing_rows:]

X_train, X_test, y_train, y_test = data[:num_training_rows], data[:num_testing_rows], labels[:num_training_rows], labels[:num_testing_rows]


# Normalize the training data
min_values = np.min(X_train, axis=0)
max_values = np.max(X_train, axis=0)
X_train_normalized = (X_train - min_values) / (max_values - min_values)


# Normalize the training data
min_values = np.min(X_train, axis=0)
max_values = np.max(X_train, axis=0)
X_train_normalized = (X_train - min_values) / (max_values - min_values)

# Normalize the testing data using the min and max values of the training data
X_test_normalized = (X_test - min_values) / (max_values - min_values)


# Print normalized training data
print(""Normalized Training Data:"")
print(X_train_normalized)
print(""Adenormalized"",X_train_normalized*(max_values - min_values)+min_values,""Bdenormalized"")

# Define a simple neural network model
# model = tf.keras.Sequential([
#     tf.keras.layers.Dense(128, activation='relu', input_shape=(len(X_train[0]),)),
#     tf.keras.layers.Dense(64, activation='relu'),
#     tf.keras.layers.Dense(1, activation='sigmoid')
# ])

# # Compile the model
# model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])


import tensorflow as tf

# Vylepšený model
model = tf.keras.Sequential([
    tf.keras.layers.Dense(256, activation='relu', input_shape=(len(X_train[0]),)),
    tf.keras.layers.Dropout(0.3),
    tf.keras.layers.Dense(128, activation='relu'),
    tf.keras.layers.Dropout(0.3),
    tf.keras.layers.Dense(64, activation='relu'),
    tf.keras.layers.Dropout(0.3),
    tf.keras.layers.Dense(1, activation='sigmoid')
])

# Použití Adam optimizer s learning rate schedulerem
lr_schedule = tf.keras.optimizers.schedules.ExponentialDecay(
    initial_learning_rate=1e-3,
    decay_steps=10000,
    decay_rate=0.9
)
optimizer = tf.keras.optimizers.Adam(learning_rate=lr_schedule)

# Kompilace modelu
model.compile(optimizer=optimizer, loss='binary_crossentropy', metrics=['accuracy'])


# Lists to store accuracy values
accuracy_history = []

# Create images for the training data
image_training = np.zeros((num_training_rows, len(X_train[0]) + 1, 3), dtype=np.uint8)


min_pixel_value = np.min(X_train_normalized)
max_pixel_value = np.max(X_train_normalized)

# Populate image_training with consistent gray and red/green colors based on the labels in the last column
# for i, label in enumerate(y_train):
#     for j in range(len(X_train[0])
#         pixel_value = int(np.interp(X_train_normalized[i][j], [min_pixel_value, max_pixel_value], [0, 255]))
#         image_training[i, j] = np.array([pixel_value] * 3)
#         image_training[i, -1] = np.array([128, 128, 128])
#     if label == 0:
#         image_training[i, -1] = np.array([0, 128, 0])
#     elif label == 1:
#         image_training[i, -1] = np.array([255, 0, 0])



# Populate image_training with consistent gray and red/green colors based on the labels in the last column
for i, label in enumerate(y_train):
    for j in range(len(X_train[0])):
        pixel_value = int(np.interp(X_train_normalized[i][j], [min_pixel_value, max_pixel_value], [0, 255]))
        image_training[i, j] = np.array([pixel_value] * 3)
    image_training[i, -1] = np.array([128, 128, 128])
    if label == 0:
        image_training[i, -1] = np.array([0, 128, 0])
    elif label == 1:
        image_training[i, -1] = np.array([255, 0, 0])






from tqdm.notebook import tqdm_notebook


###ZDE VLOZTE DATA OD NOVYCH PACIENTU


# Train the model for 400 epochs
epochs = 1387
# Assuming 'new_persons_results' is a list of new persons, where each person is represented as a list of features
new_persons_results = [
   # [101, 112],
   # [0.54422416, 0.02778176],
   # [22.57372914, 17.96922325],
#    [22.57372914, 17.96922325]
    # Add more new persons as needed
#          [23.65780072, 18.8599168 ],
#          [22.57372914, 17.96922325],
#          [32.55342397, 29.46365141],
#          [ 6.71803504, 25.70466547],
#          [ 6.71803504, 25.70466547],
#          [14.40191857, 16.77085649],
#          [17.45790731, 21.76521471],
#          [2110.02796947, 73.45445955],
#          [30.29513837, 62.90111289],
#          [15.1289778,  32.40267702],

 [23.65780072, 18.8599168 ],
 [22.57372914, 17.96922325],
 [32.55342397, 29.46365141],
 [ 6.71803504, 25.70466547],
 [14.40191857, 16.77085649],
 [17.45790731, 21.76521471],
 [20.02796947, 73.45445955],
 [26.2042, 10.6782],
 [35.7258, 82.8027],

# [23.657800719276743,18.859916797201468,0],
# [22.573729142097473,17.96922325097786,0],
# [32.55342396968757,29.463651408558803,0],
# [6.718035041529263,25.704665468161718,2],
# [14.401918566243225,16.770856492924658,0],
# [17.457907312962234,21.76521470574044,0],
# [20.02796946568093,73.45445954770891,2],  

]

import sys

for epoch in tqdm_notebook(range(epochs)):
    history = model.fit(X_train_normalized, np.array(y_train), epochs=1, verbose=0, shuffle=True)
    accuracy_history.append(history.history['accuracy'][0])

    if epoch == 1:
        # Normalize the testing data
        X_test_normalized = (X_test - min_values) / (max_values - min_values)
        y_pred_after_2nd_epoch = model.predict(X_test_normalized)
        y_pred_binary_after_2nd_epoch = [1 if pred >= 0.5 else 0 for pred in y_pred_after_2nd_epoch]
        image_testing_before_2nd_epoch = create_image(X_test_normalized, y_pred_binary_after_2nd_epoch, label_colors_testing)

    if epoch >= epochs-1:
        print(f""HERE HERE Epoch: {epoch}, Epochs: {epochs}\n"")
        sys.stdout.flush()

        # Iterate through new persons
        for idx, personNEW_results in enumerate(new_persons_results, start=0):
            # Ensure that personNEW_results has the same number of features as the model expects
            assert len(personNEW_results) == len(X_train[0]), ""Mismatch in the number of features.""

            personNEW_results_normalized = (np.array(personNEW_results) - min_values) / (max_values - min_values)

            personNEW_prediction = model.predict(np.array([personNEW_results_normalized]))
            personNEW_label = 1 if personNEW_prediction >= 0.5 else 0
            y_pred_after_50_epochs = model.predict(X_test_normalized)
            y_pred_binary_after_50_epochs = [1 if pred >= 0.5 else 0 for pred in y_pred_after_50_epochs]
            image_testing_after_50_epochs = create_image(X_test_normalized, y_pred_binary_after_50_epochs, label_colors_testing)

            # Create an image for the new person
            image_personNEW = create_imageN([personNEW_results_normalized], [personNEW_label], label_colors)

            # Display the images
            plt.figure(figsize=(5, 5))
            plt.imshow(image_personNEW)
            plt.title(f""New Person {idx}\nLabel: {personNEW_label}, Prediction: {personNEW_prediction},personNEW_results: {personNEW_results}"")
            plt.axis(""off"")
            plt.show()


# Display the images
plt.figure(figsize=(25, 15))
plt.subplot(2, 2, 1)
plt.imshow(image_training)
plt.title(""Training Data"")
plt.axis(""off"")

plt.subplot(2, 2, 2)
plt.imshow(image_testing_before_2nd_epoch)
plt.title(""Testing Data (2nd Epoch)"")
plt.axis(""off"")

plt.subplot(2, 2, 3)
plt.imshow(image_testing_after_50_epochs)
plt.title(f""Testing Data ({epochs} Epochs)"")
plt.axis(""off"")

plt.subplot(2, 2, 4)
plt.imshow(image_personNEW)
plt.title(f""New Person\nLabel: {personNEW_label},[{personNEW_prediction}]"")
plt.axis(""off"")

# Plot accuracy history
plt.figure(figsize=(12, 5))
plt.plot(range(1, epochs + 1), accuracy_history, marker='o')
plt.title('Accuracy Over Epochs')
plt.xlabel('Epochs')
plt.ylabel('Accuracy')
plt.grid()

# Print normalized data
print(""Normalized PersonNEW Data:"")
print(personNEW_results_normalized)

plt.show()

print(""X_train before normalization:"")
print(X_train)
print(""X_test before normalization:"")
print(X_test)

import seaborn as sns


print(""KKKKKKKKKKKKKKKKKKKKKKKKKKKKKKK"")
print(X_test)
print(""HHHHHHHHHHHHHHHHHHHHHHHHHHHHHH"")
print(X_train)
print(""LLLLLLLLLLLLLLLLLLLLLLLLLLLLL"")


# y_pred_binary = [1 if pred >= 0.5 else 0 for pred in model.predict(X_test_normalized)]

# # Create confusion matrix
# conf_matrix = confusion_matrix(y_train, y_pred_binary)
# print(conf_matrix)


from sklearn.metrics import confusion_matrix
from tensorflow.keras.utils import to_categorical

# # Normalize the training data
# min_values = np.min(np.concatenate([X_train, X_test], axis=0), axis=0)
# max_values = np.max(np.concatenate([X_train, X_test], axis=0), axis=0)
# X_train_normalized = (X_train - min_values) / (max_values - min_values)
# X_test_normalized = (X_test - min_values) / (max_values - min_values)

np.set_printoptions(threshold=np.inf, precision=4, suppress=True)


# # Assuming X_test_normalized and y_test are your test set data
# y_pred_binary = [1 if pred >= 0.5 else 0 for pred in model.predict(X_test_normalized)]

# # Create confusion matrix using the test set
# conf_matrix = confusion_matrix(y_test, y_pred_binary)
# print(conf_matrix)



# plt.figure(figsize=(6, 6))
# sns.heatmap(conf_matrix, annot=True, fmt=""d"", cmap=""Blues"", xticklabels=['Predicted 0', 'Predicted 1'], yticklabels=['Actual 0', 'Actual 1'])
# plt.xlabel(""Predicted Label"")
# plt.ylabel(""True Label"")
# plt.title(""Confusion Matrix"")
# plt.show()

# X_train = np.array(X_train)
# y_train_one_hot = np.array(y_train_one_hot)

# RozdÄ›lenĂ­ dat na trĂ©novacĂ­ a testovacĂ­ mnoĹľiny
###X_train, X_test, y_train, y_test = data[:num_training_rows], data[-num_testing_rows:], labels[:num_training_rows], labels[-num_testing_rows:]

###X_train, X_test, y_train, y_test = data[:num_training_rows], data[:num_training_rows], labels[:num_training_rows], labels[:num_training_rows]
X_train, X_test, y_train, y_test = data[:num_training_rows], data[:num_testing_rows], labels[:num_training_rows], labels[:num_testing_rows]

import numpy as np
import matplotlib.pyplot as plt
from sklearn.metrics import confusion_matrix, accuracy_score, precision_score, recall_score, f1_score
import tensorflow as tf
import seaborn as sns

# Assuming data splitting and model definition have been done correctly

# Compile the model
model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])

# Train the model
print(""Training Start"")
for epoch in tqdm_notebook(range(1000), desc=""Training Progress""):
    model.fit(np.array(X_train_normalized), np.array(y_train), epochs=1, verbose=0)
print(""Training Complete"")

# Generate predictions from the model
predictions = (model.predict(X_test_normalized) > 0.5).astype(int)

# Convert y_test to a numpy array and then to binary labels
y_test_array = np.array(y_test)  # Convert y_test to a numpy array
y_test_binary = (y_test_array > 0.5).astype(int)  # Convert to binary

# Compute the confusion matrix
conf_matrix = confusion_matrix(y_test_binary, predictions)

# Evaluate the model's performance
accuracy = accuracy_score(y_test_binary, predictions)
precision = precision_score(y_test_binary, predictions)
recall = recall_score(y_test_binary, predictions)
f1 = f1_score(y_test_binary, predictions)

# Display the confusion matrix
sns.heatmap(conf_matrix, annot=True, fmt='d', cmap='Blues')
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.title('Confusion Matrix')
plt.show()

print(f""Accuracy: {accuracy:.4f}"")
print(f""Precision: {precision:.4f}"")
print(f""Recall: {recall:.4f}"")
print(f""F1 Score: {f1:.4f}"")

print(f""Confusion Matrix2122:\n{conf_matrix}"")


import random

def find_best_pair(min_val, max_val, num_features, model, min_values, max_values):
    best_pair = None
    best_prediction = 1
    for _ in range(1000):  # Number of iterations to find the best pair
        new_data = np.random.uniform(min_val, max_val, num_features)
        new_data_normalized = (new_data - min_values) / (max_values - min_values)
        
        # Suppress model output
        tf.get_logger().setLevel('ERROR')
        with tf.device('/CPU:0'):  # Ensure to run on CPU to minimize unwanted logs
            prediction = model.predict(np.array([new_data_normalized]), verbose=0)[0][0]
        tf.get_logger().setLevel('INFO')
        
        if prediction < best_prediction:
            best_prediction = prediction
            best_pair = new_data
    return best_pair, best_prediction



best_pair, best_prediction = find_best_pair(min_values, max_values, len(X_train[0]), model, min_values, max_values)


def find_worst_pair(min_val, max_val, num_features, model, min_values, max_values):
    worst_pair = None
    worst_prediction = 0
    for _ in range(1000):  # Number of iterations to find the best pair
        new_data = np.random.uniform(min_val, max_val, num_features)
        new_data_normalized = (new_data - min_values) / (max_values - min_values)
        
        # Suppress model output
        tf.get_logger().setLevel('ERROR')
        with tf.device('/CPU:0'):  # Ensure to run on CPU to minimize unwanted logs
            prediction = model.predict(np.array([new_data_normalized]), verbose=0)[0][0]
        tf.get_logger().setLevel('INFO')
        
        if prediction > worst_prediction:
            worst_prediction = prediction
            worst_pair = new_data
    return worst_pair, worst_prediction



worst_pair, worst_prediction = find_worst_pair(min_values, max_values, len(X_train[0]), model, min_values, max_values)


print(f""Best Pair: {best_pair}, Best Prediction: {best_prediction}"")
print(f""Worst Pair: {worst_pair}, Worst Prediction: {worst_prediction}"")

import numpy as np
import matplotlib.pyplot as plt
from sklearn.decomposition import PCA
import tensorflow as tf
from tqdm.notebook import tqdm_notebook

# Vaše data
# A = [
#     [23.657800719276743,18.859916797201468,0,0],
#     [22.573729142097473,17.96922325097786,0,0],
#     [32.55342396968757,29.463651408558803,0,0],
#     [6.718035041529263,25.704665468161718,2,1],
#     [14.401918566243225,16.770856492924658,0,0],
#     [17.457907312962234,21.76521470574044,0,0],
#     [20.02796946568093,73.45445954770891,2,1],
#     [30.295138369778076,62.901112886193246,2,1],
#     [15.128977804449633,32.40267702110393,0,0],
#     [30.179457395820013,58.982492125646104,2,1],
#     [28.01649701854089,63.92781357637711,2,1],
#     [16.791838457871147,42.33482314089884,0,0],
#     [10.583694293380976,19.61926728942497,0,0],
#     [26.634447074406467,91.96624817360987,2,1],
#     [26.217868623367643,36.400293587062976,0,0],
#     [17.689396788624936,60.79797114006423,2,1],
#     [33.17193822527976,66.75277364959176,2,1],
#     [23.793952755709153,22.57501437360518,0,0],
#     [37.844484133572124,36.320623921263156,2,1],
#     [35.16135413357336,33.16395078484642,2,1],
#     [29.380894071974286,25.28297332192533,0,0],
#     [31.65893504663792,73.13603413708854,2,1],
# ]

# # Převod na NumPy pole
# A = np.array(A)

# Extrakce dat a labelů
X = A[:, :-1]  # Všechny sloupce kromě posledního jsou vstupy
y = A[:, -1]  # Poslední sloupec je label

# Normalizace dat
min_values = np.min(X, axis=0)
max_values = np.max(X, axis=0)
X_normalized = (X - min_values) / (max_values - min_values)

# Rozdělení dat na trénovací a testovací množiny
num_training_rows = 15
X_train_normalized = X_normalized[:num_training_rows]
y_train = y[:num_training_rows]
X_test_normalized = X_normalized[num_training_rows:]
y_test = y[num_training_rows:]

# Definice a kompilace modelu
model = tf.keras.Sequential([
    tf.keras.layers.Dense(256, activation='relu', input_shape=(len(X_train_normalized[0]),)),
    tf.keras.layers.Dropout(0.3),
    tf.keras.layers.Dense(128, activation='relu'),
    tf.keras.layers.Dropout(0.3),
    tf.keras.layers.Dense(64, activation='relu'),
    tf.keras.layers.Dropout(0.3),
    tf.keras.layers.Dense(1, activation='sigmoid')
])

model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])

# Trénování modelu
epochs = 138
accuracy_history = []

for epoch in tqdm_notebook(range(epochs)):
    history = model.fit(X_train_normalized, np.array(y_train), epochs=1, verbose=0, shuffle=True)
    accuracy_history.append(history.history['accuracy'][0])

# Aplikace PCA
pca = PCA(n_components=2)  # Snížení na 2 komponenty
X_pca = pca.fit_transform(X_normalized)

# Vizualizace výsledků
plt.figure()
plt.scatter(X_pca[:, 0], X_pca[:, 1], c=y)
plt.xlabel('První hlavní komponenta')
plt.ylabel('Druhá hlavní komponenta')
plt.title('PCA na vašich datech')
plt.show()

##################### LDA

X = A[:, :-1]  # Všechny sloupce kromě posledního jsou vstupy
y = A[:, -1]  # Poslední sloupec je label

# Normalizace dat
min_values = np.min(X, axis=0)
max_values = np.max(X, axis=0)
X_normalized = (X - min_values) / (max_values - min_values)

# Rozdělení dat na trénovací a testovací množiny
num_training_rows = A.shape[0]

X_train_normalized = X_normalized[:num_training_rows]
y_train = y[:num_training_rows]
X_test_normalized = X_normalized[num_training_rows:]
y_test = y[num_training_rows:]

# # Definice a kompilace modelu
# model = tf.keras.Sequential([
#     tf.keras.layers.Dense(256, activation='relu', input_shape=(len(X_train_normalized[0]),)),
#     tf.keras.layers.Dropout(0.3),
#     tf.keras.layers.Dense(128, activation='relu'),
#     tf.keras.layers.Dropout(0.3),
#     tf.keras.layers.Dense(64, activation='relu'),
#     tf.keras.layers.Dropout(0.3),
#     tf.keras.layers.Dense(1, activation='sigmoid')
# ])

#model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])

from sklearn.discriminant_analysis import LinearDiscriminantAnalysis as LDA

# Trénování modelu
epochs = 138
accuracy_history = []

for epoch in tqdm_notebook(range(epochs)):
    history = model.fit(X_train_normalized, np.array(y_train), epochs=1, verbose=0, shuffle=True)
    accuracy_history.append(history.history['accuracy'][0])

# Aplikace LDA
lda = LDA(n_components=1)  # Snížení na 2 komponenty
X_lda = lda.fit_transform(X_normalized, y)

# # Vizualizace výsledků
# plt.figure()
# plt.scatter(X_lda[:, 0], X_lda[:, 1], c=y)
# plt.xlabel('První diskriminační komponenta')
# plt.ylabel('Druhá diskriminační komponenta')
# plt.title('LDA na vašich datech')
# plt.show()

lda = LDA(n_components=1)
X_lda = lda.fit_transform(X_train_normalized, y_train)
 

# Vizualizace výsledků LDA
plt.figure()
plt.scatter(X_lda[:, 0], np.zeros_like(X_lda), c=y_train)
plt.xlabel('První diskriminační komponenta')
plt.title('LDA s učitelem')
plt.show()

###################################################################################################################


import numpy as np
import matplotlib.pyplot as plt
import tensorflow as tf
from sklearn.metrics import recall_score, confusion_matrix, accuracy_score, precision_score, f1_score
import seaborn as sns

# # Vaše data
# A = [
#     [23.657800719276743, 18.859916797201468, 0, 0],
#     [22.573729142097473, 17.96922325097786, 0, 0],
#     [32.55342396968757, 29.463651408558803, 0, 0],
#     [6.718035041529263, 25.704665468161718, 2, 1],
#     [14.401918566243225, 16.770856492924658, 0, 0],
#     [17.457907312962234, 21.76521470574044, 0, 0],
#     [20.02796946568093, 73.45445954770891, 2, 1],
#     [30.295138369778076, 62.901112886193246, 2, 1],
#     [15.128977804449633, 32.40267702110393, 0, 0],
#     [30.179457395820013, 58.982492125646104, 2, 1],
#     [28.01649701854089, 63.92781357637711, 2, 1],
#     [16.791838457871147, 42.33482314089884, 0, 0],
#     [10.583694293380976, 19.61926728942497, 0, 0],
#     [26.634447074406467, 91.96624817360987, 2, 1],
#     [26.217868623367643, 36.400293587062976, 0, 0],
#     [17.689396788624936, 60.79797114006423, 2, 1],
#     [33.17193822527976, 66.75277364959176, 2, 1],
#     [23.793952755709153, 22.57501437360518, 0, 0],
#     [37.844484133572124, 36.320623921263156, 2, 1],
#     [35.16135413357336, 33.16395078484642, 2, 1],
#     [29.380894071974286, 25.28297332192533, 0, 0],
#     [31.65893504663792, 73.13603413708854, 2, 1],
# ]

# # Převod na NumPy pole
# A = np.array(A)

# Rozdělení na vstupní data (X) a cílové proměnné (y)
X = A[:, :-1]
y = A[:, -1]

# Rozdělení na trénovací a testovací sadu (v tomto příkladě použijeme celou sadu jako trénovací pro jednoduchost)
X_train, y_train = X, y
X_test, y_test = X, y

# Normalizace dat
min_values = np.min(X_train, axis=0)
max_values = np.max(X_train, axis=0)
X_train_normalized = (X_train - min_values) / (max_values - min_values)
X_test_normalized = (X_test - min_values) / (max_values - min_values)

# Definice modelu
model = tf.keras.Sequential([
    tf.keras.layers.Dense(256, activation='relu', input_shape=(X_train_normalized.shape[1],)),
    tf.keras.layers.Dropout(0.3),
    tf.keras.layers.Dense(128, activation='relu'),
    tf.keras.layers.Dropout(0.3),
    tf.keras.layers.Dense(64, activation='relu'),
    tf.keras.layers.Dropout(0.3),
    tf.keras.layers.Dense(1, activation='sigmoid')
])

# Použití Adam optimizer s learning rate schedulerem
lr_schedule = tf.keras.optimizers.schedules.ExponentialDecay(
    initial_learning_rate=1e-3,
    decay_steps=10000,
    decay_rate=0.9
)
optimizer = tf.keras.optimizers.Adam(learning_rate=lr_schedule)

# Kompilace modelu
model.compile(optimizer=optimizer, loss='binary_crossentropy', metrics=['accuracy', tf.keras.metrics.Recall()])

# Trénování modelu
history = model.fit(X_train_normalized, y_train, epochs=50, verbose=0, shuffle=True)

# Predikce
y_pred_prob = model.predict(X_test_normalized)
y_pred = (y_pred_prob > 0.5).astype(int)

# Výpočet metrik
recall = recall_score(y_test, y_pred)
conf_matrix = confusion_matrix(y_test, y_pred)

# Vyhodnocení výkonu modelu
accuracy = accuracy_score(y_test, y_pred)
precision = precision_score(y_test, y_pred)
f1 = f1_score(y_test, y_pred)

# Výpis metrik
print(f""Recall: {recall:.4f}"")
print(f""Accuracy: {accuracy:.4f}"")
print(f""Precision: {precision:.4f}"")
print(f""F1 Score: {f1:.4f}"")
print(f""Confusion Matrix:\n{conf_matrix}"")

# Zobrazení confusion matrix
sns.heatmap(conf_matrix, annot=True, fmt='d', cmap='Blues')
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.title('Confusion Matrix')
plt.show()"
ptHGndrq,💰G2A.com Free Gift Card Guide May 2024🔥,rickyyyyyyy,GetText,Sunday 26th of May 2024 04:44:20 PM CDT,"G2A.com free gift card & games updated guide.
Any item for free on G2A.com including Amazon, Steam, Xbox, Playstation gift cards & everything else offered.

You can use this for as long as you want and make 1,000$ a day if you got the time!
 
This is the latest version of this script. Any other one posted will not work!
 
Guide and steps here:
https://drive.google.com/file/d/1DPWAoETZiicqUqNvAVCUYSiXlcVPb6pY/view?usp=sharing
 
Working as of:
27 May 2024"
BckQ1JyV,LUA RSA-Encryption Lib for CC:Tweaked (ComputerCraft),antl1on,Lua,Sunday 26th of May 2024 04:19:16 PM CDT,"RSA_Encrypt = {}
--used for encoding strings to prepare them for encryption
--  the mathematical max is 25, higher numbers will cause an overflow
--  and lead to invalid results.
RSA_Encrypt.max_chars_per_bignum = 25
BigNumAPIPath = ""api/BigNum""
BigNum = require(BigNumAPIPath)


--Usage Information:
--	
--	Tested with 256 bit keys, I wouldn't recommend using keys of 512 or 1024 bit length
--
--	important: You must download the BigNum api from:
--		https://github.com/ennorehling/euler/blob/master/BigNum.lua
--	you can set the path to the BigNum api at the top



--  !!!!!!! VERY IMPORTANT: !!!!!!!
--		after downloading the BigNum api, you must open the file and write:
--			return BigNum	
--		at the end of the file.



--	To use this api, you will first need your key pairs generated by a different program.
--	
--	Load public keys using the loadPublicKeyFrom functions
--	Load private keys using the loadPrivateKeyFrom functions


--	To encrypt a string refer to the encryptStringWith.. functions
--	To decrypt a string refer to the decryptStringWith.. functions

--	Important:
--	use the prepareNumber(msg) function to convert your number
-- 		to the format used in the encrypt/decrypt functions
--	 
--	To encrypt a number, refer to the encryptWith.. functions
--	To decrypt a number, refer to the decryptWith.. functions
--



--############ Begin Functions ############--

--
--	Description:
--		encrypts a string using the public key
--
--	Parameters:
--		msg => String: the msg to be encrypted
--		pub_key => PubKey: the public key
--
--	Returns:
--		String: encrypted message ready for broadcasting
--
function RSA_Encrypt.encryptStringWithPublicKey(msg,pub_key)
	if msg == nil then
		error(""Invalid Parameter #1: msg"")
	end
	if pub_key == nil then
		error(""Invalid Parameter #2: pub_key"")
	end
	local result = """"
	local words = {}
	local bignums = {}
	--split msg into [max_chars_per_bignum]-char strings
	while #msg > RSA_Encrypt.max_chars_per_bignum do
		table.insert(words,msg:sub(1,25))
		msg = msg:sub(26,#msg)
	end
	if #msg > 0 then
		table.insert(words,msg)
	end

	local char_size = BigNum.new(256)
	
	--encode each word into BigNums (bitshift encoding)
	for i=1, #words do
		--for each char in words[i]
		local bignum = BigNum.new()
		for c=1, #words[i] do
			local byte = BigNum.new( string.byte(words[i]:sub(c,c)) )
			bignum = bignum*char_size + byte
		end
		bignum = RSA_Encrypt.encryptWithPublicKey(bignum,pub_key)
		table.insert(bignums, bignum)
		result = result..tostring(bignum).."" ""
	end

	return result
end

--
--	Description:
--		encrypts a string using the private key
--
--	Parameters:
--		msg => String: the msg to be encrypted
--		pub_key => PubKey: the public key
--
--	Returns:
--		String: encrypted message ready for broadcasting
--
function RSA_Encrypt.encryptStringWithPrivateKey(msg,priv_key,pub_key)
	if msg == nil then
		error(""Invalid Parameter #1: msg"")
	end
	if priv_key == nil then
		error(""Invalid Parameter #2: priv_key"")
	end
	if pub_key == nil then
		error(""Invalid Parameter #3: pub_key"")
	end

	local result = """"
	local words = {}
	local bignums = {}
	--split msg into [max_chars_per_bignum]-char strings
	while #msg > RSA_Encrypt.max_chars_per_bignum do
		table.insert(words,msg:sub(1,25))
		msg = msg:sub(26,#msg)
	end
	if #msg > 0 then
		table.insert(words,msg)
	end

	local char_size = BigNum.new(256)
	
	--encode each word into BigNums (bitshift encoding)
	for i=1, #words do
		--for each char in words[i]
		local bignum = BigNum.new()
		for c=1, #words[i] do
			local byte = BigNum.new( string.byte(words[i]:sub(c,c)) )
			bignum = bignum*char_size + byte
		end
		bignum = RSA_Encrypt.encryptWithPrivateKey(bignum,priv_key,pub_key)
		table.insert(bignums, bignum)
		result = result..tostring(bignum).."" ""
		os.sleep(0.001)
	end

	return result
end


--	Description:
--		Decrypts a string (encrypted with a private key) using a public key
--		useful for verifying the message came from a particular sender.
--		because a message encrypted with someone's private key can be decrypted with
--		their public key. Very cool!
--
--	Paramters:
--		msg => String: the encrypted message
--		pub_key => BigNum: the public key n component
--		pub_e => BigNum: the public key e component
--
--	Returns:
--		String: the decrypted message
--
function RSA_Encrypt.decryptStringWithPublicKey(msg,pub_key)
	if msg == nil then
		error(""Invalid Parameter #1: msg"")
	end
	if pub_key == nil then
		error(""Invalid Parameter #2: pub_key"")
	end

	--decode bignum into string
	msg = RSA_Encrypt.splitWords(msg)
	local result = """"
	local bignums = {}

	for i=1, #msg do
		local bignum = BigNum.new(msg[i])
		bignum = RSA_Encrypt.decryptWithPublicKey(bignum,pub_key)
		table.insert(bignums, bignum)
	end

	local char_size = BigNum.new(256)
	local _0 = BigNum.new(0)

	--decode the decrypted bignums into strings (bitshift encoded)
	for i=1, #bignums do
		local word = """"
		while bignums[i] > _0 do
			local tmp = BigNum.new()
			local char = BigNum.new()
			BigNum.div(bignums[i],char_size,tmp,char)
			word = string.char( tonumber(tostring(char)) )..word
			BigNum.copy(tmp,bignums[i])
		end
		result = result..word
		os.sleep(0.001)
	end
	return result
end


--	Description:
--		Decrypts a string (encrypted with a public key) using a private key
--
--	Paramters:
--		msg => String: the encrypted message
--		priv_key => BigNum: the private key.
--		pub_key => PubKey: the public key
--
--	Returns:
--		String: the decrypted message
--
function RSA_Encrypt.decryptStringWithPrivateKey(msg,priv_key,pub_key)
	if msg == nil then
		error(""Invalid Parameter #1: msg"")
	end
	if priv_key == nil then
		error(""Invalid Parameter #2: priv_key"")
	end
	if pub_key == nil then
		error(""Invalid Parameter #3: pub_key"")
	end
	--decode bignum into string
	msg = RSA_Encrypt.splitWords(msg)
	local result = """"
	local bignums = {}

	for i=1, #msg do
		local bignum = BigNum.new(msg[i])
		bignum = RSA_Encrypt.decryptWithPrivateKey(bignum,priv_key,pub_key)
		table.insert(bignums, bignum)
		os.sleep(0.001)
	end

	local char_size = BigNum.new(256)
	local _0 = BigNum.new(0)

	--decode the decrypted bignums into strings (bitshift encoded)
	for i=1, #bignums do
		local word = """"
		while bignums[i] > _0 do
			local tmp = BigNum.new()
			local char = BigNum.new()
			BigNum.div(bignums[i],char_size,tmp,char)
			word = string.char( tonumber(tostring(char)) )..word
			BigNum.copy(tmp,bignums[i])
		end
		result = result..word
	end
	return result
end


--
--	Description:
--		convert public key to a one line string for sending over modems
--
--	Parameters:
--		pub_key => PubKey: the public key
--
--	Returns:
--		String: the public key for broadcasting
--
function RSA_Encrypt.publicKeyToString(_pub_key)
	if _pub_key == nil then
		error(""Invalid Parameter #1: _pub_key"")
	end
	local pub_key = _pub_key[1]
	local pub_e = _pub_key[2]
	local result = tostring(pub_key).."" ""..tostring(pub_e)
	return result
end


--
--  Description:
--		Load public key from path
--		File @ path should contain:
--			RSA n component on first line
--			RSA e component on second line
--
--	Parameter:
--		path => path to file containing RSA public key data
--
--	Returns:
--		pub_key ==> a BigNum RSA n component
--		pub_e   ==> a BigNum RSA e component
--
function RSA_Encrypt.loadPublicKeyFromFile(path)
	if path == nil then
		error(""Invalid Parameter #1: path"")
	end
	if fs.exists(path) then
		local pub_key_file = fs.open(path,""r"")
		local pub_key = pub_key_file.readLine()
		local pub_e = pub_key_file.readLine()
		pub_key = BigNum.new(pub_key)
		pub_e = BigNum.new(pub_e)
		return {pub_key, pub_e}
	else
		error(""pubkey file not found"")
	end
end


--
--	Description:
--		creates and returns the e and n component of an RSA Public Key from a string.
--		the format of the string should be:
--			pub_key.."" ""..pub_e
--		where pub_key is the n component and pub_e is the e component of an RSA Public Key
--		
--	Parameters:
--		str ==> a string containing the public key data
--
--	Returns:
--		pub_key ==> a BigNum, the n component of an RSA Public Key
--		pub_e ==> a BigNum, the e component of an RSA Public Key
--
function RSA_Encrypt.loadPublicKeyFromString(str)
	if str == nil then
		error(""Invalid Parameter #1: str"")
	end
	local words = RSA_Encrypt.splitWords(str)
	local pub_key = BigNum.new(words[1])
	local pub_e = BigNum.new(words[2])
	return {pub_key, pub_e}
end


--
--	Description:
--		Load private key from path
--		File @ path should contain:
--			RSA d component
--
--	Parameter:
--		path => path to file containing RSA private key
--	
--	Returns:
--		priv_key => a BigNum containing the RSA private key found in path
--
function RSA_Encrypt.loadPrivateKeyFromFile(path)
	if path == nil then
		error(""Invalid Parameter #1: path"")
	end
	if fs.exists(path) then
		priv_key_file = fs.open(path,""r"")
		priv_key = priv_key_file.readLine()
		priv_key = BigNum.new(priv_key)
		return priv_key
	else
		error(""privkey file not found"")
	end
end

--
--	Description:
--		Load private key from str
--
--	Parameter:
--		str => a string containing an RSA Private Key (base 10)
--	
--	Returns:
--		priv_key => a BigNum containing the RSA private key found in path
--
function RSA_Encrypt.loadPrivateKeyFromString(str)
	if str == nil then
		error(""Invalid Parameter #1: str"")
	end
	priv_key = BigNum.new(str)
	return priv_key
end

--
--	Description:
--		Encrypt msg with a given public key
--
--	Parameters:
--		msg ==> a BigNum to be encrypted
--		pub_key ==> a BigNum, the n component of RSA pub key
--		pub_e ==> a BigNum, the e component of RSA pub key
--	
--	Returns:
--		a BigNum: msg encrypted with the pub key
--
function RSA_Encrypt.encryptWithPublicKey(msg, _pub_key)
	if msg == nil then
		error(""Invalid Parameter #1: msg"")
	end
	if _pub_key == nil then
		error(""Invalid Parameter #2: _pub_key"")
	end
	local pub_key = _pub_key[1]
	local pub_e = _pub_key[2]
	local result = RSA_Encrypt.BigNumModPow(msg, pub_e, pub_key)
	return result
end


--
--	Description:
--		Encrypt msg with a given private key
--
--	Parameters:
--		msg ==> a BigNum to be encrypted
--		priv_key ==> a BigNum, the RSA private key
--		pub_key ==> a BigNum, the n component of RSA public key
--	
--	Returns:
--		a BigNum: msg encrypted with the pub key
--
function RSA_Encrypt.encryptWithPrivateKey(msg, priv_key, _pub_key)
	if msg == nil then
		error(""Invalid Parameter #1: msg"")
	end
	if priv_key == nil then
		error(""Invalid Parameter #2: priv_key"")
	end
	if _pub_key == nil then
		error(""Invalid Parameter #3: _pub_key"")
	end
	local pub_key = _pub_key[1]
	local result = RSA_Encrypt.BigNumModPow(msg, priv_key, pub_key)
	return result
end


--
--  Description:
--		decrypt msg (encrypted with a public key) using the private key
--
--	Parameters:
--		msg ==> a BigNum, the msg to be decrypted
--		priv_key ==> a BigNum, the RSA private key
--		pub_key ==> PubKey: the public key
--
--	Returns:
--		a BigNum, the decrypted msg
--		
function RSA_Encrypt.decryptWithPrivateKey(msg, priv_key, _pub_key)
	if msg == nil then
		error(""Invalid Parameter #1: msg"")
	end
	if priv_key == nil then
		error(""Invalid Parameter #2: priv_key"")
	end
	if _pub_key == nil then
		error(""Invalid Parameter #3: _pub_key"")
	end
	local pub_key = _pub_key[1]
	local result = RSA_Encrypt.BigNumModPow(msg, priv_key, pub_key)
	return result
end


--
--	Description:
--		decrypt msg (encrypted with a private key) using the public key
--
--	Parameters:
--		msg ==> a BigNum, the msg to be decrypted
--		_pub_key ==> a BigNum, the n component of an RSA Public Key
--		
--	Returns:
--		the decrypted message in msg.
function RSA_Encrypt.decryptWithPublicKey(msg, _pub_key)
	if msg == nil then
		error(""Invalid Parameter #1: msg"")
	end
	if _pub_key == nil then
		error(""Invalid Parameter #2: _pub_key"")
	end
	local pub_key = _pub_key[1]
	local pub_e = _pub_key[2]
	local result = RSA_Encrypt.BigNumModPow(msg, pub_e, pub_key)
	return result
end


--
--	Description:
--		creates and returns a BigNum from msg
--
--	Parameter:
--		msg ==> a string containing an integer (base 10) OR an int
--
--	Returns:
--		a BigNum, the integer contained in msg
--
function RSA_Encrypt.prepareNumber(num)
	if num == nil then
		error(""Invalid Parameter #1: num"")
	end
	local result = BigNum.new(num)
	return result
end


--
--	Description:
--		returns num^exponent % modulo
--
--  Parameters:
--		b = a BigNum to be modpow-ed
--		e = a BigNum exponent
--		m = a BigNum modulo
--
--	Returns:
--		a BigNum == (base^exponent) % modulo
--
function RSA_Encrypt.BigNumModPow(b, e, m)
	if b == nil then
		error(""Invalid Parameter #1: b"")
	end
	if e == nil then
		error(""Invalid Parameter #2: e"")
	end
	if m == nil then
		error(""Invalid Parameter #3: m"")
	end
	base = BigNum.new()
	exponent = BigNum.new()
	modulo = BigNum.new()
	BigNum.copy(b, base)
	BigNum.copy(e, exponent)
	BigNum.copy(m, modulo)
	--represent 0, 1, and 2 as BigNums
	local _2 = BigNum.new(""2"")
	local _1 = BigNum.new(""1"")
	local _0 = BigNum.new(""0"")

	--if base == 1
	if BigNum.eq(base,_1) then
		return 0
	end
	local r = BigNum.new(""1"")

	--base = base % modulo
	local tmp = BigNum.new()
	local tmp_res = BigNum.new()
	local tmp_res_2 = BigNum.new()

	--base = base % modulo
	BigNum.div(base, modulo, tmp, tmp_res)
	BigNum.copy(tmp_res,base)

	--while exponent > 0
	while (BigNum.compare(exponent, _0) == 1) do

		--if exponent % 2 == 1 then
		BigNum.div(exponent, _2, tmp, tmp_res)
		if (BigNum.compare(tmp_res, _1) == 0) then

			--r = (r*base) % modulo
			BigNum.mul(r,base,tmp_res)
			BigNum.div(tmp_res,modulo,tmp,tmp_res_2)
			BigNum.copy(tmp_res_2,r)
		end

		-- base = (base*base) % m
		BigNum.mul(base,base,tmp_res)
		BigNum.div(tmp_res,modulo,tmp,tmp_res_2)
		BigNum.copy(tmp_res_2,base)

		-- e = math.floor(e/2)
		BigNum.div(exponent,_2,tmp_res,tmp)
		BigNum.copy(tmp_res,exponent)
	end
	return r
end


--
--	a helper function used by RSA_Encrypt.loadPublicKeyFromString(str)
--
function RSA_Encrypt.splitWords(s)
	if s == nil then
		error(""Invalid Parameter #1: s"")
	end
    local words = {}
    local j = 1
    local btoi = {[true]=1,[false]=0}
    for i = 1, #s do 
        b = i ~= #s
        if string.sub(s,i,i) == "" "" or not b then
            words[#words+1] = string.sub(s,j,i-1*btoi[b])
            j=i+1 
        end  
    end
    return words
end

--
--	Run a benchmark of the encryStringWith and decryptStringWith functions
--
--	Paramter: str => (Optional) the string to run the benchmark on
--
function RSA_Encrypt.benchmark(str)
	print(""\nRunning Benchmark using:"")
	if str == nil then
		str = ""Hello world! This is the default benchmark string. You can run the benchmark with a custom string by adding it to the call parameters""
	end
	print(str..""\n"")

	local priv_key = BigNum.new(""30718027764395347858436300176794542038442961471507061849584361239819342178987"")
	local pub_key = RSA_Encrypt.loadPublicKeyFromString(""18430816658637208715061780106076725223340967021069964147042057987714753676151 3"")

	--
	print(""Encrypting with public key:"")
	local start = os.epoch(""utc"")
	local cipher = RSA_Encrypt.encryptStringWithPublicKey(str,pub_key)
	local endd = os.epoch(""utc"")
	local dist = endd-start
	print(""  took"",dist,""ms"")

	print(""Decrypting with private key:"")
	local start = os.epoch(""utc"")
	local decipher = RSA_Encrypt.decryptStringWithPrivateKey(cipher,priv_key,pub_key)
	if decipher == str then
		print(""  success!"")
	else
		print(""  failed!!"")
		print(""  got:""..decipher)
	end
	local endd = os.epoch(""utc"")
	local dist = endd-start
	print(""  took"",dist,""ms"")

	print(""\nEncrypting with private key:"")
	local start = os.epoch(""utc"")
	local cipher = RSA_Encrypt.encryptStringWithPrivateKey(str,priv_key,pub_key)
	local endd = os.epoch(""utc"")
	local dist = endd-start
	print(""  took"",dist,""ms"")

	print(""Decrypting with public key:"")
	local start = os.epoch(""utc"")
	local decipher = RSA_Encrypt.decryptStringWithPublicKey(cipher,pub_key)
	if decipher == str then
		print(""  success!"")
	else
		print(""  failed!!"")
		print(""  got:""..decipher)
	end
	local endd = os.epoch(""utc"")
	local dist = endd-start
	print(""  took"",dist,""ms"")

	-- print(""\nencrypting:"")
	-- print(str)
	-- local cipher = RSA_Encrypt.encryptStringWithPublicKey(str,pub_key)
	-- print(cipher)
	-- print(""\ndeciphering"")
	-- local decipher = RSA_Encrypt.decryptStringWithPrivateKey(cipher,priv_key,pub_key)
	-- print(decipher)

	-- print(""\nencrypting:"")
	-- print(str)
	-- local cipher = RSA_Encrypt.encryptStringWithPrivateKey(str,priv_key,pub_key)
	-- print(cipher)
	-- print(""\ndeciphering"")
	-- local decipher = RSA_Encrypt.decryptStringWithPublicKey(cipher,pub_key)
	-- print(decipher)
end

return RSA_Encrypt"
