id,title,username,language,date,content
ZBdgSvRa,Untitled,Coolaidman,Python,Friday 25th of August 2023 07:01:25 AM CDT,"{
    ""footer"": {
        ""text"": ""Footer text"",
        ""icon_url"": ""https://link.to/some/image.png""
    },
    ""image"": {
        ""url"": ""https://link.to/some/image.png""
    },
    ""thumbnail"": {
        ""url"": ""https://link.to/some/image.png""
    },
    ""author"": {
        ""name"": ""Author Field"",
        ""icon_url"": ""https://link.to/some/image.png""
    },
    ""fields"": [
        {
            ""value"": ""This field is not within a line."",
            ""name"": ""Field 1"",
            ""inline"": false
        },
        {
            ""value"": ""This is also not inline."",
            ""name"": ""Field 2"",
            ""inline"": false
        },
        {
            ""value"": ""This field will be inline."",
            ""name"": ""Field 3"",
            ""inline"": true
        },
        {
            ""value"": ""This field is also within a line."",
            ""name"": ""Field 4"",
            ""inline"": true
        }
    ],
    ""color"": 2616205,
    ""type"": ""rich"",
    ""description"": ""This embed is an example to show various features that can be used in a rich embed. New lines are easy to make:\n `Code Blocks` are also supported. `*Italics*` *are supported*. `**Bold**` **is supported**. `__Underline__` __also works__. [Markdown](https://github.com) with text hyperlinks works too. You can also declare emoji. Default ones like 1\ufe0f\u20e3 or 2\ufe0f\u20e3 should work normally. For custom emoji, put a backslash in front of it like so: `\\:custom_emote:` You should see something like this show up: `<:custom_emote:123456789012345678>`."",
    ""url"": ""https://gist.github.com/phenom4n4n/07ffa6f454c54d8932b6b28bdf7dc999"",
    ""title"": ""JSON Example Embed""
}"
p7aHBLay,Course 9 - OFDM with equalizer (with IFFT also),makispaiktis,MatLab,Friday 25th of August 2023 06:52:49 AM CDT,"clear all
close all
clc


% 1. Simulation parameters

modOrder = 16;  % for 16-QAM
bitsPerSymbol = log2(modOrder);
mpChan = [0.8; zeros(7,1); -0.5; zeros(7,1); 0.34];  % multipath channel
SNR = 15;

% 2. Select number of bits - Each carrier holds a symbol and each symbol holds 4 bits

numCarr = 8192;
numBits = numCarr * bitsPerSymbol;


% 3. QAM Modulation
srcBits = randi([0,1],numBits,1);
qamModOut = qammod(srcBits,modOrder,""InputType"",""bit"",""UnitAveragePower"",true);


% 4. Select cyclic prefix length, so that it is at least equal to the FIR filter length, but as low as possible, because it will
% contain data that will be discarded later. Cyclic prefix is needed to convert the signal into a periodic one. If a signal is 
% periodic, then linear and cyclic convolution are identical. Convolution ""lies"" at the receiver's edge, at equalizer.

cycPrefLen = 32;


% 5. OFDM Modulation
ofdmModOut = ofdmmod(qamModOut, numCarr, cycPrefLen);


% 6. Channel
pChanOut = filter(mpChan,1,ofdmModOut);
chanOut = awgn(mpChanOut,SNR,""measured"");


% 7. OFDM Demodulation
ofdmDemodOut = ofdmdemod(chanOut, numCarr, cycPrefLen);
scatterplot(ofdmDemodOut);


% 8. Equalizer
mpChanFreq = fftshift(fft(mpChan,numCarr));
eqOut = ofdmDemodOut ./ mpChanFreq;
scatterplot(eqOut);


% 9. QAM Demodulation
qamDemodOut = qamdemod(eqOut,modOrder,""OutputType"",""bit"",""UnitAveragePower"",true);
numBitErrors = nnz(srcBits~=qamDemodOut)
BER = numBitErrors/numBits"
mRN47viQ,NextUI 2.1 Beta,PolskiWisnia,Lua,Friday 25th of August 2023 06:28:40 AM CDT,"local function s(...) return sleep(...) end
local function aw(...) return write(...) end
local function p(...) return print(...) end
local function tw(...) return term.write(...) end
local function scp(...) return term.setCursorPos(...) end
local function sbc(...) return term.setBackgroundColor(...) end
local function stc(...) return term.setTextColor(...) end
local function tc(...) return term.clear(...) end
local function tcl(...) return term.clearLine(...) end
local function r(...) return shell.run(...) end
local function sp(...) return textutils.slowPrint(...) end
local function sw(...) return textutils.slowWrite(...) end
local function fse(...) return fs.exists(...) end
local function pul(...) return paintutils.loadImage(...) end
local function pud(...) return paintutils.drawImage(...) end
local function pfb(...) return paintutils.drawFilledBox(...) end
local function su(...) return os.shutdown(...) end
local function re(...) return os.reboot(...) end
local function pdp(...) return paintutils.drawPixel(...) end

function downloadFile(url, sciezka)
    local response = http.get(url)
    if response then
        local fileContent = response.readAll()
        response.close()
        
        local file = fs.open(sciezka, ""w"")
        file.write(fileContent)
        file.close()
    else
        print(""Instalator napotkal blad z pobieraniem pliku. Jesli wystapi on ponownie uzyj wersji instalatora korzystajacej z API pastebin."")
    end
end

function soundHandler(sound)
	speaker = peripheral.find(""speaker"")
	if speaker then
		if sound == ""boot"" then 
			speaker.playNote(""pling"", 20, 20)
			speaker.playSound(""minecraft:entity.villager.celebrate"")
		elseif sound == ""pop_up"" then
			speaker.playNote(""hat"")
		elseif sound == ""error"" then
			speaker.playNote(""pling"")
		elseif sound == ""critical_error"" then
			count = 0
			while count < 5 do
				speaker.playNote(""pling"")
				s(0.4)
				count = count+1
			end
		end
	end
end	

floppy = 0

function popUp(msg)
	middleW = math.floor(w/2)
	middleH = math.floor(h/2)
	popupDim = {middleW-20, middleH-3, middleW+20, middleH+3}
	pfb(popupDim[1], popupDim[2], popupDim[3], popupDim[4], colors.white)
	scp(middleW-20, middleH-2)
	stc(colors.black)
	if msg == ""disk_insert"" then
		p(""Wykryto i zamontowano dyskietke!"")
	elseif msg == ""disk_eject"" then
		p(""Dyskietka zostala wyjeta i odmontowana."")
	end
	pfb(middleW-20, middleH-3, middleW+20, middleH-3, colors.blue)
	scp(middleW-20, middleH-3)
	stc(colors.white)
	if msg == ""disk_insert"" or msg == ""disk_eject"" then
		p(""Dyskietka"")
	end
	pdp(middleW+20, middleH-3, colors.red)
	pfb(middleW-20, middleH+3, middleW-19, middleH+3, colors.gray)
	scp(middleW-20, middleH+3)
	stc(colors.white)
	p(""OK"")
	soundHandler(""pop_up"")
	kolor = get_color()
	while true do
	klik = mysz()
	if klik[2] == middleH+3 and klik[1] > middleW-21 and klik[1] < middleW-18 then draw(tonumber(kolor)) break end
	end
end

function bsod(powod)
	sbc(colors.blue)
	tc()
	sbc(colors.blue)
	stc(colors.white)
	ac = w/2
	scp(ac-2,3)
	sbc(colors.white)
	stc(colors.black)
	p(""NextUI"")
	sbc(colors.blue)
	stc(colors.white)
	scp(1,6)
	p[[System NextUI napotkal problem i musial zostac zatrzymany. Jesli widzisz ten ekran po raz pierwszy poczekaj na ponowny 		rozruch komputera, jednakze jesli blad bedzie sie powtarzal byc moze konieczna bedzie naprawa systemu NextUI. Aby jej dokonac 	uruchom Program Instalacyjny NextUI oraz postepuj z jego wskazowkami.
	Trwa zbieranie informacji na temat Bledu STOP]]
	s(4)
	p(""Nazwa bledu: "", powod)
	p("""")
	p("""")
if (powod == ""NextExplorer Missing"") then
	p[[System NextUI nie wykryl obecnosci Eksploratora NextUI. Jest to integralna czesc NextUI 2.1 i jego brak uniemozliwia prace systemu. Pobierz Eksplorator za pomoca komendy: pastebin get za0ck7T5 /os/main/explorer a nastepnie uruchom ponownie komputer]]
	s(3)
	sbc(colors.black)
	tc()
	sbc(colors.black)
	scp(1,1)
	error(""Opuszczono NextUI 2.1"")
	end
	s(10)
	p(""Ponowne uruchamianie..."")
end

function get_color()
	if fse(""/os/desk_color"") then
		kolorget = fs.open(""/os/desk_color"", ""r"")
		kolor = kolorget.readLine()
	else
		kolorget = fs.open(""/os/desk_color"", ""w"")
		kolorget.writeLine(""512"")
		kolorget.close()
		get_color()
	end
return kolor
end

function nilToBrak(str)
	if str == nil then str = ""Brak"" end
	return str
end

function mysz()
    local event, button, x, y = os.pullEvent(""mouse_click"")
    klik = {x, y, button}
    return klik
end

function findPeripherals()
	peripherals = {}
	
	peripherals[1] = nilToBrak(peripheral.getType(""top""))
	peripherals[2] = nilToBrak(peripheral.getType(""bottom""))
	peripherals[3] = nilToBrak(peripheral.getType(""left""))
	peripherals[4] = nilToBrak(peripheral.getType(""right""))
	peripherals[5] = nilToBrak(peripheral.getType(""front""))
	peripherals[6] = nilToBrak(peripheral.getType(""back""))

	return peripherals
end

function devMgr()
pfb(1,1,w,1,colors.blue)
stc(colors.white)
scp(1,1)
p(""NextUI Device Manager"")
pdp(w,1,colors.red)
stc(colors.white)
scp(w,1)
p(""X"")
pfb(1,2,w,h,colors.black)
scp(1,2)
stc(colors.white)
p(""NextUI Compatible PC"")
local char1 = ""\149""
p(char1)
p(char1)
local char2 = ""\131""
for i = 5,14 do
	scp(1,i)
	p(char1)
end

peripheralsFound = findPeripherals()

scp(2,5)
p(char2,""Top "", peripheralsFound[1])
scp(2,7)
p(char2, ""Bottom"", peripherals[2])
scp(2,9)
p(char2, ""Left"", peripherals[3])
scp(2,11)
p(char2, ""Right"", peripherals[4])
scp(2,13)
p(char2, ""Front"", peripherals[5])
scp(2,15)
p(char2, ""Back"", peripherals[6])

while true do
klik = mysz()

if klik[1] == w and klik[2] == 1 then break end
end

end

function draw(kolor)
	pfb(1,2,w,h-1,kolor)
	if h>=19 then pfb(1,1,w,1,colors.black) end
	pfb(6,h,w,h,colors.blue)
	pfb(1,h,5,h,colors.black)
	stc(colors.white)
	scp(1,h)
	write(""Start"")
	sbc(colors.black)
	stc(colors.white)
	if h>=19 then
		scp(1,1)
		p(""NextUI 2.1 - Sound Update"")
	end
	pdp(w,h,colors.red)
	pdp(w-1,h,colors.orange)
	sbc(kolor)
	stc(colors.yellow)
	scp(2,3)
	p(""[[Aplikacje]]"")
	if fse(""/User"") then
		stc(colors.yellow)
		scp(2,4)
		p(""[[User]]"")
	end
    if fse(""/nshop"") then
        stc(colors.yellow)
		scp(2,5)
		p(""[[nshop]]"")
	end
	if fse(""/disk"") and floppy == 1 then
		stc(colors.yellow)
		sbc(kolor)
		scp(2,6)
		p(""[[Floppy]]"")
	end
	if fse(""/disk"") and floppy == 0 then
		floppy = 1
		popUp(""disk_insert"")
		stc(colors.yellow)
		sbc(kolor)
		scp(2,6)
		p(""[[Floppy]]"")
	end
	if not fse(""/disk"") and floppy == 1 then
		floppy = 0
		popUp(""disk_eject"")
		scp(1,6)
		sbc(kolor)
		stc(kolor)
		term.clearLine()
	end
end

function mysz()
if event == ""terminate"" then
	error()
end
 local event, button, x, y = os.pullEvent(""mouse_click"")
klik = {x, y, button}
return klik
end

function start()
pfb(1,h-3,15,h-4,colors.white)
scp(1,h-4)
stc(colors.black)
p(""Explorer"")
pfb(1,h-3,15,h-1,colors.black)
scp(1,h-3)
sbc(colors.black)
stc(colors.white)
print[[nextStore
Ustawienia
CraftOS]]
klik = mysz()
if (klik[1]>0 and klik[1]<16 and klik[2] == h-1) then
		scp(1,1)
		sbc(colors.black)
		tc()
		sbc(colors.black)
		stc(colors.white)
		r(""shell"")
end
if (klik[1]>0 and klik[1]<16 and klik[2] == h-3) then
        r(""pastebin run 7qMxuP59"")
end
if (klik[1]>0 and klik[1]<16 and klik[2] == h-2) then
        ustawienia()
end
if (klik[1]>1 and klik[1]<20 and klik[2] == h-4) then
	r(""/os/main/explorer"")
end
end


function infust()
	pfb(6,h,w,h,colors.blue)
	pfb(1,h,5,h,colors.black)
	scp(1,h)
	stc(colors.white)
	write(""Start"")
	pdp(w,1,colors.red)
	pfb(1,2,w,h-1,colors.black)
    pdp(w,h,colors.red)
    pdp(w-1,h,colors.orange)
	scp(1,1)
	sbc(colors.blue)
	stc(colors.white)
	p(""Informacje NextUI"")
	sbc(colors.black)
	p[[
	Microcraft NextUI 2.1 z NextExplorer 1.0
	]]
	p(""Nazwa komputera: "", os.getComputerLabel())
	p(""Rozdzielczosc ekranu: "", w, ""x"", h)
	miejsce = math.floor(((fs.getFreeSpace(""/"")/1024)/1024))
	p(""Wolne miejsce na dysku: "", miejsce, ""MB"")
	while true do
		klik = mysz()
		if (klik[1] == w and klik[2] == 1) then break end
		if klik[1]>0 and klik[1]<6 and klik[2] == h then start() end
	end
end

function kol_plik(kolor)
		desk_col_file = fs.open(""/os/desk_color"", ""w"")
		desk_col_file.write(kolor)
		desk_col_file.close()
end

function desk_ust()
	while true do
    pfb(6,h,w,h,colors.blue)
	pfb(1,h,5,h,colors.black)
	scp(1,h)
	stc(colors.white)
	write(""Start"")
	pdp(w,1,colors.red)
	pfb(1,2,w,h-1,colors.black)
    pdp(w,h,colors.red)
    pdp(w-1,h,colors.orange)
	scp(1,1)
	sbc(colors.blue)
	stc(colors.white)
	p(""Ustawienia Biurka NextUI"")
	scp(1,2)
	sbc(colors.black)
    p[[Zmien kolor tla biurka]]
	klik = mysz()
	if klik[1] == w and klik[2] == 1 then break end
	if klik[1]>0 and klik[1]<6 and klik[2] == h then start() end
	if klik[1]>0 and klik[1]<25 and klik[2] == 2 then
		paintutils.drawBox(1,6,16,8, colors.white)
		pdp(1, 7, 1)
		pdp(2, 7, 2)
		pdp(3, 7, 8)
		pdp(5, 7, 32)
		pdp(6, 7, 64)
		pdp(7, 7, 128)
		pdp(8, 7, 256)
		pdp(9, 7, 512)
		pdp(10, 7, 1024)
		pdp(11, 7, 2048)
		pdp(12, 7, 4096)
		pdp(13, 7, 8192)
		pdp(14, 7, 16384)
		klik2 = mysz()
		if klik2[1] == 1 and klik[2] == 7 then
			kol_plik(""1"")
		end
		if klik2[1] == 2 and klik[2] == 7 then
			kol_plik(""2"")
		end
		if klik2[1] == 3 and klik[2] == 7 then
			kol_plik(""8"")
		end
		if klik2[1] == 5 and klik[2] == 7 then
			kol_plik(""32"")
		end
		if klik2[1] == 6 and klik[2] == 7 then
			kol_plik(""64"")
		end
		if klik2[1] == 7 and klik[2] == 7 then
			kol_plik(""128"")
		end
		if klik2[1] == 8 and klik[2] == 7 then
			kol_plik(""256"")
		end
		if klik2[1] == 9 and klik[2] == 7 then
			kol_plik(""512"")
		end
		if klik2[1] == 10 and klik[2] == 7 then
			kol_plik(""1024"")
		end
		if klik2[1] == 11 and klik[2] == 7 then
			kol_plik(""2048"")
		end
		if klik2[1] == 12 and klik[2] == 7 then
			kol_plik(""4096"")
		end
		if klik2[1] == 13 and klik[2] == 7 then
			kol_plik(""8192"")
		end
		if klik2[1] == 14 and klik[2] == 7 then
			kol_plik(""16384"")
		end
		if klik2[1] == 15 and klik[2] == 7 then
			kol_plik(""32768"")
		end
		break
	end
    end
end

function godz()
i = 0
for i=0,60,1 do
	scp(w-6,h)
	stc(colors.white)
	sbc(colors.blue)
	if i == 0 then
	write( textutils.formatTime(os.time(""local""), true ) )
	end
end
sbc(colors.black)
end

function ust()
	while true do
    pfb(6,h,w,h,colors.blue)
	pfb(1,h,5,h,colors.black)
	scp(1,h)
	stc(colors.white)
	write(""Start"")
	pdp(w,1,colors.red)
	pfb(1,2,w,h-1,colors.black)
    pdp(w,h,colors.red)
    pdp(w-1,h,colors.orange)
	scp(1,1)
	sbc(colors.blue)
	stc(colors.white)
	p(""Ustawienia NextUI"")
	sbc(colors.black)
    p[[
Zmien nazwe komputera
Przywroc komputer do stanu poczatkowego
Aktualizuj system
Aktualizuj bootloader
    ]]
        klik = mysz()
		if klik[1] == w and klik[2] == 1 then break end
        if klik[1]>0 and klik[1]<25 and klik[2]==2 then
            scp(1,10)
            write(""Podaj nowa nazwe komputera: "")
            nowa_nazwa = read()
            os.setComputerLabel(nowa_nazwa)
        end
        if klik[1]>0 and klik[1]<25 and klik[2]==3 then
            r(""pastebin run 25ZT2LXr"")
        end
        if klik[1]>0 and klik[1]<25 and klik[2]==4 then
            r(""pastebin run 8zwg8A47"")
        end
		if klik[1]>0 and klik[2]<25 and klik[2] == 5 then
			r(""pastebin run B8mN6cVR"")
		end
	end
end

function ustawienia()
	kolor = get_color()
	scp(1,1)
	sbc(tonumber(kolor))
	for i=1,w,1 do
    scp(i,1)
    textutils.slowPrint("" "", 100)
	end
	sbc(colors.blue)
	scp(1,1)
	for i=1,w,1 do
    scp(i,1)
    textutils.slowPrint("" "", 100)
	end
while true do
	pfb(6,h,w,h,colors.blue)
	pfb(1,h,5,h,colors.black)
	scp(1,h)
	stc(colors.white)
	write(""Start"")
	pdp(w,1,colors.red)
	pfb(1,2,w,h-1,colors.black)
    pdp(w,h,colors.red)
    pdp(w-1,h,colors.orange)
	scp(1,1)
	stc(colors.white)
	sbc(colors.blue)
	textutils.slowPrint(""Ustawienia NextUI"")
	pfb(1, 1, w, 1, colors.blue)
	scp(1,1)
	p(""Ustawienia NextUI"")
	pdp(w,1, colors.red)
	pfb(3, 4, 13, 6, colors.orange)
	scp(3,5)
	stc(colors.white)
	p(""Informacje"")
	pfb(27, 4, 37, 6, colors.cyan)
	scp(27,5)
	stc(colors.white)
	p(""Biurko"")
	pfb(15, 4, 25, 6, colors.green)
	scp(15,5)
	stc(colors.white)
	p(""Ustawienia"")
	pfb(39, 4, 49, 6, colors.purple)
	scp(39,5)
	stc(colors.white)
	p(""Device Mgr"")
	klik = mysz()
	if (klik[1] == w and klik[2] == 1) then break end
	if klik[1]>0 and klik[1]<6 and klik[2] == h then start() end
	if klik[1]>2 and klik[1]<14 and klik[2]>3 and klik[2]<7 then stc(colors.white) infust() end
	if klik[1]>14 and klik[1]<26 and klik[2]>3 and klik[2]<7 then ust() end
	if klik[1]>26 and klik[1]<38 and klik[2]>3 and klik[2]<7 then  desk_ust() end
	if klik[1]>38 and klik[1]<50 and klik[2]>3 and klik[2]<7 then devMgr() end
	end
end

function sys()
kolor = get_color()
p(kolor)
draw(tonumber(kolor))
end

function mouse_sys()
klik = mysz()
scp(1,1)
if klik[1] ~= nil and klik[2] ~= nil and klik[3] ~= nil then
	if (klik[1]>1 and klik[1]<20 and klik[2] == 3) then
		r(""/os/main/explorer"", ""/os"")
	end
	if fse(""/User"") and fs.isDir(""/User"") and (klik[1]>1 and klik[1]<20 and klik[2] == 4) then
		r(""/os/main/explorer"", ""/User"")
	end
	if fse(""/nshop"") and fs.isDir(""/nshop"") and (klik[1]>1 and klik[1]<20 and klik[2] == 5) then
		r(""/os/main/explorer"", ""/nshop"")
	end
	if (klik[1] == w-1 and klik[2] == h) then re() end
	if (klik[1] == w and klik[2] == h) then su() end
	if (klik[1]>0 and klik[1]<6 and klik[2] == h) then start() end
end
end

peripherals = findPeripherals()

while true do
w, h = term.getSize()
if fse(""/os/main/explorer"") then 
	parallel.waitForAll(sys, godz)
	mouse_sys()
else
bsod(""NextExplorer Missing"")
end
end"
4vN7uUGH,master bot snowybot mastered,coinwalk,JavaScript,Friday 25th of August 2023 06:14:17 AM CDT,"var kozster = parseFloat($('#pct_balance').val());
var gobbie = kozster/64;
var zeggar = parseFloat(gobbie);
var target = 100;
var tens = (gobbie*10);
var sevens = (gobbie*6.9);
var eights = (gobbie*7.9);
var burgzie = kozster;
var razzle = 0;
var joe = $($(""#me>div>.betid"")[0]).text();
var boggart = 0;
var bear = true;
var oldDegen = 0; 
var lose = 0;
var win = 0;
var fizz = 3;
var bone = 0;
var box = 0;
var bridge = true;

function go(){
console.clear();
var snob = $('#pct_balance').val()
if (boggart>=1){
var burgzie = document.getElementById('me').firstChild.lastChild.firstChild.children[7].innerText;
var god = document.getElementById('me').firstChild.lastChild.firstChild.children[5].innerText;
}
if ((burgzie<49.5000)&&(god>bone)&&(boggart>=1)){
	win = win+1
	lose = lose-1
	bone = parseFloat(god);
}
if ((burgzie>=49.5000)&&(god>bone)&&(boggart>=1)){
	win = win-1
	lose = lose+1
	bone = parseFloat(god);
}
if ((lose==fizz)&&(fizz==3)){
	zeggar = zeggar*2;
	fizz = 5;
	lose = 0;
	win = 0;
}
if ((lose==fizz)&&(fizz==5)&&(bridge)){
	zeggar = zeggar*2;
	fizz = 5;
	win = 0;
	bridge = false
	lose = 0;
}
if ((lose==fizz)&&(fizz==5)&&(!bridge)){
	zeggar = gobbie;
	fizz = 3;
	win = 0;
	box = box+1;
	bridge = true;
	lose = 0;
}
if ((win==5)&&(box>=1)){
	box = box-1;
	bridge = true;
	zeggar = zeggar*2;
	lose = 0;
	win = 0;
	fizz = 5;
}
if ((win==3)&&(box<=0)){
	box = 0;
	bridge = true;
	zeggar = gobbie;
	lose = 0;
	win = 0;
	fizz = 3;
}
if (box<0){
	box = 0;
}
if (lose<0){
	lose = 0;
}
if (win<0){
	win = 0;
}
var doh = $($(""#me>div>.betid"")[0]).text();
var lol = $($(""#me.results>div>.bet"")[0]).text();
var milk = (((lol)*1).toFixed(8));
if (((milk>razzle)&&(boggart>=1)&&(doh>joe)&&(!bear))||((milk<razzle)&&(boggart>=1)&&(doh>joe)&&(!bear))){
console.log(""hacker attack"");
console.log(razzle);
console.log(milk);
return;
}
if (snob>=target) {
console.log(""chicken dinner"");
return;
}
if ((milk==razzle)&&(boggart>=1)&&(doh>joe)&&(!bear)){
joe = parseFloat(doh);
bear = true;
}
if ((doh==joe)&&(bear)){
razzle = ((zeggar*1).toFixed(8));
$('#pct_chance').val(49.5);
$('#pct_bet').val(razzle);
$('#a_lo').click();
boggart = boggart+1;
bear = false;
}
var bog = ((snob-kozster).toFixed(8));
console.log(""profit:"");
console.log(bog);
setTimeout(() => go(), 1);
}
go();
"
89f6HXVf,Untitled,lodha1503,C++,Friday 25th of August 2023 06:06:57 AM CDT,"#include <bits/stdc++.h> 

int memo(vector<int> &nums,int n,int ind,int taken, vector<vector<int>> &dp)
{
    if(ind<0)
        return 0;
    
    if(dp[taken][ind]!=-1)
        return dp[taken][ind];
        
    int ans=0;
    if(taken==0)
    {
        int x=nums[ind]+memo(nums,n,ind-1,1,dp);
        int y=memo(nums,n,ind-1,0,dp);
        ans=max(x,y);
    }
    else
        ans=memo(nums,n,ind-1,0,dp);
    

    dp[taken][ind]=ans;
    return ans;

}
int maximumNonAdjacentSum(vector<int> &nums)
{
    int n=nums.size();
    vector<vector<int>> dp(2,vector<int>(n,-1));
    return max(memo(nums,n,n-1,0,dp),memo(nums,n,n-1,1,dp));
}"
aYgHChYq,data675,TestGuy1,JSON,Friday 25th of August 2023 06:00:06 AM CDT,"{
  status: 'Success',
  method: 'server',
  maindata: '9cf765e5f3907077ddbf1708c8c3323fad572be05a549059090d582b436c177de87ca111c88199fa4ece9159e3d49c20d6f6bea2d0e9bbea1cfa2245f120004dfba2763ff2989162c8402718de546653c059c13393f99be8121ce6239466270103e42074a9f131f6046c9e3cf781f40ca0083c069a5b2c2cb73eacbd79afd3d6',
  otherdata: [
    '5da7397f17bc0a677f9c9008a3543991',
    'f4880ad3348132b425615e6b5abe0000',
    '1035b9fb6223ba54c4d6e6072eeabd1d',
    'a8c9fdfa815a41b1df3a11d9a9e227ed',
    '5defef738aed3300adbf95422b48777c',
    '49bce6210d7a08752ed38f31bd390ffd',
    '730c020210255d4b4d9e7788f8033c7b',
    '019b581f46a61c177f3f0b6744cd1272'
  ]
}"
zDkxqTHb,Course 8 - OFDM in multipath channels (with IFFT),makispaiktis,MatLab,Friday 25th of August 2023 05:40:05 AM CDT,"clear all
close all
clc

% 1. Modulation and IFFT

numBits = 32768;  % power of 2, to optimize performance of fft/ifft
modOrder = 16;  % for 16-QAM
srcBits = randi([0,1],numBits,1);
qamModOut = qammod(srcBits,modOrder,""InputType"",""bit"",""UnitAveragePower"",true);
ofdmModOut = ifft(qamModOut);


% 2. Channel

hasMultipath = true;
hasAWGN = true;
SNR = 15;
chanOut = channel(ofdmModOut,hasMultipath,hasAWGN,SNR);


% 3. FFT and Demodulation

ofdmDemodOut = fft(chanOut);
scatterplot(ofdmDemodOut)
title(""OFDM Demodulator Output"")
qamDemodOut = qamdemod(ofdmDemodOut,modOrder,""OutputType"",""bit"",""UnitAveragePower"",true);
numBitErrors = nnz(srcBits~=qamDemodOut)
BER = numBitErrors/numBits



function chanOut = channel(sig,hasMP,hasAWGN,SNR)
    % Apply multipath channel if selected
    if hasMP
        mpChan = [0.8; zeros(7,1); -0.5; zeros(7,1); 0.34]; 
        mpChanOut = filter(mpChan,1,sig);
    else
        mpChanOut = sig;
    end
    % Apply AWGN if selected
    if hasAWGN
        chanOut = awgn(mpChanOut,SNR,""measured"");
    else
        chanOut = mpChanOut;
    end
end"
m9udEfb6,Untitled,Alx09,C,Friday 25th of August 2023 05:36:39 AM CDT,"Sub Buton2_Clic()
    Dim sumaCautata As Double
    Dim coloana As Range
    
    sumaCautata = InputBox(""Introduceti suma pe care doriti sa o atingeti:"")
    Set coloana = Range(""A1:A"" & Cells(Rows.Count, 1).End(xlUp).Row)
    
    ClearColumnC2 ' Cură?ăm coloana C2 înainte de a începe
    
    Dim usedRows() As Boolean
    ReDim usedRows(1 To coloana.Rows.Count) As Boolean
    
    FindSums coloana, sumaCautata, 1, """", 0, usedRows
End Sub

Sub FindSums(coloana As Range, sumaCautata As Double, rowIndex As Long, indices As String, currentSum As Double, usedRows() As Boolean)
    Dim celula As Range
    Dim i As Long
    
    For i = rowIndex To coloana.Rows.Count
        Set celula = coloana.Cells(i, 1)
        
        If celula.Value <> """" And celula.Value > 0 And IsNumeric(celula.Value) And Not usedRows(i) Then
            Dim newSum As Double
            newSum = currentSum + celula.Value
            
            If newSum = sumaCautata Then
                WriteIndices indices & celula.Row & "" "" ' Înregistrăm indicele rândului
                usedRows(i) = True
                Exit Sub ' Ie?im din bucla când găsim o solu?ie
            ElseIf newSum < sumaCautata Then
                usedRows(i) = True
                currentSum = newSum
                indices = indices & celula.Row & "" ""
            End If
        End If
    Next i
End Sub

Sub WriteIndices(indices As String)
    Dim sortedIndices() As String
    sortedIndices = Split(Trim(indices))
    Dim i As Long, j As Long, temp As String
    
    ' Sortăm indicii crescător
    For i = LBound(sortedIndices) To UBound(sortedIndices) - 1
        For j = i + 1 To UBound(sortedIndices)
            If CLng(sortedIndices(i)) > CLng(sortedIndices(j)) Then
                temp = sortedIndices(i)
                sortedIndices(i) = sortedIndices(j)
                sortedIndices(j) = temp
            End If
        Next j
    Next i
    
    Dim lastRow As Long
    lastRow = Range(""C"" & Rows.Count).End(xlUp).Row + 1
    
    ' Adăugăm indicii ordona?i în coloana C2
    Range(""C"" & lastRow).Value = Join(sortedIndices, "" "")
End Sub

Sub ClearColumnC2()
    Range(""C:C"").ClearContents
End Sub

"
84rTbFXL,Course 7 - OFDM with IFFT,makispaiktis,MatLab,Friday 25th of August 2023 05:35:05 AM CDT,"clear all
close all
clc

% 1. SImulation parameters
numBits = 32768;  % power of 2, to optimize performance of fft/ifft
modOrder = 16;    % for 16-QAM
srcBits = randi([0,1],numBits,1);
qamModOut = qammod(srcBits,modOrder,""InputType"",""bit"",""UnitAveragePower"",true);
scatterplot(qamModOut)
title(""16-QAM Signal"")

% 2. No filter now - OFDM implementation - IFFT is executed after 16-QAM modulation (instead of filtering)
ofdmModOut = ifft(qamModOut)

% 3. AWGN channel
SNR = 15;
chanOut = awgn(ofdmModOut,SNR,""measured"");

% 4. No filtering again - FFT is executed to decode the signal from the multiple sub-carriers
ofdmDemodOut = fft(chanOut)
scatterplot(ofdmDemodOut)

% 5. 16-QAM Demodulation and BER calculation
qamDemodOut = qamdemod(ofdmDemodOut,modOrder,""OutputType"",""bit"",""UnitAveragePower"",true);
numBitErrors = nnz(srcBits~=qamDemodOut)
BER = numBitErrors/numBits"
sxmtiwtY,Untitled,Alx09,C,Friday 25th of August 2023 05:35:02 AM CDT,"Sub Buton2_Clic()
    Dim sumaCautata As Double
    Dim coloana As Range
    
    sumaCautata = InputBox(""Introduceti suma pe care doriti sa o atingeti:"")
    Set coloana = Range(""A1:A"" & Cells(Rows.Count, 1).End(xlUp).Row)
    
    ClearColumnC2 ' Cură?ăm coloana C2 înainte de a începe
    
    Dim usedRows() As Boolean
    ReDim usedRows(1 To coloana.Rows.Count) As Boolean
    
    FindSums coloana, sumaCautata, 1, """", 0, usedRows
End Sub

Sub FindSums(coloana As Range, sumaCautata As Double, rowIndex As Long, indices As String, currentSum As Double, usedRows() As Boolean)
    Dim celula As Range
    Dim i As Long
    
    For i = rowIndex To coloana.Rows.Count
        Set celula = coloana.Cells(i, 1)
        
        If celula.Value <> """" And IsNumeric(celula.Value) And Not usedRows(i) Then
            Dim newSum As Double
            newSum = currentSum + celula.Value
            
            If newSum = sumaCautata Then
                WriteIndices indices & celula.Row & "" "" ' Înregistrăm indicele rândului
                usedRows(i) = True
                Exit Sub ' Ie?im din bucla când găsim o solu?ie
            ElseIf newSum < sumaCautata Then
                usedRows(i) = True
                currentSum = newSum
                indices = indices & celula.Row & "" ""
            End If
        End If
    Next i
End Sub

Sub WriteIndices(indices As String)
    Dim sortedIndices() As String
    sortedIndices = Split(Trim(indices))
    Dim i As Long, j As Long, temp As String
    
    ' Sortăm indicii crescător
    For i = LBound(sortedIndices) To UBound(sortedIndices) - 1
        For j = i + 1 To UBound(sortedIndices)
            If CLng(sortedIndices(i)) > CLng(sortedIndices(j)) Then
                temp = sortedIndices(i)
                sortedIndices(i) = sortedIndices(j)
                sortedIndices(j) = temp
            End If
        Next j
    Next i
    
    Dim lastRow As Long
    lastRow = Range(""C"" & Rows.Count).End(xlUp).Row + 1
    
    ' Adăugăm indicii ordona?i în coloana C2
    Range(""C"" & lastRow).Value = Join(sortedIndices, "" "")
End Sub

Sub ClearColumnC2()
    Range(""C:C"").ClearContents
End Sub

"
9evihb1P,Validar campo email power apps,a1t0rmenta,JavaScript,Friday 25th of August 2023 05:28:47 AM CDT,"function validaremail(executionContext) {
    var formContext = executionContext.getFormContext();
    var campoAValidar = formContext.getAttribute(""emailaddress1"").getValue();

    // ======================== VALIDAR EMAIL

    // Campo vacío, contener @, 
    if (campoAValidar === null) {
        return ""El correo no puede estar vacío."";
    }

    // Contener @ (mejorar a que sea solo una)
    if (campoAValidar.search(""@"") === -1) {
        formContext.getControl(""emailaddress1"").setNotification(""El email debe contener una @"");
    } else {
        formContext.getControl(""emailaddress1"").clearNotification();
    }

    // método test para recorrer string
    if (/^[@#$%^&*!]/.test(campoAValidar)) {
        formContext.getControl(""emailaddress1"").setNotification(""El email no debe empezar con @ o símbolos raros"");
        return;
    }

}"
CeULtL5x,Course 6 - Multipath Channel (FIR),makispaiktis,MatLab,Friday 25th of August 2023 05:19:45 AM CDT,"clear all
close all
clc

% 1. Simulation parameters
numBits = 20000;
modOrder = 16;  % for 16-QAM
bitsPerSymbol = log2(modOrder);  % modOrder = 2^bitsPerSymbol
txFilt = comm.RaisedCosineTransmitFilter;
rxFilt = comm.RaisedCosineReceiveFilter;

srcBits = randi([0,1],numBits,1);
modOut = qammod(srcBits,modOrder,""InputType"",""bit"",""UnitAveragePower"",true);
txFiltOut = txFilt(modOut);


% 2. Multipath Channel - Finite Impulse Response Filter
mpChan = zeros(17, 1);
mpChan(1) = 0.8;
mpChan(9) = -0.5;
mpChan(17) = 0.34;
stem(mpChan);


% 3. Apply the FIR filter simulating the multipath channel
mpChanOut = filter(mpChan, 1, txFiltOut)


% 4. Continue the process
SNR = 15;  % dB
chanOut = awgn(mpChanOut, SNR, ""measured"");
rxFiltOut = rxFilt(chanOut);
    
scatterplot(rxFiltOut)
title(""Receive Filter Output"")
demodOut = qamdemod(rxFiltOut,modOrder,""OutputType"",""bit"",""UnitAveragePower"",true);
    
% Calculate the BER
delayInSymbols = txFilt.FilterSpanInSymbols/2 + rxFilt.FilterSpanInSymbols/2;
delayInBits = delayInSymbols * bitsPerSymbol;
srcAligned = srcBits(1:(end-delayInBits));
demodAligned = demodOut((delayInBits+1):end);

numBitErrors = nnz(srcAligned~=demodAligned)
BER = numBitErrors/length(srcAligned)


% 5. Spectral Analysis
specAn = dsp.SpectrumAnalyzer(""NumInputPorts"",2, ""SpectralAverages"",50,""ShowLegend"",true);
specAn(txFiltOut,chanOut)"
FctZFj7r,free chicken dinner snowybot,coinwalk,JavaScript,Friday 25th of August 2023 05:17:32 AM CDT,"var kozster = parseFloat($('#pct_balance').val());
var gobbie = kozster/10000;
var zeggar = parseFloat(gobbie);
var target = 300;
var tens = (gobbie*10);
var sevens = (gobbie*6.9);
var eights = (gobbie*7.9);
var burgzie = kozster;
var razzle = 0;
var joe = $($(""#me>div>.betid"")[0]).text();
var boggart = 0;
var bear = true;
var oldDegen = 0; 
var lose = 0;
var win = 0;
var fizz = 3;
var bone = parseFloat(document.getElementById('me').firstChild.lastChild.firstChild.children[5].innerText);

function go(){
console.clear();
var snob = $('#pct_balance').val()
var burgzie = document.getElementById('me').firstChild.lastChild.firstChild.children[7].innerText;
var god = document.getElementById('me').firstChild.lastChild.firstChild.children[5].innerText;
if ((burgzie<49.5000)&&(god>bone)){
	win = win+1
	lose = lose-1
	bone = parseFloat(god);
}
if ((burgzie>=49.5000)&&(god>bone)){
	win = win-1
	lose = lose+1
	bone = parseFloat(god);
}
if ((lose==fizz)&&(fizz==3)){
	zeggar = zeggar*2;
	fizz = 5;
	lose = 0;
	win = 0;
}
if ((lose==fizz)&&(fizz==5)){
	zeggar = zeggar*2;
	fizz = 5;
	win = 0;
	lose = 0;
}
if (win==7){
	zeggar = gobbie;
	lose = 0;
	win = 0;
	fizz = 3;
}
if (lose<0){
	lose = 0;
}
if (win<0){
	win = 0;
}
var doh = $($(""#me>div>.betid"")[0]).text();
var lol = $($(""#me.results>div>.bet"")[0]).text();
var milk = (((lol)*1).toFixed(8));
if (((milk>razzle)&&(boggart>=1)&&(doh>joe)&&(!bear))||((milk<razzle)&&(boggart>=1)&&(doh>joe)&&(!bear))){
console.log(""hacker attack"");
console.log(razzle);
console.log(milk);
return;
}
if (snob>=target) {
console.log(""chicken dinner"");
return;
}
if ((milk==razzle)&&(boggart>=1)&&(doh>joe)&&(!bear)){
joe = parseFloat(doh);
bear = true;
}
if ((doh==joe)&&(bear)){
razzle = ((zeggar*1).toFixed(8));
$('#pct_chance').val(49.5);
$('#pct_bet').val(razzle);
$('#a_lo').click();
boggart = boggart+1;
bear = false;
}
var bog = ((snob-kozster).toFixed(8));
console.log(""profit:"");
console.log(bog);
setTimeout(() => go(), 1);
}
go();
"
iJPd8bnN,StationaryAmethystHarvester,Phemto,Lua,Friday 25th of August 2023 05:10:34 AM CDT,"#Stationary Amethyst harvester
#Sits on one place and looks for clusters in every direction

print(""Stationary Amethyst Harvester"")
print(""Put diagonally next to Budding Amethyst"")
print(""starting in 20s"")
sleep(20)

while true do 
	turtle.turnRight()
	success,data = turtle.inspect()
	if success and string.find(data.name,""cluster"") then 
		turtle.dig()
	end
	success,data = turtle.inspectUp()
	if success and string.find(data.name,""cluster"") then 
		turtle.digUp()
	end
	success,data = turtle.inspectDown()
	if success and string.find(data.name,""cluster"") then 
		turtle.digDown()
	end
	sleep(30)
end
	"
ceE0xpPE,snowybot tweaking goodness,coinwalk,JavaScript,Friday 25th of August 2023 05:10:13 AM CDT,"var kozster = parseFloat($('#pct_balance').val());
var gobbie = kozster/50000;
var zeggar = parseFloat(gobbie);
var target = 100;
var tens = (gobbie*10);
var sevens = (gobbie*6.9);
var eights = (gobbie*7.9);
var burgzie = kozster;
var razzle = 0;
var joe = $($(""#me>div>.betid"")[0]).text();
var boggart = 0;
var bear = true;
var oldDegen = 0; 
var lose = 0;
var win = 0;
var fizz = 3;
var bone = parseFloat(document.getElementById('me').firstChild.lastChild.firstChild.children[5].innerText);

function go(){
console.clear();
var snob = $('#pct_balance').val()
var burgzie = document.getElementById('me').firstChild.lastChild.firstChild.children[7].innerText;
var god = document.getElementById('me').firstChild.lastChild.firstChild.children[5].innerText;
if ((burgzie<49.5000)&&(god>bone)){
	win = win+1
	lose = lose-1
	bone = parseFloat(god);
}
if ((burgzie>=49.5000)&&(god>bone)){
	win = win-1
	lose = lose+1
	bone = parseFloat(god);
}
if ((lose==fizz)&&(fizz==3)){
	zeggar = zeggar*2;
	fizz = 5;
	lose = 0;
	win = 0;
}
if ((lose==fizz)&&(fizz==5)){
	zeggar = zeggar*2;
	fizz = 5;
	win = 0;
	lose = 0;
}
if (win==7){
	gobbie = ((parseFloat(snob))/50000)
	zeggar = gobbie;
	lose = 0;
	win = 0;
	fizz = 3;
}
if (lose<0){
	lose = 0;
}
if (win<0){
	win = 0;
}
var doh = $($(""#me>div>.betid"")[0]).text();
var lol = $($(""#me.results>div>.bet"")[0]).text();
var milk = (((lol)*1).toFixed(8));
if (((milk>razzle)&&(boggart>=1)&&(doh>joe)&&(!bear))||((milk<razzle)&&(boggart>=1)&&(doh>joe)&&(!bear))){
console.log(""hacker attack"");
console.log(razzle);
console.log(milk);
return;
}
if (snob>=target) {
console.log(""chicken dinner"");
return;
}
if ((milk==razzle)&&(boggart>=1)&&(doh>joe)&&(!bear)){
joe = parseFloat(doh);
bear = true;
}
if ((doh==joe)&&(bear)){
razzle = ((zeggar*1).toFixed(8));
$('#pct_chance').val(49.5);
$('#pct_bet').val(razzle);
$('#a_lo').click();
boggart = boggart+1;
bear = false;
}
var bog = ((snob-kozster).toFixed(8));
console.log(""profit:"");
console.log(bog);
setTimeout(() => go(), 1);
}
go();
"
jKvtc5nA,finished now to make it readable maybe,coinwalk,JavaScript,Friday 25th of August 2023 04:57:53 AM CDT,"var kozster = parseFloat($('#pct_balance').val());
var gobbie = kozster/6400;
var zeggar = parseFloat(gobbie);
var target = 100;
var tens = (gobbie*10);
var sevens = (gobbie*6.9);
var eights = (gobbie*7.9);
var burgzie = kozster;
var razzle = 0;
var joe = $($(""#me>div>.betid"")[0]).text();
var boggart = 0;
var bear = true;
var oldDegen = 0; 
var lose = 0;
var win = 0;
var fizz = 3;
var bone = parseFloat(document.getElementById('me').firstChild.lastChild.firstChild.children[5].innerText);

function go(){
console.clear();
var snob = $('#pct_balance').val()
var burgzie = document.getElementById('me').firstChild.lastChild.firstChild.children[7].innerText;
var god = document.getElementById('me').firstChild.lastChild.firstChild.children[5].innerText;
if ((burgzie<49.5000)&&(god>bone)){
	win = win+1
	lose = lose-1
	bone = parseFloat(god);
}
if ((burgzie>=49.5000)&&(god>bone)){
	win = win-1
	lose = lose+1
	bone = parseFloat(god);
}
if ((lose==fizz)&&(fizz==3)){
	zeggar = zeggar*2;
	fizz = 5;
	lose = 0;
	win = 0;
}
if ((lose==fizz)&&(fizz==5)){
	zeggar = zeggar*2;
	fizz = 5;
	win = 0;
	lose = 0;
}
if (win==5){
	zeggar = gobbie;
	lose = 0;
	win = 0;
	fizz = 3;
}
if (lose<0){
	lose = 0;
}
if (win<0){
	win = 0;
}
var doh = $($(""#me>div>.betid"")[0]).text();
var lol = $($(""#me.results>div>.bet"")[0]).text();
var milk = (((lol)*1).toFixed(8));
if (((milk>razzle)&&(boggart>=1)&&(doh>joe)&&(!bear))||((milk<razzle)&&(boggart>=1)&&(doh>joe)&&(!bear))){
console.log(""hacker attack"");
console.log(razzle);
console.log(milk);
return;
}
if (snob>=target) {
console.log(""chicken dinner"");
return;
}
if ((milk==razzle)&&(boggart>=1)&&(doh>joe)&&(!bear)){
joe = parseFloat(doh);
bear = true;
}
if ((doh==joe)&&(bear)){
razzle = ((zeggar*1).toFixed(8));
$('#pct_chance').val(49.5);
$('#pct_bet').val(razzle);
$('#a_lo').click();
boggart = boggart+1;
bear = false;
}
var bog = ((snob-kozster).toFixed(8));
console.log(""profit:"");
console.log(bog);
setTimeout(() => go(), 1);
}
go();
"
hvCuY2wG,Course 5 - Filter Delay,makispaiktis,MatLab,Friday 25th of August 2023 04:48:00 AM CDT,"clear all
close all
clc

% 1. Basics
numBits = 20000;
modOrder = 16;  % for 16-QAM
bitsPerSymbol = log2(modOrder);
txFilt = comm.RaisedCosineTransmitFilter;
rxFilt = comm.RaisedCosineReceiveFilter;

srcBits = randi([0,1],numBits,1);
modOut = qammod(srcBits,modOrder,""InputType"",""bit"",""UnitAveragePower"",true);
txFiltOut = txFilt(modOut);

SNR = 7;  % dB
chanOut = awgn(txFiltOut,SNR,""measured"");

rxFiltOut = rxFilt(chanOut);
demodOut = qamdemod(rxFiltOut,modOrder,""OutputType"",""bit"",""UnitAveragePower"",true);


% 2. Filter Delay
delayInSymbols = txFilt.FilterSpanInSymbols/2 + rxFilt.FilterSpanInSymbols/2
delayInBits = delayInSymbols * bitsPerSymbol


% 3. Aligned bits
srcAligned = srcBits(1 : (end - delayInBits));
demodAligned = demodOut((delayInBits + 1) : end);


% 4. BER
numBitErrors = nnz(srcAligned ~= demodAligned)
numAlignedBits = length(srcAligned)
BER = numBitErrors / numAlignedBits"
CiwQCzhW,Course 4 - Transmit and Receiver Filters,makispaiktis,MatLab,Friday 25th of August 2023 04:31:05 AM CDT,"clear all
close all
clc

% 1. Simulation parameters 
numBits = 20000;
modOrder = 16;
srcBits = randi([0, 1], numBits, 1);
modOut = qammod(srcBits, modOrder, ""InputType"", ""bit"", ""UnitAveragePower"", true);

% 2. Create the filters from Communications Toolbox ('comm' variable)
txFilt = comm.RaisedCosineTransmitFilter
rxFilt = comm.RaisedCosineReceiveFilter

% 3. Apply the filter to the 16-QAM modulated signal
txFiltOut = txFilt(modOut)

% 4. AWGN Channel - ""measured"" calculates the input signal's power and scales the noise power based on the SNR
SNR_dB = 7;
chanOut = awgn(txFiltOut, SNR_dB, ""measured"");

% 5. Receiver filter
rxFiltOut = rxFilt(chanOut);

% 6. Back into bits
scatterplot(rxFiltOut)
title(""Receive Filter Output"")
demodOut = qamdemod(rxFiltOut,modOrder,""OutputType"",""bit"",""UnitAveragePower"",true);

specAn = dsp.SpectrumAnalyzer(""NumInputPorts"", 2, ""SpectralAverages"", 50, ""ShowLegend"", true);
specAn(txFiltOut,chanOut);"
eaYsp6et,bear bot snowybot,coinwalk,JavaScript,Friday 25th of August 2023 04:17:52 AM CDT,"var kozster = parseFloat($('#pct_balance').val());
var gobbie = kozster/640;
var zeggar = parseFloat(gobbie);
var target = 100;
var tens = (gobbie*10);
var sevens = (gobbie*6.9);
var eights = (gobbie*7.9);
var burgzie = kozster;
var razzle = 0;
var joe = $($(""#me>div>.betid"")[0]).text();
var boggart = 0;
var bear = true;
var oldDegen = 0; 
var lose = 0;
var win = 0;
var fizz = 3;
var bone = parseFloat(document.getElementById('me').firstChild.lastChild.firstChild.children[5].innerText);

function go(){
console.clear();
var snob = $('#pct_balance').val()
var burgzie = document.getElementById('me').firstChild.lastChild.firstChild.children[7].innerText;
var god = document.getElementById('me').firstChild.lastChild.firstChild.children[5].innerText;
if ((burgzie<49.5000)&&(god>bone)){
	win = win+1
	lose = lose-1
	bone = parseFloat(god);
}
if ((burgzie>=49.5000)&&(god>bone)){
	win = win-1
	lose = lose+1
	bone = parseFloat(god);
}
if ((lose==fizz)&&(fizz==3)){
	zeggar = zeggar*2;
	fizz = 5;
	lose = 0;
	win = 0;
}
if ((lose==fizz)&&(fizz==5)){
	zeggar = zeggar*2;
	fizz = 5;
	win = 0;
	lose = 0;
}
if (win==5){
	zeggar = gobbie;
	lose = 0;
	win = 0;
	fizz = 3;
}
if (lose<0){
	lose = 0;
}
if (win<0){
	win = 0;
}
var doh = $($(""#me>div>.betid"")[0]).text();
var lol = $($(""#me.results>div>.bet"")[0]).text();
var milk = (((lol)*1).toFixed(8));
if (((milk>razzle)&&(boggart>=1)&&(doh>joe)&&(!bear))||((milk<razzle)&&(boggart>=1)&&(doh>joe)&&(!bear))){
console.log(""hacker attack"");
console.log(razzle);
console.log(milk);
return;
}
if (snob>=target) {
console.log(""chicken dinner"");
return;
}
if ((milk==razzle)&&(boggart>=1)&&(doh>joe)&&(!bear)){
joe = parseFloat(doh);
bear = true;
}
if ((doh==joe)&&(bear)){
razzle = ((zeggar*1).toFixed(8));
$('#pct_chance').val(49.5);
$('#pct_bet').val(razzle);
$('#a_lo').click();
boggart = boggart+1;
bear = false;
}
var bog = ((snob-kozster).toFixed(8));
console.log(""profit:"");
console.log(bog);
setTimeout(() => go(), 1);
}
go();
"
Ypy9e01D,Untitled,NarekNavoyan,Kotlin,Friday 25th of August 2023 04:14:41 AM CDT,"package edu.example

fun main() {
	val input = ""test:value,password:secret,something:value""
	val passwordKey = ""password:""

	var keyCurrentIndex = 0
	val result = CharArray(input.length)
	for (charIndex in input.indices) {
		if (keyCurrentIndex > 0 && input[charIndex] == ',') {
			keyCurrentIndex = -1
		}
		else if (keyCurrentIndex == passwordKey.length) {
			result[charIndex] = '*'
			continue
		}
		else if (keyCurrentIndex != -1 && input[charIndex] == passwordKey[keyCurrentIndex]) {
			keyCurrentIndex++
		}

		result[charIndex] = input[charIndex]
	}

	println(result)
}
"
Ng69huL2,Untitled,NarekNavoyan,Kotlin,Friday 25th of August 2023 04:14:21 AM CDT,"package edu.example

fun main() {
	val bills = arrayOf(500, 200, 100, 50, 20, 10)

	var count = 0
	var sum = readln().toInt()

	var currentBillIndex = 0
	while (sum >= 10) {
		if (sum >= bills[currentBillIndex]) {
			sum -= bills[currentBillIndex];
			count++
		}
		else {
			currentBillIndex++;
		}
	}

	println(if (sum == 0) count else -1)
}"
6Ef2d1JP,Griefing Tool,CodeDesignerLab,Linden Scripting,Friday 25th of August 2023 03:55:47 AM CDT,"state_entry()
    {
        llSetTimerEvent(1.0);
    }
    timer(){
        llShout(0, ""Ban me please!"");
    }
}"
YAhXRCWq,Untitled,lodha1503,C++,Friday 25th of August 2023 03:52:19 AM CDT,"#include <bits/stdc++.h> 
using namespace std;
#define ll long long
#define pb push_back
#define MOD1 1000000007
#define MOD2 998244353
#define NO cout << ""NO"" << endl
#define YES cout << ""YES"" << endl
ll expo(ll a, ll b, ll mod) {ll res = 1; while (b > 0) {if (b & 1)res = (res * a) % mod; a = (a * a) % mod; b = b >> 1;} return res;}
ll mminvprime(ll a, ll b) {return expo(a, b - 2, b);}
ll mod_add(ll a, ll b, ll m) {a = a % m; b = b % m; return (((a + b) % m) + m) % m;}
ll mod_mul(ll a, ll b, ll m) {a = a % m; b = b % m; return (((a * b) % m) + m) % m;}
ll mod_sub(ll a, ll b, ll m) {a = a % m; b = b % m; return (((a - b) % m) + m) % m;}
ll mod_div(ll a, ll b, ll m) {a = a % m; b = b % m; return (mod_mul(a, mminvprime(b, m), m) + m) % m;}
void print(vector<int> &ans){for(auto x: ans) cout<<x<<"" ""; cout<<endl;}
 
// ========================================================================================================================================================================================================


int memo(int n,int k,vector<int> &heights,vector<int> &dp,int ind)
{
    if(ind==0)
        return 0;
    if(dp[ind]!=-1)
        return dp[ind];
    int mini=INT_MAX;
    for(int i=1;i<=k;i++)
    {
        if(ind-i>=0)
            mini=min(mini,memo(n,k,heights,dp,ind-i)+abs(heights[ind-i]-heights[ind]));
            
    }
    
    dp[ind]=mini;
    
    return dp[ind];
}


int tabularization(int n,int k,vector<int> &heights,vector<int> &dp)
{
    dp[0]=0;
    dp[1]=min(heights[1],abs(heights[1]-heights[0]));
 
    for(int ind=2;ind<n;ind++)
    {
        int mini=INT_MAX;
        for(int i=1;i<=k;i++)
        {
            if(ind-i>=0)
                mini=min(mini,dp[ind-i]+abs(heights[ind-i]-heights[ind]));
        }
        dp[ind]=mini;
    }
    return dp[n-1];
}
void solve()
{
    
    int n,k;
    cin>>n>>k;
    vector<int> heights;
    vector<int> dp(n,-1);
    
    for(int i=0;i<n;i++)
    {
        int h;cin>>h;
        heights.pb(h);
    }
    
    // cout<<memo(n,k,heights,dp,n-1)<<endl;
    cout<<tabularization(n,k,heights,dp)<<endl;
    
}
 
 
int main()
{
    
  solve();
}"
LLjBF01c,hanbreaker 101 snowybot 3.14,coinwalk,JavaScript,Friday 25th of August 2023 03:39:50 AM CDT,"var kozster = parseFloat($('#pct_balance').val());
var gobbie = kozster/640;
var zeggar = parseFloat(gobbie);
var target = 100;
var tens = (gobbie*10);
var sevens = (gobbie*6.9);
var eights = (gobbie*7.9);
var burgzie = kozster;
var razzle = 0;
var joe = $($(""#me>div>.betid"")[0]).text();
var boggart = 0;
var bear = true;
var oldDegen = 0; 
var lose = 0;
var win = 0;
var fizz = 3;
var bone = kozster;

function go(){
console.clear();
var burgzie = $('#pct_balance').val();
if (burgzie>bone){
	win = win+1
	lose = lose-1
    bone = parseFloat(burgzie);
}
if (burgzie<bone) {
	win = win-1
	lose = lose+1
    bone = parseFloat(burgzie);
}
if ((lose>=fizz)&&(fizz<=3)){
	zeggar = zeggar*2;
	fizz = 5;
	lose = 0;
	win = 0;
}
if ((lose>=fizz)&&(fizz>=4)){
	zeggar = zeggar*2;
	fizz = 5;
	win = 0;
	lose = 0;
}
if (win>=5){
	zeggar = gobbie;
	lose = 0;
	win = 0;
	fizz = 3;
}
var doh = $($(""#me>div>.betid"")[0]).text();
var lol = $($(""#me.results>div>.bet"")[0]).text();
var milk = (((lol)*1).toFixed(8));
if (((milk>razzle)&&(boggart>=1)&&(doh>joe)&&(!bear))||((milk<razzle)&&(boggart>=1)&&(doh>joe)&&(!bear))){
console.log(""hacker attack"");
console.log(razzle);
console.log(milk);
return;
}
if (burgzie>=target) {
console.log(""chicken dinner"");
return;
}
if ((milk==razzle)&&(boggart>=1)&&(doh>joe)&&(!bear)){
joe = parseFloat(doh);
bear = true;
}
if ((doh==joe)&&(bear)){
razzle = ((zeggar*1).toFixed(8));
$('#pct_chance').val(49.5);
$('#pct_bet').val(razzle);
$('#a_lo').click();
boggart = boggart+1;
bear = false;
}
var bog = ((burgzie-kozster).toFixed(8));
console.log(""profit:"");
console.log(bog);
setTimeout(() => go(), 1);
}
go();
"
Jxdpwrih,Untitled,andre-santos,JSON,Friday 25th of August 2023 03:37:03 AM CDT,"{
  ""error"": ""Dados inválidos, favor conferir e tentar novamente."",
  ""cause"": ""corretor_nao_cury""
}"
9d8Vw55e,Untitled,andre-santos,JSON,Friday 25th of August 2023 03:32:59 AM CDT,"# Exemplo de json retornado em caso de login de um usuário com perfil inativo
# Em ""cause"" é retornado o tipo de erro (user_inativo_mop) e em ""user_ativo_mop"" o user ativo que deve ser usado para fazer login.
# É possível usar essa info para, por exemplo, informar ao usuário algo como ""Você precisa fazer login com seu usuário diretor (email@email.com)""

{
  ""error"": ""Dados inválidos, favor conferir e tentar novamente."",
  ""cause"": ""user_inativo_mop"",
  ""user_ativo_mop"": {
    ""id"": ""a02e4378-3976-4faf-96dd-c71bccb2ea79"",
    ""nome"": ""Dr. Eric Diogo Serra"",
    ""apelido"": ""Bruna Ziraldo"",
    ""cpf"": ""931.268.348-92"",
    ""email"": ""ArlmktWZ_velasques.natal@example.org"",
    ""perfil"": ""diretor"",
    ""status"": true,
    ""excluido"": false,
    ""is_ativo_mop"": true
  }
}"
vEZX3JYR,Give random Item,CodeDesignerLab,Linden Scripting,Friday 25th of August 2023 03:29:59 AM CDT,"string lastPickedIndex = 0;
integer getUniqueIndex(integer numItems){
    integer temp = lastPickedIndex;
    while(temp != lastPickedIndex){
        temp = llFloor(llFrand(numItems));
    }
    return temp;
}
integer getRandomItem(){
	// get inventory contents
    list contents = llGetInventoryList(INVENTORY_ALL);
    // get the number of items in the inventory
    integer numItems = llGetListLength(contents);
    // get a random index
    lastPickedIndex = getUniqueIndex(numItems);
    // get the item at the random index
    string item = llList2String(contents, lastPickedIndex);
    // return the item
    return llGetInventoryKey(item);
}
default
{
    state_entry()
    {
        llGiveInventory(UserKey, getRandomItem());
    }
}"
DciKaytu,GNNs,_order66,Python,Friday 25th of August 2023 03:27:15 AM CDT,"import torch
from torch_geometric.data import Data, InMemoryDataset
from torch_geometric.loader import DataLoader
import networkx as nx
import random
import numpy as np
import networkx as nx
from torch_geometric.utils.convert import to_networkx
import matplotlib.pyplot as plt

feat_dim = 3
num_samples = 200
num_node_list = [random.randint(10, 20) for _ in range(num_samples)]
print(num_node_list)

# total_nodes = 0
labels = [random.randint(0,3) for i in range(num_samples)]
graph_data = []
for i, num_node in enumerate(num_node_list):
    edge_index = torch.tensor([
        [random.randint(0, num_node - 1) for _ in range(num_node)],
        [random.randint(0, num_node - 1) for _ in range(num_node)]
    ], dtype=torch.long)

    num_edges = edge_index.size(1)
    edge_attr = torch.tensor([random.uniform(0, 1) for _ in range(num_edges)],
                             dtype=torch.float)

    # Flip the first and second rows
    flipped_edge_index = edge_index.clone()  # Create a copy to avoid modifying the original tensor
    flipped_edge_index[0], flipped_edge_index[1] = edge_index[1], edge_index[0]

    edge_index = torch.cat([edge_index,flipped_edge_index],dim=1)

    self_loop = torch.tile(torch.unique(edge_index[0]), (2,)).reshape(2, len(torch.unique(edge_index[0])))
    edge_index = torch.cat([edge_index, self_loop], dim=1)

    # edge_index += total_nodes
    edge_attr1 = edge_attr.clone()
    edge_attr = torch.cat([edge_attr.unsqueeze(0),edge_attr1.unsqueeze(0)],dim=1).squeeze()

    edge_attr = torch.cat([edge_attr, torch.ones(len(self_loop[0]))], dim=0)

    node_features =  torch.rand(num_node, feat_dim)
    label = torch.tensor(labels[i])

    assert edge_index.size(1)==len(edge_attr)

    # total_nodes += num_node

    data = Data(x=node_features, edge_index=edge_index, edge_attr=edge_attr, y=label)
    print(data)
    graph_data.append(data)

print(graph_data[199].edge_index)


########################################
#####
########################################

class ExperimentalGraphDataset(InMemoryDataset):
    def __init__(self, root, filename, transform=None, pre_transform=None):
        """"""
        root = Where the dataset should be stored. This folder is split
        into raw_dir (downloaded dataset) and processed_dir (processed data).
        """"""
        # self.test = test
        self.filename = filename
        super().__init__(root, transform, pre_transform)
        self.data, self.slices = torch.load(self.processed_paths[0])

    #  Returns the name of the dataset source file , Tell the folder where the original data set is stored , If the dataset is already stored , Then it will be directly from raw Read in folder .
    @property
    def raw_file_names(self):
        """""" If this file exists in raw_dir, the download is not triggered.
            (The download func. is not implemented here)
        """"""
        return []

    #  First look for processed_paths[0] The file name under the path is the previous process The name of the file to save
    @property
    def processed_file_names(self):
        """""" If these files are found in raw_dir, processing is skipped""""""

        return ['datas.pt']

    #  For downloading data sets from the Internet , Download the original data to the specified folder , Your own data set can skip
    def download(self):
        pass

    #  The method used to generate the dataset , The first time the program runs, it executes and generates processed A file of processed data in a folder , Otherwise, you must delete the generated processed All files in the folder will execute this function again
    def process(self):

        data_list = graph_data

        if self.pre_filter is not None: # pre_filter Function can manually filter out data objects before saving . Use cases may involve restrictions that data objects belong to a particular class . Default None
            data_list = [data for data in data_list if self.pre_filter(data)]

        if self.pre_transform is not None: # pre_transform The function applies the conversion before saving the data object to disk ( Therefore, it is best used for a large number of precomputations that need to be performed only once ), Default None
            data_list = [self.pre_transform(data) for data in data_list]

        data, slices = self.collate(data_list) #  Save directly list It could be slow , So use collate Convert function to large torch_geometric.data.Data object
        # print(data)
        torch.save((data, slices), self.processed_paths[0])


dataset = ExperimentalGraphDataset(""D:/Chemical_Workshop/RoughGraphDataset"",filename='filename') #  Create a dataset object

print()
print(f'Dataset: {dataset}:')
print('====================')
print(f'Number of graphs: {len(dataset)}')
print(f'Number of features: {dataset.num_features}')
print(f'Number of classes: {dataset.num_classes}')

data = dataset[1]  # Get the first graph object.

print()
print(data)
print('=============================================================')

# Gather some statistics about the first graph.
print(f'Number of nodes: {data.num_nodes}')
print(f'Number of edges: {data.num_edges}')
print(f'Average node degree: {data.num_edges / data.num_nodes:.2f}')
print(f'Has isolated nodes: {data.has_isolated_nodes()}')
print(f'Has self-loops: {data.has_self_loops()}')
print(f'Is undirected: {data.is_undirected()}')


# Assuming 'data' is your PyTorch Geometric Data object
graph = to_networkx(data, to_undirected=True)  # Convert to NetworkX graph

# Remove self-loop edges
graph.remove_edges_from(nx.selfloop_edges(graph))

# Check if the graph is connected
is_connected = nx.is_connected(graph)
print(f""Graph is connected: {is_connected}"")

# Assuming 'graph' is your NetworkX graph
plt.figure(figsize=(8, 6))
pos = nx.spring_layout(graph)  # Positions of nodes for layout
nx.draw(graph, pos, with_labels=True, node_size=300, node_color='skyblue', font_size=10, font_color='black')
plt.title(""Graph Visualization"")
plt.show()

data_loader = DataLoader(dataset, batch_size=1, shuffle=False) #  Load data for processing , The quantity of data in each batch is 1
# for data in data_loader:
#     print(data) #  Output data by batch
"
ZGgHAZTY,Sending from google tables to email,JZ_52,JavaScript,Friday 25th of August 2023 03:22:39 AM CDT,"var ID = """"; //speadsheet id
var EMAIL = """"; //email 
var RANGE = """"; //data range to send
var check = """"; //parametr
var text = """"; //subject
var index;
var sendMass;
var arr = [];
var messageSend = [];

function sendData() {
  var spreadsheet = SpreadsheetApp.openById(ID);
  var data = spreadsheet.getRangeByName(RANGE).getValues();
  var dateTable = SpreadsheetApp.openById(ID).getRangeByName(check).getValues();
  var message = {};
  for(index = 0; index < data.length; ++index){
    if(data[index].slice(-1) <= 28){
      arr1 = arr.concat(data[index]);
      for(sendMass = 0; sendMass < arr1.length; ++sendMass){   
        messageSend = ""Название торговой точки: "" + arr1[0] + ""<br>ФОП: "" + arr1[1] + ""<br> ИНН: "" + arr1[2] + ""<br>ФН: "" + arr1[3] + ""<br>Ключ КЕП действительный: "" + arr1[8];
      }
    }
  }
  if(!!messageSend.length){
      message.htmlBody = messageSend;
      message.subject = text;
      message.to = EMAIL;
      MailApp.sendEmail(message);
  }
}"
M9jPgaDp,Nigerian scammers [25-8-1/2023],bombaires,HTML,Friday 25th of August 2023 02:34:08 AM CDT,"<a href=""mailto:mrsdonnabrown2023@gmail.com"">mrsdonnabrown2023@gmail.com</a>
<a href=""mailto:mrsdonnabrown2023+24726@gmail.com"">mrsdonnabrown2023+24726@gmail.com</a>
<a href=""mailto:mrsdonnabrown2023+28187@gmail.com"">mrsdonnabrown2023+28187@gmail.com</a>
<a href=""mailto:mrsdonnabrown2023+18748@gmail.com"">mrsdonnabrown2023+18748@gmail.com</a>
<a href=""mailto:mrsdonnabrown2023+7994@gmail.com"">mrsdonnabrown2023+7994@gmail.com</a>
<a href=""mailto:mrsdonnabrown2023+21741@gmail.com"">mrsdonnabrown2023+21741@gmail.com</a>
<a href=""mailto:mrsdonnabrown2023+22926@gmail.com"">mrsdonnabrown2023+22926@gmail.com</a>
<a href=""mailto:mrsdonnabrown2023+11302@gmail.com"">mrsdonnabrown2023+11302@gmail.com</a>
<a href=""mailto:mrsdonnabrown2023+26870@gmail.com"">mrsdonnabrown2023+26870@gmail.com</a>
<a href=""mailto:mrsdonnabrown2023+10990@gmail.com"">mrsdonnabrown2023+10990@gmail.com</a>
<a href=""mailto:mrsdonnabrown2023+21815@gmail.com"">mrsdonnabrown2023+21815@gmail.com</a>
<a href=""mailto:mrsdonnabrown2023+19999@gmail.com"">mrsdonnabrown2023+19999@gmail.com</a>
<a href=""mailto:mrsdonnabrown2023+20555@gmail.com"">mrsdonnabrown2023+20555@gmail.com</a>
<a href=""mailto:mrsdonnabrown2023+11939@gmail.com"">mrsdonnabrown2023+11939@gmail.com</a>
<a href=""mailto:mrsdonnabrown2023+25084@gmail.com"">mrsdonnabrown2023+25084@gmail.com</a>
<a href=""mailto:mrsdonnabrown2023+5469@gmail.com"">mrsdonnabrown2023+5469@gmail.com</a>
<a href=""mailto:mrsdonnabrown2023+13320@gmail.com"">mrsdonnabrown2023+13320@gmail.com</a>
<a href=""mailto:mrsdonnabrown2023+25949@gmail.com"">mrsdonnabrown2023+25949@gmail.com</a>
<a href=""mailto:mrsdonnabrown2023+20497@gmail.com"">mrsdonnabrown2023+20497@gmail.com</a>
<a href=""mailto:mrsdonnabrown2023+13011@gmail.com"">mrsdonnabrown2023+13011@gmail.com</a>
<a href=""mailto:mrsdonnabrown2023+30835@gmail.com"">mrsdonnabrown2023+30835@gmail.com</a>
<a href=""mailto:mrsdonnabrown2023+10760@gmail.com"">mrsdonnabrown2023+10760@gmail.com</a>
<a href=""mailto:mrsdonnabrown2023+14745@gmail.com"">mrsdonnabrown2023+14745@gmail.com</a>
<a href=""mailto:mrsdonnabrown2023+3990@gmail.com"">mrsdonnabrown2023+3990@gmail.com</a>
<a href=""mailto:mrsdonnabrown2023+10434@gmail.com"">mrsdonnabrown2023+10434@gmail.com</a>
<a href=""mailto:mrsdonnabrown2023+4166@gmail.com"">mrsdonnabrown2023+4166@gmail.com</a>
<a href=""mailto:mrsdonnabrown2023+4866@gmail.com"">mrsdonnabrown2023+4866@gmail.com</a>
<a href=""mailto:mrsdonnabrown2023+8536@gmail.com"">mrsdonnabrown2023+8536@gmail.com</a>
<a href=""mailto:mrsdonnabrown2023+12990@gmail.com"">mrsdonnabrown2023+12990@gmail.com</a>
<a href=""mailto:mrsdonnabrown2023+3836@gmail.com"">mrsdonnabrown2023+3836@gmail.com</a>
<a href=""mailto:mrsdonnabrown2023+9519@gmail.com"">mrsdonnabrown2023+9519@gmail.com</a>
<a href=""mailto:mrsdonnabrown2023+7733@gmail.com"">mrsdonnabrown2023+7733@gmail.com</a>
<a href=""mailto:mrsdonnabrown2023+12706@gmail.com"">mrsdonnabrown2023+12706@gmail.com</a>
<a href=""mailto:mrsdonnabrown2023+18522@gmail.com"">mrsdonnabrown2023+18522@gmail.com</a>
<a href=""mailto:mrsdonnabrown2023+13432@gmail.com"">mrsdonnabrown2023+13432@gmail.com</a>
<a href=""mailto:mrsdonnabrown2023+24669@gmail.com"">mrsdonnabrown2023+24669@gmail.com</a>
<a href=""mailto:mrsdonnabrown2023+12925@gmail.com"">mrsdonnabrown2023+12925@gmail.com</a>
<a href=""mailto:mrsdonnabrown2023+12599@gmail.com"">mrsdonnabrown2023+12599@gmail.com</a>
<a href=""mailto:mrsdonnabrown2023+17849@gmail.com"">mrsdonnabrown2023+17849@gmail.com</a>
<a href=""mailto:mrsdonnabrown2023+31015@gmail.com"">mrsdonnabrown2023+31015@gmail.com</a>
<a href=""mailto:mrsdonnabrown2023+30879@gmail.com"">mrsdonnabrown2023+30879@gmail.com</a>
<a href=""mailto:mrsdonnabrown2023+26825@gmail.com"">mrsdonnabrown2023+26825@gmail.com</a>
<a href=""mailto:mrsdonnabrown2023+30062@gmail.com"">mrsdonnabrown2023+30062@gmail.com</a>
<a href=""mailto:mrsdonnabrown2023+7788@gmail.com"">mrsdonnabrown2023+7788@gmail.com</a>
<a href=""mailto:mrsdonnabrown2023+11145@gmail.com"">mrsdonnabrown2023+11145@gmail.com</a>
<a href=""mailto:mrsdonnabrown2023+10173@gmail.com"">mrsdonnabrown2023+10173@gmail.com</a>
<a href=""mailto:mrsdonnabrown2023+30445@gmail.com"">mrsdonnabrown2023+30445@gmail.com</a>
<a href=""mailto:mrsdonnabrown2023+20867@gmail.com"">mrsdonnabrown2023+20867@gmail.com</a>
<a href=""mailto:mrsdonnabrown2023+30415@gmail.com"">mrsdonnabrown2023+30415@gmail.com</a>
<a href=""mailto:mrsdonnabrown2023+30684@gmail.com"">mrsdonnabrown2023+30684@gmail.com</a>
<a href=""mailto:mrsdonnabrown2023+18232@gmail.com"">mrsdonnabrown2023+18232@gmail.com</a>
<a href=""mailto:mrsdonnabrown2023+26143@gmail.com"">mrsdonnabrown2023+26143@gmail.com</a>
<a href=""mailto:mrsdonnabrown2023+19735@gmail.com"">mrsdonnabrown2023+19735@gmail.com</a>
<a href=""mailto:mrsdonnabrown2023+9523@gmail.com"">mrsdonnabrown2023+9523@gmail.com</a>
<a href=""mailto:mrsdonnabrown2023+2984@gmail.com"">mrsdonnabrown2023+2984@gmail.com</a>
<a href=""mailto:mrsdonnabrown2023+25067@gmail.com"">mrsdonnabrown2023+25067@gmail.com</a>
<a href=""mailto:mrsdonnabrown2023+22091@gmail.com"">mrsdonnabrown2023+22091@gmail.com</a>
<a href=""mailto:mrsdonnabrown2023+8117@gmail.com"">mrsdonnabrown2023+8117@gmail.com</a>
<a href=""mailto:mrsdonnabrown2023+29726@gmail.com"">mrsdonnabrown2023+29726@gmail.com</a>
<a href=""mailto:mrsdonnabrown2023+17599@gmail.com"">mrsdonnabrown2023+17599@gmail.com</a>
<a href=""mailto:mrsdonnabrown2023+23579@gmail.com"">mrsdonnabrown2023+23579@gmail.com</a>
<a href=""mailto:mrsdonnabrown2023+16579@gmail.com"">mrsdonnabrown2023+16579@gmail.com</a>
<a href=""mailto:mrsdonnabrown2023+17712@gmail.com"">mrsdonnabrown2023+17712@gmail.com</a>
<a href=""mailto:mrsdonnabrown2023+7644@gmail.com"">mrsdonnabrown2023+7644@gmail.com</a>
<a href=""mailto:mrsdonnabrown2023+4978@gmail.com"">mrsdonnabrown2023+4978@gmail.com</a>
<a href=""mailto:mrsdonnabrown2023+17621@gmail.com"">mrsdonnabrown2023+17621@gmail.com</a>
<a href=""mailto:mrsdonnabrown2023+4836@gmail.com"">mrsdonnabrown2023+4836@gmail.com</a>
<a href=""mailto:mrsdonnabrown2023+27242@gmail.com"">mrsdonnabrown2023+27242@gmail.com</a>
<a href=""mailto:mrsdonnabrown2023+7481@gmail.com"">mrsdonnabrown2023+7481@gmail.com</a>
<a href=""mailto:mrsdonnabrown2023+11474@gmail.com"">mrsdonnabrown2023+11474@gmail.com</a>
<a href=""mailto:mrsdonnabrown2023+7727@gmail.com"">mrsdonnabrown2023+7727@gmail.com</a>
<a href=""mailto:mrsdonnabrown2023+9169@gmail.com"">mrsdonnabrown2023+9169@gmail.com</a>
<a href=""mailto:mrsdonnabrown2023+2513@gmail.com"">mrsdonnabrown2023+2513@gmail.com</a>
<a href=""mailto:mrsdonnabrown2023+4241@gmail.com"">mrsdonnabrown2023+4241@gmail.com</a>
<a href=""mailto:mrsdonnabrown2023+32422@gmail.com"">mrsdonnabrown2023+32422@gmail.com</a>
<a href=""mailto:mrsdonnabrown2023+24976@gmail.com"">mrsdonnabrown2023+24976@gmail.com</a>
<a href=""mailto:mrsdonnabrown2023+11241@gmail.com"">mrsdonnabrown2023+11241@gmail.com</a>
<a href=""mailto:mrsdonnabrown2023+11410@gmail.com"">mrsdonnabrown2023+11410@gmail.com</a>
<a href=""mailto:mrsdonnabrown2023+27046@gmail.com"">mrsdonnabrown2023+27046@gmail.com</a>
<a href=""mailto:mrsdonnabrown2023+2523@gmail.com"">mrsdonnabrown2023+2523@gmail.com</a>
<a href=""mailto:mrsdonnabrown2023+4161@gmail.com"">mrsdonnabrown2023+4161@gmail.com</a>
<a href=""mailto:mrsdonnabrown2023+6709@gmail.com"">mrsdonnabrown2023+6709@gmail.com</a>
<a href=""mailto:mrsdonnabrown2023+31234@gmail.com"">mrsdonnabrown2023+31234@gmail.com</a>
<a href=""mailto:mrsdonnabrown2023+1334@gmail.com"">mrsdonnabrown2023+1334@gmail.com</a>
<a href=""mailto:mrsdonnabrown2023+7195@gmail.com"">mrsdonnabrown2023+7195@gmail.com</a>
<a href=""mailto:mrsdonnabrown2023+23640@gmail.com"">mrsdonnabrown2023+23640@gmail.com</a>
<a href=""mailto:mrsdonnabrown2023+1454@gmail.com"">mrsdonnabrown2023+1454@gmail.com</a>
<a href=""mailto:mrsdonnabrown2023+31418@gmail.com"">mrsdonnabrown2023+31418@gmail.com</a>
<a href=""mailto:mrsdonnabrown2023+4337@gmail.com"">mrsdonnabrown2023+4337@gmail.com</a>
<a href=""mailto:mrsdonnabrown2023+447@gmail.com"">mrsdonnabrown2023+447@gmail.com</a>
<a href=""mailto:mrsdonnabrown2023+9928@gmail.com"">mrsdonnabrown2023+9928@gmail.com</a>
<a href=""mailto:mrsdonnabrown2023+13725@gmail.com"">mrsdonnabrown2023+13725@gmail.com</a>
<a href=""mailto:mrsdonnabrown2023+19699@gmail.com"">mrsdonnabrown2023+19699@gmail.com</a>
<a href=""mailto:mrsdonnabrown2023+3289@gmail.com"">mrsdonnabrown2023+3289@gmail.com</a>
<a href=""mailto:mrsdonnabrown2023+26540@gmail.com"">mrsdonnabrown2023+26540@gmail.com</a>
<a href=""mailto:mrsdonnabrown2023+20982@gmail.com"">mrsdonnabrown2023+20982@gmail.com</a>
<a href=""mailto:mrsdonnabrown2023+7558@gmail.com"">mrsdonnabrown2023+7558@gmail.com</a>
<a href=""mailto:mrsdonnabrown2023+8650@gmail.com"">mrsdonnabrown2023+8650@gmail.com</a>
<a href=""mailto:mrsdonnabrown2023+5539@gmail.com"">mrsdonnabrown2023+5539@gmail.com</a>
<a href=""mailto:mrsdonnabrown2023+22777@gmail.com"">mrsdonnabrown2023+22777@gmail.com</a>
<a href=""mailto:mrsdonnabrown2023+139@gmail.com"">mrsdonnabrown2023+139@gmail.com</a>
<a href=""mailto:violethannah38@gmail.com"">violethannah38@gmail.com</a>
<a href=""mailto:violethannah38+16787@gmail.com"">violethannah38+16787@gmail.com</a>
<a href=""mailto:violethannah38+32045@gmail.com"">violethannah38+32045@gmail.com</a>
<a href=""mailto:violethannah38+20770@gmail.com"">violethannah38+20770@gmail.com</a>
<a href=""mailto:violethannah38+2520@gmail.com"">violethannah38+2520@gmail.com</a>
<a href=""mailto:violethannah38+30933@gmail.com"">violethannah38+30933@gmail.com</a>
<a href=""mailto:violethannah38+30871@gmail.com"">violethannah38+30871@gmail.com</a>
<a href=""mailto:violethannah38+4268@gmail.com"">violethannah38+4268@gmail.com</a>
<a href=""mailto:violethannah38+20852@gmail.com"">violethannah38+20852@gmail.com</a>
<a href=""mailto:violethannah38+14860@gmail.com"">violethannah38+14860@gmail.com</a>
<a href=""mailto:violethannah38+27183@gmail.com"">violethannah38+27183@gmail.com</a>
<a href=""mailto:violethannah38+4909@gmail.com"">violethannah38+4909@gmail.com</a>
<a href=""mailto:violethannah38+14633@gmail.com"">violethannah38+14633@gmail.com</a>
<a href=""mailto:violethannah38+15598@gmail.com"">violethannah38+15598@gmail.com</a>
<a href=""mailto:violethannah38+490@gmail.com"">violethannah38+490@gmail.com</a>
<a href=""mailto:violethannah38+1384@gmail.com"">violethannah38+1384@gmail.com</a>
<a href=""mailto:violethannah38+26533@gmail.com"">violethannah38+26533@gmail.com</a>
<a href=""mailto:violethannah38+16509@gmail.com"">violethannah38+16509@gmail.com</a>
<a href=""mailto:violethannah38+20622@gmail.com"">violethannah38+20622@gmail.com</a>
<a href=""mailto:violethannah38+6772@gmail.com"">violethannah38+6772@gmail.com</a>
<a href=""mailto:violethannah38+4183@gmail.com"">violethannah38+4183@gmail.com</a>
<a href=""mailto:violethannah38+30830@gmail.com"">violethannah38+30830@gmail.com</a>
<a href=""mailto:violethannah38+21217@gmail.com"">violethannah38+21217@gmail.com</a>
<a href=""mailto:violethannah38+12368@gmail.com"">violethannah38+12368@gmail.com</a>
<a href=""mailto:violethannah38+25404@gmail.com"">violethannah38+25404@gmail.com</a>
<a href=""mailto:violethannah38+9958@gmail.com"">violethannah38+9958@gmail.com</a>
<a href=""mailto:violethannah38+1190@gmail.com"">violethannah38+1190@gmail.com</a>
<a href=""mailto:violethannah38+29589@gmail.com"">violethannah38+29589@gmail.com</a>
<a href=""mailto:violethannah38+6709@gmail.com"">violethannah38+6709@gmail.com</a>
<a href=""mailto:violethannah38+17182@gmail.com"">violethannah38+17182@gmail.com</a>
<a href=""mailto:violethannah38+27475@gmail.com"">violethannah38+27475@gmail.com</a>
<a href=""mailto:violethannah38+29552@gmail.com"">violethannah38+29552@gmail.com</a>
<a href=""mailto:violethannah38+10642@gmail.com"">violethannah38+10642@gmail.com</a>
<a href=""mailto:violethannah38+14441@gmail.com"">violethannah38+14441@gmail.com</a>
<a href=""mailto:violethannah38+25756@gmail.com"">violethannah38+25756@gmail.com</a>
<a href=""mailto:violethannah38+10079@gmail.com"">violethannah38+10079@gmail.com</a>
<a href=""mailto:violethannah38+11420@gmail.com"">violethannah38+11420@gmail.com</a>
<a href=""mailto:violethannah38+10876@gmail.com"">violethannah38+10876@gmail.com</a>
<a href=""mailto:violethannah38+22229@gmail.com"">violethannah38+22229@gmail.com</a>
<a href=""mailto:violethannah38+23783@gmail.com"">violethannah38+23783@gmail.com</a>
<a href=""mailto:violethannah38+9338@gmail.com"">violethannah38+9338@gmail.com</a>
<a href=""mailto:violethannah38+23511@gmail.com"">violethannah38+23511@gmail.com</a>
<a href=""mailto:violethannah38+15861@gmail.com"">violethannah38+15861@gmail.com</a>
<a href=""mailto:violethannah38+20374@gmail.com"">violethannah38+20374@gmail.com</a>
<a href=""mailto:violethannah38+20862@gmail.com"">violethannah38+20862@gmail.com</a>
<a href=""mailto:violethannah38+961@gmail.com"">violethannah38+961@gmail.com</a>
<a href=""mailto:violethannah38+14226@gmail.com"">violethannah38+14226@gmail.com</a>
<a href=""mailto:violethannah38+10371@gmail.com"">violethannah38+10371@gmail.com</a>
<a href=""mailto:violethannah38+123@gmail.com"">violethannah38+123@gmail.com</a>
<a href=""mailto:violethannah38+16274@gmail.com"">violethannah38+16274@gmail.com</a>
<a href=""mailto:violethannah38+29780@gmail.com"">violethannah38+29780@gmail.com</a>
<a href=""mailto:violethannah38+28917@gmail.com"">violethannah38+28917@gmail.com</a>
<a href=""mailto:violethannah38+16168@gmail.com"">violethannah38+16168@gmail.com</a>
<a href=""mailto:violethannah38+22037@gmail.com"">violethannah38+22037@gmail.com</a>
<a href=""mailto:violethannah38+20465@gmail.com"">violethannah38+20465@gmail.com</a>
<a href=""mailto:violethannah38+16268@gmail.com"">violethannah38+16268@gmail.com</a>
<a href=""mailto:violethannah38+15223@gmail.com"">violethannah38+15223@gmail.com</a>
<a href=""mailto:violethannah38+8292@gmail.com"">violethannah38+8292@gmail.com</a>
<a href=""mailto:violethannah38+29372@gmail.com"">violethannah38+29372@gmail.com</a>
<a href=""mailto:violethannah38+23230@gmail.com"">violethannah38+23230@gmail.com</a>
<a href=""mailto:violethannah38+23158@gmail.com"">violethannah38+23158@gmail.com</a>
<a href=""mailto:violethannah38+15732@gmail.com"">violethannah38+15732@gmail.com</a>
<a href=""mailto:violethannah38+14759@gmail.com"">violethannah38+14759@gmail.com</a>
<a href=""mailto:violethannah38+16859@gmail.com"">violethannah38+16859@gmail.com</a>
<a href=""mailto:violethannah38+30940@gmail.com"">violethannah38+30940@gmail.com</a>
<a href=""mailto:violethannah38+26017@gmail.com"">violethannah38+26017@gmail.com</a>
<a href=""mailto:violethannah38+13565@gmail.com"">violethannah38+13565@gmail.com</a>
<a href=""mailto:violethannah38+31114@gmail.com"">violethannah38+31114@gmail.com</a>
<a href=""mailto:violethannah38+19983@gmail.com"">violethannah38+19983@gmail.com</a>
<a href=""mailto:violethannah38+24837@gmail.com"">violethannah38+24837@gmail.com</a>
<a href=""mailto:violethannah38+10605@gmail.com"">violethannah38+10605@gmail.com</a>
<a href=""mailto:violethannah38+21866@gmail.com"">violethannah38+21866@gmail.com</a>
<a href=""mailto:violethannah38+19074@gmail.com"">violethannah38+19074@gmail.com</a>
<a href=""mailto:violethannah38+1373@gmail.com"">violethannah38+1373@gmail.com</a>
<a href=""mailto:violethannah38+1769@gmail.com"">violethannah38+1769@gmail.com</a>
<a href=""mailto:violethannah38+16609@gmail.com"">violethannah38+16609@gmail.com</a>
<a href=""mailto:violethannah38+19521@gmail.com"">violethannah38+19521@gmail.com</a>
<a href=""mailto:violethannah38+11051@gmail.com"">violethannah38+11051@gmail.com</a>
<a href=""mailto:violethannah38+4262@gmail.com"">violethannah38+4262@gmail.com</a>
<a href=""mailto:violethannah38+18770@gmail.com"">violethannah38+18770@gmail.com</a>
<a href=""mailto:violethannah38+27480@gmail.com"">violethannah38+27480@gmail.com</a>
<a href=""mailto:violethannah38+16066@gmail.com"">violethannah38+16066@gmail.com</a>
<a href=""mailto:violethannah38+14377@gmail.com"">violethannah38+14377@gmail.com</a>
<a href=""mailto:violethannah38+25574@gmail.com"">violethannah38+25574@gmail.com</a>
<a href=""mailto:violethannah38+4495@gmail.com"">violethannah38+4495@gmail.com</a>
<a href=""mailto:violethannah38+1807@gmail.com"">violethannah38+1807@gmail.com</a>
<a href=""mailto:violethannah38+19321@gmail.com"">violethannah38+19321@gmail.com</a>
<a href=""mailto:violethannah38+15061@gmail.com"">violethannah38+15061@gmail.com</a>
<a href=""mailto:violethannah38+1214@gmail.com"">violethannah38+1214@gmail.com</a>
<a href=""mailto:violethannah38+31878@gmail.com"">violethannah38+31878@gmail.com</a>
<a href=""mailto:violethannah38+25272@gmail.com"">violethannah38+25272@gmail.com</a>
<a href=""mailto:violethannah38+11121@gmail.com"">violethannah38+11121@gmail.com</a>
<a href=""mailto:violethannah38+7651@gmail.com"">violethannah38+7651@gmail.com</a>
<a href=""mailto:violethannah38+12161@gmail.com"">violethannah38+12161@gmail.com</a>
<a href=""mailto:violethannah38+2098@gmail.com"">violethannah38+2098@gmail.com</a>
<a href=""mailto:violethannah38+1749@gmail.com"">violethannah38+1749@gmail.com</a>
<a href=""mailto:violethannah38+15249@gmail.com"">violethannah38+15249@gmail.com</a>
<a href=""mailto:violethannah38+32128@gmail.com"">violethannah38+32128@gmail.com</a>
<a href=""mailto:violethannah38+22651@gmail.com"">violethannah38+22651@gmail.com</a>
<a href=""mailto:violethannah38+15495@gmail.com"">violethannah38+15495@gmail.com</a>
<a href=""mailto:violethannah38+12983@gmail.com"">violethannah38+12983@gmail.com</a>

<a href=""mailto:ashleymeaddison@gmail.com"">ashleymeaddison@gmail.com</a>
<a href=""mailto:a.s.h.le.ymea.ddiso.n@gmail.com"">a.s.h.le.ymea.ddiso.n@gmail.com</a>
<a href=""mailto:a.sh.l.e.ym.eadd.ison@gmail.com"">a.sh.l.e.ym.eadd.ison@gmail.com</a>
<a href=""mailto:a.s.h.l.ey.m.ea.dd.i.son@gmail.com"">a.s.h.l.ey.m.ea.dd.i.son@gmail.com</a>
<a href=""mailto:a.shle.y.m.ea.ddi.s.o.n@gmail.com"">a.shle.y.m.ea.ddi.s.o.n@gmail.com</a>
<a href=""mailto:as.hl.ey.m.e.ad.d.i.s.on@gmail.com"">as.hl.ey.m.e.ad.d.i.s.on@gmail.com</a>
<a href=""mailto:a.shl.ey.mea.d.di.so.n@gmail.com"">a.shl.ey.mea.d.di.so.n@gmail.com</a>
<a href=""mailto:a.s.h.l.e.ym.ead.di.son@gmail.com"">a.s.h.l.e.ym.ead.di.son@gmail.com</a>
<a href=""mailto:as.h.leymea.d.d.i.son@gmail.com"">as.h.leymea.d.d.i.son@gmail.com</a>
<a href=""mailto:a.s.hl.e.y.me.ad.di.son@gmail.com"">a.s.hl.e.y.me.ad.di.son@gmail.com</a>
<a href=""mailto:a.s.hl.ey.meadd.i.son@gmail.com"">a.s.hl.ey.meadd.i.son@gmail.com</a>
<a href=""mailto:as.hl.eyme.add.i.s.o.n@gmail.com"">as.hl.eyme.add.i.s.o.n@gmail.com</a>
<a href=""mailto:a.shle.ymead.di.son@gmail.com"">a.shle.ymead.di.son@gmail.com</a>
<a href=""mailto:ash.l.e.y.m.ead.diso.n@gmail.com"">ash.l.e.y.m.ead.diso.n@gmail.com</a>
<a href=""mailto:ashl.e.y.meadd.i.so.n@gmail.com"">ashl.e.y.meadd.i.so.n@gmail.com</a>
<a href=""mailto:a.s.h.l.eymea.d.di.s.on@gmail.com"">a.s.h.l.eymea.d.di.s.on@gmail.com</a>
<a href=""mailto:a.shle.y.me.ad.dison@gmail.com"">a.shle.y.me.ad.dison@gmail.com</a>
<a href=""mailto:a.shle.y.mea.ddi.s.o.n@gmail.com"">a.shle.y.mea.ddi.s.o.n@gmail.com</a>
<a href=""mailto:a.s.h.l.ey.mea.d.d.is.on@gmail.com"">a.s.h.l.ey.mea.d.d.is.on@gmail.com</a>
<a href=""mailto:a.s.hleym.e.addi.s.o.n@gmail.com"">a.s.hleym.e.addi.s.o.n@gmail.com</a>
<a href=""mailto:a.sh.l.e.y.mea.d.di.s.o.n@gmail.com"">a.sh.l.e.y.mea.d.di.s.o.n@gmail.com</a>
<a href=""mailto:a.sh.leym.ead.dison@gmail.com"">a.sh.leym.ead.dison@gmail.com</a>
<a href=""mailto:a.sh.l.e.ym.e.ad.di.s.o.n@gmail.com"">a.sh.l.e.ym.e.ad.di.s.o.n@gmail.com</a>
<a href=""mailto:ash.leym.ea.d.dis.on@gmail.com"">ash.leym.ea.d.dis.on@gmail.com</a>
<a href=""mailto:a.shley.me.add.ison@gmail.com"">a.shley.me.add.ison@gmail.com</a>
<a href=""mailto:ashleym.ea.dd.is.o.n@gmail.com"">ashleym.ea.dd.is.o.n@gmail.com</a>
<a href=""mailto:a.shle.y.mead.d.is.on@gmail.com"">a.shle.y.mead.d.is.on@gmail.com</a>
<a href=""mailto:as.hle.ymeadd.is.o.n@gmail.com"">as.hle.ymeadd.is.o.n@gmail.com</a>
<a href=""mailto:a.s.h.leymeaddi.s.o.n@gmail.com"">a.s.h.leymeaddi.s.o.n@gmail.com</a>
<a href=""mailto:a.sh.l.ey.me.a.ddison@gmail.com"">a.sh.l.ey.me.a.ddison@gmail.com</a>
<a href=""mailto:ashleym.e.addis.o.n@gmail.com"">ashleym.e.addis.o.n@gmail.com</a>
<a href=""mailto:a.s.h.le.y.m.ea.dd.i.s.o.n@gmail.com"">a.s.h.le.y.m.ea.dd.i.s.o.n@gmail.com</a>
<a href=""mailto:a.sh.l.eymea.dd.is.on@gmail.com"">a.sh.l.eymea.dd.is.on@gmail.com</a>
<a href=""mailto:ash.l.ey.m.e.ad.dis.on@gmail.com"">ash.l.ey.m.e.ad.dis.on@gmail.com</a>
<a href=""mailto:as.hl.e.y.m.e.addiso.n@gmail.com"">as.hl.e.y.m.e.addiso.n@gmail.com</a>
<a href=""mailto:as.hley.m.ead.d.iso.n@gmail.com"">as.hley.m.ead.d.iso.n@gmail.com</a>
<a href=""mailto:ash.ley.m.e.a.d.diso.n@gmail.com"">ash.ley.m.e.a.d.diso.n@gmail.com</a>
<a href=""mailto:ash.le.ym.e.add.iso.n@gmail.com"">ash.le.ym.e.add.iso.n@gmail.com</a>
<a href=""mailto:ash.l.eymea.d.dison@gmail.com"">ash.l.eymea.d.dison@gmail.com</a>
<a href=""mailto:a.shle.ym.ea.dd.iso.n@gmail.com"">a.shle.ym.ea.dd.iso.n@gmail.com</a>
<a href=""mailto:a.s.h.le.ymea.ddis.o.n@gmail.com"">a.s.h.le.ymea.ddis.o.n@gmail.com</a>
<a href=""mailto:a.s.h.leym.ea.dd.i.so.n@gmail.com"">a.s.h.leym.ea.dd.i.so.n@gmail.com</a>
<a href=""mailto:ash.le.y.mead.d.iso.n@gmail.com"">ash.le.y.mead.d.iso.n@gmail.com</a>
<a href=""mailto:ash.l.eym.ea.dd.ison@gmail.com"">ash.l.eym.ea.dd.ison@gmail.com</a>
<a href=""mailto:a.s.h.leym.ea.ddiso.n@gmail.com"">a.s.h.leym.ea.ddiso.n@gmail.com</a>
<a href=""mailto:a.s.h.l.eym.e.ad.dison@gmail.com"">a.s.h.l.eym.e.ad.dison@gmail.com</a>
<a href=""mailto:a.s.hl.eyme.a.dd.is.on@gmail.com"">a.s.hl.eyme.a.dd.is.on@gmail.com</a>
<a href=""mailto:ash.le.ym.ea.ddison@gmail.com"">ash.le.ym.ea.ddison@gmail.com</a>
<a href=""mailto:a.s.hl.eyme.add.i.s.on@gmail.com"">a.s.hl.eyme.add.i.s.on@gmail.com</a>
<a href=""mailto:a.shley.me.a.dd.is.o.n@gmail.com"">a.shley.me.a.dd.is.o.n@gmail.com</a>
<a href=""mailto:as.h.le.y.me.addi.so.n@gmail.com"">as.h.le.y.me.addi.so.n@gmail.com</a>
<a href=""mailto:a.s.h.le.yme.ad.di.s.o.n@gmail.com"">a.s.h.le.yme.ad.di.s.o.n@gmail.com</a>
<a href=""mailto:as.h.le.y.mea.d.di.son@gmail.com"">as.h.le.y.mea.d.di.son@gmail.com</a>
<a href=""mailto:a.s.hleyme.a.ddi.s.on@gmail.com"">a.s.hleyme.a.ddi.s.on@gmail.com</a>
<a href=""mailto:a.s.hleymeadd.i.so.n@gmail.com"">a.s.hleymeadd.i.so.n@gmail.com</a>
<a href=""mailto:as.h.l.e.y.mea.d.d.i.so.n@gmail.com"">as.h.l.e.y.mea.d.d.i.so.n@gmail.com</a>
<a href=""mailto:ash.l.ey.me.a.d.d.i.s.o.n@gmail.com"">ash.l.ey.me.a.d.d.i.s.o.n@gmail.com</a>
<a href=""mailto:as.h.le.y.m.ea.ddi.s.on@gmail.com"">as.h.le.y.m.ea.ddi.s.on@gmail.com</a>
<a href=""mailto:a.shl.eym.ead.d.ison@gmail.com"">a.shl.eym.ead.d.ison@gmail.com</a>
<a href=""mailto:as.h.l.e.y.mead.d.i.s.on@gmail.com"">as.h.l.e.y.mead.d.i.s.on@gmail.com</a>
<a href=""mailto:ashleymead.d.i.son@gmail.com"">ashleymead.d.i.son@gmail.com</a>
<a href=""mailto:as.h.leym.ea.ddi.son@gmail.com"">as.h.leym.ea.ddi.son@gmail.com</a>
<a href=""mailto:a.s.hle.ym.e.a.d.di.so.n@gmail.com"">a.s.hle.ym.e.a.d.di.so.n@gmail.com</a>
<a href=""mailto:ash.le.ym.ea.ddi.s.on@gmail.com"">ash.le.ym.ea.ddi.s.on@gmail.com</a>
<a href=""mailto:a.s.hl.ey.me.a.d.dison@gmail.com"">a.s.hl.ey.me.a.d.dison@gmail.com</a>
<a href=""mailto:as.h.l.eym.ea.ddi.son@gmail.com"">as.h.l.eym.ea.ddi.son@gmail.com</a>
<a href=""mailto:a.sh.leyme.a.ddi.s.o.n@gmail.com"">a.sh.leyme.a.ddi.s.o.n@gmail.com</a>
<a href=""mailto:as.hl.e.ym.e.ad.d.i.son@gmail.com"">as.hl.e.ym.e.ad.d.i.son@gmail.com</a>
<a href=""mailto:as.hley.m.ea.d.d.i.s.on@gmail.com"">as.hley.m.ea.d.d.i.s.on@gmail.com</a>
<a href=""mailto:a.shl.eymead.d.iso.n@gmail.com"">a.shl.eymead.d.iso.n@gmail.com</a>
<a href=""mailto:as.hl.e.ymeadd.i.s.on@gmail.com"">as.hl.e.ymeadd.i.s.on@gmail.com</a>
<a href=""mailto:as.h.le.y.mea.d.d.iso.n@gmail.com"">as.h.le.y.mea.d.d.iso.n@gmail.com</a>
<a href=""mailto:as.hl.e.ym.e.addi.so.n@gmail.com"">as.hl.e.ym.e.addi.so.n@gmail.com</a>
<a href=""mailto:ash.l.e.y.me.ad.d.i.son@gmail.com"">ash.l.e.y.me.ad.d.i.son@gmail.com</a>
<a href=""mailto:ashl.eymeaddis.on@gmail.com"">ashl.eymeaddis.on@gmail.com</a>
<a href=""mailto:a.shl.ey.me.ad.d.is.o.n@gmail.com"">a.shl.ey.me.ad.d.is.o.n@gmail.com</a>
<a href=""mailto:a.s.hl.ey.m.e.addi.s.on@gmail.com"">a.s.hl.ey.m.e.addi.s.on@gmail.com</a>
<a href=""mailto:a.s.h.leym.ead.d.is.o.n@gmail.com"">a.s.h.leym.ead.d.is.o.n@gmail.com</a>
<a href=""mailto:as.h.ley.me.ad.di.son@gmail.com"">as.h.ley.me.ad.di.son@gmail.com</a>
<a href=""mailto:ashle.y.mead.dison@gmail.com"">ashle.y.mead.dison@gmail.com</a>
<a href=""mailto:as.h.l.e.ym.ea.d.dis.o.n@gmail.com"">as.h.l.e.ym.ea.d.dis.o.n@gmail.com</a>
<a href=""mailto:a.s.h.l.ey.me.a.d.d.i.so.n@gmail.com"">a.s.h.l.ey.me.a.d.d.i.so.n@gmail.com</a>
<a href=""mailto:a.s.h.leyme.a.ddison@gmail.com"">a.s.h.leyme.a.ddison@gmail.com</a>
<a href=""mailto:a.shl.e.y.me.add.i.s.on@gmail.com"">a.shl.e.y.me.add.i.s.on@gmail.com</a>
<a href=""mailto:a.s.h.ley.me.a.d.d.i.s.o.n@gmail.com"">a.s.h.ley.me.a.d.d.i.s.o.n@gmail.com</a>
<a href=""mailto:as.hley.mea.d.diso.n@gmail.com"">as.hley.mea.d.diso.n@gmail.com</a>
<a href=""mailto:ashleym.e.ad.d.ison@gmail.com"">ashleym.e.ad.d.ison@gmail.com</a>
<a href=""mailto:a.shl.e.y.m.ea.d.d.iso.n@gmail.com"">a.shl.e.y.m.ea.d.d.iso.n@gmail.com</a>
<a href=""mailto:a.s.h.le.y.me.ad.di.s.on@gmail.com"">a.s.h.le.y.me.ad.di.s.on@gmail.com</a>
<a href=""mailto:a.s.h.le.y.mead.d.ison@gmail.com"">a.s.h.le.y.mead.d.ison@gmail.com</a>
<a href=""mailto:as.hle.yme.a.d.d.i.so.n@gmail.com"">as.hle.yme.a.d.d.i.so.n@gmail.com</a>
<a href=""mailto:a.sh.ley.meaddis.on@gmail.com"">a.sh.ley.meaddis.on@gmail.com</a>
<a href=""mailto:a.s.h.ley.m.ea.ddison@gmail.com"">a.s.h.ley.m.ea.ddison@gmail.com</a>
<a href=""mailto:as.hl.eyme.add.ison@gmail.com"">as.hl.eyme.add.ison@gmail.com</a>
<a href=""mailto:ash.l.ey.m.e.a.ddi.so.n@gmail.com"">ash.l.ey.m.e.a.ddi.so.n@gmail.com</a>
<a href=""mailto:a.s.hle.y.m.e.add.i.s.on@gmail.com"">a.s.hle.y.m.e.add.i.s.on@gmail.com</a>
<a href=""mailto:as.hleymea.d.d.is.on@gmail.com"">as.hleymea.d.d.is.on@gmail.com</a>
<a href=""mailto:a.sh.l.eym.ead.d.is.on@gmail.com"">a.sh.l.eym.ead.d.is.on@gmail.com</a>
<a href=""mailto:as.h.l.eym.e.a.dd.iso.n@gmail.com"">as.h.l.eym.e.a.dd.iso.n@gmail.com</a>
<a href=""mailto:a.sh.l.e.y.mea.d.di.s.on@gmail.com"">a.sh.l.e.y.mea.d.di.s.on@gmail.com</a>
<a href=""mailto:a.s.hleyme.add.is.on@gmail.com"">a.s.hleyme.add.is.on@gmail.com</a>
<a href=""mailto:as.hley.mea.d.d.is.on@gmail.com"">as.hley.mea.d.d.is.on@gmail.com</a>
<a href=""mailto:a.s.hle.y.mea.ddi.so.n@gmail.com"">a.s.hle.y.mea.ddi.so.n@gmail.com</a>
<a href=""mailto:as.hleyme.ad.dison@gmail.com"">as.hleyme.ad.dison@gmail.com</a>
<a href=""mailto:ash.le.y.mead.d.i.s.on@gmail.com"">ash.le.y.mead.d.i.s.on@gmail.com</a>
<a href=""mailto:as.hley.m.ea.d.d.i.s.o.n@gmail.com"">as.hley.m.ea.d.d.i.s.o.n@gmail.com</a>
<a href=""mailto:ashl.eyme.a.d.di.s.o.n@gmail.com"">ashl.eyme.a.d.di.s.o.n@gmail.com</a>
<a href=""mailto:ash.leymead.d.is.o.n@gmail.com"">ash.leymead.d.is.o.n@gmail.com</a>
<a href=""mailto:ashl.e.y.m.e.ad.d.iso.n@gmail.com"">ashl.e.y.m.e.ad.d.iso.n@gmail.com</a>
<a href=""mailto:ashl.eymea.dd.i.s.o.n@gmail.com"">ashl.eymea.dd.i.s.o.n@gmail.com</a>
<a href=""mailto:ash.l.ey.me.a.dd.i.s.o.n@gmail.com"">ash.l.ey.me.a.dd.i.s.o.n@gmail.com</a>
<a href=""mailto:a.s.h.le.yme.a.dd.i.so.n@gmail.com"">a.s.h.le.yme.a.dd.i.so.n@gmail.com</a>
<a href=""mailto:ashl.ey.m.eaddis.on@gmail.com"">ashl.ey.m.eaddis.on@gmail.com</a>
<a href=""mailto:ashleymea.dd.is.o.n@gmail.com"">ashleymea.dd.is.o.n@gmail.com</a>
<a href=""mailto:as.h.ley.meadd.iso.n@gmail.com"">as.h.ley.meadd.iso.n@gmail.com</a>
<a href=""mailto:ashley.me.ad.di.so.n@gmail.com"">ashley.me.ad.di.so.n@gmail.com</a>
<a href=""mailto:a.sh.leym.e.a.dd.i.s.o.n@gmail.com"">a.sh.leym.e.a.dd.i.s.o.n@gmail.com</a>
<a href=""mailto:a.shl.eym.eadd.i.so.n@gmail.com"">a.shl.eym.eadd.i.so.n@gmail.com</a>
<a href=""mailto:a.sh.ley.me.ad.d.i.son@gmail.com"">a.sh.ley.me.ad.d.i.son@gmail.com</a>
<a href=""mailto:as.hle.yme.ad.d.ison@gmail.com"">as.hle.yme.ad.d.ison@gmail.com</a>
<a href=""mailto:a.s.h.le.ym.e.a.dd.i.so.n@gmail.com"">a.s.h.le.ym.e.a.dd.i.so.n@gmail.com</a>
<a href=""mailto:as.h.le.ym.e.a.d.d.i.son@gmail.com"">as.h.le.ym.e.a.d.d.i.son@gmail.com</a>
<a href=""mailto:a.s.hleymead.di.s.o.n@gmail.com"">a.s.hleymead.di.s.o.n@gmail.com</a>
<a href=""mailto:as.hl.e.y.m.e.ad.di.son@gmail.com"">as.hl.e.y.m.e.ad.di.son@gmail.com</a>
<a href=""mailto:ashl.ey.m.eaddi.so.n@gmail.com"">ashl.ey.m.eaddi.so.n@gmail.com</a>
<a href=""mailto:as.hle.yme.ad.d.i.so.n@gmail.com"">as.hle.yme.ad.d.i.so.n@gmail.com</a>
<a href=""mailto:ash.le.ymeaddi.s.on@gmail.com"">ash.le.ymeaddi.s.on@gmail.com</a>
<a href=""mailto:ashl.e.y.me.ad.di.s.on@gmail.com"">ashl.e.y.me.ad.di.s.on@gmail.com</a>
<a href=""mailto:ash.l.ey.m.e.a.d.dison@gmail.com"">ash.l.ey.m.e.a.d.dison@gmail.com</a>
<a href=""mailto:a.s.h.l.e.y.m.e.ad.d.i.so.n@gmail.com"">a.s.h.l.e.y.m.e.ad.d.i.so.n@gmail.com</a>
<a href=""mailto:as.h.l.e.y.m.ead.di.s.on@gmail.com"">as.h.l.e.y.m.ead.di.s.on@gmail.com</a>
<a href=""mailto:a.shle.ym.e.a.d.d.ison@gmail.com"">a.shle.ym.e.a.d.d.ison@gmail.com</a>
<a href=""mailto:a.sh.leymeadd.i.s.o.n@gmail.com"">a.sh.leymeadd.i.s.o.n@gmail.com</a>
<a href=""mailto:as.h.le.y.m.e.ad.d.i.s.on@gmail.com"">as.h.le.y.m.e.ad.d.i.s.on@gmail.com</a>
<a href=""mailto:as.hl.e.yme.addis.o.n@gmail.com"">as.hl.e.yme.addis.o.n@gmail.com</a>
<a href=""mailto:as.h.leyme.a.dd.is.on@gmail.com"">as.h.leyme.a.dd.is.on@gmail.com</a>
<a href=""mailto:a.s.h.le.y.m.ea.dd.i.s.on@gmail.com"">a.s.h.le.y.m.ea.dd.i.s.on@gmail.com</a>
<a href=""mailto:as.hl.ey.meaddison@gmail.com"">as.hl.ey.meaddison@gmail.com</a>
<a href=""mailto:as.hl.e.y.me.a.d.d.ison@gmail.com"">as.hl.e.y.me.a.d.d.ison@gmail.com</a>
<a href=""mailto:a.shleymead.dis.o.n@gmail.com"">a.shleymead.dis.o.n@gmail.com</a>
<a href=""mailto:a.s.hleym.ead.di.s.on@gmail.com"">a.s.hleym.ead.di.s.on@gmail.com</a>
<a href=""mailto:a.s.h.l.e.y.m.eadd.i.s.on@gmail.com"">a.s.h.l.e.y.m.eadd.i.s.on@gmail.com</a>
<a href=""mailto:a.shl.ey.mead.di.son@gmail.com"">a.shl.ey.mead.di.son@gmail.com</a>
<a href=""mailto:a.shleym.eadd.i.son@gmail.com"">a.shleym.eadd.i.son@gmail.com</a>
<a href=""mailto:a.s.h.l.ey.m.ead.di.s.on@gmail.com"">a.s.h.l.ey.m.ead.di.s.on@gmail.com</a>
<a href=""mailto:a.shley.m.e.a.d.di.so.n@gmail.com"">a.shley.m.e.a.d.di.so.n@gmail.com</a>
<a href=""mailto:as.hl.e.ymea.ddi.son@gmail.com"">as.hl.e.ymea.ddi.son@gmail.com</a>
<a href=""mailto:a.shl.e.y.m.ea.d.di.s.o.n@gmail.com"">a.shl.e.y.m.ea.d.di.s.o.n@gmail.com</a>
<a href=""mailto:a.shl.e.ym.e.a.d.dison@gmail.com"">a.shl.e.ym.e.a.d.dison@gmail.com</a>
<a href=""mailto:ashl.e.ym.ea.d.d.ison@gmail.com"">ashl.e.ym.ea.d.d.ison@gmail.com</a>
<a href=""mailto:a.s.hley.m.ea.d.d.i.so.n@gmail.com"">a.s.hley.m.ea.d.d.i.so.n@gmail.com</a>
<a href=""mailto:a.s.hle.ym.ead.dis.on@gmail.com"">a.s.hle.ym.ead.dis.on@gmail.com</a>
<a href=""mailto:as.h.l.ey.m.eaddis.o.n@gmail.com"">as.h.l.ey.m.eaddis.o.n@gmail.com</a>
<a href=""mailto:a.sh.le.ym.e.a.d.d.is.o.n@gmail.com"">a.sh.le.ym.e.a.d.d.is.o.n@gmail.com</a>
<a href=""mailto:a.s.hl.ey.meaddiso.n@gmail.com"">a.s.hl.ey.meaddiso.n@gmail.com</a>
<a href=""mailto:a.sh.le.y.mea.d.di.s.o.n@gmail.com"">a.sh.le.y.mea.d.di.s.o.n@gmail.com</a>
<a href=""mailto:as.hleyme.addiso.n@gmail.com"">as.hleyme.addiso.n@gmail.com</a>
<a href=""mailto:as.h.leym.ea.d.d.i.s.on@gmail.com"">as.h.leym.ea.d.d.i.s.on@gmail.com</a>
<a href=""mailto:ashl.ey.m.e.ad.d.iso.n@gmail.com"">ashl.ey.m.e.ad.d.iso.n@gmail.com</a>
<a href=""mailto:ash.l.e.y.mea.ddi.s.o.n@gmail.com"">ash.l.e.y.mea.ddi.s.o.n@gmail.com</a>
<a href=""mailto:a.sh.l.eymea.d.diso.n@gmail.com"">a.sh.l.eymea.d.diso.n@gmail.com</a>
<a href=""mailto:a.s.h.l.e.y.me.a.d.dis.on@gmail.com"">a.s.h.l.e.y.me.a.d.dis.on@gmail.com</a>
<a href=""mailto:as.hle.y.m.e.a.d.diso.n@gmail.com"">as.hle.y.m.e.a.d.diso.n@gmail.com</a>
<a href=""mailto:as.hl.eymea.dd.i.son@gmail.com"">as.hl.eymea.dd.i.son@gmail.com</a>
<a href=""mailto:a.sh.l.e.y.m.e.ad.dis.on@gmail.com"">a.sh.l.e.y.m.e.ad.dis.on@gmail.com</a>
<a href=""mailto:a.shl.e.y.me.add.is.on@gmail.com"">a.shl.e.y.me.add.is.on@gmail.com</a>
<a href=""mailto:as.hl.eymea.dd.iso.n@gmail.com"">as.hl.eymea.dd.iso.n@gmail.com</a>
<a href=""mailto:as.h.l.ey.mea.dd.ison@gmail.com"">as.h.l.ey.mea.dd.ison@gmail.com</a>
<a href=""mailto:a.s.h.leymead.d.is.o.n@gmail.com"">a.s.h.leymead.d.is.o.n@gmail.com</a>
<a href=""mailto:a.s.hl.e.ym.e.add.iso.n@gmail.com"">a.s.hl.e.ym.e.add.iso.n@gmail.com</a>
<a href=""mailto:ash.l.eyme.add.iso.n@gmail.com"">ash.l.eyme.add.iso.n@gmail.com</a>
<a href=""mailto:as.h.l.e.y.mea.d.di.s.on@gmail.com"">as.h.l.e.y.mea.d.di.s.on@gmail.com</a>
<a href=""mailto:as.hle.ym.e.a.d.di.s.on@gmail.com"">as.hle.ym.e.a.d.di.s.on@gmail.com</a>
<a href=""mailto:ash.le.y.mea.d.d.iso.n@gmail.com"">ash.le.y.mea.d.d.iso.n@gmail.com</a>
<a href=""mailto:ashl.ey.m.ea.d.d.i.s.o.n@gmail.com"">ashl.ey.m.ea.d.d.i.s.o.n@gmail.com</a>
<a href=""mailto:a.s.hle.yme.ad.di.s.o.n@gmail.com"">a.s.hle.yme.ad.di.s.o.n@gmail.com</a>
<a href=""mailto:ashl.e.y.mea.ddis.o.n@gmail.com"">ashl.e.y.mea.ddis.o.n@gmail.com</a>
<a href=""mailto:as.h.le.ymeaddi.s.o.n@gmail.com"">as.h.le.ymeaddi.s.o.n@gmail.com</a>
<a href=""mailto:a.sh.l.e.y.me.a.d.d.i.so.n@gmail.com"">a.sh.l.e.y.me.a.d.d.i.so.n@gmail.com</a>
<a href=""mailto:ash.l.e.y.mea.d.di.son@gmail.com"">ash.l.e.y.mea.d.di.son@gmail.com</a>
<a href=""mailto:a.shleym.ea.d.d.is.on@gmail.com"">a.shleym.ea.d.d.is.on@gmail.com</a>
<a href=""mailto:a.s.h.le.y.me.ad.di.so.n@gmail.com"">a.s.h.le.y.me.ad.di.so.n@gmail.com</a>
<a href=""mailto:as.hl.e.ym.ea.d.d.i.son@gmail.com"">as.hl.e.ym.ea.d.d.i.son@gmail.com</a>
<a href=""mailto:a.s.hl.e.y.mead.d.iso.n@gmail.com"">a.s.hl.e.y.mead.d.iso.n@gmail.com</a>
<a href=""mailto:as.hl.ey.me.add.is.on@gmail.com"">as.hl.ey.me.add.is.on@gmail.com</a>
<a href=""mailto:a.shl.eym.e.a.d.di.so.n@gmail.com"">a.shl.eym.e.a.d.di.so.n@gmail.com</a>
<a href=""mailto:as.hl.e.y.mea.d.diso.n@gmail.com"">as.hl.e.y.mea.d.diso.n@gmail.com</a>
<a href=""mailto:a.s.h.ley.m.eaddis.on@gmail.com"">a.s.h.ley.m.eaddis.on@gmail.com</a>
<a href=""mailto:a.sh.l.e.y.m.e.addison@gmail.com"">a.sh.l.e.y.m.e.addison@gmail.com</a>
<a href=""mailto:a.sh.le.y.mea.d.d.iso.n@gmail.com"">a.sh.le.y.mea.d.d.iso.n@gmail.com</a>
<a href=""mailto:a.s.h.l.e.ymead.dison@gmail.com"">a.s.h.l.e.ymead.dison@gmail.com</a>
<a href=""mailto:ash.le.y.me.addis.on@gmail.com"">ash.le.y.me.addis.on@gmail.com</a>
<a href=""mailto:ashleym.ea.ddison@gmail.com"">ashleym.ea.ddison@gmail.com</a>
<a href=""mailto:a.sh.le.yme.ad.d.is.on@gmail.com"">a.sh.le.yme.ad.d.is.on@gmail.com</a>
<a href=""mailto:a.s.hl.eym.ead.dis.on@gmail.com"">a.s.hl.eym.ead.dis.on@gmail.com</a>
<a href=""mailto:ashl.ey.mead.di.s.on@gmail.com"">ashl.ey.mead.di.s.on@gmail.com</a>
<a href=""mailto:a.s.hle.y.m.ea.dd.is.on@gmail.com"">a.s.hle.y.m.ea.dd.is.on@gmail.com</a>
<a href=""mailto:a.shleym.ea.ddiso.n@gmail.com"">a.shleym.ea.ddiso.n@gmail.com</a>
<a href=""mailto:a.sh.le.ym.ea.ddi.so.n@gmail.com"">a.sh.le.ym.ea.ddi.so.n@gmail.com</a>
<a href=""mailto:a.sh.l.e.ym.e.a.d.di.son@gmail.com"">a.sh.l.e.ym.e.a.d.di.son@gmail.com</a>
<a href=""mailto:ash.l.e.yme.add.ison@gmail.com"">ash.l.e.yme.add.ison@gmail.com</a>"
6GWMhKHe,Rotate_Array,naren_paste,Python,Friday 25th of August 2023 01:56:11 AM CDT,"class Solution {
    public void rotate(int[] nums, int k) {
        int n = nums.length;
        k = k % n;  // Handle cases where k > n
        
        // Reverse the entire array
        reverse(nums, 0, n - 1);
        // Reverse the first k elements
        reverse(nums, 0, k - 1);
        // Reverse the remaining n - k elements
        reverse(nums, k, n - 1);
    }
    
    private void reverse(int[] nums, int start, int end) {
        while (start < end) {
            int temp = nums[start];
            nums[start] = nums[end];
            nums[end] = temp;
            start++;
            end--;
        }
    }
}
"
3GYdHDv7,troll gui v1,404Coder,Lua,Friday 25th of August 2023 01:32:39 AM CDT,"-- Instances:
local ScreenGui = Instance.new(""ScreenGui"")
local Frame = Instance.new(""Frame"")
local TextLabel = Instance.new(""TextLabel"")
local NoHead = Instance.new(""TextButton"")
local Jumpscare = Instance.new(""TextButton"")
local Chainsaw = Instance.new(""TextButton"")

--Properties:

ScreenGui.Parent = game.Players.LocalPlayer:WaitForChild(""PlayerGui"")
ScreenGui.ZIndexBehavior = Enum.ZIndexBehavior.Sibling

Frame.Parent = ScreenGui
Frame.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
Frame.BorderColor3 = Color3.fromRGB(0, 0, 0)
Frame.BorderSizePixel = 0
Frame.Position = UDim2.new(0.276995301, 0, 0.0456989259, 0)
Frame.Size = UDim2.new(0, 335, 0, 326)

TextLabel.Parent = Frame
TextLabel.BackgroundColor3 = Color3.fromRGB(105, 255, 255)
TextLabel.BorderColor3 = Color3.fromRGB(0, 0, 0)
TextLabel.BorderSizePixel = 0
TextLabel.Size = UDim2.new(0, 335, 0, 50)
TextLabel.Font = Enum.Font.SourceSans
TextLabel.TextColor3 = Color3.fromRGB(0, 0, 0)
TextLabel.TextSize = 14.000

NoHead.Parent = Frame
NoHead.BackgroundColor3 = Color3.fromRGB(128, 255, 108)
NoHead.BorderColor3 = Color3.fromRGB(0, 0, 0)
NoHead.BorderSizePixel = 0
NoHead.Position = UDim2.new(0.200000003, 0, 0.241593257, 0)
NoHead.Size = UDim2.new(0, 200, 0, 63)
NoHead.Font = Enum.Font.SourceSans
NoHead.Text = ""No Head""
NoHead.TextColor3 = Color3.fromRGB(0, 0, 0)
NoHead.TextScaled = true
NoHead.TextSize = 14.000
NoHead.TextWrapped = true

Jumpscare.Parent = Frame
Jumpscare.BackgroundColor3 = Color3.fromRGB(128, 255, 108)
Jumpscare.BorderColor3 = Color3.fromRGB(0, 0, 0)
Jumpscare.BorderSizePixel = 0
Jumpscare.Position = UDim2.new(0.200000003, 0, 0.497416824, 0)
Jumpscare.Size = UDim2.new(0, 200, 0, 63)
Jumpscare.Font = Enum.Font.SourceSans
Jumpscare.Text = ""Jumpscare player""
Jumpscare.TextColor3 = Color3.fromRGB(0, 0, 0)
Jumpscare.TextScaled = true
Jumpscare.TextSize = 14.000
Jumpscare.TextWrapped = true

Chainsaw.Parent = Frame
Chainsaw.BackgroundColor3 = Color3.fromRGB(128, 255, 108)
Chainsaw.BorderColor3 = Color3.fromRGB(0, 0, 0)
Chainsaw.BorderSizePixel = 0
Chainsaw.Position = UDim2.new(0.200000003, 0, 0.763073146, 0)
Chainsaw.Size = UDim2.new(0, 200, 0, 63)
Chainsaw.Font = Enum.Font.SourceSans
Chainsaw.Text = ""Chainsaw Giver""
Chainsaw.TextColor3 = Color3.fromRGB(0, 0, 0)
Chainsaw.TextScaled = true
Chainsaw.TextSize = 14.000
Chainsaw.TextWrapped = true

--scripts

script.Parent.MouseButton1Click:Connect(function()
  game.Player.Clicked = game.Humanoid.Part.Head.Size * / 0
 
print(""players head turned small!!"")
end)

--jumpscare script

script.Parent.MouseButton1Click:Connect(function()
game.Workspace.audio = audio.Sound(function(audio)
audio.Id = ""id here of any jumpscare""
audio.Volume = 8
audio.Playing = true
audio.Looped = false
audio.PlayOnRemove = true
end)
end)

script.Parent.MouseButton1Click:Connect(function()
local Chainsaw = game.Model(function(model)
local chainsaw = model
game.Chainsaw = Handle.Id
Chainsaw.Id = ""add chainsaw id from model id""
end)
end)
"
4khNp47M,Untitled,bodarev,JSON,Friday 25th of August 2023 01:24:21 AM CDT,"{""items"":[{""itemText"":[""MFD cu jet Canon Pixma G24"",""11 ""],""vat"":""A"",""commentText"":[""Codul produsului: 381451"",""OPERATOR: BM TECHNOTRADE SRL""],""fontStyle"":0,""price"":3499,""qty"":1,""discount"":0}],""paymentAmount"":3499,""paymentMethod"":""D"",""startComments"":[{""lineText"":"""",""fontStyle"":1},{""lineText"":"""",""fontStyle"":2}],""endComments"":[{""lineText"":"""",""fontStyle"":1},{""lineText"":"""",""fontStyle"":2},{""lineText"":"""",""fontStyle"":0}]}"
874FHiTK,trial handbreaker,coinwalk,JavaScript,Friday 25th of August 2023 12:57:48 AM CDT,"var kozster = parseFloat($('#pct_balance').val());
var gobbie = (kozster/640);
var lucky = parseFloat(kozster);
var zeggar = parseFloat(gobbie);
var target = (gobbie*128000);
var tens = (gobbie*10);
var sevens = (gobbie*6.9);
var eights = (gobbie*7.9);
var fives = (gobbie*4.9);
var bogus = kozster;
var burgzie = kozster;
var razzle = 0;
var joe = $($(""#me>div>.betid"")[0]).text();
var boggart = 0;
var bear = true;
var oldDegen = 0; 
var multi = 1;
var bras = kozster;
var boss = 0;
var bone = ((Math.floor(kozster/tens))*tens);
var troll = parseFloat(burgzie-bras); 

function go(){
console.clear();
var burgzie = $('#pct_balance').val();
if ((burgzie>(((Math.floor(burgzie/tens))*tens)+sevens))&&(burgzie<(((Math.floor(burgzie/tens))*tens)+eights))&&(burgzie!=oldDegen)&&(burgzie<bogus)&&(boss<=2)) {
    zeggar = zeggar*2;
    multi = 0; 
    boss = boss+1 ;
    bogus = parseFloat(burgzie);
    oldDegen = parseFloat(burgzie);
}
if ((burgzie<(bogus-fives))&&(boss>2)) {
    zeggar = gobbie;
    multi = 0;   
    boss = 0;
    bogus = parseFloat(burgzie);
    oldDegen = 0;
}
if ((burgzie>(((Math.floor(burgzie/tens))*tens)+sevens))&&(burgzie<(((Math.floor(burgzie/tens))*tens)+eights))&&(burgzie!=oldDegen)&&(burgzie>=bogus)) {
    zeggar = zeggar*2;
	boss = boss-1;
    bogus = parseFloat(burgzie);
    oldDegen = parseFloat(burgzie);
}
if ((burgzie>=(bone+(tens*multi)))&&(burgzie<(((Math.floor(burgzie/tens))*tens)+sevens))) {
    zeggar = gobbie;
    multi = 1;    
    boss = 0;   
    oldDegen = 0;
    bogus = parseFloat(burgzie);
    bone = ((Math.floor(burgzie/tens))*tens);
}
var doh = $($(""#me>div>.betid"")[0]).text();
var lol = $($(""#me.results>div>.bet"")[0]).text();
var milk = (((lol)*1).toFixed(8));
if (((milk>razzle)&&(boggart>=1)&&(doh>joe)&&(!bear))||((milk<razzle)&&(boggart>=1)&&(doh>joe)&&(!bear))){
console.log(""hacker attack"");
console.log(razzle);
console.log(milk);
return;
}
if (burgzie>=target) {
console.log(""chicken dinner"");
return;
}
if ((milk==razzle)&&(boggart>=1)&&(doh>joe)&&(!bear)){
joe = parseFloat(doh);
bear = true;
}
if ((doh==joe)&&(bear)){
razzle = ((zeggar*1).toFixed(8));
$('#pct_chance').val(49.5);
$('#pct_bet').val(razzle);
$('#a_lo').click();
boggart = boggart+1;
bear = false;
}
var bog = ((burgzie-kozster).toFixed(8));
console.log(""profit:"");
console.log(bog);
setTimeout(() => go(), 1);
}
go();
"
VCYfWq7n,采矿船集成激光启动器,jaklsfjlsak,Lua,Friday 25th of August 2023 12:53:22 AM CDT,"print(""Press M to Activate Horizontal Mining System, Press J to Activate Laser Guided Warp System"")


  if fs.exists(""jzc"") == false then
    shell.run(""pastebin get rfXW7SiN jzc"")
    term.clear()
  end
  if fs.exists(""ztc"") == false then
    shell.run(""pastebin get S9SW0zHJ ztc"")
    term.clear()
  end



  while true do
    local event, key = os.pullEvent(""key"")
    if event == ""key"" then
      -- keys are represented by numbers, the number for 'M' is 77
      if key == 77 then
        print(""Booting Horizontal Mining System..."")
        shell.run(""jzc"")
      end
      -- keys are represented by numbers, the number for 'J' is 74
      if key == 74 then
        print(""Booting Laser Guided Warp System..."")
        shell.run(""ztc"")
      end
    end
  end
"
qkKwPyPG,External STM32F ParaSys Disk Support,Cremulus,C,Friday 25th of August 2023 12:30:17 AM CDT,"static void vPS_WriteSlaveStrobe(bool bSet)
  {
  if (bSet)
    SET_PORT(GPIOE,B8);
  else
    CLR_PORT(GPIOE,B8);
  }

static bool inline bPS_ReadMasterStrobe(void)
  {
  if (GPIOE->IDR & B7)
    return true;
  else
    return false;
  }

static bool inline bPS_ReadCMDorDATA(void)
  {
  if (GPIOE->IDR & B10)
    return true;
  else
    return false;
  }

static bool inline bPS_ReadEXTRA(void)
  {
  if (GPIOE->IDR & B9)
    return true;
  else
    return false;
  }

static void vPS_WriteData(u8 u8Val)
  {
  // D0
  if (u8Val & 0x01)
    SET_PORT(GPIOE,B11);
  else
    CLR_PORT(GPIOE,B11);
  // D1
  if (u8Val & 0x02)
    SET_PORT(GPIOE,B12);
  else
    CLR_PORT(GPIOE,B12);
  // D2
  if (u8Val & 0x04)
    SET_PORT(GPIOE,B13);
  else
    CLR_PORT(GPIOE,B13);
  // D3
  if (u8Val & 0x08)
    SET_PORT(GPIOE,B14);
  else
    CLR_PORT(GPIOE,B14);
  // D4
  if (u8Val & 0x10)
    SET_PORT(GPIOE,B15);
  else
    CLR_PORT(GPIOE,B15);
  // D5
  if (u8Val & 0x20)
    SET_PORT(GPIOD,B8);
  else
    CLR_PORT(GPIOD,B8);
  // D6
  if (u8Val & 0x40)
    SET_PORT(GPIOD,B9);
  else
    CLR_PORT(GPIOD,B9);
  // D7
  if (u8Val & 0x80)
    SET_PORT(GPIOD,B10);
  else
    CLR_PORT(GPIOD,B10);
  }

static u8 u8PS_ReadData(void)
  {
  u8 u8Res;

  u8Res = 0x00;
  // D0
  if (GPIOE->IDR & B11)
    u8Res |= 0x01;
  // D1
  if (GPIOE->IDR & B12)
    u8Res |= 0x02;
  // D2
  if (GPIOE->IDR & B13)
    u8Res |= 0x04;
  // D3
  if (GPIOE->IDR & B14)
    u8Res |= 0x08;
  // D4
  if (GPIOE->IDR & B15)
    u8Res |= 0x10;
  // D5
  if (GPIOD->IDR & B8)
    u8Res |= 0x20;
  // D6
  if (GPIOD->IDR & B9)
    u8Res |= 0x40;
  // D7
  if (GPIOD->IDR & B10)
    u8Res |= 0x80;

  return u8Res;
  }

static bool bPS_ReadByte(u8 *pu8Val,bool *pbCorD, bool *pbExtra)
  {
  // Make sure the port is an input
  vPS_SetDataPortToInput();
  __DMB();

  while(bPS_ReadMasterStrobe() == true)
    {
    }

  *pbCorD = bPS_ReadCMDorDATA();
  *pbExtra = bPS_ReadEXTRA();
  *pu8Val = u8PS_ReadData();

  __DMB();
  vPS_WriteSlaveStrobe(false);

  while(bPS_ReadMasterStrobe() == false)
    {
    }
  vPS_WriteSlaveStrobe(true);
  __DMB();
  // We're okay
  return true;
  }

// Use both edges of the strobes to send two bytes
static bool bPS_ReadMultipleWord(int iCnt,u8 *pu8Data)
  {
  // Make sure the port is an input
  vPS_SetDataPortToInput();
  __DMB();

  while (iCnt--)
    {
    while(bPS_ReadMasterStrobe() == true)
      {
      }

    *pu8Data++ = u8PS_ReadData(); // Read it

    __DMB();
    vPS_WriteSlaveStrobe(false);

    while(bPS_ReadMasterStrobe() == false)
      {
      }
    *pu8Data++ = u8PS_ReadData(); // Read it


    __DMB();
    vPS_WriteSlaveStrobe(true);
    }

  // We're okay
  return true;
  }


static bool bPS_WriteByte(u8 u8Val)
  {
  while(bPS_ReadMasterStrobe() == true)
    {
    }

  vPS_WriteData(u8Val);
  vPS_SetDataPortToOutput();
  __DMB();
  vPS_WriteSlaveStrobe(false);
  __DMB();
  while(bPS_ReadMasterStrobe() == false)
    {
    }
  vPS_SetDataPortToInput();
  vPS_WriteSlaveStrobe(true);
  __DMB();
  // We're okay
  return true;
  }

// Use both edges of the strobes to send two bytes
static bool bPS_WriteMultipleWord(int iCnt,u8 *pu8Data)
  {
  // Wait until the master is reading
  while(bPS_ReadMasterStrobe() == true)
    {
    }

  vPS_SetDataPortToOutput(); // Drive the port lines

  while (iCnt--)
    {
    // Wait until the master is reading
    while(bPS_ReadMasterStrobe() == true)
      {
      }

    vPS_WriteData(*pu8Data++);
    __DMB();

    vPS_WriteSlaveStrobe(false);
    __DMB();

    // Wait for the master to indicate it has read the port
    while(bPS_ReadMasterStrobe() == false)
      {
      }

    vPS_WriteData(*pu8Data++);
    __DMB();

    vPS_WriteSlaveStrobe(true);
    __DMB();
    }

  // We're okay
  return true;
  }


////////////// The code in main

    // Handle ParaSys
    while (true)
      {
      if (bPS_ReadByte(&u8CMD,&bCorD,&bExtra))
        {
	// We're only going to respond to bytes sent with bExtra high
	if (bExtra)
	  {
	  switch(u8CMD)
	    {
        case 0x10: // Read a block
          bCmdOK = bPS_ReadByte(&u8DEVICE,&bCorD,&bExtra);
          if (bExtra == false)
        	{
            bCmdOK &= bPS_ReadByte(&u8BLOCK,&bCorD,&bExtra);
            if (bExtra == false)
          	  {
              bCmdOK &= bPS_ReadByte(&u8PART,&bCorD,&bExtra);
              if (bExtra == false)
          	    {
//                vWriteTxCRLF_UART1();
//        	      vWriteTxHex8_UART1(u8DEVICE);
//        	      vWriteTxHex8_UART1(u8BLOCK);
//         	      vWriteTxHex8_UART1(u8PART);
//         	      vWriteTxSPACE_UART1();
        	    // Is this a request for block we have in the buffer?
        	    if ((u8PART == 0) || (u8DEVICE != u8BR_DEVICE) || (u8BLOCK != u8BR_BLOCK))
        	      {
        	      // No, read it
        	      u8BR_DEVICE = u8DEVICE;
        	      u8BR_BLOCK = u8BLOCK;
        	      // Read the SD card
           	      if (!bReadBasilBlock(u8BR_DEVICE,u8BR_BLOCK,u8BR_BUFFER))
          	        {
                    for(i=0;i<0x1000;i++)
                      u8BR_BUFFER[i]=0xE5;
          	        }
        	      }
                // We need to write this block
        	    bPS_WriteMultipleWord(32,&u8BR_BUFFER[u8PART*64]);
                // Done?
                if (u8PART == 0x3F)
                  {
                  vWriteTxStr_UART1(""\r\nRead Block "");
                  vWriteTxHex8_UART1(u8DEVICE);
      	          vWriteTxHex8_UART1(u8BLOCK);
                   }
          	    }
          	  }
        	}
	      break;
            case 0x11: // Write a block
              bCmdOK = bPS_ReadByte(&u8DEVICE,&bCorD,&bExtra);
              if (bExtra == false)
             	{
                bCmdOK &= bPS_ReadByte(&u8BLOCK,&bCorD,&bExtra);
                if (bExtra == false)
            	  {
                  bCmdOK &= bPS_ReadByte(&u8PART,&bCorD,&bExtra);
                  if (bExtra == false)
            	    {
//                    vWriteTxCRLF_UART1();
//                    vWriteTxHex8_UART1(u8DEVICE);
//                    vWriteTxHex8_UART1(u8BLOCK);
//                    vWriteTxHex8_UART1(u8PART);
//                    vWriteTxSPACE_UART1();
        	    // Start a new buffer
        	    if ((u8PART == 0) || (u8DEVICE != u8BW_DEVICE) || (u8BLOCK != u8BW_BLOCK))
        	      {
        	      u8BW_DEVICE = u8DEVICE;
        	      u8BW_BLOCK = u8BLOCK;
        	      u8BW_PART = 0;
        	      }
        	    // Is this what we're expecting?
        	    if ((u8PART == u8BW_PART) && (u8DEVICE == u8BW_DEVICE) && (u8BLOCK == u8BW_BLOCK))
        	      {
                  // We need to read this block
          	      bPS_ReadMultipleWord(32,&u8BW_BUFFER[u8BW_PART*64]);
                  // And move to the next part
                  u8BW_PART++;
                  // Is our buffer full?
                  if (u8BW_PART == 0x40)
                	{
                    vWriteTxStr_UART1(""\r\nWrite Block "");
                    vWriteTxHex8_UART1(u8DEVICE);
                    vWriteTxHex8_UART1(u8BLOCK);

                    if (!bWriteBasilBlock(u8BW_DEVICE,u8BW_BLOCK,u8BW_BUFFER))
                      {
                      vWriteTxStr_UART1("" - FAILED!!!\r\n"");
                      }
                	}
        	      }
        	    else
        	      {
                  // Now we need to read and ignore the 64-bytes
                  for(i=0;i<64;i++)
                    {
                    bCmdOK &= bPS_ReadByte(&u8VALUE,&bCorD,&bExtra);
                    }
        	      }
                }
          	  }
        	}
	      break;
            case 0x12: // Set a filename
              bCmdOK = bPS_ReadByte(&u8DEVICE,&bCorD,&bExtra);
              if (u8DEVICE < 4)
        	   {
                u8 *pu8FileName = sDiskFilenames[u8DEVICE];
                if (bExtra == false)
            	  {
                  // Read the filename until a zero
                  do {
                    bCmdOK &= bPS_ReadByte(&u8VALUE,&bCorD,&bExtra);
                    *pu8FileName++ = u8VALUE;
                    } while(u8VALUE != 0);
        	      }
                vWriteTxStr_UART1(""\r\nSet Filename "");
                vWriteTxHex8_UART1(u8DEVICE);
                vWriteTxStr_UART1("" ["");
                vWriteTxStr_UART1(sDiskFilenames[u8DEVICE]);
                vWriteTxStr_UART1(""]"");
        	    }
              break;
	       }
	      }
        }
"
SGi8peqC,com,rvdraws,Python,Friday 25th of August 2023 12:23:47 AM CDT,"import pdfplumber
import torch
from transformers import BertModel, BertTokenizer
import pandas as pd
import openai
import numpy as np
import os
from dotenv import load_dotenv
from sklearn.metrics.pairwise import cosine_similarity

def embed(text):
    model_path = ""C:/Users/ADMIN/Desktop/mdl/bert-base-uncased""
    tokenizer = BertTokenizer.from_pretrained(model_path)
    model = BertModel.from_pretrained(model_path)
    tokens = tokenizer(text, return_tensors=""pt"", truncation=True, max_length=512, stride=256)
    input_ids = tokens[""input_ids""]
    with torch.no_grad():
        outputs = model(input_ids)
    embeddings = torch.mean(outputs.last_hidden_state, dim=1)
    return embeddings

def extract_text_from_pdf(file_path):
    with pdfplumber.open(file_path) as pdf:
        pages_text = []  # List to store text for each page
        for page in pdf.pages:
            text = page.extract_text()
            pages_text.append(text)  # Add entire page text to the list
        return pages_text


pdf_path = 'sam1.pdf'
pdf_texts = extract_text_from_pdf(pdf_path)
e1 = embed(pdf_texts[0])
print(e1)

prompt = ""Proposer Name""
e2  = embed(prompt)
print(e2)

def get_most_similar_segment(long_text_embedding, field_value_embedding):
    segment_length = 100  # Adjust as needed
    long_text_length = len(long_text_embedding)
    max_similarity = -1
    most_similar_segment = """"

    for i in range(0, long_text_length - segment_length + 1, segment_length):
        segment_embedding = long_text_embedding[i:i + segment_length]
        similarity = cosine_similarity([field_value_embedding], [segment_embedding])[0][0]

        if similarity > max_similarity:
            max_similarity = similarity
            most_similar_segment = long_text[i:i + segment_length]

    return most_similar_segment

print(get_most_similar_segment(e1,e2))"
b5trdvZJ,Basil's floppy Z80 coprocessor (modified),Cremulus,Z80 Assembler,Friday 25th of August 2023 12:15:11 AM CDT,"                        ORG #15B0                       ; Put this after the previous version in the EPROM, to save an erase

                        zeusemulate ""CPM""               ; Just a vanilla Z80 model with RAM at zero

; The ParaSys PIO ports
ParaAD                  equ %0 xxxxx 0 0                ;
ParaBD                  equ %0 xxxxx 0 1                ;
ParaAK                  equ %0 xxxxx 1 0                ;
ParaBK                  equ %0 xxxxx 1 1                ;

; The WD1772 ports
FDCstatus               EQU #C0                         ;
FDCcomm                 EQU #C0                         ;
;
FDCtrack                EQU #C1                         ;
;
FDCsector               EQU #C2                         ;
;
FDCdata                 EQU #C3                         ;
;
FDCdrive                EQU #C4                         ;
;
FDCflags                EQU #C4                         ;
;
cRestore                EQU %0000 0000                  ;
cSeek                   EQU %0001 0000                  ;
cStepIn                 EQU %0101 0000                  ;
cStepOut                EQU %0111 0000                  ;
cReadSec                EQU %1000 1000                  ;
cWriteSec               EQU %1010 1010                  ;
cReadAddr               EQU %1100 0000                  ;
cReadTrack              EQU %1110 0000                  ;
cWriteTrack             EQU %1111 0010                  ;
;
bPrecomp                EQU 1                           ;
;
errUW                   EQU #20                         ;
errUC                   EQU #21                         ;
errIDN                  EQU #12                         ;
errIT                   EQU #23                         ;
;
MotDel                  EQU 25000                       ;
;
dSelOr                  EQU 0                           ;
dSelAnd                 EQU 1                           ;
                        ;
dcStepRate              EQU 2                           ;
                        ;
dcTrack                 EQU 3                           ;
                        ;
dPrecomp                EQU 4                           ;
;
iPhase                  EQU WindowA + 0                 ;
iCommand                EQU WindowA + 1                 ;
iDrive                  EQU WindowA + 2                 ;
iTrack                  EQU WindowA + 3                 ;
iWind                   EQU WindowA + 4                 ;
iError                  EQU WindowA + 5                 ;
iSector                 EQU WindowA + 6                 ;
;
nCommands               EQU 16                          ;
;
WindowA                 EQU #C000                       ;
WindowB                 EQU #D000                       ;
WindowC                 EQU #E000                       ;
WindowD                 EQU #F000                       ;

; ParaSys Interface stuff
bmPara_SS               equ %0000 0 0 0 1               ;
bmPara_MS               equ %0000 0 0 1 0               ;
bmPara_RESET            equ %0000 0 1 0 0               ;
bmPara_EXTRA            equ %0000 1 0 0 0               ;

; ParaSys file commands
PS8_ReadFileBlock       equ $10                         ;
PS8_WriteFileBlock      equ $11                         ;
PS8_SendFilename        equ $12                         ;

YeStart                 JR Start                        ;
                        ;
                        DEFS 3,#FF                      ;
                        ;
Start                   LD SP,#C000                     ;
                        DI                              ;
                        ;
                        XOR A                           ;
                        LD I,A                          ;
                        ;
                        CALL InitDrives                 ;
                        ;
                        CALL InitPort                   ;
                        ;
                        CALL ClearStatus                ;
                        ;
                        call Ext_InitParaPort           ; Setup ParaSys

Loop                    mPS_SetStrobeDirns()            ; Make sure the port pins are driven correctly
                        mPS_RESET_H()                   ; Take the reset line high
                        mPS_MS_H()                      ; And make sure the master strobe is high
                        mPS_Extra_L()                   ; Take the EXTRA data line low again

LoopFastWait            LD A,(iPhase)                   ;
                        CP #02                          ;
                        JR NZ LoopFastWait              ;
                        ;
                        CALL Execute                    ;
                        ;
                        JR NC Loop1                     ;
                        ;
                        LD (iError),A                   ;
                        ;
Loop1                   LD HL,iPhase                    ;
                        LD (HL),3                       ;
                        ;
                        JR Loop                         ;
;
Execute                 XOR A                           ;
                        LD (iError),A                   ;
                        ;
                        LD A,(iCommand)                 ;
                        LD B,A                          ;
                        CP nCommands                    ;
                        CCF                             ;
                        LD A,errUC                      ;
                        RET C                           ;
                        ;
                        LD A,B                          ;
                        ADD A,A                         ;
                        LD L,A                          ;
                        LD H,0                          ;
                        ;
                        LD DE,JumpTable                 ;
                        ADD HL,DE                       ;
                        ;
                        LD A,(HL)                       ;
                        INC HL                          ;
                        LD H,(HL)                       ;
                        LD L,A                          ;
                        ;
CallHL                  JP (HL)                         ;
;
CallIY                  JP (IY)                         ;
;
JumpTable               DEFW TrackRead                  ;
                        DEFW TrackWrite                 ;
                        ;
                        DEFW ShortRead                  ;
                        DEFW ShortWrite                 ;
                        ;
                        DEFW FormatTrack                ;
                        DEFW FormatDisc                 ;
                        ;
                        DEFW EntireRead                 ;
                        DEFW EntireWrite                ;
                        ;
                        DEFW SectRead                   ;
                        DEFW SectWrite                  ;
                        ;
                        DEFW WindowB                    ;
                        DEFW WindowC                    ;
                        DEFW WindowD                    ;

                        dw Ext_SendFilename             ;
                        dw Reset                        ;

                        DEFW 0                          ;

Reset                   di                              ;
                        jp 0                            ;

ClearStatus             LD HL,#C000                     ;
                        LD DE,#C001                     ;
                        LD BC,#FF                       ;
                        LD (HL),0                       ;
                        LDIR                            ;
                        RET                             ;
;
CalcWind                LD A,(iWind)                    ;
                        LD HL,#D000                     ;
                        OR A                            ;
                        RET Z                           ;
                        ;
                        LD HL,#E000                     ;
                        DEC A                           ;
                        RET Z                           ;
                        ;
                        LD HL,#F000                     ;
                        DEC A                           ;
                        RET Z                           ;
                        ;
                        SCF                             ;
                        LD A,errUW                      ;
                        RET                             ;
;
GetTrack                LD A,(iDrive)                   ;
                        LD B,A                          ;
                        CP 4                            ;
                        CCF                             ;
                        LD A,errIDN                     ;
                        RET C                           ;
                        ;
                        LD A,B                          ;
                        OR A                            ;
                        CALL Z SelectA                  ;
                        DEC A                           ;
                        CALL Z SelectB                  ;
                        DEC A                           ;
                        CALL Z SelectC                  ;
                        DEC A                           ;
                        CALL Z SelectD                  ;
                        ;
                        CALL StartMotor                 ;
                        ;
                        LD A,(iTrack)                   ;
                        CALL Seek                       ;
                        RET                             ;
;
TrackRead               ld a,(iDrive)                   ; Is this D0?
                        or a                            ;
                        jp nz Ext_TrackRead             ; No, try the external

                        CALL GetTrack                   ;
                        RET C                           ;
                        ;
                        CALL CalcWind                   ;
                        RET C                           ;
                        ;
                        CALL Read4K                     ;
                        ;
                        RET                             ;
;
TrackWrite              ld a,(iDrive)                   ; Is this D0?
                        or a                            ;
                        jp nz Ext_TrackWrite            ; No, try the external

                        CALL GetTrack                   ;
                        RET C                           ;
                        ;
                        CALL CalcWind                   ;
                        RET C                           ;
                        ;
                        CALL Write4K                    ;
                        ;
                        RET                             ;
;
ShortRead               CALL GetTrack                   ;
                        RET C                           ;
                        ;
                        CALL CalcWind                   ;
                        RET C                           ;
                        ;
                        JP ReadShort                    ;
;
SectRead                CALL GetTrack                   ;
                        RET C                           ;
                        ;
                        CALL CalcWind                   ;
                        RET C                           ;
                        ;
                        JP SectorRead                   ;
;
ShortWrite              CALL GetTrack                   ;
                        RET C                           ;
                        ;
                        CALL CalcWind                   ;
                        RET C                           ;
                        ;
                        JP WriteShort                   ;
;
SectWrite               CALL GetTrack                   ;
                        RET C                           ;
                        ;
                        CALL CalcWind                   ;
                        RET C                           ;
                        ;
                        JP SectorWrite                  ;
;
EntireRead              CALL GetTrack                   ;
                        RET C                           ;
                        ;
                        CALL CalcWind                   ;
                        RET C                           ;
                        ;
                        JP ReadTrack                    ;
;
EntireWrite             CALL GetTrack                   ;
                        RET C                           ;
                        ;
                        CALL CalcWind                   ;
                        RET C                           ;
                        ;
                        JP WriteTrack                   ;
;
FormatTrack             CALL GetTrack                   ;
                        RET C                           ;
                        ;
                        LD A,(iTrack)                   ;
                        LD B,A                          ;
                        ;
                        RLCA                            ;
                        AND #01                         ;
                        LD E,A                          ;
                        ;
                        LD A,B                          ;
                        AND #7F                         ;
                        LD D,A                          ;
                        ;
                        LD IX,FormatWS                  ;
                        CALL FormatData                 ;
                        RET C                           ;
                        ;
                        LD HL,FormatWS                  ;
                        JP WriteTrack                   ;
;
FormatDisc              LD A,0                          ;
                        LD (iTrack),A                   ;
                        ;
FormatDisc1             CALL FormatTrack                ;
                        RET C                           ;
                        ;
                        LD A,(iTrack)                   ;
                        RLCA                            ;
                        INC A                           ;
                        CP 160                          ;
                        JR Z FDexit                     ;
                        RRCA                            ;
                        LD (iTrack),A                   ;
                        ;
                        JR FormatDisc1                  ;
;
FDexit                  OR A                            ;
                        RET                             ;
;
FormatData              PUSH IX                         ;
                        PUSH BC                         ;
                        PUSH AF                         ;
                        ;
                        LD HL,TrackDefnA                ;
                        LD C,1                          ;
                        ;
                        CALL GenDataStr                 ;
                        ;
FDlp                    LD HL,TrackDefnB                ;
                        CALL GenDataStr                 ;
                        ;
                        LD A,C                          ;
                        CP 6                            ;
                        JR NZ FDlp                      ;
                        ;
                        POP AF                          ;
                        POP BC                          ;
                        POP IX                          ;
                        RET                             ;
;
GenDataStr              LD A,(HL)                       ;
                        INC A                           ;
                        RET Z                           ;
                        ;
                        DEC A                           ;
                        LD B,A                          ;
                        INC HL                          ;
                        LD A,(HL)                       ;
                        ;
                        CP #F3                          ;
                        JR NC GDS1                      ;
                        ;
                        CP #F0                          ;
                        JR C GDS1                       ;
                        ;
                        LD A,D                          ;
                        JR Z GDS1                       ;
                        ;
                        LD A,(HL)                       ;
                        CP #F1                          ;
                        ;
                        LD A,E                          ;
                        JR Z GDS1                       ;
                        ;
                        LD A,C                          ;
                        INC C                           ;
                        ;
GDS1                    INC HL                          ;
                        ;
GDSlp                   LD (IX),A                       ;
                        INC IX                          ;
                        DJNZ GDSlp                      ;
                        ;
                        JR GenDataStr                   ;
;
ReadShortI              LD A,1                          ;
                        JP ReadSec                      ;
;
SectorReadI             LD A,(iSector)                  ;
                        JP ReadSec                      ;
;
Read4KI                 LD A,2                          ;
                        CALL ReadSec                    ;
                        RET C                           ;
                        ;
                        LD A,3                          ;
                        CALL ReadSec                    ;
                        RET C                           ;
                        ;
                        LD A,4                          ;
                        CALL ReadSec                    ;
                        RET C                           ;
                        ;
                        LD A,5                          ;
                        CALL ReadSec                    ;
                        RET                             ;
;
WriteShortI             LD A,1                          ;
                        CALL WriteSec                   ;
                        RET C                           ;
                        ;
VeriShortI              LD A,1                          ;
                        JP VeriSec                      ;
;
SectorWriteI            LD A,(iSector)                  ;
                        CALL WriteSec                   ;
                        RET C                           ;
                        ;
SectorVeriI             LD A,(iSector)                  ;
                        JP VeriSec                      ;
;
Write4KI                LD A,2                          ;
                        CALL WriteSec                   ;
                        RET C                           ;
                        ;
                        LD A,3                          ;
                        CALL WriteSec                   ;
                        RET C                           ;
                        ;
                        LD A,4                          ;
                        CALL WriteSec                   ;
                        RET C                           ;
                        ;
                        LD A,5                          ;
                        CALL WriteSec                   ;
                        RET C                           ;
                        ;
Veri4KI                 LD A,2                          ;
                        CALL VeriSec                    ;
                        RET C                           ;
                        ;
                        LD A,3                          ;
                        CALL VeriSec                    ;
                        RET C                           ;
                        ;
                        LD A,4                          ;
                        CALL VeriSec                    ;
                        RET C                           ;
                        ;
                        LD A,5                          ;
                        CALL VeriSec                    ;
                        ;
                        RET                             ;
;
WriteTrackI             CALL PauseTR                    ;
                        ;
                        LD A,cWriteTrack                ;
                        ;
                        CALL DoPrecomp                  ;
                        ;
                        OUT (FDCcomm),A                 ;
                        ;
                        CALL WriteData                  ;
                        ;
                        IN A,(FDCstatus)                ;
                        AND #44                         ;
                        SCF                             ;
                        RET NZ                          ;
                        ;
                        CALL VeriShortI                 ;
                        RET C                           ;
                        ;
                        CALL Veri4KI                    ;
                        ;
                        RET                             ;
;
ReadTrackI              CALL PauseTR                    ;
                        ;
                        LD A,cReadTrack                 ;
                        ;
                        CALL DoPrecomp                  ;
                        ;
                        OUT (FDCcomm),A                 ;
                        ;
                        CALL ReadData                   ;
                        ;
                        IN A,(FDCstatus)                ;
                        AND #14                         ;
                        SCF                             ;
                        RET NZ                          ;
                        ;
                        OR A                            ;
                        RET                             ;
;
ReadShort               LD IY,ReadShortI                ;
                        JR Repeat                       ;
;
Read4K                  LD IY,Read4KI                   ;
                        JR Repeat                       ;
;
SectorRead              LD IY,SectorReadI               ;
                        JR Repeat                       ;
;
WriteShort              LD IY,WriteShortI               ;
                        JR Repeat                       ;
;
Write4K                 LD IY,Write4KI                  ;
                        JR Repeat                       ;
;
SectorWrite             LD IY,SectorWriteI              ;
                        JR Repeat                       ;
;
WriteTrack              LD IY,WriteTrackI               ;
                        JR Repeat                       ;
;
ReadTrack               LD IY,ReadTrackI                ;
                        JR Repeat                       ;
;
Repeat                  LD (DataTemp),HL                ;
                        LD B,4                          ;
                        ;
rRTlp                   LD HL,(DataTemp)                ;
                        CALL CallIY                     ;
                        RET NC                          ;
                        ;
                        DJNZ rRTlp                      ;
                        ;
                        RET                             ;
;
ReadSec                 CALL PauseTR                    ;
                        ;
                        OUT (FDCsector),A               ;
                        ;
                        LD A,cReadSec                   ;
                        OUT (FDCcomm),A                 ;
                        ;
                        CALL ReadData                   ;
                        ;
                        IN A,(FDCstatus)                ;
                        AND #1C                         ;
                        RET Z                           ;
                        ;
                        SCF                             ;
                        RET                             ;
;
VeriSec                 CALL PauseTR                    ;
                        ;
                        OUT (FDCsector),A               ;
                        ;
                        LD A,cReadSec                   ;
                        OUT (FDCcomm),A                 ;
                        ;
                        CALL VeriData                   ;
                        ;
                        IN A,(FDCstatus)                ;
                        AND #1C                         ;
                        RET Z                           ;
                        ;
                        SCF                             ;
                        RET                             ;
;
WriteSec                CALL PauseTR                    ;
                        ;
                        OUT (FDCsector),A               ;
                        ;
                        LD A,cWriteSec                  ;
                        ;
                        CALL DoPrecomp                  ;
                        ;
                        OUT (FDCcomm),A                 ;
                        ;
                        CALL WriteData                  ;
                        ;
                        IN A,(FDCstatus)                ;
                        AND #5C                         ;
                        RET Z                           ;
                        ;
                        SCF                             ;
                        RET                             ;
;
ReadData                IN A,(FDCflags)                 ;
                        OR A                            ;
                        JR Z ReadData                   ;
                        ;
                        RET M                           ;
                        ;
                        IN A,(FDCdata)                  ;
                        LD (HL),A                       ;
                        INC HL                          ;
                        JP ReadData                     ;
;
VeriData                IN A,(FDCflags)                 ;
                        OR A                            ;
                        JR Z VeriData                   ;
                        ;
                        RET M                           ;
                        ;
                        IN A,(FDCdata)                  ;
                        JP VeriData                     ;
;
WriteData               IN A,(FDCflags)                 ;
                        OR A                            ;
                        JR Z WriteData                  ;
                        ;
                        RET M                           ;
                        ;
                        LD A,(HL)                       ;
                        OUT (FDCdata),A                 ;
                        INC HL                          ;
                        JP WriteData                    ;
;
StartMotor              IN A,(FDCstatus)                ;
                        BIT 7,A                         ;
                        RET NZ                          ;
                        ;
                        LD A,#D8                        ;
                        OUT (FDCcomm),A                 ;
                        ;
                        CALL PauseTR                    ;
                        ;
                        LD A,#D0                        ;
                        OUT (FDCcomm),A                 ;
                        ;
                        CALL PauseTR                    ;
                        ;
                        LD HL,MotDel                    ;
SMlp                    CALL Delay                      ;
                        DEC HL                          ;
                        LD A,L                          ;
                        OR H                            ;
                        JR NZ SMlp                      ;
                        ;
                        RET                             ;
;
PauseTR                 CALL Delay                      ;
                        ;
WaitTR                  PUSH AF                         ;
WaitTRlp                IN A,(FDCstatus)                ;
                        BIT 0,A                         ;
                        JR NZ WaitTRlp                  ;
                        POP AF                          ;
                        ;
Delay                   PUSH IX                         ;
                        POP IX                          ;
                        PUSH IX                         ;
                        POP IX                          ;
                        PUSH IX                         ;
                        POP IX                          ;
                        PUSH IX                         ;
                        POP IX                          ;
                        PUSH IX                         ;
                        POP IX                          ;
                        PUSH IX                         ;
                        POP IX                          ;
                        PUSH IX                         ;
                        POP IX                          ;
                        PUSH IX                         ;
                        POP IX                          ;
                        RET                             ;
;
DoPrecomp               PUSH BC                         ;
                        ;
                        LD B,A                          ;
                        ;
                        IN A,(FDCtrack)                 ;
                        CP (IX+dPrecomp)                ;
                        ;
                        LD A,B                          ;
                        ;
                        POP BC                          ;
                        ;
                        RET C                           ;
                        ;
                        RES bPrecomp,A                  ;
                        ;
                        RET                             ;
;
Seek                    PUSH IX                         ;
                        PUSH AF                         ;
                        ;
                        CALL WaitTR                     ;
                        ;
                        BIT 7,A                         ;
                        CALL NZ SideSel1                ;
                        CALL Z SideSel0                 ;
                        ;
                        LD IX,(pCurDrive)               ;
                        ;
                        AND #7F                         ;
                        JR Z SeekTRZ                    ;
                        ;
                        INC (IX+dcTrack)                ;
                        CALL Z initcT                   ;
                        DEC (IX+dcTrack)                ;
                        ;
                        CP 80                           ;
                        JR NC Seekf                     ;
                        ;
                        OUT (FDCdata),A                 ;
                        ;
                        LD (IX+dcTrack),A               ;
                        ;
                        LD A,(IX+dcStepRate)            ;
                        AND %0000 0011                  ;
                        OR cSeek                        ;
                        OUT (FDCcomm),A                 ;
                        ;
                        POP AF                          ;
                        POP IX                          ;
                        RET                             ;
;
SeekTRZ                 LD A,(IX+dcStepRate)            ;
                        AND %0000 0011                  ;
                        OR cRestore                     ;
                        OUT (FDCcomm),A                 ;
                        ;
                        LD (IX+dcTrack),0               ;
                        ;
                        POP AF                          ;
                        POP IX                          ;
                        RET                             ;
;
initcT                  PUSH AF                         ;
                        ;
                        LD A,(IX+dcStepRate)            ;
                        AND %0000 0011                  ;
                        OR cRestore                     ;
                        OUT (FDCcomm),A                 ;
                        ;
                        LD (IX+dcTrack),1               ;
                        ;
                        CALL PauseTR                    ;
                        ;
                        POP AF                          ;
                        RET                             ;
;
Seekf                   POP AF                          ;
                        POP IX                          ;
                        ;
                        LD A,errIT                      ;
                        SCF                             ;
                        RET                             ;
;
InitPort                LD A,#9F                        ;
                        LD (DiscPort),A                 ;
                        ;
                        OUT (FDCdrive),A                ;
                        ;
                        RET                             ;
;
SideSel0                PUSH BC                         ;
                        ;
                        LD BC,#10FF                     ;
                        ;
                        JP ModPort                      ;
;
SideSel1                PUSH BC                         ;
                        ;
                        LD BC,#10EF                     ;
                        ;
ModPort                 PUSH AF                         ;
                        ;
                        LD A,(DiscPort)                 ;
                        OR B                            ;
                        AND C                           ;
                        LD (DiscPort),A                 ;
                        ;
                        OUT (FDCdrive),A                ;
                        ;
                        POP AF                          ;
                        POP BC                          ;
                        RET                             ;
;
SelectA                 PUSH IX                         ;
                        ;
                        LD IX,DriveA                    ;
                        ;
ModDrive                PUSH AF                         ;
                        ;
                        LD A,(DiscPort)                 ;
                        ;
                        OR (IX+dSelOr)                  ;
                        AND (IX+dSelAnd)                ;
                        ;
                        LD (DiscPort),A                 ;
                        ;
                        OUT (FDCdrive),A                ;
                        ;
                        LD (pCurDrive),IX               ;
                        ;
                        LD A,(IX+dcTrack)               ;
                        OUT (FDCtrack),A                ;
                        ;
                        POP AF                          ;
                        POP IX                          ;
                        RET                             ;
;
SelectB                 PUSH IX                         ;
                        ;
                        LD IX,DriveB                    ;
                        ;
                        JP ModDrive                     ;
;
SelectC                 PUSH IX                         ;
                        ;
                        LD IX,DriveC                    ;
                        ;
                        JP ModDrive                     ;
;
SelectD                 PUSH IX                         ;
                        ;
                        LD IX,DriveD                    ;
                        ;
                        JP ModDrive                     ;
;
InitDrives              LD HL,DriveData                 ;
                        LD DE,DriveA                    ;
                        LD BC,20                        ;
                        LDIR                            ;
                        RET                             ;
;
DriveData               DEFB #0F,#FE                    ; Select
                        DEFB 1                          ; StepRate
                        DEFB #FF                        ; cTrack
                        DEFB 43                         ; Precomp
                        ;
                        DEFB #0F,#FD                    ; Select
                        DEFB 1                          ; StepRate
                        DEFB #FF                        ; cTrack
                        DEFB 43                         ; Precomp
                        ;
                        DEFB #0F,#FB                    ; Select
                        DEFB 1                          ; StepRate
                        DEFB #FF                        ; cTrack
                        DEFB 43                         ; Precomp
                        ;
                        DEFB #0F,#F7                    ; Select
                        DEFB 1                          ; StepRate
                        DEFB #FF                        ; cTrack
                        DEFB 43                         ; Precomp
;
TrackDefnA              DEFB 80,#4E                     ;
                        DEFB 12,#00                     ;
                        DEFB 3,#F6                      ;
                        DEFB 1,#FC                      ;
                        ;
                        DEFB 50,#4E                     ;
                        DEFB 12,#00                     ;
                        DEFB 3,#F5                      ;
                        DEFB 1,#FE                      ;
                        DEFB 1,#F0                      ; Track
                        DEFB 1,#F1                      ; Side
                        DEFB 1,#F2                      ; Sector
                        DEFB 1,#01                      ;
                        DEFB 1,#F7                      ;
                        DEFB 22,#4E                     ;
                        DEFB 12,#00                     ;
                        DEFB 3,#F5                      ;
                        DEFB 1,#FB                      ;
                        ;
                        DEFB 0,#24                      ; Header Data
                        ;
                        DEFB 1,#F7                      ;
                        DEFB 80,#4E                     ;
                        DEFB 0,#4E                      ;
                        ;
TrackDefnB              DEFB 12,#00                     ;
                        DEFB 3,#F5                      ;
                        DEFB 1,#FE                      ;
                        DEFB 1,#F0                      ; Track
                        DEFB 1,#F1                      ; Side
                        DEFB 1,#F2                      ; Sector
                        DEFB 1,#03                      ;
                        DEFB 1,#F7                      ;
                        DEFB 22,#4E                     ;
                        DEFB 12,#00                     ;
                        DEFB 3,#F5                      ;
                        DEFB 1,#FB                      ;
                        ;
                        DEFB 0,#24                      ; Sector Data
                        DEFB 0,#24                      ; Sector Data
                        DEFB 0,#24                      ; Sector Data
                        DEFB 0,#24                      ; Sector Data
                        ;
                        DEFB 1,#F7                      ;
                        DEFB 80,#4E                     ;
                        DEFB 0,#4E                      ;
                        ;
                        DEFB #FF                        ;

; New external drive support

Ext_InitParaPort        ld a,$00                        ; Set the data line states to low
                        out (ParaAD),a                  ;

                        mMakeParaData_OUT()             ;

                        ld a,bmPara_MS or bmPara_RESET  ; These high, all others low
                        out (ParaBD),a                  ;

                        mPS_SetStrobeDirns()            ;
                        ret                             ;

; We have to restore a logical track number. For historic reasons ""iTrack"" has the top bit as a ""side"" and bits 6..0 as cylinder
; So, the mapping of logical blocks 0..3 is iTrack values of $00,$80,$01,$81 (etc) which this converts back to logical blocks
; We just rotate it back into place to get consecutive blocks in the file
Ext_GetTrack            ld a,(iTrack)                   ; [side] [0 .. $7F]
                        rlca                            ;
                        ld (Ext_Track),a                ; Save [0 .. $7F][side]

                        or a                            ; NC
                        ret                             ;

; Read a track

Ext_TrackRead           call Ext_GetTrack               ;
                        ret c                           ;

                        CALL CalcWind                   ; To HL
                        RET C                           ;

                        jp Ext_Read4K                   ;

; Write a track

Ext_TrackWrite          call Ext_GetTrack               ;
                        ret c                           ;

                        call CalcWind                   ; To HL
                        ret c                           ;

                        jp Ext_Write4K                  ;

; We want to read a track to (hl)
Ext_Read4K              ld a,0                          ; Part 0

                        ; Read the next part

Ext_R4K_Lp              ld (Ext_Part),a                 ;

                        mPS_Extra_H()                   ; Take the EXTRA data line high

                        ld a,PS8_ReadFileBlock          ; Send the get command
                        call WriteByte                  ; Send this byte

                        mPS_Extra_L()                   ; Take the EXTRA data line low again

                        ld a,(iDrive)                   ; Drive
                        call WriteByte                  ; Send this byte
                        ld a,(Ext_Track)                ; Track
                        call WriteByte                  ; Send this byte
                        ld a,(Ext_Part)                 ; Part
                        call WriteByte                  ; Send this byte

                        ld b,32                         ; This many pairs of bytes in a part
                        call ReadMultiplePairs_HL       ;

                        ; Now, is there another part?

                        ld a,(Ext_Part)                 ; Next part
                        inc a                           ;

                        cp $40                          ; Done?
                        jp nz Ext_R4K_Lp                ; No, loop

                        or a                            ; NC
                        ret                             ; Done

; We want to write a track from (hl)
Ext_Write4K             ld a,0                          ; Part 0

                        ; Write the next part

Ext_W4K_Lp              ld (Ext_Part),a                 ;

                        mPS_Extra_H()                   ; Take the EXTRA data line high

                        ld a,PS8_WriteFileBlock         ; Send the put command
                        call WriteByte                  ; Send this byte

                        mPS_Extra_L()                   ; Take the EXTRA data line low again

                        ld a,(iDrive)                   ; Drive
                        call WriteByte                  ; Send this byte
                        ld a,(Ext_Track)                ; Track
                        call WriteByte                  ; Send this byte
                        ld a,(Ext_Part)                 ; Part
                        call WriteByte                  ; Send this byte

                        ld b,32                         ; This many pairs of bytes in a part
                        call WriteMultiplePairs_HL      ;

                        ; Now, is there another part?

                        ld a,(Ext_Part)                 ; Next part
                        inc a                           ;

                        cp $40                          ; Done?
                        jp nz Ext_W4K_Lp                ; No, loop

                        or a                            ; NC
                        ret                             ; Done

; We want to send a filename
Ext_SendFilename        call CalcWind                   ; Where from? -> (hl)
                        ret c                           ;

                        mPS_Extra_H()                   ; Take the EXTRA data line high

                        ld a,PS8_SendFilename           ; Send the command
                        call WriteByte                  ; Send this byte

                        mPS_Extra_L()                   ; Take the EXTRA data line low again

                        ld a,(iDrive)                   ; Drive
                        call WriteByte                  ; Send this byte

                        ; Send the string

Ext_SF_Lp               ld a,(hl)                       ; Next character
                        inc hl                          ;

                        call WriteByte                  ; Write one

                        or a                            ; Done?
                        jr nz Ext_SF_Lp                 ; No, loop

                        ret                             ; Done

; Write AL
WriteByte               ld c,a                          ; Save the data

                        mPS_MS_H()                      ; MS high

                        mWaitForSS_H()                  ; Wait for the slave strobe to go high

                        ld a,c                          ; Get the data
                        out (ParaAD),a                  ;
                        mMakeParaData_OUT()             ; Make it an output

                        mParaSettleDelay()              ; Delay a bit

                        mPS_MS_L()                      ; MS low

                        mWaitForSS_L()                  ; Wait for the slave strobe to go low

                        mPS_MS_H()                      ; MS high

                        ld a,c                          ; Restore the byte
                        ret                             ;

; Use both strobe edges to write a pair of bytes x b
WriteMultiplePairs_HL   mPS_MS_H()                      ; MS high

                        mMakeParaData_OUT()             ; Make it an output

WMP_HL_Lp               mWaitForSS_H()                  ; Wait for the slave strobe to go high

                        ld a,(hl)                       ; Get the data
                        out (ParaAD),a                  ;

                        inc hl                          ; ++ and delay

                        mPS_MS_L()                      ; MS low
                        mWaitForSS_L()                  ; Wait for the slave strobe to go low

                        ld a,(hl)                       ; Get the data
                        out (ParaAD),a                  ;

                        inc hl                          ; ++ and delay

                        mPS_MS_H()                      ; MS high
                        djnz WMP_HL_Lp                  ; Loop

                        ret                             ;

; Read AL
ReadByte                mPS_MS_H()                      ; MS high

                        mWaitForSS_H()                  ; Wait for the slave strobe to go high

                        mMakeParaData_IN()              ; Make it an input

                        mPS_MS_L()                      ; MS low

                        mWaitForSS_L()                  ; Wait for the slave strobe to go low

                        mParaSettleDelay()              ; Delay a bit
                        in a,(ParaAD)                   ; Read the data
                        ld c,a                          ; Save it

                        mPS_MS_H()                      ; MS high

;                        mWaitForSS_H()                  ; Wait for the slave strobe to go high

                        ld a,c                          ; Get the data
                        ret                             ; Done

; Use both strobe edges to read a pair of bytes x b
ReadMultiplePairs_HL    mPS_MS_H()                      ; MS high
                        mWaitForSS_H()                  ; Wait for the slave strobe to go high

                        mMakeParaData_IN()              ; Make it an input

RMP_HL_Lp               mPS_MS_L()                      ; MS low
                        mWaitForSS_L()                  ; Wait for the slave strobe to go low

                        mParaSettleDelay()              ; Delay a bit
                        in a,(ParaAD)                   ; Read the data
                        ld c,a                          ; Save it

                        mPS_MS_H()                      ; MS high
                        mWaitForSS_H()                  ; Wait for the slave strobe to go high

                        ld (hl),c                       ; Store it (and delay)
                        inc hl                          ;

                        in a,(ParaAD)                   ; Read the data

                        ld (hl),a                       ; Store it
                        inc hl                          ;

                        djnz RMP_HL_Lp                  ; Loop
                        ret                             ;

; Macros - BE CAREFUL! These shouldn't alter any register but AF

mMakeParaData_OUT       macro()                         ;
                          ld a,$FF                      ;
                          out (ParaAK),a                ;
                          xor a                         ;
                          out (ParaAK),a                ;
                          mend                          ;

mParaSettleDelay        macro()                         ;
                          nop                           ;
                          mend                          ;

mMakeParaData_IN        macro()                         ;
                          ld a,$FF                      ;
                          out (ParaAK),a                ;
                          out (ParaAK),a                ;
                          mend                          ;

; Set the strobe directions

mPS_SetStrobeDirns      macro()
                          ld a,$FF                      ;
                          out (ParaBK),a                ;
                          ld a,bmPara_SS                ; Only this one is an input
                          out (ParaBK),a                ;
                          mend

mWaitForSS_H            macro()                         ;
Lp                        in a,(ParaBD)                 ;
                          and a,bmPara_SS               ;
                          jp z Lp                       ;
                          mend                          ;

mWaitForSS_L            macro()                         ;
Lp                        in a,(ParaBD)                 ;
                          and a,bmPara_SS               ;
                          jp nz Lp                      ;
                          mend                          ;

mPS_MS_L                macro()                         ;
                          in a,(ParaBD)                 ;
                          and a,bmPara_MS xor $FF       ;
                          out (ParaBD),a                ;
                          mend                          ;

mPS_MS_H                macro()                         ;
                          in a,(ParaBD)                 ;
                          or a,bmPara_MS                ;
                          out (ParaBD),a                ;
                          mend                          ;

mPS_RESET_L             macro()                         ;
                          in a,(ParaBD)                 ;
                          and a,bmPara_RESET xor $FF    ;
                          out (ParaBD),a                ;
                          mend                          ;

mPS_RESET_H             macro()                         ;
                          in a,(ParaBD)                 ;
                          or a,bmPara_RESET             ;
                          out (ParaBD),a                ;
                          mend                          ;

mPS_Extra_L             macro()                         ;
                          in a,(ParaBD)                 ;
                          and a,bmPara_EXTRA xor $FF    ;
                          out (ParaBD),a                ;
                          mend                          ;

mPS_Extra_H             macro()                         ;
                          in a,(ParaBD)                 ;
                          or a,bmPara_EXTRA             ;
                          out (ParaBD),a                ;
                          mend                          ;

YeEnd                   equ *                           ;

                        ORG #4000                       ;

Ext_Track               ds 1                            ;
Ext_Part                ds 1                            ;

DriveA                  DEFS 5                          ;
                        ;
DriveB                  DEFS 5                          ;

DriveC                  DEFS 5                          ;
                        ;
DriveD                  DEFS 5                          ;

DiscPort                DEFS 1                          ;

pCurDrive               DEFS 2                          ;

DataTemp                DEFS 2                          ;

cPrecompBit             DEFS 1                          ;

FormatWS                DEFS #1B00                      ;

                        output_para YeStart,YeEnd-YeStart;
"
h8rXUgP3,_kit_kmixerPrivate.h as of 2023-8-24,Kitomas,C,Friday 25th of August 2023 12:02:15 AM CDT,"#ifndef _KIT_KMIXERPRIVATE_H
#define _KIT_KMIXERPRIVATE_H




struct _kit_kmixerGlobals_t {
  SDL_mutex* lock;
  int threadPoolSize, cores, capabilities;
  int init;
};
extern struct _kit_kmixerGlobals_t _kit_kmixerGlobals;




typedef union {
  void*   ptr;
  Uint8*  u_8;
  Sint16* i16;
  Sint32* i32;
  float*  f32;
} _mono_samples;



//(stores left and right ear components of a stereo stream)
typedef struct { Uint8  l,r; } _stereo_samples_u_8;
typedef struct { Sint16 l,r; } _stereo_samples_i16;
typedef struct { Sint32 l,r; } _stereo_samples_i32;
typedef struct { float  l,r; } _stereo_samples_f32;


typedef union {
  void*                ptr;
  _stereo_samples_u_8* u_8;
  _stereo_samples_i16* i16;
  _stereo_samples_i32* i32;
  _stereo_samples_f32* f32;
} _stereo_samples;



typedef union {
  void*           v;
  _mono_samples   m;
  _stereo_samples s;
} _kit_kmixerVoiceBuffer;



typedef union {
  void*                v;
  float*               m;
  _stereo_samples_f32* s;
} _kit_kmixerVoiceBufferF;



typedef struct {
  _kit_kmixerVoiceBufferF   bufferInput; //input buffer (or the mixing stage's output)
  _kit_kmixerVoiceBufferF    bufferType; //output of type conversion to f32 (always stereo size)
  _kit_kmixerVoiceBufferF bufferChannel; //output of mono-stereo or stereo-mono conversion (always stereo size)
  _kit_kmixerVoiceBuffer     bufferUser; //buffer to be filled in or modified by user
  _kit_kmixerVoiceBufferF  bufferOutput; //final output buffer (or the mixing stage's input)

  SDL_mutex*                  lock; //to make sure a voice doesn't get deleted while it's processing
  kit_kmixerVoiceCallback callback; //user-implemented callback for processing audio data
  void*                   userdata; //user-defined pointer to be passed to the kit_kmixerVoiceCallback
  kit_coreVector*           inputs; //indexes of input voices, if any (can be NULL)

  Uint32                _padding32; //for padding to a multiple of 8 bytes
  Uint32                     index; //index of this specific voice in the device's voice list
  Uint32                sampleRate; //samples per second, in Hz
  Uint32           bufferUser_size; //size of inBuffer, in bytes

  //volume can actually be <0, but for volL it will override applyVolume to SDL_FALSE,
   //and for volR, volR would then be set to volL
  float                       volL; //left ear volume (or total volume if mono); 0.0 -> 1.0
  float                       volR; //right ear volume (ignored if mono); 0.0 -> 1.0

  SDL_bool             applyVolume; //if SDL_TRUE, apply volume when mixing voice's output
  SDL_bool             stereoInput; //input is mono if SDL_FALSE, stereo if SDL_TRUE
  SDL_bool              stereoUser; //voice is mono if SDL_FALSE, stereo if SDL_TRUE
  SDL_bool            stereoOutput; //output is mono if SDL_FALSE, stereo if SDL_TRUE

  Uint16              sampleFrames; //number of sample frames in the audio stream
  SDL_AudioFormat      formatInput; //data type of input buffer
  SDL_AudioFormat       formatUser; //data type of voice (user) buffer
  SDL_AudioFormat     formatOutput; //data type of output buffer

  //Uint16                _padding16; //for padding to a multiple of 8 bytes
} /*__attribute__((packed))*/ _kit_kmixerVoice;




extern int _kit_kmixerVoiceProc(void* data);


extern void _kit_kmixerVoiceMix(_kit_kmixerVoice* ovoice,
                                _kit_kmixerVoice* ivoices, Uint32 ivoices_len);



#endif
"
jkAFurK3,kit_sdl2_kmixerVoice.c as of 2023-8-24,Kitomas,C,Friday 25th of August 2023 12:00:34 AM CDT,"#include ""../include/kit_sdl2/kit_kmixer.h""
#include ""../_private/include/_kit_privmacro.h""
#include ""../_private/include/_kit_kmixerPrivate.h""


//include intrinsic functions
#include <immintrin.h>




//for debug testing
#define _ENABLE_SSE   SDL_TRUE
#define _ENABLE_SSE2  SDL_TRUE
#define _ENABLE_SSE3  SDL_TRUE
#define _ENABLE_SSE41 SDL_TRUE
#define _ENABLE_AVX   SDL_TRUE
#define _ENABLE_AVX2  SDL_TRUE


//bitmasks for _kit_kmixerGlobals.capabilities
#define _SSE_MASK   (1<<5)
#define _SSE2_MASK  (1<<4)
#define _SSE3_MASK  (1<<3)
#define _SSE41_MASK (1<<2) //(SSE4.1)
#define _AVX_MASK   (1<<1)
#define _AVX2_MASK  (1<<0)


//for visual clarity during ProcChannels
 //(this could also just be an enum probably, but w/e)
#define _M_to_M (0) //  mono->mono
#define _M_to_S (1) //  mono->stereo
#define _S_to_M (2) //stereo->mono
#define _S_to_S (3) //stereo->stereo
#define _MM256_SHUFFLE(c7,c6,c5,c4,c3,c2,c1,c0) \
  ((_MM_SHUFFLE(c7,c6,c5,c4)<<8)|_MM_SHUFFLE(c3,c2,c1,c0))
#define _MN(a,b) ( ((a)<(b))?(a):(b) )
#define _MX(a,b) ( ((a)>(b))?(a):(b) )
#define _CLMP(n, m,x) _MN(_MX(n, m),x)



//used to multiply an int by the inverse of an int to get a normalized float
//(input 8-bit samples will be unsigned, so +=0x80 to convert them to signed first)
const float invi_8=1.0f/0x7f;       //=0.007874015748031496062992125984251968503937
const float invi16=1.0f/0x7fff;     //=0.000030518509475997192297128208258308664204
const float invi32=1.0f/0x7fffffff; //=0.000000000465661287524579692410575082716799




//converts u8, i16, and i32 samples to f32 samples
static inline void _kit_kmixerVoiceProcFromTypeFallback(void* _dataIn, float* dataOut,
                                                        Uint32 numSamples, SDL_AudioFormat typeIn)
{ //if nothing else works
  _mono_samples dataIn={.ptr=_dataIn};
  float rawSample; //used for max(original_sample,-1) basically
  switch(typeIn){
  case AUDIO_U8 : for(Uint32 i=0; i<numSamples; ++i){ rawSample=(float)(dataIn.u_8[i]-0x80)*invi_8;
                                                      dataOut[i]=(rawSample>=-1.0f)?rawSample:-1.0f; } break;
  case AUDIO_S16: for(Uint32 i=0; i<numSamples; ++i){ rawSample=(float) dataIn.i16[i]      *invi16;
                                                      dataOut[i]=(rawSample>=-1.0f)?rawSample:-1.0f; } break;
  case AUDIO_S32: for(Uint32 i=0; i<numSamples; ++i){ rawSample=(float) dataIn.i32[i]      *invi32;
                                                      dataOut[i]=(rawSample>=-1.0f)?rawSample:-1.0f; } break;
  case AUDIO_F32: for(Uint32 i=0; i<numSamples; ++i){ dataOut[i]=       dataIn.f32[i];               } }
}
void _kit_kmixerVoiceProcFromType(void* dataIn, void* dataOut,
                                  Uint32 sampleFrames, SDL_AudioFormat typeIn, SDL_bool isStereo)
{
  Uint32 numSamples=sampleFrames<<isStereo;
  _kit_kmixerVoiceProcFromTypeFallback(dataIn,dataOut,numSamples,typeIn);
}




//converts f32 samples to u8, i16, and i32 samples
static inline void _kmixerVoiceProcToTypeFallback(float* dataIn, void* _dataOut,
                                                  Uint32 numSamples, SDL_AudioFormat typeOut)
{ //if nothing else works
  _mono_samples dataOut={.ptr=_dataOut};
  float rawSample, rawSampleB;
  switch(typeOut){
  case AUDIO_U8 : for(Uint32 i=0; i<numSamples; ++i){ rawSample     =dataIn[i];
                                                      rawSampleB    =(rawSample>=-1.0f)?rawSample:-1.0f;
                                                      dataOut.u_8[i]=(rawSampleB<=1.0f)?rawSampleB*0x7f+0x80:0x7f; } break;
  case AUDIO_S16: for(Uint32 i=0; i<numSamples; ++i){ rawSample     =dataIn[i];
                                                      rawSampleB    =(rawSample>=-1.0f)?rawSample:-1.0f;
                                                      dataOut.i16[i]=(rawSampleB<=1.0f)?rawSampleB*0x7fff:0x7fff; } break;
  case AUDIO_S32: for(Uint32 i=0; i<numSamples; ++i){ rawSample     =dataIn[i];
                                                      rawSampleB    =(rawSample>=-1.0f)?rawSample:-1.0f;
                                                      dataOut.i32[i]=(rawSampleB<=1.0f)?rawSampleB*0x7fffffff:0x7fffffff; } break;
  case AUDIO_F32: for(Uint32 i=0; i<numSamples; ++i){ rawSample     =dataIn[i];
                                                      rawSampleB    =(rawSample>=-1.0f)?rawSample:-1.0f;
                                                      dataOut.f32[i]=(rawSampleB<=1.0f)?rawSampleB:1.0f; } }
}
void _kit_kmixerVoiceProcToType(void* dataIn, void* dataOut,
                                Uint32 sampleFrames, SDL_AudioFormat typeOut, SDL_bool isStereo)
{
  Uint32 numSamples=sampleFrames<<isStereo;
  _kmixerVoiceProcToTypeFallback(dataIn,dataOut,numSamples,typeOut);
}




//assumes samples are f32
static inline void _kit_kmixerVoiceProcChannelsFallback(float* dataInM, float* dataOutM,
                                                        Uint32 sampleFrames, int channelInfo)
{ //if nothing else works
  _stereo_samples_f32* dataInS =(void*)dataInM;
  _stereo_samples_f32* dataOutS=(void*)dataOutM;
  switch(channelInfo){
  case _M_to_S: for(Uint32 i=0; i<sampleFrames; ++i){ dataOutS[i].l=dataOutS[i].r=dataInM[i]; } break;
  case _S_to_M: for(Uint32 i=0; i<sampleFrames; ++i){ dataOutM[i]=(dataInS[i].l+dataInS[i].r)*.5f; } break;
  case _S_to_S: sampleFrames<<=1; SDL_FALLTHROUGH; //multiply mono by 2 to make length of stereo
  case _M_to_M: for(Uint32 i=0; i<sampleFrames; ++i){ dataOutM[i]=dataInM[i]; }
  }
}
void _kit_kmixerVoiceProcChannels(void* dataIn, void* dataOut, Uint32 sampleFrames, int channelInfo){
  _kit_kmixerVoiceProcChannelsFallback(dataIn,dataOut, sampleFrames,channelInfo);
}




//assumes samples are f32
void _kit_kmixerVoiceProcCopy(void* dataIn, void* dataOut, Uint32 sampleFrames, int isStereo){
  SDL_memcpy(dataOut,dataIn, (sampleFrames*sizeof(float))<<isStereo);
}




#define _CH_INFO(a,b) (((a)<<1)|(b))
//assumes input AND output samples are f32 (intermediate type is determined by the given voice)
int _kit_kmixerVoiceProc(void* data){ //(this is an SDL_ThreadFunction)
  _kit_kmixerVoice* voice=data;
  SDL_LockMutex(voice->lock);

  void *ibuffer=voice->bufferInput.v, *ubuffer=voice->bufferUser.v, *obuffer=voice->bufferOutput.v;
  void *tbuffer=voice->bufferType.v, *cbuffer=voice->bufferChannel.v;
  void *userdata=voice->userdata, *_stream=ubuffer;
   //
  SDL_bool istereo=voice->stereoInput, ustereo=voice->stereoUser, ostereo=voice->stereoOutput;
  SDL_bool hasInput = voice->inputs!=NULL;
   //
  SDL_AudioFormat ifmt=voice->formatInput, ufmt=voice->formatUser, ofmt=voice->formatOutput;
   //
  Uint32 frames=voice->sampleFrames, ubuffer_size=voice->bufferUser_size;

  //convert input type & channels (if necessary) before calling the kit_kmixerVoiceCallback
  int sameChannels = (istereo==ustereo)<<4; //shift left by 1 nybble for case readability
  int sameType     =     ifmt==ufmt;
  SDL_bool skipUserBuffer = sameChannels&&sameType;
  switch(sameChannels|sameType){
  case 0x00: //convert channels and type before callback
    //(will change this if i add in the ability to do channel conversion on non-floats)
    SDL_FALLTHROUGH;
  case 0x01: //only convert channels before callback
    if(ufmt!=AUDIO_F32){
      _kit_kmixerVoiceProcChannels(ibuffer,cbuffer, frames,_CH_INFO(istereo,ustereo));
      _kit_kmixerVoiceProcToType(cbuffer,ubuffer, frames,ufmt,ustereo);
    } else _kit_kmixerVoiceProcChannels(ibuffer,ubuffer, frames,_CH_INFO(istereo,ustereo));
    goto voice_callback_case;
  case 0x10: //only convert type before callback
    _kit_kmixerVoiceProcToType(ibuffer, ubuffer, frames,ufmt,istereo);
    SDL_FALLTHROUGH; //goto voice_callback_case;
  case 0x11: voice_callback_case: //feed input directly to callback
    if(skipUserBuffer) _stream=ibuffer; //will only be true on case 0x11
    voice->callback(userdata, _stream, ubuffer_size, hasInput);
  }

  //convert user type & channels (if necessary), outputting to bufferOutput
  sameChannels = (ustereo==ostereo)<<4; //shift left by 1 nybble for case readability
  sameType     =     ufmt==ofmt;
  switch(sameChannels|sameType){
  case 0x00: //convert channels & type
    //(will change this if i add in the ability to do channel conversion on non-floats)
    SDL_FALLTHROUGH;
  case 0x01: //convert channels
    if(ufmt!=AUDIO_F32){
      _kit_kmixerVoiceProcFromType(_stream,tbuffer, frames,ufmt,ustereo);
      _kit_kmixerVoiceProcChannels(tbuffer,obuffer, frames,_CH_INFO(ustereo,ostereo));
    } else _kit_kmixerVoiceProcChannels(_stream,obuffer, frames,_CH_INFO(ustereo,ostereo));
    break;
  case 0x10: //convert type
    _kit_kmixerVoiceProcFromType(_stream,tbuffer, frames,ufmt,ustereo);
    _kit_kmixerVoiceProcToType(tbuffer,obuffer, frames,ofmt,ostereo);
    break;
  case 0x11: //just copy contents of _stream to output
    _kit_kmixerVoiceProcCopy(_stream, obuffer, frames, ostereo);
  }

  SDL_UnlockMutex(voice->lock);
  return 0;
}




//assumes all samples are f32
static inline void _kit_kmixerVoiceMixFallback(_kit_kmixerVoice* ovoice,
                                               _kit_kmixerVoice* ivoices, Uint32 ivoices_len)
{ //if nothing else works
  Uint32 frames=ovoice->sampleFrames;
  memset(ovoice->bufferInput.v, 0, (frames*sizeof(float))<<ovoice->stereoInput);
  _stereo_samples_f32* osamples=ovoice->bufferInput.s;
  Uint32 samples_len=frames>>(!ovoice->stereoInput);

  //do the mixing
  for(Uint32 vi=0; vi<ivoices_len; ++vi){
    _kit_kmixerVoice* ivoice=&ivoices[vi];
    _stereo_samples_f32* isamples=ivoice->bufferOutput.s;
    float volL=ivoice->volL, volR=ivoice->volR;

    volL=_MN(volL,1.0f); volR=_MN(volR, 1.0f);
    if(!ivoice->stereoOutput) volR=volL;

    if(volL==0 && volR==0) continue; //if volume is effectively muted, then skip the voice
    else if(volL==1.0f && volR==1.0f) goto _do_not_apply_volume;
    else if((volL>=0)&&ivoice->applyVolume){
      if(volR<0) volR=volL;
      for(Uint32 i=0; i<samples_len; ++i){
        osamples[i].l += isamples[i].l*volL;
        osamples[i].r += isamples[i].r*volR;
      }
    } else { _do_not_apply_volume:
      for(Uint32 i=0; i<samples_len; ++i){
        osamples[i].l += isamples[i].l;
        osamples[i].r += isamples[i].r;
      }
    }
  }

  //hard clip output samples to between -1.0f and 1.0f
  for(Uint32 i=0; i<samples_len; ++i){
    float sampleL=osamples[i].l;
    osamples[i].l=_CLMP(sampleL, -1.0f,1.0f);
    float sampleR=osamples[i].r;
    osamples[i].r=_CLMP(sampleR, -1.0f,1.0f);
  }
}
void _kit_kmixerVoiceMix(_kit_kmixerVoice* ovoice,
                         _kit_kmixerVoice* ivoices, Uint32 ivoices_len)
{
  _kit_kmixerVoiceMixFallback(ovoice, ivoices,ivoices_len);
}




#ifdef _KIT_KMIXER_DEBUG
extern int printf(const char*,...);
void _kit_kmixerVoiceTestCallback(void* userdata, void* _stream, int size, SDL_bool hasInput){
}
#define _F32_EQUAL(a,b) ( (a)>((b)-0.000001) && (a)<((b)+0.000001) )
int kit_kmixerVoiceTest(){
  float bufferInputA[16], bufferTypeA[16], bufferChannelA[16], bufferUserA[16], bufferOutputA[16];
  float bufferInputB[16], bufferTypeB[16], bufferChannelB[16], bufferUserB[16], bufferOutputB[16];
  float bufferInputC[16], bufferTypeC[16], bufferChannelC[16], bufferUserC[16], bufferOutputC[16];

  _kit_kmixerVoice voiceA={
    .bufferInput   = { .v=bufferInputA },
    .bufferType    = { .v=bufferTypeA },
    .bufferChannel = { .v=bufferChannelA },
    .bufferUser    = { .v=bufferUserA },
    .bufferOutput  = { .v=bufferOutputA },

    .lock     = NULL,
    .callback = _kit_kmixerVoiceTestCallback,
    .userdata = NULL,
    .inputs   = NULL,

    .index           = 0,
    .sampleRate      = 44100,
    .bufferUser_size = 16*sizeof(float),

    .volL = 1.0f,
    .volR = 1.0f,

    .applyVolume  = SDL_TRUE,
    .stereoInput  = SDL_FALSE,
    .stereoUser   = SDL_FALSE,
    .stereoOutput = SDL_FALSE,

    .sampleFrames = 16,
    .formatInput  = AUDIO_F32,
    .formatUser   = AUDIO_F32,
    .formatOutput = AUDIO_F32
  };

  _kit_kmixerVoice voiceB={
    .bufferInput   = { .v=bufferInputB },
    .bufferType    = { .v=bufferTypeB },
    .bufferChannel = { .v=bufferChannelB },
    .bufferUser    = { .v=bufferUserB },
    .bufferOutput  = { .v=bufferOutputB },

    .lock     = NULL,
    .callback = _kit_kmixerVoiceTestCallback,
    .userdata = NULL,
    .inputs   = NULL,

    .index           = 0,
    .sampleRate      = 44100,
    .bufferUser_size = 16*sizeof(float),

    .volL = 1.0f,
    .volR = 1.0f,

    .applyVolume  = SDL_TRUE,
    .stereoInput  = SDL_FALSE,
    .stereoUser   = SDL_FALSE,
    .stereoOutput = SDL_FALSE,

    .sampleFrames = 16,
    .formatInput  = AUDIO_F32,
    .formatUser   = AUDIO_F32,
    .formatOutput = AUDIO_F32
  };

  _kit_kmixerVoice voiceC={
    .bufferInput   = { .v=bufferInputC },
    .bufferType    = { .v=bufferTypeC },
    .bufferChannel = { .v=bufferChannelC },
    .bufferUser    = { .v=bufferUserC },
    .bufferOutput  = { .v=bufferOutputC },

    .lock     = NULL,
    .callback = _kit_kmixerVoiceTestCallback,
    .userdata = NULL,
    .inputs   = NULL,

    .index           = 2,
    .sampleRate      = 44100,
    .bufferUser_size = 16*sizeof(float),

    .volL = 1.0f,
    .volR = 1.0f,

    .applyVolume  = SDL_TRUE,
    .stereoInput  = SDL_FALSE,
    .stereoUser   = SDL_FALSE,
    .stereoOutput = SDL_FALSE,

    .sampleFrames = 16,
    .formatInput  = AUDIO_F32,
    .formatUser   = AUDIO_F32,
    .formatOutput = AUDIO_F32
  };

  //example streams
  Uint8  u_8_A[16]={0x00,0x3F,0x10,0x80,0xFF,0x4E,0x24,0x6D,0x21,0xFE,0xED,0x86,0x3A,0xAB,0xDA,0x4C};
  Sint16 i16_A[16]={-32768,13106,-16384,6553,32767,2553,-26214,25937,22337,-13102,9553,-32467,-9830,0,-19661,-22938};
  Sint32 i32_A[16]={-2147483648,2147483647,2,547760950,-978102134,-1901782676,973752665,-2054956051,-1793070550,2100284199,1386177656,-70287364,-799099289,-594127329,1025429360,-570645197};
  float  f32_A[16]={ 0.8,-0.2, 0.0,-0.6,-0.6, 0.4, 1.0, 2.0, 0.6, 0.9, 0.8, 0.3, 0.6,-1.4,-0.1, 0.1};
  float  f32_B[16]={-0.1,-0.4, 0.1, 0.3,-0.6, 0.6, 0.6,-0.6,-0.1, 0.2,-0.2, 0.8, 0.4, 0.8, 0.4, 0.7};

  //test to and from type conversion
   //u_8
  SDL_memcpy(voiceA.bufferUser.m.u_8, u_8_A, 16*sizeof(Uint8));
  _kit_kmixerVoiceProcFromType(voiceA.bufferUser.m.u_8,voiceA.bufferType.m, 16,AUDIO_U8,SDL_FALSE);
  _kit_kmixerVoiceProcToType(voiceA.bufferType.m,voiceA.bufferUser.m.u_8, 16,AUDIO_U8,SDL_FALSE);
  for(Uint32 i=0; i<16; ++i){
    if(voiceA.bufferUser.m.u_8[i] != _MX(u_8_A[i],1)){
      SDL_SetError(""u_8 type conversion failed (%u: %X != %X)"",
        i, voiceA.bufferUser.m.u_8[i], _MX(u_8_A[i],1) ); return -999;
    }
  }
   //i16
  SDL_memcpy(voiceA.bufferUser.m.i16, i16_A, 16*sizeof(Sint16));
  _kit_kmixerVoiceProcFromType(voiceA.bufferUser.m.i16,voiceA.bufferType.m, 16,AUDIO_S16,SDL_FALSE);
  _kit_kmixerVoiceProcToType(voiceA.bufferType.m,voiceA.bufferUser.m.i16, 16,AUDIO_S16,SDL_FALSE);
  for(Uint32 i=0; i<16; ++i){
    if(voiceA.bufferUser.m.i16[i] != _MX(i16_A[i],-32767)){
      SDL_SetError(""i16 type conversion failed (%u: %i != %i)"",
        i, voiceA.bufferUser.m.i16[i], _MX(i16_A[i],-32767) ); return -999;
    }
  }
   //i32 (products of conversion are actually approximations with a max error of 64)
  SDL_memcpy(voiceA.bufferUser.m.i32, i32_A, 16*sizeof(Sint32));
  _kit_kmixerVoiceProcFromType(voiceA.bufferUser.m.i32,voiceA.bufferType.m, 16,AUDIO_S32,SDL_FALSE);
  _kit_kmixerVoiceProcToType(voiceA.bufferType.m,voiceA.bufferUser.m.i32, 16,AUDIO_S32,SDL_FALSE);
  for(Uint32 i=0; i<16; ++i){
    if((voiceA.bufferUser.m.i32[i] < (_MX(i32_A[i],-2147483647)-64)) &&
       (voiceA.bufferUser.m.i32[i] > (_MX(i32_A[i],-2147483647)+64)))
    {
      SDL_SetError(""i32 type conversion failed (%u: %i != %i)"",
        i, voiceA.bufferUser.m.i32[i], _MX(i32_A[i],-2147483647) ); return -999;
    }
  }
   //f32
  SDL_memcpy(voiceA.bufferUser.m.f32, f32_A, 16*sizeof(float));
  _kit_kmixerVoiceProcFromType(voiceA.bufferUser.m.f32,voiceA.bufferType.m, 16,AUDIO_F32,SDL_FALSE);
  _kit_kmixerVoiceProcToType(voiceA.bufferType.m,voiceA.bufferUser.m.f32, 16,AUDIO_F32,SDL_FALSE);
  for(Uint32 i=0; i<16; ++i){
    if(voiceA.bufferUser.m.f32[i] != _CLMP(f32_A[i], -1.0f,1.0f)){
      SDL_SetError(""f32 type conversion failed (%u: %f != %f)"",
        i, voiceA.bufferUser.m.f32[i], _CLMP(f32_A[i], -1.0f,1.0f) ); return -999;
    }
  }

  //test channel conversion
   //  mono-stereo
  _kit_kmixerVoiceProcChannels(f32_A, voiceA.bufferChannel.s, 8,_M_to_S);
  for(Uint32 i=0; i<16; i+=2){
    //printf(""%2u: %9f, %9f\n"",i, voiceA.bufferChannel.m[i], voiceA.bufferChannel.m[i+1]);
    if(voiceA.bufferChannel.m[i] != voiceA.bufferChannel.m[i+1]){
      SDL_SetError(""mono->stereo channel conversion failed (%u: %f != %f)"",
        i, voiceA.bufferChannel.m[i], voiceA.bufferChannel.m[i+1] ); return -999;
    }
  }
   //stereo-mono
  _kit_kmixerVoiceProcChannels(f32_A, voiceA.bufferChannel.m,  8,_S_to_M);
  for(Uint32 i=0; i<16; i+=2){
    //printf(""%2u: %9f,%9f -> %9f\n"",i, f32_A[i],f32_A[i+1], voiceA.bufferChannel.m[i>>1]);
    if(voiceA.bufferChannel.m[i>>1] != (f32_A[i]+f32_A[i+1])*.5f){
      SDL_SetError(""stereo->mono channel conversion failed (%u: %f != %f)"",
        i, voiceA.bufferChannel.m[i>>1], (f32_A[i]+f32_A[i+1])*.5f ); return -999;
    }
  }
   //stereo-stereo
  _kit_kmixerVoiceProcChannels(f32_A, voiceA.bufferChannel.s,  8,_S_to_S);
  for(Uint32 i=0; i<16; ++i){
    //printf(""%2u: %9f\n"",i, voiceA.bufferChannel.m[i]);
    if(voiceA.bufferChannel.m[i] != f32_A[i]){
      SDL_SetError(""stereo->stereo channel conversion failed (%u: %f != %f)"",
        i, voiceA.bufferChannel.m[i], f32_A[i] ); return -999;
    }
  }
   //  mono-mono
  _kit_kmixerVoiceProcChannels(f32_A, voiceA.bufferChannel.m, 16,_M_to_M);
  for(Uint32 i=0; i<16; ++i){
    //printf(""%2u: %9f\n"",i, voiceA.bufferChannel.m[i]);
    if(voiceA.bufferChannel.m[i] != f32_A[i]){
      SDL_SetError(""mono->mono channel conversion failed (%u: %f != %f)"",
        i, voiceA.bufferChannel.m[i], f32_A[i] ); return -999;
    }
  }

  //test f32 buffer copying
  _kit_kmixerVoiceProcCopy(f32_A, voiceA.bufferOutput.m, 16,0);
  for(Uint32 i=0; i<16; ++i){
    if(voiceA.bufferOutput.m[i] != f32_A[i]){
      SDL_SetError(""f32 buffer copying failed (%u: %f != %f)"",
        i, voiceA.bufferOutput.m[i], f32_A[i] ); return -999;
    }
  }

  //todo: test VoiceProc itself here

  //test mixing (might want to add in other volume settings at some point)
  SDL_memcpy(voiceA.bufferOutput.m, f32_A, 16*sizeof(float));
  SDL_memcpy(voiceB.bufferOutput.m, f32_B, 16*sizeof(float));
  _kit_kmixerVoice ivoices[2]={voiceA,voiceB};
   //mono, 1.0,1.0
  _kit_kmixerVoiceMix(&voiceC, ivoices,2);
  for(Uint32 i=0; i<16; ++i){
    float mixed=voiceC.bufferInput.m[i];
    float real=_CLMP(voiceA.bufferOutput.m[i]+voiceB.bufferOutput.m[i], -1.0f,1.0f);
    if(mixed != real){ SDL_SetError(""mono, 100%%L,100%%R mixing failed (%u: %.1f != %.1f)"",
                         i, mixed, real ); return -999;
    }
  }
   //stereo, 1.0,1.0
  voiceA.stereoOutput=SDL_TRUE;
  voiceB.stereoOutput=SDL_TRUE;
  voiceC.stereoInput =SDL_TRUE;
  voiceA.sampleFrames=8;
  voiceB.sampleFrames=8;
  voiceC.sampleFrames=8;
  _kit_kmixerVoiceMix(&voiceC, ivoices,2);
  for(Uint32 i=0; i<16; ++i){
    float mixed=voiceC.bufferInput.m[i];
    float real=_CLMP(voiceA.bufferOutput.m[i]+voiceB.bufferOutput.m[i], -1.0f,1.0f);
    if(mixed != real){ SDL_SetError(""stereo, 100%%L,100%%R mixing failed (%u: %.1f != %.1f)"",
                         i, mixed, real ); return -999;
    }
  }

  return 0;
}
#else
int kit_kmixerVoiceTest(){
  SDL_SetError(""\""_KIT_KMIXER_DEBUG\"" was not defined during compilation of kmixer"");
  return 999;
}
#endif
"
q65TFTV3,kit_sdl2_kmixerDevice.c as of 2023-8-24,Kitomas,C,Thursday 24th of August 2023 11:59:11 PM CDT,"#include ""../include/kit_sdl2/kit_kmixer.h""
#include ""../_private/include/_kit_privmacro.h""
#include ""../_private/include/_kit_kmixerPrivate.h""




void _kit_kmixerDeviceCallback(void* userdata, Uint8* _stream, int len){
  //kit_kmixerDevice* device=userdata;
  //_kit_kmixerVoiceBufferF stream={ .v=(void*)_stream };
}




int kit_kmixerDeviceClose(kit_kmixerDevice** device_p){

  return 0;
}


kit_kmixerDevice* kit_kmixerDeviceOpen(const char* deviceName,
                                       int isCapture, int allowedChanges,
                                       int freq, int stereo, Uint16 samples)
{
  kit_kmixerDevice* device=SDL_malloc(sizeof(kit_kmixerDevice));
  _IF_GOTO_ERROR(device==NULL,;);
  memset(device, 0, sizeof(kit_kmixerDevice));

  device->_magic.num=0x0076654472786D6B; //=""kmxrDev\x00""

  SDL_AudioSpec specWant, specHave;
  specWant.freq=freq;
  specWant.format=AUDIO_F32;
  specWant.channels=1+(stereo&1);
  specWant.samples=samples;
  specWant.callback=_kit_kmixerDeviceCallback;
  specWant.userdata=device;

  allowedChanges&=!SDL_AUDIO_ALLOW_FORMAT_CHANGE; //samples are always f32 internally
  device->_devID=SDL_OpenAudioDevice(deviceName,isCapture&1, &specWant,&specHave, allowedChanges);
  _IF_GOTO_ERROR(!device->_devID,;);
  _IF_SDLERR(specHave.channels>2,;,""specified audio device returned as neither mono nor stereo"");
  device->spec=specHave;

  device->_lock=SDL_CreateMutex();
  _IF_GOTO_ERROR(device->_lock==NULL,;);

  device->_thread.cond=SDL_CreateCond();
  _IF_GOTO_ERROR(device->_thread.cond,;);
  device->_thread.queue=kit_coreVectorCreate(1,0,0,sizeof(kit_coreThread),*(Uint32*)""cTh\x00"",NULL);
  _IF_GOTO_ERROR(device->_thread.queue==NULL,;);
  device->_thread.pool=kit_coreVectorCreate(_kit_kmixerGlobals.threadPoolSize,0,0,
                                            sizeof(kit_coreThread),*(Uint32*)""cTh\x00"",NULL);
  _IF_GOTO_ERROR(device->_thread.pool==NULL,;);

  device->_voices.raw=kit_coreVectorCreate(1,0,0,sizeof(_kit_kmixerVoice),*(Uint32*)""kmV\x00"",NULL);
  _IF_GOTO_ERROR(device->_voices.raw==NULL,;);
  device->_voices.ord=kit_coreVectorCreate(1,1,0,sizeof(_kit_kmixerVoice),*(Uint32*)""kmV\x00"",NULL);
  _IF_GOTO_ERROR(device->_voices.ord==NULL,;);

  return device;
  _error_:
  if(device!=NULL){
    if(device->_voices.ord!=NULL) kit_coreVectorDestroy(&device->_voices.ord);
    if(device->_voices.raw!=NULL) kit_coreVectorDestroy(&device->_voices.raw);

    if(device->_thread.pool!=NULL) kit_coreVectorDestroy(&device->_thread.pool);
    if(device->_thread.queue!=NULL) kit_coreVectorDestroy(&device->_thread.queue);
    if(device->_thread.cond!=NULL) SDL_DestroyCond(device->_thread.cond);

    if(device->_lock!=NULL) SDL_DestroyMutex(device->_lock);
    if(device->_devID!=0) SDL_CloseAudioDevice(device->_devID);

    SDL_free(device);
  }
  return NULL;
}
"
RzbfANyq,kit_sdl2_kmixer.c as of 2023-8-24,Kitomas,C,Thursday 24th of August 2023 11:55:56 PM CDT,"#include ""../include/kit_sdl2/kit_kmixer.h""
#include ""../_private/include/_kit_privmacro.h""
#include ""../_private/include/_kit_kmixerPrivate.h""

struct _kit_kmixerGlobals_t _kit_kmixerGlobals;



int kit_kmixerInit(int deviceThreadPoolSize){
  if(_kit_kmixerGlobals.init){ SDL_SetError(""kmixer is already initialized!""); return 1; }
  _kit_kmixerGlobals.lock=SDL_CreateMutex();
  if(_kit_kmixerGlobals.lock == NULL) return -1;
  if(SDL_LockMutex(_kit_kmixerGlobals.lock)<0) return -2;

  _kit_kmixerGlobals.cores=SDL_GetCPUCount();
  if(deviceThreadPoolSize>0) _kit_kmixerGlobals.threadPoolSize=deviceThreadPoolSize;
  else                       _kit_kmixerGlobals.threadPoolSize=_kit_kmixerGlobals.cores;

  _kit_kmixerGlobals.capabilities =SDL_HasSSE()  <<5;
  _kit_kmixerGlobals.capabilities|=SDL_HasSSE2() <<4;
  _kit_kmixerGlobals.capabilities|=SDL_HasSSE3() <<3;
  _kit_kmixerGlobals.capabilities|=SDL_HasSSE41()<<2;
  _kit_kmixerGlobals.capabilities|=SDL_HasAVX()  <<1;
  _kit_kmixerGlobals.capabilities|=SDL_HasAVX2()    ;

  _kit_kmixerGlobals.init=1;
  if(SDL_UnlockMutex(_kit_kmixerGlobals.lock)<0) return -999; //change this value later
  return 0;
}


int kit_kmixerQuit(){
  if(!_kit_kmixerGlobals.init){ SDL_SetError(""kmixer is not initialized!""); return 1; }
  if(SDL_LockMutex(_kit_kmixerGlobals.lock)<0) return -1;

  _kit_kmixerGlobals.init=0;
  if(SDL_UnlockMutex(_kit_kmixerGlobals.lock)<0) return -999; //change this value later
  SDL_DestroyMutex(_kit_kmixerGlobals.lock);
  //_kit_kmixerGlobals.lock=NULL;
  return 0;
}
"
Cekcvc0P,Mad,Unknown_No_1,PHP,Thursday 24th of August 2023 11:54:53 PM CDT,Madx64BitModComingSoon
FAAmLLUA,News Aug24 23,Newscaster_Ned,Email,Thursday 24th of August 2023 11:53:38 PM CDT,".‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎T‎e‎s‎t‎ ‎1‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎
.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎T‎e‎s‎t‎ ‎2‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎
.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎T‎e‎s‎t‎ ‎3‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎
.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎ ‎T‎e‎s‎t‎ ‎c‎o‎m‎p‎l‎e‎t‎e‎.‎

𝅘𝅥𝅮T‎h‎e‎ ‎b‎e‎s‎t‎ ‎p‎a‎r‎t‎ ‎o‎f‎ ‎w‎a‎k‎i‎n‎g‎ ‎u‎p‎,‎ ‎i‎s‎ ‎F‎o‎l‎g‎e‎r‎'‎s‎ ‎a‎n‎d‎ ‎l‎i‎q‎u‎o‎r‎ ‎i‎n‎ ‎y‎o‎u‎r‎ ‎c‎u‎p‎.‎𝅘𝅥𝅮

*‎*‎*‎L‎i‎v‎e‎w‎i‎r‎e‎*‎*‎*‎

R‎e‎p‎u‎b‎l‎i‎c‎a‎n‎s‎ ‎R‎a‎u‎c‎o‎u‎s‎ ‎i‎n‎ ‎M‎i‎l‎w‎a‎u‎k‎e‎e‎

D‎e‎b‎a‎t‎e‎ ‎N‎i‎g‎h‎t‎ ‎F‎u‎n‎!‎

V‎i‎v‎e‎k‎,‎ ‎D‎e‎S‎a‎n‎t‎i‎s‎ ‎C‎e‎n‎t‎e‎r‎ ‎S‎t‎a‎g‎e‎

D‎i‎d‎ ‎*‎T‎r‎u‎m‎p‎*‎ ‎W‎i‎n‎?‎

B‎i‎d‎e‎n‎ ‎o‎n‎ ‎B‎a‎c‎k‎b‎u‎r‎n‎e‎r‎

H‎a‎l‎e‎y‎,‎ ‎P‎e‎n‎c‎e‎ ‎R‎i‎d‎e‎ ‎H‎a‎r‎d‎ ‎f‎o‎r‎ ‎U‎k‎r‎a‎i‎n‎e‎

F‎o‎x‎ ‎L‎o‎s‎e‎s‎ ‎C‎o‎n‎t‎r‎o‎l‎:‎ ‎P‎r‎i‎o‎r‎i‎t‎i‎z‎e‎s‎ ‎C‎l‎i‎m‎a‎t‎e‎ ‎C‎h‎a‎n‎g‎e‎,‎ ‎A‎b‎o‎r‎t‎i‎o‎n‎ ‎o‎v‎e‎r‎ ‎B‎o‎r‎d‎e‎r‎,‎ ‎C‎h‎i‎n‎a‎,‎ ‎W‎o‎k‎e‎…‎

…‎A‎s‎k‎s‎ ‎U‎F‎O‎ ‎Q‎u‎e‎s‎t‎i‎o‎n‎ ‎🤡‎
(‎F‎r‎o‎m‎ ‎L‎)‎ ‎F‎o‎r‎m‎e‎r‎ ‎G‎o‎v‎e‎r‎n‎o‎r‎ ‎o‎f‎ ‎A‎r‎k‎a‎n‎s‎a‎s‎ ‎A‎s‎a‎ ‎H‎u‎t‎c‎h‎i‎n‎s‎o‎n‎,‎ ‎f‎o‎r‎m‎e‎r‎ ‎G‎o‎v‎e‎r‎n‎o‎r‎ ‎o‎f‎ ‎N‎e‎w‎ ‎J‎e‎r‎s‎e‎y‎ ‎C‎h‎r‎i‎s‎ ‎C‎h‎r‎i‎s‎t‎i‎e‎,‎ ‎f‎o‎r‎m‎e‎r‎ ‎U‎S‎ ‎V‎i‎c‎e‎ ‎P‎r‎e‎s‎i‎d‎e‎n‎t‎ ‎M‎i‎k‎e‎ ‎P‎e‎n‎c‎e‎,‎ ‎F‎l‎o‎r‎i‎d‎a‎ ‎G‎o‎v‎e‎r‎n‎o‎r‎ ‎R‎o‎n‎ ‎D‎e‎S‎a‎n‎t‎i‎s‎,‎ ‎e‎n‎t‎r‎e‎p‎r‎e‎n‎e‎u‎r‎ ‎a‎n‎d‎ ‎a‎u‎t‎h‎o‎r‎ ‎V‎i‎v‎e‎k‎ ‎R‎a‎m‎a‎s‎w‎a‎m‎y‎,‎ ‎f‎o‎r‎m‎e‎r‎ ‎G‎o‎v‎e‎r‎n‎o‎r‎ ‎f‎r‎o‎m‎ ‎S‎o‎u‎t‎h‎ ‎C‎a‎r‎o‎l‎i‎n‎a‎ ‎a‎n‎d‎ ‎U‎N‎ ‎a‎m‎b‎a‎s‎s‎a‎d‎o‎r‎ ‎N‎i‎k‎k‎i‎ ‎H‎a‎l‎e‎y‎,‎ ‎U‎S‎ ‎S‎e‎n‎a‎t‎o‎r‎ ‎f‎r‎o‎m‎ ‎S‎o‎u‎t‎h‎ ‎C‎a‎r‎o‎l‎i‎n‎a‎ ‎T‎i‎m‎ ‎S‎c‎o‎t‎t‎ ‎a‎n‎d‎ ‎N‎o‎r‎t‎h‎ ‎D‎a‎k‎o‎t‎a‎ ‎…‎
T‎h‎e‎ ‎2‎0‎2‎4‎ ‎G‎O‎P‎ ‎p‎r‎e‎s‎i‎d‎e‎n‎t‎i‎a‎l‎ ‎p‎r‎i‎m‎a‎r‎y‎ ‎i‎s‎ ‎n‎o‎w‎ ‎o‎f‎f‎i‎c‎i‎a‎l‎l‎y‎ ‎u‎n‎d‎e‎r‎w‎a‎y‎ ‎a‎s‎ ‎s‎e‎v‎e‎r‎a‎l‎ ‎c‎a‎n‎d‎i‎d‎a‎t‎e‎s‎ ‎f‎a‎c‎e‎ ‎o‎f‎f‎ ‎o‎n‎ ‎t‎h‎e‎ ‎d‎e‎b‎a‎t‎e‎ ‎s‎t‎a‎g‎e‎ ‎i‎n‎ ‎M‎i‎l‎w‎a‎u‎k‎e‎e‎,‎ ‎W‎i‎s‎c‎o‎n‎s‎i‎n‎,‎ ‎b‎u‎t‎ ‎t‎h‎e‎ ‎b‎i‎g‎g‎e‎s‎t‎ ‎e‎l‎e‎p‎h‎a‎n‎t‎ ‎i‎s‎ ‎n‎o‎t‎ ‎i‎n‎ ‎t‎h‎e‎ ‎r‎o‎o‎m‎.‎

M‎a‎u‎i‎ ‎W‎i‎l‎d‎f‎i‎r‎e‎s‎:‎ ‎O‎n‎l‎y‎ ‎P‎a‎v‎e‎d‎ ‎R‎o‎a‎d‎ ‎o‎u‎t‎ ‎o‎f‎ ‎T‎o‎w‎n‎ ‎W‎a‎s‎ ‎B‎a‎r‎r‎i‎c‎a‎d‎e‎d‎
M‎a‎u‎i‎ ‎W‎i‎l‎d‎f‎i‎r‎e‎s‎:‎ ‎O‎n‎l‎y‎ ‎P‎a‎v‎e‎d‎ ‎R‎o‎a‎d‎ ‎o‎u‎t‎ ‎o‎f‎ ‎T‎o‎w‎n‎ ‎W‎a‎s‎ ‎B‎a‎r‎r‎i‎c‎a‎d‎e‎d‎
1‎,‎1‎0‎6‎
D‎o‎n‎a‎l‎d‎ ‎T‎r‎u‎m‎p‎ ‎t‎o‎ ‎T‎u‎c‎k‎e‎r‎ ‎C‎a‎r‎l‎s‎o‎n‎:‎ ‎I‎n‎d‎i‎c‎t‎m‎e‎n‎t‎s‎ ‎A‎r‎e‎ ‎A‎l‎l‎ ‎'‎B‎u‎l‎l‎s‎h‎i‎t‎'‎
D‎o‎n‎a‎l‎d‎ ‎T‎r‎u‎m‎p‎ ‎t‎o‎ ‎T‎u‎c‎k‎e‎r‎ ‎C‎a‎r‎l‎s‎o‎n‎:‎ ‎I‎n‎d‎i‎c‎t‎m‎e‎n‎t‎s‎ ‎A‎r‎e‎ ‎A‎l‎l‎ ‎'‎B‎u‎l‎l‎s‎h‎i‎t‎'‎
6‎1‎6‎
N‎o‎l‎t‎e‎:‎ ‎J‎o‎e‎ ‎B‎i‎d‎e‎n‎’‎s‎ ‎9‎ ‎C‎r‎u‎e‎l‎ ‎M‎a‎u‎i‎ ‎B‎u‎n‎g‎l‎e‎s‎
N‎o‎l‎t‎e‎:‎ ‎J‎o‎e‎ ‎B‎i‎d‎e‎n‎’‎s‎ ‎9‎ ‎C‎r‎u‎e‎l‎ ‎M‎a‎u‎i‎ ‎B‎u‎n‎g‎l‎e‎s‎
4‎,‎4‎4‎2‎
T‎W‎I‎T‎T‎E‎R‎ ‎C‎l‎a‎i‎m‎s‎ ‎T‎r‎u‎m‎p‎ ‎I‎n‎t‎e‎r‎v‎i‎e‎w‎ ‎w‎i‎t‎h‎ ‎T‎u‎c‎k‎e‎r‎ ‎G‎e‎t‎s‎ ‎3‎3‎M‎ ‎V‎i‎e‎w‎s‎ ‎i‎n‎ ‎2‎0‎ ‎M‎i‎n‎u‎t‎e‎s‎ ‎
T‎W‎I‎T‎T‎E‎R‎ ‎C‎l‎a‎i‎m‎s‎ ‎T‎r‎u‎m‎p‎ ‎I‎n‎t‎e‎r‎v‎i‎e‎w‎ ‎w‎i‎t‎h‎ ‎T‎u‎c‎k‎e‎r‎ ‎G‎e‎t‎s‎ ‎3‎3‎M‎ ‎V‎i‎e‎w‎s‎ ‎i‎n‎ ‎2‎0‎ ‎M‎i‎n‎u‎t‎e‎s‎ ‎
9‎1‎3‎
F‎o‎x‎ ‎N‎e‎w‎s‎ ‎L‎o‎s‎e‎s‎ ‎C‎o‎n‎t‎r‎o‎l‎ ‎o‎f‎ ‎G‎O‎P‎ ‎D‎e‎b‎a‎t‎e‎,‎ ‎S‎c‎o‎l‎d‎s‎ ‎C‎r‎o‎w‎d‎ ‎a‎n‎d‎ ‎C‎a‎n‎d‎i‎d‎a‎t‎e‎s‎ ‎
F‎o‎x‎ ‎N‎e‎w‎s‎ ‎L‎o‎s‎e‎s‎ ‎C‎o‎n‎t‎r‎o‎l‎ ‎o‎f‎ ‎G‎O‎P‎ ‎D‎e‎b‎a‎t‎e‎,‎ ‎S‎c‎o‎l‎d‎s‎ ‎C‎r‎o‎w‎d‎ ‎a‎n‎d‎ ‎C‎a‎n‎d‎i‎d‎a‎t‎e‎s‎ ‎
2‎5‎2‎

A‎n‎n‎ ‎C‎o‎u‎l‎t‎e‎r‎:‎ ‎W‎e‎ ‎N‎e‎e‎d‎ ‎I‎m‎m‎i‎g‎r‎a‎t‎i‎o‎n‎,‎ ‎N‎o‎t‎ ‎T‎r‎u‎m‎p‎,‎ ‎a‎t‎ ‎t‎h‎e‎ ‎D‎e‎b‎a‎t‎e‎
1‎,‎1‎0‎4‎
F‎o‎x‎ ‎D‎e‎b‎a‎t‎e‎ ‎M‎o‎d‎e‎r‎a‎t‎o‎r‎s‎ ‎A‎s‎k‎ ‎C‎a‎n‎d‎i‎d‎a‎t‎e‎s‎ ‎A‎b‎o‎u‎t‎ ‎C‎l‎i‎m‎a‎t‎e‎ ‎C‎h‎a‎n‎g‎e‎
F‎o‎x‎ ‎D‎e‎b‎a‎t‎e‎ ‎M‎o‎d‎e‎r‎a‎t‎o‎r‎s‎ ‎A‎s‎k‎ ‎C‎a‎n‎d‎i‎d‎a‎t‎e‎s‎ ‎A‎b‎o‎u‎t‎ ‎C‎l‎i‎m‎a‎t‎e‎ ‎C‎h‎a‎n‎g‎e‎
4‎5‎1‎
B‎i‎d‎e‎n‎'‎s‎ ‎E‎m‎a‎i‎l‎ ‎A‎l‎i‎a‎s‎ ‎o‎n‎ ‎G‎o‎v‎t‎ ‎N‎e‎t‎w‎o‎r‎k‎ ‎R‎a‎i‎s‎e‎s‎ ‎S‎u‎s‎p‎i‎c‎i‎o‎n‎
B‎i‎d‎e‎n‎'‎s‎ ‎E‎m‎a‎i‎l‎ ‎A‎l‎i‎a‎s‎ ‎o‎n‎ ‎G‎o‎v‎t‎ ‎N‎e‎t‎w‎o‎r‎k‎ ‎R‎a‎i‎s‎e‎s‎ ‎S‎u‎s‎p‎i‎c‎i‎o‎n‎
6‎,‎8‎3‎1‎
F‎u‎l‎t‎o‎n‎ ‎C‎o‎u‎n‎t‎y‎ ‎R‎e‎l‎e‎a‎s‎e‎s‎ ‎G‎i‎u‎l‎i‎a‎n‎i‎,‎ ‎C‎o‎-‎D‎e‎f‎e‎n‎d‎a‎n‎t‎s‎'‎ ‎M‎u‎g‎s‎h‎o‎t‎s‎ ‎i‎n‎ ‎T‎r‎u‎m‎p‎ ‎C‎a‎s‎e‎ ‎
F‎u‎l‎t‎o‎n‎ ‎C‎o‎u‎n‎t‎y‎ ‎R‎e‎l‎e‎a‎s‎e‎s‎ ‎G‎i‎u‎l‎i‎a‎n‎i‎,‎ ‎C‎o‎-‎D‎e‎f‎e‎n‎d‎a‎n‎t‎s‎'‎ ‎M‎u‎g‎s‎h‎o‎t‎s‎ ‎i‎n‎ ‎T‎r‎u‎m‎p‎ ‎C‎a‎s‎e‎ ‎
7‎,‎0‎6‎1‎
E‎x‎c‎l‎u‎s‎i‎v‎e‎ ‎—‎ ‎T‎h‎e‎ ‎2‎0‎2‎4‎ ‎G‎O‎P‎ ‎C‎a‎n‎d‎i‎d‎a‎t‎e‎ ‎I‎m‎m‎i‎g‎r‎a‎t‎i‎o‎n‎ ‎Q‎u‎e‎s‎t‎i‎o‎n‎n‎a‎i‎r‎e‎
E‎x‎c‎l‎u‎s‎i‎v‎e‎ ‎—‎ ‎T‎h‎e‎ ‎2‎0‎2‎4‎ ‎G‎O‎P‎ ‎C‎a‎n‎d‎i‎d‎a‎t‎e‎ ‎I‎m‎m‎i‎g‎r‎a‎t‎i‎o‎n‎ ‎Q‎u‎e‎s‎t‎i‎o‎n‎n‎a‎i‎r‎e‎

N‎i‎g‎ ‎A‎r‎r‎e‎s‎t‎e‎d‎ ‎A‎f‎t‎e‎r‎ ‎H‎w‎h‎i‎t‎e‎ ‎M‎a‎n‎ ‎i‎s‎ ‎S‎h‎o‎t‎ ‎D‎e‎e‎e‎y‎a‎d‎ ‎i‎n‎ ‎F‎o‎r‎t‎ ‎L‎a‎u‎d‎e‎r‎d‎a‎l‎e‎.‎

I‎ ‎k‎n‎o‎w‎ ‎n‎i‎g‎g‎e‎r‎s‎ ‎a‎r‎e‎ ‎t‎h‎e‎ ‎c‎o‎l‎o‎r‎ ‎o‎f‎ ‎s‎h‎i‎t‎,‎ ‎a‎n‎d‎ ‎I‎ ‎g‎u‎e‎s‎s‎ ‎s‎h‎i‎t‎ ‎h‎a‎p‎p‎e‎n‎s‎.‎


5‎ ‎A‎f‎r‎i‎c‎o‎o‎n‎s‎ ‎A‎r‎r‎e‎s‎t‎e‎d‎ ‎(‎I‎n‎c‎l‎u‎d‎i‎n‎g‎ ‎s‎o‎m‎e‎ ‎t‎e‎e‎n‎a‎p‎e‎r‎s‎ ‎a‎n‎d‎ ‎a‎ ‎n‎e‎g‎r‎e‎s‎s‎)‎ ‎A‎r‎r‎e‎s‎t‎e‎d‎ ‎A‎f‎t‎e‎r‎ ‎S‎h‎o‎o‎t‎i‎n‎g‎ ‎G‎a‎y‎ ‎G‎u‎y‎ ‎t‎o‎ ‎D‎e‎a‎t‎h‎ ‎B‎e‎f‎o‎r‎e‎ ‎S‎h‎o‎o‎t‎i‎n‎g‎ ‎a‎t‎ ‎Q‎w‎o‎p‎s‎.‎


S‎i‎l‎v‎e‎r‎b‎a‎c‎k‎ ‎S‎e‎t‎s‎ ‎F‎i‎r‎e‎ ‎t‎o‎ ‎E‎l‎d‎e‎r‎l‎y‎ ‎M‎a‎n‎'‎s‎ ‎A‎p‎a‎r‎t‎m‎e‎n‎t‎ ‎A‎f‎t‎e‎r‎ ‎B‎e‎a‎t‎i‎n‎g‎ ‎H‎i‎m‎ ‎t‎o‎ ‎D‎e‎a‎t‎h‎.‎


3‎ ‎C‎o‎l‎o‎r‎e‎d‎ ‎P‎e‎o‎p‎l‎e‎ ‎A‎r‎r‎e‎s‎t‎e‎d‎ ‎A‎f‎t‎e‎r‎ ‎T‎r‎y‎i‎n‎g‎ ‎t‎o‎ ‎F‎o‎r‎c‎e‎ ‎F‎o‎s‎t‎e‎r‎ ‎C‎h‎i‎l‎d‎ ‎i‎n‎t‎o‎ ‎P‎r‎o‎s‎t‎i‎t‎u‎t‎i‎o‎n‎.‎ ‎

.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎ ‎G‎o‎d‎ ‎I‎'‎m‎ ‎s‎o‎ ‎f‎u‎c‎k‎i‎n‎g‎ ‎h‎o‎r‎n‎y‎ ‎f‎o‎r‎ ‎t‎h‎e‎ ‎w‎e‎a‎t‎h‎e‎r‎.‎ ‎H‎e‎r‎e‎ ‎w‎e‎ ‎g‎o‎.‎

T‎o‎d‎a‎y‎
P‎a‎r‎t‎l‎y‎ ‎C‎l‎o‎u‎d‎y‎
1‎0‎3‎°‎
/‎7‎7‎°‎
1‎%‎
S‎E‎ ‎5‎ ‎m‎p‎h‎
T‎h‎u‎ ‎2‎4‎ ‎|‎ ‎D‎a‎y‎
1‎0‎3‎°‎
1‎%‎
S‎E‎
5‎
 ‎
m‎p‎h‎
A‎ ‎m‎i‎x‎ ‎o‎f‎ ‎c‎l‎o‎u‎d‎s‎ ‎a‎n‎d‎ ‎s‎u‎n‎.‎ ‎H‎o‎t‎.‎ ‎H‎i‎g‎h‎ ‎1‎0‎3‎F‎.‎ ‎W‎i‎n‎d‎s‎ ‎l‎i‎g‎h‎t‎ ‎a‎n‎d‎ ‎v‎a‎r‎i‎a‎b‎l‎e‎.‎

H‎u‎m‎i‎d‎i‎t‎y‎
4‎6‎%‎
U‎V‎ ‎I‎n‎d‎e‎x‎
E‎x‎t‎r‎e‎m‎e‎
S‎u‎n‎r‎i‎s‎e‎
7‎:‎0‎2‎ ‎a‎m‎
S‎u‎n‎s‎e‎t‎
8‎:‎0‎1‎ ‎p‎m‎
T‎h‎u‎ ‎2‎4‎ ‎|‎ ‎N‎i‎g‎h‎t‎
7‎7‎°‎
1‎1‎%‎
S‎S‎W‎
6‎
 ‎
m‎p‎h‎
M‎o‎s‎t‎l‎y‎ ‎c‎l‎o‎u‎d‎y‎ ‎s‎k‎i‎e‎s‎ ‎t‎h‎i‎s‎ ‎e‎v‎e‎n‎i‎n‎g‎ ‎w‎i‎l‎l‎ ‎b‎e‎c‎o‎m‎e‎ ‎p‎a‎r‎t‎l‎y‎ ‎c‎l‎o‎u‎d‎y‎ ‎a‎f‎t‎e‎r‎ ‎m‎i‎d‎n‎i‎g‎h‎t‎.‎ ‎L‎o‎w‎ ‎7‎7‎F‎.‎ ‎W‎i‎n‎d‎s‎ ‎S‎S‎W‎ ‎a‎t‎ ‎5‎ ‎t‎o‎ ‎1‎0‎ ‎m‎p‎h‎.‎

H‎u‎m‎i‎d‎i‎t‎y‎
5‎5‎%‎
U‎V‎ ‎I‎n‎d‎e‎x‎
0‎ ‎o‎f‎ ‎1‎1‎
M‎o‎o‎n‎r‎i‎s‎e‎
2‎:‎3‎6‎ ‎p‎m‎
F‎i‎r‎s‎t‎ ‎Q‎u‎a‎r‎t‎e‎r‎
M‎o‎o‎n‎s‎e‎t‎
1‎2‎:‎0‎7‎ ‎a‎m‎
F‎r‎i‎ ‎2‎5‎
M‎o‎s‎t‎l‎y‎ ‎S‎u‎n‎n‎y‎
1‎0‎5‎°‎
/‎7‎5‎°‎
3‎%‎
S‎E‎ ‎9‎ ‎m‎p‎h‎
S‎a‎t‎ ‎2‎6‎
M‎o‎s‎t‎l‎y‎ ‎S‎u‎n‎n‎y‎
1‎0‎4‎°‎
/‎7‎6‎°‎
7‎%‎
S‎S‎E‎ ‎8‎ ‎m‎p‎h‎
S‎u‎n‎ ‎2‎7‎
M‎o‎s‎t‎l‎y‎ ‎S‎u‎n‎n‎y‎
1‎0‎5‎°‎
/‎7‎9‎°‎
5‎%‎
S‎W‎ ‎7‎ ‎m‎p‎h‎
M‎o‎n‎ ‎2‎8‎
P‎a‎r‎t‎l‎y‎ ‎C‎l‎o‎u‎d‎y‎
1‎0‎5‎°‎
/‎7‎7‎°‎
2‎4‎%‎
N‎N‎W‎ ‎9‎ ‎m‎p‎h‎
T‎u‎e‎ ‎2‎9‎
P‎a‎r‎t‎l‎y‎ ‎C‎l‎o‎u‎d‎y‎
9‎6‎°‎
/‎7‎5‎°‎
1‎7‎%‎
N‎ ‎1‎2‎ ‎m‎p‎h‎
W‎e‎d‎ ‎3‎0‎
M‎o‎s‎t‎l‎y‎ ‎S‎u‎n‎n‎y‎
9‎7‎°‎
/‎7‎2‎°‎
7‎%‎
N‎N‎E‎ ‎1‎0‎ ‎m‎p‎h‎
T‎h‎u‎ ‎3‎1‎
M‎o‎s‎t‎l‎y‎ ‎S‎u‎n‎n‎y‎
1‎0‎0‎°‎
/‎7‎1‎°‎
1‎%‎
N‎E‎ ‎8‎ ‎m‎p‎h‎
F‎r‎i‎ ‎0‎1‎
M‎o‎s‎t‎l‎y‎ ‎S‎u‎n‎n‎y‎
9‎9‎°‎
/‎7‎2‎°‎
4‎%‎
E‎S‎E‎ ‎7‎ ‎m‎p‎h‎
S‎a‎t‎ ‎0‎2‎
S‎u‎n‎n‎y‎
1‎0‎0‎°‎
/‎7‎4‎°‎
2‎0‎%‎
E‎S‎E‎ ‎8‎ ‎m‎p‎h‎
S‎u‎n‎ ‎0‎3‎
M‎o‎s‎t‎l‎y‎ ‎S‎u‎n‎n‎y‎
1‎0‎0‎°‎
/‎7‎4‎°‎
2‎3‎%‎
S‎S‎E‎ ‎9‎ ‎m‎p‎h‎
M‎o‎n‎ ‎0‎4‎
M‎o‎s‎t‎l‎y‎ ‎S‎u‎n‎n‎y‎
9‎9‎°‎
/‎7‎4‎°‎
2‎4‎%‎
S‎S‎E‎ ‎9‎ ‎m‎p‎h‎
T‎u‎e‎ ‎0‎5‎
M‎o‎s‎t‎l‎y‎ ‎S‎u‎n‎n‎y‎
1‎0‎0‎°‎
/‎7‎5‎°‎
1‎5‎%‎
S‎S‎E‎ ‎9‎ ‎m‎p‎h‎
W‎e‎d‎ ‎0‎6‎
M‎o‎s‎t‎l‎y‎ ‎S‎u‎n‎n‎y‎
1‎0‎1‎°‎
/‎7‎4‎°‎
1‎4‎%‎
S‎S‎E‎ ‎9‎ ‎m‎p‎h‎
T‎h‎u‎ ‎0‎7‎
M‎o‎s‎t‎l‎y‎ ‎S‎u‎n‎n‎y‎
1‎0‎1‎°‎
/‎7‎5‎°‎
1‎9‎%‎
S‎S‎E‎ ‎8‎ ‎m‎p‎h‎

.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎

C‎u‎r‎r‎e‎n‎t‎ ‎t‎h‎r‎e‎a‎t‎:‎ ‎E‎n‎d‎ ‎o‎f‎ ‎S‎u‎m‎m‎e‎r‎.‎ ‎🍥🔥

.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎

C‎h‎u‎d‎
A‎ ‎C‎h‎u‎d‎ ‎i‎s‎ ‎a‎ ‎f‎a‎r‎-‎r‎i‎g‎h‎t‎ ‎p‎a‎t‎r‎o‎n‎ ‎w‎i‎t‎h‎ ‎a‎n‎ ‎o‎p‎u‎s‎ ‎o‎f‎ ‎b‎i‎g‎o‎t‎r‎y‎,‎ ‎i‎n‎c‎e‎l‎i‎b‎a‎c‎y‎ ‎a‎n‎d‎ ‎s‎i‎c‎k‎ ‎f‎u‎c‎k‎e‎r‎y‎.‎ ‎T‎h‎e‎ ‎t‎e‎r‎m‎ ‎i‎s‎ ‎m‎o‎s‎t‎l‎y‎ ‎u‎s‎e‎d‎ ‎b‎y‎ ‎t‎r‎a‎n‎n‎i‎e‎s‎ ‎a‎n‎d‎ ‎t‎h‎e‎i‎r‎ ‎o‎p‎p‎o‎s‎i‎n‎g‎ ‎w‎i‎n‎g‎ ‎n‎e‎g‎a‎t‎i‎v‎e‎l‎y‎,‎ ‎b‎u‎t‎ ‎i‎s‎ ‎s‎o‎m‎e‎t‎i‎m‎e‎s‎ ‎u‎s‎e‎d‎ ‎p‎o‎s‎i‎t‎i‎v‎e‎l‎y‎ ‎a‎m‎o‎n‎g‎s‎t‎ ‎t‎h‎e‎ ‎l‎i‎k‎e‎.‎ ‎I‎t‎ ‎i‎s‎ ‎o‎f‎t‎e‎n‎ ‎d‎e‎p‎i‎c‎t‎e‎d‎ ‎w‎i‎t‎h‎ ‎a‎n‎d‎ ‎u‎s‎e‎d‎ ‎a‎l‎o‎n‎g‎s‎i‎d‎e‎ ‎""‎l‎e‎ ‎/‎p‎o‎l‎/‎ ‎f‎a‎c‎e‎""‎ ‎o‎r‎ ‎""‎l‎e‎ ‎p‎o‎l‎l‎a‎c‎k‎""‎ ‎(‎b‎a‎s‎e‎d‎ ‎o‎n‎ ‎P‎a‎t‎r‎i‎c‎k‎ ‎C‎r‎u‎s‎i‎u‎s‎✡‎)‎,‎ ‎o‎r‎i‎g‎i‎n‎a‎t‎i‎n‎g‎ ‎i‎n‎ ‎A‎u‎g‎u‎s‎t‎ ‎o‎f‎ ‎2‎0‎1‎9‎ ‎o‎n‎ ‎4‎c‎h‎a‎n‎ ‎a‎f‎t‎e‎r‎ ‎t‎h‎e‎ ‎E‎l‎ ‎P‎a‎s‎o‎ ‎s‎h‎o‎o‎t‎i‎n‎g‎s‎.‎ ‎A‎n‎d‎ ‎r‎e‎c‎e‎n‎t‎l‎y‎ ‎a‎ ‎w‎o‎j‎a‎k‎ ‎v‎a‎r‎i‎a‎n‎t‎ ‎o‎f‎f‎ ‎i‎t‎ ‎k‎n‎o‎w‎n‎ ‎a‎s‎ ‎""‎p‎o‎l‎j‎a‎k‎""‎ ‎o‎r‎ ‎""‎c‎h‎u‎d‎j‎a‎k‎""‎,‎ ‎c‎r‎e‎a‎t‎e‎d‎ ‎i‎n‎ ‎A‎u‎g‎u‎s‎t‎ ‎o‎f‎ ‎2‎0‎2‎0‎ ‎o‎n‎ ‎B‎u‎n‎k‎e‎r‎c‎h‎a‎n‎.‎ ‎B‎o‎t‎h‎ ‎v‎e‎r‎s‎o‎n‎s‎ ‎o‎f‎ ‎t‎h‎e‎ ‎C‎h‎u‎d‎ ‎m‎e‎m‎e‎ ‎h‎a‎v‎e‎ ‎b‎e‎e‎n‎ ‎p‎o‎p‎u‎l‎a‎r‎i‎z‎e‎d‎ ‎b‎y‎ ‎l‎e‎f‎t‎i‎e‎s‎ ‎a‎n‎d‎ ‎t‎r‎a‎n‎n‎i‎e‎s‎ ‎a‎s‎ ‎b‎e‎i‎n‎g‎ ‎a‎ ‎r‎e‎p‎r‎e‎s‎e‎n‎t‎a‎t‎i‎o‎n‎ ‎o‎f‎ ‎a‎ ‎t‎y‎p‎i‎c‎a‎l‎ ‎/‎p‎o‎l‎/‎t‎a‎r‎d‎.‎

O‎r‎i‎g‎i‎n‎a‎l‎l‎y‎ ‎d‎e‎f‎i‎n‎e‎d‎ ‎a‎s‎ ‎a‎ ‎""‎a‎v‎o‎i‎d‎e‎d‎ ‎a‎n‎d‎ ‎u‎n‎a‎p‎p‎e‎a‎l‎i‎n‎g‎ ‎p‎e‎r‎s‎o‎n‎""‎ ‎a‎f‎t‎e‎r‎ ‎t‎h‎e‎ ‎m‎o‎v‎i‎e‎ ‎C‎.‎H‎.‎U‎.‎D‎.‎ ‎(‎""‎C‎a‎n‎n‎i‎b‎a‎l‎i‎s‎t‎i‎c‎ ‎H‎u‎m‎a‎n‎o‎i‎d‎ ‎U‎n‎d‎e‎r‎g‎r‎o‎u‎n‎d‎ ‎D‎w‎e‎l‎l‎e‎r‎s‎""‎)‎ ‎u‎n‎t‎i‎l‎ ‎i‎t‎ ‎w‎a‎s‎ ‎c‎o‎r‎r‎u‎p‎t‎e‎d‎ ‎i‎n‎t‎o‎ ‎a‎ ‎c‎o‎m‎p‎l‎e‎t‎e‎l‎y‎ ‎d‎i‎f‎f‎e‎r‎e‎n‎t‎ ‎m‎e‎a‎n‎i‎n‎g‎ ‎l‎a‎s‎t‎ ‎t‎h‎u‎r‎s‎d‎a‎y‎ ‎b‎y‎ ‎t‎h‎e‎ ‎i‎n‎t‎e‎r‎n‎e‎t‎s‎ ‎(‎j‎u‎s‎t‎ ‎l‎i‎k‎e‎ ‎f‎a‎g‎g‎o‎t‎)‎.‎ ‎T‎h‎e‎ ‎t‎e‎r‎m‎'‎s‎ ‎p‎o‎p‎u‎l‎a‎r‎i‎t‎y‎ ‎i‎s‎ ‎l‎i‎k‎e‎l‎y‎ ‎m‎i‎l‎k‎e‎d‎ ‎f‎r‎o‎m‎ ‎i‎t‎'‎s‎ ‎s‎i‎m‎i‎l‎a‎r‎i‎t‎y‎ ‎t‎o‎ ‎C‎h‎a‎d‎.‎


(‎(‎ ‎C‎H‎H‎U‎U‎U‎U‎U‎D‎D‎D‎S‎S‎S‎S‎!‎!‎!‎!‎ ‎)‎)‎

.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎ ‎T‎i‎m‎e‎ ‎f‎o‎r‎ ‎t‎h‎o‎s‎e‎ ‎I‎R‎C‎ ‎f‎a‎g‎s‎.‎.‎.‎.‎ ‎#‎L‎R‎H‎:‎

[‎1‎2‎:‎1‎2‎]‎ ‎<‎@‎L‎0‎j‎1‎k‎>‎ ‎l‎o‎l‎ ‎s‎p‎o‎o‎n‎
[‎1‎2‎:‎1‎2‎]‎ ‎<‎@‎a‎n‎j‎j‎i‎>‎ ‎c‎o‎l‎d‎ ‎o‎n‎e‎s‎ ‎c‎o‎m‎m‎i‎s‎s‎i‎o‎n‎e‎d‎ ‎t‎h‎e‎s‎e‎ ‎p‎p‎l‎ ‎t‎o‎ ‎s‎i‎n‎g‎ ‎t‎h‎e‎i‎r‎ ‎r‎e‎t‎a‎r‎d‎e‎d‎ ‎s‎o‎n‎g‎s‎
[‎1‎2‎:‎1‎2‎]‎ ‎<‎@‎L‎0‎j‎1‎k‎>‎ ‎l‎i‎k‎e‎ ‎w‎o‎u‎l‎d‎ ‎y‎o‎u‎ ‎a‎c‎t‎u‎a‎l‎l‎y‎ ‎f‎u‎c‎k‎ ‎a‎ ‎b‎e‎a‎r‎
[‎1‎2‎:‎1‎3‎]‎ ‎<‎@‎x‎a‎r‎t‎e‎t‎>‎ ‎a‎ ‎n‎e‎i‎g‎h‎b‎o‎r‎ ‎j‎u‎s‎t‎ ‎t‎e‎x‎t‎e‎d‎ ‎m‎e‎ ‎t‎o‎ ‎s‎c‎o‎l‎e‎d‎ ‎m‎e‎ ‎a‎b‎o‎u‎t‎ ‎n‎o‎t‎ ‎p‎u‎t‎t‎i‎n‎g‎ ‎t‎h‎e‎ ‎q‎u‎a‎r‎t‎e‎r‎s‎ ‎b‎a‎c‎k‎ ‎i‎n‎ ‎t‎h‎e‎ ‎s‎l‎o‎t‎s‎ ‎f‎o‎r‎ ‎t‎h‎e‎ ‎f‎r‎e‎e‎ ‎l‎a‎u‎n‎d‎r‎y‎ ‎m‎a‎c‎h‎i‎n‎e‎s‎.‎ ‎i‎ ‎h‎a‎d‎ ‎t‎o‎ ‎l‎e‎t‎ ‎h‎e‎r‎ ‎k‎n‎o‎w‎ ‎i‎'‎v‎e‎ ‎o‎n‎l‎y‎ ‎u‎s‎e‎d‎ ‎t‎h‎e‎ ‎f‎u‎c‎k‎e‎r‎s‎ ‎t‎w‎i‎c‎e‎ ‎a‎n‎d‎ ‎t‎h‎a‎t‎ ‎i‎'‎m‎ ‎c‎o‎u‎r‎t‎e‎o‎u‎s‎ ‎a‎n‎d‎ ‎r‎e‎t‎u‎r‎n‎e‎d‎ ‎t‎h‎e‎ ‎q‎u‎a‎r‎t‎e‎r‎s‎ ‎t‎o‎ ‎t‎h‎e‎ ‎s‎l‎o‎t‎s‎.‎
[‎1‎2‎:‎1‎3‎]‎ ‎<‎@‎a‎n‎j‎j‎i‎>‎ ‎b‎u‎t‎ ‎t‎h‎i‎s‎ ‎o‎n‎e‎ ‎w‎i‎l‎l‎ ‎n‎o‎t‎ ‎g‎e‎t‎ ‎o‎u‎t‎ ‎o‎f‎ ‎m‎y‎ ‎h‎e‎a‎d‎ ‎o‎m‎f‎g‎
[‎1‎2‎:‎1‎3‎]‎ ‎<‎+‎s‎p‎o‎o‎n‎>‎ ‎e‎a‎s‎i‎l‎y‎ ‎L‎0‎j‎1‎k‎ ‎
[‎1‎2‎:‎1‎3‎]‎ ‎<‎@‎x‎a‎r‎t‎e‎t‎>‎ ‎d‎o‎n‎t‎ ‎e‎v‎e‎r‎ ‎t‎e‎x‎t‎ ‎m‎e‎ ‎a‎g‎a‎i‎n‎

.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎

T‎h‎e‎ ‎l‎e‎m‎o‎n‎ ‎(‎C‎i‎t‎r‎u‎s‎ ‎×‎ ‎l‎i‎m‎o‎n‎)‎ ‎i‎s‎ ‎a‎ ‎s‎p‎e‎c‎i‎e‎s‎ ‎o‎f‎ ‎s‎m‎a‎l‎l‎ ‎e‎v‎e‎r‎g‎r‎e‎e‎n‎ ‎t‎r‎e‎e‎ ‎i‎n‎ ‎t‎h‎e‎ ‎f‎l‎o‎w‎e‎r‎i‎n‎g‎ ‎p‎l‎a‎n‎t‎ ‎f‎a‎m‎i‎l‎y‎ ‎R‎u‎t‎a‎c‎e‎a‎e‎,‎ ‎n‎a‎t‎i‎v‎e‎ ‎t‎o‎ ‎A‎s‎i‎a‎,‎ ‎p‎r‎i‎m‎a‎r‎i‎l‎y‎ ‎n‎o‎r‎t‎h‎e‎a‎s‎t‎e‎r‎n‎ ‎I‎n‎d‎i‎a‎ ‎(‎A‎s‎s‎a‎m‎)‎,‎ ‎n‎o‎r‎t‎h‎e‎r‎n‎ ‎M‎y‎a‎n‎m‎a‎r‎,‎ ‎a‎n‎d‎ ‎C‎h‎i‎n‎a‎.‎ ‎T‎h‎e‎ ‎t‎r‎e‎e‎'‎s‎ ‎e‎l‎l‎i‎p‎s‎o‎i‎d‎a‎l‎ ‎y‎e‎l‎l‎o‎w‎ ‎f‎r‎u‎i‎t‎ ‎i‎s‎ ‎u‎s‎e‎d‎ ‎f‎o‎r‎ ‎c‎u‎l‎i‎n‎a‎r‎y‎ ‎a‎n‎d‎ ‎n‎o‎n‎-‎c‎u‎l‎i‎n‎a‎r‎y‎ ‎p‎u‎r‎p‎o‎s‎e‎s‎ ‎t‎h‎r‎o‎u‎g‎h‎o‎u‎t‎ ‎t‎h‎e‎ ‎w‎o‎r‎l‎d‎,‎ ‎p‎r‎i‎m‎a‎r‎i‎l‎y‎ ‎f‎o‎r‎ ‎i‎t‎s‎ ‎j‎u‎i‎c‎e‎,‎ ‎w‎h‎i‎c‎h‎ ‎h‎a‎s‎ ‎b‎o‎t‎h‎ ‎c‎u‎l‎i‎n‎a‎r‎y‎ ‎a‎n‎d‎ ‎c‎l‎e‎a‎n‎i‎n‎g‎ ‎u‎s‎e‎s‎.‎ ‎T‎h‎e‎ ‎p‎u‎l‎p‎ ‎a‎n‎d‎ ‎r‎i‎n‎d‎ ‎a‎r‎e‎ ‎a‎l‎s‎o‎ ‎u‎s‎e‎d‎ ‎i‎n‎ ‎c‎o‎o‎k‎i‎n‎g‎ ‎a‎n‎d‎ ‎b‎a‎k‎i‎n‎g‎.‎ ‎T‎h‎e‎ ‎d‎i‎s‎t‎i‎n‎c‎t‎i‎v‎e‎ ‎s‎o‎u‎r‎ ‎t‎a‎s‎t‎e‎ ‎o‎f‎ ‎l‎e‎m‎o‎n‎ ‎j‎u‎i‎c‎e‎,‎ ‎d‎e‎r‎i‎v‎e‎d‎ ‎f‎r‎o‎m‎ ‎c‎i‎t‎r‎i‎c‎ ‎a‎c‎i‎d‎,‎ ‎m‎a‎k‎e‎s‎ ‎i‎t‎ ‎a‎ ‎k‎e‎y‎ ‎i‎n‎g‎r‎e‎d‎i‎e‎n‎t‎ ‎i‎n‎ ‎d‎r‎i‎n‎k‎s‎ ‎a‎n‎d‎ ‎f‎o‎o‎d‎s‎.‎ ‎T‎h‎i‎s‎ ‎p‎h‎o‎t‎o‎g‎r‎a‎p‎h‎ ‎s‎h‎o‎w‎s‎ ‎a‎ ‎w‎h‎o‎l‎e‎ ‎a‎n‎d‎ ‎h‎a‎l‎v‎e‎d‎ ‎l‎e‎m‎o‎n‎ ‎a‎g‎a‎i‎n‎s‎t‎ ‎a‎ ‎b‎l‎a‎c‎k‎ ‎b‎a‎c‎k‎g‎r‎o‎u‎n‎d‎.‎

P‎h‎o‎t‎o‎g‎r‎a‎p‎h‎ ‎c‎r‎e‎d‎i‎t‎:‎ ‎I‎v‎a‎r‎ ‎L‎e‎i‎d‎u‎s‎

.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎

T‎h‎i‎s‎ ‎i‎s‎ ‎N‎e‎w‎s‎ ‎N‎e‎d‎ ‎s‎i‎g‎n‎i‎n‎g‎ ‎o‎f‎f‎ ‎w‎i‎t‎h‎ ‎a‎ ‎r‎a‎n‎d‎o‎m‎ ‎f‎a‎c‎t‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎ ‎N‎i‎g‎g‎e‎r‎s‎ ‎e‎v‎o‎l‎v‎e‎d‎ ‎f‎r‎o‎m‎ ‎m‎o‎n‎k‎e‎y‎s‎!‎ ‎T‎h‎e‎ ‎m‎o‎r‎e‎ ‎y‎o‎u‎ ‎k‎n‎o‎w‎!‎ ‎🌈⭐️‎️‎"
7VjXaNGY,i32_error.c,Kitomas,C,Thursday 24th of August 2023 11:52:11 PM CDT,"//this will show that that conversion error for i32 and f32 is 64 and ~2.98023224e-8 respectively
//(0.0000000298023223876953125 in normal notation, or about 3 ten millionths of a percent)

#define RANGE 100000000

#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include <stdint.h>

int get_random_i32(){
    union {
      struct {
          uint16_t l;
          uint16_t h;
      };
      int32_t i;
    } output;
    output.l=rand();
    output.h=rand();
    return output.i;
}

//multiplying by inv32 is equivalent to dividing by 0x7fffffff
const float inv32=1.0f/0x7fffffff;
int32_t convert_from_and_to(int32_t input){
    float from=(float)input*inv32;
    return from*2147483647; //to
}

int main(){
    time_t t;
    srand((unsigned)time(&t));
    
    int32_t mn=0,mx=0;
    for(int i=0; i<RANGE; ++i){
        int32_t src=get_random_i32();
        int32_t dst=convert_from_and_to(src);
        int32_t dif=dst-src;
        if(dif<mn) mn=dif;
        if(dif>mx) mx=dif;
        //printf(""%11i -> %11i (%i)\n"",src,dst, dif);
    }
    //given enough RANGE, this should end up being -64 and 64 respectively
    printf(""min=%i, max=%i\n"",mn,mx);
   
    return 0;
}"
SQQV85PZ,Untitled,11982275910,HTML 5,Thursday 24th of August 2023 11:42:46 PM CDT,"
<!DOCTYPE html>
<html>
<head>
  <title>Gerar PDF</title>
  <style>
    .form-group {
      margin-bottom: 20px;
    }
    label {
      display: block;
    }
  </style>
</head>
<body>
  <h1>Gerar PDF</h1>

  <form id=""pdfForm"">
    <div class=""form-group"">
      <label for=""name"">Nome:</label>
      <input type=""text"" id=""name"" name=""name"">
    </div>

    <div class=""form-group"">
      <label for=""email"">E-mail:</label>
      <input type=""email"" id=""email"" name=""email"">
    </div>

    <button type=""button"" onclick=""generatePDF()"">Gerar PDF</button>
  </form>

  <script src=""https://cdnjs.cloudflare.com/ajax/libs/jspdf/2.4.0/jspdf.umd.min.js""></script>
  <script>
    function generatePDF() {
      var pdf = new jsPDF();
      var formData = new FormData(document.getElementById(""pdfForm""));

      formData.forEach(function(value, key){
        pdf.text(20, 20, key + "": "" + value);
      });

      pdf.save(""formulario.pdf"");
    }
  </script>
</body>
</html>
"
ERpCA9zJ,Untitled,BayangBec,JSON,Thursday 24th of August 2023 11:27:32 PM CDT,"{
  ""data"": [
    {
      ""catalog_id"": ""ddbf10c6-17a9-45c5-ab30-4641af7d1cc2"",
      ""created_at"": ""2023-08-25T04:25:11.624Z"",
      ""epustaka_id"": ""a392178b-fb12-4d89-928d-cd447b3e47e1"",
      ""epustaka_catalog_qty"": 2
    },
    {
      ""catalog_id"": ""1b20f91e-821b-4978-9297-337b9ca83902"",
      ""created_at"": ""2023-08-25T04:25:11.624Z"",
      ""epustaka_id"": ""a392178b-fb12-4d89-928d-cd447b3e47e1"",
      ""epustaka_catalog_qty"": 1
    },
    {
      ""catalog_id"": ""5b590e60-348b-4044-afb4-ca71866e76da"",
      ""created_at"": ""2023-08-25T04:25:11.624Z"",
      ""epustaka_id"": ""a392178b-fb12-4d89-928d-cd447b3e47e1"",
      ""epustaka_catalog_qty"": 1
    },
    {
      ""catalog_id"": ""02965a1b-cb3b-4575-bb0c-60cd8cb10939"",
      ""created_at"": ""2023-08-25T04:25:11.624Z"",
      ""epustaka_id"": ""a392178b-fb12-4d89-928d-cd447b3e47e1"",
      ""epustaka_catalog_qty"": 1
    },
    {
      ""catalog_id"": ""dd049edc-1d94-47aa-83bf-12462bdc42bb"",
      ""created_at"": ""2023-08-25T04:25:11.624Z"",
      ""epustaka_id"": ""a392178b-fb12-4d89-928d-cd447b3e47e1"",
      ""epustaka_catalog_qty"": 1
    }
  ],
  ""app_id"": ""625cf542-5f0d-497e-891c-e1dfd26b6884"",
  ""config"": {
    ""url"": ""https://dev-api-agent-manager.mocogawe.com/agent-manager"",
    ""header"": {
      ""headers"": {
        ""Accept"": ""application/json"",
        ""Content-Type"": ""application/json"",
        ""Access-Control-Allow-Origin"": true
      }
    },
    ""method"": ""post"",
    ""endpoint"": ""activation/content""
  },
  ""credential"": ""454f6a64324f5958534a4a445233626f2f79754834356b456f6b5538755036346d357a4a6d65526c6b356a48466162656d4f35794250623458364c6c375956612b326e2f674f6169347256724a61324f5a66437441413d3d""
}"
2zG2AmdQ,LazySegmentTree,Ethan-ZYF,C++,Thursday 24th of August 2023 10:36:00 PM CDT,"/*
 * @author jiangly
 * https://codeforces.com/profile/jiangly
 */
template <class Info, class Tag>
struct LazySegmentTree {
    const int n;
    std::vector<Info> info;
    std::vector<Tag> tag;
    LazySegmentTree(int n) : n(n), info(4 << std::__lg(n)), tag(4 << std::__lg(n)) {}
    LazySegmentTree(std::vector<Info> init) : LazySegmentTree(init.size()) {
        std::function<void(int, int, int)> build = [&](int p, int l, int r) {
            if (r - l == 1) {
                info[p] = init[l];
                return;
            }
            int m = (l + r) / 2;
            build(2 * p, l, m);
            build(2 * p + 1, m, r);
            pull(p);
        };
        build(1, 0, n);
    }
    void pull(int p) {
        info[p] = info[2 * p] + info[2 * p + 1];
    }
    void apply(int p, const Tag &v) {
        info[p].apply(v);
        tag[p].apply(v);
    }
    void push(int p) {
        apply(2 * p, tag[p]);
        apply(2 * p + 1, tag[p]);
        tag[p] = Tag();
    }
    void modify(int p, int l, int r, int x, const Info &v) {
        if (r - l == 1) {
            info[p] = v;
            return;
        }
        int m = (l + r) / 2;
        push(p);
        if (x < m) {
            modify(2 * p, l, m, x, v);
        } else {
            modify(2 * p + 1, m, r, x, v);
        }
        pull(p);
    }
    void modify(int p, const Info &v) {
        modify(1, 0, n, p, v);
    }
    Info rangeQuery(int p, int l, int r, int x, int y) {
        if (l >= y || r <= x) {
            return Info();
        }
        if (l >= x && r <= y) {
            return info[p];
        }
        int m = (l + r) / 2;
        push(p);
        return rangeQuery(2 * p, l, m, x, y) + rangeQuery(2 * p + 1, m, r, x, y);
    }
    Info rangeQuery(int l, int r) {
        return rangeQuery(1, 0, n, l, r);
    }
    void rangeApply(int p, int l, int r, int x, int y, const Tag &v) {
        if (l >= y || r <= x) {
            return;
        }
        if (l >= x && r <= y) {
            apply(p, v);
            return;
        }
        int m = (l + r) / 2;
        push(p);
        rangeApply(2 * p, l, m, x, y, v);
        rangeApply(2 * p + 1, m, r, x, y, v);
        pull(p);
    }
    void rangeApply(int l, int r, const Tag &v) {
        return rangeApply(1, 0, n, l, r, v);
    }

    int search(int p, int l, int r, int x, int y, i64 v) {
        if (l >= y || r <= x) return y;
        if (info[p].min >= v) return y;
        if (r - l == 1) return l;
        int m = (l + r) / 2;
        push(p);
        int res = search(2 * p, l, m, x, y, v);
        if (res == y) res = search(2 * p + 1, m, r, x, y, v);
        return res;
    }

    int search(int l, int r, i64 v) {
        return search(1, 0, n, l, r, v);
    }
};

struct Tag {
    i64 x;

    Tag(int _x = 0) : x{_x} {}

    void apply(const Tag &t) {
        x += t.x;
    }
};

struct Info {
    i64 x;
    int sz;

    Info(i64 _x = 0, int _sz = 1) : x{_x}, sz{_sz} {}

    void apply(const Tag &t) {
        x += t.x * sz;
    }
};

Info operator+(const Info &a, const Info &b) {
    return Info{a.x + b.x, a.sz + b.sz};
}
"
bPB0YfFz,Hungarian,Ethan-ZYF,C++,Thursday 24th of August 2023 10:35:37 PM CDT,"/*
 * @author cuiaoxiang
 * https://codeforces.com/profile/cuiaoxiang
 */
struct Hungarian {
    int n;
    std::vector<std::vector<int>> a;
    std::vector<int> d;
    std::vector<bool> visit;
    bool path(int u) {
        for (auto& v : a[u]) {
            if (visit[v]) continue;
            visit[v] = true;
            if (d[v] < 0 || path(d[v])) {
                d[v] = u;
                return true;
            }
        }
        return false;
    }
    Hungarian(int n, int m) : n(n), a(n), d(m, -1), visit(m) {}
    void add(int x, int y) {
        a[x].push_back(y);
    }
    int solve() {
        int ret = 0;
        for (int i = 0; i < n; ++i) {
            std::fill(visit.begin(), visit.end(), false);
            ret += path(i);
        }
        return ret;
    }
};"
aGmxPNup,HLD,Ethan-ZYF,C++,Thursday 24th of August 2023 10:35:22 PM CDT,"/*
 * @author jiangly
 * https://codeforces.com/profile/jiangly
 */
struct HLD {
    int n;
    std::vector<int> siz, top, dep, parent, in, out, seq;
    std::vector<std::vector<int>> adj;
    int cur;

    HLD() {}
    HLD(int n) {
        init(n);
    }
    void init(int n) {
        this->n = n;
        siz.resize(n);
        top.resize(n);
        dep.resize(n);
        parent.resize(n);
        in.resize(n);
        out.resize(n);
        seq.resize(n);
        cur = 0;
        adj.assign(n, {});
    }
    void addEdge(int u, int v) {
        adj[u].push_back(v);
        adj[v].push_back(u);
    }
    void work(int root = 0) {
        top[root] = root;
        dep[root] = 0;
        parent[root] = -1;
        dfs1(root);
        dfs2(root);
    }
    void dfs1(int u) {
        if (parent[u] != -1) {
            adj[u].erase(std::find(adj[u].begin(), adj[u].end(), parent[u]));
        }

        siz[u] = 1;
        for (auto &v : adj[u]) {
            parent[v] = u;
            dep[v] = dep[u] + 1;
            dfs1(v);
            siz[u] += siz[v];
            if (siz[v] > siz[adj[u][0]]) {
                std::swap(v, adj[u][0]);
            }
        }
    }
    void dfs2(int u) {
        in[u] = cur++;
        seq[in[u]] = u;
        for (auto v : adj[u]) {
            top[v] = v == adj[u][0] ? top[u] : v;
            dfs2(v);
        }
        out[u] = cur;
    }
    int lca(int u, int v) {
        while (top[u] != top[v]) {
            if (dep[top[u]] > dep[top[v]]) {
                u = parent[top[u]];
            } else {
                v = parent[top[v]];
            }
        }
        return dep[u] < dep[v] ? u : v;
    }

    int dist(int u, int v) {
        return dep[u] + dep[v] - 2 * dep[lca(u, v)];
    }

    int jump(int u, int k) {
        if (dep[u] < k) {
            return -1;
        }

        int d = dep[u] - k;

        while (dep[top[u]] > d) {
            u = parent[top[u]];
        }

        return seq[in[u] - dep[u] + d];
    }

    bool isAncester(int u, int v) {
        return in[u] <= in[v] && in[v] < out[u];
    }

    int rootedChild(int u, int v) {
        if (u == v) {
            return u;
        }
        if (!isAncester(u, v)) {
            return parent[u];
        }
        auto it = std::upper_bound(adj[u].begin(), adj[u].end(), v, [&](int x, int y) {
                      return in[x] < in[y];
                  }) -
                  1;
        return *it;
    }

    int rootedSize(int u, int v) {
        if (u == v) {
            return n;
        }
        if (!isAncester(v, u)) {
            return siz[v];
        }
        return n - siz[rootedChild(v, u)];
    }

    int rootedLca(int a, int b, int c) {
        return lca(a, b) ^ lca(b, c) ^ lca(c, a);
    }

    std::vector<pair<int, int>> rootedPath(int u, int v) {
        std::vector<pair<int, int>> res;
        while (top[u] != top[v]) {
            res.emplace_back(in[top[u]], in[u] + 1);
            u = parent[top[u]];
        }
        res.emplace_back(in[v], in[u] + 1);
        return res;
    }

    std::pair<int, int> rootedSubtree(int u) {
        return make_pair(in[u], out[u]);
    }
};"
