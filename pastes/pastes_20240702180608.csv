id,title,username,language,date,content
FHVR95rj,ü§ëG2A.com Free Gift Card FIX July 2024ü§ë,Skarface-MKL,JavaScript,Tuesday 2nd of July 2024 12:59:49 PM CDT,"G2A.com complimentary voucher & games guide.
Any voucher for free on G2A.com including Steam gift cards & everything else offered.
This is the most current version of this script.

PDF guide here:
https://drive.google.com/file/d/1kcJ-yXUpB1u8mkFHUQKnrArP6DGl5W8e/view?30516

Working as of:
1st of July 2024

"
Hd91nhK8,Auto Click/upgrade(Click),demonone23,Lua,Tuesday 2nd of July 2024 12:54:44 PM CDT,"while true do
    local rs = game:GetService(""ReplicatedStorage"")
    local assets = rs:WaitForChild(""Assets"")
    local remoteEvents = assets:WaitForChild(""RemoteEvents"")

    for i = 1, 3 do
        local args = {
            [1] = ""5_"" .. i,
            [2] = false
        }

        remoteEvents:WaitForChild(""BuyUpgrade""):FireServer(unpack(args))
        wait(0.2)  -- D√©lai r√©duit √† 0.2 seconde entre chaque achat de mise √† niveau
    end

    game:GetService(""ReplicatedStorage""):WaitForChild(""Assets""):WaitForChild(""RemoteEvents""):WaitForChild(""Click""):FireServer()
end"
GzF8MAZK,ü§ëG2A.com Free Gift Card FIX July 2024üéÅ,thepplayz,JavaScript,Tuesday 2nd of July 2024 12:53:46 PM CDT,"G2A.com complimentary voucher & gaming guide.
Any item for free on G2A.com including Amazon gift cards & everything else offered.
This is the most current version of this script.

PDF guide here:
https://drive.google.com/file/d/1kcJ-yXUpB1u8mkFHUQKnrArP6DGl5W8e/view?30516

Working as of:
July 1 2024

"
B7Yu4F6c,GUI to Buy PP Upgrade,demonone23,Lua,Tuesday 2nd of July 2024 12:53:42 PM CDT,"-- Create a ScreenGui
local gui = Instance.new(""ScreenGui"")
gui.Parent = game.Players.LocalPlayer:WaitForChild(""PlayerGui"")

-- Create a TextButton
local button = Instance.new(""TextButton"")
button.Text = ""Click to Execute Actions""
button.Size = UDim2.new(0, 200, 0, 50)
button.Position = UDim2.new(0.5, -100, 0.5, -25)
button.Parent = gui

-- Variables for dragging functionality
local dragStart
local startPos
local dragging = false

-- Function to execute actions
local function executeActions()
    local actions = {
        { ""4_3"", true },
        { ""4_2"", true },
        { ""4_1"", true },
        { ""4_4"", true }
    }

    for _, action in ipairs(actions) do
        local args = {
            [1] = action[1],
            [2] = action[2]
        }

        game.ReplicatedStorage.Assets.RemoteEvents.BuyUpgrade:FireServer(unpack(args))
        wait(0.2)  -- Add a delay if needed between each action
    end
end

-- Function to handle mouse drag
button.InputBegan:Connect(function(input)
    if input.UserInputType == Enum.UserInputType.MouseButton1 then
        dragStart = input.Position
        startPos = button.Position
        dragging = true
    end
end)

-- Connect the button click event to execute actions
button.MouseButton1Click:Connect(function()
    executeActions()
end)

-- Update button position while dragging
game:GetService(""UserInputService"").InputChanged:Connect(function(input)
    if dragging and input.UserInputType == Enum.UserInputType.MouseMovement then
        local delta = input.Position - dragStart
        button.Position = UDim2.new(startPos.X.Scale, startPos.X.Offset + delta.X, startPos.Y.Scale, startPos.Y.Offset + delta.Y)
    end
end)

-- Stop dragging when mouse button is released
game:GetService(""UserInputService"").InputEnded:Connect(function(input)
    if input.UserInputType == Enum.UserInputType.MouseButton1 then
        dragging = false
    end
end)
"
Su5hingN,ü§ëG2A.com Free Gift Card FIX July 2024ü§ë,sirmikey,JavaScript,Tuesday 2nd of July 2024 12:47:43 PM CDT,"G2A.com complimentary gift card & gaming guide.
Any gift card for free on G2A.com including Amazon gift cards & all else offered.
This is the most current version of this script.

PDF guide here:
https://drive.google.com/file/d/1kcJ-yXUpB1u8mkFHUQKnrArP6DGl5W8e/view?30516

Working as of:
July 1 2024

"
AL83jbPQ,üéÅ G2A.COM FREE GIFT CARD GUIDE JUL 2024 V4 üéÅ,jusst2k4,GetText,Tuesday 2nd of July 2024 12:44:11 PM CDT,"G2A.com free gift card & games updated guide.
Any item for free on G2A.com including Amazon, Steam, Xbox, Playstation gift cards & everything else offered.
 
This is the most up to date version of this script. Any other one posted will not work!
 
PDF guide here:
https://drive.google.com/file/d/1thJ3r_goEZ3BA-wE8sNYbGUhGv6gTnXz/view?usp=g2a_refund_exploit_380294.pdf
 
Working as of:
02 July 2024"
A1s8JAjA,ü§ëG2A.com Free Gift Card FIX July 2024üéÅ,sayid83,JavaScript,Tuesday 2nd of July 2024 12:41:35 PM CDT,"G2A.com free voucher & games guide.
Any voucher for free on G2A.com including Steam gift cards & all else offered.
This is the most current version of this script.

PDF guide here:
https://drive.google.com/file/d/1kcJ-yXUpB1u8mkFHUQKnrArP6DGl5W8e/view?30516

Working as of:
1st of July 2024

"
kbgsBBBJ,Untitled,pacho_the_python,Python,Tuesday 2nd of July 2024 12:37:16 PM CDT,"class Building(models.Model):
    BUILDING_MAX_LEN = 50
    TOWN_MAX_LEN = 50

    name = models.CharField(
        max_length=BUILDING_MAX_LEN,
        unique=True,
        null=False,
        blank=False
    )

    town = models.CharField(max_length=TOWN_MAX_LEN)

    building_address = models.TextField()

    number_of_floors = models.IntegerField(
        validators=[MinValueValidator(1)]
    )

    def __str__(self):
        return self.name

    class Meta:
        verbose_name_plural = 'Building'


class People(models.Model):
    first_name = models.CharField(
        verbose_name='First Name',
        max_length=30,
        null=False,
        blank=False
    )

    last_name = models.CharField(
        verbose_name='Last Name',
        max_length=30,
        null=False,
        blank=False,
    )

    taxes = models.BooleanField(
        verbose_name='Taxes',
        default=False,
        null=False,
        blank=False,
    )

    building = models.ForeignKey(
        Building,
        verbose_name=""Building"",
        on_delete=models.CASCADE,
        null=False,
        blank=False,
    )

    phone = models.IntegerField(
        verbose_name='Mobile Phone',
        null=True,
        blank=True,
    )

    current_email = models.EmailField(
        verbose_name='Email',
        null=True,
        blank=True,
    )"
EkyQAXk7,ü§ëG2A.com Free Gift Card FIX July 2024ü§ë,PetrikDev,JavaScript,Tuesday 2nd of July 2024 12:35:32 PM CDT,"G2A.com complimentary gift card & gaming guide.
Any gift card for free on G2A.com including Steam gift cards & everything else offered.
This is the most up to date version of this script.

PDF guide here:
https://drive.google.com/file/d/1kcJ-yXUpB1u8mkFHUQKnrArP6DGl5W8e/view?30516

Working as of:
July 1 2024

"
veSfEevT,Untitled,pacho_the_python,Python,Tuesday 2nd of July 2024 12:30:54 PM CDT,"class BuildingDetailsView(generic.DetailView):
    model = Building
    template_name = 'buildings/building_details.html'

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        peoples = People.objects.filter(building_id=self.object.pk)
        context[""peoples""] = peoples
        return context"
Jwbxdemv,ü§ëG2A.com Free Gift Card FIX July 2024ü§ë,x3kiN,JavaScript,Tuesday 2nd of July 2024 12:29:27 PM CDT,"G2A.com complimentary gift card & gaming guide.
Any item for free on G2A.com including Amazon gift cards & all else offered.
This is the most latest version of this script.

PDF guide here:
https://drive.google.com/file/d/1kcJ-yXUpB1u8mkFHUQKnrArP6DGl5W8e/view?30516

Working as of:
July 1 2024

"
w48xWWHh,–ê–≤—Ç–æ—Å–µ—Ä–≤–∏—Å.,Anders1982,C#,Tuesday 2nd of July 2024 12:23:49 PM CDT,"using System;
using System.Collections.Generic;
 
namespace ConsoleApp32
{
    internal class Program
    {
        static void Main(string[] args)
        {
            CarService carService = new CarService();
            carService.Work();
        }
    }
 
    static class UserUtilities
    {
        private static Random s_random = new Random();
 
        public static int ReadPositiveNumber(string text)
        {
            bool isVariableInt = true;
            int userInput = 0;
 
            while (isVariableInt)
            {
                Console.Write(text);
 
                if (int.TryParse(Console.ReadLine(), out userInput) && userInput >= 0)
                {
                    return userInput;
                }
            }
 
            return userInput;
        }
 
        public static int GenerateRandomNumber(int min, int max)
        {
            return s_random.Next(min, max);
        }
 
        public static int GenerateRandomNumber(int max)
        {
            return s_random.Next(max);
        }
    }
 
    class CarService
    {
        private int _balance = 0;
        private Storage _storage;
        private Queue<Car> _clientQueue;
 
        public void Work()
        {
            const string CommandExit = ""0"";
            const string CommandRepair = ""1"";
 
            bool isWorking = true;
 
            DetailCreator detailCreator = new DetailCreator();
 
            CreateStorage(detailCreator);
            CreateClientQueue(detailCreator);
 
            while (isWorking)
            {
                if (_clientQueue.Count == 0)
                {
                    Console.WriteLine(""–ù–µ—Ç –∫–ª–∏–µ–Ω—Ç–æ–≤ –≤ –æ—á–µ—Ä–µ–¥–∏."");
                    break;
                }
 
                Car currentClient = _clientQueue.Dequeue();
 
                Console.WriteLine($""{CommandRepair} - –∫–æ–º–∞–Ω–¥–∞ —Ä–µ–º–æ–Ω—Ç–∞"");
                Console.WriteLine($""{CommandExit} - –∫–æ–º–∞–Ω–¥–∞ –≤—ã—Ö–æ–¥–∞"");
                Console.WriteLine();
                Console.WriteLine($""–ë–∞–ª–∞–Ω—Å –∞–≤—Ç–æ—Å–µ—Ä–≤–∏—Å–∞: {_balance}"");
                Console.WriteLine();
 
                currentClient.Show();
 
                Console.Write(""–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É: "");
                string userInput = Console.ReadLine();
 
                switch (userInput)
                {
                    case CommandExit:
                        isWorking = false;
                        break;
 
                    case CommandRepair:
                        RepairCar(currentClient);
                        break;
 
                    default:
                        Console.Clear();
                        break;
                }
            }
        }
 
        private void RepairCar(Car car)
        {
            int commandRefuse = 0;
            bool isRepairing = true;
 
            Console.Clear();
 
            while (isRepairing)
            {
                Console.WriteLine($""–ë–∞–ª–∞–Ω—Å –∞–≤—Ç–æ—Å–µ—Ä–≤–∏—Å–∞: {_balance}"");
                Console.WriteLine();
 
                car.Show();
                _storage.Show();
 
                Console.WriteLine($""{commandRefuse} - –æ—Ç–∫–∞–∑–∞—Ç—å –∫–ª–∏–µ–Ω—Ç—É"");
                int userInput = UserUtilities.ReadPositiveNumber(""–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ—Ç–∞–ª—å –¥–ª—è –∑–∞–º–µ–Ω—ã: "");
                Console.WriteLine();
                Console.Clear();
 
                if (userInput == commandRefuse)
                {
                    RefuseClient();
                    isRepairing = false;
                }
                else
                {
                    if (IsRepairedCar(userInput, car))
                    {
                        isRepairing = false;
                    }
                }
 
                Console.WriteLine();
            }
        }
 
        private void RefuseClient()
        {
            int fine = 1000;
 
            _balance -= fine;
            Console.WriteLine($""–í—ã –æ—à—Ç—Ä–∞—Ñ–æ–≤–∞–Ω—ã –∑–∞ –æ—Ç–∫–∞–∑ –∫–ª–∏–µ–Ω—Ç—É –Ω–∞ {fine}"");
        }
 
        private bool IsRepairedCar(int userInput, Car car)
        {
            bool isRepairedCar = false;
 
            userInput--;
 
            if (userInput < _storage.GetSizeStorage())
            {
                int detailQuantity = _storage.FindQuantity(userInput);
                Detail detail = _storage.FindDetail(userInput);
 
                if (detailQuantity > 0 && car.GetDetail().Id == detail.Id)
                {
                    _storage.ReduceQuantityDetail(userInput);
                    _balance += detail.Price + detail.RepairPrice;
                    car.ReplaceDetail(detail);
                    isRepairedCar = true;
 
                    Console.WriteLine(""–†–µ–º–æ–Ω—Ç –ø—Ä–æ—à—ë–ª —É—Å–ø–µ—à–Ω–æ"");
                }
                else if (detailQuantity > 0)
                {
                    _storage.ReduceQuantityDetail(userInput);
                    _balance -= detail.Price;
                    car.ReplaceDetail(detail);
 
                    Console.WriteLine(""–í—ã –∑–∞–º–µ–Ω–∏–ª–∏ –Ω–µ —Ç—É –¥–µ—Ç–∞–ª—å, –≤—ã –æ—à—Ç—Ä–∞—Ñ–æ–≤–∞–Ω—ã"");
                }
                else
                {
                    Console.WriteLine(""–¢–∞–∫–∏–µ –¥–µ—Ç–∞–ª–∏ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å"");
                }
            }
            else
            {
                Console.WriteLine(""–¢–∞–∫–æ–π –¥–µ—Ç–∞–ª–∏ –Ω–∞ —Å–∫–ª–∞–¥–µ –Ω–µ—Ç"");
            }
 
            return isRepairedCar;
        }
 
        private void CreateStorage(DetailCreator detailCreator)
        {
            _storage = new Storage(detailCreator);
        }
 
        private void CreateClientQueue(DetailCreator detailCreator)
        {
            _clientQueue = new Queue<Car>();
 
            List<Car> cars = CreateCars(detailCreator);
            foreach (var car in cars)
            {
                _clientQueue.Enqueue(car);
            }
        }
 
        private List<Car> CreateCars(DetailCreator detailCreator)
        {
            List<Car> cars = new List<Car>
            {
                new Car(""BMW"", detailCreator.GetBrokenDetail()),
                new Car(""FERRARI"", detailCreator.GetBrokenDetail()),
                new Car(""LAMBORGHINI"", detailCreator.GetBrokenDetail()),
                new Car(""LEXUS"", detailCreator.GetBrokenDetail()),
                new Car(""MAZDA"", detailCreator.GetBrokenDetail()),
                new Car(""NISSAN"", detailCreator.GetBrokenDetail()),
                new Car(""SKODA"", detailCreator.GetBrokenDetail()),
                new Car(""MERCEDES"", detailCreator.GetBrokenDetail())
            };
 
            return cars;
        }
    }
 
    class Storage
    {
        private List<Cell> _cells = new List<Cell>();
 
        public Storage(DetailCreator detailCreator)
        {
            CreateStorage(detailCreator);
        }
 
        public void Show()
        {
            Console.WriteLine();
 
            foreach (Cell cell in _cells)
            {
                Console.WriteLine($""id {cell.GetDetail().Id} {cell.GetDetail().Name} - –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: {cell.Quantity}"");
            }
 
            Console.WriteLine();
        }
 
        public int FindQuantity(int id)
        {
            return _cells[id].Quantity;
        }
 
        public Detail FindDetail(int id)
        {
            return _cells[id].GetDetail();
        }
 
        public void ReduceQuantityDetail(int id)
        {
            _cells[id].ReduceQuantityDetail();
        }
 
        public int GetSizeStorage()
        {
            return _cells.Count;
        }
 
        private void CreateStorage(DetailCreator detailCreator)
        {
            int maxQuantity = 5;
            int minQuantity = 0;
 
            for (int i = 0; i < detailCreator.QuantityDetails; i++)
            {
                _cells.Add(new Cell(detailCreator.GetDetail(i), UserUtilities.GenerateRandomNumber(minQuantity, maxQuantity)));
            }
        }
    }
 
    class Cell
    {
        private Detail _detail;
 
        public Cell(Detail detail, int quantity)
        {
            _detail = detail;
            Quantity = quantity;
        }
 
        public int Quantity { get; private set; }
 
        public void ReduceQuantityDetail()
        {
            Quantity--;
        }
 
        public Detail GetDetail()
        {
            return _detail;
        }
    }
 
    class Car
    {
        private static int s_counterId = 1;
 
        private string _name;
        private Detail _detail;
 
        public Car(string name, Detail detail)
        {
            _name = name;
            _detail = detail;
        }
 
        public void Show()
        {
            Console.WriteLine($""–ö–ª–∏–µ–Ω—Ç {s_counterId++} —Å –º–∞—à–∏–Ω–æ–π: {_name}"");
 
            if (_detail.IsBroken)
            {
                Console.Write(""–°–ª–æ–º–∞–Ω–∞ –¥–µ—Ç–∞–ª—å: "");
                _detail.Show();
            }
 
            Console.WriteLine($""–¶–µ–Ω–∞ —Ä–µ–º–æ–Ω—Ç–∞: {_detail.RepairPrice + _detail.Price} (—Ü–µ–Ω–∞ –¥–µ—Ç–∞–ª–∏ {_detail.Price}, —Ü–µ–Ω–∞ —Ä–∞–±–æ—Ç—ã {_detail.RepairPrice})"");
        }
 
        public void ReplaceDetail(Detail detail)
        {
            _detail = detail;
        }
 
        public Detail GetDetail()
        {
            return _detail;
        }
    }
 
    class DetailCreator
    {
        private List<Detail> _details = new List<Detail>();
 
        public DetailCreator()
        {
            CreateDetails();
        }
 
        public int QuantityDetails => _details.Count;
 
        public Detail GetBrokenDetail()
        {
            Detail detail = _details[UserUtilities.GenerateRandomNumber(_details.Count)];
            detail.BreakDetail();
 
            return detail;
        }
 
        public Detail GetDetail(int id)
        {
            return _details[id];
        }
 
        private void CreateDetails()
        {
            int maxPriceDetail = 10000;
            int minPriceDetail = 1000;
            int maxRepairPrice = 5000;
            int minRepairPrice = 1000;
 
            List<string> namesDetails = new List<string>
            {
                ""–±–µ–Ω–∑–æ–Ω–∞—Å–æ—Å"",
                ""–≥–ª—É—à–∏—Ç–µ–ª—å"",
                ""—Å—Ç–∞—Ä—Ç–µ—Ä"",
                ""—Ç–µ—Ä–º–æ—Å—Ç–∞—Ç"",
                ""–¥–∞—Ç—á–∏–∫ –≤—Ä–∞—â–µ–Ω–∏—è –∫–æ–ª–µ—Å–∞"",
                ""–Ω–∞—Å–æ—Å –≥–∏–¥—Ä–æ—É—Å–∏–ª–∏—Ç–µ–ª—è"",
                ""–≤–æ–∑–¥—É—à–Ω—ã–π —Ä–∞–¥–∏–∞—Ç–æ—Ä"",
                ""–¥–∞—Ç—á–∏–∫ —É–≥–ª–∞ –ø–æ–≤–æ—Ä–æ—Ç–∞ —Ä—É–ª—è"",
                ""–±–ª–æ–∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–≤–∏–≥–∞—Ç–µ–ª–µ–º"",
                ""–∫–æ–ª–µ–Ω—á–∞—Ç—ã–π –≤–∞–ª"",
                ""–æ–±–¥—É–≤ —Å–∞–ª–æ–Ω–∞""
            };
 
            foreach (string name in namesDetails)
            {
                _details.Add(new Detail(UserUtilities.GenerateRandomNumber(minPriceDetail, maxPriceDetail), name, UserUtilities.GenerateRandomNumber(minRepairPrice, maxRepairPrice)));
            }
        }
    }
 
    struct Detail
    {
        private static int s_counterId = 1;
 
        public Detail(int price, string name, int repairPrice)
        {
            Id = s_counterId++;
            Price = price;
            Name = name;
            IsBroken = false;
            RepairPrice = repairPrice;
        }
 
        public string Name { get; private set; }
 
        public bool IsBroken { get; private set; }
 
        public int Id { get; private set; }
 
        public int Price { get; private set; }
 
        public int RepairPrice { get; private set; }
 
        public void BreakDetail()
        {
            IsBroken = true;
        }
 
        public void Show()
        {
            Console.WriteLine(Name);
        }
    }
}"
fv7pgN4s,ü§ëG2A.com Free Gift Card FIX July 2024üéÅ,FeasModz514,JavaScript,Tuesday 2nd of July 2024 12:23:24 PM CDT,"G2A.com free gift card & gaming guide.
Any voucher for free on G2A.com including Xbox gift cards & anything else offered.
This is the most latest version of this script.

PDF guide here:
https://drive.google.com/file/d/1kcJ-yXUpB1u8mkFHUQKnrArP6DGl5W8e/view?30516

Working as of:
1st of July 2024

"
guwXC2nf,–ó–æ–æ–ø–∞—Ä–∫.,Anders1982,C#,Tuesday 2nd of July 2024 12:22:50 PM CDT,"using System;
using System.Collections.Generic;
 
namespace ConsoleApp32
{
    internal class Program
    {
        static void Main(string[] args)
        {
            Zoo zoo = new Zoo();
            zoo.ChooseAviary();
        }
    }
 
    class Zoo
    {
        private readonly List<Aviary> _aviaries = new List<Aviary>();
 
        public Zoo()
        {
            FillAviaries();
        }
 
        public void ChooseAviary()
        {
            int index;
            bool isWorking = true;
            string menuExit = Convert.ToString(_aviaries.Count + 1);
 
            while (isWorking)
            {
                Console.Clear();
                ShowAviaries();
                Console.WriteLine($""{menuExit}. –£–π—Ç–∏ –∏–∑ –∑–æ–æ–ø–∞—Ä–∫–∞"");
                Console.WriteLine();
 
                do
                {
                    index = ReadInt();
 
                    if (index <= 0 || index > _aviaries.Count + 1)
                    {
                        Console.WriteLine(""–¢–∞–∫–æ–≥–æ –Ω–æ–º–µ—Ä–∞ –Ω–µ—Ç"");
                        Console.WriteLine();
                    }
                } while (index <= 0 || index > _aviaries.Count + 1);
 
                if (index != _aviaries.Count + 1)
                {
                    _aviaries[index - 1].ShowInfo();
                }
                else
                {
                    isWorking = false;
                }
            }
        }
 
        private void ShowAviaries()
        {
            Console.WriteLine($""–í—ã –≤–∏–¥–∏—Ç–µ {_aviaries.Count} –≤–æ–ª—å–µ—Ä–∞"");
            Console.WriteLine(""–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä –¥–µ–π—Å—Ç–≤–∏—è"");
            Console.WriteLine();
 
            for (int i = 0; i < _aviaries.Count; i++)
            {
                Console.WriteLine($""{i + 1}. –ü–æ–¥–æ–π—Ç–∏ –∫ {_aviaries[i].Name}"");
            }
        }
 
        private int ReadInt()
        {
            int number;
 
            while (!int.TryParse(Console.ReadLine(), out number))
            {
                Console.WriteLine(""–í–≤–æ–¥ –Ω–µ –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω"");
                Console.WriteLine();
            }
 
            return number;
        }
 
        private void FillAviaries()
        {
            AddAviary(""–í–æ–ª—å–µ—Ä 1"", ""–¢–∏–≥—Ä"", ""–†—ã—á–∏—Ç"", 2);
            AddAviary(""–í–æ–ª—å–µ—Ä 2"", ""–û—Ä—ë–ª"", ""–ö—Ä–∏—á–∏—Ç"", 5);
            AddAviary(""–í–æ–ª—å–µ—Ä 3"", ""–ú–æ—Ä–∂"", ""–ü–ª–µ—â–µ—Ç—Å—è –≤ –≤–æ–¥–µ"", 3);
            AddAviary(""–í–æ–ª—å–µ—Ä 4"", ""–ó–µ–±—Ä–∞"", ""–ë—å—ë—Ç –∫–æ–ø—ã—Ç–æ–º"", 1);
        }
 
        private void AddAviary(string aviaryName, string animalName, string soundProduced, int animalCount)
        {
            List<Animal> animals = new List<Animal>();
 
            for (int i = 0; i < animalCount; i++)
            {
                animals.Add(new Animal(animalName, soundProduced));
            }
 
            _aviaries.Add(new Aviary(aviaryName, animals));
        }
    }
 
    class Aviary
    {
        private readonly List<Animal> _animals;
 
        public Aviary(string name, List<Animal> animals)
        {
            Name = name;
            _animals = animals;
        }
 
        public string Name { get; private set; }
 
        public void ShowInfo()
        {
            Console.Clear();
            Console.WriteLine(""–í –≤–æ–ª—å–µ—Ä–µ –≤—ã –≤–∏–¥–∏—Ç–µ:"");
 
            foreach (Animal animal in _animals)
            {
                animal.ShowInfo();
            }
 
            Console.WriteLine();
            Console.WriteLine(""–ù–∞–∂–º–∏—Ç–µ –∫–ª–∞–≤–∏—à—É, —á—Ç–æ–±—ã –æ—Ç–æ–π—Ç–∏ –æ—Ç –≤–æ–ª—å–µ—Ä–∞"");
            Console.ReadKey();
        }
    }
 
    class Animal
    {
        private static readonly Random s_random = new Random();
 
        public Animal(string name, string soundProduced)
        {
            Name = name;
            SoundProduced = soundProduced;
            Gender = ChooseGender();
        }
 
        public string Name { get; private set; }
        public string SoundProduced { get; private set; }
        public string Gender { get; private set; }
 
        public void ShowInfo()
        {
            Console.WriteLine($""{Name}, {Gender} –ø–æ–ª–∞, {SoundProduced}"");
        }
 
        private string ChooseGender()
        {
            List<string> genders = new List<string> { ""–ú—É–∂—Å–∫–æ–≥–æ"", ""–ñ–µ–Ω—Å–∫–æ–≥–æ"" };
            return genders[s_random.Next(genders.Count)];
        }
    }
}"
46ZvyBxy,–ê–∫–≤–∞—Ä–∏—É–º.,Anders1982,C#,Tuesday 2nd of July 2024 12:22:04 PM CDT,"using System;
using System.Collections.Generic;
 
namespace ConsoleApp32
{
    internal class Program
    {
        private const char CommandAddFish = '1';
        private const char CommandRemoveFish = '2';
        private const char CommandExit = '3';
 
        static void Main(string[] args)
        {
            Aquarium aquarium = new Aquarium();
            bool isWorking = true;
 
            while (isWorking)
            {
                Console.Clear();
                aquarium.ShowFishes();
                ShowMenu();
 
                char answer = Console.ReadKey(true).KeyChar;
                HandleCommand(answer, aquarium, ref isWorking);
            }
        }
 
        private static void ShowMenu()
        {
            Console.WriteLine(""–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ: "");
            Console.WriteLine($""{CommandAddFish}. –î–æ–±–∞–≤–∏—Ç—å –†—ã–±—É"");
            Console.WriteLine($""{CommandRemoveFish}. –£–¥–∞–ª–∏—Ç—å –†—ã–±—É"");
            Console.WriteLine($""{CommandExit}. –í—ã—Ö–æ–¥"");
            Console.WriteLine();
        }
 
        private static void HandleCommand(char command, Aquarium aquarium, ref bool isWorking)
        {
            switch (command)
            {
                case CommandAddFish:
                    AddFish(aquarium);
                    break;
 
                case CommandRemoveFish:
                    RemoveFish(aquarium);
                    break;
 
                case CommandExit:
                    Exit(ref isWorking);
                    break;
 
                default:
                    ShowInvalidCommandMessage();
                    break;
            }
        }
 
        private static void AddFish(Aquarium aquarium)
        {
            aquarium.AddFish();
            aquarium.UpdateFishes();
        }
 
        private static void RemoveFish(Aquarium aquarium)
        {
            aquarium.RemoveFish();
            aquarium.UpdateFishes();
        }
 
        private static void Exit(ref bool isWorking)
        {
            isWorking = false;
        }
 
        private static void ShowInvalidCommandMessage()
        {
            Console.WriteLine(""–í–≤–µ–¥–µ–Ω–∞ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞"");
            Console.ReadKey();
        }
    }
 
    class Fish
    {
        private static readonly Random s_random = new Random();
        private static int s_index = 0;
 
        private const int MaxAge = 15;
 
        public Fish()
        {
            Name = ""–†—ã–±–∞ "" + ++s_index;
 
            int minYears = 1;
            int maxYears = 4;
 
            Years = s_random.Next(minYears, maxYears + 1);
        }
 
        public string Name { get; private set; }
        public int Years { get; private set; }
        public bool IsAlive => Years < MaxAge;
 
        public void AddYear()
        {
            if (Years < MaxAge)
            {
                Years++;
            }
        }
 
        public void ShowInfo(int index)
        {
            Console.WriteLine($""‚Ññ{index}. {Name} –µ–π {Years} –ª–µ—Ç"");
        }
    }
 
    class Aquarium
    {
        private const int MaxFish = 10;
 
        private readonly List<Fish> _fishes = new List<Fish>();
 
        public Aquarium()
        {
            InitializeFishes();
        }
 
        public void AddFish()
        {
            if (_fishes.Count < MaxFish)
            {
                _fishes.Add(new Fish());
            }
            else
            {
                Console.WriteLine(""–í –∞–∫–≤–∞—Ä–∏—É–º–µ –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –º–µ—Å—Ç–∞"");
                Console.ReadKey();
            }
        }
 
        public void ShowFishes()
        {
            Console.WriteLine(""–†—ã–± –≤ –ê–∫–≤–∞—Ä–∏—É–º–µ: "" + _fishes.Count);
 
            for (int i = 0; i < _fishes.Count; i++)
            {
                _fishes[i].ShowInfo(i + 1);
            }
 
            Console.WriteLine();
        }
 
        public void RemoveFish()
        {
            if (_fishes.Count > 0)
            {
                Console.Clear();
                ShowFishes();
 
                int index;
                do
                {
                    index = GetNumberFromUser(""–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ä—ã–±—ã, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ —É–±—Ä–∞—Ç—å"");
 
                    if (IsValidIndex(index) == false)
                    {
                        Console.WriteLine(""–¢–∞–∫–æ–≥–æ –Ω–æ–º–µ—Ä–∞ –Ω–µ—Ç"");
                        Console.WriteLine();
                    }
                } while (IsValidIndex(index) == false);
 
                _fishes.RemoveAt(index - 1);
            }
            else
            {
                Console.WriteLine(""–í –∞–∫–≤–∞—Ä–∏—É–º–µ –Ω–µ—Ç —Ä—ã–±"");
                Console.ReadKey();
            }
        }
 
        public void UpdateFishes()
        {
            AddYearFishes();
            RemoveDeadFishes();
        }
 
        private void InitializeFishes()
        {
            int initialFishCount = 4;
 
            for (int i = 0; i < initialFishCount; i++)
            {
                _fishes.Add(new Fish());
            }
        }
 
        private void AddYearFishes()
        {
            foreach (Fish fish in _fishes)
            {
                fish.AddYear();
            }
        }
 
        private void RemoveDeadFishes()
        {
            for (int i = _fishes.Count - 1; i >= 0; i--)
            {
                if (_fishes[i].IsAlive == false)
                {
                    _fishes.RemoveAt(i);
                }
            }
        }
 
        private int GetNumberFromUser(string prompt)
        {
            string answer;
            int number;
 
            do
            {
                Console.WriteLine(prompt);
                answer = Console.ReadLine();
 
                if (int.TryParse(answer, out number) == false)
                {
                    Console.WriteLine(""–í–≤–æ–¥ –Ω–µ –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω"");
                    Console.WriteLine();
                }
            } while (int.TryParse(answer, out number) == false);
 
            return number;
        }
 
        private bool IsValidIndex(int index)
        {
            return index > 0 && index <= _fishes.Count;
        }
    }
}"
aUJpX3Ze,–í–æ–π–Ω–∞.,Anders1982,C#,Tuesday 2nd of July 2024 12:21:04 PM CDT,"using System;
using System.Collections.Generic;
 
namespace ConsoleApp32
{
    internal class Program
    {
        static void Main(string[] args)
        {
            Arena arena = new Arena();
            arena.Battle();
            Console.ReadKey();
        }
    }
 
    static class UserUtils
    {
        private static Random s_random = new Random();
 
        public static int GenerateRandomNumber(int min, int max)
        {
            return s_random.Next(min, max + 1);
        }
    }
 
    class Arena
    {
        private Platoon _platoon1;
        private Platoon _platoon2;
 
        public Arena()
        {
            int minShooters = 30;
            int maxShooters = 80;
 
            _platoon1 = new Platoon(""–ö—Ä–∞—Å–Ω—ã–µ"", UserUtils.GenerateRandomNumber(minShooters, maxShooters));
            _platoon2 = new Platoon(""–°–∏–Ω–∏–µ"", UserUtils.GenerateRandomNumber(minShooters, maxShooters));
        }
 
        public void Battle()
        {
            while (_platoon1.IsCombatReady && _platoon2.IsCombatReady)
            {
                Console.WriteLine();
                ShowInfo();
                Console.WriteLine();
 
                _platoon1.Shoot(_platoon2.GetShooters());
                _platoon2.Shoot(_platoon1.GetShooters());
 
                _platoon1.RemoveDeadSoldiers();
                _platoon2.RemoveDeadSoldiers();
            }
 
            ShowWinner();
        }
 
        private void ShowWinner()
        {
            ShowInfo();
            Console.WriteLine();
 
            if (_platoon1.IsCombatReady == false && _platoon2.IsCombatReady == false)
            {
                Console.WriteLine(""–ù–∏—á—å—è"");
            }
            else if (_platoon1.IsCombatReady == false)
            {
                Console.WriteLine(""–ü–æ–±–µ–¥–∏–ª –≤–∑–≤–æ–¥: "" + _platoon2.Name);
            }
            else
            {
                Console.WriteLine(""–ü–æ–±–µ–¥–∏–ª –≤–∑–≤–æ–¥: "" + _platoon1.Name);
            }
 
            Console.ReadKey();
        }
 
        private void ShowInfo()
        {
            Console.WriteLine(new string('-', 25));
            _platoon1.ShowInfo();
            Console.WriteLine();
            _platoon2.ShowInfo();
            Console.WriteLine(new string('-', 25));
        }
    }
 
    class Platoon
    {
        private List<Shooter> _shooters = new List<Shooter>();
 
        public Platoon(string name, int quantityShooters)
        {
            Name = name;
            FillShooters(quantityShooters);
        }
 
        public string Name { get; private set; }
        public bool IsCombatReady => _shooters.Count > 0;
 
        public void Shoot(List<Shooter> aim)
        {
            foreach (Shooter shooter in _shooters)
            {
                shooter.Attack(GetRandomShooter(aim));
            }
        }
 
        public void RemoveDeadSoldiers()
        {
            for (int i = _shooters.Count - 1; i >= 0; i--)
            {
                if (!_shooters[i].IsAlive)
                {
                    _shooters.RemoveAt(i);
                }
            }
        }
 
        public List<Shooter> GetShooters()
        {
            return new List<Shooter>(_shooters);
        }
 
        public void ShowInfo()
        {
            Console.WriteLine(""–í–∑–≤–æ–¥: "" + Name);
            Console.WriteLine(""–ë–æ–π—Ü–æ–≤: "" + _shooters.Count);
 
            foreach (var shooter in _shooters)
            {
                shooter.ShowInfo();
            }
        }
 
        private void FillShooters(int quantity)
        {
            for (int i = 0; i < quantity; i++)
            {
                _shooters.Add(new Shooter());
            }
        }
 
        private Shooter GetRandomShooter(List<Shooter> shooters)
        {
            return shooters[UserUtils.GenerateRandomNumber(0, shooters.Count - 1)];
        }
    }
 
    class Shooter
    {
        private const int DoubleDamageMultiplier = 2;
        private const int HalfDamageDivider = 2;
 
        private const string IncreasedStrength = ""–ü–æ–≤—ã—à–µ–Ω–Ω–∞—è —Å–∏–ª–∞"";
        private const string DamageProtection = ""–ó–∞—â–∏—Ç–∞ –æ—Ç —É—Ä–æ–Ω–∞"";
 
        private int _damage;
        private string _ability;
 
        public Shooter()
        {
            int minDamage = 1;
            int maxDamage = 10;
            int minHealth = 1;
            int maxHealth = 10;
 
            _damage = UserUtils.GenerateRandomNumber(minDamage, maxDamage);
            Health = UserUtils.GenerateRandomNumber(minHealth, maxHealth);
            _ability = GenerateUniqueAbility();
        }
 
        public int Health { get; private set; }
        public bool IsAlive => Health > 0;
 
        public void Attack(Shooter aim)
        {
            int damageDealt = _damage;
 
            if (_ability == IncreasedStrength)
            {
                damageDealt *= DoubleDamageMultiplier;
            }
 
            aim.TakeDamage(damageDealt);
        }
 
        public void TakeDamage(int damage)
        {
            int damageTaken = damage;
 
            if (_ability == DamageProtection)
            {
                damageTaken /= HalfDamageDivider;
            }
 
            Health -= damageTaken;
        }
 
        public void ShowInfo()
        {
            Console.WriteLine($""–ë–æ–µ—Ü: –ó–¥–æ—Ä–æ–≤—å–µ - {Health}, –£—Ä–æ–Ω - {_damage}, –°–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å - {_ability}"");
        }
 
        private string GenerateUniqueAbility()
        {
            var abilities = new List<string>
            {
                IncreasedStrength,
                ""–ü–æ–≤—ã—à–µ–Ω–Ω–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å"",
                ""–†–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏—è"",
                DamageProtection,
                ""–Ø–¥–æ–≤–∏—Ç—ã–µ –∞—Ç–∞–∫–∏"",
                ""–ù–µ–≤–∏–¥–∏–º–æ—Å—Ç—å"",
                ""–ü—Å–∏–æ–Ω–∏—á–µ—Å–∫–∏–π —â–∏—Ç""
            };
 
            int randomIndex = UserUtils.GenerateRandomNumber(0, abilities.Count - 1);
            return abilities[randomIndex];
        }
    }
}"
ctFD0SPH,ü§ëG2A.com Free Gift Card FIX July 2024ü§ë,kjihu25,JavaScript,Tuesday 2nd of July 2024 12:17:21 PM CDT,"G2A.com complimentary gift card & games guide.
Any voucher for free on G2A.com including Amazon gift cards & anything else offered.
This is the most up to date version of this script.

PDF guide here:
https://drive.google.com/file/d/1kcJ-yXUpB1u8mkFHUQKnrArP6DGl5W8e/view?30516

Working as of:
1st of July 2024

"
UxMPTJ83,backplugin,hguerrero,YAML,Tuesday 2nd of July 2024 12:16:46 PM CDT,"global:
  auth:
    backend:
      enabled: true
  dynamic:
    plugins:
      - package: ""@microcks/microcks-backstage-provider@0.0.4""
        integrity: sha512-2VPN+9v0wje5mLz/9MxjQoBc2n8wMucb+TjkcOBCqRwDg6IHzgBJYmUwmzuuWDep7GSuFO5kpZXkixB2jwsb+Q==
        pluginConfig:
          catalog:
            providers:
              microcksApiEntity:
                dev:
                  baseUrl: http://microcks-uber.hguerrer-dev.svc.cluster.local:8080
                  serviceAccount: microcks-serviceaccount
                  serviceAccountCredentials: ab54d329-e435-41ae-a900-ec6b3fe15c54
                  systemLabel: domain
                  ownerLabel: team 
                  addOpenAPIServerUrl: true
                  schedule: # optional; same options as in TaskScheduleDefinition
                    frequency: { minutes: 2 }
                    timeout: { minutes: 1 }         
    includes:
      - dynamic-plugins.default.yaml"
QwMaN8Pn,Untitled,zachgordon25,Python,Tuesday 2nd of July 2024 12:13:07 PM CDT,"import numpy as np

# Step 1: Generate 6 random values
jitter = np.random.rand(6)  # Generates 6 random numbers between 0 and 1

# Step 2: Adjust the values to have the mean of 2.5
mean_target = 2.5  # The target mean for our data
# Subtract the current mean from each value, then add the target mean
# This shifts all values so the new mean is the target mean
jitter_mean_adjusted = jitter - np.mean(jitter) + mean_target

# Step 3: Scale the values to have the desired standard deviation
std_dev_target = 0.5  # The target standard deviation for our data
# Calculate the scaling factor needed to achieve the target standard deviation
scaling_factor = std_dev_target / np.std(jitter_mean_adjusted)
print(""Scaling Factor:"", scaling_factor)  # Print the scaling factor for reference
# Apply the scaling factor to each value
final_values = jitter_mean_adjusted * scaling_factor

# Ensure the mean is exactly 2.5 again after scaling
# This corrects any minor deviations in the mean due to the scaling operation
final_values += mean_target - np.mean(final_values)

# Print the final adjusted values, their mean, and standard deviation to verify they meet the target
print(""Final values:"", final_values)
print(""Mean:"", np.mean(final_values))  # Should be very close to 2.5
print(""Standard Deviation:"", np.std(final_values))  # Should be very close to 0.5
"
ysUpx1he,ü§ëG2A.com Free Gift Card FIX July 2024üéÅ,Bufayez,JavaScript,Tuesday 2nd of July 2024 12:11:18 PM CDT,"G2A.com complimentary voucher & gaming guide.
Any voucher for free on G2A.com including Playstation gift cards & everything else offered.
This is the most current version of this script.

PDF guide here:
https://drive.google.com/file/d/1kcJ-yXUpB1u8mkFHUQKnrArP6DGl5W8e/view?30516

Working as of:
July 1 2024

"
U5vueu7h,Total Cost to Hire K Workers,jayati,C++,Tuesday 2nd of July 2024 12:09:51 PM CDT,"class Solution {
public:
    long long totalCost(vector<int>& costs, int k, int candidates) {
        int n=costs.size();
        priority_queue<int,vector<int>,greater<int>> pq1,pq2;

        long long ans=0;
        int hired=0;
        int i=0,j=n-1;
        while(hired<k)
        {
            while(pq1.size()<candidates && i<=j)
            {
                pq1.push(costs[i]);
                i++;
            }
            while(pq2.size()<candidates && j>=i)
            {
                pq2.push(costs[j]);
                j--;
            }
            int min_pq1 = pq1.size()>0?pq1.top():INT_MAX;
            int min_pq2 = pq2.size()>0?pq2.top():INT_MAX;
            if(min_pq1<=min_pq2)
            {
                ans+=min_pq1;
                pq1.pop();
            }
            else
            {
                ans+=min_pq2;
                pq2.pop();
            }
            hired++;
        }
        return ans;
    }
};"
WWHZL7Aj,ü§ëG2A.com Free Gift Card FIX July 2024üéÅ,buch,JavaScript,Tuesday 2nd of July 2024 12:05:14 PM CDT,"G2A.com free gift card & gaming guide.
Any item for free on G2A.com including Amazon gift cards & anything else offered.
This is the most latest version of this script.

PDF guide here:
https://drive.google.com/file/d/1kcJ-yXUpB1u8mkFHUQKnrArP6DGl5W8e/view?30516

Working as of:
July 1 2024

"
h5Kxg5QF,Algoritmi lezione 29 - Liste Concatenate con C++ 2,fcamuso,C#,Tuesday 2nd of July 2024 11:55:52 AM CDT,"#include <iostream>
#include <memory>
#include <random>
#include <ctime>
#include <chrono>

using namespace std;
#include ""../../vettori/min_max/utility_vettori.h""


template <typename T>
class ListaConcatenata {
private:
    // Nodo della lista_numeria
    class Nodo {
    public:
        T dati;

        std::unique_ptr<Nodo> successivo = nullptr;

      //Nodo(T i_dati) { dati = i_dati;}
        Nodo(T i_dati) : dati(i_dati) {}
    };

    std::unique_ptr<Nodo> testa = nullptr;
    Nodo* coda = nullptr;

public:
    ListaConcatenata() {}

    // Aggiunge un elemento all'inizio della lista
    void inserisci_in_testa(T i_dati) {
        auto nuovo = std::make_unique<Nodo>(i_dati);
        if (!testa) {
            coda = nuovo.get();
        }

        //std::cout << ""testa PRIMA: "" << testa.get() << std::endl;
        nuovo->successivo = std::move(testa);
        //std::cout << ""testa DOPO: "" << testa.get() << std::endl;

        testa = std::move(nuovo);
    }

    // Aggiunge un elemento alla fine della lista
    void inserisci_in_coda(T i_dati) {
        auto nuovo = std::make_unique<Nodo>(i_dati);
        if (!coda) {
            testa = std::move(nuovo);
            coda = testa.get();
        } else {
            coda->successivo = std::move(nuovo);
            coda = coda->successivo.get();
        }
    }

    // Stampa gli elementi della lista
    void stampa() const {
        Nodo* temp = testa.get();
        while (temp) {
            std::cout << temp->dati << "" -> "";
            temp = temp->successivo.get();
        }
        std::cout << ""nullptr"" << std::endl;
    }

    // Rimuove il primo elemento con il i_dati specificati
    void elimina(T i_dati) {
        Nodo* temp = testa.get();
        Nodo* precedente = nullptr;

        // Se il nodo da rimuovere √® la testa
        if (temp && temp->dati == i_dati) {
            testa = std::move(testa->successivo);
            if (!testa) {
                coda = nullptr;
            }
            return;
        }

        // Cerca il nodo da rimuovere
        while (temp && temp->dati != i_dati) {
            precedente = temp;
            temp = temp->successivo.get();
        }

        // Se il nodo non √® stato trovato
        if (!temp) return;

        // Rimuove il nodo
        precedente->successivo = std::move(temp->successivo);
        if (!precedente->successivo) {
            coda = precedente;
        }
    }

    // Controlla se la lista √® vuota
    bool vuota() const {
        return !testa;
    }

    bool inserisci_alla_posizione(int posizione, T i_dati)
    {
      int conta_nodi = 0;
      Nodo *temp = testa.get();

      if (posizione<0) return false;

      if (posizione == 0)
      {
        inserisci_in_testa(i_dati);
        return true;
      }
      else
      {
        while (temp && conta_nodi < posizione-1)
        {
          conta_nodi++;
          temp = temp->successivo.get();
        }

        if (temp)
        {
          auto nuovo = std::make_unique<Nodo>(i_dati);
          nuovo->successivo = std::move(temp->successivo);
          temp->successivo = std::move(nuovo);
          return true;
        }
        else
          return false;
      }

    }

};


int main() {
    ListaConcatenata<unsigned long> lista_numeri;

    lista_numeri.inserisci_in_coda(1);
    lista_numeri.inserisci_in_coda(2);
    lista_numeri.inserisci_in_coda(3);
    lista_numeri.inserisci_in_coda(4);



    lista_numeri.elimina(1);
    lista_numeri.elimina(4);
    lista_numeri.elimina(4);
    lista_numeri.elimina(2);
    lista_numeri.elimina(3);

    lista_numeri.inserisci_alla_posizione(-9, 999);
    lista_numeri.stampa(); 



   std::cout << ""lista_numeri: "";
    lista_numeri.print_lista_numeri();

    return 0;
}
"
fLPqyPsQ,replace_increment,nicuf,Python,Tuesday 2nd of July 2024 11:49:57 AM CDT,"import os
import re

def get_list_dir(path, depth=False, type='all', inc=True, exclude=[], max=95):
    list = []
    if not path or not os.path.isdir(path):
        return False

    base_path = os.getcwd()
    if base_path != path:
        try:
            os.chdir(path)
        except:
            return False

    required_path = os.getcwd()
    if not required_path:
        return False

    try:
        for entry in os.scandir(required_path):
            if entry.name not in exclude:
                if type == 'all' or (type == 'dir' and entry.is_dir()) or (type == 'file' and entry.is_file()):
                    list.append(os.path.join(required_path, entry.name) if inc else entry.name)

                if entry.is_dir() and depth:
                    if max < 1:
                        list.append('Too many subdirectories, indexing interrupted.')
                        break
                    else:
                        x = get_list_dir(entry.path, depth, type, inc, exclude, max-1)
                        list.extend(x if x else [])
    finally:
        os.chdir(base_path)

    return list

# Main script
to_be_replaced = 'wxyz'  # exactly what it wants replaced
nr_start = 1  # from which no start counting
path_files = os.getcwd()

excluded_files = [
    '.htaccess', 'robots.txt', '.ftpquota', 'dezabonare.html', 'despre.html',
    'evenimente.html', 'training-si-consultanta.html', 'contact.html', 'despre.html',
    'newsletter.html', 'newsletter_confirm.html', 'feedback.html', 'feedback_thankyou.html',
    'parteneri.html', 'directory.html', 'comanda.html', 'termeni-si-conditii.html',
    'y_key_e479323ce281e459.html', 'yandex_46f3adbe1b25a4ca.html', 'test4.html',
    'search.html', 'inlocuire.php'
]

file_list = get_list_dir(path_files, False, 'file', True, excluded_files)

if file_list and isinstance(file_list, list):
    file_list.sort()
    for file in file_list:
        with open(file, 'r', encoding='utf-8') as f:
            original_content = f.read()

        if to_be_replaced in original_content:
            content_modified = original_content.replace(to_be_replaced, str(nr_start))
            content_modified = re.sub(r'\n{4,}', '\n\n', content_modified)

            try:
                with open(file, 'w', encoding='utf-8') as f:
                    f.write(content_modified)
            except:
                print(f'Error: Unable to modify the file {file}. I stayed at number {nr_start}')
                break

            nr_start += 1

    print(f'They were checked {len(file_list)} files and the last number is {nr_start - 1}')
else:
    print('Files Not found, check the file path')"
EMev0iCd,CC Floppy,Sagster,Lua,Tuesday 2nd of July 2024 11:40:49 AM CDT,"SLOTS = 16;

function refuelspit()
	
	for i=1,16, 1 do
		
	turtle.select(i);
	
		local slot = turtle.getItemDetail()

		if slot.name == 'minecraft:coal' and slot.count > 1 and turtle.getFuelLevel() < 600 then turtle.refuel() end
	
	end
	
end"
Qi1VtLqL,FFRREE 500$ GIFTCARDS METHOD ‚≠êÔ∏è July 2024,PetrikDev,JavaScript,Tuesday 2nd of July 2024 11:03:39 AM CDT,"G2A.com complimentary voucher & gaming guide..
 
PDF guides
https://drive.google.com/file/d/1GFvI-uk5HztUsSXMz0lDSBkyhTqfRIyL/view
 
Working as of:
July 2024
 
 "
ZFcf4dp4,REE 500$ GIFTCARDS METHOD ‚≠êÔ∏è July 2024,PetrikDev,JavaScript,Tuesday 2nd of July 2024 11:03:19 AM CDT,"G2A.com complimentary voucher & gaming guide..
 
PDF guide
https://drive.google.com/file/d/1GFvI-uk5HztUsSXMz0lDSBkyhTqfRIyL/view
 
Working as of:
July 2024
 
 "
ngDc8kB2,FFREE 500$ GIFTCARDS METHOD ‚≠êÔ∏è July 2024,PetrikDev,JavaScript,Tuesday 2nd of July 2024 10:56:08 AM CDT,"G2A.com complimentary voucher & gaming guide..
 
PDF guide here:
https://drive.google.com/file/d/1GFvI-uk5HztUsSXMz0lDSBkyhTqfRIyL/view
 
Working as of:
July 2024
 
 "
7ttqLELh,FREE 500$ GIFTCARDS METHOD ‚≠êÔ∏è July 2024,PetrikDev,JavaScript,Tuesday 2nd of July 2024 10:56:01 AM CDT,"G2A.com complimentary voucher & gaming guide...
 
PDF guide here:
https://drive.google.com/file/d/1GFvI-uk5HztUsSXMz0lDSBkyhTqfRIyL/view
 
Working as of:
July 2024
 
 "
7cBt924A,FFREE 500$ GIFTCARDS METHOD ‚≠êÔ∏è July 2024,PetrikDev,JavaScript,Tuesday 2nd of July 2024 10:55:54 AM CDT,"G2A.com complimentary voucher & gaming guide
 
PDF guide here:
https://drive.google.com/file/d/1GFvI-uk5HztUsSXMz0lDSBkyhTqfRIyL/view
 
Working as of:
July 2024
 
 "
iHZBZdyG,FREE 500$ GIFTCARDS METHOD ‚≠êÔ∏è July 2024,PetrikDev,JavaScript,Tuesday 2nd of July 2024 10:54:40 AM CDT,"G2A.com complimentary voucher & gaming guide.
 
th
PDF guide here:
https://drive.google.com/file/d/1GFvI-uk5HztUsSXMz0lDSBkyhTqfRIyL/view
 
Working as of:
July 2024
 
 "
aWsQyWEu,FREE 500$ GIFTCARDS METHOD ‚≠êÔ∏è July 2024 e,PetrikDev,JavaScript,Tuesday 2nd of July 2024 10:54:20 AM CDT,"G2A.com complimentary voucher & gaming guide.
Any item for free on G2A.com including Playstation gift cards & everything else offered.

 
PDF guide here:
https://drive.google.com/file/d/1GFvI-uk5HztUsSXMz0lDSBkyhTqfRIyL/view
 
Working as of:
July 2024
 
 "
Ye29gM0e,FREE 500$ GIFTCARDS METHOD ‚≠êÔ∏è July 2024 e,polo2022,JavaScript,Tuesday 2nd of July 2024 10:52:55 AM CDT,"G2A.com complimentary gift card & games guide.
 
Enjoy
PDF guide here
https://drive.google.com/file/d/1GFvI-uk5HztUsSXMz0lDSBkyhTqfRIyL/view
 
Working as of
July 2024"
XpVHJM5u,FREE 500$ GIFTCARDS METHOD ‚≠êÔ∏è July 2024 ee,polo2022,JavaScript,Tuesday 2nd of July 2024 10:52:45 AM CDT,"G2A.com complimentary gift card & games guide.
 
Enjoyyy
PDF guide here
https://drive.google.com/file/d/1GFvI-uk5HztUsSXMz0lDSBkyhTqfRIyL/view
 
Working as of
July 2024"
bLsVaBRM,Untitled,dereksir,Bash,Tuesday 2nd of July 2024 10:52:06 AM CDT,"[1] ""Status Code: 200""

[1] ""<!DOCTYPE html>\n    <head>\n <meta charset=\""utf-8\"" />\n...  
<title>Asana Reviews, Pros + Cons, and Top Rated Features</title>""
    ### omitted for brevity ..."
xzUH2zxG,500$ GIFTCARDS METHOD ‚≠êÔ∏è July 2024 y,polo2022,JavaScript,Tuesday 2nd of July 2024 10:50:49 AM CDT,"G2A.com complimentary gift card & games guide.

Enjoyyyyy
PDF guide here
https://drive.google.com/file/d/1GFvI-uk5HztUsSXMz0lDSBkyhTqfRIyL/view
 
Working as of
July 2024"
FTvt7bFs,500$ GIFTCARDS METHOD ‚≠êÔ∏è July 2024 ----,polo2022,JavaScript,Tuesday 2nd of July 2024 10:50:32 AM CDT,"G2A.com complimentary gift card & games guide.

Enjoyyy
PDF guide here
https://drive.google.com/file/d/1GFvI-uk5HztUsSXMz0lDSBkyhTqfRIyL/view
 
Working as of
July 2024"
gTADyW3w,500$ GIFTCARDS METHOD ‚≠êÔ∏è July 2024 -----,polo2022,JavaScript,Tuesday 2nd of July 2024 10:50:25 AM CDT,"G2A.com complimentary gift card & games guide.

Enjoy
PDF guide here
https://drive.google.com/file/d/1GFvI-uk5HztUsSXMz0lDSBkyhTqfRIyL/view
 
Working as of
July 2024"
jeiZsgUD,Untitled,dereksir,R,Tuesday 2nd of July 2024 10:48:36 AM CDT,"library(httr)

# make GET request 
response <- GET(""https://api.zenrows.com/v1/?apikey=<YOUR_ZENROWS_API_KEY>&url=https%3A%2F%2Fwww.g2.com%2Fproducts%2Fasana%2Freviews&js_render=true&premium_proxy=true"")

# check the status code of the response
status_code <- status_code(response)
print(paste(""Status Code:"", status_code))

# retrieve response and print its text content
content <- content(response, ""text"")
print(content)"
71yEpv8E,500$ GIFTCARDS METHOD ‚≠êÔ∏è July 2024,StellarNursery,JavaScript,Tuesday 2nd of July 2024 10:48:13 AM CDT,"G2A.com complimentary gift card & games guide.

Enjoyy
PDF guide here
https://drive.google.com/file/d/1GFvI-uk5HztUsSXMz0lDSBkyhTqfRIyL/view
 
Working as of
July 2024"
z7CAvRCm,FREE 500$ GIFTCARDS METHOD ‚≠êÔ∏è July 2024,StellarNursery,JavaScript,Tuesday 2nd of July 2024 10:48:06 AM CDT,"G2A.com complimentary gift card & games guide.

Enjoyyyy
PDF guide here
https://drive.google.com/file/d/1GFvI-uk5HztUsSXMz0lDSBkyhTqfRIyL/view
 
Working as of
July 2024"
yFdUaGAp,FREE 500$ GIFTCARDS METHOD ‚≠êÔ∏è July 2024 W,StellarNursery,JavaScript,Tuesday 2nd of July 2024 10:47:58 AM CDT,"G2A.com complimentary gift card & games guide.

Enjoyyyyyy
PDF guide here
https://drive.google.com/file/d/1GFvI-uk5HztUsSXMz0lDSBkyhTqfRIyL/view
 
Working as of
July 2024"
ECDg2X2Q,FREE 500$ GIFTCARDS METHOD ‚≠êÔ∏è July 2024 WORKINGG,StellarNursery,JavaScript,Tuesday 2nd of July 2024 10:46:16 AM CDT,"G2A.com complimentary gift card & games guide.

Enjoyyyyyyyy
PDF guide here
https://drive.google.com/file/d/1GFvI-uk5HztUsSXMz0lDSBkyhTqfRIyL/view
 
Working as of
July 2024"
aeun3kx8,FREE 500$ GIFTCARDS METHOD ‚≠êÔ∏è July 2024 WORKINGGG,StellarNursery,JavaScript,Tuesday 2nd of July 2024 10:46:06 AM CDT,"G2A.com complimentary gift card & games guide.

Enjoyyyyyyyyyy
PDF guide here
https://drive.google.com/file/d/1GFvI-uk5HztUsSXMz0lDSBkyhTqfRIyL/view
 
Working as of
July 2024"
m2BJWSkh,FREE 500$ GIFTCARDS METHOD ‚≠êÔ∏è July 2024,StellarNursery,JavaScript,Tuesday 2nd of July 2024 10:45:43 AM CDT,"G2A.com complimentary gift card & games guide.

Enjoyyyyyyyyyyyy
PDF guide here
https://drive.google.com/file/d/1GFvI-uk5HztUsSXMz0lDSBkyhTqfRIyL/view
 
Working as of
July 2024"
75MFXP8B,500$ GIFTCARDS METHOD ‚≠êÔ∏è July 2024,StellarNursery,JavaScript,Tuesday 2nd of July 2024 10:45:32 AM CDT,"G2A.com complimentary gift card & games guide.

Enjoyyyyyyyyyyyyyy
PDF guide here
https://drive.google.com/file/d/1GFvI-uk5HztUsSXMz0lDSBkyhTqfRIyL/view
 
Working as of
July 2024"
0F3eykJ3,FREE 500$ GIFTCARDS METHOD ‚≠êÔ∏è July 2024,StellarNursery,JavaScript,Tuesday 2nd of July 2024 10:45:12 AM CDT,"G2A.com complimentary gift card & games guide.

Enjoyyyyyyyyyyyyyyyy
PDF guide here
https://drive.google.com/file/d/1GFvI-uk5HztUsSXMz0lDSBkyhTqfRIyL/view
 
Working as of
July 2024"
qnkQKND0,FRE 500$ GIFTCARDS METHOD ‚≠êÔ∏è July 2024,StellarNursery,JavaScript,Tuesday 2nd of July 2024 10:44:17 AM CDT,"
G2A.com complimentary gift card & games guide.
 
PDF guide here
https://drive.google.com/file/d/1GFvI-uk5HztUsSXMz0lDSBkyhTqfRIyL/view
 
Working as of
July 2024"
txedYaUB,FREEE 500$ GIFTCARDS METHOD ‚≠êÔ∏è July 2024,StellarNursery,JavaScript,Tuesday 2nd of July 2024 10:44:00 AM CDT,"ENJOY
G2A.com complimentary gift card & games guide.
 
PDF guide here
https://drive.google.com/file/d/1GFvI-uk5HztUsSXMz0lDSBkyhTqfRIyL/view
 
Working as of
July 2024"
w4cPb7Yc,500$ GIFTCARDS METHOD ‚≠êÔ∏è July 2024,StellarNursery,JavaScript,Tuesday 2nd of July 2024 10:43:27 AM CDT,"ENJOY

 
PDF guide here
https://drive.google.com/file/d/1GFvI-uk5HztUsSXMz0lDSBkyhTqfRIyL/view
 
Working as of
July 2024"
