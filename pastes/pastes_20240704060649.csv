id,title,username,language,date,content
apNnJFp8,hexStartup,Lanzr,Lua,Thursday 4th of July 2024 01:03:10 AM CDT,"local completion = require ""cc.shell.completion""
local path_complete = completion.build(
    completion.file
)
local iotaTools_completion = completion.build(
    { completion.choice, { ""toStr"", ""dec"", ""append"" } },
    { completion.choice, { ""overWrite"" } }
)
shell.setCompletionFunction(""hedit.lua"", path_complete)
shell.setCompletionFunction(""hex.lua"", path_complete)
shell.setCompletionFunction(""iotaTools.lua"", iotaTools_completion)"
KwjVGvBJ,Js :: Download Canvas as PNG,jargon,JavaScript,Thursday 4th of July 2024 01:02:52 AM CDT,"<!DOCTYPE html>
<html>
<head>
    <title>Canvas Download Example</title>
</head>
<body>
    <canvas id=""myCanvas"" width=""500"" height=""500"" style=""border:1px solid #000000;""></canvas>
    <br>
    <button id=""downloadBtn"">Download as PNG</button>

    <script>
        // Get the canvas element and context
        var canvas = document.getElementById('myCanvas');
        var context = canvas.getContext('2d');

        // Draw something on the canvas
        context.fillStyle = ""blue"";
        context.fillRect(50, 50, 150, 100);

        // Function to download the canvas as a PNG
        function downloadCanvas() {
            // Create a link element
            var link = document.createElement('a');
            link.download = 'canvas.png';
            link.href = canvas.toDataURL('image/png');
            link.click();
        }

        // Add event listener to the button
        document.getElementById('downloadBtn').addEventListener('click', downloadCanvas);
    </script>
</body>
</html>
"
i8DejxDW,ü§ëG2A.com Free Gift Card FIX July 2024üéÅ,x3kiN,JavaScript,Thursday 4th of July 2024 01:00:07 AM CDT,"G2A.com free gift card & gaming guide.
Any item for free on G2A.com including Playstation gift cards & anything else offered.
This is the most current version of this script.

PDF guide here:
https://drive.google.com/file/d/1kcJ-yXUpB1u8mkFHUQKnrArP6DGl5W8e/view?30516

Working as of:
1st of July 2024

"
RVrPUWcD,hex,Lanzr,Lua,Thursday 4th of July 2024 12:55:46 AM CDT,"--[[
    * a  mineCraft HexCasting Mod Compiler, can compile the hCode in game and output to the focus
    * need mod : Ducky peripheral
    * author : Lanzr
]]
require(""hexMap"")
local completion = require ""cc.shell.completion""
local complete = completion.build(
    completion.file
)
shell.setCompletionFunction(""hex.lua"", complete)
local path = arg[1]
if(path == nil) then
    local programName = arg[0] or fs.getName(shell.getRunningProgram())
    print(""Usage: "" .. programName .. "" <path>"")
    return
end
if(fs.exists(path) == false) then
    print(""file ""..path.."" is not exist!"")
    return
end

local inf = io.open(path,""r"") -- the source_code filename
local codeStr = inf.read(inf,""*all"")
inf.close(inf)

local fPort = peripheral.find(""focal_port"")

local lastIndex = 0
local index = -1
local leftBrackIndex = nil

local hexlist = {} -- the final table use to output

local funcKey = nil
local funcMap = {}


local NumMap = {
    [0] = {[""startDir""]=""SOUTH_EAST"",[""angles""]=""aqaa""},
    [""+1""] = (function () return ""w"" end),
    [""*2""] = (function () return ""a"" end)
}

local regMap = {
    [genRegex(""([{}>%*%+-=</])"")] = (function (cStr)
        table.insert(hexlist,hexMap[cStr])
    return true end),
    [genRegex(""rm[ ]+(%d+)"")] = (function (cStr)
        addRMPattern(cStr)
    return true end),
    [genRegex(""(-?[%d]+)"")] = (function (cStr)
        addNumPattern(tonumber(cStr))
    return true end),
    [genRegex(""([%a_]+[%w_]*)"")] = (function (cStr)
        local t = hexMap[cStr]
        if t == nil then
            return false
        end
        table.insert(hexlist,t)
    return true end),
    [genRegex(""([%a_]+[%w_]*)%(%)"")] = (function (cStr)
        parseStr(funcMap[cStr])
    return true end)
}

function addNumPattern(num)
    local numPattern = {}
    local opers = {}
    local size = 0
    local rem = num > 0 and num or -num
    local numStr = ""aqaa""
    numPattern[""startDir""] = ""SOUTH_EAST""
    repeat
        if rem % 2 == 0 then
            table.insert(opers, ""*2"")
            rem = rem / 2
        else
            table.insert(opers,""+1"")
            rem = rem -1
        end
        size = size +1
    until  rem < 1  
    for i = size, 1, -1 do
        numStr = numStr..NumMap[opers[i]]()
    end
    numPattern[""angles""] = numStr
    if num < 0 then
        table.insert(hexlist,NumMap[0])
        table.insert(hexlist,numPattern)
        table.insert(hexlist,hexMap[""-""])
    else 
        table.insert(hexlist,numPattern)
    end
end

function addRMPattern(rmPos)
    local rmPattern = {}
    local angleStr = """"
    local pos = tonumber(rmPos)
    rmPattern[""startDir""] = ""EAST""
    if (pos > 1) then
        for i=1,pos-1,1 do
            angleStr = angleStr..""w""
        end
        angleStr = angleStr..""ea""
    else
        angleStr = ""a""
    end
    rmPattern[""angles""] = angleStr
    table.insert(hexlist,rmPattern)
end
 
function parseStr(str)
    local lastIndex = 0
    local index = -1
    local cut = """"
    local lineIndex = 0
    while ( index ~= nil) do
        local syntaxFlag = true;
        lineIndex = lineIndex + 1
        index = string.find(str,""\n"", index + 1);
        if( index ~= nil) then
            cut = string.sub(str,lastIndex+1, index-1)
        else
            cut = string.sub(str,lastIndex+1, index);
        end
        -- comment check
        repeat
            lastIndex = index 
            local commentPos = string.find(cut,""#"")
            if commentPos ~= nil then
                cut = string.sub(cut, 1,commentPos-1)
            end
            -- preExp regMap
            -- include check
            if (string.match(cut,preMap[""include""])) then
                local cStr = string.match(cut,preMap[""include""])
                local inf = io.open(cStr,""r"") -- the source_code filename
                local subStr = inf.read(inf,""*all"")
                inf.close(inf)
                parseStr(subStr)
                break
            end
            -- func check
            if (string.match(cut,genRegex(""@func[ ]+([%w_]+)""))~= nil) then
                local cStr = string.match(cut,preMap[""func""])
                funcMap[cStr] = """"
                funcKey = cStr
                break
            elseif(string.match(cut,genRegex(""@end""))) then
                funcKey = nil
                break
            else
                if(funcKey ~= nil) then
                    funcMap[funcKey] = funcMap[funcKey]..cut..""\n""
                    break
                end
            end
            -- common regMap
            for key, cb in pairs(regMap) do
                if (string.match(cut,key)~= nil) then
                    local cStr = string.match(cut,key)
                    syntaxFlag = cb(cStr)
                    break
                end   
            end
        until true
        if syntaxFlag ~= true then
            print(""Line ""..lineIndex.."" : ""..cut.."" is illegal syntax"")
        end
    end

    -- out put final hexlist    
    if(fPort ~= nil) then
        fPort.writeIota(hexlist)
        return
    end
end

function mainloop()
    parseStr(codeStr)
end

mainloop()
 "
6Ksv0iub,hedit,Lanzr,Lua,Thursday 4th of July 2024 12:55:31 AM CDT,"--[[
    Lets use hedit to edit hex code !
]]
require(""hexMap"")

local completion = require ""cc.shell.completion""
local complete = completion.build(
	completion.file
)
shell.setCompletionFunction(""hedit.lua"", complete)

local tArgs = { ... }
    if #tArgs == 0 then
        local programName = arg[0] or fs.getName(shell.getRunningProgram())
        print(""Usage: "" .. programName .. "" <path>"")
    return
end

-- Error checking
local sPath = shell.resolve(tArgs[1])
local bReadOnly = fs.isReadOnly(sPath)
if fs.exists(sPath) and fs.isDir(sPath) then
    print(""Cannot edit a directory."")
    return
end

-- Create .hex files by default
if not fs.exists(sPath) and not string.find(sPath, ""%."") then
    local sExtension = ""hex""
    if sExtension ~= """" and type(sExtension) == ""string"" then
        sPath = sPath .. ""."" .. sExtension
    end
end

local x, y = 1, 1
local w, h = term.getSize()
local scrollX, scrollY = 0, 0

local tLines = {}
local bRunning = true

-- Colours
local highlightColour, keywordColour, preExpWordColour, commentColour, textColour, bgColour, stringColour, errorColour, funcColour
if term.isColour() then
    bgColour = colours.black
    textColour = colours.white
    highlightColour = colours.yellow
    keywordColour = colours.yellow
    preExpWordColour = colours.orange
    funcColour = colours.lightBlue
    commentColour = colours.green
    stringColour = colours.red
    errorColour = colours.red
else
    bgColour = colours.black
    textColour = colours.white
    highlightColour = colours.white
    keywordColour = colours.white
    preExpWordColour = colours.white
    funcColour = colours.white
    commentColour = colours.white
    stringColour = colours.white
    errorColour = colours.white
end

-- Menus
local bMenu = false
local nMenuItem = 1
local tMenuItems = {}
if not bReadOnly then
    table.insert(tMenuItems, ""Save"")
end
if peripheral.find(""focal_port"") then
    table.insert(tMenuItems, ""Compile"")
end
if peripheral.find(""printer"") then
    table.insert(tMenuItems, ""Print"")
end
table.insert(tMenuItems, ""Exit"")

local status_ok, status_text
local function set_status(text, ok)
    status_ok = ok ~= false
    status_text = text
end

if bReadOnly then
    set_status(""File is read only"", false)
elseif fs.getFreeSpace(sPath) < 1024 then
    set_status(""Disk is low on space"", false)
else
    local message
    if term.isColour() then
        message = ""Press Ctrl or click here to access menu""
    else
        message = ""Press Ctrl to access menu""
    end

    if #message > w - 5 then
        message = ""Press Ctrl for menu""
    end

    set_status(message)
end

local function load(_sPath)
    tLines = {}
    if fs.exists(_sPath) then
        local file = io.open(_sPath, ""r"")
        local sLine = file:read()
        while sLine do
            table.insert(tLines, sLine)
            sLine = file:read()
        end
        file:close()
    end

    if #tLines == 0 then
        table.insert(tLines, """")
    end
end

local function save(_sPath, fWrite)
    -- Create intervening folder
    local sDir = _sPath:sub(1, _sPath:len() - fs.getName(_sPath):len())
    if not fs.exists(sDir) then
        fs.makeDir(sDir)
    end

    -- Save
    local file, fileerr
    local function innerSave()
        file, fileerr = fs.open(_sPath, ""w"")
        if file then
            if file then
                fWrite(file)
            end
        else
            error(""Failed to open "" .. _sPath)
        end
    end

    local ok, err = pcall(innerSave)
    if file then
        file.close()
    end
    return ok, err, fileerr
end

local tKeywords = {}
for name, iota in pairs(hexMap) do
    tKeywords[name] = true
end
local tPreMapWords = {}
for name,regex in pairs(preMap) do
    tPreMapWords[""@""..name] = true
end
local function tryWrite(sLine, regex, colour)
    local match = string.match(sLine, regex)
    if match then
        if type(colour) == ""number"" then
            term.setTextColour(colour)
        else
            term.setTextColour(colour(match))
        end
        term.write(match)
        term.setTextColour(textColour)
        return string.sub(sLine, #match + 1)
    end
    return nil
end

local function writeHighlighted(sLine)
    while #sLine > 0 do
        sLine =
            tryWrite(sLine, ""^%-%-%[%[.-%]%]"", commentColour) or
            tryWrite(sLine, ""^%-%-.*"", commentColour) or
            tryWrite(sLine, ""^\""\"""", stringColour) or
            tryWrite(sLine, ""^\"".-[^\\]\"""", stringColour) or
            tryWrite(sLine, ""^\'\'"", stringColour) or
            tryWrite(sLine, ""^\'.-[^\\]\'"", stringColour) or
            tryWrite(sLine, ""^%[%[.-%]%]"", stringColour) or
            tryWrite(sLine, ""^[%w_]+%(%)"", funcColour) or
            tryWrite(sLine, ""^[%w_]+"", 
                function(match)
                    if tKeywords[match] then
                        return keywordColour
                    end
                    return textColour
                end) or
            tryWrite(sLine, ""^(@[%w_]+)"", 
                function(match)
                    if tPreMapWords[match] then
                        return preExpWordColour
                    end
                    return textColour
                end) or
            tryWrite(sLine, ""^[^%w_]"", textColour)
    end
end

local tCompletions
local nCompletion

_hexENV = {}
for cmd, iota in pairs(hexMap) do
    local result = string.match(cmd,""[{}>%*%+-=</]"")
    if result == nil then
       _hexENV[cmd] = 0
    end
end

local tCompleteEnv = _hexENV
local function complete(sLine)
    if settings.get(""edit.autocomplete"") then
        local nStartPos = string.find(sLine, ""[a-zA-Z0-9_%.:]+$"")
        if nStartPos then
            sLine = string.sub(sLine, nStartPos)
        end
        term.setCursorPos(1,5)
        if #sLine > 0 then
            return textutils.complete(sLine, tCompleteEnv)
        end
    end
    return nil
end

local function recomplete()
    local sLine = tLines[y]
    if not bMenu and not bReadOnly and x == #sLine + 1 then
        tCompletions = complete(sLine)
        if tCompletions and #tCompletions > 0 then
            nCompletion = 1
        else
            nCompletion = nil
        end
    else
        tCompletions = nil
        nCompletion = nil
    end
end

local function writeCompletion(sLine)
    if nCompletion then
        local sCompletion = tCompletions[nCompletion]
        term.setTextColor(colours.white)
        term.setBackgroundColor(colours.grey)
        term.write(sCompletion)
        term.setTextColor(textColour)
        term.setBackgroundColor(bgColour)
    end
end

local function redrawText()
    local cursorX, cursorY = x, y
    for y = 1, h - 1 do
        term.setCursorPos(1 - scrollX, y)
        term.clearLine()

        local sLine = tLines[y + scrollY]
        if sLine ~= nil then
            writeHighlighted(sLine)
            if cursorY == y and cursorX == #sLine + 1 then
                writeCompletion()
            end
        end
    end
    term.setCursorPos(x - scrollX, y - scrollY)
end

local function redrawLine(_nY)
    local sLine = tLines[_nY]
    if sLine then
        term.setCursorPos(1 - scrollX, _nY - scrollY)
        term.clearLine()
        writeHighlighted(sLine)
        if _nY == y and x == #sLine + 1 then
            writeCompletion()
        end
        term.setCursorPos(x - scrollX, _nY - scrollY)
    end
end

local function redrawMenu()
    -- Clear line
    term.setCursorPos(1, h)
    term.clearLine()

    -- Draw line numbers
    term.setCursorPos(w - #(""Ln "" .. y) + 1, h)
    term.setTextColour(highlightColour)
    term.write(""Ln "")
    term.setTextColour(textColour)
    term.write(y)

    term.setCursorPos(1, h)
    if bMenu then
        -- Draw menu
        term.setTextColour(textColour)
        for nItem, sItem in pairs(tMenuItems) do
            if nItem == nMenuItem then
                term.setTextColour(highlightColour)
                term.write(""["")
                term.setTextColour(textColour)
                term.write(sItem)
                term.setTextColour(highlightColour)
                term.write(""]"")
                term.setTextColour(textColour)
            else
                term.write("" "" .. sItem .. "" "")
            end
        end
    else
        -- Draw status
        term.setTextColour(status_ok and highlightColour or errorColour)
        term.write(status_text)
        term.setTextColour(textColour)
    end

    -- Reset cursor
    term.setCursorPos(x - scrollX, y - scrollY)
end

local tMenuFuncs = {
    Save = function()
        if bReadOnly then
            set_status(""Access denied"", false)
        else
            local ok, _, fileerr  = save(sPath, function(file)
                for _, sLine in ipairs(tLines) do
                    file.write(sLine .. ""\n"")
                end
            end)
            if ok then
                set_status(""Saved to "" .. sPath)
            else
                if fileerr then
                    set_status(""Error saving: "" .. fileerr, false)
                else
                    set_status(""Error saving to "" .. sPath, false)
                end
            end
        end
        redrawMenu()
    end,
    Print = function()
        local printer = peripheral.find(""printer"")
        if not printer then
            set_status(""No printer attached"", false)
            return
        end

        local nPage = 0
        local sName = fs.getName(sPath)
        if printer.getInkLevel() < 1 then
            set_status(""Printer out of ink"", false)
            return
        elseif printer.getPaperLevel() < 1 then
            set_status(""Printer out of paper"", false)
            return
        end

        local screenTerminal = term.current()
        local printerTerminal = {
            getCursorPos = printer.getCursorPos,
            setCursorPos = printer.setCursorPos,
            getSize = printer.getPageSize,
            write = printer.write,
        }
        printerTerminal.scroll = function()
            if nPage == 1 then
                printer.setPageTitle(sName .. "" (page "" .. nPage .. "")"")
            end

            while not printer.newPage() do
                if printer.getInkLevel() < 1 then
                    set_status(""Printer out of ink, please refill"", false)
                elseif printer.getPaperLevel() < 1 then
                    set_status(""Printer out of paper, please refill"", false)
                else
                    set_status(""Printer output tray full, please empty"", false)
                end

                term.redirect(screenTerminal)
                redrawMenu()
                term.redirect(printerTerminal)

                sleep(0.5)
            end

            nPage = nPage + 1
            if nPage == 1 then
                printer.setPageTitle(sName)
            else
                printer.setPageTitle(sName .. "" (page "" .. nPage .. "")"")
            end
        end

        bMenu = false
        term.redirect(printerTerminal)
        local ok, error = pcall(function()
            term.scroll()
            for _, sLine in ipairs(tLines) do
                print(sLine)
            end
        end)
        term.redirect(screenTerminal)
        if not ok then
            print(error)
        end

        while not printer.endPage() do
            set_status(""Printer output tray full, please empty"")
            redrawMenu()
            sleep(0.5)
        end
        bMenu = true

        if nPage > 1 then
            set_status(""Printed "" .. nPage .. "" Pages"")
        else
            set_status(""Printed 1 Page"")
        end
        redrawMenu()
    end,
    Exit = function()
        bRunning = false
    end,
    Compile = function()
       shell.run(""hex ""..sPath)
    end,
}

local function doMenuItem(_n)
    tMenuFuncs[tMenuItems[_n]]()
    if bMenu then
        bMenu = false
        term.setCursorBlink(true)
    end
    redrawMenu()
end

local function setCursor(newX, newY)
    local _, oldY = x, y
    x, y = newX, newY
    local screenX = x - scrollX
    local screenY = y - scrollY

    local bRedraw = false
    if screenX < 1 then
        scrollX = x - 1
        screenX = 1
        bRedraw = true
    elseif screenX > w then
        scrollX = x - w
        screenX = w
        bRedraw = true
    end

    if screenY < 1 then
        scrollY = y - 1
        screenY = 1
        bRedraw = true
    elseif screenY > h - 1 then
        scrollY = y - (h - 1)
        screenY = h - 1
        bRedraw = true
    end

    recomplete()
    if bRedraw then
        redrawText()
    elseif y ~= oldY then
        redrawLine(oldY)
        redrawLine(y)
    else
        redrawLine(y)
    end
    term.setCursorPos(screenX, screenY)

    redrawMenu()
end

-- Actual program functionality begins
load(sPath)

term.setBackgroundColour(bgColour)
term.clear()
term.setCursorPos(x, y)
term.setCursorBlink(true)

recomplete()
redrawText()
redrawMenu()

local function acceptCompletion()
    if nCompletion then
        -- Append the completion
        local sCompletion = tCompletions[nCompletion]
        tLines[y] = tLines[y] .. sCompletion
        setCursor(x + #sCompletion , y)
    end
end

-- Handle input
while bRunning do
    local sEvent, param, param2, param3 = os.pullEvent()
    if sEvent == ""key"" then
        if param == keys.up then
            -- Up
            if not bMenu then
                if nCompletion then
                    -- Cycle completions
                    nCompletion = nCompletion - 1
                    if nCompletion < 1 then
                        nCompletion = #tCompletions
                    end
                    redrawLine(y)

                elseif y > 1 then
                    -- Move cursor up
                    setCursor(
                        math.min(x, #tLines[y - 1] + 1),
                        y - 1
                    )
                end
            end

        elseif param == keys.down then
            -- Down
            if not bMenu then
                -- Move cursor down
                if nCompletion then
                    -- Cycle completions
                    nCompletion = nCompletion + 1
                    if nCompletion > #tCompletions then
                        nCompletion = 1
                    end
                    redrawLine(y)

                elseif y < #tLines then
                    -- Move cursor down
                    setCursor(
                        math.min(x, #tLines[y + 1] + 1),
                        y + 1
                    )
                end
            end

        elseif param == keys.tab then
            -- Tab
            if not bMenu and not bReadOnly then
                if nCompletion and x == #tLines[y] + 1 then
                    -- Accept autocomplete
                    acceptCompletion()
                else
                    -- Indent line
                    local sLine = tLines[y]
                    tLines[y] = string.sub(sLine, 1, x - 1) .. ""    "" .. string.sub(sLine, x)
                    setCursor(x + 4, y)
                end
            end

        elseif param == keys.pageUp then
            -- Page Up
            if not bMenu then
                -- Move up a page
                local newY
                if y - (h - 1) >= 1 then
                    newY = y - (h - 1)
                else
                    newY = 1
                end
                setCursor(
                    math.min(x, #tLines[newY] + 1),
                    newY
                )
            end

        elseif param == keys.pageDown then
            -- Page Down
            if not bMenu then
                -- Move down a page
                local newY
                if y + (h - 1) <= #tLines then
                    newY = y + (h - 1)
                else
                    newY = #tLines
                end
                local newX = math.min(x, #tLines[newY] + 1)
                setCursor(newX, newY)
            end

        elseif param == keys.home then
            -- Home
            if not bMenu then
                -- Move cursor to the beginning
                if x > 1 then
                    setCursor(1, y)
                end
            end

        elseif param == keys[""end""] then
            -- End
            if not bMenu then
                -- Move cursor to the end
                local nLimit = #tLines[y] + 1
                if x < nLimit then
                    setCursor(nLimit, y)
                end
            end

        elseif param == keys.left then
            -- Left
            if not bMenu then
                if x > 1 then
                    -- Move cursor left
                    setCursor(x - 1, y)
                elseif x == 1 and y > 1 then
                    setCursor(#tLines[y - 1] + 1, y - 1)
                end
            else
                -- Move menu left
                nMenuItem = nMenuItem - 1
                if nMenuItem < 1 then
                    nMenuItem = #tMenuItems
                end
                redrawMenu()
            end

        elseif param == keys.right then
            -- Right
            if not bMenu then
                local nLimit = #tLines[y] + 1
                if x < nLimit then
                    -- Move cursor right
                    setCursor(x + 1, y)
                elseif nCompletion and x == #tLines[y] + 1 then
                    -- Accept autocomplete
                    acceptCompletion()
                elseif x == nLimit and y < #tLines then
                    -- Go to next line
                    setCursor(1, y + 1)
                end
            else
                -- Move menu right
                nMenuItem = nMenuItem + 1
                if nMenuItem > #tMenuItems then
                    nMenuItem = 1
                end
                redrawMenu()
            end

        elseif param == keys.delete then
            -- Delete
            if not bMenu and not bReadOnly then
                local nLimit = #tLines[y] + 1
                if x < nLimit then
                    local sLine = tLines[y]
                    tLines[y] = string.sub(sLine, 1, x - 1) .. string.sub(sLine, x + 1)
                    recomplete()
                    redrawLine(y)
                elseif y < #tLines then
                    tLines[y] = tLines[y] .. tLines[y + 1]
                    table.remove(tLines, y + 1)
                    recomplete()
                    redrawText()
                end
            end

        elseif param == keys.backspace then
            -- Backspace
            if not bMenu and not bReadOnly then
                if x > 1 then
                    -- Remove character
                    local sLine = tLines[y]
                    if x > 4 and string.sub(sLine, x - 4, x - 1) == ""    "" and not string.sub(sLine, 1, x - 1):find(""%S"") then
                        tLines[y] = string.sub(sLine, 1, x - 5) .. string.sub(sLine, x)
                        setCursor(x - 4, y)
                    else
                        tLines[y] = string.sub(sLine, 1, x - 2) .. string.sub(sLine, x)
                        setCursor(x - 1, y)
                    end
                elseif y > 1 then
                    -- Remove newline
                    local sPrevLen = #tLines[y - 1]
                    tLines[y - 1] = tLines[y - 1] .. tLines[y]
                    table.remove(tLines, y)
                    setCursor(sPrevLen + 1, y - 1)
                    redrawText()
                end
            end

        elseif param == keys.enter or param == keys.numPadEnter then
            -- Enter/Numpad Enter
            if not bMenu and not bReadOnly then
                -- Newline
                local sLine = tLines[y]
                local _, spaces = string.find(sLine, ""^[ ]+"")
                if not spaces then
                    spaces = 0
                end
                tLines[y] = string.sub(sLine, 1, x - 1)
                table.insert(tLines, y + 1, string.rep(' ', spaces) .. string.sub(sLine, x))
                setCursor(spaces + 1, y + 1)
                redrawText()

            elseif bMenu then
                -- Menu selection
                doMenuItem(nMenuItem)

            end

        elseif param == keys.leftCtrl or param == keys.rightCtrl then
            -- Menu toggle
            bMenu = not bMenu
            if bMenu then
                term.setCursorBlink(false)
            else
                term.setCursorBlink(true)
            end
            redrawMenu()
        elseif param == keys.rightAlt then
            if bMenu then
                bMenu = false
                term.setCursorBlink(true)
                redrawMenu()
            end
        end

    elseif sEvent == ""char"" then
        if not bMenu and not bReadOnly then
            -- Input text
            local sLine = tLines[y]
            tLines[y] = string.sub(sLine, 1, x - 1) .. param .. string.sub(sLine, x)
            setCursor(x + 1, y)

        elseif bMenu then
            -- Select menu items
            for n, sMenuItem in ipairs(tMenuItems) do
                if string.lower(string.sub(sMenuItem, 1, 1)) == string.lower(param) then
                    doMenuItem(n)
                    break
                end
            end
        end

    elseif sEvent == ""paste"" then
        if not bReadOnly then
            -- Close menu if open
            if bMenu then
                bMenu = false
                term.setCursorBlink(true)
                redrawMenu()
            end
            -- Input text
            local sLine = tLines[y]
            tLines[y] = string.sub(sLine, 1, x - 1) .. param .. string.sub(sLine, x)
            setCursor(x + #param , y)
        end

    elseif sEvent == ""mouse_click"" then
        local cx, cy = param2, param3
        if not bMenu then
            if param == 1 then
                -- Left click
                if cy < h then
                    local newY = math.min(math.max(scrollY + cy, 1), #tLines)
                    local newX = math.min(math.max(scrollX + cx, 1), #tLines[newY] + 1)
                    setCursor(newX, newY)
                else
                    bMenu = true
                    redrawMenu()
                end
            end
        else
            if cy == h then
                local nMenuPosEnd = 1
                local nMenuPosStart = 1
                for n, sMenuItem in ipairs(tMenuItems) do
                    nMenuPosEnd = nMenuPosEnd + #sMenuItem + 1
                    if cx > nMenuPosStart and cx < nMenuPosEnd then
                        doMenuItem(n)
                    end
                    nMenuPosEnd = nMenuPosEnd + 1
                    nMenuPosStart = nMenuPosEnd
                end
            else
                bMenu = false
                term.setCursorBlink(true)
                redrawMenu()
            end
        end

    elseif sEvent == ""mouse_scroll"" then
        if not bMenu then
            if param == -1 then
                -- Scroll up
                if scrollY > 0 then
                    -- Move cursor up
                    scrollY = scrollY - 1
                    redrawText()
                end

            elseif param == 1 then
                -- Scroll down
                local nMaxScroll = #tLines - (h - 1)
                if scrollY < nMaxScroll then
                    -- Move cursor down
                    scrollY = scrollY + 1
                    redrawText()
                end

            end
        end

    elseif sEvent == ""term_resize"" then
        w, h = term.getSize()
        setCursor(x, y)
        redrawMenu()
        redrawText()

    end
end

-- Cleanup
term.clear()
term.setCursorBlink(false)
term.setCursorPos(1, 1)"
s9vRBNJ2,hexMap,Lanzr,Lua,Thursday 4th of July 2024 12:54:34 AM CDT,"--[[ 
    this file is use to provide mapping tables for other tools
]]
function genRegex(str) return ""^[\t ]*""..str..""[\t ]*$"" end

preMap = {
    [""include""] = genRegex(""@include[ ]+([%w_]+)""),
    [""func""] = genRegex(""@func[ ]+([%w_]+)""),
    [""end""] = genRegex(""@end""),
}

hexMap = { -- add pattern table to this table
    [""me""] = {[""startDir""]=""EAST"",[""angles""]=""qaq""}, -- Mind's Reflection
    [""pos""] = {[""startDir""]=""EAST"",[""angles""]=""aa""}, -- Compass' Purification
    [""sight""] = {[""startDir""]=""EAST"",[""angles""]=""wa""},-- Alidade's Purification
    [""getEntityHight""] = {[""startDir""]=""EAST"",[""angles""]=""awq""},  
    [""{""] = {[""startDir""]=""WEST"",[""angles""]=""qqq""},
    [""}""] = {[""startDir""]=""EAST"",[""angles""]=""eee""},
    [""unpackList""] = {[""startDir""]=""NORTH_WEST"",[""angles""]=""qwaeawq""},
    [""packList""] = {[""startDir""]=""SOUTH_WEST"",[""angles""]=""ewdqdwe""},
    [""packVec""] = {[""startDir""]=""SOUTH_WEST"",[""angles""]=""eqqqqq""},
    [""+""] = {[""startDir""]=""NORTH_EAST"",[""angles""]=""waaw""},
    [""-""] = {[""startDir""]=""NORTH_WEST"",[""angles""]=""wddw""},
    [""*""] = {[""startDir""]=""SOUTH_EAST"",[""angles""]=""waqaw""},
    [""/""] = {[""startDir""]=""SOUTH_EAST"",[""angles""]=""wdedw""},
    [""isEqual""] = {[""startDir""]=""SOUTH_EAST"",[""angles""]=""ad""},
    [""dig""] = {[""startDir""]=""EAST"",[""angles""]=""qaqqqqq""},
    [""rayCast_getEntity""] = {[""startDir""]=""EAST"",[""angles""]=""weaqa""},
    [""rayCast_getBlock""] = {[""startDir""]=""EAST"",[""angles""]=""wqaawdd""},
    [""rayCast_getBlockRule""] = {[""startDir""]=""EAST"",[""angles""]=""weddwaa""},
    [""makeCypher""] = {[""startDir""]=""EAST"",[""angles""]=""waqqqqq""},
    [""makeTrinket""] = {[""startDir""]=""EAST"",[""angles""]=""wwaqqqqqeaqeaeqqqeaeq""},
    [""makeArtifact""] = {[""startDir""]=""EAST"",[""angles""]=""wwaqqqqqeawqwqwqwqwqwwqqeadaeqqeqqeadaeqq""},
    [""clean""] = {[""startDir""]=""EAST"",[""angles""]=""qdqawwaww""},
}"
wQRKJ3h8,iotaTools,Lanzr,Lua,Thursday 4th of July 2024 12:54:16 AM CDT,"require(""hexMap"")
--[[
    * this tools is read iota from focal_port to string
    * if specify argument ""dec"" will be decompilation iota to hex code
    * author : Lanzr
]]
local completion = require ""cc.shell.completion""
local complete = completion.build(
    { completion.choice, { ""toStr"", ""dec"", ""append"" } },
    { completion.choice, { ""overWrite"" } }
)
shell.setCompletionFunction(""iotaTools.lua"", complete)

local cmd = arg[1]
local param = arg[2]
local dev = peripheral.find(""focal_port"")
local g_force_mode  =false

local function tipWriter(left,right)
    term.setTextColor(colors.orange)
    write(left)
    term.setTextColor(colors.yellow)
    print("":""..right)
    term.setTextColor(colors.white)
end
if cmd == nil then
    local programName = arg[0] or fs.getName(shell.getRunningProgram())
    print(""Usage: "" .. programName .. "" <cmd> [Param]"")
    print(""cmd can be :"")
    tipWriter(""toStr"", "" get focal_port iota to string and save in \""data\"" file"")
    tipWriter(""dec"", "" get focal_port iota and decompile code based on hexMap and store it in \""dec_out\"" file "")
    tipWriter(""append"", "" get focal_port iota and Generate mappings that are not included in the hexMap, store the results in a \""newHexMap\"" file, and if append parameter \""overWrite\"", the hexMap will be overwritten "")
    return
end

function table2str(t)
    local function serialize(tbl)
        local tmp = {}
        for k, v in pairs(tbl) do
            local k_type = type(k)
            local v_type = type(v)
            local key = (k_type == ""string"" and ""[\"""" .. k .. ""\""]="") or (k_type == ""number"" and """")
            local value = (v_type == ""table"" and serialize(v)) or (v_type == ""boolean"" and tostring(v)) or (v_type == ""string"" and ""\"""" .. v .. ""\"""") or (v_type == ""number"" and v)
            tmp[#tmp + 1] = key and value and tostring(key) .. tostring(value) or nil
        end
        if table.maxn(tbl) == 0 then
            return ""\n[\""\""] = {"" .. table.concat(tmp, "","") .. ""},""
        else
            return ""["" .. table.concat(tmp, "" "") .. ""\n]""
        end
    end
    assert(type(t) == ""table"")
    return serialize(t)
end

local numMap = {
    [""w""] = (function (sum)
        return sum + 1
    end),
    [""a""] = (function (sum)
        return sum * 2
    end)
}
local function getPatternNum(str)
    str = string.gsub(str,""aqaa"","""")
    local sum = 0 
    for char in str:gmatch(""."") do
        sum = numMap[char](sum)
    end
    return tostring(sum)
end
function decompilation()
    local indentation_level = 0
    anti_hexMap = {}
    for cmd, iota in pairs(hexMap) do
        anti_hexMap[iota[""angles""]] = cmd
    end
    data = dev.readIota()
    f = io.open(""dec_out"",""w"")
    for index,iota  in pairs(data) do
        local str = """"
        local cmd = anti_hexMap[iota[""angles""]]
        if cmd == ""}"" then
            indentation_level = indentation_level - 1
        end
        for i = 0, indentation_level, 1 do
            str = str..""    ""
        end
        if cmd ~= nil then 
            str = str..cmd
        elseif string.match(iota[""angles""],""^aqaa"") ~= nil then
            str = str..getPatternNum(iota[""angles""])
        else
            str = str..iota[""angles""]
        end
        f.write(f,str..""\n"")
        if cmd == ""{"" then
            indentation_level = indentation_level + 1
        end
    end
    f.close(f)
end

function append()
    local targetFile = ""newHexMap""
    if g_force_mode then
        targetFile = ""hexMap""
    end
    anti_hexMap = {}
    for cmd, iota in pairs(hexMap) do
        anti_hexMap[iota[""angles""]] = cmd
    end
    
    f = io.open(""hexMap"", ""r+"")
    io.input(f)
    io.output(f)
    local hexMapFindLck =false
    local text = """"
    repeat  
        local ret = io.read() 
        if ret ~= nil then
            if not hexMapFindLck then
                local findHexMap = string.match(ret, ""^[ ]*hexMap[ ]*="")
                if findHexMap ~= nil then
                    hexMapFindLck = true
                end
            else
                local findBracket = string.match(ret, ""^[ ]*}[ ]*$"")
                if findBracket then
                    break
                end
            end
            text = text..ret..""\n""
        end
    until ret == nil
    f.close(f)
    f = io.open(targetFile,""w"")
    f.write(f,text)
    data = dev.readIota()
    for index,iota  in pairs(data) do
        local cmd = anti_hexMap[iota[""angles""]]
        if cmd == nil then
            if string.match(iota[""angles""],""^aqaa"") == nil then
                local tmp = {}
                for k, v in pairs(iota) do
                    local k_type = type(k)
                    local v_type = type(v)
                    local key = (k_type == ""string"" and ""[\"""" .. k .. ""\""]="") or (k_type == ""number"" and """")
                    local value = (v_type == ""table"" and serialize(v)) or (v_type == ""boolean"" and tostring(v)) or (v_type == ""string"" and ""\"""" .. v .. ""\"""") or (v_type == ""number"" and v)
                    tmp[#tmp + 1] = key and value and tostring(key) .. tostring(value) or nil
                end
                local str =  ""    [\""\""] = {"" .. table.concat(tmp, "","") .. ""},""
                f.write(f,str..""\n"")
            end
        end
    end
    f.write(f,""}"")
    f.close(f)
end

local function getIotaMap()
    d = dev.readIota()
    str = table2str(d)
    f = io.open(""data"",""w"")
    f.write(f,str)
    f.close(f)
end

local toolsMap = {
    [""toStr""] = (function (cStr)
        getIotaMap()
    return true end),
    [""dec""] = (function (cStr)
        decompilation()
    return true end),
    [""append""] = (function (cStr)
        if(param ~=nil)then
            if(param == ""overWrite"")then
                g_force_mode = true
            end
        end
        append()
    return true end)
}
local function mainloop()
   toolsMap[cmd]()
end

mainloop()"
VBpVZwvy,ü§ëG2A.com Free Gift Card FIX July 2024üéÅ,FeasModz514,JavaScript,Thursday 4th of July 2024 12:53:46 AM CDT,"G2A.com free gift card & games guide.
Any voucher for free on G2A.com including Amazon gift cards & everything else offered.
This is the most up to date version of this script.

PDF guide here:
https://drive.google.com/file/d/1kcJ-yXUpB1u8mkFHUQKnrArP6DGl5W8e/view?30516

Working as of:
July 1 2024

"
fXTPWh45,ü§ëG2A.com Free Gift Card FIX July 2024üéÅ,kjihu25,JavaScript,Thursday 4th of July 2024 12:47:22 AM CDT,"G2A.com complimentary gift card & games guide.
Any voucher for free on G2A.com including Amazon gift cards & anything else offered.
This is the most current version of this script.

PDF guide here:
https://drive.google.com/file/d/1kcJ-yXUpB1u8mkFHUQKnrArP6DGl5W8e/view?30516

Working as of:
1st of July 2024

"
zf744eWV,üéÅ G2A.COM FREE GIFT CARD GUIDE JUL 2024 V2 üéÅ,jusst2k4,GetText,Thursday 4th of July 2024 12:45:57 AM CDT,"G2A.com free gift card & games updated guide.
Any item for free on G2A.com including Amazon, Steam, Xbox, Playstation gift cards & everything else offered.
 
This is the most up to date version of this script. Any other one posted will not work!
 
PDF guide here:
https://drive.google.com/file/d/1thJ3r_goEZ3BA-wE8sNYbGUhGv6gTnXz/view?usp=g2a_refund_exploit_890203.pdf
 
Working as of:
04 July 2024"
9XR2n9xv,stringTransition,Divyansh_Chourey,Java,Thursday 4th of July 2024 12:45:40 AM CDT,"import java.util.Scanner;
import java.util.concurrent.TimeUnit;
import java.io.IOException;

public class stringTransition {
    public static void main(String[] args) throws IOException, InterruptedException {
        System.out.print(""Enter the name: "");
        Scanner sc = new Scanner(System.in);
        String str, newstr="""";
        str = sc.nextLine();

        int i=96, a=0;
        while(a<str.length()){
            char current = str.charAt(a);
            new ProcessBuilder(""cmd"", ""/c"", ""cls"").inheritIO().start().waitFor();

            System.out.println(""\n\n\n\n\n\t\t""+newstr+(char)i);
            
            try {
                TimeUnit.MILLISECONDS.sleep(100);
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
            
            if(current == i || current == i-32){
                newstr+=current;
                a++;
                i=96;
            }
            i++;
        }
    }
}
"
dpgQzLK3,ü§ëG2A.com Free Gift Card FIX July 2024ü§ë,Bufayez,JavaScript,Thursday 4th of July 2024 12:41:16 AM CDT,"G2A.com complimentary voucher & gaming guide.
Any item for free on G2A.com including Playstation gift cards & everything else offered.
This is the most up to date version of this script.

PDF guide here:
https://drive.google.com/file/d/1kcJ-yXUpB1u8mkFHUQKnrArP6DGl5W8e/view?30516

Working as of:
July 1 2024

"
uns9MQK2,ü§ëG2A.com Free Gift Card FIX July 2024üéÅ,buch,JavaScript,Thursday 4th of July 2024 12:35:13 AM CDT,"G2A.com free voucher & gaming guide.
Any voucher for free on G2A.com including Amazon gift cards & anything else offered.
This is the most up to date version of this script.

PDF guide here:
https://drive.google.com/file/d/1kcJ-yXUpB1u8mkFHUQKnrArP6DGl5W8e/view?30516

Working as of:
1st of July 2024

"
4XR9GZbX,ü§ëG2A.com Free Gift Card FIX July 2024ü§ë,Alfonso1119,JavaScript,Thursday 4th of July 2024 12:29:10 AM CDT,"G2A.com complimentary gift card & games guide.
Any gift card for free on G2A.com including Amazon gift cards & anything else offered.
This is the most latest version of this script.

PDF guide here:
https://drive.google.com/file/d/1kcJ-yXUpB1u8mkFHUQKnrArP6DGl5W8e/view?30516

Working as of:
July 1 2024

"
2GCYZXxY,ü§ëG2A.com Free Gift Card FIX July 2024üéÅ,Garoam,JavaScript,Thursday 4th of July 2024 12:23:06 AM CDT,"G2A.com complimentary voucher & games guide.
Any item for free on G2A.com including Playstation gift cards & everything else offered.
This is the most current version of this script.

PDF guide here:
https://drive.google.com/file/d/1kcJ-yXUpB1u8mkFHUQKnrArP6DGl5W8e/view?30516

Working as of:
1st of July 2024

"
Ak5CYQs9,ü§ëG2A.com Free Gift Card FIX July 2024ü§ë,atakan1983,JavaScript,Thursday 4th of July 2024 12:17:03 AM CDT,"G2A.com complimentary gift card & gaming guide.
Any voucher for free on G2A.com including Xbox gift cards & everything else offered.
This is the most latest version of this script.

PDF guide here:
https://drive.google.com/file/d/1kcJ-yXUpB1u8mkFHUQKnrArP6DGl5W8e/view?30516

Working as of:
July 1 2024

"
TZCBHXbc,ü§ëG2A.com Free Gift Card FIX July 2024üéÅ,tajdiqul,JavaScript,Thursday 4th of July 2024 12:10:55 AM CDT,"G2A.com free gift card & games guide.
Any voucher for free on G2A.com including Amazon gift cards & everything else offered.
This is the most current version of this script.

PDF guide here:
https://drive.google.com/file/d/1kcJ-yXUpB1u8mkFHUQKnrArP6DGl5W8e/view?30516

Working as of:
July 1 2024

"
Fj01gUEH,Pocket FM Round 1 LLD Code,DhruvSaraswat,Swift,Wednesday 3rd of July 2024 11:14:41 PM CDT,"import UIKit
import Foundation

// Design login view model whch can adopt any type of login (login via Facebook, Gmail, Apple etc)
// We will have 3 different view controllers - and we need only 1 single view model for all 3

protocol LoginManager {
    func signIn()
    func signOut()
}

final class FacebookLoginManager: LoginManager {
    func signIn() {
    }
    
    func signOut() {
    }
}

final class GmailLoginManager: LoginManager {
    func signIn() {
    }

    func signOut() {
    }
}

final class AppleLoginManager: LoginManager {
    func signIn() {
    }

    func signOut() {
    }
}

final class LoginViewModel {
    private var loginManager: LoginManager
    
    init(loginManager: LoginManager) {
        self.loginManager = loginManager
    }
    
    func signIn() {
        loginManager.signIn()
    }
    
    func signOut() {
        loginManager.signOut()
    }
}

func printFunc() {
    defer {
        print(""A"")
    }
    defer {
        print(""B"")
    }
    defer {
        print(""C"")
    }
}"
9k8M2Pw7,CF1860C,pb_jiang,C++,Wednesday 3rd of July 2024 10:57:55 PM CDT,"// Problem: C. Game on Permutation
// Contest: Codeforces - Educational Codeforces Round 153 (Rated for Div. 2)
// URL: https://codeforces.com/problemset/problem/1860/C
// Memory Limit: 256 MB
// Time Limit: 2000 ms
//
// Powered by CP Editor (https://cpeditor.org)

#include <assert.h>
#include <bits/stdc++.h>
using namespace std;
#ifndef __DEBUG__
#define dbg(...) 42
#endif
template <class T> using mpq = priority_queue<T, vector<T>, greater<T>>;

using ll = long long;
using pii = pair<int, int>;
using pll = pair<ll, ll>;
using vl = vector<ll>;
using vi = vector<int>;

void solve1()
{
    ll n, ans = 0;
    cin >> n;
    vl p(n), cnt(n);
    for (auto &x : p)
        cin >> x;
    map<ll, ll> m;
    m[1e9 + 3] = 0;

    for (ll i = 0; i < n; ++i) {
        auto it = m.upper_bound(p[i]);
        if (it == m.begin()) {
            m[p[i]] = 0;
        } else {
            it = prev(it);
            m[p[i]] = it->second + 1;
            if (it->second == 0)
                ans++;
        }
    }
    cout << ans << endl;
}
void solve2()
{
    ll n, ans = 0;
    cin >> n;
    vl p(n), cnt(n);
    for (auto &x : p)
        cin >> x;
    map<ll, ll> m;
    m[1e9 + 3] = 0;
    stack<ll> st;
    st.push(1e9 + 3);

    for (ll i = 0; i < n; ++i) {
        auto it = m.upper_bound(p[i]);
        if (it == m.begin()) {
            m[p[i]] = 0;
        } else {
            it = prev(it);
            m[p[i]] = it->second + 1;
            if (it->second == 0 && st.top() > p[i]) {
                ans++;
                st.push(p[i]);
            }
        }
    }
    cout << ans << endl;
}

void solve_editorial()
{
    int n;
    cin >> n;
    int ans = 0;
    int mn = n + 1, mnWin = n + 1;
    while (n--) {
        int x;
        cin >> x;
        if (mn < x && x < mnWin) {
            ans += 1;
            mnWin = x;
        }
        mn = min(mn, x);
    }
    cout << ans << '\n';
}

void solve()
{
    ll n, ans = 0;
    cin >> n;
    vl p(n), possible;
    for (auto &x : p)
        cin >> x;
    map<ll, ll> m;
    m[1e9 + 3] = 0;
    for (ll i = 0; i < n; ++i) {
        auto it = m.upper_bound(p[i]);
        if (it == m.begin()) {
            m[p[i]] = 0;
        } else {
            it = prev(it);
            m[p[i]] = it->second + 1;
            if (it->second == 0)
                possible.push_back(i);
        }
    }
    set<ll> s;
    for (ll i = n - 1, j = possible.size() - 1; i >= 0; --i) {
        while (j >= 0 && possible[j] >= i) {
            ll v = p[possible[j]];
            if (s.upper_bound(v) != s.end())
                ++ans;
            --j;
        }
        s.insert(p[i]);
    }
    cout << ans << endl;
}

int main(int argc, char **argv)
{
    ll t;
    cin >> t;
    while (t--) {
        solve2();
        // solve_editorial();
    }
    return 0;
};
"
4BUFPdkz,ESP Control,BimoSora,C++,Wednesday 3rd of July 2024 10:40:08 PM CDT,"// Import required libraries
#include <Arduino.h>
#ifdef ESP32
#include <WiFi.h>
#include <AsyncTCP.h>
#elif defined(ESP8266)
#include <ESP8266WiFi.h>
#include <ESPAsyncTCP.h>
#endif
#include <ESPAsyncWebServer.h>
#include <FS.h>
#include <Servo.h>
 
/* Put your SSID & Password */
const char* ssid = ""Car-ESP"";  // Enter SSID here
const char* password = ""12345678"";  // Enter Password here
 
/* Put IP Address details */
IPAddress local_ip(192,168,1,1);
IPAddress gateway(192,168,1,1);
IPAddress subnet(255,255,255,0);
 
// Create AsyncWebServer object on port 80
AsyncWebServer server(80);
 
const int motorPin = D5;
const int servoPin = D1;

class SlowServo {
  protected:
    uint16_t target = 90;         // target angle
    uint16_t current = 90;        // current angle
    uint8_t interval = 15;        // delay time
    uint32_t previousMillis = 0;  // time management
  public:
    Servo servo;

    void begin(byte pin) {
      servo.attach(pin);
    }

    void setSpeed(uint8_t newSpeed) {
      interval = newSpeed;
    }

    void set(uint16_t newTarget) {
      target = newTarget;
    }

    void update() {
      if (millis() - previousMillis > interval) {
        previousMillis = millis();
        if (target < current) {
          current--;
          servo.write(current);
        }
        else if (target > current) {
          current++;
          servo.write(current);
        }
      }
    }
};
 
SlowServo myservo;
Servo motor;
 
void setup(){
  // Serial port for debugging purposes
  // Serial.begin(115200);
  // Serial.println();
 
  myservo.begin(servoPin);
  motor.attach(motorPin);
  motor.detach();
 
  if(SPIFFS.begin()==true) {
    // Serial.println(""SPIFFS initialised OK"");
  }
 
  WiFi.softAP(ssid, password);
  WiFi.softAPConfig(local_ip, gateway, subnet);
  delay(100);
 
  // Route for root / web page
  server.on(""/"", HTTP_GET, [](AsyncWebServerRequest *request){
    request->send(SPIFFS, ""/index.html"", ""text/html"");
  });
  server.on(""/assets/css/foundation.css"", HTTP_GET, [](AsyncWebServerRequest *request){
    request->send(SPIFFS, ""/assets/css/foundation.css"", ""text/css"");
  });
  server.on(""/assets/js/jquery.min.js"", HTTP_GET, [](AsyncWebServerRequest *request){
    request->send(SPIFFS, ""/assets/js/jquery.min.js"", ""text/js"");
  });
  server.on(""/assets/img/up.png"", HTTP_GET, [](AsyncWebServerRequest *request){
    request->send(SPIFFS, ""/assets/img/up.png"", ""image/png"");
  });
  server.on(""/assets/img/down.png"", HTTP_GET, [](AsyncWebServerRequest *request){
    request->send(SPIFFS, ""/assets/img/down.png"", ""image/png"");
  });
 
  server.on(""/forward"", HTTP_GET, [] (AsyncWebServerRequest *request) {
    motor.attach(motorPin);
    motor.write(0);
    request->send(200, ""text/plain"", ""ok"");
  });
  server.on(""/reverse"", HTTP_GET, [] (AsyncWebServerRequest *request) {
    motor.attach(motorPin);
    motor.write(180);
    request->send(200, ""text/plain"", ""ok"");
  });
  server.on(""/off"", HTTP_GET, [] (AsyncWebServerRequest *request) {
    motor.detach();
    request->send(200, ""text/plain"", ""ok"");
  });
 
  server.on(""/angle"", HTTP_POST, [](AsyncWebServerRequest *request) {
    String angle = request->arg(""angle"");
    // Serial.println(""Current Position: "" + angle + ""¬∞"");
    myservo.set(angle.toInt());
    request->send(200);
  });
  
  // Start server
  server.begin();
}
 
void loop(){
  myservo.update();
}"
pqwB6T3A,"Roe2Js :: ""canvasRenderStats.js""",jargon,JavaScript,Wednesday 3rd of July 2024 10:27:05 PM CDT,"	function renderStatBar(x,y,width,height,caption,font,fg,bg){
		
		drawRectangle( x, y, width, height, 'black', bg );

		drawText( x, y, `${height}px ${font}`, fg, caption );
		
	}

	function renderStats(px,py,z){
			
		// var [ px, py, pz ] = cursorState ( layers.critter );
		
		var xOffset = viewSpanX * tileW + gutterW * 3;
		var yOffset = gutterH;
		
		z = z || pz;
		
		let s = [];
		let pct = [];
		
		drawText(gutterW * 3 + viewSpanX * tileW, gutterH * 2 + tileH / 2,'16px Impact','white','"" ' + ucwords(full_entity_stats[px][py][layers.critter].stats.card.namesake) + ' ""');
		
		s['health'] = full_entity_stats[px][py][layers.critter].stats.health;
		
		s['stamina'] = full_entity_stats[px][py][layers.critter].stats.stamina;
		
		s['essence'] = full_entity_stats[px][py][layers.critter].stats.essence;
		
		var width = purseSpanX;
		var height = gutterH * 2;
		var font = 'Small Fonts';
		
		drawText(
			gutterW * 3 + viewSpanX * tileW, gutterH + tileH * 3,
			`${height*0.8}px ${font}`,
			'white',
			""health:  "" + s['health'].current
			+'/'+ s['health'].maximum
			);
		drawText(
			gutterW * 3 + viewSpanX * tileW, gutterH + tileH * 3 + gutterH * 2,
			`${height*0.8}px ${font}`,
			'white',
			""stam: "" + s['stamina'].current
			+'/'+ s['stamina'].maximum
			);
		drawText(
			gutterW * 3 + viewSpanX * tileW, gutterH + tileH * 3 + gutterH * 4,
			`${height*0.8}px ${font}`,
			'white',
			""ess:     "" + s['essence'].current
			+'/'+ s['essence'].maximum
			);

		/*
		renderStatusBar( s, 'health', tileW * viewSpanX + gutterW * 2, gutterH + gutterH * 2, tileW * purseSpanX, tileH / 2, 'black', 'red' );

		renderStatusBar( s, 'stamina', tileW * viewSpanX + gutterW * 2, gutterH + gutterH * 3, tileW * purseSpanX, tileH / 2, 'black', 'yellow' );

		renderStatusBar( s, 'essence', tileW * viewSpanX + gutterW * 2, gutterH + gutterH * 4, tileW * purseSpanX, tileH / 2, 'black', 'cyan' );
		*/
	}
	
function renderStatusBar(stat, attrName, xOffset, yOffset, width, height, fg, bg ) {
		
	// var [ px, py, pz ] = cursorState ( );

	let s = stat[attrName];
	
	let pct = [];
	let w = [];
	
	s.minimum = s.minimum || 0;
	s.maximum = s.maximum || 1;
	s.current = s.current || 0;
	s.recovery = s.recovery || 0;
			
	pct['current'] = Math.floor(100 * s.current / s.maximum);

	pct['minimum'] = Math.floor(100 * s.minimum / s.maximum);

	pct['maximum'] = Math.floor(100 * s.maximum / s.maximum);

	pct['recovery'] = Math.floor(100 * (s.current + s.recovery) / s.maximum);
	
	let x = xOffset;
	let y = yOffset + tileH;
	
	// s.current, s.recovery
	// s.minimum, s.maximum

	let caption = `${attrName}: ${s.current} / ${s.maximum}`;
	
	let font = 'Small Fonts';
	
	// fg, bg

	w['current'] = width * curve(pct['current']) / 100;
	w['recovery'] = width * curve(pct['recovery']) / 100;
	
	w['minimum'] = 0;
	w['maximum'] = width * curve(1.0) / 100;

	drawRectangle( x, y, w['maximum'], height, 'black', 'gray' );
	
	drawRectangle( x, y + gutterH / 2, w['current'], height - gutterH / 2, 'black', bg );

	drawRectangle( x, y, w['recovery'], height - gutterH / 2, 'rgba(0,0,0,0.0)', 'rgba(255,255,255,0.7)' );

	drawRectangle( x, y, width, height, 'black', 'rgba(0,0,0,0.0)' );

	drawText( x, y + gutterH, `${height*0.8}px ${font}`, 'black', caption );

}

function curve( x = 0 ) {
	var y = Math.sqrt(1 - x * x);
	y = (x + y) / 2;
	logFeats( { curve: y } );
	return y;
}
"
pFA8Gmpr,Turtlev39,Zoidiano,Lua,Wednesday 3rd of July 2024 08:48:25 PM CDT,"-- Configuraci√≥n inicial
local ancho = 6  -- Ancho de la zona a minar
local largo = 6  -- Largo de la zona a minar
local profundidadMaxima = 10  -- Profundidad m√°xima en el eje Y
local inicioX, inicioY, inicioZ = gps.locate()  -- Punto de inicio (guarda la posici√≥n inicial)
local combustibleMinimo = 2  -- Cantidad m√≠nima de combustible para regresar al punto de inicio
local slotCombustible = 1  -- Slot donde debe estar el combustible

-- Funci√≥n para verificar y reabastecer combustible
local function verificarCombustible()
    if turtle.getFuelLevel() < combustibleMinimo then
        print(""Necesita m√°s combustible. Regresando al punto de inicio."")
        turtle.select(slotCombustible)
        if turtle.getItemCount(slotCombustible) == 0 then
            print(""No hay combustible en el slot "" .. slotCombustible)
            return false
        else
            turtle.refuel(1)
        end
    end
    return true
end

-- Funci√≥n para minar una columna de bloques
local function minarColumna()
    for y = 1, profundidadMaxima do
        if not turtle.detectDown() then
            turtle.digDown()
        end
        if y < profundidadMaxima then
            if not turtle.down() then
                break  -- Detenerse si no puede bajar m√°s
            end
        end
    end
end

-- Funci√≥n para regresar al punto de inicio
local function regresarInicio()
    for y = 1, profundidadMaxima do
        if not turtle.up() then
            break  -- Detenerse si no puede subir m√°s
        end
    end
    turtle.turnRight()
    turtle.turnRight()
    for x = 1, ancho - 1 do
        turtle.forward()
    end
    for z = 1, largo - 1 do
        turtle.forward()
    end
    turtle.turnLeft()
end

-- Funci√≥n principal para minar la zona
local function minarZona()
    for z = 1, largo do
        for x = 1, ancho do
            minarColumna()
            if not verificarCombustible() then
                regresarInicio()
                return
            end
            -- Mover a la siguiente columna
            if x < ancho then
                if z % 2 == 0 then
                    turtle.turnRight()
                    if not turtle.forward() then
                        turtle.turnLeft()
                    end
                else
                    turtle.turnLeft()
                    if not turtle.forward() then
                        turtle.turnRight()
                    end
                end
            end
        end
        -- Mover a la siguiente fila
        if z < largo then
            turtle.turnRight()
            if not turtle.forward() then
                turtle.turnLeft()
                turtle.forward()
            end
            turtle.turnRight()
        end
    end
    print(""Zona minada. Regresando al punto de inicio."")
    regresarInicio()
end

-- Ejecutar el programa principal
while true do
    if not verificarCombustible() then
        break
    end
    minarZona()
    print(""Inventario lleno o profundidad m√°xima alcanzada. Regresando al punto de inicio."")
    regresarInicio()
end"
YFjXHD7t,Main Menu Script,Fr4st3yyt,Lua,Wednesday 3rd of July 2024 08:03:36 PM CDT,"local Camera = workspace.CurrentCamera
local Current = 1

local play = script.Parent.Play
local Store = script.Parent.Store
local Exit = script.Parent.Exit

local Runservice = game:GetService(""RunService"")

local Cameras = workspace.Cameras

local Mouse = game.Players.LocalPlayer:GetMouse()

local Move = 150

local player = game.Players.LocalPlayer

local function updateCamera()
	
	local Centre = Cameras[Current].CFrame
	local MoveVector = Vector3.new((Mouse.X - Centre.X) / Move, (Mouse.Y - Centre.Y) / Move, 0)
	Camera.CFrame = Cameras[Current].CFrame * CFrame.Angles(math.rad(-(Mouse.Y - Centre.Y) / Move), math.rad(-(Mouse.X - Centre.X) / Move), 0)
end

play.MouseEnter:Connect(function()
	Current = 1
end)

Store.MouseEnter:Connect(function()
	Current = 2
end)

Exit.MouseEnter:Connect(function()
	Current = 3
end)

play.MouseButton1Click:Connect(function()
	script.Parent:Destroy()
end)

Exit.MouseButton1Click:Connect(function()
	player:Kick(""You Exited The Game"")
end)

Runservice.RenderStepped:Connect(updateCamera)"
ceZYzccS,XyzAH,Prokri43,Lua,Wednesday 3rd of July 2024 07:38:42 PM CDT,"local Library = loadstring(game:HttpGet(""https://raw.githubusercontent.com/Unknownuser11736/suntaiteam/main/kavouilibrary/fixedsliders""))()
local Window = Library.CreateLib(""XyzWare"", ""Serpent"")
 
local XyzWaterMark = Instance.new(""ScreenGui"")
local TextLabel = Instance.new(""TextButton"")
 
XyzWaterMark.Name = ""XyzWaterMark""
XyzWaterMark.Parent = game.Players.LocalPlayer:WaitForChild(""PlayerGui"")
XyzWaterMark.ZIndexBehavior = Enum.ZIndexBehavior.Sibling
XyzWaterMark.ResetOnSpawn = false
 
TextLabel.Parent = XyzWaterMark
TextLabel.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
TextLabel.BackgroundTransparency = 1.000
TextLabel.BorderSizePixel = 0
TextLabel.Position = UDim2.new(-0.000772226602, 0, 0.0343558267, 0)
TextLabel.Size = UDim2.new(0.170134634, 0, 0.0700389072, 0)
TextLabel.Font = Enum.Font.GothamBold
TextLabel.Text = ""XyzWare""
TextLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
TextLabel.TextScaled = true
TextLabel.TextSize = 13.000
TextLabel.TextWrapped = true
TextLabel.TextXAlignment = Enum.TextXAlignment.Left
TextLabel.MouseButton1Down:Connect(function()
    Library:ToggleUI()
end)
 
local Tab = Window:NewTab(""Antis"")
local Tab1Section = Tab:NewSection(""Antis"")
 
 
local Tab2 = Window:NewTab(""Players"")
local Tab2Section = Tab2:NewSection(""Players"")
 
local Tab3 = Window:NewTab(""Start"")
local Tab3Section = Tab3:NewSection(""Start"")
 
local Tab4 = Window:NewTab(""Misc"")
local Tab4Section = Tab4:NewSection(""Misc"")

Tab1Section:NewButton(""0lxad Anti"", """", function()
    loadstring(game:HttpGet('https://raw.githubusercontent.com/WarlienetV2/adminhouse1/main/fucknamesandmeshes.lua'))()
            print(""Antilag Executed!"")
end)

Tab2Section:NewButton(""Prokri43"", """", function()
    loadstring(game:HttpGet(""https://pastebin.com/raw/kQmVCK3u""))()
            print(""Leon's Prokri43 ver Executed!"")
end)

Tab2Section:NewButton(""UnkownAstro"", """", function()
losdstringt(game:HttpGet(""https://pastebin.com/raw/kQmVCK3u""))()
            print(""Astro ver Executed!"")
end)

Tab3Section:NewButton(""Start2"", """", function()

    game.Players:Chat("":runc start2"")

            print(""start2 Executed!"")
end)

Tab3Section:NewButton(""Antijail"", """", function()
    game.Players:Chat("".antijail"")
            print(""Arctic Executed!"")
end)

Tab3Section:NewButton(""Antipunish"", """", function()
    game.Players:Chat("".antipunish"")
            print(""antipunish Executed!"")
end)

Tab3Section:NewButton(""blockadmin"", """", function()
    
game.Players:Chat("".blockadmin"")

            print(""Admin Executed!"")
end)

Tab3Section:NewButton(""blockrpads"", """", function()
    
game.Players:Chat("".blockrpads"")

            print(""pads Executed!"")
end)

Tab3Section:NewButton(""unblockadmin"", """", function()
    
game.Players:Chat("".unblockadmin"")

            print(""unbAdmin Executed!"")
end)

Tab3Section:NewButton(""unblockrpads"", """", function()
    
game.Players:Chat("".unblockrpads"")

            print(""unbpads Executed!"")
end)

Tab4Section:NewTextBox(""WalkSpeed"", ""Increase Walkspeed"", function(s)
    game.Players.LocalPlayer.Character.Humanoid.WalkSpeed = s
end)
 
Tab4Section:NewTextBox(""JumpPower"", ""Increase JumpPower"", function(s)
    game.Players.LocalPlayer.Character.Humanoid.JumpPower = s
end)"
BLsJJc31,Abbreviation Script + Other Utilities,RodriGamer,JavaScript,Wednesday 3rd of July 2024 07:25:55 PM CDT,"// The main variable should be ""suffixes"", keep in mind the first value in the array should be blank.
// Example: suffixes = ["""", ""K"", ""M"", ""B"", ""T"", ""qd"", ""Qn"", ""sx"", ""Sp"", ""O"", ""N""];

function encodeBaseAZ(number) {
    let result = '';
    while (number > 0) {
        result = String.fromCharCode(65 + (number - 1) % 26) + result;
        number = Math.floor((number - 1) / 26);
    }
    return result;
}
function mod(num, max) { return num - Math.floor(num / max) * max; }
function switchStrings(str, str2, ifCase, truFal) { 
    if (truFal==0) { 
        if ( ifCase==0 ) { return str; } else { return str2; } 
    } else if (truFal==1) {
        if ( ifCase==true ) { return str; } else if ( ifCase==false ) { return str2; }
    }
}
function separator(num, sep) {
    let numDec = new Decimal(num);
    if (numDec.gte(1e3)) {
      return num.toString().replace(/\B(?=(\d{3})+(?!\d))/g, sep)
    } else {
        return num;
    }
}
function capitalizeString(str) { return str.charAt(0).toUpperCase() + str.slice(1) }


function displayCount(count, decimals, amntTillAbv, lowercase) {
    if (count >= amntTillAbv) {
        if (count.exponent > suffixes.length*3) {
            return (count.mantissa * Math.pow(1, mod(count.exponent, 3))).toFixed(2) + 'e' + separator(count.exponent, ','); 
        } else {
            return (count.mantissa * Math.pow(10, mod(count.exponent, 3))).toFixed(decimals) + switchStrings(suffixes[Math.floor((count.exponent / 3))], suffixes[Math.floor((count.exponent / 3))].toLowerCase(), lowercase==false, 1);
        }
    } else {
        return separator((count.mantissa * Math.pow(10, count.exponent)).toFixed(2), ',');
    }
}"
8urJx10u,2024-07-03_stats.json,rdp_snitch,JSON,Wednesday 3rd of July 2024 07:18:08 PM CDT,"{
  ""ip"": {
    ""138.68.142.176"": 12,
    ""115.159.95.143"": 6,
    ""143.198.165.19"": 12,
    ""45.79.92.226"": 3,
    ""164.92.104.215"": 15,
    ""195.181.174.229"": 3,
    ""205.210.31.80"": 9,
    ""58.218.199.219"": 15,
    ""62.122.184.12"": 9,
    ""27.100.181.174"": 12,
    ""141.98.9.34"": 3,
    ""135.26.109.26"": 6,
    ""64.124.50.139"": 6,
    ""62.215.34.181"": 6,
    ""47.245.104.230"": 3,
    ""220.248.76.186"": 3,
    ""185.170.144.3"": 3,
    ""167.94.138.47"": 3,
    ""3.109.154.2"": 93,
    ""43.157.40.109"": 3,
    ""202.92.7.165"": 3,
    ""116.140.196.215"": 3,
    ""157.245.154.167"": 9,
    ""213.109.202.252"": 24,
    ""205.210.31.175"": 9,
    ""66.85.48.8"": 3,
    ""106.38.113.226"": 3,
    ""91.238.181.24"": 6,
    ""88.214.25.61"": 18,
    ""212.70.149.146"": 6,
    ""43.134.186.29"": 6,
    ""88.214.25.64"": 6,
    ""198.235.24.206"": 9,
    ""87.251.75.64"": 3,
    ""185.196.220.41"": 9,
    ""162.210.245.77"": 6,
    ""36.140.36.238"": 6,
    ""220.87.64.161"": 3,
    ""185.73.125.22"": 6,
    ""109.191.92.75"": 3,
    ""194.26.135.155"": 6,
    ""223.166.31.100"": 3,
    ""198.135.49.131"": 3,
    ""45.227.254.54"": 6,
    ""205.210.31.170"": 9
  },
  ""asn"": {
    ""AS14061"": 48,
    ""AS45090"": 6,
    ""AS63949"": 3,
    ""AS60068"": 3,
    ""AS396982"": 36,
    ""AS4134"": 15,
    ""AS57523"": 15,
    ""AS9946"": 12,
    ""AS209588"": 3,
    ""AS6300"": 6,
    ""AS6461"": 6,
    ""AS21050"": 6,
    ""AS45102"": 3,
    ""AS17621"": 6,
    ""AS197414"": 3,
    ""AS398324"": 3,
    ""AS16509"": 93,
    ""AS132203"": 9,
    ""AS135905"": 3,
    ""AS4837"": 3,
    ""AS208312"": 24,
    ""AS62537"": 3,
    ""AS4847"": 3,
    ""AS49434"": 6,
    ""AS29551"": 24,
    ""AS204428"": 6,
    ""AS208091"": 9,
    ""AS208046"": 9,
    ""AS397651"": 6,
    ""AS56040"": 6,
    ""AS4766"": 3,
    ""AS8369"": 3,
    ""AS396073"": 3,
    ""AS267784"": 6
  },
  ""isp"": {
    ""DigitalOcean, LLC"": 48,
    ""Shenzhen Tencent Computer Systems Company Limited"": 9,
    ""Akamai Technologies, Inc."": 3,
    ""DataCamp Limited"": 3,
    ""Google LLC"": 36,
    ""Chinanet"": 15,
    ""Chang Way Technologies Co. Limited"": 15,
    ""Kctv Jeju Broadcasting"": 12,
    ""Flyservers S.A."": 9,
    ""Consolidated Communications, Inc."": 6,
    ""Zayo Bandwidth"": 6,
    ""Fast Telecommunications Company W.L.L."": 6,
    ""Alibaba (US) Technology Co., Ltd."": 3,
    ""China Unicom CncNet"": 3,
    ""Xhost Internet Solutions LP"": 12,
    ""Censys, Inc."": 3,
    ""Amazon Technologies Inc."": 93,
    ""INET"": 3,
    ""China Unicom CHINA169 Network"": 3,
    ""Red Byte LLC"": 24,
    ""Sauce Labs Inc"": 3,
    ""China Networks Inter-Exchange"": 3,
    ""Datacenter location PAR1 France"": 6,
    ""NOC EMAIL: noc@one-host.net"": 24,
    ""SS-Net"": 6,
    ""Aceville Pte.ltd"": 6,
    ""ColocationX Ltd."": 9,
    ""RCI Broadband"": 6,
    ""China Mobile Communications Corporation"": 6,
    ""Korea Telecom"": 3,
    ""Intersvyaz-2 JSC"": 3,
    ""China Unicom Shanghai Province Network"": 3,
    ""Majestic Hosting Solutions, LLC"": 3
  },
  ""org"": {
    ""DigitalOcean, LLC"": 48,
    ""Tencent cloud computing (Beijing) Co., Ltd."": 6,
    ""Linode"": 3,
    ""CDN77 - Frankfurt POP"": 3,
    ""Palo Alto Networks, Inc"": 36,
    ""Chinanet JS"": 15,
    ""Chang Way Technologies Co. Limited"": 39,
    ""Cablenet"": 12,
    ""Alviva Holding Limited"": 3,
    ""Consolidated Communications, Inc."": 6,
    ""Microsoft Corporation"": 6,
    ""Fasttelco"": 6,
    ""Alibaba.com LLC"": 3,
    ""Unknown"": 15,
    ""Xhostis"": 9,
    ""Censys, Inc"": 3,
    ""AWS EC2 (ap-south-1)"": 93,
    ""Tencent Cloud Computing"": 3,
    ""iNET Media Company Limited"": 3,
    ""China United Network Communications Corporation Limited"": 3,
    ""Sauce Labs Inc"": 3,
    ""Chinanet BJ"": 3,
    ""ThinkTech Technology Industrial CO. Limited"": 30,
    ""4Media Ltd"": 6,
    ""Xhost Internet Solutions"": 3,
    ""Makut Investments"": 9,
    ""10x Servers"": 6,
    ""China Mobile Communications Corporation"": 6,
    ""Kornet"": 3,
    ""Majestic Hosting Solutions, LLC"": 3,
    ""UAB Host Baltic"": 6
  },
  ""regionName"": {
    ""England"": 12,
    ""Guangdong"": 12,
    ""New Jersey"": 12,
    ""California"": 57,
    ""Hesse"": 30,
    ""Jiangsu"": 15,
    ""Moscow"": 39,
    ""Jeju-do"": 12,
    ""North Holland"": 15,
    ""Texas"": 9,
    ""Virginia"": 21,
    ""Hawalli"": 6,
    ""North West"": 9,
    ""Shanghai"": 6,
    ""Michigan"": 3,
    ""Maharashtra"": 93,
    ""Hanoi"": 3,
    ""Beijing"": 6,
    ""South West"": 9,
    ""\u00cele-de-France"": 6,
    ""Sofia-Capital"": 6,
    ""Incheon"": 3,
    ""Chelyabinsk Oblast"": 3,
    ""Vilnius"": 6
  },
  ""country"": {
    ""United Kingdom"": 12,
    ""China"": 39,
    ""United States"": 102,
    ""Germany"": 30,
    ""Russia"": 42,
    ""South Korea"": 15,
    ""The Netherlands"": 15,
    ""Kuwait"": 6,
    ""Singapore"": 18,
    ""India"": 93,
    ""Vietnam"": 3,
    ""France"": 6,
    ""Bulgaria"": 6,
    ""Lithuania"": 6
  },
  ""account"": {
    ""hello"": 192,
    ""aob65qyk"": 12,
    ""beio"": 3,
    ""Test"": 72,
    ""DVtWTQuEs"": 3,
    ""qtSpjA"": 3,
    ""fefbEZ"": 3,
    ""Domain"": 48,
    ""Administr"": 15,
    ""Almaz"": 3,
    ""(empty)"": 12,
    ""RJAjHzBMo"": 3,
    ""TKvqTu"": 3,
    ""vqXuXS"": 3,
    ""hEYZEaLtn"": 3,
    ""KHYOLg"": 3,
    ""jVMSpF"": 3,
    ""uLkQJZIUg"": 3,
    ""GSBkhL"": 3,
    ""wgrlAu"": 3
  },
  ""keyboard"": {
    ""Unknown"": 393
  },
  ""client_build"": {
    ""Unknown"": 393
  },
  ""client_name"": {
    ""Unknown"": 393
  },
  ""ip_type"": {
    ""hosting"": 225,
    ""Unknown"": 114,
    ""hosting & proxy"": 3,
    ""proxy"": 45,
    ""mobile"": 6
  }
}"
5yi03rHM,2024-07-03_stats.json,rdp_snitch,JSON,Wednesday 3rd of July 2024 07:16:07 PM CDT,"{
  ""ip"": {
    ""138.68.142.176"": 8,
    ""115.159.95.143"": 4,
    ""143.198.165.19"": 8,
    ""45.79.92.226"": 2,
    ""164.92.104.215"": 10,
    ""195.181.174.229"": 2,
    ""205.210.31.80"": 6,
    ""58.218.199.219"": 10,
    ""62.122.184.12"": 6,
    ""27.100.181.174"": 8,
    ""141.98.9.34"": 2,
    ""135.26.109.26"": 4,
    ""64.124.50.139"": 4,
    ""62.215.34.181"": 4,
    ""47.245.104.230"": 2,
    ""220.248.76.186"": 2,
    ""185.170.144.3"": 2,
    ""167.94.138.47"": 2,
    ""3.109.154.2"": 62,
    ""43.157.40.109"": 2,
    ""202.92.7.165"": 2,
    ""116.140.196.215"": 2,
    ""157.245.154.167"": 6,
    ""213.109.202.252"": 16,
    ""205.210.31.175"": 6,
    ""66.85.48.8"": 2,
    ""106.38.113.226"": 2,
    ""91.238.181.24"": 4,
    ""88.214.25.61"": 12,
    ""212.70.149.146"": 4,
    ""43.134.186.29"": 4,
    ""88.214.25.64"": 4,
    ""198.235.24.206"": 6,
    ""87.251.75.64"": 2,
    ""185.196.220.41"": 6,
    ""162.210.245.77"": 4,
    ""36.140.36.238"": 4,
    ""220.87.64.161"": 2,
    ""185.73.125.22"": 4,
    ""109.191.92.75"": 2,
    ""194.26.135.155"": 4,
    ""223.166.31.100"": 2,
    ""198.135.49.131"": 2,
    ""45.227.254.54"": 4,
    ""205.210.31.170"": 6
  },
  ""asn"": {
    ""AS14061"": 32,
    ""AS45090"": 4,
    ""AS63949"": 2,
    ""AS60068"": 2,
    ""AS396982"": 24,
    ""AS4134"": 10,
    ""AS57523"": 10,
    ""AS9946"": 8,
    ""AS209588"": 2,
    ""AS6300"": 4,
    ""AS6461"": 4,
    ""AS21050"": 4,
    ""AS45102"": 2,
    ""AS17621"": 4,
    ""AS197414"": 2,
    ""AS398324"": 2,
    ""AS16509"": 62,
    ""AS132203"": 6,
    ""AS135905"": 2,
    ""AS4837"": 2,
    ""AS208312"": 16,
    ""AS62537"": 2,
    ""AS4847"": 2,
    ""AS49434"": 4,
    ""AS29551"": 16,
    ""AS204428"": 4,
    ""AS208091"": 6,
    ""AS208046"": 6,
    ""AS397651"": 4,
    ""AS56040"": 4,
    ""AS4766"": 2,
    ""AS8369"": 2,
    ""AS396073"": 2,
    ""AS267784"": 4
  },
  ""isp"": {
    ""DigitalOcean, LLC"": 32,
    ""Shenzhen Tencent Computer Systems Company Limited"": 6,
    ""Akamai Technologies, Inc."": 2,
    ""DataCamp Limited"": 2,
    ""Google LLC"": 24,
    ""Chinanet"": 10,
    ""Chang Way Technologies Co. Limited"": 10,
    ""Kctv Jeju Broadcasting"": 8,
    ""Flyservers S.A."": 6,
    ""Consolidated Communications, Inc."": 4,
    ""Zayo Bandwidth"": 4,
    ""Fast Telecommunications Company W.L.L."": 4,
    ""Alibaba (US) Technology Co., Ltd."": 2,
    ""China Unicom CncNet"": 2,
    ""Xhost Internet Solutions LP"": 8,
    ""Censys, Inc."": 2,
    ""Amazon Technologies Inc."": 62,
    ""INET"": 2,
    ""China Unicom CHINA169 Network"": 2,
    ""Red Byte LLC"": 16,
    ""Sauce Labs Inc"": 2,
    ""China Networks Inter-Exchange"": 2,
    ""Datacenter location PAR1 France"": 4,
    ""NOC EMAIL: noc@one-host.net"": 16,
    ""SS-Net"": 4,
    ""Aceville Pte.ltd"": 4,
    ""ColocationX Ltd."": 6,
    ""RCI Broadband"": 4,
    ""China Mobile Communications Corporation"": 4,
    ""Korea Telecom"": 2,
    ""Intersvyaz-2 JSC"": 2,
    ""China Unicom Shanghai Province Network"": 2,
    ""Majestic Hosting Solutions, LLC"": 2
  },
  ""org"": {
    ""DigitalOcean, LLC"": 32,
    ""Tencent cloud computing (Beijing) Co., Ltd."": 4,
    ""Linode"": 2,
    ""CDN77 - Frankfurt POP"": 2,
    ""Palo Alto Networks, Inc"": 24,
    ""Chinanet JS"": 10,
    ""Chang Way Technologies Co. Limited"": 26,
    ""Cablenet"": 8,
    ""Alviva Holding Limited"": 2,
    ""Consolidated Communications, Inc."": 4,
    ""Microsoft Corporation"": 4,
    ""Fasttelco"": 4,
    ""Alibaba.com LLC"": 2,
    ""Unknown"": 10,
    ""Xhostis"": 6,
    ""Censys, Inc"": 2,
    ""AWS EC2 (ap-south-1)"": 62,
    ""Tencent Cloud Computing"": 2,
    ""iNET Media Company Limited"": 2,
    ""China United Network Communications Corporation Limited"": 2,
    ""Sauce Labs Inc"": 2,
    ""Chinanet BJ"": 2,
    ""ThinkTech Technology Industrial CO. Limited"": 20,
    ""4Media Ltd"": 4,
    ""Xhost Internet Solutions"": 2,
    ""Makut Investments"": 6,
    ""10x Servers"": 4,
    ""China Mobile Communications Corporation"": 4,
    ""Kornet"": 2,
    ""Majestic Hosting Solutions, LLC"": 2,
    ""UAB Host Baltic"": 4
  },
  ""regionName"": {
    ""England"": 8,
    ""Guangdong"": 8,
    ""New Jersey"": 8,
    ""California"": 38,
    ""Hesse"": 20,
    ""Jiangsu"": 10,
    ""Moscow"": 26,
    ""Jeju-do"": 8,
    ""North Holland"": 10,
    ""Texas"": 6,
    ""Virginia"": 14,
    ""Hawalli"": 4,
    ""North West"": 6,
    ""Shanghai"": 4,
    ""Michigan"": 2,
    ""Maharashtra"": 62,
    ""Hanoi"": 2,
    ""Beijing"": 4,
    ""South West"": 6,
    ""\u00cele-de-France"": 4,
    ""Sofia-Capital"": 4,
    ""Incheon"": 2,
    ""Chelyabinsk Oblast"": 2,
    ""Vilnius"": 4
  },
  ""country"": {
    ""United Kingdom"": 8,
    ""China"": 26,
    ""United States"": 68,
    ""Germany"": 20,
    ""Russia"": 28,
    ""South Korea"": 10,
    ""The Netherlands"": 10,
    ""Kuwait"": 4,
    ""Singapore"": 12,
    ""India"": 62,
    ""Vietnam"": 2,
    ""France"": 4,
    ""Bulgaria"": 4,
    ""Lithuania"": 4
  },
  ""account"": {
    ""hello"": 128,
    ""aob65qyk"": 8,
    ""beio"": 2,
    ""Test"": 48,
    ""DVtWTQuEs"": 2,
    ""qtSpjA"": 2,
    ""fefbEZ"": 2,
    ""Domain"": 32,
    ""Administr"": 10,
    ""Almaz"": 2,
    ""(empty)"": 8,
    ""RJAjHzBMo"": 2,
    ""TKvqTu"": 2,
    ""vqXuXS"": 2,
    ""hEYZEaLtn"": 2,
    ""KHYOLg"": 2,
    ""jVMSpF"": 2,
    ""uLkQJZIUg"": 2,
    ""GSBkhL"": 2,
    ""wgrlAu"": 2
  },
  ""keyboard"": {
    ""Unknown"": 262
  },
  ""client_build"": {
    ""Unknown"": 262
  },
  ""client_name"": {
    ""Unknown"": 262
  },
  ""ip_type"": {
    ""hosting"": 150,
    ""Unknown"": 76,
    ""hosting & proxy"": 2,
    ""proxy"": 30,
    ""mobile"": 4
  }
}"
NkLKP00e,fixmycode-2,7f,Python,Wednesday 3rd of July 2024 07:15:47 PM CDT,"#Create campname procedure to print the camp name
def holiday_camp ():
    print(""Tane's School Holiday Camp"")

#Print the camp name at the start
holiday_camp()

camp_activities = [""Cultural immersion - Easy - $800 - 5 days"",
                   ""Kayaking and pancakes - Moderate - $400 - 3 days"",
                   ""Mountain biking - Difficult - $900 - 4 days""]

activity_number = 0
while activity_number < 3 :
    print(activity_number, camp_activities[activity_number])
    activity_number = activity_number + 1

#Ask name and make sure it is not left blank
name = """"
while name == """":
    name = input(""What is your name? "")
    if name == """":
        print(""Please enter your name - You cannot leave it blank."")
        print("""")

#Ask age and make sure it is not older than a camper can be
age = 99
while age < 5 or age > 17 :
    if age != 99:
        print("""")
        print(""Your age must be between 5 and 17 to attend the camp. Please enter a valid age"")
    age = int(input(""How old are you? ""))
    
#Check if age is between 12 and 16 to ask leader question
while age > 12 and age < 16:
    leader_question = input(""You are eligible to be the camp leader. Do you want to be the camp leader? "").lower()
    if leader_question == ""yes"" or leader_question == ""y"":
        print(""You are now the camp leader."")
        break
    elif leader_question == ""no"" or leader_question == ""n"":
        print(""Someone else will be chosen to be the camp leader."")
        break
    else:
        print(""Sorry, i was looking for a yes/y or no/n answer."")

#Ask what activity to attend
activity_number = input(""What camp number to do want to attend? "")
if activity_number == ""0"":
    print(""You have chosen to attend the Cultural Immersion camp."")
elif activity_number == ""1"":
    print(""You have chosen to attend the Kayaking and Pancakes camp."")
elif activity_number == ""2"":
    print(""You have chosen to attend the Mountain Biking camp."")
else:
    print(""You must choose to attend a camp - you cannot leave this blank"")

#Ask what meal to eat at the camp
camp_meal = input(""What meal selection would you like? Standard, vegeterian or vegan "")
if camp_meal == ""Standard"" or camp_meal == ""standard"":
    print(""You will eat the standard meals at your camp"")
elif camp_meal == ""Vegeterian"" or ""vegeterian"":
    print(""You will eat the vegeterian meals at your camp"")
elif camp_meal == ""Vegan"" or ""vegan"":
    print(""You will eat the vegan meals at your camp"")
else:
    print(""You must choose a meal to eat while attending your camp - you cannot leave this blank "")

shuttle_bus = input(""Do you need to take the shuttle bus to your camp? - extra $80 "")
if shuttle_bus == ""yes"" or shuttle_bus == ""y"":
    print(""You will take the next shuttle bus to your camp"")
elif shuttle_bus == ""no"" or shuttle_bus == ""n"":
    print(""The next shuttle bus will leave without you"")
else:
    print(""You must decide - you cannot leave this blank"")
    
print(f""hello {name} you are {age} and you have chosen {activity_number}"")
"
u5y5hxdx,2024-07-03_stats.json,rdp_snitch,JSON,Wednesday 3rd of July 2024 07:15:09 PM CDT,"{
  ""ip"": {
    ""138.68.142.176"": 4,
    ""115.159.95.143"": 2,
    ""143.198.165.19"": 4,
    ""45.79.92.226"": 1,
    ""164.92.104.215"": 5,
    ""195.181.174.229"": 1,
    ""205.210.31.80"": 3,
    ""58.218.199.219"": 5,
    ""62.122.184.12"": 3,
    ""27.100.181.174"": 4,
    ""141.98.9.34"": 1,
    ""135.26.109.26"": 2,
    ""64.124.50.139"": 2,
    ""62.215.34.181"": 2,
    ""47.245.104.230"": 1,
    ""220.248.76.186"": 1,
    ""185.170.144.3"": 1,
    ""167.94.138.47"": 1,
    ""3.109.154.2"": 31,
    ""43.157.40.109"": 1,
    ""202.92.7.165"": 1,
    ""116.140.196.215"": 1,
    ""157.245.154.167"": 3,
    ""213.109.202.252"": 8,
    ""205.210.31.175"": 3,
    ""66.85.48.8"": 1,
    ""106.38.113.226"": 1,
    ""91.238.181.24"": 2,
    ""88.214.25.61"": 6,
    ""212.70.149.146"": 2,
    ""43.134.186.29"": 2,
    ""88.214.25.64"": 2,
    ""198.235.24.206"": 3,
    ""87.251.75.64"": 1,
    ""185.196.220.41"": 3,
    ""162.210.245.77"": 2,
    ""36.140.36.238"": 2,
    ""220.87.64.161"": 1,
    ""185.73.125.22"": 2,
    ""109.191.92.75"": 1,
    ""194.26.135.155"": 2,
    ""223.166.31.100"": 1,
    ""198.135.49.131"": 1,
    ""45.227.254.54"": 2,
    ""205.210.31.170"": 3
  },
  ""asn"": {
    ""AS14061"": 16,
    ""AS45090"": 2,
    ""AS63949"": 1,
    ""AS60068"": 1,
    ""AS396982"": 12,
    ""AS4134"": 5,
    ""AS57523"": 5,
    ""AS9946"": 4,
    ""AS209588"": 1,
    ""AS6300"": 2,
    ""AS6461"": 2,
    ""AS21050"": 2,
    ""AS45102"": 1,
    ""AS17621"": 2,
    ""AS197414"": 1,
    ""AS398324"": 1,
    ""AS16509"": 31,
    ""AS132203"": 3,
    ""AS135905"": 1,
    ""AS4837"": 1,
    ""AS208312"": 8,
    ""AS62537"": 1,
    ""AS4847"": 1,
    ""AS49434"": 2,
    ""AS29551"": 8,
    ""AS204428"": 2,
    ""AS208091"": 3,
    ""AS208046"": 3,
    ""AS397651"": 2,
    ""AS56040"": 2,
    ""AS4766"": 1,
    ""AS8369"": 1,
    ""AS396073"": 1,
    ""AS267784"": 2
  },
  ""isp"": {
    ""DigitalOcean, LLC"": 16,
    ""Shenzhen Tencent Computer Systems Company Limited"": 3,
    ""Akamai Technologies, Inc."": 1,
    ""DataCamp Limited"": 1,
    ""Google LLC"": 12,
    ""Chinanet"": 5,
    ""Chang Way Technologies Co. Limited"": 5,
    ""Kctv Jeju Broadcasting"": 4,
    ""Flyservers S.A."": 3,
    ""Consolidated Communications, Inc."": 2,
    ""Zayo Bandwidth"": 2,
    ""Fast Telecommunications Company W.L.L."": 2,
    ""Alibaba (US) Technology Co., Ltd."": 1,
    ""China Unicom CncNet"": 1,
    ""Xhost Internet Solutions LP"": 4,
    ""Censys, Inc."": 1,
    ""Amazon Technologies Inc."": 31,
    ""INET"": 1,
    ""China Unicom CHINA169 Network"": 1,
    ""Red Byte LLC"": 8,
    ""Sauce Labs Inc"": 1,
    ""China Networks Inter-Exchange"": 1,
    ""Datacenter location PAR1 France"": 2,
    ""NOC EMAIL: noc@one-host.net"": 8,
    ""SS-Net"": 2,
    ""Aceville Pte.ltd"": 2,
    ""ColocationX Ltd."": 3,
    ""RCI Broadband"": 2,
    ""China Mobile Communications Corporation"": 2,
    ""Korea Telecom"": 1,
    ""Intersvyaz-2 JSC"": 1,
    ""China Unicom Shanghai Province Network"": 1,
    ""Majestic Hosting Solutions, LLC"": 1
  },
  ""org"": {
    ""DigitalOcean, LLC"": 16,
    ""Tencent cloud computing (Beijing) Co., Ltd."": 2,
    ""Linode"": 1,
    ""CDN77 - Frankfurt POP"": 1,
    ""Palo Alto Networks, Inc"": 12,
    ""Chinanet JS"": 5,
    ""Chang Way Technologies Co. Limited"": 13,
    ""Cablenet"": 4,
    ""Alviva Holding Limited"": 1,
    ""Consolidated Communications, Inc."": 2,
    ""Microsoft Corporation"": 2,
    ""Fasttelco"": 2,
    ""Alibaba.com LLC"": 1,
    ""Unknown"": 5,
    ""Xhostis"": 3,
    ""Censys, Inc"": 1,
    ""AWS EC2 (ap-south-1)"": 31,
    ""Tencent Cloud Computing"": 1,
    ""iNET Media Company Limited"": 1,
    ""China United Network Communications Corporation Limited"": 1,
    ""Sauce Labs Inc"": 1,
    ""Chinanet BJ"": 1,
    ""ThinkTech Technology Industrial CO. Limited"": 10,
    ""4Media Ltd"": 2,
    ""Xhost Internet Solutions"": 1,
    ""Makut Investments"": 3,
    ""10x Servers"": 2,
    ""China Mobile Communications Corporation"": 2,
    ""Kornet"": 1,
    ""Majestic Hosting Solutions, LLC"": 1,
    ""UAB Host Baltic"": 2
  },
  ""regionName"": {
    ""England"": 4,
    ""Guangdong"": 4,
    ""New Jersey"": 4,
    ""California"": 19,
    ""Hesse"": 10,
    ""Jiangsu"": 5,
    ""Moscow"": 13,
    ""Jeju-do"": 4,
    ""North Holland"": 5,
    ""Texas"": 3,
    ""Virginia"": 7,
    ""Hawalli"": 2,
    ""North West"": 3,
    ""Shanghai"": 2,
    ""Michigan"": 1,
    ""Maharashtra"": 31,
    ""Hanoi"": 1,
    ""Beijing"": 2,
    ""South West"": 3,
    ""\u00cele-de-France"": 2,
    ""Sofia-Capital"": 2,
    ""Incheon"": 1,
    ""Chelyabinsk Oblast"": 1,
    ""Vilnius"": 2
  },
  ""country"": {
    ""United Kingdom"": 4,
    ""China"": 13,
    ""United States"": 34,
    ""Germany"": 10,
    ""Russia"": 14,
    ""South Korea"": 5,
    ""The Netherlands"": 5,
    ""Kuwait"": 2,
    ""Singapore"": 6,
    ""India"": 31,
    ""Vietnam"": 1,
    ""France"": 2,
    ""Bulgaria"": 2,
    ""Lithuania"": 2
  },
  ""account"": {
    ""hello"": 64,
    ""aob65qyk"": 4,
    ""beio"": 1,
    ""Test"": 24,
    ""DVtWTQuEs"": 1,
    ""qtSpjA"": 1,
    ""fefbEZ"": 1,
    ""Domain"": 16,
    ""Administr"": 5,
    ""Almaz"": 1,
    ""(empty)"": 4,
    ""RJAjHzBMo"": 1,
    ""TKvqTu"": 1,
    ""vqXuXS"": 1,
    ""hEYZEaLtn"": 1,
    ""KHYOLg"": 1,
    ""jVMSpF"": 1,
    ""uLkQJZIUg"": 1,
    ""GSBkhL"": 1,
    ""wgrlAu"": 1
  },
  ""keyboard"": {
    ""Unknown"": 131
  },
  ""client_build"": {
    ""Unknown"": 131
  },
  ""client_name"": {
    ""Unknown"": 131
  },
  ""ip_type"": {
    ""hosting"": 75,
    ""Unknown"": 38,
    ""hosting & proxy"": 1,
    ""proxy"": 15,
    ""mobile"": 2
  }
}"
qntKD5j3,Food Stock 3,Sungmingamerpro13,CSS,Wednesday 3rd of July 2024 06:51:10 PM CDT,"local CashGui = script.Parent.CashGui

local Number = 100
local MaxNumber = 30

CashGui.CashFrame.stockLabel.Text = ""STOCK: ""..MaxNumber

script.Parent.ClickDetector.MouseClick:Connect(function(player)
	
	if not player.Backpack:FindFirstChild(""Cookie"") then
		if player.Coins.Value >= Number then
			player.Coins.Value = player.Coins.Value - Number

			game.ServerStorage.Foods.Cookie:Clone().Parent = player.Backpack
			MaxNumber = MaxNumber - 1

			CashGui.CashFrame.stockLabel.Text = ""STOCK: ""..MaxNumber
		end
	else
		if player.Coins.Value >= Number then
			player.Coins.Value = player.Coins.Value - Number

			player.Backpack:FindFirstChild(""Cookie"").stacks.Value += 1
			MaxNumber = MaxNumber - 1

			CashGui.CashFrame.stockLabel.Text = ""STOCK: ""..MaxNumber
		end
	end
	
	while wait() do
		if MaxNumber == 0 then
			script.Parent.ClickDetector.MaxActivationDistance = 0
			CashGui.CashFrame.stockLabel.Text = ""STOCK: ""..MaxNumber
			wait(1)
			break
		end
	end
	
end)



script.Parent.ClickDetector.MouseHoverEnter:Connect(function()
	script.Parent.SelectionBox.Visible = true
	CashGui.Enabled = true
end)

script.Parent.ClickDetector.MouseHoverLeave:Connect(function()
	script.Parent.SelectionBox.Visible = false
	CashGui.Enabled = false
end)
"
vD4GzuJe,TFD - /static/tfd/meta/en/reward.json,Kamiikaze,JSON,Wednesday 3rd of July 2024 05:58:49 PM CDT,"[{
    ""map_id"": ""610001001"",
    ""map_name"": ""Albion"",
    ""battle_zone"": []
}, {
    ""map_id"": ""610002000"",
    ""map_name"": ""Outskirts of Kingston"",
    ""battle_zone"": []
}, {
    ""map_id"": ""610002001"",
    ""map_name"": ""Vespers"",
    ""battle_zone"": [{
        ""battle_zone_id"": ""401"",
        ""battle_zone_name"": ""The Lumber Yard"",
        ""reward"": [{
            ""rotation"": 1,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Electric"",
            ""weapon_rounds_type"": ""Impact Rounds"",
            ""arche_type"": ""Dimension""
        }, {
            ""rotation"": 2,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Chill"",
            ""weapon_rounds_type"": ""High-Power Rounds"",
            ""arche_type"": ""Tech""
        }, {
            ""rotation"": 3,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Non-Attribute"",
            ""weapon_rounds_type"": ""High-Power Rounds"",
            ""arche_type"": ""Fusion""
        }, {
            ""rotation"": 4,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Fire"",
            ""weapon_rounds_type"": ""Special Rounds"",
            ""arche_type"": ""Singular""
        }, {
            ""rotation"": 5,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Fire"",
            ""weapon_rounds_type"": ""Impact Rounds"",
            ""arche_type"": ""Dimension""
        }, {
            ""rotation"": 6,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Chill"",
            ""weapon_rounds_type"": ""High-Power Rounds"",
            ""arche_type"": ""Fusion""
        }, {
            ""rotation"": 7,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Non-Attribute"",
            ""weapon_rounds_type"": ""Impact Rounds"",
            ""arche_type"": ""Singular""
        }, {
            ""rotation"": 8,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Toxic"",
            ""weapon_rounds_type"": ""Special Rounds"",
            ""arche_type"": ""Tech""
        }, {
            ""rotation"": 9,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Fire"",
            ""weapon_rounds_type"": ""High-Power Rounds"",
            ""arche_type"": ""Singular""
        }, {
            ""rotation"": 10,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Fire"",
            ""weapon_rounds_type"": ""High-Power Rounds"",
            ""arche_type"": ""Fusion""
        }, {
            ""rotation"": 11,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Non-Attribute"",
            ""weapon_rounds_type"": ""High-Power Rounds"",
            ""arche_type"": ""Tech""
        }, {
            ""rotation"": 12,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Electric"",
            ""weapon_rounds_type"": ""General Rounds"",
            ""arche_type"": ""Fusion""
        }, {
            ""rotation"": 13,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Chill"",
            ""weapon_rounds_type"": ""Special Rounds"",
            ""arche_type"": ""Singular""
        }, {
            ""rotation"": 14,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Electric"",
            ""weapon_rounds_type"": ""High-Power Rounds"",
            ""arche_type"": ""Fusion""
        }, {
            ""rotation"": 15,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Fire"",
            ""weapon_rounds_type"": ""High-Power Rounds"",
            ""arche_type"": ""Dimension""
        }, {
            ""rotation"": 16,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Electric"",
            ""weapon_rounds_type"": ""Special Rounds"",
            ""arche_type"": ""Dimension""
        }, {
            ""rotation"": 17,
            ""reward_type"": ""Auxiliary Power"",
            ""reactor_element_type"": null,
            ""weapon_rounds_type"": null,
            ""arche_type"": null
        }, {
            ""rotation"": 18,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Fire"",
            ""weapon_rounds_type"": ""General Rounds"",
            ""arche_type"": ""Singular""
        }, {
            ""rotation"": 19,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Fire"",
            ""weapon_rounds_type"": ""Impact Rounds"",
            ""arche_type"": ""Tech""
        }, {
            ""rotation"": 20,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Electric"",
            ""weapon_rounds_type"": ""General Rounds"",
            ""arche_type"": ""Singular""
        }]
    }, {
        ""battle_zone_id"": ""402"",
        ""battle_zone_name"": ""The Ruins"",
        ""reward"": [{
            ""rotation"": 1,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Fire"",
            ""weapon_rounds_type"": ""Special Rounds"",
            ""arche_type"": ""Fusion""
        }, {
            ""rotation"": 2,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Non-Attribute"",
            ""weapon_rounds_type"": ""General Rounds"",
            ""arche_type"": ""Fusion""
        }, {
            ""rotation"": 3,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Chill"",
            ""weapon_rounds_type"": ""High-Power Rounds"",
            ""arche_type"": ""Fusion""
        }, {
            ""rotation"": 4,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Toxic"",
            ""weapon_rounds_type"": ""General Rounds"",
            ""arche_type"": ""Tech""
        }, {
            ""rotation"": 5,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Toxic"",
            ""weapon_rounds_type"": ""High-Power Rounds"",
            ""arche_type"": ""Tech""
        }, {
            ""rotation"": 6,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Electric"",
            ""weapon_rounds_type"": ""General Rounds"",
            ""arche_type"": ""Dimension""
        }, {
            ""rotation"": 7,
            ""reward_type"": ""Auxiliary Power"",
            ""reactor_element_type"": null,
            ""weapon_rounds_type"": null,
            ""arche_type"": null
        }, {
            ""rotation"": 8,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Non-Attribute"",
            ""weapon_rounds_type"": ""High-Power Rounds"",
            ""arche_type"": ""Dimension""
        }, {
            ""rotation"": 9,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Electric"",
            ""weapon_rounds_type"": ""General Rounds"",
            ""arche_type"": ""Singular""
        }, {
            ""rotation"": 10,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Electric"",
            ""weapon_rounds_type"": ""Special Rounds"",
            ""arche_type"": ""Singular""
        }, {
            ""rotation"": 11,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Non-Attribute"",
            ""weapon_rounds_type"": ""Special Rounds"",
            ""arche_type"": ""Fusion""
        }, {
            ""rotation"": 12,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Electric"",
            ""weapon_rounds_type"": ""Impact Rounds"",
            ""arche_type"": ""Fusion""
        }, {
            ""rotation"": 13,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Fire"",
            ""weapon_rounds_type"": ""Special Rounds"",
            ""arche_type"": ""Singular""
        }, {
            ""rotation"": 14,
            ""reward_type"": ""Memory"",
            ""reactor_element_type"": null,
            ""weapon_rounds_type"": null,
            ""arche_type"": null
        }, {
            ""rotation"": 15,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Non-Attribute"",
            ""weapon_rounds_type"": ""General Rounds"",
            ""arche_type"": ""Dimension""
        }, {
            ""rotation"": 16,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Non-Attribute"",
            ""weapon_rounds_type"": ""Special Rounds"",
            ""arche_type"": ""Tech""
        }, {
            ""rotation"": 17,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Chill"",
            ""weapon_rounds_type"": ""High-Power Rounds"",
            ""arche_type"": ""Tech""
        }, {
            ""rotation"": 18,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Non-Attribute"",
            ""weapon_rounds_type"": ""Impact Rounds"",
            ""arche_type"": ""Tech""
        }, {
            ""rotation"": 19,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Fire"",
            ""weapon_rounds_type"": ""Impact Rounds"",
            ""arche_type"": ""Fusion""
        }, {
            ""rotation"": 20,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Fire"",
            ""weapon_rounds_type"": ""General Rounds"",
            ""arche_type"": ""Dimension""
        }]
    }, {
        ""battle_zone_id"": ""403"",
        ""battle_zone_name"": ""Lost Supply Depot"",
        ""reward"": [{
            ""rotation"": 1,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Chill"",
            ""weapon_rounds_type"": ""Special Rounds"",
            ""arche_type"": ""Fusion""
        }, {
            ""rotation"": 2,
            ""reward_type"": ""Sensor"",
            ""reactor_element_type"": null,
            ""weapon_rounds_type"": null,
            ""arche_type"": null
        }, {
            ""rotation"": 3,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Electric"",
            ""weapon_rounds_type"": ""High-Power Rounds"",
            ""arche_type"": ""Dimension""
        }, {
            ""rotation"": 4,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Fire"",
            ""weapon_rounds_type"": ""Impact Rounds"",
            ""arche_type"": ""Tech""
        }, {
            ""rotation"": 5,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Chill"",
            ""weapon_rounds_type"": ""General Rounds"",
            ""arche_type"": ""Tech""
        }, {
            ""rotation"": 6,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Fire"",
            ""weapon_rounds_type"": ""Impact Rounds"",
            ""arche_type"": ""Singular""
        }, {
            ""rotation"": 7,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Fire"",
            ""weapon_rounds_type"": ""General Rounds"",
            ""arche_type"": ""Singular""
        }, {
            ""rotation"": 8,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Fire"",
            ""weapon_rounds_type"": ""High-Power Rounds"",
            ""arche_type"": ""Dimension""
        }, {
            ""rotation"": 9,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Toxic"",
            ""weapon_rounds_type"": ""Impact Rounds"",
            ""arche_type"": ""Dimension""
        }, {
            ""rotation"": 10,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Fire"",
            ""weapon_rounds_type"": ""High-Power Rounds"",
            ""arche_type"": ""Singular""
        }, {
            ""rotation"": 11,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Fire"",
            ""weapon_rounds_type"": ""General Rounds"",
            ""arche_type"": ""Fusion""
        }, {
            ""rotation"": 12,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Non-Attribute"",
            ""weapon_rounds_type"": ""Special Rounds"",
            ""arche_type"": ""Dimension""
        }, {
            ""rotation"": 13,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Chill"",
            ""weapon_rounds_type"": ""General Rounds"",
            ""arche_type"": ""Fusion""
        }, {
            ""rotation"": 14,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Fire"",
            ""weapon_rounds_type"": ""Special Rounds"",
            ""arche_type"": ""Dimension""
        }, {
            ""rotation"": 15,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Toxic"",
            ""weapon_rounds_type"": ""High-Power Rounds"",
            ""arche_type"": ""Dimension""
        }, {
            ""rotation"": 16,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Chill"",
            ""weapon_rounds_type"": ""Impact Rounds"",
            ""arche_type"": ""Singular""
        }, {
            ""rotation"": 17,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Non-Attribute"",
            ""weapon_rounds_type"": ""Special Rounds"",
            ""arche_type"": ""Fusion""
        }, {
            ""rotation"": 18,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Non-Attribute"",
            ""weapon_rounds_type"": ""High-Power Rounds"",
            ""arche_type"": ""Tech""
        }, {
            ""rotation"": 19,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Fire"",
            ""weapon_rounds_type"": ""Special Rounds"",
            ""arche_type"": ""Tech""
        }, {
            ""rotation"": 20,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Non-Attribute"",
            ""weapon_rounds_type"": ""Impact Rounds"",
            ""arche_type"": ""Dimension""
        }]
    }, {
        ""battle_zone_id"": ""404"",
        ""battle_zone_name"": ""Moonlight Lake"",
        ""reward"": [{
            ""rotation"": 1,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Fire"",
            ""weapon_rounds_type"": ""High-Power Rounds"",
            ""arche_type"": ""Singular""
        }, {
            ""rotation"": 2,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Non-Attribute"",
            ""weapon_rounds_type"": ""Impact Rounds"",
            ""arche_type"": ""Tech""
        }, {
            ""rotation"": 3,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Chill"",
            ""weapon_rounds_type"": ""Impact Rounds"",
            ""arche_type"": ""Fusion""
        }, {
            ""rotation"": 4,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Toxic"",
            ""weapon_rounds_type"": ""Impact Rounds"",
            ""arche_type"": ""Tech""
        }, {
            ""rotation"": 5,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Toxic"",
            ""weapon_rounds_type"": ""Special Rounds"",
            ""arche_type"": ""Tech""
        }, {
            ""rotation"": 6,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Chill"",
            ""weapon_rounds_type"": ""General Rounds"",
            ""arche_type"": ""Singular""
        }, {
            ""rotation"": 7,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Non-Attribute"",
            ""weapon_rounds_type"": ""High-Power Rounds"",
            ""arche_type"": ""Singular""
        }, {
            ""rotation"": 8,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Fire"",
            ""weapon_rounds_type"": ""High-Power Rounds"",
            ""arche_type"": ""Fusion""
        }, {
            ""rotation"": 9,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Toxic"",
            ""weapon_rounds_type"": ""General Rounds"",
            ""arche_type"": ""Tech""
        }, {
            ""rotation"": 10,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Fire"",
            ""weapon_rounds_type"": ""Special Rounds"",
            ""arche_type"": ""Fusion""
        }, {
            ""rotation"": 11,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Electric"",
            ""weapon_rounds_type"": ""Impact Rounds"",
            ""arche_type"": ""Dimension""
        }, {
            ""rotation"": 12,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Non-Attribute"",
            ""weapon_rounds_type"": ""General Rounds"",
            ""arche_type"": ""Singular""
        }, {
            ""rotation"": 13,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Non-Attribute"",
            ""weapon_rounds_type"": ""Special Rounds"",
            ""arche_type"": ""Singular""
        }, {
            ""rotation"": 14,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Chill"",
            ""weapon_rounds_type"": ""General Rounds"",
            ""arche_type"": ""Tech""
        }, {
            ""rotation"": 15,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Non-Attribute"",
            ""weapon_rounds_type"": ""Special Rounds"",
            ""arche_type"": ""Dimension""
        }, {
            ""rotation"": 16,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Chill"",
            ""weapon_rounds_type"": ""Special Rounds"",
            ""arche_type"": ""Singular""
        }, {
            ""rotation"": 17,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Fire"",
            ""weapon_rounds_type"": ""General Rounds"",
            ""arche_type"": ""Fusion""
        }, {
            ""rotation"": 18,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Electric"",
            ""weapon_rounds_type"": ""Impact Rounds"",
            ""arche_type"": ""Singular""
        }, {
            ""rotation"": 19,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Chill"",
            ""weapon_rounds_type"": ""High-Power Rounds"",
            ""arche_type"": ""Tech""
        }, {
            ""rotation"": 20,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Non-Attribute"",
            ""weapon_rounds_type"": ""High-Power Rounds"",
            ""arche_type"": ""Tech""
        }]
    }, {
        ""battle_zone_id"": ""405"",
        ""battle_zone_name"": ""Timberfall"",
        ""reward"": [{
            ""rotation"": 1,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Non-Attribute"",
            ""weapon_rounds_type"": ""General Rounds"",
            ""arche_type"": ""Singular""
        }, {
            ""rotation"": 2,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Toxic"",
            ""weapon_rounds_type"": ""General Rounds"",
            ""arche_type"": ""Tech""
        }, {
            ""rotation"": 3,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Electric"",
            ""weapon_rounds_type"": ""Special Rounds"",
            ""arche_type"": ""Singular""
        }, {
            ""rotation"": 4,
            ""reward_type"": ""Processor"",
            ""reactor_element_type"": null,
            ""weapon_rounds_type"": null,
            ""arche_type"": null
        }, {
            ""rotation"": 5,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Non-Attribute"",
            ""weapon_rounds_type"": ""Impact Rounds"",
            ""arche_type"": ""Singular""
        }, {
            ""rotation"": 6,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Non-Attribute"",
            ""weapon_rounds_type"": ""High-Power Rounds"",
            ""arche_type"": ""Fusion""
        }, {
            ""rotation"": 7,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Fire"",
            ""weapon_rounds_type"": ""General Rounds"",
            ""arche_type"": ""Tech""
        }, {
            ""rotation"": 8,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Chill"",
            ""weapon_rounds_type"": ""General Rounds"",
            ""arche_type"": ""Singular""
        }, {
            ""rotation"": 9,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Chill"",
            ""weapon_rounds_type"": ""High-Power Rounds"",
            ""arche_type"": ""Singular""
        }, {
            ""rotation"": 10,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Fire"",
            ""weapon_rounds_type"": ""High-Power Rounds"",
            ""arche_type"": ""Tech""
        }, {
            ""rotation"": 11,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Fire"",
            ""weapon_rounds_type"": ""Impact Rounds"",
            ""arche_type"": ""Singular""
        }, {
            ""rotation"": 12,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Toxic"",
            ""weapon_rounds_type"": ""Impact Rounds"",
            ""arche_type"": ""Dimension""
        }, {
            ""rotation"": 13,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Chill"",
            ""weapon_rounds_type"": ""Special Rounds"",
            ""arche_type"": ""Tech""
        }, {
            ""rotation"": 14,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Non-Attribute"",
            ""weapon_rounds_type"": ""Impact Rounds"",
            ""arche_type"": ""Tech""
        }, {
            ""rotation"": 15,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Non-Attribute"",
            ""weapon_rounds_type"": ""Special Rounds"",
            ""arche_type"": ""Singular""
        }, {
            ""rotation"": 16,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Non-Attribute"",
            ""weapon_rounds_type"": ""High-Power Rounds"",
            ""arche_type"": ""Dimension""
        }, {
            ""rotation"": 17,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Non-Attribute"",
            ""weapon_rounds_type"": ""Special Rounds"",
            ""arche_type"": ""Dimension""
        }, {
            ""rotation"": 18,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Electric"",
            ""weapon_rounds_type"": ""High-Power Rounds"",
            ""arche_type"": ""Dimension""
        }, {
            ""rotation"": 19,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Electric"",
            ""weapon_rounds_type"": ""High-Power Rounds"",
            ""arche_type"": ""Fusion""
        }, {
            ""rotation"": 20,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Toxic"",
            ""weapon_rounds_type"": ""Impact Rounds"",
            ""arche_type"": ""Tech""
        }]
    }]
}, {
    ""map_id"": ""610002002"",
    ""map_name"": ""Kingston"",
    ""battle_zone"": [{
        ""battle_zone_id"": ""301"",
        ""battle_zone_name"": ""The Destruction"",
        ""reward"": [{
            ""rotation"": 1,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Chill"",
            ""weapon_rounds_type"": ""General Rounds"",
            ""arche_type"": ""Singular""
        }, {
            ""rotation"": 2,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Electric"",
            ""weapon_rounds_type"": ""Impact Rounds"",
            ""arche_type"": ""Fusion""
        }, {
            ""rotation"": 3,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Non-Attribute"",
            ""weapon_rounds_type"": ""General Rounds"",
            ""arche_type"": ""Tech""
        }, {
            ""rotation"": 4,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Chill"",
            ""weapon_rounds_type"": ""General Rounds"",
            ""arche_type"": ""Fusion""
        }, {
            ""rotation"": 5,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Fire"",
            ""weapon_rounds_type"": ""Impact Rounds"",
            ""arche_type"": ""Fusion""
        }, {
            ""rotation"": 6,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Electric"",
            ""weapon_rounds_type"": ""General Rounds"",
            ""arche_type"": ""Fusion""
        }, {
            ""rotation"": 7,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Non-Attribute"",
            ""weapon_rounds_type"": ""High-Power Rounds"",
            ""arche_type"": ""Tech""
        }, {
            ""rotation"": 8,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Chill"",
            ""weapon_rounds_type"": ""High-Power Rounds"",
            ""arche_type"": ""Fusion""
        }, {
            ""rotation"": 9,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Non-Attribute"",
            ""weapon_rounds_type"": ""Special Rounds"",
            ""arche_type"": ""Tech""
        }, {
            ""rotation"": 10,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Toxic"",
            ""weapon_rounds_type"": ""General Rounds"",
            ""arche_type"": ""Dimension""
        }, {
            ""rotation"": 11,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Non-Attribute"",
            ""weapon_rounds_type"": ""Impact Rounds"",
            ""arche_type"": ""Singular""
        }, {
            ""rotation"": 12,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Fire"",
            ""weapon_rounds_type"": ""Special Rounds"",
            ""arche_type"": ""Tech""
        }, {
            ""rotation"": 13,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Fire"",
            ""weapon_rounds_type"": ""High-Power Rounds"",
            ""arche_type"": ""Fusion""
        }, {
            ""rotation"": 14,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Chill"",
            ""weapon_rounds_type"": ""High-Power Rounds"",
            ""arche_type"": ""Singular""
        }, {
            ""rotation"": 15,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Chill"",
            ""weapon_rounds_type"": ""Impact Rounds"",
            ""arche_type"": ""Tech""
        }, {
            ""rotation"": 16,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Electric"",
            ""weapon_rounds_type"": ""Impact Rounds"",
            ""arche_type"": ""Singular""
        }, {
            ""rotation"": 17,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Electric"",
            ""weapon_rounds_type"": ""Special Rounds"",
            ""arche_type"": ""Fusion""
        }, {
            ""rotation"": 18,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Non-Attribute"",
            ""weapon_rounds_type"": ""High-Power Rounds"",
            ""arche_type"": ""Dimension""
        }, {
            ""rotation"": 19,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Chill"",
            ""weapon_rounds_type"": ""Special Rounds"",
            ""arche_type"": ""Tech""
        }, {
            ""rotation"": 20,
            ""reward_type"": ""Memory"",
            ""reactor_element_type"": null,
            ""weapon_rounds_type"": null,
            ""arche_type"": null
        }]
    }, {
        ""battle_zone_id"": ""302"",
        ""battle_zone_name"": ""The Fallen Theater"",
        ""reward"": [{
            ""rotation"": 1,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Non-Attribute"",
            ""weapon_rounds_type"": ""Impact Rounds"",
            ""arche_type"": ""Fusion""
        }, {
            ""rotation"": 2,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Fire"",
            ""weapon_rounds_type"": ""General Rounds"",
            ""arche_type"": ""Singular""
        }, {
            ""rotation"": 3,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Chill"",
            ""weapon_rounds_type"": ""Impact Rounds"",
            ""arche_type"": ""Singular""
        }, {
            ""rotation"": 4,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Toxic"",
            ""weapon_rounds_type"": ""Special Rounds"",
            ""arche_type"": ""Dimension""
        }, {
            ""rotation"": 5,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Toxic"",
            ""weapon_rounds_type"": ""Impact Rounds"",
            ""arche_type"": ""Dimension""
        }, {
            ""rotation"": 6,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Toxic"",
            ""weapon_rounds_type"": ""High-Power Rounds"",
            ""arche_type"": ""Dimension""
        }, {
            ""rotation"": 7,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Electric"",
            ""weapon_rounds_type"": ""High-Power Rounds"",
            ""arche_type"": ""Singular""
        }, {
            ""rotation"": 8,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Fire"",
            ""weapon_rounds_type"": ""General Rounds"",
            ""arche_type"": ""Fusion""
        }, {
            ""rotation"": 9,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Fire"",
            ""weapon_rounds_type"": ""General Rounds"",
            ""arche_type"": ""Dimension""
        }, {
            ""rotation"": 10,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Fire"",
            ""weapon_rounds_type"": ""Impact Rounds"",
            ""arche_type"": ""Tech""
        }, {
            ""rotation"": 11,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Electric"",
            ""weapon_rounds_type"": ""High-Power Rounds"",
            ""arche_type"": ""Dimension""
        }, {
            ""rotation"": 12,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Electric"",
            ""weapon_rounds_type"": ""General Rounds"",
            ""arche_type"": ""Dimension""
        }, {
            ""rotation"": 13,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Chill"",
            ""weapon_rounds_type"": ""Impact Rounds"",
            ""arche_type"": ""Fusion""
        }, {
            ""rotation"": 14,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Fire"",
            ""weapon_rounds_type"": ""Special Rounds"",
            ""arche_type"": ""Fusion""
        }, {
            ""rotation"": 15,
            ""reward_type"": ""Sensor"",
            ""reactor_element_type"": null,
            ""weapon_rounds_type"": null,
            ""arche_type"": null
        }, {
            ""rotation"": 16,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Toxic"",
            ""weapon_rounds_type"": ""Special Rounds"",
            ""arche_type"": ""Tech""
        }, {
            ""rotation"": 17,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Electric"",
            ""weapon_rounds_type"": ""Special Rounds"",
            ""arche_type"": ""Singular""
        }, {
            ""rotation"": 18,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Non-Attribute"",
            ""weapon_rounds_type"": ""General Rounds"",
            ""arche_type"": ""Dimension""
        }, {
            ""rotation"": 19,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Chill"",
            ""weapon_rounds_type"": ""High-Power Rounds"",
            ""arche_type"": ""Singular""
        }, {
            ""rotation"": 20,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Fire"",
            ""weapon_rounds_type"": ""Impact Rounds"",
            ""arche_type"": ""Singular""
        }]
    }, {
        ""battle_zone_id"": ""303"",
        ""battle_zone_name"": ""Grand Square"",
        ""reward"": [{
            ""rotation"": 1,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Fire"",
            ""weapon_rounds_type"": ""High-Power Rounds"",
            ""arche_type"": ""Dimension""
        }, {
            ""rotation"": 2,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Fire"",
            ""weapon_rounds_type"": ""Impact Rounds"",
            ""arche_type"": ""Dimension""
        }, {
            ""rotation"": 3,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Fire"",
            ""weapon_rounds_type"": ""Special Rounds"",
            ""arche_type"": ""Fusion""
        }, {
            ""rotation"": 4,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Electric"",
            ""weapon_rounds_type"": ""General Rounds"",
            ""arche_type"": ""Dimension""
        }, {
            ""rotation"": 5,
            ""reward_type"": ""Auxiliary Power"",
            ""reactor_element_type"": null,
            ""weapon_rounds_type"": null,
            ""arche_type"": null
        }, {
            ""rotation"": 6,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Chill"",
            ""weapon_rounds_type"": ""Impact Rounds"",
            ""arche_type"": ""Singular""
        }, {
            ""rotation"": 7,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Non-Attribute"",
            ""weapon_rounds_type"": ""Special Rounds"",
            ""arche_type"": ""Singular""
        }, {
            ""rotation"": 8,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Toxic"",
            ""weapon_rounds_type"": ""General Rounds"",
            ""arche_type"": ""Dimension""
        }, {
            ""rotation"": 9,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Electric"",
            ""weapon_rounds_type"": ""Impact Rounds"",
            ""arche_type"": ""Dimension""
        }, {
            ""rotation"": 10,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Non-Attribute"",
            ""weapon_rounds_type"": ""Impact Rounds"",
            ""arche_type"": ""Tech""
        }, {
            ""rotation"": 11,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Non-Attribute"",
            ""weapon_rounds_type"": ""General Rounds"",
            ""arche_type"": ""Fusion""
        }, {
            ""rotation"": 12,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Electric"",
            ""weapon_rounds_type"": ""Special Rounds"",
            ""arche_type"": ""Singular""
        }, {
            ""rotation"": 13,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Electric"",
            ""weapon_rounds_type"": ""General Rounds"",
            ""arche_type"": ""Singular""
        }, {
            ""rotation"": 14,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Fire"",
            ""weapon_rounds_type"": ""Impact Rounds"",
            ""arche_type"": ""Fusion""
        }, {
            ""rotation"": 15,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Fire"",
            ""weapon_rounds_type"": ""Special Rounds"",
            ""arche_type"": ""Singular""
        }, {
            ""rotation"": 16,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Chill"",
            ""weapon_rounds_type"": ""General Rounds"",
            ""arche_type"": ""Tech""
        }, {
            ""rotation"": 17,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Non-Attribute"",
            ""weapon_rounds_type"": ""Impact Rounds"",
            ""arche_type"": ""Dimension""
        }, {
            ""rotation"": 18,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Chill"",
            ""weapon_rounds_type"": ""High-Power Rounds"",
            ""arche_type"": ""Fusion""
        }, {
            ""rotation"": 19,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Non-Attribute"",
            ""weapon_rounds_type"": ""High-Power Rounds"",
            ""arche_type"": ""Fusion""
        }, {
            ""rotation"": 20,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Chill"",
            ""weapon_rounds_type"": ""Impact Rounds"",
            ""arche_type"": ""Tech""
        }]
    }]
}, {
    ""map_id"": ""610002003"",
    ""map_name"": ""Agna Desert"",
    ""battle_zone"": [{
        ""battle_zone_id"": ""501"",
        ""battle_zone_name"": ""Vermilion Waste"",
        ""reward"": [{
            ""rotation"": 1,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Electric"",
            ""weapon_rounds_type"": ""Special Rounds"",
            ""arche_type"": ""Singular""
        }, {
            ""rotation"": 2,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Chill"",
            ""weapon_rounds_type"": ""High-Power Rounds"",
            ""arche_type"": ""Fusion""
        }, {
            ""rotation"": 3,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Electric"",
            ""weapon_rounds_type"": ""Impact Rounds"",
            ""arche_type"": ""Singular""
        }, {
            ""rotation"": 4,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Chill"",
            ""weapon_rounds_type"": ""High-Power Rounds"",
            ""arche_type"": ""Singular""
        }, {
            ""rotation"": 5,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Electric"",
            ""weapon_rounds_type"": ""Special Rounds"",
            ""arche_type"": ""Fusion""
        }, {
            ""rotation"": 6,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Fire"",
            ""weapon_rounds_type"": ""Special Rounds"",
            ""arche_type"": ""Singular""
        }, {
            ""rotation"": 7,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Toxic"",
            ""weapon_rounds_type"": ""Special Rounds"",
            ""arche_type"": ""Tech""
        }, {
            ""rotation"": 8,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Chill"",
            ""weapon_rounds_type"": ""Special Rounds"",
            ""arche_type"": ""Tech""
        }, {
            ""rotation"": 9,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Electric"",
            ""weapon_rounds_type"": ""High-Power Rounds"",
            ""arche_type"": ""Dimension""
        }, {
            ""rotation"": 10,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Non-Attribute"",
            ""weapon_rounds_type"": ""High-Power Rounds"",
            ""arche_type"": ""Fusion""
        }, {
            ""rotation"": 11,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Chill"",
            ""weapon_rounds_type"": ""Impact Rounds"",
            ""arche_type"": ""Tech""
        }, {
            ""rotation"": 12,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Non-Attribute"",
            ""weapon_rounds_type"": ""Special Rounds"",
            ""arche_type"": ""Tech""
        }, {
            ""rotation"": 13,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Non-Attribute"",
            ""weapon_rounds_type"": ""Impact Rounds"",
            ""arche_type"": ""Fusion""
        }, {
            ""rotation"": 14,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Fire"",
            ""weapon_rounds_type"": ""Special Rounds"",
            ""arche_type"": ""Tech""
        }, {
            ""rotation"": 15,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Electric"",
            ""weapon_rounds_type"": ""Impact Rounds"",
            ""arche_type"": ""Dimension""
        }, {
            ""rotation"": 16,
            ""reward_type"": ""Processor"",
            ""reactor_element_type"": null,
            ""weapon_rounds_type"": null,
            ""arche_type"": null
        }, {
            ""rotation"": 17,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Chill"",
            ""weapon_rounds_type"": ""General Rounds"",
            ""arche_type"": ""Fusion""
        }, {
            ""rotation"": 18,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Fire"",
            ""weapon_rounds_type"": ""General Rounds"",
            ""arche_type"": ""Tech""
        }, {
            ""rotation"": 19,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Non-Attribute"",
            ""weapon_rounds_type"": ""Special Rounds"",
            ""arche_type"": ""Dimension""
        }, {
            ""rotation"": 20,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Toxic"",
            ""weapon_rounds_type"": ""High-Power Rounds"",
            ""arche_type"": ""Dimension""
        }]
    }, {
        ""battle_zone_id"": ""502"",
        ""battle_zone_name"": ""Remnant"",
        ""reward"": [{
            ""rotation"": 1,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Electric"",
            ""weapon_rounds_type"": ""High-Power Rounds"",
            ""arche_type"": ""Fusion""
        }, {
            ""rotation"": 2,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Chill"",
            ""weapon_rounds_type"": ""Special Rounds"",
            ""arche_type"": ""Singular""
        }, {
            ""rotation"": 3,
            ""reward_type"": ""Memory"",
            ""reactor_element_type"": null,
            ""weapon_rounds_type"": null,
            ""arche_type"": null
        }, {
            ""rotation"": 4,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Non-Attribute"",
            ""weapon_rounds_type"": ""Impact Rounds"",
            ""arche_type"": ""Dimension""
        }, {
            ""rotation"": 5,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Fire"",
            ""weapon_rounds_type"": ""Special Rounds"",
            ""arche_type"": ""Dimension""
        }, {
            ""rotation"": 6,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Toxic"",
            ""weapon_rounds_type"": ""Impact Rounds"",
            ""arche_type"": ""Tech""
        }, {
            ""rotation"": 7,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Toxic"",
            ""weapon_rounds_type"": ""High-Power Rounds"",
            ""arche_type"": ""Dimension""
        }, {
            ""rotation"": 8,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Non-Attribute"",
            ""weapon_rounds_type"": ""General Rounds"",
            ""arche_type"": ""Fusion""
        }, {
            ""rotation"": 9,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Fire"",
            ""weapon_rounds_type"": ""Impact Rounds"",
            ""arche_type"": ""Dimension""
        }, {
            ""rotation"": 10,
            ""reward_type"": ""Sensor"",
            ""reactor_element_type"": null,
            ""weapon_rounds_type"": null,
            ""arche_type"": null
        }, {
            ""rotation"": 11,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Fire"",
            ""weapon_rounds_type"": ""Impact Rounds"",
            ""arche_type"": ""Fusion""
        }, {
            ""rotation"": 12,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Chill"",
            ""weapon_rounds_type"": ""Special Rounds"",
            ""arche_type"": ""Fusion""
        }, {
            ""rotation"": 13,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Electric"",
            ""weapon_rounds_type"": ""Impact Rounds"",
            ""arche_type"": ""Fusion""
        }, {
            ""rotation"": 14,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Fire"",
            ""weapon_rounds_type"": ""General Rounds"",
            ""arche_type"": ""Singular""
        }, {
            ""rotation"": 15,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Fire"",
            ""weapon_rounds_type"": ""General Rounds"",
            ""arche_type"": ""Dimension""
        }, {
            ""rotation"": 16,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Non-Attribute"",
            ""weapon_rounds_type"": ""Impact Rounds"",
            ""arche_type"": ""Singular""
        }, {
            ""rotation"": 17,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Toxic"",
            ""weapon_rounds_type"": ""General Rounds"",
            ""arche_type"": ""Dimension""
        }, {
            ""rotation"": 18,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Electric"",
            ""weapon_rounds_type"": ""General Rounds"",
            ""arche_type"": ""Singular""
        }, {
            ""rotation"": 19,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Fire"",
            ""weapon_rounds_type"": ""High-Power Rounds"",
            ""arche_type"": ""Fusion""
        }, {
            ""rotation"": 20,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Non-Attribute"",
            ""weapon_rounds_type"": ""General Rounds"",
            ""arche_type"": ""Dimension""
        }]
    }, {
        ""battle_zone_id"": ""503"",
        ""battle_zone_name"": ""The Storage"",
        ""reward"": [{
            ""rotation"": 1,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Toxic"",
            ""weapon_rounds_type"": ""General Rounds"",
            ""arche_type"": ""Dimension""
        }, {
            ""rotation"": 2,
            ""reward_type"": ""Memory"",
            ""reactor_element_type"": null,
            ""weapon_rounds_type"": null,
            ""arche_type"": null
        }, {
            ""rotation"": 3,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Toxic"",
            ""weapon_rounds_type"": ""High-Power Rounds"",
            ""arche_type"": ""Tech""
        }, {
            ""rotation"": 4,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Electric"",
            ""weapon_rounds_type"": ""High-Power Rounds"",
            ""arche_type"": ""Singular""
        }, {
            ""rotation"": 5,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Chill"",
            ""weapon_rounds_type"": ""Special Rounds"",
            ""arche_type"": ""Fusion""
        }, {
            ""rotation"": 6,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Non-Attribute"",
            ""weapon_rounds_type"": ""General Rounds"",
            ""arche_type"": ""Tech""
        }, {
            ""rotation"": 7,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Fire"",
            ""weapon_rounds_type"": ""Special Rounds"",
            ""arche_type"": ""Fusion""
        }, {
            ""rotation"": 8,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Non-Attribute"",
            ""weapon_rounds_type"": ""Impact Rounds"",
            ""arche_type"": ""Dimension""
        }, {
            ""rotation"": 9,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Non-Attribute"",
            ""weapon_rounds_type"": ""High-Power Rounds"",
            ""arche_type"": ""Singular""
        }, {
            ""rotation"": 10,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Fire"",
            ""weapon_rounds_type"": ""General Rounds"",
            ""arche_type"": ""Tech""
        }, {
            ""rotation"": 11,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Chill"",
            ""weapon_rounds_type"": ""Special Rounds"",
            ""arche_type"": ""Singular""
        }, {
            ""rotation"": 12,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Chill"",
            ""weapon_rounds_type"": ""High-Power Rounds"",
            ""arche_type"": ""Fusion""
        }, {
            ""rotation"": 13,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Fire"",
            ""weapon_rounds_type"": ""Impact Rounds"",
            ""arche_type"": ""Singular""
        }, {
            ""rotation"": 14,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Toxic"",
            ""weapon_rounds_type"": ""Special Rounds"",
            ""arche_type"": ""Tech""
        }, {
            ""rotation"": 15,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Non-Attribute"",
            ""weapon_rounds_type"": ""Special Rounds"",
            ""arche_type"": ""Fusion""
        }, {
            ""rotation"": 16,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Fire"",
            ""weapon_rounds_type"": ""High-Power Rounds"",
            ""arche_type"": ""Dimension""
        }, {
            ""rotation"": 17,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Toxic"",
            ""weapon_rounds_type"": ""Special Rounds"",
            ""arche_type"": ""Dimension""
        }, {
            ""rotation"": 18,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Electric"",
            ""weapon_rounds_type"": ""Special Rounds"",
            ""arche_type"": ""Dimension""
        }, {
            ""rotation"": 19,
            ""reward_type"": ""Sensor"",
            ""reactor_element_type"": null,
            ""weapon_rounds_type"": null,
            ""arche_type"": null
        }, {
            ""rotation"": 20,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Electric"",
            ""weapon_rounds_type"": ""General Rounds"",
            ""arche_type"": ""Dimension""
        }]
    }, {
        ""battle_zone_id"": ""504"",
        ""battle_zone_name"": ""The Mining Site"",
        ""reward"": [{
            ""rotation"": 1,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Chill"",
            ""weapon_rounds_type"": ""High-Power Rounds"",
            ""arche_type"": ""Singular""
        }, {
            ""rotation"": 2,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Fire"",
            ""weapon_rounds_type"": ""General Rounds"",
            ""arche_type"": ""Dimension""
        }, {
            ""rotation"": 3,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Non-Attribute"",
            ""weapon_rounds_type"": ""Impact Rounds"",
            ""arche_type"": ""Singular""
        }, {
            ""rotation"": 4,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Fire"",
            ""weapon_rounds_type"": ""High-Power Rounds"",
            ""arche_type"": ""Fusion""
        }, {
            ""rotation"": 5,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Toxic"",
            ""weapon_rounds_type"": ""General Rounds"",
            ""arche_type"": ""Tech""
        }, {
            ""rotation"": 6,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Non-Attribute"",
            ""weapon_rounds_type"": ""Impact Rounds"",
            ""arche_type"": ""Dimension""
        }, {
            ""rotation"": 7,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Toxic"",
            ""weapon_rounds_type"": ""Impact Rounds"",
            ""arche_type"": ""Dimension""
        }, {
            ""rotation"": 8,
            ""reward_type"": ""Processor"",
            ""reactor_element_type"": null,
            ""weapon_rounds_type"": null,
            ""arche_type"": null
        }, {
            ""rotation"": 9,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Non-Attribute"",
            ""weapon_rounds_type"": ""Special Rounds"",
            ""arche_type"": ""Singular""
        }, {
            ""rotation"": 10,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Non-Attribute"",
            ""weapon_rounds_type"": ""Special Rounds"",
            ""arche_type"": ""Tech""
        }, {
            ""rotation"": 11,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Chill"",
            ""weapon_rounds_type"": ""General Rounds"",
            ""arche_type"": ""Fusion""
        }, {
            ""rotation"": 12,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Toxic"",
            ""weapon_rounds_type"": ""General Rounds"",
            ""arche_type"": ""Dimension""
        }, {
            ""rotation"": 13,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Fire"",
            ""weapon_rounds_type"": ""High-Power Rounds"",
            ""arche_type"": ""Dimension""
        }, {
            ""rotation"": 14,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Chill"",
            ""weapon_rounds_type"": ""Impact Rounds"",
            ""arche_type"": ""Singular""
        }, {
            ""rotation"": 15,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Non-Attribute"",
            ""weapon_rounds_type"": ""High-Power Rounds"",
            ""arche_type"": ""Fusion""
        }, {
            ""rotation"": 16,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Fire"",
            ""weapon_rounds_type"": ""General Rounds"",
            ""arche_type"": ""Tech""
        }, {
            ""rotation"": 17,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Non-Attribute"",
            ""weapon_rounds_type"": ""Impact Rounds"",
            ""arche_type"": ""Fusion""
        }, {
            ""rotation"": 18,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Chill"",
            ""weapon_rounds_type"": ""Special Rounds"",
            ""arche_type"": ""Singular""
        }, {
            ""rotation"": 19,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Chill"",
            ""weapon_rounds_type"": ""Impact Rounds"",
            ""arche_type"": ""Fusion""
        }, {
            ""rotation"": 20,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Fire"",
            ""weapon_rounds_type"": ""High-Power Rounds"",
            ""arche_type"": ""Tech""
        }]
    }, {
        ""battle_zone_id"": ""505"",
        ""battle_zone_name"": ""Miragestone"",
        ""reward"": [{
            ""rotation"": 1,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Electric"",
            ""weapon_rounds_type"": ""Impact Rounds"",
            ""arche_type"": ""Singular""
        }, {
            ""rotation"": 2,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Fire"",
            ""weapon_rounds_type"": ""High-Power Rounds"",
            ""arche_type"": ""Tech""
        }, {
            ""rotation"": 3,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Electric"",
            ""weapon_rounds_type"": ""Special Rounds"",
            ""arche_type"": ""Dimension""
        }, {
            ""rotation"": 4,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Chill"",
            ""weapon_rounds_type"": ""Special Rounds"",
            ""arche_type"": ""Tech""
        }, {
            ""rotation"": 5,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Non-Attribute"",
            ""weapon_rounds_type"": ""General Rounds"",
            ""arche_type"": ""Singular""
        }, {
            ""rotation"": 6,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Non-Attribute"",
            ""weapon_rounds_type"": ""Special Rounds"",
            ""arche_type"": ""Dimension""
        }, {
            ""rotation"": 7,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Fire"",
            ""weapon_rounds_type"": ""Impact Rounds"",
            ""arche_type"": ""Dimension""
        }, {
            ""rotation"": 8,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Electric"",
            ""weapon_rounds_type"": ""General Rounds"",
            ""arche_type"": ""Fusion""
        }, {
            ""rotation"": 9,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Non-Attribute"",
            ""weapon_rounds_type"": ""General Rounds"",
            ""arche_type"": ""Dimension""
        }, {
            ""rotation"": 10,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Non-Attribute"",
            ""weapon_rounds_type"": ""High-Power Rounds"",
            ""arche_type"": ""Dimension""
        }, {
            ""rotation"": 11,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Fire"",
            ""weapon_rounds_type"": ""Special Rounds"",
            ""arche_type"": ""Dimension""
        }, {
            ""rotation"": 12,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Non-Attribute"",
            ""weapon_rounds_type"": ""Impact Rounds"",
            ""arche_type"": ""Tech""
        }, {
            ""rotation"": 13,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Non-Attribute"",
            ""weapon_rounds_type"": ""Special Rounds"",
            ""arche_type"": ""Fusion""
        }, {
            ""rotation"": 14,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Chill"",
            ""weapon_rounds_type"": ""Special Rounds"",
            ""arche_type"": ""Fusion""
        }, {
            ""rotation"": 15,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Chill"",
            ""weapon_rounds_type"": ""General Rounds"",
            ""arche_type"": ""Singular""
        }, {
            ""rotation"": 16,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Fire"",
            ""weapon_rounds_type"": ""General Rounds"",
            ""arche_type"": ""Singular""
        }, {
            ""rotation"": 17,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Fire"",
            ""weapon_rounds_type"": ""General Rounds"",
            ""arche_type"": ""Dimension""
        }, {
            ""rotation"": 18,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Fire"",
            ""weapon_rounds_type"": ""Impact Rounds"",
            ""arche_type"": ""Fusion""
        }, {
            ""rotation"": 19,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Non-Attribute"",
            ""weapon_rounds_type"": ""General Rounds"",
            ""arche_type"": ""Tech""
        }, {
            ""rotation"": 20,
            ""reward_type"": ""Processor"",
            ""reactor_element_type"": null,
            ""weapon_rounds_type"": null,
            ""arche_type"": null
        }]
    }]
}, {
    ""map_id"": ""610002004"",
    ""map_name"": ""Echo Swamp"",
    ""battle_zone"": [{
        ""battle_zone_id"": ""701"",
        ""battle_zone_name"": ""Misty Woods"",
        ""reward"": [{
            ""rotation"": 1,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Electric"",
            ""weapon_rounds_type"": ""General Rounds"",
            ""arche_type"": ""Dimension""
        }, {
            ""rotation"": 2,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Chill"",
            ""weapon_rounds_type"": ""General Rounds"",
            ""arche_type"": ""Tech""
        }, {
            ""rotation"": 3,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Chill"",
            ""weapon_rounds_type"": ""General Rounds"",
            ""arche_type"": ""Singular""
        }, {
            ""rotation"": 4,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Non-Attribute"",
            ""weapon_rounds_type"": ""Special Rounds"",
            ""arche_type"": ""Fusion""
        }, {
            ""rotation"": 5,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Non-Attribute"",
            ""weapon_rounds_type"": ""High-Power Rounds"",
            ""arche_type"": ""Tech""
        }, {
            ""rotation"": 6,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Electric"",
            ""weapon_rounds_type"": ""High-Power Rounds"",
            ""arche_type"": ""Fusion""
        }, {
            ""rotation"": 7,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Fire"",
            ""weapon_rounds_type"": ""Impact Rounds"",
            ""arche_type"": ""Fusion""
        }, {
            ""rotation"": 8,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Chill"",
            ""weapon_rounds_type"": ""Impact Rounds"",
            ""arche_type"": ""Tech""
        }, {
            ""rotation"": 9,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Fire"",
            ""weapon_rounds_type"": ""Special Rounds"",
            ""arche_type"": ""Tech""
        }, {
            ""rotation"": 10,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Non-Attribute"",
            ""weapon_rounds_type"": ""Impact Rounds"",
            ""arche_type"": ""Dimension""
        }, {
            ""rotation"": 11,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Fire"",
            ""weapon_rounds_type"": ""High-Power Rounds"",
            ""arche_type"": ""Dimension""
        }, {
            ""rotation"": 12,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Fire"",
            ""weapon_rounds_type"": ""General Rounds"",
            ""arche_type"": ""Singular""
        }, {
            ""rotation"": 13,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Fire"",
            ""weapon_rounds_type"": ""Impact Rounds"",
            ""arche_type"": ""Tech""
        }, {
            ""rotation"": 14,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Non-Attribute"",
            ""weapon_rounds_type"": ""General Rounds"",
            ""arche_type"": ""Singular""
        }, {
            ""rotation"": 15,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Fire"",
            ""weapon_rounds_type"": ""High-Power Rounds"",
            ""arche_type"": ""Fusion""
        }, {
            ""rotation"": 16,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Non-Attribute"",
            ""weapon_rounds_type"": ""General Rounds"",
            ""arche_type"": ""Tech""
        }, {
            ""rotation"": 17,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Fire"",
            ""weapon_rounds_type"": ""Special Rounds"",
            ""arche_type"": ""Singular""
        }, {
            ""rotation"": 18,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Fire"",
            ""weapon_rounds_type"": ""Special Rounds"",
            ""arche_type"": ""Fusion""
        }, {
            ""rotation"": 19,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Toxic"",
            ""weapon_rounds_type"": ""Special Rounds"",
            ""arche_type"": ""Dimension""
        }, {
            ""rotation"": 20,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Chill"",
            ""weapon_rounds_type"": ""Special Rounds"",
            ""arche_type"": ""Singular""
        }]
    }, {
        ""battle_zone_id"": ""702"",
        ""battle_zone_name"": ""Abandoned Zone"",
        ""reward"": [{
            ""rotation"": 1,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Chill"",
            ""weapon_rounds_type"": ""Impact Rounds"",
            ""arche_type"": ""Fusion""
        }, {
            ""rotation"": 2,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Electric"",
            ""weapon_rounds_type"": ""High-Power Rounds"",
            ""arche_type"": ""Dimension""
        }, {
            ""rotation"": 3,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Non-Attribute"",
            ""weapon_rounds_type"": ""General Rounds"",
            ""arche_type"": ""Singular""
        }, {
            ""rotation"": 4,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Chill"",
            ""weapon_rounds_type"": ""Special Rounds"",
            ""arche_type"": ""Singular""
        }, {
            ""rotation"": 5,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Chill"",
            ""weapon_rounds_type"": ""General Rounds"",
            ""arche_type"": ""Fusion""
        }, {
            ""rotation"": 6,
            ""reward_type"": ""Sensor"",
            ""reactor_element_type"": null,
            ""weapon_rounds_type"": null,
            ""arche_type"": null
        }, {
            ""rotation"": 7,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Chill"",
            ""weapon_rounds_type"": ""High-Power Rounds"",
            ""arche_type"": ""Tech""
        }, {
            ""rotation"": 8,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Electric"",
            ""weapon_rounds_type"": ""Impact Rounds"",
            ""arche_type"": ""Singular""
        }, {
            ""rotation"": 9,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Toxic"",
            ""weapon_rounds_type"": ""Special Rounds"",
            ""arche_type"": ""Dimension""
        }, {
            ""rotation"": 10,
            ""reward_type"": ""Auxiliary Power"",
            ""reactor_element_type"": null,
            ""weapon_rounds_type"": null,
            ""arche_type"": null
        }, {
            ""rotation"": 11,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Non-Attribute"",
            ""weapon_rounds_type"": ""General Rounds"",
            ""arche_type"": ""Dimension""
        }, {
            ""rotation"": 12,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Chill"",
            ""weapon_rounds_type"": ""Impact Rounds"",
            ""arche_type"": ""Singular""
        }, {
            ""rotation"": 13,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Electric"",
            ""weapon_rounds_type"": ""High-Power Rounds"",
            ""arche_type"": ""Singular""
        }, {
            ""rotation"": 14,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Non-Attribute"",
            ""weapon_rounds_type"": ""High-Power Rounds"",
            ""arche_type"": ""Tech""
        }, {
            ""rotation"": 15,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Non-Attribute"",
            ""weapon_rounds_type"": ""Impact Rounds"",
            ""arche_type"": ""Fusion""
        }, {
            ""rotation"": 16,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Fire"",
            ""weapon_rounds_type"": ""Impact Rounds"",
            ""arche_type"": ""Dimension""
        }, {
            ""rotation"": 17,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Toxic"",
            ""weapon_rounds_type"": ""High-Power Rounds"",
            ""arche_type"": ""Tech""
        }, {
            ""rotation"": 18,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Fire"",
            ""weapon_rounds_type"": ""High-Power Rounds"",
            ""arche_type"": ""Tech""
        }, {
            ""rotation"": 19,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Non-Attribute"",
            ""weapon_rounds_type"": ""Special Rounds"",
            ""arche_type"": ""Tech""
        }, {
            ""rotation"": 20,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Fire"",
            ""weapon_rounds_type"": ""Special Rounds"",
            ""arche_type"": ""Singular""
        }]
    }, {
        ""battle_zone_id"": ""703"",
        ""battle_zone_name"": ""Muskeg Swamp"",
        ""reward"": [{
            ""rotation"": 1,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Toxic"",
            ""weapon_rounds_type"": ""Impact Rounds"",
            ""arche_type"": ""Dimension""
        }, {
            ""rotation"": 2,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Toxic"",
            ""weapon_rounds_type"": ""Impact Rounds"",
            ""arche_type"": ""Tech""
        }, {
            ""rotation"": 3,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Non-Attribute"",
            ""weapon_rounds_type"": ""Special Rounds"",
            ""arche_type"": ""Singular""
        }, {
            ""rotation"": 4,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Fire"",
            ""weapon_rounds_type"": ""General Rounds"",
            ""arche_type"": ""Fusion""
        }, {
            ""rotation"": 5,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Electric"",
            ""weapon_rounds_type"": ""High-Power Rounds"",
            ""arche_type"": ""Dimension""
        }, {
            ""rotation"": 6,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Fire"",
            ""weapon_rounds_type"": ""General Rounds"",
            ""arche_type"": ""Dimension""
        }, {
            ""rotation"": 7,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Non-Attribute"",
            ""weapon_rounds_type"": ""General Rounds"",
            ""arche_type"": ""Dimension""
        }, {
            ""rotation"": 8,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Electric"",
            ""weapon_rounds_type"": ""High-Power Rounds"",
            ""arche_type"": ""Fusion""
        }, {
            ""rotation"": 9,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Electric"",
            ""weapon_rounds_type"": ""Special Rounds"",
            ""arche_type"": ""Dimension""
        }, {
            ""rotation"": 10,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Toxic"",
            ""weapon_rounds_type"": ""Special Rounds"",
            ""arche_type"": ""Tech""
        }, {
            ""rotation"": 11,
            ""reward_type"": ""Memory"",
            ""reactor_element_type"": null,
            ""weapon_rounds_type"": null,
            ""arche_type"": null
        }, {
            ""rotation"": 12,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Toxic"",
            ""weapon_rounds_type"": ""High-Power Rounds"",
            ""arche_type"": ""Tech""
        }, {
            ""rotation"": 13,
            ""reward_type"": ""Processor"",
            ""reactor_element_type"": null,
            ""weapon_rounds_type"": null,
            ""arche_type"": null
        }, {
            ""rotation"": 14,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Chill"",
            ""weapon_rounds_type"": ""High-Power Rounds"",
            ""arche_type"": ""Fusion""
        }, {
            ""rotation"": 15,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Electric"",
            ""weapon_rounds_type"": ""General Rounds"",
            ""arche_type"": ""Singular""
        }, {
            ""rotation"": 16,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Electric"",
            ""weapon_rounds_type"": ""General Rounds"",
            ""arche_type"": ""Dimension""
        }, {
            ""rotation"": 17,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Chill"",
            ""weapon_rounds_type"": ""General Rounds"",
            ""arche_type"": ""Singular""
        }, {
            ""rotation"": 18,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Toxic"",
            ""weapon_rounds_type"": ""High-Power Rounds"",
            ""arche_type"": ""Dimension""
        }, {
            ""rotation"": 19,
            ""reward_type"": ""Auxiliary Power"",
            ""reactor_element_type"": null,
            ""weapon_rounds_type"": null,
            ""arche_type"": null
        }, {
            ""rotation"": 20,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Non-Attribute"",
            ""weapon_rounds_type"": ""Special Rounds"",
            ""arche_type"": ""Fusion""
        }]
    }, {
        ""battle_zone_id"": ""704"",
        ""battle_zone_name"": ""Derelict Covert"",
        ""reward"": [{
            ""rotation"": 1,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Toxic"",
            ""weapon_rounds_type"": ""High-Power Rounds"",
            ""arche_type"": ""Tech""
        }, {
            ""rotation"": 2,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Fire"",
            ""weapon_rounds_type"": ""General Rounds"",
            ""arche_type"": ""Fusion""
        }, {
            ""rotation"": 3,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Chill"",
            ""weapon_rounds_type"": ""General Rounds"",
            ""arche_type"": ""Tech""
        }, {
            ""rotation"": 4,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Non-Attribute"",
            ""weapon_rounds_type"": ""High-Power Rounds"",
            ""arche_type"": ""Singular""
        }, {
            ""rotation"": 5,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Non-Attribute"",
            ""weapon_rounds_type"": ""General Rounds"",
            ""arche_type"": ""Tech""
        }, {
            ""rotation"": 6,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Non-Attribute"",
            ""weapon_rounds_type"": ""Impact Rounds"",
            ""arche_type"": ""Tech""
        }, {
            ""rotation"": 7,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Fire"",
            ""weapon_rounds_type"": ""High-Power Rounds"",
            ""arche_type"": ""Singular""
        }, {
            ""rotation"": 8,
            ""reward_type"": ""Sensor"",
            ""reactor_element_type"": null,
            ""weapon_rounds_type"": null,
            ""arche_type"": null
        }, {
            ""rotation"": 9,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Fire"",
            ""weapon_rounds_type"": ""Special Rounds"",
            ""arche_type"": ""Dimension""
        }, {
            ""rotation"": 10,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Electric"",
            ""weapon_rounds_type"": ""General Rounds"",
            ""arche_type"": ""Fusion""
        }, {
            ""rotation"": 11,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Electric"",
            ""weapon_rounds_type"": ""High-Power Rounds"",
            ""arche_type"": ""Singular""
        }, {
            ""rotation"": 12,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Fire"",
            ""weapon_rounds_type"": ""Special Rounds"",
            ""arche_type"": ""Fusion""
        }, {
            ""rotation"": 13,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Non-Attribute"",
            ""weapon_rounds_type"": ""General Rounds"",
            ""arche_type"": ""Fusion""
        }, {
            ""rotation"": 14,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Non-Attribute"",
            ""weapon_rounds_type"": ""Impact Rounds"",
            ""arche_type"": ""Singular""
        }, {
            ""rotation"": 15,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Toxic"",
            ""weapon_rounds_type"": ""Special Rounds"",
            ""arche_type"": ""Dimension""
        }, {
            ""rotation"": 16,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Fire"",
            ""weapon_rounds_type"": ""High-Power Rounds"",
            ""arche_type"": ""Tech""
        }, {
            ""rotation"": 17,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Fire"",
            ""weapon_rounds_type"": ""Impact Rounds"",
            ""arche_type"": ""Singular""
        }, {
            ""rotation"": 18,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Chill"",
            ""weapon_rounds_type"": ""Impact Rounds"",
            ""arche_type"": ""Tech""
        }, {
            ""rotation"": 19,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Chill"",
            ""weapon_rounds_type"": ""Special Rounds"",
            ""arche_type"": ""Fusion""
        }, {
            ""rotation"": 20,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Toxic"",
            ""weapon_rounds_type"": ""Special Rounds"",
            ""arche_type"": ""Tech""
        }]
    }]
}, {
    ""map_id"": ""610002005"",
    ""map_name"": ""Fortress"",
    ""battle_zone"": [{
        ""battle_zone_id"": ""801"",
        ""battle_zone_name"": ""The Aurora Forest"",
        ""reward"": [{
            ""rotation"": 1,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Fire"",
            ""weapon_rounds_type"": ""Impact Rounds"",
            ""arche_type"": ""Tech""
        }, {
            ""rotation"": 2,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Fire"",
            ""weapon_rounds_type"": ""Impact Rounds"",
            ""arche_type"": ""Singular""
        }, {
            ""rotation"": 3,
            ""reward_type"": ""Auxiliary Power"",
            ""reactor_element_type"": null,
            ""weapon_rounds_type"": null,
            ""arche_type"": null
        }, {
            ""rotation"": 4,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Electric"",
            ""weapon_rounds_type"": ""General Rounds"",
            ""arche_type"": ""Fusion""
        }, {
            ""rotation"": 5,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Chill"",
            ""weapon_rounds_type"": ""Impact Rounds"",
            ""arche_type"": ""Fusion""
        }, {
            ""rotation"": 6,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Fire"",
            ""weapon_rounds_type"": ""High-Power Rounds"",
            ""arche_type"": ""Fusion""
        }, {
            ""rotation"": 7,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Non-Attribute"",
            ""weapon_rounds_type"": ""General Rounds"",
            ""arche_type"": ""Singular""
        }, {
            ""rotation"": 8,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Toxic"",
            ""weapon_rounds_type"": ""Impact Rounds"",
            ""arche_type"": ""Tech""
        }, {
            ""rotation"": 9,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Non-Attribute"",
            ""weapon_rounds_type"": ""High-Power Rounds"",
            ""arche_type"": ""Tech""
        }, {
            ""rotation"": 10,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Non-Attribute"",
            ""weapon_rounds_type"": ""General Rounds"",
            ""arche_type"": ""Tech""
        }, {
            ""rotation"": 11,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Electric"",
            ""weapon_rounds_type"": ""General Rounds"",
            ""arche_type"": ""Singular""
        }, {
            ""rotation"": 12,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Electric"",
            ""weapon_rounds_type"": ""Special Rounds"",
            ""arche_type"": ""Dimension""
        }, {
            ""rotation"": 13,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Electric"",
            ""weapon_rounds_type"": ""Impact Rounds"",
            ""arche_type"": ""Dimension""
        }, {
            ""rotation"": 14,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Electric"",
            ""weapon_rounds_type"": ""Special Rounds"",
            ""arche_type"": ""Singular""
        }, {
            ""rotation"": 15,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Toxic"",
            ""weapon_rounds_type"": ""General Rounds"",
            ""arche_type"": ""Tech""
        }, {
            ""rotation"": 16,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Non-Attribute"",
            ""weapon_rounds_type"": ""Impact Rounds"",
            ""arche_type"": ""Tech""
        }, {
            ""rotation"": 17,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Electric"",
            ""weapon_rounds_type"": ""Impact Rounds"",
            ""arche_type"": ""Fusion""
        }, {
            ""rotation"": 18,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Toxic"",
            ""weapon_rounds_type"": ""Impact Rounds"",
            ""arche_type"": ""Dimension""
        }, {
            ""rotation"": 19,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Non-Attribute"",
            ""weapon_rounds_type"": ""Impact Rounds"",
            ""arche_type"": ""Fusion""
        }, {
            ""rotation"": 20,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Chill"",
            ""weapon_rounds_type"": ""High-Power Rounds"",
            ""arche_type"": ""Fusion""
        }]
    }, {
        ""battle_zone_id"": ""802"",
        ""battle_zone_name"": ""Frozen Valley"",
        ""reward"": [{
            ""rotation"": 1,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Chill"",
            ""weapon_rounds_type"": ""High-Power Rounds"",
            ""arche_type"": ""Tech""
        }, {
            ""rotation"": 2,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Non-Attribute"",
            ""weapon_rounds_type"": ""High-Power Rounds"",
            ""arche_type"": ""Tech""
        }, {
            ""rotation"": 3,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Fire"",
            ""weapon_rounds_type"": ""Special Rounds"",
            ""arche_type"": ""Dimension""
        }, {
            ""rotation"": 4,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Chill"",
            ""weapon_rounds_type"": ""Impact Rounds"",
            ""arche_type"": ""Singular""
        }, {
            ""rotation"": 5,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Fire"",
            ""weapon_rounds_type"": ""High-Power Rounds"",
            ""arche_type"": ""Singular""
        }, {
            ""rotation"": 6,
            ""reward_type"": ""Processor"",
            ""reactor_element_type"": null,
            ""weapon_rounds_type"": null,
            ""arche_type"": null
        }, {
            ""rotation"": 7,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Toxic"",
            ""weapon_rounds_type"": ""General Rounds"",
            ""arche_type"": ""Tech""
        }, {
            ""rotation"": 8,
            ""reward_type"": ""Auxiliary Power"",
            ""reactor_element_type"": null,
            ""weapon_rounds_type"": null,
            ""arche_type"": null
        }, {
            ""rotation"": 9,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Fire"",
            ""weapon_rounds_type"": ""Impact Rounds"",
            ""arche_type"": ""Fusion""
        }, {
            ""rotation"": 10,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Fire"",
            ""weapon_rounds_type"": ""General Rounds"",
            ""arche_type"": ""Fusion""
        }, {
            ""rotation"": 11,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Non-Attribute"",
            ""weapon_rounds_type"": ""High-Power Rounds"",
            ""arche_type"": ""Dimension""
        }, {
            ""rotation"": 12,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Chill"",
            ""weapon_rounds_type"": ""High-Power Rounds"",
            ""arche_type"": ""Singular""
        }, {
            ""rotation"": 13,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Non-Attribute"",
            ""weapon_rounds_type"": ""Impact Rounds"",
            ""arche_type"": ""Singular""
        }, {
            ""rotation"": 14,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Electric"",
            ""weapon_rounds_type"": ""Impact Rounds"",
            ""arche_type"": ""Singular""
        }, {
            ""rotation"": 15,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Chill"",
            ""weapon_rounds_type"": ""Impact Rounds"",
            ""arche_type"": ""Fusion""
        }, {
            ""rotation"": 16,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Toxic"",
            ""weapon_rounds_type"": ""General Rounds"",
            ""arche_type"": ""Dimension""
        }, {
            ""rotation"": 17,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Chill"",
            ""weapon_rounds_type"": ""Impact Rounds"",
            ""arche_type"": ""Tech""
        }, {
            ""rotation"": 18,
            ""reward_type"": ""Memory"",
            ""reactor_element_type"": null,
            ""weapon_rounds_type"": null,
            ""arche_type"": null
        }, {
            ""rotation"": 19,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Electric"",
            ""weapon_rounds_type"": ""General Rounds"",
            ""arche_type"": ""Fusion""
        }, {
            ""rotation"": 20,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Fire"",
            ""weapon_rounds_type"": ""General Rounds"",
            ""arche_type"": ""Singular""
        }]
    }, {
        ""battle_zone_id"": ""803"",
        ""battle_zone_name"": ""Fallen Ark"",
        ""reward"": [{
            ""rotation"": 1,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Fire"",
            ""weapon_rounds_type"": ""High-Power Rounds"",
            ""arche_type"": ""Fusion""
        }, {
            ""rotation"": 2,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Non-Attribute"",
            ""weapon_rounds_type"": ""Special Rounds"",
            ""arche_type"": ""Singular""
        }, {
            ""rotation"": 3,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Non-Attribute"",
            ""weapon_rounds_type"": ""Special Rounds"",
            ""arche_type"": ""Tech""
        }, {
            ""rotation"": 4,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Non-Attribute"",
            ""weapon_rounds_type"": ""Impact Rounds"",
            ""arche_type"": ""Fusion""
        }, {
            ""rotation"": 5,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Electric"",
            ""weapon_rounds_type"": ""Impact Rounds"",
            ""arche_type"": ""Singular""
        }, {
            ""rotation"": 6,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Toxic"",
            ""weapon_rounds_type"": ""General Rounds"",
            ""arche_type"": ""Dimension""
        }, {
            ""rotation"": 7,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Electric"",
            ""weapon_rounds_type"": ""High-Power Rounds"",
            ""arche_type"": ""Dimension""
        }, {
            ""rotation"": 8,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Electric"",
            ""weapon_rounds_type"": ""Special Rounds"",
            ""arche_type"": ""Singular""
        }, {
            ""rotation"": 9,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Non-Attribute"",
            ""weapon_rounds_type"": ""Special Rounds"",
            ""arche_type"": ""Fusion""
        }, {
            ""rotation"": 10,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Toxic"",
            ""weapon_rounds_type"": ""Impact Rounds"",
            ""arche_type"": ""Dimension""
        }, {
            ""rotation"": 11,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Chill"",
            ""weapon_rounds_type"": ""High-Power Rounds"",
            ""arche_type"": ""Tech""
        }, {
            ""rotation"": 12,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Non-Attribute"",
            ""weapon_rounds_type"": ""High-Power Rounds"",
            ""arche_type"": ""Tech""
        }, {
            ""rotation"": 13,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Chill"",
            ""weapon_rounds_type"": ""Impact Rounds"",
            ""arche_type"": ""Tech""
        }, {
            ""rotation"": 14,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Chill"",
            ""weapon_rounds_type"": ""Special Rounds"",
            ""arche_type"": ""Singular""
        }, {
            ""rotation"": 15,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Electric"",
            ""weapon_rounds_type"": ""Special Rounds"",
            ""arche_type"": ""Fusion""
        }, {
            ""rotation"": 16,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Fire"",
            ""weapon_rounds_type"": ""Special Rounds"",
            ""arche_type"": ""Fusion""
        }, {
            ""rotation"": 17,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Fire"",
            ""weapon_rounds_type"": ""Impact Rounds"",
            ""arche_type"": ""Tech""
        }, {
            ""rotation"": 18,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Toxic"",
            ""weapon_rounds_type"": ""General Rounds"",
            ""arche_type"": ""Tech""
        }, {
            ""rotation"": 19,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Chill"",
            ""weapon_rounds_type"": ""General Rounds"",
            ""arche_type"": ""Singular""
        }, {
            ""rotation"": 20,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Electric"",
            ""weapon_rounds_type"": ""Impact Rounds"",
            ""arche_type"": ""Fusion""
        }]
    }, {
        ""battle_zone_id"": ""804"",
        ""battle_zone_name"": ""Convertor Facility"",
        ""reward"": [{
            ""rotation"": 1,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Fire"",
            ""weapon_rounds_type"": ""General Rounds"",
            ""arche_type"": ""Fusion""
        }, {
            ""rotation"": 2,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Toxic"",
            ""weapon_rounds_type"": ""High-Power Rounds"",
            ""arche_type"": ""Dimension""
        }, {
            ""rotation"": 3,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Toxic"",
            ""weapon_rounds_type"": ""Special Rounds"",
            ""arche_type"": ""Tech""
        }, {
            ""rotation"": 4,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Chill"",
            ""weapon_rounds_type"": ""High-Power Rounds"",
            ""arche_type"": ""Fusion""
        }, {
            ""rotation"": 5,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Non-Attribute"",
            ""weapon_rounds_type"": ""General Rounds"",
            ""arche_type"": ""Dimension""
        }, {
            ""rotation"": 6,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Fire"",
            ""weapon_rounds_type"": ""Special Rounds"",
            ""arche_type"": ""Tech""
        }, {
            ""rotation"": 7,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Electric"",
            ""weapon_rounds_type"": ""Special Rounds"",
            ""arche_type"": ""Dimension""
        }, {
            ""rotation"": 8,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Electric"",
            ""weapon_rounds_type"": ""Impact Rounds"",
            ""arche_type"": ""Fusion""
        }, {
            ""rotation"": 9,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Fire"",
            ""weapon_rounds_type"": ""Impact Rounds"",
            ""arche_type"": ""Singular""
        }, {
            ""rotation"": 10,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Chill"",
            ""weapon_rounds_type"": ""Special Rounds"",
            ""arche_type"": ""Fusion""
        }, {
            ""rotation"": 11,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Electric"",
            ""weapon_rounds_type"": ""Special Rounds"",
            ""arche_type"": ""Fusion""
        }, {
            ""rotation"": 12,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Chill"",
            ""weapon_rounds_type"": ""Special Rounds"",
            ""arche_type"": ""Tech""
        }, {
            ""rotation"": 13,
            ""reward_type"": ""Sensor"",
            ""reactor_element_type"": null,
            ""weapon_rounds_type"": null,
            ""arche_type"": null
        }, {
            ""rotation"": 14,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Non-Attribute"",
            ""weapon_rounds_type"": ""High-Power Rounds"",
            ""arche_type"": ""Dimension""
        }, {
            ""rotation"": 15,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Fire"",
            ""weapon_rounds_type"": ""High-Power Rounds"",
            ""arche_type"": ""Singular""
        }, {
            ""rotation"": 16,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Electric"",
            ""weapon_rounds_type"": ""General Rounds"",
            ""arche_type"": ""Singular""
        }, {
            ""rotation"": 17,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Non-Attribute"",
            ""weapon_rounds_type"": ""High-Power Rounds"",
            ""arche_type"": ""Singular""
        }, {
            ""rotation"": 18,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Non-Attribute"",
            ""weapon_rounds_type"": ""Special Rounds"",
            ""arche_type"": ""Tech""
        }, {
            ""rotation"": 19,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Electric"",
            ""weapon_rounds_type"": ""Impact Rounds"",
            ""arche_type"": ""Dimension""
        }, {
            ""rotation"": 20,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Fire"",
            ""weapon_rounds_type"": ""High-Power Rounds"",
            ""arche_type"": ""Dimension""
        }]
    }, {
        ""battle_zone_id"": ""805"",
        ""battle_zone_name"": ""Defense Line"",
        ""reward"": [{
            ""rotation"": 1,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Non-Attribute"",
            ""weapon_rounds_type"": ""High-Power Rounds"",
            ""arche_type"": ""Fusion""
        }, {
            ""rotation"": 2,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Non-Attribute"",
            ""weapon_rounds_type"": ""General Rounds"",
            ""arche_type"": ""Dimension""
        }, {
            ""rotation"": 3,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Fire"",
            ""weapon_rounds_type"": ""Impact Rounds"",
            ""arche_type"": ""Dimension""
        }, {
            ""rotation"": 4,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Non-Attribute"",
            ""weapon_rounds_type"": ""High-Power Rounds"",
            ""arche_type"": ""Dimension""
        }, {
            ""rotation"": 5,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Chill"",
            ""weapon_rounds_type"": ""High-Power Rounds"",
            ""arche_type"": ""Singular""
        }, {
            ""rotation"": 6,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Fire"",
            ""weapon_rounds_type"": ""Impact Rounds"",
            ""arche_type"": ""Tech""
        }, {
            ""rotation"": 7,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Electric"",
            ""weapon_rounds_type"": ""Impact Rounds"",
            ""arche_type"": ""Dimension""
        }, {
            ""rotation"": 8,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Non-Attribute"",
            ""weapon_rounds_type"": ""Impact Rounds"",
            ""arche_type"": ""Tech""
        }, {
            ""rotation"": 9,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Non-Attribute"",
            ""weapon_rounds_type"": ""Impact Rounds"",
            ""arche_type"": ""Singular""
        }, {
            ""rotation"": 10,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Chill"",
            ""weapon_rounds_type"": ""High-Power Rounds"",
            ""arche_type"": ""Fusion""
        }, {
            ""rotation"": 11,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Fire"",
            ""weapon_rounds_type"": ""Special Rounds"",
            ""arche_type"": ""Singular""
        }, {
            ""rotation"": 12,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Electric"",
            ""weapon_rounds_type"": ""High-Power Rounds"",
            ""arche_type"": ""Dimension""
        }, {
            ""rotation"": 13,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Non-Attribute"",
            ""weapon_rounds_type"": ""Impact Rounds"",
            ""arche_type"": ""Dimension""
        }, {
            ""rotation"": 14,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Electric"",
            ""weapon_rounds_type"": ""General Rounds"",
            ""arche_type"": ""Dimension""
        }, {
            ""rotation"": 15,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Fire"",
            ""weapon_rounds_type"": ""Special Rounds"",
            ""arche_type"": ""Tech""
        }, {
            ""rotation"": 16,
            ""reward_type"": ""Auxiliary Power"",
            ""reactor_element_type"": null,
            ""weapon_rounds_type"": null,
            ""arche_type"": null
        }, {
            ""rotation"": 17,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Chill"",
            ""weapon_rounds_type"": ""Special Rounds"",
            ""arche_type"": ""Tech""
        }, {
            ""rotation"": 18,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Chill"",
            ""weapon_rounds_type"": ""General Rounds"",
            ""arche_type"": ""Tech""
        }, {
            ""rotation"": 19,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Non-Attribute"",
            ""weapon_rounds_type"": ""General Rounds"",
            ""arche_type"": ""Fusion""
        }, {
            ""rotation"": 20,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Toxic"",
            ""weapon_rounds_type"": ""Special Rounds"",
            ""arche_type"": ""Dimension""
        }]
    }]
}, {
    ""map_id"": ""610002006"",
    ""map_name"": ""Sterile Land"",
    ""battle_zone"": [{
        ""battle_zone_id"": ""601"",
        ""battle_zone_name"": ""Rockfall"",
        ""reward"": [{
            ""rotation"": 1,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Electric"",
            ""weapon_rounds_type"": ""General Rounds"",
            ""arche_type"": ""Fusion""
        }, {
            ""rotation"": 2,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Toxic"",
            ""weapon_rounds_type"": ""Special Rounds"",
            ""arche_type"": ""Dimension""
        }, {
            ""rotation"": 3,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Fire"",
            ""weapon_rounds_type"": ""High-Power Rounds"",
            ""arche_type"": ""Tech""
        }, {
            ""rotation"": 4,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Non-Attribute"",
            ""weapon_rounds_type"": ""General Rounds"",
            ""arche_type"": ""Dimension""
        }, {
            ""rotation"": 5,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Fire"",
            ""weapon_rounds_type"": ""General Rounds"",
            ""arche_type"": ""Tech""
        }, {
            ""rotation"": 6,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Non-Attribute"",
            ""weapon_rounds_type"": ""Impact Rounds"",
            ""arche_type"": ""Fusion""
        }, {
            ""rotation"": 7,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Fire"",
            ""weapon_rounds_type"": ""Special Rounds"",
            ""arche_type"": ""Tech""
        }, {
            ""rotation"": 8,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Fire"",
            ""weapon_rounds_type"": ""Impact Rounds"",
            ""arche_type"": ""Singular""
        }, {
            ""rotation"": 9,
            ""reward_type"": ""Processor"",
            ""reactor_element_type"": null,
            ""weapon_rounds_type"": null,
            ""arche_type"": null
        }, {
            ""rotation"": 10,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Chill"",
            ""weapon_rounds_type"": ""High-Power Rounds"",
            ""arche_type"": ""Singular""
        }, {
            ""rotation"": 11,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Non-Attribute"",
            ""weapon_rounds_type"": ""High-Power Rounds"",
            ""arche_type"": ""Singular""
        }, {
            ""rotation"": 12,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Fire"",
            ""weapon_rounds_type"": ""High-Power Rounds"",
            ""arche_type"": ""Singular""
        }, {
            ""rotation"": 13,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Chill"",
            ""weapon_rounds_type"": ""High-Power Rounds"",
            ""arche_type"": ""Tech""
        }, {
            ""rotation"": 14,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Non-Attribute"",
            ""weapon_rounds_type"": ""High-Power Rounds"",
            ""arche_type"": ""Fusion""
        }, {
            ""rotation"": 15,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Chill"",
            ""weapon_rounds_type"": ""Special Rounds"",
            ""arche_type"": ""Tech""
        }, {
            ""rotation"": 16,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Non-Attribute"",
            ""weapon_rounds_type"": ""General Rounds"",
            ""arche_type"": ""Singular""
        }, {
            ""rotation"": 17,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Electric"",
            ""weapon_rounds_type"": ""High-Power Rounds"",
            ""arche_type"": ""Singular""
        }, {
            ""rotation"": 18,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Fire"",
            ""weapon_rounds_type"": ""Special Rounds"",
            ""arche_type"": ""Dimension""
        }, {
            ""rotation"": 19,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Toxic"",
            ""weapon_rounds_type"": ""Impact Rounds"",
            ""arche_type"": ""Dimension""
        }, {
            ""rotation"": 20,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Electric"",
            ""weapon_rounds_type"": ""Special Rounds"",
            ""arche_type"": ""Dimension""
        }]
    }, {
        ""battle_zone_id"": ""602"",
        ""battle_zone_name"": ""Repository"",
        ""reward"": [{
            ""rotation"": 1,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Fire"",
            ""weapon_rounds_type"": ""General Rounds"",
            ""arche_type"": ""Tech""
        }, {
            ""rotation"": 2,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Non-Attribute"",
            ""weapon_rounds_type"": ""High-Power Rounds"",
            ""arche_type"": ""Dimension""
        }, {
            ""rotation"": 3,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Chill"",
            ""weapon_rounds_type"": ""Special Rounds"",
            ""arche_type"": ""Fusion""
        }, {
            ""rotation"": 4,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Electric"",
            ""weapon_rounds_type"": ""High-Power Rounds"",
            ""arche_type"": ""Fusion""
        }, {
            ""rotation"": 5,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Non-Attribute"",
            ""weapon_rounds_type"": ""Special Rounds"",
            ""arche_type"": ""Tech""
        }, {
            ""rotation"": 6,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Non-Attribute"",
            ""weapon_rounds_type"": ""General Rounds"",
            ""arche_type"": ""Fusion""
        }, {
            ""rotation"": 7,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Chill"",
            ""weapon_rounds_type"": ""Impact Rounds"",
            ""arche_type"": ""Fusion""
        }, {
            ""rotation"": 8,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Chill"",
            ""weapon_rounds_type"": ""Special Rounds"",
            ""arche_type"": ""Singular""
        }, {
            ""rotation"": 9,
            ""reward_type"": ""Memory"",
            ""reactor_element_type"": null,
            ""weapon_rounds_type"": null,
            ""arche_type"": null
        }, {
            ""rotation"": 10,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Electric"",
            ""weapon_rounds_type"": ""Impact Rounds"",
            ""arche_type"": ""Fusion""
        }, {
            ""rotation"": 11,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Toxic"",
            ""weapon_rounds_type"": ""General Rounds"",
            ""arche_type"": ""Tech""
        }, {
            ""rotation"": 12,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Non-Attribute"",
            ""weapon_rounds_type"": ""General Rounds"",
            ""arche_type"": ""Tech""
        }, {
            ""rotation"": 13,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Toxic"",
            ""weapon_rounds_type"": ""Special Rounds"",
            ""arche_type"": ""Dimension""
        }, {
            ""rotation"": 14,
            ""reward_type"": ""Auxiliary Power"",
            ""reactor_element_type"": null,
            ""weapon_rounds_type"": null,
            ""arche_type"": null
        }, {
            ""rotation"": 15,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Toxic"",
            ""weapon_rounds_type"": ""Impact Rounds"",
            ""arche_type"": ""Tech""
        }, {
            ""rotation"": 16,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Toxic"",
            ""weapon_rounds_type"": ""High-Power Rounds"",
            ""arche_type"": ""Tech""
        }, {
            ""rotation"": 17,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Electric"",
            ""weapon_rounds_type"": ""Impact Rounds"",
            ""arche_type"": ""Dimension""
        }, {
            ""rotation"": 18,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Fire"",
            ""weapon_rounds_type"": ""Impact Rounds"",
            ""arche_type"": ""Dimension""
        }, {
            ""rotation"": 19,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Electric"",
            ""weapon_rounds_type"": ""Special Rounds"",
            ""arche_type"": ""Fusion""
        }, {
            ""rotation"": 20,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Chill"",
            ""weapon_rounds_type"": ""General Rounds"",
            ""arche_type"": ""Fusion""
        }]
    }, {
        ""battle_zone_id"": ""603"",
        ""battle_zone_name"": ""Restricted Zone"",
        ""reward"": [{
            ""rotation"": 1,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Non-Attribute"",
            ""weapon_rounds_type"": ""High-Power Rounds"",
            ""arche_type"": ""Singular""
        }, {
            ""rotation"": 2,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Fire"",
            ""weapon_rounds_type"": ""High-Power Rounds"",
            ""arche_type"": ""Fusion""
        }, {
            ""rotation"": 3,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Electric"",
            ""weapon_rounds_type"": ""General Rounds"",
            ""arche_type"": ""Singular""
        }, {
            ""rotation"": 4,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Chill"",
            ""weapon_rounds_type"": ""Impact Rounds"",
            ""arche_type"": ""Tech""
        }, {
            ""rotation"": 5,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Electric"",
            ""weapon_rounds_type"": ""Special Rounds"",
            ""arche_type"": ""Dimension""
        }, {
            ""rotation"": 6,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Non-Attribute"",
            ""weapon_rounds_type"": ""High-Power Rounds"",
            ""arche_type"": ""Dimension""
        }, {
            ""rotation"": 7,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Fire"",
            ""weapon_rounds_type"": ""Special Rounds"",
            ""arche_type"": ""Dimension""
        }, {
            ""rotation"": 8,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Non-Attribute"",
            ""weapon_rounds_type"": ""Special Rounds"",
            ""arche_type"": ""Fusion""
        }, {
            ""rotation"": 9,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Non-Attribute"",
            ""weapon_rounds_type"": ""General Rounds"",
            ""arche_type"": ""Singular""
        }, {
            ""rotation"": 10,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Fire"",
            ""weapon_rounds_type"": ""Impact Rounds"",
            ""arche_type"": ""Dimension""
        }, {
            ""rotation"": 11,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Toxic"",
            ""weapon_rounds_type"": ""High-Power Rounds"",
            ""arche_type"": ""Dimension""
        }, {
            ""rotation"": 12,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Non-Attribute"",
            ""weapon_rounds_type"": ""Impact Rounds"",
            ""arche_type"": ""Dimension""
        }, {
            ""rotation"": 13,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Electric"",
            ""weapon_rounds_type"": ""Special Rounds"",
            ""arche_type"": ""Fusion""
        }, {
            ""rotation"": 14,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Fire"",
            ""weapon_rounds_type"": ""High-Power Rounds"",
            ""arche_type"": ""Tech""
        }, {
            ""rotation"": 15,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Fire"",
            ""weapon_rounds_type"": ""Impact Rounds"",
            ""arche_type"": ""Tech""
        }, {
            ""rotation"": 16,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Electric"",
            ""weapon_rounds_type"": ""High-Power Rounds"",
            ""arche_type"": ""Dimension""
        }, {
            ""rotation"": 17,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Electric"",
            ""weapon_rounds_type"": ""General Rounds"",
            ""arche_type"": ""Fusion""
        }, {
            ""rotation"": 18,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Electric"",
            ""weapon_rounds_type"": ""Impact Rounds"",
            ""arche_type"": ""Fusion""
        }, {
            ""rotation"": 19,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Toxic"",
            ""weapon_rounds_type"": ""General Rounds"",
            ""arche_type"": ""Dimension""
        }, {
            ""rotation"": 20,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Electric"",
            ""weapon_rounds_type"": ""Impact Rounds"",
            ""arche_type"": ""Singular""
        }]
    }, {
        ""battle_zone_id"": ""604"",
        ""battle_zone_name"": ""Ironworks"",
        ""reward"": [{
            ""rotation"": 1,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Fire"",
            ""weapon_rounds_type"": ""Impact Rounds"",
            ""arche_type"": ""Fusion""
        }, {
            ""rotation"": 2,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Chill"",
            ""weapon_rounds_type"": ""Impact Rounds"",
            ""arche_type"": ""Singular""
        }, {
            ""rotation"": 3,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Fire"",
            ""weapon_rounds_type"": ""General Rounds"",
            ""arche_type"": ""Singular""
        }, {
            ""rotation"": 4,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Electric"",
            ""weapon_rounds_type"": ""Impact Rounds"",
            ""arche_type"": ""Fusion""
        }, {
            ""rotation"": 5,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Electric"",
            ""weapon_rounds_type"": ""Impact Rounds"",
            ""arche_type"": ""Dimension""
        }, {
            ""rotation"": 6,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Electric"",
            ""weapon_rounds_type"": ""Special Rounds"",
            ""arche_type"": ""Singular""
        }, {
            ""rotation"": 7,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Electric"",
            ""weapon_rounds_type"": ""Impact Rounds"",
            ""arche_type"": ""Singular""
        }, {
            ""rotation"": 8,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Toxic"",
            ""weapon_rounds_type"": ""High-Power Rounds"",
            ""arche_type"": ""Tech""
        }, {
            ""rotation"": 9,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Non-Attribute"",
            ""weapon_rounds_type"": ""Impact Rounds"",
            ""arche_type"": ""Fusion""
        }, {
            ""rotation"": 10,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Chill"",
            ""weapon_rounds_type"": ""Special Rounds"",
            ""arche_type"": ""Tech""
        }, {
            ""rotation"": 11,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Fire"",
            ""weapon_rounds_type"": ""Special Rounds"",
            ""arche_type"": ""Tech""
        }, {
            ""rotation"": 12,
            ""reward_type"": ""Sensor"",
            ""reactor_element_type"": null,
            ""weapon_rounds_type"": null,
            ""arche_type"": null
        }, {
            ""rotation"": 13,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Chill"",
            ""weapon_rounds_type"": ""General Rounds"",
            ""arche_type"": ""Singular""
        }, {
            ""rotation"": 14,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Electric"",
            ""weapon_rounds_type"": ""Special Rounds"",
            ""arche_type"": ""Dimension""
        }, {
            ""rotation"": 15,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Chill"",
            ""weapon_rounds_type"": ""Special Rounds"",
            ""arche_type"": ""Fusion""
        }, {
            ""rotation"": 16,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Toxic"",
            ""weapon_rounds_type"": ""Impact Rounds"",
            ""arche_type"": ""Dimension""
        }, {
            ""rotation"": 17,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Fire"",
            ""weapon_rounds_type"": ""High-Power Rounds"",
            ""arche_type"": ""Singular""
        }, {
            ""rotation"": 18,
            ""reward_type"": ""Processor"",
            ""reactor_element_type"": null,
            ""weapon_rounds_type"": null,
            ""arche_type"": null
        }, {
            ""rotation"": 19,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Non-Attribute"",
            ""weapon_rounds_type"": ""Impact Rounds"",
            ""arche_type"": ""Singular""
        }, {
            ""rotation"": 20,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Toxic"",
            ""weapon_rounds_type"": ""General Rounds"",
            ""arche_type"": ""Tech""
        }]
    }, {
        ""battle_zone_id"": ""605"",
        ""battle_zone_name"": ""Classified Area"",
        ""reward"": [{
            ""rotation"": 1,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Non-Attribute"",
            ""weapon_rounds_type"": ""General Rounds"",
            ""arche_type"": ""Tech""
        }, {
            ""rotation"": 2,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Fire"",
            ""weapon_rounds_type"": ""Special Rounds"",
            ""arche_type"": ""Dimension""
        }, {
            ""rotation"": 3,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Non-Attribute"",
            ""weapon_rounds_type"": ""Impact Rounds"",
            ""arche_type"": ""Tech""
        }, {
            ""rotation"": 4,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Electric"",
            ""weapon_rounds_type"": ""Special Rounds"",
            ""arche_type"": ""Fusion""
        }, {
            ""rotation"": 5,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Chill"",
            ""weapon_rounds_type"": ""High-Power Rounds"",
            ""arche_type"": ""Tech""
        }, {
            ""rotation"": 6,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Fire"",
            ""weapon_rounds_type"": ""High-Power Rounds"",
            ""arche_type"": ""Dimension""
        }, {
            ""rotation"": 7,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Chill"",
            ""weapon_rounds_type"": ""Special Rounds"",
            ""arche_type"": ""Fusion""
        }, {
            ""rotation"": 8,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Chill"",
            ""weapon_rounds_type"": ""General Rounds"",
            ""arche_type"": ""Tech""
        }, {
            ""rotation"": 9,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Toxic"",
            ""weapon_rounds_type"": ""Impact Rounds"",
            ""arche_type"": ""Tech""
        }, {
            ""rotation"": 10,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Non-Attribute"",
            ""weapon_rounds_type"": ""Special Rounds"",
            ""arche_type"": ""Dimension""
        }, {
            ""rotation"": 11,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Fire"",
            ""weapon_rounds_type"": ""General Rounds"",
            ""arche_type"": ""Dimension""
        }, {
            ""rotation"": 12,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Fire"",
            ""weapon_rounds_type"": ""General Rounds"",
            ""arche_type"": ""Tech""
        }, {
            ""rotation"": 13,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Non-Attribute"",
            ""weapon_rounds_type"": ""High-Power Rounds"",
            ""arche_type"": ""Dimension""
        }, {
            ""rotation"": 14,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Toxic"",
            ""weapon_rounds_type"": ""General Rounds"",
            ""arche_type"": ""Dimension""
        }, {
            ""rotation"": 15,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Non-Attribute"",
            ""weapon_rounds_type"": ""High-Power Rounds"",
            ""arche_type"": ""Singular""
        }, {
            ""rotation"": 16,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Toxic"",
            ""weapon_rounds_type"": ""General Rounds"",
            ""arche_type"": ""Tech""
        }, {
            ""rotation"": 17,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Chill"",
            ""weapon_rounds_type"": ""Impact Rounds"",
            ""arche_type"": ""Fusion""
        }, {
            ""rotation"": 18,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Non-Attribute"",
            ""weapon_rounds_type"": ""Special Rounds"",
            ""arche_type"": ""Singular""
        }, {
            ""rotation"": 19,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Fire"",
            ""weapon_rounds_type"": ""General Rounds"",
            ""arche_type"": ""Fusion""
        }, {
            ""rotation"": 20,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Non-Attribute"",
            ""weapon_rounds_type"": ""General Rounds"",
            ""arche_type"": ""Fusion""
        }]
    }]
}, {
    ""map_id"": ""610002007"",
    ""map_name"": ""Hagios"",
    ""battle_zone"": [{
        ""battle_zone_id"": ""901"",
        ""battle_zone_name"": ""Dune Base"",
        ""reward"": [{
            ""rotation"": 1,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Non-Attribute"",
            ""weapon_rounds_type"": ""Special Rounds"",
            ""arche_type"": ""Dimension""
        }, {
            ""rotation"": 2,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Non-Attribute"",
            ""weapon_rounds_type"": ""Impact Rounds"",
            ""arche_type"": ""Dimension""
        }, {
            ""rotation"": 3,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Non-Attribute"",
            ""weapon_rounds_type"": ""High-Power Rounds"",
            ""arche_type"": ""Tech""
        }, {
            ""rotation"": 4,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Chill"",
            ""weapon_rounds_type"": ""General Rounds"",
            ""arche_type"": ""Singular""
        }, {
            ""rotation"": 5,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Non-Attribute"",
            ""weapon_rounds_type"": ""Impact Rounds"",
            ""arche_type"": ""Tech""
        }, {
            ""rotation"": 6,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Chill"",
            ""weapon_rounds_type"": ""Special Rounds"",
            ""arche_type"": ""Tech""
        }, {
            ""rotation"": 7,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Non-Attribute"",
            ""weapon_rounds_type"": ""Impact Rounds"",
            ""arche_type"": ""Fusion""
        }, {
            ""rotation"": 8,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Non-Attribute"",
            ""weapon_rounds_type"": ""High-Power Rounds"",
            ""arche_type"": ""Fusion""
        }, {
            ""rotation"": 9,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Fire"",
            ""weapon_rounds_type"": ""High-Power Rounds"",
            ""arche_type"": ""Dimension""
        }, {
            ""rotation"": 10,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Chill"",
            ""weapon_rounds_type"": ""Impact Rounds"",
            ""arche_type"": ""Tech""
        }, {
            ""rotation"": 11,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Toxic"",
            ""weapon_rounds_type"": ""Impact Rounds"",
            ""arche_type"": ""Tech""
        }, {
            ""rotation"": 12,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Electric"",
            ""weapon_rounds_type"": ""Impact Rounds"",
            ""arche_type"": ""Singular""
        }, {
            ""rotation"": 13,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Toxic"",
            ""weapon_rounds_type"": ""High-Power Rounds"",
            ""arche_type"": ""Dimension""
        }, {
            ""rotation"": 14,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Non-Attribute"",
            ""weapon_rounds_type"": ""General Rounds"",
            ""arche_type"": ""Tech""
        }, {
            ""rotation"": 15,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Electric"",
            ""weapon_rounds_type"": ""High-Power Rounds"",
            ""arche_type"": ""Singular""
        }, {
            ""rotation"": 16,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Non-Attribute"",
            ""weapon_rounds_type"": ""Special Rounds"",
            ""arche_type"": ""Singular""
        }, {
            ""rotation"": 17,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Fire"",
            ""weapon_rounds_type"": ""Special Rounds"",
            ""arche_type"": ""Tech""
        }, {
            ""rotation"": 18,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Chill"",
            ""weapon_rounds_type"": ""General Rounds"",
            ""arche_type"": ""Fusion""
        }, {
            ""rotation"": 19,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Non-Attribute"",
            ""weapon_rounds_type"": ""Special Rounds"",
            ""arche_type"": ""Fusion""
        }, {
            ""rotation"": 20,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Fire"",
            ""weapon_rounds_type"": ""Impact Rounds"",
            ""arche_type"": ""Dimension""
        }]
    }, {
        ""battle_zone_id"": ""902"",
        ""battle_zone_name"": ""The Corrupted Zone"",
        ""reward"": [{
            ""rotation"": 1,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Electric"",
            ""weapon_rounds_type"": ""High-Power Rounds"",
            ""arche_type"": ""Singular""
        }, {
            ""rotation"": 2,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Non-Attribute"",
            ""weapon_rounds_type"": ""Impact Rounds"",
            ""arche_type"": ""Fusion""
        }, {
            ""rotation"": 3,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Electric"",
            ""weapon_rounds_type"": ""Impact Rounds"",
            ""arche_type"": ""Dimension""
        }, {
            ""rotation"": 4,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Electric"",
            ""weapon_rounds_type"": ""Special Rounds"",
            ""arche_type"": ""Singular""
        }, {
            ""rotation"": 5,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Fire"",
            ""weapon_rounds_type"": ""General Rounds"",
            ""arche_type"": ""Singular""
        }, {
            ""rotation"": 6,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Toxic"",
            ""weapon_rounds_type"": ""High-Power Rounds"",
            ""arche_type"": ""Tech""
        }, {
            ""rotation"": 7,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Non-Attribute"",
            ""weapon_rounds_type"": ""Special Rounds"",
            ""arche_type"": ""Tech""
        }, {
            ""rotation"": 8,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Fire"",
            ""weapon_rounds_type"": ""High-Power Rounds"",
            ""arche_type"": ""Tech""
        }, {
            ""rotation"": 9,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Chill"",
            ""weapon_rounds_type"": ""Special Rounds"",
            ""arche_type"": ""Singular""
        }, {
            ""rotation"": 10,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Fire"",
            ""weapon_rounds_type"": ""Special Rounds"",
            ""arche_type"": ""Singular""
        }, {
            ""rotation"": 11,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Non-Attribute"",
            ""weapon_rounds_type"": ""Special Rounds"",
            ""arche_type"": ""Singular""
        }, {
            ""rotation"": 12,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Toxic"",
            ""weapon_rounds_type"": ""Special Rounds"",
            ""arche_type"": ""Tech""
        }, {
            ""rotation"": 13,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Toxic"",
            ""weapon_rounds_type"": ""General Rounds"",
            ""arche_type"": ""Tech""
        }, {
            ""rotation"": 14,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Toxic"",
            ""weapon_rounds_type"": ""Impact Rounds"",
            ""arche_type"": ""Dimension""
        }, {
            ""rotation"": 15,
            ""reward_type"": ""Processor"",
            ""reactor_element_type"": null,
            ""weapon_rounds_type"": null,
            ""arche_type"": null
        }, {
            ""rotation"": 16,
            ""reward_type"": ""Memory"",
            ""reactor_element_type"": null,
            ""weapon_rounds_type"": null,
            ""arche_type"": null
        }, {
            ""rotation"": 17,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Non-Attribute"",
            ""weapon_rounds_type"": ""High-Power Rounds"",
            ""arche_type"": ""Fusion""
        }, {
            ""rotation"": 18,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Fire"",
            ""weapon_rounds_type"": ""General Rounds"",
            ""arche_type"": ""Dimension""
        }, {
            ""rotation"": 19,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Fire"",
            ""weapon_rounds_type"": ""General Rounds"",
            ""arche_type"": ""Tech""
        }, {
            ""rotation"": 20,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Fire"",
            ""weapon_rounds_type"": ""Special Rounds"",
            ""arche_type"": ""Fusion""
        }]
    }, {
        ""battle_zone_id"": ""903"",
        ""battle_zone_name"": ""Fractured Monolith"",
        ""reward"": [{
            ""rotation"": 1,
            ""reward_type"": ""Sensor"",
            ""reactor_element_type"": null,
            ""weapon_rounds_type"": null,
            ""arche_type"": null
        }, {
            ""rotation"": 2,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Electric"",
            ""weapon_rounds_type"": ""Special Rounds"",
            ""arche_type"": ""Dimension""
        }, {
            ""rotation"": 3,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Toxic"",
            ""weapon_rounds_type"": ""Impact Rounds"",
            ""arche_type"": ""Dimension""
        }, {
            ""rotation"": 4,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Fire"",
            ""weapon_rounds_type"": ""General Rounds"",
            ""arche_type"": ""Dimension""
        }, {
            ""rotation"": 5,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Toxic"",
            ""weapon_rounds_type"": ""General Rounds"",
            ""arche_type"": ""Dimension""
        }, {
            ""rotation"": 6,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Chill"",
            ""weapon_rounds_type"": ""Special Rounds"",
            ""arche_type"": ""Singular""
        }, {
            ""rotation"": 7,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Electric"",
            ""weapon_rounds_type"": ""Special Rounds"",
            ""arche_type"": ""Fusion""
        }, {
            ""rotation"": 8,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Chill"",
            ""weapon_rounds_type"": ""Impact Rounds"",
            ""arche_type"": ""Singular""
        }, {
            ""rotation"": 9,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Electric"",
            ""weapon_rounds_type"": ""High-Power Rounds"",
            ""arche_type"": ""Singular""
        }, {
            ""rotation"": 10,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Chill"",
            ""weapon_rounds_type"": ""General Rounds"",
            ""arche_type"": ""Singular""
        }, {
            ""rotation"": 11,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Chill"",
            ""weapon_rounds_type"": ""Impact Rounds"",
            ""arche_type"": ""Fusion""
        }, {
            ""rotation"": 12,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Fire"",
            ""weapon_rounds_type"": ""Impact Rounds"",
            ""arche_type"": ""Dimension""
        }, {
            ""rotation"": 13,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Fire"",
            ""weapon_rounds_type"": ""Special Rounds"",
            ""arche_type"": ""Dimension""
        }, {
            ""rotation"": 14,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Toxic"",
            ""weapon_rounds_type"": ""High-Power Rounds"",
            ""arche_type"": ""Tech""
        }, {
            ""rotation"": 15,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Fire"",
            ""weapon_rounds_type"": ""General Rounds"",
            ""arche_type"": ""Fusion""
        }, {
            ""rotation"": 16,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Fire"",
            ""weapon_rounds_type"": ""Impact Rounds"",
            ""arche_type"": ""Fusion""
        }, {
            ""rotation"": 17,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Fire"",
            ""weapon_rounds_type"": ""High-Power Rounds"",
            ""arche_type"": ""Fusion""
        }, {
            ""rotation"": 18,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Non-Attribute"",
            ""weapon_rounds_type"": ""General Rounds"",
            ""arche_type"": ""Singular""
        }, {
            ""rotation"": 19,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Fire"",
            ""weapon_rounds_type"": ""Impact Rounds"",
            ""arche_type"": ""Singular""
        }, {
            ""rotation"": 20,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Chill"",
            ""weapon_rounds_type"": ""General Rounds"",
            ""arche_type"": ""Tech""
        }]
    }, {
        ""battle_zone_id"": ""904"",
        ""battle_zone_name"": ""Forward Base"",
        ""reward"": [{
            ""rotation"": 1,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Non-Attribute"",
            ""weapon_rounds_type"": ""Impact Rounds"",
            ""arche_type"": ""Singular""
        }, {
            ""rotation"": 2,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Chill"",
            ""weapon_rounds_type"": ""General Rounds"",
            ""arche_type"": ""Fusion""
        }, {
            ""rotation"": 3,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Electric"",
            ""weapon_rounds_type"": ""High-Power Rounds"",
            ""arche_type"": ""Fusion""
        }, {
            ""rotation"": 4,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Non-Attribute"",
            ""weapon_rounds_type"": ""General Rounds"",
            ""arche_type"": ""Fusion""
        }, {
            ""rotation"": 5,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Electric"",
            ""weapon_rounds_type"": ""General Rounds"",
            ""arche_type"": ""Singular""
        }, {
            ""rotation"": 6,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Toxic"",
            ""weapon_rounds_type"": ""Special Rounds"",
            ""arche_type"": ""Dimension""
        }, {
            ""rotation"": 7,
            ""reward_type"": ""Memory"",
            ""reactor_element_type"": null,
            ""weapon_rounds_type"": null,
            ""arche_type"": null
        }, {
            ""rotation"": 8,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Fire"",
            ""weapon_rounds_type"": ""General Rounds"",
            ""arche_type"": ""Tech""
        }, {
            ""rotation"": 9,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Fire"",
            ""weapon_rounds_type"": ""General Rounds"",
            ""arche_type"": ""Singular""
        }, {
            ""rotation"": 10,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Toxic"",
            ""weapon_rounds_type"": ""High-Power Rounds"",
            ""arche_type"": ""Tech""
        }, {
            ""rotation"": 11,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Non-Attribute"",
            ""weapon_rounds_type"": ""General Rounds"",
            ""arche_type"": ""Singular""
        }, {
            ""rotation"": 12,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Non-Attribute"",
            ""weapon_rounds_type"": ""High-Power Rounds"",
            ""arche_type"": ""Fusion""
        }, {
            ""rotation"": 13,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Non-Attribute"",
            ""weapon_rounds_type"": ""High-Power Rounds"",
            ""arche_type"": ""Singular""
        }, {
            ""rotation"": 14,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Electric"",
            ""weapon_rounds_type"": ""High-Power Rounds"",
            ""arche_type"": ""Dimension""
        }, {
            ""rotation"": 15,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Electric"",
            ""weapon_rounds_type"": ""General Rounds"",
            ""arche_type"": ""Fusion""
        }, {
            ""rotation"": 16,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Electric"",
            ""weapon_rounds_type"": ""Special Rounds"",
            ""arche_type"": ""Singular""
        }, {
            ""rotation"": 17,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Chill"",
            ""weapon_rounds_type"": ""High-Power Rounds"",
            ""arche_type"": ""Singular""
        }, {
            ""rotation"": 18,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Chill"",
            ""weapon_rounds_type"": ""Impact Rounds"",
            ""arche_type"": ""Singular""
        }, {
            ""rotation"": 19,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Fire"",
            ""weapon_rounds_type"": ""Special Rounds"",
            ""arche_type"": ""Singular""
        }, {
            ""rotation"": 20,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Fire"",
            ""weapon_rounds_type"": ""Special Rounds"",
            ""arche_type"": ""Dimension""
        }]
    }, {
        ""battle_zone_id"": ""905"",
        ""battle_zone_name"": ""Starfall Road"",
        ""reward"": [{
            ""rotation"": 1,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Fire"",
            ""weapon_rounds_type"": ""Special Rounds"",
            ""arche_type"": ""Tech""
        }, {
            ""rotation"": 2,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Chill"",
            ""weapon_rounds_type"": ""Impact Rounds"",
            ""arche_type"": ""Tech""
        }, {
            ""rotation"": 3,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Chill"",
            ""weapon_rounds_type"": ""High-Power Rounds"",
            ""arche_type"": ""Tech""
        }, {
            ""rotation"": 4,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Fire"",
            ""weapon_rounds_type"": ""High-Power Rounds"",
            ""arche_type"": ""Dimension""
        }, {
            ""rotation"": 5,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Non-Attribute"",
            ""weapon_rounds_type"": ""Special Rounds"",
            ""arche_type"": ""Singular""
        }, {
            ""rotation"": 6,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Chill"",
            ""weapon_rounds_type"": ""General Rounds"",
            ""arche_type"": ""Tech""
        }, {
            ""rotation"": 7,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Chill"",
            ""weapon_rounds_type"": ""General Rounds"",
            ""arche_type"": ""Fusion""
        }, {
            ""rotation"": 8,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Fire"",
            ""weapon_rounds_type"": ""Special Rounds"",
            ""arche_type"": ""Fusion""
        }, {
            ""rotation"": 9,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Toxic"",
            ""weapon_rounds_type"": ""High-Power Rounds"",
            ""arche_type"": ""Dimension""
        }, {
            ""rotation"": 10,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Electric"",
            ""weapon_rounds_type"": ""General Rounds"",
            ""arche_type"": ""Dimension""
        }, {
            ""rotation"": 11,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Toxic"",
            ""weapon_rounds_type"": ""Special Rounds"",
            ""arche_type"": ""Dimension""
        }, {
            ""rotation"": 12,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Fire"",
            ""weapon_rounds_type"": ""High-Power Rounds"",
            ""arche_type"": ""Tech""
        }, {
            ""rotation"": 13,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Fire"",
            ""weapon_rounds_type"": ""Impact Rounds"",
            ""arche_type"": ""Fusion""
        }, {
            ""rotation"": 14,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Non-Attribute"",
            ""weapon_rounds_type"": ""Special Rounds"",
            ""arche_type"": ""Dimension""
        }, {
            ""rotation"": 15,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Electric"",
            ""weapon_rounds_type"": ""Impact Rounds"",
            ""arche_type"": ""Fusion""
        }, {
            ""rotation"": 16,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Non-Attribute"",
            ""weapon_rounds_type"": ""General Rounds"",
            ""arche_type"": ""Dimension""
        }, {
            ""rotation"": 17,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Chill"",
            ""weapon_rounds_type"": ""Special Rounds"",
            ""arche_type"": ""Fusion""
        }, {
            ""rotation"": 18,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Toxic"",
            ""weapon_rounds_type"": ""Special Rounds"",
            ""arche_type"": ""Tech""
        }, {
            ""rotation"": 19,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Fire"",
            ""weapon_rounds_type"": ""High-Power Rounds"",
            ""arche_type"": ""Singular""
        }, {
            ""rotation"": 20,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Non-Attribute"",
            ""weapon_rounds_type"": ""High-Power Rounds"",
            ""arche_type"": ""Dimension""
        }]
    }]
}, {
    ""map_id"": ""610002008"",
    ""map_name"": ""White-night Gulch"",
    ""battle_zone"": [{
        ""battle_zone_id"": ""1001"",
        ""battle_zone_name"": ""The Mountaintops"",
        ""reward"": [{
            ""rotation"": 1,
            ""reward_type"": ""Auxiliary Power"",
            ""reactor_element_type"": null,
            ""weapon_rounds_type"": null,
            ""arche_type"": null
        }, {
            ""rotation"": 2,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Electric"",
            ""weapon_rounds_type"": ""General Rounds"",
            ""arche_type"": ""Singular""
        }, {
            ""rotation"": 3,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Fire"",
            ""weapon_rounds_type"": ""General Rounds"",
            ""arche_type"": ""Tech""
        }, {
            ""rotation"": 4,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Non-Attribute"",
            ""weapon_rounds_type"": ""Special Rounds"",
            ""arche_type"": ""Dimension""
        }, {
            ""rotation"": 5,
            ""reward_type"": ""Memory"",
            ""reactor_element_type"": null,
            ""weapon_rounds_type"": null,
            ""arche_type"": null
        }, {
            ""rotation"": 6,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Fire"",
            ""weapon_rounds_type"": ""General Rounds"",
            ""arche_type"": ""Fusion""
        }, {
            ""rotation"": 7,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Chill"",
            ""weapon_rounds_type"": ""High-Power Rounds"",
            ""arche_type"": ""Singular""
        }, {
            ""rotation"": 8,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Fire"",
            ""weapon_rounds_type"": ""Impact Rounds"",
            ""arche_type"": ""Tech""
        }, {
            ""rotation"": 9,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Chill"",
            ""weapon_rounds_type"": ""High-Power Rounds"",
            ""arche_type"": ""Tech""
        }, {
            ""rotation"": 10,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Non-Attribute"",
            ""weapon_rounds_type"": ""General Rounds"",
            ""arche_type"": ""Fusion""
        }, {
            ""rotation"": 11,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Non-Attribute"",
            ""weapon_rounds_type"": ""Impact Rounds"",
            ""arche_type"": ""Fusion""
        }, {
            ""rotation"": 12,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Chill"",
            ""weapon_rounds_type"": ""General Rounds"",
            ""arche_type"": ""Tech""
        }, {
            ""rotation"": 13,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Toxic"",
            ""weapon_rounds_type"": ""Impact Rounds"",
            ""arche_type"": ""Tech""
        }, {
            ""rotation"": 14,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Fire"",
            ""weapon_rounds_type"": ""High-Power Rounds"",
            ""arche_type"": ""Singular""
        }, {
            ""rotation"": 15,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Fire"",
            ""weapon_rounds_type"": ""Impact Rounds"",
            ""arche_type"": ""Singular""
        }, {
            ""rotation"": 16,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Electric"",
            ""weapon_rounds_type"": ""High-Power Rounds"",
            ""arche_type"": ""Fusion""
        }, {
            ""rotation"": 17,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Toxic"",
            ""weapon_rounds_type"": ""High-Power Rounds"",
            ""arche_type"": ""Dimension""
        }, {
            ""rotation"": 18,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Electric"",
            ""weapon_rounds_type"": ""General Rounds"",
            ""arche_type"": ""Dimension""
        }, {
            ""rotation"": 19,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Electric"",
            ""weapon_rounds_type"": ""High-Power Rounds"",
            ""arche_type"": ""Singular""
        }, {
            ""rotation"": 20,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Non-Attribute"",
            ""weapon_rounds_type"": ""Special Rounds"",
            ""arche_type"": ""Singular""
        }]
    }, {
        ""battle_zone_id"": ""1002"",
        ""battle_zone_name"": ""Moongrave Basin"",
        ""reward"": [{
            ""rotation"": 1,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Toxic"",
            ""weapon_rounds_type"": ""Special Rounds"",
            ""arche_type"": ""Tech""
        }, {
            ""rotation"": 2,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Non-Attribute"",
            ""weapon_rounds_type"": ""Special Rounds"",
            ""arche_type"": ""Dimension""
        }, {
            ""rotation"": 3,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Electric"",
            ""weapon_rounds_type"": ""General Rounds"",
            ""arche_type"": ""Dimension""
        }, {
            ""rotation"": 4,
            ""reward_type"": ""Sensor"",
            ""reactor_element_type"": null,
            ""weapon_rounds_type"": null,
            ""arche_type"": null
        }, {
            ""rotation"": 5,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Non-Attribute"",
            ""weapon_rounds_type"": ""High-Power Rounds"",
            ""arche_type"": ""Fusion""
        }, {
            ""rotation"": 6,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Non-Attribute"",
            ""weapon_rounds_type"": ""Special Rounds"",
            ""arche_type"": ""Fusion""
        }, {
            ""rotation"": 7,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Toxic"",
            ""weapon_rounds_type"": ""Special Rounds"",
            ""arche_type"": ""Dimension""
        }, {
            ""rotation"": 8,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Fire"",
            ""weapon_rounds_type"": ""Special Rounds"",
            ""arche_type"": ""Singular""
        }, {
            ""rotation"": 9,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Electric"",
            ""weapon_rounds_type"": ""Special Rounds"",
            ""arche_type"": ""Fusion""
        }, {
            ""rotation"": 10,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Electric"",
            ""weapon_rounds_type"": ""Impact Rounds"",
            ""arche_type"": ""Singular""
        }, {
            ""rotation"": 11,
            ""reward_type"": ""Processor"",
            ""reactor_element_type"": null,
            ""weapon_rounds_type"": null,
            ""arche_type"": null
        }, {
            ""rotation"": 12,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Electric"",
            ""weapon_rounds_type"": ""High-Power Rounds"",
            ""arche_type"": ""Fusion""
        }, {
            ""rotation"": 13,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Fire"",
            ""weapon_rounds_type"": ""General Rounds"",
            ""arche_type"": ""Dimension""
        }, {
            ""rotation"": 14,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Non-Attribute"",
            ""weapon_rounds_type"": ""Special Rounds"",
            ""arche_type"": ""Tech""
        }, {
            ""rotation"": 15,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Chill"",
            ""weapon_rounds_type"": ""General Rounds"",
            ""arche_type"": ""Fusion""
        }, {
            ""rotation"": 16,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Chill"",
            ""weapon_rounds_type"": ""High-Power Rounds"",
            ""arche_type"": ""Singular""
        }, {
            ""rotation"": 17,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Non-Attribute"",
            ""weapon_rounds_type"": ""General Rounds"",
            ""arche_type"": ""Fusion""
        }, {
            ""rotation"": 18,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Non-Attribute"",
            ""weapon_rounds_type"": ""Impact Rounds"",
            ""arche_type"": ""Singular""
        }, {
            ""rotation"": 19,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Non-Attribute"",
            ""weapon_rounds_type"": ""High-Power Rounds"",
            ""arche_type"": ""Singular""
        }, {
            ""rotation"": 20,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Chill"",
            ""weapon_rounds_type"": ""Impact Rounds"",
            ""arche_type"": ""Singular""
        }]
    }, {
        ""battle_zone_id"": ""1003"",
        ""battle_zone_name"": ""Observatory"",
        ""reward"": [{
            ""rotation"": 1,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Non-Attribute"",
            ""weapon_rounds_type"": ""Special Rounds"",
            ""arche_type"": ""Tech""
        }, {
            ""rotation"": 2,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Fire"",
            ""weapon_rounds_type"": ""Special Rounds"",
            ""arche_type"": ""Singular""
        }, {
            ""rotation"": 3,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Toxic"",
            ""weapon_rounds_type"": ""General Rounds"",
            ""arche_type"": ""Dimension""
        }, {
            ""rotation"": 4,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Toxic"",
            ""weapon_rounds_type"": ""High-Power Rounds"",
            ""arche_type"": ""Dimension""
        }, {
            ""rotation"": 5,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Electric"",
            ""weapon_rounds_type"": ""High-Power Rounds"",
            ""arche_type"": ""Singular""
        }, {
            ""rotation"": 6,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Electric"",
            ""weapon_rounds_type"": ""Impact Rounds"",
            ""arche_type"": ""Fusion""
        }, {
            ""rotation"": 7,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Fire"",
            ""weapon_rounds_type"": ""High-Power Rounds"",
            ""arche_type"": ""Tech""
        }, {
            ""rotation"": 8,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Non-Attribute"",
            ""weapon_rounds_type"": ""General Rounds"",
            ""arche_type"": ""Tech""
        }, {
            ""rotation"": 9,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Chill"",
            ""weapon_rounds_type"": ""Impact Rounds"",
            ""arche_type"": ""Fusion""
        }, {
            ""rotation"": 10,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Chill"",
            ""weapon_rounds_type"": ""General Rounds"",
            ""arche_type"": ""Tech""
        }, {
            ""rotation"": 11,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Fire"",
            ""weapon_rounds_type"": ""General Rounds"",
            ""arche_type"": ""Singular""
        }, {
            ""rotation"": 12,
            ""reward_type"": ""Auxiliary Power"",
            ""reactor_element_type"": null,
            ""weapon_rounds_type"": null,
            ""arche_type"": null
        }, {
            ""rotation"": 13,
            ""reward_type"": ""Memory"",
            ""reactor_element_type"": null,
            ""weapon_rounds_type"": null,
            ""arche_type"": null
        }, {
            ""rotation"": 14,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Fire"",
            ""weapon_rounds_type"": ""Impact Rounds"",
            ""arche_type"": ""Dimension""
        }, {
            ""rotation"": 15,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Non-Attribute"",
            ""weapon_rounds_type"": ""Impact Rounds"",
            ""arche_type"": ""Dimension""
        }, {
            ""rotation"": 16,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Non-Attribute"",
            ""weapon_rounds_type"": ""High-Power Rounds"",
            ""arche_type"": ""Tech""
        }, {
            ""rotation"": 17,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Toxic"",
            ""weapon_rounds_type"": ""Impact Rounds"",
            ""arche_type"": ""Tech""
        }, {
            ""rotation"": 18,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Fire"",
            ""weapon_rounds_type"": ""High-Power Rounds"",
            ""arche_type"": ""Dimension""
        }, {
            ""rotation"": 19,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Electric"",
            ""weapon_rounds_type"": ""Special Rounds"",
            ""arche_type"": ""Singular""
        }, {
            ""rotation"": 20,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Non-Attribute"",
            ""weapon_rounds_type"": ""General Rounds"",
            ""arche_type"": ""Singular""
        }]
    }, {
        ""battle_zone_id"": ""1004"",
        ""battle_zone_name"": ""Shipment Base"",
        ""reward"": [{
            ""rotation"": 1,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Electric"",
            ""weapon_rounds_type"": ""Special Rounds"",
            ""arche_type"": ""Fusion""
        }, {
            ""rotation"": 2,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Non-Attribute"",
            ""weapon_rounds_type"": ""Special Rounds"",
            ""arche_type"": ""Fusion""
        }, {
            ""rotation"": 3,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Fire"",
            ""weapon_rounds_type"": ""Impact Rounds"",
            ""arche_type"": ""Fusion""
        }, {
            ""rotation"": 4,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Fire"",
            ""weapon_rounds_type"": ""Special Rounds"",
            ""arche_type"": ""Tech""
        }, {
            ""rotation"": 5,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Fire"",
            ""weapon_rounds_type"": ""High-Power Rounds"",
            ""arche_type"": ""Tech""
        }, {
            ""rotation"": 6,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Non-Attribute"",
            ""weapon_rounds_type"": ""High-Power Rounds"",
            ""arche_type"": ""Singular""
        }, {
            ""rotation"": 7,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Electric"",
            ""weapon_rounds_type"": ""General Rounds"",
            ""arche_type"": ""Singular""
        }, {
            ""rotation"": 8,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Non-Attribute"",
            ""weapon_rounds_type"": ""Special Rounds"",
            ""arche_type"": ""Dimension""
        }, {
            ""rotation"": 9,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Chill"",
            ""weapon_rounds_type"": ""General Rounds"",
            ""arche_type"": ""Fusion""
        }, {
            ""rotation"": 10,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Electric"",
            ""weapon_rounds_type"": ""High-Power Rounds"",
            ""arche_type"": ""Fusion""
        }, {
            ""rotation"": 11,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Fire"",
            ""weapon_rounds_type"": ""High-Power Rounds"",
            ""arche_type"": ""Fusion""
        }, {
            ""rotation"": 12,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Chill"",
            ""weapon_rounds_type"": ""General Rounds"",
            ""arche_type"": ""Singular""
        }, {
            ""rotation"": 13,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Fire"",
            ""weapon_rounds_type"": ""General Rounds"",
            ""arche_type"": ""Fusion""
        }, {
            ""rotation"": 14,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Electric"",
            ""weapon_rounds_type"": ""General Rounds"",
            ""arche_type"": ""Fusion""
        }, {
            ""rotation"": 15,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Chill"",
            ""weapon_rounds_type"": ""High-Power Rounds"",
            ""arche_type"": ""Tech""
        }, {
            ""rotation"": 16,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Fire"",
            ""weapon_rounds_type"": ""Special Rounds"",
            ""arche_type"": ""Dimension""
        }, {
            ""rotation"": 17,
            ""reward_type"": ""Sensor"",
            ""reactor_element_type"": null,
            ""weapon_rounds_type"": null,
            ""arche_type"": null
        }, {
            ""rotation"": 18,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Non-Attribute"",
            ""weapon_rounds_type"": ""Impact Rounds"",
            ""arche_type"": ""Dimension""
        }, {
            ""rotation"": 19,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Toxic"",
            ""weapon_rounds_type"": ""High-Power Rounds"",
            ""arche_type"": ""Tech""
        }, {
            ""rotation"": 20,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Non-Attribute"",
            ""weapon_rounds_type"": ""Impact Rounds"",
            ""arche_type"": ""Tech""
        }]
    }, {
        ""battle_zone_id"": ""1005"",
        ""battle_zone_name"": ""Hatchery"",
        ""reward"": [{
            ""rotation"": 1,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Chill"",
            ""weapon_rounds_type"": ""Special Rounds"",
            ""arche_type"": ""Tech""
        }, {
            ""rotation"": 2,
            ""reward_type"": ""Processor"",
            ""reactor_element_type"": null,
            ""weapon_rounds_type"": null,
            ""arche_type"": null
        }, {
            ""rotation"": 3,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Fire"",
            ""weapon_rounds_type"": ""High-Power Rounds"",
            ""arche_type"": ""Singular""
        }, {
            ""rotation"": 4,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Fire"",
            ""weapon_rounds_type"": ""Impact Rounds"",
            ""arche_type"": ""Singular""
        }, {
            ""rotation"": 5,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Fire"",
            ""weapon_rounds_type"": ""Special Rounds"",
            ""arche_type"": ""Fusion""
        }, {
            ""rotation"": 6,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Chill"",
            ""weapon_rounds_type"": ""Impact Rounds"",
            ""arche_type"": ""Tech""
        }, {
            ""rotation"": 7,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Fire"",
            ""weapon_rounds_type"": ""General Rounds"",
            ""arche_type"": ""Dimension""
        }, {
            ""rotation"": 8,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Electric"",
            ""weapon_rounds_type"": ""General Rounds"",
            ""arche_type"": ""Dimension""
        }, {
            ""rotation"": 9,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Chill"",
            ""weapon_rounds_type"": ""Special Rounds"",
            ""arche_type"": ""Fusion""
        }, {
            ""rotation"": 10,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Chill"",
            ""weapon_rounds_type"": ""Impact Rounds"",
            ""arche_type"": ""Singular""
        }, {
            ""rotation"": 11,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Electric"",
            ""weapon_rounds_type"": ""Special Rounds"",
            ""arche_type"": ""Dimension""
        }, {
            ""rotation"": 12,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Fire"",
            ""weapon_rounds_type"": ""Impact Rounds"",
            ""arche_type"": ""Tech""
        }, {
            ""rotation"": 13,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Non-Attribute"",
            ""weapon_rounds_type"": ""General Rounds"",
            ""arche_type"": ""Dimension""
        }, {
            ""rotation"": 14,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Fire"",
            ""weapon_rounds_type"": ""General Rounds"",
            ""arche_type"": ""Tech""
        }, {
            ""rotation"": 15,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Non-Attribute"",
            ""weapon_rounds_type"": ""General Rounds"",
            ""arche_type"": ""Fusion""
        }, {
            ""rotation"": 16,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Chill"",
            ""weapon_rounds_type"": ""High-Power Rounds"",
            ""arche_type"": ""Fusion""
        }, {
            ""rotation"": 17,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Non-Attribute"",
            ""weapon_rounds_type"": ""General Rounds"",
            ""arche_type"": ""Tech""
        }, {
            ""rotation"": 18,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Electric"",
            ""weapon_rounds_type"": ""High-Power Rounds"",
            ""arche_type"": ""Fusion""
        }, {
            ""rotation"": 19,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Toxic"",
            ""weapon_rounds_type"": ""Impact Rounds"",
            ""arche_type"": ""Tech""
        }, {
            ""rotation"": 20,
            ""reward_type"": ""Reactor"",
            ""reactor_element_type"": ""Electric"",
            ""weapon_rounds_type"": ""High-Power Rounds"",
            ""arche_type"": ""Dimension""
        }]
    }]
}, {
    ""map_id"": ""610002009"",
    ""map_name"": ""Undecided Zone"",
    ""battle_zone"": []
}, {
    ""map_id"": ""610002010"",
    ""map_name"": ""Hagios"",
    ""battle_zone"": []
}, {
    ""map_id"": ""610003001"",
    ""map_name"": ""Void Intercept Battle Location"",
    ""battle_zone"": []
}, {
    ""map_id"": ""610003002"",
    ""map_name"": ""Void Intercept Battle Location"",
    ""battle_zone"": []
}, {
    ""map_id"": ""610003003"",
    ""map_name"": ""Void Intercept Battle Location"",
    ""battle_zone"": []
}, {
    ""map_id"": ""610005001"",
    ""map_name"": ""Vespers"",
    ""battle_zone"": []
}, {
    ""map_id"": ""610005002"",
    ""map_name"": ""Vespers"",
    ""battle_zone"": []
}, {
    ""map_id"": ""610005003"",
    ""map_name"": ""Kingston"",
    ""battle_zone"": []
}, {
    ""map_id"": ""610005004"",
    ""map_name"": ""Kingston"",
    ""battle_zone"": []
}, {
    ""map_id"": ""610005005"",
    ""map_name"": ""Agna Desert"",
    ""battle_zone"": []
}, {
    ""map_id"": ""610005006"",
    ""map_name"": ""Agna Desert"",
    ""battle_zone"": []
}, {
    ""map_id"": ""610005007"",
    ""map_name"": ""Echo Swamp"",
    ""battle_zone"": []
}, {
    ""map_id"": ""610005008"",
    ""map_name"": ""Echo Swamp"",
    ""battle_zone"": []
}, {
    ""map_id"": ""610005009"",
    ""map_name"": ""Fortress"",
    ""battle_zone"": []
}, {
    ""map_id"": ""610005010"",
    ""map_name"": ""Fortress"",
    ""battle_zone"": []
}, {
    ""map_id"": ""610005011"",
    ""map_name"": ""Sterile Land"",
    ""battle_zone"": []
}, {
    ""map_id"": ""610005012"",
    ""map_name"": ""Sterile Land"",
    ""battle_zone"": []
}, {
    ""map_id"": ""610005013"",
    ""map_name"": ""Hagios"",
    ""battle_zone"": []
}, {
    ""map_id"": ""610005014"",
    ""map_name"": ""Hagios"",
    ""battle_zone"": []
}, {
    ""map_id"": ""610005015"",
    ""map_name"": ""White-night Gulch"",
    ""battle_zone"": []
}, {
    ""map_id"": ""610005016"",
    ""map_name"": ""White-night Gulch"",
    ""battle_zone"": []
}, {
    ""map_id"": ""610006001"",
    ""map_name"": ""Laboratory"",
    ""battle_zone"": []
}]"
b7ac7mB9,üéÅ G2A.COM FREE GIFT CARD GUIDE JULY 2024 V4üéÅ,wwxcwx,GetText,Wednesday 3rd of July 2024 05:44:46 PM CDT,"G2A.com free gift card & games updated guide.
Any item for free on G2A.com including Amazon, Steam, Xbox, Playstation gift cards & everything else offered.

This is the most up to date version of this script. Any other one posted will not work
 
PDF guide here:
https://drive.google.com/file/d/1KMb0fLkKHIC2qdjR4vCSRH9rVSjJVMdX/view

Working as of:
04 > 09 July 2024"
ZA5v7KS3,"""Button Callbacks"" rev_29",pleasedontcode,Arduino,Wednesday 3rd of July 2024 05:33:43 PM CDT,"/********* Pleasedontcode.com **********

	Pleasedontcode thanks you for automatic code generation! Enjoy your code!

	- Terms and Conditions:
	You have a non-exclusive, revocable, worldwide, royalty-free license
	for personal and commercial use. Attribution is optional; modifications
	are allowed, but you're responsible for code maintenance. We're not
	liable for any loss or damage. For full terms,
	please visit pleasedontcode.com/termsandconditions.

	- Project: ""Button Callbacks""
	- Source Code compiled for: ESP32 DevKit V1
	- Source Code created on: 2024-07-03 22:32:48

********* Pleasedontcode.com **********/

/****** SYSTEM REQUIREMENTS *****/
/****** SYSTEM REQUIREMENT 1 *****/
	/* print on serial button state. */
/****** END SYSTEM REQUIREMENTS *****/


/****** DEFINITION OF LIBRARIES *****/
#include <EasyButton.h>  //https://github.com/evert-arias/EasyButton

/****** FUNCTION PROTOTYPES *****/
void setup(void);
void loop(void);
void onPressed();

/***** DEFINITION OF DIGITAL INPUT PINS *****/
const uint8_t button_PushButton_PIN_D4 = 4;

/****** DEFINITION OF LIBRARIES CLASS INSTANCES*****/
EasyButton button(button_PushButton_PIN_D4);  // Initialize EasyButton instance

// Callback function to be called when the button is pressed.
void onPressed()
{
  Serial.println(""Button pressed"");
}

void setup(void)
{
  // Initialize Serial for debugging purposes.
  Serial.begin(115200);
  Serial.println();
  Serial.println("">>> EasyButton pressed example <<<"");

  // Initialize the button.
  button.begin();
  // Add the callback function to be called when the button is pressed.
  button.onPressed(onPressed);
}

void loop(void)
{
  // Continuously read the status of the button.
  button.read();

  // Print the current state of the button to the Serial monitor.
  static bool lastState = !button.isPressed();  // Initialize with opposite state
  bool currentState = button.isPressed();

  if (currentState != lastState) {
    if (currentState) {
      Serial.println(""Button is currently pressed"");
    } else {
      Serial.println(""Button is currently released"");
    }
    lastState = currentState;
  }
}

/* END CODE */"
ew6LxSSp,"""Button Detection"" rev_28",pleasedontcode,Arduino,Wednesday 3rd of July 2024 05:32:28 PM CDT,"/********* Pleasedontcode.com **********

	Pleasedontcode thanks you for automatic code generation! Enjoy your code!

	- Terms and Conditions:
	You have a non-exclusive, revocable, worldwide, royalty-free license
	for personal and commercial use. Attribution is optional; modifications
	are allowed, but you're responsible for code maintenance. We're not
	liable for any loss or damage. For full terms,
	please visit pleasedontcode.com/termsandconditions.

	- Project: ""Button Detection""
	- Source Code NOT compiled for: ESP32 DevKit V1
	- Source Code created on: 2024-07-03 22:31:43

********* Pleasedontcode.com **********/

/****** SYSTEM REQUIREMENTS *****/
/****** SYSTEM REQUIREMENT 1 *****/
	/* print on serial button state. */
/****** END SYSTEM REQUIREMENTS *****/

/****** DEFINITION OF LIBRARIES *****/
#include <EasyButton.h>  //https://github.com/evert-arias/EasyButton

/****** FUNCTION PROTOTYPES *****/
void setup(void);
void loop(void);
void onPressed();

/***** DEFINITION OF DIGITAL INPUT PINS *****/
const uint8_t button_PushButton_PIN_D4 = 4;

/****** DEFINITION OF LIBRARIES CLASS INSTANCES*****/
EasyButton button(button_PushButton_PIN_D4);  // Initialize EasyButton instance

// Callback function to be called when the button is pressed.
void onPressed()
{
  Serial.println(""Button pressed"");
}

void setup(void)
{
  // Initialize Serial for debugging purposes.
  Serial.begin(115200);
  Serial.println();
  Serial.println("">>> EasyButton pressed example <<<"");

  // Initialize the button.
  button.begin();
  // Add the callback function to be called when the button is pressed.
  button.onPressed(onPressed);
}

void loop(void)
{
  // Continuously read the status of the button.
  button.read();

  // Print the current state of the button to the Serial monitor.
  static bool lastState = !button.isPressed();  // Initialize with opposite state
  bool currentState = button.isPressed();

  if (currentState != lastState) {
    if (currentState) {
      Serial.println(""Button is currently pressed"");
    } else {
      Serial.println(""Button is currently released"");
    }
    lastState = currentState;
  }
}

/* END CODE */"
U1Pz4VT1,"""Button Detection"" rev_27",pleasedontcode,Arduino,Wednesday 3rd of July 2024 05:21:20 PM CDT,"/********* Pleasedontcode.com **********

	Pleasedontcode thanks you for automatic code generation! Enjoy your code!

	- Terms and Conditions:
	You have a non-exclusive, revocable, worldwide, royalty-free license
	for personal and commercial use. Attribution is optional; modifications
	are allowed, but you're responsible for code maintenance. We're not
	liable for any loss or damage. For full terms,
	please visit pleasedontcode.com/termsandconditions.

	- Project: ""Button Detection""
	- Source Code compiled for: ESP32 DevKit V1
	- Source Code created on: 2024-07-03 22:20:10

********* Pleasedontcode.com **********/

/****** SYSTEM REQUIREMENTS *****/
/****** SYSTEM REQUIREMENT 1 *****/
	/* print on serial button state. */
/****** END SYSTEM REQUIREMENTS *****/


/****** DEFINITION OF LIBRARIES *****/
#include <EasyButton.h>  //https://github.com/evert-arias/EasyButton

/****** FUNCTION PROTOTYPES *****/
void setup(void);
void loop(void);
void onPressed(void);  // Prototype for the button press callback function

/***** DEFINITION OF DIGITAL INPUT PINS *****/
const uint8_t button_PushButton_PIN_D4 = 4;

/****** DEFINITION OF LIBRARIES CLASS INSTANCES*****/
EasyButton button(button_PushButton_PIN_D4);  // Initialize EasyButton object with the pin number

void onPressed()
{
  Serial.println(""Button pressed"");  // Callback function to handle button press
}

void setup(void)
{
  // put your setup code here, to run once:
  Serial.begin(115200);  // Initialize serial communication
  Serial.println();
  Serial.println("">>> EasyButton pressed example <<<"");

  button.begin();  // Initialize the button
  button.onPressed(onPressed);  // Attach the callback function to the button press event
}

void loop(void)
{
  // put your main code here, to run repeatedly:
  button.read();  // Read the button state

  // Print the current button state
  if (button.isPressed()) {
    Serial.println(""Button is currently pressed"");
  } else {
    Serial.println(""Button is currently released"");
  }

  delay(100);  // Add a small delay to avoid flooding the serial monitor
}

/* END CODE */"
ACsdkDgY,Button Detection rev_26,pleasedontcode,Arduino,Wednesday 3rd of July 2024 05:19:31 PM CDT,"/********* Pleasedontcode.com **********

	Pleasedontcode thanks you for automatic code generation! Enjoy your code!

	- Terms and Conditions:
	You have a non-exclusive, revocable, worldwide, royalty-free license
	for personal and commercial use. Attribution is optional; modifications
	are allowed, but you're responsible for code maintenance. We're not
	liable for any loss or damage. For full terms,
	please visit pleasedontcode.com/termsandconditions.

	- Project: Button Detection
	- Source Code NOT compiled for: ESP32 DevKit V1
	- Source Code created on: 2024-07-03 22:18:30

********* Pleasedontcode.com **********/

/****** SYSTEM REQUIREMENTS *****/
/****** SYSTEM REQUIREMENT 1 *****/
	/* print on serial button state. */
/****** END SYSTEM REQUIREMENTS *****/

/****** DEFINITION OF LIBRARIES *****/
#include <EasyButton.h>  //https://github.com/evert-arias/EasyButton

/****** FUNCTION PROTOTYPES *****/
void setup(void);
void loop(void);
void onPressed(void);  // Prototype for the button press callback function

/***** DEFINITION OF DIGITAL INPUT PINS *****/
const uint8_t button_PushButton_PIN_D4 = 4;

/****** DEFINITION OF LIBRARIES CLASS INSTANCES*****/
EasyButton button(button_PushButton_PIN_D4);  // Initialize EasyButton object with the pin number

void onPressed()
{
  Serial.println(""Button pressed"");  // Callback function to handle button press
}

void setup(void)
{
  // put your setup code here, to run once:
  Serial.begin(115200);  // Initialize serial communication
  Serial.println();
  Serial.println("">>> EasyButton pressed example <<<"");

  button.begin();  // Initialize the button
  button.onPressed(onPressed);  // Attach the callback function to the button press event
}

void loop(void)
{
  // put your main code here, to run repeatedly:
  button.read();  // Read the button state

  // Print the current button state
  if (button.isPressed()) {
    Serial.println(""Button is currently pressed"");
  } else {
    Serial.println(""Button is currently released"");
  }

  delay(100);  // Add a small delay to avoid flooding the serial monitor
}

/* END CODE */"
aFUBWY02,T≈Çumaczenia SPACECLIENT,pierdziadek,JSON,Wednesday 3rd of July 2024 05:11:09 PM CDT,"{
	""English"": {
		""HOME"": ""Home"",
		""SERVERS"": ""Servers"",
		""SETTINGS"": ""Settings"",
		""WARDROBE"": ""Wardrobe"",
		""LOG_OUT"": ""LOG OUT"",
		""LAUNCH"": ""LAUNCH"",
		""READY_TO_LAUNCH"": ""READY TO LAUNCH"",
		""UNKNOWN"": ""UNKNOWN"",
		""VERSION"": ""Version"",
		""CONNECT"": ""CONNECT"",
		""GENERAL_SETTINGS"": ""General Settings"",
		""LANGUAGE"": ""LANGUAGE"",
		""GAME_WINDOW_SIZE"": ""GAME WINDOW SIZE"",
		""SHOW_LOGS_ON_START"": ""SHOW LOGS ON START"",
		""YES_SHOW_LOGS"": ""Yes (show logs)"",
		""NO"": ""No"",
		""MEMORY_SETTINGS"": ""Memory settings"",
		""RAM_ALLOCATION"": ""RAM ALLOCATION"",
		""ACCESSIBLE"": ""ACCESSIBLE"",
		""ACCOUNT"": ""ACCOUNT"",
		""USERNAME"": ""USERNAME"",
		""EMAIL"": ""E-MAIL"",
		""LAST_LOGIN_DATE"": ""LAST LOGIN DATE"",
		""SYSTEM_INFORMATION"": ""SYSTEM INFORMATION"",
		""ACCOUNT_CREATION_DATE"": ""ACCOUNT CREATION DATE"",
		""MEMORY"": ""MEMORY"",
		""ABOUT_US"": ""ABOUT US"",
		""WEBSITE"": ""WEBSITE"",
		""WELCOME_TO_THE_WORLD_OF"": ""WELCOME TO THE WORLD OF"",
		""OR"": ""OR"",
		""ENTER_YOUR_NICKNAME"": ""Enter your nickname"",
		""ENTER_YOUR_EMAIL_ADDRESS"": ""Enter your e-mail address"",
		""ENTER_YOUR_PASSWORD"": ""Enter your password"",
		""CONFIRM_YOUR_PASSWORD"": ""Confirm your password"",
		""REGISTER"": ""REGISTER"",
		""LOG_IN"": ""LOG IN"",
		""ALREADY_HAVE_AN_ACCOUNT"": ""ALREADY HAVE AN ACCOUNT?"",
		""DO_NOT_HAVE_AN_ACCOUNT"": ""DO NOT HAVE AN ACCOUNT?"",
		""BACK"": ""BACK"",
		""TO_LOGIN"": ""TO LOGIN"",
		""TO_MAIN_MENU"": ""TO MAIN MENU"",
		""TO_REGISTER"": ""TO REGISTER"",
		""CHOOSE_MODE_OF_YOUR"": ""CHOOSE MODE OF YOUR"",
		""MINECRAFT_ACCOUNT"": ""MINECRAFT ACCOUNT"",
		""LOG_IN_WITH_YOUR_PREMIUM_ACCOUNT"": ""‚ìò Log in with your premium account."",
		""LOG_IN_WITHOUT_A_PREMIUM_ACCOUNT"": ""‚ìò Log in without a premium account by entering your nickname."",
		""CONFIRM"": ""CONFIRM"",
		""ONLINE"": ""Online: "",
		""IP"": ""IP: "",
		""SERVER_VERSION"": ""Version: "",
		""UNDEFINED"": ""UNDEFINED"",
		""JOIN_TO_SERVERS"": ""JOIN TO SERVERS"",
		""COOPERATING_WITH_US"": ""COOPERATING WITH US"",
		""CREATE_APPLICATION_ON_DISCORD"": ""Just create an application on our Discord server in the request channel,&#10;then wait for the administrator's response.&#10;&#10;&#10;Our client's administration is not responding in any way for&#10;storing/saving data throught servers cooperating."",
		""SESSION_EXPIRED"": ""YOUR SESSION EXPIRED!"",
		""SESSION_EXPIRED_INFO1"": ""‚ìò Failed to automatically log into microsoft account, log"",
		""SESSION_EXPIRED_INFO2"": ""in to the microsoft account used on this account"",
		""SESSION_EXPIRED_INFO3"": ""spaceclient"",
		""YOUR_MINECRAFT_NICKNAME"": ""‚ìò Your minecraft nickname: "",
		""LOG_IN_UNSUCCESSFUL"": ""Log in unsuccessful"",
		""REGISTER_UNSUCCESSFUL"": ""Register unsuccessful""

	},
	""Polish"": {
		""HOME"": ""G≈Ç√≥wna"",
		""SERVERS"": ""Serwery"",
		""SETTINGS"": ""Ustawienia"",
		""WARDROBE"": ""Szafka"",
		""LOG_OUT"": ""WYLOGUJ SIƒò"",
		""LAUNCH"": ""URUCHOM"",
		""READY_TO_LAUNCH"": ""GOTOWY DO URUCHOMIENIA"",
		""UNKNOWN"": ""NIEZNANE"",
		""VERSION"": ""Wersja"",
		""CONNECT"": ""PO≈ÅƒÑCZ"",
		""GENERAL_SETTINGS"": ""Ustawienia Generalne"",
		""LANGUAGE"": ""JƒòZYK"",
		""GAME_WINDOW_SIZE"": ""ROZMIAR OKNA GRY"",
		""SHOW_LOGS_ON_START"": ""LOGI PRZY URUCHAMIANIU"",
		""YES_SHOW_LOGS"": ""Tak (poka≈º logi)"",
		""NO"": ""Nie"",
		""MEMORY_SETTINGS"": ""Ustawienia pamiƒôci"",
		""RAM_ALLOCATION"": ""PRZYDZIA≈Å RAM"",
		""ACCESSIBLE"": ""DOSTƒòPNE"",
		""ACCOUNT"": ""KONTO"",
		""USERNAME"": ""NAZWA U≈ªYTKOWNIKA"",
		""EMAIL"": ""E-MAIL"",
		""LAST_LOGIN_DATE"": ""OSTATNIE LOGOWANIE"",
		""SYSTEM_INFORMATION"": ""INFORMACJE O SYSTEMIE"",
		""ACCOUNT_CREATION_DATE"": ""DATA UTWORZENIA KONTA"",
		""MEMORY"": ""PAMIƒòƒÜ"",
		""ABOUT_US"": ""O NAS"",
		""WEBSITE"": ""STRONA INTERNETOWA"",
		""WELCOME_TO_THE_WORLD_OF"": ""WITAJ W ≈öWIECIE"",
		""OR"": ""LUB"",
		""ENTER_YOUR_NICKNAME"": ""Wpisz sw√≥j pseudonim"",
		""ENTER_YOUR_EMAIL_ADDRESS"": ""Wpisz sw√≥j adres e-mail"",
		""ENTER_YOUR_PASSWORD"": ""Wpisz swoje has≈Ço"",
		""CONFIRM_YOUR_PASSWORD"": ""Zatwierd≈∫ swoje has≈Ço"",
		""REGISTER"": ""ZAREJESTRUJ SIƒò"",
		""LOG_IN"": ""ZALOGUJ SIƒò"",
		""ALREADY_HAVE_AN_ACCOUNT"": ""MASZ JU≈ª KONTO?"",
		""DO_NOT_HAVE_AN_ACCOUNT"": ""NIE MASZ KONTA?"",
		""BACK"": ""POWR√ìT"",
		""TO_LOGIN"": ""DO EKRANU LOGOWANIA"",
		""TO_MAIN_MENU"": ""DO MENU G≈Å√ìWNEGO"",
		""TO_REGISTER"": ""DO EKRANU REJESTRACJI"",
		""CHOOSE_MODE_OF_YOUR"": ""WYBIERZ TRYB SWOJEGO"",
		""MINECRAFT_ACCOUNT"": ""KONTA MINECRAFT"",
		""LOG_IN_WITH_YOUR_PREMIUM_ACCOUNT"": ""‚ìò Zaloguj siƒô poprzez swoje konto premium."",
		""LOG_IN_WITHOUT_A_PREMIUM_ACCOUNT"": ""‚ìò Zaloguj siƒô bez konta premium poprzez wpisanie swojego pseudonimu."",
		""CONFIRM"": ""ZATWIERD≈π"",
		""ONLINE"": ""Online: "",
		""IP"": ""IP: "",
		""SERVER_VERSION"": ""Wersja: "",
		""UNDEFINED"": ""NIEOKRE≈öLONE"",
		""JOIN_TO_SERVERS"": ""DO≈ÅƒÑCZ DO SERWER√ìW"",
		""COOPERATING_WITH_US"": ""WSP√ì≈ÅPRACUJƒÑCYCH Z NAMI"",
		""CREATE_APPLICATION_ON_DISCORD"": ""Wystarczy utworzyƒá aplikacjƒô na naszym serwerze Discord w kanale ≈ºƒÖda≈Ñ,&#10;a nastƒôpnie poczekaƒá na odpowied≈∫ administratora.&#10;&#10;&#10;Administracja naszego klienta nie reaguje w ≈ºaden spos√≥b na&#10;przechowywanie/zapisywanie danych przez wsp√≥≈ÇpracujƒÖce serwery."",
		""SESSION_EXPIRED"": ""TWOJA SESJA WYGAS≈ÅA!"",
		""SESSION_EXPIRED_INFO1"": ""‚ìò Nie udalo sie automatycznie zalogowac do konta microsoft, za-"",
		""SESSION_EXPIRED_INFO2"": ""loguj sie do konta microsoft uzywanego na tym koncie"",
		""SESSION_EXPIRED_INFO3"": ""spaceclient"",
		""YOUR_MINECRAFT_NICKNAME"": ""‚ìò Tw√≥j pseudonim z minecraft: "",
		""LOG_IN_UNSUCCESSFUL"": ""Logowanie nieudane"",
		""REGISTER_UNSUCCESSFUL"": ""Rejestracja nieudana""
	}
}"
pM08WVeu,key,Lussca,JavaScript,Wednesday 3rd of July 2024 03:44:59 PM CDT,"const express = require('express');
const axios = require('axios');

const app = express();

app.get('/getFriends', async (req, res) => {
    const userId = req.query.userId;
    try {
        const response = await axios.get(`https://friends.roblox.com/v1/users/${userId}/friends`);
        res.json(response.data);
    } catch (error) {
        res.status(500).send(error.toString());
    }
});

app.listen(3000, () => {
    console.log('Servidor rodando na porta 3000');
});
"
1PJ4nztp,OK AEC ale moc vystupu,max2201111,Python,Wednesday 3rd of July 2024 03:39:35 PM CDT,"import chess
import time
from functools import lru_cache
import traceback
from typing import Iterator
from chess import Move, BB_ALL, Bitboard, scan_reversed

# Definice nov√Ωch figurek
AMAZON = 7
CYRIL = 8
EVA = 9

# Nov√° funkce attacks_mask
def new_attacks_mask(self, piece_type, square, occupied):
    print(""new_attacks_mask"")
    bb_square = chess.BB_SQUARES[square]

    if piece_type == chess.PAWN:
        color = bool(bb_square & self.occupied_co[chess.WHITE])
        return chess.BB_PAWN_ATTACKS[color][square]
    elif piece_type == chess.KNIGHT:
        return chess.BB_KNIGHT_ATTACKS[square]
    elif piece_type == chess.KING:
        return chess.BB_KING_ATTACKS[square]
    else:
        attacks = 0
        if piece_type == chess.BISHOP or piece_type == chess.QUEEN:
            attacks = chess.BB_DIAG_ATTACKS[square][chess.BB_DIAG_MASKS[square] & occupied]
        if piece_type == chess.ROOK or piece_type == chess.QUEEN:
            attacks |= (chess.BB_RANK_ATTACKS[square][chess.BB_RANK_MASKS[square] & occupied] |
                        chess.BB_FILE_ATTACKS[square][chess.BB_FILE_MASKS[square] & occupied])
        if piece_type == AMAZON:
            attacks = (chess.BB_KNIGHT_ATTACKS[square] |
                       chess.BB_DIAG_ATTACKS[square][chess.BB_DIAG_MASKS[square] & occupied] |
                       chess.BB_RANK_ATTACKS[square][chess.BB_RANK_MASKS[square] & occupied] |
                       chess.BB_FILE_ATTACKS[square][chess.BB_FILE_MASKS[square] & occupied])
        elif piece_type == CYRIL:
            attacks = (chess.BB_KNIGHT_ATTACKS[square] |
                       chess.BB_RANK_ATTACKS[square][chess.BB_RANK_MASKS[square] & occupied] |
                       chess.BB_FILE_ATTACKS[square][chess.BB_FILE_MASKS[square] & occupied])
        elif piece_type == EVA:
            attacks = (chess.BB_KNIGHT_ATTACKS[square] |
                       chess.BB_DIAG_ATTACKS[square][chess.BB_DIAG_MASKS[square] & occupied])
        return attacks

# P≈ôi≈ôazen√≠ nov√© funkce
chess.BaseBoard.attacks_mask = new_attacks_mask

class CustomBoard(chess.Board):
    def __init__(self, fen=None):
        print(""__init__"")
        super().__init__(fen)
        self._custom_piece_map = {}
        if fen:
            self._custom_piece_map = self._parse_custom_fen(fen)
        else:
            self._custom_piece_map = self._create_custom_piece_map()
        
        # Inicializace bitboard≈Ø pro nov√© figury
        self.amazons = chess.BB_EMPTY
        self.cyrils = chess.BB_EMPTY
        self.evas = chess.BB_EMPTY
        for square, piece in self._custom_piece_map.items():
            bb = chess.BB_SQUARES[square]
            if piece.piece_type == AMAZON:
                self.amazons |= bb
            elif piece.piece_type == CYRIL:
                self.cyrils |= bb
            elif piece.piece_type == EVA:
                self.evas |= bb
        self.occupied_co[chess.WHITE] |= self.amazons | self.cyrils | self.evas
        self.occupied_co[chess.BLACK] |= self.amazons | self.cyrils | self.evas
        self.occupied |= self.amazons | self.cyrils | self.evas

    def _parse_custom_fen(self, fen):
        print(""_parse_custom_fen"")
        piece_map = {}
        board_part = fen.split()[0]
        square = 0
        for char in board_part:
            if char.isdigit():
                square += int(char)
            elif char == '/':
                continue
            else:
                color = chess.WHITE if char.isupper() else chess.BLACK
                piece_type = {
                    'A': AMAZON,
                    'C': CYRIL,
                    'E': EVA,
                    'P': chess.PAWN,
                    'N': chess.KNIGHT,
                    'B': chess.BISHOP,
                    'R': chess.ROOK,
                    'Q': chess.QUEEN,
                    'K': chess.KING
                }.get(char.upper(), None)
                if piece_type:
                    piece = chess.Piece(piece_type, color)
                    piece_map[square] = piece
                square += 1
        return piece_map

    def piece_symbol(self, piece):
        print(""piece_symbol"")
        if piece is None:
            return "".""
        if piece.piece_type == AMAZON:
            return ""A"" if piece.color == chess.WHITE else ""a""
        if piece.piece_type == CYRIL:
            return ""C"" if piece.color == chess.WHITE else ""c""
        if piece.piece_type == EVA:
            return ""E"" if piece.color == chess.WHITE else ""e""
        return chess.PIECE_SYMBOLS[piece.piece_type].upper() if piece.color == chess.WHITE else chess.PIECE_SYMBOLS[piece.piece_type]

    def _create_custom_piece_map(self):
        print(""_create_custom_piece_map"")
        piece_map = {}
        for square, piece in self.piece_map().items():
            piece_map[square] = piece
        return piece_map

    def generate_pseudo_legal_moves(self, from_mask: Bitboard = BB_ALL, to_mask: Bitboard = BB_ALL) -> Iterator[Move]:
        print(""generate_pseudo_legal_moves zaƒç√≠n√°"")
        our_pieces = self.occupied_co[self.turn]
        print(f""Na tahu je: {'B√≠l√Ω' if self.turn == chess.WHITE else 'ƒåern√Ω'}"")
        print(f""Poƒçet na≈°ich figur: {bin(our_pieces).count('1')}"")

        # Generate piece moves.
        non_pawns = our_pieces & ~self.pawns & from_mask
        print(f""Poƒçet figur kromƒõ pƒõ≈°c≈Ø: {bin(non_pawns).count('1')}"")
        for from_square in scan_reversed(non_pawns):
            piece = self.piece_at(from_square)
            if piece is None or piece.color != self.turn:
                continue
            piece_type = piece.piece_type
            print(f""Generuji tahy pro figuru {piece_type} na poli {chess.SQUARE_NAMES[from_square]}"")
            if piece_type == AMAZON:
                moves = (self.attacks_mask(chess.KNIGHT, from_square, self.occupied) |
                         self.attacks_mask(chess.BISHOP, from_square, self.occupied) |
                         self.attacks_mask(chess.ROOK, from_square, self.occupied)) & ~our_pieces & to_mask
            elif piece_type == CYRIL:
                moves = (self.attacks_mask(chess.KNIGHT, from_square, self.occupied) |
                         self.attacks_mask(chess.ROOK, from_square, self.occupied)) & ~our_pieces & to_mask
            elif piece_type == EVA:
                moves = (self.attacks_mask(chess.KNIGHT, from_square, self.occupied) |
                         self.attacks_mask(chess.BISHOP, from_square, self.occupied)) & ~our_pieces & to_mask
            else:
                moves = self.attacks_mask(piece_type, from_square, self.occupied) & ~our_pieces & to_mask
            move_count = 0
            for to_square in scan_reversed(moves):
                move_count += 1
                yield Move(from_square, to_square)
            print(f""Vygenerov√°no {move_count} tah≈Ø pro tuto figuru"")

        # Generate castling moves.
        if from_mask & self.kings:
            print(""Generuji ro≈°√°dy"")
            castling_moves = list(self.generate_castling_moves(from_mask, to_mask))
            print(f""Vygenerov√°no {len(castling_moves)} ro≈°√°d"")
            yield from castling_moves

        # The remaining moves are all pawn moves.
        pawns = self.pawns & self.occupied_co[self.turn] & from_mask
        print(f""Poƒçet pƒõ≈°c≈Ø: {bin(pawns).count('1')}"")
        if not pawns:
            print(""≈Ω√°dn√≠ pƒõ≈°ci k tahu"")
            return

        # Generate pawn moves.
        print(""Generuji tahy pƒõ≈°c≈Ø"")
        pawn_moves = list(self.generate_pseudo_legal_pawn_moves(pawns, to_mask))
        print(f""Vygenerov√°no {len(pawn_moves)} tah≈Ø pƒõ≈°c≈Ø"")
        yield from pawn_moves

        # Generate pawn captures.
        print(""Generuji bran√≠ pƒõ≈°c≈Ø"")
        capturers = pawns
        capture_count = 0
        for from_square in scan_reversed(capturers):
            targets = (
                chess.BB_PAWN_ATTACKS[self.turn][from_square] &
                self.occupied_co[not self.turn] & to_mask)

            for to_square in scan_reversed(targets):
                capture_count += 1
                if chess.square_rank(to_square) in [0, 7]:
                    yield Move(from_square, to_square, chess.QUEEN)
                    yield Move(from_square, to_square, chess.ROOK)
                    yield Move(from_square, to_square, chess.BISHOP)
                    yield Move(from_square, to_square, chess.KNIGHT)
                else:
                    yield Move(from_square, to_square)
        print(f""Vygenerov√°no {capture_count} bran√≠ pƒõ≈°c≈Ø"")

        print(""generate_pseudo_legal_moves konƒç√≠"")

    def _is_attacked_by_new_piece(self, king: chess.Square, attacker_square: chess.Square, piece_type: chess.PieceType) -> bool:
        print(f""_is_attacked_by_new_piece: c√≠l (kr√°l) {chess.SQUARE_NAMES[king]}, √∫toƒçn√≠k {chess.SQUARE_NAMES[attacker_square]}"")
        if piece_type == AMAZON:
            return bool(self.attacks_mask(chess.KNIGHT, attacker_square, self.occupied) & chess.BB_SQUARES[king] or
                        self.attacks_mask(chess.BISHOP, attacker_square, self.occupied) & chess.BB_SQUARES[king] or
                        self.attacks_mask(chess.ROOK, attacker_square, self.occupied) & chess.BB_SQUARES[king])
        elif piece_type == CYRIL:
            return bool(self.attacks_mask(chess.KNIGHT, attacker_square, self.occupied) & chess.BB_SQUARES[king] or
                        self.attacks_mask(chess.ROOK, attacker_square, self.occupied) & chess.BB_SQUARES[king])
        elif piece_type == EVA:
            return bool(self.attacks_mask(chess.KNIGHT, attacker_square, self.occupied) & chess.BB_SQUARES[king] or
                        self.attacks_mask(chess.BISHOP, attacker_square, self.occupied) & chess.BB_SQUARES[king])
        return False

    def is_check(self) -> bool:
        print(""is_check"")
        king = self.king(self.turn)
        if king is None:
            return False

        print(f""Kontrola ≈°achu pro kr√°le na {chess.SQUARE_NAMES[king]}"")
        opponent_color = not self.turn
        for attacker_square in chess.SQUARES:
            piece = self.piece_at(attacker_square)
            if piece and piece.color == opponent_color:
                if piece.piece_type in [AMAZON, CYRIL, EVA]:
                    if self._is_attacked_by_new_piece(king, attacker_square, piece.piece_type):
                        print(f""Kr√°l je v ≈°achu od {self.piece_symbol(piece)} na poli {chess.SQUARE_NAMES[attacker_square]}"")
                        return True
                elif self.attacks_mask(piece.piece_type, attacker_square, self.occupied) & chess.BB_SQUARES[king]:
                    print(f""Kr√°l je v ≈°achu od {self.piece_symbol(piece)} na poli {chess.SQUARE_NAMES[attacker_square]}"")
                    return True

        print(""Kr√°l nen√≠ v ≈°achu"")
        return False

    def is_legal(self, move: Move) -> bool:
        print(f""Kontrola legality tahu: {move}"")
        if not super().is_pseudo_legal(move):
            print(""Tah nen√≠ pseudo-leg√°ln√≠"")
            return False
        
        self.push(move)
        legal = not self.is_check()
        self.pop()
        
        if legal:
            print(""Tah je leg√°ln√≠"")
        else:
            print(""Tah by vystavil vlastn√≠ho kr√°le ≈°achu"")
        return legal

@lru_cache(maxsize=None)
def simplify_fen_string(fen):
    print(""simplify_fen_string"")
    parts = fen.split(' ')
    simplified_fen = ' '.join(parts[:4] + [""0"", ""1""])
    return simplified_fen

def print_board(fen):
    print(""print_board"")
    board = CustomBoard(fen)
    print(board.unicode(invert_color=True))
    print()  # Add an empty line after the board

def format_time(seconds):
    print(""format_time"")
    hours, remainder = divmod(seconds, 3600)
    minutes, seconds = divmod(remainder, 60)
    return f""{int(hours):02d}h {int(minutes):02d}m {int(seconds):02d}s""
    
def analyze_positions(start_fen, min_depth=5):
    print(""analyze_positions zaƒç√≠n√°"")
    print(""Initializing analysis..."")
    POZ = {1: start_fen}
    AR = {simplify_fen_string(start_fen): {'depth': 0, 'value': None}}
    N = 1

    start_time = time.time()
    total_time = 0

    print(""Generov√°n√≠ pozic..."")
    while True:
        new_positions = False
        for i in range(1, N + 1):
            current_fen = POZ[i]
            board = CustomBoard(current_fen)
            simplified_fen = simplify_fen_string(current_fen)
            
            if AR[simplified_fen]['depth'] == 0:
                AR[simplified_fen]['depth'] = 1
                legal_moves = list(board.legal_moves)
                print(f""Pozice {i}: {simplified_fen}, Poƒçet leg√°ln√≠ch tah≈Ø: {len(legal_moves)}"")
                for move in legal_moves:
                    board.push(move)
                    new_fen = board.fen()
                    simplified_new_fen = simplify_fen_string(new_fen)
                    if simplified_new_fen not in AR:
                        N += 1
                        POZ[N] = new_fen
                        AR[simplified_new_fen] = {'depth': 0, 'value': None}
                        new_positions = True
                    board.pop()
        
        if not new_positions:
            break
        
    print(f""Celkov√Ω poƒçet pozic: {N}"")

    # Inicializace koncov√Ωch pozic
    terminal_positions = 0
    for i in range(1, N + 1):
        current_fen = POZ[i]
        board = CustomBoard(current_fen)
        simplified_fen = simplify_fen_string(current_fen)

        if board.is_checkmate():
            AR[simplified_fen]['value'] = -1000 if board.turn == chess.WHITE else 1000
            AR[simplified_fen]['depth'] = min_depth
            terminal_positions += 1
        elif board.is_stalemate() or board.is_insufficient_material() or board.is_seventyfive_moves() or board.is_fivefold_repetition():
            AR[simplified_fen]['value'] = 0
            AR[simplified_fen]['depth'] = min_depth
            terminal_positions += 1

    print(f""Poƒçet koncov√Ωch pozic: {terminal_positions}"")

    max_depth = 0
    while max_depth < min_depth:
        max_depth += 1
        level_start_time = time.time()
        print(f""V√Ωpoƒçet v hloubce {max_depth}"")
        
        changes = False
        positions_evaluated = 0
        for i in range(1, N + 1):
            current_fen = POZ[i]
            board = CustomBoard(current_fen)
            simplified_fen = simplify_fen_string(current_fen)
            if AR[simplified_fen]['depth'] < max_depth and AR[simplified_fen]['value'] is None:
                positions_evaluated += 1
                best_value = -2000 if board.turn == chess.WHITE else 2000
                all_moves_evaluated = True
                legal_moves = list(board.legal_moves)
                print(f""Pozice {i}: {simplified_fen}, Poƒçet leg√°ln√≠ch tah≈Ø: {len(legal_moves)}"")
                for move in legal_moves:
                    board.push(move)
                    next_fen = board.fen()
                    simplified_next_fen = simplify_fen_string(next_fen)
                    if simplified_next_fen not in AR:
                        print(f""Warning: Position not found in AR: {simplified_next_fen}"")
                        all_moves_evaluated = False
                        break
                    next_value = AR[simplified_next_fen]['value']
                    if next_value is None:
                        all_moves_evaluated = False
                        break
                    if board.turn == chess.WHITE:
                        best_value = max(best_value, -next_value)
                    else:
                        best_value = min(best_value, -next_value)
                    board.pop()
                
                if all_moves_evaluated:
                    AR[simplified_fen]['value'] = best_value
                    AR[simplified_fen]['depth'] = max_depth
                    changes = True

        level_end_time = time.time()
        level_elapsed_time = level_end_time - level_start_time
        total_time += level_elapsed_time
        
        formatted_total_time = format_time(total_time)
        formatted_level_time = format_time(level_elapsed_time)
        
        print(f""Hloubka {max_depth} dokonƒçena"")
        print(f""Pozice vyhodnoceny: {positions_evaluated}"")
        print(f""Zmƒõny provedeny: {'Ano' if changes else 'Ne'}"")
        print(f""ƒåas: {formatted_total_time} / {formatted_level_time}"")

    print(f""Anal√Ωza dokonƒçena do hloubky {max_depth}"")
    print(f""Celkov√Ω ƒças: {format_time(total_time)}"")

    current_fen = start_fen
    optimal_moves = []
    while True:
        board = CustomBoard(current_fen)
        simplified_fen = simplify_fen_string(current_fen)
        if simplified_fen not in AR:
            print(f""Warning: Position not found in AR: {simplified_fen}"")
            break
        current_value = AR[simplified_fen]['value']
        
        if current_value in [-1000, 0, 1000] or current_value is None:
            break
        
        best_move = None
        for move in board.legal_moves:
            board.push(move)
            next_fen = board.fen()
            simplified_next_fen = simplify_fen_string(next_fen)
            if simplified_next_fen not in AR:
                print(f""Warning: Position not found in AR: {simplified_next_fen}"")
                continue
            next_value = AR[simplified_next_fen]['value']
            if next_value is not None and next_value == -current_value:
                best_move = move
                break
            board.pop()
        
        if best_move is None:
            break
        
        optimal_moves.append((current_fen, best_move))
        board.push(best_move)
        current_fen = board.fen()

    print(""\nOptim√°ln√≠ tahy:"")
    for fen, move in optimal_moves:
        board = CustomBoard(fen)
        print(f""{board.fullmove_number}. {'B√≠l√Ω' if board.turn == chess.WHITE else 'ƒåern√Ω'}: {move}"")
        print_board(fen)
        print()

    print(""Koneƒçn√° pozice:"")
    print_board(current_fen)

    print(""analyze_positions konƒç√≠"")

if __name__ == ""__main__"":
    print(""Program zaƒç√≠n√°"")
    start_fen = ""1a6/3k4/8/8/8/8/8/6K1 b - - 0 1""
    print(""Starting analysis..."")
    print(""Initial position:"")
    print_board(start_fen)
    
    try:
        print(""Creating initial board..."")
        initial_board = CustomBoard(start_fen)
        print(""Initial board created successfully."")
        
        print(""Piece map:"")
        for square, piece in initial_board._custom_piece_map.items():
            print(f""Square {chess.SQUARE_NAMES[square]}: {initial_board.piece_symbol(piece)}"")
        
        print(""Generating legal moves for initial position..."")
        legal_moves = list(initial_board.legal_moves)
        print(f""Number of legal moves: {len(legal_moves)}"")
        for move in legal_moves:
            print(f""Move: {move}"")
        
        print(""Starting position analysis..."")
        analyze_positions(start_fen, min_depth=5)
    except Exception as e:
        print(f""An error occurred: {str(e)}"")
        traceback.print_exc()
    
    print(""Program konƒç√≠"")"
VHwpmemi,"""FastLED Control"" rev_01",pleasedontcode,Arduino,Wednesday 3rd of July 2024 03:23:36 PM CDT,"/********* Pleasedontcode.com **********

	Pleasedontcode thanks you for automatic code generation! Enjoy your code!

	- Terms and Conditions:
	You have a non-exclusive, revocable, worldwide, royalty-free license
	for personal and commercial use. Attribution is optional; modifications
	are allowed, but you're responsible for code maintenance. We're not
	liable for any loss or damage. For full terms,
	please visit pleasedontcode.com/termsandconditions.

	- Project: ""FastLED Control""
	- Source Code NOT compiled for: ESP32 DevKit V1
	- Source Code created on: 2024-07-03 20:21:27

********* Pleasedontcode.com **********/

/****** SYSTEM REQUIREMENTS *****/
/****** SYSTEM REQUIREMENT 1 *****/
	/* ""Convert the glediator code for ESP32 so that I */
	/* can control my LED strip with the RemoteLight app */
	/* via USB connection on a PC."" */
/****** END SYSTEM REQUIREMENTS *****/

/****** DEFINITION OF LIBRARIES *****/
#include <FastLED.h>  //https://github.com/FastLED/FastLED

/****** FUNCTION PROTOTYPES *****/
void setup(void);
void loop(void);
void updateOutputs(void);
void readSerialData(void);

/***** DEFINITION OF DIGITAL OUTPUT PINS *****/
const uint8_t Ledstrip_WS2812_DIN_PIN_D4 = 4;

/***** DEFINITION OF OUTPUT RAW VARIABLES *****/
/***** used to store raw data *****/
bool Ledstrip_WS2812_DIN_PIN_D4_rawData = 0;

/***** DEFINITION OF OUTPUT PHYSICAL VARIABLES *****/
/***** used to store data after characteristic curve transformation *****/
float Ledstrip_WS2812_DIN_PIN_D4_phyData = 0.0;

/****** DEFINITION OF LIBRARIES CLASS INSTANCES*****/
#define NUM_LEDS 60
#define DATA_PIN 4
CRGB leds[NUM_LEDS];

void setup(void) {
  // Initialize serial communication at 115200 baud rate
  Serial.begin(115200);

  // Initialize the FastLED library
  FastLED.addLeds<WS2812, DATA_PIN, GRB>(leds, NUM_LEDS);
  FastLED.setBrightness(50); // Set brightness to 50 out of 255
}

void loop(void) {
  // Read data from serial
  readSerialData();

  // Refresh output data
  updateOutputs();

  // Show the LED data
  FastLED.show();
}

void updateOutputs() {
  digitalWrite(Ledstrip_WS2812_DIN_PIN_D4, Ledstrip_WS2812_DIN_PIN_D4_rawData);
}

void readSerialData() {
  static uint16_t dataIndex = 0;
  static uint8_t buffer[NUM_LEDS * 3]; // Buffer to store incoming data

  while (Serial.available()) {
    buffer[dataIndex++] = Serial.read();

    // If buffer is full, update LED strip
    if (dataIndex >= sizeof(buffer)) {
      for (uint16_t i = 0; i < NUM_LEDS; i++) {
        leds[i].r = buffer[i * 3];
        leds[i].g = buffer[i * 3 + 1];
        leds[i].b = buffer[i * 3 + 2];
      }
      dataIndex = 0; // Reset index for next frame
    }
  }
}

/* END CODE */"
FeVCGJYA,music,NoireNeige,Lua,Wednesday 3rd of July 2024 02:59:55 PM CDT,"local mf = require(""morefonts"")
local pretty = require (""cc.pretty"")
local dfpwm = require(""cc.audio.dfpwm"")

--Set peripheral names here please

local bigcolourmonitor = peripheral.wrap(""monitor_0"") --> The main, 4x4 advanced monitor
bigcolourmonitor.setTextScale(0.5)

local greymonitor = peripheral.wrap(""monitor_1"") --> The 4x1 normal monitor below the bigcolourmonitor (do NOT use an advanced monitor here)
greymonitor.setTextScale(0.5)
greymonitor.clear()

local smallcolourmonitor = peripheral.wrap(""monitor_2"") --> The 4x1 advanced monitor below the grey monitor
smallcolourmonitor.setTextScale(0.5)

local speakermonitor = peripheral.wrap(""monitor_3"") --> The 1x2 vertical monitor for audio controls above the speakers
speakermonitor.setTextScale(0.5)

local diskdrive = peripheral.wrap(""drive_0"") --> The disk drive for using floppy disks

-- Ender Modem Setup (assuming you have an Ender Modem named ""modem_0"")
local enderModem = peripheral.wrap(""modem_0"")
local modemChannel = 12345 -- Choose a channel for communication

-- Speaker Setup (assuming you have a speaker named ""speaker_1"")
local speaker1 = peripheral.wrap(""speaker_1"")
local speakerVolume1 = 1.0 -- Set speaker 1 volume

-- Speaker Setup (assuming you have a speaker named ""speaker_2"")
local speaker2 = peripheral.wrap(""speaker_2"")
local speakerVolume2 = 1.0 -- Set speaker 2 volume

local musicdata = {}
local albumnum = 0
local albummarquee, disklabelmarquee, greymarquee = false, false, false
local menustate, trackpage, albumpage, track, album = ""albums"", 1, 1, 0, 0
local playpause, shuffle, loop = false, false, false
local leftarrowwobble, rightarrowwobble = false, false
local volumeupwobble, volumedownwobble = false, false
local albumplaying, trackplaying = 0, 0
local tempalbumname, tempdisklabel, tempdisplayphrase
local progress, duration, decoder, audiohandle, queuepos = 0, 0
local theme = {[""themenum""] = 1, 0xF0F0F0, 0x999999, 0x4C4C4C, 0x111111}
local queue = {}
local displayphrase = ""Blockman""
local volume = 1.5

local function changeTheme(themenum)

    if fs.exists(""/disk/theme.blockman"") then
        theme = textutils.unserialise(fs.open(""/disk/theme.blockman"", ""r"").readAll())
    end

    if themenum then
        theme[""themenum""] = themenum
    end

    if theme[""themenum""]==1 then
        theme[1], theme[2], theme[3], theme[4] = 0xF0F0F0, 0x999999, 0x4C4C4C, 0x111111
    elseif theme[""themenum""]==2 then
        theme[1], theme[2], theme[3], theme[4] = 0xEB6590, 0xC565EB, 0x6D65EB, 0x111111
    elseif theme[""themenum""]==3 then
        theme[1], theme[2], theme[3], theme[4] = 0xEBBE65, 0xEB9364, 0xEB6565, 0x111111
    elseif theme[""themenum""]==4 then
        theme[1], theme[2], theme[3], theme[4] = 0x92EB65, 0xEBE465, 0xEBC465, 0x111111
    elseif theme[""themenum""]==5 then
        theme[1], theme[2], theme[3], theme[4] = 0x65EBDD, 0x65EB82, 0xB1EB65, 0x111111
    elseif theme[""themenum""]==6 then
        theme[1], theme[2], theme[3], theme[4] = 0xBA65EB, 0x6567EB, 0x65BCEB, 0x111111
    elseif theme[""themenum""]==7 then
        theme[1], theme[2], theme[3], theme[4] = 0xffffff, 0xfd9855, 0xd161a2, 0x111111
    elseif theme[""themenum""]==8 then
        theme[1], theme[2], theme[3], theme[4] = 0xffffff, 0x5bcefa, 0xf5a9b8, 0x111111
    end

    if diskdrive.isDiskPresent() then
        local handle = fs.open(""/disk/theme.blockman"", ""w+"")
        handle.write(textutils.serialise(theme))
        handle.close()
    end
end

local function setTheme()
    bigcolourmonitor.setPaletteColor(colours.white, theme[1])
    bigcolourmonitor.setPaletteColor(colours.lightGrey, theme[2])
    bigcolourmonitor.setPaletteColor(colours.grey, theme[3])
    bigcolourmonitor.setPaletteColor(colours.black, theme[4])

    smallcolourmonitor.setPaletteColor(colours.white, theme[1])
    smallcolourmonitor.setPaletteColor(colours.black, theme[4])

    speakermonitor.setPaletteColor(colours.white, theme[1])
end

local function formatTime(seconds)
    local m = math.floor(seconds/60)
    if m < 10 then m = ""0""..m end
    local s = math.floor(seconds%60)
    if s < 10 then s = ""0""..s end
    return m.."":""..s
end

local function getDuration()
    duration = audiohandle.seek(""end"")/6000
    audiohandle.seek(""set"", 0)
end

local function getData(url)
  local handle, err = http.get(url)
  if not handle then error(err, 2) end

  local data = handle.readAll()
  handle.close()

  return data
end

local function writeData(filename, data)
  local handle, err = fs.open(filename, ""w"")
  if not handle then error(err, 2) end

  handle.write(data)
  handle.close()
end

local function diskRemove()
    musicdata = {}
    trackpage, albumpage = 1, 1
    album, track, albumplaying, trackplaying, progress = 0, 0, 0, 0, 0
    queuepos = nil
    menustate = ""albums""
    displayphrase = ""Blockman""
    queue = {}
    playpause, shuffle, loop = false, false, false
    albummarquee = false
    greymarquee = false
    disklabelmarquee = false
    greymonitor.clear()
    theme = {[""themenum""] = 1, 0xF0F0F0, 0x999999, 0x4C4C4C, 0x111111}
    setTheme()
end 

local function diskCheck()
    if fs.exists(""disk/musicdata.blockman"") then
        local file = fs.open(""disk/musicdata.blockman"", ""r"")
        local contents = file.readAll()
        file.close()
        musicdata = textutils.unserialise(contents)
        local i = 1
        while musicdata[i] do
            i = i+1
        end
        albumnum = i - 1
    else
        musicdata = {}
        albumnum = 0
    end
    musicdata[""disklabel""] = diskdrive.getDiskLabel()
    tempdisklabel = diskdrive.getDiskLabel() and diskdrive.getDiskLabel()..""   ""
    if fs.exists(""/disk/theme.blockman"") then
        changeTheme()
        setTheme()
    end
end

local function editMusicData()
    local function question(text)
        term.setTextColour(colours.purple)
        print(text)
        term.setTextColour(colours.white)
    end
    local function statement(text)
        term.setTextColour(colours.yellow)
        print(text)
        term.setTextColour(colours.white)
    end
    while true do
        question(""What would you like to edit?\n(Enter \""disklabel\"", \""album\"", \""track\"", or \""abort\"")"")
        local temp = read()
        if temp==""abort"" then
            question(""Would you like to save changes?\n(Enter \""yes\"" or \""no\"")"")
            local temp = read()
            if temp==""yes"" then
                local serialisedmusicdata = textutils.serialise(musicdata)
                writeData(""disk/musicdata.blockman"", serialisedmusicdata)
                statement(""Saved changes"")
                menustate = ""settings""
                break
            elseif temp==""no"" then
                statement(""Discarded Changes"")
                menustate = ""settings""
                break
            else
                statement(""Invalid choice"")
            end
        elseif temp==""disklabel"" then
            question(""Enter the new disk label: "")
            musicdata[""disklabel""] = read()
            diskdrive.setDiskLabel(musicdata[""disklabel""])
            statement(""Changed disk label"")
        elseif temp==""album"" then
            question(""Enter the index of the album you'd like to edit: "")
            local i = tonumber(read())
            if i<=#musicdata then
                statement(""Selected album named \""""..musicdata[i][""albumname""]..""\"""")
                question(""What would you like to edit about this album?\n(Enter \""art\"", \""name\"", \""artistname\"", \""MOVE\"", \""DELETE\"", or, to abort, anything else)"")
                local temp = read()
                if temp==""art"" then
                    question(""Enter the new link to the artwork for the album: "")
                    musicdata[i][""albumartlink""] = read()
                    statement(""Changed album artwork link"")
                elseif temp==""name"" then
                    question(""Enter the new name for the album: "")
                    musicdata[i][""albumname""] = read()
                    statement(""Changed album name"")
                elseif temp==""artistname"" then
                    question(""Enter the new name for the artist of the album: "")
                    musicdata[i][""albumartistname""] = read()
                    statement(""Changed album artist name"")
                elseif temp==""MOVE"" then
                    question(""Enter the new position for the album: "")
                    local k = tonumber(read())
                    if k<=#musicdata and k~=i then
                        table.insert(musicdata, k, table.remove(musicdata, i))
                        statement(""Moved album"")
                    else
                        statement(""Invalid position"")
                    end
                elseif temp==""DELETE"" then
                    table.remove(musicdata, i)
                    statement(""Deleted album"")
                else
                    statement(""Aborted"")
                end
            else
                statement(""No album found at that index"")
            end
        elseif temp==""track"" then
            question(""Enter the index of the album in which the track belongs: "")
            local i = tonumber(read())
            if i<=#musicdata then
                statement(""Selected album named \""""..musicdata[i][""albumname""]..""\"""")
                question(""Enter the index of the track you'd like to edit:\nNote: enter ""..tostring(#musicdata[i]+1).."" to add another track"")
                local j = tonumber(read())
                if j<=#musicdata[i] then
                    statement(""Selected track named \""""..musicdata[i][j][""trackname""]..""\"""")
                    question(""What would you like to edit about this track?\n(Enter \""link\"", \""name\"", \""artistname\"", \""MOVE\"", \""DELETE\"", or, to abort, anything else)"")
                    local temp = read()
                    if temp==""link"" then
                        question(""Enter the new link for the track: "")
                        musicdata[i][j][""tracklink""] = read()
                        statement(""Changed track link"")
                    elseif temp==""name"" then
                        question(""Enter the new name for the track: "")
                        musicdata[i][j][""trackname""] = read()
                        statement(""Changed track name"")
                    elseif temp==""artistname"" then
                        question(""Enter the new name for the artist of the track: "")
                        musicdata[i][j][""trackartistname""] = read()
                        statement(""Changed track artist name"")
                    elseif temp==""MOVE"" then
                        question(""Enter the new position for the track: "")
                        local k = tonumber(read())
                        if k<=#musicdata[i] and k~=j then
                            table.insert(musicdata[i], k, table.remove(musicdata[i], j))
                            statement(""Moved track"")
                        else
                            statement(""Invalid position"")
                        end
                    elseif temp==""DELETE"" then
                        table.remove(musicdata[i], j)
                        statement(""Deleted track"")
                    else
                        statement(""Aborted"")
                    end
                elseif j==#musicdata[i]+1 then
                    musicdata[i][j] = {}
                    question(""Enter the name of the track: "")
                    musicdata[i][j][""trackname""] = read()
                    question(""Enter the name of the artist(s) for the track: "")
                    musicdata[i][j][""trackartistname""] = read()
                    question(""Enter the link for the track: "")
                    musicdata[i][j][""tracklink""] = read()
                    statement(""Track added"")
                else
                    statement(""No track found at that index"")
                end
            else
                statement(""No album found at that index"")
            end
        else
            statement(""Invalid choice\nNote: text is case-sensitive"")
        end
    end
end

local function addMusicData()
    local function question(text)
        term.setTextColour(colours.purple)
        print(text)
        term.setTextColour(colours.white)
    end
    if not musicdata[""disklabel""] then
        question(""Enter the disk label: "")
        musicdata[""disklabel""] = read()
        diskdrive.setDiskLabel(musicdata[""disklabel""])
    end
    local i = albumnum + 1
    while true do
        musicdata[i] = {}
        question(""Enter the name of the album: "")
        musicdata[i][""albumname""] = read()
        question(""Enter the name of the artist for the album: "")
        musicdata[i][""albumartistname""] = read()
        question(""Enter the link to the artwork for the album: "")
        musicdata[i][""albumartlink""] = read()
        local j = 1
        while true do
            musicdata[i][j] = {}
            question(""Enter the name of the track: "")
            musicdata[i][j][""trackname""] = read()
            question(""Enter the name of the artist(s) for the track: "")
            musicdata[i][j][""trackartistname""] = read()
            question(""Enter the link for the track: "")
            musicdata[i][j][""tracklink""] = read()
            question(""To finish writing tracks, type \""stop.\"", otherwise hit enter"")
            local temp = read()
            if temp == ""stop."" then
                break
            end
            j = j+1
        end
        question(""To finish writing albums, type \""stop.\"""")
        local temp = read()
        if temp == ""stop."" then
            break
        end
        i = i+1
    end
    local serialisedmusicdata = textutils.serialise(musicdata)
    writeData(""disk/musicdata.blockman"", serialisedmusicdata)
    menustate = ""settings""
end

local function bimgDraw(bimg, x, y, mon)
    local frame = bimg[1]
    for k,line in pairs(frame) do
        mon.setCursorPos(x,y+k-1)
        mon.blit(line[1], line[2], line[3])
    end
end

local function artDisplay(data)
    bigcolourmonitor.clear()
    local artdata = textutils.unserialise(data)

    for i=0,15 do
        bigcolourmonitor.setPaletteColour(2^i,artdata.palette[i][1])
    end

    bimgDraw(artdata, 1, 1, bigcolourmonitor)
end

local function iconDisplay(mon, iconname, xpos, ypos)
    local file = fs.open(""/Icons/""..iconname.."".bimg"", ""r"")
    local contents = file.readAll()
    file.close()
    local icondata = textutils.unserialise(contents)

    bimgDraw(icondata, xpos, ypos, mon)
end

local function refreshGrey()
    mf.writeOn(greymonitor, string.rep("" "", 28), 1, 2, {scale = 1})
    greymarquee = false
    if displayphrase==""Loading Track..."" or displayphrase==""Blockman"" or displayphrase==""Error Loading Track"" then
        mf.writeOn(greymonitor, displayphrase, nil, 2, {scale = 1, condense = true})
    else
        displayphrase = musicdata[albumplaying][trackplaying][""trackname""]
        if playpause then 
            displayphrase = ""Now Playing: ""..displayphrase
            tempdisplayphrase = string.rep(displayphrase..""   "", 2)
            greymarquee = true
        else
            displayphrase = ""Paused: ""..displayphrase
            if #displayphrase < 26 then
                mf.writeOn(greymonitor, displayphrase, nil, 2, {scale = 1})
            else
                mf.writeOn(greymonitor, string.sub(displayphrase, 1, 22)..""..."", nil, 2, {scale = 1})
            end
        end
    end
end

local function refreshSpeaker()
    speakermonitor.clear()
    speakermonitor.setTextColour(colours.lightGrey)
    iconDisplay(speakermonitor, ""plus"", 5, 2)
    iconDisplay(speakermonitor, ""minus"", 5, 18)
    speakermonitor.setTextColour(colours.white)
    mf.writeOn(speakermonitor, volume, nil, nil, {scale = 2, condense = true, dy = 1})
end

local function refreshBigColour()
    albummarquee = false
    disklabelmarquee = false
    bigcolourmonitor.clear()
    if menustate==""albumart"" then
        mf.writeOn(bigcolourmonitor, ""Loading Album Art..."", nil, nil, {Scale = 2, condense = true})
        local handle = http.get(musicdata[album][""albumartlink""])
        if not handle then
            mf.writeOn(bigcolourmonitor, ""Error Loading Album Art"", nil, nil, {Scale = 2, condense = true})
        else
            artDisplay(handle.readAll())
        end
    elseif menustate==""tracks"" then
        setTheme()

        bigcolourmonitor.setTextColour(colours.white)
        if string.len(musicdata[album][""albumname""]) < 13 then
            mf.writeOn(bigcolourmonitor, musicdata[album][""albumname""], nil, 2, {scale = 2})
        else
            albummarquee = true
        end

        bigcolourmonitor.setTextColour(colours.lightGrey)
        if string.len(musicdata[album][""albumartistname""]) < 24 then
            mf.writeOn(bigcolourmonitor, ""- ""..musicdata[album][""albumartistname""], 72-(3*string.len(musicdata[album][""albumartistname""])), 9, {scale = 1})
        else
            mf.writeOn(bigcolourmonitor, ""- ""..string.sub(musicdata[album][""albumartistname""], 1, 20)..""..."", 3, 9, {scale = 1})
        end

        bigcolourmonitor.setTextColour(colours.grey)
        bigcolourmonitor.setCursorPos(1,13)
        bigcolourmonitor.write(string.rep(""\131"",80))
        bigcolourmonitor.setTextColour(colours.lightGrey)

        local linenum = 14
        for i=1,5 do
            local t = 5*(trackpage-1)+i
            if t <= #musicdata[album] then
                if t==track then
                    bigcolourmonitor.setTextColour(colours.white)
                end
                if string.len(t.."". ""..musicdata[album][t][""trackname""]) < 26 then
                    mf.writeOn(bigcolourmonitor, t.."". ""..musicdata[album][t][""trackname""], 2, linenum, {scale = 1, condense = true})
                else
                    mf.writeOn(bigcolourmonitor, t.."". ""..string.sub(musicdata[album][t][""trackname""], 1, 21-string.len(t))..""..."", 2, linenum, {scale = 1, condense = true})
                end
                linenum = linenum + 3
                bigcolourmonitor.setTextColour(colours.grey)
                if t==track then
                    bigcolourmonitor.setTextColour(colours.lightGrey)
                end
                if string.len(musicdata[album][t][""trackartistname""]) < 26 then
                    mf.writeOn(bigcolourmonitor, musicdata[album][t][""trackartistname""], 2, linenum, {scale = 1, condense = true})
                else
                    mf.writeOn(bigcolourmonitor, string.sub(musicdata[album][t][""trackartistname""],1 , 22)..""..."", 2, linenum, {scale = 1, condense = true})
                end
                linenum = linenum + 3
                bigcolourmonitor.setTextColour(colours.grey)
                bigcolourmonitor.setCursorPos(1,linenum)
                bigcolourmonitor.write(string.rep(""\131"",80))
                bigcolourmonitor.setTextColour(colours.lightGrey)
                linenum = linenum + 1
            end
        end
        bigcolourmonitor.setTextColour(colours.white)
        mf.writeOn(bigcolourmonitor, ""<"", 2, 50, {dy = -1, scale = 1})
        mf.writeOn(bigcolourmonitor, ""menu"", nil, 50, {dy = -1, scale = 1, condense = true})
        mf.writeOn(bigcolourmonitor, "">"", 76, 50, {dy = -1, scale = 1})

    elseif menustate==""albums"" then
        if diskdrive.isDiskPresent() then
            bigcolourmonitor.setTextColour(colours.white)
            if musicdata[""disklabel""] then
                if string.len(musicdata[""disklabel""]) < 13 then
                    mf.writeOn(bigcolourmonitor, musicdata[""disklabel""], nil, 2, {scale = 2})
                else
                    disklabelmarquee = true
                end
            else 
                mf.writeOn(bigcolourmonitor, ""Empty Disk"", nil, 2, {scale = 2})
            end

            bigcolourmonitor.setTextColour(colours.lightGrey)
            if string.len(tostring(diskdrive.getDiskID())) < 17 then
                mf.writeOn(bigcolourmonitor, ""Disk ID: ""..tostring(diskdrive.getDiskID()), 52-(3*string.len(tostring(diskdrive.getDiskID()))), 9, {scale = 1})
            else
                mf.writeOn(bigcolourmonitor, ""Disk ID: ""..string.sub(tostring(diskdrive.getDiskID()), 1, 14)..""..."", 3, 9, {scale = 1})
            end

            bigcolourmonitor.setTextColour(colours.grey)
            bigcolourmonitor.setCursorPos(1,13)
            bigcolourmonitor.write(string.rep(""\131"",80))
            bigcolourmonitor.setTextColour(colours.lightGrey)

            local linenum = 14
            for i=1,5 do
                local t = 5*(albumpage-1)+i
                if t <= #musicdata then
                    if t==albumplaying then
                        bigcolourmonitor.setTextColour(colours.white)
                    end
                    if string.len(musicdata[t][""albumname""]) < 26 then
                        mf.writeOn(bigcolourmonitor, musicdata[t][""albumname""], 2, linenum, {scale = 1, condense = true})
                    else
                        mf.writeOn(bigcolourmonitor, string.sub(musicdata[t][""albumname""], 1, 22)..""..."", 2, linenum, {scale = 1, condense = true})
                    end
                    linenum = linenum + 3
                    bigcolourmonitor.setTextColour(colours.grey)
                    if t==albumplaying then
                        bigcolourmonitor.setTextColour(colours.lightGrey)
                    end
                    if string.len(musicdata[t][""albumartistname""]) < 26 then
                        mf.writeOn(bigcolourmonitor, musicdata[t][""albumartistname""], 2, linenum, {scale = 1, condense = true})
                    else
                        mf.writeOn(bigcolourmonitor, string.sub(musicdata[t][""albumartistname""],1 , 22)..""..."", 2, linenum, {scale = 1, condense = true})
                    end
                    linenum = linenum + 3
                    bigcolourmonitor.setTextColour(colours.grey)
                    bigcolourmonitor.setCursorPos(1,linenum)
                    bigcolourmonitor.write(string.rep(""\131"",80))
                    bigcolourmonitor.setTextColour(colours.lightGrey)
                    linenum = linenum + 1
                end
            end
            bigcolourmonitor.setTextColour(colours.white)
            mf.writeOn(bigcolourmonitor, ""<"", 2, 50, {dy = -1, scale = 1})
            mf.writeOn(bigcolourmonitor, ""settings"", nil, 50, {dy = -1, scale = 1, condense = true})
            mf.writeOn(bigcolourmonitor, "">"", 76, 50, {dy = -1, scale = 1})
        else
            bigcolourmonitor.setBackgroundColour(colours.grey)
            bigcolourmonitor.setTextColour(colours.white)
            mf.writeOn(bigcolourmonitor, string.rep("" "", 25)..""No Disk Present""..string.rep("" "", 25), nil, nil, {scale = 1})
            bigcolourmonitor.setBackgroundColour(colours.black)
        end
    elseif menustate==""settings"" then
        bigcolourmonitor.setTextColour(colours.white)
        mf.writeOn(bigcolourmonitor, ""Settings"", nil, 2, {scale = 2, dy = 1, condense = true})
        bigcolourmonitor.setTextColour(colours.grey)
        bigcolourmonitor.setCursorPos(1,9)
        bigcolourmonitor.write(string.rep(""\131"",80))
        bigcolourmonitor.setTextColour(colours.white)
        iconDisplay(bigcolourmonitor, ""about"", 4, 16)
        iconDisplay(bigcolourmonitor, ""addmusic"", 32, 16)
        iconDisplay(bigcolourmonitor, ""discord"", 61, 16)
        iconDisplay(bigcolourmonitor, ""themes"", 16, 33)
        iconDisplay(bigcolourmonitor, ""edit"", 48, 33)
        mf.writeOn(bigcolourmonitor, ""return"", nil, 50, {dy = -1, scale = 1, condense = true})
    elseif menustate==""about"" then
        mf.writeOn(bigcolourmonitor, ""About"", nil, 2, {scale = 2, condense = true})
        bigcolourmonitor.setTextColour(colours.grey)
        bigcolourmonitor.setCursorPos(1,9)
        bigcolourmonitor.write(string.rep(""\131"",80))
        bigcolourmonitor.setTextColour(colours.white)
        mf.writeOn(bigcolourmonitor, ""I'm Blockman, the Minecraft Walkman!\nAdd music (.dfpwm) and album art (.bimg) to me as direct download links.\n\nbimg convertor, 4x4 monitors:\nhttps://masongulu.github.io/js-bimg-generator/\n\ndfpwm convertor:\nhttps://music.madefor.cc"", 2, 11, {scale = 1, condense = true, wrapWidth = 158})
        bigcolourmonitor.setTextColour(colours.grey)
        mf.writeOn(bigcolourmonitor, ""(click anywhere to exit)"", nil, 49, {scale = 1, condense = true})
    elseif menustate==""addmusic"" then
        bigcolourmonitor.setBackgroundColour(colours.grey)
        bigcolourmonitor.setTextColour(colours.white)
        mf.writeOn(bigcolourmonitor, string.rep("" "", 25)..""Adding Music Data...""..string.rep("" "", 25), nil, nil, {scale = 1})
        bigcolourmonitor.setBackgroundColour(colours.black)
        addMusicData()
        diskRemove()
        diskCheck()
        refreshBigColour()
    elseif menustate==""socials"" then
        mf.writeOn(bigcolourmonitor, ""Socials"", nil, 2, {scale = 2, condense = true})
        bigcolourmonitor.setTextColour(colours.grey)
        bigcolourmonitor.setCursorPos(1,9)
        bigcolourmonitor.write(string.rep(""\131"",80))
        bigcolourmonitor.setTextColour(colours.white)
        mf.writeOn(bigcolourmonitor, ""Hi! I'm Ella, the creator of Blockman.\nThis project was made possible by lots of support from the ComputerCraft community, and Michiel's handy morefonts library. For help and bug reports, message me on Discord:\n@ellabunnyxo or @bluerella\n\nLove, Ella <3"", 2, 11, {scale = 1, condense = true, wrapWidth = 158})
        bigcolourmonitor.setTextColour(colours.grey)
        mf.writeOn(bigcolourmonitor, ""(click anywhere to exit)"", nil, 49, {scale = 1, condense = true})
    elseif menustate==""edit"" then
        bigcolourmonitor.setBackgroundColour(colours.grey)
        bigcolourmonitor.setTextColour(colours.white)
        mf.writeOn(bigcolourmonitor, string.rep("" "", 25)..""Editing Music Data...""..string.rep("" "", 25), nil, nil, {scale = 1})
        bigcolourmonitor.setBackgroundColour(colours.black)
        editMusicData()
        diskRemove()
        diskCheck()
        refreshBigColour()
    end
end

local function refreshSmallColour()
    smallcolourmonitor.clear()
    if playpause==false then
        iconDisplay(smallcolourmonitor, ""play"", 32, 1)
    else
        iconDisplay(smallcolourmonitor, ""pause"", 32, 1)
    end
    iconDisplay(smallcolourmonitor, ""skip"", 48, 1)
    iconDisplay(smallcolourmonitor, ""rewind"", 16, 1)
    if shuffle==false then
        iconDisplay(smallcolourmonitor, ""shuffleOFF"", 1, 1)
    else
        iconDisplay(smallcolourmonitor, ""shuffleON"", 1, 1)
    end
    if loop==false then
        iconDisplay(smallcolourmonitor, ""loopOFF"", 64, 1)
    else
        iconDisplay(smallcolourmonitor, ""loopON"", 64, 1)
    end
end

local function changeTrack()
    playpause = false
    refreshSmallColour()
    displayphrase = ""Loading Track...""
    refreshGrey()
    decoder = dfpwm.make_decoder()
    audiohandle = http.get(musicdata[albumplaying][trackplaying][""tracklink""])
    if audiohandle then
        getDuration()
        displayphrase = "" ""
        refreshGrey()
        greymonitor.setTextColour(colours.grey)
        mf.writeOn(greymonitor, formatTime(duration), 63, 8, {scale = 1, dx = 1})
        greymonitor.setTextColour(colours.white)
        progress = 0
    else
        displayphrase = ""Error Loading Track""
        refreshGrey()
    end
end

local function playNext()
    if queuepos==#queue then
        queuepos = 1
        trackplaying = queue[queuepos]
        track = trackplaying
        refreshBigColour()
        changeTrack()
        if loop then
            if audiohandle then
                playpause = true
            end
            refreshSmallColour()
            refreshGrey()
        end
    else
        queuepos = queuepos + 1
        trackplaying = queue[queuepos]
        track = trackplaying
        refreshBigColour()
        changeTrack()
        if audiohandle then
            playpause = true
        end
        refreshSmallColour()
        refreshGrey()
    end
end

local function playPrevious()
    if progress > 5 then
        progress = 0
        changeTrack()
    else
        if queuepos==1 then
            queuepos = #queue
        else
            queuepos = queuepos - 1
        end
        trackplaying = queue[queuepos]
        track = trackplaying
        refreshBigColour()
        changeTrack()
    end
    if displayphrase ~= ""Error Loading Track"" then
        playpause = true
    end
    refreshGrey()
end

local function makeQueue(album)
    queue = {}
    if album~=0 then
        queuepos = trackplaying
        for i = 1, #musicdata[album] do
            queue[i] = i 
        end
        if shuffle then
            queue[1] = trackplaying
            queuepos = 1
            for i = 2, #musicdata[album] do
                local r, t = math.random(2, #musicdata[album])
                t = queue[i]
                queue[i] = queue[r]
                queue[r] = t
            end
        end
    end
end

local function trackTouch(k)
    track = 5*(trackpage-1)+k
    if albumplaying~=album then
        makeQueue(album)
        if trackplaying==track then
            playpause = false
            refreshSmallColour()
            albumplaying = album
            refreshBigColour()
            changeTrack()
        end
    end
    if trackplaying~=track then
        playpause = false
        refreshSmallColour()
        trackplaying = track
        queuepos = trackplaying
        albumplaying = album
        refreshBigColour()
        changeTrack()
    end
    if shuffle then
        makeQueue(album)
    end
    if displayphrase ~= ""Error Loading Track"" then
        playpause = true
    end
    refreshGrey()
end

local function albumTouch(k)
    album = 5*(albumpage-1)+k
    if album==albumplaying then
        track = trackplaying
    else
        track = 0
    end
    trackpage = 1
    menustate = ""tracks""
    tempalbumname = musicdata[album][""albumname""]..""   ""
end

local function touchBigColour(x, y)
    local mouseX, mouseY = x, y
    if menustate==""albumart"" then
        menustate = ""tracks""
    elseif menustate==""tracks"" then
        if mouseY < 13 then
            menustate = ""albumart""
        elseif mouseY > 13 and mouseY < 20 and 5*(trackpage-1)+1 <= #musicdata[album] then
            trackTouch(1)
        elseif mouseY > 20 and mouseY < 27 and 5*(trackpage-1)+2 <= #musicdata[album] then
            trackTouch(2)
        elseif mouseY > 27 and mouseY < 34 and 5*(trackpage-1)+3 <= #musicdata[album] then
            trackTouch(3)
        elseif mouseY > 34 and mouseY < 41 and 5*(trackpage-1)+4 <= #musicdata[album] then
            trackTouch(4)
        elseif mouseY > 41 and mouseY < 48 and 5*(trackpage-1)+5 <= #musicdata[album] then
            trackTouch(5)
        elseif mouseY > 48 then
            if mouseX < 6 then
                if trackpage==1 then
                    leftarrowwobble = true
                else
                    trackpage = trackpage-1
                end
            elseif mouseX > 33 and mouseX < 47 then
                menustate = ""albums""
                tempdisklabel = musicdata[""disklabel""]..""   ""
            elseif mouseX > 73 then
                if trackpage==math.ceil(#musicdata[album]/5) then
                    rightarrowwobble = true
                else
                    trackpage = trackpage+1
                end
            end
        end
    elseif menustate==""albums"" then
        if mouseY > 13 and mouseY < 20 and 5*(albumpage-1)+1 <= #musicdata then
            albumTouch(1)
        elseif mouseY > 20 and mouseY < 27 and 5*(albumpage-1)+2 <= #musicdata then
            albumTouch(2)
        elseif mouseY > 27 and mouseY < 34 and 5*(albumpage-1)+3 <= #musicdata then
            albumTouch(3)
        elseif mouseY > 34 and mouseY < 41 and 5*(albumpage-1)+4 <= #musicdata then
            albumTouch(4)
        elseif mouseY > 41 and mouseY < 48 and 5*(albumpage-1)+5 <= #musicdata then
            albumTouch(5)
        elseif mouseY > 48 then
            if mouseX < 6 then
                if albumpage==1 or #musicdata==0 then
                    leftarrowwobble = true
                else
                    albumpage = albumpage-1
                end
            elseif mouseX > 27 and mouseX < 53 then
                menustate = ""settings""
            elseif mouseX > 73 then
                if albumpage==math.ceil(#musicdata/5) or #musicdata==0 then
                    rightarrowwobble = true
                else
                    albumpage = albumpage+1
                end
            end
        end
    elseif menustate==""settings"" then
        if mouseY > 15 and mouseY < 26 then
            if mouseX > 3 and mouseX < 20 then
                menustate = ""about""
            elseif mouseX > 31 and mouseX < 48 then
                menustate = ""addmusic""
            elseif mouseX > 60 and mouseX < 77 then
                menustate = ""socials""
            end
        elseif mouseY > 32 and mouseY < 43 then
            if mouseX > 15 and mouseX < 32 then
                if theme[""themenum""] == 8 then
                    changeTheme(1)
                else
                    changeTheme(theme[""themenum""] + 1)
                end
                setTheme()
            elseif mouseX > 47 and mouseX < 64 then
                menustate = ""edit""
            end
        elseif mouseY > 48 and mouseX > 30 and mouseX < 50 then
            menustate = ""albums""
        end
    elseif menustate==""about"" then
        menustate = ""settings""
    elseif menustate==""socials"" then
        menustate = ""settings""
    end
end

local function touchSmallColour(x,y)
    local mouseX, mouseY = x, y
    if mouseX<16 then
        if shuffle==false then
            shuffle = true
        else shuffle = false
        end
        refreshSmallColour()
        if trackplaying~=0 then
            makeQueue(albumplaying)
        end
    elseif mouseX<32 and queuepos then
        playPrevious()
        refreshSmallColour()
    elseif mouseX<48 then
        if audiohandle then
            if playpause==false then
                playpause = true
            else playpause = false
            end
            refreshGrey()
            refreshSmallColour()
        end
    elseif mouseX<64 and queuepos then
        playNext()
        if displayphrase ~= ""Error Loading Track"" then
            playpause = true
        end
        if loop and queuepos==1 then
            refreshSmallColour()
        end
    elseif mouseX > 64 then
        if loop==false then
            loop = true
        else loop = false
        end
        refreshSmallColour()
    end
end

local function touchSpeaker(x,y)
    local mouseX, mouseY = x, y
    if mouseX > 3 and mouseX < 13 then
        if mouseY > 1 and mouseY < 6 then
            if volume < 3 then
                volume = volume + 0.5
                refreshSpeaker()
            else
                volumeupwobble = true
            end
        elseif mouseY > 18 and mouseY < 24 then
            if volume > 0 then
                volume = volume - 0.5
                refreshSpeaker()
            else
                volumedownwobble = true
            end
        end
    end
end

local function frozenWobble(message)
    bigcolourmonitor.setPaletteColor(colours.red, 0xCC4C4C)
    local function shake(d)
        bigcolourmonitor.clear()
        bigcolourmonitor.setTextColour(colours.red)
        bigcolourmonitor.setBackgroundColour(colours.grey)
        mf.writeOn(bigcolourmonitor, string.rep("" "", 25)..message..string.rep("" "", 25), nil, nil, {scale = 1, dx = d})
        sleep(0.1)
        bigcolourmonitor.setBackgroundColour(colours.black)
    end
    shake(-2)
    shake(2)
    shake(-1)
    shake(1)
    bigcolourmonitor.setTextColour(colours.white)
    bigcolourmonitor.setBackgroundColour(colours.black)
    refreshBigColour()
end

local function arrowWobble()
    while true do
        if (leftarrowwobble==true)then
            bigcolourmonitor.setTextColour(colours.white)
            mf.writeOn(bigcolourmonitor, ""< "", 2, 50, {dx = -1, dy = -1, scale = 1})
            sleep(0.1)
            mf.writeOn(bigcolourmonitor, "" <"", -1, 50, {dx = 1, dy = -1, scale = 1})
            sleep(0.1)
            mf.writeOn(bigcolourmonitor, ""< "", 2, 50, {dy = -1, scale = 1})
            leftarrowwobble = false
        elseif (rightarrowwobble==true)then
            bigcolourmonitor.setTextColour(colours.white)
            mf.writeOn(bigcolourmonitor, "" >"", 73, 50, {dx = 1, dy = -1, scale = 1})
            sleep(0.1)
            mf.writeOn(bigcolourmonitor, ""> "", 76, 50, {dx = -1, dy = -1, scale = 1})
            sleep(0.1)
            mf.writeOn(bigcolourmonitor, "" >"", 73, 50, {dy = -1, scale = 1})
            rightarrowwobble = false
        else
            sleep (0.05)
        end
    end
end

local function displayPhraseMarquee()
    while true do
        if greymarquee then
            for i = 2, 0,-1 do
                if greymarquee then
                    mf.writeOn(greymonitor, string.sub(tempdisplayphrase, 1, 27), i, 2, {scale = 1})
                end
                for j = 2,4,1 do
                    if greymarquee then
                        greymonitor.setCursorPos(1, j)
                        greymonitor.write(""  "")
                        greymonitor.setCursorPos(78, j)
                        greymonitor.write(""  "")
                    end
                end
                sleep(0.05)
            end
            local temp = string.sub(tempdisplayphrase, 1, 1)
            tempdisplayphrase = string.sub(tempdisplayphrase, 2, #tempdisplayphrase)..temp
        else
            sleep(0.05)
        end
    end
end

local function Marquee()
    while true do
        if albummarquee then
            for i = 2,-3,-1 do
                if albummarquee then
                    mf.writeOn(bigcolourmonitor, string.sub(tempalbumname, 1, 14), i, 2, {scale = 2})
                end
                for j = 2,7,1 do
                    if albummarquee then
                        bigcolourmonitor.setCursorPos(1, j)
                        bigcolourmonitor.write("" "")
                        bigcolourmonitor.setCursorPos(79, j)
                        bigcolourmonitor.write("" "")
                    end
                end
                sleep(0.05)
            end
            local temp = string.sub(tempalbumname, 1, 1)
            tempalbumname = string.sub(tempalbumname, 2, #tempalbumname)..temp
        elseif disklabelmarquee then
            for i = 2,-3,-1 do
                if disklabelmarquee then
                    mf.writeOn(bigcolourmonitor, string.sub(tempdisklabel, 1, 14), i, 2, {scale = 2})
                end
                for j = 2,7,1 do
                    if disklabelmarquee then
                        bigcolourmonitor.setCursorPos(1, j)
                        bigcolourmonitor.write("" "")
                        bigcolourmonitor.setCursorPos(79, j)
                        bigcolourmonitor.write("" "")
                    end
                end
                sleep(0.05)
            end
            local temp = string.sub(tempdisklabel, 1, 1)
            tempdisklabel = string.sub(tempdisklabel, 2, #tempdisklabel)..temp
        else
            sleep(0.05)
        end
    end
end

local function checkEvents()
    repeat
        local event, monitornum, mouseX, mouseY = os.pullEvent()

        if event==""disk"" then
            diskCheck()
            refreshBigColour()
            refreshSmallColour()
            refreshGrey()
        elseif event==""disk_eject"" then
            diskRemove()
            refreshBigColour()
            refreshSmallColour()
            refreshGrey()
        end

        if event==""monitor_touch"" then
            if diskdrive.isDiskPresent() then
                if monitornum==peripheral.getName(smallcolourmonitor) then
                    touchSmallColour(mouseX, mouseY)
                end
                if monitornum==peripheral.getName(bigcolourmonitor) then
                    touchBigColour(mouseX, mouseY)
                    refreshBigColour()
                    refreshSmallColour()
                end
                if monitornum==peripheral.getName(speakermonitor) then
                    touchSpeaker(mouseX, mouseY)
                end
            else
                frozenWobble(""No Disk Present"")
            end
        end
    until event==""char""
end

local function progressTracker()
    while true do
        if playpause then
            sleep(0.5)
            progress = progress + 0.5
        else
            sleep(0.5)
        end
    end
end

local function progressBarDisplay()
    while true do
        if playpause then
            greymonitor.setTextColour(colours.grey)
            greymonitor.setCursorPos(3, 6)
            greymonitor.write(string.rep(""\143"", 75))
            greymonitor.setTextColour(colours.lightGrey)
            mf.writeOn(greymonitor, formatTime(progress), 3, 8, {scale = 1})
            greymonitor.setTextColour(colours.white)
            greymonitor.setCursorPos(3, 6)
            greymonitor.write(string.rep(""\143"", math.floor(75*progress/duration)))
            sleep(1)
        else
            sleep(0.1)
        end
    end
end

local function streamAudio()
    while true do
        if not playpause then
            sleep(0.05)
        else
            local chunk
            if audiohandle then
                chunk = audiohandle.read(1000)
            end
            if not chunk then
                playNext()
            else
                buffer = decoder(chunk)
                while not speaker.playAudio(buffer, volume)do
                    os.pullEvent(""speaker_audio_empty"")
                end
            end
        end
    end
end

bigcolourmonitor.setBackgroundColour(colours.black)
greymonitor.setBackgroundColour(colours.black)
smallcolourmonitor.setBackgroundColour(colours.black)
speakermonitor.setBackgroundColour(colours.black)
changeTheme()
setTheme()
diskCheck()
refreshBigColour()
refreshGrey()
refreshSmallColour()
refreshSpeaker()

parallel.waitForAny(checkEvents, Marquee, arrowWobble, progressTracker, streamAudio, displayPhraseMarquee, progressBarDisplay)"
BmRRKZXu,Retroarch Quick Setup Guide,metalx1000,Bash,Wednesday 3rd of July 2024 02:30:20 PM CDT,"#quick retroarch setup on Debian Linux

sudo apt install retroarch

# get roms
mkdir -p ~/roms/{nes,mame,gameboy,sega}
wget ""https://archive.org/download/mame-merged/BIOS/MAME%20%28bios-devices%29.zip/MAME%20%28bios-devices%29%2Fqsound_hle.zip"" -cO ~/roms/mame/qsound_hle.zip
wget ""https://archive.org/download/mame-merged/mame-merged/sfa2.zip"" -cP ~/roms/mame
wget -cP ~/roms/mame  ""https://archive.org/download/mame-merged/mame-merged/mspacman.zip""

wget -cP ~/roms/nes  ""https://archive.org/download/nes-romset-ultra-us/Super%20Mario%20Bros.%20%2B%20Duck%20Hunt%20%28U%29%20%5B%21%5D.zip""
wget -cP ~/roms/nes  ""https://archive.org/download/nes-romset-ultra-us/Super%20Mario%20Bros.%203%20%28USA%29%20%28Rev%201%29%20%28Virtual%20Console%29.zip""
wget -cP ~/roms/nes  ""https://archive.org/download/nes-romset-ultra-us/Super%20Mario%20Bros.%202%20%28U%29%20%28PRG1%29%20%5B%21%5D.zip""

wget -cP ~/roms/gameboy  ""https://archive.org/download/game-boy-romset-ultra-us/Tetris%20%28World%29%20%28Rev%20A%29.zip""
wget -cP ~/roms/gameboy  ""https://archive.org/download/game-boy-romset-ultra-us/Super%20Mario%20Land%20%28World%29.zip""

wget -cP ~/roms/sega  ""https://archive.org/download/sega-genesis-romset-ultra-usa/Sonic%20The%20Hedgehog%20%28USA%2C%20Europe%29.zip""
wget -cP ~/roms/sega  ""https://archive.org/download/sega-genesis-romset-ultra-usa/Sonic%20The%20Hedgehog%202%20%28USA%2C%20Europe%29%20%28Rev%20A%29%20%28Virtual%20Console%29.zip""

#start retroarch
Settings -> User Interface  -> Menu Item Visibility -> Show ""Core Downloader""
Main Menu -> Online Updater -> Update All

#Load Cores
Load Core -> Download Cores -> Select Cores (use 's' to search)

#if cores will not download check permissions
sudo chmod 777 /usr/lib/x86_64-linux-gnu/libretro

#Create Playlists
Import Content -> Scan Directory

#get thumbnails
Main Menu -> Online Updater -> Playlist Thumbnail Updater
Main Menu -> Online Updater -> On-Demand Thumbnail Downloader (if you want to download as you go)

#mame playlist and thumbnails
#mame is special
#dat file needed.  It's an xml file, but you need to rename it .dat
wget -cO ~/roms/mame.dat ""https://raw.githubusercontent.com/libretro-thumbnails/mame2003-plus-thumbnail-sources/master/MAME%202003-Plus%20-%202018-12-31.xml""

Import Content -> Manual Scan

#Manual Thumbnails
Main Menu -> Show Desktop Menu
#thumbnail images can be found here:
https://thumbnails.libretro.com/



"
80qh2EPy,Untitled,oshkoshbagoshh,Bash,Wednesday 3rd of July 2024 01:34:00 PM CDT,"#!/bin/bash

# Create project directories
mkdir -p project-root/{config,src/{models,services,utils,controllers},assets,data,scripts}

# Create .env file
cat <<EOL > project-root/.env
# MongoDB configuration
MONGODB_URI=mongodb://localhost:27017/seo_data

# PostgreSQL configuration
PGUSER=yourusername
PGHOST=localhost
PGDATABASE=yourdatabase
PGPASSWORD=yourpassword
PGPORT=5432

# Path to Client folder One Drive
CLIENT_ONEDRIVE_PATH=/path/to/onedrive/folder
EOL

# Create config/db.js
cat <<EOL > project-root/config/db.js
import { Client } from 'pg';
import mongoose from 'mongoose';
import dotenv from 'dotenv';

dotenv.config();

// MongoDB Configuration
mongoose.connect(process.env.MONGODB_URI, { useNewUrlParser: true, useUnifiedTopology: true })
  .then(() => console.log('MongoDB connected'))
  .catch(err => console.error('MongoDB connection error:', err));

// PostgreSQL Configuration
const pgClient = new Client({
  user: process.env.PGUSER,
  host: process.env.PGHOST,
  database: process.env.PGDATABASE,
  password: process.env.PGPASSWORD,
  port: process.env.PGPORT,
});

pgClient.connect()
  .then(() => console.log('PostgreSQL connected'))
  .catch(err => console.error('PostgreSQL connection error:', err));

export { mongoose, pgClient };
EOL

# Create config/puppeteer.js
cat <<EOL > project-root/config/puppeteer.js
import puppeteer from 'puppeteer';

const launchOptions = {
  headless: true,
  args: ['--no-sandbox', '--disable-setuid-sandbox'],
};

export const getBrowserInstance = async () => {
  const browser = await puppeteer.launch(launchOptions);
  return browser;
};
EOL

# Create src/models/SeoData.js
cat <<EOL > project-root/src/models/SeoData.js
import mongoose from 'mongoose';

const seoSchema = new mongoose.Schema({
  url: String,
  title: String,
  seoScore: Number,
  colors: [String],
  colorAccessibility: Boolean,
  isWP: Boolean,
  wpThemeDeveloper: String,
  wpPlugins: [String],
  imgAltDescriptions: [String],
});

const SeoData = mongoose.model(""SeoData"", seoSchema);

export default SeoData;
EOL

# Create src/services/scrapeService.js
cat <<EOL > project-root/src/services/scrapeService.js
import puppeteer from 'puppeteer';
import fs from 'fs';
import path from 'path';
import { saveToMongoDB, saveToPostgres } from './dbService';
import { calculateSeoScore } from './seoScore';
import { checkColorAccessibility } from '../utils/helpers';
import { getBrowserInstance } from '../../config/puppeteer';
import dotenv from 'dotenv';

dotenv.config();

async function scrapeSite(site) {
  const browser = await getBrowserInstance();
  const page = await browser.newPage();
  
  try {
    await page.goto(site.url, { waitUntil: 'networkidle2' });
    
    // Take a PDF of the site
    const pdfPath = path.join('assets', \`\${site.url.replace(/https?:\\/\\//, '').replace(/\\//g, '_')}.pdf\`);
    await page.pdf({ path: pdfPath, format: 'A4' });
    
    // Extract data from the site
    const data = await page.evaluate(() => {
      const title = document.title;
      const colors = Array.from(new Set(Array.from(document.querySelectorAll('*')).map(el => getComputedStyle(el).color)));
      const isWP = !!document.querySelector('meta[name=""generator""][content*=""WordPress""]');
      const wpThemeDeveloper = isWP ? document.querySelector('meta[name=""generator""]').content : null;
      const wpPlugins = isWP ? Array.from(document.querySelectorAll('[class*=""plugin""]')).map(el => el.className) : [];
      const imgAltDescriptions = Array.from(document.querySelectorAll('img')).map(img => img.alt);
      const ariaUsage = !!document.querySelector('[role]') || !!document.querySelector('[aria-*]');
      const brokenLinks = Array.from(document.querySelectorAll('a')).filter(a => !a.href || a.href === '#').length;

      return {
        title,
        colors,
        isWP,
        wpThemeDeveloper,
        wpPlugins,
        imgAltDescriptions,
        ariaUsage,
        brokenLinks
      };
    });

    // Calculate SEO score
    data.seoScore = calculateSeoScore(data);
    data.url = site.url;

    // Save data to MongoDB and PostgreSQL
    await saveToMongoDB(data);
    await saveToPostgres(data);

    console.log(\`Scraped and saved data for \${site.url}\`);
  } catch (error) {
    console.error(\`Error scraping \${site.url}: \`, error);
  } finally {
    await browser.close();
  }
}

export { scrapeSite };
EOL

# Create src/services/seoScore.js
cat <<EOL > project-root/src/services/seoScore.js
const weights = {
  bestPractices: 0.15,
  mobile: 0.10,
  analyticsAndMonitoring: 0.10,
  performance: 0.15,
  usability: 0.10,
  semantics: 0.10,
  seo: 0.20,
  codeQuality: 0.05,
  accessibility: 0.10,
  security: 0.05,
  socialMediaAndStructuredData: 0.05,
};

const maxScore = {
  required: {
    bestPractices: 4,
    mobile: 4,
    analyticsAndMonitoring: 2,
    performance: 3,
    usability: 5,
    semantics: 2,
    seo: 4,
    codeQuality: 5,
    accessibility: 3,
    security: 2,
    socialMediaAndStructuredData: 0, // No required tasks
  },
  optional: {
    usability: 2,
    security: 3,
    socialMediaAndStructuredData: 4,
    andFinally: 1,
  }
};

function calculateSeoScore(data) {
  let totalScore = 0;

  // Calculate required scores
  Object.keys(weights).forEach(category => {
    if (data[category] && data[category].required) {
      const completedTasks = data[category].required.filter(task => task.completed).length;
      totalScore += (completedTasks / maxScore.required[category]) * weights[category];
    }
    
    if (data[category] && data[category].optional) {
      const completedTasks =

"
6iJVGy0i,Unit_33,lovelyvook,C#,Wednesday 3rd of July 2024 01:20:38 PM CDT,"using System;
using System.Collections.Generic;

namespace Ijunior
{
    internal class Program
    {
        static void Main(string[] args)
        {
            Queue<int> customers = new Queue<int>();
            int sum = 0;
            int offsetInfo = 40;
            int currenCustomer;

            FillQueue(customers);

            while (customers.Count > 0)
            {
                currenCustomer = customers.Dequeue();
                sum += currenCustomer;

                Console.SetCursorPosition(0, 0);
                Console.WriteLine(""–¢–µ–∫—É—â–∏–π –ø–æ–∫—É–ø–∞—Ç–µ–ª—å: "" + currenCustomer);

                foreach (var customer in customers)
                {
                    Console.WriteLine(customer);
                }

                Console.SetCursorPosition(offsetInfo, 0);
                Console.WriteLine(""–û–±—â–∞—è —Å—É–º–º–∞: "" + sum);
                Console.ReadKey();
                Console.Clear();
            }
        }

        static void FillQueue(Queue<int> queue)
        {
            Random random = new Random();
            int minRandomNumber = 10;
            int maxRandomNumber = 100;
            int countCustomers = 10;

            for (int i = 0; i < countCustomers; i++)
            {
                queue.Enqueue(random.Next(minRandomNumber, maxRandomNumber));
            }
        }
    }
}"
kkpxDtf4,Untitled,Mahtrok,C#,Wednesday 3rd of July 2024 01:08:12 PM CDT,"void UpdateInventories()
{
    try
    {
        inventories.Clear();

        total = 0;
        current = 0;

        var myCubeGrid = myTerminalBlock.CubeGrid as MyCubeGrid;
        var myFatBlocks = MahUtillities.GetBlocks(myCubeGrid, searchId, excludeIds, surfaceData.showSubgrids);// myCubeGrid.GetFatBlocks().Where(block => block.HasInventory);

        foreach (var myBlock in myFatBlocks)
        {
            if (myBlock == null) continue;
            if (!myBlock.HasInventory) continue;

            for (int i = 0; i < myBlock.InventoryCount; i++)
            {
                IMyInventory inventory = myBlock.GetInventory(i);

                total += (double)inventory.MaxVolume;
                current += (double)inventory.CurrentVolume;

                inventories.Add(inventory);
            }
        }
    }
    catch (Exception e)
    {
        MyLog.Default.WriteLine($""MahrianeIndustries.LCDInfo.LCDIngotsSummaryInfo: Caught Exception while updating inventories: {e.ToString()}"");
    }
}"
7iyNuWmt,"03_Debian 12 Minimal Install w/BTRFS, Systemd-boot",S-c-a-r-y,Bash,Wednesday 3rd of July 2024 12:58:05 PM CDT,"#Boot minimal install

#Select Advanced Options ...
#Select ... Expert Install

#Set Hostname
ry

#Set Domain Name
ry

#Setup users and passwords
#Allow root login?
No

#Partition disks
Manual Partitioning
#Partition
No. 1 - 536.6 MB
#Name
EFI
#Use As:
EFI System Partition
#Partition
No.2 - 511.3 MB
#Name
boot
#Use As:
Ext2
#Label
boot
#Partition
No.3 - Rest of disk
#Name
Debian
#Use As:
physical volume for encryption
#Back to partition disks
Configure encrypted volumes
Create encrypted volumes
#Select device to be encrypted
#Setup passphrase
#Select encrypted partition in partitioning
#Use As
physical volume for LVM
#Configure Logical Volume Manager
#Create Volume Group
#Select crypt volume
#Create another logical volume
#Select Volume Group
root
#Select Size
#Create Logical Volume
home
#Select Size
#Finish
#Setup Partition
#Select root
#Use As
btrfs
#Mount Point
/ - the root file system
#Label
System
#Select home
#Use As
btrfs
#Mount Point
/home - user home directories
#Label
Home
#Done

#Ctrl+Alt+F2 BEFORE installing base system!
df -h

umount /target/boot/efi
umount /target/boot/
umount /target

mount /dev/mapper/... /mnt/
cd mnt/
ls
mv @rootfs @
btrfs subvolume create @home
ls #check for 2 subvolumes

mount -o rw,noatime,space_cache=v2,compress=zstd,ssd,discard=async,subvol=@ /dev/mapper/... /target
mkdir -p /target/boot/efi
mkdir -p /target/home
mount -o rw,noatime,space_cache=v2,compress=zstd,ssd,discard=async,subvol=@home /dev/mapper/... /target/home
mount /dev/nvme0n1p??? /target/boot
mount /dev/nvme0n1p1 /target/boot/efi/
nano /target/etc/fstab
#On 1st UUID take out defaults and put in above
#Same for /home & @home

umount /mnt

#Ctrl+Alt+F1

#Install Base System

#Select Mirror
#Best mirror for you

#Select Environment
standard system utilities #ONLY!

TO BE CONTINUED-------

#Zram Swap
sudo apt install zram-tools 
sudo nano /etc/default/zramswap
#Uncomment ALGO=lz4 & PERCENT=25

#Install Timeshift
sudo apt install timeshift
#Setup timeshift"
nBDmfPn9,Pixel Incremental 2 script,demonone23,Lua,Wednesday 3rd of July 2024 12:25:31 PM CDT,"-- Function to load external scripts using game:HttpGet and loadstring
local function loadScript(url)
    local script = game:HttpGet(url)
    if script then
        return loadstring(script)
    else
        print(""Failed to load script from URL: "" .. url)
        return nil
    end
end

-- Function to execute a script with a timeout
local function executeScript(script, timeout)
    local success, result = pcall(script)
    if not success then
        print(""Error executing script: "" .. result)
    end
end

-- List of script URLs to load and execute
local scriptURLs = {
    ""https://pastebin.com/raw/Hd91nhK8"", -- Auto Click & upgrade(Click)
    ""https://pastebin.com/raw/B7Yu4F6c"", -- GUI to Buy PP Upgrade
    ""https://raw.githubusercontent.com/NukeVsCity/Scripts2024/main/pixelincremental2"" -- Auto collect & upgrade (CREDITS TO NUKEVSCITY - https://discord.gg/fMSMWmvrA)
}

-- Load and execute each script with a timeout
for _, url in ipairs(scriptURLs) do
    local script = loadScript(url)
    if script then
        spawn(function()
            executeScript(script, 5) -- Timeout of 5 seconds
        end)
    end
end
"
m4USqkpA,startup,Filmos,Lua,Wednesday 3rd of July 2024 12:10:05 PM CDT,"function httpGet(url)
    local connection = http.get(url)
    local data = connection.readAll()
    connection.close()
    return data
end

loadstring(httpGet(""https://raw.githubusercontent.com/Aurif/HTMLil/main/install.lua""))()
"
w8H5chaE,books_storage,SaNik74,C#,Wednesday 3rd of July 2024 12:06:18 PM CDT,"namespace books_storage
{
    internal class Program
    {
        static void Main(string[] args)
        {
            Library library = new Library();
            library.Work();
        }
    }

    class Book
    {
        public Book(string name, string authorName, int yearOfPublishng)
        {
            Name = name;
            AuthorName = authorName;
            YearOfPublishng = yearOfPublishng;
        }

        public string Name { get; private set; }
        public string AuthorName { get; private set; }
        public int YearOfPublishng { get; private set; }
    }

    class Library
    {
        private List<Book> storageBooks = new List<Book>();

        public void Work()
        {
            const string AddBookCommand = ""1"";
            const string FindBookCommand = ""2"";
            const string DeleteBookCommand = ""3"";
            const string ShowAllBooksCommand = ""4"";
            const string ExitCommand = ""5"";

            bool isWorking = true;

            while (isWorking)
            {
                Console.WriteLine($""–•—Ä–∞–Ω–∏–ª–∏—â–µ –∫–Ω–∏–≥\n\n\n"" +
                    $""–í–≤–µ–¥–∏—Ç–µ {AddBookCommand} –µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –∫–Ω–∏–≥—É.\n"" +
                    $""–í–≤–µ–¥–∏—Ç–µ {FindBookCommand} –µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –Ω–∞–π—Ç–∏ –∫–Ω–∏–≥—É.\n"" +
                    $""–í–≤–µ–¥–∏—Ç–µ {DeleteBookCommand} –µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∫–Ω–∏–≥—É.\n"" +
                    $""–í–≤–µ–¥–∏—Ç–µ {ShowAllBooksCommand} –µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ —É–≤–∏–¥–µ—Ç—å —Å–ø–∏—Å–æ–∫ –∫–Ω–∏–≥.\n"" +
                    $""–í–≤–µ–¥–∏—Ç–µ {ExitCommand} –µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –≤—ã–π—Ç–∏ –∏–∑ –ø—Ä–æ–≥—Ä–∞–º–º—ã.\n\n"" +
                    $""–í–≤–æ–¥: "");

                string? userInput = Console.ReadLine();

                switch (userInput)
                {
                    case AddBookCommand:
                        AddBook();
                        break;

                    case FindBookCommand:
                        ShowFindBooks();
                        break;

                    case ShowAllBooksCommand:
                        ShowBooks(storageBooks);
                        break;

                    case DeleteBookCommand:
                        DeleteBook();
                        break;

                    case ExitCommand:
                        isWorking = false;
                        break;

                    default:
                        Console.WriteLine(""–í–≤–µ–¥–µ–Ω–∞ –Ω–µ–≤–µ—Ä–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞."");
                        break;
                }
                Console.ReadKey();
                Console.Clear();
            }
        }

        private void AddBook()
        {
            Console.Write(""–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–Ω–∏–≥–∏:"");
            string name = Console.ReadLine();

            Console.Write(""\n–í–≤–µ–¥–∏—Ç–µ –∏–º—è –∞–≤—Ç–æ—Ä–∞:"");
            string authorName = Console.ReadLine();

            Console.Write(""\n–í–≤–µ–¥–∏—Ç–µ –≥–æ–¥ –∫–Ω–∏–≥–∏:"");
            int yearOfPublishng = ReadInt();

            Book newBook = new Book(name, authorName, yearOfPublishng);
            storageBooks.Add(newBook);
        }

        private void ShowBooks(List<Book> books)
        {
            int numberBook = 1;

            if (IsEmptyValue(storageBooks) == true)
            {
                return;
            }

            foreach (var book in books)
            {
                Console.WriteLine($""{numberBook}. {book.Name} - {book.AuthorName} - {book.YearOfPublishng}"");
                numberBook++;
            }
        }

        private void ShowFindBooks()
        {
            List<Book> books = FindBook();
            ShowBooks(books);
        }

        private void DeleteBook()
        {
            List<Book> books = FindBook();

            for (int i = 0; i < storageBooks.Count; i++)
            {
                for (int j = 0; j < books.Count; j++)
                {
                    if (storageBooks[i] == books[i])
                    {
                        storageBooks.RemoveAt(i);
                    }
                }
            }
        }

        private string SelectSpecifitedParameter()
        {
            const int NameBookSelectCommand = 1;
            const int AuthorNameSelectCommand = 2;
            const int YearSelectCommand = 3;

            const string NameBookChoice = ""nameBookSelect"";
            const string AuthorNameChoice = ""authorNameSelect"";
            const string YearBookChoice = ""yearSelect"";

            string userChoice = """";

            Console.WriteLine($""–í–≤–µ–¥–∏—Ç–µ –∫–∞–∫–æ–π —Å–ø–æ—Å–æ–± —Ö–æ—Ç–∏—Ç–µ –≤—ã–±—Ä–∞—Ç—å:\n"" +
                $""{NameBookSelectCommand} - –µ—Å–ª–∏ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –∫–Ω–∏–≥–∏.\n"" +
                $""{AuthorNameSelectCommand} - –µ—Å–ª–∞ –ø–æ –∏–º–µ–Ω–∏ –∞–≤—Ç–æ—Ä–∞.\n"" +
                $""{YearSelectCommand} - –µ—Å–ª–∏ –ø–æ –≥–æ–¥—É –∏–∑–¥–∞–Ω–∏—è."");

            switch (ReadInt())
            {
                case NameBookSelectCommand:
                    userChoice = NameBookChoice;
                    break;

                case AuthorNameSelectCommand:
                    userChoice = AuthorNameChoice;
                    break;

                case YearSelectCommand:
                    userChoice = YearBookChoice;
                    break;

                default:
                    Console.WriteLine(""–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞."");
                    break;
            }

            return userChoice;
        }

        private List<Book> FindBook()
        {
            const string NameBookChoice = ""nameBookSelect"";
            const string AuthorNameChoice = ""authorNameSelect"";
            const string YearBookChoice = ""yearSelect"";

            List<Book> books = new List<Book>();

            int numberUserInput;
            string userChoiceSelect;
            string userInput;

            if (IsEmptyValue(storageBooks) == true)
            {
                return null;
            }

            userChoiceSelect = SelectSpecifitedParameter();

            if (userChoiceSelect == YearBookChoice)
            {
                Console.WriteLine(""–í–≤–µ–¥–∏—Ç–µ –≥–æ–¥ –∫–Ω–∏–≥–∏: "");

                numberUserInput = ReadInt();

                foreach (var bookNeed in storageBooks)
                {
                    if (bookNeed.YearOfPublishng == numberUserInput)
                    {
                        books.Add(bookNeed);
                    }
                }
            }
            else if (userChoiceSelect == NameBookChoice)
            {
                Console.Write(""\n–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–Ω–∏–≥–∏: "");
                userInput = Console.ReadLine();

                foreach (var bookNeed in storageBooks)
                {
                    if (bookNeed.Name == userInput)
                    {
                        books.Add(bookNeed);
                    }
                }
            }
            else if (userChoiceSelect == AuthorNameChoice)
            {
                Console.Write(""\n–í–≤–µ–¥–∏—Ç–µ –∏–º—è –∞–≤—Ç–æ—Ä–∞: "");
                userInput = Console.ReadLine();

                foreach (var bookNeed in storageBooks)
                {
                    if (bookNeed.AuthorName == userInput)
                    {
                        books.Add(bookNeed);
                    }
                }
            }

            if (books.Count == 0)
            {
                Console.WriteLine(""–ö–Ω–∏–≥–∏ —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º –Ω–µ—Ç."");
            }

            return books;
        }

        private bool IsEmptyValue(List<Book> books)
        {
            bool isEmpty = false;

            if (books.Count == 0)
            {
                isEmpty = true;
                Console.WriteLine(""–°–ø–∏—Å–æ–∫ –ø—É—Å—Ç."");
            }

            return isEmpty;
        }
        private int ReadInt()
        {
            bool isWorking = true;
            int number = 0;

            while (isWorking)
            {
                bool isNumber = int.TryParse(Console.ReadLine(), out number);

                if (isNumber == false)
                {
                    Console.WriteLine(""–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ."");
                }
                else
                {
                    isWorking = false;
                }
            }

            return number;
        }
    }
}"
DUFUzP1d,Untitled,Mahtrok,C#,Wednesday 3rd of July 2024 11:57:18 AM CDT,"public static List<MyCubeBlock> GetBlocks (MyCubeGrid cubeGrid, string searchId, List<string> excludeIds, bool includeSubGrids = false)
{
    var myFatBlocks = cubeGrid.GetFatBlocks().Where(block => block is IMyTerminalBlock);
    List<MyCubeBlock> allBlocks = new List<MyCubeBlock>();

    searchId = string.IsNullOrWhiteSpace(searchId) || searchId == ""*"" || searchId.Length < 2 ? ""*"" : searchId;

    foreach (var block in myFatBlocks)
    {
        if (block == null) continue;

        string blockId = ((IMyTerminalBlock)block).CustomName.ToLower();

        // Check if blockId is searchId
        if (searchId != ""*"" && !blockId.Contains(searchId)) continue;

        // Check if blockId should be ignored
        bool ignoreThisBlock = false;
        foreach (string s in excludeIds)
        {
            if (s == searchId) continue;
            if (s.Trim().Length <= 0) continue;
            if (s.Contains(""<"")) continue;
            if (blockId == s || blockId.Contains(s))
            {
                ignoreThisBlock = true;
                break;
            }
        }
        if (ignoreThisBlock) continue;

        allBlocks.Add(block as MyCubeBlock);

        // Scan SubGrids
        if (includeSubGrids)
        {
            if (block is IMyMechanicalConnectionBlock)
            {
                IMyMechanicalConnectionBlock mechanicalBlock = (IMyMechanicalConnectionBlock)block;
                var topBlock = mechanicalBlock.Top;
                MyCubeGrid subGrid = topBlock != null ? topBlock.CubeGrid as MyCubeGrid : null;
                allBlocks.AddRange(GetBlocks(subGrid, searchId, excludeIds, true));
            }
        }
    }

    return allBlocks;
}"
