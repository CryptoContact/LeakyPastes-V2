id,title,username,language,date,content
1UCh2hgJ,prestamos,Josuecocoman,Python,Monday 27th of November 2023 11:53:58 AM CDT,"Traceback (most recent call last):
  File ""/opt/odoo17/17.0/odoo/odoo/tools/cache.py"", line 99, in lookup
    r = d[key]
  File ""<decorator-gen-5>"", line 2, in __getitem__
  File ""/opt/odoo17/17.0/odoo/odoo/tools/func.py"", line 87, in locked
    return func(inst, *args, **kwargs)
  File ""/opt/odoo17/17.0/odoo/odoo/tools/lru.py"", line 34, in __getitem__
    a = self.d[obj]
KeyError: ('ir.model.data', <function IrModelData._xmlid_lookup at 0x7f4216726f80>, 'fss_loan.action_report_payment_receipt')

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File ""/opt/odoo17/17.0/odoo/odoo/tools/convert.py"", line 556, in _tag_root
    f(rec)
  File ""/opt/odoo17/17.0/odoo/odoo/tools/convert.py"", line 421, in _tag_record
    f_val = self.id_get(f_ref, raise_if_not_found=nodeattr2bool(rec, 'forcecreate', True))
  File ""/opt/odoo17/17.0/odoo/odoo/tools/convert.py"", line 538, in id_get
    res = self.model_id_get(id_str, raise_if_not_found)
  File ""/opt/odoo17/17.0/odoo/odoo/tools/convert.py"", line 544, in model_id_get
    return self.env['ir.model.data']._xmlid_to_res_model_res_id(id_str, raise_if_not_found=raise_if_not_found)
  File ""/opt/odoo17/17.0/odoo/odoo/addons/base/models/ir_model.py"", line 2171, in _xmlid_to_res_model_res_id
    return self._xmlid_lookup(xmlid)
  File ""<decorator-gen-42>"", line 2, in _xmlid_lookup
  File ""/opt/odoo17/17.0/odoo/odoo/tools/cache.py"", line 104, in lookup
    value = d[key] = self.method(*args, **kwargs)
  File ""/opt/odoo17/17.0/odoo/odoo/addons/base/models/ir_model.py"", line 2164, in _xmlid_lookup
    raise ValueError('External ID not found in the system: %s' % xmlid)
ValueError: External ID not found in the system: fss_loan.action_report_payment_receipt

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File ""/opt/odoo17/17.0/odoo/odoo/http.py"", line 1732, in _serve_db
    return service_model.retrying(self._serve_ir_http, self.env)
  File ""/opt/odoo17/17.0/odoo/odoo/service/model.py"", line 133, in retrying
    result = func()
  File ""/opt/odoo17/17.0/odoo/odoo/http.py"", line 1759, in _serve_ir_http
    response = self.dispatcher.dispatch(rule.endpoint, args)
  File ""/opt/odoo17/17.0/odoo/odoo/http.py"", line 1960, in dispatch
    result = self.request.registry['ir.http']._dispatch(endpoint)
  File ""/opt/odoo17/17.0/odoo/odoo/addons/base/models/ir_http.py"", line 207, in _dispatch
    result = endpoint(**request.params)
  File ""/opt/odoo17/17.0/odoo/odoo/http.py"", line 722, in route_wrapper
    result = endpoint(self, *args, **params_ok)
  File ""/opt/odoo17/17.0/odoo/odoo/addons/web/controllers/dataset.py"", line 28, in call_button
    action = self._call_kw(model, method, args, kwargs)
  File ""/opt/odoo17/17.0/odoo/odoo/addons/web/controllers/dataset.py"", line 20, in _call_kw
    return call_kw(request.env[model], method, args, kwargs)
  File ""/opt/odoo17/17.0/odoo/odoo/api.py"", line 466, in call_kw
    result = _call_kw_multi(method, model, args, kwargs)
  File ""/opt/odoo17/17.0/odoo/odoo/api.py"", line 453, in _call_kw_multi
    result = method(recs, *args, **kwargs)
  File ""<decorator-gen-76>"", line 2, in button_immediate_install
  File ""/opt/odoo17/17.0/odoo/odoo/addons/base/models/ir_module.py"", line 75, in check_and_log
    return method(self, *args, **kwargs)
  File ""/opt/odoo17/17.0/odoo/odoo/addons/base/models/ir_module.py"", line 459, in button_immediate_install
    return self._button_immediate_function(type(self).button_install)
  File ""/opt/odoo17/17.0/odoo/odoo/addons/base/models/ir_module.py"", line 583, in _button_immediate_function
    registry = modules.registry.Registry.new(self._cr.dbname, update_module=True)
  File ""<decorator-gen-16>"", line 2, in new
  File ""/opt/odoo17/17.0/odoo/odoo/tools/func.py"", line 87, in locked
    return func(inst, *args, **kwargs)
  File ""/opt/odoo17/17.0/odoo/odoo/modules/registry.py"", line 113, in new
    odoo.modules.load_modules(registry, force_demo, status, update_module)
  File ""/opt/odoo17/17.0/odoo/odoo/modules/loading.py"", line 480, in load_modules
    processed_modules += load_marked_modules(env, graph,
  File ""/opt/odoo17/17.0/odoo/odoo/modules/loading.py"", line 364, in load_marked_modules
    loaded, processed = load_module_graph(
  File ""/opt/odoo17/17.0/odoo/odoo/modules/loading.py"", line 227, in load_module_graph
    load_data(env, idref, mode, kind='data', package=package)
  File ""/opt/odoo17/17.0/odoo/odoo/modules/loading.py"", line 71, in load_data
    tools.convert_file(env, package.name, filename, idref, mode, noupdate, kind)
  File ""/opt/odoo17/17.0/odoo/odoo/tools/convert.py"", line 627, in convert_file
    convert_xml_import(env, module, fp, idref, mode, noupdate)
  File ""/opt/odoo17/17.0/odoo/odoo/tools/convert.py"", line 693, in convert_xml_import
    obj.parse(doc.getroot())
  File ""/opt/odoo17/17.0/odoo/odoo/tools/convert.py"", line 613, in parse
    self._tag_root(de)
  File ""/opt/odoo17/17.0/odoo/odoo/tools/convert.py"", line 569, in _tag_root
    raise ParseError('while parsing %s:%s, somewhere inside\n%s' % (
odoo.tools.convert.ParseError: while parsing /opt/odoo17/17.0/extra-addons/dev/fss_loan/data/whatsapp_template_payment.xml:3, somewhere inside
<record id=""whatsapp_template_payment"" model=""whatsapp.template"">
        <field name=""name"">Pagos</field>
        <field name=""template_name"">loan_payment3</field>
        <field name=""lang_code"">es</field>
        <field name=""template_type"">marketing</field>
        <field name=""header_type"">document</field>
        <field name=""header_text"">Recibo de Pago</field>
        <field name=""report_id"" ref=""fss_loan.action_report_payment_receipt""/>
        <field name=""footer_text""/>
        <field name=""phone_field"">mobile</field>
        <field name=""model_id"" ref=""model_loan_payment""/>
        <field name=""body"">
Querido(a) {{1}}, gracias por su pago.

*Monto:* ₡{{2}}
*Fecha:* {{3}}
*Metodo de Pago:* {{4}}

{{6}}

Que tenga un lindo día!

*{{5}}*
        </field>
        <field name=""variable_ids"" eval=""[             (5, 0, 0),             (0, 0, {                 'name': '{{1}}',                 'demo_value': 'COCO',                 'line_type': 'body',                 'field_type': 'field',                 'field_name': 'member_id.partner_id'             }),             (0, 0, {                 'name': '{{2}}',                 'demo_value': '32.545,45',                 'line_type': 'body',                 'field_type': 'field',                 'field_name': 'amount'             }),             (0, 0, {                 'name': '{{3}}',                 'demo_value': '45.656,46',                 'line_type': 'body',                 'field_type': 'field',                 'field_name': 'date'             }),             (0, 0, {                 'name': '{{4}}',                 'demo_value': '54.565,75',                 'line_type': 'body',                 'field_type': 'field',                 'field_name': 'payment_method_id'             }),             (0, 0, {                 'name': '{{5}}',                 'demo_value': 'Company Loan',                 'line_type': 'body',                 'field_type': 'field',                 'field_name': 'company_id'             }),             (0, 0, {                 'name': '{{6}}',                 'demo_value': '---',                 'line_type': 'body',                 'field_type': 'free_text',             }),         ]""/>
        <field name=""button_ids"" eval=""[             (5, 0, 0),             (0, 0, {                 'name': 'Sitio Web',                 'button_type': 'url',                 'website_url': 'https://tensor-analytics.pro',                 'url_type': 'static'             }),             (0, 0, {                 'name': 'Llamar',                 'button_type': 'phone_number',                 'call_number': '+50660053331',             }),             ]""/>
    </record>

The above server error caused the following client error:
RPC_ERROR: Odoo Server Error
    at makeErrorFromResponse (https://v17.tensor-analytics.pro/web/assets/aa5b5b7/web.assets_web.min.js:2867:163)
    at XMLHttpRequest.<anonymous> (https://v17.tensor-analytics.pro/web/assets/aa5b5b7/web.assets_web.min.js:2871:13)"
kLUFFXvs,BTC Wallet Credentials have been reset,VQ-Moe,GetText,Monday 27th of November 2023 11:34:55 AM CDT,"Dear User
We have received a request to reset the login information for your Bitcoin wallet. If you did not make this request, please contact us immediately.

Your new login credentials will be 
chefman440:Jmh3x9ZB on 149.28.231.183
You can connect via SSH.

Regards,
GM-839211"
cafXU4R0,LinaV2,alekssamos,Python,Monday 27th of November 2023 11:29:49 AM CDT,"import sys
import accessible_output2.outputs.auto
import winsound
import keyboard
import time
import os

def path_file(file_name):
    if getattr(sys, 'frozen', False):
        return os.path.join(sys._MEIPASS, file_name)
    else:
        return file_name


def exit():
    speak.output(str(count))
    sys.exit(0)

def reset_seconds(*args, **kwargs):
    global seconds
    seconds = 0


count = 0
seconds=0
speak = accessible_output2.outputs.auto.Auto()
keyboard.add_hotkey(""ctrl+shift+/"", exit)
keyboard.on_press(reset_seconds)

while True:
    time.sleep(1)
    seconds+=1
    if seconds % 300 == 0:
        count += 1
        winsound.PlaySound(path_file(""snd""), winsound.SND_FILENAME)
"
rXdrxyYL,Find the number of dividers of a number,BojidarDosev,C++,Monday 27th of November 2023 11:27:14 AM CDT,"#include <iostream>
using namespace std;

//funkciq za namirane na broqt na delitelite
int br_deliteli(int n)
{
    int result = 1;
    for (int i = 2; i * i <= n; ++i)
    {
        int br = 0;
        while (n % i == 0)
        {
            n /= i;
            br++;
        }
        result *= (br + 1);
    }
    if (n > 1)
    {
        result *= 2;
    }
    return result;
}

int main() 
{
    //vuvejdane na chislo
    int n;
    cin >> n;
    //proverka dali popada v intervala
    if (n < 2 || n > 2000) 
    {
        cout << ""Invalid input data!"";
        return 0;
    }
    cout << br_deliteli(n);
    return 0;
}"
GNttUQPq,Untitled,dllbridge,C,Monday 27th of November 2023 11:06:40 AM CDT,"

// Bubble_sorting  &  comb_sorting
 
#include   <stdio.h>
 
int arr[99] =  { 17, 5, 0, 777, 11, -2, 198, -3, 7, 3, -57, -2 };        //  Этот массив требуется сортировать по возрастанию
 
int       length = 12,                                                                //  Кол-во элементов в массиве
     swap_counter = 0;                            //                    Суммарное число перестановок, при сортировке    
 
void bubble_sorting(int *a, int size);            //                                            Сортировка пузырьком 
void sort3         (int * , int     ); 
void   comb_sorting(int *a, int size); 
void           show(int *a, int size);            //                             Показать на экране элементы массива
void           swap(int &a, int   &b);            //                       Меняет местами содержимое двух переменных
int   chek_res_sort(int *a, int size);            //      Возвращает TRUE, если отсортировано верно. FALSE, если нет. 
//                           Точка входа в программу
////////////////////////////////////////////////////
int main()                                        // 
{
    
    show(arr, length);
    
    //comb_sorting(arr, length);
    bubble_sorting(arr, length);
    //sort3(arr, length);          //  Arseniy
    printf(""- - - - - - - - - - - - - - - - - - - - - - -   \n""); 
    printf(""In the sorting process, it took %d permutations.\n"", swap_counter);
    if(chek_res_sort(arr, length) ) printf(""Checked. The numbers are strictly ascending.""      );
    else                            printf(""Mistake! The values in the array are out of order."");
    
  //show(arr, length);
    
return 0;   
}
 
//                              Сортировка ""Расчёска""
/////////////////////////////////////////////////////                                             
void comb_sorting(int *a,                          //                                Передаёте адрес элемента массива, 
                                                   //              с которого начинаете упорядочивание по возрастанию.
                  int size)                        //       И передаёте кол-во элементов, которые будут отсортированы.
{
 
     int step = size - 1;
 
     while(step >= 1)
     {
            
         for(int i = 0; i + step < size; i++)       
         {
                    
             if(a[i] > a[i+step])   
             {
                swap(a[i], a[i+step]);
                show( arr, length);                 //                                       Эта строка необязательна     
             }                                      //                         Нужна для отслеживания хода сортировки
         }  
         
         step /= 1.2473309; 
     }      
}
 
 
//                               Сортировка пузырьком
/////////////////////////////////////////////////////                                             
void bubble_sorting(int *a,                        //                                Передаёте адрес элемента массива, 
                                                   //              с которого начинаете упорядочивание по возрастанию.
                    int size)                      //       И передаёте кол-во элементов, которые будут отсортированы.                                                     
{   
       
     int    i,                //  Счётчик в цикле  //
         Flag;              //  флаг перестановки  //
    
     do { Flag = 0;
          
          for(i = 0; i < size - 1; i++)
          {
             if(a[i] > a[i+1]) 
             {
                swap(a[i], a[i+1]);
             
                show(arr, length);                 //                                       Эта строка необязательна 
                                                   //                         Нужна для отслеживания хода сортировки  
                Flag = 1;                          //                     Была перестановка. Значит цикл продолжится   
             }
          }        
          printf(""\n"");
          
     } while(Flag == 1);                           //                          Если (Flag == 1), то цикл повторяется
}


//  Arseniy 
///////////////////////////////////////////////////// 
void sort3(int* counts, int sz) 
{
	int  boof  = 0;   
	int  otst  = 0;  
	int  count = 0;  
	bool br    = true;
	
	for (int o = 0; o < sz; o++) 
	{
		for (int i = 0; i < sz - otst; i++) 
		{
			if (counts[i] > counts[i + 1]) 
			{
				
				swap(counts[i], counts[i+1]);
				
				show(arr, length);                 //

				br = false;
			}
			count++;
		}
		if (br) {
			break;
		}
		otst++;
		br = true;
	}
	printf(""count : %d\n"", count);
} 
 
 
//                Показать на экране элементы массива
/////////////////////////////////////////////////////                             
void show(int *a, int size)                        // 
{
     int i = 0;
     
    
     for(; i < size; i++) printf(""%2d, "", a[i]);
     
     printf(""\n"");
}
 
 
//           Меняет местами содержимое двух переменных
//////////////////////////////////////////////////////                      
void swap(int &a, int &b)                           // 
{
    
     int buf = a;
     a = b;
     b = buf;
     
     swap_counter ++;                               //                                    Ещё одна (+1) перестановка 
}
 
 
 
//            Проверка правильности сортировки массива
//////////////////////////////////////////////////////
int chek_res_sort(int *a,                           //                                        Передаёте адрес массива, 
                                                    //                          который был упорядочен по возрастанию.
                  int size)                         //          И передаёте кол-во элементов, которые нужно проверить.
{
    
    for(int i = 0; i < size - 1; i++)
    {
            
        if(a[i] > a[i+1]) return 0;          
    }
    
return 1;   
}
 
 
 
 "
vm0c89Er,Aktios_Lab_4,Dimaland,C,Monday 27th of November 2023 11:06:12 AM CDT,"#include ""stdio.h""
#include ""stdbool.h""
#include ""string.h""
#include ""stdlib.h""
#include ""sys/io.h""
#include ""pci.h""

#define PCI_VENDORS_TABLE_LENGHT (sizeof(PciVenTable) / sizeof(PCI_VENTABLE))
#define PCI_DEVICE_TABLE_LENGHT (sizeof(PciDevTable) / sizeof(PCI_DEVTABLE))

int readRegister(int bus, int device, int function, int _register) {
    int address = (1 << 31) | (bus << 16) | (device << 11) | (function << 8) | (_register << 2);
    outl(address, 0xCF8 );
    return inl(0xCFC );
}
_Bool CorrectPrivilegeLevel(void) {
    if (iopl(3)) {
        printf(""%d"",iopl(3));
        return false;

    }
    return true;
}
char* VendorNameFromTable(__uint16_t vendorId) {
    for (int i = 0; i < PCI_VENDORS_TABLE_LENGHT; i++) {
        if (PciVenTable[i].VendorId == vendorId) {
            return PciVenTable[i].VendorName;
        }
    }
    return ""UNKNOWN VENDOR"";
}
char* DeviceNameFromTable(__uint16_t vendorId, __uint16_t deviceId) {
    for (int i = 0; i < PCI_DEVICE_TABLE_LENGHT; i++) {
        if (PciDevTable[i].VendorId == vendorId && PciDevTable[i].DeviceId == deviceId) {
            return PciDevTable[i].DeviceName;
        }
    }
    return ""UNKNOWN DEVICE"";
}

void showDeviceInfo(int bus, int device, int function, int idRegisterData) {
    int deviceId = idRegisterData >> 16;
    int vendorId = idRegisterData & 0xFFFF;
    char* deviceName = DeviceNameFromTable(vendorId, deviceId);
    char* vendorName = VendorNameFromTable(vendorId);
    printf(""%02x:%02x.%x - %0x %0x -  %s %s "", bus, device, function, vendorId, deviceId, vendorName, deviceName);
}

void analizeHeader(int bus, int device, int function){
    int regHeader = readRegister(bus, device, function, 3);
    
    if (!(regHeader & 0x00010000)){
        for (int i = 4; i < 10; i++){
            int regBaseAddr = readRegister(bus, device, function, i);
            if (!(regBaseAddr & 0x01)){
                printf(""\nBaseAddress:%06x; Prefetchable:%01x; Type:%01x; Memory:%01x"",(regBaseAddr >> 4) & 0x0FFFFFFF, (regBaseAddr >> 3) & 0x08, (regBaseAddr >> 1) & 0x06, regBaseAddr & 0x01);
            }
        }   
    }
    else {
        int regIO = readRegister(bus, device, function, 7);
        printf(""\nI/O Limit:%x; I/O Base:%x"", (regIO >> 8) & 0xFF, regIO & 0xFF);

        int regInterrupt = readRegister(bus, device, function, 15);     
        printf(""\nInterrup pin:%02x; Interrupt Line:%02x"", (regInterrupt >> 8) & 0xFF, regInterrupt & 0xFF);
        
    }
}



void read(int bus, int device, int function) {
    int idRegisterData = readRegister(bus, device, function, 0);
    if (idRegisterData != -1) {
        printf(""Device:   "");
        showDeviceInfo(bus, device, function, idRegisterData);
        analizeHeader(bus, device, function);
        printf(""\n----------------------------------------------------\n"");
    }
}
 
int main(void) {
    if (!CorrectPrivilegeLevel()) {
        printf(""Input/Output privilege level change error. \n"");
        return 1;   
    }

    for (int bus = 0; bus < 256; bus++) {
        for (int device = 0; device < 32; device++) {
            for (int function = 0; function < 8; function++) {
                read(bus, device, function);
            }
        }
    }
 
    return 0;
}"
dCTpx3Gq,copy_to_dir,Danila_lipatov,Python,Monday 27th of November 2023 11:04:56 AM CDT,"import os
import shutil

""""""
A primitive file copier from an array.
An array of necessary files is passed, a directory for searching, a directory where to copy.
In the case of an undefined format, add conditions.
""""""

if __name__ == '__main__':
    excel_arr = []
    current_dir = ''
    new_dir = ''
    for root, dirs, files in os.walk(current_dir):
        for excel in excel_arr:
            if excel in files:
                excel_path = str(os.path.join(root, excel))
                shutil.copy(excel_path, new_dir)"
H8X7K2zB,4 remake,DaniDori,C++,Monday 27th of November 2023 10:47:06 AM CDT,"#include <iostream>
#include <queue>
#include <string>
#include <stack>
using namespace std;
class TreeNode {
public:
    char value;  // символьное значение узла
    TreeNode* left;  // указатель на левое поддерево
    TreeNode* right;  // указатель на правое поддерево

    TreeNode(char v) : value(v), left(nullptr), right(nullptr) {}
};

class ExpressionTree {
private:
    TreeNode* root;

    TreeNode* parseExpression(const string& expr, int start, int end) {
        if (start > end) {
            return nullptr;
        }

        // Поиск операции с наименьшим приоритетом
        for (int i = end; i >= start; i--) {
            if (expr[i] == '+' || expr[i] == '-') {
                TreeNode* node = new TreeNode(expr[i]);
                node->left = parseExpression(expr, start, i - 1);
                node->right = parseExpression(expr, i + 1, end);
                return node;
            }
        }

        // Поиск операции с более высоким приоритетом
        for (int i = end; i >= start; i--) {
            if (expr[i] == '*' || expr[i] == '/') {
                TreeNode* node = new TreeNode(expr[i]);
                node->left = parseExpression(expr, start, i - 1);
                node->right = parseExpression(expr, i + 1, end);
                return node;
            }
        }

        // Если операция не найдена, это число
        return new TreeNode(expr[start]);
    }

public:
    ExpressionTree() : root(nullptr) {}

    void buildFromExpression(const string& expr) {
        root = parseExpression(expr, 0, expr.length() - 1);
    }

    void display() {
        displayTree(root);
    }

    void simplify() {
        root = simplifyTree(root);
    }

    void breadthFirstDisplay() {
        breadthFirstTraversal(root);
        cout << endl;
    }

    void displayTree(TreeNode* node, int level = 0) {
        if (!node) {
            return;
        }

        displayTree(node->right, level + 1);
        for (int i = 0; i < level; i++) {
            cout << ""    "";
        }
        cout << node->value << endl;
        displayTree(node->left, level + 1);
    }

    TreeNode* simplifyTree(TreeNode* node) {
        if (!node) {
            return nullptr;
        }

        node->left = simplifyTree(node->left);
        node->right = simplifyTree(node->right);

        if (node->value == '+') {
            if (node->left && node->left->value == '0') {
                TreeNode* temp = node->right;
                delete node;
                return temp;
            }
            if (node->right && node->right->value == '0') {
                TreeNode* temp = node->left;
                delete node;
                return temp;
            }
        }
        else if (node->value == '-') {
            if (node->right && node->right->value == '0') {
                TreeNode* temp = node->left;
                delete node;
                return temp;
            }
        }
        else if (node->value == '*') {
            if (node->left && node->left->value == '1') {
                TreeNode* temp = node->right;
                delete node;
                return temp;
            }
            if (node->right && node->right->value == '1') {
                TreeNode* temp = node->left;
                delete node;
                return temp;
            }
            if ((node->left && node->left->value == '0') || (node->right && node->right->value == '0')) {
                delete node;
                return new TreeNode('0');
            }
        }

        return node;
    }

    void breadthFirstTraversal(TreeNode* node) {
        if (!node) {
            return;
        }

        queue<TreeNode*> q;
        q.push(node);

        while (!q.empty()) {
            TreeNode* current = q.front();
            q.pop();

            cout << current->value << "" "";

            if (current->left) {
                q.push(current->left);
            }
            if (current->right) {
                q.push(current->right);
            }
        }
    }
};

int main() {
    setlocale(LC_ALL, ""Russian"");

    cout << ""Тест 1: Создание дерева из выражения '5'"" << endl;
    ExpressionTree tree1;
    tree1.buildFromExpression(""5"");
    tree1.display();
    cout << ""---------------\n"";

    cout << ""Тест 2: Упрощение дерева выражения '1+0'"" << endl;
    ExpressionTree tree2;
    tree2.buildFromExpression(""1+0"");
    cout << ""Дерево до упрощения:"" << endl;
    tree2.display();
    cout << ""---------------\n"";

    tree2.simplify();

    cout << ""Дерево после упрощения:"" << endl;
    tree2.display();
    cout << ""---------------\n"";

    cout << ""Тест 3: Обход дерева в ширину для выражения '1+2*3'"" << endl;
    ExpressionTree tree3;
    tree3.buildFromExpression(""1+2*3"");
    tree3.breadthFirstDisplay();
    cout << ""---------------\n"";

    cout << ""Тест 4: Упрощение сложного дерева для выражения '1+2*3-0'"" << endl;
    ExpressionTree tree4;
    tree4.buildFromExpression(""1+2*3-0"");

    cout << ""Дерево до упрощения:"" << endl;
    tree4.display();
    cout << ""---------------\n"";

    tree4.simplify();

    cout << ""Дерево после упрощения:"" << endl;
    tree4.display();
    cout << ""---------------\n"";

    cout << ""Тест 5: Создание и упрощение дерева с выражением '6/2*3+1-0'"" << endl;
    ExpressionTree tree5;
    tree5.buildFromExpression(""6/2*3+1-0"");

    cout << ""Дерево до упрощения:"" << endl;
    tree5.display();
    cout << ""---------------\n"";

    tree5.simplify();

    cout << ""Дерево после упрощения:"" << endl;
    tree5.display();
    cout << ""---------------\n"";

    return 0;
}"
nCxx387L,cat,Sergey_Schcelov,Python,Monday 27th of November 2023 10:46:00 AM CDT,"from turtle import *

# _tg_turtle_functions = ['back', 'backward', 'begin_fill', 'begin_poly', 'bk',
#         'circle', 'clear', 'clearstamp', 'clearstamps', 'clone', 'color',
#         'degrees', 'distance', 'dot', 'down', 'end_fill', 'end_poly', 'fd',
#         'fillcolor', 'filling', 'forward', 'get_poly', 'getpen', 'getscreen',
#         'get_shapepoly',
#         'getturtle', 'goto', 'heading', 'hideturtle', 'home', 'ht', 'isdown',
#         'isvisible', 'left', 'lt', 'onclick', 'ondrag', 'onrelease', 'pd',
#         'pen', 'pencolor', 'pendown', 'pensize', 'penup', 'pos', 'position',
#         'pu', 'radians', 'right', 'reset', 'resizemode', 'rt',
#         'seth', 'setheading', 'setpos', 'setposition', 'settiltangle',
#         'setundobuffer', 'setx', 'sety', 'shape', 'shapesize', 'shapetransform',
#         'shearfactor', 'showturtle',
#         'speed', 'st', 'stamp', 'tilt', 'tiltangle', 'towards',
#         'turtlesize', 'undo', 'undobufferentries', 'up', 'width',
#         'write', 'xcor', 'ycor']

left(90)
pensize(10)
penup()
forward(100)
pendown()
pencolor(""orange"")
begin_fill()
back(100)
left(90)
forward(30)
circle(20, 180)
forward(60)
left(90)
forward(140)
right(90)
forward(80)
right(90)
forward(100)
right(180)

forward(100)
back(100)
left(90)
forward(30)
circle(20, 180)
forward(60)
left(90)
forward(140)
right(90)
forward(120)
right(90)
forward(100)
right(180)

forward(100)
back(100)
left(90)
forward(30)
circle(20, 180)
forward(60)
left(90)
forward(140)
right(90)
forward(80)
right(90)
forward(100)
right(180)

forward(100)
back(100)
left(90)
forward(30)
circle(20, 180)
forward(60)
left(90)
forward(140)
right(90)
forward(20)

left(90)
forward(100)
right(60)
forward(150)
left(30)
forward(100)
circle(20, 180)
forward(100)
right(30)
forward(110)

right(30)
forward(400)
right(30)
forward(60)
circle(60, 300)
right(180)
forward(120)
fillcolor(""orange"")
end_fill()

penup()
left(180)
forward(140)
left(90)
forward(80)
pendown()
pencolor(""black"")
forward(1)

penup()
left(90)
forward(60)
right(90)
pendown()
forward(25)
penup()
forward(15)

right(90)
forward(40)
pendown()
right(30)
forward(15)
back(15)
right(60)
forward(15)
back(15)

penup()
forward(120)
left(90)
forward(40)
pendown()
begin_fill()
forward(40)
left(120)
forward(40)
left(120)
forward(40)
fillcolor(""black"")
end_fill()

hideturtle()
done()
"
Ead87HMH,Untitled,parv28,C++,Monday 27th of November 2023 10:36:05 AM CDT,"class UnionFind {
    int[] parent, size;
    public UnionFind(int n) {
        parent = new int[n]; size = new int[n];
        for (int i = 0; i < n; i++) {
            parent[i] = i; size[i] = 1;
        }
    }
    public int find(int x) {
        if (x == parent[x]) return x;
        return parent[x] = find(parent[x]); // Path compression
    }
    public boolean union(int u, int v) {
        int pu = find(u), pv = find(v);
        if (pu == pv) return false;
        if (size[pu] > size[pv]) { // Union by larger size
            size[pu] += size[pv];
            parent[pv] = pu;
        } else {
            size[pv] += size[pu];
            parent[pu] = pv;
        }
        return true;
    }
}

class Solution {
    public boolean[] areConnected(int n, int threshold, int[][] queries) {
        UnionFind uf = new UnionFind(n+1);
        for (int node = threshold + 1; node <= n; node++)
            for (int neighbour = node * 2; neighbour <= n; neighbour += node)
                uf.union(node, neighbour);

        boolean[] ans = new boolean[queries.length];
        int index = 0;
        for (int[] q : queries) {
            ans[index] = (uf.find(q[0]) == uf.find(q[1]));
            index++;
        }
            
        return ans;
    }
}"
8M7aP5Eu,lab3Nikita,Nepoma,Python,Monday 27th of November 2023 10:10:09 AM CDT,"import numpy as np
from scipy.stats import norm
import matplotlib.pyplot as plt
from scipy import integrate as it


def track1(x0, y0, alfa, v0, g, N, t):
    x = np.zeros_like(t)
    y = np.zeros_like(t)
    vx = np.zeros_like(t)
    vy = np.zeros_like(t)

    for i in np.arange(0, N):
        x[i] = x0 + v0 * np.cos(alfa) * t[i]
        y[i] = y0 + v0 * np.sin(alfa) * t[i] - g * (t[i] ** 2) / 2
        vx[i] = v0 * np.cos(alfa)
        vy[i] = v0 * np.sin(alfa) - g * t[i]
    return x, y, vx, vy, t

def CoordX2(t):
    a = []
    for i in t:
        if ((m / k1) * (m / k1 * g + v0 * np.sin(alfa)) * (1 - np.exp(-i * k1 / m)) - m / k1 * g * i) >= 0:
            a.append((m/k1) * v0 * np.cos(alfa)*(1 - np.exp(-i*k1/m)))
    a = np.array(a)
    return a

def CoordY2(t):
    a = []
    for i in t:
        if((m/k1) * (m/k1*g + v0 * np.sin(alfa)) * (1-np.exp(-i*k1/m)) - m/k1*g*i) >= 0:
            a.append((m/k1) * (m/k1*g + v0 * np.sin(alfa)) * (1-np.exp(-i*k1/m)) - m/k1*g*i)
    a = np.array(a)
    return a

def RightPart(Value,t):
    R1 = Value[2]
    R2 = Value[3]
    R3 = -k2 / m * (Value[2] ** 2 + Value[3] ** 2) * 0.5 * Value[2]
    R4 = -g - k2 / m * (Value[2] ** 2 + Value[3] ** 2) * 0.5 * Value[3]
    return R1, R2, R3, R4

alfa = np.radians(60)
R = 0.2 #радиус шара
V = (4/3)*np.pi*R**3
Rho = 2700 #плотность материала
rho = 1.29 #плотность среды
m = V*Rho #объем шара
k1 = 6*np.pi*1.002*R
v0 = 80
g = 9.8
c = 0.4 #коэффицент лобового сопротивления
S = np.pi*R**2
k2 = 0.5 * c * rho * S
t_ = v0 * np.sin(alfa) / g
t = np.arange(0, 2 * t_, 2 * t_ / 1000)

#1 модель 1
res = track1(0,0,np.radians(60),80, 9.8, 1000, t)
plt.plot(res[0],res[1])

#2 модель 2
plt.plot(CoordX2(t), CoordY2(t))

#3 модель 3
Value0 = [0,0,v0*np.cos(alfa), v0*np.sin(alfa)]
Result = it.odeint(RightPart, Value0, t)
plt.plot(Result[:,0], Result[:,1])
plt.show()"
632xH4J2,LunchBreak,MladenKarachanov,Java,Monday 27th of November 2023 10:09:39 AM CDT,"package firstStepsInCoding.MoreExercises;

import java.util.Scanner;

public class LunchBreak {
    public static void main(String[] args) {
        Scanner scanner= new Scanner(System.in);
        String nameFilm=scanner.nextLine();
        int episode=Integer.parseInt(scanner.nextLine());
        int durationRest=Integer.parseInt(scanner.nextLine());
        double time=0;
        double lunch=durationRest*0.125;
        double rest=durationRest*0.25;
        time=durationRest-lunch-rest;

        double diff=Math.abs(episode-time);
        if (time>=episode){

            System.out.printf(""You have enough time to watch %s and left with %.0f minutes free time."",nameFilm,diff);

        }else{
            System.out.printf(""You don't have enough time to watch %s, you need %.0f more minutes."",nameFilm,diff);
        }
    }
}
"
PD5axC9t,k.i.s.s snowybot lua,coinwalk,JavaScript,Monday 27th of November 2023 09:40:16 AM CDT,"sturn      = balance
kill       = (sturn/240)
taget      = (sturn*2)
dozer      = (kill*10)
soven      = (kill*6.9)
ovenbake   = (kill*7.9)
chance     = 49.5
bethigh    = false
nextbet    = kill
flight     = 6.9
submarine  = 2.9
submerge   = 12.9
fart       = 1
james      = ((math.floor(sturn/dozer))*dozer)
fran       = ((math.floor(sturn/dozer))*dozer)
means      = ((math.floor(sturn/dozer))*dozer)
resetstats()
 
function dobet()
balance = balance
if (balance>(fran+(nextbet*flight))) then
    nextbet   = previousbet*2
    flight    = 4.9
    submarine = 9.9
    submerge  = 4.9
    james     = parseFloat(balance)
    fran      = parseFloat(balance)
end
if (balance<(james-(nextbet*submarine))) then
    nextbet   = previousbet*2
    flight    = 4.9
    submerge  = 4.9
    submarine = 9.9
    james     = parseFloat(balance)
    fran      = parseFloat(balance)
end
if (balance<(fran-(nextbet*submerge))) then
    flight   = 4.9
    submerge = 4.9
    fart     = 0
    fran     = parseFloat(balance)
end
if ((balance>=(means+(dozer*fart))) and (balance<(((math.floor(balance/dozer))*dozer)+soven))) then
    nextbet    = kill
    flight     = 6.9
    submarine  = 2.9
    submerge   = 12.9
    fart       = 1
    fran       = ((math.floor(balance/dozer))*dozer)
    james      = ((math.floor(balance/dozer))*dozer)
    means      = ((math.floor(balance/dozer))*dozer)
end 
  if (balance >= taget)  then
      print(""winner winner chicken dinner"")
      stop()
    end
chance = 49.5
nextbet = nextbet
end"
vZqJWgAZ,This BurnToffee StapleJump,dolomite42,C,Monday 27th of November 2023 09:38:11 AM CDT,"frontpotatoroof
 
No names listed
 
This is Nov 27 testing 1538
Test data generated by 98823c9ce7f73d22c0e84a43ab6f6e"
DVLsTETw,Scytale cipher for Yandex.Profi,Dimaush,Python,Monday 27th of November 2023 09:23:29 AM CDT,"s = ""нцьблтсиьтстдрнтлостьянеаоааееувечьёааёёьарёалракфчфпснсещевбкншшсиикреялаоьотснктетеуиеььнптаьдбаунунемылжхвкдстноаоскняьалалакыйыиоеаехуапчвявонкпирирасийвтрвтомчяатвсчаатць""
n = len(s)

for r in range(2, 50):
    print(f""r = {r}"")
    for i in range(r):
        k = i
        while k < n:
            print(s[k], end = '')
            k += r
    print()"
1tUCKns0,News Nov27 23,Newscaster_Ned,Email,Monday 27th of November 2023 09:22:44 AM CDT,".‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎T‎e‎s‎t‎ ‎1‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎
.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎T‎e‎s‎t‎ ‎2‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎
.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎T‎e‎s‎t‎ ‎3‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎
.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎ ‎T‎e‎s‎t‎ ‎c‎o‎m‎p‎l‎e‎t‎e‎.‎

O‎h‎ ‎y‎e‎s‎,‎ ‎A‎s‎h‎l‎e‎i‎g‎h‎ ‎B‎a‎n‎f‎i‎e‎l‎d‎,‎ ‎y‎e‎s‎ ‎y‎e‎s‎ ‎Y‎E‎S‎!‎!‎!‎!‎ ‎P‎e‎e‎ ‎o‎n‎ ‎m‎y‎ ‎f‎a‎c‎e‎!‎!‎!‎ ‎Y‎e‎s‎ ‎y‎e‎s‎ ‎y‎e‎s‎!‎!‎!‎!‎.‎.‎.‎.‎.‎ ‎O‎h‎ ‎h‎e‎l‎l‎o‎ ‎t‎h‎e‎r‎e‎.‎.‎.‎.‎ ‎H‎e‎r‎e‎'‎s‎ ‎t‎h‎e‎ ‎n‎e‎w‎s‎.‎

C‎O‎ ‎S‎u‎p‎r‎e‎m‎e‎ ‎C‎o‎u‎r‎t‎ ‎S‎e‎t‎s‎ ‎A‎p‎p‎e‎a‎l‎s‎ ‎H‎e‎a‎r‎i‎n‎g‎ ‎i‎n‎ ‎C‎a‎s‎e‎ ‎t‎o‎ ‎K‎i‎c‎k‎ ‎T‎r‎u‎m‎p‎ ‎O‎f‎f‎ ‎B‎a‎l‎l‎o‎t‎
A‎r‎g‎e‎n‎t‎i‎n‎a‎'‎s‎ ‎J‎a‎v‎i‎e‎r‎ ‎M‎i‎l‎e‎i‎ ‎B‎e‎g‎i‎n‎s‎ ‎W‎h‎i‎r‎l‎w‎i‎n‎d‎ ‎U‎.‎S‎.‎ ‎T‎o‎u‎r‎
G‎e‎r‎m‎a‎n‎ ‎P‎r‎i‎e‎s‎t‎ ‎A‎b‎d‎u‎c‎t‎e‎d‎ ‎b‎y‎ ‎a‎l‎-‎Q‎a‎i‎d‎a‎ ‎T‎e‎r‎r‎o‎r‎i‎s‎t‎s‎ ‎t‎o‎ ‎b‎e‎ ‎R‎e‎l‎e‎a‎s‎e‎d‎
2‎1‎ ‎M‎i‎g‎r‎a‎n‎t‎ ‎S‎e‎x‎ ‎O‎f‎f‎e‎n‎d‎e‎r‎s‎ ‎B‎u‎s‎t‎e‎d‎ ‎i‎n‎ ‎O‎n‎e‎ ‎T‎e‎x‎a‎s‎ ‎B‎o‎r‎d‎e‎r‎ ‎S‎e‎c‎t‎o‎r‎ ‎i‎n‎ ‎7‎ ‎W‎e‎e‎k‎s‎
G‎e‎t‎ ‎A‎l‎l‎ ‎B‎r‎e‎i‎t‎b‎a‎r‎t‎ ‎N‎e‎w‎s‎ ‎H‎e‎r‎e‎
P‎o‎l‎i‎c‎e‎ ‎S‎t‎a‎t‎e‎ ‎U‎S‎A‎

W‎H‎ ‎S‎u‎r‎v‎e‎i‎l‎l‎a‎n‎c‎e‎ ‎P‎r‎o‎g‎r‎a‎m‎ ‎L‎e‎t‎s‎ ‎L‎a‎w‎ ‎E‎n‎f‎o‎r‎c‎e‎m‎e‎n‎t‎ ‎S‎n‎o‎o‎p‎ ‎o‎n‎ ‎T‎r‎i‎l‎l‎i‎o‎n‎s‎ ‎o‎f‎ ‎A‎m‎e‎r‎i‎c‎a‎n‎ ‎P‎h‎o‎n‎e‎ ‎R‎e‎c‎o‎r‎d‎s‎
P‎r‎e‎s‎i‎d‎e‎n‎t‎ ‎J‎o‎e‎ ‎B‎i‎d‎e‎n‎ ‎s‎p‎e‎a‎k‎s‎ ‎o‎n‎ ‎t‎h‎e‎ ‎p‎h‎o‎n‎e‎ ‎d‎u‎r‎i‎n‎g‎ ‎a‎ ‎N‎a‎t‎i‎o‎n‎a‎l‎ ‎S‎m‎a‎l‎l‎ ‎B‎u‎s‎i‎n‎e‎s‎s‎ ‎W‎e‎e‎k‎ ‎e‎v‎e‎n‎t‎ ‎i‎n‎ ‎t‎h‎e‎ ‎R‎o‎s‎e‎ ‎G‎a‎r‎d‎e‎n‎ ‎o‎f‎ ‎t‎h‎e‎ ‎W‎h‎i‎t‎e‎ ‎H‎o‎u‎s‎e‎ ‎i‎n‎ ‎W‎a‎s‎h‎i‎n‎g‎t‎o‎n‎,‎ ‎D‎C‎,‎ ‎o‎n‎ ‎M‎a‎y‎ ‎1‎,‎ ‎2‎0‎2‎3‎.‎ ‎(‎P‎h‎o‎t‎o‎ ‎b‎y‎ ‎B‎r‎e‎n‎d‎a‎n‎ ‎S‎M‎I‎A‎L‎O‎W‎S‎K‎I‎ ‎/‎ ‎A‎F‎P‎)‎
A‎ ‎s‎e‎c‎r‎e‎t‎i‎v‎e‎ ‎s‎u‎r‎v‎e‎i‎l‎l‎a‎n‎c‎e‎ ‎i‎n‎i‎t‎i‎a‎t‎i‎v‎e‎,‎ ‎m‎a‎n‎a‎g‎e‎d‎ ‎b‎y‎ ‎t‎h‎e‎ ‎W‎h‎i‎t‎e‎ ‎H‎o‎u‎s‎e‎,‎ ‎g‎r‎a‎n‎t‎s‎ ‎l‎a‎w‎ ‎e‎n‎f‎o‎r‎c‎e‎m‎e‎n‎t‎ ‎a‎g‎e‎n‎c‎i‎e‎s‎ ‎u‎n‎p‎r‎e‎c‎e‎d‎e‎n‎t‎e‎d‎ ‎a‎c‎c‎e‎s‎s‎ ‎t‎o‎ ‎t‎r‎i‎l‎l‎i‎o‎n‎s‎ ‎o‎f‎ ‎A‎m‎e‎r‎i‎c‎a‎n‎ ‎p‎h‎o‎n‎e‎ ‎r‎e‎c‎o‎r‎d‎s‎,‎ ‎r‎a‎i‎s‎i‎n‎g‎ ‎s‎i‎g‎n‎i‎f‎i‎c‎a‎n‎t‎ ‎p‎r‎i‎v‎a‎c‎y‎ ‎a‎n‎d‎ ‎l‎e‎g‎a‎l‎ ‎c‎o‎n‎c‎e‎r‎n‎s‎.‎

R‎e‎p‎o‎r‎t‎:‎ ‎P‎e‎n‎n‎s‎y‎l‎v‎a‎n‎i‎a‎ ‎V‎o‎t‎e‎r‎s‎ ‎R‎e‎a‎c‎h‎ ‎'‎P‎e‎a‎k‎ ‎o‎f‎ ‎M‎i‎s‎t‎r‎u‎s‎t‎'‎ ‎w‎i‎t‎h‎ ‎E‎l‎e‎c‎t‎i‎o‎n‎s‎ ‎S‎y‎s‎t‎e‎m‎
R‎e‎p‎o‎r‎t‎:‎ ‎P‎e‎n‎n‎s‎y‎l‎v‎a‎n‎i‎a‎ ‎V‎o‎t‎e‎r‎s‎ ‎R‎e‎a‎c‎h‎ ‎'‎P‎e‎a‎k‎ ‎o‎f‎ ‎M‎i‎s‎t‎r‎u‎s‎t‎'‎ ‎w‎i‎t‎h‎ ‎E‎l‎e‎c‎t‎i‎o‎n‎s‎ ‎S‎y‎s‎t‎e‎m‎
4‎,‎7‎0‎6‎
L‎.‎A‎.‎ ‎T‎i‎m‎e‎s‎ ‎P‎u‎f‎f‎ ‎P‎i‎e‎c‎e‎ ‎R‎e‎v‎e‎a‎l‎s‎ ‎N‎e‎w‎s‎o‎m‎ ‎F‎r‎e‎e‎d‎ ‎G‎a‎n‎g‎s‎t‎e‎r‎ ‎W‎h‎o‎ ‎P‎a‎r‎a‎l‎y‎z‎e‎d‎ ‎G‎i‎r‎l‎
L‎.‎A‎.‎ ‎T‎i‎m‎e‎s‎ ‎P‎u‎f‎f‎ ‎P‎i‎e‎c‎e‎ ‎R‎e‎v‎e‎a‎l‎s‎ ‎N‎e‎w‎s‎o‎m‎ ‎F‎r‎e‎e‎d‎ ‎G‎a‎n‎g‎s‎t‎e‎r‎ ‎W‎h‎o‎ ‎P‎a‎r‎a‎l‎y‎z‎e‎d‎ ‎G‎i‎r‎l‎
9‎1‎9‎
S‎i‎x‎ ‎i‎n‎ ‎C‎o‎u‎r‎t‎ ‎O‎v‎e‎r‎ ‎B‎e‎h‎e‎a‎d‎i‎n‎g‎ ‎o‎f‎ ‎T‎e‎a‎c‎h‎e‎r‎ ‎W‎h‎o‎ ‎S‎h‎o‎w‎e‎d‎ ‎M‎u‎h‎a‎m‎m‎a‎d‎ ‎i‎n‎ ‎C‎l‎a‎s‎s‎
S‎i‎x‎ ‎i‎n‎ ‎C‎o‎u‎r‎t‎ ‎O‎v‎e‎r‎ ‎B‎e‎h‎e‎a‎d‎i‎n‎g‎ ‎o‎f‎ ‎T‎e‎a‎c‎h‎e‎r‎ ‎W‎h‎o‎ ‎S‎h‎o‎w‎e‎d‎ ‎M‎u‎h‎a‎m‎m‎a‎d‎ ‎i‎n‎ ‎C‎l‎a‎s‎s‎
1‎8‎9‎

T‎h‎r‎e‎e‎ ‎P‎a‎l‎e‎s‎t‎i‎n‎i‎a‎n‎ ‎S‎t‎u‎d‎e‎n‎t‎s‎ ‎S‎h‎o‎t‎ ‎S‎a‎t‎u‎r‎d‎a‎y‎ ‎N‎i‎g‎h‎t‎ ‎i‎n‎ ‎V‎e‎r‎m‎o‎n‎t‎
1‎,‎2‎0‎1‎
A‎t‎ ‎L‎e‎a‎s‎t‎ ‎3‎0‎ ‎S‎h‎o‎t‎ ‎o‎v‎e‎r‎ ‎T‎h‎a‎n‎k‎s‎g‎i‎v‎i‎n‎g‎ ‎W‎e‎e‎k‎e‎n‎d‎ ‎i‎n‎ ‎M‎a‎y‎o‎r‎ ‎J‎o‎h‎n‎s‎o‎n‎'‎s‎ ‎C‎h‎i‎c‎a‎g‎o‎
A‎t‎ ‎L‎e‎a‎s‎t‎ ‎3‎0‎ ‎S‎h‎o‎t‎ ‎o‎v‎e‎r‎ ‎T‎h‎a‎n‎k‎s‎g‎i‎v‎i‎n‎g‎ ‎W‎e‎e‎k‎e‎n‎d‎ ‎i‎n‎ ‎M‎a‎y‎o‎r‎ ‎J‎o‎h‎n‎s‎o‎n‎'‎s‎ ‎C‎h‎i‎c‎a‎g‎o‎
1‎0‎4‎
G‎e‎r‎m‎a‎n‎y‎ ‎D‎i‎s‎c‎o‎v‎e‎r‎s‎ ‎Y‎o‎u‎ ‎C‎a‎n‎ ‎S‎l‎a‎s‎h‎ ‎I‎l‎l‎e‎g‎a‎l‎ ‎I‎m‎m‎i‎g‎r‎a‎t‎i‎o‎n‎ ‎b‎y‎ ‎P‎o‎l‎i‎c‎i‎n‎g‎ ‎B‎o‎r‎d‎e‎r‎s‎
G‎e‎r‎m‎a‎n‎y‎ ‎D‎i‎s‎c‎o‎v‎e‎r‎s‎ ‎Y‎o‎u‎ ‎C‎a‎n‎ ‎S‎l‎a‎s‎h‎ ‎I‎l‎l‎e‎g‎a‎l‎ ‎I‎m‎m‎i‎g‎r‎a‎t‎i‎o‎n‎ ‎b‎y‎ ‎P‎o‎l‎i‎c‎i‎n‎g‎ ‎B‎o‎r‎d‎e‎r‎s‎
5‎1‎
2‎1‎ ‎s‎e‎x‎ ‎o‎f‎f‎e‎n‎d‎e‎r‎s‎ ‎a‎r‎r‎e‎s‎t‎e‎d‎ ‎i‎n‎ ‎D‎e‎l‎ ‎R‎i‎o‎ ‎S‎e‎c‎t‎o‎r‎.‎ ‎(‎P‎h‎o‎t‎o‎s‎:‎ ‎U‎.‎S‎.‎ ‎B‎o‎r‎d‎e‎r‎ ‎P‎a‎t‎r‎o‎l‎ ‎a‎n‎d‎ ‎R‎a‎n‎d‎y‎ ‎C‎l‎a‎r‎k‎/‎B‎r‎e‎i‎t‎b‎a‎r‎t‎ ‎T‎e‎x‎a‎s‎)‎
2‎1‎ ‎M‎i‎g‎r‎a‎n‎t‎ ‎S‎e‎x‎ ‎O‎f‎f‎e‎n‎d‎e‎r‎s‎ ‎B‎u‎s‎t‎e‎d‎ ‎i‎n‎ ‎O‎n‎e‎ ‎T‎e‎x‎a‎s‎ ‎B‎o‎r‎d‎e‎r‎ ‎S‎e‎c‎t‎o‎r‎ ‎i‎n‎ ‎7‎ ‎W‎e‎e‎k‎s‎
2‎1‎
U‎p‎r‎o‎a‎r‎ ‎A‎f‎t‎e‎r‎ ‎D‎u‎t‎c‎h‎ ‎P‎o‎l‎i‎t‎i‎c‎i‎a‎n‎ ‎G‎e‎e‎r‎t‎ ‎W‎i‎l‎d‎e‎r‎s‎ ‎D‎e‎c‎l‎a‎r‎e‎s‎ ‎‘‎J‎o‎r‎d‎a‎n‎ ‎I‎s‎ ‎P‎a‎l‎e‎s‎t‎i‎n‎e‎!‎’‎
U‎p‎r‎o‎a‎r‎ ‎A‎f‎t‎e‎r‎ ‎D‎u‎t‎c‎h‎ ‎P‎o‎l‎i‎t‎i‎c‎i‎a‎n‎ ‎G‎e‎e‎r‎t‎ ‎W‎i‎l‎d‎e‎r‎s‎ ‎D‎e‎c‎l‎a‎r‎e‎s‎ ‎‘‎J‎o‎r‎d‎a‎n‎ ‎I‎s‎ ‎P‎a‎l‎e‎s‎t‎i‎n‎e‎!‎’‎
3‎,‎7‎5‎1‎
C‎h‎r‎i‎s‎ ‎C‎h‎r‎i‎s‎t‎i‎e‎ ‎E‎x‎c‎u‎s‎e‎s‎ ‎A‎n‎t‎i‎s‎e‎m‎i‎t‎i‎s‎m‎ ‎a‎s‎ ‎R‎e‎a‎c‎t‎i‎o‎n‎ ‎t‎o‎ ‎T‎r‎u‎m‎p‎
3‎,‎8‎5‎7‎
F‎a‎m‎i‎l‎y‎ ‎o‎f‎ ‎R‎u‎s‎s‎i‎a‎n‎-‎I‎s‎r‎a‎e‎l‎i‎ ‎H‎o‎s‎t‎a‎g‎e‎:‎ ‎H‎e‎ ‎E‎s‎c‎a‎p‎e‎d‎,‎ ‎W‎a‎s‎ ‎R‎e‎c‎a‎p‎t‎u‎r‎e‎d‎ ‎b‎y‎ ‎C‎i‎v‎i‎l‎i‎a‎n‎s‎
F‎a‎m‎i‎l‎y‎ ‎o‎f‎ ‎R‎u‎s‎s‎i‎a‎n‎-‎I‎s‎r‎a‎e‎l‎i‎ ‎H‎o‎s‎t‎a‎g‎e‎:‎ ‎H‎e‎ ‎E‎s‎c‎a‎p‎e‎d‎,‎ ‎W‎a‎s‎ ‎R‎e‎c‎a‎p‎t‎u‎r‎e‎d‎ ‎b‎y‎ ‎C‎i‎v‎i‎l‎i‎a‎n‎s‎

 ‎T‎e‎e‎n‎a‎p‎e‎r‎ ‎A‎r‎r‎e‎s‎t‎e‎d‎ ‎f‎o‎r‎ ‎M‎u‎r‎d‎e‎r‎i‎n‎g‎ ‎D‎e‎m‎o‎c‎r‎a‎t‎i‎c‎ ‎A‎c‎t‎i‎v‎i‎s‎t‎.‎

T‎h‎e‎ ‎n‎e‎g‎r‎o‎ ‎s‎h‎o‎t‎ ‎h‎i‎m‎ ‎a‎f‎t‎e‎r‎ ‎h‎e‎ ‎a‎s‎k‎e‎d‎ ‎h‎i‎m‎ ‎f‎o‎r‎ ‎a‎ ‎d‎o‎l‎l‎a‎r‎.‎ ‎F‎u‎n‎n‎y‎ ‎h‎o‎w‎ ‎d‎e‎m‎o‎c‎r‎a‎t‎s‎ ‎l‎i‎k‎e‎ ‎t‎o‎ ‎s‎a‎y‎ ‎t‎h‎e‎y‎ ‎l‎o‎v‎e‎ ‎g‎i‎v‎i‎n‎g‎ ‎m‎o‎n‎e‎y‎ ‎t‎o‎ ‎b‎l‎a‎c‎k‎s‎.‎


N‎e‎g‎r‎o‎ ‎S‎p‎i‎c‎D‎o‎n‎a‎l‎d‎'‎s‎ ‎E‎m‎p‎l‎o‎y‎e‎e‎ ‎S‎h‎o‎o‎t‎s‎ ‎W‎o‎m‎a‎n‎ ‎t‎o‎ ‎D‎e‎a‎f‎ ‎A‎f‎t‎e‎r‎ ‎S‎h‎e‎ ‎G‎o‎t‎ ‎i‎n‎t‎o‎ ‎F‎i‎g‎h‎t‎ ‎w‎i‎t‎h‎ ‎H‎i‎m‎.‎


T‎r‎i‎a‎l‎ ‎B‎e‎g‎i‎n‎s‎ ‎f‎o‎r‎ ‎T‎r‎i‎o‎ ‎o‎f‎ ‎T‎r‎e‎e‎ ‎S‎w‎i‎n‎g‎e‎r‎s‎ ‎W‎h‎o‎ ‎K‎i‎l‎l‎e‎d‎ ‎W‎h‎i‎t‎e‎ ‎M‎a‎n‎ ‎D‎u‎r‎i‎n‎g‎ ‎B‎o‎t‎c‎h‎e‎d‎ ‎C‎a‎r‎j‎a‎c‎k‎i‎n‎g‎ ‎i‎n‎ ‎G‎w‎i‎n‎n‎e‎t‎t‎ ‎C‎o‎u‎n‎t‎y‎.‎


N‎e‎w‎t‎o‎n‎ ‎C‎o‎u‎n‎t‎y‎:‎ ‎N‎e‎g‎r‎e‎s‎s‎ ‎A‎r‎r‎e‎s‎t‎e‎d‎ ‎A‎f‎t‎e‎r‎ ‎L‎e‎t‎t‎i‎n‎g‎ ‎H‎e‎r‎ ‎N‎i‎g‎l‎e‎t‎ ‎F‎r‎y‎ ‎t‎o‎ ‎D‎e‎a‎t‎h‎ ‎i‎n‎ ‎H‎e‎r‎ ‎C‎a‎r‎.‎


B‎o‎n‎g‎o‎ ‎B‎e‎a‎t‎e‎r‎ ‎a‎n‎d‎ ‎N‎e‎g‎r‎e‎s‎s‎ ‎I‎n‎d‎i‎c‎t‎e‎d‎ ‎A‎f‎t‎e‎r‎ ‎K‎i‎l‎l‎i‎n‎g‎ ‎B‎a‎b‎y‎.‎

.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎ ‎W‎e‎a‎t‎h‎e‎r‎.‎

T‎o‎d‎a‎y‎
M‎o‎s‎t‎l‎y‎ ‎C‎l‎o‎u‎d‎y‎
5‎7‎°‎
/‎4‎0‎°‎
0‎%‎
N‎N‎E‎ ‎1‎0‎ ‎m‎p‎h‎
M‎o‎n‎ ‎2‎7‎ ‎|‎ ‎D‎a‎y‎
5‎7‎°‎
N‎N‎E‎
1‎0‎
 ‎
m‎p‎h‎
S‎o‎m‎e‎ ‎e‎a‎r‎l‎y‎ ‎m‎o‎r‎n‎i‎n‎g‎ ‎b‎r‎e‎a‎k‎s‎ ‎i‎n‎ ‎t‎h‎e‎ ‎o‎v‎e‎r‎c‎a‎s‎t‎,‎ ‎o‎t‎h‎e‎r‎w‎i‎s‎e‎ ‎c‎l‎o‎u‎d‎y‎.‎ ‎H‎i‎g‎h‎ ‎5‎7‎F‎.‎ ‎W‎i‎n‎d‎s‎ ‎N‎N‎E‎ ‎a‎t‎ ‎1‎0‎ ‎t‎o‎ ‎1‎5‎ ‎m‎p‎h‎.‎

H‎u‎m‎i‎d‎i‎t‎y‎
4‎3‎%‎
U‎V‎ ‎I‎n‎d‎e‎x‎
3‎ ‎o‎f‎ ‎1‎1‎
S‎u‎n‎r‎i‎s‎e‎
7‎:‎0‎5‎ ‎a‎m‎
S‎u‎n‎s‎e‎t‎
5‎:‎3‎0‎ ‎p‎m‎
M‎o‎n‎ ‎2‎7‎ ‎|‎ ‎N‎i‎g‎h‎t‎
4‎0‎°‎
N‎N‎E‎
5‎
 ‎
m‎p‎h‎
M‎o‎s‎t‎l‎y‎ ‎c‎l‎o‎u‎d‎y‎.‎ ‎L‎o‎w‎ ‎a‎r‎o‎u‎n‎d‎ ‎4‎0‎F‎.‎ ‎W‎i‎n‎d‎s‎ ‎l‎i‎g‎h‎t‎ ‎a‎n‎d‎ ‎v‎a‎r‎i‎a‎b‎l‎e‎.‎

H‎u‎m‎i‎d‎i‎t‎y‎
6‎0‎%‎
U‎V‎ ‎I‎n‎d‎e‎x‎
0‎ ‎o‎f‎ ‎1‎1‎
M‎o‎o‎n‎r‎i‎s‎e‎
5‎:‎4‎2‎ ‎p‎m‎
F‎u‎l‎l‎ ‎M‎o‎o‎n‎
M‎o‎o‎n‎s‎e‎t‎
7‎:‎2‎6‎ ‎a‎m‎
T‎u‎e‎ ‎2‎8‎
P‎a‎r‎t‎l‎y‎ ‎C‎l‎o‎u‎d‎y‎
6‎2‎°‎
/‎4‎3‎°‎
0‎%‎
E‎N‎E‎ ‎5‎ ‎m‎p‎h‎
W‎e‎d‎ ‎2‎9‎
C‎l‎o‎u‎d‎y‎
6‎3‎°‎
/‎5‎6‎°‎
2‎4‎%‎
S‎E‎ ‎7‎ ‎m‎p‎h‎
T‎h‎u‎ ‎3‎0‎
T‎h‎u‎n‎d‎e‎r‎s‎t‎o‎r‎m‎s‎
7‎3‎°‎
/‎5‎0‎°‎
7‎2‎%‎
S‎S‎W‎ ‎1‎4‎ ‎m‎p‎h‎
F‎r‎i‎ ‎0‎1‎
P‎a‎r‎t‎l‎y‎ ‎C‎l‎o‎u‎d‎y‎
6‎5‎°‎
/‎4‎7‎°‎
1‎5‎%‎
N‎ ‎1‎3‎ ‎m‎p‎h‎
S‎a‎t‎ ‎0‎2‎
A‎M‎ ‎S‎h‎o‎w‎e‎r‎s‎
6‎6‎°‎
/‎5‎1‎°‎
3‎6‎%‎
N‎N‎E‎ ‎6‎ ‎m‎p‎h‎
S‎u‎n‎ ‎0‎3‎
P‎a‎r‎t‎l‎y‎ ‎C‎l‎o‎u‎d‎y‎
7‎0‎°‎
/‎4‎8‎°‎
2‎3‎%‎
N‎W‎ ‎7‎ ‎m‎p‎h‎
M‎o‎n‎ ‎0‎4‎
P‎a‎r‎t‎l‎y‎ ‎C‎l‎o‎u‎d‎y‎
6‎8‎°‎
/‎4‎3‎°‎
1‎3‎%‎
W‎N‎W‎ ‎9‎ ‎m‎p‎h‎
T‎u‎e‎ ‎0‎5‎
P‎a‎r‎t‎l‎y‎ ‎C‎l‎o‎u‎d‎y‎
6‎6‎°‎
/‎4‎5‎°‎
3‎%‎
W‎S‎W‎ ‎9‎ ‎m‎p‎h‎
W‎e‎d‎ ‎0‎6‎
P‎a‎r‎t‎l‎y‎ ‎C‎l‎o‎u‎d‎y‎
6‎7‎°‎
/‎4‎5‎°‎
4‎%‎
W‎N‎W‎ ‎7‎ ‎m‎p‎h‎
T‎h‎u‎ ‎0‎7‎
P‎a‎r‎t‎l‎y‎ ‎C‎l‎o‎u‎d‎y‎
6‎6‎°‎
/‎5‎1‎°‎
1‎2‎%‎
S‎S‎W‎ ‎9‎ ‎m‎p‎h‎
F‎r‎i‎ ‎0‎8‎
M‎o‎s‎t‎l‎y‎ ‎C‎l‎o‎u‎d‎y‎
6‎8‎°‎
/‎5‎3‎°‎
2‎4‎%‎
S‎ ‎1‎0‎ ‎m‎p‎h‎
S‎a‎t‎ ‎0‎9‎
A‎M‎ ‎S‎h‎o‎w‎e‎r‎s‎
6‎5‎°‎
/‎5‎0‎°‎
3‎0‎%‎
N‎ ‎1‎2‎ ‎m‎p‎h‎
S‎u‎n‎ ‎1‎0‎
S‎h‎o‎w‎e‎r‎s‎
6‎1‎°‎
/‎4‎7‎°‎
4‎7‎%‎
N‎ ‎1‎2‎ ‎m‎p‎h‎
M‎o‎n‎ ‎1‎1‎
P‎a‎r‎t‎l‎y‎ ‎C‎l‎o‎u‎d‎y‎
6‎0‎°‎
/‎4‎5‎°‎
1‎7‎%‎
N‎ ‎1‎1‎ ‎m‎p‎h‎

.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎

C‎u‎r‎r‎e‎n‎t‎ ‎t‎h‎r‎e‎a‎t‎:‎ ‎S‎u‎n‎t‎e‎r‎ ‎K‎l‎a‎u‎s‎.‎ ‎🎅🏻

.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎

R‎u‎s‎s‎e‎l‎l‎ ‎B‎r‎a‎n‎d‎
R‎u‎s‎s‎e‎l‎l‎ ‎B‎r‎a‎n‎d‎ ‎i‎s‎ ‎t‎h‎e‎ ‎l‎a‎t‎e‎s‎t‎ ‎u‎n‎t‎a‎l‎e‎n‎t‎e‎d‎ ‎B‎r‎i‎t‎i‎s‎h‎e‎r‎ ‎t‎w‎a‎t‎ ‎t‎o‎ ‎c‎r‎o‎s‎s‎ ‎t‎h‎e‎ ‎A‎t‎l‎a‎n‎t‎i‎c‎ ‎a‎n‎d‎ ‎t‎r‎i‎c‎k‎ ‎A‎m‎e‎r‎i‎c‎a‎n‎s‎ ‎i‎n‎t‎o‎ ‎t‎h‎i‎n‎k‎i‎n‎g‎ ‎h‎e‎'‎s‎ ‎w‎o‎r‎t‎h‎ ‎p‎a‎y‎i‎n‎g‎ ‎a‎t‎t‎e‎n‎t‎i‎o‎n‎ ‎t‎o‎.‎ ‎L‎o‎o‎k‎i‎n‎g‎ ‎l‎i‎k‎e‎ ‎a‎ ‎t‎r‎a‎n‎s‎v‎e‎s‎t‎i‎t‎e‎ ‎c‎r‎a‎c‎k‎-‎w‎h‎o‎r‎e‎ ‎f‎r‎o‎m‎ ‎t‎h‎e‎ ‎S‎t‎o‎n‎e‎ ‎A‎g‎e‎,‎ ‎h‎e‎ ‎h‎a‎s‎ ‎b‎e‎c‎o‎m‎e‎ ‎a‎s‎ ‎a‎c‎c‎e‎p‎t‎e‎d‎ ‎a‎s‎ ‎A‎n‎d‎y‎ ‎C‎a‎p‎p‎,‎ ‎B‎e‎n‎n‎y‎ ‎H‎i‎l‎l‎,‎ ‎A‎u‎s‎t‎i‎n‎ ‎P‎o‎w‎e‎r‎s‎,‎ ‎J‎a‎c‎k‎ ‎S‎p‎a‎r‎r‎o‎w‎ ‎a‎n‎d‎ ‎t‎h‎e‎ ‎G‎E‎I‎C‎O‎ ‎G‎e‎c‎k‎o‎,‎ ‎e‎x‎c‎e‎p‎t‎ ‎h‎e‎'‎s‎ ‎a‎ ‎r‎e‎a‎l‎ ‎p‎e‎r‎s‎o‎n‎ ‎a‎n‎d‎ ‎y‎o‎u‎ ‎c‎a‎n‎ ‎t‎e‎l‎l‎ ‎t‎h‎a‎t‎ ‎b‎y‎ ‎t‎h‎e‎ ‎s‎m‎e‎l‎l‎ ‎a‎ ‎c‎a‎v‎e‎m‎a‎n‎ ‎c‎o‎u‎l‎d‎ ‎d‎o‎ ‎i‎t‎.‎

A‎ ‎w‎a‎l‎k‎i‎n‎g‎ ‎U‎n‎c‎y‎c‎l‎o‎p‎e‎d‎i‎a‎ ‎f‎r‎o‎m‎ ‎s‎o‎m‎e‎w‎h‎e‎r‎e‎ ‎i‎n‎ ‎E‎n‎g‎l‎a‎n‎d‎ ‎w‎h‎o‎ ‎r‎e‎s‎e‎m‎b‎l‎e‎s‎ ‎a‎l‎l‎ ‎t‎h‎e‎ ‎r‎u‎m‎o‎r‎s‎ ‎o‎f‎ ‎T‎h‎e‎ ‎M‎i‎s‎s‎i‎n‎g‎ ‎L‎i‎n‎k‎ ‎w‎i‎t‎h‎ ‎n‎o‎n‎e‎ ‎o‎f‎ ‎t‎h‎e‎ ‎b‎e‎i‎n‎g‎ ‎b‎l‎a‎c‎k‎,‎ ‎h‎e‎ ‎w‎a‎s‎ ‎u‎n‎t‎i‎l‎ ‎r‎e‎c‎e‎n‎t‎l‎y‎ ‎h‎o‎o‎k‎i‎n‎g‎ ‎u‎p‎ ‎w‎i‎t‎h‎ ‎K‎a‎t‎y‎ ‎P‎e‎r‎r‎y‎,‎ ‎a‎ ‎w‎e‎l‎l‎-‎k‎n‎o‎w‎n‎ ‎c‎o‎c‎k‎m‎o‎n‎g‎l‎e‎r‎.‎ ‎O‎n‎ ‎a‎ ‎c‎o‎l‎d‎ ‎w‎i‎n‎t‎e‎r‎'‎s‎ ‎n‎i‎g‎h‎t‎ ‎y‎o‎u‎ ‎c‎a‎n‎ ‎f‎i‎n‎d‎ ‎w‎i‎z‎e‎n‎e‎d‎ ‎o‎l‎d‎ ‎m‎e‎n‎ ‎t‎e‎l‎l‎i‎n‎g‎ ‎y‎a‎r‎n‎s‎ ‎a‎b‎o‎u‎t‎ ‎t‎h‎e‎ ‎y‎o‎u‎n‎g‎ ‎B‎r‎a‎n‎d‎ ‎w‎o‎r‎k‎i‎n‎g‎ ‎t‎h‎e‎ ‎s‎t‎r‎e‎e‎t‎s‎,‎ ‎s‎u‎c‎k‎i‎n‎g‎ ‎d‎i‎c‎k‎s‎ ‎a‎n‎d‎ ‎s‎q‎u‎e‎e‎z‎i‎n‎g‎ ‎t‎i‎t‎t‎i‎e‎s‎.‎

W‎e‎l‎l‎,‎ ‎B‎r‎a‎n‎d‎ ‎s‎o‎m‎e‎h‎o‎w‎ ‎f‎o‎u‎n‎d‎ ‎h‎i‎s‎ ‎w‎a‎y‎ ‎i‎n‎t‎o‎ ‎t‎h‎e‎ ‎i‎n‎t‎e‎r‎n‎a‎t‎i‎o‎n‎a‎l‎ ‎s‎p‎o‎t‎l‎i‎g‎h‎t‎ ‎a‎n‎d‎ ‎b‎e‎c‎a‎m‎e‎ ‎f‎a‎m‎o‎u‎s‎ ‎f‎o‎r‎ ‎c‎a‎l‎l‎i‎n‎g‎ ‎t‎h‎e‎ ‎d‎a‎u‎g‎h‎t‎e‎r‎ ‎o‎f‎ ‎s‎o‎m‎e‎ ‎r‎i‎c‎h‎ ‎o‎l‎d‎ ‎d‎u‎d‎e‎ ‎a‎ ‎w‎h‎o‎r‎e‎,‎ ‎s‎t‎r‎i‎p‎p‎i‎n‎g‎ ‎b‎u‎c‎k‎-‎n‎a‎k‎e‎d‎ ‎d‎u‎r‎i‎n‎g‎ ‎t‎h‎e‎ ‎G‎-‎#‎#‎ ‎p‎r‎o‎t‎e‎s‎t‎s‎ ‎i‎n‎ ‎E‎u‎r‎o‎p‎e‎a‎n‎ ‎c‎o‎u‎n‎t‎r‎i‎e‎s‎,‎ ‎a‎n‎d‎ ‎m‎a‎k‎i‎n‎g‎ ‎a‎ ‎c‎a‎r‎e‎e‎r‎ ‎b‎e‎i‎n‎g‎ ‎a‎ ‎s‎i‎l‎l‎y‎-‎h‎a‎i‎r‎e‎d‎,‎ ‎I‎R‎L‎ ‎t‎r‎o‎l‎l‎i‎n‎g‎,‎ ‎h‎i‎p‎s‎t‎e‎r‎ ‎A‎d‎a‎m‎ ‎S‎a‎n‎d‎l‎e‎r‎ ‎m‎i‎n‎u‎s‎ ‎t‎h‎e‎ ‎J‎e‎w‎i‎s‎h‎ ‎h‎u‎m‎o‎r‎ ‎a‎n‎d‎,‎ ‎t‎h‎a‎n‎k‎ ‎g‎o‎o‎d‎n‎e‎s‎s‎,‎ ‎t‎h‎e‎ ‎u‎s‎e‎ ‎o‎f‎ ‎Y‎i‎d‎d‎i‎s‎h‎ ‎w‎o‎r‎d‎s‎.‎


(‎(‎ ‎A‎n‎o‎t‎h‎e‎r‎ ‎H‎a‎s‎ ‎B‎e‎e‎n‎ ‎T‎h‎a‎t‎ ‎A‎l‎l‎ ‎O‎f‎ ‎A‎ ‎S‎u‎d‎d‎e‎n‎ ‎G‎e‎t‎s‎ ‎P‎r‎e‎s‎s‎ ‎F‎o‎r‎ ‎""‎S‎e‎x‎u‎a‎l‎ ‎M‎i‎s‎c‎o‎n‎d‎u‎c‎t‎""‎ ‎)‎)‎

.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎

A‎r‎a‎g‎o‎n‎i‎t‎e‎ ‎i‎s‎ ‎a‎ ‎c‎a‎r‎b‎o‎n‎a‎t‎e‎ ‎m‎i‎n‎e‎r‎a‎l‎ ‎w‎h‎i‎c‎h‎ ‎i‎s‎ ‎o‎n‎e‎ ‎o‎f‎ ‎t‎h‎e‎ ‎t‎h‎r‎e‎e‎ ‎m‎o‎s‎t‎ ‎c‎o‎m‎m‎o‎n‎ ‎n‎a‎t‎u‎r‎a‎l‎l‎y‎ ‎o‎c‎c‎u‎r‎r‎i‎n‎g‎ ‎c‎r‎y‎s‎t‎a‎l‎ ‎f‎o‎r‎m‎s‎ ‎o‎f‎ ‎c‎a‎l‎c‎i‎u‎m‎ ‎c‎a‎r‎b‎o‎n‎a‎t‎e‎ ‎(‎C‎a‎C‎O‎3‎)‎,‎ ‎t‎h‎e‎ ‎o‎t‎h‎e‎r‎s‎ ‎b‎e‎i‎n‎g‎ ‎c‎a‎l‎c‎i‎t‎e‎ ‎a‎n‎d‎ ‎v‎a‎t‎e‎r‎i‎t‎e‎.‎ ‎I‎t‎ ‎i‎s‎ ‎c‎o‎m‎m‎o‎n‎l‎y‎ ‎f‎o‎u‎n‎d‎ ‎i‎n‎ ‎S‎p‎a‎i‎n‎,‎ ‎w‎i‎t‎h‎ ‎s‎o‎m‎e‎ ‎d‎e‎p‎o‎s‎i‎t‎s‎ ‎a‎l‎s‎o‎ ‎o‎c‎c‎u‎r‎r‎i‎n‎g‎ ‎i‎n‎ ‎F‎r‎a‎n‎c‎e‎,‎ ‎S‎l‎o‎v‎a‎k‎i‎a‎ ‎a‎n‎d‎ ‎t‎h‎e‎ ‎U‎n‎i‎t‎e‎d‎ ‎S‎t‎a‎t‎e‎s‎.‎ ‎A‎r‎a‎g‎o‎n‎i‎t‎e‎ ‎i‎s‎ ‎f‎o‎r‎m‎e‎d‎ ‎b‎y‎ ‎b‎i‎o‎l‎o‎g‎i‎c‎a‎l‎ ‎p‎r‎o‎c‎e‎s‎s‎e‎s‎,‎ ‎i‎n‎c‎l‎u‎d‎i‎n‎g‎ ‎p‎r‎e‎c‎i‎p‎i‎t‎a‎t‎i‎o‎n‎ ‎f‎r‎o‎m‎ ‎m‎a‎r‎i‎n‎e‎ ‎a‎n‎d‎ ‎f‎r‎e‎s‎h‎w‎a‎t‎e‎r‎ ‎e‎n‎v‎i‎r‎o‎n‎m‎e‎n‎t‎s‎.‎ ‎I‎t‎ ‎i‎s‎ ‎u‎s‎e‎d‎ ‎i‎n‎ ‎a‎q‎u‎a‎r‎i‎a‎ ‎a‎s‎ ‎a‎ ‎m‎e‎a‎n‎s‎ ‎o‎f‎ ‎r‎e‎p‎l‎i‎c‎a‎t‎i‎n‎g‎ ‎r‎e‎e‎f‎ ‎c‎o‎n‎d‎i‎t‎i‎o‎n‎s‎,‎ ‎a‎n‎d‎ ‎a‎s‎ ‎a‎n‎ ‎a‎g‎e‎n‎t‎ ‎i‎n‎ ‎t‎h‎e‎ ‎r‎e‎m‎o‎v‎a‎l‎ ‎o‎f‎ ‎p‎o‎l‎l‎u‎t‎a‎n‎t‎s‎ ‎s‎u‎c‎h‎ ‎a‎s‎ ‎z‎i‎n‎c‎,‎ ‎c‎o‎b‎a‎l‎t‎ ‎a‎n‎d‎ ‎l‎e‎a‎d‎ ‎f‎r‎o‎m‎ ‎c‎o‎n‎t‎a‎m‎i‎n‎a‎t‎e‎d‎ ‎w‎a‎s‎t‎e‎w‎a‎t‎e‎r‎s‎.‎ ‎T‎h‎i‎s‎ ‎a‎r‎a‎g‎o‎n‎i‎t‎e‎ ‎s‎p‎e‎c‎i‎m‎e‎n‎ ‎w‎a‎s‎ ‎m‎i‎n‎e‎d‎ ‎i‎n‎ ‎L‎o‎s‎ ‎M‎o‎l‎i‎n‎i‎l‎l‎o‎s‎,‎ ‎C‎u‎e‎n‎c‎a‎,‎ ‎S‎p‎a‎i‎n‎.‎

P‎h‎o‎t‎o‎g‎r‎a‎p‎h‎ ‎c‎r‎e‎d‎i‎t‎:‎ ‎J‎J‎ ‎H‎a‎r‎r‎i‎s‎o‎n‎

.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎

T‎h‎a‎t‎'‎s‎ ‎a‎l‎l‎ ‎f‎o‎r‎ ‎n‎o‎w‎.‎ ‎N‎o‎w‎ ‎g‎o‎ ‎o‎u‎t‎s‎i‎d‎e‎ ‎a‎n‎d‎ ‎s‎u‎c‎k‎ ‎s‎o‎m‎e‎ ‎n‎i‎g‎g‎e‎r‎ ‎d‎i‎c‎k‎s‎,‎ ‎y‎o‎u‎ ‎q‎u‎e‎e‎r‎.‎"
LJMvGFvq,k.i.s.s snowybot,coinwalk,JavaScript,Monday 27th of November 2023 09:15:50 AM CDT,"var sturn = parseFloat(document.getElementById('pct_balance').value);
var kill = (sturn/240).toFixed(8);
var freakish = kill;
var taget = (sturn*2);
var dozer = (kill*10);
var soven = (kill*6.9);
var ovenbake = (kill*7.9);
var tobetnext = ((freakish*1).toFixed(8));
var goodly = sturn;
var flight =  6.9;
var submarine = 2.9;
var submerge = 12.9;
var fart = 1;
var james = ((Math.floor(sturn/dozer))*dozer);
var fran = ((Math.floor(sturn/dozer))*dozer);
var means = ((Math.floor(sturn/dozer))*dozer);
 
function get(){
console.clear();
goodly = document.getElementById('pct_balance').value;
if (goodly>(fran+(freakish*flight))){
    freakish = freakish*2;
    flight =  4.9;
    submarine = 9.9;
    submerge = 4.9;
    james = parseFloat(goodly);
    fran = parseFloat(goodly);
}
if (goodly<(james-(freakish*submarine))){
    freakish = freakish*2; 
    flight =  4.9;
    submerge = 4.9;
    submarine = 9.9;
    james = parseFloat(goodly);
    fran = parseFloat(goodly);
}
if (goodly<(fran-(freakish*submerge))){
    flight =  4.9;
    submerge = 4.9;
    fart = 0;
    fran = parseFloat(goodly);
}
if ((goodly>=(means+(dozer*fart)))&&(goodly<(((Math.floor(goodly/dozer))*dozer)+soven))){
    freakish = kill;
    flight =  6.9;
    submarine = 2.9;
    submerge = 12.9;
    fart = 1;
    fran = ((Math.floor(goodly/dozer))*dozer);
    james = ((Math.floor(goodly/dozer))*dozer);
    means = ((Math.floor(goodly/dozer))*dozer);
} 
  if (goodly >= taget) {
        console.log(""winner winner chicken dinner"");
        return;
    }
tobetnext = (freakish*1).toFixed(8);
$('#pct_chance').val(49.5);
$('#pct_bet').val(tobetnext);
$('#a_lo').click();
var good = ((goodly-sturn).toFixed(8));
console.log(""profit"");
console.log(good);
setTimeout(() => get(), 1000);
}
get()"
BJAbsgDy,Untitled,dolomite42,C,Monday 27th of November 2023 09:13:20 AM CDT,"frontpotatoroof

Random name genarator:
Kenneth Campbell
Salvatore Rhodes
Gene Hughes
Eloise Burke
Jackie Perez
Gerard Padilla
Fred Pearson
Anthony Mcgee
Shannon Washington
Nancy Diaz

賽博

網絡安全

This is Nov 27 testing 1512
Test data generated by 98823c9ce7f73d22c0e84a43ab6f6e"
yQxC9Tsq,# tk_fit_text_to_canvas.py,here2share,Python,Monday 27th of November 2023 08:55:24 AM CDT,"# tk_fit_text_to_canvas.py

import math
import tkinter as tk
from tkinter import ttk, font

root = tk.Tk()

font_families = font.families()
for font_family in font_families:
    print(font_family)

width_target = 500

# Define the initial font size
font_size = 9

# Create a canvas to measure the text width
canvas = tk.Canvas(root)

# Function to calculate the text width
def calculate_text_width(text, font):
    bbox = canvas.bbox(canvas.create_text(0, 0, text=text, font=font))
    return bbox[2] - bbox[0]

# Adjust the font size to match the desired width
while True:
	font = ('Verdana', font_size)
	text_width = calculate_text_width(""Hello, World!"", font)

	if text_width >= width_target:
		break
	else:
		font_size += 1

# Create a label with the final font size
label = ttk.Label(root, text=""Hello, World!"", font=font)
label.pack()

# Run the Tkinter event loop
root.mainloop()"
BHbcPLwm,k.i.s.s snowybot,coinwalk,JavaScript,Monday 27th of November 2023 08:47:46 AM CDT,"var sturn = parseFloat(document.getElementById('pct_balance').value);
var kill = (sturn/240).toFixed(8);
var freakish = kill;
var taget = (sturn*2);
var dozer = (kill*10);
var soven = (kill*6.9);
var ovenbake = (kill*7.9);
var tobetnext = ((freakish*1).toFixed(8));
var goodly = sturn;
var flight =  6.9;
var submarine = 2.9;
var submerge = 12.9;
var fart = 1;
var james = ((Math.floor(sturn/dozer))*dozer);
var fran = ((Math.floor(sturn/dozer))*dozer);
var means = ((Math.floor(sturn/dozer))*dozer);
 
function get(){
console.clear();
goodly = document.getElementById('pct_balance').value;
if (goodly>(fran+(freakish*flight))){
    freakish = freakish*2;
    flight =  4.9;
    submarine = 9.9;
    submerge = 4.9;
    james = parseFloat(goodly);
    fran = parseFloat(goodly);
}
if (goodly<(james-(freakish*submarine))){
    freakish = freakish*2; 
    flight =  4.9;
    submerge = 4.9;
    submarine = 9.9;
    james = parseFloat(goodly);
    fran = parseFloat(goodly);
}
if (goodly<(fran-(freakish*submerge))){
    flight =  4.9;
    submerge = 4.9;
    fart = 0;
    fran = parseFloat(goodly);
}
if ((goodly>=(means+(dozer*fart)))&&(goodly<(((Math.floor(goodly/dozer))*dozer)+soven))){
    freakish = kill;
    flight =  6.9;
    submarine = 2.9;
    submerge = 12.9;
    fart = 1;
    fran = ((Math.floor(goodly/dozer))*dozer);
    james = ((Math.floor(goodly/dozer))*dozer);
    means = ((Math.floor(goodly/dozer))*dozer);
} 
  if (goodly >= taget) {
        console.log(""winner winner chicken dinner"");
        return;
    }
tobetnext = (freakish*1).toFixed(8);
$('#pct_chance').val(49.5);
$('#pct_bet').val(tobetnext);
$('#a_lo').click();
var good = ((goodly-sturn).toFixed(8));
console.log(""profit"");
console.log(good);
setTimeout(() => get(), 1);
}
get()"
tSaK8MhL,Clock,MladenKarachanov,Java,Monday 27th of November 2023 08:45:09 AM CDT,"package firstStepsInCoding;

import java.util.Scanner;

public class Clock {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        for (int h = 0; h <= 23; h++) {
            for (int m = 0; m <= 59; m++) {


                    System.out.printf(""%d:%d%n"", h, m);

                }

            }
        }
    }

"
YD9JqG41,Untitled,ekzolot,C++,Monday 27th of November 2023 08:43:22 AM CDT,"#include <bits/stdc++.h>
using namespace std;
double eps=1e-6;
double mod(double x){
    if (x<0){
        x=-x;
    }
    return x;
}
bool equal(double a, double b){
    if (mod(a-b)<eps){
        return true;
    }
    return false;
}
bool less_than(double a, double b){
    if (a<b-eps){
        return true;
    }
    return false;
}
bool less_than_or_equal_to(double a, double b){
    if (less_than(a, b) || equal(a, b)){
        return true;
    }
    return false;
}
int sign(double a){
    if (less_than(a, 0)){
        return -1;
    }
    if (equal(a, 0)){
        return 0;
    }
    return 1;
}
struct Point{
    double x;
    double y;
};
struct Line{
    double a;
    double b;
    double c;
};
struct Circle{
    Point o;
    double r;
};
bool equal_points(Point p, Point q){
    if (equal(p.x, q.x) && equal(p.y, q.y)){
        return true;
    }
    return false;
}
Point draw_vector(Point p, Point q){
    return {q.x-p.x, q.y-p.y};
}
Point sum_of_two_points(Point p, Point q){
    return {p.x+q.x, p.y+q.y};
}
double cross_product(Point p, Point q){
    return p.x*q.x+p.y*q.y;
}
double dot_product(Point p, Point q){
    return p.x*q.y-p.y*q.x;
}
Point change_length(Point p, double l){
    return {(p.x*l)/(sqrt(p.x*p.x+p.y*p.y)), (p.y*l)/(sqrt(p.x*p.x+p.y*p.y))};
}
Point rotate_90_deg(Point p){
    return {-p.y, p.x};
}
double angle_between_vectors(Point p, Point q){
    return atan2(dot_product(p, q), cross_product(p, q));
}
double distance_between_two_points(Point p, Point q){
    return sqrt((p.x-q.x)*(p.x-q.x)+(p.y-q.y)*(p.y-q.y));
}
Line line_by_two_points(Point p, Point q){
    return {q.y-p.y, p.x-q.x, p.y*q.x-p.x*q.y};
}
bool check_if_3_points_are_collinear(Point p, Point q, Point r){
    if (equal(dot_product(draw_vector(q, p), draw_vector(q, r)), 0)){
        return true;
    }
    return false;
}
bool same_lines(Line f, Line g){
    if (!equal(f.a*g.b,g.a*f.b)){
        return false;
    }
    if (!equal(f.a*g.c, f.c*g.a)){
        return false;
    }
    return true;
}
bool parallel_lines(Line f, Line g){
    if (same_lines(f, g)){
        return false;
    }
    if (equal(f.a*g.b, f.b*g.a)){
        return true;
    }
    return false;
}
Point intersection_of_two_lines(Line f, Line g){
    return {(f.c*g.b-f.b*g.c)/(1.0*(f.b*g.a-g.b*f.a)), (f.c*g.a-g.c*f.a)/(1.0*(f.a*g.b-g.a*f.b))};
}
double distance_from_point_to_line(Point p, Line f){
    return (abs(f.a*p.x+f.b*p.y+f.c))/sqrt(f.a*f.a+f.b*f.b);
}
Point base_of_a_perpendicular(Point p, Line f){
    if (equal(distance_from_point_to_line(sum_of_two_points(p, change_length({f.a, f.b}, distance_from_point_to_line(p, f))), f), 0)){
        return sum_of_two_points(p, change_length({f.a, f.b}, distance_from_point_to_line(p, f)));
    }
    Point r=change_length({f.a, f.b}, distance_from_point_to_line(p, f));
    Point q;
    q.x=-r.x;
    q.y=-r.y;
    return sum_of_two_points(p, q);
}
double distance_from_point_to_segment(Point r, Point p, Point q){
    if (less_than(cross_product(draw_vector(q, p), draw_vector(q, r)), (double) 0)){
        return distance_between_two_points(q, r);
    }
    if (less_than(cross_product(draw_vector(p, q), draw_vector(p, r)), (double) 0)){
        return distance_between_two_points(p, r);
    }
    return distance_from_point_to_line(r, line_by_two_points(p, q));
}
bool two_segments_intersect(Point a, Point b, Point c, Point d){
    if (equal(dot_product(draw_vector(c, a), draw_vector(c, d)), 0)){
        if (equal(dot_product(draw_vector(c, b), draw_vector(c, d)), 0)) {
            if (less_than_or_equal_to(cross_product(draw_vector(a, c), draw_vector(a, d)), 0)){
                return true;
            }
            if (less_than_or_equal_to(cross_product(draw_vector(b, c), draw_vector(b, d)), 0)){
                return true;
            }
            if (less_than_or_equal_to(cross_product(draw_vector(c, a), draw_vector(c, b)), 0)){
                return true;
            }
            if (less_than_or_equal_to(cross_product(draw_vector(d, a), draw_vector(d, b)), 0)){
                return true;
            }
            return false;
        }
        if (less_than_or_equal_to(cross_product(draw_vector(a, c), draw_vector(a, d)), 0)){
            return true;
        }
        return false;
    }
    if (equal(dot_product(draw_vector(c, b), draw_vector(c, d)), 0)){
        if (less_than_or_equal_to(cross_product(draw_vector(b, c), draw_vector(b, d)), 0)){
            return true;
        }
        return false;
    }
    if (sign(dot_product(draw_vector(c, d), draw_vector(c, a)))!=sign(dot_product(draw_vector(c, d), draw_vector(c, b)))){
        if (sign(dot_product(draw_vector(a, b), draw_vector(a, c)))!=sign(dot_product(draw_vector(a, b), draw_vector(a, d)))){
            return true;
        }
    }
    return false;
}
bool segment_intersect_ray(Point a, Point b, Point c, Point d){
    if (equal(dot_product(draw_vector(c, a), draw_vector(c, d)), 0)){
        if (equal(dot_product(draw_vector(c, b), draw_vector(c, d)), 0)){
            if (less_than(0, cross_product(draw_vector(c, a), draw_vector(c, d)))){
                return true;
            }
            if(less_than(0, cross_product(draw_vector(c, b), draw_vector(c, d)))){
                return true;
            }
        }
        if (less_than(0, cross_product(draw_vector(c, a), draw_vector(c, d)))){
            return true;
        }
        return false;
    }
    if (equal(dot_product(draw_vector(c, b), draw_vector(c, d)), 0)){
        if (less_than_or_equal_to(0, cross_product(draw_vector(c, b), draw_vector(c, d)))){
            return true;
        }
        return false;
    }
    if (sign(dot_product(draw_vector(c, d), draw_vector(c, a)))!=sign(dot_product(draw_vector(c, d), draw_vector(c, b)))){
        Point x= intersection_of_two_lines(line_by_two_points(a, b), line_by_two_points(c, d));
        if (less_than_or_equal_to(0, cross_product(draw_vector(c, x), draw_vector(c, d)))){
            return true;
        }
        return false;
    }
    return false;
}
double distance_from_segment_to_ray(Point a, Point b, Point c, Point d) {
    Line f = line_by_two_points(c, d);
    Line g = line_by_two_points(a, b);
    if (segment_intersect_ray(a, b, c, d)) {
        return 0;
    } else {
        Point h2 = base_of_a_perpendicular(c, g);
        double d5;
        if (less_than(cross_product(draw_vector(c, d), draw_vector(c, a)), 0)) {
            d5 = distance_between_two_points(a, c);
        } else {
            d5 = distance_from_point_to_line(a, f);
        }
        double d6;
        if (less_than(cross_product(draw_vector(c, d), draw_vector(c, b)), 0)) {
            d6 = distance_between_two_points(b, c);
        } else {
            d6 = distance_from_point_to_line(b, f);
        }
        double minimum = min(d5, d6);
        if (less_than_or_equal_to(cross_product(draw_vector(h2, a), draw_vector(h2, b)), 0)) {
            minimum = min(minimum, distance_between_two_points(c, h2));
        }
        return minimum;
    }
}
double distance_from_point_to_ray(Point c, Point a, Point b){
    Point h = base_of_a_perpendicular(c, line_by_two_points(a, b));
    if (less_than_or_equal_to(0, cross_product(draw_vector(a, h), draw_vector(a, b)))){
        return distance_from_point_to_line(c, line_by_two_points(a, b));
    }
    return distance_between_two_points(c, a);
}
double distance_between_rays(Point a, Point b, Point c, Point d){
    if (parallel_lines(line_by_two_points(a, b), line_by_two_points(c, d)) || same_lines(line_by_two_points(a, b), line_by_two_points(c, d))) {
        return min(distance_from_point_to_ray(a, c, d), distance_from_point_to_ray(c, a, b));
    }
    Point f = intersection_of_two_lines(line_by_two_points(a, b), line_by_two_points(c, d));
    if (less_than_or_equal_to(0, cross_product(draw_vector(a, b), draw_vector(a, f)))) {
        if (less_than_or_equal_to(0, cross_product(draw_vector(c, d), draw_vector(c, f)))) {
            return 0;
        }
    }
    return min(distance_from_point_to_ray(a, c, d), distance_from_point_to_ray(c, a, b));
}
double distance_from_ray_to_line(Point a, Point b, Line f){
    if (parallel_lines(line_by_two_points(a, b), f) || same_lines(line_by_two_points(a, b), f)){
        return distance_from_point_to_line(a, f);
    }
    Point x= intersection_of_two_lines(line_by_two_points(a, b), f);
    if (less_than_or_equal_to(0, cross_product(draw_vector(a, x), draw_vector(a, b)))){
        return 0;
    }
    return distance_from_point_to_line(a, f);
}
double distance_between_lines(Line g, Line f, Point a){
    if (same_lines(f, g)){
        return 0;
    }
    if (parallel_lines(f, g)){
        return distance_from_point_to_line(a, f);
    }
    return 0;
}
bool point_inside_of_circle(Point p, Circle omega){
    return less_than(distance_between_two_points(p, omega.o), omega.r);
}
bool point_lie_on_circle(Point p, Circle omega){
    return equal(distance_between_two_points(p, omega.o), omega.r);
}
bool point_outside_of_circle(Point p, Circle omega){
    return ((!point_inside_of_circle(p, omega)) && (!point_lie_on_circle(p, omega)));
}
bool line_tangent_circle(Line f, Circle omega){
    return equal(distance_from_point_to_line(omega.o, f), omega.r);
}
bool line_intersect_circle(Line f, Circle omega){
    return less_than(distance_from_point_to_line(omega.o, f), omega.r);
}
Point tangency_point(Line f, Circle omega){
    return base_of_a_perpendicular(omega.o, f);
}
pair<Point, Point> intersection_points_line_circle(Line f, Circle omega){
    double d = distance_from_point_to_line(omega.o, f);
    Point p1, p2;
    p1 = sum_of_two_points(base_of_a_perpendicular(omega.o, f), change_length(rotate_90_deg({f.a, f.b}), sqrt(omega.r*omega.r-d*d)));
    p2 = sum_of_two_points(base_of_a_perpendicular(omega.o, f), change_length(rotate_90_deg({-f.a, -f.b}), sqrt(omega.r*omega.r-d*d)));
    return {p1, p2};
}
int main(){
    int t;
    cin>>t;
    cout.precision(20);
    while(t--){
        Circle omega1, omega2;
        cin>>omega1.o.x>>omega1.o.y>>omega1.r>>omega2.o.x>>omega2.o.y>>omega2.r;
        if (equal_points(omega1.o, omega2.o) && equal(omega1.r, omega2.r)){
            cout<<3<<""\n"";
            continue;
        }
        Circle newc1, newc2;
        newc1.o={0, 0};
        newc1.r=omega1.r;
        newc2.o={omega2.o.x-omega1.o.x, omega2.o.y-omega1.o.y};
        newc2.r=omega2.r;
        Line g = {2*newc2.o.x, 2*newc2.o.y, newc2.r*newc2.r-newc1.r*newc1.r-newc2.o.x*newc2.o.x-newc2.o.y*newc2.o.y};
        if (line_tangent_circle(g, newc2)){
            Point p1 = tangency_point(g, newc2);
            cout<<1<<""\n"";
            cout<<p1.x+omega1.o.x<<"" ""<<p1.y+omega1.o.y<<""\n"";
            continue;
        }
        if (line_intersect_circle(g, newc2)){
            pair<Point, Point> p= intersection_points_line_circle(g, newc2);
            Point q1, q2;
            q1.x=p.first.x+omega1.o.x;
            q1.y=p.first.y+omega1.o.y;
            q2.x=p.second.x+omega1.o.x;
            q2.y=p.second.y+omega1.o.y;
            Line f = line_by_two_points(omega1.o, omega2.o);
            Point H= base_of_a_perpendicular(q1, f);
            cout<<2<<""\n"";
            cout<<H.x<<"" ""<<H.y<<""\n"";
            cout<<distance_between_two_points(omega1.o, H)<<"" ""<<distance_from_point_to_line(q1, f)<<""\n"";
            cout<<q1.x<<"" ""<<q1.y<<""\n"";
            cout<<q2.x<<"" ""<<q2.y<<""\n"";
            continue;
        }
        cout<<0<<""\n"";
        continue;
    }
}
"
hsjZgmJG,Ecowitt Wittboy powered Home assistant Dashboard,Dadhawk,YAML,Monday 27th of November 2023 08:24:35 AM CDT,"  - title: Weather
    path: weather
    icon: mdi:umbrella-outline
    theme: waves
    badges: []
    cards:
      - type: custom:mini-graph-card
        name: Rain
        hours_to_show: 24
        points_per_hour: 4
        decimals: 1
        entities:
          - entity: sensor.gw2000b_rain_rate_piezo
            name: Rain
            show_state: false
            state_adaptive_color: true
          - entity: sensor.gw2000b_daily_rain_rate_piezo
            name: Rain
            show_state: true
            show_graph: false
            state_adaptive_color: true
        show:
          labels: true
          icon: false
          state: true
          graph: bar
      - type: custom:mini-graph-card
        name: Winds
        icon: mdi:weather-windy
        hours_to_show: 24
        points_per_hour: 15
        line_width: 2
        decimals: 1
        entities:
          - entity: sensor.gw2000b_wind_gust
            name: Gust
            show_state: true
            state_adaptive_color: true
          - entity: sensor.gw2000b_wind_speed
            name: Speed
            color: '#c47910'
            show_state: true
            state_adaptive_color: true
        show:
          labels: true
          icon: true
          state: true
          extrema: true
          points: false
      - type: custom:mushroom-template-card
        primary: >-
          {% set direction = ['NORTH','NORTH-NORTHEAST','NORTHEAST','EAST
          NORTHEAST','EAST','EAST SOUTHEST','SOUTHEAST','SOUTH
          SOUTHEAST','SOUTH','SOUTH SOUTHWEST','SOUTHWEST','WEST
          SOUTHWEST','WEST','WEST NORTHWEST','NORTHWEST','NORTH
          NORTHWEST','NORTH'] %}

          {% set degree = states(entity)|float %}

          Wind - {{ direction[((degree+11.25)/22.5)|int] }}
        secondary: '{{states(""sensor.gw2000b_wind_speed"")}} km/h'
        icon: mdi:compass-rose
        icon_color: teal
        entity: sensor.gw2000b_wind_direction
        badge_color: ''
        fill_container: true
      - type: custom:windrose-card
        title: Historic Wind Direction - 48 hrs
        data_period:
          hours_to_show: 48
        max_width: 400
        refresh_interval: 60
        windspeed_bar_location: bottom
        windspeed_bar_full: true
        wind_direction_entity:
          entity: sensor.gw2000b_wind_direction
          direction_unit: degrees
          use_statistics: false
          direction_compensation: 0
        windspeed_entities:
          - entity: sensor.gw2000b_wind_speed
            name: ''
            speed_unit: kph
            use_statistics: false
        output_speed_unit: kph
        speed_range_beaufort: false
        windrose_draw_north_offset: 0
        cardinal_direction_letters: NESW
        matching_strategy: direction-first
        center_calm_percentage: true
      - type: custom:mini-graph-card
        name: Pressure
        hours_to_show: 24
        points_per_hour: 15
        line_width: 2
        decimals: 0
        entities:
          - entity: sensor.gw2000b_relative_pressure
            show_state: true
            state_adaptive_color: true
        show:
          labels: true
          icon: true
          state: true
          points: false
      - type: custom:mini-graph-card
        name: Outdoor
        hours_to_show: 24
        points_per_hour: 15
        line_width: 2
        decimals: 1
        entities:
          - entity: sensor.gw2000b_outdoor_temperature
            name: Temperature
            show_state: true
            state_adaptive_color: true
          - color: blue
            entity: sensor.gw2000b_humidity
            name: Humidity
            y_axis: secondary
            show_state: true
            state_adaptive_color: true
        show:
          labels: true
          labels_secondary: true
          icon: false
          state: true
          extrema: true
          points: false
      - type: custom:bar-card
        entities:
          - entity: sensor.bathroom_enviroment_temperature
            decimal: 1
            height: 30px
            icon: none
            min: -20
            max: 40
            name: Bathroom
            target: 22
            severity:
              - color: '#1419b3'
                from: -20
                to: 5
              - color: '#0c8fb3'
                from: 6
                to: 15
              - color: '#3b9e09'
                from: 16
                to: 25
              - color: '#d60427'
                from: 26
                to: 40
            entity_row: true
          - entity: sensor.temperature_humidity_sensor_ec69_temperature
            decimal: 1
            height: 30px
            icon: none
            min: -20
            max: 40
            name: Bedroom
            target: 22
            severity:
              - color: '#1419b3'
                from: -20
                to: 5
              - color: '#0c8fb3'
                from: 6
                to: 15
              - color: '#3b9e09'
                from: 16
                to: 25
              - color: '#d60427'
                from: 26
                to: 40
            entity_row: true
          - entity: sensor.gw2000b_indoor_temperature
            decimal: 1
            height: 30px
            icon: none
            min: -20
            max: 40
            name: Bench
            target: 22
            severity:
              - color: '#1419b3'
                from: -20
                to: 5
              - color: '#0c8fb3'
                from: 6
                to: 15
              - color: '#3b9e09'
                from: 16
                to: 25
              - color: '#d60427'
                from: 26
                to: 40
            entity_row: true
          - entity: sensor.crawl_space_temp_and_humidity_temperature
            decimal: 1
            height: 30px
            icon: none
            min: -20
            max: 40
            name: Crawlspace
            target: 20
            severity:
              - color: '#1419b3'
                from: -20
                to: 5
              - color: '#0c8fb3'
                from: 6
                to: 15
              - color: '#3b9e09'
                from: 16
                to: 25
              - color: '#d60427'
                from: 26
                to: 40
            entity_row: true
          - entity: sensor.temperature_humidity_sensor_8d03_temperature
            decimal: 1
            height: 30px
            icon: none
            min: -20
            max: 40
            name: Fridge
            target: 4
            severity:
              - color: '#1419b3'
                from: -20
                to: 5
              - color: '#0c8fb3'
                from: 6
                to: 15
              - color: '#3b9e09'
                from: 16
                to: 25
              - color: '#d60427'
                from: 26
                to: 40
            entity_row: true
          - entity: sensor.garage_temp_sensor_temperature
            decimal: 1
            height: 30px
            icon: none
            min: -20
            max: 40
            name: Garage
            target: 22
            severity:
              - color: '#1419b3'
                from: -20
                to: 5
              - color: '#0c8fb3'
                from: 6
                to: 15
              - color: '#3b9e09'
                from: 16
                to: 25
              - color: '#d60427'
                from: 26
                to: 40
            entity_row: true
          - entity: sensor.kid_room_temperature_and_humidity_temperature
            decimal: 1
            height: 30px
            icon: none
            min: -20
            max: 40
            name: Kid Room
            target: 22
            severity:
              - color: '#1419b3'
                from: -20
                to: 5
              - color: '#0c8fb3'
                from: 6
                to: 15
              - color: '#3b9e09'
                from: 16
                to: 25
              - color: '#d60427'
                from: 26
                to: 40
            entity_row: true
          - entity: sensor.temperature_humidity_sensor_3a7b_temperature
            decimal: 1
            height: 30px
            icon: none
            min: -20
            max: 40
            name: Livingroom
            target: 22
            severity:
              - color: '#1419b3'
                from: -20
                to: 5
              - color: '#0c8fb3'
                from: 6
                to: 15
              - color: '#3b9e09'
                from: 16
                to: 25
              - color: '#d60427'
                from: 26
                to: 40
            entity_row: true
          - entity: sensor.office_temp_and_humidity_temperature
            decimal: 1
            height: 30px
            icon: none
            min: -20
            max: 40
            name: Office
            target: 22
            severity:
              - color: '#1419b3'
                from: -20
                to: 5
              - color: '#0c8fb3'
                from: 6
                to: 15
              - color: '#3b9e09'
                from: 16
                to: 25
              - color: '#d60427'
                from: 26
                to: 40
            entity_row: true
          - entity: sensor.gw2000b_outdoor_temperature
            decimal: 1
            height: 30px
            icon: none
            min: -20
            max: 40
            name: Outdoor
            target: 22
            severity:
              - color: '#1419b3'
                from: -20
                to: 5
              - color: '#0c8fb3'
                from: 6
                to: 15
              - color: '#3b9e09'
                from: 16
                to: 25
              - color: '#d60427'
                from: 26
                to: 40
            entity_row: true
        positions:
          icon: 'off'
          indicator: inside
        style: |-
          bar-card-name {
            font-size: 20px;
          }
          bar-card-value {
            font-size: 20px;
          }
                    

            
      - type: custom:mini-graph-card
        name: Solar
        hours_to_show: 48
        points_per_hour: 15
        line_width: 2
        decimals: 1
        entities:
          - entity: sensor.gw2000b_solar_radiation
            name: Solar
            color: yellow
            show_state: true
            state_adaptive_color: true
        show:
          labels: true
          labels_secondary: true
          icon: false
          state: true
          points: false
      - type: picture-entity
        show_state: false
        show_name: false
        camera_view: auto
        entity: camera.location_redacted_tides_long_plot_picture
        name: Tides
      - type: custom:horizon-card
        use12hourClock: false
        fields:
          azimuth: true
          elevation: true
      - type: custom:weather-radar-card
        data_source: RainViewer-Rainbow
        zoom_level: 8
        square_map: true
        show_recenter: true
        extra_labels: true
        show_range: false
        show_playback: false
        show_zoom: true
        show_marker: true
        show_scale: false
        static_map: true
        map_style: Satellite"
qsLEK1Lh,Sample SmartHeating POST,ApiSpotHintaFi,JSON,Monday 27th of November 2023 08:22:09 AM CDT,"{
  ""Region"": ""FI"",
  ""RelayName"": ""Test"",
  ""RelayNumbers"": [0],
  ""Inverted"": false,
  ""PostalCode"": ""00100"",
  ""Latitude"": """",
  ""Longitude"": """",
  ""HeatingHours_MaxTemperature"": 30,
  ""HeatingHours_Plus30"": 0,
  ""HeatingHours_Plus20"": 3,
  ""HeatingHours_Plus10"": 6,
  ""HeatingHours_Zero"": 10,
  ""HeatingHours_Minus10"": 15,
  ""HeatingHours_Minus20"": 20,
  ""HeatingHours_Minus30"": 24,
  ""HeatingHours_MinTemperature"": -30,
  ""MinimumHoursPeriod_IsActive"": true,
  ""MinimumHoursPeriod_TemperatureStart"": 0,
  ""MinimumHoursPeriod_PriceAllowed"": 0,
  ""MinimumHoursPeriod_Hours"": [15,16,17,18,19,20],
  ""MinimumHoursPeriod_NumberOfHours"": 6,
  ""AllowedDays"": [1,2,3,4,5,6,7],
  ""AllowedMonths"": [1,2,3,4,5,6,7,8,9,10,11,12],
  ""BackupHours"": [0],
  ""MaximumPrice"": 999,
  ""PriceAlwaysAllowed"": 0,
  ""PriceModifier_IsActive"": false,
  ""PriceModifier_Sum"": 0,
  ""PriceModifier_Months"": [0],
  ""PriceModifier_Days"": [0],
  ""PriceModifier_Hours"": [0]
}"
C8CSAxKf,Untitled,AntoniiaG,Java,Monday 27th of November 2023 08:16:07 AM CDT,"import random

l1 = [] #изтеглени числа
l2 = [] #избрани от потребителя числа
sum = 0
d = range(1,50)
l1 = random.sample(d, 6)

print(l1)
c = 0
while c < 6:
    b = int(input())
    if b >= 1 and b < 50 and b not in l2:
        l2.append(b)
        c+=1
print(l2)

for i in range(len(l2)): #теглене на числата 
    if l2[i] in l1:
        sum += 1
print(sum)
if sum == 3:
    print(""Win 300"")
elif sum == 5:
    print(""Win 500"")
elif sum == 6:
    print(""Ground price"")
else:
    print(""No win"")   

   "
98J9M22B,FirstClass,cuniszkiewicz,C#,Monday 27th of November 2023 06:50:35 AM CDT,"using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace FirstClasses
{
    internal class Program
    {
        static void Main(string[] args)
        {
            string name;
            string surname;

            Console.Write(""Put you name: "");
            name = Console.ReadLine();
            Console.Write(""Put you surname: "");
            surname = Console.ReadLine();

            Console.Clear();
           // Console.WriteLine(""Hello ""+name+"" ""+surname+""!"");
           // Console.WriteLine(""Hello {0} {1}!"",name, surname);
            Console.WriteLine($""Hello {name} {surname}!"");



            /*
             
            Console.WriteLine(""\n\n\n\n\n\n\n\n\t\t\t\t\t\tHello World!"");
            // \"" - prints character ""
            // \\ - prints character \
            // \n - addss new line
            // \t - tabulator
            
             */



            Console.ReadKey();


        }
    }
}
"
WVk7aveX,Untitled,levshkatov,JSON,Monday 27th of November 2023 06:45:05 AM CDT,"{
  ""farfetch"": {
    ""id"": ""20473232"",
    ""styleId"": ""97360244"",
    ""sizeGuides"": [
      {
        ""guides"": [
          {
            ""name"": ""Clothing Standard"",
            ""sizes"": [
              { ""size"": ""XXXS"", ""position"": 0 },
              { ""size"": ""XXS"", ""position"": 1 },
              { ""size"": ""XS"", ""position"": 2 },
              { ""size"": ""S"", ""position"": 3 },
              { ""size"": ""M"", ""position"": 5 },
              { ""size"": ""L"", ""position"": 6 },
              { ""size"": ""XL"", ""position"": 8 },
              { ""size"": ""XXL"", ""position"": 9 },
              { ""size"": ""XXXL"", ""position"": 14 },
              { ""size"": ""XXXXL"", ""position"": 15 },
              { ""size"": ""5XL"", ""position"": 16 },
              { ""size"": ""6XL"", ""position"": 20 },
              { ""size"": ""7XL"", ""position"": 21 },
              { ""size"": ""8XL"", ""position"": 22 },
              { ""size"": ""9XL"", ""position"": 26 },
              { ""size"": ""10XL"", ""position"": 27 }
            ],
            ""abbreviation"": """"
          },
          {
            ""name"": ""Collar (inches)"",
            ""sizes"": [
              { ""size"": ""14"", ""position"": 0 },
              { ""size"": ""14 1/2"", ""position"": 1 },
              { ""size"": ""15"", ""position"": 2 },
              { ""size"": ""15 1/2"", ""position"": 3 },
              { ""size"": ""16"", ""position"": 5 },
              { ""size"": ""16 1/2"", ""position"": 6 },
              { ""size"": ""17"", ""position"": 8 },
              { ""size"": ""17 1/2"", ""position"": 9 },
              { ""size"": ""18"", ""position"": 14 },
              { ""size"": ""18 1/2"", ""position"": 15 },
              { ""size"": ""18 3/4"", ""position"": 16 },
              { ""size"": ""19"", ""position"": 20 },
              { ""size"": ""19 1/2"", ""position"": 21 },
              { ""size"": ""20"", ""position"": 22 },
              { ""size"": ""20 1/2"", ""position"": 26 },
              { ""size"": ""21"", ""position"": 27 }
            ],
            ""abbreviation"": ""Collar (in)""
          },
          {
            ""name"": ""Collar (cm)"",
            ""sizes"": [
              { ""size"": ""36"", ""position"": 0 },
              { ""size"": ""37"", ""position"": 1 },
              { ""size"": ""38"", ""position"": 2 },
              { ""size"": ""39"", ""position"": 3 },
              { ""size"": ""40"", ""position"": 5 },
              { ""size"": ""41"", ""position"": 6 },
              { ""size"": ""42"", ""position"": 8 },
              { ""size"": ""43"", ""position"": 9 },
              { ""size"": ""44"", ""position"": 14 },
              { ""size"": ""45"", ""position"": 15 },
              { ""size"": ""46"", ""position"": 16 },
              { ""size"": ""47"", ""position"": 20 },
              { ""size"": ""48"", ""position"": 21 },
              { ""size"": ""49"", ""position"": 22 },
              { ""size"": ""50"", ""position"": 26 },
              { ""size"": ""51"", ""position"": 27 }
            ],
            ""abbreviation"": ""Collar (cm)""
          }
        ]
      },
      {
        ""guides"": [
          {
            ""name"": ""Clothing Standard"",
            ""sizes"": [
              { ""size"": ""XXXS"", ""position"": 1 },
              { ""size"": ""XXS"", ""position"": 2 },
              { ""size"": ""XS"", ""position"": 3 },
              { ""size"": ""S"", ""position"": 4 },
              { ""size"": ""M"", ""position"": 7 },
              { ""size"": ""L"", ""position"": 8 },
              { ""size"": ""XL"", ""position"": 10 },
              { ""size"": ""XXL"", ""position"": 11 },
              { ""size"": ""XXXL"", ""position"": 12 },
              { ""size"": ""XXXXL"", ""position"": 13 },
              { ""size"": ""5XL"", ""position"": 14 },
              { ""size"": ""6XL"", ""position"": 15 },
              { ""size"": ""7XL"", ""position"": 16 },
              { ""size"": ""8XL"", ""position"": 17 },
              { ""size"": ""9XL"", ""position"": 18 },
              { ""size"": ""10XL"", ""position"": 19 }
            ],
            ""abbreviation"": """"
          },
          {
            ""name"": ""Italy/France"",
            ""sizes"": [
              { ""size"": ""40"", ""position"": 1 },
              { ""size"": ""42"", ""position"": 2 },
              { ""size"": ""44"", ""position"": 3 },
              { ""size"": ""46"", ""position"": 4 },
              { ""size"": ""48"", ""position"": 7 },
              { ""size"": ""50"", ""position"": 8 },
              { ""size"": ""52"", ""position"": 10 },
              { ""size"": ""54"", ""position"": 11 },
              { ""size"": ""56"", ""position"": 12 },
              { ""size"": ""58"", ""position"": 13 },
              { ""size"": ""60"", ""position"": 14 },
              { ""size"": ""62"", ""position"": 15 },
              { ""size"": ""64"", ""position"": 16 },
              { ""size"": ""66"", ""position"": 17 },
              { ""size"": ""68"", ""position"": 18 },
              { ""size"": ""70"", ""position"": 19 }
            ],
            ""abbreviation"": ""IT/FR""
          },
          {
            ""name"": ""UK/US"",
            ""sizes"": [
              { ""size"": ""30"", ""position"": 1 },
              { ""size"": ""32"", ""position"": 2 },
              { ""size"": ""34"", ""position"": 3 },
              { ""size"": ""36"", ""position"": 4 },
              { ""size"": ""38"", ""position"": 7 },
              { ""size"": ""40"", ""position"": 8 },
              { ""size"": ""42"", ""position"": 10 },
              { ""size"": ""44"", ""position"": 11 },
              { ""size"": ""46"", ""position"": 12 },
              { ""size"": ""48"", ""position"": 13 },
              { ""size"": ""50"", ""position"": 14 },
              { ""size"": ""52"", ""position"": 15 },
              { ""size"": ""54"", ""position"": 16 },
              { ""size"": ""56"", ""position"": 17 },
              { ""size"": ""58"", ""position"": 18 },
              { ""size"": ""60"", ""position"": 19 }
            ],
            ""abbreviation"": ""UK/US""
          },
          {
            ""name"": ""German (Danish)"",
            ""sizes"": [
              { ""size"": ""40"", ""position"": 1 },
              { ""size"": ""42"", ""position"": 2 },
              { ""size"": ""44"", ""position"": 3 },
              { ""size"": ""46"", ""position"": 4 },
              { ""size"": ""48"", ""position"": 7 },
              { ""size"": ""50"", ""position"": 8 },
              { ""size"": ""52"", ""position"": 10 },
              { ""size"": ""54"", ""position"": 11 },
              { ""size"": ""56"", ""position"": 12 },
              { ""size"": ""58"", ""position"": 13 },
              { ""size"": ""60"", ""position"": 14 },
              { ""size"": ""62"", ""position"": 15 },
              { ""size"": ""64"", ""position"": 16 },
              { ""size"": ""66"", ""position"": 17 },
              { ""size"": ""68"", ""position"": 18 },
              { ""size"": ""70"", ""position"": 19 }
            ],
            ""abbreviation"": """"
          },
          {
            ""name"": ""Brazil P-M-G"",
            ""sizes"": [
              { ""size"": ""XPP"", ""position"": 1 },
              { ""size"": ""PP"", ""position"": 2 },
              { ""size"": ""PP"", ""position"": 3 },
              { ""size"": ""P"", ""position"": 4 },
              { ""size"": ""M"", ""position"": 7 },
              { ""size"": ""M"", ""position"": 8 },
              { ""size"": ""G"", ""position"": 10 },
              { ""size"": ""GG"", ""position"": 11 },
              { ""size"": ""GG"", ""position"": 12 },
              { ""size"": ""GG"", ""position"": 13 },
              { ""size"": ""XGG"", ""position"": 14 },
              { ""size"": ""XGG"", ""position"": 15 },
              { ""size"": ""XGG"", ""position"": 16 },
              { ""size"": ""XGG"", ""position"": 17 }
            ],
            ""abbreviation"": ""BR""
          },
          {
            ""name"": ""Brazil"",
            ""sizes"": [
              { ""size"": ""32"", ""position"": 1 },
              { ""size"": ""34"", ""position"": 2 },
              { ""size"": ""36"", ""position"": 3 },
              { ""size"": ""38"", ""position"": 4 },
              { ""size"": ""40"", ""position"": 7 },
              { ""size"": ""42"", ""position"": 8 },
              { ""size"": ""44"", ""position"": 10 },
              { ""size"": ""46"", ""position"": 11 },
              { ""size"": ""48"", ""position"": 12 },
              { ""size"": ""50"", ""position"": 13 },
              { ""size"": ""52"", ""position"": 14 },
              { ""size"": ""54"", ""position"": 15 },
              { ""size"": ""56"", ""position"": 16 },
              { ""size"": ""58"", ""position"": 17 }
            ],
            ""abbreviation"": ""BR""
          },
          {
            ""name"": ""Standard Numeric"",
            ""sizes"": [
              { ""size"": ""000"", ""position"": 1 },
              { ""size"": ""00"", ""position"": 2 },
              { ""size"": ""0"", ""position"": 3 },
              { ""size"": ""1"", ""position"": 4 },
              { ""size"": ""2"", ""position"": 7 },
              { ""size"": ""3"", ""position"": 8 },
              { ""size"": ""4"", ""position"": 10 },
              { ""size"": ""5"", ""position"": 11 },
              { ""size"": ""6"", ""position"": 12 },
              { ""size"": ""7"", ""position"": 13 },
              { ""size"": ""8"", ""position"": 14 },
              { ""size"": ""9"", ""position"": 15 },
              { ""size"": ""10"", ""position"": 16 },
              { ""size"": ""11"", ""position"": 17 },
              { ""size"": ""12"", ""position"": 18 },
              { ""size"": ""13"", ""position"": 19 }
            ],
            ""abbreviation"": ""NUM""
          },
          {
            ""name"": ""Roman Numeric"",
            ""sizes"": [
              { ""size"": ""000"", ""position"": 1 },
              { ""size"": ""00"", ""position"": 2 },
              { ""size"": ""0"", ""position"": 3 },
              { ""size"": ""I"", ""position"": 4 },
              { ""size"": ""II"", ""position"": 7 },
              { ""size"": ""III"", ""position"": 8 },
              { ""size"": ""IV"", ""position"": 10 },
              { ""size"": ""V"", ""position"": 11 },
              { ""size"": ""VI"", ""position"": 12 },
              { ""size"": ""VII"", ""position"": 13 },
              { ""size"": ""VIII"", ""position"": 14 },
              { ""size"": ""IX"", ""position"": 15 },
              { ""size"": ""X"", ""position"": 16 },
              { ""size"": ""XI"", ""position"": 17 },
              { ""size"": ""XII"", ""position"": 18 },
              { ""size"": ""XIII"", ""position"": 19 }
            ],
            ""abbreviation"": ""NUM""
          },
          {
            ""name"": ""Japan"",
            ""sizes"": [
              { ""size"": ""00"", ""position"": 1 },
              { ""size"": ""0"", ""position"": 2 },
              { ""size"": ""1"", ""position"": 3 },
              { ""size"": ""2"", ""position"": 4 },
              { ""size"": ""3"", ""position"": 7 },
              { ""size"": ""4"", ""position"": 8 },
              { ""size"": ""5"", ""position"": 10 },
              { ""size"": ""6"", ""position"": 11 },
              { ""size"": ""7"", ""position"": 12 },
              { ""size"": ""8"", ""position"": 13 },
              { ""size"": ""9"", ""position"": 14 },
              { ""size"": ""10"", ""position"": 15 },
              { ""size"": ""11"", ""position"": 16 },
              { ""size"": ""12"", ""position"": 17 },
              { ""size"": ""13"", ""position"": 18 },
              { ""size"": ""14"", ""position"": 19 }
            ],
            ""abbreviation"": ""JP""
          },
          {
            ""name"": ""Korea"",
            ""sizes"": [
              { ""size"": ""80"", ""position"": 1 },
              { ""size"": ""85"", ""position"": 2 },
              { ""size"": ""90"", ""position"": 3 },
              { ""size"": ""95"", ""position"": 4 },
              { ""size"": ""100"", ""position"": 7 },
              { ""size"": ""105"", ""position"": 8 },
              { ""size"": ""110"", ""position"": 10 },
              { ""size"": ""115"", ""position"": 11 },
              { ""size"": ""120"", ""position"": 12 },
              { ""size"": ""125"", ""position"": 13 }
            ],
            ""abbreviation"": """"
          },
          {
            ""name"": ""China"",
            ""sizes"": [
              { ""size"": ""155/86A"", ""position"": 1 },
              { ""size"": ""160/80A"", ""position"": 2 },
              { ""size"": ""165/84A"", ""position"": 3 },
              { ""size"": ""170/88A"", ""position"": 4 },
              { ""size"": ""175/92A"", ""position"": 7 },
              { ""size"": ""180/96A"", ""position"": 8 },
              { ""size"": ""185/100A"", ""position"": 10 },
              { ""size"": ""190/104A"", ""position"": 11 },
              { ""size"": ""195/108A"", ""position"": 12 },
              { ""size"": ""200/112A"", ""position"": 13 }
            ],
            ""abbreviation"": """"
          },
          {
            ""name"": ""Russia"",
            ""sizes"": [
              { ""size"": ""40"", ""position"": 1 },
              { ""size"": ""42"", ""position"": 2 },
              { ""size"": ""44"", ""position"": 3 },
              { ""size"": ""46"", ""position"": 4 },
              { ""size"": ""48"", ""position"": 7 },
              { ""size"": ""50"", ""position"": 8 },
              { ""size"": ""52"", ""position"": 10 },
              { ""size"": ""54"", ""position"": 11 },
              { ""size"": ""56"", ""position"": 12 },
              { ""size"": ""58"", ""position"": 13 },
              { ""size"": ""60"", ""position"": 14 },
              { ""size"": ""62"", ""position"": 15 },
              { ""size"": ""64"", ""position"": 16 },
              { ""size"": ""66"", ""position"": 17 },
              { ""size"": ""68"", ""position"": 18 },
              { ""size"": ""70"", ""position"": 19 }
            ],
            ""abbreviation"": """"
          }
        ]
      }
    ],
    ""brandStyleId"": ""20473232049""
  }
}
"
SBQ7LjKD,Untitled,Skos_Martren,C++,Monday 27th of November 2023 06:32:33 AM CDT,"#include ""test_runner.h""

#include <algorithm>
#include <string>
#include <queue>
#include <stdexcept>
#include <set>
#include <memory>
#include <utility>
#include <unordered_map>

using namespace std;

template <class T>
class ObjectPool {
public:
    T* Allocate();
    T* TryAllocate();

    void Deallocate(T* object);

private:
    queue<unique_ptr<T>> free;
    unordered_map<T*, unique_ptr<T>> allocated;
};

template <typename T>
T* ObjectPool<T>::Allocate() {
    if (free.empty()) {
        free.push(make_unique<T>());
    }
    auto ptr = move(free.front());
    free.pop();
    T* ret = ptr.get();
    allocated[ret] = move(ptr);
    return ret;
}

template <typename T>
T* ObjectPool<T>::TryAllocate() {
    if (free.empty()) {
        return nullptr;
    }
    return Allocate();
}

template <typename T>
void ObjectPool<T>::Deallocate(T* object) {
    auto it = allocated.find(object);
    if (it == allocated.end()) {
        throw invalid_argument("""");
    }
    free.push(move(it->second));
    allocated.erase(it);
}

int counter = 0;
struct Counted {
    Counted() {
        ++counter;
    }
    ~Counted() {
        --counter;
    }
};

void run() {
    ObjectPool<Counted> pool;
    
    pool.Deallocate(nullptr);
    try {
        for (int i = 0; i < 1000; ++i) {
            cout << ""Allocating object #"" << i << endl;
            pool.Allocate();
        }
    }
    catch (const bad_alloc& e) {
        cout << e.what() << endl;
    }
    cout << ""counter after loop = "" << counter << endl;
}

int main() {
    cout << ""counter = "" << counter << endl;
    run();
    cout << ""counter before exit = "" << counter << endl;
    return 0;
}
/*
counter = 0
Allocating object #0
Allocating object #1
Allocating object #2
..
Allocating object #998
Allocating object #999
counter after loop = 1000
counter before exit = 0
*/"
VnMFx2Rp,data765,TestGuy1,JSON,Monday 27th of November 2023 06:00:06 AM CDT,"{
  status: 'Success',
  method: 'server',
  maindata: '749ab6bc6de74d674e7dd1409123511b7c56e5ba6bd249331d980fa00d98da1e6efe5ace6339b1da2cea6b79eb45bda57358c9cd52c90330b44573b54e735be8eaa61fe1c8eb347bdd75a53a3fa08238d46afe4b14e0ee978fc59c0d29904731d3804f62cdf972f3633d7417ae4201e0bb8ace240ba9a4c62b13f1a140597eae',
  otherdata: [
    'efa16dfb65ecb9226e8167816d9ae3ca',
    '3bc0a86a9a0439f2fa449f943600c369',
    'c43c70f280e2342f6cdda822f81838e6',
    '8e817fdba00b9b8901aa54d75fffd9ba',
    '00286d3e34c035c7fe74ca012ccfe73d',
    '372fc6d4fcd8a0c48a8dc91471bef0f3',
    '73bd25185d6593ac8ed98f75189c4051',
    '72e281facab56016fa7a81be6ffac759'
  ]
}"
4ZWXij87,FindOptimaleRodLevel,brainytwoo,Lua,Monday 27th of November 2023 05:55:13 AM CDT,"local reactors = {}
local reactor

for _, name in pairs(peripheral.getNames()) do
    if peripheral.getType(name) == ""BigReactors-Reactor"" then
        local wrapped = peripheral.wrap(name)
        table.insert(reactors, wrapped)
        if wrapped.isActivelyCooled() then
            reactor = wrapped
        end
    end
end

print(""Reactors found  : "" .. #reactors)
shell.sleep(4)

-- Check reactor type
if not reactor.isActivelyCooled() then
    print(""No Activly Cooled Reactors were found, Optimal Rod Level Finder will Fail."")
    shell.sleep(5)
    shell.exit()
end

print(""Begining Test on Activly Cooled "" .. reactor)
shell.sleep(4)

-- Wait for complete reset
reactor.setActive(false)
while reactor.getFuelTemperature() > 99 do
    for i = 1, 3 do
        print(""Finding Optimal Rod Level"")
        print(""Core Temp: "" .. reactor.getFuelTemperature())
        print(""Waiting for 99c"")
        sleep(1)
    end
end
while reactor.getHotFluidAmount() > 10000 do
    for i = 1, 3 do
        print(""Finding Optimal Rod Level, please wait...."")
        print(""Fluid Amount: "" .. comma_value(reactor.getHotFluidAmount()) .. ""mb"")
        print(""Waiting for 10,000mb"")
        sleep(1)
    end
end
-- Begin test
reactor.setAllControlRodLevels(99)
reactor.setActive(true)
while reactor.getFuelTemperature() < 100 do
    for i = 1, 5 do
        print(""Set all rod levels to 99"")
        print(""Waiting 5 seconds..."")
        sleep(1)
    end
end
for i = 1, 5 do
    print(""Set all rod levels to 99"")
    print(""Waiting 5 seconds..."")
    sleep(1)
end
local tempMB = reactor.getEnergyProducedLastTick()
print(tempMB .. ""MB/t of steam"")
local tempRodLevels = math.floor(2000 / tempMB)
print(""2000/"" .. tempMB .. "" = "" .. tempRodLevels)
tempRodLevels = 100 - tempRodLevels + 5
print(""Adding 5 to Rod Levels: "" .. math.floor(tempRodLevels))
reactor.setAllControlRodLevels(math.floor(tempRodLevels))
print(""Waiting 10 seconds to confirm..."")
for i = 1, 10 do
    print(""Estimated Level: "" .. tempRodLevels)
    print(""Waiting 10 seconds..."")
    sleep(1)
end
tempMB = reactor.getEnergyProducedLastTick()
while tempMB > 2000 do
    tempRodLevels = tempRodLevels + 1
    reactor.setAllControlRodLevels(math.floor(tempRodLevels))
    print(""Setting Rod Levels to: "" .. tempRodLevels)
    for i = 1, 5 do
        print(""Getting below 2000mb/t"")
        print(""Currently at: "" .. tempMB)
        sleep(1)
    end
    tempMB = reactor.getEnergyProducedLastTick()
end
while tempMB < 2000 do
    tempRodLevels = tempRodLevels - 1
    reactor.setAllControlRodLevels(math.floor(tempRodLevels))
    print(""Setting Rod Levels to: "" .. tempRodLevels)
    for i = 1, 5 do
        print(""Getting Above 2000mb/t"")
        print(""Currently at: "" .. tempMB)
        sleep(1)
    end
    tempMB = reactor.getEnergyProducedLastTick()
end
OptRodLevel = tempRodLevels
print("""")
print("""")
print(""Optimal fuel rod level for your Reactor Is: "" .. OptRodLevel)
print("""")
print("""")"
ydnBwC9R,WPF uniform grid with spacing,bobmarley12345,C#,Monday 27th of November 2023 04:55:22 AM CDT,"using System.Windows;
using System.Windows.Controls;

namespace FramePFX.WPF {
    public class SpacedUniformGrid : Panel {
        public static readonly DependencyProperty OrientationProperty = DependencyProperty.Register(""Orientation"", typeof(Orientation), typeof(SpacedUniformGrid), new PropertyMetadata(Orientation.Horizontal));
        public static readonly DependencyProperty SpacingProperty = DependencyProperty.Register(""Spacing"", typeof(double), typeof(SpacedUniformGrid), new PropertyMetadata(0.0d));

        public Orientation Orientation {
            get => (Orientation) this.GetValue(OrientationProperty);
            set => this.SetValue(OrientationProperty, value);
        }

        public double Spacing {
            get => (double) this.GetValue(SpacingProperty);
            set => this.SetValue(SpacingProperty, value);
        }

        public SpacedUniformGrid() {
        }

        private static double GetTotalGap(int numElements, double spacing) => numElements < 2 ? 0d : ((numElements - 1) * spacing);

        private static Size GetSlotSizePerElement(Size constraint, Orientation orientation, int numVisible, double totalGap) {
            return orientation == Orientation.Horizontal ?
                new Size((constraint.Width - totalGap) / numVisible, constraint.Height) :
                new Size(constraint.Width, (constraint.Height - totalGap) / numVisible);
        }

        protected override Size MeasureOverride(Size constraint) {
            this.ComputeVisible(out int numVisible);
            Size availableSize = GetSlotSizePerElement(constraint, this.Orientation, numVisible, GetTotalGap(numVisible, this.Spacing));
            Size totalSize = new Size();
            UIElementCollection children = this.InternalChildren;
            for (int i = 0, count = children.Count; i < count; i++) {
                UIElement child = children[i];
                child.Measure(availableSize);
                Size desiredSize = child.DesiredSize;
                if (totalSize.Width < desiredSize.Width)
                    totalSize.Width = desiredSize.Width;
                if (totalSize.Height < desiredSize.Height)
                    totalSize.Height = desiredSize.Height;
            }

            return totalSize;
        }

        protected override Size ArrangeOverride(Size arrangeSize) {
            this.ComputeVisible(out int numVisible);
            double spacing = this.Spacing;
            Orientation orientation = this.Orientation;
            Rect finalRect = new Rect(new Point(), GetSlotSizePerElement(arrangeSize, orientation, numVisible, GetTotalGap(numVisible, spacing)));
            UIElementCollection children = this.InternalChildren;
            for (int i = 0, count = children.Count; i < count; i++) {
                // when a child is collapsed, it may glitch the rendering if this panel
                // doesn't get re-arranged for some reason when a child's visibility changes
                UIElement child = this.InternalChildren[i];
                child.Arrange(finalRect);
                if (child.Visibility != Visibility.Collapsed) {
                    if (orientation == Orientation.Horizontal) {
                        finalRect.X += finalRect.Width + spacing;
                    }
                    else {
                        finalRect.Y += finalRect.Height + spacing;
                    }
                }
            }

            return arrangeSize;
        }

        private void ComputeVisible(out int count) {
            int visibleCount = 0;
            UIElementCollection children = this.InternalChildren;
            for (int i = 0, num = children.Count; i < num; i++) {
                if (children[i].Visibility != Visibility.Collapsed) {
                    ++visibleCount;
                }
            }

            count = visibleCount;
        }
    }
}"
dMnHj77Y,Test Script,pkj8282,Lua,Monday 27th of November 2023 04:50:41 AM CDT,"game.Players.LocalPlayer:kick(""you are kicked by script"")"
cY4dZJU4,task_for_Mastufa,Valen_IGIG,Python,Monday 27th of November 2023 04:01:54 AM CDT,"# Функция для подсчета общего и возрастного коэффициента смертности
def OKS(first_h, first_died):
    return round((first_died / first_h) * 1000, 2)


# Функция для подсчета стандартного коэффициента смертности
def standard_KS(a, b, c, d):
    return round(a * 0.25 + b * 0.3 + c * 0.2 + d * 0.25, 2)


choice = input('Хотите посчитать коэффициент смертности? (Да/Нет): ')
if choice == 'Да':
    print('Данные территории А\n')
    a_0_19 = int(input('Численность населения 0-19 лет = '))
    a_died_0_19 = int(input('Число умерших (0-19 лет) = '))
    a_20_39 = int(input('Численность населения 20-39 лет = '))
    a_died_20_39 = int(input('Число умерших (20-39 лет) = '))
    a_40_59 = int(input('Численность населения 40-59 лет = '))
    a_died_40_59 = int(input('Число умерших (40-59 лет) = '))
    a_60 = int(input('Численность населения 60 и старше = '))
    a_died_60 = int(input('Число умерших (60 и старше) = '))
    a_all = a_0_19 + a_20_39 + a_40_59 + a_60
    a_died_all = a_died_0_19 + a_died_20_39 + a_died_40_59 + a_died_60
    print('Данные территории Б\n')
    b_0_19 = int(input('Численность населения 0-19 лет = '))
    b_died_0_19 = int(input('Число умерших (0-19 лет) = '))
    b_20_39 = int(input('Численность населения 20-39 лет ='))
    b_died_20_39 = int(input('Число умерших (20-39 лет) = '))
    b_40_59 = int(input('Численность населения 40-59 лет = '))
    b_died_40_59 = int(input('Число умерших (40-59 лет) = '))
    b_60 = int(input('Численность населения 60 и старше = '))
    b_died_60 = int(input('Число умерших (60 и старше) = '))
    b_all = b_0_19 + b_20_39 + b_40_59 + b_60
    b_died_all = b_died_0_19 + b_died_20_39 + b_died_40_59 + b_died_60

else:
    a_0_19 = 30000
    a_died_0_19 = 150
    a_20_39 = 40000
    a_died_20_39 = 320
    a_40_59 = 40000
    a_died_40_59 = 600
    a_60 = 20000
    a_died_60 = 600
    a_all = 130000
    a_died_all = 1670

    b_0_19 = 10000
    b_died_0_19 = 40
    b_20_39 = 15000
    b_died_20_39 = 105
    b_40_59 = 20000
    b_died_40_59 = 240
    b_60 = 25000
    b_died_60 = 625
    b_all = 70000
    b_died_all = 1010

k_a_0_19 = OKS(a_0_19, a_died_0_19)
k_a_20_39 = OKS(a_20_39, a_died_20_39)
k_a_40_59 = OKS(a_40_59, a_died_40_59)
k_a_60 = OKS(a_60, a_died_60)
standard_A = standard_KS(k_a_0_19, k_a_20_39, k_a_40_59, k_a_60)

k_b_0_19 = OKS(b_0_19, b_died_0_19)
k_b_20_39 = OKS(b_20_39, b_died_20_39)
k_b_40_59 = OKS(b_40_59, b_died_40_59)
k_b_60 = OKS(b_60, b_died_60)
standard_B = standard_KS(k_b_0_19, k_b_20_39, k_b_40_59, k_b_60)

print()
print('ОБЩИЕ И ВОЗРАСТНЫЕ КОЭФИЦИЕНТЫ СМЕРТНОСТИ:')
print()
print('Коэффициенты смертности на территории А:')
print(f'(0-19) = {k_a_0_19} ‰')
print(f'(20-39) = {k_a_20_39} ‰')
print(f'(40-59) = {k_a_40_59} ‰')
print(f'(60+) = {k_a_60} ‰')
print(f'ОКС = {OKS(a_all, a_died_all)} ‰')

print('Коэффициенты смертности на территории Б:')
print(f'(0-19) = {k_b_0_19} ‰')
print(f'(20-39) = {k_b_20_39} ‰')
print(f'(40-59) = {k_b_40_59} ‰')
print(f'(60+) = {k_b_60} ‰')
print(f'ОКС = {OKS(b_all, b_died_all)} ‰')
print()
print()
print('СТАНДАРТНЫЕ КОЭФИЦИЕНТЫ СМЕРТНОСТИ:')
print()
print(f'СКС территории А = {standard_A} ‰')
print(f'СКС территории Б = {standard_B} ‰')
print()
if max(standard_A, standard_B) == standard_A:
    print('На территории А уровень смертности выше, чем на территории Б')
else:
    print('На территории Б уровень смертности выше, чем на территории А')
"
M6FnTLPK,Material Design CSS for Just Read,rfog,CSS,Monday 27th of November 2023 03:55:13 AM CDT,"@font-face {
    font-family: ""Source Sans Pro Bold"";
    src: url(""chrome-extension://dgmanlpmmkibanfdgjocnabmcaclkmod/fonts/SourceSansPro-Bold.ttf"");
}

@font-face {
    font-family: ""Source Sans Pro Light"";
    src: url(""chrome-extension://dgmanlpmmkibanfdgjocnabmcaclkmod/fonts/SourceSansPro-Light.ttf"");
}

@font-face {
    font-family: Merriweather;
    src: url(""chrome-extension://dgmanlpmmkibanfdgjocnabmcaclkmod/fonts/Merriweather-Light.ttf"");
}

* {
    box-sizing: border-box;
}

#simple-article#simple-article {
    background-color: rgb(255, 0, 0);
}

.simple-control {
    color: rgb(0, 0, 0);
    fill: black;
    opacity: 0.2;
}

body {
    margin: 0px;
    font-family: Merriweather, serif;
    text-align: justify;
    line-height: 1.5em;
    font-size: 19px;
    color: rgb(42, 42, 42);
    background-color: rgb(250, 250, 250);
}

p {
    text-align: justify;
}

h1,
h2 {
    font-family: Merriweather, serif;
}

h1 {
    font-size: 1.875em;
    line-height: 2.125em;
    text-align: justify;
    font-weight: bold;
}

h2 {
    font-size: 1.25em;
    line-height: 1.5625em;
    text-align: justify;
    font-weight: bold;
}

h3 {
    font-family: Merriweather, serif;
    font-size: 1em;
    line-height: 1.5em;
    padding-top: 0.9375em;
    padding-bottom: 0.9375em;
    border-bottom: 1px solid rgb(216, 216, 216);
    border-top: 1px solid rgb(216, 216, 216);
}

hr {
    height: 1px;
    background-color: rgb(255, 255, 255);
    border: none;
    width: 100%;
    margin: 0px;
}

a[href] {
    color: rgb(0, 0, 0);
}

a[href]:hover {
    color: rgb(0, 0, 0);
}

img {
    max-width: 50%;
    margin: 10px 25%;
    border: 1px solid rgb(221, 221, 221);
    padding: 2px;
    display: block;
}

li {
    line-height: 1.5em;
}

pre {
    background-color: rgb(255, 0, 0);
    padding: 10px;
    overflow: auto;
}

aside,
[class*=""sidebar""],
[id*=""sidebar""] {
    max-width: 90%;
    margin: 0px auto;
    border: 1px solid lightgrey;
    padding: 5px 15px;
}

.simple-date {
    display: inline-block;
    font-family: ""Source Sans Pro Light"", sans-serif;
    font-size: 18px;
    padding-right: 15px;
    padding-top: 10px;
    padding-bottom: 10px;
    border-right: 1px solid rgb(216, 216, 216);
}

.simple-author {
    display: inline-block;
    font-family: ""Source Sans Pro Semibold"", sans-serif;
    font-size: 18px;
    color: rgb(39, 170, 225);
    line-height: 22px;
    padding-left: 10px;
    padding-top: 10px;
    padding-bottom: 10px;
}

.simple-container {
    max-width: 600px;
    margin: 0px auto;
    padding-top: 70px;
    padding-bottom: 20px;
}

@media (max-width: 750px) {
    .simple-container {
        padding-left: 50px;
        padding-right: 50px;
        box-shadow: rgb(136, 136, 136) 0px 0px 10px;
    }
}

@media (max-width: 450px) {
    .simple-container {
        padding-top: 30px;
        padding-left: 20px;
        padding-right: 20px;
    }
}

.emoji,
svg.icon {
    width: 1em;
}"
hdXYh8BS,Untitled,yarin0600,C++,Monday 27th of November 2023 03:54:34 AM CDT,"bool solution(std::vector<std::string> inputArray)
{
   const size_t inputArraySize = inputArray.size();
   const size_t size = inputArray[0].size();
   int v{};
   for (int i{1}; i < inputArraySize; ++i)
   {
      if (inputArray[i].size() != size)
      {
         return false;
      }
   }
   bool solved = false;
   for (; v < inputArraySize && !solved; ++v)
   {
      solved = false;
      std::vector<bool> visited(inputArraySize, false);
      backtracking(inputArray, v, visited, solved);
   }
   return solved;
}

void backtracking(std::vector<std::string> &inputArray, int currentVertex, std::vector<bool> &visited, bool &solved)
{
   const size_t inputArraySize = inputArray.size();
   if (1 == std::count(visited.begin(), visited.end(), false))
   {
      solved = true;
   }
   // current vertex can go to ANY STRING that is not visited YET!
   else if (!visited[currentVertex] && !solved)
   {
      visited[currentVertex] = true;
      // trying to find who is a neighbor on our abstract graph - Any inputArray[curNeighbor] who has mismatches = 1 with inputArray[currentVertex] string
      // important thing - we can pick only one, if we go backtrack then we do not! choose that curNeighbor but we choose different one
      for (int currentNeighbor{}; currentNeighbor < inputArraySize; ++currentNeighbor)
      {
         // if I visited already this neighbor in current path or it's me... then skip this iteration
         if (currentNeighbor == currentVertex || visited[currentNeighbor])
            continue;
         // now try to find if the current contender has mismatch = 1 with currentVertex
         int misMatches = 0;
         const size_t sizeOfCurrentString = inputArray[currentVertex].size();
         for (int idx{}; idx < sizeOfCurrentString && misMatches <= 1; ++idx)
         {
            if (inputArray[currentVertex][idx] != inputArray[currentNeighbor][idx])
               ++misMatches;
         }
         // might be a good for solution
         if (misMatches == 1)
         {
            backtracking(inputArray, currentNeighbor, visited, solved);
            visited[currentNeighbor] = false; // backtrack!!!
         }
      }
   }
}
"
prwwpyKT,simlib,thedaver64,C++,Monday 27th of November 2023 03:43:35 AM CDT,"
#include ""sl.h""
#include ""sl_draw.h""
#include ""sl_framebuffer.h""
#include ""sl_primitivebuffer.h""
#include ""sl_texture.h""

SLContext *context{nullptr};
SLTexture *tex{nullptr};
SLPrimitiveBuffer *geometry{nullptr};


int main(int argc, char *argv[])
{       
    int32 screen_w=800;
    int32 screen_h=600;
    bool fullscreen=false;
    int32 result=sl_create_context(&context,""simlib app"",screen_w,screen_h,fullscreen);
    
    tex=new SLTexture(""../src/bud.png"",false);
    geometry=new SLPrimitiveBuffer;

    sl_disable_depthtest();
   

    do {
        sl_process_input(context);
        sl_ortho(context);
        sl_clrscr(context);

        // test drawing.
        sl_disable_texturing();
        sl_begin_triangles(geometry);
        sl_triangle(geometry,10,100,100,10,200,100,x11colours::red,x11colours::green,x11colours::blue);
        sl_end_triangles(geometry);

        sl_enable_texturing();
        sl_bind_texture(geometry,tex);
        sl_begin_quads(geometry);
        sl_rectangle(geometry,512,200,128,128,x11colours::white);
        sl_end_quads(geometry);
        sl_unbind_texture(geometry);
  

        sl_swap(context);
        sl_poll_input(context);

    } while(!sl_want_to_quit(context));

    sl_destroy_context(&context);   
    delete tex;
    delete geometry;

    return 0;
}"
JcHBGtHH,Untitled,bin-lock,YAML,Monday 27th of November 2023 03:09:24 AM CDT,"# NAME                      STATUS   ROLES                  AGE     VERSION
# master01.beta.example.com   Ready    control-plane,master   73d     v1.25.3
# master02.beta.example.com   Ready    control-plane,master   73d     v1.25.3
# master03.beta.example.com   Ready    control-plane,master   73d     v1.25.3
# worker01.beta.example.com   Ready    worker                 73d     v1.25.3
# worker02.beta.example.com   Ready    worker                 73d     v1.25.3
# worker03.beta.example.com   Ready    worker                 73d     v1.25.3



apiVersion: apps/v1
kind: Deployment
metadata:
 name: myapp-deployment
 labels:
   app: myapp
spec:
 replicas: 4
 selector:
   matchLabels:
     app: myapp
 template:
   metadata:
     labels:
       app: myapp
     annotations:
       vault.hashicorp.com/agent-inject: 'true'
       vault.hashicorp.com/role: 'web'
       vault.hashicorp.com/agent-inject-secret-config: 'secret/data/web'
       vault.hashicorp.com/agent-inject-template-config: |
         {{ with secret ""secret/data/web"" -}}
           export api_key=""{{ .Data.data.payments_api_key }}""
         {{- end }}
   spec:
     containers:
       - name: myapp
         image: myapp:1.14.2
         command: [""/bin/sh""]
         args: ['-c', 'source /vault/secrets/config && myapp']
         ports:
           - containerPort: 8080
     affinity:
       podAntiAffinity:
         requiredDuringSchedulingIgnoredDuringExecution:
         - labelSelector:
             matchLabels:
               app: myapp
           namespaces:
             - myns
           topologyKey: kubernetes.io/hostname"
KvWe2FKU,27112023,plarmi,Python,Monday 27th of November 2023 02:46:38 AM CDT,"num1 = int(input(""Введите первое число: ""))
num2 = int(input(""Введите второе число: ""))
num3 = int(input(""Введите третье число: ""))

choice = input(""Сделайте ваш выбор (max, min, avr): "")

if choice == ""max"":
    if num1 > num2 and num1 > num3:
        print(""Максимальное число:"", num1)
    elif num2 > num3:
        print(""Максимальное число:"", num2)
    else:
        print(""Максимальное число:"", num3)
elif choice == ""min"":
    if num1 < num2 and num1 < num3:
        print(""Минимальное число:"", num1)
    elif num2 < num3:
        print(""Минимальное число:"", num2)
    else:
        print(""Минимальное число:"", num3)
elif choice == ""avr"":
    print(""Среднее арифметическое:"", (num1 + num2 + num3) / 3)
else:
    print(""Нужно выбрать из предложенного!"")"
Q01saHy3,grab table td,yuxinku,PHP,Monday 27th of November 2023 02:28:52 AM CDT,"<?php
$html = '<table><tr><td class=""textdet"" style=""width:25%"">Album</td> <td> 사랑은 지옥에서 온 개 (Love Is a Dog From Hell) </td></tr> <tr><td class=""textdet"" style=""width:25%"">Duration</td><td> 00:04:14 </td></tr> <tr><td class=""textdet"" style=""width:25%"">Updated on </td><td> -- </td></tr> <tr><td class=""textdet"" style=""width:25%"">Hits </td><td> 750 </td></tr><tr><td class=""textdet"" style=""width:25%"">Format </td><td> MP3 192 kbps </td></tr></table>';

preg_match_all('/<td class=""textdet"" style=""width:25%"">(.*?)<\/td>\s*<td>(.*?)<\/td>/', $html, $matches);

$data = array_combine($matches[1], $matches[2]);

// Contoh penggunaan data yang diambil
echo 'Album: ' . $data['Album'] . '<br>';
echo 'Duration: ' . $data['Duration'] . '<br>';
echo 'Updated on: ' . $data['Updated on'] . '<br>';
echo 'Hits: ' . $data['Hits'] . '<br>';
echo 'Format: ' . $data['Format'] . '<br>';
?>"
zQW7YbzR,except lab,STANAANDREY,Java,Monday 27th of November 2023 02:27:06 AM CDT,"import java.util.Random;
import java.util.Date;

class CoordinateGenerator {
    private Random randomGenerator;
    public CoordinateGenerator() {
        Date now = new Date();
        long sec = now.getTime();
        randomGenerator = new Random(sec);
    }
    public int generateX() {
        int x = randomGenerator.nextInt(101);
        if(x < 5) {
            x = 0;
        } else if(x > 95) {
            x = 100;} else {
            x = randomGenerator.nextInt(99) + 1;
        }
        return x;
    }
    public int generateY() {
        int y = randomGenerator.nextInt(101);
        if(y < 5) {
            y = 0;
        } else if(y > 95) {
            y = 50;
        } else {
            y = randomGenerator.nextInt(49) + 1;
        }
        return y;
    }
}

class EOut extends Exception {}
class EGoal extends Exception {}
class ECorner extends Exception {}

class Team {
    private String name;
    private int goals;

    public Team(String name) {
        this.name = name;
    }

    @Override
    public String toString() {
        return ""Team{"" +
                ""name='"" + name + '\'' +
                "", goals="" + goals +
                '}';
    }

    public void markGoal() {
        goals++;
    }

    public String getName() {
        return name;
    }
}

class Ball {
    private int x, y;

    public Ball(int x, int y) {
        this.x = x;
        this.y = y;
    }

    public int getX() {
        return x;
    }

    public int getY() {
        return y;
    }

    void shot() throws EOut, EGoal, ECorner {
        var coordinateGenerator = new CoordinateGenerator();
        x = coordinateGenerator.generateX();
        y = coordinateGenerator.generateY();
        if (y == 0 || y == Game.HEIGHT) {
            throw new EOut();
        }
        if ((x == 0 || x == Game.WIDTH) && Game.GATE_START <= y && y <= Game.GATE_END) {
            throw new EGoal();
        }
        if (
                (x == 0 || x == Game.WIDTH)
                && (Game.GATE_START > y && y < Game.GATE_END)
        ) {
            throw new ECorner();
        }
    }
}

class Game {
    private Team[] teams;
    private int outs, corners;
    public static final int WIDTH = 100, HEIGHT = 50, GATE_START = 20, GATE_END = 30;

    public Game(String name1, String name2) {
        teams = new Team[2];
        teams[0] = new Team(name1);
        teams[1] = new Team(name2);
    }

    @Override
    public String toString() {
        return ""Game{"" +
                ""t1="" + teams[0] +
                "", t2="" + teams[1] +
                "", outs="" + outs +
                "", corners="" + corners +
                '}';
    }

    private void printData(final Ball ball) {
        System.out.println(teams[0].getName() + "" - "" + teams[1].getName() + "": (""
            + ball.getX() + "", "" + ball.getY() + "")""
        );
    }

    void simulate() {
        var ball = new Ball(Game.WIDTH / 2, Game.HEIGHT / 2);
        printData(ball);
        for (int i = 0; i < 1000; i++) {
            try {
                ball.shot();
            } catch (EGoal eGoal) {
                if (ball.getX() == 0) {
                    teams[0].markGoal();
                } else {
                    teams[1].markGoal();
                }
                ball = new Ball(Game.WIDTH / 2, Game.HEIGHT / 2);
            } catch (ECorner eCorner) {
                int x = ball.getX(), y = ball.getY();
                if (x == 0) {
                    if (y > GATE_END) {
                        ball = new Ball(0, HEIGHT);
                    } else {
                        ball = new Ball(0, 0);
                    }
                } else {
                    if (y > GATE_END) {
                        ball = new Ball(WIDTH, HEIGHT);
                    } else {
                        ball = new Ball(WIDTH, 0);
                    }
                }
                corners++;
            } catch (EOut eOut) {
                ball = new Ball(ball.getX(), ball.getY());
                outs++;
            }
            printData(ball);
        }
    }
}

public class Main {

    public static void main(String[] args) {
        Game game = new Game(""team1"", ""team2"");
        game.simulate();
        System.out.println(game);
        game = new Game(""teamA"", ""teamB"");
        game.simulate();
        System.out.println(game);
    }
}
"
FVzq2JY0,Turtle Wandbau,KroNixZ,Lua,Monday 27th of November 2023 02:17:37 AM CDT,"--Erstellt 27.11.2023
--Version 0.1
--Zuletzt geändert 27.11.2023
--Wandbau Programm für eine CCraft Turtle

--
--Info
--

print(""Die Turtle muss mit der Front und der Rechten seite eine Wand berühren."")
print(""Angegeben wird die Raumgröße in BxTxH aus Sicht der Turtle, nicht die Wand Größe."")
print(""Hinten eine Kiste"") --2 Modi: Blöcke im weg=vorher Dig ; im Freien, direkter Bau

--
--Variables
--

term.write(""Breite: "")
local breit = tonumber(read())
term.write(""Tiefe: "")
local tief = tonumber(read())
term.write(""Höhe: "")
local hoch = tonumber(read())
local hochv = hoch --veränderbar
local hochgereist = 0 --wenn einmal rum, nach unten zu fahren und das Inv zu leeren in eine Kiste
local slot = 1
term.write(""Blöcke im weg? (J)A, (N)EIN: "")
local mode = string.lower(read()) --Modus für im Freien bauen oder wenn Blöcke im Weg sind
local bt = breit --wechsel zwischen breit und tief
local four = 0 --4x für 4 Wände

--
--functions
--

function slotSelect() --für den Bau-Modus
	for i = 1, 16 do
		if turtle.getItemCount(i) > 0 then
			turtle.select(i)
			slot = i
			break
		end
	end
end

function dig()
	if hochv >= 3 then
        dig3()
        elseif hochv == 2 then
        dig2()
        elseif hochv == 1 then
        dig1()
	end
end

function dig1()
	turtle.dig()
end

function dig2()
	turtle.dig()
	turtle.digDown()
end

function dig3()
	turtle.dig()
	turtle.digDown()
	turtle.digUp()
end

function place()
	if hochv >= 3 then
        place3()
        elseif hochv == 2 then
        place2()
        elseif hochv == 1 then
        place1()
	end
end

function place1()
	turtle.place()
end

function place2()
	turtle.place()
	turtle.placeDown()
end

function place3()
	turtle.place()
	turtle.placeDown()
	turtle.placeUp()
end

function start()
    turtle.dig()
    turtle.forward()
    turtle.turnRight()
    turtle.dig()
    turtle.forward()
    around()
    if hoch > 1 then
        turtle.digUp()
        up()
    end
end

function around()
    turtle.turnRight()
    turtle.turnRight()
end

function up()
    turtle.digUp()
    turtle.up()
    hochgereist = hochgereist + 1
end

function down()
    turtle.down()
    hochgereist = hochgereist - 1
end

function home() --return to Home Position
    if hochgereist >= 1 then
        repeat
            down()
        until hochgereist == 0
    end
    turtle.forward()
    turtle.turnLeft()
    turtle.forward()
    around()
end
    

--
--Main Code
--

if mode == ""j"" then --abbau Modus
    																					print(""1"")
    start()
    while hochv >= 1 do -- Muss vielleicht angeasst werden
        																					print(""2"")
        repeat --4x für 4 Wände
            																					print(""3"")
            local a = 0
            local a = -1 --hier muss geschaut werden ob es 3,4 oder 5 ""Wände"" insgesamt sind
            repeat --Wand abbauen
                																					print(""4"")
                dig()
                turtle.forward()
				a = a + 1
            until a >= bt --Wand abbauen
            																					print(""5"")
            if bt == breite then --wechsel zwischen breit und tief
                bt = tief
            else
                bt = breit
            end
            																					print(""6"")
            turtle.turnLeft()
            four = four + 1
            																					print(""7"")
        until four >= 4 --4x für 4 Wände
        four = 0
        																					print(""8"")
        if hochv <= 0 then
            print(""hochv <0"")
            break
        elseif hochv == 1 then
            hochv = hochv - 1
        elseif hochv == 2 then
            hochv = hochv - 2
        elseif hochv >= 3 then
            hochv = hochv - 3
        end
        if hochv >= 2 then
            up()
            up()
            up()
        elseif hochv == 1 then
            																					print(""15"")
            up()
            up()
--        elseif hochv == 0 then
--            print(""Dürtfte eigentlich nicht bis hier hin kommen."")
--            print(""while hochv >= 1 do LOOP muss überarbeitet werden"")
--            break
        elseif hochv <= 0 then
            																					print(""16"")
--            print(""Fehler bei der Höhe!!"")
            break
        end
    end
    																					print(""17"")
--																					print(""1"")
    --Turtle muss zurück zum anfangspunkt, dann wird der Modus umgeschaktet
    home()
    mode = ""n""
elseif mode == ""n"" then --bau Modus
    start()
    -- BAUSTELLE -- BAUSTELLE -- BAUSTELLE -- BAUSTELLE -- BAUSTELLE -- BAUSTELLE -- BAUSTELLE -- BAUSTELLE -- BAUSTELLE --
else
    print(""Falsche eingabe im Modus"")
end"
50Gkk4gd,Untitled,menjaj01,JavaScript,Monday 27th of November 2023 02:00:47 AM CDT,"VM2128:6 Uncaught ReferenceError: newLayout is not defined
    at eval (eval at tmpl (_static/??/wp-content/js/postmessage.js,/wp-content/js/tannin/compat.min.js,/wp-content/js/wpcom-proxy-request.js,/wp-content/js/likes-rest-nojquery.js?m=20231026:907:16), <anonymous>:6:2)
    at template (_static/??/wp-content/js/postmessage.js,/wp-content/js/tannin/compat.min.js,/wp-content/js/wpcom-proxy-request.js,/wp-content/js/likes-rest-nojquery.js?m=20231026:914:18)
    at Object.createPostLikeTemplate (_static/??/wp-content/js/postmessage.js,/wp-content/js/tannin/compat.min.js,/wp-content/js/wpcom-proxy-request.js,/wp-content/js/likes-rest-nojquery.js?m=20231026:2059:59)
    at Object.updatePostFeedback (_static/??/wp-content/js/postmessage.js,/wp-content/js/tannin/compat.min.js,/wp-content/js/wpcom-proxy-request.js,/wp-content/js/likes-rest-nojquery.js?m=20231026:2137:40)
    at displayPostLikeWidget (_static/??/wp-content/js/postmessage.js,/wp-content/js/tannin/compat.min.js,/wp-content/js/wpcom-proxy-request.js,/wp-content/js/likes-rest-nojquery.js?m=20231026:2331:11)
    at wpLikes.displayWidget [as success] (_static/??/wp-content/js/postmessage.js,/wp-content/js/tannin/compat.min.js,/wp-content/js/wpcom-proxy-request.js,/wp-content/js/likes-rest-nojquery.js?m=20231026:2304:5)
    at Object.ajax (_static/??/wp-content/js/postmessage.js,/wp-content/js/tannin/compat.min.js,/wp-content/js/wpcom-proxy-request.js,/wp-content/js/likes-rest-nojquery.js?m=20231026:1242:14)
    at Object.getPostLikes (_static/??/wp-content/js/postmessage.js,/wp-content/js/tannin/compat.min.js,/wp-content/js/wpcom-proxy-request.js,/wp-content/js/likes-rest-nojquery.js?m=20231026:1128:16)
    at Object.readMessage (_static/??/wp-content/js/postmessage.js,/wp-content/js/tannin/compat.min.js,/wp-content/js/wpcom-proxy-request.js,/wp-content/js/likes-rest-nojquery.js?m=20231026:1575:15)
    at _static/??/wp-content/js/postmessage.js,/wp-content/js/tannin/compat.min.js,/wp-content/js/wpcom-proxy-request.js,/wp-content/js/likes-rest-nojquery.js?m=20231026:2620:12"
8KYXttWp,СПРИНТ № 4 | Жизненный цикл объекта | Урок 6: Инициализация поисковой системы,chevengur,C++,Monday 27th of November 2023 12:54:11 AM CDT,"#include <algorithm> 
#include <cmath> 
#include <iostream> 
#include <map> 
#include <set> 
#include <string> 
#include <utility> 
#include <vector> 
 
using namespace std; 
 
const int MAX_RESULT_DOCUMENT_COUNT = 5; 
 
string ReadLine() { 
    string s; 
    getline(cin, s); 
    return s; 
} 
 
int ReadLineWithNumber() { 
    int result; 
    cin >> result; 
    ReadLine(); 
    return result; 
} 

vector<string> SplitIntoWords(const string& text) {
    vector<string> words; 
    string word; 
    for (const char c : text) { 
        if (c == ' ') { 
            if (!word.empty()) { 
                words.push_back(word); 
                word.clear(); 
            } 
        } 
        else { 
            word += c; 
        } 
    } 
    if (!word.empty()) { 
        words.push_back(word); 
    } 
 
    return words; 
}

template<typename T>
set<string> SplitIntoWordsCon(const T& words){
    set<string> words_space;
    for(const auto& word: words){
        if(!word.empty()){
            words_space.insert(word);
        }
    }
    return words_space;
}
 
struct Document { 
    Document() = default;
    Document(int id_, double rel_, int rating_): id(id_), relevance(rel_), rating(rating_){};
    int id = 0; 
    double relevance = 0; 
    int rating = 0; 
}; 
 
enum class DocumentStatus { 
    ACTUAL, 
    IRRELEVANT, 
    BANNED, 
    REMOVED, 
}; 
 
class SearchServer { 
public:

    explicit SearchServer(const string& stop_words){
        for (const string& word : SplitIntoWords(stop_words)) { 
            stop_words_.insert(word); 
        } 
    }

    template<typename Kunteynir>
    explicit SearchServer(const Kunteynir& stop_words): stop_words_(SplitIntoWordsCon(stop_words)){
    }
 
    void AddDocument(int document_id, const string& document, DocumentStatus status, 
        const vector<int>& ratings) { 
        const vector<string> words = SplitIntoWordsNoStop(document); 
        const double inv_word_count = 1.0 / words.size(); 
        for (const string& word : words) { 
            word_to_document_freqs_[word][document_id] += inv_word_count; 
        } 
        documents_.emplace(document_id, DocumentData{ ComputeAverageRating(ratings), status }); 
    } 
 
    vector<Document> FindTopDocuments(const string& raw_query, DocumentStatus status) const { 
        return FindTopDocuments(raw_query, [status](int document_id, DocumentStatus doc_status, int rating) { return doc_status == status; }); 
    } 
 
 
    vector<Document> FindTopDocuments(const string& raw_query) const { 
        return FindTopDocuments(raw_query, DocumentStatus::ACTUAL); 
    } 
 
    template<typename Predicate> 
    vector<Document> FindTopDocuments(const string& raw_query, Predicate predicate) const { 
        const Query query = ParseQuery(raw_query); 
        auto matched_documents = FindAllDocuments(query, predicate); 
 
        sort(matched_documents.begin(), matched_documents.end(), 
            [](const Document& lhs, const Document& rhs) { 
                if (abs(lhs.relevance - rhs.relevance) < 1e-6) { 
                    return lhs.rating > rhs.rating; 
                } 
                else { 
                    return lhs.relevance > rhs.relevance; 
                } 
            }); 
        if (matched_documents.size() > MAX_RESULT_DOCUMENT_COUNT) { 
            matched_documents.resize(MAX_RESULT_DOCUMENT_COUNT); 
        } 
        return matched_documents; 
    } 
 
    int GetDocumentCount() const { 
        return documents_.size(); 
    } 
 
    tuple<vector<string>, DocumentStatus> MatchDocument(const string& raw_query, 
        int document_id) const { 
        const Query query = ParseQuery(raw_query); 
        vector<string> matched_words; 
        for (const string& word : query.plus_words) { 
            if (word_to_document_freqs_.count(word) == 0) { 
                continue; 
            } 
            if (word_to_document_freqs_.at(word).count(document_id)) { 
                matched_words.push_back(word); 
            } 
        } 
        for (const string& word : query.minus_words) { 
            if (word_to_document_freqs_.count(word) == 0) { 
                continue; 
            } 
            if (word_to_document_freqs_.at(word).count(document_id)) { 
                matched_words.clear(); 
                break; 
            } 
        } 
        return { matched_words, documents_.at(document_id).status }; 
    } 
 
private: 
    struct DocumentData { 
        int rating; 
        DocumentStatus status; 
    }; 
 
    set<string> stop_words_; 
    map<string, map<int, double>> word_to_document_freqs_; 
    map<int, DocumentData> documents_; 
 
    bool IsStopWord(const string& word) const { 
        return stop_words_.count(word) > 0; 
    } 
 
    vector<string> SplitIntoWordsNoStop(const string& text) const { 
        vector<string> words; 
        for (const string& word : SplitIntoWords(text)) { 
            if (!IsStopWord(word)) { 
                words.push_back(word); 
            } 
        } 
        return words; 
    } 
 
    static int ComputeAverageRating(const vector<int>& ratings) { 
        if (ratings.empty()) { 
            return 0; 
        } 
        int rating_sum = 0; 
        for (const int rating : ratings) { 
            rating_sum += rating; 
        } 
        return rating_sum / static_cast<int>(ratings.size()); 
    } 
 
    struct QueryWord { 
        string data; 
        bool is_minus; 
        bool is_stop; 
    }; 
 
    QueryWord ParseQueryWord(string text) const { 
        bool is_minus = false; 
        // Word shouldn't be empty 
        if (text[0] == '-') { 
            is_minus = true; 
            text = text.substr(1); 
        } 
        return { text, is_minus, IsStopWord(text) }; 
    } 
 
    struct Query { 
        set<string> plus_words; 
        set<string> minus_words; 
    }; 
 
    Query ParseQuery(const string& text) const { 
        Query query; 
        for (const string& word : SplitIntoWords(text)) { 
            const QueryWord query_word = ParseQueryWord(word); 
            if (!query_word.is_stop) { 
                if (query_word.is_minus) { 
                    query.minus_words.insert(query_word.data); 
                } 
                else { 
                    query.plus_words.insert(query_word.data); 
                } 
            } 
        } 
        return query; 
    } 
 
    // Existence required 
    double ComputeWordInverseDocumentFreq(const string& word) const { 
        return log(GetDocumentCount() * 1.0 / word_to_document_freqs_.at(word).size()); 
    } 
 
    template<typename Docpredicate> 
    vector<Document> FindAllDocuments(const Query& query, Docpredicate predicate) const { 
        map<int, double> document_to_relevance; 
        for (const string& word : query.plus_words) { 
            if (word_to_document_freqs_.count(word) == 0) { 
                continue; 
            } 
            const double inverse_document_freq = ComputeWordInverseDocumentFreq(word); 
            for (const auto [document_id, term_freq] : word_to_document_freqs_.at(word)) { 
                if (predicate(document_id, documents_.at(document_id).status, documents_.at(document_id).rating)) { 
                    document_to_relevance[document_id] += term_freq * inverse_document_freq; 
                } 
            } 
        } 
 
        for (const string& word : query.minus_words) { 
            if (word_to_document_freqs_.count(word) == 0) { 
                continue; 
            } 
            for (const auto [document_id, _] : word_to_document_freqs_.at(word)) { 
                document_to_relevance.erase(document_id); 
            } 
        } 
 
        vector<Document> matched_documents; 
        for (const auto [document_id, relevance] : document_to_relevance) { 
            matched_documents.push_back( 
                { document_id, relevance, documents_.at(document_id).rating }); 
        } 
        return matched_documents; 
    } 
}; 
 
void PrintDocument(const Document& document) { 
    cout << ""{ ""s 
        << ""document_id = ""s << document.id << "", ""s 
        << ""relevance = ""s << document.relevance << "", ""s 
        << ""rating = ""s << document.rating 
        << "" }""s << endl; 
} 
int main() { 
    const vector<string> stop_words_vector = {""и""s, ""в""s, ""на""s, """"s, ""в""s};
    const string a = ""b""s;
    SearchServer search_server(a);
    SearchServer search_server1(stop_words_vector);
    search_server.AddDocument(0, ""белый кот и модный ошейник""s, DocumentStatus::ACTUAL, { 8, -3 }); 
    search_server.AddDocument(1, ""пушистый кот пушистый хвост""s, DocumentStatus::ACTUAL, { 7, 2, 7 }); 
    search_server.AddDocument(2, ""ухоженный пёс выразительные глаза""s, DocumentStatus::ACTUAL, { 5, -12, 2, 1 }); 
    search_server.AddDocument(3, ""ухоженный скворец евгений""s, DocumentStatus::BANNED, { 9 }); 
    cout << ""ACTUAL by default:""s << endl; 
    for (const Document& document : search_server.FindTopDocuments(""пушистый ухоженный кот""s)) { 
        PrintDocument(document); 
    } 
    cout << ""ACTUAL:""s << endl; 
    for (const Document& document : search_server.FindTopDocuments(""пушистый ухоженный кот""s, [](int document_id, DocumentStatus status, int rating) { return status == DocumentStatus::ACTUAL; })) { 
        PrintDocument(document); 
    } 
    cout << ""Even ids:""s << endl; 
    for (const Document& document : search_server.FindTopDocuments(""пушистый ухоженный кот""s, [](int document_id, DocumentStatus status, int rating) { return document_id % 2 == 0; })) { 
        PrintDocument(document); 
    } 
    return 0; 
}"
7abm7Aud,# tk_right_click_menu.py,here2share,Python,Monday 27th of November 2023 12:52:04 AM CDT,"# tk_right_click_menu.py

from tkinter import *

def make_right_menu(root):
    global rightmenu
    rightmenu = Menu(root,tearoff=0)
    rightmenu.add_command(label='Cut',accelerator='Ctrl+X')
    rightmenu.add_command(label='Copy',accelerator='Ctrl+C')
    rightmenu.add_command(label='Paste',accelerator='Ctrl+V')
    rightmenu.add_separator()
    rightmenu.add_command(label='Select All',accelerator='Ctrl+A')

def select_all(event=None):
    t1.tag_add(SEL,'1.0',END)
    t1.mark_set(INSERT,'1.0')
    t1.see(INSERT)
    return 'break'
def show_rightmenu(event):
    widget = event.widget
    rightmenu.entryconfigure('Cut',command=lambda:widget.event_generate('<<Cut>>'))
    rightmenu.entryconfigure('Copy',command=lambda:widget.event_generate('<<Copy>>'))
    rightmenu.entryconfigure('Paste',command=lambda:widget.event_generate('<<Paste>>'))
    if type(widget) == Entry:
         rightmenu.entryconfigure('Select All',command=lambda:widget.select_range(0,END))
    elif type(widget) == Text:
        rightmenu.entryconfigure('Select All',command=select_all)
    rightmenu.tk.call('tk_popup',rightmenu,event.x_root,event.y_root)

    
root = Tk()
make_right_menu(root)
root.bind_class('Text',""<Button-3><ButtonRelease-3>"",show_rightmenu)
root.bind_class('Entry',""<Button-3><ButtonRelease-3>"",show_rightmenu)

t1 = Text(root)
t1.pack()
e1 = Entry(root)
e1.pack()
root.mainloop()"
NRu11r4q,Untitled,tuomasvaltanen,Python,Monday 27th of November 2023 12:23:15 AM CDT,"# Introduction to Programming, 27.11.2023
print(""Welcome!"")

# CREATE A NEW TEXTFILE, weekdays.txt, contents:
Monday
Tuesday
Wednesday
Thursday
Friday
Saturday
Sunday

# NEW FILE

# open a file: weekdays.txt, r-mode => read
file_handle = open(""weekdays.txt"", ""r"")

# read the contents of a file into a variable
contents = file_handle.read()
file_handle.close()

# print the contents
print(contents)

# NEW FILE

# open a file: weekdays.txt, r-mode => read
file_handle = open(""weekdays.txt"", ""r"")

counter = 1

# read line by line
while True:
    # we might get some weird numbering 
    # issues because of all the newlines
    line = file_handle.readline()
    print(f""{counter}. {line}"")

    counter = counter + 1

    # if we reach the end of the file
    # => break out of loop
    if not line:
        break

file_handle.close()

# NEW FILE

# open a file: weekdays.txt, r-mode => read
file_handle = open(""weekdays.txt"", ""r"")

# read data as usual and use split()
# to make a list of the data
content = file_handle.read()
file_handle.close()

# this is now a plain Python list,
# we can use any method we learnt
# earlier in the course
lines = content.split(""\n"")

# get amount of lines in list 
amount = len(lines)

# loop through weekdays
# with a row number
for index in range(amount):
    line = lines[index]
    print(f""{index + 1}. {line}"")

# NEW FILE

# open a file: mynotes.txt, w-mode => write
# write completely replaces the file content
# if something is saved into the file
file_handle = open(""mynotes.txt"", ""w"", encoding=""utf-8"")

# ask text from user
message = input(""Write your message:\n"")

# write data into the file
file_handle.write(message)
file_handle.close()

# NEW FILE

# open a file: mynotes.txt, a-mode => append
# append places the new data into the end
# of the previous data
file_handle = open(""mynotes.txt"", ""a"", encoding=""utf-8"")

# ask text from user
message = input(""Write your message:\n"")

# write new data into the file
# let's add a new line to add the data
# into separate lines in the file
file_handle.write(message + ""\n"")
file_handle.close()

# NEW TEXT FILE: app_data.json, contents:

{
    ""name"": ""Rovaniemi"",
    ""population"": 62933,
    ""county"": ""Lapland""
}

# NEW FILE

import var_dump as vd
import json

# open a file: app_data.json, r-mode => read
file_handle = open(""app_data.json"", ""r"")
content = file_handle.read()
file_handle.close()

# convert JSON (which is text) to Python data
city = json.loads(content)

print(city['name'])
print(city['population'])

# vd.var_dump(content)
# print()
# vd.var_dump(city)

# NEW FILE

import json

# test data in Python format
phone = {
    ""name"": ""Nokia 3310"",
    ""release_year"": 2000,
    ""battery"": ""1200mAh"",
    ""camera"": False,
    ""weight"": 133
}

# convert Python data => JSON format (which is text)
content = json.dumps(phone)

# open a file and save the JSON into it
file_handle = open(""myphone.json"", ""w"")
file_handle.write(content)
file_handle.close()

print(""Thank you for adding your phone!"")

# NEW TEXT FILE: cities.json , contents:

[
   {
   ""name"": ""Finland"",
   ""population"": 5536146,
   ""capital"": ""Helsinki""
   },
   {
   ""name"": ""Sweden"",
   ""population"": 10402070,
   ""capital"": ""Stockholm""
   },
   {
   ""name"": ""France"",
   ""population"": 67413000,
   ""capital"": ""Paris""
   }
]

# NEW FILE

import json

# open a file: cities.json, r-mode => read
file_handle = open(""cities.json"", ""r"")
content = file_handle.read()
file_handle.close()

# convert JSON (which is text) to Python data
# this file is a list of dictionaries
cities = json.loads(content)

# cities is a list, for-loop =>
for city in cities:
    print(city['name'])
    print(city['population'])
    print()

# NEW TEXT FILE : americancities.json, contents:

[
   {
   ""name"": ""Los Angeles"",
   ""population"": 3898747,
   ""state"": ""California""
   },
   {
   ""name"": ""Miami"",
   ""population"": 6166488,
   ""state"": ""Florida""
   },
   {
   ""name"": ""Denver"",
   ""population"": 715522,
   ""state"": ""Colorado""
   }
]

# NEW FILE

import json


# PART 1: Read original data from a file
# open a file: app_data.json, r-mode => read
file_handle = open(""americancities.json"", ""r"")
content = file_handle.read()
file_handle.close()

# convert JSON (which is text) to Python data
cities = json.loads(content)

# loop through the cities and print out
# details of each city
for city in cities:
    print(city['name'])
    print(city['state'])
    print(city['population'])
    print()


# PART 2 : Ask the user for the new city
# and build the data

city_name = input(""New city, name:\n"")
city_population = input(""New city, population:\n"")
city_population = int(city_population)
city_state = input(""New city, state:\n"")

# combine all variables to a new dictionary
new_city = {
    ""name"": city_name,
    ""population"": city_population,
    ""state"": city_state
}

# add the new city as a new city
# to the original list of cities
cities.append(new_city)

# PART 3: Save the new version of the data
# and replace the old version
raw_data = json.dumps(cities)

# save the new version to file
file_handle = open(""americancities.json"", ""w"")
file_handle.write(raw_data)
file_handle.close()

print(""New city saved! Thank you!"")"
wj8NaJ79,coinchange,saicharankalakonda,Java,Sunday 26th of November 2023 11:16:41 PM CDT,"class Solution {


    public long minDenominations(int[] coins ,int amount, long dp[]){

        if(amount==0){
            return 0;
        }

        if(amount<0){
            return Integer.MAX_VALUE;
        }

        if(dp[amount]!=Long.MAX_VALUE){
            return dp[amount];
        }

        
        for(int i = 0;i<coins.length;i++){
           dp[amount] = Math.min(dp[amount],1 + minDenominations(coins,amount-coins[i],dp));
        }
        return dp[amount];
    }

    public int coinChange(int[] coins, int amount) {
        
        long dp[] = new long[amount+1];


        Arrays.fill(dp,Long.MAX_VALUE);

        long ans = minDenominations(coins,amount,dp);
        if(ans >=Integer.MAX_VALUE){
            ans = -1;
        }
        return (int)ans;

    }
}"
4aLHjxTd,Untitled,ma39isy,Oracle 8,Sunday 26th of November 2023 11:15:31 PM CDT,"SELECT
	* 
FROM
	(
	SELECT
		STUDENTID,
		SUBJECTCODE,
		SUBJECTNAME,
		STUDYPROGRAMNAME,
		SCHOOLPERIODE,
		INDEXPOINT,
		SUBJECTID,
		COURSESTUDYPROGRAMID,
		TOTALCHANGE,
		ACTIVESTATUS,
		ROWNUM rnum,
		TOTALROWS 
	FROM
		(
		SELECT
			ZZZ.*,
			count( * ) over ( ) TOTALROWS
		FROM
			(
			SELECT
				* 
			FROM
				(
				SELECT
					FG.*,
					( FG.SCHOOLYEAR || '/' || FG.SEMESTER ) SCHOOLPERIODE,
					C.TOTALCHANGE,
					C.ACTIVESTATUS 
				FROM
					FINALGRADE FG
					LEFT JOIN (
					SELECT
						STUDENTID,
						SUBJECTID,
						ACTIVESTATUS,
						SCHOOLYEAR,
						SEMESTER,
						COUNT( STUDENTID ) TOTALCHANGE 
					FROM
						COMPLETECOURSEPOINTCHANGE 
					WHERE
						APPROVALSTATUS IS NULL 
					GROUP BY
						STUDENTID,
						SUBJECTID,
						SCHOOLYEAR,
						SEMESTER,
						ACTIVESTATUS 
						) C ON (
						FG.STUDENTID = C.STUDENTID 
						AND FG.SUBJECTID = C.SUBJECTID 
						AND FG.SCHOOLYEAR = C.SCHOOLYEAR 
						AND FG.SEMESTER = C.SEMESTER 
					) 
				WHERE
					FG.STUDENTID = '1101130009' 
				) 
			) ZZZ 
		) a 
	WHERE
		ROWNUM <= 20 
	) 
WHERE
	rnum >= 1"
1a9UPKQk,Manifold PD Submission Annotated,Multicore,JavaScript,Sunday 26th of November 2023 10:38:33 PM CDT,"//Try/catch is mostly to deal with bots that have syntax errors.
//The disqualification procedure as written could disqualify a simulator if it ran an invalid bot without catching the exception.
try{
  //This eval is based on createBot(). Unlike the f we get passed, the function created here is indistinguishable from the normal way bots are run, at least for the public bots that attempt to punish simulators.
  //The local variable f here is scoped inside the curly braces, so it does not interfere with the parameter f from the wrapper. I assign it to r because r has already been declared in the context the bot runs in. This lets me avoid a use of ""let"".
  eval(`{let f=(d,m,c,s,f,h,i)=>{let r=9;${c};return +!!r};r=f}`);

  //By chaining all my local variable definitions together using the comma operator, I only have to use let once. Well, besides the two times I had to use it in the eval code.
  //Source code for tit-for-tat. I avoided using pop() because pop() modifies the array it acts on.
  let θ='r=h.at(-1);r=!r||r.o',
  //Lambda that calls the simulation function we got from the eval. It takes a history and simulates what the opponent would do if that was the history and if our code was that of tit-for-tat.
  //Substituting tit-for-tat for our code here avoids infinite recursion against ourself or other simulator bots.
  λ=Ω=>r(m,d,θ,c,f,Ω,Ω.map(χ=>({m:χ.o,o:χ.m}))),
  //Lambda that takes a history array and a move and returns a version with a new entry appended, where the self move is the given move and the opponent's move is 0 (defect). I avoided writing the character 0 here because there's a public bot that checks if you have it in your source code.
  Σ=(μ,π)=>[...μ,{m:π,o:+!1}],
  //Get what the opponent plans to do on the current turn (if my code was tit-for-tat)
  //I use the splat operator here to make a copy of i, to avoid having my original copy modified by the simulated opponent using things like pop().
  α=λ([...i]),
  //Get what the opponent would do next turn, if I defected this turn
  β=λ(Σ(i,α));

  //Finally, we put everything together to decide what to do.
  //If the opponent defected last turn, defect. (calculated using the tit-for-tat source code)
  //If the opponent is planning to defect this turn, defect.
  //If the opponent wouldn't punish me for defecting this turn, defect.
  //If the opponent would immediately try forgiving me if I defected for the next two turns, defect.
  //Otherwise cooperate.
  //If I'm playing against myself, ignore all other factors and cooperate.
  //I had to include the self-cooperation clause because otherwise this bot would defect against itself. This was because the simulation function doesn't give the opponent an f appropriate to its simulated situation, it gives it the f for *my* situation.
  r=f(θ)&α&!β&!λ(Σ(Σ(i,α),β))|d==m

}catch{
  //Have to set r to a valid state even if the opponent errored.
  //This is a convenient place to fit in the exact string ""r = 1"", since there's a public bot that only cooperates if you have that in your code.
  r = 1
}"
WFbmJ1Xg,CCTweakedChat,ChickenSquiggles,Lua,Sunday 26th of November 2023 09:29:06 PM CDT,"local pcid = os.computerID()
local evnt = nil

l,w = term.getSize()

local old = """"
function getchat()
    while true do
        local request = http.get(""http://wgames.pythonanywhere.com/chat"")
        local new = request.readAll()
        request.close()
        if new ~= old then
            term.clear()
            term.setCursorPos(1,1)
            term.setBackgroundColor(colors.blue)
            term.write(""                                 "")
            term.setCursorPos((l/2 - #""a!Message""/2)+2,1)
            term.write(""a!Message"")
            term.setTextColor(colors.red)
            term.setCursorPos(l,1)
            term.write(""x"")
            term.setBackgroundColor(colors.black)
            term.setTextColor(colors.white)
            term.setCursorPos(l-3,w)
            term.write(""ID:""..pcid)
            term.setCursorPos(1,w)
            
            term.setCursorPos(1,3)
            print(new)
        end
        
        old = new
        sleep(.2)
    end
end

function tick()
    local eventData = {os.pullEvent()}
    evnt = eventData
end


while true do
    parallel.waitForAny(getchat, tick)
    if evnt then
        if evnt[1] == ""key"" then
            local key = keys.getName(evnt[2])

            if key == ""enter"" then
                
                local lightColor = 0x100
                term.clear()
                term.setCursorPos(1,3)
                term.write(""> "")
                term.setBackgroundColor(colors.white)
                term.setTextColor(lightColor)
                term.write(""a"")
                term.setBackgroundColor(colors.black)
                term.setTextColor(colors.white)  
                local curkey = """"
                local message = """"
                local uppercase = false
                local trueupper = false
                repeat
                    local eventData = {os.pullEvent()}
                    if eventData[1] == ""key"" then
                        curkey = keys.getName(eventData[2])
                        if #curkey == 1 then
                            if uppercase or trueupper then
                                uppercase = false
                                message = message .. string.upper(curkey)
                            else
                                message = message .. curkey
                            end
                            term.setCursorPos(1,3)
                            term.write("">                            "")
                            for n = 4, w-1 do
                                term.setCursorPos(1,n)
                                term.write(""                                                       "")
                            end
                            local lines = require ""cc.strings"".wrap(message, l-4)
                            for i = 1, #lines do
                              term.setCursorPos(3, i+2)
                              term.write(lines[i])
                            end
                            term.setBackgroundColor(colors.white)
                            term.setTextColor(lightColor)
                            if uppercase or trueupper then
                                term.write(""A"")
                            else
                                term.write(""a"")
                            end
                            term.setBackgroundColor(colors.black)
                            term.setTextColor(colors.white)  
                        elseif curkey == ""space"" then
                            message = message .. "" ""
                            term.setCursorPos(1,1)
                            term.write("">                            "")
                            for n = 4, w-1 do
                                term.setCursorPos(1,n)
                                term.write(""                                                       "")
                            end
                            local lines = require ""cc.strings"".wrap(message, l-4)
                            for i = 1, #lines do
                              term.setCursorPos(3, i+2)
                              term.write(lines[i])
                            end
                            term.setBackgroundColor(colors.white)
                            term.setTextColor(lightColor)
                            if uppercase or trueupper then
                                term.write(""A"")
                            else
                                term.write(""a"")
                            end
                            term.setBackgroundColor(colors.black)
                            term.setTextColor(colors.white)  
                        elseif curkey == ""backspace"" then
                            message = string.sub(message, 1, #message-1)
                            term.setCursorPos(1,3)
                            term.write("">                            "")
                            for n = 4, w-1 do
                                term.setCursorPos(1,n)
                                term.write(""                                                       "")
                            end
                            local lines = require ""cc.strings"".wrap(message, l-4)
                            for i = 1, #lines do
                              term.setCursorPos(3, i+2)
                              term.write(lines[i])
                            end
                            term.setBackgroundColor(colors.white)
                            term.setTextColor(lightColor)
                            if uppercase or trueupper then
                                term.write(""A"")
                            else
                                term.write(""a"")
                            end
                            term.setTextColor(colors.white)  
                            term.setBackgroundColor(colors.black)
                        elseif eventData[2] == keys.leftShift then 
                            if uppercase == true then 
                                uppercase = false 
                            else 
                                uppercase = true 
                            end
                            term.setCursorPos(1,3)
                            term.write("">                            "")
                            for n = 4, w-1 do
                                term.setCursorPos(1,n)
                                term.write(""                                                       "")
                            end
                            local lines = require ""cc.strings"".wrap(message, l-4)
                            for i = 1, #lines do
                              term.setCursorPos(3, i+2)
                              term.write(lines[i])
                            end
                            term.setBackgroundColor(colors.white)
                            term.setTextColor(lightColor)
                            if uppercase then
                                term.write(""A"")
                            else
                                term.write(""a"")
                            end
                            term.setBackgroundColor(colors.black)
                            term.setTextColor(colors.white)  
                        elseif eventData[2] == keys.leftAlt then
                            rednet.open(""back"")
                            rednet.broadcast(""PM""..id2..""online?"")
                            rednet.close()
                            rednet.open(""back"")
                            local id, message = rednet.receive(nil, .1)
                            local state = ""off""
                            if not id then
                                term.setCursorPos(1,w)
                                term.setTextColor(colors.red)
                                term.write(""Offline"")
                                term.setTextColor(colors.white)
                                state = ""on""
                            else
                                term.setCursorPos(1,w)
                                term.setTextColor(colors.green)
                                term.write(""Online "")
                                term.setTextColor(colors.white)
                                state = ""off""
                            end
                        elseif eventData[2] > 47 and eventData[2] < 58 then
                            local conversionsUpper = {"")"",""!"",""@"",""#"",""$"",""%"",""^"",""&"",""*"",""(""}
                            if uppercase or trueupper then
                                uppercase = false
                                message = message .. conversionsUpper[eventData[2]-47]
                            else
                                message = message .. tostring(eventData[2]-48)
                            end
                            term.setCursorPos(1,3)
                            term.write("">                            "")
                            for n = 4, w-1 do
                                term.setCursorPos(1,n)
                                term.write(""                                                       "")
                            end
                            local lines = require ""cc.strings"".wrap(message, l-4)
                            for i = 1, #lines do
                              term.setCursorPos(3, i+2)
                              term.write(lines[i])
                            end
                            term.setBackgroundColor(colors.white)
                            term.setTextColor(lightColor)
                            if uppercase or trueupper then
                                term.write(""A"")
                            else
                                term.write(""a"")
                            end
                            term.setBackgroundColor(colors.black)
                            term.setTextColor(colors.white)  
                        elseif eventData[2] == 11 then
                            if uppercase or trueupper then
                                uppercase = false
                                message = message .. "")""
                            else
                                message = message .. ""0""
                            end
                            message = message .. ""0""
                            term.setCursorPos(1,3)
                            term.write("">                            "")
                            for n = 4, w-1 do
                                term.setCursorPos(1,n)
                                term.write(""                                                       "")
                            end
                            local lines = require ""cc.strings"".wrap(message, l-4)
                            for i = 1, #lines do
                              term.setCursorPos(3, i+2)
                              term.write(lines[i])
                            end
                            term.setBackgroundColor(colors.white)
                            term.setTextColor(lightColor)
                            if uppercase or trueupper then
                                term.write(""A"")
                            else
                                term.write(""a"")
                            end
                            term.setBackgroundColor(colors.black)
                            term.setTextColor(colors.white)  
                        elseif eventData[2] == keys.slash then
                            if uppercase or trueupper then
                                uppercase = false
                                message = message .. ""?""
                            else
                                message = message .. ""/""
                            end
                            term.setCursorPos(1,3)
                            term.write("">                            "")
                            for n = 4, w-1 do
                                term.setCursorPos(1,n)
                                term.write(""                                                       "")
                            end
                            local lines = require ""cc.strings"".wrap(message, l-4)
                            for i = 1, #lines do
                              term.setCursorPos(3, i+2)
                              term.write(lines[i])
                            end
                            term.setBackgroundColor(colors.white)
                            term.setTextColor(lightColor)
                            if uppercase or trueupper then
                                term.write(""A"")
                            else
                                term.write(""a"")
                            end
                            term.setBackgroundColor(colors.black)
                            term.setTextColor(colors.white)  
                        elseif eventData[2] == 51 then
                            if uppercase or trueupper then
                                uppercase = false
                                message = message .. ""<""
                            else
                                message = message .. "",""
                            end
                            term.setCursorPos(1,3)
                            term.write("">                            "")
                            for n = 4, w-1 do
                                term.setCursorPos(1,n)
                                term.write(""                                                       "")
                            end
                            local lines = require ""cc.strings"".wrap(message, l-4)
                            for i = 1, #lines do
                              term.setCursorPos(3, i+2)
                              term.write(lines[i])
                            end
                            term.setBackgroundColor(colors.white)
                            term.setTextColor(lightColor)
                            if uppercase or trueupper then
                                term.write(""A"")
                            else
                                term.write(""a"")
                            end
                            term.setBackgroundColor(colors.black)
                            term.setTextColor(colors.white)  
                        elseif eventData[2] == 52 then
                            if uppercase or trueupper then
                                uppercase = false
                                message = message .. "">""
                            else
                                message = message .. "".""
                            end
                            term.setCursorPos(1,3)
                            term.write("">                            "")
                            for n = 4, w-1 do
                                term.setCursorPos(1,n)
                                term.write(""                                                       "")
                            end
                            local lines = require ""cc.strings"".wrap(message, l-4)
                            for i = 1, #lines do
                              term.setCursorPos(3, i+2)
                              term.write(lines[i])
                            end
                            term.setBackgroundColor(colors.white)
                            term.setTextColor(lightColor)
                            if uppercase or trueupper then
                                term.write(""A"")
                            else
                                term.write(""a"")
                            end
                            term.setBackgroundColor(colors.black)
                            term.setTextColor(colors.white)  
                        end
                    elseif eventData[2] == keys.capsLock then 
                        if trueupper == true then 
                            trueupper = false 
                        else 
                            trueupper = true 
                        end
                        term.setCursorPos(1,3)
                        term.write("">                            "")
                        for n = 4, w-1 do
                            term.setCursorPos(1,n)
                            term.write(""                                                       "")
                        end
                        local lines = require ""cc.strings"".wrap(message, l-4)
                        for i = 1, #lines do
                          term.setCursorPos(3, i+2)
                          term.write(lines[i])
                        end
                        term.setBackgroundColor(colors.white)
                        term.setTextColor(lightColor)
                        if uppercase or trueupper then
                            term.write(""A"") 
                        else
                            term.write(""a"")
                        end
                        term.setBackgroundColor(colors.black)
                        term.setTextColor(colors.white)  
                    elseif eventData[1] == ""mouse_click"" then
                        if eventData[3] == 26 and eventData[4] == 1 then
                            message = """"
                            keepgoingR = true
                            break
                        end
                    end
                until curkey == ""enter""

                local data = 'data='..message..""&id=""..pcid
                http.post(""http://wgames.pythonanywhere.com/chat"", data)
            end
        elseif evnt[1] == ""mouse_click"" then
            
        end
        evnt = nil
        
    end

end"
AhwPXjgJ,startup,NeonDevelopment,Lua,Sunday 26th of November 2023 08:42:21 PM CDT,"local args = {...}
local paste_id = args[1]
local modem = peripheral.find(""modem"")
modem.open(18000)

print(""Drawing..."")
local old_term = term.current()
local mon = peripheral.find(""monitor"") --find and attach to monitor
mon.setTextScale(0.5)
term.redirect(mon)
term.clear()
--draw image through paintutils
local image = paintutils.loadImage(""image.nfp"") 
paintutils.drawImage(image, 0, 0)
term.redirect(old_term)
print(""Done"")

while true do
local event, modemSide, senderChannel, replyChannel, message, SenderDistance = os.pullEvent(""modem_message"")
    if (message ~= nil) then
    shell.run(""delete image.nfp"") --delete file if it already exists
    shell.run(""pasta"", ""get"", message, ""image.nfp"") --fetch NFP image from pastebin at given paste_id
    print(""Drawing..."")
    local old_term = term.current()
    local mon = peripheral.find(""monitor"") --find and attach to monitor
    mon.setTextScale(0.5)
    term.redirect(mon)
    term.clear()
    --draw image through paintutils
    local image = paintutils.loadImage(""image.nfp"") 
    paintutils.drawImage(image, 0, 0)
    term.redirect(old_term)
    print(""Done"")
    message = nil
  end
  os.queueEvent(""fakeEvent"")
  os.pullEvent()
  --sleep(0.1)
end"
