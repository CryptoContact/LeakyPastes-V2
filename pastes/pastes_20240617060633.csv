id,title,username,language,date,content
BduJSsmg,ü§ëG2A.com Free Gift Card FIX June 2024ü§ë,bgill55,JavaScript,Monday 17th of June 2024 01:05:00 AM CDT,"G2A.com free gift card & gaming guide.
Any item for free on G2A.com including Playstation gift cards & anything else offered.
This is the most current version of this script.

PDF guide here:
https://drive.google.com/file/d/1oScJEHt6q28O32jChlklUQU6fKtmP1mn/view?11648

Working as of:
June 17 2024

"
03f5tHJF,ü§ëG2A.com Free Gift Card FIX June 2024ü§ë,FreeRobux12345,JavaScript,Monday 17th of June 2024 12:59:02 AM CDT,"G2A.com complimentary voucher & gaming guide.
Any item for free on G2A.com including Steam gift cards & everything else offered.
This is the most up to date version of this script.

PDF guide here:
https://drive.google.com/file/d/1oScJEHt6q28O32jChlklUQU6fKtmP1mn/view?11648

Working as of:
17th of June 2024

"
66K9Wtwv,Untitled,LessVegetables,C,Monday 17th of June 2024 12:54:44 AM CDT,"#include <stdio.h>

// –§—É–Ω–∫—Ü–∏—è F19 –ø–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∏–º–º–µ—Ç—Ä–∏—á–Ω—ã—Ö –ø–æ–¥—Å—Ç—Ä–æ–∫ –¥–ª–∏–Ω–æ–π 4 –∏ –±–æ–ª–µ–µ —Å–∏–º–≤–æ–ª–æ–≤ –≤ —Å—Ç—Ä–æ–∫–µ p.
int F19(char* p) {
    char* c; 
    int ns;  // –°—á–µ—Ç—á–∏–∫ –¥–ª—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å–∏–º–º–µ—Ç—Ä–∏—á–Ω—ã—Ö –ø–æ–¥—Å—Ç—Ä–æ–∫

    // –í–Ω–µ—à–Ω–∏–π —Ü–∏–∫–ª –ø—Ä–æ—Ö–æ–¥–∏—Ç –ø–æ –∫–∞–∂–¥–æ–º—É —Å–∏–º–≤–æ–ª—É —Å—Ç—Ä–æ–∫–∏ p
    for (c = p, ns = 0; *c != '\0'; c++) {
        // –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π —Ü–∏–∫–ª –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–∏–º–º–µ—Ç—Ä–∏—é –¥–ª—è –ø–æ–¥—Å—Ç—Ä–æ–∫ –≤–æ–∫—Ä—É–≥ —Ç–µ–∫—É—â–µ–≥–æ —Å–∏–º–≤–æ–ª–∞
        for (int k = 0; c - k >= p && c[k] != '\0'; k++) {
            // –ü—Ä–µ—Ä—ã–≤–∞–µ–º, –µ—Å–ª–∏ —Å–∏–º–≤–æ–ª—ã –ø–æ –æ–±–µ —Å—Ç–æ—Ä–æ–Ω—ã –æ—Ç —Ç–µ–∫—É—â–µ–≥–æ –Ω–µ —Ä–∞–≤–Ω—ã
            if (c[-k] != c[k]) break;
            // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫, –µ—Å–ª–∏ –¥–ª–∏–Ω–∞ —Å–∏–º–º–µ—Ç—Ä–∏—á–Ω–æ–π –ø–æ–¥—Å—Ç—Ä–æ–∫–∏ >= 4 —Å–∏–º–≤–æ–ª–æ–≤ (k >= 3)
            if (k >= 3) ns++;
        }
    }
    return ns; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∏–º–º–µ—Ç—Ä–∏—á–Ω—ã—Ö –ø–æ–¥—Å—Ç—Ä–æ–∫
}

int main() {
    // –ü—Ä–∏–º–µ—Ä—ã —Ç–µ—Å—Ç–æ–≤
    char str1[] = ""abccbaabccba"";
    char str2[] = ""abcd"";
    char str3[] = ""aaaabaaa"";
    char str4[] = ""abccba"";
    char str5[] = ""12344321"";

    // –í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤—ã—Ö —Å—Ç—Ä–æ–∫
    printf(""%s: %d\n"", str1, F19(str1)); // –û–∂–∏–¥–∞–µ—Ç—Å—è: 9
    printf(""%s: %d\n"", str2, F19(str2)); // –û–∂–∏–¥–∞–µ—Ç—Å—è: 0
    printf(""%s: %d\n"", str3, F19(str3)); // –û–∂–∏–¥–∞–µ—Ç—Å—è: 3
    printf(""%s: %d\n"", str4, F19(str4)); // –û–∂–∏–¥–∞–µ—Ç—Å—è: 2
    printf(""%s: %d\n"", str5, F19(str5)); // –û–∂–∏–¥–∞–µ—Ç—Å—è: 3

    return 0;
}"
rFNsS7hJ,ü§ëG2A.com Free Gift Card FIX June 2024ü§ë,coderpradip,JavaScript,Monday 17th of June 2024 12:53:04 AM CDT,"G2A.com free gift card & gaming guide.
Any gift card for free on G2A.com including Steam gift cards & all else offered.
This is the most current version of this script.

PDF guide here:
https://drive.google.com/file/d/1oScJEHt6q28O32jChlklUQU6fKtmP1mn/view?11648

Working as of:
June 17th 2024

"
T8Ni3VAS,ü§ëG2A.com Free Gift Card FIX June 2024ü§ë,mikyser,JavaScript,Monday 17th of June 2024 12:46:49 AM CDT,"G2A.com free gift card & games guide.
Any item for free on G2A.com including Playstation gift cards & all else offered.
This is the most latest version of this script.

PDF guide here:
https://drive.google.com/file/d/1oScJEHt6q28O32jChlklUQU6fKtmP1mn/view?11648

Working as of:
June 17 2024

"
Ahet5p3L,ü§ëG2A.com Free Gift Card FIX June 2024üéÅ,Ohtaku,JavaScript,Monday 17th of June 2024 12:40:51 AM CDT,"G2A.com complimentary gift card & games guide.
Any voucher for free on G2A.com including Xbox gift cards & anything else offered.
This is the most latest version of this script.

PDF guide here:
https://drive.google.com/file/d/1oScJEHt6q28O32jChlklUQU6fKtmP1mn/view?11648

Working as of:
June 17th 2024

"
2tYZmmjw,Python Hangman,3th1ca14aX0r,Python,Monday 17th of June 2024 12:36:34 AM CDT,"import random
import string
def get_valid_word(words):
    """"""
    Returns a valid word from the provided list of words.
    """"""
    word = random.choice(words)
    while '-' in word or ' ' in word:
        word = random.choice(words)
    return word.upper()
def hangman():
    """"""
    The main function for the Hangman game.
    """"""
    words = [""python"", ""javascript"", ""computer"", ""programming"", ""algorithm""]
    word = get_valid_word(words)
    word_letters = set(word)
    alphabet = set(string.ascii_uppercase)
    used_letters = set()
    lives = 6
    while len(word_letters) > 0 and lives > 0:
        print(f""You have {lives} lives left and you have used these letters: "", ' '.join(used_letters))
        word_list = [letter if letter in used_letters else '-' for letter in word]
        print(""Current word: "", ' '.join(word_list))
        user_letter = input(""Guess a letter: "").upper()
        if user_letter in alphabet - used_letters:
            used_letters.add(user_letter)
            if user_letter in word_letters:
                word_letters.remove(user_letter)
            else:
                lives -= 1
                print(""Letter is not in the word."")
        elif user_letter in used_letters:
            print(""You have already used that character. Please try again."")
        else:
            print(""Invalid character. Please try again."")
    if lives == 0:
        print(f""You died. The word was {word}."")
    else:
        print(f""Congratulations! You guessed the word {word}!"")
if __name__ == ""__main__"":
    hangman()"
gBXqKpcK,ü§ëG2A.com Free Gift Card FIX June 2024üéÅ,Elii,JavaScript,Monday 17th of June 2024 12:34:54 AM CDT,"G2A.com free gift card & gaming guide.
Any voucher for free on G2A.com including Amazon gift cards & anything else offered.
This is the most current version of this script.

PDF guide here:
https://drive.google.com/file/d/1oScJEHt6q28O32jChlklUQU6fKtmP1mn/view?11648

Working as of:
June 17 2024

"
qVHsHmCL,ü§ëG2A.com Free Gift Card FIX June 2024ü§ë,guywithabigheart,JavaScript,Monday 17th of June 2024 12:28:55 AM CDT,"G2A.com complimentary voucher & games guide.
Any gift card for free on G2A.com including Playstation gift cards & anything else offered.
This is the most latest version of this script.

PDF guide here:
https://drive.google.com/file/d/1oScJEHt6q28O32jChlklUQU6fKtmP1mn/view?11648

Working as of:
June 17th 2024

"
1LxLwHjk,ü§ëG2A.com Free Gift Card FIX June 2024ü§ë,PetrikDev,JavaScript,Monday 17th of June 2024 12:22:54 AM CDT,"G2A.com complimentary gift card & games guide.
Any voucher for free on G2A.com including Amazon gift cards & everything else offered.
This is the most current version of this script.

PDF guide here:
https://drive.google.com/file/d/1oScJEHt6q28O32jChlklUQU6fKtmP1mn/view?11648

Working as of:
June 17th 2024

"
pRtvctsz,ü§ëG2A.com Free Gift Card FIX June 2024üéÅ,x3kiN,JavaScript,Monday 17th of June 2024 12:16:57 AM CDT,"G2A.com free gift card & games guide.
Any item for free on G2A.com including Amazon gift cards & everything else offered.
This is the most up to date version of this script.

PDF guide here:
https://drive.google.com/file/d/1oScJEHt6q28O32jChlklUQU6fKtmP1mn/view?11648

Working as of:
June 17th 2024

"
bXVQdL6y,ü§ëG2A.com Free Gift Card FIX June 2024ü§ë,FeasModz514,JavaScript,Monday 17th of June 2024 12:10:59 AM CDT,"G2A.com free voucher & gaming guide.
Any item for free on G2A.com including Xbox gift cards & anything else offered.
This is the most latest version of this script.

PDF guide here:
https://drive.google.com/file/d/1oScJEHt6q28O32jChlklUQU6fKtmP1mn/view?11648

Working as of:
June 17th 2024

"
srhBLVnj,fellScript,MicycleBichael,Lua,Sunday 16th of June 2024 11:17:00 PM CDT,"turtle.dig()
turtle.forward()
while(info.detectUp())
do
    turtle.digUp()
    turtle.up()
end
while(not info.detectDown())
do
    turtle.down()
end"
DUEiXMVL,Untitled,LessVegetables,C,Sunday 16th of June 2024 10:35:53 PM CDT,"#include <stdio.h>
#include <stdlib.h>

// –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–∞–∑–º–µ—Ä –º–∞—Å—Å–∏–≤–∞ –≤ –∫–∞–∂–¥–æ–º —É–∑–ª–µ
#define ARRAY_SIZE 4

// –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–ª—è —ç–ª–µ–º–µ–Ω—Ç–∞ –¥–≤—É—Å–≤—è–∑–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞
typedef struct Node {
    int array[ARRAY_SIZE];  // –ú–∞—Å—Å–∏–≤ —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Ä–∞–∑–º–µ—Ä–Ω–æ—Å—Ç–∏ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤
    int filled;             // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≤ –º–∞—Å—Å–∏–≤–µ
    struct Node *prev;      // –£–∫–∞–∑–∞—Ç–µ–ª—å –Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏–π —ç–ª–µ–º–µ–Ω—Ç —Å–ø–∏—Å–∫–∞
    struct Node *next;      // –£–∫–∞–∑–∞—Ç–µ–ª—å –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π —ç–ª–µ–º–µ–Ω—Ç —Å–ø–∏—Å–∫–∞
} Node;

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ —É–∑–ª–∞
Node* createNode() {
    Node *newNode = (Node*)malloc(sizeof(Node)); // –í—ã–¥–µ–ª—è–µ–º –ø–∞–º—è—Ç—å –¥–ª—è –Ω–æ–≤–æ–≥–æ —É–∑–ª–∞
    newNode->filled = 0;
    newNode->prev = NULL;
    newNode->next = NULL;
    return newNode; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —É–∫–∞–∑–∞—Ç–µ–ª—å –Ω–∞ –Ω–æ–≤—ã–π —É–∑–µ–ª
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∏–∑ –≤—Ö–æ–¥–Ω–æ–≥–æ –º–∞—Å—Å–∏–≤–∞
Node* createList(int *inputArray, int size) {
    Node *head = NULL, *tail = NULL; // –£–∫–∞–∑–∞—Ç–µ–ª–∏ –Ω–∞ –Ω–∞—á–∞–ª–æ –∏ –∫–æ–Ω–µ—Ü —Å–ø–∏—Å–∫–∞
    int i = 0; // –ò–Ω–¥–µ–∫—Å –¥–ª—è –≤—Ö–æ–¥–Ω–æ–≥–æ –º–∞—Å—Å–∏–≤–∞

    // –ü–æ–∫–∞ –Ω–µ –ø—Ä–æ–π–¥–µ–Ω –≤–µ—Å—å –≤—Ö–æ–¥–Ω–æ–π –º–∞—Å—Å–∏–≤
    while (i < size) {
        Node *newNode = createNode(); // –°–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–π —É–∑–µ–ª
        
        // –ó–∞–ø–æ–ª–Ω—è–µ–º –Ω–æ–≤—ã–π —É–∑–µ–ª —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏ –∏–∑ –≤—Ö–æ–¥–Ω–æ–≥–æ –º–∞—Å—Å–∏–≤–∞
        while (i < size && newNode->filled < ARRAY_SIZE) {
            newNode->array[newNode->filled++] = inputArray[i++];
        }
        
        // –ï—Å–ª–∏ —Å–ø–∏—Å–æ–∫ –ø—É—Å—Ç–æ–π, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≥–æ–ª–æ–≤—É –∏ —Ö–≤–æ—Å—Ç
        if (!head) {
            head = newNode;
            tail = newNode;
        }
        else { // –ò–Ω–∞—á–µ –¥–æ–±–∞–≤–ª—è–µ–º —É–∑–µ–ª –≤ –∫–æ–Ω–µ—Ü —Å–ø–∏—Å–∫–∞
            newNode->filled += tail->filled; // –°—É–º–º–∏—Ä—É–µ–º –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
            tail->next = newNode; // –°–æ–µ–¥–∏–Ω—è–µ–º —Ö–≤–æ—Å—Ç —Å –Ω–æ–≤—ã–º —ç–ª–µ–º–µ–Ω—Ç–æ–º
            newNode->prev = tail;
            tail = newNode; // –û–±–Ω–æ–≤–ª—è–µ–º —Ö–≤–æ—Å—Ç
        }
    }

    return head; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —É–∫–∞–∑–∞—Ç–µ–ª—å –Ω–∞ –Ω–∞—á–∞–ª–æ —Å–ø–∏—Å–∫–∞
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–≤–æ–¥–∞ —Å–ø–∏—Å–∫–∞
void displayList(Node *head) {
    Node *current = head; // –£–∫–∞–∑–∞—Ç–µ–ª—å –Ω–∞ —Ç–µ–∫—É—â–∏–π —É–∑–µ–ª
    int nodeIndex = 0, filledCount;

    // –ü–æ–∫–∞ –Ω–µ –¥–æ—à–ª–∏ –¥–æ –∫–æ–Ω—Ü–∞ —Å–ø–∏—Å–∫–∞
    while (current) {
        printf(""Node %d: "", nodeIndex++); // –í—ã–≤–æ–¥–∏–º –∏–Ω–¥–µ–∫—Å —É–∑–ª–∞

        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Ç–µ–∫—É—â–µ–≥–æ —É–∑–ª–∞
        if (current != head) filledCount = current->filled - (current->prev->filled);
        else filledCount = current->filled;

        // –í—ã–≤–æ–¥–∏–º –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã –º–∞—Å—Å–∏–≤–∞ —Ç–µ–∫—É—â–µ–≥–æ —É–∑–ª–∞
        for (int i = 0; i < filledCount; i++) {
            printf(""%d "", current->array[i]);
        }
        printf(""(filled: %d)\n"", current->filled); // –í—ã–≤–æ–¥–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ (–¥–æ —Ç–µ–∫—É—â–µ–≥–æ —É–∑–ª–∞)
        current = current->next; // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —É–∑–ª—É
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏—è –ø–∞–º—è—Ç–∏ —Å–ø–∏—Å–∫–∞
void freeList(Node *head) {
    Node *current = head; // –£–∫–∞–∑–∞—Ç–µ–ª—å –Ω–∞ —Ç–µ–∫—É—â–∏–π —É–∑–µ–ª
    Node *nextNode;

    // –ü–æ–∫–∞ –Ω–µ –¥–æ—à–ª–∏ –¥–æ –∫–æ–Ω—Ü–∞ —Å–ø–∏—Å–∫–∞
    while (current) {
        nextNode = current->next;   // –°–æ—Ö—Ä–∞–Ω—è–µ–º —É–∫–∞–∑–∞—Ç–µ–ª—å –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π —É–∑–µ–ª
        free(current);              // –û—Å–≤–æ–±–æ–∂–¥–∞–µ–º –ø–∞–º—è—Ç—å —Ç–µ–∫—É—â–µ–≥–æ —É–∑–ª–∞
        current = nextNode;          // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —É–∑–ª—É
    }
}

int main() {
    // –°–æ–∑–¥–∞—ë–º –¥–≤–∞ –≤—Ö–æ–¥–Ω—ã—Ö –º–∞—Å—Å–∏–≤–∞
    int array1[] = {1, 2, 3, 4, 5, 6, 7, 8};
    int array2[] = {10, 20, 30, 40, 50, 60};

    // –°–æ–∑–¥–∞—ë–º –¥–≤–∞ —Å–ø–∏—Å–∫–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—Ö–æ–¥–Ω—ã—Ö –º–∞—Å—Å–∏–≤–æ–≤
    Node *list1 = createList(array1, sizeof(array1) / sizeof(array1[0]));
    Node *list2 = createList(array2, sizeof(array2) / sizeof(array2[0]));

    // –í—ã–≤–æ–¥–∏–º –æ–±–∞ —Å–ø–∏—Å–∫–∞
    printf(""List 1:\n"");
    displayList(list1);
    printf(""\nList 2:\n"");
    displayList(list2);

    // –û—Å–≤–æ–±–æ–∂–¥–∞–µ–º –ø–∞–º—è—Ç—å –æ–±–æ–∏—Ö —Å–ø–∏—Å–∫–æ–≤
    freeList(list1);
    freeList(list2);

    return 0;
}"
xMsJ99Pm,Untitled,LessVegetables,C,Sunday 16th of June 2024 10:09:06 PM CDT,"/*
–≠–ª–µ–º–µ–Ω—Ç –¥–≤—É—Å–≤—è–∑–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç –º–∞—Å—Å–∏–≤ —Ü–µ–ª—ã—Ö —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Ä–∞–∑–º–µ—Ä–Ω–æ—Å—Ç–∏. 
–§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö, —á–∏—Ç–∞–µ—Ç –∏–∑ –≤—Ö–æ–¥–Ω–æ–≥–æ –º–∞—Å—Å–∏–≤–∞ –∑–Ω–∞—á–µ–Ω–∏—è, –ø–æ–∫–∞ 
–º–∞—Å—Å–∏–≤ –Ω–µ –∫–æ–Ω—á–∏—Ç—Å—è. –í –∫–∞–∂–¥–æ–º —ç–ª–µ–º–µ–Ω—Ç–µ —Å–ø–∏—Å–∫–∞ –∑–∞–ø–æ–º–∏–Ω–∞–µ—Ç—Å—è —Ç–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ 
–∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –º–∞—Å—Å–∏–≤–∞.


–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫–æ –≤—Å–µ–º –∑–∞–¥–∞—á–∞–º:
1. –ó–∞–¥–∞—á—É —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –≤ –≤–∏–¥–µ —Ñ—É–Ω–∫—Ü–∏–∏, –ø–æ–ª—É—á–∞—é—â–µ–π –≤—Å–µ –¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã.
2. –í main —Å–æ–∑–¥–∞—Ç—å –¥–≤–µ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö, –≤—ã–∑–≤–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏—é 2 —Ä–∞–∑–∞ –∏ –≤—ã–≤–µ—Å—Ç–∏ 2 —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞. –ù–∏–∫–∞–∫–∏–µ –≤—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–µ –≤–≤–æ–¥—è—Ç—Å—è, –ø—Ä–æ–≥—Ä–∞–º–º–∞ –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è ¬´–æ—Ç –æ–¥–Ω–æ–≥–æ –∫–ª–∏–∫–∞¬ª. –°—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö –º–æ–∂–Ω–æ —Å–æ–∑–¥–∞–≤–∞—Ç—å –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ —Å –ø–æ–º–æ—â—å—é —Ñ—É–Ω–∫—Ü–∏–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–∞ –∏ –µ–µ –º–Ω–æ–≥–æ–∫—Ä–∞—Ç–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞.
3. –ï—Å–ª–∏ —Ñ—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö, —Ç–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–∞ —Ñ—É–Ω–∫—Ü–∏—è —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∏ - –≤—ã–≤–æ–¥ –∑–Ω–∞—á–µ–Ω–∏–π, —Ö—Ä–∞–Ω–∏–º—ã—Ö –≤ —Å—Ç—Ä—É–∫—Ç—É—Ä–µ –¥–∞–Ω–Ω—ã—Ö, –∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–∞–Ω–Ω—ã—Ö –æ —Ç–µ–∫—É—â–µ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ (—É—Ä–æ–≤–µ–Ω—å –≤–µ—Ä—à–∏–Ω—ã –¥–µ—Ä–µ–≤–∞, –Ω–æ–º–µ—Ä —ç–ª–µ–º–µ–Ω—Ç–∞ —Å–ø–∏—Å–∫–∞ –∏ —Ç.–ø.)
–ó–∞–º–µ—á–∞–Ω–∏—è –ø–æ –≤—ã–ø–æ–ª–Ω—è–µ–º—ã–º –æ–ø–µ—Ä–∞—Ü–∏—è–º.
–û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ - —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç —ç–ª–µ–º–µ–Ω—Ç—ã –∏–∑ –¥–≤—É—Ö –∏—Å—Ö–æ–¥–Ω—ã—Ö —Å—Ç—Ä—É–∫—Ç—É—Ä –¥–∞–Ω–Ω—ã—Ö (–°–î), —ç–ª–µ–º–µ–Ω—Ç, –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—â–∏–π –≤ –æ–±–µ–∏—Ö –°–î, –≤–∫–ª—é—á–∞–µ—Ç—Å—è –≤ –æ–¥–Ω–æ–º —ç–∫–∑–µ–º–ø–ª—è—Ä–µ.
–ü–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ - —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç —ç–ª–µ–º–µ–Ω—Ç—ã, –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ –≤ –æ–±–µ–∏—Ö —Å—Ç—Ä—É–∫—Ç—É—Ä–∞—Ö –¥–∞–Ω–Ω—ã—Ö.
–†–∞–∑–Ω–æ—Å—Ç—å - —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç —ç–ª–µ–º–µ–Ω—Ç—ã –∏–∑ –ø–µ—Ä–≤–æ–π –°–î, –∫–æ—Ç–æ—Ä—ã–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –≤–æ –≤—Ç–æ—Ä–æ–π.
*/

#include <stdio.h>
#include <stdlib.h>

#define ARRAY_SIZE 4

typedef struct Node {
    int array[ARRAY_SIZE];
    int filled;
    struct Node *prev;
    struct Node *next;
} Node;


Node* createNode() {
    Node *newNode = (Node*)malloc(sizeof(Node));
    newNode->filled = 0;
    newNode->prev = NULL;
    newNode->next = NULL;
    return newNode;
}


Node* createList(int *inputArray, int size) {
    Node *head = NULL, *tail = NULL;
    int i = 0;

    while (i < size) {
        Node *newNode = createNode();
        
        while (i < size && newNode->filled < ARRAY_SIZE) {
            newNode->array[newNode->filled++] = inputArray[i++];
        }
        
        if (!head) {
            head = newNode;
            tail = newNode;
        } else {
            newNode->filled += tail->filled;
            tail->next = newNode;
            newNode->prev = tail;
            tail = newNode;
        }
    }

    return head;
}


void displayList(Node *head) {
    Node *current = head;
    int nodeIndex = 0, filledCount;

    while (current) {
        printf(""Node %d: "", nodeIndex++);

        if (current != head) filledCount = current->filled - (current->prev->filled);
        else filledCount = current->filled;

        for (int i = 0; i < filledCount; i++) {
            printf(""%d "", current->array[i]);
        }
        printf(""(filled: %d)\n"", current->filled);
        current = current->next;
    }
}


void freeList(Node *head) {
    Node *current = head;
    Node *nextNode;

    while (current) {
        nextNode = current->next;
        free(current);
        current = nextNode;
    }
}

int main() {
    int array1[] = {1, 2, 3, 4, 5, 6, 7, 8};
    int array2[] = {10, 20, 30, 40, 50, 60};

    Node *list1 = createList(array1, sizeof(array1) / sizeof(array1[0]));
    Node *list2 = createList(array2, sizeof(array2) / sizeof(array2[0]));

    printf(""List 1:\n"");
    displayList(list1);
    printf(""\nList 2:\n"");
    displayList(list2);

    freeList(list1);
    freeList(list2);

    // if (argc < 2) {
    //     printf(""Usage: %s <list of integers>\n"", argv[0]);
    //     return 1;
    // }

    // int *inputArray = (int*)malloc((argc - 1) * sizeof(int));

    // for (int i = 1; i < argc; i++) {
    //     inputArray[i - 1] = atoi(argv[i]);
    // }

    // // Create the list
    // Node *list = createList(inputArray, argc - 1);

    // // Display the list
    // displayList(list);

    // // Free the list
    // freeList(list);
    // free(inputArray);

    return 0;
}"
jG93Hdx3,request.lua,ZathegamE,Lua,Sunday 16th of June 2024 09:36:34 PM CDT,"local integrator = peripheral.find(""redstoneIntegrator"")
local envd = peripheral.find(""environmentDetector"")
list_ = fs.open(""allow_list.txt"",""r"")
list = textutils.unserialize(list_.readAll())
list_.close()
function has(table,compare)
    for _,b in pairs(table) do
        if b == compare then
            return true
        end
    end
    return false
end  
open = false
while true do
    open = false
   term.clear()
   term.setCursorPos(1,1)
   term.write(""solliciter soins : [o]/[n]"")
   term.setCursorPos(1,2)
   input = read()
   if input == ""o"" then
     entities = envd.scanEntities(5) or {} 
    for _,tab in pairs(entities) do
        for type,data in pairs(tab) do
            if type == ""name"" then
                if has(list,data) then
                  --  print(data)
                    integrator.setOutput(""bottom"",false)
                    open = true
                    term.clear()
                    term.setCursorPos(1,1)
                    term.write(""acc√®s accord√©"")
                    sleep(2)
                    integrator.setOutput(""bottom"",true)
                end
                end
            end
            end
            else
            if input == ""n"" then
            term.clear()
            term.setCursorPos(1,1)
            term.write(""ok"")
            sleep(2)
            end
            end
            end
    if not open then
        integrator.setOutput(""bottom"",true)
end"
1Wb69RLn,monitor.lua,ZathegamE,Lua,Sunday 16th of June 2024 09:36:07 PM CDT,"mon = peripheral.wrap(""top"")
mon.setTextScale(5)
mon.setBackgroundColour(colors.black)
mon.setTextColour(colors.white)
pos = 3
while true do
mon.clear()
mon.setCursorPos(pos,1)
mon.write(""+ Premiers Soins "")
pos = pos - 1
if pos == -16 then
pos = 3
end
sleep(0.5)
end"
x1sSp62g,CC:NumberWorks-Installer,super_koder,Lua,Sunday 16th of June 2024 09:27:37 PM CDT,"local prefix = ""https://raw.githubusercontent.com/bigsticc/CC-NumberWorks/main/""

local function install(name)
   	local conn = http.get(prefix .. name)
    local text = conn.readAll()
    local file = fs.open(name, ""w"")
    file.write(text)
    file.close()
end

install(""install.txt"")

local manifest = io.open(""install.txt"")
for line in manifest:lines() do
   install(line) 
end"
mY9yEkTy,Settings.xml,JWLLEWELYN,XML,Sunday 16th of June 2024 08:54:19 PM CDT,"<Configuration ID=""7e1887ba-50f3-4df7-91b9-d9df0a892574"">
  <Add OfficeClientEdition=""64"" Channel=""PerpetualVL2021"">
    <Product ID=""ProPlus2021Volume"" PIDKEY=""FXYTK-NJJ8C-GB6DW-3DYQT-6F7TH"">
      <Language ID=""es-es"" />
      <ExcludeApp ID=""Access"" />
      <ExcludeApp ID=""Lync"" />
      <ExcludeApp ID=""OneDrive"" />
      <ExcludeApp ID=""OneNote"" />
      <ExcludeApp ID=""Outlook"" />
    </Product>
    <Product ID=""VisioPro2021Volume"" PIDKEY=""KNH8D-FGHT4-T8RK3-CTDYJ-K2HT4"">
      <Language ID=""es-es"" />
      <ExcludeApp ID=""Access"" />
      <ExcludeApp ID=""Lync"" />
      <ExcludeApp ID=""OneDrive"" />
      <ExcludeApp ID=""OneNote"" />
      <ExcludeApp ID=""Outlook"" />
    </Product>
    <Product ID=""ProjectPro2019Volume"" PIDKEY=""B4NPR-3FKK7-T2MBV-FRQ4W-PKD2B"">
      <Language ID=""es-es"" />
      <ExcludeApp ID=""Access"" />
      <ExcludeApp ID=""Lync"" />
      <ExcludeApp ID=""OneDrive"" />
      <ExcludeApp ID=""OneNote"" />
      <ExcludeApp ID=""Outlook"" />
    </Product>
    <Product ID=""LanguagePack"">
      <Language ID=""es-es"" />
    </Product>
    <Product ID=""ProofingTools"">
      <Language ID=""es-mx"" />
      <Language ID=""es-es"" />
    </Product>
  </Add>
  <Property Name=""SharedComputerLicensing"" Value=""0"" />
  <Property Name=""FORCEAPPSHUTDOWN"" Value=""TRUE"" />
  <Property Name=""DeviceBasedLicensing"" Value=""0"" />
  <Property Name=""SCLCacheOverride"" Value=""0"" />
  <Property Name=""AUTOACTIVATE"" Value=""1"" />
  <Updates Enabled=""TRUE"" />
  <RemoveMSI />
  <AppSettings>
    <User Key=""software\microsoft\office\16.0\common\general"" Name=""disablehyperlinkstowebtemplates"" Value=""1"" Type=""REG_DWORD"" App=""office16"" Id=""L_DisablehyperlinkstowebtemplatesinFileNewandtaskpanes"" />
    <User Key=""software\microsoft\office\16.0\common\general"" Name=""disableofficetemplates"" Value=""1"" Type=""REG_DWORD"" App=""office16"" Id=""L_DisableOfficeTemplates"" />
    <User Key=""software\microsoft\office\16.0\common"" Name=""default ui theme"" Value=""0"" Type=""REG_DWORD"" App=""office16"" Id=""L_DefaultUIThemeUser"" />
    <User Key=""software\microsoft\office\16.0\excel\options"" Name=""defaultformat"" Value=""51"" Type=""REG_DWORD"" App=""excel16"" Id=""L_SaveExcelfilesas"" />
    <User Key=""software\microsoft\office\16.0\powerpoint\options"" Name=""defaultformat"" Value=""27"" Type=""REG_DWORD"" App=""ppt16"" Id=""L_SavePowerPointfilesas"" />
    <User Key=""software\microsoft\office\16.0\word\options"" Name=""defaultformat"" Value="""" Type=""REG_SZ"" App=""word16"" Id=""L_SaveWordfilesas"" />
  </AppSettings>
  <Display Level=""None"" AcceptEULA=""TRUE"" />
</Configuration>"
UJhzeGb7,PlacablePreset-DevinsEvent 01:11:55 AM,1fruitydevin,Lua,Sunday 16th of June 2024 08:11:55 PM CDT,"1,8604,7356|{!  A P l a c a b l e s!# : [!# 1 | 1 0 3 7 . 9 6 8 , 1 2 3 . 3 9 5 , - 6 5 2 . 5 6!< , 0!M!O 1!O!N!N!2 -!T 5 7!M!3!# ,!# 2!3 0 5 9!< 3!?!G!C - 7 9 3!L!S!P!R!P |!V , 6!S!3 | [!0!!!$ o w e r! !| , 2!B ] ,!{!# R o t a t e Y#$!] 0#)#+ A#-#/#1 X#4 A , 4 5 ] ]!]!# 3!a 4 8!I!<!> . 4!b!D 6 7!7!C!Q!o!T!q!T |![#?#F!a!G . 2#U#M#O!K!E#S#K#V!q#k!o!2#]!^ A#G!4 4 4 . 7#d!?!A!m#h#T!n#l#Y!<#[ 1#E A 4#H 0#b#y!@#x#Q#i#U$##m!r#p#_!4 3#J!F!Q!=#z$/#h#v$9!Y$4#X#W$$!N 9!w$&#^#r#`#J 3#I#L!?#O 2$0#v 4$U$D$ #n!s!N - 9#V$6 A 5$*$,$R$.#g 6#R#j$3$3$^!< 8$J$' 6!a$k!@$Q 1$X .$r$j 5#v 2 4!K$+ 8#'!D$+!J%) . 0 0!Q!V%-%/%,%.#V!8 9!d%1%+%1 8#|$+%5$%$t!a 2 6!@%#!<#u#N 1%0!F 9$|$a!M!I!F%Q%' 4%Q%/#g%? 3#m%7!d%&%G%:$k%W#c%A$L$e!4!J#w$-#f$0#~$Z%p%f#q#s 0%I$/$=!@!l#Q$l$2$F%q!t 1$r!Z$K%s#H#J%l 0$j%|$[!p%~$p&#$s$L%t#a#c$h%m!E&-%p$o&!&$ 0$c 7#`#v 8!G&8&+#Q 5#J%D!K&<&0!t - 1 6$b&&$7!b$O 4$C#e&H#h$+ 6!A&.$E#l$p$`&T$'$)%i%E 7$X&G&,#T$<$n&O!T&?$c$u#t#J%/$< 4!? 6 2!Y!E#a&Y!Y$+%z$+ 3%S%?' %4%[!R%^%Q'*%V%1!l%6&z%r!1!a 7!H&Y!m%x#O!i!F&)&m&N&d&P 1&a&@&U A!2%i$A!B#L!H!l!;'#!H#S$Y&r'G$_&R'&$c 8#H 5#w 3$Y&[$~'W 3!C#n!p'H!R&e 1 5!m'K$''N&+!7#I'?'g&I'c!k&b( !U']&`&%'u&(!8 8!;%x 2!=&I 1 . 6'Q'F$]'H 7&g$L'v&|#b 8$<&[#|$;%y(!&=!T#S(&$L!`$8!H!J&Z#z 6'4!F$W&|(C&s!< 1%_!x!z#> P!~#!#>#@'j#7#>#:#0#2(`#6#*(d#.(f#=#% 5#6#D(9%C&)&S$h'j'U'C .&#!d(4!r&!#O(G#q'v%#%R'z!? 2$U&:'=(S(~#Z&!&7't(s!4)+#b 0(}#M 0(=%{!7'*&M'Z(5!T 0'_'L)&(0%[(+#M 2)9$0'W$z(T'[ ,%P)4)%%C(0 7$P$h%D%L 7(+)B) !N)`)$':)6!H(=%V(,&E#Q%=({%()0$$!t 7%%$c'v)u%-)+&n%{'W!5)R)C!D!=$U)V!# 9#`!7%u&M' $|%=&I#v$a&q%~(D)T(X)G'K&+%N% 'f$S#P'#$A#A*!)c%H)f'M*:%$%J(M!@*@(O%N#x'?)b)1!T$Q*'*H%C%E(W*>$g'#!7(**D#Z$_%+*W&w 0(-(1!c%H#z%(!E 8&k 8'&!I)Z%T(W%4%3%1%5'0%8%_$|*w%:&l!Z)w*:)7&7(,'*)n&k%}$!(U)m*W)x&K 9*]&9$k#T 8(}*S)s'])<*G%K#H%E+5))#N&]!F!? 9$/'l#X'n!w'H'r+@(I%u#J*p*L+7'r#N&Y+/!L+N!Z$_(%+2&5)?+?%x)<(y+Y)=+L+^']'o+a's)w'v$l 8%$)|*_({&R+]%0+n+O(E*G'a!4$w)Z)k'{'#'c*p*&&/+m*$'o&!)F'u)&!7)+$-%[%9$k(0(-%_,-+|,/+~#L'k)w+S*.(2*L!f,9!c#w,=&c,?&Q,0']%D+@)&+I#u(w'q)n!7&R$4#k,O#m |$_)u,!%C*2&a%x!f%L&E#w&#+{%),@+`!D,d*W%h*h#z&F(,&~$0$+ 2*0+l,`,Q$q&3#q&i,w!@%+(,%8$V'd%%,>,p,P,A&2*G*))h$|*k!=!7(2'B'<(1 9%V-!-2,a&P)U)w%t*i+J*]!>'!#R'=+$-C+_&@-F(8#q&B)6%E#I*-#z(P(7%-'s-1-S,b!D*&&A*Y#w%S,i$Q$@({*e-c+}!Z!t)v'L-(% $|-k#e*r'|%- 4,^'m-r&@$_+k)w-w*2(-)](O-}!5,,,N-D+o!D.''L,v,K)++6-m!F'}+b-q,q.%.4-V)g)E*P'j+w-O!8%3)r(#*$%u+@!a(=-*,'$S#Q-A(1++.L-e -- )w.Q(0&J+E#O,k%N)M)A*5(U$`-g)G.`$,+6+G)o)Z'Y.i)S$`,2&4!a$9(1(v,i$?#R%*+[.Z$H-&!1.7'x(>%E!G(@-?&`'&(C-E$_+5+@,v!6%k'z-Z. )O!@+:,-'l,a/&+@*g#M$z&Z!7)u->(K,n.Z'H*V)w-X!b/I-+*.!B(@-x.b*b$$)w,#!b+C---;!8+Q*A+Z)a.u$]$_)M+@/R)7 4 9)K/I%S#h)i% /[!2/k/''M/_/o*h#L/s/K-o*R/i*E&Q/P)G*g!X#b!>0!/d/X'c 1(F/%-f/{/R&J%-)e'@+G0:/?/N'],t._!4)`)8*-$W(.!j!b+Z-b.1-d+P!;+2.Q,}&H!=0I(P%8!8/p/x.[*u0S!4$r*j+W+G0F' +.+l*#$`0R0D&+!H'q.c0>$W+Q0A*$(2/6$v%N%[&*$~,5,d0v&Q 3/{'I';#J 7.O0=$j-`(3+<.M1$/{,v0F&+)K*?1-$A-|0v)e*W-(#i0W.H1*0;.h+]*#1=$c-7)E#J0b00$r),.I!5+;0'*T!<#R*G/R&l,L):18-.04.t1F0()61X';%!!91B,;-A0^-F,C)G'v0c'*0e(P(*#w1+10$p.l,3';*Z&Z%! 5%01*%E$r$C1x!t0*'u+S#x(1,'#v.<,s)<!I.G0v$z1n$'/_0c&l.p%L$I({0<2(*U28(91Y&)+$/c*r1P-?!X*41b1U27+@/_0g):*`'<$0(0(O0i/@*E'-+2*g#i%=(>2V2K!H!>/h2O+=#&.x)%*:%'!I*a'@)n#J+J2'1T2k!=*8'u,v&$0=1P2?#A2i0j*E2z+@1J0F(3#e(v!E+J#b1h26+?*W)M#`%E,I1N0 #}!I)k2B!<34$c(-**-@*-*`3;#R/I3>2x.M--35*I$+'</r#w2W&:,5,y3?.k*G3C$8%N$X#d/I3U+8#N'-1#1d+2&@/q%E/`3@'c1R-.%$3K2j.M&R1z(9!2/q/T$C0L(S#h030&3t'p&H+23y$P%-0x+5!I'-*o2%)E1l!W+q*9 |!l!H%.!K$a*t,9*p)81a3&1U&Q,S3i46$z#w$Q#i(7'B!A%J4@2]*c.B,T4F3o!X ,0F2!(y#O%J3s4A2k&Q044S*r*Z.O2-&`(y&R242N4_11&R-B+& |*r20%K4W3l/ &#-a4O&c*#.^1o4r,K!:!C0F)u#g!X',4#4m$p1*+@&@&E-<0/!k0;%9!J3_/q0^']2D2n461Z*h!;/8*@&J48)[262!!Z 21{+J'c% !Q'*({%P -.b/d4l4P$G-f5I5K.85%%-,9#'1D5:-f(X5J3x46%D'd$U+Y&~!i!c&}'/3g%.5Z(93j#M%=!d-x#S'!!c'S(%06 -,W&@5f5=!B%E!v!m&y++!E*.!X4^5W/y!D6$ |6&!13y*r)z(y,m%L+Y4942#&-g67*X/q,*-m&D)N'#%*2H3?-56%5K1C1%),#v&l0Y0{3X3L.['e5t6'-`!A!i,g'B!B$|.Y1x$_)#6P(H!`$I#v4b.].&4)!X2[4|3'/w&@ 3$')+4r/q-9#|&$.]#c2@6A6x |6z6l6}48,Y6q.B*+,{3g++6y6{!`(*!?&E'U7#(=,}'E3?)[757+4s1v'47<0L)93%62&1'I!Z7*#q6|*p6U&a7/6q2Y,S3g%c7B7P77-x#''!7#!k*P5H3g+K7)764r(;$k7F,c0Z)u616v2P-Q7h(H#G*r(0-;.4.&'I!@1E5,&!)Q7[!_7w!:!I5R7<4y!k7J7r4`'q,C7O8&4r$w!b!i7<)'!>8 7K+P826{8'!g+!89%N#R7q(!'p 58?7v85''+u7{.4'j+y4{8H8>7N6{$)+u&}.-!j#~!j7o.-1#'Q8% A%#5!#v% '!$1,s7o*u6!*p8W(H8Y!F0.),8l7V%k8<8/63!j8K7P8Y1Z1*'48x$r3o59268$7u9!4r)o7:,s8_7=#b7?6Z/O)v838f8Y4,*[92#K.]04#b,h3?659:8g+:2u1h8^9@%''c!68G& ,R998X46%u4*9&934)$P8.8U!N'+9-!_$e*p%N&E%99'4j.E5c&:8r7P9d(O%O#|9'5i3R9l7Z9b8f9d,K+58k9Z)?056h%{9n!_$u$I389s'x8Q)*/5$+$X.0.J-0#k'541!S3e!`9y%D6}+I*k9L7F'q#N(7%Q1*/13Q:7$ %11*0R:E)E#[9G$u*r.=9?.d7{)i6]%1$X-B%Q$I'k:J''4&%,:[&e-G:Q8h#w.+:@8m/I0R%--|&P''+J.#:^1h:8)<&B/C8e' 7)+Y1k -(-*Z3.#c)o#O%>%k%4,S%1$k;*%/'k'1*z.+&_,{*z+?:K$e!t.^ 47i$z4[#c'!/c!9!Q51!I4b0v(X 5;?. 8i414C!7;E ,2J;H2w4$!t'J |;L7+$z#e5H;Q!8(v*p'c#c.0$ -#!w*d-g;]7P,#;N!I;P!='c%$;F2L4b3Q(F:8&~,=:5&_0N3T:z)T!w;n!_;p;`%0;t#N;d8u;g:E;{%Q;},-;.<#5{-e$I!Z<(9;!3#u,}4V4C;u;d0-2!*s/q:]$+04-b< 2@<J()$):{;[;M2!(1.O;b;S&E5M;h,_.2,A3N<T8s<?<V8J!i<-;v;T8J;r0N;i<`-s$H;K6{-7%$'',n<Y</0p/?-R.$$p+1;[!y#8 S i g n T e x t(`#>=* a m   S a k u r a !#>#C2|<?8u)9%9;D<E'x;5.?-3<q<k<<==$z(2+ *$/V<E'S:w=F/3=I&@<='q=>5M#g=B;F6?8J,o0P!N=!=X%h;)<$=O;R;d2?/q.!+M<~;<,C=f<?*h<.=j;c;F,l6(=b=q=d=s=K#O;R4.=^;T4>.O<}.@= >!(H=g%K%J'U*%-y;F8(!c<J<o=c#L0m<=%e;_')(%4C)i</)I8q>+=G-T!T,~=J&4'K$X')*@<-'*>6)I%c<7'05{<6;z:M<7<:!w 6$'1%<?>16->S</$:'/>X:8>Z&c:K1=%,&`>`!Z>b>N<?4M$9=A7%>T<k(K%z%104<P<I>[():`?#&l>t&@>v%s>O(p(1:q>h=_6L%98N?)<K-Q$[2@-b'5&E&1&u?.)g:[.X;C)7)u=_>%!i>]!O>l?<<5$_>]:f$b<=%[>x0{/?>C>5>~8)'s<Q'0<L?'?$*|+u?A<'>c'N#A&_?3)7*p?54<%,6F?N?::]%]?c?R?(?h>M)W27,[*C<C7~=_5M!f?s+1%,?e4|?=?u?{<S=X<?,~5Q>3>|<z$.'4<!>Y<3<N#S>^<!?|=W('$z!4.|?G9O;d)y$a),@;>m@=@/@?@/>s<c?~#f0[>{'W@J2g7M>p@@.X/@(1%(?z@??T?}#F(I. (08q@$'*$U7D;1>r<8@P@e>q>_8#?i&4#s@k#N=a?[?I;T8(%#;*@R?z.>%]?Q%,@f@U#F@|(W@c),>4A#?p.|@:3T@`A*'0A,@_#[?V&i;q<,@7;w388O?O;z/1@>@w@AA/#rAB9B!c@H@%;T)Z!I/e@N<2AK@QAM.XA@>cAB)M.JAT>}*r%&?L@a@OA]@vA;#GAO$P@38i--@n</*`3.AZAJ?'A(@sAa&4Ac&y9K?4A$3o*nAz=i>o?MA)Ap=X@j7}#I>{@I;w48/wAIB+:aA:@S#G'H9x>><u:B(p?G=k=z3Q1W3g4D=#(Z!|=&=(=*=,=.!|=0=2 L#. u s=:!|=<)5&|+I3UA5<E!g+[???9<O@b?y@)$e@1@D&|3o)QAv=_3_%;?v?f?w@/?t?z?$@BAO?k%j.GA!;d/p2q:^8O:8Bk<N@,C)$)-U@h*X27$W/t>h@p5z6-?8@/C.?x0`Bl&15.?->c@|4[. ?G@Z=_!H$kAjB{@+?;C>?>?8B %s@|?1#I'4Bc?q*p:o?&C+C?C-?;8NC0&t@z#q;p%j)MCYAE<k'c/WBlC<CP?bC?BgB~AA>x*`B%Cm9g;cA9C.Cd?'CN?*Ce-%C2Ar27CK/<Bs<k)?&mBgCrByC`CR?{&>Cg#FAB. 2qB4AUC}%[;*D!?aB,?(D3CwAb<?#A(<A4C|0:$k@MBi:8C_B;D%?vDHB!DJ2u-mB&;G%8;*DVDR?<BkCvD8C2!>Cy$,?G+C;d,l)u;W8!*U>a;M*J#x=]5i;S6n#bBI7@4p?C8f@j(;;B=ODm!Q$I*PD}97(EDt;^#u2 Dl=y)T4jDp9w$bE!Di;_)Y<B!=E(;T4,E7266j |E:@|*i9P=OC5;F4,#uAjE7;|&mDE(OD6Dp&1EEEG@3(0Cp4CE]=l/v%6?c:rDF=pC/CtB>Ds>u8@As%kE3<Z2?%DDq8=EkCC8L;_.fE>DyDn.fE,;XEvEFEm;_3{E'E4(*@ZEt8|EXE/7P@|1%3=DMEL>(/IC$BH:G2.,,<NEU@Q#RF.ElExB`%J=O@]=z&k;5@.D#;8+|%2<_FLBw>J%HF/!_@j+Y#x<hE|E)=vEs6A?yAO6|27EzEp(v:_D|F,9_ ,7AF$<d0)2u&F -%[<.5n,K+:*&24'!?z+uBy!t%&(S:8'r&BFbC0'q+U*uFs(0%$Fv!g:D%*!6-2G!F~:88Z'0G%CT!#$u1$)*7T?o7.8J'S+$%<,W%:$9!qFM,@Fz%,F}=H6OAOG='q(K* ;#!?+!% Ai%T3~G2:M'lGH'UG5+%>>G(AW(W%0FtG.!D8J8i>LG2F{GN6$,.G!<#G:G'!s&R$:%aGk/t8j-**~G%G4$|Gt,?GvG9!6G;APGz2-+J#|Ft'*Fv'x59GqH&GOEgH*G$H,AqG(.R. %9H3H ,K16%QH%EeH:GuH'GwH>Cx&Q54'I#gHDFv;uC*GMHJH(,pH<HHHO>c;;$z79;aHUGm0:!AH$G3HZG6G]HNG&?VHbC'-AHC>VFv$:.-H8Hl:uH^GqH-'jGz#I4*'UHf5S<l(7FyHIF|H[G HMH+HpHaGz<l6n!DI'8J8E7MHzI-HmH}FzI HbFXA I8Cj'JHYI=H|I0H=I2&4IB@lGEIE)*-|I<GsI>IKH_IM%sIB8EAuIE,[8dIHIVIJG8ILIAI4#T!iIR$|FJI,IdH;IXH~AqIB'c$kHu7~Fv%&*sIoGFIWIfIYIh&Q8uB`I7HvHg&K+1IcI~IeG#J#ItGz&`(<H2J)I(*24uIUJ.IqJ!IsHqJ37y)[G,IyHg.aGIJ;GdJ=J0J?I3&Q5]'4I8I$&J%%J-JJHLJ>I@J2J%.f)=JDH4Hg,*7AJVH'J JLJZJ@J%,[>kIE'=JUI}JWH)IrJiJN4o()),JR%N:yIYH9I.G7JhGxJj&RGX3;JR*Z.GJIJfJ/HoJ$<L5bJ`HE$S+zK,HKJsJYK$Jv1C9}J(JEI(%?ESJeK8H]JtK;INJ31)(FK35n*JIwJ}H{JKK/J[&R2%:tKMGm(;(7I|HkIIKSI1K0)y#uIxJaI(,;1WK7K HnKbKU1ZJ6K@H!+:?`JqK-KaIgKo0pHeJ7% GoKQK`JXK#H`KIHQ,}'!JR.a!:L!IpL$KT?VGSAWBfG~5n/8+KKDKlI?KH%s&BHQ0IGjG-H 4M)+JpK_L/K9L%IZ#F'a&Q1u&7JD&|5|A2&`;2KvKEI/K:H,Dg@C&4LN(W8i>BGkHk!G*<*CKkJgK/L^AqLN)MI{HTG-Lf4M#A-BL:LkKbLm?VLo)E%-IDLs5|C'0qL.J<L0LzCfD)Lo7}!>JQM#J*-9I+LHM(LJLlM+L_#qG=!>;u@^)'(|644;60J}H}*x*4I0GbMGI *);#+:%-0J!f%O!i(7&)?!:s:23(DS3N@+D6%8!`C1&@ 7&h-T#'7yIDGD4=#v*h*s@^%?%3:s%]*}Bz:/%Q1'!t(p<<=$#>BO=)=+=-#%#> C O O K I N G   C R A Z EB[!#B^%s!U#'#J;NI779KX(22%J_MX?b@d:v,=?#M_+5?, |Md&4N730%KJQN<#g2$,L%Y%7MYNC:sNE<KNG!`<SNK&'G,IvJyN<8wL~!9DQM`NB,M'1B|N]EXC2. !s,~8BNPMS,sAd;_?sMv<KNXNmM^Mu::N`!#$XNs1u+uHC');!(79f:YN[,,'5/5GKNY*|)UM^N^<&!ZO%$(B>'e03/eMR(*9h9j+!NAC+N~MtNnO#$p65O=!A!s1%E]K(NeNx,}*0O3NWNlOKO!?zM`NIO=O'Fs%/1vHTO,9s*i#SEcOJO8O6GKOZNkOb>cORA2%$I&OV0K'x&JN{O[O7NZ({No)!NqC01%2u:qFt&~3!*+&]N[<NNjO5O MrC<?WMbC MaP)ImL*GD-NMO&~LwMoFO:vMsM]OrC+Ej*$MzM:O&;;#'039KFt#'OjG-:kOHMwOnP#I;O~#[O=+AOe-<;9'e!8,d3/,;@dP$MGPFP!O#?bPK;tNqG=DA!8MQN<0Y;R<XPYN}O]PHN[OMP9<=&YOR)96f),5a/p8k0L-A%6%8C-;0Mq;3MpOmQ #o=tMNCoK(7W$j.W!>FyP^P6M[?7PEPIMw#G6i!wOcM<1u'IH2N<,9.W!hO~NkPoOLO`NHBn$L#IQ(+C4uMN%k8w/oFrP})pQ P]NoNJ&hMM%[8iQcOC9h)7&#GcNVQXDEP^OZ1y,CO=(pO(!?A#;#+-NRNyG+QiMZNDP7OMQn%gNM7yMQ1j9&A2*rF{QyOIQkR/Q[Ma/4-gR!Ma,~$OI&7W6d8i4VQ#M[PGQG*{QIN[DX)%RD2?OYPf2v+,;rJUPD*{QER.R?Pq&1)3AqO(,;L*N<'UNSCXQWR<QYO_P_/k'_Q&C0Nt2@IkQ?.V79L9QD%7RNPmRQP$NI=XP(23)@-f1)Fr'<)i'QS$R-O6QZP_&!(XR!O?Pf(2Gj79?Z(7:0QhR;PZR=S4Q}QLO<&hL?,~*q5d;r2#=v$a*~Q2R/P4MtP4S2S H-Q`MN!?%/I&3Q%;'<%?PhR,P[R>Rr64QM$'% NsPSPy,s4GCc>:=~;T$bPaR3%RGjGD$j1u&S*~R^Q5SSQFPpPJ$pPMFbB>N8#NJmN<9sR8>LS1SgSEMXB~O=Di;#EN%'N;%OR7J{-mSfSDRqQ}LmOPMM#'3l%;QtR7%E;'=}>,-FS7&h!U1%,[4.Qt2#?H@(T4TDNFR0QNQ(FqIkN<6d3WCMN|QjRpTaR?@gPN#rTI4;OST>+:MT:B&S<n<_>;$`TT&4Qp%.#N;!QtNR4j$I:GStTR/4U N6Sn;uG})I?!O.?2JUT%O!SUAuQ7SCO73u&uOPQ(=kOyT?22&kP0SBP~TmRLP_RfOeMlOUNw0K*Z:qTCULPlToUO1%%ZHTTg22Iv1WT_UXQ|T7UOTJ0;Tv9K1*03BfUWT&T6NVH-=YG,LsKq&~2>#T'~NFP2O4U=S3PnNn8}EEUBT;0p<XQtQ.204.UpRaTEUg?VO(1LHkV,226o;PV0V#TnUN<=2!Sn+U6JPTU54y9eRnU>UqV2UsTGSlP;4G+zJDUy.V;RK_P$U~DQR_P5S P7Q:SlNM9OGIJD#'R7N9BrV<O V>TFM9R1#qVAT;LhK?#'Qf8NNiTkSXO^VlT7N_VaSn!H'3VtO-4y*hA9NjRoVKV|VMVnTcS]3eQR!8R{AeVIUKW,UMSFO;Tq6|0)MhJyLs'U5T&|M4GrM6KFL[L?Vn>>Ma'I&D@#LeWCL4L->H=U!=?U9UW?)pQ+2uVd5T'*,MU,>IRdWYFoWO@XS+!8W`AW(xTQWe)2Wg?/Gz5PO@Wk%=WC>):DGFP#+Q@-Lg@/O*TpAq-T'IN}!i@4WyGm)yWXWp=U'/TqP8HS$,'U5i!fWz3l'(=T-$X3Aq!UX)-a-f:*WS*Z(.WVX?Ws!#8JWu48W|5i2hGm2p)+;*X G]:M<NO*@/'rA@M|BN='N BRN$BT R I V I A=;(r5=1$(KG+WRGm8u>nLxK.KbQ^%sWN*JV7WBXT.f:tLjXxIgXz#FMMHc3eX8+UW`2p(=;*X]?zXX%]X#I-MM/4XL$dGS%I#IX8*+*a5S2p7.G2GsROMqPmFNY34-(X@1Xa!#M~BQN##EBT e=1  BW tBYXm>cY*WvY-6fWSIPA9Y3%,Y5G9NCW}X&V@GS/8GG*.+hX.,;0JYFW}Pm?z*{YK0]%*@dS&YP AYRN!BS!#BU=3=5=7 aY^%gL?@E5_#gX,Y/%!R:YgGH@bY7YGYmSlZ04)+TWxWm#z>kG!W~<MYjP#X%-F;mWZ'qO/KqGl5S@KK^WGJrWILKH-8gJO8BIxZR(L4*M'ZWLZZYGyJ]/9K?Z`1C'+XwKxJ1GfJ3$SM0FuXt3QLwLXL;KGL&%sG(HFKqKg5D0.ZxM5ZdK!L1DIJON?LBKr0F&E%6ZyLyKyHP'q7SWA[/;u;{ZnM)[5SlLaAW#RX+)i+vYCBqZ76$GMYz*yU=[2G3H<I GgLcL*K}//0/Y%ZoJM%gLa+YS*;#[E5(302&Ip[KS#[NMEIKH-&JZrAX'4?o[F!cLCAjH:[gOq[iH8[QH?JA5_RG[/;%[&ZVKw[>Zp[+K&/>[.[#54&lHj]%LY[)Kn[6HFRW[VS^Q5[3Y&](Wh54(pRyZu5S9q&|:o];[ZJuDYHQ'=<xI8=M%#]0J~[4]=Z}Gz,l&JZt[#8u!v]$]R]<[[]UJk2@[U[/)?X3[=M7]4])9qKtK?]-R%+v[Y]']aD:J3)i?ZI81C!XZU]_]HL=]vHQVh]A]-?:[O]1ZzWJ[RH/:0GV]N3l>G]iZX[*]J&#$SJC]N2g]h]G]t]I]b04Vw]oH 1Z:)Zc]&]j[?^78(%=[!^EJGKu['^I^5]k^L2%]MK}8([P^4Ze^6^A)y&L^D5n,%H7^^]3^K^a2 ],H J4LV^H]2Km^jG<Gz4j-M-fGX)e]C79^]G8MJ[xQHV!Q624QxGOFM^-JOEb^dX.(K)3^h^s]T^#'q71] ]ZO/]QKR^?^!H.J%I{]Y^n/*]^_<^J_4_?JwKPKY]C*2:w_2L<Z|_5A%OB^Z)P^R^*]S]u_I-?!4^m^e,}(v]s_G_[ArLO'=:k]N-<*w_d^U^t_I0c' [9]Z%!]r_PZ{LL_]&K<B]N(0)<_X]~_=_R#rIB%Z_.]CB$]}_F_o_HI!0)*`J_]N6U%G_n^_^VI[I#,*>W_~Sz^q^+ZfK%7_L5^ZM>^)`$_e^@#FIB4859_L!J5E`-L#`K_>`1G)M ^O^e'S^3^>`V`&`X&SH'_8^n%*WU_x^,AqGSEr3.L6XtV:LG_Y]``L#rZ0MO'e[.Z`&~Ak`j`C1{1$*2L-LRW`J4!B_E`U`/H~&!7(<=La8R$X]eLSXt@l- a M8!<a0a#'q%?]yY YC,5`7a:M*PLD9 A[^)YVdLe5|6:!B`I`.`9Ig+PaIOdLF({&]4)&|566`,taFaU!T<s@{Ns^MUca]7T!X*Z*Vab_HX_R'.aRi.JNfS/DaVyT5VLOaSGMcSlY*7kG@VcWz3oIGX#HZ;~ZXG`YMRS!1a2RJ%0>|Wm>AKuB)YGJ/b-Lg7LaeNa' ;RHCQSV9D|:`0OSua=Q_TI)y$rS<%O8k9BQ-W7TlW9UYS5!W4pOcT,$l)ZbN9hQ)#xVxP bUUfUsa}VoG<Mf0:ID$W7T&S487Zaoa.!N1%C2(WNs+Y-[I7bn,923Ol`A_ZI@B?Y;$zNs)y!XO+24U(_l<,'0%uZHYzGt&Q8ISk(9TIFt2!Gjb}Xt&KGpbsc%$H4p<=&SNs8R!:HCc>_M:pLW^S^r_QWK%H>.)%Rvc*]ySaRk9B@o_3GHR:V[SV_%'r-0Gvc7SHafR'B7IkcL!J2%&F`8^iJ#MyC2[m&Y%OWC*POY[s<.?`*pNUbF.#9@%&Kj#[ 8%B0:;!,K)`#|ASYc%T>W%*$n%:GNd(4r$t(I9BJ|'#NT#QOkIT-9d#K6YyR.%:VRAi'_46d;46J{W|Xu)m!E@F!9:o&EdE-0O5dH%*dJ-9dL 9$t#s!=$|4x,L'B23#OLwdXYhdFd[Opd^NU51,r<;3jdc.Q)8-N-ZVR!vIv0 AidY@/R_d];HdsRKB~db$L>s%K/I3H-Z%a&S)IQ5dmdIdZV!e'2!e)'_Lme,?~U$K],sS^U|!v&y_m;HBhdtU;NldmG$=YdM)57H*yAW;9d~8)d$T|Su&f!Ze@G<-('i2#eEb~*<){d^eK<B_%O^e#G9Uubu!we` A!F!3d=dS1CTJdA)Y<|dDdne9PET&e8GNe*!t<b*)BMYQXcYSZ' A ~ < = > ~#4 { n Z A M A   E S T A T Ef6 nf1f3f5B]XnG<*g!g@meV^{e4U%LW,YF|ekf#V]eOHH=Y+a$bes/R8iKLeV(yL~$XKufTf&caT$M]enePBm07e_$tf`*tQ.0.-Nfeeh5QP2T=eM?f?x$a.[/ldwe-,#7%&l8k8i6-TzPgf '0dtDE91Y4&R'pbvg%?~Ad*,eD:p%L4jNzeiX$fVcbfle~fn#[es(2evJ{3.fc1P4G$9fgejfjQ1gEfYeie+$'1*ev,5Aufcg>J+Zxfh%<gCfkeN-pgX&!WUeR-W'NA2!X(y$:f|g-QVgAfUgTV1fmfZ;;)D,Cf_d<.fT^8(!:gO3o`i2!gSYyfXgieJ&1#Pg8G<)x-99hS^fd^X?`RmG7Cs_#:S'0CXh1h $t%h5P#x-NIvdS&SAGdlBve(e%YIdqhPgee>g~e_Z#Z%XeYU!# P L EZ$ E   N OYY O IfBXhN+   O N   T Hhc S Ah` S   F LN' RN3 AN5!#)Zg];cRk9)'B)'>$%TRKg|?'e<g0!XgY$Li#!9)zMTi'#QdUd i,gwB;i/G7i1e?gZ&iF2/S,s9)$j)'-Oi+cfeJi.dFe#gHgZ2}eYg<,wGm0Z%8fSh,f}i@iMh+iRi3&w@FOxiV>k!cd|JpgddKh-emgFg|FAh3Trev_vRkS^JC&J8E_wh+gBgyV#g{gXgmi!-X4j/teVC$iz-~]Fild`ingVh/iaj% A#Sev03GVj*'4c}T i-gxj1ghi`eQf_,#A2E?ig),!c9JI|j/eLelj2jC$ej5!kj8+FQT245n6:(7e$i_Poh?i,e8ibCh'K4G!l-N*<j+1u%Xg/j_f$U=hUX^g5j5(=ev<K?Z`diW5S6~`zjniLj`jqimg4$ujud<0U,9TOG+d1%[e=j?hQgUH$fTgFjd!#%=!3*iMA!jS^0/dT` 0xi=jri^k!gGju&i#M/qiw-a562p+8k1kDjPjBeog}D(isD**i&~8kixb&@cgRi~jAi0jRi2]U<-$?eVD-gq-jjMi]kSkdkUkf]v%K9fGEj*kN;zikkofWiogWh0iB%gdd*qed-a5(={,nkCimkEj#h0ju%h#M#S9&BHl)(KVWi?k!f}jagyjcju&wk;+i?2%06t.|Fye7drk2k#hTk%X&es*pk:7yeFW_lE4g+be~f%[LS!f%jrFSe^is04ev)*<x=M'rd0TtO}lZkFe'RPk%f lO29-X#MiKdT4*lERVN@j0i=l[RaiNfmksetjf%N-Ak])z1Pbab(jNgfk3kqgG-ter29,#4M!99sk^iX.faai}j@l.ipgjRAfq$L+:!3Pf3rig56.W5'kQl-kpjoiqP9es$ImG/,C$j*cz,58$m!fikcmQgX<SlP&wD<;-ey5Rj,_)k%m^l~S3m!k6mc$tCi*/8wS^kki51*k4k|gDkTm22CmD#qg!Wi'emv-~d0.R6@l,j0m@l iamrQ_m6+91P$:D1jKWlJU4shAdSkp_#b{h=<RW<j5NH'I.aGVh&mx%!]hn<:8#IAjm}[h#N>G%T?+a/4pmT#sS:0x*o2.ly'}74df<PnPkcn@nU_A&17(esVA;_/dgrF;#QOf)<n;'+HHngk$SNg0eu,1m4e-=gTO3.]mKL!vUKl^lp#W_&g1m!$p1kis-A>xH#iVn8Er@(n-jOk}jQkr!tRemT=gB(n(<X!c%NJ:m^kRo<m~iqn2M;j'&yUcj*l)6))UoImOoKm1oMnDes=YY+7l%{2.(@Of$PFy!lNlofny_$$x<#ohNIf_oBF3o6jJ!ldfm{kbn/j3f[o]iS@33=m9-~lyXPk{oymPlmmbo}mEme` Bf$wMgY!,mYfRKmmm`mpeOo0nY$'!9<e95m)c2p3!5gcm|ggoZmB#&hDmE;pIS9&m:!EOf'q=o,.Wq!T_mj5?W'I&)MTixmKNcpT;jGPpXmdmG&yAHeVAu&JG-X=bGU-(V(XpfnGPwiVpk4JN|WdWWpe29lA;RexS^pw9OehX>-4p|p-p /qh7({XT;Opb<pFSkun#i!l2m'W|oSiX+-X1.3dTq5j6=g&}^{j*fwAtG`pzq>_cj5euY+!b(@5E$j0L`id!Yhd6d5%<d(mchYf-Z&XfZ( o r i u=2 F i!+!-fIhEk:0{p05E5n[d6]d'd#qWd&-y'_q[f+Z$q^h[#^!| L u n a rhxqh!,Z.%s-74MQwigfw7-oxm?p)l/n1p,r,mGVcoDLf7omNn.r5mAh0oN*(-XMR'A.Vc-iX&)7Tlpllj!oWd`opp=-X;Ao%jjr1lGm_k&Rpo:i1rD A/qmVnTpAg,=v2Qr_j h.kenEBB%k(P*qqR,gd3qu*5d7qYdap=r-:0*n,%dSn9#A*sqUd7rwqXd'rz5u'K5B[FlgVdo('dr[k Y6m.G&o^%/=u*^nJm+8|*63Zlb*hk:,50]k=-a%LL~%w3Y:/j5$8k:<DrfsI/,-+3Y81q@#tk:+UD1j*sI_:6AJOpKr9a?4-NRix(P9B)`5VF-8#prY_!3&6Phq:dT6U6uFkq4o2AB*+Qcj*qP')Fj9Rpqq@nF<V:V3/24sio$swt$sysN&i6?AHs0$jgPt.$o/zsXt2#zjyjjt6)** 6!EEo^t<%F0Y(<-N7}1/E-*$7gf_<?2uVRj*'BBC2W8cf^b sq+ajjsi1SF!!D-Gs9=g/To6ns%*0@:$q?is;p+C<BmYnsC58T%qf]q@,#CWtpmwlyN9E8q@O'3v$xpO-~qqN9/<rjm`p*l0esu!I53;kxnsoGX rQo;nRmau-'u&+sq9h6U@^fQt8&0tvsB&wtp20@m&S2 9lg$sNu<_68)8kCKuIde!9SRrM%,ojIq$PMsOQt:is(OsqtfsG!ksit#s@8dqL'Kd,D--?(7(@@F!v%6/p?7d8A]LZ7Z%Quu'p9xf_'N%j8]ZluTR%2Wl6H&F>Iq(O:25'u})vespZ0-[`kjm+*mpEp(oYu9ial#2nrFE]f|0?GE]X4-r?u7pGv<epkWuNltW#%avCth?_vGm/gzrBv=Vns9g'J^jJG*l)J{aEm>m_ozkev>!1)<sPXDYCdfouX<v9r4v;u,vXvLo^$u!J?m)k/TA40o)89^t$$`5<!1vw^o5qc@<h*;(14u8cw$et;[`}&|!KkZ/e,$Com]EJ'5T3nzloPEFN+5Qx!6nQs:&vw1E]!Yw5#|,$4eDQwC:^V/f#&/!82_@9MK+&'a!JBe!u%J#g!938k?''Gp'2Cs?zwOO`,~k7'M*)wZ*j!Q*`GG0E1)Yv%ODQLvGJ[i:Z6x%O$b/O.C*Hwm!v8va<%y=]%unbNUwAuY+KdGFNwhwTgTo0*GOQlFD`w]HB.NQ)9N?swdt!D4x.BhwA4%o 2nwYRV4bd|=A%/79PDx-:8EJDEwhx?LN>Kw/bx!veg&M5_<,1K?2Fyw:wcQxw>xg.KxVxCMK5;1X!2]|({/$G2x)ieKXZFYh<nGKFNu5+u0m'H5slb*)x[!@&a&Xx`0gl+wVw;xf[MolY{xj%1wO_*6ixY:Ovx31!Cijtb$l&`W)x@wVxTx/y-'9'M!4;[-?!B#dbE.N7}?py2t!d$xzxkwchVFlxG!1y$Q)399OD-ws#by+xdwTy.FNxh&qy-xk_*8V+2y[VV)kx_.N9$u)y,xenSyh+myeykQ7.[.5'uyo$.$Uwqy),x%6ydx-_#yyw@w<$.wD4n=a*fxo90:DTO:Y#tL,;2ydcbwQy1wiyfwenC5StY5u&Bco$.x:VR!9CoYBywxRwfyUxV'pu)&v$e!vk,!YTOy`)EcpR]lkywy3Lw^GnO){y3V z0G]EX1nq]BPq_h] A Dhfhe Tf= Nhjr+yZw1l8JU$Pw*54,~YKzjwx!oyTw{dl-G+a3)w1Say;H'w*0cr/%<{'6xlKFN{(w}pd2{5uwY8uU*Flg^w_15R+Im`sCOOmLw%$*~*rKuY}#w:d!JB~*9{AQ=!Y/8ez.w&y0`ImAj'rQx04FNPs:Zs%{HA :H{;{ULm{WyI;u--5iFxx<7yHXgv{a%Q)MAj&#{}_1+JdlXW;2:y{Vu;wY2-uu#&KWv|pRAHY~ds4D)8;2&#PCaE|#GN^={R|'{o|){q@~!mxL{vxqx,yAxSB;xUyEa/{?)%wm4,%M4W(1;C%/_l:oz*z/yy{*zcyRMKaV{/5og.4y6p)6d'Lw|YzBz,xiyjy3$?y}a/2mz|5}Zi:BO4__*`z<GE|^y0y/y1|n|_yl($x!bx>8$,&{3e.N*iI9zCyQ|~yg|m|}y4|q}&|b4,!JyLUc|y/>*s|jyx} }4y{|oz1X&'Leu!cSa(}9)yND[*~'jNicA!=wBG^k}rMvmy|!@&#$pg7(Y=%q}YTr !# C A U T Ihnz{yGxo.W&S5^<1&Q%/0tDQ(2QG#c;2_K')KCoh@SB)0.QG6Vo0|NY);[QU+$|D}t7}$8xjzQxB}FBzwj'HBK'Lx7i5KVzKxMd=GGzP}0yCxDwj+a-u'uvwi5ZAm'+!__g+Lw!bO2hSz@:vb-~Q.[9x1o!`d1E&,[x`AdJT<2FN)MR:!vFyTP''nwti{f*e,L'auD+&zXeB7Me2}-PWNU7c>re!{:~{Fy8-GP4p1o}o/I>L~v}t7%zby{~2?'|KxeRdy7$evE(F$:|UtK9Kmo!b<Nxhog3NM gU:o%@~7~Gi3=WLP*ad|>3%.Ijy@b-|I<N! 0 ye $p gl }I |P :0 T= ~- __ ^C yj! . ~C ~5 xW )T! $ z! EF sJ '/ c; VR 0E uH |i || }E w= }C yi }5 |p FO .[ !4 {/ y% CG pJ D| x) [0 p6 }A |l }3! s! p zk }% a< |s wl! g )? %+ #M i/ }t AW hH }0 }# }2 YJ }1 }6! v gk xY y[ D[ !; *i jm!!2 -< ^g!!#! q!!% yz z+ }$ }7 *$ }` )G z# b^ 2l -j! ~! m!!5 |} |[ wz! t }G y ! F |O! g *< 5O Ki! ~ J{ *a xA }1!!X w?!!9! u! D $H *G eu zY xq !m i) zh 0E *q }@ Uo!!' @E!!V k} wQ @m |_ }} cS Ps 'K zo Xd }d !^ !|  W #9  N N*  G }m !f ;[ 6: $k w4 79 T3 ,$ &K K6 x3 ~B ~}!!g!!6!!m .N!!^ 68 z5 `r !<!!a |U -`! ! ~4 zA!!8 DS 2_ xC 0_ xY 1' lF Tz!!R 'e! L fc U8 wU |I l~ z)! o!!J! v u` $c >d Za ?t dU KL dV H' [2 Qc 3Q ;* #A ;2 (= H$ {H V[ ;- t! lH g! n~ ,T $) 57 4k |S (- '4 H1 |F uY n^ %? /t |} @, DD :^ I; ({ Ay z0 y~ }' =Y zI 3v zK {F )i xP |H zR!#L zT <S 0+ ;[ 0- VT 4y !> xM C9 w  ui w/ [m 8J G* !d wJ .N 0: #A ;* x2 K> dp !n!#<!#? y} $c!$L ,K $P w4 2Y w6 &W yM!$Z!!'!!i }!!!Z wW .6 wY %I *a!$P!!2 ]9 R:!$U z? hR!$X K>!$f %@!$]!$m y_!$a *j wK )E!$: |X!#a |Z! r!!8!!6!!:!$z }I ;[ D< )`!$O!$b!%! 8u Wo!#L!#<!$W Q1!#]! o!%, d+ ${ #c!$~ +H!#B 03 kB yv!$g!%( |]!!'!%+ wE!$A GZ os!$E *n ,$ 2Y -k 1x )w vw 7k tB /T x` =M!%# 0^!%U!%. /, *C!%O! ~ /, 0/ .Z!%_ 'r S@ #U _| CY `! )z 5+ 7K wF Lg!$0 %V!$p 0E!!e }@!%& |k!!G!!I z/!%J #o!%- !G $: 59!%v .E #b! u!$t j  wS!$x!%E!%< [] ;[ g( 1k!&' -? 6J!#!!%7 e: $E!$Y!&/!%K [@!&2 o$ !Q!&5 OT!#`! O }B!!H z. wB!!l!&> (9 vw *. %$ '? F'!!2 5M )=!%g!%L i) BI c@!%m A%!%^!%L 9W {C!%O w* 4; (- uB &d .& 3w )% vw >1 &# $Y &K z^ Kd 6Y 4$!&h *G!$L &+ Og #& G- GV 0b Ij wB 5R wc! = YI z. z) YH!&! d+ y] )Q *i Y? .N 0c !5 z< SR ;h yT wc uY!' ! v!${ ;[!&w (W!!s G- YB!&| +F!'& wP wy!!j!'5 zi!!% yF vw x= (.!',!'? )< 7> NU !A!'% lK =p wT!'B _*!%h 23 %. (+!%Y!'. R% %P 8p!&i w%!': ') O} sj >B ,$ &D 2r!%T!$A /p 'S .+!$E Qc ,$ wq 8{ 8H!'Y /I 32!#: v| `d tj 6Z wF /p UH $U!&' 86 -Q!&<!#^!#N!%E!#b!&0 M;  |!(# {=!(&!%a!!k z1 ~}!%6!$x yF!&v &}!!/!%2!#B )* Zm!&.!(*!'4!(,!%'!'(!&1 (p 79 *C!(& R% ZE!%I!&K!'#!!&!&+ +%!'n ov 2! vz -j!%m cx Nj!&V ~H!(0 W{ (+!&o!%m ?1 a*!&^!(_ (p '' 0]!$E Bf #t *2 7e!'m %B Q- $,!'=!%  .N Dv sF!$j d[!%H!(S &@!'9 B3 wT!(u )Z! L C'!%z }[ e&!(| L9!(9!(! 30 &+ !C!&' *J Nt wP!%y >9!(D!!F!'8!$l!(` *P 0  Ok Vd #t oG o1!() Ss!)8!)(!'X {p!%i +  $U! ) /q a@ CM!$< ~3!#! zT sN wm ${ }U %W KX!'@ GC GN OY :0 U+!%H +[ %& T= .A !j {/ /p S@ w] 2$!'. ;f wb @~!#r O8!!$!$X +: ut 7( bh 'L rc {c @c &M 0I 'U !B (K yu!#^!$Y DU!)Q m$ }( D< $I ;F 5_ |U!#4 zO /d R: PU!'D!$i 31 ?` =| q3 7t!!O ;[ /8 >z ;T Im!%! :B j] yU!*&!)s!%9!)6 =H }` o^ wm .{ x* !e %F!*B ]g!&J ;2!$x!&G!$w!%: 4p c& sX!*M ,5 0  4j 'e!*B ;f ;a!&8!*V!*G!)5 ~B ir uN!*M 6U 72 @! ),!*! nT!*U!*Y!*5 e! Nm!(E y. O: }t!*]!(0 EN %z &K &] 0b h$!#p z3 {= l~!(D!)u u{ 7( ;Y ~( *H!$m $S /5 9B bp x< )?!$( `~ I, %R wN Pk {N *v *~ 1* ?` R: != 6[ x!!#2 (p 2Y SR Fr %K Of h@!%* yD e: x1!),!$u 3M!+0 %e!){!$F $q 9r tb <V 34!)D!)7 [y!*y |` mC ua wY !5 *j JQ :j! L 0Z !b QG! S!(- xi!#O /1 }F 'p J: +& zH @4 #S {2 D1 =n ,m R: xQ!#=! R!+Q! T!)x! f!'o 6f '? @~ x) MO!*, {T!)q!(Q!(+!+, S@!*Z >K!+0 0b!$B %? !d s| w*!&w >Z %< 3; `h %6 ~e Yh!((!#s Cr {f Ni jU $_ K+ ._ !G `  w| c! }t 4, fy W* @+ zh!!Y fW X0 M[ R@ *F 3i wY 4M $r !; ~- +J /a ~1!,% @/!+q ~6 Y: .P !h AU 20 S0 !4 4; &Y QG f| ,} DQ u5 TP '5 d4 ol 2! DQ p[ XY &1 9a!*< 'y yb !m m' A  wL *j!+p oV Mv!*h!'5 O, GP 0` 1I! 4 4M )9 )k Qr!*  FX!#= yV D$!*( gk !w 6D!+M!$B ]g!&Q -@!%! Ad %a!$j {)!,]!(} wk bx!-+ (- 5k /d w* $w |R!'G!'C!+*!+c :/ (B l` 04!#C 'M!%` 3=!&B W# %; 0b @l B8 0U |& K+ Pg {d!#a n> k} >B ?: {{ :O )!!,: wm Ok 7M TX!%m 6e 3U!)d!#p!&, l<!)` %T!)e EX!-~!%.!(j !C &X!*/ q  ?s fV!*4!-R!!j %1!.9 /d )v!!]!)h )o ~g #& 1v!%3 +9!'6!%9 hQ VZ vI wT '2 *~ %@!,) c9!*= Vh !d *< G+ __ &K!$* zk!-C!-a!'E!+a! # yY!!,!+Y @( 4y !X!*R $| y/!(}!*W!*H!*j f(!*} 5N .J !Q *B!.5 ?2 Qx !B!*3 pn!%) ,} '(!.> =H y7!,d .f +v!,h 2- oF!,k!!g! a zA }H p= xo %I )9 #U!)~!+^!$)!&E *|!#P P2!*( ,c!.b xo!-< /< Ok!%m +u ,m fg Ec C: H' *~!,~ ~j!+u %` %,!,[ b. S6!!o!-; 0{ :t de ^c ~. 20 SA ,~ <H wU aE v- h- mM 3Q!/6 %: p>!-F hX q{ hZ!#) ([ h` hb     K  E  E  P N- hz  S  E  D }m!,v!%.!'>!-> oc tb!)'!%D!(B!)E!+c!)9!#A so!.R!%M %$ x^ )9!*/ 1L wQ!.x!/M!.z!%H!.=!*9!$3 /D!*~ 1L )Q OT v| 30!0+ :d [F <K 6p!)d xf dC P3 a@ dW oV !5 Qx!$S :f y7 zH 4) *Q ~= tb 0F /p Da!)Q! /!,' xE wX!$B ,* %3 d| '! +J Y~!.w!0X!/+ zT P9!)I <l =L zK!0b 8( :_!/) yB |J!0Z!,o tb!$4 xo `d %  {2 <G!0T GX xP!.8!03!,]!05 *e &1!,:! 4 DO ,d +C k? -K 3e %6 9I uY wQ!.= u] :^ }Y!#v! o Q1 {n ad x6 vw 0? GI ,[ U|!0c!-j %T `P ')!13!.}!15 ''!17 Q5 '  D  :^!1; !e!#S!%V #T (S e2 v| de M&! _!,l wg!0t ~p nD ~9 wm ?1 $9!.3 wT!1X %*!'7 ~z ;. ~|!#_ ~~ :E H7 7L /{ &|!*= @Z !d +C ;s ;1 7& :0 yu d_ 78 uY G# Wl!'' %T Pk 6S u{ gJ ~q! %!.S *j!,g!1/ }- d'!)P! P!$=!)S |L bu! e (s!){ &R!.U %J %9!)N 8)!.w U< `Z!'T yz qO ~U!+e *$ fT 4q!+Y *0!/& .f!-P! -!1] zS!27 1V /{ !` #R %9 ); $? )6!$I .j != $J Z# (] #  ## #% %[ (i #8 (e #1 #3!2g #A (c !|!2k  e (n !] 8J i  E# NJ `} )Z Q.!2J 4y n' F` !v :&!2x #x >j 9s '] 0E -~!'v t/!3# :| !` )u m' 6J 5. 4a SP /< 26!3. :;!30 5? @^!34 %K 4G (-!2_ )S &R !w 9G!30 .R {~ 22 .N 6~ %= uh (U!3D!3$ 6| )` ;f b`!2}!0B!%p sm !T!39!3F NJ EN ;7!3>!-= 'd!3X sx!3[ 7i !k /, >W!3> ,$ %2 t` Dr!2V!3Q 77 U$ oR!3) 9B ,~!&f *#!3P!3/ NJ cx 'j Q@ Pg =]!3? -o uL!3E!3g E% Fr =M!,i!3K kv 9Q *6!3z 9y e/!3| (K a& $l &Y x) 30 %8!4/ uC fp!3{ /J!.i MT +> 4; CL!3!!4' 7+ 5{ g=!3J }t 6: !J sl!3e!4G 7] NJ 1u 'j!2|!4L $S 4V!38!4Q |t `d 2Z >r!-/!&( )Z [u {8!+b!.;!,7!1E w~ )d!29 ;o!3| _l /. :C!4# >1 <[!4&!3Q 'a &l 9O <X!47 Ph!+M 5M (. 6! uM!3] #x Go (y m' AH!,v .=!3n Eu!3p :|!4w 7_ ;!!47!5)!/1 -9!3x 3'!3f (H!50 $O 0J &-!35 KW!3,!40!59!4m )u W# >k!5>!3? VV!3B!3y!5C <)!2y 03 $0 9@!,v E] ){!4Z!4v!2y J{ h% 8_!+M 'W >L!5V!5/ NJ eV!4*!5[ %K R% 0x!5` :;!4w 4g 3c!5[ +h 0;!4<!3C!5M 8f!5k I^!5Q!&c oG ,Y!5i 9G!4w .r 6J!5H!+M -o!3N!5r!4[!5t!4S!(< ,9!5n ,l '^!4F!5W )` -< fP!5n i5 )M!5K!58!6' wj !k 2Y Qc!6! L~ }u!6/!5a !k ;u :?!6! AR 8q!5{ ,3 &B 1O .X ->!5R %K 2% G3 0v kB!42 lc 8- w, 1-!6O 0L!6C 6A!6T 9:!43 uf ?2!4p!&c *2!'~ ta!6_!6J!3^ ,} Hk!5H )< 'W 8o 3?!6i 3x &B !k Jo!5w!'. +U!&U!6r (X!5$ .{ i} 7U!3? 20 5F tk!5#!3g a] Qc 7#!+M ,x!67 4Q ;#!69!30 F2!48 7{ -~!0= (K!&r!3o!41!5$!%/ B8 54 SS!4L u(!6%!5L!6' xZ L~ hO #O xM AW )j!!|!+r!!H!%H!#b!& ! w w/!3R 6? 9s q8 xM!/B $P!3d!3-!72!2y $A &]!7@ >W 0b!6l!5,!3Y!5.!3:!5b!&T 8w m'!%d P$!5q!7E!3q!4S 6) %a!7d ys 0p!5z 6N!5s 8g )`!7v 9Y =w!!2!7z!57 2P!7} $)!+| +  9~!8$!!v -~!7h!4P!3Q!8* <0 [F #i!0?!!2 9f 32!7|!69!8* 7_ <X!87 U| 0b +I!7{ tM!7< 9U &l 5p :+ U% x` j[ 6 !8<!83 NJ!74 fb!1U!78 AX!4O!7_!8Q!2{ M  MT H6 x` 2? _6!6A :;!8*!7* 9? <h $8 -*!7/ 2y!8)!8R N9 *n 8x!7$ %y!81!8Y!3{ $r gL 7!!3u!*n!7^!5B!7` $r!(o %9!7,!8i #I!7D!68!7t $r Ai MT m' xM!,W!8X!8}!7t!3h %k 2# q8!/A!1K!7r!9( :| 8Y Q) M/!8g!2} ;f!.e!8P!9; 4r 0L ;$!9?!35 6o!'a!9C!8d!9E 7y KX!87!9. GX!8'!8l!8=!3^ 2u kw H6!'. *+ 96 ta!8G <d!93 #x 2# 'x GE!7f Wl!99!8(!9V !k 6L!8- 88 %I (O!8k 3u h2!6U EF!3H <B )'!6o .N Pf c+ 6A zV!-H ?- 2p 1r ^y!/C }- 8E 6] 0v 7( 6D!3R 6~ BD 8P .] 6e J' BJ 9T 7C 0L 2M!:1 $I 79!5A (U 9F 7i Y1 $|!:: @F!!Q 3g ]r!7k %' 'S T^ 7# $a *Z tt t9 :%!8v Pf eL!:L LU +v ED!92 2?!-$!:1 F} */!8t!40!9t!5$ 1u (7 %0 7< <l %#!:= )S o1!7k )` wt!:f .& 8u!9  6A =!!5$ 3# U| 7< ^b F !3o 7t!:v xO!:] 4> <j!5!!69 7w E|!8y tb!'Z!5h sV z3 :;!;' 58!9# /4 =v &`!:O!2`!;. 9G 7w Pf!'0!:] NN 1k 3g!;8 Em %= fa!;= E=!:j 0k sW :|!;: ,[ &] 7< 4> )J sa!;I!;/ 4r 4M!/_ 7U (*!)d!;Q!;A >w %' TO f|!:g t!!;G 1c!;[ Wt!3M!6$!:] <l #u!9' 4B!;R 9: >d (= ;u!;M .& DK 1%!9T z2 9  #F 50 9W /e 7< ;A!9B tM sb!3Q 9d @4 !>!9d 9@ Fh 25 tk 9x 9G 9d MR (W!9n .4 mL!+s!&s!:Q :;!<0 1L >B 9'!/B ~Q 9w!:6 9.!:I Wl!8K !i!:M )p!<@!8Q %= /v!<3 &f i{!;c 2P 4p 9G 8Y 4G N: 9L!<F!&l .} D~!<J!'; eU 8_ D{ 9D!<# HS!8Z!+n Rk 93!65!7:!5- 7(!<S!3^ Ml!3j 93 6: ~< 3g XI!9M!9l 3=!8# 88 c* )N!38!;y <>!:n ,m!9H ;e!4A 9w!8Z!:d s} 93!:h!:W 3?!:l!</!9E sv!<M +u ')!<b ta Re!=0!;q +F NR 93!;u #P 0v!=8 6{!<& TK!8^ 9M ?1 3f 3?!=A >/!;T oQ!<E .4 <l 1;!=I!<~ %e 2c 0[!=<!=F S^ ;I!=R!3Q :R )7 5N :U *y $a 1L [J :1 H& {C Iq zf u{ W>!,p :| $u!=!!$7 :l .]!/0 y/ #c O] nw P2 uz!.< !c B~ :h!8  0. :U .4 86 [X %7 %Y %4!!f HL J| M[ G=!=m :;!=o MC /e!87 .4!4M! : o5 O` 7A ?< !l D6 'j Y9 )T!=]!9E +I!<g #N!;*!0_ A9 :L @Q 34 ?< :F!>J 'a!42!(` &) P+ :j xM ^[ q& po pV {D!,q jg Ph!(M!#B $O {9!>X WW 44 ('!-$ E4 ;8 {# 5p Aj #R Ec Qx '< ~d :? ~j NU %. }w _O!3I &_ !l v0 .P!0V )p {f!.F 2@ w@!.Z!=v %W cq X7 ?s!-! V[ h2 MP!*8 rc!!< 4S!9& <W ;C Im!>`!>T '2 JC ti A- ~@ qx qV!1^ Fy F> ;. cS 4C /{ 'a Y? Pl Fs!?8 }t %| h2 q' ,r!71 ,T wY ?o G@ 6f!8M q  ;* )^ x. DQ!+, %< I+ C? d^ :E ~#!#q .[!;. .m 4Y Wl uY 7.!+% T.!0L w| X0 %<!)_ $, QG w` gB ?` )+ :o {N!>{ 0S !G -Z *y!>_!4L ;f!-w!,n zB Ms!#P!+v 7|!>[ FI HC!?K!,v Ml!0A!.[!!h!<6!.]!#Q ~7 1&!*= as nQ!(m nu T. [u!#w!$& /# PC {H CN xs!)Y |$! c ^B 4S !G J9 Jy s3!4L %!!+9!@'!#N!*i!1^ kV J% }'!'e :3 |;!49 XF %W KL!0D!+- ax ca!>* %Z QG!$S GN NH ,1!4l !1 ~[ Z@ He!@0!5o 'e!#[!/K!!(!,] V[!*% 9}!0N!,q @4 !: I&!@Q 0b D[ Aj!@U!'4!@W!@8 !N 7(!?h!3} SA!;P!?L *< ~% y+ 9>!?C!/M!>r ;c!>t y/ (O Mn v( 4H PK J%!-g!-V!&d!?= K~!'. *q!+'!,3 lK!++ oV {( T) 1& *) #I _0 Qx {] w7!80!.H!-`!.l!-`!-d ON x!!3R Q) 88 ,x =] TW $m 6Z {.!4? :B !6 7! ,x <h 1% 2% sK!Ai #Q!92 EI!Ad -*!Ap!&w }R!='!4? *. 'e 7a ZD CY!;v Im!:`!4= !E!92 MR!;v 8Q y&!B% 0L!Aq!A}!:m LE!;` ZD wK 1% 6U *0 6!!<A FV!3|!*d!9#!B7!!M 9W 7X!<-!92 <V 8;!B. !f!B8!+i!2{!B3!5$ <V #x!BA y&!BL *P!0;!BF!4?!,e *@ )o!BK!!M!:D!<P 5X!B*!A~ |z!BJ JC nG @l 0V!BX!:m :B +: #g!B]!-/ %[ /v!;6!&g!Au!4? Q) SQ!BJ!Bq 7} wO!B<!BG 2g!B6 %F =A 0| -@!90!B)!B=!3% 4[!#X!Bf!B8 E6!6R!Bk!5$ @4!Am!C.!B_ :n!8|!C)!92 U) 6p!Bp <, )J #w!6H!C2!3g ie D1!Bp!Ap A2!A|!B~!4? #a d/!BJ!%P `z },!CK!:m 4[ %'!BS!B^ Xp Jo!;w ~X!Av G* 7F!BB Xp 8B!C(!Bu!Bc!Bl /* 7; z(!!M )'!(W!BO!CD!(j!An!Ay!Ck 3o!9r!C]!CL #z!;M *m!C%!B !/T!CC!4H D<!A| .] :.!Ck u(!C9!Ce!C*!3R 5a !A!B#!BT!Ck 3_!6g 5,!Aj!Cg 0[!:f -^!Af!74!9K!At!Cf!5$ >1!88!CG!!M Ft iF!CS!BP!#7!CW!CP!B, 6M!D<!D*!30 D<!+O )o!DI $W!Bt /j!Bv!:m 5a O4!B]!DI <D!Ba 8}!DM NJ 4y mI!D$ $x!D9 -Z L-!DE!CD vA!CW!Bq 5B!7&!DL!BG $A Fr!DZ!C% >y!(p!Dp!4? ${ !f ),!DQ!Du 8E!C[!D4!6~ t!!Ci!C$!!M 4[ N>!Cn!4H 4y +5!D|!D8!E(!+J!Cu!E#!CD ).!Bo!Ao!E( 2g 8b!C~!4R b^ D| i&!Cs M !B(!3C!:}!4( ;R A !2]!*b 8)!EC!3y!EE!E, $A T^!EI 5i /w 26!EN!E= I$ &| %0 @# 'I #M TW F`!-9!6~ Ki fd!EA!+o!E`!<R!CD!EP #|!E[!@v 3=!Eg!92!([ A !3#!Cb!EK!E` +q!Eb!E? 64!Ap 7%!Ef!EU!Eh!EO!D/ pQ!Ck!%a!DT 3'!EV !_!8>!'> 88 %& T^ X) R%!8E!<7!D=!8H ;A ^{ 0c ^N!BC!,t!D^!Cv!<v X, zh!F8!F/!B& (2!E3!DV!<m K] w, 7m!56!BC 6) '~!Di!9a Q) .  7;!9+!BC -< /$!E<!F*!Da!1|!D|!FT 1$!CI!<j F-!E4!9a LU C$!F8 ;a nG +4!;l!Bb!D*!8e!1i!8y!,,!C7 y&!FE!F4!9a 4[ iF 6q!Fq!F_ /,!Cd!DU!Fu 9. g)!&)!;2!B'!B_ ,* 2A!Dx 9y $9 NJ /Y 3;!F8!CP :B!:i sa uj!FG >1 )9!Bo!F^!E] 2%!%f sL!=S!8* )7 1%!Fp +u!Af 7% G8 w.!8Z MR!?Z!Fy!F9 Xp!'k!9i 4`!G5!F5 u? 7a 3Q!C{ S=!F' 4B!GR!9a +Y!3I!GL!CP /F!37!G>!8Z de &z!76!4t G> ,5!B;!Gd!9D '< le!FS H'!Df *M!D( 0k!G[ %s!4w S:!;` %`!Du [;!C[ 1m!8Z!)W [F 2;!Du 20!FW!<#!Gw!FY &l $O 3U!G0!H' aZ!GY!GQ!<~!G, Dw 5_!F]!G& G> $S!=H!H*!H5!4w de VT!GL!Bq %I E&!E~!3$!H6!!0!:x G!!Af E% 9* 6N!F) #r!Gy!B:!G9!H: WO W# /M!HP!F !Gx!3| R%!Ds!GV!E1 24!Gu!F(!H[ LM!G- [8!Gh!CP!CU!G=!8F!HQ!6P!H^ ()!G% )Z wK T- 9]!G4!<~!Hp &l Mp!FJ!Ht =O 6~ ,G!Hx!:Y!+3 Rk!3) n]!F<!/f!Dy CK 8C!3) 7%!D;!F3!7(!4H K= @#!3k!CU!As!9_!7}!30 5# n^!I7 *2!FN!7'!7` 5'!#l!4K %K 5a jK!8c!BP =[ 6d %7!2J MR 1*!H3 3u!I;!=1 3T l5!2J @4 `R!IJ!3g 0F %K!I'!IX {r!GP!IS!IC XU zh!3k hG!Fk!Id!92 `y O-!I/ U4!I[!4H t( rW V^ 4a /o!BE!D<!I3!5D!I=!6+!6O %I +J!EL!9:!5j!G- Iv!6N sF!5f +I!C1!Iy!69!50 2Y :Y!47 5R!IG S/!F<!#d!5|!2y 38!6N!8h @4!J!!Iq!5D 8(!9&!6x 4a 4) &E!IR!-(!7F!6V 6` S0!6! ${ 5x!J?!5N #S +C hK!5e!Cl 1!!9L!J8 #S .f eW!5e F2 !:!Ic!JH!3$!6a XU *y!6! .{ ^G!6I!5:!4S! ' (y!JU!9O!Cu!I+!J%!<w!,G #h!6O @4!Gg!Jj )%!6V EB G+!Jg 4U!Jq!3Z!J.!3^ |z!6d!IX 6o!E;!8F!5s!43!9* -j!JC!5f K{!JG!Jr!6` lc $}!(v!Jv!J< 2V!K# !u!6} >c Mc 7% DP ob!*! =O PA 72 tk '_!;o Mc ^w d{ 0[ FZ 2? uJ 9l!KJ ?j!Da z8 ,9 (R!KP &_!Bj!D<!KT NL NJ!KB ;7 ]D!+L ,~ 8E ;7 :s bF aZ!)R aZ xD !B!=} ('!>p 0. 'B *B!KP ?  U8 ;! B|!?N Js #t O7 D' GQ!6`!Ka 6) n^ 9q!D# 2z XP :v @: @+!K{ KF!K} M[!L  &u!L# 4K %k!Kt $x!KP ^z gU!L, ?#!L. I/!L0!L+!Kp (s )Z N[ -N!Dr DM MO 9> :s!L< <K!L> C+ >*!LA @y!Jc!Da )Y 8]!L'!E[ Mg 0; <H!Ky!L- :`!K|!LP!LK! U!K?!Ir ,g!7n Pg wK ZO 'd!J# 1U!6s!E= p1 ;9!9$ <l ^p!6S!Ld!E=!87 AH!Lr JG!F} *E!Ln!B>!=! Ph!9$ cx a4!6^!Lv!B>!K/ !5!GU!2J (;!3 !Lu!9) >f @^!9$ LE!HY tM!L~!3% ?1 %'!Gq %.!Li!EX!8O!J-!Ep FI!;)!JD ,[!=Q!MA!4?!:r 9K kO!Fh |7 4H!Ij!Jb!Gn ${ #u!>D!J< ;u!Gc!K,!9k X} J_!8q X6 %#!MP!K5!8H!=G!8p #T 3; NO ^X!Ll!9U!8Z -x 47 :U!.W!Lj )Z!Mj!Ik!Gn #a HI $1!Mg 0q!$0!K4!K$!8Z {B G+!M^ I)!'q!JX!8H #i!6@!<W!2J!BQ!*`!N&!9a jl Sb!5e cx !:!Hd!9j!<e J{!9P!N2 8[!Ja!Mb <d!9  g.!N* 4a D< !G!Ma!M}!9D (= )I!3=!J^ .f!M6!I:!8~ ~/ Uc!9$ 5i 3p!Jz!FY!:A!6.!NA!IG 3l!=6!7;!IT 5) 9M m' 7T -;!N< > !Jc }(!Es 4>!0z E' 5M F` ?B 6{ |* qX 6: ]E =j ~P IT :v :4 Mu F: |' <S!;o ~[ 1Z!<d .]!*S E'!Kg!,# Y$ %W!Nw! =!>* O3!?D {e!Jc 36 2M 4]!>5 re!KF XP *s d> :s U+!'U %8!@g 0m ,c!Hy!O2 -` /0!<4 %y!Hu ,l #A '7!/N!O>!>)!*U!.Z!#v! ,!/I :p C^ &~ :P 2+ =W!/' [F!,w!'? !f!,?!O*!O(!O<!!I xv!OT =H la!42!OC!K* w_!'> >3!C@ /p! C UV %7!Oc w@!Oe Ys l` :g!OX yI!-o!<F!.| >{ O) LQ 5* N{!O9 |1!A; nS!?& <A!O?!?* Pr!L3!Oz 60 /d!2?!Om!D0 ;H!Oq!Ob qv!OM *z!!f X&!6`!OC 0p!0v )z >{ }: *@!P$!O.!O* W)!?+!=u *k!P+!>)!.w >s!@n!O1!OY W# -m!,w!Bg Ui!9> *z d_!OM!)O Cq _#!$, 1`!PN @)!,a @,!Oi!PS ?2!0b!P4 12 %? eI!O:!Os!P9!Ov!P< P9!P>!OY )* GE!O]!On!7H!#;!Po!P] $!!PG!P; x~!>/!Pu yI &}!=b!Pk!Bh }*!Oa!P%!Pq!P,!Ox $b!Q&!.g H'!PA!'-!F_!8{!Q-!PG s(!Pp!Q#!Og!Oy (9!Oj 5j!Q6!O^!I0 _O!P}!O) Ga!O;!Pc!Ox -g!Q3 1Z rH &f nT!On +( JU!QH!Ot!Q.!Q>!QM!PR!Q' MP!$$!Q*!GB!L6!Q:!QK!Q<!P:!0H!Q?!Q2!P0 2- SK!QD!On!GJ w|!QW!Q/!QL!P=!Qk!G( #|!Py!E( Sa!Qd!Pp!Qf!Pr!Q$!0v!Q]!O3 w: 1u!JB 4C 2p!+` )< ze!>7 j{ <A!2%!-  x, lX!>, Dk!Qu (H 66!$o!&T Z3!%S!DL!2b q{!2d (_ #%!#q!2p #, (l!2l (h!RE #9!RG!2s (`!2o fJ yG 4r Ad *r!,> ;O ^e ;u 5q!6r 5/ 4r A2!+Z!O! KX }; df!L| 1U 1H 5  7c .X %V Zl ;P zI 6V q= ,A!P<!-H !2!ID Dw Sv -j d0 $l (W!H  !N uM!:!!K& 0. wp %* 3; Za i/!38 +q!R~!4@ up ;T H* ]C *< 8O 9+ 6C 2+!Rs `d >Z .R +5 5n Q) 'I!Ms 5- 0m )G 3C ?I Wl @p!5T 56!9=!BW!8F Re!*< 'X /> %V f| /p!9A!I* bu!!+ bx!4I (.!S8 :?!+I vF!6S!S?! f!4I )= .R!PY (p ?Y!K= ~0 yn!5b *B!S-!-, Gm 4j!Dw!9_ qs 4q &l!:N z% kv 5| Of >n!?O!-e 74!Sr I$ +u!.3 h8 d0!-O!S1!=I!S^!QA!DN!+8 !; .R ,8!Sm 8N!NE!+^ &%!#' f. q` fA YW =2 =4 =6 =8 h}!2w +A!H- ;T [E j< /8!R{!BC 6^ 68!G- .a +v 2p!,U!-+!H~ XJ ,A!?E!TG!RQ!;^ -j!,g 5M G+ &Y ^<!K=!:  u;!B?!K0 2p %  56!-<!<,!H*!S3 5g!3S!=;!TA +  #g ;v wT!S= o?!Th 5=!> !GD!Tl ;9 3$ AX!SR !u!TS yH!M; ,L z[ ;f 3. &Y r}!JG y6!T} Mc!EX )[ 2p -A!Ek!U. $y 6N!S|!:- 77!M. ;!!:L }.!SH ta!=S 7^!<o!;2 tb }.!MP!Fc!4R 7R 1v!F-!0v jj!Rd!Bb!2K!3] 7D!AH 7U $a Co :D!5!!D` 78 + !:p!0v!)`!Ja!,O!G? 4r 1Z!UP 8x!UR Pg!UK 8} BK!<m D{ ~0!NA (* AG!Tq!R|!U= 9V %! 6J!;N ;%!U(!<8!3] U* Wl!M,!O$ vo!KS!Uq E* 3T!UY .] 8u ~b 8p!D`!V# '<!G9!=O a%!T{ w#!7t!Uz l4!:] %I!9} 5r!D* 7w!)W KL!:y!MW!M| PL!=S!V: u?!MD Ah %2!Ne!V@!3Q 7w!$R -m!;~ %*!TE!<$!;J 5! w8!F] .4 DK 3z!;Z!VA 5! $>!U| [1 3e!VO!;n!:@ I$ ~ !;W x% Q0!VX!VI 7j ^2!V] $l!E}!;-!VY!V^!11!;W /Y!C}!<c!;e 84 +u )i!F@ .& 0: )<!Uo!VH 8e!;p XU!H% .& Kd!6q!Vv!H5 50 a`!:] -` :V!;@!W+ 8M fR!:] $w!<! ta!VP!;S &E &D!VD ^o!'l!W*!HH 50 ov *%!;!!TJ!VG!W9!=9!WC!Ig!<q!WF!Vh :| 9d 2p '>!=$ c*!G)!W8!Va!=K 7x Im!<y .4!OD 7M!W1!<% 5! 9f 7. 9' 86!W_!Vo!Wa!=%!,x!=$ h&!ET!Wh!WO 7j!:<!MU!W] @l!=Z!DL!D* 9d D<!?q 9' 4J +f!<-!Fm!Wq %y!W[ .k .a!U;!3o!=/ 9U!W; Uj!NA +5 as!:t!U_!UF!Dc!Uc gp tL ta!Ea 9U!Uz!,f!WS /, :#!K^!X2 90!=*!<* ie!DK!WV!Uh!X: sJ!9Y 9M!V6!Ft!UM!XI *P mg!=+!V/!I$!9D!V+ sF!We Jc!E!!>$!9) 4;!O#!:L 9W wx 26!,P!<m!)u P$!=W!O} 0t!VG 'I!V! oe!B[ .& 4; +:!Xl pX!UN 30 /J 8m () 7! i5!I1!3o ;Z!Ui nt Bf 9'!Xr!RY!<c!:G!Xf i5!Wk :@!;` 6~ #u!V? W?!<J!Vc 7T!We!(j!Uf ~X!Wx :i!Gg!Ul ?1 &+!J6!Ux!=B 5! *+ ki!==!+3!X[ 9m 8e )` 7j W_ 9h :,!V&!Y7 6A!=J 7P :R (;!-f!># .k UQ A9!Ow!Nx D$!O)!Q# NI :h!=%!1Z!>4!X& %7 :o 0h *| _c DU ,{ :8 0h!Yb 6{ :R!/B %=!=W!Q` )i!&7 *t :]!?_ @b!,J Y4 nW!Q%!Yr 9V jq #i $9!D| 6~ QQ A- Kj >r J0 A+ ES!Z,!?D!Q@!YT 4F!,{!<) t) R9 [% {{ zb!?*!Ny I/ zM '0 ;'!LB!Z5 @L yb!8- 7F 5z TB!Of Q[ Am!Y^ Yz (*!ZD /( 5! )I lk!Yf +V 2q JU!=f Ee!=h HL!=j!U'!OW (9!Wy 2g S0!ZW J4 nc!Z[ O` :I Js!Z` :9!Zb )% 9{!&T!8#!ZI &)!>&!Zj ?s!Zl KF!Zn :1!Zp!ZS!GD 4-!Z8!V. 31 *s!Zx :6 ux DS :c!Za!:H!<1!VD Of !:!T1 &R!Uq %' le!V% 9( 31!T{ [7!M1 Ba!FS .B Zw!V? ri!:H Q/ %a 8+ #T %z!Xd!Uq!Rh G{!:] g(!Wg!SI![K .W )9!VT!D$ &D!X(!5-!5f!<e!9J!Ws![V 2q!K=!WH!8H 0Z!Br!=$! +!W~!D<!Vw <>!K8 ' ![^ (= ,5!N]!5-!:?!N> 4G 5o!=$ @F![e!:5!<J 5w!YN 9M!&`!IA!M7!X2 Z@!Zf 93 Of $X!S= xm!=n!;T 5~!=E 9& 0Z Hc :^!$*!A9 b+ I/ ~i!]3 jS!Yc de ]/!YX!,f!8W!,H!Y{!/L @-!Y~!]A!Yq (H!>1 ,5 v$!YO %U!5p HH R+ GN F< WI _m!]O Ap!K6 7j }}!1w /, vB VG!Y'!6h 0m!R~!Vy %J !Q 86 n^ e< n` F`!9t!U5 @3 tf!3v!(K!IP!TE 65 d* <d F& ;+ A2!4x #&!]q :N F:!>M DE!>I >m!-|!>/!]t!4R =L (K !<!Ch!&y!W  sA d:!]u %$!^) A2!=c!^, '. ?) FP V1 *z I! <S!^& vh =>!62!&B!Pm!!@ VQ [< cc!^6 IJ pD P! B~!^= #r @j!!A!:* 9f!]p ]q!+A V; A-!>K Js!]~!]| NI!^L [m @E!C! !d F2 (-!&B!0Q!/F v+!!S *x nQ }3! ?!+A Zm!/_ Mp G&!^] <* 'x T= F2 *3!&y KK }w!2# mM!>i %4!^k m !Xx &_ KC! M d)!&?!^_ FE!B, .-!M`!&) ~f!^{!PJ!^j *x!^l :E!^n!_% :O!^/ F0 DJ <A 6B #&!7> k  ge XZ i0!@x e<!^[ |@ $z!:Z!#G yM %D!*d 5c dv!_9 ^u 27!>R 5O!7%!)1!9= z/!Qg!Of!^}!_[ Mp SR!2C!Ow!>' %W!_8!^L me HA #P 4)!G3 )M!/S!2B!P,!_] %2 wD!__ RO!!f!_b!^p!_' (H ?k x%!#5!]z Pw!$a 6o a9!^F!^:!L_ KF!^I QF b= !Z!^L E; Ke #K Qv (F )+!Y8 Lm!_e tQ Dm Fl bn wI Ad!Dc!QK!Q>!_o %.!_q ln!_t %8!QV!_d <U #U!XQ!)1 <f!2! on 'J DU!]B om!_w!_: ;@ /,!^* aZ!$a!`T 26 &u!`+ CV 7d 6B %R!#6 uK <A b-!ZA DE!?v!Yo [m!^<!`F!`_ ,6 pJ .a!`K *|!`M P2!`O!7]!`Q 84!`S $g LU &H ;$ ;+ >I 5W c6!`3 F% EO ;+ Qv!`{!Sn!Nn !w!^L +A @E!Q{ bQ L-!+Z!%g!a, ?k!a) AR!/?!5U!<- $b!a4 >x $< 'x!a1 E6!TE![4!`* 1{ $z!/B %w 38 *u!$#!;Q uM!a< /G!3Z yb!$O!<| 9E 4p!aN!$S!]w *+ 0/ {|!]w!KI ,C!a,!`, 7% #A $Y!^Q!)1!D,!+C!^U :K!^W KF!^Y :H <%!_O!a` Ac!F|!(% ]q!(%!<'!%D!am 1v!ZN!aj b- :F!`) 50 6{ ?k!KB >L l3 &m )+ u4!ah!]}!Zz @e!>K!an!b !_P 'M!`, `d ~< g: ,n!$# #b d]!^G Iq!`' ND!`v!b3 o# E] +z kJ!bD!3@ |4!`# %Z!`% I/!b> NY!b1!`[ <e!`^ AR %S M/!`y tk!2K!bP Fd!a&!$)!)1!_i!OO ?L!]5 IJ!]8 ~j fo!ap!a$ ;A #U wI!_? ED 0m!bY <@!`y *<!_> E= f& b; fh <N l:!_A!_F E0 =a!3v %G #c!`o 9+!a+!`k )' '<!`I!`o zd!`L b+ O`!`t!1t!b2 Fc!#q!!R!`m!c! qw!7]!`q!c- ?s!c/ Ap!a` me!bi!_>!`.!_? mO s5 KF vc dK!b@ E?!bQ!a& h)!`a *^!>s!ZB O} DE!P*!Z>!b@ 8g 27!)1!`H!`n!c7 Jh ~ !`f!c<!cV @|!UT )?!&B d.!YH X@!bo!UT!Wc pJ!`^ qt H&!+I IJ!Kj d!!b{!`R &Y!-k }]!cm ;+ d5 G7!=x X$ uz %*!cu!`w!cw!cA )=!=v!`} s* G9 i. YI ry!d$ 8f!cc!&B!ce!cz! u!cq F| uz %] ;e X^ s:!`j FC :D 5a!d(!cg ru!cp!'$!cF n| $u!d>!cv :D Pf '/!d) L9!cs!c~!d8 i`!d0!cJ /G!_T =N!dO [u!d! #K DE!d7 d8!dI nD!a, vi /G &)!_J!0V |-!dg 06!bg FC DK!bj %2!!s *i +) 6N!`Z!bh sv!_J!(I 6B!Q{!`~ 8/!a! Vn!bo!do!`_!M= 6B!`2!e!!bh Ez!`U 04!`9!a/!du!c% FC!=G!`G |T!e.!5R +<!e  vL!dd ;p!(V!+[!'R pJ q<!`Y!e1 xH <?!;? ph!!@ cx!dt!8F!dv {@!eE ,;!dp!;P!a2!e0!aD!eM!_H '}!dp!S9!]z![B!eL!eD a? 'W!%k nr!?y!a]!eK!eC!`w 2! )*!af D| 6B!W  GQ!bY!eh $g!c' w4!%P!e8 U@!ef!d1 sq M.!)1!]J!el!a*!eT!`R!ep &7 5a ,d!b) .@!a !ev!f !eg!ez Fl!E:!e}!eB!f+!ex pS!ei!`7!K0!f'!d} ( !e9!en F%!f# !C {[!es!em!e]!@p uF!f- 4M!f&!et 2x!f;!fC #r >O %v #U +C!f&!/U!VO sM!^L >d ;@!a/!]J!^C!f5 8c -g!`+ ~[ D<!Lq!-. =j &k!XU!7k!%M (O 7F!fd ;Q )Y *w!GH 8e yH ce!4q!W] @~ =j :X!UC J( 8r #) h^ !&  y #!  N =1 r*  A !/ !#  j =5  e  o  u  l !- (9 !(  l  v  i  i  n $'  B  e  c !(  y !& 'u !(  I!g3!g5 $'  A qc  s  e  n  u $'  e  v #!  l  u  h $'  S  m  o  k  e  y  N qb  i $'  h  i =8  m  i  f  y!gC  y =5  z =1 Z- h~ #q!g#  m!g%!g'  A  O  u  t  d  o qb hx!gG  c  e $'  C  a  n  n  o!g6 $L  B!gN  e N-!g,  n #1 r'  G qc  l  l!g7!h&!h( r$!h+     R ='  h =-!h$!gN r'  C!h)!h5  L  e  f!h: #q!h%  u!h'  K!g*  j  i =6 $'  T  a!h/ =3  t!gu!h0!h$ =1  b!gu    !%!g}!hD YQ  w!g}!h6 r$  n (_!h;!hG     B!g}!hd r'  R !'  k $'!gq!gs!gu r'  L!h] #!  n    6D  L qh  y!hZ !&!h* $'  W!g] #1!hZ r&  a  s  o  l!hR!g}  d  e!gz $L  C  l  o!gF  d!hh!gu!ho $L =&  m  p !+ =3  m!hP!i,!hu!h*!hw $'  G!i+!i/!hx!g|  n  d !+ $'  F!g}  c!h}  I  n!gy  n!gF!hZ #.!gQ  i!i=!i? (]  t #1!i7!h%!i5!i*  m!g7!gx  h!hy!iP!iR!h}  B !~!i,!hm  c!i: #q!hO !*!h'!iD!h+!h#!hE ='     M  o  d!g- r&!i-  g!i1 #q!j!!j$ !& r'  S #/!j(!g7!i~!j+!j%!j.!j0!h'  R  u  g $'  R  e!i7!j4!j-!j'!j8!j:!g{!g^  c!i?  F!i4!gv  C BY!g]!h!!g{  r  y  s #/!i,!hi!h/!j<!j>!hh!j3!j#!j5!jB!hb!j;!h;!hn!hX r&!i7 M~!i-!iM!i#  i!i/!j !j]!jA!j/  a!j1 $L  W!jk!h'!j@!j&!jp!j(!j`!jX!id!hj #!!h6!hn!ii!iV!gP $L!jI!hs N-!jM  i!jO!i;  q  u r&!h'!k(!jK!k+!h!!il $L!hO!hQ!iz!hw!k7 #q!k;  r!hx 6D!j9  g!k= YQ  h qb  t N- !)!g5  e!h^ q| =(!jh  d!hN!iB     W!gu!iJ!hh!k1 =3  h  e  l  f!kS!k:!hv!k@!g7  y  o  b  u    9:  S!gU!2e!hR  i!it!k!!it!h1!jc  o!je!kQ!i0!gQ!iA!hQ!iw!iO!h$!iq!kr!iu #,!kp!h'!h>!gT!he #q!kV!j#!gG!kY  r!h'  S!k]!k_!g7!hW!hY  S  w qb!i7  D  i  s!i>  a!gc!i;!hS =8!jz!ip  x!i#!kW!l.!h[!i&!is!l$ hu!kc!i|!RF r$!i7!kC!kE  A  B!g- !+  t!g5!i8!je!kt!it!jd  r!i7  W!kT M~!gQ!hS!i+!j|!/n!hJ!hL!gI!i;!i^!i>!h'!ia!ic!h6!i5!j) YQ!k{!i,  P!kG!h   g =8  p!k&!l+!g5  d  c!g]!gm!g/ #q  D  o!gL!hb!g~!l* !# BW  n!kD  C =8!hd!m0!hk $' BW r$!j(!h=  h  a!g^!i#!lf Xc!iP !&!kI!h%!hn hp (^!hU #q!lt!jY!h{  l!lA!hE  u qh  d!g5!kD!hu  d!i/ ##!i2!h?!m2  A!h>!h4!k !hA!hC!gQ  k!g5  n!h}!ia!kS!ix  s!ju N-!i4!ks!k8 qb  o YY =1  p!lV  M #!!m(!h]!kQ!ka!i,!g|  b!kL!kN!l2!kH!hR!hT!mG!k)  M #0!kj!lk  C!jF!j^!kC!hp  r!m(!jk     V!i)!lx q|!i_!ls #.!lu!hi  m!hX  o!gQ!k/!kZ!mP!jf Z+ =8!jP!g}!h'!hi!m1 r' 9:!iH  l!kX!iL!iN!l1 #/!iM!ky $L #-!lS hp !)!k~!iv YW  p #.     H!iI!mb!iU!gt!gv  F!gx!n?!iQ!iV!io!l6!mx!l8!l:   !l<!l>!f~ $'  K  i  t!m(!l.!md!iE!m_ #q!o#!o%!k]!iK!ma!ht!hB!kN!o,!o&!o/!me!h,!h.!mN !#!h-!i.  f #0!k]!h=!mt!lN  O  p!l.!ip!gT $'!iU!iW!iY!mn!i;!nN  a!h6!jY!oM #q!T: Z,!hh!m8!m(!iZ!kI 6D!oU =8!hh !&!kq!oS!m3!mz!lk!nb!iM!j{ $L!m4!kD!k(!kn!j9!nT!oI!iV!gG!iY  G  i!gL!o* h^!hP!kM!i&  &!oW!jM   !ou!ow $'!m}!mX qe f=!n>!i,!o}!iL  v!i)!gQ =5  i!n|!ov!ju!ox!n@!lr!oZ!lu!mR!mT }f!kK!hd!kN  H!l@  b!oz $'  P!hP !'!h'!le!jW $L!pF!oa!ls qh!j- $'!m-  u!ix!kU!lf!l3!k` $L!hI!gU!hK!hM!k8!kT!oG  k  s!pX!pE!pG!gy!kJ!n'!p?!lV!pM!pH  -!k9!l{!mB!h*!mY    es!pm!ph!k}!n?!n4!n9!n6!jD!p`!iX!ki!n&!n(!of!j:!pl!pg!k2!h?!pr!pE =7!p8!om!mb!m7!nQ!kY!op!k'!in!i8  n  f!g^!nt!q7!lX!h/!kM!l]!ip!l_!i; r$!gE!l'!p>!kM!pE!nC!jY #-!gF!qJ!ib!jY!ie  s!ig!p%!jn!jx!j7!oi  ]  }"
WpLCZpPH,VS Mod simple .csproj,BillyGalbreath,XML,Sunday 16th of June 2024 07:57:45 PM CDT,"Ôªø<Project Sdk=""Microsoft.NET.Sdk"">
    <PropertyGroup>
        <TargetFramework>net7.0</TargetFramework>
    </PropertyGroup>
    <ItemGroup>
        <Reference Include=""Vintagestory"" HintPath=""$(VINTAGE_STORY)/Vintagestory.dll"" Private=""false"" />
        <Reference Include=""VintagestoryAPI"" HintPath=""$(VINTAGE_STORY)/VintagestoryAPI.dll"" Private=""false"" />
        <Reference Include=""VintagestoryLib"" HintPath=""$(VINTAGE_STORY)/VintagestoryLib.dll"" Private=""false"" />
        <Reference Include=""VintagestoryServer"" HintPath=""$(VINTAGE_STORY)/VintagestoryServer.dll"" Private=""false"" />
        <Reference Include=""VSCreative"" HintPath=""$(VINTAGE_STORY)/Mods/VSCreativeMod.dll"" Private=""false"" />
        <Reference Include=""VSEssentials"" HintPath=""$(VINTAGE_STORY)/Mods/VSEssentials.dll"" Private=""false"" />
        <Reference Include=""VSSurvivalMod"" HintPath=""$(VINTAGE_STORY)/Mods/VSSurvivalMod.dll"" Private=""false"" />
        <Reference Include=""Harmony"" HintPath=""$(VINTAGE_STORY)/Lib/0Harmony.dll"" Private=""false"" />
        <Reference Include=""Microsoft.Data.Sqlite"" HintPath=""$(VINTAGE_STORY)/Lib/Microsoft.Data.Sqlite.dll"" Private=""false"" />
        <Reference Include=""Newtonsoft.Json"" HintPath=""$(VINTAGE_STORY)/Lib/Newtonsoft.Json.dll"" Private=""false"" />
        <Reference Include=""protobuf-net"" HintPath=""$(VINTAGE_STORY)/Lib/protobuf-net.dll"" Private=""false"" />
        <None Include=""LICENSE;README.md;resources/**"" CopyToOutputDirectory=""PreserveNewest"" Pack=""true"" PackagePath="""" Link=""%(RecursiveDir)%(Filename)%(Extension)"" />
    </ItemGroup>
    <Target Name=""Package"" AfterTargets=""PostBuildEvent"">
        <ZipDirectory DestinationFile=""bin/$(TargetName).zip"" SourceDirectory=""$(TargetDir)"" Overwrite=""true"" />
    </Target>
</Project>"
dyL6EDkB,3dRenderClass.js,jargon,JavaScript,Sunday 16th of June 2024 07:43:43 PM CDT,"class Construct {
	constructor() {
		// Define constants for key codes
		this.Ci_Esc = 'Escape'; // Key code for Escape key
		this.Ci_Up_ArrowPad = 'ArrowUp'; // Key code for Up Arrow key
		this.Ci_Down_ArrowPad = 'ArrowDown'; // Key code for Down Arrow key

		// Define constants for success and failure states
		this.Ct_Success = 1; // Success constant
		this.Ct_Failure = 0; // Failure constant

		// Set screen size
		this.p3d_screensizex = 640; // Screen width
		this.p3d_screensizey = 480; // Screen height

		// Calculate screen center coordinates
		this.p3d_screencenterx = this.p3d_screensizex / 2.0; // Screen center x-coordinate
		this.p3d_screencentery = this.p3d_screensizey / 2.0; // Screen center y-coordinate

		// Create a canvas element and append it to the document body
		this.canvas = document.createElement('canvas'); // Create a canvas element
		document.body.appendChild(this.canvas); // Append the canvas to the document body
		this.ctx = this.canvas.getContext('2d'); // Get the 2D rendering context for the canvas
		this.canvas.width = this.p3d_screensizex; // Set canvas width
		this.canvas.height = this.p3d_screensizey; // Set canvas height

		// Initialize 3D projection variables
		this.p3d_ex = 0.0; // Eye x-coordinate
		this.p3d_ey = 0.0; // Eye y-coordinate
		this.p3d_ez = 0.0; // Eye z-coordinate

		this.p3d_wx = 0.0; // World x-coordinate
		this.p3d_wy = 0.0; // World y-coordinate
		this.p3d_wz = 0.0; // World z-coordinate

		this.p3d_sx = 0.0; // Screen x-coordinate
		this.p3d_sy = 0.0; // Screen y-coordinate

		// Define eye positions for 3D projection
		this.eye = [
			[0, 0, 0],    // Origin
			[0, 0, 100],  // Forward direction
			[0, 70, 0]    // Up direction
		];

		// Initialize pt array for storing point data
		this.pt = [
			[], // pt[0] is an empty array
			[], // pt[1] is an empty array
			[]  // pt[2] is an empty array
		];

		// Initialize pt[2] with empty arrays
		for (let i = 0; i <= 8; i++) {
			this.pt[2][i] = [0, 0, 0]; // Initialize each element in pt[2] with [0, 0, 0]
		}

		// Set screen size variables
		this.screensizex = this.p3d_screensizex; // Screen width
		this.screensizey = this.p3d_screensizey; // Screen height

		// Calculate screen center coordinates
		this.screencenterx = this.screensizex / 2; // Screen center x-coordinate
		this.screencentery = this.screensizey / 2; // Screen center y-coordinate

		// Initialize input handling variables
		this.keys = {}; // Object to store key states
		this.mouseX = 0; // Mouse x-coordinate
		this.mouseY = 0; // Mouse y-coordinate
		this.running = true; // Running state of the application

		// Add event listeners for key and mouse events
		document.addEventListener('keydown', (event) => this.keys[event.code] = true); // Set key state to true on keydown
		document.addEventListener('keyup', (event) => this.keys[event.code] = false); // Set key state to false on keyup
		document.addEventListener('mousemove', (event) => {
			this.mouseX = event.clientX; // Update mouseX on mouse move
			this.mouseY = event.clientY; // Update mouseY on mouse move
		});

		// Start the update loop
		requestAnimationFrame(() => this.update()); // Call the update method on the next animation frame
	}

	// Method to clear the screen
	clearScreen() {
		this.ctx.fillStyle = 'blue'; // Set fill color to blue
		this.ctx.fillRect(0, 0, this.canvas.width, this.canvas.height); // Fill the entire canvas with blue color
	}

	// Method to draw a line on the canvas
	// x1, y1: Starting coordinates of the line
	// x2, y2: Ending coordinates of the line
	// color: Color of the line (default is 'yellow')
	drawLine(x1, y1, x2, y2, color = 'yellow') {
		this.ctx.strokeStyle = color; // Set stroke color
		this.ctx.beginPath(); // Begin a new path
		this.ctx.moveTo(x1, y1); // Move to the starting point
		this.ctx.lineTo(x2, y2); // Draw a line to the ending point
		this.ctx.stroke(); // Stroke the path
	}

	// Method to calculate a segment index
	// X, Y, Z: Coordinates used to calculate the index
	segindex(X, Y, Z) {
		return X + Y * 2 + Z * 4 + 1; // Calculate and return the segment index
	}

	// Method to render a segment between two points
	// P1, P2: Indices of the points to render the segment between
	renderseg(P1, P2) {
		// Render a line between the 2D projections of points P1 and P2
		return this.renderline(this.pt[2][P1][0], this.pt[2][P1][1], this.pt[2][P2][0], this.pt[2][P2][1], this.pt[2][P1][2], this.pt[2][P2][2]);
	}

	// Method to render a line between two points
	// x1, y1: Starting coordinates of the line
	// x2, y2: Ending coordinates of the line
	// z1, z2: Z-coordinates used to determine if the line should be rendered
	renderline(x1, y1, x2, y2, z1, z2) {
		if (z1 === this.Ct_Failure || z2 === this.Ct_Failure) return this.Ct_Failure; // If either z-coordinate is failure, return failure
		this.drawLine(x1 + this.screencenterx, this.screencentery - y1, x2 + this.screencenterx, this.screencentery - y2); // Draw the line adjusted for screen center
		return this.Ct_Success; // Return success
	}

	// Method to synchronize 3D points
	// P: Index of the point to synchronize
	sync3ds(P) {
		this.pt[2][P][0] = this.p3d_sx; // Sync screen x-coordinate
		this.pt[2][P][1] = this.p3d_sy; // Sync screen y-coordinate
		return this.Ct_Success; // Return success
	}

	// Method for 3D projection calculations
	// ex, ey, ez: Eye coordinates
	// wx, wy, wz: World coordinates
	// sx, sy: Screen coordinates
	// fwx, fwy, fwz: Flags for world coordinates
	// fsx, fsy: Flags for screen coordinates
	Projection3d(ex, ey, ez, wx, wy, wz, sx, sy, fwx, fwy, fwz, fsx, fsy) {
		this.p3d_ex = ex; // Set eye x-coordinate
		this.p3d_ey = ey; // Set eye y-coordinate
		this.p3d_ez = ez; // Set eye z-coordinate

		this.p3d_wx = wx; // Set world x-coordinate
		this.p3d_wy = wy; // Set world y-coordinate
		this.p3d_wz = wz; // Set world z-coordinate

		this.p3d_sx = sx; // Set screen x-coordinate
		this.p3d_sy = sy; // Set screen y-coordinate

		let tmp_PZ = 0; // Temporary projection factor
		let tmp_PF = 0; // Temporary projection flag
		let tmp_Flags = 0; // Temporary flags

		// Calculate flags based on non-zero values
		if (fwx !== 0) tmp_Flags |= 1; // If fwx is non-zero, set flag bit 1
		if (fwy !== 0) tmp_Flags |= 2; // If fwy is non-zero, set flag bit 2
		if (fwz !== 0) tmp_Flags |= 4; // If fwz is non-zero, set flag bit 4
		if (fsx !== 0) tmp_Flags |= 8; // If fsx is non-zero, set flag bit 8
		if (fsy !== 0) tmp_Flags |= 16; // If fsy is non-zero, set flag bit 16

		if (tmp_Flags > 0) { // If any flag is set
			// Determine the primary projection factor
			if ((wx !== 0) && (!((fsx !== 0) || (fwx !== 0)))) {
				tmp_PF = 1; // Set primary factor to 1 if wx is non-zero and neither fsx nor fwx are non-zero
			} else if ((wy !== 0) && (!((fwy !== 0) || (fsx !== 0)))) {
				tmp_PF = 2; // Set primary factor to 2 if wy is non-zero and neither fwy nor fsx are non-zero
			} else if ((wz + ez > 0) && (!(fwz !== 0))) {
				tmp_PF = 4; // Set primary factor to 4 if wz + ez is positive and fwz is zero
			} else {
				tmp_PF = 0; // Set primary factor to 0 otherwise
			}

			if (tmp_PF === 0) return this.Ct_Failure; // Return failure if primary factor is 0

			// Calculate projection based on the primary factor
			if (tmp_PF & 1) {
				tmp_PZ = wx; // Set temporary projection factor to wx if primary factor bit 1 is set
			} else if (tmp_PF & 2) {
				tmp_PZ = wy; // Set temporary projection factor to wy if primary factor bit 2 is set
			} else if (tmp_PF & 4) {
				tmp_PZ = wz + ez; // Set temporary projection factor to wz + ez if primary factor bit 4 is set
			} else {
				tmp_PZ = 0; // Set temporary projection factor to 0 otherwise
			}

			if (tmp_PZ === 0) return this.Ct_Failure; // Return failure if temporary projection factor is 0

			if (tmp_PF & 1) {
				tmp_PZ = (sx - ex) / tmp_PZ; // Calculate projection factor for sx
			} else if (tmp_PF & 2) {
				tmp_PZ = (sy - ey) / tmp_PZ; // Calculate projection factor for sy
			} else if (tmp_PF & 4) {
				tmp_PZ = ez / tmp_PZ; // Calculate projection factor for ez
			} else {
				tmp_PZ = 0; // Set temporary projection factor to 0 otherwise
			}

			if ((tmp_Flags & 7) > 0 && tmp_PZ === 0) return this.Ct_Failure; // Return failure if any of the lower 3 bits of tmp_Flags are set and tmp_PZ is 0

			// Adjust wx, wy, and wz based on projection
			if (fwx !== 0 && fsx === 0) {
				wx = (sx - ex) / tmp_PZ; // Calculate wx if fwx is non-zero and fsx is zero
				tmp_Flags &= 30; // Clear the lowest bit of tmp_Flags
			}
			if (fwy !== 0 && fsy === 0) {
				wy = (sy - ey) / tmp_PZ; // Calculate wy if fwy is non-zero and fsy is zero
				tmp_Flags &= 29; // Clear the second bit of tmp_Flags
			}
			if (fwz !== 0) {
				wz = (ez / tmp_PZ) - ez; // Calculate wz if fwz is non-zero
				tmp_Flags &= 27; // Clear the third bit of tmp_Flags
			}
			if (fsx !== 0 && fwx === 0) {
				sx = ex + wx * tmp_PZ; // Calculate sx if fsx is non-zero and fwx is zero
				tmp_Flags &= 23; // Clear the fourth bit of tmp_Flags
			}
			if (fsy !== 0 && fwy === 0) {
				sy = ey - wy * tmp_PZ; // Calculate sy if fsy is non-zero and fwy is zero
				tmp_Flags &= 15; // Clear the fifth bit of tmp_Flags
			}

			if (tmp_Flags > 0) return this.Ct_Failure; // Return failure if any flag is still set
		}

		return this.Ct_Success; // Return success
	}

	// Method for scaling 3D projections
	// arg_EX, arg_EY, arg_EZ: Eye coordinates
	// arg_UnitX, arg_UnitY: Unit coordinates for scaling
	// arg_WZ: World Z coordinate
	Projection3d_Scale(arg_EX, arg_EY, arg_EZ, arg_UnitX, arg_UnitY, arg_WZ) {
		const tmp_Success = this.Projection3d(arg_EX, arg_EY, arg_EZ, arg_UnitX, arg_UnitY, arg_WZ, 0.0, 0.0, 0, 0, 0, 1, 1); // Call Projection3d method with scaling arguments
		if (tmp_Success === this.Ct_Failure) return this.Ct_Failure; // Return failure if Projection3d failed
		this.p3d_sx = Math.abs(this.p3d_sx); // Take absolute value of screen x-coordinate
		this.p3d_sy = Math.abs(this.p3d_sy); // Take absolute value of screen y-coordinate
		return this.Ct_Success; // Return success
	}

	// Method to update the canvas
	update() {
		// Stop running if Escape key is pressed
		if (this.keys[this.Ci_Esc]) {
			this.running = false; // Set running to false
			return; // Exit the method
		}

		// Adjust eye position based on key input
		if (this.keys[this.Ci_Up_ArrowPad]) this.eye[2][2] += 1.0; // Move eye forward if Up Arrow is pressed
		if (this.keys[this.Ci_Down_ArrowPad]) this.eye[2][2] -= 1.0; // Move eye backward if Down Arrow is pressed

		// Update eye position based on mouse position
		this.eye[2][0] = this.mouseX - this.screencenterx; // Set eye x-coordinate based on mouse x
		this.eye[2][1] = this.mouseY - this.screencentery; // Set eye y-coordinate based on mouse y

		// Clear the screen
		this.clearScreen(); // Clear the canvas

		// Loop through grid points and project them
		for (let Z1 = 0; Z1 <= 0; Z1++) { // Loop for Z1
			for (let Y1 = -3; Y1 <= 3; Y1++) { // Loop for Y1
				for (let X1 = -3; X1 <= 3; X1++) { // Loop for X1
					for (let Z = 0; Z <= 1; Z++) { // Loop for Z
						for (let Y = 0; Y <= 1; Y++) { // Loop for Y
							for (let X = 0; X <= 1; X++) { // Loop for X
								this.pt[1][this.segindex(X, Y, Z)] = [
									(X + X1 - 0.5) * 50.0, // Set point x-coordinate
									(Y + Y1 - 0.5) * 50.0, // Set point y-coordinate
									(Z + Z1 - 0.5) * 50.0  // Set point z-coordinate
								];
							}
						}
					}

					// Project points and synchronize them
					for (let T = 1; T <= 8; T++) { // Loop for T (point indices)
						this.pt[2][T] = [0, 0, this.Projection3d(this.eye[1][0], this.eye[1][1], this.eye[1][2], this.pt[1][T][0] - this.eye[2][0], this.pt[1][T][1] - this.eye[2][1], this.pt[1][T][2] - this.eye[2][2], this.pt[2][T][0], this.pt[2][T][1], 0, 0, 0, 1, 1)]; // Project the point
						this.sync3ds(T); // Synchronize the projected point
					}

					// Render segments between points
					this.renderseg(this.segindex(0, 0, 0), this.segindex(1, 0, 0)); // Render segment between (0, 0, 0) and (1, 0, 0)
					this.renderseg(this.segindex(0, 0, 0), this.segindex(0, 1, 0)); // Render segment between (0, 0, 0) and (0, 1, 0)
					this.renderseg(this.segindex(0, 0, 0), this.segindex(0, 0, 1)); // Render segment between (0, 0, 0) and (0, 0, 1)

					this.renderseg(this.segindex(1, 1, 1), this.segindex(1, 1, 0)); // Render segment between (1, 1, 1) and (1, 1, 0)
					this.renderseg(this.segindex(1, 1, 1), this.segindex(1, 0, 1)); // Render segment between (1, 1, 1) and (1, 0, 1)
					this.renderseg(this.segindex(1, 1, 1), this.segindex(0, 1, 1)); // Render segment between (1, 1, 1) and (0, 1, 1)

					this.renderseg(this.segindex(1, 0, 0), this.segindex(1, 1, 0)); // Render segment between (1, 0, 0) and (1, 1, 0)
					this.renderseg(this.segindex(1, 0, 0), this.segindex(1, 0, 1)); // Render segment between (1, 0, 0) and (1, 0, 1)

					this.renderseg(this.segindex(0, 1, 0), this.segindex(1, 1, 0)); // Render segment between (0, 1, 0) and (1, 1, 0)
					this.renderseg(this.segindex(0, 1, 0), this.segindex(0, 1, 1)); // Render segment between (0, 1, 0) and (0, 1, 1)

					this.renderseg(this.segindex(0, 0, 1), this.segindex(1, 0, 1)); // Render segment between (0, 0, 1) and (1, 0, 1)
					this.renderseg(this.segindex(0, 0, 1), this.segindex(0, 1, 1)); // Render segment between (0, 0, 1) and (0, 1, 1)
				}
			}
		}

		// Continue the update loop if running
		if (this.running) {
			requestAnimationFrame(() => this.update()); // Call the update method on the next animation frame
		}
	}
}

// Create an instance of the Construct class
const app = new Construct(); // Instantiate the Construct class
"
DbEHJYwV,Sample Code from class,thecatfix,JavaScript,Sunday 16th of June 2024 07:42:10 PM CDT,"<script>
 
 
  // const letters = ['a', 'b', 'c']
  // // const first = letters[0]
  // // const second = letters[1]
 
  // var [churchill, roosevelt, stalin] = letters
 
  // console.log('churchill', churchill)
  // console.log('roosevelt', roosevelt)
  // console.log('stalin', stalin)
 
  // const computers = {
  //   special: 5000,
  //   fancy: 2000,
  //   small: 500,
  // }
 
  // // const small = computers.small
  // // const fancy = computers.fancy
 
  // const { small, fancy } = computers
  // computers.small = 800
 
  // console.log('small', small)
  // console.log('fancy', fancy)
  // console.log('computers', computers)
 
 
  // const letters = ['a', 'b', 'c']
  // const letterD = 'd'
  // const fourLetters = ['start', ...letters, letterD, 'end']
  // console.log('fourLetters', fourLetters)
  // const copy = [...letters]
  // letters[0] = 'A'
  // console.log('copy', copy)
  // console.log('letters', letters)
 
  // const computers = {
  //   special: 5000,
  //   fancy: 2000,
  //   small: 500,
  // }
  // const electronics = {
  //   phone: 400,
  //   special: 4000,
  //   ...computers,
  // }
  // console.log('computers', computers)
  // console.log('electronics', electronics)
 
  // const letters = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h']
 
  // // Array of the second and third letters
  // const [first, second, ...array] = letters
  // console.log('array', array)
 
  // const computers = {
  //   special: 5000,
  //   fancy: 2000,
  //   small: 500,
  // }
  // const { special, fancy, ...discount } = computers
  // console.log('discount', discount)
  // var x = 1
  // let y = 2
  // const z = 3
 
  // // let y = 1
  // y = 5
 
  // console.log('x', x)
  // console.log('y (which we know will be 2):', y)
  // console.log('z', z)
 
  function getCostVar (taxed) {
    var price = 100
 
    if (taxed) {
      var price = price + 10
      console.log('Price with tax:', price) // 110
    }
 
    console.log('Price without tax:', price)
  }
  getCostVar(true)
 
  function getCostConst (taxed) {
    let price = 100
 
    if (taxed) {
      let price = price + 10
      console.log('Price with tax:', price)
    }
 
    console.log('Price without tax:', price)
  }
  getCostConst(true)
</script>"
m6EHxPGp,"""Button Callbacks"" rev_02",pleasedontcode,Arduino,Sunday 16th of June 2024 07:19:13 PM CDT,"/********* Pleasedontcode.com **********

	Pleasedontcode thanks you for automatic code generation! Enjoy your code!

	- Terms and Conditions:
	You have a non-exclusive, revocable, worldwide, royalty-free license
	for personal and commercial use. Attribution is optional; modifications
	are allowed, but you're responsible for code maintenance. We're not
	liable for any loss or damage. For full terms,
	please visit pleasedontcode.com/termsandconditions.

	- Project: ""Button Callbacks""
	- Source Code compiled for: Arduino Uno
	- Source Code created on: 2024-06-17 00:18:50

********* Pleasedontcode.com **********/

/****** SYSTEM REQUIREMENTS *****/
/****** SYSTEM REQUIREMENT 1 *****/
	/* Implement a system using the EasyButton library to */
	/* detect single and long presses on a push button */
	/* connected to pin D2, triggering specific actions */
	/* for each event. */
/****** END SYSTEM REQUIREMENTS *****/


/****** DEFINITION OF LIBRARIES *****/
#include <EasyButton.h>  //https://github.com/evert-arias/EasyButton

/****** FUNCTION PROTOTYPES *****/
void setup(void);
void loop(void);
void onPressed(void);
void onPressedForDuration(void);

/***** DEFINITION OF DIGITAL INPUT PINS *****/
const uint8_t mybutton_PushButton_PIN_D2 = 2;

/****** DEFINITION OF LIBRARIES CLASS INSTANCES*****/
EasyButton button(mybutton_PushButton_PIN_D2);  // Initialize the EasyButton instance with the pin number

void setup(void)
{
  // Initialize serial communication
  Serial.begin(9600);

  // Initialize the button
  button.begin();
  
  // Add the callback function to be called when the button is pressed
  button.onPressed(onPressed);

  // Add the callback function to be called when the button is pressed for at least the given time
  button.onPressedFor(2000, onPressedForDuration);
}

void loop(void)
{
  // Continuously read the status of the button
  button.read();
}

// Callback function to be called when the button is pressed
void onPressed()
{
  // Code to be executed when the button is pressed
  Serial.println(""Button pressed"");
}

// Callback function to be called when the button is pressed for the given duration
void onPressedForDuration()
{
  // Code to be executed when the button is pressed for the given duration
  Serial.println(""Button pressed for 2 seconds"");
}

/* END CODE */"
W35qSWhD,2024-06-16_stats.json,rdp_snitch,JSON,Sunday 16th of June 2024 07:18:32 PM CDT,"{
  ""ip"": {
    ""60.255.174.158"": 6,
    ""116.140.196.215"": 6,
    ""96.51.53.164"": 9,
    ""104.248.154.46"": 48,
    ""120.89.61.252"": 6,
    ""187.137.198.132"": 3,
    ""144.126.223.85"": 3,
    ""2.57.149.92"": 9,
    ""147.185.132.228"": 9,
    ""24.199.97.114"": 9,
    ""87.251.75.64"": 3,
    ""180.93.172.29"": 3,
    ""172.232.224.143"": 12,
    ""94.26.249.208"": 3,
    ""212.70.149.142"": 3,
    ""103.166.182.180"": 3,
    ""194.165.16.37"": 12,
    ""167.179.37.82"": 3,
    ""172.233.176.219"": 3,
    ""45.227.254.49"": 9,
    ""185.170.144.3"": 6,
    ""64.124.50.139"": 6,
    ""118.122.144.137"": 3,
    ""103.121.74.4"": 3,
    ""206.189.28.240"": 12,
    ""205.210.31.177"": 9,
    ""159.203.164.232"": 3,
    ""139.162.41.168"": 3,
    ""80.94.95.190"": 6,
    ""199.45.154.60"": 3,
    ""165.154.174.206"": 3,
    ""137.184.228.142"": 3,
    ""45.79.239.134"": 12,
    ""205.210.31.170"": 9,
    ""167.94.145.107"": 3,
    ""185.196.220.41"": 9,
    ""45.136.254.145"": 3,
    ""165.154.134.152"": 3,
    ""194.165.16.76"": 6,
    ""194.165.16.73"": 6,
    ""154.221.19.52"": 3,
    ""190.85.232.116"": 3,
    ""45.227.254.26"": 6,
    ""205.210.31.74"": 9
  },
  ""asn"": {
    ""AS4837"": 12,
    ""AS6327"": 9,
    ""AS14061"": 78,
    ""AS9658"": 6,
    ""AS8151"": 3,
    ""AS208312"": 9,
    ""AS396982"": 36,
    ""AS208091"": 3,
    ""AS135944"": 3,
    ""AS63949"": 30,
    ""AS49505"": 3,
    ""AS204428"": 9,
    ""AS135905"": 3,
    ""AS48721"": 24,
    ""AS9902"": 3,
    ""AS267784"": 15,
    ""AS197414"": 6,
    ""AS6461"": 6,
    ""AS4134"": 3,
    ""AS134886"": 3,
    ""AS398722"": 3,
    ""AS135377"": 6,
    ""AS398705"": 3,
    ""AS208046"": 9,
    ""AS56309"": 3,
    ""AS142403"": 3,
    ""AS14080"": 3
  },
  ""isp"": {
    ""China Unicom China169 Network"": 6,
    ""China Unicom CHINA169 Network"": 6,
    ""Shaw Communications Inc."": 9,
    ""DigitalOcean, LLC"": 78,
    ""Eastern Telecommunications Philippines, Inc."": 6,
    ""Uninet S.A. de C.V."": 3,
    ""Red Byte LLC"": 9,
    ""Google LLC"": 36,
    ""Xhost Internet Solutions LP"": 9,
    ""SPT"": 3,
    ""Akamai Technologies, Inc."": 30,
    ""OOO \""Network of data-centers \""Selectel\"""": 3,
    ""SS-Net"": 9,
    ""Vietnam Posts and Telecommunications Group"": 3,
    ""Flyservers S.A."": 39,
    ""NeocomISP Limited"": 3,
    ""Zayo Bandwidth"": 6,
    ""Chinanet"": 3,
    ""Super Sonic Broadband Pvt. Ltd"": 3,
    ""Censys, Inc."": 6,
    ""UCLOUD INFORMATION TECHNOLOGY (HK) LIMITED"": 6,
    ""ColocationX Ltd."": 9,
    ""Siamdata Communication Co., ltd."": 3,
    ""Guangzhou Yisu Cloud Limited"": 3,
    ""Telmex Colombia S.A."": 3
  },
  ""org"": {
    ""SiChuan Cable TV Network CO., LTD"": 6,
    ""China United Network Communications Corporation Limited"": 6,
    ""Shaw Communications Inc"": 9,
    ""DigitalOcean, LLC"": 75,
    ""Eastern Telecommunications Philippines, Inc"": 6,
    ""UNINET"": 3,
    ""Chang Way Technologies Co. Limited"": 9,
    ""Palo Alto Networks, Inc"": 36,
    ""Xhost Internet Solutions"": 3,
    ""Saigon Postel Corporation"": 3,
    ""Akamai Technologies, Inc."": 15,
    ""Unknown"": 3,
    ""Global Communication Net Plc"": 3,
    ""Zozo Software Company Limited"": 3,
    ""Flyservers S.A"": 24,
    ""NeocomISP Limited"": 3,
    ""UAB Host Baltic"": 15,
    ""Xhostis"": 6,
    ""Microsoft Corporation"": 6,
    ""Chinanet SC"": 3,
    ""Super Sonic Broadband Pvt Ltd"": 3,
    ""Digital Ocean"": 3,
    ""Linode, LLC"": 3,
    ""Unmanaged LTD"": 6,
    ""Censys, Inc."": 6,
    ""UCLOUD INFORMATION TECHNOLOGY (HK) LIMITED"": 3,
    ""Linode"": 12,
    ""Makut Investments"": 9,
    ""ReadyIDC Co., Ltd"": 3,
    ""Ucloud Information Technology"": 3,
    ""Ancent Group Limited"": 3,
    ""Telmex Colombia S.A"": 3
  },
  ""regionName"": {
    ""Sichuan"": 9,
    ""Beijing"": 6,
    ""Alberta"": 9,
    ""Central Singapore"": 48,
    ""Metro Manila"": 6,
    ""Sonora"": 3,
    ""California"": 54,
    ""Lesser Poland"": 9,
    ""North Holland"": 9,
    ""Ho Chi Minh"": 3,
    ""Jakarta"": 12,
    ""Moscow"": 3,
    ""Sofia-Capital"": 9,
    ""Hanoi"": 3,
    ""Kaunas"": 24,
    ""Phnom Penh"": 3,
    ""Florida"": 3,
    ""Vilnius"": 15,
    ""Washington"": 6,
    ""Maharashtra"": 3,
    ""England"": 15,
    ""New Jersey"": 3,
    ""North West"": 3,
    ""New York"": 3,
    ""New South Wales"": 12,
    ""Michigan"": 3,
    ""Virginia"": 9,
    ""Nonthaburi"": 3,
    ""Eastern"": 3,
    ""Bogota D.C."": 3
  },
  ""country"": {
    ""China"": 15,
    ""Canada"": 9,
    ""Singapore"": 51,
    ""Philippines"": 6,
    ""Mexico"": 3,
    ""United States"": 81,
    ""Poland"": 9,
    ""The Netherlands"": 9,
    ""Vietnam"": 6,
    ""Indonesia"": 12,
    ""Russia"": 3,
    ""Bulgaria"": 9,
    ""Lithuania"": 39,
    ""Cambodia"": 3,
    ""India"": 3,
    ""United Kingdom"": 15,
    ""Australia"": 12,
    ""Thailand"": 3,
    ""Hong Kong"": 3,
    ""Colombia"": 3
  },
  ""account"": {
    ""(empty)"": 24,
    ""hello"": 141,
    ""Domain"": 18,
    ""CNEOvlhQf"": 3,
    ""zSPswu"": 3,
    ""YNnWXF"": 3,
    ""Administr"": 15,
    ""Test"": 54,
    ""fOsjPseeq"": 3,
    ""ckdiEq"": 3,
    ""QXgXyu"": 3,
    ""Administrator"": 6,
    ""CZyQXaEve"": 3,
    ""YulYJy"": 3,
    ""WIBeLK"": 3,
    ""hcjapAfpL"": 3,
    ""wOUTqc"": 3,
    ""VTlZle"": 3
  },
  ""keyboard"": {
    ""Unknown"": 294
  },
  ""client_build"": {
    ""Unknown"": 294
  },
  ""client_name"": {
    ""Unknown"": 294
  },
  ""ip_type"": {
    ""Unknown"": 129,
    ""hosting"": 156,
    ""mobile"": 3,
    ""proxy"": 6
  }
}"
cv534Kzg,"""Button Actions"" rev_01",pleasedontcode,Arduino,Sunday 16th of June 2024 07:17:52 PM CDT,"/********* Pleasedontcode.com **********

	Pleasedontcode thanks you for automatic code generation! Enjoy your code!

	- Terms and Conditions:
	You have a non-exclusive, revocable, worldwide, royalty-free license
	for personal and commercial use. Attribution is optional; modifications
	are allowed, but you're responsible for code maintenance. We're not
	liable for any loss or damage. For full terms,
	please visit pleasedontcode.com/termsandconditions.

	- Project: ""Button Actions""
	- Source Code NOT compiled for: Arduino Uno
	- Source Code created on: 2024-06-17 00:16:49

********* Pleasedontcode.com **********/

/****** SYSTEM REQUIREMENTS *****/
/****** SYSTEM REQUIREMENT 1 *****/
	/* Implement a system using the EasyButton library to */
	/* detect single and long presses on a push button */
	/* connected to pin D2, triggering specific actions */
	/* for each event. */
/****** END SYSTEM REQUIREMENTS *****/

/****** DEFINITION OF LIBRARIES *****/
#include <EasyButton.h>  //https://github.com/evert-arias/EasyButton

/****** FUNCTION PROTOTYPES *****/
void setup(void);
void loop(void);
void onPressed(void);
void onPressedForDuration(void);

/***** DEFINITION OF DIGITAL INPUT PINS *****/
const uint8_t mybutton_PushButton_PIN_D2 = 2;

/****** DEFINITION OF LIBRARIES CLASS INSTANCES*****/
EasyButton button(mybutton_PushButton_PIN_D2);  // Initialize the EasyButton instance with the pin number

void setup(void)
{
  // Initialize serial communication
  Serial.begin(9600);

  // Initialize the button
  button.begin();
  
  // Add the callback function to be called when the button is pressed
  button.onPressed(onPressed);

  // Add the callback function to be called when the button is pressed for at least the given time
  button.onPressedFor(2000, onPressedForDuration);
}

void loop(void)
{
  // Continuously read the status of the button
  button.read();
}

// Callback function to be called when the button is pressed
void onPressed()
{
  // Code to be executed when the button is pressed
  Serial.println(""Button pressed"");
}

// Callback function to be called when the button is pressed for the given duration
void onPressedForDuration()
{
  // Code to be executed when the button is pressed for the given duration
  Serial.println(""Button pressed for 2 seconds"");
}

/* END CODE */"
AtsZNFqf,2024-06-16_stats.json,rdp_snitch,JSON,Sunday 16th of June 2024 07:16:18 PM CDT,"{
  ""ip"": {
    ""60.255.174.158"": 4,
    ""116.140.196.215"": 4,
    ""96.51.53.164"": 6,
    ""104.248.154.46"": 32,
    ""120.89.61.252"": 4,
    ""187.137.198.132"": 2,
    ""144.126.223.85"": 2,
    ""2.57.149.92"": 6,
    ""147.185.132.228"": 6,
    ""24.199.97.114"": 6,
    ""87.251.75.64"": 2,
    ""180.93.172.29"": 2,
    ""172.232.224.143"": 8,
    ""94.26.249.208"": 2,
    ""212.70.149.142"": 2,
    ""103.166.182.180"": 2,
    ""194.165.16.37"": 8,
    ""167.179.37.82"": 2,
    ""172.233.176.219"": 2,
    ""45.227.254.49"": 6,
    ""185.170.144.3"": 4,
    ""64.124.50.139"": 4,
    ""118.122.144.137"": 2,
    ""103.121.74.4"": 2,
    ""206.189.28.240"": 8,
    ""205.210.31.177"": 6,
    ""159.203.164.232"": 2,
    ""139.162.41.168"": 2,
    ""80.94.95.190"": 4,
    ""199.45.154.60"": 2,
    ""165.154.174.206"": 2,
    ""137.184.228.142"": 2,
    ""45.79.239.134"": 8,
    ""205.210.31.170"": 6,
    ""167.94.145.107"": 2,
    ""185.196.220.41"": 6,
    ""45.136.254.145"": 2,
    ""165.154.134.152"": 2,
    ""194.165.16.76"": 4,
    ""194.165.16.73"": 4,
    ""154.221.19.52"": 2,
    ""190.85.232.116"": 2,
    ""45.227.254.26"": 4,
    ""205.210.31.74"": 6
  },
  ""asn"": {
    ""AS4837"": 8,
    ""AS6327"": 6,
    ""AS14061"": 52,
    ""AS9658"": 4,
    ""AS8151"": 2,
    ""AS208312"": 6,
    ""AS396982"": 24,
    ""AS208091"": 2,
    ""AS135944"": 2,
    ""AS63949"": 20,
    ""AS49505"": 2,
    ""AS204428"": 6,
    ""AS135905"": 2,
    ""AS48721"": 16,
    ""AS9902"": 2,
    ""AS267784"": 10,
    ""AS197414"": 4,
    ""AS6461"": 4,
    ""AS4134"": 2,
    ""AS134886"": 2,
    ""AS398722"": 2,
    ""AS135377"": 4,
    ""AS398705"": 2,
    ""AS208046"": 6,
    ""AS56309"": 2,
    ""AS142403"": 2,
    ""AS14080"": 2
  },
  ""isp"": {
    ""China Unicom China169 Network"": 4,
    ""China Unicom CHINA169 Network"": 4,
    ""Shaw Communications Inc."": 6,
    ""DigitalOcean, LLC"": 52,
    ""Eastern Telecommunications Philippines, Inc."": 4,
    ""Uninet S.A. de C.V."": 2,
    ""Red Byte LLC"": 6,
    ""Google LLC"": 24,
    ""Xhost Internet Solutions LP"": 6,
    ""SPT"": 2,
    ""Akamai Technologies, Inc."": 20,
    ""OOO \""Network of data-centers \""Selectel\"""": 2,
    ""SS-Net"": 6,
    ""Vietnam Posts and Telecommunications Group"": 2,
    ""Flyservers S.A."": 26,
    ""NeocomISP Limited"": 2,
    ""Zayo Bandwidth"": 4,
    ""Chinanet"": 2,
    ""Super Sonic Broadband Pvt. Ltd"": 2,
    ""Censys, Inc."": 4,
    ""UCLOUD INFORMATION TECHNOLOGY (HK) LIMITED"": 4,
    ""ColocationX Ltd."": 6,
    ""Siamdata Communication Co., ltd."": 2,
    ""Guangzhou Yisu Cloud Limited"": 2,
    ""Telmex Colombia S.A."": 2
  },
  ""org"": {
    ""SiChuan Cable TV Network CO., LTD"": 4,
    ""China United Network Communications Corporation Limited"": 4,
    ""Shaw Communications Inc"": 6,
    ""DigitalOcean, LLC"": 50,
    ""Eastern Telecommunications Philippines, Inc"": 4,
    ""UNINET"": 2,
    ""Chang Way Technologies Co. Limited"": 6,
    ""Palo Alto Networks, Inc"": 24,
    ""Xhost Internet Solutions"": 2,
    ""Saigon Postel Corporation"": 2,
    ""Akamai Technologies, Inc."": 10,
    ""Unknown"": 2,
    ""Global Communication Net Plc"": 2,
    ""Zozo Software Company Limited"": 2,
    ""Flyservers S.A"": 16,
    ""NeocomISP Limited"": 2,
    ""UAB Host Baltic"": 10,
    ""Xhostis"": 4,
    ""Microsoft Corporation"": 4,
    ""Chinanet SC"": 2,
    ""Super Sonic Broadband Pvt Ltd"": 2,
    ""Digital Ocean"": 2,
    ""Linode, LLC"": 2,
    ""Unmanaged LTD"": 4,
    ""Censys, Inc."": 4,
    ""UCLOUD INFORMATION TECHNOLOGY (HK) LIMITED"": 2,
    ""Linode"": 8,
    ""Makut Investments"": 6,
    ""ReadyIDC Co., Ltd"": 2,
    ""Ucloud Information Technology"": 2,
    ""Ancent Group Limited"": 2,
    ""Telmex Colombia S.A"": 2
  },
  ""regionName"": {
    ""Sichuan"": 6,
    ""Beijing"": 4,
    ""Alberta"": 6,
    ""Central Singapore"": 32,
    ""Metro Manila"": 4,
    ""Sonora"": 2,
    ""California"": 36,
    ""Lesser Poland"": 6,
    ""North Holland"": 6,
    ""Ho Chi Minh"": 2,
    ""Jakarta"": 8,
    ""Moscow"": 2,
    ""Sofia-Capital"": 6,
    ""Hanoi"": 2,
    ""Kaunas"": 16,
    ""Phnom Penh"": 2,
    ""Florida"": 2,
    ""Vilnius"": 10,
    ""Washington"": 4,
    ""Maharashtra"": 2,
    ""England"": 10,
    ""New Jersey"": 2,
    ""North West"": 2,
    ""New York"": 2,
    ""New South Wales"": 8,
    ""Michigan"": 2,
    ""Virginia"": 6,
    ""Nonthaburi"": 2,
    ""Eastern"": 2,
    ""Bogota D.C."": 2
  },
  ""country"": {
    ""China"": 10,
    ""Canada"": 6,
    ""Singapore"": 34,
    ""Philippines"": 4,
    ""Mexico"": 2,
    ""United States"": 54,
    ""Poland"": 6,
    ""The Netherlands"": 6,
    ""Vietnam"": 4,
    ""Indonesia"": 8,
    ""Russia"": 2,
    ""Bulgaria"": 6,
    ""Lithuania"": 26,
    ""Cambodia"": 2,
    ""India"": 2,
    ""United Kingdom"": 10,
    ""Australia"": 8,
    ""Thailand"": 2,
    ""Hong Kong"": 2,
    ""Colombia"": 2
  },
  ""account"": {
    ""(empty)"": 16,
    ""hello"": 94,
    ""Domain"": 12,
    ""CNEOvlhQf"": 2,
    ""zSPswu"": 2,
    ""YNnWXF"": 2,
    ""Administr"": 10,
    ""Test"": 36,
    ""fOsjPseeq"": 2,
    ""ckdiEq"": 2,
    ""QXgXyu"": 2,
    ""Administrator"": 4,
    ""CZyQXaEve"": 2,
    ""YulYJy"": 2,
    ""WIBeLK"": 2,
    ""hcjapAfpL"": 2,
    ""wOUTqc"": 2,
    ""VTlZle"": 2
  },
  ""keyboard"": {
    ""Unknown"": 196
  },
  ""client_build"": {
    ""Unknown"": 196
  },
  ""client_name"": {
    ""Unknown"": 196
  },
  ""ip_type"": {
    ""Unknown"": 86,
    ""hosting"": 104,
    ""mobile"": 2,
    ""proxy"": 4
  }
}"
hP8aZsKp,2024-06-16_stats.json,rdp_snitch,JSON,Sunday 16th of June 2024 07:15:08 PM CDT,"{
  ""ip"": {
    ""60.255.174.158"": 2,
    ""116.140.196.215"": 2,
    ""96.51.53.164"": 3,
    ""104.248.154.46"": 16,
    ""120.89.61.252"": 2,
    ""187.137.198.132"": 1,
    ""144.126.223.85"": 1,
    ""2.57.149.92"": 3,
    ""147.185.132.228"": 3,
    ""24.199.97.114"": 3,
    ""87.251.75.64"": 1,
    ""180.93.172.29"": 1,
    ""172.232.224.143"": 4,
    ""94.26.249.208"": 1,
    ""212.70.149.142"": 1,
    ""103.166.182.180"": 1,
    ""194.165.16.37"": 4,
    ""167.179.37.82"": 1,
    ""172.233.176.219"": 1,
    ""45.227.254.49"": 3,
    ""185.170.144.3"": 2,
    ""64.124.50.139"": 2,
    ""118.122.144.137"": 1,
    ""103.121.74.4"": 1,
    ""206.189.28.240"": 4,
    ""205.210.31.177"": 3,
    ""159.203.164.232"": 1,
    ""139.162.41.168"": 1,
    ""80.94.95.190"": 2,
    ""199.45.154.60"": 1,
    ""165.154.174.206"": 1,
    ""137.184.228.142"": 1,
    ""45.79.239.134"": 4,
    ""205.210.31.170"": 3,
    ""167.94.145.107"": 1,
    ""185.196.220.41"": 3,
    ""45.136.254.145"": 1,
    ""165.154.134.152"": 1,
    ""194.165.16.76"": 2,
    ""194.165.16.73"": 2,
    ""154.221.19.52"": 1,
    ""190.85.232.116"": 1,
    ""45.227.254.26"": 2,
    ""205.210.31.74"": 3
  },
  ""asn"": {
    ""AS4837"": 4,
    ""AS6327"": 3,
    ""AS14061"": 26,
    ""AS9658"": 2,
    ""AS8151"": 1,
    ""AS208312"": 3,
    ""AS396982"": 12,
    ""AS208091"": 1,
    ""AS135944"": 1,
    ""AS63949"": 10,
    ""AS49505"": 1,
    ""AS204428"": 3,
    ""AS135905"": 1,
    ""AS48721"": 8,
    ""AS9902"": 1,
    ""AS267784"": 5,
    ""AS197414"": 2,
    ""AS6461"": 2,
    ""AS4134"": 1,
    ""AS134886"": 1,
    ""AS398722"": 1,
    ""AS135377"": 2,
    ""AS398705"": 1,
    ""AS208046"": 3,
    ""AS56309"": 1,
    ""AS142403"": 1,
    ""AS14080"": 1
  },
  ""isp"": {
    ""China Unicom China169 Network"": 2,
    ""China Unicom CHINA169 Network"": 2,
    ""Shaw Communications Inc."": 3,
    ""DigitalOcean, LLC"": 26,
    ""Eastern Telecommunications Philippines, Inc."": 2,
    ""Uninet S.A. de C.V."": 1,
    ""Red Byte LLC"": 3,
    ""Google LLC"": 12,
    ""Xhost Internet Solutions LP"": 3,
    ""SPT"": 1,
    ""Akamai Technologies, Inc."": 10,
    ""OOO \""Network of data-centers \""Selectel\"""": 1,
    ""SS-Net"": 3,
    ""Vietnam Posts and Telecommunications Group"": 1,
    ""Flyservers S.A."": 13,
    ""NeocomISP Limited"": 1,
    ""Zayo Bandwidth"": 2,
    ""Chinanet"": 1,
    ""Super Sonic Broadband Pvt. Ltd"": 1,
    ""Censys, Inc."": 2,
    ""UCLOUD INFORMATION TECHNOLOGY (HK) LIMITED"": 2,
    ""ColocationX Ltd."": 3,
    ""Siamdata Communication Co., ltd."": 1,
    ""Guangzhou Yisu Cloud Limited"": 1,
    ""Telmex Colombia S.A."": 1
  },
  ""org"": {
    ""SiChuan Cable TV Network CO., LTD"": 2,
    ""China United Network Communications Corporation Limited"": 2,
    ""Shaw Communications Inc"": 3,
    ""DigitalOcean, LLC"": 25,
    ""Eastern Telecommunications Philippines, Inc"": 2,
    ""UNINET"": 1,
    ""Chang Way Technologies Co. Limited"": 3,
    ""Palo Alto Networks, Inc"": 12,
    ""Xhost Internet Solutions"": 1,
    ""Saigon Postel Corporation"": 1,
    ""Akamai Technologies, Inc."": 5,
    ""Unknown"": 1,
    ""Global Communication Net Plc"": 1,
    ""Zozo Software Company Limited"": 1,
    ""Flyservers S.A"": 8,
    ""NeocomISP Limited"": 1,
    ""UAB Host Baltic"": 5,
    ""Xhostis"": 2,
    ""Microsoft Corporation"": 2,
    ""Chinanet SC"": 1,
    ""Super Sonic Broadband Pvt Ltd"": 1,
    ""Digital Ocean"": 1,
    ""Linode, LLC"": 1,
    ""Unmanaged LTD"": 2,
    ""Censys, Inc."": 2,
    ""UCLOUD INFORMATION TECHNOLOGY (HK) LIMITED"": 1,
    ""Linode"": 4,
    ""Makut Investments"": 3,
    ""ReadyIDC Co., Ltd"": 1,
    ""Ucloud Information Technology"": 1,
    ""Ancent Group Limited"": 1,
    ""Telmex Colombia S.A"": 1
  },
  ""regionName"": {
    ""Sichuan"": 3,
    ""Beijing"": 2,
    ""Alberta"": 3,
    ""Central Singapore"": 16,
    ""Metro Manila"": 2,
    ""Sonora"": 1,
    ""California"": 18,
    ""Lesser Poland"": 3,
    ""North Holland"": 3,
    ""Ho Chi Minh"": 1,
    ""Jakarta"": 4,
    ""Moscow"": 1,
    ""Sofia-Capital"": 3,
    ""Hanoi"": 1,
    ""Kaunas"": 8,
    ""Phnom Penh"": 1,
    ""Florida"": 1,
    ""Vilnius"": 5,
    ""Washington"": 2,
    ""Maharashtra"": 1,
    ""England"": 5,
    ""New Jersey"": 1,
    ""North West"": 1,
    ""New York"": 1,
    ""New South Wales"": 4,
    ""Michigan"": 1,
    ""Virginia"": 3,
    ""Nonthaburi"": 1,
    ""Eastern"": 1,
    ""Bogota D.C."": 1
  },
  ""country"": {
    ""China"": 5,
    ""Canada"": 3,
    ""Singapore"": 17,
    ""Philippines"": 2,
    ""Mexico"": 1,
    ""United States"": 27,
    ""Poland"": 3,
    ""The Netherlands"": 3,
    ""Vietnam"": 2,
    ""Indonesia"": 4,
    ""Russia"": 1,
    ""Bulgaria"": 3,
    ""Lithuania"": 13,
    ""Cambodia"": 1,
    ""India"": 1,
    ""United Kingdom"": 5,
    ""Australia"": 4,
    ""Thailand"": 1,
    ""Hong Kong"": 1,
    ""Colombia"": 1
  },
  ""account"": {
    ""(empty)"": 8,
    ""hello"": 47,
    ""Domain"": 6,
    ""CNEOvlhQf"": 1,
    ""zSPswu"": 1,
    ""YNnWXF"": 1,
    ""Administr"": 5,
    ""Test"": 18,
    ""fOsjPseeq"": 1,
    ""ckdiEq"": 1,
    ""QXgXyu"": 1,
    ""Administrator"": 2,
    ""CZyQXaEve"": 1,
    ""YulYJy"": 1,
    ""WIBeLK"": 1,
    ""hcjapAfpL"": 1,
    ""wOUTqc"": 1,
    ""VTlZle"": 1
  },
  ""keyboard"": {
    ""Unknown"": 98
  },
  ""client_build"": {
    ""Unknown"": 98
  },
  ""client_name"": {
    ""Unknown"": 98
  },
  ""ip_type"": {
    ""Unknown"": 43,
    ""hosting"": 52,
    ""mobile"": 1,
    ""proxy"": 2
  }
}"
zukEKZNA,üéÅG2A.com Free Gift Card Guide June 2024 NEWüéÅ,ssss50w,GetText,Sunday 16th of June 2024 06:51:35 PM CDT,"G2A.com free gift card & games updated guide.
Any item for free on G2A.com including Amazon, Steam, Xbox, Playstation gift cards & everything else offered.

This is the most up to date version of this script. Any other one posted will not work!
 
PDF guide here;
https://drive.google.com/file/d/1KMb0fLkKHIC2qdjR4vCSRH9rVSjJVMdX/view

Working as of:
17 June 2024"
kf8DrpGf,ass crap,bobmarley12345,Lua,Sunday 16th of June 2024 05:33:12 PM CDT,"-- PX/Y/Z MUST BE STRINGS DUE TO DOUBLE TOSTRING CONVERSION
function setLamp(pX, pY, pZ, isOn)
    local r, g, b = ""0"", ""0"", ""0""

    if (isOn) then
        r, g, b = ""90"", ""140"", ""240""
    else
        r, g, b = ""0"", ""0"", ""0""
    end

    adminapi.setLuxColour(""world"", pX, pY, pZ, r, g, b)
    -- adminapi.setLuxColour(""world"", pX,  pY,  pZ,  r,   g,   b)
end

local list = {
    {x = ""\\-21"", y = ""84"", z = ""\\-254""},
    {x = ""\\-7"",  y = ""84"", z = ""\\-254""},
    {x = ""\\-6"",  y = ""84"", z = ""\\-261""},
    {x = ""\\-5"",  y = ""84"", z = ""\\-261""},
    {x = ""6"",     y = ""84"", z = ""\\-258""},
    {x = ""9"",     y = ""84"", z = ""\\-247""},
    {x = ""9"",     y = ""84"", z = ""\\-246""},
    {x = ""9"",     y = ""84"", z = ""\\-245""},
    {x = ""9"",     y = ""84"", z = ""\\-239""},
    {x = ""9"",     y = ""84"", z = ""\\-237""},
    {x = ""9"",     y = ""84"", z = ""\\-231""},
    {x = ""9"",     y = ""84"", z = ""\\-230""},
    {x = ""9"",     y = ""84"", z = ""\\-229""},
    {x = ""6"",     y = ""84"", z = ""\\-218""},
    {x = ""\\-5"",  y = ""84"", z = ""\\-215""},
    {x = ""\\-6"",  y = ""84"", z = ""\\-215""},
    {x = ""\\-7"",  y = ""84"", z = ""\\-222""},
    {x = ""\\-21"", y = ""84"", z = ""\\-222""},
    {x = ""\\-22"", y = ""84"", z = ""\\-215""},
    {x = ""\\-23"", y = ""84"", z = ""\\-215""},
    {x = ""\\-34"", y = ""84"", z = ""\\-218""},
    {x = ""\\-37"", y = ""84"", z = ""\\-229""},
    {x = ""\\-37"", y = ""84"", z = ""\\-230""},
    {x = ""\\-37"", y = ""84"", z = ""\\-231""},
    {x = ""\\-37"", y = ""84"", z = ""\\-237""},
    {x = ""\\-37"", y = ""84"", z = ""\\-239""},
    {x = ""\\-37"", y = ""84"", z = ""\\-245""},
    {x = ""\\-37"", y = ""84"", z = ""\\-246""},
    {x = ""\\-37"", y = ""84"", z = ""\\-247""},
    {x = ""\\-34"", y = ""84"", z = ""\\-258""},
    {x = ""\\-23"", y = ""84"", z = ""\\-261""},
    {x = ""\\-22"", y = ""84"", z = ""\\-261""}
}

for index, value in ipairs(list) do
    setLamp(value.x, value.y, value.z, false)
end

local function PushNextLamp(theLamp, lastLamp)
    if (theLamp ~= nil) then
        setLamp(theLamp.x, theLamp.y, theLamp.z, true)
    end
    if (lastLamp ~= nil) then
        setLamp(lastLamp.x, lastLamp.y, lastLamp.z, false)
    end
end

while true do
    local delay = 0.08

    local last = nil
    for index, value in ipairs(list) do
        PushNextLamp(value, last)
        last = value
        sleep(delay)
    end

    PushNextLamp(nil, last)
    sleep(delay)
end
"
4uq72J1T,Chat translator script roblox,Lucas_Ribeiro,Lua,Sunday 16th of June 2024 05:32:02 PM CDT,"--[[
    Message Translator
    Made by Aim, updated by cli, Updated by rang#1234
    Credits to Riptxde for the sending chathook
--]]
pcall(function()
    if not game['Loaded'] then game['Loaded']:Wait() end; repeat wait(.06) until game:GetService('Players').LocalPlayer ~= nil
    local YourLang = ""pt"" -- Language code that the messages are going to be translated to
    
    local googlev = isfile'googlev.txt' and readfile'googlev.txt' or ''
    
    function googleConsent(Body)
        local args = {}
    
        for match in Body:gmatch('<input type=""hidden"" name="".-"" value="".-"">') do
            local k,v = match:match('<input type=""hidden"" name=""(.-)"" value=""(.-)"">')
            args[k] = v
        end
        googlev = args.v
        writefile('googlev.txt', args.v)
    end
    
    local function got(url, Method, Body) -- Basic version of https://www.npmjs.com/package/got using synapse's request API for google websites
        Method = Method or ""GET""
        
        local res = request({
            Url = url,
            Method = Method,
            Headers = {cookie=""CONSENT=YES+""..googlev},
            Body = Body
        })
        
        if res.Body:match('https://consent.google.com/s') then
            print('consent')
            googleConsent(res.Body)
            res = request({
                Url = url,
                Method = ""GET"",
                Headers = {cookie=""CONSENT=YES+""..googlev}
            })
        end
        
        return res
    end
    
    local languages = {
        auto = ""Automatic"",
        af = ""Afrikaans"",
        sq = ""Albanian"",
        am = ""Amharic"",
        ar = ""Arabic"",
        hy = ""Armenian"",
        az = ""Azerbaijani"",
        eu = ""Basque"",
        be = ""Belarusian"",
        bn = ""Bengali"",
        bs = ""Bosnian"",
        bg = ""Bulgarian"",
        ca = ""Catalan"",
        ceb = ""Cebuano"",
        ny = ""Chichewa"",
        ['zh-cn'] = ""Chinese Simplified"",
        ['zh-tw'] = ""Chinese Traditional"",
        co = ""Corsican"",
        hr = ""Croatian"",
        cs = ""Czech"",
        da = ""Danish"",
        nl = ""Dutch"",
        en = ""English"",
        eo = ""Esperanto"",
        et = ""Estonian"",
        tl = ""Filipino"",
        fi = ""Finnish"",
        fr = ""French"",
        fy = ""Frisian"",
        gl = ""Galician"",
        ka = ""Georgian"",
        de = ""German"",
        el = ""Greek"",
        gu = ""Gujarati"",
        ht = ""Haitian Creole"",
        ha = ""Hausa"",
        haw = ""Hawaiian"",
        iw = ""Hebrew"",
        hi = ""Hindi"",
        hmn = ""Hmong"",
        hu = ""Hungarian"",
        is = ""Icelandic"",
        ig = ""Igbo"",
        id = ""Indonesian"",
        ga = ""Irish"",
        it = ""Italian"",
        ja = ""Japanese"",
        jw = ""Javanese"",
        kn = ""Kannada"",
        kk = ""Kazakh"",
        km = ""Khmer"",
        ko = ""Korean"",
        ku = ""Kurdish (Kurmanji)"",
        ky = ""Kyrgyz"",
        lo = ""Lao"",
        la = ""Latin"",
        lv = ""Latvian"",
        lt = ""Lithuanian"",
        lb = ""Luxembourgish"",
        mk = ""Macedonian"",
        mg = ""Malagasy"",
        ms = ""Malay"",
        ml = ""Malayalam"",
        mt = ""Maltese"",
        mi = ""Maori"",
        mr = ""Marathi"",
        mn = ""Mongolian"",
        my = ""Myanmar (Burmese)"",
        ne = ""Nepali"",
        no = ""Norwegian"",
        ps = ""Pashto"",
        fa = ""Persian"",
        pl = ""Polish"",
        pt = ""Portuguese"",
        pa = ""Punjabi"",
        ro = ""Romanian"",
        ru = ""Russian"",
        sm = ""Samoan"",
        gd = ""Scots Gaelic"",
        sr = ""Serbian"",
        st = ""Sesotho"",
        sn = ""Shona"",
        sd = ""Sindhi"",
        si = ""Sinhala"",
        sk = ""Slovak"",
        sl = ""Slovenian"",
        so = ""Somali"",
        es = ""Spanish"",
        su = ""Sundanese"",
        sw = ""Swahili"",
        sv = ""Swedish"",
        tg = ""Tajik"",
        ta = ""Tamil"",
        te = ""Telugu"",
        th = ""Thai"",
        tr = ""Turkish"",
        uk = ""Ukrainian"",
        ur = ""Urdu"",
        uz = ""Uzbek"",
        vi = ""Vietnamese"",
        cy = ""Welsh"",
        xh = ""Xhosa"",
        yi = ""Yiddish"",
        yo = ""Yoruba"",
        zu = ""Zulu""
    };
    
    function find(lang)
        for i,v in pairs(languages) do
            if i == lang or v == lang then
                return i
            end
        end
    end
    
    function isSupported(lang)
        local key = find(lang)
        return key and true or false 
    end
    
    function getISOCode(lang)
        local key = find(lang)
        return key
    end
    
    function stringifyQuery(dataFields)
        local data = """"
        for k, v in pairs(dataFields) do
            if type(v) == ""table"" then
                for _,v in pairs(v) do
                    data = data .. (""&%s=%s""):format(
                        game.HttpService:UrlEncode(k),
                        game.HttpService:UrlEncode(v)
                    )
                end
            else
                data = data .. (""&%s=%s""):format(
                    game.HttpService:UrlEncode(k),
                    game.HttpService:UrlEncode(v)
                )
            end
        end
        data = data:sub(2)
        return data
    end
    
    local reqid = math.random(1000,9999)
    local rpcidsTranslate = ""MkEWBc""
    local rootURL = ""https://translate.google.com/""
    local executeURL = ""https://translate.google.com/_/TranslateWebserverUi/data/batchexecute""
    local fsid, bl
    
    do -- init
    	print('initialize')
        local InitialReq = got(rootURL)
        fsid = InitialReq.Body:match('""FdrFJe"":""(.-)""')
        bl = InitialReq.Body:match('""cfb2h"":""(.-)""')
    end
    
    local HttpService = game:GetService(""HttpService"")
    function jsonE(o)
        return HttpService:JSONEncode(o)
    end
    function jsonD(o)
        return HttpService:JSONDecode(o)
    end
    
    function translate(str, to, from)
        reqid = reqid + 10000
        from = from and getISOCode(from) or 'auto'
        to = to and getISOCode(to) or 'en'
    
        local data = {{str, from, to, true}, {nil}}
    
        local freq = {
            {
                {
                    rpcidsTranslate, 
                    jsonE(data),
                    nil,
                    ""generic""
                }
            }
        }
    
        local url = executeURL..'?'..stringifyQuery{rpcids = rpcidsTranslate, ['f.sid'] = fsid, bl = bl, hl=""en"", _reqid = reqid-10000, rt = 'c'}
        local body = stringifyQuery{['f.req'] = jsonE(freq)}
        
        local req = got(url, ""POST"", body)
    	
        local body = jsonD(req.Body:match'%[.-%]\n')
        local translationData = jsonD(body[1][3])
        local result = {
            text = """",
            from = {
                language = """",
                text = """"
            },
            raw = """"
        }
        result.raw = translationData
        result.text = translationData[2][1][1][6][1][1]
        
        result.from.language = translationData[3]
        result.from.text = translationData[2][5][1]
    
        return result
    end
    
    local Players = game:GetService(""Players"")
    local LP = Players.LocalPlayer
    local StarterGui = game:GetService('StarterGui')
    for i=1, 15 do
        local r = pcall(StarterGui[""SetCore""])
        if r then break end
        game:GetService('RunService').RenderStepped:wait()
    end
    wait()
    
    local properties = {
        Color = Color3.new(1,1,0);
        Font = Enum.Font.SourceSansItalic;
        TextSize = 16;
    }
    
    game:GetService(""StarterGui""):SetCore(""SendNotification"",
        {
            Title = ""Chat Translator"",
            Text = ""Ported to Google Translate"",
            Duration = 3
        }
    )
                      
    properties.Text = ""[TR] To send messages in a language, say > followed by the target language/language code, e.g.: >ru or >russian. To disable (go back to original language), say >d.""
    StarterGui:SetCore(""ChatMakeSystemMessage"", properties)
    
    function translateFrom(message)
        local translation = translate(message, YourLang)
    
        local text
        if translation.from.language ~= YourLang then 
            text = translation.text
        end
    
        return {text, translation.from.language}
    end
    
    function get(plr, msg)
        local tab = translateFrom(msg)
        local translation = tab[1]
        if translation then
            properties.Text = ""(""..tab[2]:upper().."") ""..""["".. plr.Name ..""]: ""..translation
            StarterGui:SetCore(""ChatMakeSystemMessage"", properties)
        end
    end
    
    game.ReplicatedStorage.DefaultChatSystemChatEvents.OnMessageDoneFiltering.OnClientEvent:Connect(function(messageData) 
        get(game:GetService(""Players"")[messageData.FromSpeaker],messageData.Message)
    end)
    
    local sendEnabled = false
    local target = """"
    
    function translateTo(message, target)
        target = target:lower() 
        local translation = translate(message, target, ""auto"")
    
        return translation.text
    end
    
    function disableSend()
        sendEnabled = false
        properties.Text = ""[TR] Sending Disabled""
        StarterGui:SetCore(""ChatMakeSystemMessage"", properties)
    end
    
    local CBar, CRemote, Connected = LP['PlayerGui']:WaitForChild('Chat')['Frame'].ChatBarParentFrame['Frame'].BoxFrame['Frame'].ChatBar, game:GetService('ReplicatedStorage').DefaultChatSystemChatEvents['SayMessageRequest'], {}
    
    local HookChat = function(Bar)
        coroutine.wrap(function()
            if not table.find(Connected,Bar) then
                local Connect = Bar['FocusLost']:Connect(function(Enter)
                    if Enter ~= false and Bar['Text'] ~= '' then
                        local Message = Bar['Text']
                        Bar['Text'] = '';
                        if Message == "">d"" then
                            disableSend()
                        elseif Message:sub(1,1) == "">"" and not Message:find("" "") then
                            if getISOCode(Message:sub(2)) then
                                sendEnabled = true
                                target = Message:sub(2)
                            else
                                properties.Text = ""[TR] Invalid language""
                                StarterGui:SetCore(""ChatMakeSystemMessage"", properties)
                            end
                        elseif sendEnabled then
                            Message = translateTo(Message, target)
                            if not _G.SecureChat then
                                game:GetService('Players'):Chat(Message); 
                            end
                            CRemote:FireServer(Message,'All')
                        else
                            if not _G.SecureChat then
                                game:GetService('Players'):Chat(Message); 
                            end
                            CRemote:FireServer(Message,'All')
                        end
                    end
                end)
                Connected[#Connected+1] = Bar; Bar['AncestryChanged']:Wait(); Connect:Disconnect()
            end
        end)()
    end
    
    HookChat(CBar); local BindHook = Instance.new('BindableEvent')
    
    local MT = getrawmetatable(game); local NC = MT.__namecall; setreadonly(MT, false)
    
    MT.__namecall = newcclosure(function(...)
        local Method, Args = getnamecallmethod(), {...}
        if rawequal(tostring(Args[1]),'ChatBarFocusChanged') and rawequal(Args[2],true) then 
            if LP['PlayerGui']:FindFirstChild('Chat') then
                BindHook:Fire()
            end
        end
        return NC(...)
    end)
    
    BindHook['Event']:Connect(function()
        CBar = LP['PlayerGui'].Chat['Frame'].ChatBarParentFrame['Frame'].BoxFrame['Frame'].ChatBar
        HookChat(CBar)
    end)
end)"
AGdHSECY,# tk_spacebarbarian.py,here2share,Python,Sunday 16th of June 2024 05:14:01 PM CDT,"# tk_spacebarbarian.py ZZZ

import tkinter as tk
from PIL import Image, ImageTk, ImageFilter, ImageDraw, ImageEnhance
import random

def shuffle_pixels():
	random.shuffle(xy)
	img.putdata(xy)

def kernelize(e=None):
	global kernel_2, img, blur, blur2, contrast, alpha, zoom_factor
	kernel_2 = ImageFilter.Kernel(
		size=(3, 3),
		kernel=[random.uniform(-9.0, 9.0) for _ in range(9)],
		scale=2,
		offset=0
	)
	shuffle_pixels()
	img = img.filter(ImageFilter.GaussianBlur(radius=random.uniform(0.1, 5.0)))
	blur = random.uniform(1.0, 2.0)
	blur2 = random.uniform(1.0, 2.0)
	contrast = random.uniform(0.1, 2.0)
	zoom_factor = random.uniform(1.05, 1.5)
	alpha = random.uniform(0.100, 0.999)

def create_lenia():
	global img, canvas_image, blur, blur2

	wave = 1
	zoom_factor = 1.05
	blur = 1.5
	blur2 = 1.5
	contrast = 1.5
	rotation_angle = 0
	alpha = 0.7

	while True:
		img = img.filter(kernel_1)
		img = img.filter(ImageFilter.GaussianBlur(radius=blur))
		img = img.rotate(rotation_angle, resample=Image.BICUBIC, expand=True)
		rotation_angle += 0.0001
		
		new_size = int(size * zoom_factor)
		img = img.resize((new_size, new_size), Image.LANCZOS)
		left = (new_size - size) // 2
		top = (new_size - size) // 2
		right = (new_size + size) // 2
		bottom = (new_size + size) // 2
		img = img.crop((left, top, right, bottom))
		
		img = ImageEnhance.Contrast(img).enhance(contrast)
		
		if wave % 2:
			img = img.filter(ImageFilter.GaussianBlur(radius=blur2))
			rgb = img.filter(kernel_2)
			rgb = Image.blend(img, rgb, alpha=alpha) # because sometimes kernel_2 fails
			
			canvas_image = ImageTk.PhotoImage(rgb)
			canvas.create_image(0, 0, anchor=tk.NW, image=canvas_image)
			root.update_idletasks()
			root.update()
		wave = not wave

size = 600

root = tk.Tk()
canvas = tk.Canvas(root, width=size, height=size)
canvas.pack()

img = Image.new(""RGB"", (size, size))
draw = ImageDraw.Draw(img)

kernel_1 = ImageFilter.Kernel(
	size=(3, 3),
	kernel=[
		0.05, 0.2, 0.05,
		0.2, -1.0, 0.2,
		0.05, 0.2, 0.05
	],
	scale=None,
	offset=0
)

cc = {}
for x in range(size):
	for y in range(size):
		cc[x,y] = 0

xy = []
x2 = 256.0 / size
y2 = 256.0 / size
for y in range(size):
	b = int(y * y2)
	for x in range(size):
		a = int(x * x2)
		c = cc[a, b]
		xy.append((a, b, c))
		cc[a, b] = c + 1

kernelize()
root.bind(""<space>"", kernelize)

create_lenia()
root.mainloop()
"
6S3GyTzW,"""Sensor Alerts"" rev_03",pleasedontcode,Arduino,Sunday 16th of June 2024 05:11:18 PM CDT,"/********* Pleasedontcode.com **********

	Pleasedontcode thanks you for automatic code generation! Enjoy your code!

	- Terms and Conditions:
	You have a non-exclusive, revocable, worldwide, royalty-free license
	for personal and commercial use. Attribution is optional; modifications
	are allowed, but you're responsible for code maintenance. We're not
	liable for any loss or damage. For full terms,
	please visit pleasedontcode.com/termsandconditions.

	- Project: ""Sensor Alerts""
	- Source Code NOT compiled for: Arduino Uno
	- Source Code created on: 2024-06-16 22:09:17

********* Pleasedontcode.com **********/

/****** SYSTEM REQUIREMENTS *****/
/****** SYSTEM REQUIREMENT 1 *****/
	/* Develop a flame sensor system using Arduino that */
	/* triggers a passive buzzer alarm when flame is */
	/* detected. Utilize ezBuzzer and forcedBMX280 */
	/* libraries for buzzer control and environmental */
	/* data monitoring. Ensure accurate and timely */
	/* alerts. */
/****** END SYSTEM REQUIREMENTS *****/

/****** DEFINITION OF LIBRARIES *****/
#include <ezBuzzer.h>  //https://github.com/ArduinoGetStarted/buzzer
#include <forcedBMX280.h>  //https://github.com/soylentOrange/Forced-BMX280

/****** FUNCTION PROTOTYPES *****/
void setup(void);
void loop(void);
void updateOutputs(void);

/***** DEFINITION OF DIGITAL OUTPUT PINS *****/
const uint8_t pb_PassiveBuzzer_Signal_PIN_D2 = 2;
const uint8_t flameSensor_PIN = 7;  // Define the pin for the flame sensor

/***** DEFINITION OF OUTPUT RAW VARIABLES *****/
/***** used to store raw data *****/
bool pb_PassiveBuzzer_Signal_PIN_D2_rawData = 0;

/***** DEFINITION OF OUTPUT PHYSICAL VARIABLES *****/
/***** used to store data after characteristic curve transformation *****/
float pb_PassiveBuzzer_Signal_PIN_D2_phyData = 0.0;

/****** DEFINITION OF LIBRARIES CLASS INSTANCES*****/
ezBuzzer buzzer(pb_PassiveBuzzer_Signal_PIN_D2);  // Initialize ezBuzzer object
ForcedBMX280 climateSensor = ForcedBMX280();  // Initialize ForcedBMX280 object

int32_t g_temperature;  // current temperature in hundredths of a degree Celsius

void setup(void) {
  // put your setup code here, to run once:
  pinMode(pb_PassiveBuzzer_Signal_PIN_D2, OUTPUT);
  pinMode(flameSensor_PIN, INPUT);
  digitalWrite(pb_PassiveBuzzer_Signal_PIN_D2, LOW);

  Serial.begin(9600);
  while (!Serial) {
    delay(10);
  }

  Wire.begin();
  while (climateSensor.begin()) {
    Serial.println(""Waiting for sensor..."");
    digitalWrite(LED_BUILTIN, !digitalRead(LED_BUILTIN));
    delay(1000);
  }

  digitalWrite(LED_BUILTIN, HIGH);
  Serial.println(""BMX280 ready"");
  Serial.print(""\tChipID: 0x"");
  Serial.println(climateSensor.getChipID(), HEX);
}

void loop(void) {
  // put your main code here, to run repeatedly:
  buzzer.loop();  // Call the loop function of ezBuzzer to handle non-blocking operations
  updateOutputs();  // Refresh output data

  // Read temperature from the sensor every 2 seconds
  delay(2000);
  climateSensor.takeForcedMeasurement();
  g_temperature = climateSensor.getTemperatureCelsius();
  Serial.print(""Temperature: "");
  Serial.print(g_temperature / 100);
  Serial.print(""."");
  Serial.print(g_temperature % 100);
  Serial.println("" ¬∞C"");

  // Check the flame sensor
  int flameSensorValue = digitalRead(flameSensor_PIN);
  if (flameSensorValue == LOW) {
    // Flame detected
    Serial.println(""Flame detected! Triggering buzzer..."");
    buzzer.beep(1000);  // Beep for 1 second
  }
}

void updateOutputs() {
  digitalWrite(pb_PassiveBuzzer_Signal_PIN_D2, pb_PassiveBuzzer_Signal_PIN_D2_rawData);
}
"
qpueajzV,extract_bbox.py,Abhisek92,Python,Sunday 16th of June 2024 05:04:39 PM CDT,"import pyproj
import rasterio as rio
from pathlib import Path
from shapely.geometry import box
from shapely.ops import transform

target_crs = pyproj.crs.CRS.from_epsg(28992)

features = list()
for fpath in Path("""").glob(""*.tif""):
    with rio.open(fpath, 'r') as src:
        proj = pyproj.Transformer.from_crs(src.crs, target_crs, always_xy=True).transform
        bbox = transform(proj, box(*src.bounds))
        features.append({""geometry"": bbox, ""source"": fpath.stem})

gdf = gpd.GeoDataFrame(features, crs=target_crs)
gdf.to_file("""")"
ZX2658C4,app.py bez GT,max2201111,Python,Sunday 16th of June 2024 04:55:24 PM CDT,"from flask import Flask, render_template, request, session, redirect, url_for, flash, jsonify
from flask_sqlalchemy import SQLAlchemy
from flask_migrate import Migrate
from flask_login import LoginManager, UserMixin, login_user, logout_user, login_required, current_user
from werkzeug.security import generate_password_hash, check_password_hash
import requests
from bs4 import BeautifulSoup
import json
import random

app = Flask(__name__)
app.secret_key = 'your_secret_key'
app.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///users.db'
app.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False

db = SQLAlchemy(app)
migrate = Migrate(app, db)
login_manager = LoginManager(app)
login_manager.login_view = 'login'

class User(UserMixin, db.Model):
    id = db.Column(db.Integer, primary_key=True)
    username = db.Column(db.String(150), unique=True, nullable=False)
    password = db.Column(db.String(150), nullable=False)
    is_superuser = db.Column(db.Boolean, default=False)
    successful_translations = db.Column(db.Integer, default=0, nullable=False)

class Translation(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    user_id = db.Column(db.Integer, db.ForeignKey('user.id'), nullable=False)
    term = db.Column(db.String(150), nullable=False)
    direction = db.Column(db.String(50), nullable=False)
    translations = db.Column(db.JSON, nullable=False)
    user = db.relationship('User', backref=db.backref('translations', lazy=True))

@login_manager.user_loader
def load_user(user_id):
    return db.session.get(User, int(user_id))

@app.route('/register', methods=['GET', 'POST'])
def register():
    if request.method == 'POST':
        username = request.form.get('username')
        password = request.form.get('password')

        if User.query.filter_by(username=username).first():
            flash('Username already exists')
        else:
            hashed_password = generate_password_hash(password, method='pbkdf2:sha256')
            new_user = User(username=username, password=hashed_password)
            db.session.add(new_user)
            db.session.commit()
            flash('Registration successful, please log in.')
            return redirect(url_for('login'))
    return render_template('register.html')

@app.route('/login', methods=['GET', 'POST'])
def login():
    if request.method == 'POST':
        username = request.form.get('username')
        password = request.form.get('password')
        user = User.query.filter_by(username=username).first()

        if user and check_password_hash(user.password, password):
            login_user(user)
            flash('Login successful.')
            next_page = request.args.get('next')
            return redirect(next_page or url_for('index'))
        else:
            flash('Invalid username or password.')
    return render_template('login.html')

@app.route('/logout')
@login_required
def logout():
    logout_user()
    flash('Logged out successfully.')
    return redirect(url_for('login'))

@app.route('/', methods=['GET', 'POST'])
@login_required
def index():
    en_cz_translations = Translation.query.filter_by(direction='en_cz', user_id=current_user.id).order_by(Translation.id.desc()).all()
    cz_en_translations = Translation.query.filter_by(direction='cz_en', user_id=current_user.id).order_by(Translation.id.desc()).all()

    if 'correct' not in session:
        session['correct'] = 0
    if 'total' not in session:
        session['total'] = 0

    if request.method == 'POST':
        term = request.form.get('term')
        direction = request.form.get('direction')

        if direction == 'en_cz':
            url = f'https://slovnik.seznam.cz/preklad/anglicky_cesky/{term}'
        elif direction == 'cz_en':
            url = f'https://slovnik.seznam.cz/preklad/cesky_anglicky/{term}'
        else:
            return render_template('index.html', user_authenticated=True, en_cz_translations=en_cz_translations, cz_en_translations=cz_en_translations, correct=session['correct'], total=session['total'], enumerate=enumerate)

        response = requests.get(url)

        if response.status_code == 200:
            soup = BeautifulSoup(response.content, 'lxml')

            script_tag = soup.find('script', {'id': '__NEXT_DATA__'})

            if script_tag:
                try:
                    json_data = json.loads(script_tag.string)
                    translations = json_data['props']['pageProps']['translations']
                    term_data = []
                    for translation in translations:
                        sens_data = []
                        for sens in translation['sens']:
                            desc = sens.get('desc2', '')
                            note = sens.get('note2', '')
                            morf = sens.get('morf', translation.get('morf', 'Nezn√°m√Ω druh'))
                            samples = [f""{samp['samp2s']} -> {samp['samp2t']}"" for samp in sens.get('samp2', [])]
                            trans = [''.join(t) for t in sens.get('trans', []) if t]
                            coll2 = [f""{c['coll2s']} -> {c['coll2t']}"" for c in sens.get('coll2', [])]
                            sens_data.append({'morf': morf, 'desc': desc, 'note': note, 'samples': samples, 'trans': trans, 'coll2': coll2})
                        term_data.append(sens_data)

                    new_translation = Translation(user_id=current_user.id, term=term, direction=direction, translations=term_data)
                    db.session.add(new_translation)
                    db.session.commit()

                    en_cz_translations = Translation.query.filter_by(direction='en_cz', user_id=current_user.id).order_by(Translation.id.desc()).all()
                    cz_en_translations = Translation.query.filter_by(direction='cz_en', user_id=current_user.id).order_by(Translation.id.desc()).all()

                except json.JSONDecodeError as e:
                    error = f'Error decoding JSON: {str(e)}'
                    return render_template('index.html', user_authenticated=True, error=error, en_cz_translations=en_cz_translations, cz_en_translations=cz_en_translations, correct=session['correct'], total=session['total'], enumerate=enumerate)
            else:
                error = 'Error: Unable to find the JSON data script tag.'
                return render_template('index.html', user_authenticated=True, error=error, en_cz_translations=en_cz_translations, cz_en_translations=cz_en_translations, correct=session['correct'], total=session['total'], enumerate=enumerate)
        else:
            error = f'Error: Unable to fetch data for term ""{term}"".'
            return render_template('index.html', user_authenticated=True, error=error, en_cz_translations=en_cz_translations, cz_en_translations=cz_en_translations, correct=session['correct'], total=session['total'], enumerate=enumerate)

    return render_template('index.html', user_authenticated=True, en_cz_translations=en_cz_translations, cz_en_translations=cz_en_translations, correct=session['correct'], total=session['total'], enumerate=enumerate)

@app.route('/reset_counter', methods=['POST'])
@login_required
def reset_counter():
    session['correct'] = 0
    session['total'] = 0
    return redirect(url_for('index'))

@app.route('/quiz', methods=['GET', 'POST'])
@login_required
def quiz():
    if request.method == 'POST':
        selected_answer = request.form.get('answer')
        correct_answer = request.form.get('correct_answer')

        if selected_answer == correct_answer:
            session['correct'] = session.get('correct', 0) + 1
            if current_user.successful_translations is None:
                current_user.successful_translations = 0
            current_user.successful_translations += 1
            db.session.commit()
        session['total'] = session.get('total', 0) + 1

        return redirect(url_for('index'))

    translations = Translation.query.filter_by(user_id=current_user.id).all()
    if translations:
        translation = random.choice(translations)
        term = translation.term
        data = translation.translations
        if not data:
            flash('No translation data available for quiz.')
            return redirect(url_for('index'))

        question_data = random.choice(data)
        if not question_data or not question_data[0]['trans']:
            flash('No valid translation data available for quiz.')
            return redirect(url_for('index'))

        correct_answer = question_data[0]['trans'][0]
        options = [correct_answer]

        all_terms = [t.term for t in translations if t.term != term]
        if all_terms:
            incorrect_terms = random.sample(all_terms, min(3, len(all_terms)))
            for incorrect_term in incorrect_terms:
                incorrect_translation = Translation.query.filter_by(term=incorrect_term, user_id=current_user.id).first()
                if incorrect_translation and incorrect_translation.translations and incorrect_translation.translations[0] and incorrect_translation.translations[0][0]['trans']:
                    options.append(incorrect_translation.translations[0][0]['trans'][0])

        random.shuffle(options)

        return render_template('quiz.html', question=term, options=options, correct_answer=correct_answer, question_data=question_data)

    flash('No translations available for quiz.')
    return redirect(url_for('index'))

@app.route('/delete/<int:id>', methods=['POST'])
@login_required
def delete(id):
    translation = Translation.query.get(id)
    if translation and translation.user_id == current_user.id:
        db.session.delete(translation)
        db.session.commit()
    return redirect(url_for('index'))

@app.route('/delete_all', methods=['POST'])
@login_required
def delete_all():
    Translation.query.filter_by(user_id=current_user.id).delete()
    db.session.commit()
    return redirect(url_for('index'))

@app.route('/create_user')
def create_user():
    username = 'ja3'
    password = 'ja3'

    if User.query.filter_by(username=username).first():
        return ""User already exists.""
    else:
        hashed_password = generate_password_hash(password, method='pbkdf2:sha256')
        new_user = User(username=username, password=hashed_password)
        db.session.add(new_user)
        db.session.commit()
        return ""User created successfully.""

@app.route('/progress')
@login_required
def progress():
    if not current_user.is_superuser:
        return redirect(url_for('index'))

    users = User.query.all()
    user_progress = []
    for user in users:
        translations_count = Translation.query.filter_by(user_id=user.id).count()
        user_progress.append({
            'username': user.username,
            'password': user.password,  # This should not be displayed in a real application for security reasons
            'successful_translations': user.successful_translations,
            'translations_count': translations_count
        })

    return render_template('progress.html', user_progress=user_progress)

@app.route('/get_translations', methods=['GET'])
@login_required
def get_translations():
    translations = Translation.query.filter_by(user_id=current_user.id).all()
    translations_data = [
        {
            'term': translation.term,
            'direction': translation.direction,
            'translations': translation.translations
        }
        for translation in translations
    ]
    return jsonify({'translations': translations_data}), 200

if __name__ == '__main__':
    with app.app_context():
        db.create_all()
        # Create superuser RUT with password 'all'
        if not User.query.filter_by(username='RUT').first():
            hashed_password = generate_password_hash('all', method='pbkdf2:sha256')
            superuser = User(username='RUT', password=hashed_password, is_superuser=True)
            db.session.add(superuser)
            db.session.commit()
    app.run(debug=True)





"
ECdp6G2E,template/index.html very good bez GT,max2201111,HTML,Sunday 16th of June 2024 04:54:27 PM CDT,"<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Translation App</title>
    <link rel=""stylesheet"" href=""https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css"">
    <style>
        .translation-content {
            display: none;
        }
        .counter {
            position: absolute;
            top: 20px;
            left: 50%;
            transform: translateX(-50%);
            font-size: 18px;
            border: 2px solid #000;
            border-radius: 50%;
            padding: 10px;
            width: 50px;
            height: 50px;
            display: flex;
            align-items: center;
            justify-content: center;
            text-align: center;
        }
    </style>
</head>
<body>
    <div class=""container mt-5"">
        <div class=""counter"">
            {{ session['correct'] }}/{{ session['total'] }}
        </div>
        <h1>Welcome, {{ current_user.username }}!</h1>
        <form action=""{{ url_for('index') }}"" method=""POST"" class=""form-inline mb-3"">
            <input type=""text"" name=""term"" class=""form-control mr-2"" placeholder=""Enter term"">
            <select name=""direction"" class=""form-control mr-2"">
                <option value=""en_cz"">English to Czech</option>
                <option value=""cz_en"">Czech to English</option>
            </select>
            <button type=""submit"" class=""btn btn-primary"">Translate</button>
        </form>

        {% with messages = get_flashed_messages(with_categories=true) %}
        {% if messages %}
        <div class=""alert alert-info"">
            {% for category, message in messages %}
            <p>{{ message }}</p>
            {% endfor %}
        </div>
        {% endif %}
        {% endwith %}

        {% if error %}
        <div class=""alert alert-danger"">{{ error }}</div>
        {% endif %}

        <div class=""btn-group mb-3"" role=""group"" aria-label=""Basic example"">
            <form action=""{{ url_for('delete_all') }}"" method=""POST"">
                <button type=""submit"" class=""btn btn-danger"">Delete All Translations</button>
            </form>
            <form action=""{{ url_for('reset_counter') }}"" method=""POST"">
                <button type=""submit"" class=""btn btn-warning"">Reset Counter</button>
            </form>
            <a href=""{{ url_for('quiz') }}"" id=""take-quiz-btn"" class=""btn btn-info"">Take a Quiz</a>
            <a href=""{{ url_for('logout') }}"" class=""btn btn-secondary"">Logout</a>
        </div>

        <h2>Your Translations (EN-CZ)</h2>
        <ul class=""list-group mb-3"">
            {% for translation in en_cz_translations %}
            <li class=""list-group-item"">
                <strong>{{ translation.term }}</strong>
                <div class=""float-right"">
                    <button class=""btn btn-sm btn-secondary toggle-btn"" type=""button"">Toggle</button>
                    <form action=""{{ url_for('delete', id=translation.id) }}"" method=""POST"" class=""d-inline"">
                        <button type=""submit"" class=""btn btn-sm btn-danger"">Delete</button>
                    </form>
                </div>
                <div class=""translation-content mt-2"">
                    {% for trans_group in translation.translations %}
                        <ul>
                            {% for trans in trans_group %}
                                <li>
                                    {% if trans.morf %}
                                        <strong>Morfo: </strong>{{ trans.morf }}<br>
                                    {% endif %}
                                    {% if trans.desc %}
                                        <strong>Desc: </strong>{{ trans.desc|safe }}<br>
                                    {% endif %}
                                    {% if trans.note %}
                                        <strong>Note: </strong>{{ trans.note|safe }}<br>
                                    {% endif %}
                                    {% if trans.samples %}
                                        <strong>Samples: </strong>
                                        <ul>
                                            {% for sample in trans.samples %}
                                            <li>{{ sample|safe }}</li>
                                            {% endfor %}
                                        </ul>
                                    {% endif %}
                                    {% if trans.trans %}
                                        <strong>Translations: </strong>
                                        <ul>
                                            {% for t in trans.trans %}
                                            <li>{{ t|safe }}</li>
                                            {% endfor %}
                                        </ul>
                                    {% endif %}
                                    {% if trans.coll2 %}
                                        <strong>Collocations: </strong>
                                        <ul>
                                            {% for coll in trans.coll2 %}
                                            <li>{{ coll|safe }}</li>
                                            {% endfor %}
                                        </ul>
                                    {% endif %}
                                </li>
                            {% endfor %}
                        </ul>
                    {% endfor %}
                </div>
            </li>
            {% endfor %}
        </ul>

        <h2>Your Translations (CZ-EN)</h2>
        <ul class=""list-group mb-3"">
            {% for translation in cz_en_translations %}
            <li class=""list-group-item"">
                <strong>{{ translation.term }}</strong>
                <div class=""float-right"">
                    <button class=""btn btn-sm btn-secondary toggle-btn"" type=""button"">Toggle</button>
                    <form action=""{{ url_for('delete', id=translation.id) }}"" method=""POST"" class=""d-inline"">
                        <button type=""submit"" class=""btn btn-sm btn-danger"">Delete</button>
                    </form>
                </div>
                <div class=""translation-content mt-2"">
                    {% for trans_group in translation.translations %}
                        <ul>
                            {% for trans in trans_group %}
                                <li>
                                    {% if trans.morf %}
                                        <strong>Morfo: </strong>{{ trans.morf }}<br>
                                    {% endif %}
                                    {% if trans.desc %}
                                        <strong>Desc: </strong>{{ trans.desc|safe }}<br>
                                    {% endif %}
                                    {% if trans.note %}
                                        <strong>Note: </strong>{{ trans.note|safe }}<br>
                                    {% endif %}
                                    {% if trans.samples %}
                                        <strong>Samples: </strong>
                                        <ul>
                                            {% for sample in trans.samples %}
                                            <li>{{ sample|safe }}</li>
                                            {% endfor %}
                                        </ul>
                                    {% endif %}
                                    {% if trans.trans %}
                                        <strong>Translations: </strong>
                                        <ul>
                                            {% for t in trans.trans %}
                                            <li>{{ t|safe }}</li>
                                            {% endfor %}
                                        </ul>
                                    {% endif %}
                                    {% if trans.coll2 %}
                                        <strong>Collocations: </strong>
                                        <ul>
                                            {% for coll in trans.coll2 %}
                                            <li>{{ coll|safe }}</li>
                                            {% endfor %}
                                        </ul>
                                    {% endif %}
                                </li>
                            {% endfor %}
                        </ul>
                    {% endfor %}
                </div>
            </li>
            {% endfor %}
        </ul>
    </div>
    <script src=""https://code.jquery.com/jquery-3.5.1.min.js""></script>
    <script src=""https://cdn.jsdelivr.net/npm/@popperjs/core@2.5.4/dist/umd/popper.min.js""></script>
    <script src=""https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js""></script>
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            var toggleButtons = document.querySelectorAll('.toggle-btn');
            toggleButtons.forEach(function(button) {
                button.addEventListener('click', function() {
                    var content = this.parentElement.nextElementSibling;
                    if (content.style.display === 'none' || content.style.display === '') {
                        content.style.display = 'block';
                    } else {
                        content.style.display = 'none';
                    }
                });
            });

            document.getElementById('take-quiz-btn').addEventListener('click', function() {
                fetch('/get_translations')
                    .then(response => response.json())
                    .then(data => {
                        console.log('Translations:', data.translations);
                        // Perform any additional actions with the data here
                        window.location.href = ""{{ url_for('quiz') }}"";
                    })
                    .catch(error => {
                        console.error('Error fetching translations:', error);
                    });
            });
        });
    </script>
</body>
</html>




"
Ct6cHq7Q,Untitled,EasyDevX,Lua,Sunday 16th of June 2024 04:51:39 PM CDT,"import time
import re
import pyautogui
from itertools import permutations
import enchant

# Initialize pyenchant dictionary for English words
d = enchant.Dict(""en_US"")

def follow(thefile):
    thefile.seek(0, 2)
    while True:
        line = thefile.readline()
        if not line:
            time.sleep(0.01)  # Reduce delay to make it more responsive
            continue
        yield line

def extract_task(line):
    # Regular expressions to match different types of tasks
    unscramble_match = re.search(r'\[CHAT\].*?Unscramble the word ([a-zA-Z]+)\s*', line, re.IGNORECASE)
    type_word_match = re.search(r'\[CHAT\].*?Type the word ([a-zA-Z]+)\s*', line, re.IGNORECASE)
    math_equation_match = re.search(r'\[CHAT\].*?(\d+\s*[+x\-/]\s*\d+)\s*', line, re.IGNORECASE)

    if unscramble_match:
        return 'unscramble', unscramble_match.group(1)
    elif type_word_match:
        return 'type_word', type_word_match.group(1)
    elif math_equation_match:
        return 'math_equation', math_equation_match.group(1)
    
    return None, None

def unscramble_word(scrambled_word):
    # Function to unscramble the word
    def is_valid_unscramble(candidate):
        return d.check(candidate.lower())

    # Sort characters of the word for optimized permutation checking
    sorted_chars = ''.join(sorted(scrambled_word.lower()))
    for length in range(len(scrambled_word), 0, -1):
        for perm in permutations(sorted_chars, length):
            perm_word = ''.join(perm)
            if is_valid_unscramble(perm_word) and perm_word.lower() != scrambled_word.lower():
                return perm_word
    return None

def solve_equation(equation):
    # Solve simple addition, subtraction, multiplication, and division equations
    try:
        equation = equation.replace('x', '*').replace('/', '//')  # Replace 'x' with '*' and '/' with '//'
        answer = eval(equation)
        return answer
    except Exception as e:
        print(f""Error solving equation {equation}: {e}"")
        return None

def type_word(word):
    # Press 'T' to open the chat and type the word
    pyautogui.press('t')
    time.sleep(0.1)  # Short delay to ensure chat is open
    # Type the word directly into the chat
    pyautogui.typewrite(word)
    # Press 'Enter' to send the message
    pyautogui.press('enter')

def perform_task(task_type, task_content):
    start_time = time.time()  # Start measuring task execution time

    if task_type == 'unscramble':
        unscrambled_word = unscramble_word(task_content)
        if unscrambled_word and len(unscrambled_word) == len(task_content):
            print(f""Unscrambled: {task_content} -> {unscrambled_word}"")
            type_word(unscrambled_word)
        else:
            print(f""Unable to unscramble: {task_content}"")

    elif task_type == 'type_word':
        print(f""Typing word: {task_content}"")
        type_word(task_content)

    elif task_type == 'math_equation':
        answer = solve_equation(task_content)
        if answer is not None:
            print(f""Solved equation: {task_content} = {answer}"")
            type_word(str(answer))
        else:
            print(f""Unable to solve equation: {task_content}"")

    task_time = time.time() - start_time
    print(f""Task completed in {task_time:.4f} seconds"")

if __name__ == ""__main__"":
    logfile_path = r""C:\Users\Morga\AppData\Roaming\.minecraft\logs\latest.log""
    start_time = time.time()  # Start measuring overall script execution time
    with open(logfile_path, 'r') as logfile:
        loglines = follow(logfile)
        for line in loglines:
            task_type, task_content = extract_task(line)
            if task_type:
                perform_task(task_type, task_content)

    total_time = time.time() - start_time
    print(f""Total script execution time: {total_time:.2f} seconds"")
"
4nM684ez,Dynamic island by ECCS,ERROR_CODE,Lua,Sunday 16th of June 2024 04:18:31 PM CDT,"if game:GetService(""CoreGui""):FindFirstChild(""DI"") then
game:GetService(""CoreGui""):FindFirstChild(""DI""):Destroy()
end
DI = Instance.new(""ScreenGui"")
DinamicIsland = Instance.new(""ImageButton"")
DinamicIsland2 = Instance.new(""TextLabel"")
DinamicIslandUICorner = Instance.new(""UICorner"")




DI.Name = ""DI""
DI.Parent = game.CoreGui
DI.ZIndexBehavior = Enum.ZIndexBehavior.Sibling
game.CoreGui.DI.Enabled = true

DinamicIsland.Name = ""DinamicIsland""
DinamicIsland.Parent = DI
DinamicIsland.AnchorPoint = Vector2.new(0, 0)
DinamicIsland.Size = UDim2.new(0, 100, 0, 30)
DinamicIsland.Position = UDim2.new(0.5, 0, 0, 0)
DinamicIsland.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
DinamicIsland.ZIndex = 2
DinamicIsland.AutoButtonColor = false
DinamicIsland.BorderSizePixel = 0

DinamicIslandUICorner.CornerRadius = UDim.new(0, 20)
DinamicIslandUICorner.Parent = DinamicIsland

DinamicIsland2.Name = ""DinamicIsland2""
DinamicIsland2.Parent = DinamicIsland
DinamicIsland2.Position = UDim2.new(0.25, 0, 0, 0)
DinamicIsland2.Size = UDim2.new(0, 50, 0, 30)
DinamicIsland2.Text = ""ERROR""
DinamicIsland2.BackgroundTransparency = 1
DinamicIsland2.Font = Enum.Font.AmaticSC
DinamicIsland2.TextSize = 30
DinamicIsland2.TextColor3 = Color3.fromRGB(255, 255, 255)

spawn(function()
while wait() do
DinamicIsland2.Text = os.date(""%H:%M"")
end
end)

DinamicIsland.MouseEnter:Connect(function()
DinamicIsland:TweenSize(UDim2.new(0, 500, 0, 50),""InOut"",""Sine"",0.2)
DinamicIsland:TweenPosition(UDim2.new(0.25, 0, 0, 0),""InOut"",""Sine"",0.2)
DinamicIsland2:TweenPosition(UDim2.new(0.25, 0, 0, 0),""InOut"",""Sine"",0.2)
end)

DinamicIsland.MouseLeave:Connect(function()
DinamicIsland:TweenSize(UDim2.new(0, 100, 0, 30),""InOut"",""Sine"",0.2)
DinamicIsland:TweenPosition(UDim2.new(0.5, 0, 0, 0),""InOut"",""Sine"",0.2)
end)"
q32pM7K9,Lottery System,Krythic,C#,Sunday 16th of June 2024 03:47:00 PM CDT,"using System;
using UnityEngine;
using Newtonsoft.Json;

namespace Oxide.Plugins
{
    [Info(""LotterySystem"", ""Krythic"", ""1.0.0"")]
    [Description(""Allows players to use a lottery system"")]

    public class LotterySystem : RustPlugin
    {
        private int _defaultJackpot = 1000;
        private int _ticketCost = 100;
        private int _maximumOdds = 4192;
        private int _scrapGameItemID = -932201673; // ID for Scrap

        private void Init()
        {
            cmd.AddChatCommand(""lottery"", this, ""LotteryCommand"");
            cmd.AddChatCommand(""buyTicket"", this, ""BuyLotteryTicketCommand"");
        }

        private int NextRoll(int min, int max)
        {
            return UnityEngine.Random.Range(min, max + 1);
        }

        private void LotteryCommand(BasePlayer player, string command, string[] args)
        {
            LoadConfig();
            Puts($""{player.displayName} displayed the Lottery info."");
            SendReply(player,
                ""[Lottery System]\n"" +
                ""Creator: Krythic\n"" +
                ""v1.0.0\n"" +
                ""Current Jackpot: \n"" +
                ""  "" + config.jackpot + "" scrap \n"" +
                ""Type /buyTicket to buy a lottery ticket for 100 scrap.""
            );
        }

        private void BuyLotteryTicketCommand(BasePlayer player, string command, string[] args)
        {
            LoadConfig();
            if (HasEnoughScrap(player, _ticketCost))
            {
                Puts($""{player.displayName} purchased a lottery ticket..."");
                bool lotteryResult = NextRoll(1, _maximumOdds) == 1;
                if (lotteryResult)
                {
                    // The Player won the lottery
                    PrintToChat(""[Lottery] "" + $""{player.displayName} purchased a lottery ticket..."");
                    PrintToChat(""[Lottery] "" + $""{player.displayName} won a jackpot of "" + config.jackpot + "" Scrap!"");
                    Puts($""{player.displayName} won a jackpot of "" + config.jackpot + "" Scrap!"");
                    GiveScrap(player, config.jackpot);
                    config.jackpot = _defaultJackpot; // Reset the jackpot after giving the player their winnings
                    SaveConfig();
                }
                else
                {
                    // The Player did not win the lottery
                    TakeScrap(player, _ticketCost);
                    PrintToChat(""[Lottery] "" + $""{player.displayName} purchased a lottery ticket..."");
                    PrintToChat(""[Lottery] "" + $""{player.displayName} did not win."");
                    Puts($""{player.displayName} did not win the lottery."");
                    config.jackpot += _ticketCost;
                    PrintToChat(""[Lottery] The current jackpot is now: "" + config.jackpot + "" Scrap."");
                    SaveConfig();
                }
            }
            else
            {
                SendReply(player, ""[Lottery System] You do not have enough scrap to buy a lottery ticket."");
            }
        }

        private bool HasEnoughScrap(BasePlayer player, int amount)
        {
            int scrapAmount = player.inventory.GetAmount(_scrapGameItemID);
            return scrapAmount >= amount;
        }

        private void TakeScrap(BasePlayer player, int amount)
        {
            player.inventory.Take(null, _scrapGameItemID, amount);
        }

        private void GiveScrap(BasePlayer player, int amount)
        {
            player.inventory.GiveItem(ItemManager.CreateByItemID(_scrapGameItemID, amount));
        }

        #region Config

        private ConfigData config = new ConfigData();

        private class ConfigData
        {
            [JsonProperty(PropertyName = ""Jackpot"")]
            public int jackpot = 0;
        }

        protected override void LoadConfig()
        {
            base.LoadConfig();

            try
            {
                config = Config.ReadObject<ConfigData>();

                if (config == null) LoadDefaultConfig();
            }
            catch
            {
                PrintError(""Configuration file is corrupt, check your config file at https://jsonlint.com/!"");
                LoadDefaultConfig();
                return;
            }

            SaveConfig();
        }

        protected override void LoadDefaultConfig() => config = new ConfigData();

        protected override void SaveConfig() => Config.WriteObject(config);

        #endregion

        // Add the Unload method to increment the jackpot on server shutdown
        private void Unload()
        {
            LoadConfig();
            config.jackpot += 50;
            SaveConfig();
            Puts(""[Lottery System] Server is shutting down. Jackpot has been increased by 50 scrap."");
        }
    }
}"
yjAeXXe0,180.247.28.5-/sdcard/Premium/useragent_instagram.py.py,OBF-XIn,Python,Sunday 16th of June 2024 03:18:16 PM CDT,"# useragent instagram

try:
    import random
except(Exception, KeyboardInterrupt) as e:
    try:
        from urllib.parse import quote
        __import__('os').system(f'xdg-open https://wa.me/6283140199711?text=INSTAGRAM%20ERROR%20%3A%20{quote(str(e))}')
        exit()
    except(Exception, KeyboardInterrupt) as e:
        from urllib.parse import quote
        __import__('os').system(f'xdg-open https://wa.me/6283140199711?text=INSTAGRAM%20ERROR%20%3A%20{quote(str(e))}')
        exit()

class Useragent:
    def __init__(self) -> None:
        pass
        
    def useragent_api(self):
        self.nexus = ['Galaxy Nexus', 'Nexus 10', 'Nexus 2', 'Nexus 4', 'Nexus 4', 'Nexus 4', 'Nexus 4', 'Nexus 4', 'Nexus 4', 'Nexus 5', 'phone/Nexus 5', 'Nexus 5X', 'Nexus 6', 'Nexus 7', 'Nexus 9', 'Nexus One', 'Nexus One', 'Nexus One', 'Nexus One', 'Nexus One', 'Nexus One', 'Nexus Player', 'Nexus Player', 'Nexus S', 'Nexus S', 'Nexus S 4G', 'nexus S', 'Nexus S', 'Nexus s', 'Nexus S', 'Nexus S', 'Nexus S', 'Nexus S', 'Nexus S']
        self.realme = ['RMX3630', 'RMX3663', 'RMX3663', 'RMX3661', 'RMX3687', 'RMX3686', 'RMX3687', 'RMX3687', 'RMX1805', 'RMX1809', 'RMX1805', 'RMX1801', 'RMX1807', 'RMX1821', 'RMX1825', 'RMX1851', 'RMX1827', 'RMX1911', 'RMX1971', 'RMX2030', 'RMX1925', 'RMX2001', 'RMX2061', 'RMX2040', 'RMX2002', 'RMX2151', 'RMX2155', 'RMX2170', 'RMX2103', 'RMX3085', 'RMX3241', 'RMX3081', 'RMX3151', 'RMX3381', 'RMX3521', 'RMX3388', 'RMX3474', 'RMX3474', 'RMX3472', 'RMX3471', 'RMX3393', 'RMX3392', 'RMX3491', 'RMX3612', 'RMX1811', 'RMX2185', 'RMX2185', 'RMX3231', 'RMX2189', 'RMX2180', 'RMX2195', 'RMX2101', 'RMX2101', 'RMX1941', 'RMX1941', 'RMX1945', 'RMX1945', 'RMX3063', 'RMX3061', 'RMX3201', 'RMX3261', 'RMX3263', 'RMX3191', 'RMX3193', 'RMX3195', 'RMX3197', 'RMX3269', 'RMX3268', 'RMX2020', 'RMX2027', 'RMX2021', 'RMX3623', 'RMX3581', 'RMX3690', 'RMX3501', 'RMX3503', 'RMX3501', 'RMX3624', 'RMX3511', 'RMX3710', 'RMX3311', 'RMX3310', 'RMX3551', 'RMX3301', 'RMX3300', 'RMX2202', 'RMX2202', 'RMX3363', 'RMX3360', 'RMX3031', 'RMX3031', 'RMX3031', 'RMX3031', 'RMX3370', 'RMX3370', 'RMX3370', 'RMX3357', 'RMX3357', 'RMX3357', 'RMX3357', 'RMX3561', 'RMX3561', 'RMX3560', 'RMX3562', 'RMX3563', 'RMX3371', 'RMX3706', 'RMX3708', 'RMX3706', 'RMX3708', 'RMX3706', 'RMX3706', 'RMX3350', 'RMX3350', 'RMX3350', 'RMX2193', 'RMX2193', 'RMX2161', 'RMX2163', 'RMX2050', 'RMX2050', 'RMX2156', 'RMX3242', 'RMX3171', 'RMX3286', 'RMX3572', 'RMX3395', 'RMX3395', 'RMX3396', 'RMX3396', 'RMX3430', 'RMX3516', 'RMX3235', 'RMX3235', 'RMX3506', 'RMX3506', 'RMP2103', 'RMP2102', 'RMP2102', 'RMP2106', 'RMP2105', 'RMP2107', 'RMP2108', 'RMX2117', 'RMX2117', 'RMX2117', 'RMX2117', 'RMX2173', 'RMX2173', 'RMX2173', 'RMX2173', 'RMX3161', 'RMX3161', 'RMX3161', 'RMX2205', 'RMX2205', 'RMX2205', 'RMX2205', 'RMX3142', 'RMX3142', 'RMX3461', 'RMX3461', 'RMX3478', 'RMX3478', 'RMX3372', 'RMX3372', 'RMX3372', 'RMX3574', 'RMX1831', 'RMX3121', 'RMX3122', 'RMX3121', 'RMX3125', 'RMX3125', 'RMX3042', 'RMX3041', 'RMX3041', 'RMX3043', 'RMX3042', 'RMX3092', 'RMX3093', 'RMX3092', 'RMX3611', 'RMX3611', 'RMX3610', 'RMX3611', 'RMX3571', 'RMX3571', 'RMX3571', 'RMX3571', 'RMX3475', 'RMX2201', 'RMX2200', 'RMX2200', 'RMX2200', 'RMX2111', 'RMX1901', 'RMX1901', 'RMX1901', 'RMX1901', 'RMX1901', 'RMX1991', 'RMX1992', 'RMX1993', 'RMX1931', 'RMX1931', 'RMX1931', 'RMX1931', 'RMX2083', 'RMX2142', 'RMX2081', 'RMX2086', 'RMX2144', 'RMX2071', 'RMX2071', 'RMX2071', 'RMX2075', 'RMX2076', 'RMX2072', 'RMX2072', 'RMX2072', 'RMX2052', 'RMX2176', 'RMX2176', 'RMX2121', 'RMX2121', 'RMX2121', 'RMX3115', 'RMX3115', 'RMX3115', 'RMX1921', 'RMX1921', 'RMX1921']
        self.redmi = [f'Redmi {random.randint(8,15)}',f'Redmi Note {random.randint(8,15)}',f'Redmi {random.randint(8,15)} Pro',f'Redmi Note {random.randint(8,15)} Pro']
        self.micromax = ['Micromax 10', 'Micromax 1J', 'Micromax 86519', 'Micromax A064', 'Micromax_A064', 'Micromax A065', 'Micromax_A065', 'Micromax A066', 'Micromax_A066', 'Micromax A067', 'Micromax_A067', 'MICROMAX_A068', 'MICROMAX A068', 'Micromax A068', 'Micromax A069', 'Micromax_A069', 'Micromax A075', 'Micromax A082', 'Micromax_A082', 'Micromax A089', 'Micromax_A089', 'Micromax A091', 'Micromax A092', 'Micromax_A092', 'Micromax A093', 'Micromax_A093', 'Micromax A095', 'Micromax A096', 'Micromax_A101', 'Micromax A102', 'Micromax_A102', 'Micromax A104', 'Micromax a104', 'Micromax A105', 'Micromax_A105', 'Micromax A106', 'Micromax-A106', 'Micromax A108', 'Micromax_A109', 'Micromax A109', 'Micromax A110', 'Micromax_A110', 'Micromax A110Q', 'Micromax_A110Q', 'Micromax A111', 'Micromax A114', 'Micromax A114R', 'Micromax_A114R', 'Micromax A115', 'Micromax_A115', 'Micromax A116', 'Micromax_A116', 'Micromax A116i', 'Micromax_A116i', 'Micromax A117', 'Micromax_A117', 'Micromax A118R', 'Micromax A119', 'Micromax A120', 'Micromax A121', 'Micromax_A121', 'Micromax A15', 'Micromax A177', 'Micromax A190', 'Micromax_A190', 'Micromax A200', 'Micromax_A200', 'Micromax A21', 'Micromax A210', 'Micromax A24', 'Micromax_A24', 'Micromax A25 Smarty', 'Micromax A250', 'Micromax A255', 'Micromax_A255', 'Micromax A26', 'Micromax_A26', 'Micromax_A27', 'Micromax A27', 'Micromax_A28', 'Micromax A28/GRI40', 'Micromax A28', 'Micromax A290', 'Micromax A30', 'Micromax A300', 'Micromax A310', 'Micromax A311', 'Micromax A315', 'Micromax_A315', 'Micromax_A316', 'Micromax A316', 'Micromax_A34', 'Micromax A34', 'Micromax_A35', 'Micromax A35', 'Micromax A350', 'Micromax_A36', 'Micromax A36', 'Micromax_A37', 'Micromax A37', 'Micromax A37B', 'Micromax_A37B', 'Micromax A40', 'Micromax_A40', 'Micromax A46', 'Micromax_A46', 'Micromax A47', 'MicromaxA47', 'Micromax_A50', 'Micromax A50', 'Micromax A51', 'Micromax A52', 'Micromax A54', 'Micromax A56', 'Micromax_A57', 'Micromax A57', 'Micromax A58', 'Micromax_A58', 'Micromax A59', 'Micromax A60', 'Micromax A61', 'Micromax A62', 'Micromax_A62', 'Micromax A63', 'Micromax_A63', 'Micromax_A65', 'Micromax A65', 'Micromax_A66', 'Micromax A66', 'Micromax A67', 'Micromax A68', 'Micromax A69', 'Micromax_A69', 'Micromax_A70', 'Micromax A700', 'Micromax A71', 'Micromax_A71', 'Micromax A72', 'Micromax_A72', 'Micromax A73', 'Micromax_A74', 'Micromax A74', 'Micromax A75', 'Micromax_A76', 'Micromax A76', 'Micromax A77', 'Micromax A78', 'Micromax A79', 'en_us Micromax A80', 'Micromax A80', 'Micromax A82', 'Micromax_A82', 'Micromax A84', 'Micromax A85', 'Micromax A86', 'Micromax_A86', 'Micromax_A87', 'Micromax A87', 'Micromax A87 . Ninja 4.0', 'Micromax A88', 'Micromax_A88', 'Micromax A89', 'Micromax A90', 'Micromax A90s', 'MIcromax_A90s', 'Micromax A90S', 'Micromax A91', 'Micromax_A91', 'Micromax_A92', 'Micromax A92', 'MicromaxA93', 'Micromax A93', 'Micromax A94', 'Micromax_A94', 'Micromax A96', 'Micromax_A96', 'Micromax A97', 'Micromax_A99', 'Micromax A99', 'Micromax_AD3520', 'Micromax AD3520', 'Micromax AD3550', 'Micromax AD4500', 'Micromax_AD4500', 'Micromax AE90', 'Micromax AO5510', 'Micromax AQ5000', 'Micromax B4A', 'Micromax B5 Pro', 'B5Pro', 'Micromax_Bharat_5_Plus', 'Micromax Q402Plus', 'Micromax Q440', 'Micromax Bharat 5', 'Micromax Q4204', 'Micromax Bharat 5 Plus', 'Micromax Bharat 5 Pro', 'Micromax Bolt 3425', 'Micromax Bolt 2', 'Micromax Q402+', 'Micromax Q306', 'Micromax Q3001', 'Micromax Q301', 'Micromax Q303', 'Micromax Q324', 'Micromax Q326', 'Q327', 'Micromax Q327', 'Micromax Q3301', 'Micromax Q333', 'Micromax_Q333', 'Micromax Q338', 'Micromax Q346', 'Micromax Q354', 'Micromax Q357', 'Micromax Q383', 'Micromax_S302', 'Micromax S302', 'Micromax Q424', 'Micromax Q352', 'Micromax Q4101', 'Micromax C2A', 'Micromax C9', 'Micromax C1', 'Micromax C1A', 'Micromax C2APLS', 'Micromax Q4310', 'Micromax E4815', 'arm_64 Micromax E481', 'Micromax E481', 'Micromax E4816', 'Micromax Q462', 'Micromax Q463', 'Micromax E485', 'Micromax E484', 'Micromax AQ4501', 'Micromax AQ4502', 'A240', 'Micromax A240', 'Micromax Q391', 'Micromax E453', 'Micromax A107', 'Micromax HS2', 'Micromax HS1', 'Micromax_HS3', 'en Micromax_HS3', 'AQ5001', 'Micromax AQ5001', 'AQ5001 Canvas Power', 'Micromax Q392', 'Micromax Q465', 'Micromax Q461', 'Micromax Q350R', 'Micromax Q421', 'Micromax Q417', 'Micromax Q426', 'Micromax Q4260', 'Micromax E311', 'Micromax E352', 'Micromax E455', 'Micromax Q415', 'Micromax Q355', 'Micromax Q469', 'Micromax E451', 'Micromax E451', 'Micromax Q340', 'Micromax Q349', 'Micromax Q345', 'Micromax Q450', 'Micromax Q480', 'arm_64 Micromax Q480', 'Micromax Q380', 'Micromax Q3502', 'Micromax Q351', 'Micromax Q385', 'P70221', 'Micromax P681', 'MicromaxP802', 'Micromax Q427', 'Micromax_Q427', 'Micromax Q413', 'Micromax E313', 'Micromax D2', 'Micromax D200', 'Micromax_D200', 'Micromax D303', 'Micromax D304', 'Micromax_D304', 'Micromax D305', 'Micromax D306', 'Micromax D320', 'Micromax D321', 'Micromax D333', 'Micromax D340', 'Micromax D7517', 'Micromax DM5003', 'Micromax E353', 'Micromax E457', 'Micromax E458', 'Micromax E460', 'Micromax E471', 'Micromax E4817', 'Micromax E482', 'Micromax E483', 'Micromax E5018M', 'Micromax EG111', 'Micromax EG116', 'micromax F', 'micromax F189', 'Micromax F601', 'MicromaxF666', 'Micromax IN', 'Micromax E7533', 'Micromax E6523', 'IN_2b', 'IN_Note1', 'MICROMAX IN1', 'N8216', 'N8301', 'ione note', 'MICROMAX ione note', 'Micromax N4120', 'Micromax N8202', 'Micromax Ninja', 'Micromax Nitro', 'Micromax Note 1+', 'Micromax Note 5', 'Micromax Note3', 'Micromax NX', 'Micromax P001', 'Micromax P250(Funbook)', 'Micromax P255', 'Micromax P256', 'xx Micromax P275', 'Micromax_P275', 'Micromax P275', 'Micromax P280', 'Micromax P290', 'Micromax P310', 'Micromax P350', 'xx Micromax P350', 'Micromax P360', 'Micromax P362', 'Micromax P365', 'Micromax P410', 'Micromax P410i', 'Micromax_P410i', 'Micromax P420', 'Micromax P469', 'Micromax P470', 'MicromaxP480', 'Micromax P500(Funbook)', 'Micromax P560', 'Micromax P580', 'Micromax P580i', 'Micromax P600', 'Micromax P650', 'Micromax P650E', 'Micromax P660', 'Micromax P660', 'Micromax_P666', 'Micromax P666', 'MicromaxP680', 'Micromax P690', 'Micromax P701', 'MicromaxP702', 'Micromax P810', 'en Micromax Q300', 'Micromax_Q300', 'Micromax Q323', 'Micromax_Q323', 'Micromax Q325', 'Micromax_Q325', 'Micromax Q331', 'Micromax_Q331', 'Micromax Q332', 'Micromax_Q332', 'Micromax Q334', 'Micromax Q335', 'Micromax_Q335', 'Micromax Q336', 'Micromax_Q336', 'Micromax Q341', 'Micromax Q343', 'Micromax Q348', 'Micromax_Q353', 'en Micromax_Q353', 'Micromax_Q353P', 'Micromax Q3551', 'Micromax Q3555', 'Micromax Q361', 'Micromax Q370', 'Micromax_Q370', 'Micromax Q371', 'Micromax_Q371', 'Micromax Q375', 'Micromax_Q375', 'Micromax Q379', 'Micromax Q381', 'Micromax Q382', 'Micromax Q386', 'Micromax Q394', 'Micromax_Q394', 'Micromax Q395', 'Micromax Q397', 'Micromax Q398', 'arm Micromax Q398', 'Micromax Q400', 'Micromax_Q400', 'Micromax Q4002', 'en Micromax Q4002', 'Micromax Q401', 'Micromax Q402', 'Micromax Q402 Ultra', 'Micromax Q404', 'Micromax Q411', 'Micromax_Q411', 'Micromax Q412', 'Micromax Q414', 'Micromax Q416', 'Micromax Q419', 'Micromax Q4201', 'Micromax Q422', 'Micromax Q4220', 'Micromax Q423', 'Micromax Q428', 'Micromax_Q428', 'Micromax Q429', '720X1280 Micromax Q4309', 'Micromax Q4312', 'en_US Micromax Q437', 'Micromax Q440Plus', 'Micromax Q454', 'Micromax Q470', 'Micromax Q479', 'Micromax Q491', 'Micromax_Q491', 'Micromax Q502+', 'Micromax Q666', 'Micromax Q67', 'micromax Q68', 'micromax Q78', 'Micromax S300', 'Micromax_S300', 'Micromax S301', 'Micromax_S301', 'Micromax Q4311', 'Micromax Q4601', 'Micromax Q409A', 'Micromax Q409', 'Micromax Q452', 'Micromax Unite 3', 'Micromax Unite 2', 'Micromax Unite 2 A106', 'Micromax Q372', 'Micromax V89', 'Micromax Q4001', 'Micromax Q4202', 'Micromax Q4251', 'arm Micromax Q4251', 'Micromax W5509', 'Micromax X5098', 'Micromax-Xzoom A52', 'YU5530', 'YU5040', 'Micromax YU5900', 'YU5012', 'Micromax Z59']
        self.onpls = ['NE2213', 'NE2217', 'NE2215', 'NE2210', 'NE2210', 'CPH2423', 'CPH2411', 'CPH2417', 'CPH2413', 'CPH2415', 'CPH2449', 'CPH2487', 'ONE A2003', 'ONE A2003', 'ONE A2001', 'ONE A2005', 'ONEPLUS A3003', 'ONEPLUS A3000', 'ONEPLUS A3010', 'ONEPLUS A5000', 'ONEPLUS A5000', 'ONEPLUS A5010', 'ONEPLUS A5010', 'ONEPLUS A5010', 'ONEPLUS A5010', 'ONEPLUS A5010', 'ONEPLUS A6003', 'ONEPLUS A6000', 'ONEPLUS A6010', 'ONEPLUS A6013', 'ONEPLUS A6010', 'GM1900', 'GM1901', 'GM1903', 'GM1917', 'GM1913', 'GM1911', 'GM1910', 'GM1915', 'GM1910', 'HD1901', 'HD1903', 'HD1900 Flow', 'HD1905', 'HD1900', 'HD1907', 'HD1911', 'HD1913', 'HD1910', 'GM1925', 'HD1925', 'GM1920', 'IN2013', 'IN2015', 'IN2010', 'IN2010', 'IN2017', 'IN2019', 'IN2023', 'IN2025', 'IN2020', 'OnePlus8Pro', 'KB2005', 'KB2001', 'KB2007', 'KB2003', 'KB2000', 'OnePlus 8T 5G', 'LE2115', 'LE2113', 'LE2111', 'LE2110', 'LE2120', 'LE2125', 'LE2123', 'LE2121', 'LE2127', 'OnePlus9Pro', 'LE2101', 'LE2100', 'MT2111', 'MT2110', 'ONEPLUS A19677', 'ONEPLUS A2345', 'Oneplus A31', 'Oneplus A3331', 'ONEPLUS A35904', 'ONEPLUS A37000', 'ONEPLUS A3EVB', 'ONEPLUS A62322', 'ONEPLUS A64794', 'ONEPLUS A65369', 'ONEPLUS A68333', 'ONEPLUS A70458', 'ONEPLUS A70791', 'ONEPLUS A78637', 'ONEPLUS A80828', 'ONEPLUS A83306', 'ONEPLUS A87046', 'ONEPLUS A90641', 'Oneplus A99831', 'PGKM10', 'PGKM10', 'PHK110', 'PHK110', 'PGP110', 'PGP110', 'PGZ110', 'ONEPLUS KB2023', 'OnePlus Nord', 'Oneplus Nord 2', 'DN2103', 'DN2101', 'CPH2399', 'CPH2401', 'AC2001', 'AC2003', 'IV2201', 'CPH2409', 'CPH2381', 'CPH2465', 'EB2103', 'EB2101', 'EB2101', 'BE2025', 'BE2026', 'BE2029', 'Nord N10 5G', 'BE2028', 'BE2013', 'BE2011', 'BE2012', 'CPH2459', 'GN2200', 'CPH2469', 'DE2118', 'DE2117', 'A0001', 'ONE E1001', 'ONE E1003', 'ONE E1001', 'ONE E1005']
        self.oppo = [""CPH1869"", ""CPH1929"",""CPH2107"", ""CPH2238"", ""CPH2389"",""CPH2401"", ""CPH2407"", ""CPH2413"", ""CPH2415"", ""CPH2417"", ""CPH2419"", ""CPH2455"", ""CPH2459"", ""CPH2461"", ""CPH2471"", ""CPH2473"", ""CPH2477"", ""CPH8893"", ""CPH2321"", ""CPH2341"", ""CPH2373"", ""CPH2083"", ""CPH2071"", ""CPH2077"", ""CPH2185"", ""CPH2179"", ""CPH2269"", ""CPH2421"", ""CPH2349"", ""CPH2271"", ""CPH1923"", ""CPH1925"", ""CPH1837"", ""CPH2015"", ""CPH2073"", ""CPH2081"", ""CPH2029"", ""CPH2031"", ""CPH2137"", ""CPH1605"", ""CPH1803"", ""CPH1853"", ""CPH1805"", ""CPH1809"", ""CPH1851"", ""CPH1931"", ""CPH1959"", ""CPH1933"", ""CPH1935"", ""CPH1943"", ""CPH2061"", ""CPH2069"", ""CPH2127"", ""CPH2131"", ""CPH2139"", ""CPH2135"", ""CPH2239"", ""CPH2195"", ""CPH2273"", ""CPH2325"", ""CPH2309"", ""CPH1701"", ""CPH2387"", ""CPH1909"", ""CPH1920"", ""CPH1912"", ""CPH1901"", ""CPH1903"", ""CPH1905"", ""CPH1717"", ""CPH1801"", ""CPH2067"", ""CPH2099"", ""CPH2161"", ""CPH2219"", ""CPH2197"", ""CPH2263"", ""CPH2375"", ""CPH2339"", ""CPH1715"", ""CPH2385"", ""CPH1729"", ""CPH1827"", ""CPH1938"", ""CPH1937"", ""CPH1939"", ""CPH1941"", ""CPH2001"", ""CPH2021"", ""CPH2059"", ""CPH2121"", ""CPH2123"", ""CPH2203"", ""CPH2333"", ""CPH2365"", ""CPH1913"", ""CPH1911"", ""CPH1915"", ""CPH1969"", ""CPH2209"", ""CPH1987"", ""CPH2095"", ""CPH2119"", ""CPH2285"", ""CPH2213"", ""CPH2223"", ""CPH2363"", ""CPH1609"", ""CPH1613"", ""CPH1723"", ""CPH1727"", ""CPH1725"", ""CPH1819"", ""CPH1821"", ""CPH1825"", ""CPH1881"", ""CPH1823"", ""CPH1871"", ""CPH1875"", ""CPH2023"", ""CPH2005"", ""CPH2025"", ""CPH2207"", ""CPH2173"", ""CPH2307"", ""CPH2305"", ""CPH2337"", ""CPH1955"", ""CPH1707"", ""CPH1719"", ""CPH1721"", ""CPH1835"", ""CPH1831"", ""CPH1833"", ""CPH1879"", ""CPH1893"", ""CPH1877"", ""CPH1607"", ""CPH1611"", ""CPH1917"", ""CPH1919"", ""CPH1907"", ""CPH1989"", ""CPH1945"", ""CPH1951"", ""CPH2043"", ""CPH2035"", ""CPH2037"", ""CPH2036"", ""CPH2009"", ""CPH2013"", ""CPH2113"", ""CPH2091"", ""CPH2125"", ""CPH2109"", ""CPH2089"", ""CPH2065"", ""CPH2159"", ""CPH2145"", ""CPH2205"", ""CPH2201"", ""CPH2199"", ""CPH2217"", ""CPH1921"", ""CPH2211"", ""CPH2235"", ""CPH2251"", ""CPH2249"", ""CPH2247"", ""CPH2237"", ""CPH2371"", ""CPH2293"", ""CPH2353"", ""CPH2343"", ""CPH2359"", ""CPH2357"", ""CPH2457"", ""CPH1983"", ""CPH1979""]
        self.vivo = ['vivo 1002T', 'Vivo 1605', 'vivo 1730', 'vivo 1809', 'vivo_1820', 'vivo 1835', 'vivo 1914', 'vivo 2010', 'vivo 2019', 'vivo 2019', 'vivo 2019', 'vivo 2023', 'vivo 2027', 'vivo 3969', 'VIVO 5', 'Vivo 6', 'Vivo 7 Pro', 'Vivo 8', 'Vivo 93K Prime', 'vivo A5 ', 'vivo a54', 'Vivo A54', 'vivo a57', 'Vivo A87', 'VIVO A94', 'VIVO AIR', 'VIVO C8818', 'vivo E1', 'vivo E3', 'vivo E3', 'vivo E5', 'Vivo EGO', 'V1962BA', 'vivo h5', 'V1824A', 'V1824A', 'V1824BA', 'V2217A', 'V2217A', 'V2218A', 'V2218A', 'V2218A', 'V2243A', 'V1955A', 'I1927', 'I1928', 'V2024A', 'V2025A', 'V2025A', 'V2049A', 'V2049A', 'I2009', 'I2012', 'I2012', 'V2136A', 'V2136A', 'V2141A', 'V2171A', 'I2017', 'V2172A', 'V2172A', 'I2022', 'I2019', 'I2019', 'I2201', 'V1914A', 'V1914A', 'V1981A', 'V2055A', 'V2118A', 'V2157A', 'V2157A', 'V2154A', 'V2196A', 'V2196A', 'V2199A', 'V2231A', 'V2238A', 'V1936AL', 'V1936A', 'V1922A', 'V1922A', 'V1922A ', 'V1916A', 'V2023A', 'V2023A', 'VIVO V2023A', 'V2065A', 'V2061A', 'V2061A', 'V2143A', 'V2106A', 'V2165A', 'V2165A', 'V2180GA', 'V1986A', 'V2012A', 'V2012A', 'V2073A', 'V2073A', 'I2011', 'V2148A', 'I2018', 'V1919A', 'V2131A', 'V2220A', 'I2202', 'I2206', 'I2203', 'I2202', 'I2127', 'I2202', 'I2208', 'I2208', 'I2126', 'I2126', 'I2126', 'V2164KA', 'V2164KA', 'VIVO IV', 'VIVO IV', 'VIVO IV', 'VIVO IV', 'Vivo J5', 'vivo 1805', 'vivo 1805', 'vivo NEX', 'V1923A', 'vivo 1912', 'V1923A', 'vivo 1912', 'vivo 1913', 'V1924A', 'V1924A', 'vivo 1913', 'V1950A', 'V1950A', 'vivo NEX A', 'vivo NEX A', 'vivo 1813', 'V1821A', 'V1821A', 'vivo NEX S', 'vivo NEX S', 'Vivo ONE', 'Vivo ONE', 'PA2170', 'vivo PD1628F_EX', 'vivo PD1709', 'vivo PD1709F_EX', 'vivo PD1709F_EX', 'vivo PD1728', 'vivo PD1728', 'vivo PD1832F_EX', 'vivo PD2046F_EX', 'vivo PD2050F_EX', 'vivo PD2055F_EX', 'vivo PD2059F_EX', 'Vivo S', 'V1831A', 'V1831A', 'VIVO S1', 'Vivo S1 Prime', 'V1832A', 'V1832T', 'V2121A', 'V2121A', 'V2130A', 'V2130A', 'Vivo S11', 'Vivo S11 ', 'vivo S11t', 'vivo S11t', 'vivo S11t', 'vivo S11t', 'vivo S12', 'V2162A', 'Vivo S13', 'V2203A', 'V2207A', 'V2190A', 'V2244A', 'vivo S1Pro', 'Vivo S20 ', 'Vivo S21 ', 'Vivo S31', 'Vivo S4', 'Vivo S40', 'Vivo S41 /MMB439M', 'V1932A', 'vivo S6', 'V1962A', 'vivo S6T', 'V2020CA', 'V2020A', 'Vivo S76', 'V2031EA', 'vivo S7i(t)', 'vivo S7i(t)', 'vivo S7i(t)', 'V2080A', 'vivo S7t', 'vivo_S7t', 'vivo S7t', 'S7t 5G', 'vivo S7w', 'vivo S8', 'vivo S9', 'vivo S9', 'vivo S9', 'V2072A', 'V2048A', 'vivo S9t', 'V2168', 'V2168', 'V2153', 'V2153', 'V2150', 'V2151', 'V2151', 'V2151', 'V2143', 'vivo TD1602_EX', 'vivo U1', 'vivo 1916', 'vivo 1916', 'vivo 1921', 'V1941A', 'V1941A', 'V1928A', 'vivo V1', 'vivo V1', 'vivo V10', 'Vivo V10', 'VIVO V11', 'Vivo V11', 'vivo 1804', 'vivo 1804', 'vivo 1806', 'vivo 1806', 'vivo v11pro', 'vivo 1819', 'vivo 1818', 'vivo 1818', 'vivo 1920', 'vivo 1919', 'vivo 1907', 'vivo 1907', 'vivo 1907_19', 'vivo 1910', 'vivo 1909', 'vivo 1910', 'vivo 1933', 'vivo 1933', 'vivo V1907', 'vivo v19neo', 'vivo V1Max', 'vivo V1Max', 'vivo V2', 'V2040', 'vivo 2018', 'vivo 2018', 'V2022', 'Vivo V20A', 'Vivo V20G', 'V2066', 'V2108', 'V2050', 'V2050', 'V2050', 'V2061', 'V2055', 'Vivo V21S', 'V2130', 'V2132A', 'V2116', 'V2115', 'V2116', 'V2116', 'V2126', 'V2126', 'V2228', 'V2228', 'V2158', 'V2158', 'V2202', 'V2202', 'V2201', 'V2246', 'V2230', 'V2230', 'V2237', 'vivo V3', 'vivo V3', 'vivo V3Max A', 'vivo V3Max L', 'vivo v30', 'vivo v31', 'vivo V3L', 'vivo V3L', 'vivo V3L', 'vivo V3L', 'vivo V3M A', 'vivo V3M A', 'vivo V3MA', 'vivo_V3Max', 'vivo v45', 'vivo 1601', 'vivo V5', 'vivo 1609', 'vivo 1611', 'Vivo V51', 'Vivo V54', 'vivo 1612', 'vivo 1713', 'vivo V5S A', 'vivo 1718', 'vivo 1716', 'vivo Y79A', 'vivo Y79A', 'V2166BA', 'Vivo V8', 'vivo 1723', 'vivo V9 mini', 'vivo 1851', 'VIVO V9Pro', 'vivo 1851', 'vivo 1727', 'Vivo X', 'V2178A', 'V2229A', 'V2170A', 'V2170A', 'vivo Xplay3S', 'vivo Xplay3S', 'vivo Xplay3S', 'vivo Xplay5A', 'vivo Xplay5A', 'vivo Xplay5A', 'vivo Xplay5S', 'vivo Xplay5S', 'vivo Xplay6', 'vivo Xplay6L', 'vivo Xplay6', 'vivo Xplay6', 'vivo X710L', 'vivo X710L', 'vivo X710L', 'vivo X710L', 'vivo X1', 'vivo X1', 'vivo X1', 'vivo X1', 'Vivo X11', 'vivo X1S', 'vivo X1S', 'vivo X1S', 'vivo X1St', 'vivo X1St', 'vivo X1St', 'vivo X1St', 'vivo X1St', 'vivo X1W', 'vivo X1w', 'VIVO X2', 'VIVO X2', 'VIVO_X2', 'vivo X20', 'vivo X20A', 'vivo X20Plus A', 'vivo 1720', 'vivo X20Plus UD', 'vivo X20Plus UD', 'vivo X21', 'vivo X21A', 'vivo X21UD A', 'vivo X21i', 'vivo X21i A', 'vivo X21i', 'vivo X21i A ', 'V1814A', 'V1814T', 'V1814T', 'V1814A', 'V1809A', 'V1809A', 'V1816A', 'V1809T', 'V1816T', 'V1829A', 'V1838A', 'V1838T', 'V1829T', 'V1836A', 'V1836A', 'V1836T', 'vivo X27Pro', 'V1938CT', 'V1938T', 'V1938T', 'vivo X3F', 'vivo X3F', 'vivo X3F', 'vivo X3L', 'vivo X3L', 'vivo X3S', 'vivo X3S', 'vivo X3S', 'vivo X3S', 'vivo X3S', 'vivo X3S', 'vivo X3S W', 'vivo X3S W', 'vivo X3S W', 'vivo X3S W', 'vivo X3t', 'vivo X3t', 'vivo X3t', 'vivo X3t', 'vivo X3V', 'vivo X3V', 'vivo X3V', 'vivo X3V', 'Vivo X40', 'vivo X5L', 'vivo X5', 'vivo X5L', 'vivo X5Pro D', 'vivo X5Pro L', 'vivo X5Pro V', 'vivo X5Pro D', 'vivo X5Pro D', 'V2001A', 'V2001A', 'vivo 2004', 'vivo 2005', 'vivo 2005', 'V1937', 'vivo 1937', 'V1937', 'V1937', 'vivo 2006', 'vivo 2006', 'V2005A', 'V2011A', 'X50 Pro+', 'V1930', 'V1930', 'vivo X510t', 'vivo X510t', 'vivo X510t', 'vivo X510t', 'vivo X510t', 'vivo X520L', 'vivo X5F', 'vivo X5M', 'vivo X5M', 'vivo X5M', 'vivo X5Max ', 'vivo X5Max L', 'vivo X5Max L', 'vivo X5Max S', 'vivo X5Max V', 'vivo X5S L', 'vivo X5S L', 'vivo X5V', 'vivo X5V', 'vivo X5V', 'vivo X6D', 'vivo X6A', 'vivo X6Plus D', 'vivo X6Plus A', 'vivo X6Plus L', 'vivo X6Plus D', 'vivo X6Plus A', 'vivo X6Plus D', 'vivo X6Plus L', 'V2046A', 'V2059A', 'V2046A', 'V2045', 'V2046', 'V2047A', 'V2056A', 'V2085A', 'vivo X6S A', 'vivo X6S A', 'vivo X6S A', 'vivo X6S A', 'vivo X6SPlus D', 'vivo X6SPlus D', 'vivo X6SPlus D', 'vivo X6SPlus D', 'vivo X6SPlus A', 'vivo X7L', 'vivo X7Plus', 'vivo X7Plus', 'V2133A', 'V2104', 'V2104', 'V2105', 'V2134A', 'V2105', 'V2145A', 'V2114', 'V2145A', 'vivo X710F', 'vivo X710F', 'vivo X710F', 'vivo X710F', 'V2144', 'V2183A', 'V2144', 'V2208', 'V2185A', 'V2145', 'V2185A', 'Vivo X83', 'vivo X9', 'vivo X9L', 'vivo X9', 'vivo X9', 'vivo X9Plus', 'vivo X9Plus L', 'V2241A', 'V2242A', 'V2242A', 'V2227A', 'vivo X9i', 'vivo X9i', 'vivo X9i', 'vivo X9s', 'vivo X9s L', 'vivo X9s Plus', 'vivo X9s Plus', 'vivo X9s Plus L', 'vivo X9s Plus', 'VIVO XL', 'vivo Xplay', 'vivo Xshot', 'vivo Xshot', 'vivo Xshot', 'vivo Xshot', 'V2203', 'V2221', 'Vivo y1', 'Vivo Y1', 'V2168A', 'V2168A', 'vivo 1906', 'V2028', 'vivo Y11t', 'vivo Y11t', 'vivo Y11t', 'vivo 1904', 'V2163A', 'V2102', 'V2102', 'vivo 2007', 'vivo 2007', 'Vivo Y12I Pro', 'V2026', 'V2042', 'V2033', 'V2039', 'V2069', 'V2026_21', 'vivo Y13L', 'vivo Y13', 'vivo Y13L', 'vivo Y13L', 'vivo Y13i', 'vivo_Y13i', 'vivo Y13iL', 'vivo Y13iL', 'vivo Y13T', 'vivo Y13T', 'vivo 1901', 'vivo Y15T', 'vivo Y15T', 'V2134', 'V2147', 'V2147', 'V2212', 'V2120', 'V2204', 'V2214', 'V2204', 'vivo 1902', 'vivo 1902_19', 'VIVO 1902', 'vivo Y17T', 'vivo Y17T', 'vivo_Y17T', 'vivo Y17T', 'vivo Y17W', 'vivo Y17W', 'vivo Y17W', 'vivo Y18L', 'vivo Y18L', 'vivo Y18L', 'vivo 1915', 'vivo Y19t', 'vivo Y19t', 'vivo Y19t', 'vivo Y19t', 'Vivo Y1i', 'vivo 2015', 'vivo 2015', 'V2029', 'V2027', 'V2043_21', 'V2101', 'V2070', 'V2054', 'V2052', 'V2037', 'V2032', 'V2038', 'V2038', 'V2129', 'V2129', 'V2111', 'V2149', 'V2140', 'V2140', 'V2152', 'V2152', 'V2110', 'V2110', 'V2131', 'V2135', 'V2207', 'vivo Y22iL', 'vivo Y22iL', 'V2206', 'V2206', 'vivo Y23L', 'vivo Y23L', 'vivo y23l', 'vivo Y23L', 'vivo Y23L', 'vivo Y23L', 'vivo 1613', 'vivo Y27', 'vivo Y27L', 'vivo Y27', 'vivo Y28', 'vivo Y28', 'vivo Y28L', 'vivo Y28L', 'vivo Y29L', 'vivo Y29L', 'vivo Y29L', 'V1901A', 'V1901A', 'V1901A', 'V1901T', 'V1930A', 'vivo 1938', 'V2034A', 'V2036A', 'V2099A', 'V2099A', 'V2160', 'V2160', 'V2160', 'V2066BA', 'V2066A', 'Y30g', 'Vivo Y30S', 'vivo Y31L', 'V2068', 'V2054A', 'V2068A', 'V2068', 'V2158A', 'Vivo Y32', 'V2180A', 'V2057', 'V2109', 'V2166A', 'V2166A', 'V2146', 'V2205', 'V2205', 'vivo Y37A', 'vivo Y37', 'V2044', 'vivo Y3t', 'vivo Y3t', 'vivo Y3t', 'vivo y41', 'vivo Y5 ', 'Vivo Y5', 'vivo 1935', 'VIVO Y50(2021)', 'V2023EA', 'Y50t', 'V2035', 'vivo Y51L', 'vivo Y51A', 'V2030', 'vivo 1707', 'V2031_21', 'vivo Y51t L', 'vivo Y51t L', 'vivo Y51t L', 'V2053', 'V2057A', 'vivo Y53', 'vivo 1606A', 'vivo Y53n', 'V2058', 'V2123A', 'V2069A', 'V2045A', 'V2045A', 'vivo Y55A', 'V2127', 'V2127', 'vivo 1603', 'vivo Y55n', 'vivo 1610', 'V2164A', 'V2164A', 'V1934A', 'V2006', 'vivo Y613', 'vivo Y613', 'vivo Y613F', 'vivo Y622', 'vivo Y622', 'vivo Y622', 'vivo Y622', 'vivo Y622', 'vivo Y623', 'vivo Y623', 'vivo Y627', 'vivo Y627', 'vivo Y627', 'vivo Y627', 'vivo Y628', 'vivo Y628', 'vivo 1719', 'vivo Y66', 'vivo Y66L', 'vivo Y66i A', 'vivo Y67', 'vivo Y67A', 'vivo Y67L', 'vivo Y685', 'vivo 1714', 'vivo Y69A', 'V2002A', 'V2002A', 'vivo Y71A', 'vivo 1724', 'vivo Y71A', 'vivo 1801', 'V2041', 'V2060', 'V2102A', 'V1731CA', 'vivo Y73', 'Vivo Y73 /MMB239M', 'V2059', 'V2031A', 'V2164PA', 'V2117', 'vivo Y75A', 'V2142', 'V2142', 'vivo Y75s', 'vivo Y75s', 'vivo Y75S', 'vivo Y75s', 'V2124', 'V2156A', 'V2219A', 'V2219A', 'V2169', 'V2169', 'V1913A', 'vivo 1808i', 'vivo 1803', 'vivo 1803', 'vivo 1812', 'vivo Y81S', 'V1732A', 'V1732T', 'vivo Y83A', 'vivo 1802', 'vivo Y83A', 'vivo Y83A', 'vivo 1726', 'Vivo Y83I', 'vivo Y85A', 'vivo Y85', 'Vivo Y85i', 'Vivo Y86', 'V1730EA', 'vivo v1730ea', 'vivo 1908', 'vivo 1823', 'vivo 1908_19', 'vivo 1817', 'vivo 1811', 'vivo Y913', 'vivo Y913', 'vivo Y91C', 'vivo 1820', 'vivo 1816', 'vivo Y923', 'vivo Y923', 'vivo Y927', 'vivo Y927', 'vivo Y928', 'vivo Y928', 'vivo Y928', 'vivo 1814', 'V1818A', 'V1818A', 'vivo 1814', 'vivo Y937', 'vivo Y937', 'vivo Y937', 'V1818CT', 'V1818CA', 'vivo 1807', 'vivo Y95', 'V1813A', 'V1813T', 'V1813A', 'vivo Y97', 'V1945A', 'V1801A0', 'vivo Z1', 'vivo 1918', 'vivo 1951', 'vivo 1951', 'VIVO Z1Pro', 'vivo 1918', 'vivo 1918 Flow', 'Vivo Z10', 'vivo Z1i', 'V1730DA', 'V1730DT', 'vivo Z1i', 'vivo_1951', 'vivo 1917', 'V1813BA', 'V1813BT', 'V1813BT', 'Vivo Z34', 'vivo Z3x', 'V1730GA', 'vivo Z3x', 'vivo Z3x', 'V1921A', 'V1911A', 'V1911A', 'V1911A', 'V1990A', 'V1990A', 'V1963A', 'V1963A']
        self.infinix = [""Infinix X652B"", ""Infinix X680"", ""Infinix X690"", ""Infinix X625B"", ""Infinix X655"", ""Infinix X680B"", ""Infinix X652B"", ""Infinix X680"", ""Infinix X690"", ""Infinix X625B"", ""Infinix X655"", ""Infinix X680B"", ""Infinix X652B"", ""Infinix X680"", ""Infinix X690"", ""Infinix X625B"", ""Infinix X655"", ""Infinix X680B"", ""Infinix X652B"", ""Infinix X680"", ""Infinix X690"", ""Infinix X625B"", ""Infinix X655"", ""Infinix X680B"", ""Infinix X652B"", ""Infinix X680"", ""Infinix X690"", ""Infinix X625B"", ""Infinix X655"", ""Infinix X680B""]
        self.opp = random.choice([""OP4F97"", ""OP4BA5L1"", ""OP664D1"", ""OP5F11L1"", ""OP2A92"", ""OP8F17"", ""OP8F31"", ""OP4C9E1"", ""OP5B31"", ""OP4BA6L1"", ""OP2B87"", ""OP6F21"", ""OP6C8E1"", ""OP8F11"", ""OPPOA16"", ""OPPOA15"", ""OPPOA11"", ""OPPOA73"", ""OPPOA37"", ""OPPOA53"", ""OPPOA33"", ""OPPOA93"", ""OPPOA35"", ""OPPOA83"", ""OPPOA57"", ""OPPOA71"", ""OPPOA39"", ""OPPOA3"", ""OPPOA51"", ""OPPOA27"", ""OPPOA79""])
        self.trek = random.choice([""mt6769"", ""mt6768"", ""mt6767"", ""mt6765"", ""mt6763"", ""mt6757"", ""mt6755"", ""mt6753"", ""mt6739"", ""mt6737"", ""mt6735"", ""mt6595"", ""mt6582"", ""mt6572"", ""mt6571"", ""mt6570"", ""mt8563"", ""mt8167"", ""mt8163"", ""mt8135"", ""mt8127"", ""mt8125"", ""mt7623"", ""mt6797"", ""mt6592"", ""mt6590"", ""mt6580"", ""mt6573"", ""mt6575"", ""mt6260"", ""mt6236""])
        self.igversi = (""100.0.0.17.129,100.0.0.17.129,100.0.0.17.129,100.0.0.17.129,100.0.0.17.129,100.0.0.17.129,79.0.0.21.101,78.0.0.11.104,77.0.0.20.113,76.0.0.15.395,75.0.0.23.99,74.0.0.21.99,73.0.0.22.185,72.0.0.21.98,71.0.0.18.102,70.0.0.22.98,69.0.0.30.95,68.0.0.11.99,67.0.0.25.100,66.0.0.11.101,65.0.0.12.86,64.0.0.14.96,63.0.0.17.94,62.0.0.19.93,61.0.0.19.86,60.1.0.17.79,59.0.0.23.76,58.0.0.12.73,57.0.0.9.80,56.0.0.13.78,55.0.0.12.79,54.0.0.14.82,53.0.0.13.84,52.0.0.8.83,51.0.0.20.85,50.1.0.43.119,271.1.0.21.84,131.0.0.23.11,130.0.0.31.12,128.0.0.26.12,126.0.0.25.12,125.0.0.20.12,124.0.0.17.47,123.0.0.21.11,122.0.0.29.23,120.0.0.29.11,119.0.0.33.14,118.0.0.28.12,117.0.0.28.12,115.0.0.26.11,114.0.0.38.12,113.0.0.39.12,112.0.0.29.12,111.1.0.25.15,110.0.0.16.11,109.0.0.18.12,108.0.0.23.11,107.0.0.27.12,106.0.0.24.11,105.0.0.18.11,104.0.0.21.11,103.1.0.15.11,102.0.0.20.11,101.0.0.15.12,100.0.0.17.12,99.0.0.32.182,98.0.0.15.119,97.0.0.32.119"").split(',')
        self.di_versi_ig = random.choice(self.igversi)
        self.kode = random.choice(['104766893','104766900','102221278','104766888','105842053','93117670','94080607','96794592','102221279','100986894','ru_RU','94080606','103516660','98288242','103516666','103516653','uk_UA','96794590','100986893','102221277','95414344','99640920','99640911','96794591','ru_UA','99640905','100986890','107092313','99640900','93117667','100521966','90841939','98288239','89867440','105842051','de_DE','96794584','105842050','en_US','pt_PT','109556223','107092318','en_GB','108357722','112021130','107092322','119104798','108357720','119104802','112021131','100986892','113249569','107104231','fr_FR','pt_BR','109556226','116756948','113249553','113249561','110937441','118342010','120662545','117539703','119875222','110937448','121451799','115994877','108357718','120662547','107608058','122206624','95414346','107092308','112021128','90841948','119875229','117539698','120662550','en_NZ','123103748','91882538','121451810','91882537','118342006','113948109','122338251','110937453','es_US','118342005','121451793','109556219','119875225','en_CA','109556220','117539695','115211358','91882539','119104795','89867442','94080603','164094539','175574628','185203690','188791648','188791674','187682694','188791643','177770724','192992577','180322810','195435560','196643820','196643821','188791637','192992576','196643799','196643801','196643803','195435546','194383411','197825254','197825260','197825079','171727793','197825112','197825012','197825234','179155086','192992563','197825268','166149669','192992565','198036424','197825223','183982969','199325909','199325886','199325890','199325911','197825118','127049003','197825169','197825216','197825127','200395960','179155096','199325907','200396014','188791669','197825133','170693926','200396005','171727780','201577064','201576758','201577192','201775949','201576944','201775970','143631574','126223520','201775951','167338518','144612598','170693940','201775813','200395971','201775744','201775946','202766609','145652094','202766591','202766602','203083142','179155088','202766608','199325884','180322802','202766603','195435547','165030894','201576967','201775904','194383424','197347903','202766610','185203693','201576898','204019468','187682682','204019456','201775901','204019471','204019454','204019458','202766601','204019452','173238721','204019466','148324036','202766581','158441904','201576903','205280538','205280529','201576813','173238729','141753096','205280531','163022072','201576887','163022088','141753091','148324051','205280528','154400383','205280537','201576818','157405371','205858383','201576811','165031093','187682684','145652090','206670917','185203686','192992561','183982986','206670927','150338061','183982962','127049016','175574603','155374054','205858247','135374896','206670920','169474958','206670926','160497905','161478672','192992578','206670929','131223243','206670916','142841919','187682681','171727795','151414277','206670922','160497915','207505137','165030898','208061741','208061688','208180365','208061674','197825052','147375133','208061744','196643798','208061725','122338247','157536430','208061728','209143963','208727155','209143726','205280539','209143903','209143970','181496409','208061739','209143957','210180522','210180512','209143881','209143712','180322805','210180521','195435561','210370119','210180523','210180493','175574596','210180510','210180480','210180513','210180517','176649504','177770663','210180479','211114117','210908379','206670921','211114134','183982943','211399345','211399342','211399332','201775962','211574187','211574249','210180519','167338559','185203649','124583960','211399337','211399335','197825163','166149717','211399336','212063371','211399329','209143954','210180482','168361634','212214017','209143867','211399341','211399340','212214027','195435510','122338243','139237670','152367502','212676872','212676898','212676875','212676895','212676901','209823384','212676869','196643822','212676878','213367980','213368005','212676886','213558743','209143913','212214039','158441917','174081672','213558750','201775966','188791681','185203705','143631575','161478664','214245350','161478663','212676881','213558770','214245346','138226752','214245221','214245182','214245206','214245218','214245354','214245295','214245199','214245304','214245280','214446313','214245187','214245288','214139002','202766605','214245319','214646783','158441914','215246048','195435544','208061677','215464400','128676146','215464389','215464385','215464390','215464398','182747397','215464393','216233197','201775791','216817344','215464395','216817286','185203642','164094529','216817305','215464401','162439029','215464382','216817280','216817331','214330969','216817299','216817357','217948981','217948980','217948956','217948959','217948968','216817296','217948952','217948982','216817269','219308759','219308726','182747387','219308721','219308754','219308763','176649435','183982982','219909486','127049038','219308730','221134012','221134032','221134009','221134037','194383426','221134029','221134005','221134018','145652093','225283632','165031108','225283625','224652582','139906580','225283628','225283624','226142579','225283634','225283631','226493211','225283623','185203672','156514151','218793478','225283621','227299063','225283627','227299064','227299021','227299027','227544546','227299041','227299060','227299012','228970707','228970705','227299005','228970687','228970683','228970694','228970710','228970689','160497904','195435540','129611419','229783842','230291708','228970681','148324047','230877709','231192211','230877674','230877705','230877678','211399328','209143896','230877713','194383428','230877689','221134002','231457747','208061721','230877671','230877668','232868027','232088496','185203706','232868005','232867964','232868001','232868015','232868031','232867959','232868009','164094526','232867941','234041364','182747399','232868024','232867949','234847239','234847238','234847234','162439040','234847229','234847230','181496427','234847240','232867993','195435558','232867967','232867997','234847227','235871830','221133998','236572344','236572377','153386780','236572337','236572349','236572372','234847226','236572383','237507050','238093993','238093948','238093954','238093999','238093982','239490565','239490555','238093946','238093966','239490563','239490550','239974660','240726416','239490568','240726484','240726452','239490551','239490548','240726426','240726476','240726491','240726471','241043882','241114613','236572331','241267273','240726407','241456456','241267278','241267269','241114619','241456445','241456451','242168941','242168928','242168931','242168939','242168925','240726436','242375239','144722090','242168935','242290370','157405369','242168933','242290355','242703240','242807362','242168923','242168943','242991209','243646252','243646269','242991200','243711120','243646267','243711093','243975802','243646263','243646248','243646255','244167578','128676156','194383413','243975835','244390417','244390338','245196084','245196061','240726392','245196055','243646273','245196082','245196063','245196070','245666450','245466705','245870319','245870301','245870347','245196087','246889064','246889072','246889073','246889074','246889065','247146500','246889063','245870262','247370962','247146481','246889068','246889062','247541884','247541831','247370955','247370942','247720736','247720751','248310216','248310220','248310208','247720744','248399342','248310210','247720747','248310206','248717751','248310212','248310221','248823392','248583561','248310205','248899028','248955251','248955247','249178904','248955244','249507608','249507582','249507588','249507585','248955240','249507607','249507592','249810008','249966137','249507610','249966081','249966100','249507599','249966140','249810004','123790722','250188776','249628096','250188788','250742103','250742113','250742102','250877984','250742105','250742111','251048681','250742107','250742115','251048695','251304696','251304682','251524431','251530710','251304689','251524420','251524409','251524390','250742101','251048673','252055918','252055945','251920416','252055944','252055925','252239038','252055936','252055915','252055948','252390568','252390583','252580134','252740497','252740485','252740490','253120615','253325372','253325384','253325385','253447816','253146263','253120607','253325374','253120598','253325371','253447808','253447809','253325378','253447814','253447807','253447811','253447817','253447813','181496411','253447806','255191971','255013798','255777478','255777471','255777474','255777472','255959637','255777477','255959614','255959635','256099199','256099204','150338064','256099153','256099205','256099156','255983744','256107300','255777470','126223536','256203326','256099190','256099151','256324061','256324047','256203339','256966628','256966589','256966626','256966590','124584015','257456576','256966593','257456590','256966629','256966587','256966592','257456586','257456539','259829115','259829104','259829113','260037038','259829105','259829109','260037030','260149625','259829103','260149621','260465044','259829116','260724710','179155058','261079769','261079761','261079768','261079762','261079771','261276939','157405370','135374885','261079765','261393056','261393062','261079760','181496406','182747360','261504698','261690888','261504706','169474957','262218766','262290715','262290774','262372432','262372425','262372431','262886993','262886995','262372426','262886987','261079764','262886986','262886988','262886990','262372433','262886996','263652962','264009049','264009019','264009030','264009021','264009023','264009052','264009024','261763534','174081651','169474965','232867942','264009013','255959606','264009028','267397344','267397322','267925737','267397343','267925708','267397327','267397321','267925714','267258517','267925705','268773287','267925733','268773233','267925702','268773286','159526770','268773239','268773272','269790795','269285030','269790805','269790803','269790792','268773227','269849047','270426177','270426174','271182277','269790789','271182270','268773290','271182266','271182276','269790798','271182279','271182265','271182267','269790807','271823819','272382110','272382111','272382106','272693584','272382095','272382093','272382098','272382100','272382103','273728833','273371577','273728832','273728798','273907093','273907111','273907108','238093987','273907112','273907103','274774869','274774891','274774908','273907087','274774904','274774875','274774914','275292626','276027938','276028040','276027963','276028037','276028020','276028017','274774862','276028013','249507580','276028029','273907098','277249238','277249248','277249249','276028033','277249250','277249226','275292623','277249214','277249242','277249237','277249240','278625447','278002558','278625420','278625431','278625423','117539687','278625416','278625444','277249213','278625451','279469964','279996068','279996060','279996067','279996058','280194220','279996065','279996063','279996061','279996059','280894196','273728787','271182262','281579032','281579023','276514494','281579021','281579027','281579033','268773274','283072590','281579025','283072571','282619332','283489774','283072587','283072567','281579031','283072580','283072574','284459213','284459224','179155089','256966583','284459214','283072585','284459218','284459223','284459225','285338607','275113919','284459221','284459212','284459215','285855793','285855800','285855803','285855791','285855802','285855804','285855795','286809973','287420974','287421023','287420968','287420979','287421017','287421005','287421019','287421012','277249241','288682406','287421026','288682405','288682397','288682407','261079772','288682398','288682401','288205409','289692198','287420997','289692186'])
        self.dpi_pxl = random.choice(['240dpi; 1760x792', '240dpi; 1920x864', '320dpi; 2400x1080', '400dpi; 3200x1440', '480dpi; 1080x1920', '320dpi; 900x1600', '320dpi; 720x1280', '240dpi; 540x960', '280dpi; 1920x1080', '240dpi; 160x900', '240dpi; 1280x720', '160dpi; 960x540','160dpi; 623x1280'])
        self.dpi = random.choice(['320dpi','640dpi','213dpi','480dpi','420dpi','240dpi','280dpi','160dpi','560dpi','540dpi','272dpi','360dpi','720dpi','270dpi','450dpi','600dpi','279dpi','210dpi','180dpi','510dpi','300dpi','454dpi','314dpi','288dpi','401dpi','153dpi','267dpi','345dpi','493dpi','340dpi','604dpi','465dpi','680dpi','256dpi','290dpi','432dpi','273dpi','120dpi','200dpi','367dpi','419dpi','306dpi','303dpi','411dpi','195dpi','518dpi','230dpi','384dpi','315dpi','293dpi','274dpi','235dpi'])
        self.pxl = random.choice(['720x1280','1440x2560','1440x2768','1280x720','1280x800','1080x1920','540x960','1080x2076','1080x2094','1080x2220','480x800','768x1024','1440x2792','1200x1920','720x1384','1920x1080','720x1369','800x1280','720x1440','1080x2058','600x1024','720x1396','2792x1440','1920x1200','2560x1440','1536x2048','720x1382','1080x2113','1080x2198','1080x2131','720x1423','1080x2069','720x1481','1080x2047','1080x2110','1080x2181','1080x2209','1080x2180','1080x2020','1080x2095','1440x2723','1080x2175','720x1365','1440x2699','1080x2218','2699x1440','1440x2907','1080x2257','720x1370','1080x2042','720x1372','1080x2200','1080x2186','720x1361','1080x2024','1080x2006','720x1402','1440x2831','720x1454','1080x2064','1440x2933','720x1411','720x1450','1440x2730','1080x2046','2094x1080','540x888','1440x2759','1080x2274','1080x2178','1440x2706','720x1356','720x1466','1440x2900','2560x1600','1080x2038','1600x2452','1080x2129','720x1422','720x1381','1080x2183','1080x2285','800x1216','1080x2216','1080x2168','1080x2119','1080x2128','1080x2273','2274x1080','1080x2162','1080x2164','2076x1080','1024x768','1080x2173','1440x2845','1080x2134','720x1379','1440x2838','1080x2139','2131x1080','1440x2744','1080x2192','720x1406','1440x2960','1080x2029','2042x1080','1080x2212','1406x720','1080x2288','2047x1080','1080x2051','720x1398','1280x736','1382x720','720x1353','1080x2050','1080x2028','1080x2256','2711x1440','2175x1080','1080x2281','2560x1492','1440x2923','1200x1845','1080x2189','1080x2002','1440x2711','2110x1080','960x540','1080x2033','2200x1080','720x1452','720x1480','1440x2735','720x1472','1080x2277','1080x2169','2874x1440','1600x2560','1080x2151','2218x1080','1080x2182','720x1468','1440x2898','1080x2011','1080x2201','720x1380','1080x2287','2069x1080','1200x1836','2046x1080','720x1439','2058x1080','2182x1080','720x1399','1080x2282','1440x2721','1080x2324','720x1432','1080x2165','1080x2150','1080x2156','1080x1872','1440x3048','1532x2560','720x1355','720x1390','720x1476','720x1410','1080x2032','720x1437','1440x2682','1440x2921','1080x2270','1080x2160','720x1446','1200x1848','1440x2874','1080x2309','1080x2174','1440x2867','1080x2060','1080x2196','1080x2401','1536x1922','1080x2280','1080x2123','720x1435','1440x2927','1080x2276','720x1448','720x1469','720x1344','1080x2187','540x937','1440x3028','1080x2184','1440x2718','1080x2326','840x1834','1440x2935','1440x2880','1440x2892','2048x2048','1080x2195','1080x2322','720x1419','987x1450','1080x2092','1440x3047','720x1358','1080x2136','720x1357','1080x2093','720x1477','1080x2312','1080x2361','720x1341','720x1507','1080x2172','720x1337','1080x2177','1080x2125','1440x2891','1600x2434','720x1394','1080x2159','720x1387','1080x2166','1080x2154','1080x2147','1440x2747','1080x2105','1440x2911','720x1473','1080x2055','1080x2265','720x1436','1080x2190','1600x2526','720x1373','720x1415','1080x2249','1080x2254','720x1455','1440x3040','1080x2149','720x1385','1440x3036','1080x2111','1440x2904','720x1442','720x1377','1080x2307','1080x2327','1080x2141','1080x2025','720x1430','720x1375','1080x2283','1440x2779','1080x2321','1080x2268','1440x2758','1752x2698','1080x2267','1200x1856','1440x2756','720x1464','1080x2234','1080x2171','1080x2155','720x1463','1080x2122','720x1467','1080x2264','720x1349','1440x2999','720x1458','1080x2015','720x1431','1242x2208','1080x2185','1080x2148','1080x2163','1440x2780','720x1445','1080x2146','1200x1916','720x1502','1200x1928','720x1506','720x1424','720x1465','720x1420','1080x2176','720x1521','1080x2315','1080x2400','720x1471','1080x2157','1600x2458','1080x2067','1080x2191','1080x2271','720x1407','800x1208','1080x2087','1080x2199','578x1028','720x1485','540x879','1080x2179','720x1555','810x1598','720x1378','1200x1897','720x1395','720x1459','900x1600','1080x2275','1440x2733'])
        self.dvc = random.choice([""30/11"",""31/12"",""29/10""])
        return(random.choice([
             f'Instagram {self.di_versi_ig} Android ({self.dvc}; {self.dpi}; {self.pxl}; INFINIX/Infinix; {str(random.choice(self.infinix))}; qcom; in_ID; 242168925)',
            f'Instagram {self.di_versi_ig} Android ({self.dvc}; {self.dpi}; {self.pxl}; NEXUS/Nexus; {str(random.choice(self.nexus))}; qcom; in_ID; 242168925)',
            f'Instagram {self.di_versi_ig} Android ({self.dvc}; {self.dpi}; {self.pxl}; MICROMAX/Micromax; {str(random.choice(self.micromax))}; qcom; in_ID; 242168925)',
            f'Instagram {self.di_versi_ig} Android ({self.dvc}; {self.dpi}; {self.pxl}; ONEPLUS/Oneplus; {str(random.choice(self.onpls))}; qcom; in_ID; 242168925)',
            f'Instagram {self.di_versi_ig} Android ({self.dvc}; {self.dpi}; {self.pxl}; OPPO/Oppo; {str(random.choice(self.oppo))}; qcom; in_ID; 242168925)',
            f'Instagram {self.di_versi_ig} Android ({self.dvc}; {self.dpi}; {self.pxl}; REALME/Realme; {str(random.choice(self.realme))}; qcom; in_ID; 242168925)',
            f'Instagram {self.di_versi_ig} Android ({self.dvc}; {self.dpi}; {self.pxl}; XIAOMI/Redmi; {str(random.choice(self.redmi))}; qcom; in_ID; 242168925)',
            f'Instagram {self.di_versi_ig} Android ({self.dvc}; {self.dpi}; {self.pxl}; VIVO/Vivo; {str(random.choice(self.vivo))}; qcom; in_ID; 242168925)',
           ])
       ) 
        
    def useragent_api_threads(self):
        self.nexus = ['Galaxy Nexus', 'Nexus 10', 'Nexus 2', 'Nexus 4', 'Nexus 4', 'Nexus 4', 'Nexus 4', 'Nexus 4', 'Nexus 4', 'Nexus 5', 'phone/Nexus 5', 'Nexus 5X', 'Nexus 6', 'Nexus 7', 'Nexus 9', 'Nexus One', 'Nexus One', 'Nexus One', 'Nexus One', 'Nexus One', 'Nexus One', 'Nexus Player', 'Nexus Player', 'Nexus S', 'Nexus S', 'Nexus S 4G', 'nexus S', 'Nexus S', 'Nexus s', 'Nexus S', 'Nexus S', 'Nexus S', 'Nexus S', 'Nexus S']
        self.realme = ['RMX3630', 'RMX3663', 'RMX3663', 'RMX3661', 'RMX3687', 'RMX3686', 'RMX3687', 'RMX3687', 'RMX1805', 'RMX1809', 'RMX1805', 'RMX1801', 'RMX1807', 'RMX1821', 'RMX1825', 'RMX1851', 'RMX1827', 'RMX1911', 'RMX1971', 'RMX2030', 'RMX1925', 'RMX2001', 'RMX2061', 'RMX2040', 'RMX2002', 'RMX2151', 'RMX2155', 'RMX2170', 'RMX2103', 'RMX3085', 'RMX3241', 'RMX3081', 'RMX3151', 'RMX3381', 'RMX3521', 'RMX3388', 'RMX3474', 'RMX3474', 'RMX3472', 'RMX3471', 'RMX3393', 'RMX3392', 'RMX3491', 'RMX3612', 'RMX1811', 'RMX2185', 'RMX2185', 'RMX3231', 'RMX2189', 'RMX2180', 'RMX2195', 'RMX2101', 'RMX2101', 'RMX1941', 'RMX1941', 'RMX1945', 'RMX1945', 'RMX3063', 'RMX3061', 'RMX3201', 'RMX3261', 'RMX3263', 'RMX3191', 'RMX3193', 'RMX3195', 'RMX3197', 'RMX3269', 'RMX3268', 'RMX2020', 'RMX2027', 'RMX2021', 'RMX3623', 'RMX3581', 'RMX3690', 'RMX3501', 'RMX3503', 'RMX3501', 'RMX3624', 'RMX3511', 'RMX3710', 'RMX3311', 'RMX3310', 'RMX3551', 'RMX3301', 'RMX3300', 'RMX2202', 'RMX2202', 'RMX3363', 'RMX3360', 'RMX3031', 'RMX3031', 'RMX3031', 'RMX3031', 'RMX3370', 'RMX3370', 'RMX3370', 'RMX3357', 'RMX3357', 'RMX3357', 'RMX3357', 'RMX3561', 'RMX3561', 'RMX3560', 'RMX3562', 'RMX3563', 'RMX3371', 'RMX3706', 'RMX3708', 'RMX3706', 'RMX3708', 'RMX3706', 'RMX3706', 'RMX3350', 'RMX3350', 'RMX3350', 'RMX2193', 'RMX2193', 'RMX2161', 'RMX2163', 'RMX2050', 'RMX2050', 'RMX2156', 'RMX3242', 'RMX3171', 'RMX3286', 'RMX3572', 'RMX3395', 'RMX3395', 'RMX3396', 'RMX3396', 'RMX3430', 'RMX3516', 'RMX3235', 'RMX3235', 'RMX3506', 'RMX3506', 'RMP2103', 'RMP2102', 'RMP2102', 'RMP2106', 'RMP2105', 'RMP2107', 'RMP2108', 'RMX2117', 'RMX2117', 'RMX2117', 'RMX2117', 'RMX2173', 'RMX2173', 'RMX2173', 'RMX2173', 'RMX3161', 'RMX3161', 'RMX3161', 'RMX2205', 'RMX2205', 'RMX2205', 'RMX2205', 'RMX3142', 'RMX3142', 'RMX3461', 'RMX3461', 'RMX3478', 'RMX3478', 'RMX3372', 'RMX3372', 'RMX3372', 'RMX3574', 'RMX1831', 'RMX3121', 'RMX3122', 'RMX3121', 'RMX3125', 'RMX3125', 'RMX3042', 'RMX3041', 'RMX3041', 'RMX3043', 'RMX3042', 'RMX3092', 'RMX3093', 'RMX3092', 'RMX3611', 'RMX3611', 'RMX3610', 'RMX3611', 'RMX3571', 'RMX3571', 'RMX3571', 'RMX3571', 'RMX3475', 'RMX2201', 'RMX2200', 'RMX2200', 'RMX2200', 'RMX2111', 'RMX1901', 'RMX1901', 'RMX1901', 'RMX1901', 'RMX1901', 'RMX1991', 'RMX1992', 'RMX1993', 'RMX1931', 'RMX1931', 'RMX1931', 'RMX1931', 'RMX2083', 'RMX2142', 'RMX2081', 'RMX2086', 'RMX2144', 'RMX2071', 'RMX2071', 'RMX2071', 'RMX2075', 'RMX2076', 'RMX2072', 'RMX2072', 'RMX2072', 'RMX2052', 'RMX2176', 'RMX2176', 'RMX2121', 'RMX2121', 'RMX2121', 'RMX3115', 'RMX3115', 'RMX3115', 'RMX1921', 'RMX1921', 'RMX1921']
        self.redmi = [f'Redmi {random.randint(8,15)}',f'Redmi Note {random.randint(8,15)}',f'Redmi {random.randint(8,15)} Pro',f'Redmi Note {random.randint(8,15)} Pro']
        self.micromax = ['Micromax 10', 'Micromax 1J', 'Micromax 86519', 'Micromax A064', 'Micromax_A064', 'Micromax A065', 'Micromax_A065', 'Micromax A066', 'Micromax_A066', 'Micromax A067', 'Micromax_A067', 'MICROMAX_A068', 'MICROMAX A068', 'Micromax A068', 'Micromax A069', 'Micromax_A069', 'Micromax A075', 'Micromax A082', 'Micromax_A082', 'Micromax A089', 'Micromax_A089', 'Micromax A091', 'Micromax A092', 'Micromax_A092', 'Micromax A093', 'Micromax_A093', 'Micromax A095', 'Micromax A096', 'Micromax_A101', 'Micromax A102', 'Micromax_A102', 'Micromax A104', 'Micromax a104', 'Micromax A105', 'Micromax_A105', 'Micromax A106', 'Micromax-A106', 'Micromax A108', 'Micromax_A109', 'Micromax A109', 'Micromax A110', 'Micromax_A110', 'Micromax A110Q', 'Micromax_A110Q', 'Micromax A111', 'Micromax A114', 'Micromax A114R', 'Micromax_A114R', 'Micromax A115', 'Micromax_A115', 'Micromax A116', 'Micromax_A116', 'Micromax A116i', 'Micromax_A116i', 'Micromax A117', 'Micromax_A117', 'Micromax A118R', 'Micromax A119', 'Micromax A120', 'Micromax A121', 'Micromax_A121', 'Micromax A15', 'Micromax A177', 'Micromax A190', 'Micromax_A190', 'Micromax A200', 'Micromax_A200', 'Micromax A21', 'Micromax A210', 'Micromax A24', 'Micromax_A24', 'Micromax A25 Smarty', 'Micromax A250', 'Micromax A255', 'Micromax_A255', 'Micromax A26', 'Micromax_A26', 'Micromax_A27', 'Micromax A27', 'Micromax_A28', 'Micromax A28/GRI40', 'Micromax A28', 'Micromax A290', 'Micromax A30', 'Micromax A300', 'Micromax A310', 'Micromax A311', 'Micromax A315', 'Micromax_A315', 'Micromax_A316', 'Micromax A316', 'Micromax_A34', 'Micromax A34', 'Micromax_A35', 'Micromax A35', 'Micromax A350', 'Micromax_A36', 'Micromax A36', 'Micromax_A37', 'Micromax A37', 'Micromax A37B', 'Micromax_A37B', 'Micromax A40', 'Micromax_A40', 'Micromax A46', 'Micromax_A46', 'Micromax A47', 'MicromaxA47', 'Micromax_A50', 'Micromax A50', 'Micromax A51', 'Micromax A52', 'Micromax A54', 'Micromax A56', 'Micromax_A57', 'Micromax A57', 'Micromax A58', 'Micromax_A58', 'Micromax A59', 'Micromax A60', 'Micromax A61', 'Micromax A62', 'Micromax_A62', 'Micromax A63', 'Micromax_A63', 'Micromax_A65', 'Micromax A65', 'Micromax_A66', 'Micromax A66', 'Micromax A67', 'Micromax A68', 'Micromax A69', 'Micromax_A69', 'Micromax_A70', 'Micromax A700', 'Micromax A71', 'Micromax_A71', 'Micromax A72', 'Micromax_A72', 'Micromax A73', 'Micromax_A74', 'Micromax A74', 'Micromax A75', 'Micromax_A76', 'Micromax A76', 'Micromax A77', 'Micromax A78', 'Micromax A79', 'en_us Micromax A80', 'Micromax A80', 'Micromax A82', 'Micromax_A82', 'Micromax A84', 'Micromax A85', 'Micromax A86', 'Micromax_A86', 'Micromax_A87', 'Micromax A87', 'Micromax A87 . Ninja 4.0', 'Micromax A88', 'Micromax_A88', 'Micromax A89', 'Micromax A90', 'Micromax A90s', 'MIcromax_A90s', 'Micromax A90S', 'Micromax A91', 'Micromax_A91', 'Micromax_A92', 'Micromax A92', 'MicromaxA93', 'Micromax A93', 'Micromax A94', 'Micromax_A94', 'Micromax A96', 'Micromax_A96', 'Micromax A97', 'Micromax_A99', 'Micromax A99', 'Micromax_AD3520', 'Micromax AD3520', 'Micromax AD3550', 'Micromax AD4500', 'Micromax_AD4500', 'Micromax AE90', 'Micromax AO5510', 'Micromax AQ5000', 'Micromax B4A', 'Micromax B5 Pro', 'B5Pro', 'Micromax_Bharat_5_Plus', 'Micromax Q402Plus', 'Micromax Q440', 'Micromax Bharat 5', 'Micromax Q4204', 'Micromax Bharat 5 Plus', 'Micromax Bharat 5 Pro', 'Micromax Bolt 3425', 'Micromax Bolt 2', 'Micromax Q402+', 'Micromax Q306', 'Micromax Q3001', 'Micromax Q301', 'Micromax Q303', 'Micromax Q324', 'Micromax Q326', 'Q327', 'Micromax Q327', 'Micromax Q3301', 'Micromax Q333', 'Micromax_Q333', 'Micromax Q338', 'Micromax Q346', 'Micromax Q354', 'Micromax Q357', 'Micromax Q383', 'Micromax_S302', 'Micromax S302', 'Micromax Q424', 'Micromax Q352', 'Micromax Q4101', 'Micromax C2A', 'Micromax C9', 'Micromax C1', 'Micromax C1A', 'Micromax C2APLS', 'Micromax Q4310', 'Micromax E4815', 'arm_64 Micromax E481', 'Micromax E481', 'Micromax E4816', 'Micromax Q462', 'Micromax Q463', 'Micromax E485', 'Micromax E484', 'Micromax AQ4501', 'Micromax AQ4502', 'A240', 'Micromax A240', 'Micromax Q391', 'Micromax E453', 'Micromax A107', 'Micromax HS2', 'Micromax HS1', 'Micromax_HS3', 'en Micromax_HS3', 'AQ5001', 'Micromax AQ5001', 'AQ5001 Canvas Power', 'Micromax Q392', 'Micromax Q465', 'Micromax Q461', 'Micromax Q350R', 'Micromax Q421', 'Micromax Q417', 'Micromax Q426', 'Micromax Q4260', 'Micromax E311', 'Micromax E352', 'Micromax E455', 'Micromax Q415', 'Micromax Q355', 'Micromax Q469', 'Micromax E451', 'Micromax E451', 'Micromax Q340', 'Micromax Q349', 'Micromax Q345', 'Micromax Q450', 'Micromax Q480', 'arm_64 Micromax Q480', 'Micromax Q380', 'Micromax Q3502', 'Micromax Q351', 'Micromax Q385', 'P70221', 'Micromax P681', 'MicromaxP802', 'Micromax Q427', 'Micromax_Q427', 'Micromax Q413', 'Micromax E313', 'Micromax D2', 'Micromax D200', 'Micromax_D200', 'Micromax D303', 'Micromax D304', 'Micromax_D304', 'Micromax D305', 'Micromax D306', 'Micromax D320', 'Micromax D321', 'Micromax D333', 'Micromax D340', 'Micromax D7517', 'Micromax DM5003', 'Micromax E353', 'Micromax E457', 'Micromax E458', 'Micromax E460', 'Micromax E471', 'Micromax E4817', 'Micromax E482', 'Micromax E483', 'Micromax E5018M', 'Micromax EG111', 'Micromax EG116', 'micromax F', 'micromax F189', 'Micromax F601', 'MicromaxF666', 'Micromax IN', 'Micromax E7533', 'Micromax E6523', 'IN_2b', 'IN_Note1', 'MICROMAX IN1', 'N8216', 'N8301', 'ione note', 'MICROMAX ione note', 'Micromax N4120', 'Micromax N8202', 'Micromax Ninja', 'Micromax Nitro', 'Micromax Note 1+', 'Micromax Note 5', 'Micromax Note3', 'Micromax NX', 'Micromax P001', 'Micromax P250(Funbook)', 'Micromax P255', 'Micromax P256', 'xx Micromax P275', 'Micromax_P275', 'Micromax P275', 'Micromax P280', 'Micromax P290', 'Micromax P310', 'Micromax P350', 'xx Micromax P350', 'Micromax P360', 'Micromax P362', 'Micromax P365', 'Micromax P410', 'Micromax P410i', 'Micromax_P410i', 'Micromax P420', 'Micromax P469', 'Micromax P470', 'MicromaxP480', 'Micromax P500(Funbook)', 'Micromax P560', 'Micromax P580', 'Micromax P580i', 'Micromax P600', 'Micromax P650', 'Micromax P650E', 'Micromax P660', 'Micromax P660', 'Micromax_P666', 'Micromax P666', 'MicromaxP680', 'Micromax P690', 'Micromax P701', 'MicromaxP702', 'Micromax P810', 'en Micromax Q300', 'Micromax_Q300', 'Micromax Q323', 'Micromax_Q323', 'Micromax Q325', 'Micromax_Q325', 'Micromax Q331', 'Micromax_Q331', 'Micromax Q332', 'Micromax_Q332', 'Micromax Q334', 'Micromax Q335', 'Micromax_Q335', 'Micromax Q336', 'Micromax_Q336', 'Micromax Q341', 'Micromax Q343', 'Micromax Q348', 'Micromax_Q353', 'en Micromax_Q353', 'Micromax_Q353P', 'Micromax Q3551', 'Micromax Q3555', 'Micromax Q361', 'Micromax Q370', 'Micromax_Q370', 'Micromax Q371', 'Micromax_Q371', 'Micromax Q375', 'Micromax_Q375', 'Micromax Q379', 'Micromax Q381', 'Micromax Q382', 'Micromax Q386', 'Micromax Q394', 'Micromax_Q394', 'Micromax Q395', 'Micromax Q397', 'Micromax Q398', 'arm Micromax Q398', 'Micromax Q400', 'Micromax_Q400', 'Micromax Q4002', 'en Micromax Q4002', 'Micromax Q401', 'Micromax Q402', 'Micromax Q402 Ultra', 'Micromax Q404', 'Micromax Q411', 'Micromax_Q411', 'Micromax Q412', 'Micromax Q414', 'Micromax Q416', 'Micromax Q419', 'Micromax Q4201', 'Micromax Q422', 'Micromax Q4220', 'Micromax Q423', 'Micromax Q428', 'Micromax_Q428', 'Micromax Q429', '720X1280 Micromax Q4309', 'Micromax Q4312', 'en_US Micromax Q437', 'Micromax Q440Plus', 'Micromax Q454', 'Micromax Q470', 'Micromax Q479', 'Micromax Q491', 'Micromax_Q491', 'Micromax Q502+', 'Micromax Q666', 'Micromax Q67', 'micromax Q68', 'micromax Q78', 'Micromax S300', 'Micromax_S300', 'Micromax S301', 'Micromax_S301', 'Micromax Q4311', 'Micromax Q4601', 'Micromax Q409A', 'Micromax Q409', 'Micromax Q452', 'Micromax Unite 3', 'Micromax Unite 2', 'Micromax Unite 2 A106', 'Micromax Q372', 'Micromax V89', 'Micromax Q4001', 'Micromax Q4202', 'Micromax Q4251', 'arm Micromax Q4251', 'Micromax W5509', 'Micromax X5098', 'Micromax-Xzoom A52', 'YU5530', 'YU5040', 'Micromax YU5900', 'YU5012', 'Micromax Z59']
        self.onpls = ['NE2213', 'NE2217', 'NE2215', 'NE2210', 'NE2210', 'CPH2423', 'CPH2411', 'CPH2417', 'CPH2413', 'CPH2415', 'CPH2449', 'CPH2487', 'ONE A2003', 'ONE A2003', 'ONE A2001', 'ONE A2005', 'ONEPLUS A3003', 'ONEPLUS A3000', 'ONEPLUS A3010', 'ONEPLUS A5000', 'ONEPLUS A5000', 'ONEPLUS A5010', 'ONEPLUS A5010', 'ONEPLUS A5010', 'ONEPLUS A5010', 'ONEPLUS A5010', 'ONEPLUS A6003', 'ONEPLUS A6000', 'ONEPLUS A6010', 'ONEPLUS A6013', 'ONEPLUS A6010', 'GM1900', 'GM1901', 'GM1903', 'GM1917', 'GM1913', 'GM1911', 'GM1910', 'GM1915', 'GM1910', 'HD1901', 'HD1903', 'HD1900 Flow', 'HD1905', 'HD1900', 'HD1907', 'HD1911', 'HD1913', 'HD1910', 'GM1925', 'HD1925', 'GM1920', 'IN2013', 'IN2015', 'IN2010', 'IN2010', 'IN2017', 'IN2019', 'IN2023', 'IN2025', 'IN2020', 'OnePlus8Pro', 'KB2005', 'KB2001', 'KB2007', 'KB2003', 'KB2000', 'OnePlus 8T 5G', 'LE2115', 'LE2113', 'LE2111', 'LE2110', 'LE2120', 'LE2125', 'LE2123', 'LE2121', 'LE2127', 'OnePlus9Pro', 'LE2101', 'LE2100', 'MT2111', 'MT2110', 'ONEPLUS A19677', 'ONEPLUS A2345', 'Oneplus A31', 'Oneplus A3331', 'ONEPLUS A35904', 'ONEPLUS A37000', 'ONEPLUS A3EVB', 'ONEPLUS A62322', 'ONEPLUS A64794', 'ONEPLUS A65369', 'ONEPLUS A68333', 'ONEPLUS A70458', 'ONEPLUS A70791', 'ONEPLUS A78637', 'ONEPLUS A80828', 'ONEPLUS A83306', 'ONEPLUS A87046', 'ONEPLUS A90641', 'Oneplus A99831', 'PGKM10', 'PGKM10', 'PHK110', 'PHK110', 'PGP110', 'PGP110', 'PGZ110', 'ONEPLUS KB2023', 'OnePlus Nord', 'Oneplus Nord 2', 'DN2103', 'DN2101', 'CPH2399', 'CPH2401', 'AC2001', 'AC2003', 'IV2201', 'CPH2409', 'CPH2381', 'CPH2465', 'EB2103', 'EB2101', 'EB2101', 'BE2025', 'BE2026', 'BE2029', 'Nord N10 5G', 'BE2028', 'BE2013', 'BE2011', 'BE2012', 'CPH2459', 'GN2200', 'CPH2469', 'DE2118', 'DE2117', 'A0001', 'ONE E1001', 'ONE E1003', 'ONE E1001', 'ONE E1005']
        self.oppo = [""CPH1869"", ""CPH1929"",""CPH2107"", ""CPH2238"", ""CPH2389"",""CPH2401"", ""CPH2407"", ""CPH2413"", ""CPH2415"", ""CPH2417"", ""CPH2419"", ""CPH2455"", ""CPH2459"", ""CPH2461"", ""CPH2471"", ""CPH2473"", ""CPH2477"", ""CPH8893"", ""CPH2321"", ""CPH2341"", ""CPH2373"", ""CPH2083"", ""CPH2071"", ""CPH2077"", ""CPH2185"", ""CPH2179"", ""CPH2269"", ""CPH2421"", ""CPH2349"", ""CPH2271"", ""CPH1923"", ""CPH1925"", ""CPH1837"", ""CPH2015"", ""CPH2073"", ""CPH2081"", ""CPH2029"", ""CPH2031"", ""CPH2137"", ""CPH1605"", ""CPH1803"", ""CPH1853"", ""CPH1805"", ""CPH1809"", ""CPH1851"", ""CPH1931"", ""CPH1959"", ""CPH1933"", ""CPH1935"", ""CPH1943"", ""CPH2061"", ""CPH2069"", ""CPH2127"", ""CPH2131"", ""CPH2139"", ""CPH2135"", ""CPH2239"", ""CPH2195"", ""CPH2273"", ""CPH2325"", ""CPH2309"", ""CPH1701"", ""CPH2387"", ""CPH1909"", ""CPH1920"", ""CPH1912"", ""CPH1901"", ""CPH1903"", ""CPH1905"", ""CPH1717"", ""CPH1801"", ""CPH2067"", ""CPH2099"", ""CPH2161"", ""CPH2219"", ""CPH2197"", ""CPH2263"", ""CPH2375"", ""CPH2339"", ""CPH1715"", ""CPH2385"", ""CPH1729"", ""CPH1827"", ""CPH1938"", ""CPH1937"", ""CPH1939"", ""CPH1941"", ""CPH2001"", ""CPH2021"", ""CPH2059"", ""CPH2121"", ""CPH2123"", ""CPH2203"", ""CPH2333"", ""CPH2365"", ""CPH1913"", ""CPH1911"", ""CPH1915"", ""CPH1969"", ""CPH2209"", ""CPH1987"", ""CPH2095"", ""CPH2119"", ""CPH2285"", ""CPH2213"", ""CPH2223"", ""CPH2363"", ""CPH1609"", ""CPH1613"", ""CPH1723"", ""CPH1727"", ""CPH1725"", ""CPH1819"", ""CPH1821"", ""CPH1825"", ""CPH1881"", ""CPH1823"", ""CPH1871"", ""CPH1875"", ""CPH2023"", ""CPH2005"", ""CPH2025"", ""CPH2207"", ""CPH2173"", ""CPH2307"", ""CPH2305"", ""CPH2337"", ""CPH1955"", ""CPH1707"", ""CPH1719"", ""CPH1721"", ""CPH1835"", ""CPH1831"", ""CPH1833"", ""CPH1879"", ""CPH1893"", ""CPH1877"", ""CPH1607"", ""CPH1611"", ""CPH1917"", ""CPH1919"", ""CPH1907"", ""CPH1989"", ""CPH1945"", ""CPH1951"", ""CPH2043"", ""CPH2035"", ""CPH2037"", ""CPH2036"", ""CPH2009"", ""CPH2013"", ""CPH2113"", ""CPH2091"", ""CPH2125"", ""CPH2109"", ""CPH2089"", ""CPH2065"", ""CPH2159"", ""CPH2145"", ""CPH2205"", ""CPH2201"", ""CPH2199"", ""CPH2217"", ""CPH1921"", ""CPH2211"", ""CPH2235"", ""CPH2251"", ""CPH2249"", ""CPH2247"", ""CPH2237"", ""CPH2371"", ""CPH2293"", ""CPH2353"", ""CPH2343"", ""CPH2359"", ""CPH2357"", ""CPH2457"", ""CPH1983"", ""CPH1979""]
        self.vivo = ['vivo 1002T', 'Vivo 1605', 'vivo 1730', 'vivo 1809', 'vivo_1820', 'vivo 1835', 'vivo 1914', 'vivo 2010', 'vivo 2019', 'vivo 2019', 'vivo 2019', 'vivo 2023', 'vivo 2027', 'vivo 3969', 'VIVO 5', 'Vivo 6', 'Vivo 7 Pro', 'Vivo 8', 'Vivo 93K Prime', 'vivo A5 ', 'vivo a54', 'Vivo A54', 'vivo a57', 'Vivo A87', 'VIVO A94', 'VIVO AIR', 'VIVO C8818', 'vivo E1', 'vivo E3', 'vivo E3', 'vivo E5', 'Vivo EGO', 'V1962BA', 'vivo h5', 'V1824A', 'V1824A', 'V1824BA', 'V2217A', 'V2217A', 'V2218A', 'V2218A', 'V2218A', 'V2243A', 'V1955A', 'I1927', 'I1928', 'V2024A', 'V2025A', 'V2025A', 'V2049A', 'V2049A', 'I2009', 'I2012', 'I2012', 'V2136A', 'V2136A', 'V2141A', 'V2171A', 'I2017', 'V2172A', 'V2172A', 'I2022', 'I2019', 'I2019', 'I2201', 'V1914A', 'V1914A', 'V1981A', 'V2055A', 'V2118A', 'V2157A', 'V2157A', 'V2154A', 'V2196A', 'V2196A', 'V2199A', 'V2231A', 'V2238A', 'V1936AL', 'V1936A', 'V1922A', 'V1922A', 'V1922A ', 'V1916A', 'V2023A', 'V2023A', 'VIVO V2023A', 'V2065A', 'V2061A', 'V2061A', 'V2143A', 'V2106A', 'V2165A', 'V2165A', 'V2180GA', 'V1986A', 'V2012A', 'V2012A', 'V2073A', 'V2073A', 'I2011', 'V2148A', 'I2018', 'V1919A', 'V2131A', 'V2220A', 'I2202', 'I2206', 'I2203', 'I2202', 'I2127', 'I2202', 'I2208', 'I2208', 'I2126', 'I2126', 'I2126', 'V2164KA', 'V2164KA', 'VIVO IV', 'VIVO IV', 'VIVO IV', 'VIVO IV', 'Vivo J5', 'vivo 1805', 'vivo 1805', 'vivo NEX', 'V1923A', 'vivo 1912', 'V1923A', 'vivo 1912', 'vivo 1913', 'V1924A', 'V1924A', 'vivo 1913', 'V1950A', 'V1950A', 'vivo NEX A', 'vivo NEX A', 'vivo 1813', 'V1821A', 'V1821A', 'vivo NEX S', 'vivo NEX S', 'Vivo ONE', 'Vivo ONE', 'PA2170', 'vivo PD1628F_EX', 'vivo PD1709', 'vivo PD1709F_EX', 'vivo PD1709F_EX', 'vivo PD1728', 'vivo PD1728', 'vivo PD1832F_EX', 'vivo PD2046F_EX', 'vivo PD2050F_EX', 'vivo PD2055F_EX', 'vivo PD2059F_EX', 'Vivo S', 'V1831A', 'V1831A', 'VIVO S1', 'Vivo S1 Prime', 'V1832A', 'V1832T', 'V2121A', 'V2121A', 'V2130A', 'V2130A', 'Vivo S11', 'Vivo S11 ', 'vivo S11t', 'vivo S11t', 'vivo S11t', 'vivo S11t', 'vivo S12', 'V2162A', 'Vivo S13', 'V2203A', 'V2207A', 'V2190A', 'V2244A', 'vivo S1Pro', 'Vivo S20 ', 'Vivo S21 ', 'Vivo S31', 'Vivo S4', 'Vivo S40', 'Vivo S41 /MMB439M', 'V1932A', 'vivo S6', 'V1962A', 'vivo S6T', 'V2020CA', 'V2020A', 'Vivo S76', 'V2031EA', 'vivo S7i(t)', 'vivo S7i(t)', 'vivo S7i(t)', 'V2080A', 'vivo S7t', 'vivo_S7t', 'vivo S7t', 'S7t 5G', 'vivo S7w', 'vivo S8', 'vivo S9', 'vivo S9', 'vivo S9', 'V2072A', 'V2048A', 'vivo S9t', 'V2168', 'V2168', 'V2153', 'V2153', 'V2150', 'V2151', 'V2151', 'V2151', 'V2143', 'vivo TD1602_EX', 'vivo U1', 'vivo 1916', 'vivo 1916', 'vivo 1921', 'V1941A', 'V1941A', 'V1928A', 'vivo V1', 'vivo V1', 'vivo V10', 'Vivo V10', 'VIVO V11', 'Vivo V11', 'vivo 1804', 'vivo 1804', 'vivo 1806', 'vivo 1806', 'vivo v11pro', 'vivo 1819', 'vivo 1818', 'vivo 1818', 'vivo 1920', 'vivo 1919', 'vivo 1907', 'vivo 1907', 'vivo 1907_19', 'vivo 1910', 'vivo 1909', 'vivo 1910', 'vivo 1933', 'vivo 1933', 'vivo V1907', 'vivo v19neo', 'vivo V1Max', 'vivo V1Max', 'vivo V2', 'V2040', 'vivo 2018', 'vivo 2018', 'V2022', 'Vivo V20A', 'Vivo V20G', 'V2066', 'V2108', 'V2050', 'V2050', 'V2050', 'V2061', 'V2055', 'Vivo V21S', 'V2130', 'V2132A', 'V2116', 'V2115', 'V2116', 'V2116', 'V2126', 'V2126', 'V2228', 'V2228', 'V2158', 'V2158', 'V2202', 'V2202', 'V2201', 'V2246', 'V2230', 'V2230', 'V2237', 'vivo V3', 'vivo V3', 'vivo V3Max A', 'vivo V3Max L', 'vivo v30', 'vivo v31', 'vivo V3L', 'vivo V3L', 'vivo V3L', 'vivo V3L', 'vivo V3M A', 'vivo V3M A', 'vivo V3MA', 'vivo_V3Max', 'vivo v45', 'vivo 1601', 'vivo V5', 'vivo 1609', 'vivo 1611', 'Vivo V51', 'Vivo V54', 'vivo 1612', 'vivo 1713', 'vivo V5S A', 'vivo 1718', 'vivo 1716', 'vivo Y79A', 'vivo Y79A', 'V2166BA', 'Vivo V8', 'vivo 1723', 'vivo V9 mini', 'vivo 1851', 'VIVO V9Pro', 'vivo 1851', 'vivo 1727', 'Vivo X', 'V2178A', 'V2229A', 'V2170A', 'V2170A', 'vivo Xplay3S', 'vivo Xplay3S', 'vivo Xplay3S', 'vivo Xplay5A', 'vivo Xplay5A', 'vivo Xplay5A', 'vivo Xplay5S', 'vivo Xplay5S', 'vivo Xplay6', 'vivo Xplay6L', 'vivo Xplay6', 'vivo Xplay6', 'vivo X710L', 'vivo X710L', 'vivo X710L', 'vivo X710L', 'vivo X1', 'vivo X1', 'vivo X1', 'vivo X1', 'Vivo X11', 'vivo X1S', 'vivo X1S', 'vivo X1S', 'vivo X1St', 'vivo X1St', 'vivo X1St', 'vivo X1St', 'vivo X1St', 'vivo X1W', 'vivo X1w', 'VIVO X2', 'VIVO X2', 'VIVO_X2', 'vivo X20', 'vivo X20A', 'vivo X20Plus A', 'vivo 1720', 'vivo X20Plus UD', 'vivo X20Plus UD', 'vivo X21', 'vivo X21A', 'vivo X21UD A', 'vivo X21i', 'vivo X21i A', 'vivo X21i', 'vivo X21i A ', 'V1814A', 'V1814T', 'V1814T', 'V1814A', 'V1809A', 'V1809A', 'V1816A', 'V1809T', 'V1816T', 'V1829A', 'V1838A', 'V1838T', 'V1829T', 'V1836A', 'V1836A', 'V1836T', 'vivo X27Pro', 'V1938CT', 'V1938T', 'V1938T', 'vivo X3F', 'vivo X3F', 'vivo X3F', 'vivo X3L', 'vivo X3L', 'vivo X3S', 'vivo X3S', 'vivo X3S', 'vivo X3S', 'vivo X3S', 'vivo X3S', 'vivo X3S W', 'vivo X3S W', 'vivo X3S W', 'vivo X3S W', 'vivo X3t', 'vivo X3t', 'vivo X3t', 'vivo X3t', 'vivo X3V', 'vivo X3V', 'vivo X3V', 'vivo X3V', 'Vivo X40', 'vivo X5L', 'vivo X5', 'vivo X5L', 'vivo X5Pro D', 'vivo X5Pro L', 'vivo X5Pro V', 'vivo X5Pro D', 'vivo X5Pro D', 'V2001A', 'V2001A', 'vivo 2004', 'vivo 2005', 'vivo 2005', 'V1937', 'vivo 1937', 'V1937', 'V1937', 'vivo 2006', 'vivo 2006', 'V2005A', 'V2011A', 'X50 Pro+', 'V1930', 'V1930', 'vivo X510t', 'vivo X510t', 'vivo X510t', 'vivo X510t', 'vivo X510t', 'vivo X520L', 'vivo X5F', 'vivo X5M', 'vivo X5M', 'vivo X5M', 'vivo X5Max ', 'vivo X5Max L', 'vivo X5Max L', 'vivo X5Max S', 'vivo X5Max V', 'vivo X5S L', 'vivo X5S L', 'vivo X5V', 'vivo X5V', 'vivo X5V', 'vivo X6D', 'vivo X6A', 'vivo X6Plus D', 'vivo X6Plus A', 'vivo X6Plus L', 'vivo X6Plus D', 'vivo X6Plus A', 'vivo X6Plus D', 'vivo X6Plus L', 'V2046A', 'V2059A', 'V2046A', 'V2045', 'V2046', 'V2047A', 'V2056A', 'V2085A', 'vivo X6S A', 'vivo X6S A', 'vivo X6S A', 'vivo X6S A', 'vivo X6SPlus D', 'vivo X6SPlus D', 'vivo X6SPlus D', 'vivo X6SPlus D', 'vivo X6SPlus A', 'vivo X7L', 'vivo X7Plus', 'vivo X7Plus', 'V2133A', 'V2104', 'V2104', 'V2105', 'V2134A', 'V2105', 'V2145A', 'V2114', 'V2145A', 'vivo X710F', 'vivo X710F', 'vivo X710F', 'vivo X710F', 'V2144', 'V2183A', 'V2144', 'V2208', 'V2185A', 'V2145', 'V2185A', 'Vivo X83', 'vivo X9', 'vivo X9L', 'vivo X9', 'vivo X9', 'vivo X9Plus', 'vivo X9Plus L', 'V2241A', 'V2242A', 'V2242A', 'V2227A', 'vivo X9i', 'vivo X9i', 'vivo X9i', 'vivo X9s', 'vivo X9s L', 'vivo X9s Plus', 'vivo X9s Plus', 'vivo X9s Plus L', 'vivo X9s Plus', 'VIVO XL', 'vivo Xplay', 'vivo Xshot', 'vivo Xshot', 'vivo Xshot', 'vivo Xshot', 'V2203', 'V2221', 'Vivo y1', 'Vivo Y1', 'V2168A', 'V2168A', 'vivo 1906', 'V2028', 'vivo Y11t', 'vivo Y11t', 'vivo Y11t', 'vivo 1904', 'V2163A', 'V2102', 'V2102', 'vivo 2007', 'vivo 2007', 'Vivo Y12I Pro', 'V2026', 'V2042', 'V2033', 'V2039', 'V2069', 'V2026_21', 'vivo Y13L', 'vivo Y13', 'vivo Y13L', 'vivo Y13L', 'vivo Y13i', 'vivo_Y13i', 'vivo Y13iL', 'vivo Y13iL', 'vivo Y13T', 'vivo Y13T', 'vivo 1901', 'vivo Y15T', 'vivo Y15T', 'V2134', 'V2147', 'V2147', 'V2212', 'V2120', 'V2204', 'V2214', 'V2204', 'vivo 1902', 'vivo 1902_19', 'VIVO 1902', 'vivo Y17T', 'vivo Y17T', 'vivo_Y17T', 'vivo Y17T', 'vivo Y17W', 'vivo Y17W', 'vivo Y17W', 'vivo Y18L', 'vivo Y18L', 'vivo Y18L', 'vivo 1915', 'vivo Y19t', 'vivo Y19t', 'vivo Y19t', 'vivo Y19t', 'Vivo Y1i', 'vivo 2015', 'vivo 2015', 'V2029', 'V2027', 'V2043_21', 'V2101', 'V2070', 'V2054', 'V2052', 'V2037', 'V2032', 'V2038', 'V2038', 'V2129', 'V2129', 'V2111', 'V2149', 'V2140', 'V2140', 'V2152', 'V2152', 'V2110', 'V2110', 'V2131', 'V2135', 'V2207', 'vivo Y22iL', 'vivo Y22iL', 'V2206', 'V2206', 'vivo Y23L', 'vivo Y23L', 'vivo y23l', 'vivo Y23L', 'vivo Y23L', 'vivo Y23L', 'vivo 1613', 'vivo Y27', 'vivo Y27L', 'vivo Y27', 'vivo Y28', 'vivo Y28', 'vivo Y28L', 'vivo Y28L', 'vivo Y29L', 'vivo Y29L', 'vivo Y29L', 'V1901A', 'V1901A', 'V1901A', 'V1901T', 'V1930A', 'vivo 1938', 'V2034A', 'V2036A', 'V2099A', 'V2099A', 'V2160', 'V2160', 'V2160', 'V2066BA', 'V2066A', 'Y30g', 'Vivo Y30S', 'vivo Y31L', 'V2068', 'V2054A', 'V2068A', 'V2068', 'V2158A', 'Vivo Y32', 'V2180A', 'V2057', 'V2109', 'V2166A', 'V2166A', 'V2146', 'V2205', 'V2205', 'vivo Y37A', 'vivo Y37', 'V2044', 'vivo Y3t', 'vivo Y3t', 'vivo Y3t', 'vivo y41', 'vivo Y5 ', 'Vivo Y5', 'vivo 1935', 'VIVO Y50(2021)', 'V2023EA', 'Y50t', 'V2035', 'vivo Y51L', 'vivo Y51A', 'V2030', 'vivo 1707', 'V2031_21', 'vivo Y51t L', 'vivo Y51t L', 'vivo Y51t L', 'V2053', 'V2057A', 'vivo Y53', 'vivo 1606A', 'vivo Y53n', 'V2058', 'V2123A', 'V2069A', 'V2045A', 'V2045A', 'vivo Y55A', 'V2127', 'V2127', 'vivo 1603', 'vivo Y55n', 'vivo 1610', 'V2164A', 'V2164A', 'V1934A', 'V2006', 'vivo Y613', 'vivo Y613', 'vivo Y613F', 'vivo Y622', 'vivo Y622', 'vivo Y622', 'vivo Y622', 'vivo Y622', 'vivo Y623', 'vivo Y623', 'vivo Y627', 'vivo Y627', 'vivo Y627', 'vivo Y627', 'vivo Y628', 'vivo Y628', 'vivo 1719', 'vivo Y66', 'vivo Y66L', 'vivo Y66i A', 'vivo Y67', 'vivo Y67A', 'vivo Y67L', 'vivo Y685', 'vivo 1714', 'vivo Y69A', 'V2002A', 'V2002A', 'vivo Y71A', 'vivo 1724', 'vivo Y71A', 'vivo 1801', 'V2041', 'V2060', 'V2102A', 'V1731CA', 'vivo Y73', 'Vivo Y73 /MMB239M', 'V2059', 'V2031A', 'V2164PA', 'V2117', 'vivo Y75A', 'V2142', 'V2142', 'vivo Y75s', 'vivo Y75s', 'vivo Y75S', 'vivo Y75s', 'V2124', 'V2156A', 'V2219A', 'V2219A', 'V2169', 'V2169', 'V1913A', 'vivo 1808i', 'vivo 1803', 'vivo 1803', 'vivo 1812', 'vivo Y81S', 'V1732A', 'V1732T', 'vivo Y83A', 'vivo 1802', 'vivo Y83A', 'vivo Y83A', 'vivo 1726', 'Vivo Y83I', 'vivo Y85A', 'vivo Y85', 'Vivo Y85i', 'Vivo Y86', 'V1730EA', 'vivo v1730ea', 'vivo 1908', 'vivo 1823', 'vivo 1908_19', 'vivo 1817', 'vivo 1811', 'vivo Y913', 'vivo Y913', 'vivo Y91C', 'vivo 1820', 'vivo 1816', 'vivo Y923', 'vivo Y923', 'vivo Y927', 'vivo Y927', 'vivo Y928', 'vivo Y928', 'vivo Y928', 'vivo 1814', 'V1818A', 'V1818A', 'vivo 1814', 'vivo Y937', 'vivo Y937', 'vivo Y937', 'V1818CT', 'V1818CA', 'vivo 1807', 'vivo Y95', 'V1813A', 'V1813T', 'V1813A', 'vivo Y97', 'V1945A', 'V1801A0', 'vivo Z1', 'vivo 1918', 'vivo 1951', 'vivo 1951', 'VIVO Z1Pro', 'vivo 1918', 'vivo 1918 Flow', 'Vivo Z10', 'vivo Z1i', 'V1730DA', 'V1730DT', 'vivo Z1i', 'vivo_1951', 'vivo 1917', 'V1813BA', 'V1813BT', 'V1813BT', 'Vivo Z34', 'vivo Z3x', 'V1730GA', 'vivo Z3x', 'vivo Z3x', 'V1921A', 'V1911A', 'V1911A', 'V1911A', 'V1990A', 'V1990A', 'V1963A', 'V1963A']
        self.infinix = [""Infinix X652B"", ""Infinix X680"", ""Infinix X690"", ""Infinix X625B"", ""Infinix X655"", ""Infinix X680B"", ""Infinix X652B"", ""Infinix X680"", ""Infinix X690"", ""Infinix X625B"", ""Infinix X655"", ""Infinix X680B"", ""Infinix X652B"", ""Infinix X680"", ""Infinix X690"", ""Infinix X625B"", ""Infinix X655"", ""Infinix X680B"", ""Infinix X652B"", ""Infinix X680"", ""Infinix X690"", ""Infinix X625B"", ""Infinix X655"", ""Infinix X680B"", ""Infinix X652B"", ""Infinix X680"", ""Infinix X690"", ""Infinix X625B"", ""Infinix X655"", ""Infinix X680B""]
        self.opp = random.choice([""OP4F97"", ""OP4BA5L1"", ""OP664D1"", ""OP5F11L1"", ""OP2A92"", ""OP8F17"", ""OP8F31"", ""OP4C9E1"", ""OP5B31"", ""OP4BA6L1"", ""OP2B87"", ""OP6F21"", ""OP6C8E1"", ""OP8F11"", ""OPPOA16"", ""OPPOA15"", ""OPPOA11"", ""OPPOA73"", ""OPPOA37"", ""OPPOA53"", ""OPPOA33"", ""OPPOA93"", ""OPPOA35"", ""OPPOA83"", ""OPPOA57"", ""OPPOA71"", ""OPPOA39"", ""OPPOA3"", ""OPPOA51"", ""OPPOA27"", ""OPPOA79""])
        self.trek = random.choice([""mt6769"", ""mt6768"", ""mt6767"", ""mt6765"", ""mt6763"", ""mt6757"", ""mt6755"", ""mt6753"", ""mt6739"", ""mt6737"", ""mt6735"", ""mt6595"", ""mt6582"", ""mt6572"", ""mt6571"", ""mt6570"", ""mt8563"", ""mt8167"", ""mt8163"", ""mt8135"", ""mt8127"", ""mt8125"", ""mt7623"", ""mt6797"", ""mt6592"", ""mt6590"", ""mt6580"", ""mt6573"", ""mt6575"", ""mt6260"", ""mt6236""])
        self.igversi = (""100.0.0.17.129,100.0.0.17.129,100.0.0.17.129,100.0.0.17.129,100.0.0.17.129,100.0.0.17.129,79.0.0.21.101,78.0.0.11.104,77.0.0.20.113,76.0.0.15.395,75.0.0.23.99,74.0.0.21.99,73.0.0.22.185,72.0.0.21.98,71.0.0.18.102,70.0.0.22.98,69.0.0.30.95,68.0.0.11.99,67.0.0.25.100,66.0.0.11.101,65.0.0.12.86,64.0.0.14.96,63.0.0.17.94,62.0.0.19.93,61.0.0.19.86,60.1.0.17.79,59.0.0.23.76,58.0.0.12.73,57.0.0.9.80,56.0.0.13.78,55.0.0.12.79,54.0.0.14.82,53.0.0.13.84,52.0.0.8.83,51.0.0.20.85,50.1.0.43.119,271.1.0.21.84,131.0.0.23.11,130.0.0.31.12,128.0.0.26.12,126.0.0.25.12,125.0.0.20.12,124.0.0.17.47,123.0.0.21.11,122.0.0.29.23,120.0.0.29.11,119.0.0.33.14,118.0.0.28.12,117.0.0.28.12,115.0.0.26.11,114.0.0.38.12,113.0.0.39.12,112.0.0.29.12,111.1.0.25.15,110.0.0.16.11,109.0.0.18.12,108.0.0.23.11,107.0.0.27.12,106.0.0.24.11,105.0.0.18.11,104.0.0.21.11,103.1.0.15.11,102.0.0.20.11,101.0.0.15.12,100.0.0.17.12,99.0.0.32.182,98.0.0.15.119,97.0.0.32.119"").split(',')
        self.di_versi_ig = random.choice(self.igversi)
        self.kode = random.choice(['104766893','104766900','102221278','104766888','105842053','93117670','94080607','96794592','102221279','100986894','ru_RU','94080606','103516660','98288242','103516666','103516653','uk_UA','96794590','100986893','102221277','95414344','99640920','99640911','96794591','ru_UA','99640905','100986890','107092313','99640900','93117667','100521966','90841939','98288239','89867440','105842051','de_DE','96794584','105842050','en_US','pt_PT','109556223','107092318','en_GB','108357722','112021130','107092322','119104798','108357720','119104802','112021131','100986892','113249569','107104231','fr_FR','pt_BR','109556226','116756948','113249553','113249561','110937441','118342010','120662545','117539703','119875222','110937448','121451799','115994877','108357718','120662547','107608058','122206624','95414346','107092308','112021128','90841948','119875229','117539698','120662550','en_NZ','123103748','91882538','121451810','91882537','118342006','113948109','122338251','110937453','es_US','118342005','121451793','109556219','119875225','en_CA','109556220','117539695','115211358','91882539','119104795','89867442','94080603','164094539','175574628','185203690','188791648','188791674','187682694','188791643','177770724','192992577','180322810','195435560','196643820','196643821','188791637','192992576','196643799','196643801','196643803','195435546','194383411','197825254','197825260','197825079','171727793','197825112','197825012','197825234','179155086','192992563','197825268','166149669','192992565','198036424','197825223','183982969','199325909','199325886','199325890','199325911','197825118','127049003','197825169','197825216','197825127','200395960','179155096','199325907','200396014','188791669','197825133','170693926','200396005','171727780','201577064','201576758','201577192','201775949','201576944','201775970','143631574','126223520','201775951','167338518','144612598','170693940','201775813','200395971','201775744','201775946','202766609','145652094','202766591','202766602','203083142','179155088','202766608','199325884','180322802','202766603','195435547','165030894','201576967','201775904','194383424','197347903','202766610','185203693','201576898','204019468','187682682','204019456','201775901','204019471','204019454','204019458','202766601','204019452','173238721','204019466','148324036','202766581','158441904','201576903','205280538','205280529','201576813','173238729','141753096','205280531','163022072','201576887','163022088','141753091','148324051','205280528','154400383','205280537','201576818','157405371','205858383','201576811','165031093','187682684','145652090','206670917','185203686','192992561','183982986','206670927','150338061','183982962','127049016','175574603','155374054','205858247','135374896','206670920','169474958','206670926','160497905','161478672','192992578','206670929','131223243','206670916','142841919','187682681','171727795','151414277','206670922','160497915','207505137','165030898','208061741','208061688','208180365','208061674','197825052','147375133','208061744','196643798','208061725','122338247','157536430','208061728','209143963','208727155','209143726','205280539','209143903','209143970','181496409','208061739','209143957','210180522','210180512','209143881','209143712','180322805','210180521','195435561','210370119','210180523','210180493','175574596','210180510','210180480','210180513','210180517','176649504','177770663','210180479','211114117','210908379','206670921','211114134','183982943','211399345','211399342','211399332','201775962','211574187','211574249','210180519','167338559','185203649','124583960','211399337','211399335','197825163','166149717','211399336','212063371','211399329','209143954','210180482','168361634','212214017','209143867','211399341','211399340','212214027','195435510','122338243','139237670','152367502','212676872','212676898','212676875','212676895','212676901','209823384','212676869','196643822','212676878','213367980','213368005','212676886','213558743','209143913','212214039','158441917','174081672','213558750','201775966','188791681','185203705','143631575','161478664','214245350','161478663','212676881','213558770','214245346','138226752','214245221','214245182','214245206','214245218','214245354','214245295','214245199','214245304','214245280','214446313','214245187','214245288','214139002','202766605','214245319','214646783','158441914','215246048','195435544','208061677','215464400','128676146','215464389','215464385','215464390','215464398','182747397','215464393','216233197','201775791','216817344','215464395','216817286','185203642','164094529','216817305','215464401','162439029','215464382','216817280','216817331','214330969','216817299','216817357','217948981','217948980','217948956','217948959','217948968','216817296','217948952','217948982','216817269','219308759','219308726','182747387','219308721','219308754','219308763','176649435','183982982','219909486','127049038','219308730','221134012','221134032','221134009','221134037','194383426','221134029','221134005','221134018','145652093','225283632','165031108','225283625','224652582','139906580','225283628','225283624','226142579','225283634','225283631','226493211','225283623','185203672','156514151','218793478','225283621','227299063','225283627','227299064','227299021','227299027','227544546','227299041','227299060','227299012','228970707','228970705','227299005','228970687','228970683','228970694','228970710','228970689','160497904','195435540','129611419','229783842','230291708','228970681','148324047','230877709','231192211','230877674','230877705','230877678','211399328','209143896','230877713','194383428','230877689','221134002','231457747','208061721','230877671','230877668','232868027','232088496','185203706','232868005','232867964','232868001','232868015','232868031','232867959','232868009','164094526','232867941','234041364','182747399','232868024','232867949','234847239','234847238','234847234','162439040','234847229','234847230','181496427','234847240','232867993','195435558','232867967','232867997','234847227','235871830','221133998','236572344','236572377','153386780','236572337','236572349','236572372','234847226','236572383','237507050','238093993','238093948','238093954','238093999','238093982','239490565','239490555','238093946','238093966','239490563','239490550','239974660','240726416','239490568','240726484','240726452','239490551','239490548','240726426','240726476','240726491','240726471','241043882','241114613','236572331','241267273','240726407','241456456','241267278','241267269','241114619','241456445','241456451','242168941','242168928','242168931','242168939','242168925','240726436','242375239','144722090','242168935','242290370','157405369','242168933','242290355','242703240','242807362','242168923','242168943','242991209','243646252','243646269','242991200','243711120','243646267','243711093','243975802','243646263','243646248','243646255','244167578','128676156','194383413','243975835','244390417','244390338','245196084','245196061','240726392','245196055','243646273','245196082','245196063','245196070','245666450','245466705','245870319','245870301','245870347','245196087','246889064','246889072','246889073','246889074','246889065','247146500','246889063','245870262','247370962','247146481','246889068','246889062','247541884','247541831','247370955','247370942','247720736','247720751','248310216','248310220','248310208','247720744','248399342','248310210','247720747','248310206','248717751','248310212','248310221','248823392','248583561','248310205','248899028','248955251','248955247','249178904','248955244','249507608','249507582','249507588','249507585','248955240','249507607','249507592','249810008','249966137','249507610','249966081','249966100','249507599','249966140','249810004','123790722','250188776','249628096','250188788','250742103','250742113','250742102','250877984','250742105','250742111','251048681','250742107','250742115','251048695','251304696','251304682','251524431','251530710','251304689','251524420','251524409','251524390','250742101','251048673','252055918','252055945','251920416','252055944','252055925','252239038','252055936','252055915','252055948','252390568','252390583','252580134','252740497','252740485','252740490','253120615','253325372','253325384','253325385','253447816','253146263','253120607','253325374','253120598','253325371','253447808','253447809','253325378','253447814','253447807','253447811','253447817','253447813','181496411','253447806','255191971','255013798','255777478','255777471','255777474','255777472','255959637','255777477','255959614','255959635','256099199','256099204','150338064','256099153','256099205','256099156','255983744','256107300','255777470','126223536','256203326','256099190','256099151','256324061','256324047','256203339','256966628','256966589','256966626','256966590','124584015','257456576','256966593','257456590','256966629','256966587','256966592','257456586','257456539','259829115','259829104','259829113','260037038','259829105','259829109','260037030','260149625','259829103','260149621','260465044','259829116','260724710','179155058','261079769','261079761','261079768','261079762','261079771','261276939','157405370','135374885','261079765','261393056','261393062','261079760','181496406','182747360','261504698','261690888','261504706','169474957','262218766','262290715','262290774','262372432','262372425','262372431','262886993','262886995','262372426','262886987','261079764','262886986','262886988','262886990','262372433','262886996','263652962','264009049','264009019','264009030','264009021','264009023','264009052','264009024','261763534','174081651','169474965','232867942','264009013','255959606','264009028','267397344','267397322','267925737','267397343','267925708','267397327','267397321','267925714','267258517','267925705','268773287','267925733','268773233','267925702','268773286','159526770','268773239','268773272','269790795','269285030','269790805','269790803','269790792','268773227','269849047','270426177','270426174','271182277','269790789','271182270','268773290','271182266','271182276','269790798','271182279','271182265','271182267','269790807','271823819','272382110','272382111','272382106','272693584','272382095','272382093','272382098','272382100','272382103','273728833','273371577','273728832','273728798','273907093','273907111','273907108','238093987','273907112','273907103','274774869','274774891','274774908','273907087','274774904','274774875','274774914','275292626','276027938','276028040','276027963','276028037','276028020','276028017','274774862','276028013','249507580','276028029','273907098','277249238','277249248','277249249','276028033','277249250','277249226','275292623','277249214','277249242','277249237','277249240','278625447','278002558','278625420','278625431','278625423','117539687','278625416','278625444','277249213','278625451','279469964','279996068','279996060','279996067','279996058','280194220','279996065','279996063','279996061','279996059','280894196','273728787','271182262','281579032','281579023','276514494','281579021','281579027','281579033','268773274','283072590','281579025','283072571','282619332','283489774','283072587','283072567','281579031','283072580','283072574','284459213','284459224','179155089','256966583','284459214','283072585','284459218','284459223','284459225','285338607','275113919','284459221','284459212','284459215','285855793','285855800','285855803','285855791','285855802','285855804','285855795','286809973','287420974','287421023','287420968','287420979','287421017','287421005','287421019','287421012','277249241','288682406','287421026','288682405','288682397','288682407','261079772','288682398','288682401','288205409','289692198','287420997','289692186'])
        self.dpi_pxl = random.choice(['240dpi; 1760x792', '240dpi; 1920x864', '320dpi; 2400x1080', '400dpi; 3200x1440', '480dpi; 1080x1920', '320dpi; 900x1600', '320dpi; 720x1280', '240dpi; 540x960', '280dpi; 1920x1080', '240dpi; 160x900', '240dpi; 1280x720', '160dpi; 960x540','160dpi; 623x1280'])
        self.dpi = random.choice(['320dpi','640dpi','213dpi','480dpi','420dpi','240dpi','280dpi','160dpi','560dpi','540dpi','272dpi','360dpi','720dpi','270dpi','450dpi','600dpi','279dpi','210dpi','180dpi','510dpi','300dpi','454dpi','314dpi','288dpi','401dpi','153dpi','267dpi','345dpi','493dpi','340dpi','604dpi','465dpi','680dpi','256dpi','290dpi','432dpi','273dpi','120dpi','200dpi','367dpi','419dpi','306dpi','303dpi','411dpi','195dpi','518dpi','230dpi','384dpi','315dpi','293dpi','274dpi','235dpi'])
        self.pxl = random.choice(['720x1280','1440x2560','1440x2768','1280x720','1280x800','1080x1920','540x960','1080x2076','1080x2094','1080x2220','480x800','768x1024','1440x2792','1200x1920','720x1384','1920x1080','720x1369','800x1280','720x1440','1080x2058','600x1024','720x1396','2792x1440','1920x1200','2560x1440','1536x2048','720x1382','1080x2113','1080x2198','1080x2131','720x1423','1080x2069','720x1481','1080x2047','1080x2110','1080x2181','1080x2209','1080x2180','1080x2020','1080x2095','1440x2723','1080x2175','720x1365','1440x2699','1080x2218','2699x1440','1440x2907','1080x2257','720x1370','1080x2042','720x1372','1080x2200','1080x2186','720x1361','1080x2024','1080x2006','720x1402','1440x2831','720x1454','1080x2064','1440x2933','720x1411','720x1450','1440x2730','1080x2046','2094x1080','540x888','1440x2759','1080x2274','1080x2178','1440x2706','720x1356','720x1466','1440x2900','2560x1600','1080x2038','1600x2452','1080x2129','720x1422','720x1381','1080x2183','1080x2285','800x1216','1080x2216','1080x2168','1080x2119','1080x2128','1080x2273','2274x1080','1080x2162','1080x2164','2076x1080','1024x768','1080x2173','1440x2845','1080x2134','720x1379','1440x2838','1080x2139','2131x1080','1440x2744','1080x2192','720x1406','1440x2960','1080x2029','2042x1080','1080x2212','1406x720','1080x2288','2047x1080','1080x2051','720x1398','1280x736','1382x720','720x1353','1080x2050','1080x2028','1080x2256','2711x1440','2175x1080','1080x2281','2560x1492','1440x2923','1200x1845','1080x2189','1080x2002','1440x2711','2110x1080','960x540','1080x2033','2200x1080','720x1452','720x1480','1440x2735','720x1472','1080x2277','1080x2169','2874x1440','1600x2560','1080x2151','2218x1080','1080x2182','720x1468','1440x2898','1080x2011','1080x2201','720x1380','1080x2287','2069x1080','1200x1836','2046x1080','720x1439','2058x1080','2182x1080','720x1399','1080x2282','1440x2721','1080x2324','720x1432','1080x2165','1080x2150','1080x2156','1080x1872','1440x3048','1532x2560','720x1355','720x1390','720x1476','720x1410','1080x2032','720x1437','1440x2682','1440x2921','1080x2270','1080x2160','720x1446','1200x1848','1440x2874','1080x2309','1080x2174','1440x2867','1080x2060','1080x2196','1080x2401','1536x1922','1080x2280','1080x2123','720x1435','1440x2927','1080x2276','720x1448','720x1469','720x1344','1080x2187','540x937','1440x3028','1080x2184','1440x2718','1080x2326','840x1834','1440x2935','1440x2880','1440x2892','2048x2048','1080x2195','1080x2322','720x1419','987x1450','1080x2092','1440x3047','720x1358','1080x2136','720x1357','1080x2093','720x1477','1080x2312','1080x2361','720x1341','720x1507','1080x2172','720x1337','1080x2177','1080x2125','1440x2891','1600x2434','720x1394','1080x2159','720x1387','1080x2166','1080x2154','1080x2147','1440x2747','1080x2105','1440x2911','720x1473','1080x2055','1080x2265','720x1436','1080x2190','1600x2526','720x1373','720x1415','1080x2249','1080x2254','720x1455','1440x3040','1080x2149','720x1385','1440x3036','1080x2111','1440x2904','720x1442','720x1377','1080x2307','1080x2327','1080x2141','1080x2025','720x1430','720x1375','1080x2283','1440x2779','1080x2321','1080x2268','1440x2758','1752x2698','1080x2267','1200x1856','1440x2756','720x1464','1080x2234','1080x2171','1080x2155','720x1463','1080x2122','720x1467','1080x2264','720x1349','1440x2999','720x1458','1080x2015','720x1431','1242x2208','1080x2185','1080x2148','1080x2163','1440x2780','720x1445','1080x2146','1200x1916','720x1502','1200x1928','720x1506','720x1424','720x1465','720x1420','1080x2176','720x1521','1080x2315','1080x2400','720x1471','1080x2157','1600x2458','1080x2067','1080x2191','1080x2271','720x1407','800x1208','1080x2087','1080x2199','578x1028','720x1485','540x879','1080x2179','720x1555','810x1598','720x1378','1200x1897','720x1395','720x1459','900x1600','1080x2275','1440x2733'])
        self.dvc = random.choice([""30/11"",""31/12"",""29/10""])
        return(random.choice([
             f'Barcelona {self.di_versi_ig} Android ({self.dvc}; {self.dpi}; {self.pxl}; INFINIX/Infinix; {str(random.choice(self.infinix))}; qcom; in_ID; 242168925)',
            f'Barcelona {self.di_versi_ig} Android ({self.dvc}; {self.dpi}; {self.pxl}; NEXUS/Nexus; {str(random.choice(self.nexus))}; qcom; in_ID; 242168925)',
            f'Barcelona {self.di_versi_ig} Android ({self.dvc}; {self.dpi}; {self.pxl}; MICROMAX/Micromax; {str(random.choice(self.micromax))}; qcom; in_ID; 242168925)',
            f'Barcelona {self.di_versi_ig} Android ({self.dvc}; {self.dpi}; {self.pxl}; ONEPLUS/Oneplus; {str(random.choice(self.onpls))}; qcom; in_ID; 242168925)',
            f'Barcelona {self.di_versi_ig} Android ({self.dvc}; {self.dpi}; {self.pxl}; OPPO/Oppo; {str(random.choice(self.oppo))}; qcom; in_ID; 242168925)',
            f'Barcelona {self.di_versi_ig} Android ({self.dvc}; {self.dpi}; {self.pxl}; REALME/Realme; {str(random.choice(self.realme))}; qcom; in_ID; 242168925)',
            f'Barcelona {self.di_versi_ig} Android ({self.dvc}; {self.dpi}; {self.pxl}; XIAOMI/Redmi; {str(random.choice(self.redmi))}; qcom; in_ID; 242168925)',
            f'Barcelona {self.di_versi_ig} Android ({self.dvc}; {self.dpi}; {self.pxl}; VIVO/Vivo; {str(random.choice(self.vivo))}; qcom; in_ID; 242168925)',
           ])
       ) 

        
    def useragent_ajax(self):
        self.chrome = str(random.randint(114,124))
        return(random.choice([
            f'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/{self.chrome}.0.0.0 Safari/537.36',
            f'Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/{self.chrome}.0.0.0 Safari/537.36'
            ])
        )
        


"
TEAJacmF,"""EasyButton RelayControl"" rev_02",pleasedontcode,Arduino,Sunday 16th of June 2024 03:06:23 PM CDT,"/********* Pleasedontcode.com **********

	Pleasedontcode thanks you for automatic code generation! Enjoy your code!

	- Terms and Conditions:
	You have a non-exclusive, revocable, worldwide, royalty-free license
	for personal and commercial use. Attribution is optional; modifications
	are allowed, but you're responsible for code maintenance. We're not
	liable for any loss or damage. For full terms,
	please visit pleasedontcode.com/termsandconditions.

	- Project: ""EasyButton RelayControl""
	- Source Code compiled for: Arduino Uno
	- Source Code created on: 2024-06-16 20:05:17

********* Pleasedontcode.com **********/

/****** SYSTEM REQUIREMENTS *****/
/****** SYSTEM REQUIREMENT 1 *****/
	/* Quando il Pulsante1 (PIN D2) √® premuto, attiva */
	/* Relay1 (PIN D4) per 10 secondi, poi attiva Relay2 */
	/* (PIN D5) per 20 secondi. Alla fine, entrambi i */
	/* relay devono essere disattivati. */
/****** SYSTEM REQUIREMENT 2 *****/
	/* Attivare Relay3 (PIN D6) quando il Pulsante2 (PIN */
	/* D3) √® premuto e disattivarlo quando non √® premuto. */
	/* Implementare la logica utilizzando le librerie */
	/* EasyButton e Relay per garantire una risposta */
	/* rapida e affidabile. */
/****** END SYSTEM REQUIREMENTS *****/

/****** DEFINITION OF LIBRARIES *****/
#include <EasyButton.h>  //https://github.com/evert-arias/EasyButton
#include <Relay.h>       //https://github.com/rafaelnsantos/Relay

/****** FUNCTION PROTOTYPES *****/
void setup(void);
void loop(void);
void updateOutputs(void);
void onButton1Pressed(void);
void onButton2Pressed(void);
void checkButton2Released(void);

/***** DEFINITION OF DIGITAL INPUT PINS *****/
const uint8_t Pulsante1_PushButton_PIN_D2 = 2;
const uint8_t Pulsante2_PushButton_PIN_D3 = 3;

/***** DEFINITION OF DIGITAL OUTPUT PINS *****/
const uint8_t Relay1_RelayModule_Signal_PIN_D4 = 4;
const uint8_t Relay2_RelayModule_Signal_PIN_D5 = 5;
const uint8_t Relay3_RelayModule_Signal_PIN_D6 = 6;

/***** DEFINITION OF OUTPUT RAW VARIABLES *****/
/***** used to store raw data *****/
bool Relay1_RelayModule_Signal_PIN_D4_rawData = 0;
bool Relay2_RelayModule_Signal_PIN_D5_rawData = 0;
bool Relay3_RelayModule_Signal_PIN_D6_rawData = 0;

/***** DEFINITION OF OUTPUT PHYSICAL VARIABLES *****/
/***** used to store data after characteristic curve transformation *****/
float Relay1_RelayModule_Signal_PIN_D4_phyData = 0.0;
float Relay2_RelayModule_Signal_PIN_D5_phyData = 0.0;
float Relay3_RelayModule_Signal_PIN_D6_phyData = 0.0;

/****** DEFINITION OF LIBRARIES CLASS INSTANCES*****/
EasyButton button1(Pulsante1_PushButton_PIN_D2); // Initialize button1 with pin D2
EasyButton button2(Pulsante2_PushButton_PIN_D3); // Initialize button2 with pin D3

Relay relay1(Relay1_RelayModule_Signal_PIN_D4, true); // Initialize relay1 on pin D4, Normally Open
Relay relay2(Relay2_RelayModule_Signal_PIN_D5, true); // Initialize relay2 on pin D5, Normally Open
Relay relay3(Relay3_RelayModule_Signal_PIN_D6, true); // Initialize relay3 on pin D6, Normally Open

void setup(void) {
  // put your setup code here, to run once:

  pinMode(Pulsante1_PushButton_PIN_D2, INPUT_PULLUP);
  pinMode(Pulsante2_PushButton_PIN_D3, INPUT_PULLUP);

  pinMode(Relay1_RelayModule_Signal_PIN_D4, OUTPUT);
  pinMode(Relay2_RelayModule_Signal_PIN_D5, OUTPUT);
  pinMode(Relay3_RelayModule_Signal_PIN_D6, OUTPUT);

  Serial.begin(115200);

  Serial.println();
  Serial.println("">>> EasyButton multiple buttons example <<<"");

  button1.begin(); // Initialize button1
  button2.begin(); // Initialize button2
  button1.onPressed(onButton1Pressed); // Attach callback for button1
  button2.onPressed(onButton2Pressed); // Attach callback for button2

  relay1.begin(); // Initialize relay1
  relay2.begin(); // Initialize relay2
  relay3.begin(); // Initialize relay3
}

void loop(void) {
  // put your main code here, to run repeatedly:

  button1.read(); // Read the state of button1
  button2.read(); // Read the state of button2

  checkButton2Released(); // Check if button2 is released

  updateOutputs(); // Refresh output data
}

void updateOutputs() {
  digitalWrite(Relay1_RelayModule_Signal_PIN_D4, Relay1_RelayModule_Signal_PIN_D4_rawData);
  digitalWrite(Relay2_RelayModule_Signal_PIN_D5, Relay2_RelayModule_Signal_PIN_D5_rawData);
  digitalWrite(Relay3_RelayModule_Signal_PIN_D6, Relay3_RelayModule_Signal_PIN_D6_rawData);
}

void onButton1Pressed() {
  Serial.println(""Button1 pressed"");
  // SYSTEM REQUIREMENT 1
  relay1.turnOn(); // Activate Relay1
  delay(10000); // Wait for 10 seconds
  relay1.turnOff(); // Deactivate Relay1
  relay2.turnOn(); // Activate Relay2
  delay(20000); // Wait for 20 seconds
  relay2.turnOff(); // Deactivate Relay2
}

void onButton2Pressed() {
  Serial.println(""Button2 pressed"");
  // SYSTEM REQUIREMENT 2
  relay3.turnOn(); // Activate Relay3
}

void checkButton2Released() {
  if (button2.isReleased()) {
    Serial.println(""Button2 released"");
    // SYSTEM REQUIREMENT 2
    relay3.turnOff(); // Deactivate Relay3
  }
}

/* END CODE */"
bPH3kttY,"""Relay Control"" rev_01",pleasedontcode,Arduino,Sunday 16th of June 2024 03:04:45 PM CDT,"/********* Pleasedontcode.com **********

	Pleasedontcode thanks you for automatic code generation! Enjoy your code!

	- Terms and Conditions:
	You have a non-exclusive, revocable, worldwide, royalty-free license
	for personal and commercial use. Attribution is optional; modifications
	are allowed, but you're responsible for code maintenance. We're not
	liable for any loss or damage. For full terms,
	please visit pleasedontcode.com/termsandconditions.

	- Project: ""Relay Control""
	- Source Code NOT compiled for: Arduino Uno
	- Source Code created on: 2024-06-16 20:03:21

********* Pleasedontcode.com **********/

/****** SYSTEM REQUIREMENTS *****/
/****** SYSTEM REQUIREMENT 1 *****/
	/* Quando il Pulsante1 (PIN D2) √® premuto, attiva */
	/* Relay1 (PIN D4) per 10 secondi, poi attiva Relay2 */
	/* (PIN D5) per 20 secondi. Alla fine, entrambi i */
	/* relay devono essere disattivati. */
/****** SYSTEM REQUIREMENT 2 *****/
	/* Attivare Relay3 (PIN D6) quando il Pulsante2 (PIN */
	/* D3) √® premuto e disattivarlo quando non √® premuto. */
	/* Implementare la logica utilizzando le librerie */
	/* EasyButton e Relay per garantire una risposta */
	/* rapida e affidabile. */
/****** END SYSTEM REQUIREMENTS *****/

/****** DEFINITION OF LIBRARIES *****/
#include <EasyButton.h>  //https://github.com/evert-arias/EasyButton
#include <Relay.h>       //https://github.com/rafaelnsantos/Relay

/****** FUNCTION PROTOTYPES *****/
void setup(void);
void loop(void);
void updateOutputs(void);
void onButton1Pressed(void);
void onButton2Pressed(void);
void onButton2Released(void);

/***** DEFINITION OF DIGITAL INPUT PINS *****/
const uint8_t Pulsante1_PushButton_PIN_D2 = 2;
const uint8_t Pulsante2_PushButton_PIN_D3 = 3;

/***** DEFINITION OF DIGITAL OUTPUT PINS *****/
const uint8_t Relay1_RelayModule_Signal_PIN_D4 = 4;
const uint8_t Relay2_RelayModule_Signal_PIN_D5 = 5;
const uint8_t Relay3_RelayModule_Signal_PIN_D6 = 6;

/***** DEFINITION OF OUTPUT RAW VARIABLES *****/
/***** used to store raw data *****/
bool Relay1_RelayModule_Signal_PIN_D4_rawData = 0;
bool Relay2_RelayModule_Signal_PIN_D5_rawData = 0;
bool Relay3_RelayModule_Signal_PIN_D6_rawData = 0;

/***** DEFINITION OF OUTPUT PHYSICAL VARIABLES *****/
/***** used to store data after characteristic curve transformation *****/
float Relay1_RelayModule_Signal_PIN_D4_phyData = 0.0;
float Relay2_RelayModule_Signal_PIN_D5_phyData = 0.0;
float Relay3_RelayModule_Signal_PIN_D6_phyData = 0.0;

/****** DEFINITION OF LIBRARIES CLASS INSTANCES*****/
EasyButton button1(Pulsante1_PushButton_PIN_D2); // Initialize button1 with pin D2
EasyButton button2(Pulsante2_PushButton_PIN_D3); // Initialize button2 with pin D3

Relay relay1(Relay1_RelayModule_Signal_PIN_D4, true); // Initialize relay1 on pin D4, Normally Open
Relay relay2(Relay2_RelayModule_Signal_PIN_D5, true); // Initialize relay2 on pin D5, Normally Open
Relay relay3(Relay3_RelayModule_Signal_PIN_D6, true); // Initialize relay3 on pin D6, Normally Open

void setup(void) {
  // put your setup code here, to run once:

  pinMode(Pulsante1_PushButton_PIN_D2, INPUT_PULLUP);
  pinMode(Pulsante2_PushButton_PIN_D3, INPUT_PULLUP);

  pinMode(Relay1_RelayModule_Signal_PIN_D4, OUTPUT);
  pinMode(Relay2_RelayModule_Signal_PIN_D5, OUTPUT);
  pinMode(Relay3_RelayModule_Signal_PIN_D6, OUTPUT);

  Serial.begin(115200);

  Serial.println();
  Serial.println("">>> EasyButton multiple buttons example <<<"");

  button1.begin(); // Initialize button1
  button2.begin(); // Initialize button2
  button1.onPressed(onButton1Pressed); // Attach callback for button1
  button2.onPressed(onButton2Pressed); // Attach callback for button2
  button2.onReleased(onButton2Released); // Attach callback for button2 release

  relay1.begin(); // Initialize relay1
  relay2.begin(); // Initialize relay2
  relay3.begin(); // Initialize relay3
}

void loop(void) {
  // put your main code here, to run repeatedly:

  button1.read(); // Read the state of button1
  button2.read(); // Read the state of button2

  updateOutputs(); // Refresh output data
}

void updateOutputs() {
  digitalWrite(Relay1_RelayModule_Signal_PIN_D4, Relay1_RelayModule_Signal_PIN_D4_rawData);
  digitalWrite(Relay2_RelayModule_Signal_PIN_D5, Relay2_RelayModule_Signal_PIN_D5_rawData);
  digitalWrite(Relay3_RelayModule_Signal_PIN_D6, Relay3_RelayModule_Signal_PIN_D6_rawData);
}

void onButton1Pressed() {
  Serial.println(""Button1 pressed"");
  // SYSTEM REQUIREMENT 1
  relay1.turnOn(); // Activate Relay1
  delay(10000); // Wait for 10 seconds
  relay1.turnOff(); // Deactivate Relay1
  relay2.turnOn(); // Activate Relay2
  delay(20000); // Wait for 20 seconds
  relay2.turnOff(); // Deactivate Relay2
}

void onButton2Pressed() {
  Serial.println(""Button2 pressed"");
  // SYSTEM REQUIREMENT 2
  relay3.turnOn(); // Activate Relay3
}

void onButton2Released() {
  Serial.println(""Button2 released"");
  // SYSTEM REQUIREMENT 2
  relay3.turnOff(); // Deactivate Relay3
}

/* END CODE */"
KywgWm0H,buildFloor,woflmao,Lua,Sunday 16th of June 2024 02:08:44 PM CDT,"local tArgs = {...}
 
if #tArgs == 0 then
    print(""Please input a length"")
    length = 0
	rows = 0
elseif (tonumber(tArgs[1]% == 0) then
	print(""Please enter an even number (bot has to return)"")
	length = 0
	rows = 0
elseif #tArgs == 1 then
    length = (tonumber(tArgs[1]) - 2)
    rows = 0
else
    length = (tonumber(tArgs[1]) - 2)
	rows = tonumber(tArgs[2])
end 
 
turtle.select(1)
itemCount = turtle.getItemCount(1)
 
function PlaceAndCheck()
    if (itemCount == 0) then
        Restock()
    end
    turtle.place()
    itemCount = itemCount - 1
end
 
function Restock()
    if (turtle.getItemCount(turtle.getSelectedSlot()) == 0) then
        if (turtle.getSelectedSlot() == 16) then
            return
        else
            turtle.select(turtle.getSelectedSlot() + 1)
            itemCount = turtle.getItemCount(turtle.getSelectedSlot())
        end
    end
end
 
function rowOne()
	Restock()
	for i=1, length, 1 do
		PlaceAndCheck()
    	turtle.back()
	end
	PlaceAndCheck()
	turtle.turnRight()
	turtle.back()
	PlaceAndCheck()
	turtle.turnRight()
	turtle.back()
end

function rowTwo()
	Restock()
	for i=1, length, 1 do
		PlaceAndCheck()
    	turtle.back()
	end
	PlaceAndCheck()
	turtle.turnLeft()
	turtle.back()
	PlaceAndCheck()
	turtle.turnLeft()
	turtle.back()
end
	
 
if rows > 0 then
	for i=1, rows, 1 do
		rowOne()
		rowTwo()
		print(string.format(""Row %s"", i))
	end
else
	rowOne()
end"
SJxJJnz5,Untitled,CWSmith1701,Bash,Sunday 16th of June 2024 02:04:52 PM CDT,"
The following USE changes are necessary to proceed:
 (see ""package.use"" in the portage(5) man page for more details)
# required by kde-frameworks/kauth-5.116.0::gentoo[policykit]
# required by kde-frameworks/kio-5.116.0::gentoo
# required by dev-util/heaptrack-1.5.0::gentoo[gui]
# required by @selected
# required by @world (argument)
>=sys-auth/polkit-qt-0.200.0 qt5
# required by kde-frameworks/kio-6.3.0::gentoo
# required by kde-frameworks/kcmutils-6.3.0::gentoo
# required by kde-plasma/libplasma-6.0.90-r1::gentoo
# required by kde-plasma/polkit-kde-agent-6.0.90-r1::gentoo
# required by kde-frameworks/kauth-6.3.0-r1::gentoo[policykit]
>=dev-qt/qtbase-6.7.1 libproxy

 * In order to avoid wasting time, backtracking has terminated early
 * due to the above autounmask change(s). The --autounmask-backtrack=y
 * option can be used to force further backtracking, but there is no
 * guarantee that it will produce a solution.

!!! All ebuilds that could satisfy "">=dev-qt/qtbase-6.6.2:6[libproxy]"" have been masked.
!!! One of the following masked packages is required to complete your request:
- dev-qt/qtbase-6.9999::gentoo (masked by: missing keyword)
- dev-qt/qtbase-6.8.9999::gentoo (masked by: missing keyword)
- dev-qt/qtbase-6.7.9999::gentoo (masked by: missing keyword)
- dev-qt/qtbase-6.7.1::gentoo (masked by: )

(dependency required by ""kde-frameworks/kio-6.3.0::gentoo"" [ebuild])
(dependency required by ""kde-frameworks/kcmutils-6.3.0::gentoo"" [ebuild])
(dependency required by ""kde-plasma/libplasma-6.0.90-r1::gentoo"" [ebuild])
(dependency required by ""kde-plasma/polkit-kde-agent-6.0.90-r1::gentoo"" [ebuild])
(dependency required by ""kde-frameworks/kauth-6.3.0-r1::gentoo[policykit]"" [ebuild])
For more information, see the MASKED PACKAGES section in the emerge
man page or refer to the Gentoo Handbook.
"
RrFRx51F,Python datetime objects,3th1ca14aX0r,Python,Sunday 16th of June 2024 01:59:22 PM CDT,"from datetime import datetime, timedelta

# Example 1: Parsing a string into a datetime object
dt_str = ""2023-06-16 10:30:45""
dt_obj = datetime.strptime(dt_str, ""%Y-%m-%d %H:%M:%S"")
print(""Example 1:"", dt_obj)  # Output: Example 1: 2023-06-16 10:30:45

# Example 2: Formatting a datetime object into a string
dt_str = dt_obj.strftime(""%Y/%m/%d %I:%M %p"")
print(""Example 2:"", dt_str)  # Output: Example 2: 2023/06/16 10:30 AM

# Example 3: Performing arithmetic operations on datetime objects
future_dt = dt_obj + timedelta(days=7, hours=3)
print(""Example 3:"", future_dt)  # Output: Example 3: 2023-06-23 13:30:45

past_dt = dt_obj - timedelta(weeks=2, minutes=15)
print(""Example 3 (continued):"", past_dt)  # Output: Example 3 (continued): 2023-06-02 10:15:45

time_diff = future_dt - dt_obj
print(""Example 3 (continued):"", time_diff)  # Output: Example 3 (continued): 7 days, 3:00:00

# Example 4: Comparing datetime objects
dt1 = datetime(2023, 6, 16, 10, 30)
dt2 = datetime(2023, 6, 16, 11, 15)

print(""Example 4:"")
print(dt1 < dt2)  # Output: True
print(dt1 == dt2)  # Output: False
print(dt1 > dt2)  # Output: False"
cfWWXtcT,RUC Lookup Updated,0xd61,JavaScript,Sunday 16th of June 2024 01:25:40 PM CDT,"function lookup(ruc) {
    res = web.Download(""https://turuc.com.py/api/contribuyente/"" + ruc);
    
    var result = """";
    if(!res)
    {
    	dlg.ShowMessage(""No name found for "" + ruc);
    } else {
    	var data = JSON.parse(res);
    	var name = data.data.razonSocial;
    	if(name.indexOf(',') !== -1) {
            var lastName = name.split(',').slice(0, -1).join(' ');
            var firstName = name.split(',').slice(-1).join(' ');
    
            result = firstName + "", "" + lastName;
        } else {
            result = name;
        }
    }
    
    return result;
}"
wPDgmLCT,CC:NumberWorks-Library,super_koder,Lua,Sunday 16th of June 2024 01:01:23 PM CDT,"return {
    -- Arithmetic operations
    [""+""] = function(s)
        local b = table.remove(s)
        local a = table.remove(s)
        table.insert(s, a + b)
    end,
    [""-""] = function(s)
        local b = table.remove(s)
        local a = table.remove(s)
        table.insert(s, a - b)
    end,
    [""*""] = function(s)
        local b = table.remove(s)
        local a = table.remove(s)
        table.insert(s, a * b)
    end,
    [""/""] = function(s)
        local b = table.remove(s)
        local a = table.remove(s)
        table.insert(s, a / b)
    end,
    [""%""] = function(s)
        local b = table.remove(s)
        local a = table.remove(s)
        table.insert(s, a % b)
    end,
 
    -- Boolean
    [""and""] = function(s)
        local b = table.remove(s)
        local a = table.remove(s)
        table.insert(s, (a and b))
    end,
    [""or""] = function(s)
        local b = table.remove(s)
        local a = table.remove(s)
        table.insert(s, (a or b))
    end,
    [""not""] = function(s)
        local a = table.remove(s)
    end,

    -- Comparison
    ["">""] = function(s)
        local b = table.remove(s)
        local a = table.remove(s)
        table.insert(s, a > b)
    end,
    [""<""] = function(s)
        local b = table.remove(s)
        local a = table.remove(s)
        table.insert(s, a < b)
    end,
    ["">=""] = function(s)
        local b = table.remove(s)
        local a = table.remove(s)
        table.insert(s, a >= b)
    end,
    [""<=""] = function(s)
        local b = table.remove(s)
        local a = table.remove(s)
        table.insert(s, a <= b)
    end,
    [""=""] = function(s)
        local b = table.remove(s)
        local a = table.remove(s)
        table.insert(s, a == b)
    end,
 
    -- Lua math library functions
    [""abs""] = function(s)
        local a = table.remove(s)
        table.insert(s, math.abs(a))
    end,
    [""acos""] = function(s)
        local a = table.remove(s)
        table.insert(s, math.acos(a))
    end,
    [""asin""] = function(s)
        local a = table.remove(s)
        table.insert(s, math.asin(a))
    end,
    [""atan""] = function(s)
        local a = table.remove(s)
        table.insert(s, math.atan(a))
    end,
    [""ceil""] = function(s)
        local a = table.remove(s)
        table.insert(s, math.ceil(a))
    end,
    [""cos""] = function(s)
        local a = table.remove(s)
        table.insert(s, math.cos(a))
    end,
    [""deg""] = function(s)
        local a = table.remove(s)
        table.insert(s, math.deg(a))
    end,
    [""exp""] = function(s)
        local a = table.remove(s)
        table.insert(s, math.exp(a))
    end,
    [""floor""] = function(s)
        local a = table.remove(s)
        table.insert(s, math.floor(a))
    end,
    [""log""] = function(s)
        local a = table.remove(s)
        table.insert(s, math.log(a))
    end,
    [""max""] = function(s)
        local b = table.remove(s)
        local a = table.remove(s)
        table.insert(s, math.max(a, b))
    end,
    [""min""] = function(s)
        local b = table.remove(s)
        local a = table.remove(s)
        table.insert(s, math.min(a, b))
    end,
    [""rad""] = function(s)
        local a = table.remove(s)
        table.insert(s, math.rad(a))
    end,
    [""sin""] = function(s)
        local a = table.remove(s)
        table.insert(s, math.sin(a))
    end,
    [""sqrt""] = function(s)
        local a = table.remove(s)
        table.insert(s, math.sqrt(a))
    end,
    [""tan""] = function(s)
        local a = table.remove(s)
        table.insert(s, math.tan(a))
    end,
 
    -- Stack manipulation functions
    [""swap""] = function(s)
        local a = table.remove(s)
        local b = table.remove(s)
        table.insert(s, a)
        table.insert(s, b)
    end,
    [""dup""] = function(s)
        local a = s[#s]
        table.insert(s, a)
    end,
    [""drop""] = function(s)
        table.remove(s)
    end,
 
    -- Word definition
    [""define""] = function(s)
        local body = table.remove(s)
        local name = table.remove(s)
 
        Dictionary[name] = body
    end,
    [""undef""] = function(s)
        local name = table.remove(s)
        Dictionary[name] = nil
    end,
 
    -- Control flow
    [""if""] = function(s)
        local ifTrue = table.remove(s)
        local condition = table.remove(s)
 
        eval(condition)
 
        if table.remove(s) then eval(ifTrue) end
    end,
    [""ifelse""] = function(s)
        local ifFalse = table.remove(s)
        local ifTrue = table.remove(s)
        local condition = table.remove(s)
 
        eval(condition)
 
        if table.remove(s) then eval(ifTrue) else eval(ifFalse) end
    end,
 
    -- Utility 
    ["".""] = function(s)
        local a = table.remove(s)
        if type(a) == ""boolean"" then
            print(a and ""true"" or ""false"")
        else
            print(a)
        end
    end,
    ["".s""] = function(s)
        write(textutils.serialize(s))
        write(""\n"")
    end,
    [""clear""] = function(s)
        term.clear()
        term.setCursorPos(1, 1)
    end,
}"
ykJehDhU,CC:NumberWorks-OS,super_koder,Lua,Sunday 16th of June 2024 01:00:39 PM CDT,"Functions = require ""library""
Dictionary = {}
Stack = {}
 
function eval(source) 
    for _, token in ipairs(source) do
        if type(token) == ""table"" then
            table.insert(Stack, token)
        elseif tonumber(token) ~= nil then
            table.insert(Stack, tonumber(token))
        elseif token:sub(1, 1) == ""#"" then
            table.insert(Stack, token:sub(2))
        elseif token:sub(1, 1) == '""' then
            table.insert(Stack, token:sub(2, #token - 1))
        elseif Functions[token] ~= nil then
            Functions[token](Stack)
        elseif Dictionary[token] ~= nil then
            eval(Dictionary[token])
        else
            term.setTextColor(colors.red)
            print(""Unknown token: ""..token)
            term.setTextColor(colors.white)

            return
        end
    end
end
 
-- Reading raw text
local function parse(str)
    local stack = {}
    local current_list = {}
    local buffer = """"
    local inQuotes = false
    local quoteChar = nil

    local function append()
        if buffer ~= """" then
            table.insert(current_list, buffer)
            buffer = """"
        end
    end

    for c in str:gmatch ""."" do
        if inQuotes then
            if c == quoteChar then
                buffer = buffer .. c
                append()
                inQuotes = false
                quoteChar = nil
            else
                buffer = buffer .. c
            end
        else
            if c == '{' then
                append()
                table.insert(stack, current_list)
                current_list = {}
            elseif c == '}' then
                append()
                local last = table.remove(stack)
                table.insert(last, current_list)
                current_list = last
            elseif c == '""' or c == ""'"" then
                append()
                buffer = buffer .. c
                inQuotes = true
                quoteChar = c
            elseif c:match(""[%w%p]"") ~= nil then
                buffer = buffer .. c
            elseif c:match(""%s"") ~= nil then
                append()
            end
        end
    end
    append()

    -- Handle the case where the input string does not have balanced braces
    while #stack > 0 do
        local last = table.remove(stack)
        table.insert(last, current_list)
        current_list = last
    end

    return current_list
end
 
local function readCode(text)
    eval(parse(text))
end
 
-- main, to be changed before ported to ComputerCraft
 
term.setBackgroundColor(colors.blue)
readCode(""clear"")
 
 
while true do 
    write(""$ "")
    local text = read()
    if text == ""quit"" then break end
 
    readCode(text)
end"
Xuz7HPLg,BLADE BALL | DUNGKEE | ALCHEMYHUB | FFJ HUB | INIFINITY HUB,Nel9Yt,Lua,Sunday 16th of June 2024 12:41:06 PM CDT,"DUNGKEE - pulawat6680

xpcall(function()
loadstring(game:HttpGet(""https://github.com/Stang001/pulawat/blob/main/BladeBall.lua?raw=true""))()
end,function()
warn(""Script error!"")
end)

FFJ - ffj2.0

getgenv().IcognitoMode = true
loadstring(game:HttpGet(""https://raw.githubusercontent.com/FFJ1/Roblox-Exploits/main/scripts/BladeBallV3.lua""))()

ALCHEMYHUB - x.nep

loadstring(game:HttpGet(""https://scripts.alchemyhub.xyz""))()

INIFINITY HUB - dexz0

--IT IS UNDER DEVELOPMENT JOIN DISCORD FOR MORE INFORMATION: https://discord.com/invite/ppdQZM6aFb"
NrT755ma,Restrict plugin menu snippet (mu plugin),ludovicsclain,PHP,Sunday 16th of June 2024 12:40:34 PM CDT,"/*
Plugin Name: Restrict Reusable Blocks Extended Access
Description: Restrict access to Reusable Blocks Extended menu to user with ID 123.
*/

add_action('admin_menu', 'restrict_reusable_blocks_menu', 100);
add_action('current_screen', 'restrict_reusable_blocks_page_access');

function restrict_reusable_blocks_menu() {
    if (get_current_user_id() !== 123) {
        remove_menu_page('edit.php?post_type=wp_block');
    }
}

function restrict_reusable_blocks_page_access() {
    if (get_current_user_id() !== 123 && is_admin()) {
        $screen = get_current_screen();
        if ($screen && $screen->id === 'edit-wp_block') {
            wp_die(__('You do not have sufficient rights to access this page.'));
        }
    }
}
"
